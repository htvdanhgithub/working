

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Aug 01 09:47:24 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     	;# 
    32  0001                     	;# 
    33  0002                     	;# 
    34  0003                     	;# 
    35  0004                     	;# 
    36  0005                     	;# 
    37  0006                     	;# 
    38  0007                     	;# 
    39  0008                     	;# 
    40  0009                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000E                     	;# 
    45  0011                     	;# 
    46  0012                     	;# 
    47  0015                     	;# 
    48  0016                     	;# 
    49  0016                     	;# 
    50  0017                     	;# 
    51  0018                     	;# 
    52  0019                     	;# 
    53  001A                     	;# 
    54  001B                     	;# 
    55  001C                     	;# 
    56  001E                     	;# 
    57  001F                     	;# 
    58  008C                     	;# 
    59  008E                     	;# 
    60  0091                     	;# 
    61  0092                     	;# 
    62  0095                     	;# 
    63  0096                     	;# 
    64  0097                     	;# 
    65  0098                     	;# 
    66  0099                     	;# 
    67  009A                     	;# 
    68  009B                     	;# 
    69  009B                     	;# 
    70  009C                     	;# 
    71  009D                     	;# 
    72  009E                     	;# 
    73  010C                     	;# 
    74  010E                     	;# 
    75  0111                     	;# 
    76  0112                     	;# 
    77  0113                     	;# 
    78  0114                     	;# 
    79  0115                     	;# 
    80  0116                     	;# 
    81  0117                     	;# 
    82  0118                     	;# 
    83  0119                     	;# 
    84  011A                     	;# 
    85  011B                     	;# 
    86  011D                     	;# 
    87  011D                     	;# 
    88  018C                     	;# 
    89  018E                     	;# 
    90  0191                     	;# 
    91  0191                     	;# 
    92  0192                     	;# 
    93  0193                     	;# 
    94  0193                     	;# 
    95  0193                     	;# 
    96  0194                     	;# 
    97  0195                     	;# 
    98  0196                     	;# 
    99  0199                     	;# 
   100  019A                     	;# 
   101  019B                     	;# 
   102  019B                     	;# 
   103  019B                     	;# 
   104  019B                     	;# 
   105  019C                     	;# 
   106  019C                     	;# 
   107  019D                     	;# 
   108  019E                     	;# 
   109  019F                     	;# 
   110  020C                     	;# 
   111  020E                     	;# 
   112  0211                     	;# 
   113  0211                     	;# 
   114  0212                     	;# 
   115  0212                     	;# 
   116  0213                     	;# 
   117  0213                     	;# 
   118  0214                     	;# 
   119  0214                     	;# 
   120  0215                     	;# 
   121  0215                     	;# 
   122  0215                     	;# 
   123  0216                     	;# 
   124  0216                     	;# 
   125  0217                     	;# 
   126  0217                     	;# 
   127  0291                     	;# 
   128  0291                     	;# 
   129  0292                     	;# 
   130  0293                     	;# 
   131  0294                     	;# 
   132  0295                     	;# 
   133  0295                     	;# 
   134  0296                     	;# 
   135  0391                     	;# 
   136  0392                     	;# 
   137  0393                     	;# 
   138  039A                     	;# 
   139  039C                     	;# 
   140  039D                     	;# 
   141  039E                     	;# 
   142  039F                     	;# 
   143  0FE4                     	;# 
   144  0FE5                     	;# 
   145  0FE6                     	;# 
   146  0FE7                     	;# 
   147  0FE8                     	;# 
   148  0FE9                     	;# 
   149  0FEA                     	;# 
   150  0FEB                     	;# 
   151  0FED                     	;# 
   152  0FEE                     	;# 
   153  0FEF                     	;# 
   154                           
   155                           	psect	idataCOMMON
   156  02B7                     __pidataCOMMON:	
   157                           
   158                           ;initializer for _low_half_rcv
   159  02B7  3401               	retlw	1
   160                           
   161                           ;initializer for _low_rcv
   162  02B8  3401               	retlw	1
   163                           
   164                           ;initializer for _pstr_rcv
   165  02B9  3447               	retlw	low (_msg_rcv| 0)
   166                           
   167                           	psect	idataBANK0
   168  02B2                     __pidataBANK0:	
   169                           
   170                           ;initializer for _pmsg
   171  02B2  34A0               	retlw	low (_msg| 0)
   172                           
   173                           ;initializer for _pmsg_rcv
   174  02B3  3447               	retlw	low (_msg_rcv| 0)
   175                           
   176                           ;initializer for _duty
   177  02B4  3432               	retlw	50
   178  02B5  347D               	retlw	125
   179  02B6  34C8               	retlw	200
   180                           
   181                           	psect	stringtext
   182  029E                     __pstringtext:	
   183  029E                     _start_mark:	
   184  029E  34DE               	retlw	222
   185  029F  34DF               	retlw	223
   186  02A0  34E0               	retlw	224
   187  02A1  34E1               	retlw	225
   188  02A2                     __end_of_start_mark:	
   189  02A2                     _stop_mark:	
   190  02A2  34E1               	retlw	225
   191  02A3  34E0               	retlw	224
   192  02A4  34DF               	retlw	223
   193  02A5  34DE               	retlw	222
   194  02A6                     __end_of_stop_mark:	
   195  001E                     _CPSCON0bits	set	30
   196  000B                     _INTCONbits	set	11
   197  0064                     _RA4	set	100
   198  0070                     _RC0	set	112
   199  0071                     _RC1	set	113
   200  0072                     _RC2	set	114
   201  0073                     _RC3	set	115
   202  0074                     _RC4	set	116
   203  0075                     _RC5	set	117
   204  0095                     _OPTION_REGbits	set	149
   205  008C                     _TRISAbits	set	140
   206  008E                     _TRISCbits	set	142
   207  018C                     _ANSELAbits	set	396
   208  018E                     _ANSELCbits	set	398
   209                           
   210                           ; #config settings
   211  0000                     
   212                           	psect	cinit
   213  0037                     start_initialization:	
   214  0037                     __initialization:	
   215                           
   216                           ; Clear objects allocated to COMMON
   217  0037  01FC               	clrf	__pbssCOMMON& (0+127)
   218  0038  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   219                           
   220                           ; Clear objects allocated to BANK0
   221  0039  3020               	movlw	low __pbssBANK0
   222  003A  0084               	movwf	4
   223  003B  3000               	movlw	high __pbssBANK0
   224  003C  0085               	movwf	5
   225  003D  3031               	movlw	49
   226  003E  22A6               	fcall	clear_ram0
   227                           
   228                           ; Clear objects allocated to BANK1
   229  003F  30A0               	movlw	low __pbssBANK1
   230  0040  0084               	movwf	4
   231  0041  3000               	movlw	high __pbssBANK1
   232  0042  0085               	movwf	5
   233  0043  300A               	movlw	10
   234  0044  22A6               	fcall	clear_ram0
   235                           
   236                           ; Initialize objects allocated to COMMON
   237  0045  22B7               	fcall	__pidataCOMMON	;fetch initializer
   238  0046  00F9               	movwf	__pdataCOMMON& (0+127)
   239  0047  22B8               	fcall	__pidataCOMMON+1	;fetch initializer
   240  0048  00FA               	movwf	(__pdataCOMMON+1)& (0+127)
   241  0049  22B9               	fcall	__pidataCOMMON+2	;fetch initializer
   242  004A  00FB               	movwf	(__pdataCOMMON+2)& (0+127)
   243                           
   244                           ; Initialize objects allocated to BANK0
   245  004B  30B2               	movlw	low __pidataBANK0
   246  004C  0084               	movwf	4
   247  004D  3082               	movlw	(high __pidataBANK0)| (0+128)
   248  004E  0085               	movwf	5
   249  004F  0012               	moviw fsr0++
   250  0050  00E2               	movwf	__pdataBANK0& (0+127)
   251  0051  0012               	moviw fsr0++
   252  0052  00E3               	movwf	(__pdataBANK0+1)& (0+127)
   253  0053  0012               	moviw fsr0++
   254  0054  00E4               	movwf	(__pdataBANK0+2)& (0+127)
   255  0055  0012               	moviw fsr0++
   256  0056  00E5               	movwf	(__pdataBANK0+3)& (0+127)
   257  0057  0012               	moviw fsr0++
   258  0058  00E6               	movwf	(__pdataBANK0+4)& (0+127)
   259  0059                     end_of_initialization:	
   260                           ;End of C runtime variable initialization code
   261                           
   262  0059                     __end_of__initialization:	
   263  0059  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   264  005A  0020               	movlb	0
   265  005B  2A3D               	ljmp	_main	;jump to C main() function
   266                           
   267                           	psect	bssCOMMON
   268  007C                     __pbssCOMMON:	
   269  007C                     _count_rcv:	
   270  007C                     	ds	1
   271  007D                     _end_index_rcv:	
   272  007D                     	ds	1
   273                           
   274                           	psect	dataCOMMON
   275  0079                     __pdataCOMMON:	
   276  0079                     _low_half_rcv:	
   277  0079                     	ds	1
   278  007A                     _low_rcv:	
   279  007A                     	ds	1
   280  007B                     _pstr_rcv:	
   281  007B                     	ds	1
   282                           
   283                           	psect	bssBANK0
   284  0020                     __pbssBANK0:	
   285  0020                     _client_conn:	
   286  0020                     	ds	5
   287  0025                     _start_index_rcv:	
   288  0025                     	ds	1
   289  0026                     _time:	
   290  0026                     	ds	1
   291  0027                     _buffer_rcv:	
   292  0027                     	ds	32
   293  0047                     _msg_rcv:	
   294  0047                     	ds	10
   295                           
   296                           	psect	dataBANK0
   297  0062                     __pdataBANK0:	
   298  0062                     _pmsg:	
   299  0062                     	ds	1
   300  0063                     _pmsg_rcv:	
   301  0063                     	ds	1
   302  0064                     _duty:	
   303  0064                     	ds	3
   304                           
   305                           	psect	bssBANK1
   306  00A0                     __pbssBANK1:	
   307  00A0                     _msg:	
   308  00A0                     	ds	10
   309                           
   310                           	psect	clrtext
   311  02A6                     clear_ram0:	
   312                           ;	Called with FSR0 containing the base address, and
   313                           ;	WREG with the size to clear
   314                           
   315  02A6  0064               	clrwdt	;clear the watchdog before getting into this loop
   316  02A7                     clrloop0:	
   317  02A7  0180               	clrf	0	;clear RAM location pointed to by FSR
   318  02A8  3101               	addfsr 0,1
   319  02A9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   320  02AA  2AA7               	goto	clrloop0	;have we reached the end yet?
   321  02AB  3400               	retlw	0	;all done for this memory range, return
   322                           
   323                           	psect	cstackCOMMON
   324  0070                     __pcstackCOMMON:	
   325  0070                     ?_get_next_index:	
   326  0070                     ?_receive_input:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     ?_get_msg:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_InitIO:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ?_InitTimerInt:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ?_InitInputDataInt:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0070                     ?_ISR:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0070                     ?_main:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ?i1_get_next_index:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ??i1_get_next_index:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     i1get_next_index@index:	
   354                           ; 1 bytes @ 0x0
   355                           
   356                           
   357                           ; 1 bytes @ 0x0
   358  0070                     	ds	1
   359  0071                     ??_receive_input:	
   360                           
   361                           ; 1 bytes @ 0x1
   362  0071                     	ds	1
   363  0072                     receive_input@value:	
   364                           
   365                           ; 1 bytes @ 0x2
   366  0072                     	ds	1
   367  0073                     receive_input@byte1:	
   368                           
   369                           ; 1 bytes @ 0x3
   370  0073                     	ds	1
   371  0074                     receive_input@byte2:	
   372                           
   373                           ; 1 bytes @ 0x4
   374  0074                     	ds	1
   375  0075                     ??_ISR:	
   376                           
   377                           ; 1 bytes @ 0x5
   378  0075                     	ds	2
   379  0077                     ISR@value:	
   380                           
   381                           ; 1 bytes @ 0x7
   382  0077                     	ds	1
   383  0078                     ISR@byte:	
   384                           
   385                           ; 1 bytes @ 0x8
   386  0078                     	ds	1
   387                           
   388                           	psect	cstackBANK0
   389  0051                     __pcstackBANK0:	
   390  0051                     ??_get_next_index:	
   391  0051                     ?_get_plus_index:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0051                     ?_get_minus_index:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0051                     ?_get_distance:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0051                     ?_extract_RGB_DATA_RQT_CMD:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0051                     ??_InitIO:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0051                     ??_InitTimerInt:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0051                     ??_InitInputDataInt:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0051                     get_next_index@index:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0051                     get_plus_index@add:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0051                     get_minus_index@sub:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0051                     get_distance@end_index:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0051                     extract_RGB_DATA_RQT_CMD@duty:	
   425                           ; 1 bytes @ 0x0
   426                           
   427                           
   428                           ; 1 bytes @ 0x0
   429  0051                     	ds	1
   430  0052                     ??_get_plus_index:	
   431  0052                     ??_get_minus_index:	
   432                           ; 1 bytes @ 0x1
   433                           
   434  0052                     ??_get_distance:	
   435                           ; 1 bytes @ 0x1
   436                           
   437  0052                     ??_extract_RGB_DATA_RQT_CMD:	
   438                           ; 1 bytes @ 0x1
   439                           
   440  0052                     get_minus_index@index:	
   441                           ; 1 bytes @ 0x1
   442                           
   443  0052                     get_distance@start_index:	
   444                           ; 1 bytes @ 0x1
   445                           
   446                           
   447                           ; 1 bytes @ 0x1
   448  0052                     	ds	1
   449  0053                     get_plus_index@index:	
   450  0053                     extract_RGB_DATA_RQT_CMD@pmsg:	
   451                           ; 1 bytes @ 0x2
   452                           
   453                           
   454                           ; 1 bytes @ 0x2
   455  0053                     	ds	1
   456  0054                     ?_get_msg_index:	
   457  0054                     get_msg_index@end_index:	
   458                           ; 1 bytes @ 0x3
   459                           
   460  0054                     extract_RGB_DATA_RQT_CMD@prqt:	
   461                           ; 1 bytes @ 0x3
   462                           
   463                           
   464                           ; 1 bytes @ 0x3
   465  0054                     	ds	1
   466  0055                     ??_get_msg_index:	
   467                           
   468                           ; 1 bytes @ 0x4
   469  0055                     	ds	2
   470  0057                     get_msg_index@start_index:	
   471                           
   472                           ; 1 bytes @ 0x6
   473  0057                     	ds	1
   474  0058                     get_msg_index@i:	
   475                           
   476                           ; 1 bytes @ 0x7
   477  0058                     	ds	1
   478  0059                     ??_get_msg:	
   479                           
   480                           ; 1 bytes @ 0x8
   481  0059                     	ds	2
   482  005B                     get_msg@pstr:	
   483                           
   484                           ; 1 bytes @ 0xA
   485  005B                     	ds	1
   486  005C                     get_msg@i:	
   487                           
   488                           ; 1 bytes @ 0xB
   489  005C                     	ds	1
   490  005D                     get_msg@pmsg:	
   491                           
   492                           ; 1 bytes @ 0xC
   493  005D                     	ds	1
   494  005E                     get_msg@start_index:	
   495                           
   496                           ; 1 bytes @ 0xD
   497  005E                     	ds	1
   498  005F                     get_msg@end_index:	
   499                           
   500                           ; 1 bytes @ 0xE
   501  005F                     	ds	1
   502  0060                     get_msg@temp:	
   503                           
   504                           ; 1 bytes @ 0xF
   505  0060                     	ds	1
   506  0061                     ??_main:	
   507                           
   508                           ; 1 bytes @ 0x10
   509  0061                     	ds	1
   510                           
   511                           	psect	maintext
   512  023D                     __pmaintext:	
   513 ;;
   514 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   515 ;;
   516 ;; *************** function _main *****************
   517 ;; Defined at:
   518 ;;		line 131 in file "led_pwm.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;		None
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      void 
   525 ;; Registers used:
   526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   527 ;; Tracked objects:
   528 ;;		On entry : B1F/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMMON   BANK0   BANK1
   532 ;;      Params:         0       0       0
   533 ;;      Locals:         0       0       0
   534 ;;      Temps:          0       1       0
   535 ;;      Totals:         0       1       0
   536 ;;Total ram usage:        1 bytes
   537 ;; Hardware stack levels required when called:    6
   538 ;; This function calls:
   539 ;;		_InitIO
   540 ;;		_InitInputDataInt
   541 ;;		_InitTimerInt
   542 ;;		_extract_RGB_DATA_RQT_CMD
   543 ;;		_get_msg
   544 ;; This function is called by:
   545 ;;		Startup code after reset
   546 ;; This function uses a non-reentrant model
   547 ;;
   548                           
   549                           
   550                           ;psect for function _main
   551  023D                     _main:	
   552                           
   553                           ;led_pwm.c: 133: InitIO();
   554                           
   555                           ;incstack = 0
   556                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   557  023D  2221               	fcall	_InitIO
   558                           
   559                           ;led_pwm.c: 134: InitTimerInt();
   560  023E  2289               	fcall	_InitTimerInt
   561                           
   562                           ;led_pwm.c: 135: InitInputDataInt();
   563  023F  22AC               	fcall	_InitInputDataInt
   564                           
   565                           ;led_pwm.c: 137: RC1 = 0;
   566  0240  0020               	movlb	0	; select bank0
   567  0241  108E               	bcf	14,1	;volatile
   568                           
   569                           ;led_pwm.c: 138: RC0 = 0;
   570  0242  100E               	bcf	14,0	;volatile
   571                           
   572                           ;led_pwm.c: 139: RA4 = 0;
   573  0243  120C               	bcf	12,4	;volatile
   574  0244                     l1025:	
   575                           ;led_pwm.c: 141: while(1)
   576                           
   577                           
   578                           ;led_pwm.c: 142: {
   579                           ;led_pwm.c: 143: if(get_msg(pmsg) == 1)
   580  0244  0020               	movlb	0	; select bank0
   581  0245  0862               	movf	_pmsg,w
   582  0246  21BB               	fcall	_get_msg
   583  0247  3A01               	xorlw	1
   584  0248  1D03               	skipz
   585  0249  2A44               	goto	l1025
   586                           
   587                           ;led_pwm.c: 144: {
   588                           ;led_pwm.c: 145: extract_RGB_DATA_RQT_CMD(pmsg, duty);
   589  024A  3064               	movlw	(low (_duty| 0))& (0+255)
   590  024B  0020               	movlb	0	; select bank0
   591  024C  00E1               	movwf	??_main
   592  024D  0861               	movf	??_main,w
   593  024E  00D1               	movwf	extract_RGB_DATA_RQT_CMD@duty
   594  024F  0862               	movf	_pmsg,w
   595  0250  21F9               	fcall	_extract_RGB_DATA_RQT_CMD
   596  0251  2A44               	goto	l1025
   597  0252                     __end_of_main:	
   598                           
   599                           	psect	text1
   600  01BB                     __ptext1:	
   601 ;; *************** function _get_msg *****************
   602 ;; Defined at:
   603 ;;		line 36 in file "msg.h"
   604 ;; Parameters:    Size  Location     Type
   605 ;;  pmsg            1    wreg     PTR struct .
   606 ;;		 -> msg(10), msg_rcv(10), 
   607 ;; Auto vars:     Size  Location     Type
   608 ;;  pmsg            1   12[BANK0 ] PTR struct .
   609 ;;		 -> msg(10), msg_rcv(10), 
   610 ;;  temp            1   15[BANK0 ] unsigned char 
   611 ;;  end_index       1   14[BANK0 ] unsigned char 
   612 ;;  start_index     1   13[BANK0 ] unsigned char 
   613 ;;  i               1   11[BANK0 ] unsigned char 
   614 ;;  pstr            1   10[BANK0 ] PTR unsigned char 
   615 ;;		 -> msg(10), msg_rcv(10), 
   616 ;; Return value:  Size  Location     Type
   617 ;;                  1    wreg      unsigned char 
   618 ;; Registers used:
   619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   620 ;; Tracked objects:
   621 ;;		On entry : 0/0
   622 ;;		On exit  : 0/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMMON   BANK0   BANK1
   625 ;;      Params:         0       0       0
   626 ;;      Locals:         0       6       0
   627 ;;      Temps:          0       2       0
   628 ;;      Totals:         0       8       0
   629 ;;Total ram usage:        8 bytes
   630 ;; Hardware stack levels used:    1
   631 ;; Hardware stack levels required when called:    5
   632 ;; This function calls:
   633 ;;		_get_distance
   634 ;;		_get_msg_index
   635 ;;		_get_next_index
   636 ;; This function is called by:
   637 ;;		_main
   638 ;;		_handle_received_cmds
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           
   643                           ;psect for function _get_msg
   644  01BB                     _get_msg:	
   645                           
   646                           ;incstack = 0
   647                           ; Regs used in _get_msg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   648                           ;get_msg@pmsg stored from wreg
   649  01BB  0020               	movlb	0	; select bank0
   650  01BC  00DD               	movwf	get_msg@pmsg
   651                           
   652                           ;msg.h: 38: uint8_t *pstr = (uint8_t *)pmsg;
   653  01BD  085D               	movf	get_msg@pmsg,w
   654  01BE  00D9               	movwf	??_get_msg
   655  01BF  0859               	movf	??_get_msg,w
   656  01C0  00DB               	movwf	get_msg@pstr
   657                           
   658                           ;msg.h: 39: uint8_t start_index, end_index;
   659                           ;msg.h: 40: uint8_t i = 0;
   660  01C1  01DC               	clrf	get_msg@i
   661                           
   662                           ;msg.h: 41: uint8_t temp;
   663                           ;msg.h: 42: if(get_msg_index(&start_index, &end_index) == 1)
   664  01C2  305F               	movlw	(low (get_msg@end_index| 0))& (0+255)
   665  01C3  00D9               	movwf	??_get_msg
   666  01C4  0859               	movf	??_get_msg,w
   667  01C5  00D4               	movwf	get_msg_index@end_index
   668  01C6  305E               	movlw	(low (get_msg@start_index| 0))& (0+255)
   669  01C7  205C               	fcall	_get_msg_index
   670  01C8  3A01               	xorlw	1
   671  01C9  1D03               	skipz
   672  01CA  29F7               	goto	l969
   673                           
   674                           ;msg.h: 43: {
   675                           ;msg.h: 44: temp = start_index;
   676  01CB  0020               	movlb	0	; select bank0
   677  01CC  085E               	movf	get_msg@start_index,w
   678  01CD                     L1:	
   679  01CD  00D9               	movwf	??_get_msg
   680  01CE  0859               	movf	??_get_msg,w
   681  01CF  00E0               	movwf	get_msg@temp
   682                           
   683                           ;msg.h: 46: {
   684                           ;msg.h: 47: pstr[i++] = buffer_rcv[temp];
   685                           
   686                           ;msg.h: 45: while(1)
   687  01D0  0860               	movf	get_msg@temp,w
   688  01D1  3E27               	addlw	(low (_buffer_rcv| 0))& (0+255)
   689  01D2  0086               	movwf	6
   690  01D3  0187               	clrf	7
   691  01D4  0801               	movf	1,w
   692  01D5  00D9               	movwf	??_get_msg
   693  01D6  085C               	movf	get_msg@i,w
   694  01D7  075B               	addwf	get_msg@pstr,w
   695  01D8  00DA               	movwf	??_get_msg+1
   696  01D9  085A               	movf	??_get_msg+1,w
   697  01DA  0086               	movwf	6
   698  01DB  0187               	clrf	7
   699  01DC  0859               	movf	??_get_msg,w
   700  01DD  0081               	movwf	1
   701  01DE  3001               	movlw	1
   702  01DF  00D9               	movwf	??_get_msg
   703  01E0  0859               	movf	??_get_msg,w
   704  01E1  07DC               	addwf	get_msg@i,f
   705                           
   706                           ;msg.h: 48: buffer_rcv[temp] = 0;
   707  01E2  0860               	movf	get_msg@temp,w
   708  01E3  3E27               	addlw	(low (_buffer_rcv| 0))& (0+255)
   709  01E4  0086               	movwf	6
   710  01E5  0187               	clrf	7
   711  01E6  0181               	clrf	1
   712                           
   713                           ;msg.h: 49: if(get_distance(temp, end_index) == 0)
   714  01E7  085F               	movf	get_msg@end_index,w
   715  01E8  00D9               	movwf	??_get_msg
   716  01E9  0859               	movf	??_get_msg,w
   717  01EA  00D1               	movwf	get_distance@end_index
   718  01EB  0860               	movf	get_msg@temp,w
   719  01EC  2261               	fcall	_get_distance
   720  01ED  3A00               	xorlw	0
   721  01EE  1903               	btfsc	3,2
   722  01EF  29F5               	goto	l965
   723                           
   724                           ;msg.h: 52: }
   725                           ;msg.h: 53: temp = get_next_index(temp);
   726                           
   727                           ;msg.h: 50: {
   728                           ;msg.h: 51: break;
   729  01F0  0020               	movlb	0	; select bank0
   730  01F1  0860               	movf	get_msg@temp,w
   731  01F2  227E               	fcall	_get_next_index
   732  01F3  0020               	movlb	0	; select bank0
   733  01F4  29CD               	goto	L1
   734  01F5                     l965:	
   735                           
   736                           ;msg.h: 54: }
   737                           ;msg.h: 56: return 1;
   738  01F5  3001               	movlw	1
   739  01F6  0008               	return
   740  01F7                     l969:	
   741                           
   742                           ;msg.h: 57: }
   743                           ;msg.h: 59: return 0;
   744  01F7  3000               	movlw	0
   745  01F8  0008               	return
   746  01F9                     __end_of_get_msg:	
   747                           
   748                           	psect	text2
   749  005C                     __ptext2:	
   750 ;; *************** function _get_msg_index *****************
   751 ;; Defined at:
   752 ;;		line 82 in file "circle_buffer.h"
   753 ;; Parameters:    Size  Location     Type
   754 ;;  start_index     1    wreg     PTR unsigned char 
   755 ;;		 -> get_msg@start_index(1), 
   756 ;;  end_index       1    3[BANK0 ] PTR unsigned char 
   757 ;;		 -> get_msg@end_index(1), 
   758 ;; Auto vars:     Size  Location     Type
   759 ;;  start_index     1    6[BANK0 ] PTR unsigned char 
   760 ;;		 -> get_msg@start_index(1), 
   761 ;;  i               1    7[BANK0 ] unsigned char 
   762 ;; Return value:  Size  Location     Type
   763 ;;                  1    wreg      unsigned char 
   764 ;; Registers used:
   765 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   766 ;; Tracked objects:
   767 ;;		On entry : 0/0
   768 ;;		On exit  : 0/0
   769 ;;		Unchanged: 0/0
   770 ;; Data sizes:     COMMON   BANK0   BANK1
   771 ;;      Params:         0       1       0
   772 ;;      Locals:         0       2       0
   773 ;;      Temps:          0       2       0
   774 ;;      Totals:         0       5       0
   775 ;;Total ram usage:        5 bytes
   776 ;; Hardware stack levels used:    1
   777 ;; Hardware stack levels required when called:    4
   778 ;; This function calls:
   779 ;;		_get_distance
   780 ;;		_get_minus_index
   781 ;;		_get_next_index
   782 ;;		_get_plus_index
   783 ;; This function is called by:
   784 ;;		_get_msg
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788                           
   789                           ;psect for function _get_msg_index
   790  005C                     _get_msg_index:	
   791                           
   792                           ;incstack = 0
   793                           ; Regs used in _get_msg_index: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   794                           ;get_msg_index@start_index stored from wreg
   795  005C  0020               	movlb	0	; select bank0
   796  005D  00D7               	movwf	get_msg_index@start_index
   797                           
   798                           ;circle_buffer.h: 104: uint8_t i;
   799                           ;circle_buffer.h: 105: *start_index = 0xFF;
   800  005E  30FF               	movlw	255
   801  005F  00D5               	movwf	??_get_msg_index
   802  0060  0857               	movf	get_msg_index@start_index,w
   803  0061  0086               	movwf	6
   804  0062  0187               	clrf	7
   805  0063  0855               	movf	??_get_msg_index,w
   806  0064  0081               	movwf	1
   807                           
   808                           ;circle_buffer.h: 106: *end_index = 0xFF;
   809  0065  30FF               	movlw	255
   810  0066  00D5               	movwf	??_get_msg_index
   811  0067  0854               	movf	get_msg_index@end_index,w
   812  0068  0086               	movwf	6
   813  0069  0187               	clrf	7
   814  006A  0855               	movf	??_get_msg_index,w
   815  006B  0081               	movwf	1
   816                           
   817                           ;circle_buffer.h: 108: if(low_half_rcv == 0)
   818  006C  0879               	movf	_low_half_rcv,w
   819  006D  1D03               	btfss	3,2
   820  006E  2871               	goto	l871
   821                           
   822                           ;circle_buffer.h: 109: {
   823                           ;circle_buffer.h: 110: return 0;
   824  006F  3000               	movlw	0
   825  0070  0008               	return
   826  0071                     l871:	
   827                           
   828                           ;circle_buffer.h: 111: }
   829                           ;circle_buffer.h: 112: if(get_distance(start_index_rcv, end_index_rcv) <= 7)
   830  0071  087D               	movf	_end_index_rcv,w
   831  0072  00D5               	movwf	??_get_msg_index
   832  0073  0855               	movf	??_get_msg_index,w
   833  0074  00D1               	movwf	get_distance@end_index
   834  0075  0825               	movf	_start_index_rcv,w
   835  0076  2261               	fcall	_get_distance
   836  0077  0020               	movlb	0	; select bank0
   837  0078  00D6               	movwf	??_get_msg_index+1
   838  0079  3008               	movlw	8
   839  007A  0256               	subwf	??_get_msg_index+1,w
   840  007B  1803               	skipnc
   841  007C  287F               	goto	l877
   842                           
   843                           ;circle_buffer.h: 113: {
   844                           ;circle_buffer.h: 114: return 0;
   845  007D  3000               	movlw	0
   846  007E  0008               	return
   847  007F                     l877:	
   848                           
   849                           ;circle_buffer.h: 115: }
   850                           ;circle_buffer.h: 116: i = start_index_rcv;
   851  007F  0825               	movf	_start_index_rcv,w
   852  0080                     L2:	
   853  0080  00D5               	movwf	??_get_msg_index
   854  0081  0855               	movf	??_get_msg_index,w
   855  0082  00D8               	movwf	get_msg_index@i
   856  0083  087D               	movf	_end_index_rcv,w
   857  0084  00D5               	movwf	??_get_msg_index
   858  0085  0855               	movf	??_get_msg_index,w
   859  0086  00D1               	movwf	get_distance@end_index
   860  0087  0858               	movf	get_msg_index@i,w
   861  0088  2261               	fcall	_get_distance
   862  0089  0020               	movlb	0	; select bank0
   863  008A  00D6               	movwf	??_get_msg_index+1
   864  008B  3003               	movlw	3
   865  008C  0256               	subwf	??_get_msg_index+1,w
   866  008D  1C03               	btfss	3,0
   867  008E  293B               	goto	l903
   868                           
   869                           ;circle_buffer.h: 118: {
   870                           ;circle_buffer.h: 121: if((buffer_rcv[i] == start_mark[0]) && (buffer_rcv[get_plus_index
      +                          (i, 1)] == start_mark[1])
   871                           ;circle_buffer.h: 122: && (buffer_rcv[get_plus_index(i, 2)] == start_mark[2]) && (buffer
      +                          _rcv[get_plus_index(i, 3)] == start_mark[3]))
   872                           
   873                           ;circle_buffer.h: 117: while(get_distance(i, end_index_rcv) >= 3)
   874  008F  309E               	movlw	low (_start_mark| (0+32768))
   875  0090  0084               	movwf	4
   876  0091  3082               	movlw	high (_start_mark| (0+32768))
   877  0092  0085               	movwf	5
   878  0093  0800               	movf	0,w	;code access
   879  0094  00D5               	movwf	??_get_msg_index
   880  0095  0858               	movf	get_msg_index@i,w
   881  0096  3E27               	addlw	(low (_buffer_rcv| 0))& (0+255)
   882  0097  0086               	movwf	6
   883  0098  0187               	clrf	7
   884  0099  0801               	movf	1,w
   885  009A  0655               	xorwf	??_get_msg_index,w
   886  009B  1D03               	skipz
   887  009C  28E4               	goto	l889
   888  009D  309F               	movlw	low ((_start_mark+1)| (0+32768))
   889  009E  0084               	movwf	4
   890  009F  3082               	movlw	high ((_start_mark+1)| (0+32768))
   891  00A0  0085               	movwf	5
   892  00A1  0800               	movf	0,w	;code access
   893  00A2  00D5               	movwf	??_get_msg_index
   894  00A3  01D1               	clrf	get_plus_index@add
   895  00A4  0AD1               	incf	get_plus_index@add,f
   896  00A5  0858               	movf	get_msg_index@i,w
   897  00A6  2270               	fcall	_get_plus_index
   898  00A7  3E27               	addlw	(low (_buffer_rcv| 0))& (0+255)
   899  00A8  0086               	movwf	6
   900  00A9  0187               	clrf	7
   901  00AA  0801               	movf	1,w
   902  00AB  0020               	movlb	0	; select bank0
   903  00AC  0655               	xorwf	??_get_msg_index,w
   904  00AD  1D03               	skipz
   905  00AE  28E4               	goto	l889
   906  00AF  30A0               	movlw	low ((_start_mark+2)| (0+32768))
   907  00B0  0084               	movwf	4
   908  00B1  3082               	movlw	high ((_start_mark+2)| (0+32768))
   909  00B2  0085               	movwf	5
   910  00B3  0800               	movf	0,w	;code access
   911  00B4  00D5               	movwf	??_get_msg_index
   912  00B5  3002               	movlw	2
   913  00B6  00D6               	movwf	??_get_msg_index+1
   914  00B7  0856               	movf	??_get_msg_index+1,w
   915  00B8  00D1               	movwf	get_plus_index@add
   916  00B9  0858               	movf	get_msg_index@i,w
   917  00BA  2270               	fcall	_get_plus_index
   918  00BB  3E27               	addlw	(low (_buffer_rcv| 0))& (0+255)
   919  00BC  0086               	movwf	6
   920  00BD  0187               	clrf	7
   921  00BE  0801               	movf	1,w
   922  00BF  0020               	movlb	0	; select bank0
   923  00C0  0655               	xorwf	??_get_msg_index,w
   924  00C1  1D03               	skipz
   925  00C2  28E4               	goto	l889
   926                           
   927                           ;circle_buffer.h: 123: {
   928                           ;circle_buffer.h: 124: if(*start_index != -1)
   929  00C3  30A1               	movlw	low ((_start_mark+3)| (0+32768))
   930  00C4  0084               	movwf	4
   931  00C5  3082               	movlw	high ((_start_mark+3)| (0+32768))
   932  00C6  0085               	movwf	5
   933  00C7  0800               	movf	0,w	;code access
   934  00C8  00D5               	movwf	??_get_msg_index
   935  00C9  3003               	movlw	3
   936  00CA  00D6               	movwf	??_get_msg_index+1
   937  00CB  0856               	movf	??_get_msg_index+1,w
   938  00CC  00D1               	movwf	get_plus_index@add
   939  00CD  0858               	movf	get_msg_index@i,w
   940  00CE  2270               	fcall	_get_plus_index
   941  00CF  3E27               	addlw	(low (_buffer_rcv| 0))& (0+255)
   942  00D0  0086               	movwf	6
   943  00D1  0187               	clrf	7
   944  00D2  0801               	movf	1,w
   945  00D3  0020               	movlb	0	; select bank0
   946  00D4  0655               	xorwf	??_get_msg_index,w
   947  00D5  1D03               	skipz
   948  00D6  28E4               	goto	l889
   949                           
   950                           ;circle_buffer.h: 125: {
   951                           ;circle_buffer.h: 126: *start_index = get_plus_index(i, 4);
   952  00D7  3004               	movlw	4
   953  00D8  00D5               	movwf	??_get_msg_index
   954  00D9  0855               	movf	??_get_msg_index,w
   955  00DA  00D1               	movwf	get_plus_index@add
   956  00DB  0858               	movf	get_msg_index@i,w
   957  00DC  2270               	fcall	_get_plus_index
   958  00DD  0020               	movlb	0	; select bank0
   959  00DE  00D6               	movwf	??_get_msg_index+1
   960  00DF  0857               	movf	get_msg_index@start_index,w
   961  00E0  0086               	movwf	6
   962  00E1  0187               	clrf	7
   963  00E2  0856               	movf	??_get_msg_index+1,w
   964  00E3  2936               	goto	L3
   965  00E4                     l889:	
   966                           ;circle_buffer.h: 127: }
   967                           ;circle_buffer.h: 128: }
   968                           
   969                           
   970                           ;circle_buffer.h: 129: else if((buffer_rcv[i] == stop_mark[0]) && (buffer_rcv[get_plus_i
      +                          ndex(i, 1)] == stop_mark[1])
   971                           ;circle_buffer.h: 130: && (buffer_rcv[get_plus_index(i, 2)] == stop_mark[2]) && (buffer_
      +                          rcv[get_plus_index(i, 3)] == stop_mark[3]))
   972  00E4  30A2               	movlw	low (_stop_mark| (0+32768))
   973  00E5  0084               	movwf	4
   974  00E6  3082               	movlw	high (_stop_mark| (0+32768))
   975  00E7  0085               	movwf	5
   976  00E8  0800               	movf	0,w	;code access
   977  00E9  00D5               	movwf	??_get_msg_index
   978  00EA  0858               	movf	get_msg_index@i,w
   979  00EB  3E27               	addlw	(low (_buffer_rcv| 0))& (0+255)
   980  00EC  0086               	movwf	6
   981  00ED  0187               	clrf	7
   982  00EE  0801               	movf	1,w
   983  00EF  0655               	xorwf	??_get_msg_index,w
   984  00F0  1D03               	skipz
   985  00F1  2937               	goto	l899
   986  00F2  30A3               	movlw	low ((_stop_mark+1)| (0+32768))
   987  00F3  0084               	movwf	4
   988  00F4  3082               	movlw	high ((_stop_mark+1)| (0+32768))
   989  00F5  0085               	movwf	5
   990  00F6  0800               	movf	0,w	;code access
   991  00F7  00D5               	movwf	??_get_msg_index
   992  00F8  01D1               	clrf	get_plus_index@add
   993  00F9  0AD1               	incf	get_plus_index@add,f
   994  00FA  0858               	movf	get_msg_index@i,w
   995  00FB  2270               	fcall	_get_plus_index
   996  00FC  3E27               	addlw	(low (_buffer_rcv| 0))& (0+255)
   997  00FD  0086               	movwf	6
   998  00FE  0187               	clrf	7
   999  00FF  0801               	movf	1,w
  1000  0100  0020               	movlb	0	; select bank0
  1001  0101  0655               	xorwf	??_get_msg_index,w
  1002  0102  1D03               	skipz
  1003  0103  2937               	goto	l899
  1004  0104  30A4               	movlw	low ((_stop_mark+2)| (0+32768))
  1005  0105  0084               	movwf	4
  1006  0106  3082               	movlw	high ((_stop_mark+2)| (0+32768))
  1007  0107  0085               	movwf	5
  1008  0108  0800               	movf	0,w	;code access
  1009  0109  00D5               	movwf	??_get_msg_index
  1010  010A  3002               	movlw	2
  1011  010B  00D6               	movwf	??_get_msg_index+1
  1012  010C  0856               	movf	??_get_msg_index+1,w
  1013  010D  00D1               	movwf	get_plus_index@add
  1014  010E  0858               	movf	get_msg_index@i,w
  1015  010F  2270               	fcall	_get_plus_index
  1016  0110  3E27               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1017  0111  0086               	movwf	6
  1018  0112  0187               	clrf	7
  1019  0113  0801               	movf	1,w
  1020  0114  0020               	movlb	0	; select bank0
  1021  0115  0655               	xorwf	??_get_msg_index,w
  1022  0116  1D03               	skipz
  1023  0117  2937               	goto	l899
  1024                           
  1025                           ;circle_buffer.h: 131: {
  1026                           ;circle_buffer.h: 132: if(*end_index != -1)
  1027  0118  30A5               	movlw	low ((_stop_mark+3)| (0+32768))
  1028  0119  0084               	movwf	4
  1029  011A  3082               	movlw	high ((_stop_mark+3)| (0+32768))
  1030  011B  0085               	movwf	5
  1031  011C  0800               	movf	0,w	;code access
  1032  011D  00D5               	movwf	??_get_msg_index
  1033  011E  3003               	movlw	3
  1034  011F  00D6               	movwf	??_get_msg_index+1
  1035  0120  0856               	movf	??_get_msg_index+1,w
  1036  0121  00D1               	movwf	get_plus_index@add
  1037  0122  0858               	movf	get_msg_index@i,w
  1038  0123  2270               	fcall	_get_plus_index
  1039  0124  3E27               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1040  0125  0086               	movwf	6
  1041  0126  0187               	clrf	7
  1042  0127  0801               	movf	1,w
  1043  0128  0020               	movlb	0	; select bank0
  1044  0129  0655               	xorwf	??_get_msg_index,w
  1045  012A  1D03               	skipz
  1046  012B  2937               	goto	l899
  1047                           
  1048                           ;circle_buffer.h: 133: {
  1049                           ;circle_buffer.h: 134: *end_index = get_minus_index(i, 1);
  1050  012C  01D1               	clrf	get_minus_index@sub
  1051  012D  0AD1               	incf	get_minus_index@sub,f
  1052  012E  0858               	movf	get_msg_index@i,w
  1053  012F  2252               	fcall	_get_minus_index
  1054  0130  0020               	movlb	0	; select bank0
  1055  0131  00D5               	movwf	??_get_msg_index
  1056  0132  0854               	movf	get_msg_index@end_index,w
  1057  0133  0086               	movwf	6
  1058  0134  0187               	clrf	7
  1059  0135  0855               	movf	??_get_msg_index,w
  1060  0136                     L3:	
  1061  0136  0081               	movwf	1
  1062  0137                     l899:	
  1063                           
  1064                           ;circle_buffer.h: 135: }
  1065                           ;circle_buffer.h: 136: }
  1066                           ;circle_buffer.h: 138: i = get_next_index(i);
  1067  0137  0858               	movf	get_msg_index@i,w
  1068  0138  227E               	fcall	_get_next_index
  1069  0139  0020               	movlb	0	; select bank0
  1070  013A  2880               	goto	L2
  1071  013B                     l903:	
  1072                           
  1073                           ;circle_buffer.h: 139: }
  1074                           ;circle_buffer.h: 141: if(((*start_index != 0xFF) && (*end_index != 0xFF)) == 1)
  1075  013B  0857               	movf	get_msg_index@start_index,w
  1076  013C  0086               	movwf	6
  1077  013D  0187               	clrf	7
  1078  013E  0A01               	incf	1,w
  1079  013F  1903               	btfsc	3,2
  1080  0140  2956               	goto	l913
  1081  0141  0854               	movf	get_msg_index@end_index,w
  1082  0142  0086               	movwf	6
  1083  0143  0187               	clrf	7
  1084  0144  0A01               	incf	1,w
  1085  0145  1903               	btfsc	3,2
  1086  0146  2956               	goto	l913
  1087                           
  1088                           ;circle_buffer.h: 142: {
  1089                           ;circle_buffer.h: 143: start_index_rcv = get_plus_index(*end_index, 5);
  1090  0147  3005               	movlw	5
  1091  0148  00D5               	movwf	??_get_msg_index
  1092  0149  0855               	movf	??_get_msg_index,w
  1093  014A  00D1               	movwf	get_plus_index@add
  1094  014B  0854               	movf	get_msg_index@end_index,w
  1095  014C  0086               	movwf	6
  1096  014D  0187               	clrf	7
  1097  014E  0801               	movf	1,w
  1098  014F  2270               	fcall	_get_plus_index
  1099  0150  0020               	movlb	0	; select bank0
  1100  0151  00D6               	movwf	??_get_msg_index+1
  1101  0152  0856               	movf	??_get_msg_index+1,w
  1102  0153  00A5               	movwf	_start_index_rcv
  1103                           
  1104                           ;circle_buffer.h: 144: return 1;
  1105  0154  3001               	movlw	1
  1106  0155  0008               	return
  1107  0156                     l913:	
  1108                           
  1109                           ;circle_buffer.h: 145: }
  1110                           ;circle_buffer.h: 146: return 0;
  1111  0156  3000               	movlw	0
  1112  0157  0008               	return
  1113  0158                     __end_of_get_msg_index:	
  1114                           
  1115                           	psect	text3
  1116  0270                     __ptext3:	
  1117 ;; *************** function _get_plus_index *****************
  1118 ;; Defined at:
  1119 ;;		line 54 in file "circle_buffer.h"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;  index           1    wreg     unsigned char 
  1122 ;;  add             1    0[BANK0 ] unsigned char 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  index           1    2[BANK0 ] unsigned char 
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  1    wreg      unsigned char 
  1127 ;; Registers used:
  1128 ;;		wreg, status,2, status,0
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMMON   BANK0   BANK1
  1134 ;;      Params:         0       1       0
  1135 ;;      Locals:         0       1       0
  1136 ;;      Temps:          0       1       0
  1137 ;;      Totals:         0       3       0
  1138 ;;Total ram usage:        3 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; Hardware stack levels required when called:    3
  1141 ;; This function calls:
  1142 ;;		Nothing
  1143 ;; This function is called by:
  1144 ;;		_get_msg_index
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           
  1149                           ;psect for function _get_plus_index
  1150  0270                     _get_plus_index:	
  1151                           
  1152                           ;incstack = 0
  1153                           ; Regs used in _get_plus_index: [wreg+status,2+status,0]
  1154                           ;get_plus_index@index stored from wreg
  1155  0270  0020               	movlb	0	; select bank0
  1156  0271  00D3               	movwf	get_plus_index@index
  1157                           
  1158                           ;circle_buffer.h: 56: index += add;
  1159  0272  0851               	movf	get_plus_index@add,w
  1160  0273  00D2               	movwf	??_get_plus_index
  1161  0274  0852               	movf	??_get_plus_index,w
  1162  0275  07D3               	addwf	get_plus_index@index,f
  1163                           
  1164                           ;circle_buffer.h: 57: if(index >= 32)
  1165  0276  3020               	movlw	32
  1166  0277  0253               	subwf	get_plus_index@index,w
  1167  0278  1C03               	skipc
  1168  0279  2A7C               	goto	l837
  1169                           
  1170                           ;circle_buffer.h: 58: {
  1171                           ;circle_buffer.h: 59: index -= 32;
  1172  027A  3020               	movlw	32
  1173  027B  02D3               	subwf	get_plus_index@index,f
  1174  027C                     l837:	
  1175                           
  1176                           ;circle_buffer.h: 60: }
  1177                           ;circle_buffer.h: 61: return index;
  1178  027C  0853               	movf	get_plus_index@index,w
  1179  027D  0008               	return
  1180  027E                     __end_of_get_plus_index:	
  1181                           
  1182                           	psect	text4
  1183  027E                     __ptext4:	
  1184 ;; *************** function _get_next_index *****************
  1185 ;; Defined at:
  1186 ;;		line 29 in file "circle_buffer.h"
  1187 ;; Parameters:    Size  Location     Type
  1188 ;;  index           1    wreg     unsigned char 
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;  index           1    0[BANK0 ] unsigned char 
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  1    wreg      unsigned char 
  1193 ;; Registers used:
  1194 ;;		wreg, status,2, status,0
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMMON   BANK0   BANK1
  1200 ;;      Params:         0       0       0
  1201 ;;      Locals:         0       1       0
  1202 ;;      Temps:          0       0       0
  1203 ;;      Totals:         0       1       0
  1204 ;;Total ram usage:        1 bytes
  1205 ;; Hardware stack levels used:    1
  1206 ;; Hardware stack levels required when called:    3
  1207 ;; This function calls:
  1208 ;;		Nothing
  1209 ;; This function is called by:
  1210 ;;		_get_msg_index
  1211 ;;		_get_msg
  1212 ;; This function uses a non-reentrant model
  1213 ;;
  1214                           
  1215                           
  1216                           ;psect for function _get_next_index
  1217  027E                     _get_next_index:	
  1218                           
  1219                           ;incstack = 0
  1220                           ; Regs used in _get_next_index: [wreg+status,2+status,0]
  1221                           ;get_next_index@index stored from wreg
  1222  027E  0020               	movlb	0	; select bank0
  1223  027F  00D1               	movwf	get_next_index@index
  1224                           
  1225                           ;circle_buffer.h: 31: if(index == 32 - 1)
  1226  0280  301F               	movlw	31
  1227  0281  0651               	xorwf	get_next_index@index,w
  1228  0282  1D03               	btfss	3,2
  1229  0283  2A86               	goto	l829
  1230                           
  1231                           ;circle_buffer.h: 32: {
  1232                           ;circle_buffer.h: 33: return 0;
  1233  0284  3000               	movlw	0
  1234                           
  1235                           ;circle_buffer.h: 34: }
  1236  0285  0008               	return
  1237  0286                     l829:	
  1238                           
  1239                           ;circle_buffer.h: 35: else
  1240                           ;circle_buffer.h: 36: {
  1241                           ;circle_buffer.h: 37: return (index + 1);
  1242  0286  0851               	movf	get_next_index@index,w
  1243  0287  3E01               	addlw	1
  1244  0288  0008               	return
  1245  0289                     __end_of_get_next_index:	
  1246                           
  1247                           	psect	text5
  1248  0252                     __ptext5:	
  1249 ;; *************** function _get_minus_index *****************
  1250 ;; Defined at:
  1251 ;;		line 63 in file "circle_buffer.h"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;  index           1    wreg     unsigned char 
  1254 ;;  sub             1    0[BANK0 ] unsigned char 
  1255 ;; Auto vars:     Size  Location     Type
  1256 ;;  index           1    1[BANK0 ] unsigned char 
  1257 ;; Return value:  Size  Location     Type
  1258 ;;                  1    wreg      unsigned char 
  1259 ;; Registers used:
  1260 ;;		wreg, status,2, status,0
  1261 ;; Tracked objects:
  1262 ;;		On entry : 0/0
  1263 ;;		On exit  : 0/0
  1264 ;;		Unchanged: 0/0
  1265 ;; Data sizes:     COMMON   BANK0   BANK1
  1266 ;;      Params:         0       1       0
  1267 ;;      Locals:         0       1       0
  1268 ;;      Temps:          0       0       0
  1269 ;;      Totals:         0       2       0
  1270 ;;Total ram usage:        2 bytes
  1271 ;; Hardware stack levels used:    1
  1272 ;; Hardware stack levels required when called:    3
  1273 ;; This function calls:
  1274 ;;		Nothing
  1275 ;; This function is called by:
  1276 ;;		_get_msg_index
  1277 ;; This function uses a non-reentrant model
  1278 ;;
  1279                           
  1280                           
  1281                           ;psect for function _get_minus_index
  1282  0252                     _get_minus_index:	
  1283                           
  1284                           ;incstack = 0
  1285                           ; Regs used in _get_minus_index: [wreg+status,2+status,0]
  1286                           ;get_minus_index@index stored from wreg
  1287  0252  0020               	movlb	0	; select bank0
  1288  0253  00D2               	movwf	get_minus_index@index
  1289                           
  1290                           ;circle_buffer.h: 65: if(index < sub)
  1291  0254  0851               	movf	get_minus_index@sub,w
  1292  0255  0252               	subwf	get_minus_index@index,w
  1293  0256  1803               	skipnc
  1294  0257  2A5D               	goto	l847
  1295                           
  1296                           ;circle_buffer.h: 66: {
  1297                           ;circle_buffer.h: 67: return index + 32 - sub;
  1298  0258  0351               	decf	get_minus_index@sub,w
  1299  0259  3AFF               	xorlw	255
  1300  025A  0752               	addwf	get_minus_index@index,w
  1301  025B  3E20               	addlw	32
  1302  025C  0008               	return
  1303  025D                     l847:	
  1304                           
  1305                           ;circle_buffer.h: 68: }
  1306                           ;circle_buffer.h: 69: return index - sub;
  1307  025D  0351               	decf	get_minus_index@sub,w
  1308  025E  3AFF               	xorlw	255
  1309  025F  0752               	addwf	get_minus_index@index,w
  1310  0260  0008               	return
  1311  0261                     __end_of_get_minus_index:	
  1312                           
  1313                           	psect	text6
  1314  0261                     __ptext6:	
  1315 ;; *************** function _get_distance *****************
  1316 ;; Defined at:
  1317 ;;		line 71 in file "circle_buffer.h"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;  start_index     1    wreg     unsigned char 
  1320 ;;  end_index       1    0[BANK0 ] unsigned char 
  1321 ;; Auto vars:     Size  Location     Type
  1322 ;;  start_index     1    1[BANK0 ] unsigned char 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;                  1    wreg      unsigned char 
  1325 ;; Registers used:
  1326 ;;		wreg, status,2, status,0
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMMON   BANK0   BANK1
  1332 ;;      Params:         0       1       0
  1333 ;;      Locals:         0       1       0
  1334 ;;      Temps:          0       0       0
  1335 ;;      Totals:         0       2       0
  1336 ;;Total ram usage:        2 bytes
  1337 ;; Hardware stack levels used:    1
  1338 ;; Hardware stack levels required when called:    3
  1339 ;; This function calls:
  1340 ;;		Nothing
  1341 ;; This function is called by:
  1342 ;;		_get_msg_index
  1343 ;;		_get_msg
  1344 ;; This function uses a non-reentrant model
  1345 ;;
  1346                           
  1347                           
  1348                           ;psect for function _get_distance
  1349  0261                     _get_distance:	
  1350                           
  1351                           ;incstack = 0
  1352                           ; Regs used in _get_distance: [wreg+status,2+status,0]
  1353                           ;get_distance@start_index stored from wreg
  1354  0261  0020               	movlb	0	; select bank0
  1355  0262  00D2               	movwf	get_distance@start_index
  1356                           
  1357                           ;circle_buffer.h: 73: if(end_index < start_index)
  1358  0263  0852               	movf	get_distance@start_index,w
  1359  0264  0251               	subwf	get_distance@end_index,w
  1360  0265  1803               	skipnc
  1361  0266  2A6C               	goto	l859
  1362                           
  1363                           ;circle_buffer.h: 74: {
  1364                           ;circle_buffer.h: 75: return end_index + 32 - start_index;
  1365  0267  0352               	decf	get_distance@start_index,w
  1366  0268  3AFF               	xorlw	255
  1367  0269  0751               	addwf	get_distance@end_index,w
  1368  026A  3E20               	addlw	32
  1369                           
  1370                           ;circle_buffer.h: 76: }
  1371  026B  0008               	return
  1372  026C                     l859:	
  1373                           
  1374                           ;circle_buffer.h: 77: else
  1375                           ;circle_buffer.h: 78: {
  1376                           ;circle_buffer.h: 79: return (end_index - start_index);
  1377  026C  0352               	decf	get_distance@start_index,w
  1378  026D  3AFF               	xorlw	255
  1379  026E  0751               	addwf	get_distance@end_index,w
  1380  026F  0008               	return
  1381  0270                     __end_of_get_distance:	
  1382                           
  1383                           	psect	text7
  1384  01F9                     __ptext7:	
  1385 ;; *************** function _extract_RGB_DATA_RQT_CMD *****************
  1386 ;; Defined at:
  1387 ;;		line 24 in file "rgb_data.h"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;  pmsg            1    wreg     PTR const struct .
  1390 ;;		 -> msg(10), 
  1391 ;;  duty            1    0[BANK0 ] PTR unsigned char 
  1392 ;;		 -> duty(3), 
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  pmsg            1    2[BANK0 ] PTR const struct .
  1395 ;;		 -> msg(10), 
  1396 ;;  prqt            1    3[BANK0 ] PTR struct .
  1397 ;;		 -> msg.data(3), msg(10), 
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  1    wreg      void 
  1400 ;; Registers used:
  1401 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1402 ;; Tracked objects:
  1403 ;;		On entry : 0/0
  1404 ;;		On exit  : 0/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMMON   BANK0   BANK1
  1407 ;;      Params:         0       1       0
  1408 ;;      Locals:         0       2       0
  1409 ;;      Temps:          0       1       0
  1410 ;;      Totals:         0       4       0
  1411 ;;Total ram usage:        4 bytes
  1412 ;; Hardware stack levels used:    1
  1413 ;; Hardware stack levels required when called:    3
  1414 ;; This function calls:
  1415 ;;		Nothing
  1416 ;; This function is called by:
  1417 ;;		_main
  1418 ;; This function uses a non-reentrant model
  1419 ;;
  1420                           
  1421                           
  1422                           ;psect for function _extract_RGB_DATA_RQT_CMD
  1423  01F9                     _extract_RGB_DATA_RQT_CMD:	
  1424                           
  1425                           ;incstack = 0
  1426                           ; Regs used in _extract_RGB_DATA_RQT_CMD: [wreg+fsr1l+fsr1h+status,2+status,0]
  1427                           ;extract_RGB_DATA_RQT_CMD@pmsg stored from wreg
  1428  01F9  0020               	movlb	0	; select bank0
  1429  01FA  00D3               	movwf	extract_RGB_DATA_RQT_CMD@pmsg
  1430                           
  1431                           ;rgb_data.h: 26: RGB_DATA_RQT_CMD_t *prqt;
  1432                           ;rgb_data.h: 27: prqt = (RGB_DATA_RQT_CMD_t *)pmsg->data;
  1433  01FB  0853               	movf	extract_RGB_DATA_RQT_CMD@pmsg,w
  1434  01FC  3E07               	addlw	7
  1435  01FD  00D2               	movwf	??_extract_RGB_DATA_RQT_CMD
  1436  01FE  0852               	movf	??_extract_RGB_DATA_RQT_CMD,w
  1437  01FF  00D4               	movwf	extract_RGB_DATA_RQT_CMD@prqt
  1438                           
  1439                           ;rgb_data.h: 28: duty[0] = prqt->r;
  1440  0200  0854               	movf	extract_RGB_DATA_RQT_CMD@prqt,w
  1441  0201  0086               	movwf	6
  1442  0202  0187               	clrf	7
  1443  0203  0801               	movf	1,w
  1444  0204  00D2               	movwf	??_extract_RGB_DATA_RQT_CMD
  1445  0205  0851               	movf	extract_RGB_DATA_RQT_CMD@duty,w
  1446  0206  0086               	movwf	6
  1447  0207  0187               	clrf	7
  1448  0208  0852               	movf	??_extract_RGB_DATA_RQT_CMD,w
  1449  0209  0081               	movwf	1
  1450                           
  1451                           ;rgb_data.h: 29: duty[1] = prqt->g;
  1452  020A  0A54               	incf	extract_RGB_DATA_RQT_CMD@prqt,w
  1453  020B  0086               	movwf	6
  1454  020C  0187               	clrf	7
  1455  020D  0801               	movf	1,w
  1456  020E  00D2               	movwf	??_extract_RGB_DATA_RQT_CMD
  1457  020F  0A51               	incf	extract_RGB_DATA_RQT_CMD@duty,w
  1458  0210  0086               	movwf	6
  1459  0211  0187               	clrf	7
  1460  0212  0852               	movf	??_extract_RGB_DATA_RQT_CMD,w
  1461  0213  0081               	movwf	1
  1462                           
  1463                           ;rgb_data.h: 30: duty[2] = prqt->b;
  1464  0214  0854               	movf	extract_RGB_DATA_RQT_CMD@prqt,w
  1465  0215  3E02               	addlw	2
  1466  0216  0086               	movwf	6
  1467  0217  0187               	clrf	7
  1468  0218  0801               	movf	1,w
  1469  0219  00D2               	movwf	??_extract_RGB_DATA_RQT_CMD
  1470  021A  0851               	movf	extract_RGB_DATA_RQT_CMD@duty,w
  1471  021B  3E02               	addlw	2
  1472  021C  0086               	movwf	6
  1473  021D  0187               	clrf	7
  1474  021E  0852               	movf	??_extract_RGB_DATA_RQT_CMD,w
  1475  021F  0081               	movwf	1
  1476  0220  0008               	return
  1477  0221                     __end_of_extract_RGB_DATA_RQT_CMD:	
  1478                           
  1479                           	psect	text8
  1480  0289                     __ptext8:	
  1481 ;; *************** function _InitTimerInt *****************
  1482 ;; Defined at:
  1483 ;;		line 68 in file "led_pwm.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;		None
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;		None
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      void 
  1490 ;; Registers used:
  1491 ;;		None
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMMON   BANK0   BANK1
  1497 ;;      Params:         0       0       0
  1498 ;;      Locals:         0       0       0
  1499 ;;      Temps:          0       0       0
  1500 ;;      Totals:         0       0       0
  1501 ;;Total ram usage:        0 bytes
  1502 ;; Hardware stack levels used:    1
  1503 ;; Hardware stack levels required when called:    3
  1504 ;; This function calls:
  1505 ;;		Nothing
  1506 ;; This function is called by:
  1507 ;;		_main
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           
  1512                           ;psect for function _InitTimerInt
  1513  0289                     _InitTimerInt:	
  1514                           
  1515                           ;led_pwm.c: 70: OPTION_REGbits.INTEDG = 0;
  1516                           
  1517                           ;incstack = 0
  1518                           ; Regs used in _InitTimerInt: []
  1519  0289  0021               	movlb	1	; select bank1
  1520  028A  1315               	bcf	21,6	;volatile
  1521                           
  1522                           ;led_pwm.c: 71: OPTION_REGbits.T0CS = 0;
  1523  028B  1295               	bcf	21,5	;volatile
  1524                           
  1525                           ;led_pwm.c: 72: OPTION_REGbits.PSA = 1;
  1526  028C  1595               	bsf	21,3	;volatile
  1527                           
  1528                           ;led_pwm.c: 74: CPSCON0bits.T0XCS = 1;
  1529  028D  0020               	movlb	0	; select bank0
  1530  028E  141E               	bsf	30,0	;volatile
  1531                           
  1532                           ;led_pwm.c: 76: INTCONbits.GIE = 1;
  1533  028F  178B               	bsf	11,7	;volatile
  1534                           
  1535                           ;led_pwm.c: 77: INTCONbits.PEIE = 1;
  1536  0290  170B               	bsf	11,6	;volatile
  1537                           
  1538                           ;led_pwm.c: 78: INTCONbits.T0IE = 1;
  1539  0291  168B               	bsf	11,5	;volatile
  1540                           
  1541                           ;led_pwm.c: 79: INTCONbits.T0IF = 0;
  1542  0292  110B               	bcf	11,2	;volatile
  1543  0293  0008               	return
  1544  0294                     __end_of_InitTimerInt:	
  1545                           
  1546                           	psect	text9
  1547  02AC                     __ptext9:	
  1548 ;; *************** function _InitInputDataInt *****************
  1549 ;; Defined at:
  1550 ;;		line 83 in file "led_pwm.c"
  1551 ;; Parameters:    Size  Location     Type
  1552 ;;		None
  1553 ;; Auto vars:     Size  Location     Type
  1554 ;;		None
  1555 ;; Return value:  Size  Location     Type
  1556 ;;                  1    wreg      void 
  1557 ;; Registers used:
  1558 ;;		None
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMMON   BANK0   BANK1
  1564 ;;      Params:         0       0       0
  1565 ;;      Locals:         0       0       0
  1566 ;;      Temps:          0       0       0
  1567 ;;      Totals:         0       0       0
  1568 ;;Total ram usage:        0 bytes
  1569 ;; Hardware stack levels used:    1
  1570 ;; Hardware stack levels required when called:    3
  1571 ;; This function calls:
  1572 ;;		Nothing
  1573 ;; This function is called by:
  1574 ;;		_main
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           
  1579                           ;psect for function _InitInputDataInt
  1580  02AC                     _InitInputDataInt:	
  1581                           
  1582                           ;led_pwm.c: 85: INTCONbits.GIE = 1;
  1583                           
  1584                           ;incstack = 0
  1585                           ; Regs used in _InitInputDataInt: []
  1586  02AC  178B               	bsf	11,7	;volatile
  1587                           
  1588                           ;led_pwm.c: 86: INTCONbits.INTE = 1;
  1589  02AD  160B               	bsf	11,4	;volatile
  1590                           
  1591                           ;led_pwm.c: 87: INTCONbits.INTF = 0;
  1592  02AE  108B               	bcf	11,1	;volatile
  1593                           
  1594                           ;led_pwm.c: 88: OPTION_REGbits.INTEDG = 0;
  1595  02AF  0021               	movlb	1	; select bank1
  1596  02B0  1315               	bcf	21,6	;volatile
  1597  02B1  0008               	return
  1598  02B2                     __end_of_InitInputDataInt:	
  1599                           
  1600                           	psect	text10
  1601  0221                     __ptext10:	
  1602 ;; *************** function _InitIO *****************
  1603 ;; Defined at:
  1604 ;;		line 42 in file "led_pwm.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;		None
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;		None
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      void 
  1611 ;; Registers used:
  1612 ;;		None
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMMON   BANK0   BANK1
  1618 ;;      Params:         0       0       0
  1619 ;;      Locals:         0       0       0
  1620 ;;      Temps:          0       0       0
  1621 ;;      Totals:         0       0       0
  1622 ;;Total ram usage:        0 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    3
  1625 ;; This function calls:
  1626 ;;		Nothing
  1627 ;; This function is called by:
  1628 ;;		_main
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           
  1633                           ;psect for function _InitIO
  1634  0221                     _InitIO:	
  1635                           
  1636                           ;led_pwm.c: 44: (TRISAbits.TRISA2 = 1);
  1637                           
  1638                           ;incstack = 0
  1639                           ; Regs used in _InitIO: []
  1640  0221  0021               	movlb	1	; select bank1
  1641  0222  150C               	bsf	12,2	;volatile
  1642                           
  1643                           ;led_pwm.c: 45: ANSELAbits.ANSA2 = 0;
  1644  0223  0023               	movlb	3	; select bank3
  1645  0224  110C               	bcf	12,2	;volatile
  1646                           
  1647                           ;led_pwm.c: 47: (TRISCbits.TRISC1 = 0);
  1648  0225  0021               	movlb	1	; select bank1
  1649  0226  108E               	bcf	14,1	;volatile
  1650                           
  1651                           ;led_pwm.c: 48: ANSELCbits.ANSC1 = 0;
  1652  0227  0023               	movlb	3	; select bank3
  1653  0228  108E               	bcf	14,1	;volatile
  1654                           
  1655                           ;led_pwm.c: 50: (TRISCbits.TRISC0 = 0);
  1656  0229  0021               	movlb	1	; select bank1
  1657  022A  100E               	bcf	14,0	;volatile
  1658                           
  1659                           ;led_pwm.c: 51: ANSELCbits.ANSC0 = 0;
  1660  022B  0023               	movlb	3	; select bank3
  1661  022C  100E               	bcf	14,0	;volatile
  1662                           
  1663                           ;led_pwm.c: 53: (TRISAbits.TRISA4 = 0);
  1664  022D  0021               	movlb	1	; select bank1
  1665  022E  120C               	bcf	12,4	;volatile
  1666                           
  1667                           ;led_pwm.c: 54: ANSELAbits.ANSA4 = 0;
  1668  022F  0023               	movlb	3	; select bank3
  1669  0230  120C               	bcf	12,4	;volatile
  1670                           
  1671                           ;led_pwm.c: 56: (TRISCbits.TRISC2 = 1);
  1672  0231  0021               	movlb	1	; select bank1
  1673  0232  150E               	bsf	14,2	;volatile
  1674                           
  1675                           ;led_pwm.c: 57: ANSELCbits.ANSC2 = 0;
  1676  0233  0023               	movlb	3	; select bank3
  1677  0234  110E               	bcf	14,2	;volatile
  1678                           
  1679                           ;led_pwm.c: 59: (TRISCbits.TRISC3 = 1);
  1680  0235  0021               	movlb	1	; select bank1
  1681  0236  158E               	bsf	14,3	;volatile
  1682                           
  1683                           ;led_pwm.c: 60: ANSELCbits.ANSC3 = 0;
  1684  0237  0023               	movlb	3	; select bank3
  1685  0238  118E               	bcf	14,3	;volatile
  1686                           
  1687                           ;led_pwm.c: 62: (TRISCbits.TRISC4 = 1);
  1688  0239  0021               	movlb	1	; select bank1
  1689  023A  160E               	bsf	14,4	;volatile
  1690                           
  1691                           ;led_pwm.c: 65: (TRISCbits.TRISC5 = 1);
  1692  023B  168E               	bsf	14,5	;volatile
  1693  023C  0008               	return
  1694  023D                     __end_of_InitIO:	
  1695                           
  1696                           	psect	intentry
  1697  0004                     __pintentry:	
  1698 ;; *************** function _ISR *****************
  1699 ;; Defined at:
  1700 ;;		line 90 in file "led_pwm.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;		None
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  byte            1    8[COMMON] PTR struct .
  1705 ;;		 -> ISR@value(1), 
  1706 ;;  value           1    7[COMMON] unsigned char 
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  1    wreg      void 
  1709 ;; Registers used:
  1710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMMON   BANK0   BANK1
  1716 ;;      Params:         0       0       0
  1717 ;;      Locals:         2       0       0
  1718 ;;      Temps:          2       0       0
  1719 ;;      Totals:         4       0       0
  1720 ;;Total ram usage:        4 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; Hardware stack levels required when called:    2
  1723 ;; This function calls:
  1724 ;;		_receive_input
  1725 ;; This function is called by:
  1726 ;;		Interrupt level 1
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730  0004                     _ISR:	
  1731                           
  1732                           ;incstack = 0
  1733                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1734  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  1735  0005  3180               	pagesel	$
  1736  0006  0020               	movlb	0	; select bank0
  1737  0007  087F               	movf	127,w
  1738  0008  00F6               	movwf	??_ISR+1
  1739                           
  1740                           ;led_pwm.c: 122: if(INTCONbits.INTF == 1)
  1741  0009  1C8B               	btfss	11,1	;volatile
  1742  000A  2831               	goto	i1l138
  1743                           
  1744                           ;led_pwm.c: 123: {
  1745                           ;led_pwm.c: 124: RC1 = 1;
  1746  000B  148E               	bsf	14,1	;volatile
  1747                           
  1748                           ;led_pwm.c: 125: RC0 = 0;
  1749  000C  100E               	bcf	14,0	;volatile
  1750                           
  1751                           ;led_pwm.c: 126: RA4 = 1;
  1752  000D  160C               	bsf	12,4	;volatile
  1753                           
  1754                           ;led_pwm.c: 127: { uint8_t value; { value = 0; BITbits_t *byte = (BITbits_t *)&value; by
      +                          te->B0 = RC2; byte->B1 = RC3; byte->B2 = RC4; byte->B3 = RC5; }; receive_input(value); }
      +                          ;
  1755  000E  01F7               	clrf	ISR@value
  1756  000F  3077               	movlw	(low (ISR@value| 0))& (0+255)
  1757  0010  00F5               	movwf	??_ISR
  1758  0011  0875               	movf	??_ISR,w
  1759  0012  00F8               	movwf	ISR@byte
  1760  0013  0878               	movf	ISR@byte,w
  1761  0014  0086               	movwf	6
  1762  0015  0187               	clrf	7
  1763  0016  1001               	bcf	1,0
  1764  0017  190E               	btfsc	14,2	;volatile
  1765  0018  1401               	bsf	1,0
  1766  0019  0878               	movf	ISR@byte,w
  1767  001A  0086               	movwf	6
  1768  001B  0187               	clrf	7
  1769  001C  1081               	bcf	1,1
  1770  001D  0020               	movlb	0	; select bank0
  1771  001E  198E               	btfsc	14,3	;volatile
  1772  001F  1481               	bsf	1,1
  1773  0020  0878               	movf	ISR@byte,w
  1774  0021  0086               	movwf	6
  1775  0022  0187               	clrf	7
  1776  0023  1101               	bcf	1,2
  1777  0024  0020               	movlb	0	; select bank0
  1778  0025  1A0E               	btfsc	14,4	;volatile
  1779  0026  1501               	bsf	1,2
  1780  0027  0878               	movf	ISR@byte,w
  1781  0028  0086               	movwf	6
  1782  0029  0187               	clrf	7
  1783  002A  1181               	bcf	1,3
  1784  002B  0020               	movlb	0	; select bank0
  1785  002C  1A8E               	btfsc	14,5	;volatile
  1786  002D  1581               	bsf	1,3
  1787  002E  0877               	movf	ISR@value,w
  1788  002F  2158               	fcall	_receive_input
  1789                           
  1790                           ;led_pwm.c: 128: INTCONbits.INTF = 0;
  1791  0030  108B               	bcf	11,1	;volatile
  1792  0031                     i1l138:	
  1793  0031  0876               	movf	??_ISR+1,w
  1794  0032  0020               	movlb	0	; select bank0
  1795  0033  00FF               	movwf	127
  1796  0034  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1797  0035  0009               	retfie
  1798  0036                     __end_of_ISR:	
  1799                           
  1800                           	psect	text12
  1801  0158                     __ptext12:	
  1802 ;; *************** function _receive_input *****************
  1803 ;; Defined at:
  1804 ;;		line 40 in file "circle_buffer.h"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;  value           1    wreg     unsigned char 
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;  value           1    2[COMMON] unsigned char 
  1809 ;;  byte2           1    4[COMMON] PTR struct .
  1810 ;;		 -> receive_input@value(1), 
  1811 ;;  byte1           1    3[COMMON] PTR struct .
  1812 ;;		 -> buffer_rcv(32), 
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMMON   BANK0   BANK1
  1822 ;;      Params:         0       0       0
  1823 ;;      Locals:         3       0       0
  1824 ;;      Temps:          1       0       0
  1825 ;;      Totals:         4       0       0
  1826 ;;Total ram usage:        4 bytes
  1827 ;; Hardware stack levels used:    1
  1828 ;; Hardware stack levels required when called:    1
  1829 ;; This function calls:
  1830 ;;		i1_get_next_index
  1831 ;; This function is called by:
  1832 ;;		_ISR
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           
  1837                           ;psect for function _receive_input
  1838  0158                     _receive_input:	
  1839                           
  1840                           ;incstack = 0
  1841                           ; Regs used in _receive_input: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1842                           ;receive_input@value stored from wreg
  1843  0158  00F2               	movwf	receive_input@value
  1844                           
  1845                           ;circle_buffer.h: 42: { BITbits_t *byte1 = (BITbits_t *)&buffer_rcv[end_index_rcv]; BITb
      +                          its_t *byte2 = (BITbits_t *)&value; if(low_half_rcv == 1) { byte1->B0 = byte2->B0; byte1
      +                          ->B1 = byte2->B1; byte1->B2 = byte2->B2; byte1->B3 = byte2->B3; } else { byte1->B4 = byt
      +                          e2->B0; 
  1846  0159  087D               	movf	_end_index_rcv,w
  1847  015A  3E27               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1848  015B  00F1               	movwf	??_receive_input
  1849  015C  0871               	movf	??_receive_input,w
  1850  015D  00F3               	movwf	receive_input@byte1
  1851  015E  3072               	movlw	(low (receive_input@value| 0))& (0+255)
  1852  015F  00F1               	movwf	??_receive_input
  1853  0160  0871               	movf	??_receive_input,w
  1854  0161  00F4               	movwf	receive_input@byte2
  1855  0162  0379               	decf	_low_half_rcv,w
  1856  0163  1D03               	btfss	3,2
  1857  0164  298A               	goto	i1l937
  1858  0165  0874               	movf	receive_input@byte2,w
  1859  0166  0086               	movwf	6
  1860  0167  0187               	clrf	7
  1861  0168  0873               	movf	receive_input@byte1,w
  1862  0169  0084               	movwf	4
  1863  016A  0185               	clrf	5
  1864  016B  1000               	bcf	0,0
  1865  016C  1801               	btfsc	1,0
  1866  016D  1400               	bsf	0,0
  1867  016E  0874               	movf	receive_input@byte2,w
  1868  016F  0086               	movwf	6
  1869  0170  0187               	clrf	7
  1870  0171  0873               	movf	receive_input@byte1,w
  1871  0172  0084               	movwf	4
  1872  0173  0185               	clrf	5
  1873  0174  1080               	bcf	0,1
  1874  0175  1881               	btfsc	1,1
  1875  0176  1480               	bsf	0,1
  1876  0177  0874               	movf	receive_input@byte2,w
  1877  0178  0086               	movwf	6
  1878  0179  0187               	clrf	7
  1879  017A  0873               	movf	receive_input@byte1,w
  1880  017B  0084               	movwf	4
  1881  017C  0185               	clrf	5
  1882  017D  1100               	bcf	0,2
  1883  017E  1901               	btfsc	1,2
  1884  017F  1500               	bsf	0,2
  1885  0180  0874               	movf	receive_input@byte2,w
  1886  0181  0086               	movwf	6
  1887  0182  0187               	clrf	7
  1888  0183  0873               	movf	receive_input@byte1,w
  1889  0184  0084               	movwf	4
  1890  0185  0185               	clrf	5
  1891  0186  1180               	bcf	0,3
  1892  0187  1981               	btfsc	1,3
  1893  0188  1580               	bsf	0,3
  1894  0189  29AE               	goto	i1l939
  1895  018A                     i1l937:	
  1896  018A  0874               	movf	receive_input@byte2,w
  1897  018B  0086               	movwf	6
  1898  018C  0187               	clrf	7
  1899  018D  0873               	movf	receive_input@byte1,w
  1900  018E  0084               	movwf	4
  1901  018F  0185               	clrf	5
  1902  0190  1200               	bcf	0,4
  1903  0191  1801               	btfsc	1,0
  1904  0192  1600               	bsf	0,4
  1905  0193  0874               	movf	receive_input@byte2,w
  1906  0194  0086               	movwf	6
  1907  0195  0187               	clrf	7
  1908  0196  0873               	movf	receive_input@byte1,w
  1909  0197  0084               	movwf	4
  1910  0198  0185               	clrf	5
  1911  0199  1280               	bcf	0,5
  1912  019A  1881               	btfsc	1,1
  1913  019B  1680               	bsf	0,5
  1914  019C  0874               	movf	receive_input@byte2,w
  1915  019D  0086               	movwf	6
  1916  019E  0187               	clrf	7
  1917  019F  0873               	movf	receive_input@byte1,w
  1918  01A0  0084               	movwf	4
  1919  01A1  0185               	clrf	5
  1920  01A2  1300               	bcf	0,6
  1921  01A3  1901               	btfsc	1,2
  1922  01A4  1700               	bsf	0,6
  1923  01A5  0874               	movf	receive_input@byte2,w
  1924  01A6  0086               	movwf	6
  1925  01A7  0187               	clrf	7
  1926  01A8  0873               	movf	receive_input@byte1,w
  1927  01A9  0084               	movwf	4
  1928  01AA  0185               	clrf	5
  1929  01AB  1380               	bcf	0,7
  1930  01AC  1981               	btfsc	1,3
  1931  01AD  1780               	bsf	0,7
  1932  01AE                     i1l939:	
  1933                           
  1934                           ;circle_buffer.h: 43: if(low_half_rcv == 1)
  1935  01AE  0379               	decf	_low_half_rcv,w
  1936  01AF  1D03               	btfss	3,2
  1937  01B0  29B3               	goto	i1l52
  1938                           
  1939                           ;circle_buffer.h: 44: {
  1940                           ;circle_buffer.h: 45: low_half_rcv = 0;
  1941  01B1  01F9               	clrf	_low_half_rcv
  1942                           
  1943                           ;circle_buffer.h: 46: }
  1944  01B2  0008               	return
  1945  01B3                     i1l52:	
  1946                           
  1947                           ;circle_buffer.h: 47: else
  1948                           ;circle_buffer.h: 48: {
  1949                           ;circle_buffer.h: 49: low_half_rcv = 1;
  1950  01B3  01F9               	clrf	_low_half_rcv
  1951  01B4  0AF9               	incf	_low_half_rcv,f
  1952                           
  1953                           ;circle_buffer.h: 50: end_index_rcv = get_next_index(end_index_rcv);
  1954  01B5  087D               	movf	_end_index_rcv,w
  1955  01B6  2294               	fcall	i1_get_next_index
  1956  01B7  00F1               	movwf	??_receive_input
  1957  01B8  0871               	movf	??_receive_input,w
  1958  01B9  00FD               	movwf	_end_index_rcv
  1959  01BA  0008               	return
  1960  01BB                     __end_of_receive_input:	
  1961                           
  1962                           	psect	text13
  1963  0294                     __ptext13:	
  1964 ;; *************** function i1_get_next_index *****************
  1965 ;; Defined at:
  1966 ;;		line 29 in file "circle_buffer.h"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;  index           1    wreg     unsigned char 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;  index           1    0[COMMON] unsigned char 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      unsigned char 
  1973 ;; Registers used:
  1974 ;;		wreg, status,2, status,0
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMMON   BANK0   BANK1
  1980 ;;      Params:         0       0       0
  1981 ;;      Locals:         1       0       0
  1982 ;;      Temps:          0       0       0
  1983 ;;      Totals:         1       0       0
  1984 ;;Total ram usage:        1 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; This function calls:
  1987 ;;		Nothing
  1988 ;; This function is called by:
  1989 ;;		_receive_input
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           
  1994                           ;psect for function i1_get_next_index
  1995  0294                     i1_get_next_index:	
  1996                           
  1997                           ;incstack = 0
  1998                           ; Regs used in i1_get_next_index: [wreg+status,2+status,0]
  1999                           ;i1get_next_index@index stored from wreg
  2000  0294  00F0               	movwf	i1get_next_index@index
  2001                           
  2002                           ;circle_buffer.h: 31: if(index == 32 - 1)
  2003  0295  301F               	movlw	31
  2004  0296  0670               	xorwf	i1get_next_index@index,w
  2005  0297  1D03               	btfss	3,2
  2006  0298  2A9B               	goto	i1l925
  2007                           
  2008                           ;circle_buffer.h: 32: {
  2009                           ;circle_buffer.h: 33: return 0;
  2010  0299  3000               	movlw	0
  2011                           
  2012                           ;circle_buffer.h: 34: }
  2013  029A  0008               	return
  2014  029B                     i1l925:	
  2015                           
  2016                           ;circle_buffer.h: 35: else
  2017                           ;circle_buffer.h: 36: {
  2018                           ;circle_buffer.h: 37: return (index + 1);
  2019  029B  0870               	movf	i1get_next_index@index,w
  2020  029C  3E01               	addlw	1
  2021  029D  0008               	return
  2022  029E                     __end_ofi1_get_next_index:	
  2023  007E                     btemp	set	126	;btemp
  2024  007E                     int$flags	set	126
  2025  007E                     wtemp	set	126
  2026  007E                     wtemp0	set	126
  2027  0080                     wtemp1	set	128
  2028  0082                     wtemp2	set	130
  2029  0084                     wtemp3	set	132
  2030  0086                     wtemp4	set	134
  2031  0088                     wtemp5	set	136
  2032  007F                     wtemp6	set	127
  2033  007E                     ttemp	set	126
  2034  007E                     ttemp0	set	126
  2035  0081                     ttemp1	set	129
  2036  0084                     ttemp2	set	132
  2037  0087                     ttemp3	set	135
  2038  007F                     ttemp4	set	127
  2039  007E                     ltemp	set	126
  2040  007E                     ltemp0	set	126
  2041  0082                     ltemp1	set	130
  2042  0086                     ltemp2	set	134
  2043  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    8
    Data        8
    BSS         61
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     17      71
    BANK1            32      0      10

Pointer List with Targets:

    handle_REG_ID_RQT_CMD$0	PTR struct . size(1) Largest target is 10
		 -> msg_rcv(BANK0[10]), 

    ISR@byte	PTR struct . size(1) Largest target is 1
		 -> ISR@value(COMMON[1]), 

    pmsg	PTR struct . size(1) Largest target is 10
		 -> msg(BANK1[10]), 

    extract_RGB_DATA_RQT_CMD@duty	PTR unsigned char  size(1) Largest target is 3
		 -> duty(BANK0[3]), 

    extract_RGB_DATA_RQT_CMD@pmsg	PTR const struct . size(1) Largest target is 10
		 -> msg(BANK1[10]), 

    extract_RGB_DATA_RQT_CMD@prqt	PTR struct . size(1) Largest target is 10
		 -> msg.data(BANK1[3]), msg(BANK1[10]), 

    get_msg@pmsg	PTR struct . size(1) Largest target is 10
		 -> msg(BANK1[10]), msg_rcv(BANK0[10]), 

    get_msg@pstr	PTR unsigned char  size(1) Largest target is 10
		 -> msg(BANK1[10]), msg_rcv(BANK0[10]), 

    pstr_rcv	PTR unsigned char  size(1) Largest target is 10
		 -> msg_rcv(BANK0[10]), 

    pmsg_rcv	PTR struct . size(1) Largest target is 10
		 -> msg_rcv(BANK0[10]), 

    get_msg_index@end_index	PTR unsigned char  size(1) Largest target is 1
		 -> get_msg@end_index(BANK0[1]), 

    get_msg_index@start_index	PTR unsigned char  size(1) Largest target is 1
		 -> get_msg@start_index(BANK0[1]), 

    receive_input@byte2	PTR struct . size(1) Largest target is 1
		 -> receive_input@value(COMMON[1]), 

    receive_input@byte1	PTR struct . size(1) Largest target is 32
		 -> buffer_rcv(BANK0[32]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_receive_input
    _receive_input->i1_get_next_index

Critical Paths under _main in BANK0

    _main->_get_msg
    _get_msg->_get_msg_index
    _get_msg_index->_get_plus_index

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    2394
                                             16 BANK0      1     1      0
                             _InitIO
                   _InitInputDataInt
                       _InitTimerInt
           _extract_RGB_DATA_RQT_CMD
                            _get_msg
 ---------------------------------------------------------------------------------
 (1) _get_msg                                              8     8      0    2159
                                              8 BANK0      8     8      0
                       _get_distance
                      _get_msg_index
                     _get_next_index
 ---------------------------------------------------------------------------------
 (2) _get_msg_index                                        5     4      1    1512
                                              3 BANK0      5     4      1
                       _get_distance
                    _get_minus_index
                     _get_next_index
                     _get_plus_index
 ---------------------------------------------------------------------------------
 (3) _get_plus_index                                       3     2      1     492
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _get_next_index                                       1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _get_minus_index                                      2     1      1     185
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (3) _get_distance                                         2     1      1     291
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _extract_RGB_DATA_RQT_CMD                             4     3      1     235
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _InitTimerInt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitInputDataInt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitIO                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  4     4      0     566
                                              5 COMMON     4     4      0
                      _receive_input
 ---------------------------------------------------------------------------------
 (5) _receive_input                                        4     4      0     428
                                              1 COMMON     4     4      0
                   i1_get_next_index
 ---------------------------------------------------------------------------------
 (6) i1_get_next_index                                     1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitIO
   _InitInputDataInt
   _InitTimerInt
   _extract_RGB_DATA_RQT_CMD
   _get_msg
     _get_distance
     _get_msg_index
       _get_distance
       _get_minus_index
       _get_next_index
       _get_plus_index
     _get_next_index

 _ISR (ROOT)
   _receive_input
     i1_get_next_index

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     11      47       6       88.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       A       8       31.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      5F       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Aug 01 09:47:24 2016

                       __CFG_CP$ON 0000                     ?_get_msg_index 0054  
                 get_msg@end_index 005F                        __CFG_CPD$ON 0000  
                  ?_get_next_index 0070                        __CFG_LVP$ON 0000  
                              l903 013B                                l913 0156  
                              l829 0286                                l837 027C  
                              l847 025D                                l871 0071  
                              l859 026C                                l877 007F  
                              l965 01F5                                l889 00E4  
                              l969 01F7                                l899 0137  
                              _RC0 0070                                _RA4 0064  
                              _RC1 0071                                _RC2 0072  
                              _RC3 0073                                _RC4 0074  
                              _RC5 0075                                _ISR 0004  
                              _msg 00A0                       __CFG_BORV$LO 0000  
                              wreg 0009                       __CFG_IESO$ON 0000  
                 ?_get_minus_index 0051                  ?_InitInputDataInt 0070  
                      get_msg@temp 0060                        get_msg@pmsg 005D  
                      get_msg@pstr 005B                               ?_ISR 0070  
               ??_InitInputDataInt 0051                               l1025 0244  
                             i1l52 01B3                     ??_get_distance 0052  
                     __CFG_WRT$OFF 0000                      __CFG_FCMEN$ON 0000  
                             _main 023D                               _duty 0064  
                             _pmsg 0062                               _time 0026  
                             fsr0h 0005                               fsr1h 0007  
                             fsr0l 0004                               indf0 0000  
                             indf1 0001                               fsr1l 0006  
                             btemp 007E                      __CFG_BOREN$ON 0000  
                             ltemp 007E                    ?_get_plus_index 0051  
                             start 0036                               ttemp 007E  
                             wtemp 007E                              ??_ISR 0075  
                    ?_InitTimerInt 0070                      __CFG_PLLEN$ON 0000  
                            ?_main 0070                      __CFG_WDTE$OFF 0000  
                            i1l138 0031                              i1l925 029B  
                            i1l937 018A                              i1l939 01AE  
                  __end_of_get_msg 01F9                 get_minus_index@sub 0051  
                            ltemp0 007E                              ltemp1 0082  
                            ltemp2 0086                              ltemp3 0080  
                            ttemp0 007E                              ttemp1 0081  
                            ttemp2 0084                              ttemp3 0087  
                            ttemp4 007F                              status 0003  
                            wtemp0 007E                              wtemp1 0080  
                            wtemp2 0082                              wtemp3 0084  
                            wtemp4 0086                              wtemp5 0088  
                            wtemp6 007F   __end_of_extract_RGB_DATA_RQT_CMD 0221  
                   __CFG_MCLRE$OFF 0000                    __initialization 0037  
                  ??_get_msg_index 0055                       __end_of_main 0252  
                   ??_InitTimerInt 0051                             ??_main 0061  
                 i1_get_next_index 0294                     __CFG_PWRTE$OFF 0000  
                           _InitIO 0221                     __CFG_STVREN$ON 0000  
             __end_of_get_distance 0270                          ??_get_msg 0059  
                     __pdataCOMMON 0079            get_distance@start_index 0052  
                get_plus_index@add 0051            __end_of__initialization 0059  
                   __pcstackCOMMON 0070                   ??_get_next_index 0051  
                     __pidataBANK0 02B2  __size_of_extract_RGB_DATA_RQT_CMD 0028  
        ?_extract_RGB_DATA_RQT_CMD 0051                     _OPTION_REGbits 0095  
             __end_of_InitTimerInt 0294                   ??_get_plus_index 0052  
                       __pbssBANK0 0020                         __pbssBANK1 00A0  
                   get_msg_index@i 0058                            ?_InitIO 0070  
        __size_of_InitInputDataInt 0006                            ISR@byte 0078  
                       __pmaintext 023D                         __pintentry 0004  
           __size_of_receive_input 0063                 get_msg@start_index 005E  
                       _buffer_rcv 0027       extract_RGB_DATA_RQT_CMD@duty 0051  
     extract_RGB_DATA_RQT_CMD@pmsg 0053       extract_RGB_DATA_RQT_CMD@prqt 0054  
         __size_of_get_minus_index 000F                    __size_of_InitIO 001C  
            __size_of_get_distance 000F                    _start_index_rcv 0025  
                          __ptext1 01BB                            __ptext2 005C  
                          __ptext3 0270                            __ptext4 027E  
                          __ptext5 0252                            __ptext6 0261  
                          __ptext7 01F9                            __ptext8 0289  
                          __ptext9 02AC                            _get_msg 01BB  
                     __size_of_ISR 0032           __end_ofi1_get_next_index 029E  
             get_minus_index@index 0052                            _msg_rcv 0047  
                          _low_rcv 007A                            clrloop0 02A7  
                    _receive_input 0158               end_of_initialization 0059  
                     _get_distance 0261                get_next_index@index 0051  
            __end_of_get_msg_index 0158                       __pstringtext 029E  
                __end_of_stop_mark 02A6                   __CFG_FOSC$INTOSC 0000  
            __size_of_InitTimerInt 000B                          _TRISAbits 008C  
                        _TRISCbits 008E                     ?_receive_input 0070  
                       _start_mark 029E                   _InitInputDataInt 02AC  
                   __end_of_InitIO 023D                  ??_get_minus_index 0052  
                     _InitTimerInt 0289                      __pidataCOMMON 02B7  
              start_initialization 0037                        __end_of_ISR 0036  
                         ??_InitIO 0051             get_msg_index@end_index 0054  
                      __pdataBANK0 0062                        __pbssCOMMON 007C  
                        ___latbits 0000                    ??_receive_input 0071  
                    __pcstackBANK0 0051                           ISR@value 0077  
         _extract_RGB_DATA_RQT_CMD 01F9                        _CPSCON0bits 001E  
                         ?_get_msg 0070                  ?i1_get_next_index 0070  
                      _client_conn 0020            __size_of_get_next_index 000B  
                        _count_rcv 007C                 ??i1_get_next_index 0070  
         get_msg_index@start_index 0057                          clear_ram0 02A6  
            get_distance@end_index 0051            __size_of_get_plus_index 000E  
         __end_of_InitInputDataInt 02B2                          _stop_mark 02A2  
                  _get_minus_index 0252                       _low_half_rcv 0079  
                    _end_index_rcv 007D                         _ANSELAbits 018C  
                       _ANSELCbits 018E                   __size_of_get_msg 003E  
                         __ptext10 0221                           __ptext12 0158  
                         __ptext13 0294             __size_of_get_msg_index 00FC  
                    __size_of_main 0015                           _pmsg_rcv 0063  
                         int$flags 007E                           get_msg@i 005C  
                         _pstr_rcv 007B                     _get_next_index 027E  
                       _INTCONbits 000B            __end_of_get_minus_index 0261  
                         intlevel1 0000              i1get_next_index@index 0070  
                __CFG_CLKOUTEN$OFF 0000         ??_extract_RGB_DATA_RQT_CMD 0052  
               receive_input@byte1 0073                 receive_input@byte2 0074  
                   _get_plus_index 0270                 receive_input@value 0072  
                    _get_msg_index 005C             __end_of_get_next_index 0289  
               __end_of_start_mark 02A2                get_plus_index@index 0053  
            __end_of_receive_input 01BB                      ?_get_distance 0051  
        __size_ofi1_get_next_index 000A             __end_of_get_plus_index 027E  
