

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Aug 02 23:45:46 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  0008                     	;# 
    36  0009                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000E                     	;# 
    41  0011                     	;# 
    42  0012                     	;# 
    43  0015                     	;# 
    44  0016                     	;# 
    45  0016                     	;# 
    46  0017                     	;# 
    47  0018                     	;# 
    48  0019                     	;# 
    49  001A                     	;# 
    50  001B                     	;# 
    51  001C                     	;# 
    52  001E                     	;# 
    53  001F                     	;# 
    54  008C                     	;# 
    55  008E                     	;# 
    56  0091                     	;# 
    57  0092                     	;# 
    58  0095                     	;# 
    59  0096                     	;# 
    60  0097                     	;# 
    61  0098                     	;# 
    62  0099                     	;# 
    63  009A                     	;# 
    64  009B                     	;# 
    65  009B                     	;# 
    66  009C                     	;# 
    67  009D                     	;# 
    68  009E                     	;# 
    69  010C                     	;# 
    70  010E                     	;# 
    71  0111                     	;# 
    72  0112                     	;# 
    73  0113                     	;# 
    74  0114                     	;# 
    75  0115                     	;# 
    76  0116                     	;# 
    77  0117                     	;# 
    78  0118                     	;# 
    79  0119                     	;# 
    80  011A                     	;# 
    81  011B                     	;# 
    82  011D                     	;# 
    83  011D                     	;# 
    84  018C                     	;# 
    85  018E                     	;# 
    86  0191                     	;# 
    87  0191                     	;# 
    88  0192                     	;# 
    89  0193                     	;# 
    90  0193                     	;# 
    91  0193                     	;# 
    92  0194                     	;# 
    93  0195                     	;# 
    94  0196                     	;# 
    95  0199                     	;# 
    96  019A                     	;# 
    97  019B                     	;# 
    98  019B                     	;# 
    99  019B                     	;# 
   100  019B                     	;# 
   101  019C                     	;# 
   102  019C                     	;# 
   103  019D                     	;# 
   104  019E                     	;# 
   105  019F                     	;# 
   106  020C                     	;# 
   107  020E                     	;# 
   108  0211                     	;# 
   109  0211                     	;# 
   110  0212                     	;# 
   111  0212                     	;# 
   112  0213                     	;# 
   113  0213                     	;# 
   114  0214                     	;# 
   115  0214                     	;# 
   116  0215                     	;# 
   117  0215                     	;# 
   118  0215                     	;# 
   119  0216                     	;# 
   120  0216                     	;# 
   121  0217                     	;# 
   122  0217                     	;# 
   123  0291                     	;# 
   124  0291                     	;# 
   125  0292                     	;# 
   126  0293                     	;# 
   127  0294                     	;# 
   128  0295                     	;# 
   129  0295                     	;# 
   130  0296                     	;# 
   131  0391                     	;# 
   132  0392                     	;# 
   133  0393                     	;# 
   134  039A                     	;# 
   135  039C                     	;# 
   136  039D                     	;# 
   137  039E                     	;# 
   138  039F                     	;# 
   139  0FE4                     	;# 
   140  0FE5                     	;# 
   141  0FE6                     	;# 
   142  0FE7                     	;# 
   143  0FE8                     	;# 
   144  0FE9                     	;# 
   145  0FEA                     	;# 
   146  0FEB                     	;# 
   147  0FED                     	;# 
   148  0FEE                     	;# 
   149  0FEF                     	;# 
   150                           
   151                           	psect	idataBANK0
   152  02A5                     __pidataBANK0:	
   153                           
   154                           ;initializer for _low_half_rcv
   155  02A5  3401               	retlw	1
   156                           
   157                           ;initializer for _pmsg
   158  02A6  3449               	retlw	low (_msg| 0)
   159                           
   160                           ;initializer for _pmsg_rcv
   161  02A7  3453               	retlw	low (_msg_rcv| 0)
   162                           
   163                           ;initializer for _pstr_rcv
   164  02A8  3453               	retlw	low (_msg_rcv| 0)
   165                           
   166                           ;initializer for _duty
   167  02A9  3432               	retlw	50
   168  02AA  347D               	retlw	125
   169  02AB  34C8               	retlw	200
   170                           
   171                           	psect	stringtext
   172  029D                     __pstringtext:	
   173  029D                     _start_mark:	
   174  029D  34EA               	retlw	234
   175  029E  34EB               	retlw	235
   176  029F  34EC               	retlw	236
   177  02A0  34ED               	retlw	237
   178  02A1                     __end_of_start_mark:	
   179  02A1                     _stop_mark:	
   180  02A1  34ED               	retlw	237
   181  02A2  34EC               	retlw	236
   182  02A3  34EB               	retlw	235
   183  02A4  34EA               	retlw	234
   184  02A5                     __end_of_stop_mark:	
   185  001E                     _CPSCON0bits	set	30
   186  000B                     _INTCONbits	set	11
   187  0015                     _TMR0	set	21
   188  0060                     _RA0	set	96
   189  0064                     _RA4	set	100
   190  0070                     _RC0	set	112
   191  0071                     _RC1	set	113
   192  0072                     _RC2	set	114
   193  0073                     _RC3	set	115
   194  0074                     _RC4	set	116
   195  0075                     _RC5	set	117
   196  005A                     _T0IF	set	90
   197  0095                     _OPTION_REGbits	set	149
   198  008C                     _TRISAbits	set	140
   199  008E                     _TRISCbits	set	142
   200  018C                     _ANSELAbits	set	396
   201  018E                     _ANSELCbits	set	398
   202                           
   203                           ; #config settings
   204  0000                     
   205                           	psect	cinit
   206  0063                     start_initialization:	
   207  0063                     __initialization:	
   208                           
   209                           ; Clear objects allocated to BANK0
   210  0063  3020               	movlw	low __pbssBANK0
   211  0064  0084               	movwf	4
   212  0065  3000               	movlw	high __pbssBANK0
   213  0066  0085               	movwf	5
   214  0067  303D               	movlw	61
   215  0068  22AC               	fcall	clear_ram0
   216                           
   217                           ; Initialize objects allocated to BANK0
   218  0069  30A5               	movlw	low __pidataBANK0
   219  006A  0084               	movwf	4
   220  006B  3082               	movlw	(high __pidataBANK0)| (0+128)
   221  006C  0085               	movwf	5
   222  006D  305D               	movlw	low __pdataBANK0
   223  006E  0086               	movwf	6
   224  006F  3000               	movlw	high __pdataBANK0
   225  0070  0087               	movwf	7
   226  0071  3007               	movlw	7
   227  0072  22B2               	fcall	init_ram
   228  0073                     end_of_initialization:	
   229                           ;End of C runtime variable initialization code
   230                           
   231  0073                     __end_of__initialization:	
   232  0073  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   233  0074  0020               	movlb	0
   234  0075  2A94               	ljmp	_main	;jump to C main() function
   235                           
   236                           	psect	bssBANK0
   237  0020                     __pbssBANK0:	
   238  0020                     _client_conn:	
   239  0020                     	ds	5
   240  0025                     _count:	
   241  0025                     	ds	1
   242  0026                     _end_index_rcv:	
   243  0026                     	ds	1
   244  0027                     _start_index_rcv:	
   245  0027                     	ds	1
   246  0028                     _time:	
   247  0028                     	ds	1
   248  0029                     _buffer_rcv:	
   249  0029                     	ds	32
   250  0049                     _msg:	
   251  0049                     	ds	10
   252  0053                     _msg_rcv:	
   253  0053                     	ds	10
   254                           
   255                           	psect	dataBANK0
   256  005D                     __pdataBANK0:	
   257  005D                     _low_half_rcv:	
   258  005D                     	ds	1
   259  005E                     _pmsg:	
   260  005E                     	ds	1
   261  005F                     _pmsg_rcv:	
   262  005F                     	ds	1
   263  0060                     _pstr_rcv:	
   264  0060                     	ds	1
   265  0061                     _duty:	
   266  0061                     	ds	3
   267                           
   268                           	psect	clrtext
   269  02AC                     clear_ram0:	
   270                           ;	Called with FSR0 containing the base address, and
   271                           ;	WREG with the size to clear
   272                           
   273  02AC  0064               	clrwdt	;clear the watchdog before getting into this loop
   274  02AD                     clrloop0:	
   275  02AD  0180               	clrf	0	;clear RAM location pointed to by FSR
   276  02AE  3101               	addfsr 0,1
   277  02AF  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   278  02B0  2AAD               	goto	clrloop0	;have we reached the end yet?
   279  02B1  3400               	retlw	0	;all done for this memory range, return
   280                           
   281                           	psect	inittext
   282  02B2                     init_ram:	
   283  02B2  00FE               	movwf	126
   284  02B3                     initloop:	
   285  02B3  0012               	moviw fsr0++
   286  02B4  001E               	movwi fsr1++
   287  02B5  0BFE               	decfsz	126,f
   288  02B6  2AB3               	goto	initloop
   289  02B7  3400               	retlw	0
   290                           
   291                           	psect	cstackCOMMON
   292  0070                     __pcstackCOMMON:	
   293  0070                     ?_get_next_index:	
   294  0070                     ??_get_next_index:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_receive_input:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_get_plus_index:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_get_minus_index:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_get_distance:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_get_msg:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_extract_RGB_DATA_RQT_CMD:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_InitIO:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?_InitTimerInt:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_InitInputDataInt:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_ISR:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_main:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     get_next_index@index:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     get_plus_index@add:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     get_minus_index@sub:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     get_distance@end_index:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     extract_RGB_DATA_RQT_CMD@duty:	
   343                           ; 1 bytes @ 0x0
   344                           
   345                           
   346                           ; 1 bytes @ 0x0
   347  0070                     	ds	1
   348  0071                     ??_receive_input:	
   349  0071                     ??_get_plus_index:	
   350                           ; 1 bytes @ 0x1
   351                           
   352  0071                     ??_get_minus_index:	
   353                           ; 1 bytes @ 0x1
   354                           
   355  0071                     ??_get_distance:	
   356                           ; 1 bytes @ 0x1
   357                           
   358  0071                     ??_extract_RGB_DATA_RQT_CMD:	
   359                           ; 1 bytes @ 0x1
   360                           
   361  0071                     get_minus_index@index:	
   362                           ; 1 bytes @ 0x1
   363                           
   364  0071                     get_distance@start_index:	
   365                           ; 1 bytes @ 0x1
   366                           
   367                           
   368                           ; 1 bytes @ 0x1
   369  0071                     	ds	1
   370  0072                     receive_input@value:	
   371  0072                     get_plus_index@index:	
   372                           ; 1 bytes @ 0x2
   373                           
   374  0072                     extract_RGB_DATA_RQT_CMD@pmsg:	
   375                           ; 1 bytes @ 0x2
   376                           
   377                           
   378                           ; 1 bytes @ 0x2
   379  0072                     	ds	1
   380  0073                     ?_get_msg_index:	
   381  0073                     receive_input@byte1:	
   382                           ; 1 bytes @ 0x3
   383                           
   384  0073                     get_msg_index@end_index:	
   385                           ; 1 bytes @ 0x3
   386                           
   387  0073                     extract_RGB_DATA_RQT_CMD@prqt:	
   388                           ; 1 bytes @ 0x3
   389                           
   390                           
   391                           ; 1 bytes @ 0x3
   392  0073                     	ds	1
   393  0074                     ??_get_msg_index:	
   394  0074                     receive_input@byte2:	
   395                           ; 1 bytes @ 0x4
   396                           
   397                           
   398                           ; 1 bytes @ 0x4
   399  0074                     	ds	2
   400  0076                     get_msg_index@start_index:	
   401                           
   402                           ; 1 bytes @ 0x6
   403  0076                     	ds	1
   404  0077                     get_msg_index@i:	
   405                           
   406                           ; 1 bytes @ 0x7
   407  0077                     	ds	1
   408  0078                     ??_get_msg:	
   409                           
   410                           ; 1 bytes @ 0x8
   411  0078                     	ds	2
   412  007A                     ??_ISR:	
   413                           
   414                           ; 1 bytes @ 0xA
   415  007A                     	ds	2
   416  007C                     ISR@value:	
   417                           
   418                           ; 1 bytes @ 0xC
   419  007C                     	ds	1
   420  007D                     ISR@byte:	
   421                           
   422                           ; 1 bytes @ 0xD
   423  007D                     	ds	1
   424                           
   425                           	psect	cstackBANK0
   426  0064                     __pcstackBANK0:	
   427  0064                     get_msg@pstr:	
   428                           
   429                           ; 1 bytes @ 0x0
   430  0064                     	ds	1
   431  0065                     get_msg@pmsg:	
   432                           
   433                           ; 1 bytes @ 0x1
   434  0065                     	ds	1
   435  0066                     get_msg@i:	
   436                           
   437                           ; 1 bytes @ 0x2
   438  0066                     	ds	1
   439  0067                     get_msg@start_index:	
   440                           
   441                           ; 1 bytes @ 0x3
   442  0067                     	ds	1
   443  0068                     get_msg@end_index:	
   444                           
   445                           ; 1 bytes @ 0x4
   446  0068                     	ds	1
   447  0069                     get_msg@temp:	
   448                           
   449                           ; 1 bytes @ 0x5
   450  0069                     	ds	1
   451  006A                     ??_InitIO:	
   452  006A                     ??_InitTimerInt:	
   453                           ; 1 bytes @ 0x6
   454                           
   455  006A                     ??_InitInputDataInt:	
   456                           ; 1 bytes @ 0x6
   457                           
   458  006A                     ??_main:	
   459                           ; 1 bytes @ 0x6
   460                           
   461                           
   462                           	psect	maintext
   463  0294                     __pmaintext:	
   464                           ; 1 bytes @ 0x6
   465 ;;
   466 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   467 ;;
   468 ;; *************** function _main *****************
   469 ;; Defined at:
   470 ;;		line 145 in file "led_pwm_client.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;		None
   473 ;; Auto vars:     Size  Location     Type
   474 ;;		None
   475 ;; Return value:  Size  Location     Type
   476 ;;                  1    wreg      void 
   477 ;; Registers used:
   478 ;;		status,2, status,0, pclath, cstack
   479 ;; Tracked objects:
   480 ;;		On entry : B1F/0
   481 ;;		On exit  : 0/0
   482 ;;		Unchanged: 0/0
   483 ;; Data sizes:     COMMON   BANK0   BANK1
   484 ;;      Params:         0       0       0
   485 ;;      Locals:         0       0       0
   486 ;;      Temps:          0       0       0
   487 ;;      Totals:         0       0       0
   488 ;;Total ram usage:        0 bytes
   489 ;; Hardware stack levels required when called:    5
   490 ;; This function calls:
   491 ;;		_InitIO
   492 ;;		_InitInputDataInt
   493 ;;		_InitTimerInt
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           
   500                           ;psect for function _main
   501  0294                     _main:	
   502                           
   503                           ;led_pwm_client.c: 147: InitIO();
   504                           
   505                           ;incstack = 0
   506                           ; Regs used in _main: [status,2+status,0+pclath+cstack]
   507  0294  2236               	fcall	_InitIO
   508                           
   509                           ;led_pwm_client.c: 148: InitTimerInt();
   510  0295  227F               	fcall	_InitTimerInt
   511                           
   512                           ;led_pwm_client.c: 149: InitInputDataInt();
   513  0296  22B8               	fcall	_InitInputDataInt
   514                           
   515                           ;led_pwm_client.c: 151: RC1 = 0;
   516  0297  0020               	movlb	0	; select bank0
   517  0298  108E               	bcf	14,1	;volatile
   518                           
   519                           ;led_pwm_client.c: 152: RC0 = 0;
   520  0299  100E               	bcf	14,0	;volatile
   521                           
   522                           ;led_pwm_client.c: 153: RA4 = 0;
   523  029A  120C               	bcf	12,4	;volatile
   524                           
   525                           ;led_pwm_client.c: 154: RA0 = 0;
   526  029B  100C               	bcf	12,0	;volatile
   527  029C                     l143:	
   528                           ;led_pwm_client.c: 156: while(1)
   529                           
   530                           
   531                           ;led_pwm_client.c: 157: {
   532  029C  2A9C               	goto	l143
   533  029D                     __end_of_main:	
   534                           
   535                           	psect	text1
   536  027F                     __ptext1:	
   537 ;; *************** function _InitTimerInt *****************
   538 ;; Defined at:
   539 ;;		line 72 in file "led_pwm_client.c"
   540 ;; Parameters:    Size  Location     Type
   541 ;;		None
   542 ;; Auto vars:     Size  Location     Type
   543 ;;		None
   544 ;; Return value:  Size  Location     Type
   545 ;;                  1    wreg      void 
   546 ;; Registers used:
   547 ;;		None
   548 ;; Tracked objects:
   549 ;;		On entry : 0/0
   550 ;;		On exit  : 0/0
   551 ;;		Unchanged: 0/0
   552 ;; Data sizes:     COMMON   BANK0   BANK1
   553 ;;      Params:         0       0       0
   554 ;;      Locals:         0       0       0
   555 ;;      Temps:          0       0       0
   556 ;;      Totals:         0       0       0
   557 ;;Total ram usage:        0 bytes
   558 ;; Hardware stack levels used:    1
   559 ;; Hardware stack levels required when called:    4
   560 ;; This function calls:
   561 ;;		Nothing
   562 ;; This function is called by:
   563 ;;		_main
   564 ;; This function uses a non-reentrant model
   565 ;;
   566                           
   567                           
   568                           ;psect for function _InitTimerInt
   569  027F                     _InitTimerInt:	
   570                           
   571                           ;led_pwm_client.c: 74: OPTION_REGbits.INTEDG = 0;
   572                           
   573                           ;incstack = 0
   574                           ; Regs used in _InitTimerInt: []
   575  027F  0021               	movlb	1	; select bank1
   576  0280  1315               	bcf	21,6	;volatile
   577                           
   578                           ;led_pwm_client.c: 75: OPTION_REGbits.T0CS = 0;
   579  0281  1295               	bcf	21,5	;volatile
   580                           
   581                           ;led_pwm_client.c: 76: OPTION_REGbits.PSA = 1;
   582  0282  1595               	bsf	21,3	;volatile
   583                           
   584                           ;led_pwm_client.c: 78: CPSCON0bits.T0XCS = 1;
   585  0283  0020               	movlb	0	; select bank0
   586  0284  141E               	bsf	30,0	;volatile
   587                           
   588                           ;led_pwm_client.c: 80: INTCONbits.GIE = 1;
   589  0285  178B               	bsf	11,7	;volatile
   590                           
   591                           ;led_pwm_client.c: 81: INTCONbits.PEIE = 1;
   592  0286  170B               	bsf	11,6	;volatile
   593                           
   594                           ;led_pwm_client.c: 82: INTCONbits.T0IE = 1;
   595  0287  168B               	bsf	11,5	;volatile
   596                           
   597                           ;led_pwm_client.c: 83: INTCONbits.T0IF = 0;
   598  0288  110B               	bcf	11,2	;volatile
   599  0289  0008               	return
   600  028A                     __end_of_InitTimerInt:	
   601                           
   602                           	psect	text2
   603  02B8                     __ptext2:	
   604 ;; *************** function _InitInputDataInt *****************
   605 ;; Defined at:
   606 ;;		line 87 in file "led_pwm_client.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;		None
   609 ;; Auto vars:     Size  Location     Type
   610 ;;		None
   611 ;; Return value:  Size  Location     Type
   612 ;;                  1    wreg      void 
   613 ;; Registers used:
   614 ;;		None
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMMON   BANK0   BANK1
   620 ;;      Params:         0       0       0
   621 ;;      Locals:         0       0       0
   622 ;;      Temps:          0       0       0
   623 ;;      Totals:         0       0       0
   624 ;;Total ram usage:        0 bytes
   625 ;; Hardware stack levels used:    1
   626 ;; Hardware stack levels required when called:    4
   627 ;; This function calls:
   628 ;;		Nothing
   629 ;; This function is called by:
   630 ;;		_main
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           
   635                           ;psect for function _InitInputDataInt
   636  02B8                     _InitInputDataInt:	
   637                           
   638                           ;led_pwm_client.c: 89: INTCONbits.GIE = 1;
   639                           
   640                           ;incstack = 0
   641                           ; Regs used in _InitInputDataInt: []
   642  02B8  178B               	bsf	11,7	;volatile
   643                           
   644                           ;led_pwm_client.c: 90: INTCONbits.INTE = 1;
   645  02B9  160B               	bsf	11,4	;volatile
   646                           
   647                           ;led_pwm_client.c: 91: INTCONbits.INTF = 0;
   648  02BA  108B               	bcf	11,1	;volatile
   649                           
   650                           ;led_pwm_client.c: 92: OPTION_REGbits.INTEDG = 0;
   651  02BB  0021               	movlb	1	; select bank1
   652  02BC  1315               	bcf	21,6	;volatile
   653  02BD  0008               	return
   654  02BE                     __end_of_InitInputDataInt:	
   655                           
   656                           	psect	text3
   657  0236                     __ptext3:	
   658 ;; *************** function _InitIO *****************
   659 ;; Defined at:
   660 ;;		line 43 in file "led_pwm_client.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;		None
   663 ;; Auto vars:     Size  Location     Type
   664 ;;		None
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		None
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMMON   BANK0   BANK1
   674 ;;      Params:         0       0       0
   675 ;;      Locals:         0       0       0
   676 ;;      Temps:          0       0       0
   677 ;;      Totals:         0       0       0
   678 ;;Total ram usage:        0 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; Hardware stack levels required when called:    4
   681 ;; This function calls:
   682 ;;		Nothing
   683 ;; This function is called by:
   684 ;;		_main
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           
   689                           ;psect for function _InitIO
   690  0236                     _InitIO:	
   691                           
   692                           ;led_pwm_client.c: 45: (TRISAbits.TRISA2 = 1);
   693                           
   694                           ;incstack = 0
   695                           ; Regs used in _InitIO: []
   696  0236  0021               	movlb	1	; select bank1
   697  0237  150C               	bsf	12,2	;volatile
   698                           
   699                           ;led_pwm_client.c: 46: ANSELAbits.ANSA2 = 0;
   700  0238  0023               	movlb	3	; select bank3
   701  0239  110C               	bcf	12,2	;volatile
   702                           
   703                           ;led_pwm_client.c: 48: (TRISAbits.TRISA0 = 0);
   704  023A  0021               	movlb	1	; select bank1
   705  023B  100C               	bcf	12,0	;volatile
   706                           
   707                           ;led_pwm_client.c: 49: ANSELAbits.ANSA0 = 0;
   708  023C  0023               	movlb	3	; select bank3
   709  023D  100C               	bcf	12,0	;volatile
   710                           
   711                           ;led_pwm_client.c: 51: (TRISCbits.TRISC1 = 0);
   712  023E  0021               	movlb	1	; select bank1
   713  023F  108E               	bcf	14,1	;volatile
   714                           
   715                           ;led_pwm_client.c: 52: ANSELCbits.ANSC1 = 0;
   716  0240  0023               	movlb	3	; select bank3
   717  0241  108E               	bcf	14,1	;volatile
   718                           
   719                           ;led_pwm_client.c: 54: (TRISCbits.TRISC0 = 0);
   720  0242  0021               	movlb	1	; select bank1
   721  0243  100E               	bcf	14,0	;volatile
   722                           
   723                           ;led_pwm_client.c: 55: ANSELCbits.ANSC0 = 0;
   724  0244  0023               	movlb	3	; select bank3
   725  0245  100E               	bcf	14,0	;volatile
   726                           
   727                           ;led_pwm_client.c: 57: (TRISAbits.TRISA4 = 0);
   728  0246  0021               	movlb	1	; select bank1
   729  0247  120C               	bcf	12,4	;volatile
   730                           
   731                           ;led_pwm_client.c: 58: ANSELAbits.ANSA4 = 0;
   732  0248  0023               	movlb	3	; select bank3
   733  0249  120C               	bcf	12,4	;volatile
   734                           
   735                           ;led_pwm_client.c: 60: (TRISCbits.TRISC2 = 1);
   736  024A  0021               	movlb	1	; select bank1
   737  024B  150E               	bsf	14,2	;volatile
   738                           
   739                           ;led_pwm_client.c: 61: ANSELCbits.ANSC2 = 0;
   740  024C  0023               	movlb	3	; select bank3
   741  024D  110E               	bcf	14,2	;volatile
   742                           
   743                           ;led_pwm_client.c: 63: (TRISCbits.TRISC3 = 1);
   744  024E  0021               	movlb	1	; select bank1
   745  024F  158E               	bsf	14,3	;volatile
   746                           
   747                           ;led_pwm_client.c: 64: ANSELCbits.ANSC3 = 0;
   748  0250  0023               	movlb	3	; select bank3
   749  0251  118E               	bcf	14,3	;volatile
   750                           
   751                           ;led_pwm_client.c: 66: (TRISCbits.TRISC4 = 1);
   752  0252  0021               	movlb	1	; select bank1
   753  0253  160E               	bsf	14,4	;volatile
   754                           
   755                           ;led_pwm_client.c: 69: (TRISCbits.TRISC5 = 1);
   756  0254  168E               	bsf	14,5	;volatile
   757  0255  0008               	return
   758  0256                     __end_of_InitIO:	
   759                           
   760                           	psect	intentry
   761  0004                     __pintentry:	
   762 ;; *************** function _ISR *****************
   763 ;; Defined at:
   764 ;;		line 94 in file "led_pwm_client.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;		None
   767 ;; Auto vars:     Size  Location     Type
   768 ;;  byte            1   13[COMMON] PTR struct .
   769 ;;		 -> ISR@value(1), 
   770 ;;  value           1   12[COMMON] unsigned char 
   771 ;; Return value:  Size  Location     Type
   772 ;;                  1    wreg      void 
   773 ;; Registers used:
   774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   775 ;; Tracked objects:
   776 ;;		On entry : 0/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMMON   BANK0   BANK1
   780 ;;      Params:         0       0       0
   781 ;;      Locals:         2       0       0
   782 ;;      Temps:          2       0       0
   783 ;;      Totals:         4       0       0
   784 ;;Total ram usage:        4 bytes
   785 ;; Hardware stack levels used:    1
   786 ;; Hardware stack levels required when called:    3
   787 ;; This function calls:
   788 ;;		_extract_RGB_DATA_RQT_CMD
   789 ;;		_get_msg
   790 ;;		_receive_input
   791 ;; This function is called by:
   792 ;;		Interrupt level 1
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796  0004                     _ISR:	
   797                           
   798                           ;incstack = 0
   799                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   800  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
   801  0005  3180               	pagesel	$
   802  0006  0020               	movlb	0	; select bank0
   803  0007  087F               	movf	127,w
   804  0008  00FB               	movwf	??_ISR+1
   805                           
   806                           ;led_pwm_client.c: 96: if(INTCONbits.INTF == 1)
   807  0009  1C8B               	btfss	11,1	;volatile
   808  000A  2843               	goto	i1l131
   809                           
   810                           ;led_pwm_client.c: 97: {
   811                           ;led_pwm_client.c: 98: T0IF = 0;
   812  000B  110B               	bcf	11,2	;volatile
   813                           
   814                           ;led_pwm_client.c: 99: { uint8_t value; { value = 0; BITbits_t *byte = (BITbits_t *)&val
      +                          ue; byte->B0 = RC2; byte->B1 = RC3; byte->B2 = RC4; byte->B3 = RC5; }; receive_input(val
      +                          ue); };
   815  000C  01FC               	clrf	ISR@value
   816  000D  307C               	movlw	(low (ISR@value| 0))& (0+255)
   817  000E  00FA               	movwf	??_ISR
   818  000F  087A               	movf	??_ISR,w
   819  0010  00FD               	movwf	ISR@byte
   820  0011  087D               	movf	ISR@byte,w
   821  0012  0086               	movwf	6
   822  0013  0187               	clrf	7
   823  0014  1001               	bcf	1,0
   824  0015  190E               	btfsc	14,2	;volatile
   825  0016  1401               	bsf	1,0
   826  0017  087D               	movf	ISR@byte,w
   827  0018  0086               	movwf	6
   828  0019  0187               	clrf	7
   829  001A  1081               	bcf	1,1
   830  001B  0020               	movlb	0	; select bank0
   831  001C  198E               	btfsc	14,3	;volatile
   832  001D  1481               	bsf	1,1
   833  001E  087D               	movf	ISR@byte,w
   834  001F  0086               	movwf	6
   835  0020  0187               	clrf	7
   836  0021  1101               	bcf	1,2
   837  0022  0020               	movlb	0	; select bank0
   838  0023  1A0E               	btfsc	14,4	;volatile
   839  0024  1501               	bsf	1,2
   840  0025  087D               	movf	ISR@byte,w
   841  0026  0086               	movwf	6
   842  0027  0187               	clrf	7
   843  0028  1181               	bcf	1,3
   844  0029  0020               	movlb	0	; select bank0
   845  002A  1A8E               	btfsc	14,5	;volatile
   846  002B  1581               	bsf	1,3
   847  002C  087C               	movf	ISR@value,w
   848  002D  2169               	fcall	_receive_input
   849                           
   850                           ;led_pwm_client.c: 101: if(get_msg(pmsg) == 1)
   851  002E  0020               	movlb	0	; select bank0
   852  002F  085E               	movf	_pmsg,w
   853  0030  21CF               	fcall	_get_msg
   854  0031  3A01               	xorlw	1
   855  0032  1D03               	skipz
   856  0033  283F               	goto	i1l132
   857                           
   858                           ;led_pwm_client.c: 102: {
   859                           ;led_pwm_client.c: 103: extract_RGB_DATA_RQT_CMD(pmsg, duty);
   860  0034  3061               	movlw	(low (_duty| 0))& (0+255)
   861  0035  00FA               	movwf	??_ISR
   862  0036  087A               	movf	??_ISR,w
   863  0037  00F0               	movwf	extract_RGB_DATA_RQT_CMD@duty
   864  0038  0020               	movlb	0	; select bank0
   865  0039  085E               	movf	_pmsg,w
   866  003A  220F               	fcall	_extract_RGB_DATA_RQT_CMD
   867                           
   868                           ;led_pwm_client.c: 104: time = 0;
   869  003B  0020               	movlb	0	; select bank0
   870  003C  01A8               	clrf	_time
   871                           
   872                           ;led_pwm_client.c: 105: RA0 = 1;
   873  003D  140C               	bsf	12,0	;volatile
   874                           
   875                           ;led_pwm_client.c: 106: }
   876  003E  2841               	goto	i1l133
   877  003F                     i1l132:	
   878                           
   879                           ;led_pwm_client.c: 107: else
   880                           ;led_pwm_client.c: 108: {
   881                           ;led_pwm_client.c: 109: RA0 = 0;
   882  003F  0020               	movlb	0	; select bank0
   883  0040  100C               	bcf	12,0	;volatile
   884  0041                     i1l133:	
   885                           
   886                           ;led_pwm_client.c: 110: }
   887                           ;led_pwm_client.c: 111: INTCONbits.INTF = 0;
   888  0041  108B               	bcf	11,1	;volatile
   889                           
   890                           ;led_pwm_client.c: 112: }
   891  0042  285E               	goto	i1l140
   892  0043                     i1l131:	
   893                           
   894                           ;led_pwm_client.c: 113: else
   895                           ;led_pwm_client.c: 114: {
   896                           ;led_pwm_client.c: 115: if(T0IF == 1)
   897  0043  1D0B               	btfss	11,2	;volatile
   898  0044  285E               	goto	i1l140
   899                           
   900                           ;led_pwm_client.c: 116: {
   901                           ;led_pwm_client.c: 117: T0IF = 0;
   902  0045  110B               	bcf	11,2	;volatile
   903                           
   904                           ;led_pwm_client.c: 121: TMR0 = 159;
   905  0046  309F               	movlw	159
   906  0047  0095               	movwf	21	;volatile
   907                           
   908                           ;led_pwm_client.c: 123: if(time == 0)
   909  0048  0828               	movf	_time,w
   910  0049  1D03               	btfss	3,2
   911  004A  284E               	goto	i1l1014
   912                           
   913                           ;led_pwm_client.c: 124: {
   914                           ;led_pwm_client.c: 125: RC1 = 1;
   915  004B  148E               	bsf	14,1	;volatile
   916                           
   917                           ;led_pwm_client.c: 126: RC0 = 1;
   918  004C  140E               	bsf	14,0	;volatile
   919                           
   920                           ;led_pwm_client.c: 127: RA4 = 1;
   921  004D  160C               	bsf	12,4	;volatile
   922  004E                     i1l1014:	
   923                           
   924                           ;led_pwm_client.c: 128: }
   925                           ;led_pwm_client.c: 129: if(time == duty[0])
   926  004E  0861               	movf	_duty,w
   927  004F  0628               	xorwf	_time,w
   928  0050  1903               	btfsc	3,2
   929                           
   930                           ;led_pwm_client.c: 130: {
   931                           ;led_pwm_client.c: 131: RC1 = 0;
   932  0051  108E               	bcf	14,1	;volatile
   933                           
   934                           ;led_pwm_client.c: 132: }
   935                           ;led_pwm_client.c: 133: if(time == duty[1])
   936  0052  0862               	movf	_duty+1,w
   937  0053  0628               	xorwf	_time,w
   938  0054  1903               	btfsc	3,2
   939                           
   940                           ;led_pwm_client.c: 134: {
   941                           ;led_pwm_client.c: 135: RC0 = 0;
   942  0055  100E               	bcf	14,0	;volatile
   943                           
   944                           ;led_pwm_client.c: 136: }
   945                           ;led_pwm_client.c: 137: if(time == duty[2])
   946  0056  0863               	movf	_duty+2,w
   947  0057  0628               	xorwf	_time,w
   948  0058  1903               	btfsc	3,2
   949                           
   950                           ;led_pwm_client.c: 138: {
   951                           ;led_pwm_client.c: 139: RA4 = 0;
   952  0059  120C               	bcf	12,4	;volatile
   953                           
   954                           ;led_pwm_client.c: 140: }
   955                           ;led_pwm_client.c: 141: time++;
   956  005A  3001               	movlw	1
   957  005B  00FA               	movwf	??_ISR
   958  005C  087A               	movf	??_ISR,w
   959  005D  07A8               	addwf	_time,f
   960  005E                     i1l140:	
   961  005E  087B               	movf	??_ISR+1,w
   962  005F  00FF               	movwf	127
   963  0060  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
   964  0061  0009               	retfie
   965  0062                     __end_of_ISR:	
   966                           
   967                           	psect	text5
   968  0169                     __ptext5:	
   969 ;; *************** function _receive_input *****************
   970 ;; Defined at:
   971 ;;		line 40 in file "circle_buffer.h"
   972 ;; Parameters:    Size  Location     Type
   973 ;;  value           1    wreg     unsigned char 
   974 ;; Auto vars:     Size  Location     Type
   975 ;;  value           1    2[COMMON] unsigned char 
   976 ;;  byte2           1    4[COMMON] PTR struct .
   977 ;;		 -> receive_input@value(1), 
   978 ;;  byte1           1    3[COMMON] PTR struct .
   979 ;;		 -> buffer_rcv(32), 
   980 ;; Return value:  Size  Location     Type
   981 ;;                  1    wreg      void 
   982 ;; Registers used:
   983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMMON   BANK0   BANK1
   989 ;;      Params:         0       0       0
   990 ;;      Locals:         3       0       0
   991 ;;      Temps:          1       0       0
   992 ;;      Totals:         4       0       0
   993 ;;Total ram usage:        4 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; Hardware stack levels required when called:    1
   996 ;; This function calls:
   997 ;;		_get_next_index
   998 ;; This function is called by:
   999 ;;		_ISR
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           
  1004                           ;psect for function _receive_input
  1005  0169                     _receive_input:	
  1006                           
  1007                           ;incstack = 0
  1008                           ; Regs used in _receive_input: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1009                           ;receive_input@value stored from wreg
  1010  0169  00F2               	movwf	receive_input@value
  1011                           
  1012                           ;circle_buffer.h: 42: { BITbits_t *byte1 = (BITbits_t *)&buffer_rcv[end_index_rcv]; BITb
      +                          its_t *byte2 = (BITbits_t *)&value; if(low_half_rcv == 1) { byte1->B0 = byte2->B0; byte1
      +                          ->B1 = byte2->B1; byte1->B2 = byte2->B2; byte1->B3 = byte2->B3; } else { byte1->B4 = byt
      +                          e2->B0; 
  1013  016A  0020               	movlb	0	; select bank0
  1014  016B  0826               	movf	_end_index_rcv,w
  1015  016C  3E29               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1016  016D  00F1               	movwf	??_receive_input
  1017  016E  0871               	movf	??_receive_input,w
  1018  016F  00F3               	movwf	receive_input@byte1
  1019  0170  3072               	movlw	(low (receive_input@value| 0))& (0+255)
  1020  0171  00F1               	movwf	??_receive_input
  1021  0172  0871               	movf	??_receive_input,w
  1022  0173  00F4               	movwf	receive_input@byte2
  1023  0174  035D               	decf	_low_half_rcv,w
  1024  0175  1D03               	btfss	3,2
  1025  0176  299C               	goto	i1l930
  1026  0177  0874               	movf	receive_input@byte2,w
  1027  0178  0086               	movwf	6
  1028  0179  0187               	clrf	7
  1029  017A  0873               	movf	receive_input@byte1,w
  1030  017B  0084               	movwf	4
  1031  017C  0185               	clrf	5
  1032  017D  1000               	bcf	0,0
  1033  017E  1801               	btfsc	1,0
  1034  017F  1400               	bsf	0,0
  1035  0180  0874               	movf	receive_input@byte2,w
  1036  0181  0086               	movwf	6
  1037  0182  0187               	clrf	7
  1038  0183  0873               	movf	receive_input@byte1,w
  1039  0184  0084               	movwf	4
  1040  0185  0185               	clrf	5
  1041  0186  1080               	bcf	0,1
  1042  0187  1881               	btfsc	1,1
  1043  0188  1480               	bsf	0,1
  1044  0189  0874               	movf	receive_input@byte2,w
  1045  018A  0086               	movwf	6
  1046  018B  0187               	clrf	7
  1047  018C  0873               	movf	receive_input@byte1,w
  1048  018D  0084               	movwf	4
  1049  018E  0185               	clrf	5
  1050  018F  1100               	bcf	0,2
  1051  0190  1901               	btfsc	1,2
  1052  0191  1500               	bsf	0,2
  1053  0192  0874               	movf	receive_input@byte2,w
  1054  0193  0086               	movwf	6
  1055  0194  0187               	clrf	7
  1056  0195  0873               	movf	receive_input@byte1,w
  1057  0196  0084               	movwf	4
  1058  0197  0185               	clrf	5
  1059  0198  1180               	bcf	0,3
  1060  0199  1981               	btfsc	1,3
  1061  019A  1580               	bsf	0,3
  1062  019B  29C0               	goto	i1l932
  1063  019C                     i1l930:	
  1064  019C  0874               	movf	receive_input@byte2,w
  1065  019D  0086               	movwf	6
  1066  019E  0187               	clrf	7
  1067  019F  0873               	movf	receive_input@byte1,w
  1068  01A0  0084               	movwf	4
  1069  01A1  0185               	clrf	5
  1070  01A2  1200               	bcf	0,4
  1071  01A3  1801               	btfsc	1,0
  1072  01A4  1600               	bsf	0,4
  1073  01A5  0874               	movf	receive_input@byte2,w
  1074  01A6  0086               	movwf	6
  1075  01A7  0187               	clrf	7
  1076  01A8  0873               	movf	receive_input@byte1,w
  1077  01A9  0084               	movwf	4
  1078  01AA  0185               	clrf	5
  1079  01AB  1280               	bcf	0,5
  1080  01AC  1881               	btfsc	1,1
  1081  01AD  1680               	bsf	0,5
  1082  01AE  0874               	movf	receive_input@byte2,w
  1083  01AF  0086               	movwf	6
  1084  01B0  0187               	clrf	7
  1085  01B1  0873               	movf	receive_input@byte1,w
  1086  01B2  0084               	movwf	4
  1087  01B3  0185               	clrf	5
  1088  01B4  1300               	bcf	0,6
  1089  01B5  1901               	btfsc	1,2
  1090  01B6  1700               	bsf	0,6
  1091  01B7  0874               	movf	receive_input@byte2,w
  1092  01B8  0086               	movwf	6
  1093  01B9  0187               	clrf	7
  1094  01BA  0873               	movf	receive_input@byte1,w
  1095  01BB  0084               	movwf	4
  1096  01BC  0185               	clrf	5
  1097  01BD  1380               	bcf	0,7
  1098  01BE  1981               	btfsc	1,3
  1099  01BF  1780               	bsf	0,7
  1100  01C0                     i1l932:	
  1101                           
  1102                           ;circle_buffer.h: 43: if(low_half_rcv == 1)
  1103  01C0  0020               	movlb	0	; select bank0
  1104  01C1  035D               	decf	_low_half_rcv,w
  1105  01C2  1D03               	btfss	3,2
  1106  01C3  29C6               	goto	i1l56
  1107                           
  1108                           ;circle_buffer.h: 44: {
  1109                           ;circle_buffer.h: 45: low_half_rcv = 0;
  1110  01C4  01DD               	clrf	_low_half_rcv
  1111                           
  1112                           ;circle_buffer.h: 46: }
  1113  01C5  0008               	return
  1114  01C6                     i1l56:	
  1115                           
  1116                           ;circle_buffer.h: 47: else
  1117                           ;circle_buffer.h: 48: {
  1118                           ;circle_buffer.h: 49: low_half_rcv = 1;
  1119  01C6  01DD               	clrf	_low_half_rcv
  1120  01C7  0ADD               	incf	_low_half_rcv,f
  1121                           
  1122                           ;circle_buffer.h: 50: end_index_rcv = get_next_index(end_index_rcv);
  1123  01C8  0826               	movf	_end_index_rcv,w
  1124  01C9  228A               	fcall	_get_next_index
  1125  01CA  00F1               	movwf	??_receive_input
  1126  01CB  0871               	movf	??_receive_input,w
  1127  01CC  0020               	movlb	0	; select bank0
  1128  01CD  00A6               	movwf	_end_index_rcv
  1129  01CE  0008               	return
  1130  01CF                     __end_of_receive_input:	
  1131                           
  1132                           	psect	text6
  1133  01CF                     __ptext6:	
  1134 ;; *************** function _get_msg *****************
  1135 ;; Defined at:
  1136 ;;		line 33 in file "msg.h"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;  pmsg            1    wreg     PTR struct .
  1139 ;;		 -> msg(10), 
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;  pmsg            1    1[BANK0 ] PTR struct .
  1142 ;;		 -> msg(10), 
  1143 ;;  temp            1    5[BANK0 ] unsigned char 
  1144 ;;  end_index       1    4[BANK0 ] unsigned char 
  1145 ;;  start_index     1    3[BANK0 ] unsigned char 
  1146 ;;  i               1    2[BANK0 ] unsigned char 
  1147 ;;  pstr            1    0[BANK0 ] PTR unsigned char 
  1148 ;;		 -> msg(10), 
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      unsigned char 
  1151 ;; Registers used:
  1152 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMMON   BANK0   BANK1
  1158 ;;      Params:         0       0       0
  1159 ;;      Locals:         0       6       0
  1160 ;;      Temps:          2       0       0
  1161 ;;      Totals:         2       6       0
  1162 ;;Total ram usage:        8 bytes
  1163 ;; Hardware stack levels used:    1
  1164 ;; Hardware stack levels required when called:    2
  1165 ;; This function calls:
  1166 ;;		_get_distance
  1167 ;;		_get_msg_index
  1168 ;;		_get_next_index
  1169 ;; This function is called by:
  1170 ;;		_ISR
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           
  1175                           ;psect for function _get_msg
  1176  01CF                     _get_msg:	
  1177                           
  1178                           ;incstack = 0
  1179                           ; Regs used in _get_msg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1180                           ;get_msg@pmsg stored from wreg
  1181  01CF  0020               	movlb	0	; select bank0
  1182  01D0  00E5               	movwf	get_msg@pmsg
  1183                           
  1184                           ;msg.h: 35: uint8_t *pstr = (uint8_t *)pmsg;
  1185  01D1  0865               	movf	get_msg@pmsg,w
  1186  01D2  00F8               	movwf	??_get_msg
  1187  01D3  0878               	movf	??_get_msg,w
  1188  01D4  00E4               	movwf	get_msg@pstr
  1189                           
  1190                           ;msg.h: 36: uint8_t start_index, end_index;
  1191                           ;msg.h: 37: uint8_t i = 0;
  1192  01D5  01E6               	clrf	get_msg@i
  1193                           
  1194                           ;msg.h: 38: uint8_t temp;
  1195                           ;msg.h: 39: if(get_msg_index(&start_index, &end_index) == 1)
  1196  01D6  3068               	movlw	(low (get_msg@end_index| 0))& (0+255)
  1197  01D7  00F8               	movwf	??_get_msg
  1198  01D8  0878               	movf	??_get_msg,w
  1199  01D9  00F3               	movwf	get_msg_index@end_index
  1200  01DA  3067               	movlw	(low (get_msg@start_index| 0))& (0+255)
  1201  01DB  2076               	fcall	_get_msg_index
  1202  01DC  3A01               	xorlw	1
  1203  01DD  1D03               	skipz
  1204  01DE  2A0D               	goto	i1l962
  1205                           
  1206                           ;msg.h: 40: {
  1207                           ;msg.h: 41: temp = start_index;
  1208  01DF  0020               	movlb	0	; select bank0
  1209  01E0  0867               	movf	get_msg@start_index,w
  1210  01E1  00F8               	movwf	??_get_msg
  1211  01E2  0878               	movf	??_get_msg,w
  1212  01E3                     L1:	
  1213  01E3  00E9               	movwf	get_msg@temp
  1214                           
  1215                           ;msg.h: 43: {
  1216                           ;msg.h: 44: pstr[i++] = buffer_rcv[temp];
  1217                           
  1218                           ;msg.h: 42: while(1)
  1219  01E4  0869               	movf	get_msg@temp,w
  1220  01E5  3E29               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1221  01E6  0086               	movwf	6
  1222  01E7  0187               	clrf	7
  1223  01E8  0801               	movf	1,w
  1224  01E9  00F8               	movwf	??_get_msg
  1225  01EA  0866               	movf	get_msg@i,w
  1226  01EB  0764               	addwf	get_msg@pstr,w
  1227  01EC  00F9               	movwf	??_get_msg+1
  1228  01ED  0879               	movf	??_get_msg+1,w
  1229  01EE  0086               	movwf	6
  1230  01EF  0187               	clrf	7
  1231  01F0  0878               	movf	??_get_msg,w
  1232  01F1  0081               	movwf	1
  1233  01F2  3001               	movlw	1
  1234  01F3  00F8               	movwf	??_get_msg
  1235  01F4  0878               	movf	??_get_msg,w
  1236  01F5  07E6               	addwf	get_msg@i,f
  1237                           
  1238                           ;msg.h: 45: buffer_rcv[temp] = 0;
  1239  01F6  0869               	movf	get_msg@temp,w
  1240  01F7  3E29               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1241  01F8  0086               	movwf	6
  1242  01F9  0187               	clrf	7
  1243  01FA  0181               	clrf	1
  1244                           
  1245                           ;msg.h: 46: if(get_distance(temp, end_index) == 0)
  1246  01FB  0868               	movf	get_msg@end_index,w
  1247  01FC  00F8               	movwf	??_get_msg
  1248  01FD  0878               	movf	??_get_msg,w
  1249  01FE  00F0               	movwf	get_distance@end_index
  1250  01FF  0869               	movf	get_msg@temp,w
  1251  0200  2264               	fcall	_get_distance
  1252  0201  3A00               	xorlw	0
  1253  0202  1903               	btfsc	3,2
  1254  0203  2A0B               	goto	i1l958
  1255                           
  1256                           ;msg.h: 49: }
  1257                           ;msg.h: 50: temp = get_next_index(temp);
  1258                           
  1259                           ;msg.h: 47: {
  1260                           ;msg.h: 48: break;
  1261  0204  0020               	movlb	0	; select bank0
  1262  0205  0869               	movf	get_msg@temp,w
  1263  0206  228A               	fcall	_get_next_index
  1264  0207  00F8               	movwf	??_get_msg
  1265  0208  0878               	movf	??_get_msg,w
  1266  0209  0020               	movlb	0	; select bank0
  1267  020A  29E3               	goto	L1
  1268  020B                     i1l958:	
  1269                           
  1270                           ;msg.h: 51: }
  1271                           ;msg.h: 52: return 1;
  1272  020B  3001               	movlw	1
  1273  020C  0008               	return
  1274  020D                     i1l962:	
  1275                           
  1276                           ;msg.h: 53: }
  1277                           ;msg.h: 54: return 0;
  1278  020D  3000               	movlw	0
  1279  020E  0008               	return
  1280  020F                     __end_of_get_msg:	
  1281                           
  1282                           	psect	text7
  1283  0076                     __ptext7:	
  1284 ;; *************** function _get_msg_index *****************
  1285 ;; Defined at:
  1286 ;;		line 82 in file "circle_buffer.h"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;  start_index     1    wreg     PTR unsigned char 
  1289 ;;		 -> get_msg@start_index(1), 
  1290 ;;  end_index       1    3[COMMON] PTR unsigned char 
  1291 ;;		 -> get_msg@end_index(1), 
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;  start_index     1    6[COMMON] PTR unsigned char 
  1294 ;;		 -> get_msg@start_index(1), 
  1295 ;;  i               1    7[COMMON] unsigned char 
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      unsigned char 
  1298 ;; Registers used:
  1299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMMON   BANK0   BANK1
  1305 ;;      Params:         1       0       0
  1306 ;;      Locals:         2       0       0
  1307 ;;      Temps:          2       0       0
  1308 ;;      Totals:         5       0       0
  1309 ;;Total ram usage:        5 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    1
  1312 ;; This function calls:
  1313 ;;		_get_distance
  1314 ;;		_get_minus_index
  1315 ;;		_get_next_index
  1316 ;;		_get_plus_index
  1317 ;; This function is called by:
  1318 ;;		_get_msg
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           
  1323                           ;psect for function _get_msg_index
  1324  0076                     _get_msg_index:	
  1325                           
  1326                           ;incstack = 0
  1327                           ; Regs used in _get_msg_index: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1328                           ;get_msg_index@start_index stored from wreg
  1329  0076  00F6               	movwf	get_msg_index@start_index
  1330                           
  1331                           ;circle_buffer.h: 104: uint8_t i;
  1332                           ;circle_buffer.h: 105: *start_index = 0xFF;
  1333  0077  30FF               	movlw	255
  1334  0078  00F4               	movwf	??_get_msg_index
  1335  0079  0876               	movf	get_msg_index@start_index,w
  1336  007A  0086               	movwf	6
  1337  007B  0187               	clrf	7
  1338  007C  0874               	movf	??_get_msg_index,w
  1339  007D  0081               	movwf	1
  1340                           
  1341                           ;circle_buffer.h: 106: *end_index = 0xFF;
  1342  007E  30FF               	movlw	255
  1343  007F  00F4               	movwf	??_get_msg_index
  1344  0080  0873               	movf	get_msg_index@end_index,w
  1345  0081  0086               	movwf	6
  1346  0082  0187               	clrf	7
  1347  0083  0874               	movf	??_get_msg_index,w
  1348  0084  0081               	movwf	1
  1349                           
  1350                           ;circle_buffer.h: 108: if(low_half_rcv == 0)
  1351  0085  0020               	movlb	0	; select bank0
  1352  0086  085D               	movf	_low_half_rcv,w
  1353  0087  1D03               	btfss	3,2
  1354  0088  288B               	goto	i1l876
  1355                           
  1356                           ;circle_buffer.h: 109: {
  1357                           ;circle_buffer.h: 110: return 0;
  1358  0089  3000               	movlw	0
  1359  008A  0008               	return
  1360  008B                     i1l876:	
  1361                           
  1362                           ;circle_buffer.h: 111: }
  1363                           ;circle_buffer.h: 112: if(get_distance(start_index_rcv, end_index_rcv) <= 7)
  1364  008B  0826               	movf	_end_index_rcv,w
  1365  008C  00F4               	movwf	??_get_msg_index
  1366  008D  0874               	movf	??_get_msg_index,w
  1367  008E  00F0               	movwf	get_distance@end_index
  1368  008F  0827               	movf	_start_index_rcv,w
  1369  0090  2264               	fcall	_get_distance
  1370  0091  00F5               	movwf	??_get_msg_index+1
  1371  0092  3008               	movlw	8
  1372  0093  0275               	subwf	??_get_msg_index+1,w
  1373  0094  1803               	skipnc
  1374  0095  2898               	goto	i1l882
  1375                           
  1376                           ;circle_buffer.h: 113: {
  1377                           ;circle_buffer.h: 114: return 0;
  1378  0096  3000               	movlw	0
  1379  0097  0008               	return
  1380  0098                     i1l882:	
  1381                           
  1382                           ;circle_buffer.h: 115: }
  1383                           ;circle_buffer.h: 116: i = start_index_rcv;
  1384  0098  0020               	movlb	0	; select bank0
  1385  0099  0827               	movf	_start_index_rcv,w
  1386  009A                     L2:	
  1387  009A  00F4               	movwf	??_get_msg_index
  1388  009B  0874               	movf	??_get_msg_index,w
  1389  009C  00F7               	movwf	get_msg_index@i
  1390  009D  0020               	movlb	0	; select bank0
  1391  009E  0826               	movf	_end_index_rcv,w
  1392  009F  00F4               	movwf	??_get_msg_index
  1393  00A0  0874               	movf	??_get_msg_index,w
  1394  00A1  00F0               	movwf	get_distance@end_index
  1395  00A2  0877               	movf	get_msg_index@i,w
  1396  00A3  2264               	fcall	_get_distance
  1397  00A4  00F5               	movwf	??_get_msg_index+1
  1398  00A5  3003               	movlw	3
  1399  00A6  0275               	subwf	??_get_msg_index+1,w
  1400  00A7  1C03               	btfss	3,0
  1401  00A8  294C               	goto	i1l908
  1402                           
  1403                           ;circle_buffer.h: 118: {
  1404                           ;circle_buffer.h: 121: if((buffer_rcv[i] == start_mark[0]) && (buffer_rcv[get_plus_index
      +                          (i, 1)] == start_mark[1])
  1405                           ;circle_buffer.h: 122: && (buffer_rcv[get_plus_index(i, 2)] == start_mark[2]) && (buffer
      +                          _rcv[get_plus_index(i, 3)] == start_mark[3]))
  1406                           
  1407                           ;circle_buffer.h: 117: while(get_distance(i, end_index_rcv) >= 3)
  1408  00A9  309D               	movlw	low (_start_mark| (0+32768))
  1409  00AA  0084               	movwf	4
  1410  00AB  3082               	movlw	high (_start_mark| (0+32768))
  1411  00AC  0085               	movwf	5
  1412  00AD  0800               	movf	0,w	;code access
  1413  00AE  00F4               	movwf	??_get_msg_index
  1414  00AF  0877               	movf	get_msg_index@i,w
  1415  00B0  3E29               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1416  00B1  0086               	movwf	6
  1417  00B2  0187               	clrf	7
  1418  00B3  0801               	movf	1,w
  1419  00B4  0674               	xorwf	??_get_msg_index,w
  1420  00B5  1D03               	skipz
  1421  00B6  28FA               	goto	i1l894
  1422  00B7  309E               	movlw	low ((_start_mark+1)| (0+32768))
  1423  00B8  0084               	movwf	4
  1424  00B9  3082               	movlw	high ((_start_mark+1)| (0+32768))
  1425  00BA  0085               	movwf	5
  1426  00BB  0800               	movf	0,w	;code access
  1427  00BC  00F4               	movwf	??_get_msg_index
  1428  00BD  01F0               	clrf	get_plus_index@add
  1429  00BE  0AF0               	incf	get_plus_index@add,f
  1430  00BF  0877               	movf	get_msg_index@i,w
  1431  00C0  2272               	fcall	_get_plus_index
  1432  00C1  3E29               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1433  00C2  0086               	movwf	6
  1434  00C3  0187               	clrf	7
  1435  00C4  0801               	movf	1,w
  1436  00C5  0674               	xorwf	??_get_msg_index,w
  1437  00C6  1D03               	skipz
  1438  00C7  28FA               	goto	i1l894
  1439  00C8  309F               	movlw	low ((_start_mark+2)| (0+32768))
  1440  00C9  0084               	movwf	4
  1441  00CA  3082               	movlw	high ((_start_mark+2)| (0+32768))
  1442  00CB  0085               	movwf	5
  1443  00CC  0800               	movf	0,w	;code access
  1444  00CD  00F4               	movwf	??_get_msg_index
  1445  00CE  3002               	movlw	2
  1446  00CF  00F5               	movwf	??_get_msg_index+1
  1447  00D0  0875               	movf	??_get_msg_index+1,w
  1448  00D1  00F0               	movwf	get_plus_index@add
  1449  00D2  0877               	movf	get_msg_index@i,w
  1450  00D3  2272               	fcall	_get_plus_index
  1451  00D4  3E29               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1452  00D5  0086               	movwf	6
  1453  00D6  0187               	clrf	7
  1454  00D7  0801               	movf	1,w
  1455  00D8  0674               	xorwf	??_get_msg_index,w
  1456  00D9  1D03               	skipz
  1457  00DA  28FA               	goto	i1l894
  1458                           
  1459                           ;circle_buffer.h: 123: {
  1460                           ;circle_buffer.h: 124: if(*start_index != -1)
  1461  00DB  30A0               	movlw	low ((_start_mark+3)| (0+32768))
  1462  00DC  0084               	movwf	4
  1463  00DD  3082               	movlw	high ((_start_mark+3)| (0+32768))
  1464  00DE  0085               	movwf	5
  1465  00DF  0800               	movf	0,w	;code access
  1466  00E0  00F4               	movwf	??_get_msg_index
  1467  00E1  3003               	movlw	3
  1468  00E2  00F5               	movwf	??_get_msg_index+1
  1469  00E3  0875               	movf	??_get_msg_index+1,w
  1470  00E4  00F0               	movwf	get_plus_index@add
  1471  00E5  0877               	movf	get_msg_index@i,w
  1472  00E6  2272               	fcall	_get_plus_index
  1473  00E7  3E29               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1474  00E8  0086               	movwf	6
  1475  00E9  0187               	clrf	7
  1476  00EA  0801               	movf	1,w
  1477  00EB  0674               	xorwf	??_get_msg_index,w
  1478  00EC  1D03               	skipz
  1479  00ED  28FA               	goto	i1l894
  1480                           
  1481                           ;circle_buffer.h: 125: {
  1482                           ;circle_buffer.h: 126: *start_index = get_plus_index(i, 4);
  1483  00EE  3004               	movlw	4
  1484  00EF  00F4               	movwf	??_get_msg_index
  1485  00F0  0874               	movf	??_get_msg_index,w
  1486  00F1  00F0               	movwf	get_plus_index@add
  1487  00F2  0877               	movf	get_msg_index@i,w
  1488  00F3  2272               	fcall	_get_plus_index
  1489  00F4  00F5               	movwf	??_get_msg_index+1
  1490  00F5  0876               	movf	get_msg_index@start_index,w
  1491  00F6  0086               	movwf	6
  1492  00F7  0187               	clrf	7
  1493  00F8  0875               	movf	??_get_msg_index+1,w
  1494  00F9  2948               	goto	L3
  1495  00FA                     i1l894:	
  1496                           ;circle_buffer.h: 127: }
  1497                           ;circle_buffer.h: 128: }
  1498                           
  1499                           
  1500                           ;circle_buffer.h: 129: else if((buffer_rcv[i] == stop_mark[0]) && (buffer_rcv[get_plus_i
      +                          ndex(i, 1)] == stop_mark[1])
  1501                           ;circle_buffer.h: 130: && (buffer_rcv[get_plus_index(i, 2)] == stop_mark[2]) && (buffer_
      +                          rcv[get_plus_index(i, 3)] == stop_mark[3]))
  1502  00FA  30A1               	movlw	low (_stop_mark| (0+32768))
  1503  00FB  0084               	movwf	4
  1504  00FC  3082               	movlw	high (_stop_mark| (0+32768))
  1505  00FD  0085               	movwf	5
  1506  00FE  0800               	movf	0,w	;code access
  1507  00FF  00F4               	movwf	??_get_msg_index
  1508  0100  0877               	movf	get_msg_index@i,w
  1509  0101  3E29               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1510  0102  0086               	movwf	6
  1511  0103  0187               	clrf	7
  1512  0104  0801               	movf	1,w
  1513  0105  0674               	xorwf	??_get_msg_index,w
  1514  0106  1D03               	skipz
  1515  0107  2949               	goto	i1l904
  1516  0108  30A2               	movlw	low ((_stop_mark+1)| (0+32768))
  1517  0109  0084               	movwf	4
  1518  010A  3082               	movlw	high ((_stop_mark+1)| (0+32768))
  1519  010B  0085               	movwf	5
  1520  010C  0800               	movf	0,w	;code access
  1521  010D  00F4               	movwf	??_get_msg_index
  1522  010E  01F0               	clrf	get_plus_index@add
  1523  010F  0AF0               	incf	get_plus_index@add,f
  1524  0110  0877               	movf	get_msg_index@i,w
  1525  0111  2272               	fcall	_get_plus_index
  1526  0112  3E29               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1527  0113  0086               	movwf	6
  1528  0114  0187               	clrf	7
  1529  0115  0801               	movf	1,w
  1530  0116  0674               	xorwf	??_get_msg_index,w
  1531  0117  1D03               	skipz
  1532  0118  2949               	goto	i1l904
  1533  0119  30A3               	movlw	low ((_stop_mark+2)| (0+32768))
  1534  011A  0084               	movwf	4
  1535  011B  3082               	movlw	high ((_stop_mark+2)| (0+32768))
  1536  011C  0085               	movwf	5
  1537  011D  0800               	movf	0,w	;code access
  1538  011E  00F4               	movwf	??_get_msg_index
  1539  011F  3002               	movlw	2
  1540  0120  00F5               	movwf	??_get_msg_index+1
  1541  0121  0875               	movf	??_get_msg_index+1,w
  1542  0122  00F0               	movwf	get_plus_index@add
  1543  0123  0877               	movf	get_msg_index@i,w
  1544  0124  2272               	fcall	_get_plus_index
  1545  0125  3E29               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1546  0126  0086               	movwf	6
  1547  0127  0187               	clrf	7
  1548  0128  0801               	movf	1,w
  1549  0129  0674               	xorwf	??_get_msg_index,w
  1550  012A  1D03               	skipz
  1551  012B  2949               	goto	i1l904
  1552                           
  1553                           ;circle_buffer.h: 131: {
  1554                           ;circle_buffer.h: 132: if(*end_index != -1)
  1555  012C  30A4               	movlw	low ((_stop_mark+3)| (0+32768))
  1556  012D  0084               	movwf	4
  1557  012E  3082               	movlw	high ((_stop_mark+3)| (0+32768))
  1558  012F  0085               	movwf	5
  1559  0130  0800               	movf	0,w	;code access
  1560  0131  00F4               	movwf	??_get_msg_index
  1561  0132  3003               	movlw	3
  1562  0133  00F5               	movwf	??_get_msg_index+1
  1563  0134  0875               	movf	??_get_msg_index+1,w
  1564  0135  00F0               	movwf	get_plus_index@add
  1565  0136  0877               	movf	get_msg_index@i,w
  1566  0137  2272               	fcall	_get_plus_index
  1567  0138  3E29               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1568  0139  0086               	movwf	6
  1569  013A  0187               	clrf	7
  1570  013B  0801               	movf	1,w
  1571  013C  0674               	xorwf	??_get_msg_index,w
  1572  013D  1D03               	skipz
  1573  013E  2949               	goto	i1l904
  1574                           
  1575                           ;circle_buffer.h: 133: {
  1576                           ;circle_buffer.h: 134: *end_index = get_minus_index(i, 1);
  1577  013F  01F0               	clrf	get_minus_index@sub
  1578  0140  0AF0               	incf	get_minus_index@sub,f
  1579  0141  0877               	movf	get_msg_index@i,w
  1580  0142  2256               	fcall	_get_minus_index
  1581  0143  00F4               	movwf	??_get_msg_index
  1582  0144  0873               	movf	get_msg_index@end_index,w
  1583  0145  0086               	movwf	6
  1584  0146  0187               	clrf	7
  1585  0147  0874               	movf	??_get_msg_index,w
  1586  0148                     L3:	
  1587  0148  0081               	movwf	1
  1588  0149                     i1l904:	
  1589                           
  1590                           ;circle_buffer.h: 135: }
  1591                           ;circle_buffer.h: 136: }
  1592                           ;circle_buffer.h: 138: i = get_next_index(i);
  1593  0149  0877               	movf	get_msg_index@i,w
  1594  014A  228A               	fcall	_get_next_index
  1595  014B  289A               	goto	L2
  1596  014C                     i1l908:	
  1597                           
  1598                           ;circle_buffer.h: 139: }
  1599                           ;circle_buffer.h: 141: if(((*start_index != 0xFF) && (*end_index != 0xFF)) == 1)
  1600  014C  0876               	movf	get_msg_index@start_index,w
  1601  014D  0086               	movwf	6
  1602  014E  0187               	clrf	7
  1603  014F  0A01               	incf	1,w
  1604  0150  1903               	btfsc	3,2
  1605  0151  2967               	goto	i1l918
  1606  0152  0873               	movf	get_msg_index@end_index,w
  1607  0153  0086               	movwf	6
  1608  0154  0187               	clrf	7
  1609  0155  0A01               	incf	1,w
  1610  0156  1903               	btfsc	3,2
  1611  0157  2967               	goto	i1l918
  1612                           
  1613                           ;circle_buffer.h: 142: {
  1614                           ;circle_buffer.h: 143: start_index_rcv = get_plus_index(*end_index, 5);
  1615  0158  3005               	movlw	5
  1616  0159  00F4               	movwf	??_get_msg_index
  1617  015A  0874               	movf	??_get_msg_index,w
  1618  015B  00F0               	movwf	get_plus_index@add
  1619  015C  0873               	movf	get_msg_index@end_index,w
  1620  015D  0086               	movwf	6
  1621  015E  0187               	clrf	7
  1622  015F  0801               	movf	1,w
  1623  0160  2272               	fcall	_get_plus_index
  1624  0161  00F5               	movwf	??_get_msg_index+1
  1625  0162  0875               	movf	??_get_msg_index+1,w
  1626  0163  0020               	movlb	0	; select bank0
  1627  0164  00A7               	movwf	_start_index_rcv
  1628                           
  1629                           ;circle_buffer.h: 144: return 1;
  1630  0165  3001               	movlw	1
  1631  0166  0008               	return
  1632  0167                     i1l918:	
  1633                           
  1634                           ;circle_buffer.h: 145: }
  1635                           ;circle_buffer.h: 146: return 0;
  1636  0167  3000               	movlw	0
  1637  0168  0008               	return
  1638  0169                     __end_of_get_msg_index:	
  1639                           
  1640                           	psect	text8
  1641  0272                     __ptext8:	
  1642 ;; *************** function _get_plus_index *****************
  1643 ;; Defined at:
  1644 ;;		line 54 in file "circle_buffer.h"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;  index           1    wreg     unsigned char 
  1647 ;;  add             1    0[COMMON] unsigned char 
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;  index           1    2[COMMON] unsigned char 
  1650 ;; Return value:  Size  Location     Type
  1651 ;;                  1    wreg      unsigned char 
  1652 ;; Registers used:
  1653 ;;		wreg, status,2, status,0
  1654 ;; Tracked objects:
  1655 ;;		On entry : 0/0
  1656 ;;		On exit  : 0/0
  1657 ;;		Unchanged: 0/0
  1658 ;; Data sizes:     COMMON   BANK0   BANK1
  1659 ;;      Params:         1       0       0
  1660 ;;      Locals:         1       0       0
  1661 ;;      Temps:          1       0       0
  1662 ;;      Totals:         3       0       0
  1663 ;;Total ram usage:        3 bytes
  1664 ;; Hardware stack levels used:    1
  1665 ;; This function calls:
  1666 ;;		Nothing
  1667 ;; This function is called by:
  1668 ;;		_get_msg_index
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           
  1673                           ;psect for function _get_plus_index
  1674  0272                     _get_plus_index:	
  1675                           
  1676                           ;incstack = 0
  1677                           ; Regs used in _get_plus_index: [wreg+status,2+status,0]
  1678                           ;get_plus_index@index stored from wreg
  1679  0272  00F2               	movwf	get_plus_index@index
  1680                           
  1681                           ;circle_buffer.h: 56: index += add;
  1682  0273  0870               	movf	get_plus_index@add,w
  1683  0274  00F1               	movwf	??_get_plus_index
  1684  0275  0871               	movf	??_get_plus_index,w
  1685  0276  07F2               	addwf	get_plus_index@index,f
  1686                           
  1687                           ;circle_buffer.h: 57: if(index >= 32)
  1688  0277  3020               	movlw	32
  1689  0278  0272               	subwf	get_plus_index@index,w
  1690  0279  1C03               	skipc
  1691  027A  2A7D               	goto	i1l842
  1692                           
  1693                           ;circle_buffer.h: 58: {
  1694                           ;circle_buffer.h: 59: index -= 32;
  1695  027B  3020               	movlw	32
  1696  027C  02F2               	subwf	get_plus_index@index,f
  1697  027D                     i1l842:	
  1698                           
  1699                           ;circle_buffer.h: 60: }
  1700                           ;circle_buffer.h: 61: return index;
  1701  027D  0872               	movf	get_plus_index@index,w
  1702  027E  0008               	return
  1703  027F                     __end_of_get_plus_index:	
  1704                           
  1705                           	psect	text9
  1706  028A                     __ptext9:	
  1707 ;; *************** function _get_next_index *****************
  1708 ;; Defined at:
  1709 ;;		line 29 in file "circle_buffer.h"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  index           1    wreg     unsigned char 
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;  index           1    0[COMMON] unsigned char 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  1    wreg      unsigned char 
  1716 ;; Registers used:
  1717 ;;		wreg, status,2, status,0
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMMON   BANK0   BANK1
  1723 ;;      Params:         0       0       0
  1724 ;;      Locals:         1       0       0
  1725 ;;      Temps:          0       0       0
  1726 ;;      Totals:         1       0       0
  1727 ;;Total ram usage:        1 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		_receive_input
  1733 ;;		_get_msg_index
  1734 ;;		_get_msg
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           
  1739                           ;psect for function _get_next_index
  1740  028A                     _get_next_index:	
  1741                           
  1742                           ;incstack = 0
  1743                           ; Regs used in _get_next_index: [wreg+status,2+status,0]
  1744                           ;get_next_index@index stored from wreg
  1745  028A  00F0               	movwf	get_next_index@index
  1746                           
  1747                           ;circle_buffer.h: 31: if(index == 32 - 1)
  1748  028B  301F               	movlw	31
  1749  028C  0670               	xorwf	get_next_index@index,w
  1750  028D  1D03               	btfss	3,2
  1751  028E  2A91               	goto	i1l834
  1752                           
  1753                           ;circle_buffer.h: 32: {
  1754                           ;circle_buffer.h: 33: return 0;
  1755  028F  3000               	movlw	0
  1756                           
  1757                           ;circle_buffer.h: 34: }
  1758  0290  0008               	return
  1759  0291                     i1l834:	
  1760                           
  1761                           ;circle_buffer.h: 35: else
  1762                           ;circle_buffer.h: 36: {
  1763                           ;circle_buffer.h: 37: return (index + 1);
  1764  0291  0870               	movf	get_next_index@index,w
  1765  0292  3E01               	addlw	1
  1766  0293  0008               	return
  1767  0294                     __end_of_get_next_index:	
  1768                           
  1769                           	psect	text10
  1770  0256                     __ptext10:	
  1771 ;; *************** function _get_minus_index *****************
  1772 ;; Defined at:
  1773 ;;		line 63 in file "circle_buffer.h"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;  index           1    wreg     unsigned char 
  1776 ;;  sub             1    0[COMMON] unsigned char 
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;  index           1    1[COMMON] unsigned char 
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  1    wreg      unsigned char 
  1781 ;; Registers used:
  1782 ;;		wreg, status,2, status,0
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMMON   BANK0   BANK1
  1788 ;;      Params:         1       0       0
  1789 ;;      Locals:         1       0       0
  1790 ;;      Temps:          0       0       0
  1791 ;;      Totals:         2       0       0
  1792 ;;Total ram usage:        2 bytes
  1793 ;; Hardware stack levels used:    1
  1794 ;; This function calls:
  1795 ;;		Nothing
  1796 ;; This function is called by:
  1797 ;;		_get_msg_index
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           
  1802                           ;psect for function _get_minus_index
  1803  0256                     _get_minus_index:	
  1804                           
  1805                           ;incstack = 0
  1806                           ; Regs used in _get_minus_index: [wreg+status,2+status,0]
  1807                           ;get_minus_index@index stored from wreg
  1808  0256  00F1               	movwf	get_minus_index@index
  1809                           
  1810                           ;circle_buffer.h: 65: if(index < sub)
  1811  0257  0870               	movf	get_minus_index@sub,w
  1812  0258  0271               	subwf	get_minus_index@index,w
  1813  0259  1803               	skipnc
  1814  025A  2A60               	goto	i1l852
  1815                           
  1816                           ;circle_buffer.h: 66: {
  1817                           ;circle_buffer.h: 67: return index + 32 - sub;
  1818  025B  0370               	decf	get_minus_index@sub,w
  1819  025C  3AFF               	xorlw	255
  1820  025D  0771               	addwf	get_minus_index@index,w
  1821  025E  3E20               	addlw	32
  1822  025F  0008               	return
  1823  0260                     i1l852:	
  1824                           
  1825                           ;circle_buffer.h: 68: }
  1826                           ;circle_buffer.h: 69: return index - sub;
  1827  0260  0370               	decf	get_minus_index@sub,w
  1828  0261  3AFF               	xorlw	255
  1829  0262  0771               	addwf	get_minus_index@index,w
  1830  0263  0008               	return
  1831  0264                     __end_of_get_minus_index:	
  1832                           
  1833                           	psect	text11
  1834  0264                     __ptext11:	
  1835 ;; *************** function _get_distance *****************
  1836 ;; Defined at:
  1837 ;;		line 71 in file "circle_buffer.h"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;  start_index     1    wreg     unsigned char 
  1840 ;;  end_index       1    0[COMMON] unsigned char 
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;  start_index     1    1[COMMON] unsigned char 
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  1    wreg      unsigned char 
  1845 ;; Registers used:
  1846 ;;		wreg, status,2, status,0
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMMON   BANK0   BANK1
  1852 ;;      Params:         1       0       0
  1853 ;;      Locals:         1       0       0
  1854 ;;      Temps:          0       0       0
  1855 ;;      Totals:         2       0       0
  1856 ;;Total ram usage:        2 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; This function calls:
  1859 ;;		Nothing
  1860 ;; This function is called by:
  1861 ;;		_get_msg_index
  1862 ;;		_get_msg
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866                           
  1867                           ;psect for function _get_distance
  1868  0264                     _get_distance:	
  1869                           
  1870                           ;incstack = 0
  1871                           ; Regs used in _get_distance: [wreg+status,2+status,0]
  1872                           ;get_distance@start_index stored from wreg
  1873  0264  00F1               	movwf	get_distance@start_index
  1874                           
  1875                           ;circle_buffer.h: 73: if(end_index < start_index)
  1876  0265  0871               	movf	get_distance@start_index,w
  1877  0266  0270               	subwf	get_distance@end_index,w
  1878  0267  1803               	skipnc
  1879  0268  2A6E               	goto	i1l864
  1880                           
  1881                           ;circle_buffer.h: 74: {
  1882                           ;circle_buffer.h: 75: return end_index + 32 - start_index;
  1883  0269  0371               	decf	get_distance@start_index,w
  1884  026A  3AFF               	xorlw	255
  1885  026B  0770               	addwf	get_distance@end_index,w
  1886  026C  3E20               	addlw	32
  1887                           
  1888                           ;circle_buffer.h: 76: }
  1889  026D  0008               	return
  1890  026E                     i1l864:	
  1891                           
  1892                           ;circle_buffer.h: 77: else
  1893                           ;circle_buffer.h: 78: {
  1894                           ;circle_buffer.h: 79: return (end_index - start_index);
  1895  026E  0371               	decf	get_distance@start_index,w
  1896  026F  3AFF               	xorlw	255
  1897  0270  0770               	addwf	get_distance@end_index,w
  1898  0271  0008               	return
  1899  0272                     __end_of_get_distance:	
  1900                           
  1901                           	psect	text12
  1902  020F                     __ptext12:	
  1903 ;; *************** function _extract_RGB_DATA_RQT_CMD *****************
  1904 ;; Defined at:
  1905 ;;		line 24 in file "rgb_data.h"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;  pmsg            1    wreg     PTR const struct .
  1908 ;;		 -> msg(10), 
  1909 ;;  duty            1    0[COMMON] PTR unsigned char 
  1910 ;;		 -> duty(3), 
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;  pmsg            1    2[COMMON] PTR const struct .
  1913 ;;		 -> msg(10), 
  1914 ;;  prqt            1    3[COMMON] PTR struct .
  1915 ;;		 -> msg.data(3), msg(10), 
  1916 ;; Return value:  Size  Location     Type
  1917 ;;                  1    wreg      void 
  1918 ;; Registers used:
  1919 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMMON   BANK0   BANK1
  1925 ;;      Params:         1       0       0
  1926 ;;      Locals:         2       0       0
  1927 ;;      Temps:          1       0       0
  1928 ;;      Totals:         4       0       0
  1929 ;;Total ram usage:        4 bytes
  1930 ;; Hardware stack levels used:    1
  1931 ;; This function calls:
  1932 ;;		Nothing
  1933 ;; This function is called by:
  1934 ;;		_ISR
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           
  1939                           ;psect for function _extract_RGB_DATA_RQT_CMD
  1940  020F                     _extract_RGB_DATA_RQT_CMD:	
  1941                           
  1942                           ;incstack = 0
  1943                           ; Regs used in _extract_RGB_DATA_RQT_CMD: [wreg+fsr1l+fsr1h+status,2+status,0]
  1944                           ;extract_RGB_DATA_RQT_CMD@pmsg stored from wreg
  1945  020F  00F2               	movwf	extract_RGB_DATA_RQT_CMD@pmsg
  1946                           
  1947                           ;rgb_data.h: 26: RGB_DATA_RQT_CMD_t *prqt;
  1948                           ;rgb_data.h: 27: prqt = (RGB_DATA_RQT_CMD_t *)pmsg->data;
  1949  0210  0872               	movf	extract_RGB_DATA_RQT_CMD@pmsg,w
  1950  0211  3E07               	addlw	7
  1951  0212  00F1               	movwf	??_extract_RGB_DATA_RQT_CMD
  1952  0213  0871               	movf	??_extract_RGB_DATA_RQT_CMD,w
  1953  0214  00F3               	movwf	extract_RGB_DATA_RQT_CMD@prqt
  1954                           
  1955                           ;rgb_data.h: 28: duty[0] = prqt->r;
  1956  0215  0873               	movf	extract_RGB_DATA_RQT_CMD@prqt,w
  1957  0216  0086               	movwf	6
  1958  0217  0187               	clrf	7
  1959  0218  0801               	movf	1,w
  1960  0219  00F1               	movwf	??_extract_RGB_DATA_RQT_CMD
  1961  021A  0870               	movf	extract_RGB_DATA_RQT_CMD@duty,w
  1962  021B  0086               	movwf	6
  1963  021C  0187               	clrf	7
  1964  021D  0871               	movf	??_extract_RGB_DATA_RQT_CMD,w
  1965  021E  0081               	movwf	1
  1966                           
  1967                           ;rgb_data.h: 29: duty[1] = prqt->g;
  1968  021F  0A73               	incf	extract_RGB_DATA_RQT_CMD@prqt,w
  1969  0220  0086               	movwf	6
  1970  0221  0187               	clrf	7
  1971  0222  0801               	movf	1,w
  1972  0223  00F1               	movwf	??_extract_RGB_DATA_RQT_CMD
  1973  0224  0A70               	incf	extract_RGB_DATA_RQT_CMD@duty,w
  1974  0225  0086               	movwf	6
  1975  0226  0187               	clrf	7
  1976  0227  0871               	movf	??_extract_RGB_DATA_RQT_CMD,w
  1977  0228  0081               	movwf	1
  1978                           
  1979                           ;rgb_data.h: 30: duty[2] = prqt->b;
  1980  0229  0873               	movf	extract_RGB_DATA_RQT_CMD@prqt,w
  1981  022A  3E02               	addlw	2
  1982  022B  0086               	movwf	6
  1983  022C  0187               	clrf	7
  1984  022D  0801               	movf	1,w
  1985  022E  00F1               	movwf	??_extract_RGB_DATA_RQT_CMD
  1986  022F  0870               	movf	extract_RGB_DATA_RQT_CMD@duty,w
  1987  0230  3E02               	addlw	2
  1988  0231  0086               	movwf	6
  1989  0232  0187               	clrf	7
  1990  0233  0871               	movf	??_extract_RGB_DATA_RQT_CMD,w
  1991  0234  0081               	movwf	1
  1992  0235  0008               	return
  1993  0236                     __end_of_extract_RGB_DATA_RQT_CMD:	
  1994  007E                     btemp	set	126	;btemp
  1995  007E                     int$flags	set	126
  1996  007E                     wtemp	set	126
  1997  007E                     wtemp0	set	126
  1998  0080                     wtemp1	set	128
  1999  0082                     wtemp2	set	130
  2000  0084                     wtemp3	set	132
  2001  0086                     wtemp4	set	134
  2002  0088                     wtemp5	set	136
  2003  007F                     wtemp6	set	127
  2004  007E                     ttemp	set	126
  2005  007E                     ttemp0	set	126
  2006  0081                     ttemp1	set	129
  2007  0084                     ttemp2	set	132
  2008  0087                     ttemp3	set	135
  2009  007F                     ttemp4	set	127
  2010  007E                     ltemp	set	126
  2011  007E                     ltemp0	set	126
  2012  0082                     ltemp1	set	130
  2013  0086                     ltemp2	set	134
  2014  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    8
    Data        7
    BSS         61
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      6      74
    BANK1            32      0       0

Pointer List with Targets:

    ISR@byte	PTR struct . size(1) Largest target is 1
		 -> ISR@value(COMMON[1]), 

    pmsg	PTR struct . size(1) Largest target is 10
		 -> msg(BANK0[10]), 

    extract_RGB_DATA_RQT_CMD@duty	PTR unsigned char  size(1) Largest target is 3
		 -> duty(BANK0[3]), 

    extract_RGB_DATA_RQT_CMD@pmsg	PTR const struct . size(1) Largest target is 10
		 -> msg(BANK0[10]), 

    extract_RGB_DATA_RQT_CMD@prqt	PTR struct . size(1) Largest target is 10
		 -> msg.data(BANK0[3]), msg(BANK0[10]), 

    get_msg@pmsg	PTR struct . size(1) Largest target is 10
		 -> msg(BANK0[10]), 

    get_msg@pstr	PTR unsigned char  size(1) Largest target is 10
		 -> msg(BANK0[10]), 

    pstr_rcv	PTR unsigned char  size(1) Largest target is 10
		 -> msg_rcv(BANK0[10]), 

    pmsg_rcv	PTR struct . size(1) Largest target is 10
		 -> msg_rcv(BANK0[10]), 

    get_msg_index@end_index	PTR unsigned char  size(1) Largest target is 1
		 -> get_msg@end_index(BANK0[1]), 

    get_msg_index@start_index	PTR unsigned char  size(1) Largest target is 1
		 -> get_msg@start_index(BANK0[1]), 

    receive_input@byte2	PTR struct . size(1) Largest target is 1
		 -> receive_input@value(COMMON[1]), 

    receive_input@byte1	PTR struct . size(1) Largest target is 32
		 -> buffer_rcv(BANK0[32]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_get_msg
    _receive_input->_get_next_index
    _get_msg->_get_msg_index
    _get_msg_index->_get_plus_index

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_get_msg

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                             _InitIO
                   _InitInputDataInt
                       _InitTimerInt
 ---------------------------------------------------------------------------------
 (1) _InitTimerInt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitInputDataInt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitIO                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  4     4      0    2933
                                             10 COMMON     4     4      0
           _extract_RGB_DATA_RQT_CMD
                            _get_msg
                      _receive_input
 ---------------------------------------------------------------------------------
 (3) _receive_input                                        4     4      0     428
                                              1 COMMON     4     4      0
                     _get_next_index
 ---------------------------------------------------------------------------------
 (3) _get_msg                                              8     8      0    2132
                                              8 COMMON     2     2      0
                                              0 BANK0      6     6      0
                       _get_distance
                      _get_msg_index
                     _get_next_index
 ---------------------------------------------------------------------------------
 (4) _get_msg_index                                        5     4      1    1512
                                              3 COMMON     5     4      1
                       _get_distance
                    _get_minus_index
                     _get_next_index
                     _get_plus_index
 ---------------------------------------------------------------------------------
 (5) _get_plus_index                                       3     2      1     492
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _get_next_index                                       1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _get_minus_index                                      2     1      1     185
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (5) _get_distance                                         2     1      1     291
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (3) _extract_RGB_DATA_RQT_CMD                             4     3      1     235
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitIO
   _InitInputDataInt
   _InitTimerInt

 _ISR (ROOT)
   _extract_RGB_DATA_RQT_CMD
   _get_msg
     _get_distance
     _get_msg_index
       _get_distance
       _get_minus_index
       _get_next_index
       _get_plus_index
     _get_next_index
   _receive_input
     _get_next_index

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      58       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      6      4A       6       92.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      58       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Aug 02 23:45:46 2016

                       __CFG_CP$ON 0000                     ?_get_msg_index 0073  
                 get_msg@end_index 0068                        __CFG_CPD$ON 0000  
                  ?_get_next_index 0070                        __CFG_LVP$ON 0000  
                              l143 029C                                _RA0 0060  
                              _RC0 0070                                _RA4 0064  
                              _RC1 0071                                _RC2 0072  
                              _RC3 0073                                _RC4 0074  
                              _RC5 0075                                _ISR 0004  
                              _msg 0049                       __CFG_BORV$LO 0000  
                              wreg 0009                       __CFG_IESO$ON 0000  
                 ?_get_minus_index 0070                  ?_InitInputDataInt 0070  
                      get_msg@temp 0069                        get_msg@pmsg 0065  
                      get_msg@pstr 0064                               ?_ISR 0070  
               ??_InitInputDataInt 006A                               _T0IF 005A  
                             i1l56 01C6                               _TMR0 0015  
                   ??_get_distance 0071                       __CFG_WRT$OFF 0000  
                    __CFG_FCMEN$ON 0000                               _main 0294  
                             _duty 0061                               _pmsg 005E  
                             _time 0028                               fsr0h 0005  
                             fsr1h 0007                               fsr0l 0004  
                             indf0 0000                               indf1 0001  
                             fsr1l 0006                               btemp 007E  
                    __CFG_BOREN$ON 0000                               ltemp 007E  
                  ?_get_plus_index 0070                               start 0062  
                             ttemp 007E                               wtemp 007E  
                            ??_ISR 007A                      ?_InitTimerInt 0070  
                    __CFG_PLLEN$ON 0000                              ?_main 0070  
                    __CFG_WDTE$OFF 0000                              i1l131 0043  
                            i1l140 005E                              i1l132 003F  
                            i1l133 0041                              i1l904 0149  
                            i1l834 0291                              i1l842 027D  
                            i1l930 019C                              i1l852 0260  
                            i1l908 014C                              i1l932 01C0  
                            i1l918 0167                              i1l864 026E  
                            i1l882 0098                              i1l962 020D  
                            i1l876 008B                              i1l894 00FA  
                            i1l958 020B                    __end_of_get_msg 020F  
                            _count 0025                 get_minus_index@sub 0070  
                            ltemp0 007E                              ltemp1 0082  
                            ltemp2 0086                              ltemp3 0080  
                            ttemp0 007E                              ttemp1 0081  
                            ttemp2 0084                              ttemp3 0087  
                            ttemp4 007F                              status 0003  
                            wtemp0 007E                              wtemp1 0080  
                            wtemp2 0082                              wtemp3 0084  
                            wtemp4 0086                              wtemp5 0088  
                            wtemp6 007F   __end_of_extract_RGB_DATA_RQT_CMD 0236  
                   __CFG_MCLRE$OFF 0000                    __initialization 0063  
                  ??_get_msg_index 0074                       __end_of_main 029D  
                   ??_InitTimerInt 006A                             ??_main 006A  
                           i1l1014 004E                     __CFG_PWRTE$OFF 0000  
                           _InitIO 0236                     __CFG_STVREN$ON 0000  
             __end_of_get_distance 0272                          ??_get_msg 0078  
          get_distance@start_index 0071                  get_plus_index@add 0070  
          __end_of__initialization 0073                     __pcstackCOMMON 0070  
                 ??_get_next_index 0070                       __pidataBANK0 02A5  
__size_of_extract_RGB_DATA_RQT_CMD 0027          ?_extract_RGB_DATA_RQT_CMD 0070  
                   _OPTION_REGbits 0095               __end_of_InitTimerInt 028A  
                 ??_get_plus_index 0071                         __pbssBANK0 0020  
                   get_msg_index@i 0077                            ?_InitIO 0070  
        __size_of_InitInputDataInt 0006                            ISR@byte 007D  
                       __pmaintext 0294                         __pintentry 0004  
           __size_of_receive_input 0066                 get_msg@start_index 0067  
                       _buffer_rcv 0029       extract_RGB_DATA_RQT_CMD@duty 0070  
     extract_RGB_DATA_RQT_CMD@pmsg 0072       extract_RGB_DATA_RQT_CMD@prqt 0073  
         __size_of_get_minus_index 000E                    __size_of_InitIO 0020  
            __size_of_get_distance 000E                    _start_index_rcv 0027  
                          __ptext1 027F                            __ptext2 02B8  
                          __ptext3 0236                            __ptext5 0169  
                          __ptext6 01CF                            __ptext7 0076  
                          __ptext8 0272                            __ptext9 028A  
                          _get_msg 01CF                       __size_of_ISR 005E  
             get_minus_index@index 0071                            _msg_rcv 0053  
                          clrloop0 02AD                      _receive_input 0169  
             end_of_initialization 0073                            init_ram 02B2  
                          initloop 02B3                       _get_distance 0264  
              get_next_index@index 0070              __end_of_get_msg_index 0169  
                     __pstringtext 029D                  __end_of_stop_mark 02A5  
                 __CFG_FOSC$INTOSC 0000              __size_of_InitTimerInt 000B  
                        _TRISAbits 008C                          _TRISCbits 008E  
                   ?_receive_input 0070                         _start_mark 029D  
                 _InitInputDataInt 02B8                     __end_of_InitIO 0256  
                ??_get_minus_index 0071                       _InitTimerInt 027F  
              start_initialization 0063                        __end_of_ISR 0062  
                         ??_InitIO 006A             get_msg_index@end_index 0073  
                      __pdataBANK0 005D                          ___latbits 0000  
                  ??_receive_input 0071                      __pcstackBANK0 0064  
                         ISR@value 007C           _extract_RGB_DATA_RQT_CMD 020F  
                      _CPSCON0bits 001E                           ?_get_msg 0070  
                      _client_conn 0020            __size_of_get_next_index 000A  
         get_msg_index@start_index 0076                          clear_ram0 02AC  
            get_distance@end_index 0070            __size_of_get_plus_index 000D  
         __end_of_InitInputDataInt 02BE                          _stop_mark 02A1  
                  _get_minus_index 0256                       _low_half_rcv 005D  
                    _end_index_rcv 0026                         _ANSELAbits 018C  
                       _ANSELCbits 018E                   __size_of_get_msg 0040  
                         __ptext10 0256                           __ptext11 0264  
                         __ptext12 020F             __size_of_get_msg_index 00F3  
                    __size_of_main 0009                           _pmsg_rcv 005F  
                         int$flags 007E                           get_msg@i 0066  
                         _pstr_rcv 0060                     _get_next_index 028A  
                       _INTCONbits 000B            __end_of_get_minus_index 0264  
                         intlevel1 0000                  __CFG_CLKOUTEN$OFF 0000  
       ??_extract_RGB_DATA_RQT_CMD 0071                 receive_input@byte1 0073  
               receive_input@byte2 0074                     _get_plus_index 0272  
               receive_input@value 0072                      _get_msg_index 0076  
           __end_of_get_next_index 0294                 __end_of_start_mark 02A1  
              get_plus_index@index 0072              __end_of_receive_input 01CF  
                    ?_get_distance 0070             __end_of_get_plus_index 027F  
