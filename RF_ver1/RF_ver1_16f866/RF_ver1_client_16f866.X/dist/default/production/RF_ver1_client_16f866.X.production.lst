

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Jul 09 02:18:01 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	intentry,global,class=CODE,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	dabs	1,0x7E,2
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0009                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000D                     	;# 
    74  000E                     	;# 
    75  000E                     	;# 
    76  000F                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0014                     	;# 
    82  0015                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  001D                     	;# 
    93  001E                     	;# 
    94  001F                     	;# 
    95  0081                     	;# 
    96  0085                     	;# 
    97  0086                     	;# 
    98  0087                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  008F                     	;# 
   104  0090                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009E                     	;# 
   121  009F                     	;# 
   122  0105                     	;# 
   123  0107                     	;# 
   124  0108                     	;# 
   125  0109                     	;# 
   126  010C                     	;# 
   127  010C                     	;# 
   128  010D                     	;# 
   129  010E                     	;# 
   130  010F                     	;# 
   131  0185                     	;# 
   132  0187                     	;# 
   133  0188                     	;# 
   134  0189                     	;# 
   135  018C                     	;# 
   136  018D                     	;# 
   137  0000                     	;# 
   138  0001                     	;# 
   139  0002                     	;# 
   140  0003                     	;# 
   141  0004                     	;# 
   142  0005                     	;# 
   143  0006                     	;# 
   144  0007                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0089                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  008F                     	;# 
   180  0090                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  009F                     	;# 
   198  0105                     	;# 
   199  0107                     	;# 
   200  0108                     	;# 
   201  0109                     	;# 
   202  010C                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  0185                     	;# 
   208  0187                     	;# 
   209  0188                     	;# 
   210  0189                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  0000                     	;# 
   214  0001                     	;# 
   215  0002                     	;# 
   216  0003                     	;# 
   217  0004                     	;# 
   218  0005                     	;# 
   219  0006                     	;# 
   220  0007                     	;# 
   221  0009                     	;# 
   222  000A                     	;# 
   223  000B                     	;# 
   224  000C                     	;# 
   225  000D                     	;# 
   226  000E                     	;# 
   227  000E                     	;# 
   228  000F                     	;# 
   229  0010                     	;# 
   230  0011                     	;# 
   231  0012                     	;# 
   232  0013                     	;# 
   233  0014                     	;# 
   234  0015                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001B                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001D                     	;# 
   245  001E                     	;# 
   246  001F                     	;# 
   247  0081                     	;# 
   248  0085                     	;# 
   249  0086                     	;# 
   250  0087                     	;# 
   251  0089                     	;# 
   252  008C                     	;# 
   253  008D                     	;# 
   254  008E                     	;# 
   255  008F                     	;# 
   256  0090                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0095                     	;# 
   264  0096                     	;# 
   265  0097                     	;# 
   266  0098                     	;# 
   267  0099                     	;# 
   268  009A                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  0105                     	;# 
   275  0107                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0187                     	;# 
   285  0188                     	;# 
   286  0189                     	;# 
   287  018C                     	;# 
   288  018D                     	;# 
   289  0000                     	;# 
   290  0001                     	;# 
   291  0002                     	;# 
   292  0003                     	;# 
   293  0004                     	;# 
   294  0005                     	;# 
   295  0006                     	;# 
   296  0007                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  000E                     	;# 
   304  000F                     	;# 
   305  0010                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0014                     	;# 
   310  0015                     	;# 
   311  0015                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001B                     	;# 
   319  001C                     	;# 
   320  001D                     	;# 
   321  001E                     	;# 
   322  001F                     	;# 
   323  0081                     	;# 
   324  0085                     	;# 
   325  0086                     	;# 
   326  0087                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0009                     	;# 
   374  000A                     	;# 
   375  000B                     	;# 
   376  000C                     	;# 
   377  000D                     	;# 
   378  000E                     	;# 
   379  000E                     	;# 
   380  000F                     	;# 
   381  0010                     	;# 
   382  0011                     	;# 
   383  0012                     	;# 
   384  0013                     	;# 
   385  0014                     	;# 
   386  0015                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  001D                     	;# 
   397  001E                     	;# 
   398  001F                     	;# 
   399  0081                     	;# 
   400  0085                     	;# 
   401  0086                     	;# 
   402  0087                     	;# 
   403  0089                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  008F                     	;# 
   408  0090                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0093                     	;# 
   412  0093                     	;# 
   413  0093                     	;# 
   414  0094                     	;# 
   415  0095                     	;# 
   416  0096                     	;# 
   417  0097                     	;# 
   418  0098                     	;# 
   419  0099                     	;# 
   420  009A                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  0105                     	;# 
   427  0107                     	;# 
   428  0108                     	;# 
   429  0109                     	;# 
   430  010C                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  010F                     	;# 
   435  0185                     	;# 
   436  0187                     	;# 
   437  0188                     	;# 
   438  0189                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  0000                     	;# 
   442  0001                     	;# 
   443  0002                     	;# 
   444  0003                     	;# 
   445  0004                     	;# 
   446  0005                     	;# 
   447  0006                     	;# 
   448  0007                     	;# 
   449  0009                     	;# 
   450  000A                     	;# 
   451  000B                     	;# 
   452  000C                     	;# 
   453  000D                     	;# 
   454  000E                     	;# 
   455  000E                     	;# 
   456  000F                     	;# 
   457  0010                     	;# 
   458  0011                     	;# 
   459  0012                     	;# 
   460  0013                     	;# 
   461  0014                     	;# 
   462  0015                     	;# 
   463  0015                     	;# 
   464  0016                     	;# 
   465  0017                     	;# 
   466  0018                     	;# 
   467  0019                     	;# 
   468  001A                     	;# 
   469  001B                     	;# 
   470  001B                     	;# 
   471  001C                     	;# 
   472  001D                     	;# 
   473  001E                     	;# 
   474  001F                     	;# 
   475  0081                     	;# 
   476  0085                     	;# 
   477  0086                     	;# 
   478  0087                     	;# 
   479  0089                     	;# 
   480  008C                     	;# 
   481  008D                     	;# 
   482  008E                     	;# 
   483  008F                     	;# 
   484  0090                     	;# 
   485  0091                     	;# 
   486  0092                     	;# 
   487  0093                     	;# 
   488  0093                     	;# 
   489  0093                     	;# 
   490  0094                     	;# 
   491  0095                     	;# 
   492  0096                     	;# 
   493  0097                     	;# 
   494  0098                     	;# 
   495  0099                     	;# 
   496  009A                     	;# 
   497  009B                     	;# 
   498  009C                     	;# 
   499  009D                     	;# 
   500  009E                     	;# 
   501  009F                     	;# 
   502  0105                     	;# 
   503  0107                     	;# 
   504  0108                     	;# 
   505  0109                     	;# 
   506  010C                     	;# 
   507  010C                     	;# 
   508  010D                     	;# 
   509  010E                     	;# 
   510  010F                     	;# 
   511  0185                     	;# 
   512  0187                     	;# 
   513  0188                     	;# 
   514  0189                     	;# 
   515  018C                     	;# 
   516  018D                     	;# 
   517                           
   518                           	psect	idataCOMMON
   519  07FE                     __pidataCOMMON:	
   520                           
   521                           ;initializer for _low_half_rcv
   522  07FE  3401               	retlw	1
   523                           
   524                           	psect	idataBANK0
   525  07FF                     __pidataBANK0:	
   526                           
   527                           ;initializer for _pmsg_rcv
   528  07FF  34D0               	retlw	low (_msg_rcv| (0+256))
   529                           
   530                           	psect	idataBANK1
   531  0CF3                     __pidataBANK1:	
   532                           
   533                           ;initializer for ___cgram
   534  0CF3  340C               	retlw	12
   535  0CF4  3412               	retlw	18
   536  0CF5  3412               	retlw	18
   537  0CF6  340C               	retlw	12
   538  0CF7  3400               	retlw	0
   539  0CF8  3400               	retlw	0
   540  0CF9  3400               	retlw	0
   541  0CFA  3400               	retlw	0
   542                           
   543                           ;initializer for LCDWriteInt@F1650
   544  0CFB  34F0               	retlw	240
   545  0CFC  34F0               	retlw	240
   546  0CFD  34F0               	retlw	240
   547  0CFE  34F0               	retlw	240
   548  0CFF  34F0               	retlw	240
   549                           
   550                           ;initializer for _low_rcv
   551  0D00  3401               	retlw	1
   552                           
   553                           ;initializer for _mode
   554  0D01  3401               	retlw	1
   555                           
   556                           ;initializer for _pstr_rcv
   557  0D02  34D0               	retlw	low (_msg_rcv| (0+256))
   558                           
   559                           ;initializer for _submode
   560  0D03  3401               	retlw	1
   561                           
   562                           	psect	strings
   563  066B                     __pstrings:	
   564  066B                     stringtab:	
   565  066B                     __stringtab:	
   566                           
   567                           ;	String table - string pointers are 1 byte each
   568  066B  1BFF               	btfsc	btemp+1,7
   569  066C  2E75               	ljmp	stringcode
   570  066D  1383               	bcf	3,7
   571  066E  187F               	btfsc	btemp+1,0
   572  066F  1783               	bsf	3,7
   573  0670  0800               	movf	0,w
   574  0671  0A84               	incf	4,f
   575  0672  1903               	skipnz
   576  0673  0AFF               	incf	btemp+1,f
   577  0674  0008               	return
   578  0675                     stringcode:	
   579  0675                     stringdir:	
   580  0675  3006               	movlw	high stringdir
   581  0676  008A               	movwf	10
   582  0677  0804               	movf	4,w
   583  0678  0A84               	incf	4,f
   584  0679  0782               	addwf	2,f
   585  067A                     __stringbase:	
   586  067A  3400               	retlw	0
   587  067B                     __end_of__stringtab:	
   588  067B                     _dpowers:	
   589  067B  3401               	retlw	1
   590  067C  3400               	retlw	0
   591  067D  340A               	retlw	10
   592  067E  3400               	retlw	0
   593  067F  3464               	retlw	100
   594  0680  3400               	retlw	0
   595  0681  34E8               	retlw	232
   596  0682  3403               	retlw	3
   597  0683  3410               	retlw	16
   598  0684  3427               	retlw	39
   599  0685                     __end_of_dpowers:	
   600  0685                     _start_mark:	
   601  0685  34DE               	retlw	222
   602  0686  34DF               	retlw	223
   603  0687  34E0               	retlw	224
   604  0688  34E1               	retlw	225
   605  0689                     __end_of_start_mark:	
   606  0689                     _stop_mark:	
   607  0689  34E1               	retlw	225
   608  068A  34E0               	retlw	224
   609  068B  34DF               	retlw	223
   610  068C  34DE               	retlw	222
   611  068D                     __end_of_stop_mark:	
   612  001F                     _ADCON0bits	set	31
   613  001E                     _ADRESH	set	30
   614  000B                     _INTCONbits	set	11
   615  0007                     _PORTC	set	7
   616  0018                     _CARRY	set	24
   617  005F                     _GIE	set	95
   618  0028                     _RA0	set	40
   619  0029                     _RA1	set	41
   620  002A                     _RA2	set	42
   621  002B                     _RA3	set	43
   622  002C                     _RA4	set	44
   623  002D                     _RA5	set	45
   624  002E                     _RA6	set	46
   625  002F                     _RA7	set	47
   626  0031                     _RB1	set	49
   627  0039                     _RC1	set	57
   628  003A                     _RC2	set	58
   629  003B                     _RC3	set	59
   630  009F                     _ADCON1bits	set	159
   631  009E                     _ADRESL	set	158
   632  0081                     _OPTION_REGbits	set	129
   633  0085                     _TRISAbits	set	133
   634  0086                     _TRISBbits	set	134
   635  0087                     _TRISC	set	135
   636  0087                     _TRISCbits	set	135
   637  010D                     _EEADR	set	269
   638  010C                     _EEDATA	set	268
   639  0189                     _ANSELHbits	set	393
   640  0188                     _ANSELbits	set	392
   641  018C                     _EECON1	set	396
   642  018D                     _EECON2	set	397
   643  0C60                     _RD	set	3168
   644  0C61                     _WR	set	3169
   645  0C62                     _WREN	set	3170
   646  068D                     STR_11:	
   647  068D  344D               	retlw	77	;'M'
   648  068E  343A               	retlw	58	;':'
   649  068F  3425               	retlw	37	;'%'
   650  0690  3464               	retlw	100	;'d'
   651  0691  342C               	retlw	44	;','
   652  0692  3425               	retlw	37	;'%'
   653  0693  3464               	retlw	100	;'d'
   654  0694  342C               	retlw	44	;','
   655  0695  3425               	retlw	37	;'%'
   656  0696  3464               	retlw	100	;'d'
   657  0697  342C               	retlw	44	;','
   658  0698  3425               	retlw	37	;'%'
   659  0699  3464               	retlw	100	;'d'
   660  069A  342C               	retlw	44	;','
   661  069B  3425               	retlw	37	;'%'
   662  069C  3464               	retlw	100	;'d'
   663  069D  342C               	retlw	44	;','
   664  069E  3425               	retlw	37	;'%'
   665  069F  3464               	retlw	100	;'d'
   666  06A0  3400               	retlw	0
   667  06A1                     STR_13:	
   668  06A1  3443               	retlw	67	;'C'
   669  06A2  343A               	retlw	58	;':'
   670  06A3  3425               	retlw	37	;'%'
   671  06A4  3464               	retlw	100	;'d'
   672  06A5  342C               	retlw	44	;','
   673  06A6  3425               	retlw	37	;'%'
   674  06A7  3464               	retlw	100	;'d'
   675  06A8  342C               	retlw	44	;','
   676  06A9  3425               	retlw	37	;'%'
   677  06AA  3464               	retlw	100	;'d'
   678  06AB  342C               	retlw	44	;','
   679  06AC  3425               	retlw	37	;'%'
   680  06AD  3464               	retlw	100	;'d'
   681  06AE  3400               	retlw	0
   682  06AF                     STR_15:	
   683  06AF  3449               	retlw	73	;'I'
   684  06B0  3444               	retlw	68	;'D'
   685  06B1  3431               	retlw	49	;'1'
   686  06B2  343A               	retlw	58	;':'
   687  06B3  3400               	retlw	0
   688  06B4                     STR_16:	
   689  06B4  3449               	retlw	73	;'I'
   690  06B5  3444               	retlw	68	;'D'
   691  06B6  3432               	retlw	50	;'2'
   692  06B7  343A               	retlw	58	;':'
   693  06B8  3400               	retlw	0
   694  06B9                     STR_17:	
   695  06B9  3449               	retlw	73	;'I'
   696  06BA  3444               	retlw	68	;'D'
   697  06BB  3433               	retlw	51	;'3'
   698  06BC  343A               	retlw	58	;':'
   699  06BD  3400               	retlw	0
   700  06BE                     STR_18:	
   701  06BE  3449               	retlw	73	;'I'
   702  06BF  3444               	retlw	68	;'D'
   703  06C0  3434               	retlw	52	;'4'
   704  06C1  343A               	retlw	58	;':'
   705  06C2  3400               	retlw	0
   706  06B3                     
   707                           ; #config settings
   708  0000                     
   709                           	psect	cinit
   710  0015                     start_initialization:	
   711  0015                     __initialization:	
   712                           
   713                           ; Clear objects allocated to COMMON
   714  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   715                           
   716                           ; Clear objects allocated to BANK0
   717  0016  01E2               	clrf	__pbssBANK0& (0+127)
   718                           
   719                           ; Clear objects allocated to BANK1
   720  0017  1383               	bcf	3,7	;select IRP bank0
   721  0018  30C3               	movlw	low __pbssBANK1
   722  0019  0084               	movwf	4
   723  001A  30D4               	movlw	low (__pbssBANK1+17)
   724  001B  120A  158A  2484  120A  118A  	fcall	clear_ram0
   725                           
   726                           ; Clear objects allocated to BANK3
   727  0020  1783               	bsf	3,7	;select IRP bank2
   728  0021  3090               	movlw	low __pbssBANK3
   729  0022  0084               	movwf	4
   730  0023  30E7               	movlw	low (__pbssBANK3+87)
   731  0024  120A  158A  2484  120A  118A  	fcall	clear_ram0
   732                           
   733                           ; Initialize objects allocated to BANK1
   734  0029  1383               	bcf	3,7	;select IRP bank0
   735  002A  30E5               	movlw	low (__pdataBANK1+17)
   736  002B  00FD               	movwf	btemp+-1
   737  002C  300C               	movlw	high __pidataBANK1
   738  002D  00FE               	movwf	btemp
   739  002E  30F3               	movlw	low __pidataBANK1
   740  002F  00FF               	movwf	btemp+1
   741  0030  30D4               	movlw	low __pdataBANK1
   742  0031  0084               	movwf	4
   743  0032  120A  158A  24E6  120A  118A  	fcall	init_ram0
   744                           
   745                           ; Initialize objects allocated to BANK0
   746  0037  120A  118A  27FF  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   747  003C  00E3               	movwf	__pdataBANK0& (0+127)
   748                           
   749                           ; Initialize objects allocated to COMMON
   750  003D  120A  118A  27FE   	fcall	__pidataCOMMON	;fetch initializer
   751  0040  00FD               	movwf	__pdataCOMMON& (0+127)
   752  0041                     end_of_initialization:	
   753                           ;End of C runtime variable initialization code
   754                           
   755  0041                     __end_of__initialization:	
   756  0041  0183               	clrf	3
   757  0042  120A  158A  2E98   	ljmp	_main	;jump to C main() function
   758                           
   759                           	psect	bssCOMMON
   760  007C                     __pbssCOMMON:	
   761  007C                     _end_index_rcv:	
   762  007C                     	ds	1
   763                           
   764                           	psect	dataCOMMON
   765  007D                     __pdataCOMMON:	
   766  007D                     _low_half_rcv:	
   767  007D                     	ds	1
   768                           
   769                           	psect	bssBANK0
   770  0062                     __pbssBANK0:	
   771  0062                     _start_index_rcv:	
   772  0062                     	ds	1
   773                           
   774                           	psect	dataBANK0
   775  0063                     __pdataBANK0:	
   776  0063                     _pmsg_rcv:	
   777  0063                     	ds	1
   778                           
   779                           	psect	bssBANK1
   780  00C3                     __pbssBANK1:	
   781  00C3                     _g_menu:	
   782  00C3                     	ds	9
   783  00CC                     _count:	
   784  00CC                     	ds	2
   785  00CE                     _count_rcv:	
   786  00CE                     	ds	1
   787  00CF                     _server_conn:	
   788  00CF                     	ds	5
   789                           
   790                           	psect	dataBANK1
   791  00D4                     __pdataBANK1:	
   792  00D4                     ___cgram:	
   793  00D4                     	ds	8
   794  00DC                     LCDWriteInt@F1650:	
   795  00DC                     	ds	5
   796  00E1                     _low_rcv:	
   797  00E1                     	ds	1
   798  00E2                     _mode:	
   799  00E2                     	ds	1
   800  00E3                     _pstr_rcv:	
   801  00E3                     	ds	1
   802  00E4                     _submode:	
   803  00E4                     	ds	1
   804                           
   805                           	psect	bssBANK3
   806  0190                     __pbssBANK3:	
   807  0190                     _buffer_rcv:	
   808  0190                     	ds	32
   809  01B0                     _sdebug:	
   810  01B0                     	ds	32
   811  01D0                     _msg_rcv:	
   812  01D0                     	ds	23
   813                           
   814                           	psect	clrtext
   815  0C84                     clear_ram0:	
   816                           ;	Called with FSR containing the base address, and
   817                           ;	W with the last address+1
   818                           
   819  0C84  0064               	clrwdt	;clear the watchdog before getting into this loop
   820  0C85                     clrloop0:	
   821  0C85  0180               	clrf	0	;clear RAM location pointed to by FSR
   822  0C86  0A84               	incf	4,f	;increment pointer
   823  0C87  0604               	xorwf	4,w	;XOR with final address
   824  0C88  1903               	btfsc	3,2	;have we reached the end yet?
   825  0C89  3400               	retlw	0	;all done for this memory range, return
   826  0C8A  0604               	xorwf	4,w	;XOR again to restore value
   827  0C8B  2C85               	goto	clrloop0	;do the next byte
   828                           
   829                           	psect	inittext
   830  0CE2                     init_fetch0:	
   831                           ;	Called with low address in FSR and high address in W
   832                           
   833  0CE2  087E               	movf	126,w
   834  0CE3  008A               	movwf	10
   835  0CE4  087F               	movf	127,w
   836  0CE5  0082               	movwf	2
   837  0CE6                     init_ram0:	
   838                           ;Called with:
   839                           ;	high address of idata address in btemp 
   840                           ;	low address of idata address in btemp+1 
   841                           ;	low address of data in FSR
   842                           ;	high address + 1 of data in btemp-1
   843                           
   844  0CE6  24E2  120A  158A   	fcall	init_fetch0
   845  0CE9  0080               	movwf	0
   846  0CEA  0A84               	incf	4,f
   847  0CEB  0804               	movf	4,w
   848  0CEC  067D               	xorwf	125,w
   849  0CED  1903               	btfsc	3,2
   850  0CEE  3400               	retlw	0
   851  0CEF  0AFF               	incf	127,f
   852  0CF0  1903               	btfsc	3,2
   853  0CF1  0AFE               	incf	126,f
   854  0CF2  2CE6               	goto	init_ram0
   855                           
   856                           	psect	cstackBANK1
   857  00A0                     __pcstackBANK1:	
   858  00A0                     handle_HEART_BEAT_RQT_CMD@pmsgi:	
   859  00A0                     dump_conn@s:	
   860                           ; 1 bytes @ 0x0
   861                           
   862                           
   863                           ; 32 bytes @ 0x0
   864  00A0                     	ds	1
   865  00A1                     handle_HEART_BEAT_RQT_CMD@msgo:	
   866                           
   867                           ; 23 bytes @ 0x1
   868  00A1                     	ds	31
   869  00C0                     dump_conn@count:	
   870                           
   871                           ; 1 bytes @ 0x20
   872  00C0                     	ds	1
   873  00C1                     dump_conn@i:	
   874                           
   875                           ; 1 bytes @ 0x21
   876  00C1                     	ds	1
   877  00C2                     dump_conn@pconn:	
   878                           
   879                           ; 1 bytes @ 0x22
   880  00C2                     	ds	1
   881                           
   882                           	psect	cstackCOMMON
   883  0070                     __pcstackCOMMON:	
   884  0070                     ?_handle_HEART_BEAT_RQT_CMD:	
   885  0070                     ?_LoadMenuItem:	
   886                           ; 1 bytes @ 0x0
   887                           
   888  0070                     ?_LCDInit:	
   889                           ; 1 bytes @ 0x0
   890                           
   891  0070                     ?_MenuInit:	
   892                           ; 1 bytes @ 0x0
   893                           
   894  0070                     ?_LCDBusyLoop:	
   895                           ; 1 bytes @ 0x0
   896                           
   897  0070                     ?_eeprom_read:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0070                     ?_ADCInit:	
   901                           ; 1 bytes @ 0x0
   902                           
   903  0070                     ?_send_byte:	
   904                           ; 1 bytes @ 0x0
   905                           
   906  0070                     ?_get_next_index:	
   907                           ; 1 bytes @ 0x0
   908                           
   909  0070                     ?_receive_input:	
   910                           ; 1 bytes @ 0x0
   911                           
   912  0070                     ?_send_msg:	
   913                           ; 1 bytes @ 0x0
   914                           
   915  0070                     ?_get_msg:	
   916                           ; 1 bytes @ 0x0
   917                           
   918  0070                     ?_dump_conn:	
   919                           ; 1 bytes @ 0x0
   920                           
   921  0070                     ?_handle_received_cmds:	
   922                           ; 1 bytes @ 0x0
   923                           
   924  0070                     ?_ConnInit:	
   925                           ; 1 bytes @ 0x0
   926                           
   927  0070                     ?_IOInit:	
   928                           ; 1 bytes @ 0x0
   929                           
   930  0070                     ?_ISR:	
   931                           ; 1 bytes @ 0x0
   932                           
   933  0070                     ?_main:	
   934                           ; 1 bytes @ 0x0
   935                           
   936  0070                     ?i1_get_next_index:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ??i1_get_next_index:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     i1get_next_index@index:	
   943                           ; 1 bytes @ 0x0
   944                           
   945                           
   946                           ; 1 bytes @ 0x0
   947  0070                     	ds	1
   948  0071                     ??_receive_input:	
   949                           
   950                           ; 1 bytes @ 0x1
   951  0071                     	ds	1
   952  0072                     receive_input@value:	
   953                           
   954                           ; 1 bytes @ 0x2
   955  0072                     	ds	1
   956  0073                     receive_input@byte1:	
   957                           
   958                           ; 1 bytes @ 0x3
   959  0073                     	ds	1
   960  0074                     receive_input@byte2:	
   961                           
   962                           ; 1 bytes @ 0x4
   963  0074                     	ds	1
   964  0075                     ??_ISR:	
   965                           
   966                           ; 1 bytes @ 0x5
   967  0075                     	ds	5
   968  007A                     ISR@value:	
   969                           
   970                           ; 1 bytes @ 0xA
   971  007A                     	ds	1
   972  007B                     ISR@byte:	
   973                           
   974                           ; 1 bytes @ 0xB
   975  007B                     	ds	1
   976                           
   977                           	psect	cstackBANK0
   978  0020                     __pcstackBANK0:	
   979  0020                     ?_memcpy:	
   980  0020                     ??_LCDBusyLoop:	
   981                           ; 1 bytes @ 0x0
   982                           
   983  0020                     ??_eeprom_read:	
   984                           ; 1 bytes @ 0x0
   985                           
   986  0020                     ??_ADCInit:	
   987                           ; 1 bytes @ 0x0
   988                           
   989  0020                     ?_send_half_byte:	
   990                           ; 1 bytes @ 0x0
   991                           
   992  0020                     ??_get_next_index:	
   993                           ; 1 bytes @ 0x0
   994                           
   995  0020                     ?_get_plus_index:	
   996                           ; 1 bytes @ 0x0
   997                           
   998  0020                     ?_get_minus_index:	
   999                           ; 1 bytes @ 0x0
  1000                           
  1001  0020                     ?_get_distance:	
  1002                           ; 1 bytes @ 0x0
  1003                           
  1004  0020                     ??_IOInit:	
  1005                           ; 1 bytes @ 0x0
  1006                           
  1007  0020                     ?_crc_calculate:	
  1008                           ; 1 bytes @ 0x0
  1009                           
  1010  0020                     ?___lwdiv:	
  1011                           ; 2 bytes @ 0x0
  1012                           
  1013  0020                     send_half_byte@low:	
  1014                           ; 2 bytes @ 0x0
  1015                           
  1016  0020                     get_next_index@index:	
  1017                           ; 1 bytes @ 0x0
  1018                           
  1019  0020                     get_plus_index@add:	
  1020                           ; 1 bytes @ 0x0
  1021                           
  1022  0020                     get_minus_index@sub:	
  1023                           ; 1 bytes @ 0x0
  1024                           
  1025  0020                     get_distance@end_index:	
  1026                           ; 1 bytes @ 0x0
  1027                           
  1028  0020                     crc_calculate@pmsg:	
  1029                           ; 1 bytes @ 0x0
  1030                           
  1031  0020                     ___lwdiv@divisor:	
  1032                           ; 2 bytes @ 0x0
  1033                           
  1034  0020                     memcpy@s1:	
  1035                           ; 2 bytes @ 0x0
  1036                           
  1037                           
  1038                           ; 2 bytes @ 0x0
  1039  0020                     	ds	1
  1040  0021                     ??_send_half_byte:	
  1041  0021                     ??_get_plus_index:	
  1042                           ; 1 bytes @ 0x1
  1043                           
  1044  0021                     ??_get_minus_index:	
  1045                           ; 1 bytes @ 0x1
  1046                           
  1047  0021                     ??_get_distance:	
  1048                           ; 1 bytes @ 0x1
  1049                           
  1050  0021                     get_minus_index@index:	
  1051                           ; 1 bytes @ 0x1
  1052                           
  1053  0021                     get_distance@start_index:	
  1054                           ; 1 bytes @ 0x1
  1055                           
  1056  0021                     eeprom_read@addr:	
  1057                           ; 1 bytes @ 0x1
  1058                           
  1059                           
  1060                           ; 1 bytes @ 0x1
  1061  0021                     	ds	1
  1062  0022                     ??_LoadMenuItem:	
  1063  0022                     ??_crc_calculate:	
  1064                           ; 1 bytes @ 0x2
  1065                           
  1066  0022                     send_half_byte@value:	
  1067                           ; 1 bytes @ 0x2
  1068                           
  1069  0022                     get_plus_index@index:	
  1070                           ; 1 bytes @ 0x2
  1071                           
  1072  0022                     LCDBusyLoop@busy:	
  1073                           ; 1 bytes @ 0x2
  1074                           
  1075  0022                     ___lwdiv@dividend:	
  1076                           ; 1 bytes @ 0x2
  1077                           
  1078  0022                     memcpy@n:	
  1079                           ; 2 bytes @ 0x2
  1080                           
  1081                           
  1082                           ; 2 bytes @ 0x2
  1083  0022                     	ds	1
  1084  0023                     ?_get_msg_index:	
  1085  0023                     send_half_byte@byte:	
  1086                           ; 1 bytes @ 0x3
  1087                           
  1088  0023                     get_msg_index@end_index:	
  1089                           ; 1 bytes @ 0x3
  1090                           
  1091  0023                     LCDBusyLoop@temp:	
  1092                           ; 1 bytes @ 0x3
  1093                           
  1094                           
  1095                           ; 1 bytes @ 0x3
  1096  0023                     	ds	1
  1097  0024                     ??_memcpy:	
  1098  0024                     ??_send_byte:	
  1099                           ; 1 bytes @ 0x4
  1100                           
  1101  0024                     ??_get_msg_index:	
  1102                           ; 1 bytes @ 0x4
  1103                           
  1104  0024                     ??___lwdiv:	
  1105                           ; 1 bytes @ 0x4
  1106                           
  1107  0024                     LCDBusyLoop@status:	
  1108                           ; 1 bytes @ 0x4
  1109                           
  1110  0024                     LoadMenuItem@item:	
  1111                           ; 1 bytes @ 0x4
  1112                           
  1113                           
  1114                           ; 1 bytes @ 0x4
  1115  0024                     	ds	1
  1116  0025                     ?_LCDByte:	
  1117  0025                     ??_MenuInit:	
  1118                           ; 1 bytes @ 0x5
  1119                           
  1120  0025                     ??_ConnInit:	
  1121                           ; 1 bytes @ 0x5
  1122                           
  1123  0025                     LCDByte@isdata:	
  1124                           ; 1 bytes @ 0x5
  1125                           
  1126  0025                     ___lwdiv@counter:	
  1127                           ; 1 bytes @ 0x5
  1128                           
  1129  0025                     memcpy@s:	
  1130                           ; 1 bytes @ 0x5
  1131                           
  1132                           
  1133                           ; 2 bytes @ 0x5
  1134  0025                     	ds	1
  1135  0026                     ??_LCDByte:	
  1136  0026                     send_byte@c:	
  1137                           ; 1 bytes @ 0x6
  1138                           
  1139  0026                     get_msg_index@start_index:	
  1140                           ; 1 bytes @ 0x6
  1141                           
  1142  0026                     crc_calculate@crc:	
  1143                           ; 1 bytes @ 0x6
  1144                           
  1145  0026                     ___lwdiv@quotient:	
  1146                           ; 2 bytes @ 0x6
  1147                           
  1148                           
  1149                           ; 2 bytes @ 0x6
  1150  0026                     	ds	1
  1151  0027                     ?_send_string:	
  1152  0027                     get_msg_index@i:	
  1153                           ; 1 bytes @ 0x7
  1154                           
  1155  0027                     memcpy@d:	
  1156                           ; 1 bytes @ 0x7
  1157                           
  1158  0027                     send_string@str:	
  1159                           ; 1 bytes @ 0x7
  1160                           
  1161                           
  1162                           ; 2 bytes @ 0x7
  1163  0027                     	ds	1
  1164  0028                     ??_get_msg:	
  1165  0028                     ?___lwmod:	
  1166                           ; 1 bytes @ 0x8
  1167                           
  1168  0028                     crc_calculate@i:	
  1169                           ; 2 bytes @ 0x8
  1170                           
  1171  0028                     LCDByte@hn:	
  1172                           ; 1 bytes @ 0x8
  1173                           
  1174  0028                     memcpy@d1:	
  1175                           ; 1 bytes @ 0x8
  1176                           
  1177  0028                     ___lwmod@divisor:	
  1178                           ; 1 bytes @ 0x8
  1179                           
  1180                           
  1181                           ; 2 bytes @ 0x8
  1182  0028                     	ds	1
  1183  0029                     ?_compose:	
  1184  0029                     ?_extract_HEART_BEAT_RQT_CMD:	
  1185                           ; 1 bytes @ 0x9
  1186                           
  1187  0029                     send_string@len:	
  1188                           ; 1 bytes @ 0x9
  1189                           
  1190  0029                     compose@from:	
  1191                           ; 1 bytes @ 0x9
  1192                           
  1193  0029                     extract_HEART_BEAT_RQT_CMD@prqt:	
  1194                           ; 1 bytes @ 0x9
  1195                           
  1196  0029                     LCDByte@ln:	
  1197                           ; 1 bytes @ 0x9
  1198                           
  1199                           
  1200                           ; 1 bytes @ 0x9
  1201  0029                     	ds	1
  1202  002A                     ??_send_string:	
  1203  002A                     ??_extract_HEART_BEAT_RQT_CMD:	
  1204                           ; 1 bytes @ 0xA
  1205                           
  1206  002A                     compose@to:	
  1207                           ; 1 bytes @ 0xA
  1208                           
  1209  002A                     get_msg@pstr:	
  1210                           ; 1 bytes @ 0xA
  1211                           
  1212  002A                     extract_HEART_BEAT_RQT_CMD@pmsg:	
  1213                           ; 1 bytes @ 0xA
  1214                           
  1215  002A                     LCDByte@c:	
  1216                           ; 1 bytes @ 0xA
  1217                           
  1218  002A                     ___lwmod@dividend:	
  1219                           ; 1 bytes @ 0xA
  1220                           
  1221                           
  1222                           ; 2 bytes @ 0xA
  1223  002A                     	ds	1
  1224  002B                     send_string@i:	
  1225  002B                     compose@msgid:	
  1226                           ; 1 bytes @ 0xB
  1227                           
  1228  002B                     get_msg@i:	
  1229                           ; 1 bytes @ 0xB
  1230                           
  1231  002B                     LCDByte@temp:	
  1232                           ; 1 bytes @ 0xB
  1233                           
  1234                           
  1235                           ; 1 bytes @ 0xB
  1236  002B                     	ds	1
  1237  002C                     ?_LCDGotoXY:	
  1238  002C                     ?_LCDWriteString:	
  1239                           ; 1 bytes @ 0xC
  1240                           
  1241  002C                     ??_LCDInit:	
  1242                           ; 1 bytes @ 0xC
  1243                           
  1244  002C                     ??_send_msg:	
  1245                           ; 1 bytes @ 0xC
  1246                           
  1247  002C                     ??___lwmod:	
  1248                           ; 1 bytes @ 0xC
  1249                           
  1250  002C                     compose@cmd:	
  1251                           ; 1 bytes @ 0xC
  1252                           
  1253  002C                     get_msg@pmsg:	
  1254                           ; 1 bytes @ 0xC
  1255                           
  1256  002C                     LCDGotoXY@y:	
  1257                           ; 1 bytes @ 0xC
  1258                           
  1259  002C                     LCDWriteString@msg:	
  1260                           ; 1 bytes @ 0xC
  1261                           
  1262                           
  1263                           ; 2 bytes @ 0xC
  1264  002C                     	ds	1
  1265  002D                     ??_LCDGotoXY:	
  1266  002D                     send_msg@s:	
  1267                           ; 1 bytes @ 0xD
  1268                           
  1269  002D                     compose@data:	
  1270                           ; 1 bytes @ 0xD
  1271                           
  1272  002D                     get_msg@start_index:	
  1273                           ; 1 bytes @ 0xD
  1274                           
  1275  002D                     ___lwmod@counter:	
  1276                           ; 1 bytes @ 0xD
  1277                           
  1278                           
  1279                           ; 1 bytes @ 0xD
  1280  002D                     	ds	1
  1281  002E                     ??_LCDWriteString:	
  1282  002E                     ?_sprintf:	
  1283                           ; 1 bytes @ 0xE
  1284                           
  1285  002E                     send_msg@pmsg:	
  1286                           ; 2 bytes @ 0xE
  1287                           
  1288  002E                     compose@datalen:	
  1289                           ; 1 bytes @ 0xE
  1290                           
  1291  002E                     get_msg@end_index:	
  1292                           ; 1 bytes @ 0xE
  1293                           
  1294  002E                     LCDInit@style:	
  1295                           ; 1 bytes @ 0xE
  1296                           
  1297  002E                     LCDGotoXY@x:	
  1298                           ; 1 bytes @ 0xE
  1299                           
  1300  002E                     sprintf@sp:	
  1301                           ; 1 bytes @ 0xE
  1302                           
  1303                           
  1304                           ; 2 bytes @ 0xE
  1305  002E                     	ds	1
  1306  002F                     ??_compose:	
  1307  002F                     get_msg@temp:	
  1308                           ; 1 bytes @ 0xF
  1309                           
  1310  002F                     LCDInit@__i:	
  1311                           ; 1 bytes @ 0xF
  1312                           
  1313  002F                     LCDWriteString@count:	
  1314                           ; 1 bytes @ 0xF
  1315                           
  1316                           
  1317                           ; 1 bytes @ 0xF
  1318  002F                     	ds	1
  1319  0030                     LCDWriteString@cc:	
  1320  0030                     sprintf@f:	
  1321                           ; 1 bytes @ 0x10
  1322                           
  1323                           
  1324                           ; 1 bytes @ 0x10
  1325  0030                     	ds	1
  1326  0031                     compose@len:	
  1327                           
  1328                           ; 2 bytes @ 0x11
  1329  0031                     	ds	2
  1330  0033                     compose@pmsg:	
  1331                           
  1332                           ; 1 bytes @ 0x13
  1333  0033                     	ds	1
  1334  0034                     ?_create_cmd:	
  1335  0034                     create_cmd@cmd_id:	
  1336                           ; 1 bytes @ 0x14
  1337                           
  1338                           
  1339                           ; 1 bytes @ 0x14
  1340  0034                     	ds	1
  1341  0035                     create_cmd@msg_id:	
  1342                           
  1343                           ; 1 bytes @ 0x15
  1344  0035                     	ds	1
  1345  0036                     create_cmd@cmd_data:	
  1346                           
  1347                           ; 1 bytes @ 0x16
  1348  0036                     	ds	1
  1349  0037                     create_cmd@cmd_data_len:	
  1350                           
  1351                           ; 1 bytes @ 0x17
  1352  0037                     	ds	1
  1353  0038                     create_cmd@pmsg:	
  1354                           
  1355                           ; 1 bytes @ 0x18
  1356  0038                     	ds	1
  1357  0039                     ??_create_cmd:	
  1358                           
  1359                           ; 1 bytes @ 0x19
  1360  0039                     	ds	4
  1361  003D                     ??_sprintf:	
  1362                           
  1363                           ; 1 bytes @ 0x1D
  1364  003D                     	ds	2
  1365  003F                     create_cmd@pconn:	
  1366                           
  1367                           ; 1 bytes @ 0x1F
  1368  003F                     	ds	1
  1369  0040                     ?_create_HEART_BEAT_RSP_CMD:	
  1370  0040                     create_HEART_BEAT_RSP_CMD@pmsgi:	
  1371                           ; 1 bytes @ 0x20
  1372                           
  1373  0040                     sprintf@ap:	
  1374                           ; 1 bytes @ 0x20
  1375                           
  1376                           
  1377                           ; 1 bytes @ 0x20
  1378  0040                     	ds	1
  1379  0041                     create_HEART_BEAT_RSP_CMD@pmsgo:	
  1380  0041                     sprintf@flag:	
  1381                           ; 1 bytes @ 0x21
  1382                           
  1383                           
  1384                           ; 1 bytes @ 0x21
  1385  0041                     	ds	1
  1386  0042                     ??_create_HEART_BEAT_RSP_CMD:	
  1387  0042                     sprintf@prec:	
  1388                           ; 1 bytes @ 0x22
  1389                           
  1390                           
  1391                           ; 1 bytes @ 0x22
  1392  0042                     	ds	1
  1393  0043                     sprintf@val:	
  1394                           
  1395                           ; 2 bytes @ 0x23
  1396  0043                     	ds	2
  1397  0045                     sprintf@c:	
  1398                           
  1399                           ; 1 bytes @ 0x25
  1400  0045                     	ds	1
  1401  0046                     ?_dump_msg:	
  1402  0046                     ??_dump_conn:	
  1403                           ; 1 bytes @ 0x26
  1404                           
  1405  0046                     create_HEART_BEAT_RSP_CMD@pconn:	
  1406                           ; 1 bytes @ 0x26
  1407                           
  1408  0046                     dump_msg@pmsg:	
  1409                           ; 1 bytes @ 0x26
  1410                           
  1411                           
  1412                           ; 2 bytes @ 0x26
  1413  0046                     	ds	1
  1414  0047                     create_HEART_BEAT_RSP_CMD@rsp:	
  1415                           
  1416                           ; 1 bytes @ 0x27
  1417  0047                     	ds	1
  1418  0048                     ??_dump_msg:	
  1419  0048                     create_HEART_BEAT_RSP_CMD@rqt:	
  1420                           ; 1 bytes @ 0x28
  1421                           
  1422                           
  1423                           ; 1 bytes @ 0x28
  1424  0048                     	ds	21
  1425  005D                     dump_msg@count:	
  1426                           
  1427                           ; 1 bytes @ 0x3D
  1428  005D                     	ds	1
  1429  005E                     dump_msg@i:	
  1430                           
  1431                           ; 1 bytes @ 0x3E
  1432  005E                     	ds	1
  1433  005F                     ??_handle_HEART_BEAT_RQT_CMD:	
  1434                           
  1435                           ; 1 bytes @ 0x3F
  1436  005F                     	ds	2
  1437  0061                     ??_handle_received_cmds:	
  1438  0061                     ??_main:	
  1439                           ; 1 bytes @ 0x41
  1440                           
  1441  0061                     main@count:	
  1442                           ; 1 bytes @ 0x41
  1443                           
  1444                           
  1445                           ; 1 bytes @ 0x41
  1446  0061                     	ds	1
  1447                           
  1448                           	psect	maintext
  1449  0E98                     __pmaintext:	
  1450 ;;
  1451 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1452 ;;
  1453 ;; *************** function _main *****************
  1454 ;; Defined at:
  1455 ;;		line 105 in file "do_am.c"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;		None
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  count           1   65[BANK0 ] unsigned char 
  1460 ;;  value           1    0        unsigned char 
  1461 ;;  ret             1    0        unsigned char 
  1462 ;; Return value:  Size  Location     Type
  1463 ;;                  1    wreg      void 
  1464 ;; Registers used:
  1465 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1466 ;; Tracked objects:
  1467 ;;		On entry : B00/0
  1468 ;;		On exit  : 0/0
  1469 ;;		Unchanged: 0/0
  1470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1471 ;;      Params:         0       0       0       0       0
  1472 ;;      Locals:         0       1       0       0       0
  1473 ;;      Temps:          0       0       0       0       0
  1474 ;;      Totals:         0       1       0       0       0
  1475 ;;Total ram usage:        1 bytes
  1476 ;; Hardware stack levels required when called:    9
  1477 ;; This function calls:
  1478 ;;		_ADCInit
  1479 ;;		_ConnInit
  1480 ;;		_IOInit
  1481 ;;		_LCDByte
  1482 ;;		_LCDInit
  1483 ;;		_MenuInit
  1484 ;;		_dump_conn
  1485 ;;		_handle_received_cmds
  1486 ;; This function is called by:
  1487 ;;		Startup code after reset
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           
  1492                           ;psect for function _main
  1493  0E98                     _main:	
  1494                           
  1495                           ;do_am.c: 108: LCDInit(0B00000000);
  1496                           
  1497                           ;incstack = 0
  1498 ;; hardware stack exceeded
  1499                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1500  0E98  3000               	movlw	0
  1501  0E99  120A  118A  2539  120A  158A  	fcall	_LCDInit
  1502                           
  1503                           ;do_am.c: 111: ADCInit();
  1504  0E9E  120A  158A  2517  120A  158A  	fcall	_ADCInit
  1505                           
  1506                           ;do_am.c: 114: IOInit();
  1507  0EA3  120A  158A  27B3  120A  158A  	fcall	_IOInit
  1508                           
  1509                           ;do_am.c: 116: MenuInit();
  1510  0EA8  120A  118A  271A  120A  158A  	fcall	_MenuInit
  1511                           
  1512                           ;do_am.c: 118: ConnInit();
  1513  0EAD  120A  158A  252B  120A  158A  	fcall	_ConnInit
  1514                           
  1515                           ;do_am.c: 121: (LCDByte(0b00000001,0));
  1516  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  1517  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
  1518  0EB4  01A5               	clrf	LCDByte@isdata
  1519  0EB5  3001               	movlw	1
  1520  0EB6  120A  118A  26C3  120A  158A  	fcall	_LCDByte
  1521                           
  1522                           ;do_am.c: 123: uint8_t count = 0;
  1523  0EBB  1283               	bcf	3,5	;RP0=0, select bank0
  1524  0EBC  1303               	bcf	3,6	;RP1=0, select bank0
  1525  0EBD  01E1               	clrf	main@count
  1526                           
  1527                           ;do_am.c: 124: uint8_t ret;
  1528                           ;do_am.c: 125: uint8_t value;
  1529                           ;do_am.c: 127: dump_conn(&server_conn);
  1530  0EBE  30CF               	movlw	(low (_server_conn| 0))& (0+255)
  1531  0EBF  120A  118A  231F  120A  158A  	fcall	_dump_conn
  1532  0EC4                     l3611:	
  1533                           ;do_am.c: 128: while(1)
  1534                           
  1535                           
  1536                           ;do_am.c: 129: {
  1537                           ;do_am.c: 136: handle_received_cmds();
  1538  0EC4  120A  158A  2560  120A  158A  	fcall	_handle_received_cmds
  1539                           
  1540                           ;do_am.c: 160: {
  1541  0EC9  2EC4               	goto	l3611
  1542  0ECA                     __end_of_main:	
  1543                           
  1544                           	psect	text1
  1545  0D60                     __ptext1:	
  1546 ;; *************** function _handle_received_cmds *****************
  1547 ;; Defined at:
  1548 ;;		line 34 in file "cmd.h"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;		None
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;		None
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  1    wreg      void 
  1555 ;; Registers used:
  1556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1562 ;;      Params:         0       0       0       0       0
  1563 ;;      Locals:         0       0       0       0       0
  1564 ;;      Temps:          0       0       0       0       0
  1565 ;;      Totals:         0       0       0       0       0
  1566 ;;Total ram usage:        0 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    8
  1569 ;; This function calls:
  1570 ;;		_get_msg
  1571 ;;		_handle_HEART_BEAT_RQT_CMD
  1572 ;; This function is called by:
  1573 ;;		_main
  1574 ;; This function uses a non-reentrant model
  1575 ;;
  1576                           
  1577                           
  1578                           ;psect for function _handle_received_cmds
  1579  0D60                     _handle_received_cmds:	
  1580                           
  1581                           ;cmd.h: 36: if(get_msg(pmsg_rcv) == 1)
  1582                           
  1583                           ;incstack = 0
  1584 ;; hardware stack exceeded
  1585                           ; Regs used in _handle_received_cmds: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  1586  0D60  1283               	bcf	3,5	;RP0=0, select bank0
  1587  0D61  1303               	bcf	3,6	;RP1=0, select bank0
  1588  0D62  0863               	movf	_pmsg_rcv,w
  1589  0D63  120A  158A  2767  120A  158A  	fcall	_get_msg
  1590  0D68  3A01               	xorlw	1
  1591  0D69  1D03               	skipz
  1592  0D6A  0008               	return
  1593  0D6B  2D73               	goto	l3365
  1594  0D6C                     l3361:	
  1595                           ;cmd.h: 39: {
  1596                           ;cmd.h: 46: case HEART_BEAT_RQT:
  1597                           
  1598                           ;cmd.h: 37: {
  1599                           ;cmd.h: 38: switch(pmsg_rcv->cmd)
  1600                           
  1601                           
  1602                           ;cmd.h: 47: handle_HEART_BEAT_RQT_CMD(pmsg_rcv);
  1603  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  1604  0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  1605  0D6E  0863               	movf	_pmsg_rcv,w
  1606  0D6F  120A  158A  25C9   	fcall	_handle_HEART_BEAT_RQT_CMD
  1607                           
  1608                           ;cmd.h: 52: }
  1609                           
  1610                           ;cmd.h: 51: break;
  1611                           
  1612                           ;cmd.h: 50: default:
  1613                           
  1614                           ;cmd.h: 48: break;
  1615  0D72  0008               	return
  1616  0D73                     l3365:	
  1617  0D73  1283               	bcf	3,5	;RP0=0, select bank0
  1618  0D74  1303               	bcf	3,6	;RP1=0, select bank0
  1619  0D75  0863               	movf	_pmsg_rcv,w
  1620  0D76  3E06               	addlw	6
  1621  0D77  0084               	movwf	4
  1622  0D78  1783               	bsf	3,7	;select IRP bank2
  1623  0D79  0800               	movf	0,w
  1624                           
  1625                           ; Switch size 1, requested type "space"
  1626                           ; Number of cases is 1, Range of values is 2 to 2
  1627                           ; switch strategies available:
  1628                           ; Name         Instructions Cycles
  1629                           ; simple_byte            4     3 (average)
  1630                           ; direct_byte           14    11 (fixed)
  1631                           ; jumptable            263     9 (fixed)
  1632                           ;	Chosen strategy is simple_byte
  1633  0D7A  3A02               	xorlw	2	; case 2
  1634  0D7B  1903               	skipnz
  1635  0D7C  2D6C               	goto	l3361
  1636  0D7D  2D7F               	goto	l236
  1637  0D7E  0008               	return
  1638  0D7F                     l236:	
  1639  0D7F  0008               	return
  1640  0D80                     __end_of_handle_received_cmds:	
  1641                           
  1642                           	psect	text2
  1643  0DC9                     __ptext2:	
  1644 ;; *************** function _handle_HEART_BEAT_RQT_CMD *****************
  1645 ;; Defined at:
  1646 ;;		line 84 in file "heart_beat.h"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  pmsgi           1    wreg     PTR struct .
  1649 ;;		 -> msg_rcv(23), 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  pmsgi           1    0[BANK1 ] PTR struct .
  1652 ;;		 -> msg_rcv(23), 
  1653 ;;  msgo           23    1[BANK1 ] struct .
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1663 ;;      Params:         0       0       0       0       0
  1664 ;;      Locals:         0       0      24       0       0
  1665 ;;      Temps:          0       2       0       0       0
  1666 ;;      Totals:         0       2      24       0       0
  1667 ;;Total ram usage:       26 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    7
  1670 ;; This function calls:
  1671 ;;		_create_HEART_BEAT_RSP_CMD
  1672 ;;		_dump_msg
  1673 ;;		_send_msg
  1674 ;; This function is called by:
  1675 ;;		_handle_received_cmds
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           
  1680                           ;psect for function _handle_HEART_BEAT_RQT_CMD
  1681  0DC9                     _handle_HEART_BEAT_RQT_CMD:	
  1682                           
  1683                           ;incstack = 0
  1684 ;; hardware stack exceeded
  1685                           ; Regs used in _handle_HEART_BEAT_RQT_CMD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  1686                           ;handle_HEART_BEAT_RQT_CMD@pmsgi stored from wreg
  1687  0DC9  1683               	bsf	3,5	;RP0=1, select bank1
  1688  0DCA  1303               	bcf	3,6	;RP1=0, select bank1
  1689  0DCB  00A0               	movwf	handle_HEART_BEAT_RQT_CMD@pmsgi^(0+128)
  1690                           
  1691                           ;heart_beat.h: 86: Msg_t msgo;
  1692                           ;heart_beat.h: 87: server_conn.available = 1;
  1693  0DCC  01D3               	clrf	(_server_conn^(0+128)+4)
  1694  0DCD  0AD3               	incf	(_server_conn^(0+128)+4),f
  1695                           
  1696                           ;heart_beat.h: 88: create_HEART_BEAT_RSP_CMD(&server_conn, pmsgi, &msgo);
  1697  0DCE  0820               	movf	handle_HEART_BEAT_RQT_CMD@pmsgi^(0+128),w
  1698  0DCF  1283               	bcf	3,5	;RP0=0, select bank0
  1699  0DD0  1303               	bcf	3,6	;RP1=0, select bank0
  1700  0DD1  00DF               	movwf	??_handle_HEART_BEAT_RQT_CMD
  1701  0DD2  085F               	movf	??_handle_HEART_BEAT_RQT_CMD,w
  1702  0DD3  00C0               	movwf	create_HEART_BEAT_RSP_CMD@pmsgi
  1703  0DD4  30A1               	movlw	(low (handle_HEART_BEAT_RQT_CMD@msgo| 0))& (0+255)
  1704  0DD5  00E0               	movwf	??_handle_HEART_BEAT_RQT_CMD+1
  1705  0DD6  0860               	movf	??_handle_HEART_BEAT_RQT_CMD+1,w
  1706  0DD7  00C1               	movwf	create_HEART_BEAT_RSP_CMD@pmsgo
  1707  0DD8  30CF               	movlw	(low (_server_conn| 0))& (0+255)
  1708  0DD9  120A  158A  266A  120A  158A  	fcall	_create_HEART_BEAT_RSP_CMD
  1709                           
  1710                           ;heart_beat.h: 89: send_msg(&msgo);
  1711  0DDE  30A1               	movlw	(low (handle_HEART_BEAT_RQT_CMD@msgo| 0))& (0+255)
  1712  0DDF  120A  158A  26FE  120A  158A  	fcall	_send_msg
  1713                           
  1714                           ;heart_beat.h: 90: dump_msg(&msgo);
  1715  0DE4  30A1               	movlw	(low (handle_HEART_BEAT_RQT_CMD@msgo| 0))& (0+255)
  1716  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
  1717  0DE6  1303               	bcf	3,6	;RP1=0, select bank0
  1718  0DE7  00C6               	movwf	dump_msg@pmsg
  1719  0DE8  3000               	movlw	0
  1720  0DE9  00C7               	movwf	dump_msg@pmsg+1
  1721  0DEA  120A  118A  225F   	fcall	_dump_msg
  1722  0DED  0008               	return
  1723  0DEE                     __end_of_handle_HEART_BEAT_RQT_CMD:	
  1724                           
  1725                           	psect	text3
  1726  0EFE                     __ptext3:	
  1727 ;; *************** function _send_msg *****************
  1728 ;; Defined at:
  1729 ;;		line 29 in file "msg.h"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;  pmsg            1    wreg     PTR struct .
  1732 ;;		 -> handle_HEART_BEAT_RQT_CMD@msgo(23), send_REG_ID_RQT_CMD_and_wait@msg(23), 
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;  pmsg            1   14[BANK0 ] PTR struct .
  1735 ;;		 -> handle_HEART_BEAT_RQT_CMD@msgo(23), send_REG_ID_RQT_CMD_and_wait@msg(23), 
  1736 ;;  s               1   13[BANK0 ] PTR unsigned char 
  1737 ;;		 -> handle_HEART_BEAT_RQT_CMD@msgo(23), send_REG_ID_RQT_CMD_and_wait@msg(23), 
  1738 ;; Return value:  Size  Location     Type
  1739 ;;                  1    wreg      void 
  1740 ;; Registers used:
  1741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1747 ;;      Params:         0       0       0       0       0
  1748 ;;      Locals:         0       2       0       0       0
  1749 ;;      Temps:          0       1       0       0       0
  1750 ;;      Totals:         0       3       0       0       0
  1751 ;;Total ram usage:        3 bytes
  1752 ;; Hardware stack levels used:    1
  1753 ;; Hardware stack levels required when called:    6
  1754 ;; This function calls:
  1755 ;;		_send_string
  1756 ;; This function is called by:
  1757 ;;		_handle_HEART_BEAT_RQT_CMD
  1758 ;;		_send_REG_ID_RQT_CMD_and_wait
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           
  1763                           ;psect for function _send_msg
  1764  0EFE                     _send_msg:	
  1765                           
  1766                           ;incstack = 0
  1767 ;; hardware stack exceeded
  1768                           ; Regs used in _send_msg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1769                           ;send_msg@pmsg stored from wreg
  1770  0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  1771  0EFF  1303               	bcf	3,6	;RP1=0, select bank0
  1772  0F00  00AE               	movwf	send_msg@pmsg
  1773                           
  1774                           ;msg.h: 31: send_string(start_mark, 4);
  1775  0F01  300B               	movlw	(low ((_start_mark-__stringbase)| (0+32768)))& (0+255)
  1776  0F02  00A7               	movwf	send_string@str
  1777  0F03  3080               	movlw	128
  1778  0F04  00A8               	movwf	send_string@str+1
  1779  0F05  3004               	movlw	4
  1780  0F06  00AC               	movwf	??_send_msg
  1781  0F07  082C               	movf	??_send_msg,w
  1782  0F08  00A9               	movwf	send_string@len
  1783  0F09  120A  158A  2541  120A  158A  	fcall	_send_string
  1784                           
  1785                           ;msg.h: 32: uint8_t *s = (uint8_t *)pmsg;
  1786  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  1787  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  1788  0F10  082E               	movf	send_msg@pmsg,w
  1789  0F11  00AC               	movwf	??_send_msg
  1790  0F12  082C               	movf	??_send_msg,w
  1791  0F13  00AD               	movwf	send_msg@s
  1792                           
  1793                           ;msg.h: 33: send_string(s, pmsg->msglen);
  1794  0F14  082D               	movf	send_msg@s,w
  1795  0F15  00A7               	movwf	send_string@str
  1796  0F16  3000               	movlw	0
  1797  0F17  00A8               	movwf	send_string@str+1
  1798  0F18  082E               	movf	send_msg@pmsg,w
  1799  0F19  0084               	movwf	4
  1800  0F1A  1383               	bcf	3,7	;select IRP bank0
  1801  0F1B  0800               	movf	0,w
  1802  0F1C  00AC               	movwf	??_send_msg
  1803  0F1D  082C               	movf	??_send_msg,w
  1804  0F1E  00A9               	movwf	send_string@len
  1805  0F1F  120A  158A  2541  120A  158A  	fcall	_send_string
  1806                           
  1807                           ;msg.h: 34: send_string(stop_mark, 4);
  1808  0F24  300F               	movlw	(low ((_stop_mark-__stringbase)| (0+32768)))& (0+255)
  1809  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  1810  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  1811  0F27  00A7               	movwf	send_string@str
  1812  0F28  3080               	movlw	128
  1813  0F29  00A8               	movwf	send_string@str+1
  1814  0F2A  3004               	movlw	4
  1815  0F2B  00AC               	movwf	??_send_msg
  1816  0F2C  082C               	movf	??_send_msg,w
  1817  0F2D  00A9               	movwf	send_string@len
  1818  0F2E  120A  158A  2541   	fcall	_send_string
  1819  0F31  0008               	return
  1820  0F32                     __end_of_send_msg:	
  1821                           
  1822                           	psect	text4
  1823  0D41                     __ptext4:	
  1824 ;; *************** function _send_string *****************
  1825 ;; Defined at:
  1826 ;;		line 29 in file "packet.h"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;  str             2    7[BANK0 ] PTR unsigned char 
  1829 ;;		 -> handle_HEART_BEAT_RQT_CMD@msgo(23), send_REG_ID_RQT_CMD_and_wait@msg(23), stop_mark(4), start_mark(4), 
  1830 ;;  len             1    9[BANK0 ] unsigned char 
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;  i               1   11[BANK0 ] unsigned char 
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      void 
  1835 ;; Registers used:
  1836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1842 ;;      Params:         0       3       0       0       0
  1843 ;;      Locals:         0       1       0       0       0
  1844 ;;      Temps:          0       1       0       0       0
  1845 ;;      Totals:         0       5       0       0       0
  1846 ;;Total ram usage:        5 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:    5
  1849 ;; This function calls:
  1850 ;;		_send_byte
  1851 ;; This function is called by:
  1852 ;;		_send_msg
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           
  1857                           ;psect for function _send_string
  1858  0D41                     _send_string:	
  1859                           
  1860                           ;packet.h: 31: for(uint8_t i = 0; i < len; i++)
  1861                           
  1862                           ;incstack = 0
  1863 ;; hardware stack exceeded
  1864                           ; Regs used in _send_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1865  0D41  1283               	bcf	3,5	;RP0=0, select bank0
  1866  0D42  1303               	bcf	3,6	;RP1=0, select bank0
  1867  0D43  01AB               	clrf	send_string@i
  1868  0D44                     l3173:	
  1869  0D44  0829               	movf	send_string@len,w
  1870  0D45  022B               	subwf	send_string@i,w
  1871  0D46  1803               	btfsc	3,0
  1872  0D47  0008               	return
  1873                           
  1874                           ;packet.h: 32: {
  1875                           ;packet.h: 33: send_byte(str[i]);
  1876  0D48  082B               	movf	send_string@i,w
  1877  0D49  0727               	addwf	send_string@str,w
  1878  0D4A  0084               	movwf	4
  1879  0D4B  0828               	movf	send_string@str+1,w
  1880  0D4C  1803               	skipnc
  1881  0D4D  0A28               	incf	send_string@str+1,w
  1882  0D4E  00FF               	movwf	127
  1883  0D4F  120A  118A  266B  120A  158A  	fcall	stringtab
  1884  0D54  120A  158A  263F  120A  158A  	fcall	_send_byte
  1885  0D59  3001               	movlw	1
  1886  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  1887  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  1888  0D5C  00AA               	movwf	??_send_string
  1889  0D5D  082A               	movf	??_send_string,w
  1890  0D5E  07AB               	addwf	send_string@i,f
  1891  0D5F  2D44               	goto	l3173
  1892  0D60                     __end_of_send_string:	
  1893                           
  1894                           	psect	text5
  1895  0E3F                     __ptext5:	
  1896 ;; *************** function _send_byte *****************
  1897 ;; Defined at:
  1898 ;;		line 20 in file "packet.h"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;  c               1    wreg     unsigned char 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  c               1    6[BANK0 ] unsigned char 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1912 ;;      Params:         0       0       0       0       0
  1913 ;;      Locals:         0       1       0       0       0
  1914 ;;      Temps:          0       2       0       0       0
  1915 ;;      Totals:         0       3       0       0       0
  1916 ;;Total ram usage:        3 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    4
  1919 ;; This function calls:
  1920 ;;		_send_half_byte
  1921 ;; This function is called by:
  1922 ;;		_send_string
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           
  1927                           ;psect for function _send_byte
  1928  0E3F                     _send_byte:	
  1929                           
  1930                           ;incstack = 0
  1931 ;; hardware stack exceeded
  1932                           ; Regs used in _send_byte: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1933                           ;send_byte@c stored from wreg
  1934  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  1935  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  1936  0E41  00A6               	movwf	send_byte@c
  1937                           
  1938                           ;packet.h: 22: send_half_byte(c, 1);
  1939  0E42  01A0               	clrf	send_half_byte@low
  1940  0E43  0AA0               	incf	send_half_byte@low,f
  1941  0E44  0826               	movf	send_byte@c,w
  1942  0E45  120A  118A  24CD  120A  158A  	fcall	_send_half_byte
  1943                           
  1944                           ;packet.h: 23: _delay((unsigned long)((5)*(20000000/4000.0)));
  1945  0E4A  3021               	movlw	33
  1946  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  1947  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  1948  0E4D  00A5               	movwf	??_send_byte+1
  1949  0E4E  3076               	movlw	118
  1950  0E4F  00A4               	movwf	??_send_byte
  1951  0E50                     u3777:	
  1952  0E50  0BA4               	decfsz	??_send_byte,f
  1953  0E51  2E50               	goto	u3777
  1954  0E52  0BA5               	decfsz	??_send_byte+1,f
  1955  0E53  2E50               	goto	u3777
  1956  0E54  0000               	nop
  1957                           
  1958                           ;packet.h: 24: send_half_byte(c, 0);
  1959  0E55  1283               	bcf	3,5	;RP0=0, select bank0
  1960  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  1961  0E57  01A0               	clrf	send_half_byte@low
  1962  0E58  0826               	movf	send_byte@c,w
  1963  0E59  120A  118A  24CD  120A  158A  	fcall	_send_half_byte
  1964                           
  1965                           ;packet.h: 25: _delay((unsigned long)((5)*(20000000/4000.0)));
  1966  0E5E  3021               	movlw	33
  1967  0E5F  1283               	bcf	3,5	;RP0=0, select bank0
  1968  0E60  1303               	bcf	3,6	;RP1=0, select bank0
  1969  0E61  00A5               	movwf	??_send_byte+1
  1970  0E62  3076               	movlw	118
  1971  0E63  00A4               	movwf	??_send_byte
  1972  0E64                     u3787:	
  1973  0E64  0BA4               	decfsz	??_send_byte,f
  1974  0E65  2E64               	goto	u3787
  1975  0E66  0BA5               	decfsz	??_send_byte+1,f
  1976  0E67  2E64               	goto	u3787
  1977  0E68  0000               	nop
  1978  0E69  0008               	return
  1979  0E6A                     __end_of_send_byte:	
  1980                           
  1981                           	psect	text6
  1982  04CD                     __ptext6:	
  1983 ;; *************** function _send_half_byte *****************
  1984 ;; Defined at:
  1985 ;;		line 14 in file "packet.h"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;  value           1    wreg     unsigned char 
  1988 ;;  low             1    0[BANK0 ] unsigned char 
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  value           1    2[BANK0 ] unsigned char 
  1991 ;;  byte            1    3[BANK0 ] PTR struct .
  1992 ;;		 -> send_half_byte@value(1), 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2002 ;;      Params:         0       1       0       0       0
  2003 ;;      Locals:         0       2       0       0       0
  2004 ;;      Temps:          0       1       0       0       0
  2005 ;;      Totals:         0       4       0       0       0
  2006 ;;Total ram usage:        4 bytes
  2007 ;; Hardware stack levels used:    1
  2008 ;; Hardware stack levels required when called:    3
  2009 ;; This function calls:
  2010 ;;		Nothing
  2011 ;; This function is called by:
  2012 ;;		_send_byte
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           
  2017                           ;psect for function _send_half_byte
  2018  04CD                     _send_half_byte:	
  2019                           
  2020                           ;incstack = 0
  2021 ;; hardware stack exceeded
  2022                           ; Regs used in _send_half_byte: [wreg-fsr0h+status,2+status,0]
  2023                           ;send_half_byte@value stored from wreg
  2024  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  2025  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  2026  04CF  00A2               	movwf	send_half_byte@value
  2027                           
  2028                           ;packet.h: 16: { BITbits_t *byte = (BITbits_t *)&value; if(low == 1) { RA4 = byte->B0; R
      +                          A5 = byte->B1; RA6 = byte->B2; RA7 = byte->B3; } else { RA4 = byte->B4; RA5 = byte->B5; 
      +                          RA6 = byte->B6; RA7 = byte->B7; } };
  2029  04D0  3022               	movlw	(low (send_half_byte@value| 0))& (0+255)
  2030  04D1  00A1               	movwf	??_send_half_byte
  2031  04D2  0821               	movf	??_send_half_byte,w
  2032  04D3  00A3               	movwf	send_half_byte@byte
  2033  04D4  0320               	decf	send_half_byte@low,w
  2034  04D5  1D03               	btfss	3,2
  2035  04D6  2D01               	goto	l2979
  2036  04D7  0823               	movf	send_half_byte@byte,w
  2037  04D8  0084               	movwf	4
  2038  04D9  1383               	bcf	3,7	;select IRP bank0
  2039  04DA  1C00               	btfss	0,0
  2040  04DB  2CE0               	goto	u2900
  2041  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  2042  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  2043  04DE  1605               	bsf	5,4	;volatile
  2044  04DF  2CE3               	goto	u2914
  2045  04E0                     u2900:	
  2046  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  2047  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  2048  04E2  1205               	bcf	5,4	;volatile
  2049  04E3                     u2914:	
  2050  04E3  0823               	movf	send_half_byte@byte,w
  2051  04E4  0084               	movwf	4
  2052  04E5  1383               	bcf	3,7	;select IRP bank0
  2053  04E6  1C80               	btfss	0,1
  2054  04E7  2CEC               	goto	u2920
  2055  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  2056  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  2057  04EA  1685               	bsf	5,5	;volatile
  2058  04EB  2CEF               	goto	u2934
  2059  04EC                     u2920:	
  2060  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  2061  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  2062  04EE  1285               	bcf	5,5	;volatile
  2063  04EF                     u2934:	
  2064  04EF  0823               	movf	send_half_byte@byte,w
  2065  04F0  0084               	movwf	4
  2066  04F1  1383               	bcf	3,7	;select IRP bank0
  2067  04F2  1D00               	btfss	0,2
  2068  04F3  2CF8               	goto	u2940
  2069  04F4  1283               	bcf	3,5	;RP0=0, select bank0
  2070  04F5  1303               	bcf	3,6	;RP1=0, select bank0
  2071  04F6  1705               	bsf	5,6	;volatile
  2072  04F7  2CFB               	goto	u2954
  2073  04F8                     u2940:	
  2074  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  2075  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  2076  04FA  1305               	bcf	5,6	;volatile
  2077  04FB                     u2954:	
  2078  04FB  0823               	movf	send_half_byte@byte,w
  2079  04FC  0084               	movwf	4
  2080  04FD  1383               	bcf	3,7	;select IRP bank0
  2081  04FE  1980               	btfsc	0,3
  2082  04FF  2D2A               	goto	L1
  2083  0500  2D2E               	goto	u3040
  2084  0501                     l2979:	
  2085  0501  0823               	movf	send_half_byte@byte,w
  2086  0502  0084               	movwf	4
  2087  0503  1383               	bcf	3,7	;select IRP bank0
  2088  0504  1E00               	btfss	0,4
  2089  0505  2D0A               	goto	u2980
  2090  0506  1283               	bcf	3,5	;RP0=0, select bank0
  2091  0507  1303               	bcf	3,6	;RP1=0, select bank0
  2092  0508  1605               	bsf	5,4	;volatile
  2093  0509  2D0D               	goto	u2994
  2094  050A                     u2980:	
  2095  050A  1283               	bcf	3,5	;RP0=0, select bank0
  2096  050B  1303               	bcf	3,6	;RP1=0, select bank0
  2097  050C  1205               	bcf	5,4	;volatile
  2098  050D                     u2994:	
  2099  050D  0823               	movf	send_half_byte@byte,w
  2100  050E  0084               	movwf	4
  2101  050F  1383               	bcf	3,7	;select IRP bank0
  2102  0510  1E80               	btfss	0,5
  2103  0511  2D16               	goto	u3000
  2104  0512  1283               	bcf	3,5	;RP0=0, select bank0
  2105  0513  1303               	bcf	3,6	;RP1=0, select bank0
  2106  0514  1685               	bsf	5,5	;volatile
  2107  0515  2D19               	goto	u3014
  2108  0516                     u3000:	
  2109  0516  1283               	bcf	3,5	;RP0=0, select bank0
  2110  0517  1303               	bcf	3,6	;RP1=0, select bank0
  2111  0518  1285               	bcf	5,5	;volatile
  2112  0519                     u3014:	
  2113  0519  0823               	movf	send_half_byte@byte,w
  2114  051A  0084               	movwf	4
  2115  051B  1383               	bcf	3,7	;select IRP bank0
  2116  051C  1F00               	btfss	0,6
  2117  051D  2D22               	goto	u3020
  2118  051E  1283               	bcf	3,5	;RP0=0, select bank0
  2119  051F  1303               	bcf	3,6	;RP1=0, select bank0
  2120  0520  1705               	bsf	5,6	;volatile
  2121  0521  2D25               	goto	u3034
  2122  0522                     u3020:	
  2123  0522  1283               	bcf	3,5	;RP0=0, select bank0
  2124  0523  1303               	bcf	3,6	;RP1=0, select bank0
  2125  0524  1305               	bcf	5,6	;volatile
  2126  0525                     u3034:	
  2127  0525  0823               	movf	send_half_byte@byte,w
  2128  0526  0084               	movwf	4
  2129  0527  1383               	bcf	3,7	;select IRP bank0
  2130  0528  1F80               	btfss	0,7
  2131  0529  2D2E               	goto	u3040
  2132  052A                     L1:	
  2133  052A  1283               	bcf	3,5	;RP0=0, select bank0
  2134  052B  1303               	bcf	3,6	;RP1=0, select bank0
  2135  052C  1785               	bsf	5,7	;volatile
  2136  052D  2D31               	goto	l2981
  2137  052E                     u3040:	
  2138  052E  1283               	bcf	3,5	;RP0=0, select bank0
  2139  052F  1303               	bcf	3,6	;RP1=0, select bank0
  2140  0530  1385               	bcf	5,7	;volatile
  2141  0531                     l2981:	
  2142                           
  2143                           ;packet.h: 17: {RB1 = 0; _delay((unsigned long)((1)*(20000000/4000000.0))); RB1 = 1;};
  2144  0531  1086               	bcf	6,1	;volatile
  2145  0532  2D33               	nop2	;2 cycle nop
  2146  0533  2D34               	nop2	;2 cycle nop
  2147  0534  0000               	nop
  2148  0535  1283               	bcf	3,5	;RP0=0, select bank0
  2149  0536  1303               	bcf	3,6	;RP1=0, select bank0
  2150  0537  1486               	bsf	6,1	;volatile
  2151  0538  0008               	return
  2152  0539                     __end_of_send_half_byte:	
  2153                           
  2154                           	psect	text7
  2155  025F                     __ptext7:	
  2156 ;; *************** function _dump_msg *****************
  2157 ;; Defined at:
  2158 ;;		line 75 in file "msg.h"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;  pmsg            2   38[BANK0 ] PTR struct .
  2161 ;;		 -> handle_HEART_BEAT_RQT_CMD@msgo(23), msg_rcv(23), 
  2162 ;; Auto vars:     Size  Location     Type
  2163 ;;  i               1   62[BANK0 ] char 
  2164 ;;  count           1   61[BANK0 ] char 
  2165 ;; Return value:  Size  Location     Type
  2166 ;;                  1    wreg      void 
  2167 ;; Registers used:
  2168 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2169 ;; Tracked objects:
  2170 ;;		On entry : 0/0
  2171 ;;		On exit  : 0/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2174 ;;      Params:         0       2       0       0       0
  2175 ;;      Locals:         0       2       0       0       0
  2176 ;;      Temps:          0      21       0       0       0
  2177 ;;      Totals:         0      25       0       0       0
  2178 ;;Total ram usage:       25 bytes
  2179 ;; Hardware stack levels used:    1
  2180 ;; Hardware stack levels required when called:    6
  2181 ;; This function calls:
  2182 ;;		_LCDByte
  2183 ;;		_LCDGotoXY
  2184 ;;		_LCDWriteString
  2185 ;;		_sprintf
  2186 ;; This function is called by:
  2187 ;;		_handle_HEART_BEAT_RQT_CMD
  2188 ;;		_send_REG_ID_RQT_CMD_and_wait
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           
  2193                           ;psect for function _dump_msg
  2194  025F                     _dump_msg:	
  2195                           
  2196                           ;msg.h: 77: sprintf(sdebug, "M:%d,%d,%d,%d,%d,%d", pmsg->msglen, pmsg->crc, pmsg->from, 
      +                          pmsg->to, pmsg->msgid, pmsg->cmd);
  2197                           
  2198                           ;incstack = 0
  2199 ;; hardware stack exceeded
  2200                           ; Regs used in _dump_msg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2201  025F  30B0               	movlw	(low (_sdebug| (0+256)))& (0+255)
  2202  0260  1283               	bcf	3,5	;RP0=0, select bank0
  2203  0261  1303               	bcf	3,6	;RP1=0, select bank0
  2204  0262  00AE               	movwf	sprintf@sp
  2205  0263  3001               	movlw	1
  2206  0264  00AF               	movwf	sprintf@sp+1
  2207  0265  3013               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2208  0266  00C8               	movwf	??_dump_msg
  2209  0267  0848               	movf	??_dump_msg,w
  2210  0268  00B0               	movwf	sprintf@f
  2211  0269  0846               	movf	dump_msg@pmsg,w
  2212  026A  0084               	movwf	4
  2213  026B  1783               	bsf	3,7
  2214  026C  1C47               	btfss	dump_msg@pmsg+1,0
  2215  026D  1383               	bcf	3,7
  2216  026E  0800               	movf	0,w
  2217  026F  00C9               	movwf	??_dump_msg+1
  2218  0270  01CA               	clrf	??_dump_msg+2
  2219  0271  0849               	movf	??_dump_msg+1,w
  2220  0272  00B1               	movwf	?_sprintf+3
  2221  0273  084A               	movf	??_dump_msg+2,w
  2222  0274  00B2               	movwf	?_sprintf+4
  2223  0275  3001               	movlw	1
  2224  0276  0746               	addwf	dump_msg@pmsg,w
  2225  0277  00CB               	movwf	??_dump_msg+3
  2226  0278  0847               	movf	dump_msg@pmsg+1,w
  2227  0279  1803               	skipnc
  2228  027A  3E01               	addlw	1
  2229  027B  00CC               	movwf	??_dump_msg+4
  2230  027C  084B               	movf	??_dump_msg+3,w
  2231  027D  0084               	movwf	4
  2232  027E  1783               	bsf	3,7
  2233  027F  1C4C               	btfss	??_dump_msg+4,0
  2234  0280  1383               	bcf	3,7
  2235  0281  0800               	movf	0,w
  2236  0282  00B3               	movwf	?_sprintf+5
  2237  0283  0A84               	incf	4,f
  2238  0284  0800               	movf	0,w
  2239  0285  00B4               	movwf	?_sprintf+6
  2240  0286  3003               	movlw	3
  2241  0287  0746               	addwf	dump_msg@pmsg,w
  2242  0288  00CD               	movwf	??_dump_msg+5
  2243  0289  0847               	movf	dump_msg@pmsg+1,w
  2244  028A  1803               	skipnc
  2245  028B  3E01               	addlw	1
  2246  028C  00CE               	movwf	??_dump_msg+6
  2247  028D  084D               	movf	??_dump_msg+5,w
  2248  028E  0084               	movwf	4
  2249  028F  1783               	bsf	3,7
  2250  0290  1C4E               	btfss	??_dump_msg+6,0
  2251  0291  1383               	bcf	3,7
  2252  0292  0800               	movf	0,w
  2253  0293  00CF               	movwf	??_dump_msg+7
  2254  0294  01D0               	clrf	??_dump_msg+8
  2255  0295  084F               	movf	??_dump_msg+7,w
  2256  0296  00B5               	movwf	?_sprintf+7
  2257  0297  0850               	movf	??_dump_msg+8,w
  2258  0298  00B6               	movwf	?_sprintf+8
  2259  0299  3004               	movlw	4
  2260  029A  0746               	addwf	dump_msg@pmsg,w
  2261  029B  00D1               	movwf	??_dump_msg+9
  2262  029C  0847               	movf	dump_msg@pmsg+1,w
  2263  029D  1803               	skipnc
  2264  029E  3E01               	addlw	1
  2265  029F  00D2               	movwf	??_dump_msg+10
  2266  02A0  0851               	movf	??_dump_msg+9,w
  2267  02A1  0084               	movwf	4
  2268  02A2  1783               	bsf	3,7
  2269  02A3  1C52               	btfss	??_dump_msg+10,0
  2270  02A4  1383               	bcf	3,7
  2271  02A5  0800               	movf	0,w
  2272  02A6  00D3               	movwf	??_dump_msg+11
  2273  02A7  01D4               	clrf	??_dump_msg+12
  2274  02A8  0853               	movf	??_dump_msg+11,w
  2275  02A9  00B7               	movwf	?_sprintf+9
  2276  02AA  0854               	movf	??_dump_msg+12,w
  2277  02AB  00B8               	movwf	?_sprintf+10
  2278  02AC  3005               	movlw	5
  2279  02AD  0746               	addwf	dump_msg@pmsg,w
  2280  02AE  00D5               	movwf	??_dump_msg+13
  2281  02AF  0847               	movf	dump_msg@pmsg+1,w
  2282  02B0  1803               	skipnc
  2283  02B1  3E01               	addlw	1
  2284  02B2  00D6               	movwf	??_dump_msg+14
  2285  02B3  0855               	movf	??_dump_msg+13,w
  2286  02B4  0084               	movwf	4
  2287  02B5  1783               	bsf	3,7
  2288  02B6  1C56               	btfss	??_dump_msg+14,0
  2289  02B7  1383               	bcf	3,7
  2290  02B8  0800               	movf	0,w
  2291  02B9  00D7               	movwf	??_dump_msg+15
  2292  02BA  01D8               	clrf	??_dump_msg+16
  2293  02BB  0857               	movf	??_dump_msg+15,w
  2294  02BC  00B9               	movwf	?_sprintf+11
  2295  02BD  0858               	movf	??_dump_msg+16,w
  2296  02BE  00BA               	movwf	?_sprintf+12
  2297  02BF  3006               	movlw	6
  2298  02C0  0746               	addwf	dump_msg@pmsg,w
  2299  02C1  00D9               	movwf	??_dump_msg+17
  2300  02C2  0847               	movf	dump_msg@pmsg+1,w
  2301  02C3  1803               	skipnc
  2302  02C4  3E01               	addlw	1
  2303  02C5  00DA               	movwf	??_dump_msg+18
  2304  02C6  0859               	movf	??_dump_msg+17,w
  2305  02C7  0084               	movwf	4
  2306  02C8  1783               	bsf	3,7
  2307  02C9  1C5A               	btfss	??_dump_msg+18,0
  2308  02CA  1383               	bcf	3,7
  2309  02CB  0800               	movf	0,w
  2310  02CC  00DB               	movwf	??_dump_msg+19
  2311  02CD  01DC               	clrf	??_dump_msg+20
  2312  02CE  085B               	movf	??_dump_msg+19,w
  2313  02CF  00BB               	movwf	?_sprintf+13
  2314  02D0  085C               	movf	??_dump_msg+20,w
  2315  02D1  00BC               	movwf	?_sprintf+14
  2316  02D2  120A  118A  2188  120A  118A  	fcall	_sprintf
  2317                           
  2318                           ;msg.h: 78: {{ LCDGotoXY(0,1); int8_t count = LCDWriteString(""); for(int8_t i = count +
      +                           0; i < 16; i++) { (LCDByte(' ',1)); } };}; {{ LCDGotoXY(0,1); LCDWriteString(sdebug);};
      +                          };
  2319  02D7  1283               	bcf	3,5	;RP0=0, select bank0
  2320  02D8  1303               	bcf	3,6	;RP1=0, select bank0
  2321  02D9  01AC               	clrf	LCDGotoXY@y
  2322  02DA  0AAC               	incf	LCDGotoXY@y,f
  2323  02DB  3000               	movlw	0
  2324  02DC  120A  158A  25EE  120A  118A  	fcall	_LCDGotoXY
  2325  02E1  3039               	movlw	(low (((STR_15+4)-__stringbase)| (0+32768)))& (0+255)
  2326  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  2327  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  2328  02E4  00AC               	movwf	LCDWriteString@msg
  2329  02E5  3080               	movlw	128
  2330  02E6  00AD               	movwf	LCDWriteString@msg+1
  2331  02E7  120A  118A  2609  120A  118A  	fcall	_LCDWriteString
  2332  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  2333  02ED  1303               	bcf	3,6	;RP1=0, select bank0
  2334  02EE  00C8               	movwf	??_dump_msg
  2335  02EF  0848               	movf	??_dump_msg,w
  2336  02F0  00DD               	movwf	dump_msg@count
  2337  02F1  085D               	movf	dump_msg@count,w
  2338  02F2  00C8               	movwf	??_dump_msg
  2339  02F3  0848               	movf	??_dump_msg,w
  2340  02F4  00DE               	movwf	dump_msg@i
  2341  02F5  085E               	movf	dump_msg@i,w
  2342  02F6  3A80               	xorlw	128
  2343  02F7  3E70               	addlw	-144
  2344  02F8  1803               	btfsc	3,0
  2345  02F9  2B0D               	goto	l3313
  2346  02FA                     l3307:	
  2347  02FA  01A5               	clrf	LCDByte@isdata
  2348  02FB  0AA5               	incf	LCDByte@isdata,f
  2349  02FC  3020               	movlw	32
  2350  02FD  120A  118A  26C3  120A  118A  	fcall	_LCDByte
  2351  0302  3001               	movlw	1
  2352  0303  1283               	bcf	3,5	;RP0=0, select bank0
  2353  0304  1303               	bcf	3,6	;RP1=0, select bank0
  2354  0305  00C8               	movwf	??_dump_msg
  2355  0306  0848               	movf	??_dump_msg,w
  2356  0307  07DE               	addwf	dump_msg@i,f
  2357  0308  085E               	movf	dump_msg@i,w
  2358  0309  3A80               	xorlw	128
  2359  030A  3E70               	addlw	-144
  2360  030B  1C03               	skipc
  2361  030C  2AFA               	goto	l3307
  2362  030D                     l3313:	
  2363  030D  01AC               	clrf	LCDGotoXY@y
  2364  030E  0AAC               	incf	LCDGotoXY@y,f
  2365  030F  3000               	movlw	0
  2366  0310  120A  158A  25EE  120A  118A  	fcall	_LCDGotoXY
  2367  0315  30B0               	movlw	(low (_sdebug| (0+256)))& (0+255)
  2368  0316  1283               	bcf	3,5	;RP0=0, select bank0
  2369  0317  1303               	bcf	3,6	;RP1=0, select bank0
  2370  0318  00AC               	movwf	LCDWriteString@msg
  2371  0319  3001               	movlw	1
  2372  031A  00AD               	movwf	LCDWriteString@msg+1
  2373  031B  120A  118A  2609   	fcall	_LCDWriteString
  2374  031E  0008               	return
  2375  031F                     __end_of_dump_msg:	
  2376                           
  2377                           	psect	text8
  2378  0E6A                     __ptext8:	
  2379 ;; *************** function _create_HEART_BEAT_RSP_CMD *****************
  2380 ;; Defined at:
  2381 ;;		line 73 in file "heart_beat.h"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;  pconn           1    wreg     PTR struct .
  2384 ;;		 -> server_conn(5), 
  2385 ;;  pmsgi           1   32[BANK0 ] PTR struct .
  2386 ;;		 -> msg_rcv(23), 
  2387 ;;  pmsgo           1   33[BANK0 ] PTR struct .
  2388 ;;		 -> handle_HEART_BEAT_RQT_CMD@msgo(23), 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;  pconn           1   38[BANK0 ] PTR struct .
  2391 ;;		 -> server_conn(5), 
  2392 ;;  rqt             1   40[BANK0 ] struct .
  2393 ;;  rsp             1   39[BANK0 ] struct .
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2403 ;;      Params:         0       2       0       0       0
  2404 ;;      Locals:         0       3       0       0       0
  2405 ;;      Temps:          0       4       0       0       0
  2406 ;;      Totals:         0       9       0       0       0
  2407 ;;Total ram usage:        9 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    6
  2410 ;; This function calls:
  2411 ;;		_create_cmd
  2412 ;;		_extract_HEART_BEAT_RQT_CMD
  2413 ;; This function is called by:
  2414 ;;		_handle_HEART_BEAT_RQT_CMD
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           
  2419                           ;psect for function _create_HEART_BEAT_RSP_CMD
  2420  0E6A                     _create_HEART_BEAT_RSP_CMD:	
  2421                           
  2422                           ;incstack = 0
  2423 ;; hardware stack exceeded
  2424                           ; Regs used in _create_HEART_BEAT_RSP_CMD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2425                           ;create_HEART_BEAT_RSP_CMD@pconn stored from wreg
  2426  0E6A  1283               	bcf	3,5	;RP0=0, select bank0
  2427  0E6B  1303               	bcf	3,6	;RP1=0, select bank0
  2428  0E6C  00C6               	movwf	create_HEART_BEAT_RSP_CMD@pconn
  2429                           
  2430                           ;heart_beat.h: 75: HEART_BEAT_RSP_CMD_t rsp;
  2431                           ;heart_beat.h: 76: HEART_BEAT_RQT_CMD_t rqt;
  2432                           ;heart_beat.h: 78: extract_HEART_BEAT_RQT_CMD(pmsgi, &rqt);
  2433  0E6D  3048               	movlw	(low (create_HEART_BEAT_RSP_CMD@rqt| 0))& (0+255)
  2434  0E6E  00C2               	movwf	??_create_HEART_BEAT_RSP_CMD
  2435  0E6F  0842               	movf	??_create_HEART_BEAT_RSP_CMD,w
  2436  0E70  00A9               	movwf	extract_HEART_BEAT_RQT_CMD@prqt
  2437  0E71  0840               	movf	create_HEART_BEAT_RSP_CMD@pmsgi,w
  2438  0E72  120A  158A  24D1  120A  158A  	fcall	_extract_HEART_BEAT_RQT_CMD
  2439                           
  2440                           ;heart_beat.h: 79: rsp.id = rqt.id;
  2441  0E77  1283               	bcf	3,5	;RP0=0, select bank0
  2442  0E78  1303               	bcf	3,6	;RP1=0, select bank0
  2443  0E79  0848               	movf	create_HEART_BEAT_RSP_CMD@rqt,w
  2444  0E7A  00C2               	movwf	??_create_HEART_BEAT_RSP_CMD
  2445  0E7B  0842               	movf	??_create_HEART_BEAT_RSP_CMD,w
  2446  0E7C  00C7               	movwf	create_HEART_BEAT_RSP_CMD@rsp
  2447                           
  2448                           ;heart_beat.h: 81: create_cmd(pconn, HEART_BEAT_RSP, pmsgi->msgid, &rsp, 1, pmsgo);
  2449  0E7D  3003               	movlw	3
  2450  0E7E  00C2               	movwf	??_create_HEART_BEAT_RSP_CMD
  2451  0E7F  0842               	movf	??_create_HEART_BEAT_RSP_CMD,w
  2452  0E80  00B4               	movwf	create_cmd@cmd_id
  2453  0E81  0840               	movf	create_HEART_BEAT_RSP_CMD@pmsgi,w
  2454  0E82  3E05               	addlw	5
  2455  0E83  0084               	movwf	4
  2456  0E84  1783               	bsf	3,7	;select IRP bank2
  2457  0E85  0800               	movf	0,w
  2458  0E86  00C3               	movwf	??_create_HEART_BEAT_RSP_CMD+1
  2459  0E87  0843               	movf	??_create_HEART_BEAT_RSP_CMD+1,w
  2460  0E88  00B5               	movwf	create_cmd@msg_id
  2461  0E89  3047               	movlw	(low (create_HEART_BEAT_RSP_CMD@rsp| 0))& (0+255)
  2462  0E8A  00C4               	movwf	??_create_HEART_BEAT_RSP_CMD+2
  2463  0E8B  0844               	movf	??_create_HEART_BEAT_RSP_CMD+2,w
  2464  0E8C  00B6               	movwf	create_cmd@cmd_data
  2465  0E8D  01B7               	clrf	create_cmd@cmd_data_len
  2466  0E8E  0AB7               	incf	create_cmd@cmd_data_len,f
  2467  0E8F  0841               	movf	create_HEART_BEAT_RSP_CMD@pmsgo,w
  2468  0E90  00C5               	movwf	??_create_HEART_BEAT_RSP_CMD+3
  2469  0E91  0845               	movf	??_create_HEART_BEAT_RSP_CMD+3,w
  2470  0E92  00B8               	movwf	create_cmd@pmsg
  2471  0E93  0846               	movf	create_HEART_BEAT_RSP_CMD@pconn,w
  2472  0E94  120A  158A  25A4   	fcall	_create_cmd
  2473  0E97  0008               	return
  2474  0E98                     __end_of_create_HEART_BEAT_RSP_CMD:	
  2475                           
  2476                           	psect	text9
  2477  0CD1                     __ptext9:	
  2478 ;; *************** function _extract_HEART_BEAT_RQT_CMD *****************
  2479 ;; Defined at:
  2480 ;;		line 68 in file "heart_beat.h"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;  pmsg            1    wreg     PTR const struct .
  2483 ;;		 -> msg_rcv(23), 
  2484 ;;  prqt            1    9[BANK0 ] PTR struct .
  2485 ;;		 -> create_HEART_BEAT_RSP_CMD@rqt(1), 
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;  pmsg            1   10[BANK0 ] PTR const struct .
  2488 ;;		 -> msg_rcv(23), 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2498 ;;      Params:         0       1       0       0       0
  2499 ;;      Locals:         0       1       0       0       0
  2500 ;;      Temps:          0       0       0       0       0
  2501 ;;      Totals:         0       2       0       0       0
  2502 ;;Total ram usage:        2 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    4
  2505 ;; This function calls:
  2506 ;;		_memcpy
  2507 ;; This function is called by:
  2508 ;;		_create_HEART_BEAT_RSP_CMD
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           
  2513                           ;psect for function _extract_HEART_BEAT_RQT_CMD
  2514  0CD1                     _extract_HEART_BEAT_RQT_CMD:	
  2515                           
  2516                           ;incstack = 0
  2517                           ; Regs used in _extract_HEART_BEAT_RQT_CMD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2518                           ;extract_HEART_BEAT_RQT_CMD@pmsg stored from wreg
  2519  0CD1  1283               	bcf	3,5	;RP0=0, select bank0
  2520  0CD2  1303               	bcf	3,6	;RP1=0, select bank0
  2521  0CD3  00AA               	movwf	extract_HEART_BEAT_RQT_CMD@pmsg
  2522                           
  2523                           ;heart_beat.h: 70: memcpy((void *)prqt, (void *)pmsg->data, 1);
  2524  0CD4  082A               	movf	extract_HEART_BEAT_RQT_CMD@pmsg,w
  2525  0CD5  3E07               	addlw	7
  2526  0CD6  00A0               	movwf	memcpy@s1
  2527  0CD7  3001               	movlw	1
  2528  0CD8  00A1               	movwf	memcpy@s1+1
  2529  0CD9  3001               	movlw	1
  2530  0CDA  00A2               	movwf	memcpy@n
  2531  0CDB  3000               	movlw	0
  2532  0CDC  00A3               	movwf	memcpy@n+1
  2533  0CDD  0829               	movf	extract_HEART_BEAT_RQT_CMD@prqt,w
  2534  0CDE  120A  158A  2614   	fcall	_memcpy
  2535  0CE1  0008               	return
  2536  0CE2                     __end_of_extract_HEART_BEAT_RQT_CMD:	
  2537                           
  2538                           	psect	text10
  2539  0DA4                     __ptext10:	
  2540 ;; *************** function _create_cmd *****************
  2541 ;; Defined at:
  2542 ;;		line 57 in file "cmd.h"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;  pconn           1    wreg     PTR struct .
  2545 ;;		 -> server_conn(5), 
  2546 ;;  cmd_id          1   20[BANK0 ] unsigned char 
  2547 ;;  msg_id          1   21[BANK0 ] unsigned char 
  2548 ;;  cmd_data        1   22[BANK0 ] PTR const void 
  2549 ;;		 -> create_HEART_BEAT_RSP_CMD@rsp(1), 
  2550 ;;  cmd_data_len    1   23[BANK0 ] unsigned char 
  2551 ;;  pmsg            1   24[BANK0 ] PTR struct .
  2552 ;;		 -> handle_HEART_BEAT_RQT_CMD@msgo(23), send_REG_ID_RQT_CMD_and_wait@msg(23), 
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;  pconn           1   31[BANK0 ] PTR struct .
  2555 ;;		 -> server_conn(5), 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      void 
  2558 ;; Registers used:
  2559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2565 ;;      Params:         0       5       0       0       0
  2566 ;;      Locals:         0       1       0       0       0
  2567 ;;      Temps:          0       6       0       0       0
  2568 ;;      Totals:         0      12       0       0       0
  2569 ;;Total ram usage:       12 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    5
  2572 ;; This function calls:
  2573 ;;		_compose
  2574 ;; This function is called by:
  2575 ;;		_create_HEART_BEAT_RSP_CMD
  2576 ;;		_create_REG_ID_RQT_CMD
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           
  2581                           ;psect for function _create_cmd
  2582  0DA4                     _create_cmd:	
  2583                           
  2584                           ;incstack = 0
  2585 ;; hardware stack exceeded
  2586                           ; Regs used in _create_cmd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2587                           ;create_cmd@pconn stored from wreg
  2588  0DA4  1283               	bcf	3,5	;RP0=0, select bank0
  2589  0DA5  1303               	bcf	3,6	;RP1=0, select bank0
  2590  0DA6  00BF               	movwf	create_cmd@pconn
  2591                           
  2592                           ;cmd.h: 59: compose(pmsg,
  2593                           ;cmd.h: 60: pconn->from,
  2594                           ;cmd.h: 61: pconn->to,
  2595                           ;cmd.h: 62: msg_id,
  2596                           ;cmd.h: 63: cmd_id,
  2597                           ;cmd.h: 64: (uint8_t *)cmd_data,
  2598                           ;cmd.h: 65: cmd_data_len);
  2599  0DA7  083F               	movf	create_cmd@pconn,w
  2600  0DA8  0084               	movwf	4
  2601  0DA9  1383               	bcf	3,7	;select IRP bank0
  2602  0DAA  0800               	movf	0,w
  2603  0DAB  00B9               	movwf	??_create_cmd
  2604  0DAC  0839               	movf	??_create_cmd,w
  2605  0DAD  00A9               	movwf	compose@from
  2606  0DAE  0A3F               	incf	create_cmd@pconn,w
  2607  0DAF  0084               	movwf	4
  2608  0DB0  0800               	movf	0,w
  2609  0DB1  00BA               	movwf	??_create_cmd+1
  2610  0DB2  083A               	movf	??_create_cmd+1,w
  2611  0DB3  00AA               	movwf	compose@to
  2612  0DB4  0835               	movf	create_cmd@msg_id,w
  2613  0DB5  00BB               	movwf	??_create_cmd+2
  2614  0DB6  083B               	movf	??_create_cmd+2,w
  2615  0DB7  00AB               	movwf	compose@msgid
  2616  0DB8  0834               	movf	create_cmd@cmd_id,w
  2617  0DB9  00BC               	movwf	??_create_cmd+3
  2618  0DBA  083C               	movf	??_create_cmd+3,w
  2619  0DBB  00AC               	movwf	compose@cmd
  2620  0DBC  0836               	movf	create_cmd@cmd_data,w
  2621  0DBD  00BD               	movwf	??_create_cmd+4
  2622  0DBE  083D               	movf	??_create_cmd+4,w
  2623  0DBF  00AD               	movwf	compose@data
  2624  0DC0  0837               	movf	create_cmd@cmd_data_len,w
  2625  0DC1  00BE               	movwf	??_create_cmd+5
  2626  0DC2  083E               	movf	??_create_cmd+5,w
  2627  0DC3  00AE               	movwf	compose@datalen
  2628  0DC4  0838               	movf	create_cmd@pmsg,w
  2629  0DC5  120A  118A  276E   	fcall	_compose
  2630  0DC8  0008               	return
  2631  0DC9                     __end_of_create_cmd:	
  2632                           
  2633                           	psect	text11
  2634  076E                     __ptext11:	
  2635 ;; *************** function _compose *****************
  2636 ;; Defined at:
  2637 ;;		line 57 in file "msg.h"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  pmsg            1    wreg     PTR struct .
  2640 ;;		 -> handle_HEART_BEAT_RQT_CMD@msgo(23), send_REG_ID_RQT_CMD_and_wait@msg(23), 
  2641 ;;  from            1    9[BANK0 ] unsigned char 
  2642 ;;  to              1   10[BANK0 ] unsigned char 
  2643 ;;  msgid           1   11[BANK0 ] unsigned char 
  2644 ;;  cmd             1   12[BANK0 ] unsigned char 
  2645 ;;  data            1   13[BANK0 ] PTR unsigned char 
  2646 ;;		 -> create_HEART_BEAT_RSP_CMD@rsp(1), 
  2647 ;;  datalen         1   14[BANK0 ] unsigned char 
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;  pmsg            1   19[BANK0 ] PTR struct .
  2650 ;;		 -> handle_HEART_BEAT_RQT_CMD@msgo(23), send_REG_ID_RQT_CMD_and_wait@msg(23), 
  2651 ;;  len             2   17[BANK0 ] unsigned int 
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  1    wreg      void 
  2654 ;; Registers used:
  2655 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2661 ;;      Params:         0       6       0       0       0
  2662 ;;      Locals:         0       3       0       0       0
  2663 ;;      Temps:          0       2       0       0       0
  2664 ;;      Totals:         0      11       0       0       0
  2665 ;;Total ram usage:       11 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; Hardware stack levels required when called:    4
  2668 ;; This function calls:
  2669 ;;		_crc_calculate
  2670 ;;		_memcpy
  2671 ;; This function is called by:
  2672 ;;		_create_cmd
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676                           
  2677                           ;psect for function _compose
  2678  076E                     _compose:	
  2679                           
  2680                           ;incstack = 0
  2681 ;; hardware stack exceeded
  2682                           ; Regs used in _compose: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2683                           ;compose@pmsg stored from wreg
  2684  076E  1283               	bcf	3,5	;RP0=0, select bank0
  2685  076F  1303               	bcf	3,6	;RP1=0, select bank0
  2686  0770  00B3               	movwf	compose@pmsg
  2687                           
  2688                           ;msg.h: 65: register size_t len = datalen;
  2689  0771  082E               	movf	compose@datalen,w
  2690  0772  00AF               	movwf	??_compose
  2691  0773  01B0               	clrf	??_compose+1
  2692  0774  082F               	movf	??_compose,w
  2693  0775  00B1               	movwf	compose@len
  2694  0776  0830               	movf	??_compose+1,w
  2695  0777  00B2               	movwf	compose@len+1
  2696                           
  2697                           ;msg.h: 66: pmsg->from = from;
  2698  0778  0829               	movf	compose@from,w
  2699  0779  00AF               	movwf	??_compose
  2700  077A  0833               	movf	compose@pmsg,w
  2701  077B  3E03               	addlw	3
  2702  077C  0084               	movwf	4
  2703  077D  082F               	movf	??_compose,w
  2704  077E  1383               	bcf	3,7	;select IRP bank0
  2705  077F  0080               	movwf	0
  2706                           
  2707                           ;msg.h: 67: pmsg->to = to;
  2708  0780  082A               	movf	compose@to,w
  2709  0781  00AF               	movwf	??_compose
  2710  0782  0833               	movf	compose@pmsg,w
  2711  0783  3E04               	addlw	4
  2712  0784  0084               	movwf	4
  2713  0785  082F               	movf	??_compose,w
  2714  0786  0080               	movwf	0
  2715                           
  2716                           ;msg.h: 68: pmsg->msgid = msgid;
  2717  0787  082B               	movf	compose@msgid,w
  2718  0788  00AF               	movwf	??_compose
  2719  0789  0833               	movf	compose@pmsg,w
  2720  078A  3E05               	addlw	5
  2721  078B  0084               	movwf	4
  2722  078C  082F               	movf	??_compose,w
  2723  078D  0080               	movwf	0
  2724                           
  2725                           ;msg.h: 69: pmsg->cmd = cmd;
  2726  078E  082C               	movf	compose@cmd,w
  2727  078F  00AF               	movwf	??_compose
  2728  0790  0833               	movf	compose@pmsg,w
  2729  0791  3E06               	addlw	6
  2730  0792  0084               	movwf	4
  2731  0793  082F               	movf	??_compose,w
  2732  0794  0080               	movwf	0
  2733                           
  2734                           ;msg.h: 70: memcpy((void *)pmsg->data, (void *)data, len);
  2735  0795  082D               	movf	compose@data,w
  2736  0796  00A0               	movwf	memcpy@s1
  2737  0797  3000               	movlw	0
  2738  0798  00A1               	movwf	memcpy@s1+1
  2739  0799  0832               	movf	compose@len+1,w
  2740  079A  00A3               	movwf	memcpy@n+1
  2741  079B  0831               	movf	compose@len,w
  2742  079C  00A2               	movwf	memcpy@n
  2743  079D  0833               	movf	compose@pmsg,w
  2744  079E  3E07               	addlw	7
  2745  079F  120A  158A  2614  120A  118A  	fcall	_memcpy
  2746                           
  2747                           ;msg.h: 71: pmsg->msglen = datalen + 7;
  2748  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  2749  07A5  1303               	bcf	3,6	;RP1=0, select bank0
  2750  07A6  082E               	movf	compose@datalen,w
  2751  07A7  3E07               	addlw	7
  2752  07A8  00AF               	movwf	??_compose
  2753  07A9  0833               	movf	compose@pmsg,w
  2754  07AA  0084               	movwf	4
  2755  07AB  082F               	movf	??_compose,w
  2756  07AC  1383               	bcf	3,7	;select IRP bank0
  2757  07AD  0080               	movwf	0
  2758                           
  2759                           ;msg.h: 73: pmsg->crc = crc_calculate(pmsg);
  2760  07AE  0833               	movf	compose@pmsg,w
  2761  07AF  00A0               	movwf	crc_calculate@pmsg
  2762  07B0  3000               	movlw	0
  2763  07B1  00A1               	movwf	crc_calculate@pmsg+1
  2764  07B2  120A  118A  23BC   	fcall	_crc_calculate
  2765  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  2766  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  2767  07B7  0A33               	incf	compose@pmsg,w
  2768  07B8  0084               	movwf	4
  2769  07B9  0820               	movf	?_crc_calculate,w
  2770  07BA  1383               	bcf	3,7	;select IRP bank0
  2771  07BB  0080               	movwf	0
  2772  07BC  0A84               	incf	4,f
  2773  07BD  0821               	movf	?_crc_calculate+1,w
  2774  07BE  0080               	movwf	0
  2775  07BF  0008               	return
  2776  07C0                     __end_of_compose:	
  2777                           
  2778                           	psect	text12
  2779  0E14                     __ptext12:	
  2780 ;; *************** function _memcpy *****************
  2781 ;; Defined at:
  2782 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  d1              1    wreg     PTR void 
  2785 ;;		 -> handle_HEART_BEAT_RQT_CMD@msgo(23), create_HEART_BEAT_RSP_CMD@rqt(1), send_REG_ID_RQT_CMD_and_wait@msg(23), 
  2786 ;;  s1              2    0[BANK0 ] PTR const void 
  2787 ;;		 -> msg_rcv.data(16), create_HEART_BEAT_RSP_CMD@rsp(1), msg_rcv(23), 
  2788 ;;  n               2    2[BANK0 ] unsigned int 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  d1              1    8[BANK0 ] PTR void 
  2791 ;;		 -> handle_HEART_BEAT_RQT_CMD@msgo(23), create_HEART_BEAT_RSP_CMD@rqt(1), send_REG_ID_RQT_CMD_and_wait@msg(23), 
  2792 ;;  s               2    5[BANK0 ] PTR const unsigned char 
  2793 ;;		 -> msg_rcv.data(16), create_HEART_BEAT_RSP_CMD@rsp(1), msg_rcv(23), 
  2794 ;;  d               1    7[BANK0 ] PTR unsigned char 
  2795 ;;		 -> handle_HEART_BEAT_RQT_CMD@msgo(23), create_HEART_BEAT_RSP_CMD@rqt(1), send_REG_ID_RQT_CMD_and_wait@msg(23), 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  1    wreg      PTR void 
  2798 ;; Registers used:
  2799 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2805 ;;      Params:         0       4       0       0       0
  2806 ;;      Locals:         0       4       0       0       0
  2807 ;;      Temps:          0       1       0       0       0
  2808 ;;      Totals:         0       9       0       0       0
  2809 ;;Total ram usage:        9 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; Hardware stack levels required when called:    3
  2812 ;; This function calls:
  2813 ;;		Nothing
  2814 ;; This function is called by:
  2815 ;;		_compose
  2816 ;;		_extract_HEART_BEAT_RQT_CMD
  2817 ;;		_extract_REG_ID_RSP_CMD
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           
  2822                           ;psect for function _memcpy
  2823  0E14                     _memcpy:	
  2824                           
  2825                           ;incstack = 0
  2826                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  2827                           ;memcpy@d1 stored from wreg
  2828  0E14  1283               	bcf	3,5	;RP0=0, select bank0
  2829  0E15  1303               	bcf	3,6	;RP1=0, select bank0
  2830  0E16  00A8               	movwf	memcpy@d1
  2831  0E17  0820               	movf	memcpy@s1,w
  2832  0E18  00A5               	movwf	memcpy@s
  2833  0E19  0821               	movf	memcpy@s1+1,w
  2834  0E1A  00A6               	movwf	memcpy@s+1
  2835  0E1B  0828               	movf	memcpy@d1,w
  2836  0E1C  00A4               	movwf	??_memcpy
  2837  0E1D  0824               	movf	??_memcpy,w
  2838  0E1E  00A7               	movwf	memcpy@d
  2839  0E1F                     l3019:	
  2840  0E1F  3001               	movlw	1
  2841  0E20  02A2               	subwf	memcpy@n,f
  2842  0E21  3000               	movlw	0
  2843  0E22  1C03               	skipc
  2844  0E23  03A3               	decf	memcpy@n+1,f
  2845  0E24  02A3               	subwf	memcpy@n+1,f
  2846  0E25  0A22               	incf	memcpy@n,w
  2847  0E26  1903               	btfsc	3,2
  2848  0E27  0A23               	incf	memcpy@n+1,w
  2849  0E28  1903               	btfsc	3,2
  2850  0E29  0008               	return
  2851  0E2A  0825               	movf	memcpy@s,w
  2852  0E2B  0084               	movwf	4
  2853  0E2C  1783               	bsf	3,7
  2854  0E2D  1C26               	btfss	memcpy@s+1,0
  2855  0E2E  1383               	bcf	3,7
  2856  0E2F  0800               	movf	0,w
  2857  0E30  00A4               	movwf	??_memcpy
  2858  0E31  0827               	movf	memcpy@d,w
  2859  0E32  0084               	movwf	4
  2860  0E33  0824               	movf	??_memcpy,w
  2861  0E34  1383               	bcf	3,7	;select IRP bank0
  2862  0E35  0080               	movwf	0
  2863  0E36  3001               	movlw	1
  2864  0E37  07A5               	addwf	memcpy@s,f
  2865  0E38  1803               	skipnc
  2866  0E39  0AA6               	incf	memcpy@s+1,f
  2867  0E3A  3001               	movlw	1
  2868  0E3B  00A4               	movwf	??_memcpy
  2869  0E3C  0824               	movf	??_memcpy,w
  2870  0E3D  07A7               	addwf	memcpy@d,f
  2871  0E3E  2E1F               	goto	l3019
  2872  0E3F                     __end_of_memcpy:	
  2873                           ;	Return value of _memcpy is never used
  2874                           
  2875                           
  2876                           	psect	text13
  2877  03BC                     __ptext13:	
  2878 ;; *************** function _crc_calculate *****************
  2879 ;; Defined at:
  2880 ;;		line 37 in file "msg.h"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;  pmsg            2    0[BANK0 ] PTR struct .
  2883 ;;		 -> handle_HEART_BEAT_RQT_CMD@msgo(23), send_REG_ID_RQT_CMD_and_wait@msg(23), msg_rcv(23), 
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;  i               1    8[BANK0 ] unsigned char 
  2886 ;;  crc             2    6[BANK0 ] unsigned int 
  2887 ;; Return value:  Size  Location     Type
  2888 ;;                  2    0[BANK0 ] unsigned int 
  2889 ;; Registers used:
  2890 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2896 ;;      Params:         0       2       0       0       0
  2897 ;;      Locals:         0       3       0       0       0
  2898 ;;      Temps:          0       4       0       0       0
  2899 ;;      Totals:         0       9       0       0       0
  2900 ;;Total ram usage:        9 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    3
  2903 ;; This function calls:
  2904 ;;		Nothing
  2905 ;; This function is called by:
  2906 ;;		_compose
  2907 ;;		_crc_verify
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           
  2912                           ;psect for function _crc_calculate
  2913  03BC                     _crc_calculate:	
  2914                           
  2915                           ;msg.h: 39: uint16_t crc;
  2916                           ;msg.h: 40: crc = (uint8_t)pmsg->msglen;
  2917                           
  2918                           ;incstack = 0
  2919 ;; hardware stack exceeded
  2920                           ; Regs used in _crc_calculate: [wreg-fsr0h+status,2+status,0]
  2921  03BC  1283               	bcf	3,5	;RP0=0, select bank0
  2922  03BD  1303               	bcf	3,6	;RP1=0, select bank0
  2923  03BE  0820               	movf	crc_calculate@pmsg,w
  2924  03BF  0084               	movwf	4
  2925  03C0  1783               	bsf	3,7
  2926  03C1  1C21               	btfss	crc_calculate@pmsg+1,0
  2927  03C2  1383               	bcf	3,7
  2928  03C3  0800               	movf	0,w
  2929  03C4  00A2               	movwf	??_crc_calculate
  2930  03C5  01A3               	clrf	??_crc_calculate+1
  2931  03C6  0822               	movf	??_crc_calculate,w
  2932  03C7  00A6               	movwf	crc_calculate@crc
  2933  03C8  0823               	movf	??_crc_calculate+1,w
  2934  03C9  00A7               	movwf	crc_calculate@crc+1
  2935                           
  2936                           ;msg.h: 41: crc += (uint8_t)pmsg->from;
  2937  03CA  3003               	movlw	3
  2938  03CB  0720               	addwf	crc_calculate@pmsg,w
  2939  03CC  00A2               	movwf	??_crc_calculate
  2940  03CD  0821               	movf	crc_calculate@pmsg+1,w
  2941  03CE  1803               	skipnc
  2942  03CF  3E01               	addlw	1
  2943  03D0  00A3               	movwf	??_crc_calculate+1
  2944  03D1  0822               	movf	??_crc_calculate,w
  2945  03D2  0084               	movwf	4
  2946  03D3  1783               	bsf	3,7
  2947  03D4  1C23               	btfss	??_crc_calculate+1,0
  2948  03D5  1383               	bcf	3,7
  2949  03D6  0800               	movf	0,w
  2950  03D7  00A4               	movwf	??_crc_calculate+2
  2951  03D8  01A5               	clrf	??_crc_calculate+3
  2952  03D9  0824               	movf	??_crc_calculate+2,w
  2953  03DA  07A6               	addwf	crc_calculate@crc,f
  2954  03DB  1803               	skipnc
  2955  03DC  0AA7               	incf	crc_calculate@crc+1,f
  2956  03DD  0825               	movf	??_crc_calculate+3,w
  2957  03DE  07A7               	addwf	crc_calculate@crc+1,f
  2958                           
  2959                           ;msg.h: 42: crc += (uint8_t)pmsg->to;
  2960  03DF  3004               	movlw	4
  2961  03E0  0720               	addwf	crc_calculate@pmsg,w
  2962  03E1  00A2               	movwf	??_crc_calculate
  2963  03E2  0821               	movf	crc_calculate@pmsg+1,w
  2964  03E3  1803               	skipnc
  2965  03E4  3E01               	addlw	1
  2966  03E5  00A3               	movwf	??_crc_calculate+1
  2967  03E6  0822               	movf	??_crc_calculate,w
  2968  03E7  0084               	movwf	4
  2969  03E8  1783               	bsf	3,7
  2970  03E9  1C23               	btfss	??_crc_calculate+1,0
  2971  03EA  1383               	bcf	3,7
  2972  03EB  0800               	movf	0,w
  2973  03EC  00A4               	movwf	??_crc_calculate+2
  2974  03ED  01A5               	clrf	??_crc_calculate+3
  2975  03EE  0824               	movf	??_crc_calculate+2,w
  2976  03EF  07A6               	addwf	crc_calculate@crc,f
  2977  03F0  1803               	skipnc
  2978  03F1  0AA7               	incf	crc_calculate@crc+1,f
  2979  03F2  0825               	movf	??_crc_calculate+3,w
  2980  03F3  07A7               	addwf	crc_calculate@crc+1,f
  2981                           
  2982                           ;msg.h: 43: crc += (uint8_t)pmsg->msgid;
  2983  03F4  3005               	movlw	5
  2984  03F5  0720               	addwf	crc_calculate@pmsg,w
  2985  03F6  00A2               	movwf	??_crc_calculate
  2986  03F7  0821               	movf	crc_calculate@pmsg+1,w
  2987  03F8  1803               	skipnc
  2988  03F9  3E01               	addlw	1
  2989  03FA  00A3               	movwf	??_crc_calculate+1
  2990  03FB  0822               	movf	??_crc_calculate,w
  2991  03FC  0084               	movwf	4
  2992  03FD  1783               	bsf	3,7
  2993  03FE  1C23               	btfss	??_crc_calculate+1,0
  2994  03FF  1383               	bcf	3,7
  2995  0400  0800               	movf	0,w
  2996  0401  00A4               	movwf	??_crc_calculate+2
  2997  0402  01A5               	clrf	??_crc_calculate+3
  2998  0403  0824               	movf	??_crc_calculate+2,w
  2999  0404  07A6               	addwf	crc_calculate@crc,f
  3000  0405  1803               	skipnc
  3001  0406  0AA7               	incf	crc_calculate@crc+1,f
  3002  0407  0825               	movf	??_crc_calculate+3,w
  3003  0408  07A7               	addwf	crc_calculate@crc+1,f
  3004                           
  3005                           ;msg.h: 44: crc += (uint8_t)pmsg->cmd;
  3006  0409  3006               	movlw	6
  3007  040A  0720               	addwf	crc_calculate@pmsg,w
  3008  040B  00A2               	movwf	??_crc_calculate
  3009  040C  0821               	movf	crc_calculate@pmsg+1,w
  3010  040D  1803               	skipnc
  3011  040E  3E01               	addlw	1
  3012  040F  00A3               	movwf	??_crc_calculate+1
  3013  0410  0822               	movf	??_crc_calculate,w
  3014  0411  0084               	movwf	4
  3015  0412  1783               	bsf	3,7
  3016  0413  1C23               	btfss	??_crc_calculate+1,0
  3017  0414  1383               	bcf	3,7
  3018  0415  0800               	movf	0,w
  3019  0416  00A4               	movwf	??_crc_calculate+2
  3020  0417  01A5               	clrf	??_crc_calculate+3
  3021  0418  0824               	movf	??_crc_calculate+2,w
  3022  0419  07A6               	addwf	crc_calculate@crc,f
  3023  041A  1803               	skipnc
  3024  041B  0AA7               	incf	crc_calculate@crc+1,f
  3025  041C  0825               	movf	??_crc_calculate+3,w
  3026  041D  07A7               	addwf	crc_calculate@crc+1,f
  3027                           
  3028                           ;msg.h: 46: for(uint8_t i = 0; i < pmsg->msglen - 7; i++)
  3029  041E  01A8               	clrf	crc_calculate@i
  3030  041F                     l3003:	
  3031  041F  0820               	movf	crc_calculate@pmsg,w
  3032  0420  0084               	movwf	4
  3033  0421  1783               	bsf	3,7
  3034  0422  1C21               	btfss	crc_calculate@pmsg+1,0
  3035  0423  1383               	bcf	3,7
  3036  0424  0800               	movf	0,w
  3037  0425  3EF9               	addlw	249
  3038  0426  00A2               	movwf	??_crc_calculate
  3039  0427  30FF               	movlw	255
  3040  0428  1803               	skipnc
  3041  0429  3000               	movlw	0
  3042  042A  00A3               	movwf	??_crc_calculate+1
  3043  042B  0823               	movf	??_crc_calculate+1,w
  3044  042C  3A80               	xorlw	128
  3045  042D  3C80               	sublw	128
  3046  042E  1D03               	skipz
  3047  042F  2C32               	goto	u3065
  3048  0430  0822               	movf	??_crc_calculate,w
  3049  0431  0228               	subwf	crc_calculate@i,w
  3050  0432                     u3065:	
  3051  0432  1803               	btfsc	3,0
  3052  0433  2C51               	goto	l3005
  3053                           
  3054                           ;msg.h: 47: {
  3055                           ;msg.h: 48: crc += (uint8_t)pmsg->data[i];
  3056  0434  1283               	bcf	3,5	;RP0=0, select bank0
  3057  0435  1303               	bcf	3,6	;RP1=0, select bank0
  3058  0436  0828               	movf	crc_calculate@i,w
  3059  0437  3E07               	addlw	7
  3060  0438  0720               	addwf	crc_calculate@pmsg,w
  3061  0439  00A2               	movwf	??_crc_calculate
  3062  043A  0821               	movf	crc_calculate@pmsg+1,w
  3063  043B  1803               	skipnc
  3064  043C  3E01               	addlw	1
  3065  043D  00A3               	movwf	??_crc_calculate+1
  3066  043E  0822               	movf	??_crc_calculate,w
  3067  043F  0084               	movwf	4
  3068  0440  1783               	bsf	3,7
  3069  0441  1C23               	btfss	??_crc_calculate+1,0
  3070  0442  1383               	bcf	3,7
  3071  0443  0800               	movf	0,w
  3072  0444  00A4               	movwf	??_crc_calculate+2
  3073  0445  01A5               	clrf	??_crc_calculate+3
  3074  0446  0824               	movf	??_crc_calculate+2,w
  3075  0447  07A6               	addwf	crc_calculate@crc,f
  3076  0448  1803               	skipnc
  3077  0449  0AA7               	incf	crc_calculate@crc+1,f
  3078  044A  0825               	movf	??_crc_calculate+3,w
  3079  044B  07A7               	addwf	crc_calculate@crc+1,f
  3080  044C  3001               	movlw	1
  3081  044D  00A2               	movwf	??_crc_calculate
  3082  044E  0822               	movf	??_crc_calculate,w
  3083  044F  07A8               	addwf	crc_calculate@i,f
  3084  0450  2C1F               	goto	l3003
  3085  0451                     l3005:	
  3086                           
  3087                           ;msg.h: 49: }
  3088                           ;msg.h: 51: return crc;
  3089  0451  1283               	bcf	3,5	;RP0=0, select bank0
  3090  0452  1303               	bcf	3,6	;RP1=0, select bank0
  3091  0453  0827               	movf	crc_calculate@crc+1,w
  3092  0454  00A1               	movwf	?_crc_calculate+1
  3093  0455  0826               	movf	crc_calculate@crc,w
  3094  0456  00A0               	movwf	?_crc_calculate
  3095  0457  0008               	return
  3096  0458                     __end_of_crc_calculate:	
  3097                           
  3098                           	psect	text14
  3099  0F67                     __ptext14:	
  3100 ;; *************** function _get_msg *****************
  3101 ;; Defined at:
  3102 ;;		line 102 in file "msg.h"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  pmsg            1    wreg     PTR struct .
  3105 ;;		 -> msg_rcv(23), 
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;  pmsg            1   12[BANK0 ] PTR struct .
  3108 ;;		 -> msg_rcv(23), 
  3109 ;;  temp            1   15[BANK0 ] unsigned char 
  3110 ;;  end_index       1   14[BANK0 ] unsigned char 
  3111 ;;  start_index     1   13[BANK0 ] unsigned char 
  3112 ;;  i               1   11[BANK0 ] unsigned char 
  3113 ;;  pstr            1   10[BANK0 ] PTR unsigned char 
  3114 ;;		 -> msg_rcv(23), 
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  1    wreg      unsigned char 
  3117 ;; Registers used:
  3118 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3119 ;; Tracked objects:
  3120 ;;		On entry : 0/0
  3121 ;;		On exit  : 0/0
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3124 ;;      Params:         0       0       0       0       0
  3125 ;;      Locals:         0       6       0       0       0
  3126 ;;      Temps:          0       2       0       0       0
  3127 ;;      Totals:         0       8       0       0       0
  3128 ;;Total ram usage:        8 bytes
  3129 ;; Hardware stack levels used:    1
  3130 ;; Hardware stack levels required when called:    5
  3131 ;; This function calls:
  3132 ;;		_get_distance
  3133 ;;		_get_msg_index
  3134 ;;		_get_next_index
  3135 ;; This function is called by:
  3136 ;;		_handle_received_cmds
  3137 ;;		_send_REG_ID_RQT_CMD_and_wait
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           
  3142                           ;psect for function _get_msg
  3143  0F67                     _get_msg:	
  3144                           
  3145                           ;incstack = 0
  3146                           ; Regs used in _get_msg: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3147                           ;get_msg@pmsg stored from wreg
  3148  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  3149  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  3150  0F69  00AC               	movwf	get_msg@pmsg
  3151                           
  3152                           ;msg.h: 104: uint8_t *pstr = (uint8_t *)pmsg;
  3153  0F6A  082C               	movf	get_msg@pmsg,w
  3154  0F6B  00A8               	movwf	??_get_msg
  3155  0F6C  0828               	movf	??_get_msg,w
  3156  0F6D  00AA               	movwf	get_msg@pstr
  3157                           
  3158                           ;msg.h: 105: uint8_t start_index, end_index;
  3159                           ;msg.h: 106: uint8_t i = 0;
  3160  0F6E  01AB               	clrf	get_msg@i
  3161                           
  3162                           ;msg.h: 107: uint8_t temp;
  3163                           ;msg.h: 108: if(get_msg_index(&start_index, &end_index) == 1)
  3164  0F6F  302E               	movlw	(low (get_msg@end_index| 0))& (0+255)
  3165  0F70  00A8               	movwf	??_get_msg
  3166  0F71  0828               	movf	??_get_msg,w
  3167  0F72  00A3               	movwf	get_msg_index@end_index
  3168  0F73  302D               	movlw	(low (get_msg@start_index| 0))& (0+255)
  3169  0F74  120A  118A  2045  120A  158A  	fcall	_get_msg_index
  3170  0F79  3A01               	xorlw	1
  3171  0F7A  1D03               	skipz
  3172  0F7B  2FB1               	goto	l2401
  3173                           
  3174                           ;msg.h: 109: {
  3175                           ;msg.h: 110: temp = start_index;
  3176  0F7C  1283               	bcf	3,5	;RP0=0, select bank0
  3177  0F7D  1303               	bcf	3,6	;RP1=0, select bank0
  3178  0F7E  082D               	movf	get_msg@start_index,w
  3179  0F7F                     L2:	
  3180  0F7F  00A8               	movwf	??_get_msg
  3181  0F80  0828               	movf	??_get_msg,w
  3182  0F81  00AF               	movwf	get_msg@temp
  3183                           
  3184                           ;msg.h: 112: {
  3185                           ;msg.h: 113: pstr[i++] = buffer_rcv[temp];
  3186                           
  3187                           ;msg.h: 111: while(1)
  3188  0F82  082F               	movf	get_msg@temp,w
  3189  0F83  3E90               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3190  0F84  0084               	movwf	4
  3191  0F85  1783               	bsf	3,7	;select IRP bank3
  3192  0F86  0800               	movf	0,w
  3193  0F87  00A8               	movwf	??_get_msg
  3194  0F88  082B               	movf	get_msg@i,w
  3195  0F89  072A               	addwf	get_msg@pstr,w
  3196  0F8A  00A9               	movwf	??_get_msg+1
  3197  0F8B  0829               	movf	??_get_msg+1,w
  3198  0F8C  0084               	movwf	4
  3199  0F8D  0828               	movf	??_get_msg,w
  3200  0F8E  0080               	movwf	0
  3201  0F8F  3001               	movlw	1
  3202  0F90  00A8               	movwf	??_get_msg
  3203  0F91  0828               	movf	??_get_msg,w
  3204  0F92  07AB               	addwf	get_msg@i,f
  3205                           
  3206                           ;msg.h: 114: buffer_rcv[temp] = 0;
  3207  0F93  082F               	movf	get_msg@temp,w
  3208  0F94  3E90               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3209  0F95  0084               	movwf	4
  3210  0F96  0180               	clrf	0
  3211                           
  3212                           ;msg.h: 115: if(get_distance(temp, end_index) == 0)
  3213  0F97  082E               	movf	get_msg@end_index,w
  3214  0F98  00A8               	movwf	??_get_msg
  3215  0F99  0828               	movf	??_get_msg,w
  3216  0F9A  00A0               	movwf	get_distance@end_index
  3217  0F9B  082F               	movf	get_msg@temp,w
  3218  0F9C  120A  158A  24B1  120A  158A  	fcall	_get_distance
  3219  0FA1  3A00               	xorlw	0
  3220  0FA2  1903               	btfsc	3,2
  3221  0FA3  2FAF               	goto	l2397
  3222                           
  3223                           ;msg.h: 118: }
  3224                           ;msg.h: 119: temp = get_next_index(temp);
  3225                           
  3226                           ;msg.h: 116: {
  3227                           ;msg.h: 117: break;
  3228  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  3229  0FA5  1303               	bcf	3,6	;RP1=0, select bank0
  3230  0FA6  082F               	movf	get_msg@temp,w
  3231  0FA7  120A  158A  2496  120A  158A  	fcall	_get_next_index
  3232  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  3233  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  3234  0FAE  2F7F               	goto	L2
  3235  0FAF                     l2397:	
  3236                           
  3237                           ;msg.h: 120: }
  3238                           ;msg.h: 122: return 1;
  3239  0FAF  3001               	movlw	1
  3240  0FB0  0008               	return
  3241  0FB1                     l2401:	
  3242                           
  3243                           ;msg.h: 123: }
  3244                           ;msg.h: 125: return 0;
  3245  0FB1  3000               	movlw	0
  3246  0FB2  0008               	return
  3247  0FB3                     __end_of_get_msg:	
  3248                           
  3249                           	psect	text15
  3250  0045                     __ptext15:	
  3251 ;; *************** function _get_msg_index *****************
  3252 ;; Defined at:
  3253 ;;		line 83 in file "circle_buffer.h"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;  start_index     1    wreg     PTR unsigned char 
  3256 ;;		 -> get_msg@start_index(1), 
  3257 ;;  end_index       1    3[BANK0 ] PTR unsigned char 
  3258 ;;		 -> get_msg@end_index(1), 
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;  start_index     1    6[BANK0 ] PTR unsigned char 
  3261 ;;		 -> get_msg@start_index(1), 
  3262 ;;  i               1    7[BANK0 ] unsigned char 
  3263 ;; Return value:  Size  Location     Type
  3264 ;;                  1    wreg      unsigned char 
  3265 ;; Registers used:
  3266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3272 ;;      Params:         0       1       0       0       0
  3273 ;;      Locals:         0       2       0       0       0
  3274 ;;      Temps:          0       2       0       0       0
  3275 ;;      Totals:         0       5       0       0       0
  3276 ;;Total ram usage:        5 bytes
  3277 ;; Hardware stack levels used:    1
  3278 ;; Hardware stack levels required when called:    4
  3279 ;; This function calls:
  3280 ;;		_get_distance
  3281 ;;		_get_minus_index
  3282 ;;		_get_next_index
  3283 ;;		_get_plus_index
  3284 ;; This function is called by:
  3285 ;;		_get_msg
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           
  3290                           ;psect for function _get_msg_index
  3291  0045                     _get_msg_index:	
  3292                           
  3293                           ;incstack = 0
  3294                           ; Regs used in _get_msg_index: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3295                           ;get_msg_index@start_index stored from wreg
  3296  0045  1283               	bcf	3,5	;RP0=0, select bank0
  3297  0046  1303               	bcf	3,6	;RP1=0, select bank0
  3298  0047  00A6               	movwf	get_msg_index@start_index
  3299                           
  3300                           ;circle_buffer.h: 105: uint8_t i;
  3301                           ;circle_buffer.h: 106: *start_index = 0xFF;
  3302  0048  30FF               	movlw	255
  3303  0049  00A4               	movwf	??_get_msg_index
  3304  004A  0826               	movf	get_msg_index@start_index,w
  3305  004B  0084               	movwf	4
  3306  004C  0824               	movf	??_get_msg_index,w
  3307  004D  1383               	bcf	3,7	;select IRP bank0
  3308  004E  0080               	movwf	0
  3309                           
  3310                           ;circle_buffer.h: 107: *end_index = 0xFF;
  3311  004F  30FF               	movlw	255
  3312  0050  00A4               	movwf	??_get_msg_index
  3313  0051  0823               	movf	get_msg_index@end_index,w
  3314  0052  0084               	movwf	4
  3315  0053  0824               	movf	??_get_msg_index,w
  3316  0054  0080               	movwf	0
  3317                           
  3318                           ;circle_buffer.h: 109: if(low_half_rcv == 0)
  3319  0055  087D               	movf	_low_half_rcv,w
  3320  0056  1D03               	btfss	3,2
  3321  0057  285A               	goto	l2291
  3322                           
  3323                           ;circle_buffer.h: 110: {
  3324                           ;circle_buffer.h: 111: return 0;
  3325  0058  3000               	movlw	0
  3326  0059  0008               	return
  3327  005A                     l2291:	
  3328                           
  3329                           ;circle_buffer.h: 112: }
  3330                           ;circle_buffer.h: 113: if(get_distance(start_index_rcv, end_index_rcv) <= 7)
  3331  005A  087C               	movf	_end_index_rcv,w
  3332  005B  00A4               	movwf	??_get_msg_index
  3333  005C  0824               	movf	??_get_msg_index,w
  3334  005D  00A0               	movwf	get_distance@end_index
  3335  005E  0862               	movf	_start_index_rcv,w
  3336  005F  120A  158A  24B1  120A  118A  	fcall	_get_distance
  3337  0064  1283               	bcf	3,5	;RP0=0, select bank0
  3338  0065  1303               	bcf	3,6	;RP1=0, select bank0
  3339  0066  00A5               	movwf	??_get_msg_index+1
  3340  0067  3008               	movlw	8
  3341  0068  0225               	subwf	??_get_msg_index+1,w
  3342  0069  1803               	skipnc
  3343  006A  286D               	goto	l2297
  3344                           
  3345                           ;circle_buffer.h: 114: {
  3346                           ;circle_buffer.h: 115: return 0;
  3347  006B  3000               	movlw	0
  3348  006C  0008               	return
  3349  006D                     l2297:	
  3350                           
  3351                           ;circle_buffer.h: 116: }
  3352                           ;circle_buffer.h: 117: i = start_index_rcv;
  3353  006D  0862               	movf	_start_index_rcv,w
  3354  006E                     L3:	
  3355  006E  00A4               	movwf	??_get_msg_index
  3356  006F  0824               	movf	??_get_msg_index,w
  3357  0070  00A7               	movwf	get_msg_index@i
  3358  0071  087C               	movf	_end_index_rcv,w
  3359  0072  00A4               	movwf	??_get_msg_index
  3360  0073  0824               	movf	??_get_msg_index,w
  3361  0074  00A0               	movwf	get_distance@end_index
  3362  0075  0827               	movf	get_msg_index@i,w
  3363  0076  120A  158A  24B1  120A  118A  	fcall	_get_distance
  3364  007B  1283               	bcf	3,5	;RP0=0, select bank0
  3365  007C  1303               	bcf	3,6	;RP1=0, select bank0
  3366  007D  00A5               	movwf	??_get_msg_index+1
  3367  007E  3003               	movlw	3
  3368  007F  0225               	subwf	??_get_msg_index+1,w
  3369  0080  1C03               	btfss	3,0
  3370  0081  296A               	goto	l2323
  3371                           
  3372                           ;circle_buffer.h: 119: {
  3373                           ;circle_buffer.h: 122: if((buffer_rcv[i] == start_mark[0]) && (buffer_rcv[get_plus_index
      +                          (i, 1)] == start_mark[1])
  3374                           ;circle_buffer.h: 123: && (buffer_rcv[get_plus_index(i, 2)] == start_mark[2]) && (buffer
      +                          _rcv[get_plus_index(i, 3)] == start_mark[3]))
  3375                           
  3376                           ;circle_buffer.h: 118: while(get_distance(i, end_index_rcv) >= 3)
  3377  0082  300B               	movlw	low (_start_mark-__stringbase)
  3378  0083  0084               	movwf	4
  3379  0084  120A  118A  2675  120A  118A  	fcall	stringdir
  3380  0089  00A4               	movwf	??_get_msg_index
  3381  008A  0827               	movf	get_msg_index@i,w
  3382  008B  3E90               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3383  008C  0084               	movwf	4
  3384  008D  1783               	bsf	3,7	;select IRP bank3
  3385  008E  0800               	movf	0,w
  3386  008F  0624               	xorwf	??_get_msg_index,w
  3387  0090  1D03               	skipz
  3388  0091  28F2               	goto	l2309
  3389  0092  300C               	movlw	low (((_start_mark+1)-__stringbase)| (0+32768))
  3390  0093  0084               	movwf	4
  3391  0094  120A  118A  2675  120A  118A  	fcall	stringdir
  3392  0099  00A4               	movwf	??_get_msg_index
  3393  009A  01A0               	clrf	get_plus_index@add
  3394  009B  0AA0               	incf	get_plus_index@add,f
  3395  009C  0827               	movf	get_msg_index@i,w
  3396  009D  120A  158A  24A2  120A  118A  	fcall	_get_plus_index
  3397  00A2  3E90               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3398  00A3  0084               	movwf	4
  3399  00A4  1783               	bsf	3,7	;select IRP bank3
  3400  00A5  0800               	movf	0,w
  3401  00A6  1283               	bcf	3,5	;RP0=0, select bank0
  3402  00A7  1303               	bcf	3,6	;RP1=0, select bank0
  3403  00A8  0624               	xorwf	??_get_msg_index,w
  3404  00A9  1D03               	skipz
  3405  00AA  28F2               	goto	l2309
  3406  00AB  300D               	movlw	low (((_start_mark+2)-__stringbase)| (0+32768))
  3407  00AC  0084               	movwf	4
  3408  00AD  120A  118A  2675  120A  118A  	fcall	stringdir
  3409  00B2  00A4               	movwf	??_get_msg_index
  3410  00B3  3002               	movlw	2
  3411  00B4  00A5               	movwf	??_get_msg_index+1
  3412  00B5  0825               	movf	??_get_msg_index+1,w
  3413  00B6  00A0               	movwf	get_plus_index@add
  3414  00B7  0827               	movf	get_msg_index@i,w
  3415  00B8  120A  158A  24A2  120A  118A  	fcall	_get_plus_index
  3416  00BD  3E90               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3417  00BE  0084               	movwf	4
  3418  00BF  1783               	bsf	3,7	;select IRP bank3
  3419  00C0  0800               	movf	0,w
  3420  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  3421  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  3422  00C3  0624               	xorwf	??_get_msg_index,w
  3423  00C4  1D03               	skipz
  3424  00C5  28F2               	goto	l2309
  3425                           
  3426                           ;circle_buffer.h: 124: {
  3427                           ;circle_buffer.h: 125: if(*start_index != -1)
  3428  00C6  300E               	movlw	low (((_start_mark+3)-__stringbase)| (0+32768))
  3429  00C7  0084               	movwf	4
  3430  00C8  120A  118A  2675  120A  118A  	fcall	stringdir
  3431  00CD  00A4               	movwf	??_get_msg_index
  3432  00CE  3003               	movlw	3
  3433  00CF  00A5               	movwf	??_get_msg_index+1
  3434  00D0  0825               	movf	??_get_msg_index+1,w
  3435  00D1  00A0               	movwf	get_plus_index@add
  3436  00D2  0827               	movf	get_msg_index@i,w
  3437  00D3  120A  158A  24A2  120A  118A  	fcall	_get_plus_index
  3438  00D8  3E90               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3439  00D9  0084               	movwf	4
  3440  00DA  1783               	bsf	3,7	;select IRP bank3
  3441  00DB  0800               	movf	0,w
  3442  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  3443  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  3444  00DE  0624               	xorwf	??_get_msg_index,w
  3445  00DF  1D03               	skipz
  3446  00E0  28F2               	goto	l2309
  3447                           
  3448                           ;circle_buffer.h: 126: {
  3449                           ;circle_buffer.h: 127: *start_index = get_plus_index(i, 4);
  3450  00E1  3004               	movlw	4
  3451  00E2  00A4               	movwf	??_get_msg_index
  3452  00E3  0824               	movf	??_get_msg_index,w
  3453  00E4  00A0               	movwf	get_plus_index@add
  3454  00E5  0827               	movf	get_msg_index@i,w
  3455  00E6  120A  158A  24A2  120A  118A  	fcall	_get_plus_index
  3456  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  3457  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  3458  00ED  00A5               	movwf	??_get_msg_index+1
  3459  00EE  0826               	movf	get_msg_index@start_index,w
  3460  00EF  0084               	movwf	4
  3461  00F0  0825               	movf	??_get_msg_index+1,w
  3462  00F1  295F               	goto	L4
  3463  00F2                     l2309:	
  3464                           ;circle_buffer.h: 128: }
  3465                           ;circle_buffer.h: 129: }
  3466                           
  3467                           
  3468                           ;circle_buffer.h: 130: else if((buffer_rcv[i] == stop_mark[0]) && (buffer_rcv[get_plus_i
      +                          ndex(i, 1)] == stop_mark[1])
  3469                           ;circle_buffer.h: 131: && (buffer_rcv[get_plus_index(i, 2)] == stop_mark[2]) && (buffer_
      +                          rcv[get_plus_index(i, 3)] == stop_mark[3]))
  3470  00F2  300F               	movlw	low (_stop_mark-__stringbase)
  3471  00F3  0084               	movwf	4
  3472  00F4  120A  118A  2675  120A  118A  	fcall	stringdir
  3473  00F9  00A4               	movwf	??_get_msg_index
  3474  00FA  0827               	movf	get_msg_index@i,w
  3475  00FB  3E90               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3476  00FC  0084               	movwf	4
  3477  00FD  1783               	bsf	3,7	;select IRP bank3
  3478  00FE  0800               	movf	0,w
  3479  00FF  0624               	xorwf	??_get_msg_index,w
  3480  0100  1D03               	skipz
  3481  0101  2961               	goto	l2319
  3482  0102  3010               	movlw	low (((_stop_mark+1)-__stringbase)| (0+32768))
  3483  0103  0084               	movwf	4
  3484  0104  120A  118A  2675  120A  118A  	fcall	stringdir
  3485  0109  00A4               	movwf	??_get_msg_index
  3486  010A  01A0               	clrf	get_plus_index@add
  3487  010B  0AA0               	incf	get_plus_index@add,f
  3488  010C  0827               	movf	get_msg_index@i,w
  3489  010D  120A  158A  24A2  120A  118A  	fcall	_get_plus_index
  3490  0112  3E90               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3491  0113  0084               	movwf	4
  3492  0114  1783               	bsf	3,7	;select IRP bank3
  3493  0115  0800               	movf	0,w
  3494  0116  1283               	bcf	3,5	;RP0=0, select bank0
  3495  0117  1303               	bcf	3,6	;RP1=0, select bank0
  3496  0118  0624               	xorwf	??_get_msg_index,w
  3497  0119  1D03               	skipz
  3498  011A  2961               	goto	l2319
  3499  011B  3011               	movlw	low (((_stop_mark+2)-__stringbase)| (0+32768))
  3500  011C  0084               	movwf	4
  3501  011D  120A  118A  2675  120A  118A  	fcall	stringdir
  3502  0122  00A4               	movwf	??_get_msg_index
  3503  0123  3002               	movlw	2
  3504  0124  00A5               	movwf	??_get_msg_index+1
  3505  0125  0825               	movf	??_get_msg_index+1,w
  3506  0126  00A0               	movwf	get_plus_index@add
  3507  0127  0827               	movf	get_msg_index@i,w
  3508  0128  120A  158A  24A2  120A  118A  	fcall	_get_plus_index
  3509  012D  3E90               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3510  012E  0084               	movwf	4
  3511  012F  1783               	bsf	3,7	;select IRP bank3
  3512  0130  0800               	movf	0,w
  3513  0131  1283               	bcf	3,5	;RP0=0, select bank0
  3514  0132  1303               	bcf	3,6	;RP1=0, select bank0
  3515  0133  0624               	xorwf	??_get_msg_index,w
  3516  0134  1D03               	skipz
  3517  0135  2961               	goto	l2319
  3518                           
  3519                           ;circle_buffer.h: 132: {
  3520                           ;circle_buffer.h: 133: if(*end_index != -1)
  3521  0136  3012               	movlw	low (((_stop_mark+3)-__stringbase)| (0+32768))
  3522  0137  0084               	movwf	4
  3523  0138  120A  118A  2675  120A  118A  	fcall	stringdir
  3524  013D  00A4               	movwf	??_get_msg_index
  3525  013E  3003               	movlw	3
  3526  013F  00A5               	movwf	??_get_msg_index+1
  3527  0140  0825               	movf	??_get_msg_index+1,w
  3528  0141  00A0               	movwf	get_plus_index@add
  3529  0142  0827               	movf	get_msg_index@i,w
  3530  0143  120A  158A  24A2  120A  118A  	fcall	_get_plus_index
  3531  0148  3E90               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3532  0149  0084               	movwf	4
  3533  014A  1783               	bsf	3,7	;select IRP bank3
  3534  014B  0800               	movf	0,w
  3535  014C  1283               	bcf	3,5	;RP0=0, select bank0
  3536  014D  1303               	bcf	3,6	;RP1=0, select bank0
  3537  014E  0624               	xorwf	??_get_msg_index,w
  3538  014F  1D03               	skipz
  3539  0150  2961               	goto	l2319
  3540                           
  3541                           ;circle_buffer.h: 134: {
  3542                           ;circle_buffer.h: 135: *end_index = get_minus_index(i, 1);
  3543  0151  01A0               	clrf	get_minus_index@sub
  3544  0152  0AA0               	incf	get_minus_index@sub,f
  3545  0153  0827               	movf	get_msg_index@i,w
  3546  0154  120A  158A  24C1  120A  118A  	fcall	_get_minus_index
  3547  0159  1283               	bcf	3,5	;RP0=0, select bank0
  3548  015A  1303               	bcf	3,6	;RP1=0, select bank0
  3549  015B  00A4               	movwf	??_get_msg_index
  3550  015C  0823               	movf	get_msg_index@end_index,w
  3551  015D  0084               	movwf	4
  3552  015E  0824               	movf	??_get_msg_index,w
  3553  015F                     L4:	
  3554  015F  1383               	bcf	3,7	;select IRP bank0
  3555  0160  0080               	movwf	0
  3556  0161                     l2319:	
  3557                           
  3558                           ;circle_buffer.h: 136: }
  3559                           ;circle_buffer.h: 137: }
  3560                           ;circle_buffer.h: 139: i = get_next_index(i);
  3561  0161  0827               	movf	get_msg_index@i,w
  3562  0162  120A  158A  2496  120A  118A  	fcall	_get_next_index
  3563  0167  1283               	bcf	3,5	;RP0=0, select bank0
  3564  0168  1303               	bcf	3,6	;RP1=0, select bank0
  3565  0169  286E               	goto	L3
  3566  016A                     l2323:	
  3567                           
  3568                           ;circle_buffer.h: 140: }
  3569                           ;circle_buffer.h: 142: if(((*start_index != 0xFF) && (*end_index != 0xFF)) == 1)
  3570  016A  0826               	movf	get_msg_index@start_index,w
  3571  016B  0084               	movwf	4
  3572  016C  1383               	bcf	3,7	;select IRP bank0
  3573  016D  0A00               	incf	0,w
  3574  016E  1903               	btfsc	3,2
  3575  016F  2986               	goto	l2333
  3576  0170  0823               	movf	get_msg_index@end_index,w
  3577  0171  0084               	movwf	4
  3578  0172  0A00               	incf	0,w
  3579  0173  1903               	btfsc	3,2
  3580  0174  2986               	goto	l2333
  3581                           
  3582                           ;circle_buffer.h: 143: {
  3583                           ;circle_buffer.h: 144: start_index_rcv = get_plus_index(*end_index, 5);
  3584  0175  3005               	movlw	5
  3585  0176  00A4               	movwf	??_get_msg_index
  3586  0177  0824               	movf	??_get_msg_index,w
  3587  0178  00A0               	movwf	get_plus_index@add
  3588  0179  0823               	movf	get_msg_index@end_index,w
  3589  017A  0084               	movwf	4
  3590  017B  0800               	movf	0,w
  3591  017C  120A  158A  24A2   	fcall	_get_plus_index
  3592  017F  1283               	bcf	3,5	;RP0=0, select bank0
  3593  0180  1303               	bcf	3,6	;RP1=0, select bank0
  3594  0181  00A5               	movwf	??_get_msg_index+1
  3595  0182  0825               	movf	??_get_msg_index+1,w
  3596  0183  00E2               	movwf	_start_index_rcv
  3597                           
  3598                           ;circle_buffer.h: 145: return 1;
  3599  0184  3001               	movlw	1
  3600  0185  0008               	return
  3601  0186                     l2333:	
  3602                           
  3603                           ;circle_buffer.h: 146: }
  3604                           ;circle_buffer.h: 147: return 0;
  3605  0186  3000               	movlw	0
  3606  0187  0008               	return
  3607  0188                     __end_of_get_msg_index:	
  3608                           
  3609                           	psect	text16
  3610  0CA2                     __ptext16:	
  3611 ;; *************** function _get_plus_index *****************
  3612 ;; Defined at:
  3613 ;;		line 55 in file "circle_buffer.h"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;  index           1    wreg     unsigned char 
  3616 ;;  add             1    0[BANK0 ] unsigned char 
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;  index           1    2[BANK0 ] unsigned char 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      unsigned char 
  3621 ;; Registers used:
  3622 ;;		wreg, status,2, status,0
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3628 ;;      Params:         0       1       0       0       0
  3629 ;;      Locals:         0       1       0       0       0
  3630 ;;      Temps:          0       1       0       0       0
  3631 ;;      Totals:         0       3       0       0       0
  3632 ;;Total ram usage:        3 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    3
  3635 ;; This function calls:
  3636 ;;		Nothing
  3637 ;; This function is called by:
  3638 ;;		_get_msg_index
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           
  3643                           ;psect for function _get_plus_index
  3644  0CA2                     _get_plus_index:	
  3645                           
  3646                           ;incstack = 0
  3647                           ; Regs used in _get_plus_index: [wreg+status,2+status,0]
  3648                           ;get_plus_index@index stored from wreg
  3649  0CA2  1283               	bcf	3,5	;RP0=0, select bank0
  3650  0CA3  1303               	bcf	3,6	;RP1=0, select bank0
  3651  0CA4  00A2               	movwf	get_plus_index@index
  3652                           
  3653                           ;circle_buffer.h: 57: index += add;
  3654  0CA5  0820               	movf	get_plus_index@add,w
  3655  0CA6  00A1               	movwf	??_get_plus_index
  3656  0CA7  0821               	movf	??_get_plus_index,w
  3657  0CA8  07A2               	addwf	get_plus_index@index,f
  3658                           
  3659                           ;circle_buffer.h: 58: if(index >= 32)
  3660  0CA9  3020               	movlw	32
  3661  0CAA  0222               	subwf	get_plus_index@index,w
  3662  0CAB  1C03               	skipc
  3663  0CAC  2CAF               	goto	l2253
  3664                           
  3665                           ;circle_buffer.h: 59: {
  3666                           ;circle_buffer.h: 60: index -= 32;
  3667  0CAD  3020               	movlw	32
  3668  0CAE  02A2               	subwf	get_plus_index@index,f
  3669  0CAF                     l2253:	
  3670                           
  3671                           ;circle_buffer.h: 61: }
  3672                           ;circle_buffer.h: 62: return index;
  3673  0CAF  0822               	movf	get_plus_index@index,w
  3674  0CB0  0008               	return
  3675  0CB1                     __end_of_get_plus_index:	
  3676                           
  3677                           	psect	text17
  3678  0C96                     __ptext17:	
  3679 ;; *************** function _get_next_index *****************
  3680 ;; Defined at:
  3681 ;;		line 30 in file "circle_buffer.h"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;  index           1    wreg     unsigned char 
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;  index           1    0[BANK0 ] unsigned char 
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      unsigned char 
  3688 ;; Registers used:
  3689 ;;		wreg, status,2, status,0
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3695 ;;      Params:         0       0       0       0       0
  3696 ;;      Locals:         0       1       0       0       0
  3697 ;;      Temps:          0       0       0       0       0
  3698 ;;      Totals:         0       1       0       0       0
  3699 ;;Total ram usage:        1 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    3
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_get_msg_index
  3706 ;;		_get_msg
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           
  3711                           ;psect for function _get_next_index
  3712  0C96                     _get_next_index:	
  3713                           
  3714                           ;incstack = 0
  3715                           ; Regs used in _get_next_index: [wreg+status,2+status,0]
  3716                           ;get_next_index@index stored from wreg
  3717  0C96  1283               	bcf	3,5	;RP0=0, select bank0
  3718  0C97  1303               	bcf	3,6	;RP1=0, select bank0
  3719  0C98  00A0               	movwf	get_next_index@index
  3720                           
  3721                           ;circle_buffer.h: 32: if(index == 32 - 1)
  3722  0C99  301F               	movlw	31
  3723  0C9A  0620               	xorwf	get_next_index@index,w
  3724  0C9B  1D03               	btfss	3,2
  3725  0C9C  2C9F               	goto	l2245
  3726                           
  3727                           ;circle_buffer.h: 33: {
  3728                           ;circle_buffer.h: 34: return 0;
  3729  0C9D  3000               	movlw	0
  3730                           
  3731                           ;circle_buffer.h: 35: }
  3732  0C9E  0008               	return
  3733  0C9F                     l2245:	
  3734                           
  3735                           ;circle_buffer.h: 36: else
  3736                           ;circle_buffer.h: 37: {
  3737                           ;circle_buffer.h: 38: return (index + 1);
  3738  0C9F  0820               	movf	get_next_index@index,w
  3739  0CA0  3E01               	addlw	1
  3740  0CA1  0008               	return
  3741  0CA2                     __end_of_get_next_index:	
  3742                           
  3743                           	psect	text18
  3744  0CC1                     __ptext18:	
  3745 ;; *************** function _get_minus_index *****************
  3746 ;; Defined at:
  3747 ;;		line 64 in file "circle_buffer.h"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;  index           1    wreg     unsigned char 
  3750 ;;  sub             1    0[BANK0 ] unsigned char 
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;  index           1    1[BANK0 ] unsigned char 
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      unsigned char 
  3755 ;; Registers used:
  3756 ;;		wreg, status,2, status,0
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3762 ;;      Params:         0       1       0       0       0
  3763 ;;      Locals:         0       1       0       0       0
  3764 ;;      Temps:          0       0       0       0       0
  3765 ;;      Totals:         0       2       0       0       0
  3766 ;;Total ram usage:        2 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    3
  3769 ;; This function calls:
  3770 ;;		Nothing
  3771 ;; This function is called by:
  3772 ;;		_get_msg_index
  3773 ;; This function uses a non-reentrant model
  3774 ;;
  3775                           
  3776                           
  3777                           ;psect for function _get_minus_index
  3778  0CC1                     _get_minus_index:	
  3779                           
  3780                           ;incstack = 0
  3781                           ; Regs used in _get_minus_index: [wreg+status,2+status,0]
  3782                           ;get_minus_index@index stored from wreg
  3783  0CC1  1283               	bcf	3,5	;RP0=0, select bank0
  3784  0CC2  1303               	bcf	3,6	;RP1=0, select bank0
  3785  0CC3  00A1               	movwf	get_minus_index@index
  3786                           
  3787                           ;circle_buffer.h: 66: if(index < sub)
  3788  0CC4  0820               	movf	get_minus_index@sub,w
  3789  0CC5  0221               	subwf	get_minus_index@index,w
  3790  0CC6  1803               	skipnc
  3791  0CC7  2CCD               	goto	l2263
  3792                           
  3793                           ;circle_buffer.h: 67: {
  3794                           ;circle_buffer.h: 68: return index + 32 - sub;
  3795  0CC8  0320               	decf	get_minus_index@sub,w
  3796  0CC9  3AFF               	xorlw	255
  3797  0CCA  0721               	addwf	get_minus_index@index,w
  3798  0CCB  3E20               	addlw	32
  3799  0CCC  0008               	return
  3800  0CCD                     l2263:	
  3801                           
  3802                           ;circle_buffer.h: 69: }
  3803                           ;circle_buffer.h: 70: return index - sub;
  3804  0CCD  0320               	decf	get_minus_index@sub,w
  3805  0CCE  3AFF               	xorlw	255
  3806  0CCF  0721               	addwf	get_minus_index@index,w
  3807  0CD0  0008               	return
  3808  0CD1                     __end_of_get_minus_index:	
  3809                           
  3810                           	psect	text19
  3811  0CB1                     __ptext19:	
  3812 ;; *************** function _get_distance *****************
  3813 ;; Defined at:
  3814 ;;		line 72 in file "circle_buffer.h"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  start_index     1    wreg     unsigned char 
  3817 ;;  end_index       1    0[BANK0 ] unsigned char 
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;  start_index     1    1[BANK0 ] unsigned char 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  1    wreg      unsigned char 
  3822 ;; Registers used:
  3823 ;;		wreg, status,2, status,0
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3829 ;;      Params:         0       1       0       0       0
  3830 ;;      Locals:         0       1       0       0       0
  3831 ;;      Temps:          0       0       0       0       0
  3832 ;;      Totals:         0       2       0       0       0
  3833 ;;Total ram usage:        2 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; Hardware stack levels required when called:    3
  3836 ;; This function calls:
  3837 ;;		Nothing
  3838 ;; This function is called by:
  3839 ;;		_get_msg_index
  3840 ;;		_get_msg
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           
  3845                           ;psect for function _get_distance
  3846  0CB1                     _get_distance:	
  3847                           
  3848                           ;incstack = 0
  3849                           ; Regs used in _get_distance: [wreg+status,2+status,0]
  3850                           ;get_distance@start_index stored from wreg
  3851  0CB1  1283               	bcf	3,5	;RP0=0, select bank0
  3852  0CB2  1303               	bcf	3,6	;RP1=0, select bank0
  3853  0CB3  00A1               	movwf	get_distance@start_index
  3854                           
  3855                           ;circle_buffer.h: 74: if(end_index < start_index)
  3856  0CB4  0821               	movf	get_distance@start_index,w
  3857  0CB5  0220               	subwf	get_distance@end_index,w
  3858  0CB6  1803               	skipnc
  3859  0CB7  2CBD               	goto	l2275
  3860                           
  3861                           ;circle_buffer.h: 75: {
  3862                           ;circle_buffer.h: 76: return end_index + 32 - start_index;
  3863  0CB8  0321               	decf	get_distance@start_index,w
  3864  0CB9  3AFF               	xorlw	255
  3865  0CBA  0720               	addwf	get_distance@end_index,w
  3866  0CBB  3E20               	addlw	32
  3867                           
  3868                           ;circle_buffer.h: 77: }
  3869  0CBC  0008               	return
  3870  0CBD                     l2275:	
  3871                           
  3872                           ;circle_buffer.h: 78: else
  3873                           ;circle_buffer.h: 79: {
  3874                           ;circle_buffer.h: 80: return (end_index - start_index);
  3875  0CBD  0321               	decf	get_distance@start_index,w
  3876  0CBE  3AFF               	xorlw	255
  3877  0CBF  0720               	addwf	get_distance@end_index,w
  3878  0CC0  0008               	return
  3879  0CC1                     __end_of_get_distance:	
  3880                           
  3881                           	psect	text20
  3882  031F                     __ptext20:	
  3883 ;; *************** function _dump_conn *****************
  3884 ;; Defined at:
  3885 ;;		line 43 in file "connection.h"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  pconn           1    wreg     PTR struct .
  3888 ;;		 -> server_conn(5), 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  pconn           1   34[BANK1 ] PTR struct .
  3891 ;;		 -> server_conn(5), 
  3892 ;;  i               1   33[BANK1 ] char 
  3893 ;;  count           1   32[BANK1 ] char 
  3894 ;;  s              32    0[BANK1 ] unsigned char [32]
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3904 ;;      Params:         0       0       0       0       0
  3905 ;;      Locals:         0       0      35       0       0
  3906 ;;      Temps:          0       9       0       0       0
  3907 ;;      Totals:         0       9      35       0       0
  3908 ;;Total ram usage:       44 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    6
  3911 ;; This function calls:
  3912 ;;		_LCDByte
  3913 ;;		_LCDGotoXY
  3914 ;;		_LCDWriteString
  3915 ;;		_sprintf
  3916 ;; This function is called by:
  3917 ;;		_main
  3918 ;; This function uses a non-reentrant model
  3919 ;;
  3920                           
  3921                           
  3922                           ;psect for function _dump_conn
  3923  031F                     _dump_conn:	
  3924                           
  3925                           ;incstack = 0
  3926                           ; Regs used in _dump_conn: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3927                           ;dump_conn@pconn stored from wreg
  3928  031F  1683               	bsf	3,5	;RP0=1, select bank1
  3929  0320  1303               	bcf	3,6	;RP1=0, select bank1
  3930  0321  00C2               	movwf	dump_conn@pconn^(0+128)
  3931                           
  3932                           ;connection.h: 45: char s[32];
  3933                           ;connection.h: 46: sprintf(s, "C:%d,%d,%d,%d", pconn->from, pconn->to, pconn->msgid, pco
      +                          nn->available);
  3934  0322  30A0               	movlw	(low (dump_conn@s| 0))& (0+255)
  3935  0323  1283               	bcf	3,5	;RP0=0, select bank0
  3936  0324  1303               	bcf	3,6	;RP1=0, select bank0
  3937  0325  00AE               	movwf	sprintf@sp
  3938  0326  3000               	movlw	0
  3939  0327  00AF               	movwf	sprintf@sp+1
  3940  0328  3027               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  3941  0329  00C6               	movwf	??_dump_conn
  3942  032A  0846               	movf	??_dump_conn,w
  3943  032B  00B0               	movwf	sprintf@f
  3944  032C  1683               	bsf	3,5	;RP0=1, select bank1
  3945  032D  1303               	bcf	3,6	;RP1=0, select bank1
  3946  032E  0842               	movf	dump_conn@pconn^(0+128),w
  3947  032F  0084               	movwf	4
  3948  0330  1383               	bcf	3,7	;select IRP bank0
  3949  0331  0800               	movf	0,w
  3950  0332  1283               	bcf	3,5	;RP0=0, select bank0
  3951  0333  1303               	bcf	3,6	;RP1=0, select bank0
  3952  0334  00C7               	movwf	??_dump_conn+1
  3953  0335  01C8               	clrf	??_dump_conn+2
  3954  0336  0847               	movf	??_dump_conn+1,w
  3955  0337  00B1               	movwf	?_sprintf+3
  3956  0338  0848               	movf	??_dump_conn+2,w
  3957  0339  00B2               	movwf	?_sprintf+4
  3958  033A  1683               	bsf	3,5	;RP0=1, select bank1
  3959  033B  1303               	bcf	3,6	;RP1=0, select bank1
  3960  033C  0A42               	incf	dump_conn@pconn^(0+128),w
  3961  033D  0084               	movwf	4
  3962  033E  0800               	movf	0,w
  3963  033F  1283               	bcf	3,5	;RP0=0, select bank0
  3964  0340  1303               	bcf	3,6	;RP1=0, select bank0
  3965  0341  00C9               	movwf	??_dump_conn+3
  3966  0342  01CA               	clrf	??_dump_conn+4
  3967  0343  0849               	movf	??_dump_conn+3,w
  3968  0344  00B3               	movwf	?_sprintf+5
  3969  0345  084A               	movf	??_dump_conn+4,w
  3970  0346  00B4               	movwf	?_sprintf+6
  3971  0347  1683               	bsf	3,5	;RP0=1, select bank1
  3972  0348  1303               	bcf	3,6	;RP1=0, select bank1
  3973  0349  0842               	movf	dump_conn@pconn^(0+128),w
  3974  034A  3E02               	addlw	2
  3975  034B  0084               	movwf	4
  3976  034C  0800               	movf	0,w
  3977  034D  1283               	bcf	3,5	;RP0=0, select bank0
  3978  034E  1303               	bcf	3,6	;RP1=0, select bank0
  3979  034F  00CB               	movwf	??_dump_conn+5
  3980  0350  01CC               	clrf	??_dump_conn+6
  3981  0351  084B               	movf	??_dump_conn+5,w
  3982  0352  00B5               	movwf	?_sprintf+7
  3983  0353  084C               	movf	??_dump_conn+6,w
  3984  0354  00B6               	movwf	?_sprintf+8
  3985  0355  1683               	bsf	3,5	;RP0=1, select bank1
  3986  0356  1303               	bcf	3,6	;RP1=0, select bank1
  3987  0357  0842               	movf	dump_conn@pconn^(0+128),w
  3988  0358  3E04               	addlw	4
  3989  0359  0084               	movwf	4
  3990  035A  0800               	movf	0,w
  3991  035B  1283               	bcf	3,5	;RP0=0, select bank0
  3992  035C  1303               	bcf	3,6	;RP1=0, select bank0
  3993  035D  00CD               	movwf	??_dump_conn+7
  3994  035E  01CE               	clrf	??_dump_conn+8
  3995  035F  084D               	movf	??_dump_conn+7,w
  3996  0360  00B7               	movwf	?_sprintf+9
  3997  0361  084E               	movf	??_dump_conn+8,w
  3998  0362  00B8               	movwf	?_sprintf+10
  3999  0363  120A  118A  2188  120A  118A  	fcall	_sprintf
  4000                           
  4001                           ;connection.h: 47: {{ LCDGotoXY(0,1); int8_t count = LCDWriteString(""); for(int8_t i = 
      +                          count + 0; i < 16; i++) { (LCDByte(' ',1)); } };}; {{ LCDGotoXY(0,1); LCDWriteString(s);
      +                          };};
  4002  0368  1283               	bcf	3,5	;RP0=0, select bank0
  4003  0369  1303               	bcf	3,6	;RP1=0, select bank0
  4004  036A  01AC               	clrf	LCDGotoXY@y
  4005  036B  0AAC               	incf	LCDGotoXY@y,f
  4006  036C  3000               	movlw	0
  4007  036D  120A  158A  25EE  120A  118A  	fcall	_LCDGotoXY
  4008  0372  3039               	movlw	(low (((STR_15+4)-__stringbase)| (0+32768)))& (0+255)
  4009  0373  1283               	bcf	3,5	;RP0=0, select bank0
  4010  0374  1303               	bcf	3,6	;RP1=0, select bank0
  4011  0375  00AC               	movwf	LCDWriteString@msg
  4012  0376  3080               	movlw	128
  4013  0377  00AD               	movwf	LCDWriteString@msg+1
  4014  0378  120A  118A  2609  120A  118A  	fcall	_LCDWriteString
  4015  037D  1283               	bcf	3,5	;RP0=0, select bank0
  4016  037E  1303               	bcf	3,6	;RP1=0, select bank0
  4017  037F  00C6               	movwf	??_dump_conn
  4018  0380  0846               	movf	??_dump_conn,w
  4019  0381  1683               	bsf	3,5	;RP0=1, select bank1
  4020  0382  1303               	bcf	3,6	;RP1=0, select bank1
  4021  0383  00C0               	movwf	dump_conn@count^(0+128)
  4022  0384  0840               	movf	dump_conn@count^(0+128),w
  4023  0385  1283               	bcf	3,5	;RP0=0, select bank0
  4024  0386  1303               	bcf	3,6	;RP1=0, select bank0
  4025  0387  00C6               	movwf	??_dump_conn
  4026  0388  0846               	movf	??_dump_conn,w
  4027  0389  1683               	bsf	3,5	;RP0=1, select bank1
  4028  038A  1303               	bcf	3,6	;RP1=0, select bank1
  4029  038B  00C1               	movwf	dump_conn@i^(0+128)
  4030  038C  0841               	movf	dump_conn@i^(0+128),w
  4031  038D  3A80               	xorlw	128
  4032  038E  3E70               	addlw	-144
  4033  038F  1803               	btfsc	3,0
  4034  0390  2BA8               	goto	l3353
  4035  0391                     l3347:	
  4036  0391  1283               	bcf	3,5	;RP0=0, select bank0
  4037  0392  1303               	bcf	3,6	;RP1=0, select bank0
  4038  0393  01A5               	clrf	LCDByte@isdata
  4039  0394  0AA5               	incf	LCDByte@isdata,f
  4040  0395  3020               	movlw	32
  4041  0396  120A  118A  26C3  120A  118A  	fcall	_LCDByte
  4042  039B  3001               	movlw	1
  4043  039C  1283               	bcf	3,5	;RP0=0, select bank0
  4044  039D  1303               	bcf	3,6	;RP1=0, select bank0
  4045  039E  00C6               	movwf	??_dump_conn
  4046  039F  0846               	movf	??_dump_conn,w
  4047  03A0  1683               	bsf	3,5	;RP0=1, select bank1
  4048  03A1  1303               	bcf	3,6	;RP1=0, select bank1
  4049  03A2  07C1               	addwf	dump_conn@i^(0+128),f
  4050  03A3  0841               	movf	dump_conn@i^(0+128),w
  4051  03A4  3A80               	xorlw	128
  4052  03A5  3E70               	addlw	-144
  4053  03A6  1C03               	skipc
  4054  03A7  2B91               	goto	l3347
  4055  03A8                     l3353:	
  4056  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  4057  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  4058  03AA  01AC               	clrf	LCDGotoXY@y
  4059  03AB  0AAC               	incf	LCDGotoXY@y,f
  4060  03AC  3000               	movlw	0
  4061  03AD  120A  158A  25EE  120A  118A  	fcall	_LCDGotoXY
  4062  03B2  30A0               	movlw	(low (dump_conn@s| 0))& (0+255)
  4063  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  4064  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  4065  03B5  00AC               	movwf	LCDWriteString@msg
  4066  03B6  3000               	movlw	0
  4067  03B7  00AD               	movwf	LCDWriteString@msg+1
  4068  03B8  120A  118A  2609   	fcall	_LCDWriteString
  4069  03BB  0008               	return
  4070  03BC                     __end_of_dump_conn:	
  4071                           
  4072                           	psect	text21
  4073  0188                     __ptext21:	
  4074 ;; *************** function _sprintf *****************
  4075 ;; Defined at:
  4076 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;  sp              2   14[BANK0 ] PTR unsigned char 
  4079 ;;		 -> dump_conn@s(32), sdebug(32), 
  4080 ;;  f               1   16[BANK0 ] PTR const unsigned char 
  4081 ;;		 -> STR_13(14), STR_11(20), STR_9(15), STR_7(12), 
  4082 ;;		 -> STR_5(9), STR_3(6), STR_1(3), 
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;  tmpval          4    0        struct .
  4085 ;;  val             2   35[BANK0 ] unsigned int 
  4086 ;;  cp              2    0        PTR const unsigned char 
  4087 ;;  len             2    0        unsigned int 
  4088 ;;  c               1   37[BANK0 ] char 
  4089 ;;  prec            1   34[BANK0 ] char 
  4090 ;;  flag            1   33[BANK0 ] unsigned char 
  4091 ;;  ap              1   32[BANK0 ] PTR void [1]
  4092 ;;		 -> ?_sprintf(2), 
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  2   14[BANK0 ] int 
  4095 ;; Registers used:
  4096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4102 ;;      Params:         0      15       0       0       0
  4103 ;;      Locals:         0       6       0       0       0
  4104 ;;      Temps:          0       3       0       0       0
  4105 ;;      Totals:         0      24       0       0       0
  4106 ;;Total ram usage:       24 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    4
  4109 ;; This function calls:
  4110 ;;		___lwdiv
  4111 ;;		___lwmod
  4112 ;; This function is called by:
  4113 ;;		_dump_msg
  4114 ;;		_dump_conn
  4115 ;;		_debug_1
  4116 ;;		_debug_2
  4117 ;;		_debug_3
  4118 ;;		_debug_4
  4119 ;;		_debug_5
  4120 ;; This function uses a non-reentrant model
  4121 ;;
  4122                           
  4123                           
  4124                           ;psect for function _sprintf
  4125  0188                     _sprintf:	
  4126                           
  4127                           ;doprnt.c: 494: va_list ap;
  4128                           ;doprnt.c: 499: signed char c;
  4129                           ;doprnt.c: 506: signed char prec;
  4130                           ;doprnt.c: 508: unsigned char flag;
  4131                           ;doprnt.c: 523: union {
  4132                           ;doprnt.c: 524: unsigned long vd;
  4133                           ;doprnt.c: 525: double integ;
  4134                           ;doprnt.c: 526: } tmpval;
  4135                           ;doprnt.c: 528: unsigned int val;
  4136                           ;doprnt.c: 529: unsigned len;
  4137                           ;doprnt.c: 530: const char * cp;
  4138                           ;doprnt.c: 533: *ap = __va_start();
  4139                           
  4140                           ;incstack = 0
  4141 ;; using string table level
  4142                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4143  0188  3031               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  4144  0189  1283               	bcf	3,5	;RP0=0, select bank0
  4145  018A  1303               	bcf	3,6	;RP1=0, select bank0
  4146  018B  00BD               	movwf	??_sprintf
  4147  018C  083D               	movf	??_sprintf,w
  4148  018D  00C0               	movwf	sprintf@ap
  4149  018E                     l3227:	
  4150                           ;doprnt.c: 536: while(c = *f++) {
  4151                           
  4152  018E  3001               	movlw	1
  4153  018F  07B0               	addwf	sprintf@f,f
  4154  0190  30FF               	movlw	-1
  4155  0191  0730               	addwf	sprintf@f,w
  4156  0192  0084               	movwf	4
  4157  0193  120A  118A  2675  120A  118A  	fcall	stringdir
  4158  0198  00BD               	movwf	??_sprintf
  4159  0199  083D               	movf	??_sprintf,w
  4160  019A  00C5               	movwf	sprintf@c
  4161  019B  0845               	movf	sprintf@c,w
  4162  019C  1903               	btfsc	3,2
  4163  019D  2A58               	goto	l3229
  4164                           
  4165                           ;doprnt.c: 538: if(c != '%')
  4166  019E  3025               	movlw	37
  4167  019F  0645               	xorwf	sprintf@c,w
  4168  01A0  1903               	btfsc	3,2
  4169  01A1  29AE               	goto	l3183
  4170                           
  4171                           ;doprnt.c: 540: {
  4172                           ;doprnt.c: 541: ((*sp++ = (c)));
  4173  01A2  082E               	movf	sprintf@sp,w
  4174  01A3  0084               	movwf	4
  4175  01A4  1383               	bcf	3,7
  4176  01A5  182F               	btfsc	sprintf@sp+1,0
  4177  01A6  1783               	bsf	3,7
  4178  01A7  0845               	movf	sprintf@c,w
  4179  01A8  0080               	movwf	0
  4180  01A9  3001               	movlw	1
  4181  01AA  07AE               	addwf	sprintf@sp,f
  4182  01AB  1803               	skipnc
  4183  01AC  0AAF               	incf	sprintf@sp+1,f
  4184                           
  4185                           ;doprnt.c: 542: continue;
  4186  01AD  298E               	goto	l3227
  4187  01AE                     l3183:	
  4188                           
  4189                           ;doprnt.c: 543: }
  4190                           ;doprnt.c: 548: flag = 0;
  4191  01AE  01C1               	clrf	sprintf@flag
  4192                           
  4193                           ;doprnt.c: 822: }
  4194                           
  4195                           ;doprnt.c: 813: continue;
  4196                           
  4197                           ;doprnt.c: 802: default:
  4198                           
  4199                           ;doprnt.c: 698: case 'i':
  4200                           ;doprnt.c: 699: break;
  4201                           
  4202                           ;doprnt.c: 697: case 'd':
  4203                           
  4204                           ;doprnt.c: 638: goto alldone;
  4205                           
  4206                           ;doprnt.c: 637: case 0:
  4207                           
  4208                           ;doprnt.c: 635: switch(c = *f++) {
  4209  01AF  3001               	movlw	1
  4210  01B0  07B0               	addwf	sprintf@f,f
  4211  01B1  30FF               	movlw	-1
  4212  01B2  0730               	addwf	sprintf@f,w
  4213  01B3  0084               	movwf	4
  4214  01B4  120A  118A  2675  120A  118A  	fcall	stringdir
  4215  01B9  00C5               	movwf	sprintf@c
  4216                           
  4217                           ; Switch size 1, requested type "space"
  4218                           ; Number of cases is 3, Range of values is 0 to 105
  4219                           ; switch strategies available:
  4220                           ; Name         Instructions Cycles
  4221                           ; simple_byte           10     6 (average)
  4222                           ; jumptable            260     6 (fixed)
  4223                           ;	Chosen strategy is simple_byte
  4224  01BA  3A00               	xorlw	0	; case 0
  4225  01BB  1903               	skipnz
  4226  01BC  2A58               	goto	l3229
  4227  01BD  3A64               	xorlw	100	; case 100
  4228  01BE  1903               	skipnz
  4229  01BF  29C4               	goto	l3189
  4230  01C0  3A0D               	xorlw	13	; case 105
  4231  01C1  1903               	skipnz
  4232  01C2  29C4               	goto	l3189
  4233  01C3  298E               	goto	l3227
  4234  01C4                     l3189:	
  4235                           
  4236                           ;doprnt.c: 1253: {
  4237                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4238  01C4  0840               	movf	sprintf@ap,w
  4239  01C5  0084               	movwf	4
  4240  01C6  1383               	bcf	3,7	;select IRP bank0
  4241  01C7  0800               	movf	0,w
  4242  01C8  00C3               	movwf	sprintf@val
  4243  01C9  0A84               	incf	4,f
  4244  01CA  0800               	movf	0,w
  4245  01CB  00C4               	movwf	sprintf@val+1
  4246  01CC  3002               	movlw	2
  4247  01CD  00BD               	movwf	??_sprintf
  4248  01CE  083D               	movf	??_sprintf,w
  4249  01CF  07C0               	addwf	sprintf@ap,f
  4250                           
  4251                           ;doprnt.c: 1261: if((int)val < 0) {
  4252  01D0  1FC4               	btfss	sprintf@val+1,7
  4253  01D1  29DB               	goto	l3199
  4254                           
  4255                           ;doprnt.c: 1262: flag |= 0x03;
  4256  01D2  3003               	movlw	3
  4257  01D3  00BD               	movwf	??_sprintf
  4258  01D4  083D               	movf	??_sprintf,w
  4259  01D5  04C1               	iorwf	sprintf@flag,f
  4260                           
  4261                           ;doprnt.c: 1263: val = -val;
  4262  01D6  09C3               	comf	sprintf@val,f
  4263  01D7  09C4               	comf	sprintf@val+1,f
  4264  01D8  0AC3               	incf	sprintf@val,f
  4265  01D9  1903               	skipnz
  4266  01DA  0AC4               	incf	sprintf@val+1,f
  4267  01DB                     l3199:	
  4268                           
  4269                           ;doprnt.c: 1264: }
  4270                           ;doprnt.c: 1266: }
  4271                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4272  01DB  01C5               	clrf	sprintf@c
  4273  01DC  0AC5               	incf	sprintf@c,f
  4274  01DD  3005               	movlw	5
  4275  01DE  0645               	xorwf	sprintf@c,w
  4276  01DF  1903               	btfsc	3,2
  4277  01E0  2A02               	goto	l3211
  4278  01E1                     l3205:	
  4279                           
  4280                           ;doprnt.c: 1306: if(val < dpowers[c])
  4281  01E1  0845               	movf	sprintf@c,w
  4282  01E2  00BD               	movwf	??_sprintf
  4283  01E3  073D               	addwf	??_sprintf,w
  4284  01E4  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4285  01E5  0084               	movwf	4
  4286  01E6  120A  118A  2675  120A  118A  	fcall	stringdir
  4287  01EB  00BE               	movwf	??_sprintf+1
  4288  01EC  120A  118A  2675  120A  118A  	fcall	stringdir
  4289  01F1  00BF               	movwf	??_sprintf+2
  4290  01F2  083F               	movf	??_sprintf+2,w
  4291  01F3  0244               	subwf	sprintf@val+1,w
  4292  01F4  1D03               	skipz
  4293  01F5  29F8               	goto	u3335
  4294  01F6  083E               	movf	??_sprintf+1,w
  4295  01F7  0243               	subwf	sprintf@val,w
  4296  01F8                     u3335:	
  4297  01F8  1C03               	btfss	3,0
  4298  01F9  2A02               	goto	l3211
  4299                           
  4300                           ;doprnt.c: 1307: break;
  4301  01FA  3001               	movlw	1
  4302  01FB  00BD               	movwf	??_sprintf
  4303  01FC  083D               	movf	??_sprintf,w
  4304  01FD  07C5               	addwf	sprintf@c,f
  4305  01FE  3005               	movlw	5
  4306  01FF  0645               	xorwf	sprintf@c,w
  4307  0200  1D03               	btfss	3,2
  4308  0201  29E1               	goto	l3205
  4309  0202                     l3211:	
  4310                           
  4311                           ;doprnt.c: 1422: {
  4312                           ;doprnt.c: 1438: if(flag & 0x03)
  4313  0202  0841               	movf	sprintf@flag,w
  4314  0203  3903               	andlw	3
  4315  0204  1903               	btfsc	3,2
  4316  0205  2A11               	goto	l3217
  4317                           
  4318                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4319  0206  082E               	movf	sprintf@sp,w
  4320  0207  0084               	movwf	4
  4321  0208  1383               	bcf	3,7
  4322  0209  182F               	btfsc	sprintf@sp+1,0
  4323  020A  1783               	bsf	3,7
  4324  020B  302D               	movlw	45
  4325  020C  0080               	movwf	0
  4326  020D  3001               	movlw	1
  4327  020E  07AE               	addwf	sprintf@sp,f
  4328  020F  1803               	skipnc
  4329  0210  0AAF               	incf	sprintf@sp+1,f
  4330  0211                     l3217:	
  4331                           
  4332                           ;doprnt.c: 1469: }
  4333                           ;doprnt.c: 1472: prec = c;
  4334  0211  0845               	movf	sprintf@c,w
  4335  0212  00BD               	movwf	??_sprintf
  4336  0213  083D               	movf	??_sprintf,w
  4337  0214  00C2               	movwf	sprintf@prec
  4338  0215                     l3225:	
  4339                           ;doprnt.c: 1474: while(prec--) {
  4340                           
  4341  0215  30FF               	movlw	255
  4342  0216  00BD               	movwf	??_sprintf
  4343  0217  083D               	movf	??_sprintf,w
  4344  0218  07C2               	addwf	sprintf@prec,f
  4345  0219  0A42               	incf	sprintf@prec,w
  4346  021A  1903               	btfsc	3,2
  4347  021B  298E               	goto	l3227
  4348                           
  4349                           ;doprnt.c: 1478: {
  4350                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4351  021C  300A               	movlw	10
  4352  021D  00A8               	movwf	___lwmod@divisor
  4353  021E  3000               	movlw	0
  4354  021F  00A9               	movwf	___lwmod@divisor+1
  4355  0220  0842               	movf	sprintf@prec,w
  4356  0221  00BD               	movwf	??_sprintf
  4357  0222  073D               	addwf	??_sprintf,w
  4358  0223  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4359  0224  0084               	movwf	4
  4360  0225  120A  118A  2675  120A  118A  	fcall	stringdir
  4361  022A  00A0               	movwf	___lwdiv@divisor
  4362  022B  120A  118A  2675  120A  118A  	fcall	stringdir
  4363  0230  00A1               	movwf	___lwdiv@divisor+1
  4364  0231  0844               	movf	sprintf@val+1,w
  4365  0232  00A3               	movwf	___lwdiv@dividend+1
  4366  0233  0843               	movf	sprintf@val,w
  4367  0234  00A2               	movwf	___lwdiv@dividend
  4368  0235  120A  118A  27C0  120A  118A  	fcall	___lwdiv
  4369  023A  1283               	bcf	3,5	;RP0=0, select bank0
  4370  023B  1303               	bcf	3,6	;RP1=0, select bank0
  4371  023C  0821               	movf	?___lwdiv+1,w
  4372  023D  00AB               	movwf	___lwmod@dividend+1
  4373  023E  0820               	movf	?___lwdiv,w
  4374  023F  00AA               	movwf	___lwmod@dividend
  4375  0240  120A  158A  26CA  120A  118A  	fcall	___lwmod
  4376  0245  1283               	bcf	3,5	;RP0=0, select bank0
  4377  0246  1303               	bcf	3,6	;RP1=0, select bank0
  4378  0247  0828               	movf	?___lwmod,w
  4379  0248  3E30               	addlw	48
  4380  0249  00BE               	movwf	??_sprintf+1
  4381  024A  083E               	movf	??_sprintf+1,w
  4382  024B  00C5               	movwf	sprintf@c
  4383                           
  4384                           ;doprnt.c: 1523: }
  4385                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4386  024C  082E               	movf	sprintf@sp,w
  4387  024D  0084               	movwf	4
  4388  024E  1383               	bcf	3,7
  4389  024F  182F               	btfsc	sprintf@sp+1,0
  4390  0250  1783               	bsf	3,7
  4391  0251  0845               	movf	sprintf@c,w
  4392  0252  0080               	movwf	0
  4393  0253  3001               	movlw	1
  4394  0254  07AE               	addwf	sprintf@sp,f
  4395  0255  1803               	skipnc
  4396  0256  0AAF               	incf	sprintf@sp+1,f
  4397  0257  2A15               	goto	l3225
  4398  0258                     l3229:	
  4399                           ;doprnt.c: 1525: }
  4400                           ;doprnt.c: 1533: }
  4401                           ;doprnt.c: 1535: alldone:
  4402                           
  4403                           
  4404                           ;doprnt.c: 1538: *sp = 0;
  4405  0258  082E               	movf	sprintf@sp,w
  4406  0259  0084               	movwf	4
  4407  025A  1783               	bsf	3,7
  4408  025B  1C2F               	btfss	sprintf@sp+1,0
  4409  025C  1383               	bcf	3,7
  4410  025D  0180               	clrf	0
  4411  025E  0008               	return
  4412  025F                     __end_of_sprintf:	
  4413                           ;doprnt.c: 1540: return 0;
  4414                           ;	Return value of _sprintf is never used
  4415                           
  4416                           
  4417                           	psect	text22
  4418  0ECA                     __ptext22:	
  4419 ;; *************** function ___lwmod *****************
  4420 ;; Defined at:
  4421 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  4422 ;; Parameters:    Size  Location     Type
  4423 ;;  divisor         2    8[BANK0 ] unsigned int 
  4424 ;;  dividend        2   10[BANK0 ] unsigned int 
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;  counter         1   13[BANK0 ] unsigned char 
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  2    8[BANK0 ] unsigned int 
  4429 ;; Registers used:
  4430 ;;		wreg, status,2, status,0
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4436 ;;      Params:         0       4       0       0       0
  4437 ;;      Locals:         0       1       0       0       0
  4438 ;;      Temps:          0       1       0       0       0
  4439 ;;      Totals:         0       6       0       0       0
  4440 ;;Total ram usage:        6 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    3
  4443 ;; This function calls:
  4444 ;;		Nothing
  4445 ;; This function is called by:
  4446 ;;		_sprintf
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           
  4451                           ;psect for function ___lwmod
  4452  0ECA                     ___lwmod:	
  4453                           
  4454                           ;incstack = 0
  4455                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4456  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  4457  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  4458  0ECC  0828               	movf	___lwmod@divisor,w
  4459  0ECD  0429               	iorwf	___lwmod@divisor+1,w
  4460  0ECE  1903               	btfsc	3,2
  4461  0ECF  2EF9               	goto	l3163
  4462  0ED0  01AD               	clrf	___lwmod@counter
  4463  0ED1  0AAD               	incf	___lwmod@counter,f
  4464  0ED2                     l3153:	
  4465  0ED2  1BA9               	btfsc	___lwmod@divisor+1,7
  4466  0ED3  2EE0               	goto	l3155
  4467  0ED4  3001               	movlw	1
  4468  0ED5                     u3245:	
  4469  0ED5  1003               	clrc
  4470  0ED6  0DA8               	rlf	___lwmod@divisor,f
  4471  0ED7  0DA9               	rlf	___lwmod@divisor+1,f
  4472  0ED8  3EFF               	addlw	-1
  4473  0ED9  1D03               	skipz
  4474  0EDA  2ED5               	goto	u3245
  4475  0EDB  3001               	movlw	1
  4476  0EDC  00AC               	movwf	??___lwmod
  4477  0EDD  082C               	movf	??___lwmod,w
  4478  0EDE  07AD               	addwf	___lwmod@counter,f
  4479  0EDF  2ED2               	goto	l3153
  4480  0EE0                     l3155:	
  4481  0EE0  0829               	movf	___lwmod@divisor+1,w
  4482  0EE1  022B               	subwf	___lwmod@dividend+1,w
  4483  0EE2  1D03               	skipz
  4484  0EE3  2EE6               	goto	u3265
  4485  0EE4  0828               	movf	___lwmod@divisor,w
  4486  0EE5  022A               	subwf	___lwmod@dividend,w
  4487  0EE6                     u3265:	
  4488  0EE6  1C03               	skipc
  4489  0EE7  2EEE               	goto	l3159
  4490  0EE8  0828               	movf	___lwmod@divisor,w
  4491  0EE9  02AA               	subwf	___lwmod@dividend,f
  4492  0EEA  0829               	movf	___lwmod@divisor+1,w
  4493  0EEB  1C03               	skipc
  4494  0EEC  03AB               	decf	___lwmod@dividend+1,f
  4495  0EED  02AB               	subwf	___lwmod@dividend+1,f
  4496  0EEE                     l3159:	
  4497  0EEE  3001               	movlw	1
  4498  0EEF                     u3275:	
  4499  0EEF  1003               	clrc
  4500  0EF0  0CA9               	rrf	___lwmod@divisor+1,f
  4501  0EF1  0CA8               	rrf	___lwmod@divisor,f
  4502  0EF2  3EFF               	addlw	-1
  4503  0EF3  1D03               	skipz
  4504  0EF4  2EEF               	goto	u3275
  4505  0EF5  3001               	movlw	1
  4506  0EF6  02AD               	subwf	___lwmod@counter,f
  4507  0EF7  1D03               	btfss	3,2
  4508  0EF8  2EE0               	goto	l3155
  4509  0EF9                     l3163:	
  4510  0EF9  082B               	movf	___lwmod@dividend+1,w
  4511  0EFA  00A9               	movwf	?___lwmod+1
  4512  0EFB  082A               	movf	___lwmod@dividend,w
  4513  0EFC  00A8               	movwf	?___lwmod
  4514  0EFD  0008               	return
  4515  0EFE                     __end_of___lwmod:	
  4516                           
  4517                           	psect	text23
  4518  07C0                     __ptext23:	
  4519 ;; *************** function ___lwdiv *****************
  4520 ;; Defined at:
  4521 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;  divisor         2    0[BANK0 ] unsigned int 
  4524 ;;  dividend        2    2[BANK0 ] unsigned int 
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;  quotient        2    6[BANK0 ] unsigned int 
  4527 ;;  counter         1    5[BANK0 ] unsigned char 
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  2    0[BANK0 ] unsigned int 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2, status,0
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4537 ;;      Params:         0       4       0       0       0
  4538 ;;      Locals:         0       3       0       0       0
  4539 ;;      Temps:          0       1       0       0       0
  4540 ;;      Totals:         0       8       0       0       0
  4541 ;;Total ram usage:        8 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    3
  4544 ;; This function calls:
  4545 ;;		Nothing
  4546 ;; This function is called by:
  4547 ;;		_sprintf
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           
  4552                           ;psect for function ___lwdiv
  4553  07C0                     ___lwdiv:	
  4554                           
  4555                           ;incstack = 0
  4556                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4557  07C0  1283               	bcf	3,5	;RP0=0, select bank0
  4558  07C1  1303               	bcf	3,6	;RP1=0, select bank0
  4559  07C2  01A6               	clrf	___lwdiv@quotient
  4560  07C3  01A7               	clrf	___lwdiv@quotient+1
  4561  07C4  0820               	movf	___lwdiv@divisor,w
  4562  07C5  0421               	iorwf	___lwdiv@divisor+1,w
  4563  07C6  1903               	btfsc	3,2
  4564  07C7  2FF9               	goto	l3141
  4565  07C8  01A5               	clrf	___lwdiv@counter
  4566  07C9  0AA5               	incf	___lwdiv@counter,f
  4567  07CA                     l3129:	
  4568  07CA  1BA1               	btfsc	___lwdiv@divisor+1,7
  4569  07CB  2FD8               	goto	l3131
  4570  07CC  3001               	movlw	1
  4571  07CD                     u3175:	
  4572  07CD  1003               	clrc
  4573  07CE  0DA0               	rlf	___lwdiv@divisor,f
  4574  07CF  0DA1               	rlf	___lwdiv@divisor+1,f
  4575  07D0  3EFF               	addlw	-1
  4576  07D1  1D03               	skipz
  4577  07D2  2FCD               	goto	u3175
  4578  07D3  3001               	movlw	1
  4579  07D4  00A4               	movwf	??___lwdiv
  4580  07D5  0824               	movf	??___lwdiv,w
  4581  07D6  07A5               	addwf	___lwdiv@counter,f
  4582  07D7  2FCA               	goto	l3129
  4583  07D8                     l3131:	
  4584  07D8  3001               	movlw	1
  4585  07D9                     u3195:	
  4586  07D9  1003               	clrc
  4587  07DA  0DA6               	rlf	___lwdiv@quotient,f
  4588  07DB  0DA7               	rlf	___lwdiv@quotient+1,f
  4589  07DC  3EFF               	addlw	-1
  4590  07DD  1D03               	skipz
  4591  07DE  2FD9               	goto	u3195
  4592  07DF  0821               	movf	___lwdiv@divisor+1,w
  4593  07E0  0223               	subwf	___lwdiv@dividend+1,w
  4594  07E1  1D03               	skipz
  4595  07E2  2FE5               	goto	u3205
  4596  07E3  0820               	movf	___lwdiv@divisor,w
  4597  07E4  0222               	subwf	___lwdiv@dividend,w
  4598  07E5                     u3205:	
  4599  07E5  1C03               	skipc
  4600  07E6  2FEE               	goto	l3137
  4601  07E7  0820               	movf	___lwdiv@divisor,w
  4602  07E8  02A2               	subwf	___lwdiv@dividend,f
  4603  07E9  0821               	movf	___lwdiv@divisor+1,w
  4604  07EA  1C03               	skipc
  4605  07EB  03A3               	decf	___lwdiv@dividend+1,f
  4606  07EC  02A3               	subwf	___lwdiv@dividend+1,f
  4607  07ED  1426               	bsf	___lwdiv@quotient,0
  4608  07EE                     l3137:	
  4609  07EE  3001               	movlw	1
  4610  07EF                     u3215:	
  4611  07EF  1003               	clrc
  4612  07F0  0CA1               	rrf	___lwdiv@divisor+1,f
  4613  07F1  0CA0               	rrf	___lwdiv@divisor,f
  4614  07F2  3EFF               	addlw	-1
  4615  07F3  1D03               	skipz
  4616  07F4  2FEF               	goto	u3215
  4617  07F5  3001               	movlw	1
  4618  07F6  02A5               	subwf	___lwdiv@counter,f
  4619  07F7  1D03               	btfss	3,2
  4620  07F8  2FD8               	goto	l3131
  4621  07F9                     l3141:	
  4622  07F9  0827               	movf	___lwdiv@quotient+1,w
  4623  07FA  00A1               	movwf	?___lwdiv+1
  4624  07FB  0826               	movf	___lwdiv@quotient,w
  4625  07FC  00A0               	movwf	?___lwdiv
  4626  07FD  0008               	return
  4627  07FE                     __end_of___lwdiv:	
  4628                           
  4629                           	psect	text24
  4630  0609                     __ptext24:	
  4631 ;; *************** function _LCDWriteString *****************
  4632 ;; Defined at:
  4633 ;;		line 283 in file "lcd_hd44780_pic16.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;  msg             2   12[BANK0 ] PTR const unsigned char 
  4636 ;;		 -> STR_19(1), STR_18(5), STR_17(5), STR_16(5), 
  4637 ;;		 -> STR_15(5), STR_14(1), dump_conn@s(32), STR_12(1), 
  4638 ;;		 -> STR_10(1), STR_8(1), STR_6(1), STR_4(1), 
  4639 ;;		 -> STR_2(1), sdebug(32), 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  cc              1   16[BANK0 ] char 
  4642 ;;  count           1   15[BANK0 ] char 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      char 
  4645 ;; Registers used:
  4646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4652 ;;      Params:         0       2       0       0       0
  4653 ;;      Locals:         0       2       0       0       0
  4654 ;;      Temps:          0       1       0       0       0
  4655 ;;      Totals:         0       5       0       0       0
  4656 ;;Total ram usage:        5 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    5
  4659 ;; This function calls:
  4660 ;;		_LCDByte
  4661 ;; This function is called by:
  4662 ;;		_dump_msg
  4663 ;;		_dump_conn
  4664 ;;		_debug_1
  4665 ;;		_debug_2
  4666 ;;		_debug_3
  4667 ;;		_debug_4
  4668 ;;		_debug_5
  4669 ;;		_ShowMenu
  4670 ;;		_ClearMenu
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           
  4675                           ;psect for function _LCDWriteString
  4676  0609                     _LCDWriteString:	
  4677                           
  4678                           ;lcd_hd44780_pic16.c: 285: int8_t count = 0;
  4679                           
  4680                           ;incstack = 0
  4681 ;; hardware stack exceeded
  4682                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4683  0609  1283               	bcf	3,5	;RP0=0, select bank0
  4684  060A  1303               	bcf	3,6	;RP1=0, select bank0
  4685  060B  01AF               	clrf	LCDWriteString@count
  4686  060C                     l3277:	
  4687                           ;lcd_hd44780_pic16.c: 286: while(*msg!='\0')
  4688                           
  4689  060C  082D               	movf	LCDWriteString@msg+1,w
  4690  060D  00FF               	movwf	127
  4691  060E  082C               	movf	LCDWriteString@msg,w
  4692  060F  0084               	movwf	4
  4693  0610  120A  118A  266B  120A  118A  	fcall	stringtab
  4694  0615  3A00               	xorlw	0
  4695  0616  1903               	btfsc	3,2
  4696  0617  2E69               	goto	l3279
  4697                           
  4698                           ;lcd_hd44780_pic16.c: 287: {
  4699                           ;lcd_hd44780_pic16.c: 289: if(*msg=='%')
  4700  0618  082D               	movf	LCDWriteString@msg+1,w
  4701  0619  00FF               	movwf	127
  4702  061A  082C               	movf	LCDWriteString@msg,w
  4703  061B  0084               	movwf	4
  4704  061C  120A  118A  266B  120A  118A  	fcall	stringtab
  4705  0621  3A25               	xorlw	37
  4706  0622  1D03               	skipz
  4707  0623  2E4E               	goto	l3271
  4708                           
  4709                           ;lcd_hd44780_pic16.c: 290: {
  4710                           ;lcd_hd44780_pic16.c: 291: msg++;
  4711  0624  3001               	movlw	1
  4712  0625  07AC               	addwf	LCDWriteString@msg,f
  4713  0626  1803               	skipnc
  4714  0627  0AAD               	incf	LCDWriteString@msg+1,f
  4715                           
  4716                           ;lcd_hd44780_pic16.c: 292: int8_t cc=*msg-'0';
  4717  0628  082D               	movf	LCDWriteString@msg+1,w
  4718  0629  00FF               	movwf	127
  4719  062A  082C               	movf	LCDWriteString@msg,w
  4720  062B  0084               	movwf	4
  4721  062C  120A  118A  266B  120A  118A  	fcall	stringtab
  4722  0631  3ED0               	addlw	-48
  4723  0632  00AE               	movwf	??_LCDWriteString
  4724  0633  082E               	movf	??_LCDWriteString,w
  4725  0634  00B0               	movwf	LCDWriteString@cc
  4726                           
  4727                           ;lcd_hd44780_pic16.c: 294: if(cc>=0 && cc<=7)
  4728  0635  1BB0               	btfsc	LCDWriteString@cc,7
  4729  0636  2E40               	goto	l3263
  4730  0637  0830               	movf	LCDWriteString@cc,w
  4731  0638  3A80               	xorlw	128
  4732  0639  3E78               	addlw	-136
  4733  063A  1803               	skipnc
  4734  063B  2E40               	goto	l3263
  4735                           
  4736                           ;lcd_hd44780_pic16.c: 295: {
  4737                           ;lcd_hd44780_pic16.c: 296: (LCDByte(cc,1));
  4738  063C  01A5               	clrf	LCDByte@isdata
  4739  063D  0AA5               	incf	LCDByte@isdata,f
  4740  063E  0830               	movf	LCDWriteString@cc,w
  4741  063F  2E59               	goto	L5
  4742  0640                     l3263:	
  4743                           ;lcd_hd44780_pic16.c: 298: }
  4744                           
  4745                           ;lcd_hd44780_pic16.c: 297: count++;
  4746                           
  4747                           
  4748                           ;lcd_hd44780_pic16.c: 299: else
  4749                           ;lcd_hd44780_pic16.c: 300: {
  4750                           ;lcd_hd44780_pic16.c: 301: (LCDByte('%',1));
  4751  0640  01A5               	clrf	LCDByte@isdata
  4752  0641  0AA5               	incf	LCDByte@isdata,f
  4753  0642  3025               	movlw	37
  4754  0643  120A  118A  26C3  120A  118A  	fcall	_LCDByte
  4755                           
  4756                           ;lcd_hd44780_pic16.c: 302: count++;
  4757  0648  3001               	movlw	1
  4758  0649  1283               	bcf	3,5	;RP0=0, select bank0
  4759  064A  1303               	bcf	3,6	;RP1=0, select bank0
  4760  064B  00AE               	movwf	??_LCDWriteString
  4761  064C  082E               	movf	??_LCDWriteString,w
  4762  064D  07AF               	addwf	LCDWriteString@count,f
  4763  064E                     l3271:	
  4764                           ;lcd_hd44780_pic16.c: 305: }
  4765                           ;lcd_hd44780_pic16.c: 306: }
  4766                           
  4767                           ;lcd_hd44780_pic16.c: 304: count++;
  4768                           
  4769                           ;lcd_hd44780_pic16.c: 303: (LCDByte(*msg,1));
  4770                           
  4771                           
  4772                           ;lcd_hd44780_pic16.c: 307: else
  4773                           ;lcd_hd44780_pic16.c: 308: {
  4774                           ;lcd_hd44780_pic16.c: 309: (LCDByte(*msg,1));
  4775  064E  01A5               	clrf	LCDByte@isdata
  4776  064F  0AA5               	incf	LCDByte@isdata,f
  4777  0650  082D               	movf	LCDWriteString@msg+1,w
  4778  0651  00FF               	movwf	127
  4779  0652  082C               	movf	LCDWriteString@msg,w
  4780  0653  0084               	movwf	4
  4781  0654  120A  118A  266B  120A  118A  	fcall	stringtab
  4782  0659                     L5:	
  4783  0659  120A  118A  26C3  120A  118A  	fcall	_LCDByte
  4784                           
  4785                           ;lcd_hd44780_pic16.c: 310: count++;
  4786  065E  3001               	movlw	1
  4787  065F  1283               	bcf	3,5	;RP0=0, select bank0
  4788  0660  1303               	bcf	3,6	;RP1=0, select bank0
  4789  0661  00AE               	movwf	??_LCDWriteString
  4790  0662  082E               	movf	??_LCDWriteString,w
  4791  0663  07AF               	addwf	LCDWriteString@count,f
  4792                           
  4793                           ;lcd_hd44780_pic16.c: 311: }
  4794                           ;lcd_hd44780_pic16.c: 312: msg++;
  4795  0664  3001               	movlw	1
  4796  0665  07AC               	addwf	LCDWriteString@msg,f
  4797  0666  1803               	skipnc
  4798  0667  0AAD               	incf	LCDWriteString@msg+1,f
  4799  0668  2E0C               	goto	l3277
  4800  0669                     l3279:	
  4801                           
  4802                           ;lcd_hd44780_pic16.c: 313: }
  4803                           ;lcd_hd44780_pic16.c: 315: return count;
  4804  0669  082F               	movf	LCDWriteString@count,w
  4805  066A  0008               	return
  4806  066B                     __end_of_LCDWriteString:	
  4807                           
  4808                           	psect	text25
  4809  0DEE                     __ptext25:	
  4810 ;; *************** function _LCDGotoXY *****************
  4811 ;; Defined at:
  4812 ;;		line 367 in file "lcd_hd44780_pic16.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;  x               1    wreg     unsigned char 
  4815 ;;  y               1   12[BANK0 ] unsigned char 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;  x               1   14[BANK0 ] unsigned char 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4827 ;;      Params:         0       1       0       0       0
  4828 ;;      Locals:         0       1       0       0       0
  4829 ;;      Temps:          0       1       0       0       0
  4830 ;;      Totals:         0       3       0       0       0
  4831 ;;Total ram usage:        3 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    5
  4834 ;; This function calls:
  4835 ;;		_LCDByte
  4836 ;; This function is called by:
  4837 ;;		_dump_msg
  4838 ;;		_dump_conn
  4839 ;;		_debug_1
  4840 ;;		_debug_2
  4841 ;;		_debug_3
  4842 ;;		_debug_4
  4843 ;;		_debug_5
  4844 ;;		_ShowMenu
  4845 ;;		_ClearMenu
  4846 ;; This function uses a non-reentrant model
  4847 ;;
  4848                           
  4849                           
  4850                           ;psect for function _LCDGotoXY
  4851  0DEE                     _LCDGotoXY:	
  4852                           
  4853                           ;incstack = 0
  4854 ;; hardware stack exceeded
  4855                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4856                           ;LCDGotoXY@x stored from wreg
  4857  0DEE  1283               	bcf	3,5	;RP0=0, select bank0
  4858  0DEF  1303               	bcf	3,6	;RP1=0, select bank0
  4859  0DF0  00AE               	movwf	LCDGotoXY@x
  4860                           
  4861                           ;lcd_hd44780_pic16.c: 369: if(x>=20) return;
  4862  0DF1  3014               	movlw	20
  4863  0DF2  022E               	subwf	LCDGotoXY@x,w
  4864  0DF3  1803               	btfsc	3,0
  4865  0DF4  0008               	return
  4866  0DF5  2DFF               	goto	l3243
  4867  0DF6                     l351:	
  4868                           ;lcd_hd44780_pic16.c: 377: case 1:
  4869                           
  4870                           ;lcd_hd44780_pic16.c: 376: break;
  4871                           
  4872                           ;lcd_hd44780_pic16.c: 374: {
  4873                           ;lcd_hd44780_pic16.c: 375: case 0:
  4874                           
  4875                           ;lcd_hd44780_pic16.c: 373: switch(y)
  4876                           
  4877                           
  4878                           ;lcd_hd44780_pic16.c: 378: x|=0b01000000;
  4879  0DF6  172E               	bsf	LCDGotoXY@x,6
  4880                           
  4881                           ;lcd_hd44780_pic16.c: 379: break;
  4882  0DF7  2E0D               	goto	l350
  4883  0DF8                     l3237:	
  4884                           ;lcd_hd44780_pic16.c: 380: case 2:
  4885                           
  4886                           
  4887                           ;lcd_hd44780_pic16.c: 381: x+=0x14;
  4888  0DF8  3014               	movlw	20
  4889  0DF9  2DFB               	goto	L6
  4890  0DFA                     l3239:	
  4891                           ;lcd_hd44780_pic16.c: 383: case 3:
  4892                           
  4893                           ;lcd_hd44780_pic16.c: 382: break;
  4894                           
  4895                           
  4896                           ;lcd_hd44780_pic16.c: 384: x+=0x54;
  4897  0DFA  3054               	movlw	84
  4898  0DFB                     L6:	
  4899  0DFB  00AD               	movwf	??_LCDGotoXY
  4900  0DFC  082D               	movf	??_LCDGotoXY,w
  4901  0DFD  07AE               	addwf	LCDGotoXY@x,f
  4902                           
  4903                           ;lcd_hd44780_pic16.c: 386: }
  4904                           
  4905                           ;lcd_hd44780_pic16.c: 385: break;
  4906  0DFE  2E0D               	goto	l350
  4907  0DFF                     l3243:	
  4908  0DFF  082C               	movf	LCDGotoXY@y,w
  4909                           
  4910                           ; Switch size 1, requested type "space"
  4911                           ; Number of cases is 4, Range of values is 0 to 3
  4912                           ; switch strategies available:
  4913                           ; Name         Instructions Cycles
  4914                           ; simple_byte           13     7 (average)
  4915                           ; direct_byte           20     8 (fixed)
  4916                           ; jumptable            260     6 (fixed)
  4917                           ;	Chosen strategy is simple_byte
  4918  0E00  3A00               	xorlw	0	; case 0
  4919  0E01  1903               	skipnz
  4920  0E02  2E0D               	goto	l350
  4921  0E03  3A01               	xorlw	1	; case 1
  4922  0E04  1903               	skipnz
  4923  0E05  2DF6               	goto	l351
  4924  0E06  3A03               	xorlw	3	; case 2
  4925  0E07  1903               	skipnz
  4926  0E08  2DF8               	goto	l3237
  4927  0E09  3A01               	xorlw	1	; case 3
  4928  0E0A  1903               	skipnz
  4929  0E0B  2DFA               	goto	l3239
  4930  0E0C  2E0D               	goto	l350
  4931  0E0D                     l350:	
  4932                           
  4933                           ;lcd_hd44780_pic16.c: 408: x|=0b10000000;
  4934  0E0D  17AE               	bsf	LCDGotoXY@x,7
  4935                           
  4936                           ;lcd_hd44780_pic16.c: 409: (LCDByte(x,0));
  4937  0E0E  01A5               	clrf	LCDByte@isdata
  4938  0E0F  082E               	movf	LCDGotoXY@x,w
  4939  0E10  120A  118A  26C3   	fcall	_LCDByte
  4940  0E13  0008               	return
  4941  0E14                     __end_of_LCDGotoXY:	
  4942                           
  4943                           	psect	text26
  4944  071A                     __ptext26:	
  4945 ;; *************** function _MenuInit *****************
  4946 ;; Defined at:
  4947 ;;		line 7 in file "menu.c"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;		None
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;		None
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  1    wreg      void 
  4954 ;; Registers used:
  4955 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4961 ;;      Params:         0       0       0       0       0
  4962 ;;      Locals:         0       0       0       0       0
  4963 ;;      Temps:          0       1       0       0       0
  4964 ;;      Totals:         0       1       0       0       0
  4965 ;;Total ram usage:        1 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; Hardware stack levels required when called:    5
  4968 ;; This function calls:
  4969 ;;		_LoadMenuItem
  4970 ;; This function is called by:
  4971 ;;		_main
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           
  4976                           ;psect for function _MenuInit
  4977  071A                     _MenuInit:	
  4978                           
  4979                           ;menu.c: 9: g_menu.items[0].name = "ID1:";
  4980                           
  4981                           ;incstack = 0
  4982                           ; Regs used in _MenuInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4983  071A  3035               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  4984  071B  1283               	bcf	3,5	;RP0=0, select bank0
  4985  071C  1303               	bcf	3,6	;RP1=0, select bank0
  4986  071D  00A5               	movwf	??_MenuInit
  4987  071E  0825               	movf	??_MenuInit,w
  4988  071F  1683               	bsf	3,5	;RP0=1, select bank1
  4989  0720  1303               	bcf	3,6	;RP1=0, select bank1
  4990  0721  00C4               	movwf	(low ((_g_menu| 0+1)))^(0+128)
  4991                           
  4992                           ;menu.c: 10: g_menu.items[0].value = LoadMenuItem(0);
  4993  0722  3000               	movlw	0
  4994  0723  120A  158A  2504  120A  118A  	fcall	_LoadMenuItem
  4995  0728  1283               	bcf	3,5	;RP0=0, select bank0
  4996  0729  1303               	bcf	3,6	;RP1=0, select bank0
  4997  072A  00A5               	movwf	??_MenuInit
  4998  072B  0825               	movf	??_MenuInit,w
  4999  072C  1683               	bsf	3,5	;RP0=1, select bank1
  5000  072D  1303               	bcf	3,6	;RP1=0, select bank1
  5001  072E  00C3               	movwf	_g_menu^(0+128)
  5002                           
  5003                           ;menu.c: 12: g_menu.items[1].name = "ID2:";
  5004  072F  303A               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  5005  0730  1283               	bcf	3,5	;RP0=0, select bank0
  5006  0731  1303               	bcf	3,6	;RP1=0, select bank0
  5007  0732  00A5               	movwf	??_MenuInit
  5008  0733  0825               	movf	??_MenuInit,w
  5009  0734  1683               	bsf	3,5	;RP0=1, select bank1
  5010  0735  1303               	bcf	3,6	;RP1=0, select bank1
  5011  0736  00C6               	movwf	(low ((_g_menu| 0+3)))^(0+128)
  5012                           
  5013                           ;menu.c: 13: g_menu.items[1].value = LoadMenuItem(1);
  5014  0737  3001               	movlw	1
  5015  0738  120A  158A  2504  120A  118A  	fcall	_LoadMenuItem
  5016  073D  1283               	bcf	3,5	;RP0=0, select bank0
  5017  073E  1303               	bcf	3,6	;RP1=0, select bank0
  5018  073F  00A5               	movwf	??_MenuInit
  5019  0740  0825               	movf	??_MenuInit,w
  5020  0741  1683               	bsf	3,5	;RP0=1, select bank1
  5021  0742  1303               	bcf	3,6	;RP1=0, select bank1
  5022  0743  00C5               	movwf	(_g_menu^(0+128)+2)
  5023                           
  5024                           ;menu.c: 15: g_menu.items[2].name = "ID3:";
  5025  0744  303F               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  5026  0745  1283               	bcf	3,5	;RP0=0, select bank0
  5027  0746  1303               	bcf	3,6	;RP1=0, select bank0
  5028  0747  00A5               	movwf	??_MenuInit
  5029  0748  0825               	movf	??_MenuInit,w
  5030  0749  1683               	bsf	3,5	;RP0=1, select bank1
  5031  074A  1303               	bcf	3,6	;RP1=0, select bank1
  5032  074B  00C8               	movwf	(low ((_g_menu| 0+5)))^(0+128)
  5033                           
  5034                           ;menu.c: 16: g_menu.items[2].value = LoadMenuItem(2);
  5035  074C  3002               	movlw	2
  5036  074D  120A  158A  2504  120A  118A  	fcall	_LoadMenuItem
  5037  0752  1283               	bcf	3,5	;RP0=0, select bank0
  5038  0753  1303               	bcf	3,6	;RP1=0, select bank0
  5039  0754  00A5               	movwf	??_MenuInit
  5040  0755  0825               	movf	??_MenuInit,w
  5041  0756  1683               	bsf	3,5	;RP0=1, select bank1
  5042  0757  1303               	bcf	3,6	;RP1=0, select bank1
  5043  0758  00C7               	movwf	(_g_menu^(0+128)+4)
  5044                           
  5045                           ;menu.c: 18: g_menu.items[3].name = "ID4:";
  5046  0759  3044               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  5047  075A  1283               	bcf	3,5	;RP0=0, select bank0
  5048  075B  1303               	bcf	3,6	;RP1=0, select bank0
  5049  075C  00A5               	movwf	??_MenuInit
  5050  075D  0825               	movf	??_MenuInit,w
  5051  075E  1683               	bsf	3,5	;RP0=1, select bank1
  5052  075F  1303               	bcf	3,6	;RP1=0, select bank1
  5053  0760  00CA               	movwf	(low ((_g_menu| 0+7)))^(0+128)
  5054                           
  5055                           ;menu.c: 19: g_menu.items[3].value = LoadMenuItem(3);
  5056  0761  3003               	movlw	3
  5057  0762  120A  158A  2504   	fcall	_LoadMenuItem
  5058  0765  1283               	bcf	3,5	;RP0=0, select bank0
  5059  0766  1303               	bcf	3,6	;RP1=0, select bank0
  5060  0767  00A5               	movwf	??_MenuInit
  5061  0768  0825               	movf	??_MenuInit,w
  5062  0769  1683               	bsf	3,5	;RP0=1, select bank1
  5063  076A  1303               	bcf	3,6	;RP1=0, select bank1
  5064  076B  00C9               	movwf	(_g_menu^(0+128)+6)
  5065                           
  5066                           ;menu.c: 21: g_menu.index = 0;
  5067  076C  01CB               	clrf	(_g_menu^(0+128)+8)
  5068  076D  0008               	return
  5069  076E                     __end_of_MenuInit:	
  5070                           
  5071                           	psect	text27
  5072  0539                     __ptext27:	
  5073 ;; *************** function _LCDInit *****************
  5074 ;; Defined at:
  5075 ;;		line 211 in file "lcd_hd44780_pic16.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;  style           1    wreg     unsigned char 
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;  style           1   14[BANK0 ] unsigned char 
  5080 ;;  __i             1   15[BANK0 ] unsigned char 
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  1    wreg      void 
  5083 ;; Registers used:
  5084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5090 ;;      Params:         0       0       0       0       0
  5091 ;;      Locals:         0       2       0       0       0
  5092 ;;      Temps:          0       2       0       0       0
  5093 ;;      Totals:         0       4       0       0       0
  5094 ;;Total ram usage:        4 bytes
  5095 ;; Hardware stack levels used:    1
  5096 ;; Hardware stack levels required when called:    5
  5097 ;; This function calls:
  5098 ;;		_LCDBusyLoop
  5099 ;;		_LCDByte
  5100 ;; This function is called by:
  5101 ;;		_main
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           
  5106                           ;psect for function _LCDInit
  5107  0539                     _LCDInit:	
  5108                           
  5109                           ;incstack = 0
  5110                           ; Regs used in _LCDInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5111                           ;LCDInit@style stored from wreg
  5112  0539  1283               	bcf	3,5	;RP0=0, select bank0
  5113  053A  1303               	bcf	3,6	;RP1=0, select bank0
  5114  053B  00AE               	movwf	LCDInit@style
  5115                           
  5116                           ;lcd_hd44780_pic16.c: 213: _delay((unsigned long)((30)*(20000000/4000.0)));
  5117  053C  30C3               	movlw	195
  5118  053D  00AD               	movwf	??_LCDInit+1
  5119  053E  30CD               	movlw	205
  5120  053F  00AC               	movwf	??_LCDInit
  5121  0540                     u3797:	
  5122  0540  0BAC               	decfsz	??_LCDInit,f
  5123  0541  2D40               	goto	u3797
  5124  0542  0BAD               	decfsz	??_LCDInit+1,f
  5125  0543  2D40               	goto	u3797
  5126                           
  5127                           ;lcd_hd44780_pic16.c: 216: TRISC&=(~(0x0F<<4));
  5128  0544  300F               	movlw	15
  5129  0545  1283               	bcf	3,5	;RP0=0, select bank0
  5130  0546  1303               	bcf	3,6	;RP1=0, select bank0
  5131  0547  00AC               	movwf	??_LCDInit
  5132  0548  082C               	movf	??_LCDInit,w
  5133  0549  1683               	bsf	3,5	;RP0=1, select bank1
  5134  054A  1303               	bcf	3,6	;RP1=0, select bank1
  5135  054B  0587               	andwf	7,f	;volatile
  5136                           
  5137                           ;lcd_hd44780_pic16.c: 218: TRISCbits.TRISC3=0;
  5138  054C  1187               	bcf	7,3	;volatile
  5139                           
  5140                           ;lcd_hd44780_pic16.c: 219: TRISCbits.TRISC1=0;
  5141  054D  1087               	bcf	7,1	;volatile
  5142                           
  5143                           ;lcd_hd44780_pic16.c: 220: TRISCbits.TRISC2=0;
  5144  054E  1107               	bcf	7,2	;volatile
  5145                           
  5146                           ;lcd_hd44780_pic16.c: 222: PORTC&=(~(0x0F<<4));
  5147  054F  300F               	movlw	15
  5148  0550  1283               	bcf	3,5	;RP0=0, select bank0
  5149  0551  1303               	bcf	3,6	;RP1=0, select bank0
  5150  0552  00AC               	movwf	??_LCDInit
  5151  0553  082C               	movf	??_LCDInit,w
  5152  0554  0587               	andwf	7,f	;volatile
  5153                           
  5154                           ;lcd_hd44780_pic16.c: 224: (RC3=0);
  5155  0555  1187               	bcf	7,3	;volatile
  5156                           
  5157                           ;lcd_hd44780_pic16.c: 225: (RC2=0);
  5158  0556  1107               	bcf	7,2	;volatile
  5159                           
  5160                           ;lcd_hd44780_pic16.c: 226: (RC1=0);
  5161  0557  1087               	bcf	7,1	;volatile
  5162                           
  5163                           ;lcd_hd44780_pic16.c: 229: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  5164  0558  2D59               	nop2	;2 cycle nop
  5165                           
  5166                           ;lcd_hd44780_pic16.c: 231: (RC3=1);
  5167  0559  1283               	bcf	3,5	;RP0=0, select bank0
  5168  055A  1303               	bcf	3,6	;RP1=0, select bank0
  5169  055B  1587               	bsf	7,3	;volatile
  5170                           
  5171                           ;lcd_hd44780_pic16.c: 232: PORTC|=((0b00000010)<<4);
  5172  055C  1687               	bsf	7,5	;volatile
  5173                           
  5174                           ;lcd_hd44780_pic16.c: 233: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5175  055D  2D5E               	nop2	;2 cycle nop
  5176  055E  2D5F               	nop2	;2 cycle nop
  5177  055F  0000               	nop
  5178                           
  5179                           ;lcd_hd44780_pic16.c: 234: (RC3=0);
  5180  0560  1283               	bcf	3,5	;RP0=0, select bank0
  5181  0561  1303               	bcf	3,6	;RP1=0, select bank0
  5182  0562  1187               	bcf	7,3	;volatile
  5183                           
  5184                           ;lcd_hd44780_pic16.c: 235: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5185  0563  2D64               	nop2	;2 cycle nop
  5186  0564  2D65               	nop2	;2 cycle nop
  5187  0565  0000               	nop
  5188                           
  5189                           ;lcd_hd44780_pic16.c: 238: LCDBusyLoop();
  5190  0566  120A  118A  25A1  120A  118A  	fcall	_LCDBusyLoop
  5191                           
  5192                           ;lcd_hd44780_pic16.c: 243: (LCDByte(0b00101000,0));
  5193  056B  1283               	bcf	3,5	;RP0=0, select bank0
  5194  056C  1303               	bcf	3,6	;RP1=0, select bank0
  5195  056D  01A5               	clrf	LCDByte@isdata
  5196  056E  3028               	movlw	40
  5197  056F  120A  118A  26C3  120A  118A  	fcall	_LCDByte
  5198                           
  5199                           ;lcd_hd44780_pic16.c: 244: (LCDByte(0b00001100|style,0));
  5200  0574  1283               	bcf	3,5	;RP0=0, select bank0
  5201  0575  1303               	bcf	3,6	;RP1=0, select bank0
  5202  0576  01A5               	clrf	LCDByte@isdata
  5203  0577  082E               	movf	LCDInit@style,w
  5204  0578  380C               	iorlw	12
  5205  0579  120A  118A  26C3  120A  118A  	fcall	_LCDByte
  5206                           
  5207                           ;lcd_hd44780_pic16.c: 247: (LCDByte(0b01000000,0));
  5208  057E  1283               	bcf	3,5	;RP0=0, select bank0
  5209  057F  1303               	bcf	3,6	;RP1=0, select bank0
  5210  0580  01A5               	clrf	LCDByte@isdata
  5211  0581  3040               	movlw	64
  5212  0582  120A  118A  26C3  120A  118A  	fcall	_LCDByte
  5213                           
  5214                           ;lcd_hd44780_pic16.c: 249: uint8_t __i;
  5215                           ;lcd_hd44780_pic16.c: 250: for(__i=0;__i<sizeof(__cgram);__i++)
  5216  0587  1283               	bcf	3,5	;RP0=0, select bank0
  5217  0588  1303               	bcf	3,6	;RP1=0, select bank0
  5218  0589  01AF               	clrf	LCDInit@__i
  5219  058A                     L7:	
  5220  058A  3008               	movlw	8
  5221  058B  022F               	subwf	LCDInit@__i,w
  5222  058C  1803               	btfsc	3,0
  5223  058D  0008               	return
  5224                           
  5225                           ;lcd_hd44780_pic16.c: 251: (LCDByte(__cgram[__i],1));
  5226  058E  01A5               	clrf	LCDByte@isdata
  5227  058F  0AA5               	incf	LCDByte@isdata,f
  5228  0590  082F               	movf	LCDInit@__i,w
  5229  0591  3ED4               	addlw	(low (___cgram| 0))& (0+255)
  5230  0592  0084               	movwf	4
  5231  0593  1383               	bcf	3,7	;select IRP bank1
  5232  0594  0800               	movf	0,w
  5233  0595  120A  118A  26C3  120A  118A  	fcall	_LCDByte
  5234  059A  3001               	movlw	1
  5235  059B  1283               	bcf	3,5	;RP0=0, select bank0
  5236  059C  1303               	bcf	3,6	;RP1=0, select bank0
  5237  059D  00AC               	movwf	??_LCDInit
  5238  059E  082C               	movf	??_LCDInit,w
  5239  059F  07AF               	addwf	LCDInit@__i,f
  5240  05A0  2D8A               	goto	L7
  5241  05A1                     __end_of_LCDInit:	
  5242                           
  5243                           	psect	text28
  5244  06C3                     __ptext28:	
  5245 ;; *************** function _LCDByte *****************
  5246 ;; Defined at:
  5247 ;;		line 80 in file "lcd_hd44780_pic16.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;  c               1    wreg     unsigned char 
  5250 ;;  isdata          1    5[BANK0 ] unsigned char 
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;  c               1   10[BANK0 ] unsigned char 
  5253 ;;  temp            1   11[BANK0 ] unsigned char 
  5254 ;;  ln              1    9[BANK0 ] unsigned char 
  5255 ;;  hn              1    8[BANK0 ] unsigned char 
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  1    wreg      void 
  5258 ;; Registers used:
  5259 ;;		wreg, status,2, status,0, pclath, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5265 ;;      Params:         0       1       0       0       0
  5266 ;;      Locals:         0       4       0       0       0
  5267 ;;      Temps:          0       2       0       0       0
  5268 ;;      Totals:         0       7       0       0       0
  5269 ;;Total ram usage:        7 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    4
  5272 ;; This function calls:
  5273 ;;		_LCDBusyLoop
  5274 ;; This function is called by:
  5275 ;;		_dump_msg
  5276 ;;		_dump_conn
  5277 ;;		_main
  5278 ;;		_LCDInit
  5279 ;;		_LCDWriteString
  5280 ;;		_LCDGotoXY
  5281 ;;		_debug_1
  5282 ;;		_debug_2
  5283 ;;		_debug_3
  5284 ;;		_debug_4
  5285 ;;		_debug_5
  5286 ;;		_LCDSetStyle
  5287 ;;		_LCDWriteInt
  5288 ;;		_ShowMenu
  5289 ;;		_ClearMenu
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293                           
  5294                           ;psect for function _LCDByte
  5295  06C3                     _LCDByte:	
  5296                           
  5297                           ;incstack = 0
  5298 ;; hardware stack exceeded
  5299                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  5300                           ;LCDByte@c stored from wreg
  5301  06C3  1283               	bcf	3,5	;RP0=0, select bank0
  5302  06C4  1303               	bcf	3,6	;RP1=0, select bank0
  5303  06C5  00AA               	movwf	LCDByte@c
  5304                           
  5305                           ;lcd_hd44780_pic16.c: 89: uint8_t hn,ln;
  5306                           ;lcd_hd44780_pic16.c: 90: uint8_t temp;
  5307                           ;lcd_hd44780_pic16.c: 92: hn=c>>4;
  5308  06C6  082A               	movf	LCDByte@c,w
  5309  06C7  00A6               	movwf	??_LCDByte
  5310  06C8  3004               	movlw	4
  5311  06C9                     u3125:	
  5312  06C9  1003               	clrc
  5313  06CA  0CA6               	rrf	??_LCDByte,f
  5314  06CB  3EFF               	addlw	-1
  5315  06CC  1D03               	skipz
  5316  06CD  2EC9               	goto	u3125
  5317  06CE  0826               	movf	??_LCDByte,w
  5318  06CF  00A7               	movwf	??_LCDByte+1
  5319  06D0  0827               	movf	??_LCDByte+1,w
  5320  06D1  00A8               	movwf	LCDByte@hn
  5321                           
  5322                           ;lcd_hd44780_pic16.c: 93: ln=(c & 0x0F);
  5323  06D2  082A               	movf	LCDByte@c,w
  5324  06D3  390F               	andlw	15
  5325  06D4  00A6               	movwf	??_LCDByte
  5326  06D5  0826               	movf	??_LCDByte,w
  5327  06D6  00A9               	movwf	LCDByte@ln
  5328                           
  5329                           ;lcd_hd44780_pic16.c: 95: if(isdata==0)
  5330  06D7  0825               	movf	LCDByte@isdata,w
  5331  06D8  1D03               	btfss	3,2
  5332  06D9  2EDC               	goto	l301
  5333                           
  5334                           ;lcd_hd44780_pic16.c: 96: (RC1=0);
  5335  06DA  1087               	bcf	7,1	;volatile
  5336  06DB  2EDD               	goto	l302
  5337  06DC                     l301:	
  5338                           
  5339                           ;lcd_hd44780_pic16.c: 97: else
  5340                           ;lcd_hd44780_pic16.c: 98: (RC1=1);
  5341  06DC  1487               	bsf	7,1	;volatile
  5342  06DD                     l302:	
  5343                           
  5344                           ;lcd_hd44780_pic16.c: 100: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  5345  06DD  2EDE               	nop2	;2 cycle nop
  5346                           
  5347                           ;lcd_hd44780_pic16.c: 102: (RC3=1);
  5348  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  5349  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  5350  06E0  1587               	bsf	7,3	;volatile
  5351                           
  5352                           ;lcd_hd44780_pic16.c: 106: temp=(PORTC & (~(0X0F<<4)))|((hn<<4));
  5353  06E1  0828               	movf	LCDByte@hn,w
  5354  06E2  00A6               	movwf	??_LCDByte
  5355  06E3  3004               	movlw	4
  5356  06E4                     u3145:	
  5357  06E4  1003               	clrc
  5358  06E5  0DA6               	rlf	??_LCDByte,f
  5359  06E6  3EFF               	addlw	-1
  5360  06E7  1D03               	skipz
  5361  06E8  2EE4               	goto	u3145
  5362  06E9  0807               	movf	7,w	;volatile
  5363  06EA  390F               	andlw	15
  5364  06EB  0426               	iorwf	??_LCDByte,w
  5365  06EC  00A7               	movwf	??_LCDByte+1
  5366  06ED  0827               	movf	??_LCDByte+1,w
  5367  06EE  00AB               	movwf	LCDByte@temp
  5368                           
  5369                           ;lcd_hd44780_pic16.c: 107: PORTC=temp;
  5370  06EF  082B               	movf	LCDByte@temp,w
  5371  06F0  0087               	movwf	7	;volatile
  5372                           
  5373                           ;lcd_hd44780_pic16.c: 109: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5374  06F1  2EF2               	nop2	;2 cycle nop
  5375  06F2  2EF3               	nop2	;2 cycle nop
  5376  06F3  0000               	nop
  5377                           
  5378                           ;lcd_hd44780_pic16.c: 113: (RC3=0);
  5379  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  5380  06F5  1303               	bcf	3,6	;RP1=0, select bank0
  5381  06F6  1187               	bcf	7,3	;volatile
  5382                           
  5383                           ;lcd_hd44780_pic16.c: 115: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5384  06F7  2EF8               	nop2	;2 cycle nop
  5385  06F8  2EF9               	nop2	;2 cycle nop
  5386  06F9  0000               	nop
  5387                           
  5388                           ;lcd_hd44780_pic16.c: 118: (RC3=1);
  5389  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  5390  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  5391  06FC  1587               	bsf	7,3	;volatile
  5392                           
  5393                           ;lcd_hd44780_pic16.c: 120: temp=(PORTC & (~(0X0F<<4)))|((ln<<4));
  5394  06FD  0829               	movf	LCDByte@ln,w
  5395  06FE  00A6               	movwf	??_LCDByte
  5396  06FF  3004               	movlw	4
  5397  0700                     u3155:	
  5398  0700  1003               	clrc
  5399  0701  0DA6               	rlf	??_LCDByte,f
  5400  0702  3EFF               	addlw	-1
  5401  0703  1D03               	skipz
  5402  0704  2F00               	goto	u3155
  5403  0705  0807               	movf	7,w	;volatile
  5404  0706  390F               	andlw	15
  5405  0707  0426               	iorwf	??_LCDByte,w
  5406  0708  00A7               	movwf	??_LCDByte+1
  5407  0709  0827               	movf	??_LCDByte+1,w
  5408  070A  00AB               	movwf	LCDByte@temp
  5409                           
  5410                           ;lcd_hd44780_pic16.c: 122: PORTC=temp;
  5411  070B  082B               	movf	LCDByte@temp,w
  5412  070C  0087               	movwf	7	;volatile
  5413                           
  5414                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5415  070D  2F0E               	nop2	;2 cycle nop
  5416  070E  2F0F               	nop2	;2 cycle nop
  5417  070F  0000               	nop
  5418                           
  5419                           ;lcd_hd44780_pic16.c: 128: (RC3=0);
  5420  0710  1283               	bcf	3,5	;RP0=0, select bank0
  5421  0711  1303               	bcf	3,6	;RP1=0, select bank0
  5422  0712  1187               	bcf	7,3	;volatile
  5423                           
  5424                           ;lcd_hd44780_pic16.c: 130: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5425  0713  2F14               	nop2	;2 cycle nop
  5426  0714  2F15               	nop2	;2 cycle nop
  5427  0715  0000               	nop
  5428                           
  5429                           ;lcd_hd44780_pic16.c: 132: LCDBusyLoop();
  5430  0716  120A  118A  25A1   	fcall	_LCDBusyLoop
  5431  0719  0008               	return
  5432  071A                     __end_of_LCDByte:	
  5433                           
  5434                           	psect	text29
  5435  05A1                     __ptext29:	
  5436 ;; *************** function _LCDBusyLoop *****************
  5437 ;; Defined at:
  5438 ;;		line 135 in file "lcd_hd44780_pic16.c"
  5439 ;; Parameters:    Size  Location     Type
  5440 ;;		None
  5441 ;; Auto vars:     Size  Location     Type
  5442 ;;  status          1    4[BANK0 ] unsigned char 
  5443 ;;  temp            1    3[BANK0 ] unsigned char 
  5444 ;;  busy            1    2[BANK0 ] unsigned char 
  5445 ;; Return value:  Size  Location     Type
  5446 ;;                  1    wreg      void 
  5447 ;; Registers used:
  5448 ;;		wreg, status,2, status,0
  5449 ;; Tracked objects:
  5450 ;;		On entry : 0/0
  5451 ;;		On exit  : 0/0
  5452 ;;		Unchanged: 0/0
  5453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5454 ;;      Params:         0       0       0       0       0
  5455 ;;      Locals:         0       3       0       0       0
  5456 ;;      Temps:          0       2       0       0       0
  5457 ;;      Totals:         0       5       0       0       0
  5458 ;;Total ram usage:        5 bytes
  5459 ;; Hardware stack levels used:    1
  5460 ;; Hardware stack levels required when called:    3
  5461 ;; This function calls:
  5462 ;;		Nothing
  5463 ;; This function is called by:
  5464 ;;		_LCDByte
  5465 ;;		_LCDInit
  5466 ;; This function uses a non-reentrant model
  5467 ;;
  5468                           
  5469                           
  5470                           ;psect for function _LCDBusyLoop
  5471  05A1                     _LCDBusyLoop:	
  5472                           
  5473                           ;lcd_hd44780_pic16.c: 139: uint8_t busy,status=0x00,temp;
  5474                           
  5475                           ;incstack = 0
  5476 ;; hardware stack exceeded
  5477                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  5478  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  5479  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  5480  05A3  01A4               	clrf	LCDBusyLoop@status
  5481                           
  5482                           ;lcd_hd44780_pic16.c: 142: TRISC|=(0x0f<<4);
  5483  05A4  30F0               	movlw	240
  5484  05A5  00A0               	movwf	??_LCDBusyLoop
  5485  05A6  0820               	movf	??_LCDBusyLoop,w
  5486  05A7  1683               	bsf	3,5	;RP0=1, select bank1
  5487  05A8  1303               	bcf	3,6	;RP1=0, select bank1
  5488  05A9  0487               	iorwf	7,f	;volatile
  5489                           
  5490                           ;lcd_hd44780_pic16.c: 145: (RC2=1);
  5491  05AA  1283               	bcf	3,5	;RP0=0, select bank0
  5492  05AB  1303               	bcf	3,6	;RP1=0, select bank0
  5493  05AC  1507               	bsf	7,2	;volatile
  5494                           
  5495                           ;lcd_hd44780_pic16.c: 146: (RC1=0);
  5496  05AD  1087               	bcf	7,1	;volatile
  5497                           
  5498                           ;lcd_hd44780_pic16.c: 150: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  5499  05AE  2DAF               	nop2	;2 cycle nop
  5500  05AF                     l3031:	
  5501                           ;lcd_hd44780_pic16.c: 153: do
  5502                           
  5503                           
  5504                           ;lcd_hd44780_pic16.c: 154: {
  5505                           ;lcd_hd44780_pic16.c: 156: (RC3=1);
  5506  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  5507  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  5508  05B1  1587               	bsf	7,3	;volatile
  5509                           
  5510                           ;lcd_hd44780_pic16.c: 159: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  5511  05B2  2DB3               	nop2	;2 cycle nop
  5512                           
  5513                           ;lcd_hd44780_pic16.c: 161: status=(PORTC>>4);
  5514  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  5515  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  5516  05B5  0807               	movf	7,w	;volatile
  5517  05B6  00A0               	movwf	??_LCDBusyLoop
  5518  05B7  3004               	movlw	4
  5519  05B8                     u3085:	
  5520  05B8  1003               	clrc
  5521  05B9  0CA0               	rrf	??_LCDBusyLoop,f
  5522  05BA  3EFF               	addlw	-1
  5523  05BB  1D03               	skipz
  5524  05BC  2DB8               	goto	u3085
  5525  05BD  0820               	movf	??_LCDBusyLoop,w
  5526  05BE  00A1               	movwf	??_LCDBusyLoop+1
  5527  05BF  0821               	movf	??_LCDBusyLoop+1,w
  5528  05C0  00A4               	movwf	LCDBusyLoop@status
  5529                           
  5530                           ;lcd_hd44780_pic16.c: 162: status=status<<4;
  5531  05C1  0824               	movf	LCDBusyLoop@status,w
  5532  05C2  00A0               	movwf	??_LCDBusyLoop
  5533  05C3  3003               	movlw	3
  5534  05C4                     u3095:	
  5535  05C4  1003               	clrc
  5536  05C5  0DA0               	rlf	??_LCDBusyLoop,f
  5537  05C6  3EFF               	addlw	-1
  5538  05C7  1D03               	skipz
  5539  05C8  2DC4               	goto	u3095
  5540  05C9  1003               	clrc
  5541  05CA  0D20               	rlf	??_LCDBusyLoop,w
  5542  05CB  00A1               	movwf	??_LCDBusyLoop+1
  5543  05CC  0821               	movf	??_LCDBusyLoop+1,w
  5544  05CD  00A4               	movwf	LCDBusyLoop@status
  5545                           
  5546                           ;lcd_hd44780_pic16.c: 164: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  5547  05CE  2DCF               	nop2	;2 cycle nop
  5548                           
  5549                           ;lcd_hd44780_pic16.c: 167: (RC3=0);
  5550  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  5551  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  5552  05D1  1187               	bcf	7,3	;volatile
  5553                           
  5554                           ;lcd_hd44780_pic16.c: 168: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5555  05D2  2DD3               	nop2	;2 cycle nop
  5556  05D3  2DD4               	nop2	;2 cycle nop
  5557  05D4  0000               	nop
  5558                           
  5559                           ;lcd_hd44780_pic16.c: 170: (RC3=1);
  5560  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  5561  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  5562  05D7  1587               	bsf	7,3	;volatile
  5563                           
  5564                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  5565  05D8  2DD9               	nop2	;2 cycle nop
  5566                           
  5567                           ;lcd_hd44780_pic16.c: 173: temp=(PORTC>>4);
  5568  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  5569  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  5570  05DB  0807               	movf	7,w	;volatile
  5571  05DC  00A0               	movwf	??_LCDBusyLoop
  5572  05DD  3004               	movlw	4
  5573  05DE                     u3105:	
  5574  05DE  1003               	clrc
  5575  05DF  0CA0               	rrf	??_LCDBusyLoop,f
  5576  05E0  3EFF               	addlw	-1
  5577  05E1  1D03               	skipz
  5578  05E2  2DDE               	goto	u3105
  5579  05E3  0820               	movf	??_LCDBusyLoop,w
  5580  05E4  00A1               	movwf	??_LCDBusyLoop+1
  5581  05E5  0821               	movf	??_LCDBusyLoop+1,w
  5582  05E6  00A3               	movwf	LCDBusyLoop@temp
  5583                           
  5584                           ;lcd_hd44780_pic16.c: 174: temp&=0x0F;
  5585  05E7  300F               	movlw	15
  5586  05E8  00A0               	movwf	??_LCDBusyLoop
  5587  05E9  0820               	movf	??_LCDBusyLoop,w
  5588  05EA  05A3               	andwf	LCDBusyLoop@temp,f
  5589                           
  5590                           ;lcd_hd44780_pic16.c: 176: status=status|temp;
  5591  05EB  0824               	movf	LCDBusyLoop@status,w
  5592  05EC  0423               	iorwf	LCDBusyLoop@temp,w
  5593  05ED  00A0               	movwf	??_LCDBusyLoop
  5594  05EE  0820               	movf	??_LCDBusyLoop,w
  5595  05EF  00A4               	movwf	LCDBusyLoop@status
  5596                           
  5597                           ;lcd_hd44780_pic16.c: 178: busy=status & 0b10000000;
  5598  05F0  0824               	movf	LCDBusyLoop@status,w
  5599  05F1  3980               	andlw	128
  5600  05F2  00A0               	movwf	??_LCDBusyLoop
  5601  05F3  0820               	movf	??_LCDBusyLoop,w
  5602  05F4  00A2               	movwf	LCDBusyLoop@busy
  5603                           
  5604                           ;lcd_hd44780_pic16.c: 180: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  5605  05F5  2DF6               	nop2	;2 cycle nop
  5606                           
  5607                           ;lcd_hd44780_pic16.c: 182: (RC3=0);
  5608  05F6  1283               	bcf	3,5	;RP0=0, select bank0
  5609  05F7  1303               	bcf	3,6	;RP1=0, select bank0
  5610  05F8  1187               	bcf	7,3	;volatile
  5611                           
  5612                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5613  05F9  2DFA               	nop2	;2 cycle nop
  5614  05FA  2DFB               	nop2	;2 cycle nop
  5615  05FB  0000               	nop
  5616                           
  5617                           ;lcd_hd44780_pic16.c: 184: }while(busy);
  5618  05FC  1283               	bcf	3,5	;RP0=0, select bank0
  5619  05FD  1303               	bcf	3,6	;RP1=0, select bank0
  5620  05FE  0822               	movf	LCDBusyLoop@busy,w
  5621  05FF  1D03               	btfss	3,2
  5622  0600  2DAF               	goto	l3031
  5623                           
  5624                           ;lcd_hd44780_pic16.c: 186: (RC2=0);
  5625  0601  1107               	bcf	7,2	;volatile
  5626                           
  5627                           ;lcd_hd44780_pic16.c: 189: TRISC&=(~(0x0F<<4));
  5628  0602  300F               	movlw	15
  5629  0603  00A0               	movwf	??_LCDBusyLoop
  5630  0604  0820               	movf	??_LCDBusyLoop,w
  5631  0605  1683               	bsf	3,5	;RP0=1, select bank1
  5632  0606  1303               	bcf	3,6	;RP1=0, select bank1
  5633  0607  0587               	andwf	7,f	;volatile
  5634  0608  0008               	return
  5635  0609                     __end_of_LCDBusyLoop:	
  5636                           
  5637                           	psect	text30
  5638  0FB3                     __ptext30:	
  5639 ;; *************** function _IOInit *****************
  5640 ;; Defined at:
  5641 ;;		line 46 in file "do_am.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;		None
  5644 ;; Auto vars:     Size  Location     Type
  5645 ;;		None
  5646 ;; Return value:  Size  Location     Type
  5647 ;;                  1    wreg      void 
  5648 ;; Registers used:
  5649 ;;		None
  5650 ;; Tracked objects:
  5651 ;;		On entry : 0/0
  5652 ;;		On exit  : 0/0
  5653 ;;		Unchanged: 0/0
  5654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5655 ;;      Params:         0       0       0       0       0
  5656 ;;      Locals:         0       0       0       0       0
  5657 ;;      Temps:          0       0       0       0       0
  5658 ;;      Totals:         0       0       0       0       0
  5659 ;;Total ram usage:        0 bytes
  5660 ;; Hardware stack levels used:    1
  5661 ;; Hardware stack levels required when called:    3
  5662 ;; This function calls:
  5663 ;;		Nothing
  5664 ;; This function is called by:
  5665 ;;		_main
  5666 ;; This function uses a non-reentrant model
  5667 ;;
  5668                           
  5669                           
  5670                           ;psect for function _IOInit
  5671  0FB3                     _IOInit:	
  5672                           
  5673                           ;do_am.c: 49: (TRISBbits.TRISB2 = 1);
  5674                           
  5675                           ;incstack = 0
  5676                           ; Regs used in _IOInit: []
  5677  0FB3  1683               	bsf	3,5	;RP0=1, select bank1
  5678  0FB4  1303               	bcf	3,6	;RP1=0, select bank1
  5679  0FB5  1506               	bsf	6,2	;volatile
  5680                           
  5681                           ;do_am.c: 50: ANSELHbits.ANS8 = 0;
  5682  0FB6  1683               	bsf	3,5	;RP0=1, select bank3
  5683  0FB7  1703               	bsf	3,6	;RP1=1, select bank3
  5684  0FB8  1009               	bcf	9,0	;volatile
  5685                           
  5686                           ;do_am.c: 52: (TRISBbits.TRISB0 = 1);
  5687  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  5688  0FBA  1303               	bcf	3,6	;RP1=0, select bank1
  5689  0FBB  1406               	bsf	6,0	;volatile
  5690                           
  5691                           ;do_am.c: 53: ANSELHbits.ANS12 = 0;
  5692  0FBC  1683               	bsf	3,5	;RP0=1, select bank3
  5693  0FBD  1703               	bsf	3,6	;RP1=1, select bank3
  5694  0FBE  1209               	bcf	9,4	;volatile
  5695                           
  5696                           ;do_am.c: 55: INTCONbits.GIE = 1;
  5697  0FBF  178B               	bsf	11,7	;volatile
  5698                           
  5699                           ;do_am.c: 56: INTCONbits.INTE = 1;
  5700  0FC0  160B               	bsf	11,4	;volatile
  5701                           
  5702                           ;do_am.c: 57: INTCONbits.INTF = 0;
  5703  0FC1  108B               	bcf	11,1	;volatile
  5704                           
  5705                           ;do_am.c: 58: OPTION_REGbits.INTEDG = 0;
  5706  0FC2  1683               	bsf	3,5	;RP0=1, select bank1
  5707  0FC3  1303               	bcf	3,6	;RP1=0, select bank1
  5708  0FC4  1301               	bcf	1,6	;volatile
  5709                           
  5710                           ;do_am.c: 60: (TRISAbits.TRISA0 = 1);
  5711  0FC5  1405               	bsf	5,0	;volatile
  5712                           
  5713                           ;do_am.c: 61: ANSELbits.ANS0 = 0;
  5714  0FC6  1683               	bsf	3,5	;RP0=1, select bank3
  5715  0FC7  1703               	bsf	3,6	;RP1=1, select bank3
  5716  0FC8  1008               	bcf	8,0	;volatile
  5717                           
  5718                           ;do_am.c: 63: (TRISAbits.TRISA1 = 1);
  5719  0FC9  1683               	bsf	3,5	;RP0=1, select bank1
  5720  0FCA  1303               	bcf	3,6	;RP1=0, select bank1
  5721  0FCB  1485               	bsf	5,1	;volatile
  5722                           
  5723                           ;do_am.c: 64: ANSELbits.ANS1 = 0;
  5724  0FCC  1683               	bsf	3,5	;RP0=1, select bank3
  5725  0FCD  1703               	bsf	3,6	;RP1=1, select bank3
  5726  0FCE  1088               	bcf	8,1	;volatile
  5727                           
  5728                           ;do_am.c: 65: (TRISAbits.TRISA2 = 1);
  5729  0FCF  1683               	bsf	3,5	;RP0=1, select bank1
  5730  0FD0  1303               	bcf	3,6	;RP1=0, select bank1
  5731  0FD1  1505               	bsf	5,2	;volatile
  5732                           
  5733                           ;do_am.c: 66: ANSELbits.ANS2 = 0;
  5734  0FD2  1683               	bsf	3,5	;RP0=1, select bank3
  5735  0FD3  1703               	bsf	3,6	;RP1=1, select bank3
  5736  0FD4  1108               	bcf	8,2	;volatile
  5737                           
  5738                           ;do_am.c: 67: (TRISAbits.TRISA3 = 1);
  5739  0FD5  1683               	bsf	3,5	;RP0=1, select bank1
  5740  0FD6  1303               	bcf	3,6	;RP1=0, select bank1
  5741  0FD7  1585               	bsf	5,3	;volatile
  5742                           
  5743                           ;do_am.c: 68: ANSELbits.ANS3 = 0;
  5744  0FD8  1683               	bsf	3,5	;RP0=1, select bank3
  5745  0FD9  1703               	bsf	3,6	;RP1=1, select bank3
  5746  0FDA  1188               	bcf	8,3	;volatile
  5747                           
  5748                           ;do_am.c: 70: (TRISBbits.TRISB1 = 0);
  5749  0FDB  1683               	bsf	3,5	;RP0=1, select bank1
  5750  0FDC  1303               	bcf	3,6	;RP1=0, select bank1
  5751  0FDD  1086               	bcf	6,1	;volatile
  5752                           
  5753                           ;do_am.c: 71: ANSELHbits.ANS10 = 0;
  5754  0FDE  1683               	bsf	3,5	;RP0=1, select bank3
  5755  0FDF  1703               	bsf	3,6	;RP1=1, select bank3
  5756  0FE0  1109               	bcf	9,2	;volatile
  5757                           
  5758                           ;do_am.c: 73: (TRISAbits.TRISA4 = 0);
  5759  0FE1  1683               	bsf	3,5	;RP0=1, select bank1
  5760  0FE2  1303               	bcf	3,6	;RP1=0, select bank1
  5761  0FE3  1205               	bcf	5,4	;volatile
  5762                           
  5763                           ;do_am.c: 75: (TRISAbits.TRISA5 = 0);
  5764  0FE4  1285               	bcf	5,5	;volatile
  5765                           
  5766                           ;do_am.c: 76: ANSELbits.ANS4 = 0;
  5767  0FE5  1683               	bsf	3,5	;RP0=1, select bank3
  5768  0FE6  1703               	bsf	3,6	;RP1=1, select bank3
  5769  0FE7  1208               	bcf	8,4	;volatile
  5770                           
  5771                           ;do_am.c: 78: (TRISAbits.TRISA6 = 0);
  5772  0FE8  1683               	bsf	3,5	;RP0=1, select bank1
  5773  0FE9  1303               	bcf	3,6	;RP1=0, select bank1
  5774  0FEA  1305               	bcf	5,6	;volatile
  5775                           
  5776                           ;do_am.c: 80: (TRISAbits.TRISA7 = 0);
  5777  0FEB  1385               	bcf	5,7	;volatile
  5778                           
  5779                           ;do_am.c: 82: RB1 = 1;
  5780  0FEC  1283               	bcf	3,5	;RP0=0, select bank0
  5781  0FED  1303               	bcf	3,6	;RP1=0, select bank0
  5782  0FEE  1486               	bsf	6,1	;volatile
  5783                           
  5784                           ;do_am.c: 85: (TRISBbits.TRISB4 = 1);
  5785  0FEF  1683               	bsf	3,5	;RP0=1, select bank1
  5786  0FF0  1303               	bcf	3,6	;RP1=0, select bank1
  5787  0FF1  1606               	bsf	6,4	;volatile
  5788                           
  5789                           ;do_am.c: 86: ANSELHbits.ANS11 = 0;
  5790  0FF2  1683               	bsf	3,5	;RP0=1, select bank3
  5791  0FF3  1703               	bsf	3,6	;RP1=1, select bank3
  5792  0FF4  1189               	bcf	9,3	;volatile
  5793                           
  5794                           ;do_am.c: 88: (TRISBbits.TRISB6 = 1);
  5795  0FF5  1683               	bsf	3,5	;RP0=1, select bank1
  5796  0FF6  1303               	bcf	3,6	;RP1=0, select bank1
  5797  0FF7  1706               	bsf	6,6	;volatile
  5798                           
  5799                           ;do_am.c: 90: (TRISBbits.TRISB5 = 1);
  5800  0FF8  1686               	bsf	6,5	;volatile
  5801                           
  5802                           ;do_am.c: 91: ANSELHbits.ANS13 = 0;
  5803  0FF9  1683               	bsf	3,5	;RP0=1, select bank3
  5804  0FFA  1703               	bsf	3,6	;RP1=1, select bank3
  5805  0FFB  1289               	bcf	9,5	;volatile
  5806                           
  5807                           ;do_am.c: 93: (TRISBbits.TRISB7 = 1);
  5808  0FFC  1683               	bsf	3,5	;RP0=1, select bank1
  5809  0FFD  1303               	bcf	3,6	;RP1=0, select bank1
  5810  0FFE  1786               	bsf	6,7	;volatile
  5811  0FFF  0008               	return
  5812  1000                     __end_of_IOInit:	
  5813                           
  5814                           	psect	text31
  5815  0D2B                     __ptext31:	
  5816 ;; *************** function _ConnInit *****************
  5817 ;; Defined at:
  5818 ;;		line 38 in file "do_am.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;		None
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;		None
  5823 ;; Return value:  Size  Location     Type
  5824 ;;                  1    wreg      void 
  5825 ;; Registers used:
  5826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5827 ;; Tracked objects:
  5828 ;;		On entry : 0/0
  5829 ;;		On exit  : 0/0
  5830 ;;		Unchanged: 0/0
  5831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5832 ;;      Params:         0       0       0       0       0
  5833 ;;      Locals:         0       0       0       0       0
  5834 ;;      Temps:          0       1       0       0       0
  5835 ;;      Totals:         0       1       0       0       0
  5836 ;;Total ram usage:        1 bytes
  5837 ;; Hardware stack levels used:    1
  5838 ;; Hardware stack levels required when called:    5
  5839 ;; This function calls:
  5840 ;;		_LoadMenuItem
  5841 ;; This function is called by:
  5842 ;;		_main
  5843 ;; This function uses a non-reentrant model
  5844 ;;
  5845                           
  5846                           
  5847                           ;psect for function _ConnInit
  5848  0D2B                     _ConnInit:	
  5849                           
  5850                           ;do_am.c: 40: server_conn.from = LoadMenuItem(0);
  5851                           
  5852                           ;incstack = 0
  5853                           ; Regs used in _ConnInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5854  0D2B  3000               	movlw	0
  5855  0D2C  120A  158A  2504   	fcall	_LoadMenuItem
  5856  0D2F  1283               	bcf	3,5	;RP0=0, select bank0
  5857  0D30  1303               	bcf	3,6	;RP1=0, select bank0
  5858  0D31  00A5               	movwf	??_ConnInit
  5859  0D32  0825               	movf	??_ConnInit,w
  5860  0D33  1683               	bsf	3,5	;RP0=1, select bank1
  5861  0D34  1303               	bcf	3,6	;RP1=0, select bank1
  5862  0D35  00CF               	movwf	_server_conn^(0+128)
  5863                           
  5864                           ;do_am.c: 41: server_conn.to = 8;
  5865  0D36  3008               	movlw	8
  5866  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  5867  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  5868  0D39  00A5               	movwf	??_ConnInit
  5869  0D3A  0825               	movf	??_ConnInit,w
  5870  0D3B  1683               	bsf	3,5	;RP0=1, select bank1
  5871  0D3C  1303               	bcf	3,6	;RP1=0, select bank1
  5872  0D3D  00D0               	movwf	(_server_conn^(0+128)+1)
  5873                           
  5874                           ;do_am.c: 42: server_conn.msgid = 0;
  5875  0D3E  01D1               	clrf	(_server_conn^(0+128)+2)
  5876                           
  5877                           ;do_am.c: 43: server_conn.available = 0;
  5878  0D3F  01D3               	clrf	(_server_conn^(0+128)+4)
  5879  0D40  0008               	return
  5880  0D41                     __end_of_ConnInit:	
  5881                           
  5882                           	psect	text32
  5883  0D04                     __ptext32:	
  5884 ;; *************** function _LoadMenuItem *****************
  5885 ;; Defined at:
  5886 ;;		line 36 in file "menu.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  item            1    wreg     unsigned char 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  item            1    4[BANK0 ] unsigned char 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      unsigned char 
  5893 ;; Registers used:
  5894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5900 ;;      Params:         0       0       0       0       0
  5901 ;;      Locals:         0       1       0       0       0
  5902 ;;      Temps:          0       2       0       0       0
  5903 ;;      Totals:         0       3       0       0       0
  5904 ;;Total ram usage:        3 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    4
  5907 ;; This function calls:
  5908 ;;		_eeprom_read
  5909 ;; This function is called by:
  5910 ;;		_ConnInit
  5911 ;;		_MenuInit
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           
  5916                           ;psect for function _LoadMenuItem
  5917  0D04                     _LoadMenuItem:	
  5918                           
  5919                           ;incstack = 0
  5920                           ; Regs used in _LoadMenuItem: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5921                           ;LoadMenuItem@item stored from wreg
  5922  0D04  1283               	bcf	3,5	;RP0=0, select bank0
  5923  0D05  1303               	bcf	3,6	;RP1=0, select bank0
  5924  0D06  00A4               	movwf	LoadMenuItem@item
  5925                           
  5926                           ;menu.c: 38: g_menu.items[item].value = eeprom_read(item);
  5927  0D07  0824               	movf	LoadMenuItem@item,w
  5928  0D08  120A  158A  2580   	fcall	_eeprom_read
  5929  0D0B  1283               	bcf	3,5	;RP0=0, select bank0
  5930  0D0C  1303               	bcf	3,6	;RP1=0, select bank0
  5931  0D0D  00A2               	movwf	??_LoadMenuItem
  5932  0D0E  0824               	movf	LoadMenuItem@item,w
  5933  0D0F  00A3               	movwf	??_LoadMenuItem+1
  5934  0D10  0723               	addwf	??_LoadMenuItem+1,w
  5935  0D11  3EC3               	addlw	(low (_g_menu| 0))& (0+255)
  5936  0D12  0084               	movwf	4
  5937  0D13  0822               	movf	??_LoadMenuItem,w
  5938  0D14  1383               	bcf	3,7	;select IRP bank1
  5939  0D15  0080               	movwf	0
  5940  0D16  0008               	return
  5941  0D17                     __end_of_LoadMenuItem:	
  5942                           
  5943                           	psect	text33
  5944  0D80                     __ptext33:	
  5945 ;; *************** function _eeprom_read *****************
  5946 ;; Defined at:
  5947 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eeread.c"
  5948 ;; Parameters:    Size  Location     Type
  5949 ;;  addr            1    wreg     unsigned char 
  5950 ;; Auto vars:     Size  Location     Type
  5951 ;;  addr            1    1[BANK0 ] unsigned char 
  5952 ;; Return value:  Size  Location     Type
  5953 ;;                  1    wreg      unsigned char 
  5954 ;; Registers used:
  5955 ;;		wreg, status,2, status,0
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5961 ;;      Params:         0       0       0       0       0
  5962 ;;      Locals:         0       1       0       0       0
  5963 ;;      Temps:          0       1       0       0       0
  5964 ;;      Totals:         0       2       0       0       0
  5965 ;;Total ram usage:        2 bytes
  5966 ;; Hardware stack levels used:    1
  5967 ;; Hardware stack levels required when called:    3
  5968 ;; This function calls:
  5969 ;;		Nothing
  5970 ;; This function is called by:
  5971 ;;		_LoadMenuItem
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           
  5976                           ;psect for function _eeprom_read
  5977  0D80                     _eeprom_read:	
  5978                           
  5979                           ;incstack = 0
  5980                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  5981                           ;eeprom_read@addr stored from wreg
  5982  0D80  1283               	bcf	3,5	;RP0=0, select bank0
  5983  0D81  1303               	bcf	3,6	;RP1=0, select bank0
  5984  0D82  00A1               	movwf	eeprom_read@addr
  5985  0D83  2D86               	goto	l457
  5986  0D84                     u2081:	
  5987  0D84  1283               	bcf	3,5	;RP0=0, select bank0
  5988  0D85  1303               	bcf	3,6	;RP1=0, select bank0
  5989  0D86                     l457:	
  5990  0D86  0064               	clrwdt	;# 
  5991  0D87  1683               	bsf	3,5	;RP0=1, select bank3
  5992  0D88  1703               	bsf	3,6	;RP1=1, select bank3
  5993  0D89  188C               	btfsc	12,1	;volsfr
  5994  0D8A  2D84               	goto	u2081
  5995  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  5996  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  5997  0D8D  0821               	movf	eeprom_read@addr,w
  5998  0D8E  1283               	bcf	3,5	;RP0=0, select bank2
  5999  0D8F  1703               	bsf	3,6	;RP1=1, select bank2
  6000  0D90  008D               	movwf	13	;volatile
  6001  0D91  303F               	movlw	63
  6002  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  6003  0D93  1303               	bcf	3,6	;RP1=0, select bank0
  6004  0D94  00A0               	movwf	??_eeprom_read
  6005  0D95  0820               	movf	??_eeprom_read,w
  6006  0D96  1683               	bsf	3,5	;RP0=1, select bank3
  6007  0D97  1703               	bsf	3,6	;RP1=1, select bank3
  6008  0D98  058C               	andwf	12,f	;volsfr
  6009  0D99  140C               	bsf	12,0	;volsfr
  6010  0D9A  1003               	clrc
  6011  0D9B  180C               	btfsc	12,0	;volsfr
  6012  0D9C  1403               	setc
  6013  0D9D  3000               	movlw	0
  6014  0D9E  1803               	skipnc
  6015  0D9F  3001               	movlw	1
  6016  0DA0  1283               	bcf	3,5	;RP0=0, select bank2
  6017  0DA1  1703               	bsf	3,6	;RP1=1, select bank2
  6018  0DA2  080C               	movf	12,w	;volatile
  6019  0DA3  0008               	return
  6020  0DA4                     __end_of_eeprom_read:	
  6021                           
  6022                           	psect	text34
  6023  0D17                     __ptext34:	
  6024 ;; *************** function _ADCInit *****************
  6025 ;; Defined at:
  6026 ;;		line 7 in file "adc_pic16.c"
  6027 ;; Parameters:    Size  Location     Type
  6028 ;;		None
  6029 ;; Auto vars:     Size  Location     Type
  6030 ;;		None
  6031 ;; Return value:  Size  Location     Type
  6032 ;;                  1    wreg      void 
  6033 ;; Registers used:
  6034 ;;		wreg, status,2, status,0
  6035 ;; Tracked objects:
  6036 ;;		On entry : 0/0
  6037 ;;		On exit  : 0/0
  6038 ;;		Unchanged: 0/0
  6039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6040 ;;      Params:         0       0       0       0       0
  6041 ;;      Locals:         0       0       0       0       0
  6042 ;;      Temps:          0       0       0       0       0
  6043 ;;      Totals:         0       0       0       0       0
  6044 ;;Total ram usage:        0 bytes
  6045 ;; Hardware stack levels used:    1
  6046 ;; Hardware stack levels required when called:    3
  6047 ;; This function calls:
  6048 ;;		Nothing
  6049 ;; This function is called by:
  6050 ;;		_main
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           
  6055                           ;psect for function _ADCInit
  6056  0D17                     _ADCInit:	
  6057                           
  6058                           ;adc_pic16.c: 10: TRISBbits.TRISB5 = 1;
  6059                           
  6060                           ;incstack = 0
  6061                           ; Regs used in _ADCInit: [wreg+status,2+status,0]
  6062  0D17  1683               	bsf	3,5	;RP0=1, select bank1
  6063  0D18  1303               	bcf	3,6	;RP1=0, select bank1
  6064  0D19  1686               	bsf	6,5	;volatile
  6065                           
  6066                           ;adc_pic16.c: 11: ANSELHbits.ANS13 = 1;
  6067  0D1A  1683               	bsf	3,5	;RP0=1, select bank3
  6068  0D1B  1703               	bsf	3,6	;RP1=1, select bank3
  6069  0D1C  1689               	bsf	9,5	;volatile
  6070                           
  6071                           ;adc_pic16.c: 17: ADCON1bits.VCFG0 = 0;
  6072  0D1D  1683               	bsf	3,5	;RP0=1, select bank1
  6073  0D1E  1303               	bcf	3,6	;RP1=0, select bank1
  6074  0D1F  121F               	bcf	31,4	;volatile
  6075                           
  6076                           ;adc_pic16.c: 19: ADCON0bits.ADCS = 0b11;
  6077  0D20  30C0               	movlw	192
  6078  0D21  1283               	bcf	3,5	;RP0=0, select bank0
  6079  0D22  1303               	bcf	3,6	;RP1=0, select bank0
  6080  0D23  049F               	iorwf	31,f	;volatile
  6081                           
  6082                           ;adc_pic16.c: 22: ADCON1bits.ADFM = 1;
  6083  0D24  1683               	bsf	3,5	;RP0=1, select bank1
  6084  0D25  1303               	bcf	3,6	;RP1=0, select bank1
  6085  0D26  179F               	bsf	31,7	;volatile
  6086                           
  6087                           ;adc_pic16.c: 24: ADCON0bits.ADON = 1;
  6088  0D27  1283               	bcf	3,5	;RP0=0, select bank0
  6089  0D28  1303               	bcf	3,6	;RP1=0, select bank0
  6090  0D29  141F               	bsf	31,0	;volatile
  6091  0D2A  0008               	return
  6092  0D2B                     __end_of_ADCInit:	
  6093                           
  6094                           	psect	text35
  6095  0F32                     __ptext35:	
  6096 ;; *************** function _ISR *****************
  6097 ;; Defined at:
  6098 ;;		line 97 in file "do_am.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;		None
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;  byte            1   11[COMMON] PTR struct .
  6103 ;;		 -> ISR@value(1), 
  6104 ;;  value           1   10[COMMON] unsigned char 
  6105 ;; Return value:  Size  Location     Type
  6106 ;;                  1    wreg      void 
  6107 ;; Registers used:
  6108 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6109 ;; Tracked objects:
  6110 ;;		On entry : 0/0
  6111 ;;		On exit  : 0/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6114 ;;      Params:         0       0       0       0       0
  6115 ;;      Locals:         2       0       0       0       0
  6116 ;;      Temps:          5       0       0       0       0
  6117 ;;      Totals:         7       0       0       0       0
  6118 ;;Total ram usage:        7 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; Hardware stack levels required when called:    2
  6121 ;; This function calls:
  6122 ;;		_receive_input
  6123 ;; This function is called by:
  6124 ;;		Interrupt level 1
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           
  6129                           ;psect for function _ISR
  6130  0F32                     _ISR:	
  6131                           
  6132                           ;do_am.c: 99: if(INTCONbits.INTF == 1)
  6133  0F32  1C8B               	btfss	11,1	;volatile
  6134  0F33  2F5A               	goto	i1l274
  6135                           
  6136                           ;do_am.c: 100: {
  6137                           ;do_am.c: 101: { uint8_t value; { value = 0; BITbits_t *byte = (BITbits_t *)&value; byte
      +                          ->B0 = RA0; byte->B1 = RA1; byte->B2 = RA2; byte->B3 = RA3; }; receive_input(value); };
  6138  0F34  01FA               	clrf	ISR@value
  6139  0F35  307A               	movlw	(low (ISR@value| 0))& (0+255)
  6140  0F36  00F5               	movwf	??_ISR
  6141  0F37  0875               	movf	??_ISR,w
  6142  0F38  00FB               	movwf	ISR@byte
  6143  0F39  087B               	movf	ISR@byte,w
  6144  0F3A  0084               	movwf	4
  6145  0F3B  1000               	bcf	0,0
  6146  0F3C  1805               	btfsc	5,0	;volatile
  6147  0F3D  1400               	bsf	0,0
  6148  0F3E  087B               	movf	ISR@byte,w
  6149  0F3F  0084               	movwf	4
  6150  0F40  1080               	bcf	0,1
  6151  0F41  1283               	bcf	3,5	;RP0=0, select bank0
  6152  0F42  1303               	bcf	3,6	;RP1=0, select bank0
  6153  0F43  1885               	btfsc	5,1	;volatile
  6154  0F44  1480               	bsf	0,1
  6155  0F45  087B               	movf	ISR@byte,w
  6156  0F46  0084               	movwf	4
  6157  0F47  1100               	bcf	0,2
  6158  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  6159  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  6160  0F4A  1905               	btfsc	5,2	;volatile
  6161  0F4B  1500               	bsf	0,2
  6162  0F4C  087B               	movf	ISR@byte,w
  6163  0F4D  0084               	movwf	4
  6164  0F4E  1180               	bcf	0,3
  6165  0F4F  1283               	bcf	3,5	;RP0=0, select bank0
  6166  0F50  1303               	bcf	3,6	;RP1=0, select bank0
  6167  0F51  1985               	btfsc	5,3	;volatile
  6168  0F52  1580               	bsf	0,3
  6169  0F53  087A               	movf	ISR@value,w
  6170  0F54  120A  118A  2458  120A  158A  	fcall	_receive_input
  6171                           
  6172                           ;do_am.c: 102: INTCONbits.INTF = 0;
  6173  0F59  108B               	bcf	11,1	;volatile
  6174  0F5A                     i1l274:	
  6175  0F5A  0879               	movf	??_ISR+4,w
  6176  0F5B  1283               	bcf	3,5	;RP0=0, select bank0
  6177  0F5C  1303               	bcf	3,6	;RP1=0, select bank0
  6178  0F5D  00FF               	movwf	127
  6179  0F5E  0878               	movf	??_ISR+3,w
  6180  0F5F  008A               	movwf	10
  6181  0F60  0877               	movf	??_ISR+2,w
  6182  0F61  0084               	movwf	4
  6183  0F62  0E76               	swapf	(??_ISR+1)^(0+-128),w
  6184  0F63  0083               	movwf	3
  6185  0F64  0EFE               	swapf	126,f
  6186  0F65  0E7E               	swapf	126,w
  6187  0F66  0009               	retfie
  6188  0F67                     __end_of_ISR:	
  6189                           
  6190                           	psect	intentry
  6191  0004                     __pintentry:	
  6192                           ;incstack = 0
  6193 ;; hardware stack exceeded
  6194                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6195                           
  6196  0004                     interrupt_function:	
  6197  007E                     saved_w	set	btemp
  6198  0004  00FE               	movwf	btemp
  6199  0005  0E03               	swapf	3,w
  6200  0006  00F6               	movwf	??_ISR+1
  6201  0007  0804               	movf	4,w
  6202  0008  00F7               	movwf	??_ISR+2
  6203  0009  080A               	movf	10,w
  6204  000A  00F8               	movwf	??_ISR+3
  6205  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6206  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6207  000D  087F               	movf	btemp+1,w
  6208  000E  00F9               	movwf	??_ISR+4
  6209  000F  120A  158A  2F32   	ljmp	_ISR
  6210                           
  6211                           	psect	text36
  6212  0458                     __ptext36:	
  6213 ;; *************** function _receive_input *****************
  6214 ;; Defined at:
  6215 ;;		line 41 in file "circle_buffer.h"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  value           1    wreg     unsigned char 
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;  value           1    2[COMMON] unsigned char 
  6220 ;;  byte2           1    4[COMMON] PTR struct .
  6221 ;;		 -> receive_input@value(1), 
  6222 ;;  byte1           1    3[COMMON] PTR struct .
  6223 ;;		 -> buffer_rcv(32), 
  6224 ;; Return value:  Size  Location     Type
  6225 ;;                  1    wreg      void 
  6226 ;; Registers used:
  6227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6228 ;; Tracked objects:
  6229 ;;		On entry : 0/0
  6230 ;;		On exit  : 0/0
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6233 ;;      Params:         0       0       0       0       0
  6234 ;;      Locals:         3       0       0       0       0
  6235 ;;      Temps:          1       0       0       0       0
  6236 ;;      Totals:         4       0       0       0       0
  6237 ;;Total ram usage:        4 bytes
  6238 ;; Hardware stack levels used:    1
  6239 ;; Hardware stack levels required when called:    1
  6240 ;; This function calls:
  6241 ;;		i1_get_next_index
  6242 ;; This function is called by:
  6243 ;;		_ISR
  6244 ;; This function uses a non-reentrant model
  6245 ;;
  6246                           
  6247                           
  6248                           ;psect for function _receive_input
  6249  0458                     _receive_input:	
  6250                           
  6251                           ;incstack = 0
  6252 ;; hardware stack exceeded
  6253                           ; Regs used in _receive_input: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6254                           ;receive_input@value stored from wreg
  6255  0458  00F2               	movwf	receive_input@value
  6256                           
  6257                           ;circle_buffer.h: 43: { BITbits_t *byte1 = (BITbits_t *)&buffer_rcv[end_index_rcv]; BITb
      +                          its_t *byte2 = (BITbits_t *)&value; if(low_half_rcv == 1) { byte1->B0 = byte2->B0; byte1
      +                          ->B1 = byte2->B1; byte1->B2 = byte2->B2; byte1->B3 = byte2->B3; } else { byte1->B4 = byt
      +                          e2->B0; 
  6258  0459  087C               	movf	_end_index_rcv,w
  6259  045A  3E90               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  6260  045B  00F1               	movwf	??_receive_input
  6261  045C  0871               	movf	??_receive_input,w
  6262  045D  00F3               	movwf	receive_input@byte1
  6263  045E  3072               	movlw	(low (receive_input@value| 0))& (0+255)
  6264  045F  00F1               	movwf	??_receive_input
  6265  0460  0871               	movf	??_receive_input,w
  6266  0461  00F4               	movwf	receive_input@byte2
  6267  0462  037D               	decf	_low_half_rcv,w
  6268  0463  1D03               	btfss	3,2
  6269  0464  2C92               	goto	i1l2443
  6270  0465  0874               	movf	receive_input@byte2,w
  6271  0466  0084               	movwf	4
  6272  0467  1003               	clrc
  6273  0468  1800               	btfsc	0,0
  6274  0469  1403               	setc
  6275  046A  0873               	movf	receive_input@byte1,w
  6276  046B  0084               	movwf	4
  6277  046C  1783               	bsf	3,7	;select IRP bank2
  6278  046D  1000               	bcf	0,0
  6279  046E  1803               	btfsc	3,0
  6280  046F  1400               	bsf	0,0
  6281  0470  0874               	movf	receive_input@byte2,w
  6282  0471  0084               	movwf	4
  6283  0472  1003               	clrc
  6284  0473  1880               	btfsc	0,1
  6285  0474  1403               	setc
  6286  0475  0873               	movf	receive_input@byte1,w
  6287  0476  0084               	movwf	4
  6288  0477  1783               	bsf	3,7	;select IRP bank2
  6289  0478  1080               	bcf	0,1
  6290  0479  1803               	btfsc	3,0
  6291  047A  1480               	bsf	0,1
  6292  047B  0874               	movf	receive_input@byte2,w
  6293  047C  0084               	movwf	4
  6294  047D  1003               	clrc
  6295  047E  1900               	btfsc	0,2
  6296  047F  1403               	setc
  6297  0480  0873               	movf	receive_input@byte1,w
  6298  0481  0084               	movwf	4
  6299  0482  1783               	bsf	3,7	;select IRP bank2
  6300  0483  1100               	bcf	0,2
  6301  0484  1803               	btfsc	3,0
  6302  0485  1500               	bsf	0,2
  6303  0486  0874               	movf	receive_input@byte2,w
  6304  0487  0084               	movwf	4
  6305  0488  1003               	clrc
  6306  0489  1980               	btfsc	0,3
  6307  048A  1403               	setc
  6308  048B  0873               	movf	receive_input@byte1,w
  6309  048C  0084               	movwf	4
  6310  048D  1783               	bsf	3,7	;select IRP bank2
  6311  048E  1180               	bcf	0,3
  6312  048F  1803               	btfsc	3,0
  6313  0490  1580               	bsf	0,3
  6314  0491  2CBE               	goto	i1l2445
  6315  0492                     i1l2443:	
  6316  0492  0874               	movf	receive_input@byte2,w
  6317  0493  0084               	movwf	4
  6318  0494  1003               	clrc
  6319  0495  1800               	btfsc	0,0
  6320  0496  1403               	setc
  6321  0497  0873               	movf	receive_input@byte1,w
  6322  0498  0084               	movwf	4
  6323  0499  1783               	bsf	3,7	;select IRP bank2
  6324  049A  1200               	bcf	0,4
  6325  049B  1803               	btfsc	3,0
  6326  049C  1600               	bsf	0,4
  6327  049D  0874               	movf	receive_input@byte2,w
  6328  049E  0084               	movwf	4
  6329  049F  1003               	clrc
  6330  04A0  1880               	btfsc	0,1
  6331  04A1  1403               	setc
  6332  04A2  0873               	movf	receive_input@byte1,w
  6333  04A3  0084               	movwf	4
  6334  04A4  1783               	bsf	3,7	;select IRP bank2
  6335  04A5  1280               	bcf	0,5
  6336  04A6  1803               	btfsc	3,0
  6337  04A7  1680               	bsf	0,5
  6338  04A8  0874               	movf	receive_input@byte2,w
  6339  04A9  0084               	movwf	4
  6340  04AA  1003               	clrc
  6341  04AB  1900               	btfsc	0,2
  6342  04AC  1403               	setc
  6343  04AD  0873               	movf	receive_input@byte1,w
  6344  04AE  0084               	movwf	4
  6345  04AF  1783               	bsf	3,7	;select IRP bank2
  6346  04B0  1300               	bcf	0,6
  6347  04B1  1803               	btfsc	3,0
  6348  04B2  1700               	bsf	0,6
  6349  04B3  0874               	movf	receive_input@byte2,w
  6350  04B4  0084               	movwf	4
  6351  04B5  1003               	clrc
  6352  04B6  1980               	btfsc	0,3
  6353  04B7  1403               	setc
  6354  04B8  0873               	movf	receive_input@byte1,w
  6355  04B9  0084               	movwf	4
  6356  04BA  1783               	bsf	3,7	;select IRP bank2
  6357  04BB  1380               	bcf	0,7
  6358  04BC  1803               	btfsc	3,0
  6359  04BD  1780               	bsf	0,7
  6360  04BE                     i1l2445:	
  6361                           
  6362                           ;circle_buffer.h: 44: if(low_half_rcv == 1)
  6363  04BE  037D               	decf	_low_half_rcv,w
  6364  04BF  1D03               	btfss	3,2
  6365  04C0  2CC3               	goto	i1l138
  6366                           
  6367                           ;circle_buffer.h: 45: {
  6368                           ;circle_buffer.h: 46: low_half_rcv = 0;
  6369  04C1  01FD               	clrf	_low_half_rcv
  6370                           
  6371                           ;circle_buffer.h: 47: }
  6372  04C2  0008               	return
  6373  04C3                     i1l138:	
  6374                           
  6375                           ;circle_buffer.h: 48: else
  6376                           ;circle_buffer.h: 49: {
  6377                           ;circle_buffer.h: 50: low_half_rcv = 1;
  6378  04C3  01FD               	clrf	_low_half_rcv
  6379  04C4  0AFD               	incf	_low_half_rcv,f
  6380                           
  6381                           ;circle_buffer.h: 51: end_index_rcv = get_next_index(end_index_rcv);
  6382  04C5  087C               	movf	_end_index_rcv,w
  6383  04C6  120A  158A  248C   	fcall	i1_get_next_index
  6384  04C9  00F1               	movwf	??_receive_input
  6385  04CA  0871               	movf	??_receive_input,w
  6386  04CB  00FC               	movwf	_end_index_rcv
  6387  04CC  0008               	return
  6388  04CD                     __end_of_receive_input:	
  6389                           
  6390                           	psect	text37
  6391  0C8C                     __ptext37:	
  6392 ;; *************** function i1_get_next_index *****************
  6393 ;; Defined at:
  6394 ;;		line 30 in file "circle_buffer.h"
  6395 ;; Parameters:    Size  Location     Type
  6396 ;;  index           1    wreg     unsigned char 
  6397 ;; Auto vars:     Size  Location     Type
  6398 ;;  index           1    0[COMMON] unsigned char 
  6399 ;; Return value:  Size  Location     Type
  6400 ;;                  1    wreg      unsigned char 
  6401 ;; Registers used:
  6402 ;;		wreg, status,2, status,0
  6403 ;; Tracked objects:
  6404 ;;		On entry : 0/0
  6405 ;;		On exit  : 0/0
  6406 ;;		Unchanged: 0/0
  6407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6408 ;;      Params:         0       0       0       0       0
  6409 ;;      Locals:         1       0       0       0       0
  6410 ;;      Temps:          0       0       0       0       0
  6411 ;;      Totals:         1       0       0       0       0
  6412 ;;Total ram usage:        1 bytes
  6413 ;; Hardware stack levels used:    1
  6414 ;; This function calls:
  6415 ;;		Nothing
  6416 ;; This function is called by:
  6417 ;;		_receive_input
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           
  6422                           ;psect for function i1_get_next_index
  6423  0C8C                     i1_get_next_index:	
  6424                           
  6425                           ;incstack = 0
  6426 ;; hardware stack exceeded
  6427                           ; Regs used in i1_get_next_index: [wreg+status,2+status,0]
  6428                           ;i1get_next_index@index stored from wreg
  6429  0C8C  00F0               	movwf	i1get_next_index@index
  6430                           
  6431                           ;circle_buffer.h: 32: if(index == 32 - 1)
  6432  0C8D  301F               	movlw	31
  6433  0C8E  0670               	xorwf	i1get_next_index@index,w
  6434  0C8F  1D03               	btfss	3,2
  6435  0C90  2C93               	goto	i1l2423
  6436                           
  6437                           ;circle_buffer.h: 33: {
  6438                           ;circle_buffer.h: 34: return 0;
  6439  0C91  3000               	movlw	0
  6440                           
  6441                           ;circle_buffer.h: 35: }
  6442  0C92  0008               	return
  6443  0C93                     i1l2423:	
  6444                           
  6445                           ;circle_buffer.h: 36: else
  6446                           ;circle_buffer.h: 37: {
  6447                           ;circle_buffer.h: 38: return (index + 1);
  6448  0C93  0870               	movf	i1get_next_index@index,w
  6449  0C94  3E01               	addlw	1
  6450  0C95  0008               	return
  6451  0C96                     __end_ofi1_get_next_index:	
  6452  007E                     btemp	set	126	;btemp
  6453  007E                     wtemp	set	126
  6454  007E                     wtemp0	set	126
  6455  0080                     wtemp1	set	128
  6456  0082                     wtemp2	set	130
  6457  0084                     wtemp3	set	132
  6458  0086                     wtemp4	set	134
  6459  0088                     wtemp5	set	136
  6460  007F                     wtemp6	set	127
  6461  007E                     ttemp	set	126
  6462  007E                     ttemp0	set	126
  6463  0081                     ttemp1	set	129
  6464  0084                     ttemp2	set	132
  6465  0087                     ttemp3	set	135
  6466  007F                     ttemp4	set	127
  6467  007E                     ltemp	set	126
  6468  007E                     ltemp0	set	126
  6469  0082                     ltemp1	set	130
  6470  0086                     ltemp2	set	134
  6471  0080                     ltemp3	set	128


Data Sizes:
    Strings     54
    Constant    18
    Data        19
    BSS         106
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     66      68
    BANK1            80     35      69
    BANK3            96      0      87
    BANK2            96      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(1) Largest target is 23
		 -> handle_HEART_BEAT_RQT_CMD@msgo(BANK1[23]), create_HEART_BEAT_RSP_CMD@rqt(BANK0[1]), send_REG_ID_RQT_CMD_and_wait@msg(BANK0[23]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 23
		 -> handle_HEART_BEAT_RQT_CMD@msgo(BANK1[23]), create_HEART_BEAT_RSP_CMD@rqt(BANK0[1]), send_REG_ID_RQT_CMD_and_wait@msg(BANK0[23]), 

    memcpy@s1	PTR const void  size(2) Largest target is 23
		 -> msg_rcv.data(BANK3[16]), create_HEART_BEAT_RSP_CMD@rsp(BANK0[1]), msg_rcv(BANK3[23]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 23
		 -> msg_rcv.data(BANK3[16]), create_HEART_BEAT_RSP_CMD@rsp(BANK0[1]), msg_rcv(BANK3[23]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_13(CODE[14]), STR_11(CODE[20]), STR_9(CODE[15]), STR_7(CODE[12]), 
		 -> STR_5(CODE[9]), STR_3(CODE[6]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> dump_conn@s(BANK1[32]), sdebug(BANK3[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S862$name	PTR unsigned char  size(1) Largest target is 5
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 

    g_menu.items.name	PTR unsigned char  size(1) Largest target is 5
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_19(CODE[1]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[1]), dump_conn@s(BANK1[32]), STR_12(CODE[1]), 
		 -> STR_10(CODE[1]), STR_8(CODE[1]), STR_6(CODE[1]), STR_4(CODE[1]), 
		 -> STR_2(CODE[1]), sdebug(BANK3[32]), 

    ISR@byte	PTR struct . size(1) Largest target is 1
		 -> ISR@value(COMMON[1]), 

    handle_HEART_BEAT_RQT_CMD@pmsgi	PTR struct . size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    create_HEART_BEAT_RSP_CMD@pmsgo	PTR struct . size(1) Largest target is 23
		 -> handle_HEART_BEAT_RQT_CMD@msgo(BANK1[23]), 

    create_HEART_BEAT_RSP_CMD@pconn	PTR struct . size(1) Largest target is 5
		 -> server_conn(BANK1[5]), 

    create_HEART_BEAT_RSP_CMD@pmsgi	PTR struct . size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    extract_HEART_BEAT_RQT_CMD@pmsg	PTR const struct . size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    extract_HEART_BEAT_RQT_CMD@prqt	PTR struct . size(1) Largest target is 1
		 -> create_HEART_BEAT_RSP_CMD@rqt(BANK0[1]), 

    create_cmd@cmd_data	PTR const void  size(1) Largest target is 1
		 -> create_HEART_BEAT_RSP_CMD@rsp(BANK0[1]), 

    create_cmd@pconn	PTR struct . size(1) Largest target is 5
		 -> server_conn(BANK1[5]), 

    create_cmd@pmsg	PTR struct . size(1) Largest target is 23
		 -> handle_HEART_BEAT_RQT_CMD@msgo(BANK1[23]), send_REG_ID_RQT_CMD_and_wait@msg(BANK0[23]), 

    dump_conn@pconn	PTR struct . size(1) Largest target is 5
		 -> server_conn(BANK1[5]), 

    get_msg@pmsg	PTR struct . size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    get_msg@pstr	PTR unsigned char  size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    pstr_rcv	PTR unsigned char  size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    pmsg_rcv	PTR struct . size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    dump_msg@pmsg	PTR struct . size(2) Largest target is 23
		 -> handle_HEART_BEAT_RQT_CMD@msgo(BANK1[23]), msg_rcv(BANK3[23]), 

    sp__memcpy	PTR void  size(1) Largest target is 23
		 -> handle_HEART_BEAT_RQT_CMD@msgo(BANK1[23]), create_HEART_BEAT_RSP_CMD@rqt(BANK0[1]), send_REG_ID_RQT_CMD_and_wait@msg(BANK0[23]), 

    compose@data	PTR unsigned char  size(1) Largest target is 1
		 -> create_HEART_BEAT_RSP_CMD@rsp(BANK0[1]), 

    compose@pmsg	PTR struct . size(1) Largest target is 23
		 -> handle_HEART_BEAT_RQT_CMD@msgo(BANK1[23]), send_REG_ID_RQT_CMD_and_wait@msg(BANK0[23]), 

    crc_calculate@pmsg	PTR struct . size(2) Largest target is 23
		 -> handle_HEART_BEAT_RQT_CMD@msgo(BANK1[23]), send_REG_ID_RQT_CMD_and_wait@msg(BANK0[23]), msg_rcv(BANK3[23]), 

    send_msg@pmsg	PTR struct . size(1) Largest target is 23
		 -> handle_HEART_BEAT_RQT_CMD@msgo(BANK1[23]), send_REG_ID_RQT_CMD_and_wait@msg(BANK0[23]), 

    send_msg@s	PTR unsigned char  size(1) Largest target is 23
		 -> handle_HEART_BEAT_RQT_CMD@msgo(BANK1[23]), send_REG_ID_RQT_CMD_and_wait@msg(BANK0[23]), 

    get_msg_index@end_index	PTR unsigned char  size(1) Largest target is 1
		 -> get_msg@end_index(BANK0[1]), 

    get_msg_index@start_index	PTR unsigned char  size(1) Largest target is 1
		 -> get_msg@start_index(BANK0[1]), 

    receive_input@byte2	PTR struct . size(1) Largest target is 1
		 -> receive_input@value(COMMON[1]), 

    receive_input@byte1	PTR struct . size(1) Largest target is 32
		 -> buffer_rcv(BANK3[32]), 

    send_string@str	PTR unsigned char  size(2) Largest target is 23
		 -> handle_HEART_BEAT_RQT_CMD@msgo(BANK1[23]), send_REG_ID_RQT_CMD_and_wait@msg(BANK0[23]), stop_mark(CODE[4]), start_mark(CODE[4]), 

    send_half_byte@byte	PTR struct . size(1) Largest target is 1
		 -> send_half_byte@value(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_receive_input
    _receive_input->i1_get_next_index

Critical Paths under _main in BANK0

    _handle_received_cmds->_handle_HEART_BEAT_RQT_CMD
    _handle_HEART_BEAT_RQT_CMD->_dump_msg
    _send_msg->_send_string
    _send_string->_send_byte
    _send_byte->_send_half_byte
    _dump_msg->_sprintf
    _create_HEART_BEAT_RSP_CMD->_create_cmd
    _extract_HEART_BEAT_RQT_CMD->_memcpy
    _create_cmd->_compose
    _compose->_crc_calculate
    _compose->_memcpy
    _get_msg->_get_msg_index
    _get_msg_index->_get_plus_index
    _dump_conn->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCDWriteString->_LCDByte
    _LCDGotoXY->_LCDByte
    _MenuInit->_LoadMenuItem
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop
    _ConnInit->_LoadMenuItem
    _LoadMenuItem->_eeprom_read

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_dump_conn
    _handle_received_cmds->_handle_HEART_BEAT_RQT_CMD

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   36811
                                             65 BANK0      1     1      0
                            _ADCInit
                           _ConnInit
                             _IOInit
                            _LCDByte
                            _LCDInit
                           _MenuInit
                          _dump_conn
               _handle_received_cmds
 ---------------------------------------------------------------------------------
 (1) _handle_received_cmds                                 0     0      0   20291
                            _get_msg
          _handle_HEART_BEAT_RQT_CMD
 ---------------------------------------------------------------------------------
 (2) _handle_HEART_BEAT_RQT_CMD                           26    26      0   17947
                                             63 BANK0      2     2      0
                                              0 BANK1     24    24      0
          _create_HEART_BEAT_RSP_CMD
                           _dump_msg
                           _send_msg
 ---------------------------------------------------------------------------------
 (3) _send_msg                                             3     3      0    1307
                                             12 BANK0      3     3      0
                        _send_string
 ---------------------------------------------------------------------------------
 (4) _send_string                                          5     2      3    1145
                                              7 BANK0      5     2      3
                          _send_byte
 ---------------------------------------------------------------------------------
 (5) _send_byte                                            3     3      0     553
                                              4 BANK0      3     3      0
                     _send_half_byte
 ---------------------------------------------------------------------------------
 (6) _send_half_byte                                       4     3      1     491
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _dump_msg                                            25    23      2   11883
                                             38 BANK0     25    23      2
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _create_HEART_BEAT_RSP_CMD                            9     7      2    4513
                                             32 BANK0      9     7      2
                         _create_cmd
         _extract_HEART_BEAT_RQT_CMD
 ---------------------------------------------------------------------------------
 (4) _extract_HEART_BEAT_RQT_CMD                           2     1      1     907
                                              9 BANK0      2     1      1
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _create_cmd                                          12     7      5    3190
                                             20 BANK0     12     7      5
                            _compose
 ---------------------------------------------------------------------------------
 (5) _compose                                             11     5      6    2137
                                              9 BANK0     11     5      6
                      _crc_calculate
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                               9     5      4     735
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (6) _crc_calculate                                        9     7      2     408
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (2) _get_msg                                              8     8      0    2344
                                              8 BANK0      8     8      0
                       _get_distance
                      _get_msg_index
                     _get_next_index
 ---------------------------------------------------------------------------------
 (3) _get_msg_index                                        5     4      1    1658
                                              3 BANK0      5     4      1
                       _get_distance
                    _get_minus_index
                     _get_next_index
                     _get_plus_index
 ---------------------------------------------------------------------------------
 (4) _get_plus_index                                       3     2      1     580
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _get_next_index                                       1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_minus_index                                      2     1      1     196
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (4) _get_distance                                         2     1      1     324
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _dump_conn                                           44    44      0   11881
                                             38 BANK0      9     9      0
                                              0 BANK1     35    35      0
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             32    17     15    2275
                                             14 BANK0     24     9     15
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     386
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     395
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _LCDWriteString                                       5     3      2    3634
                                             12 BANK0      5     3      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (4) _LCDGotoXY                                            3     2      1    3513
                                             12 BANK0      3     2      1
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _MenuInit                                             1     1      0      66
                                              5 BANK0      1     1      0
                       _LoadMenuItem
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              4     4      0    2405
                                             12 BANK0      4     4      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (5) _LCDByte                                              7     6      1    2099
                                              5 BANK0      7     6      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (6) _LCDBusyLoop                                          5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _IOInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConnInit                                             1     1      0      66
                                              5 BANK0      1     1      0
                       _LoadMenuItem
 ---------------------------------------------------------------------------------
 (2) _LoadMenuItem                                         3     3      0      66
                                              2 BANK0      3     3      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  7     7      0     566
                                              5 COMMON     7     7      0
                      _receive_input
 ---------------------------------------------------------------------------------
 (8) _receive_input                                        4     4      0     428
                                              1 COMMON     4     4      0
                   i1_get_next_index
 ---------------------------------------------------------------------------------
 (9) i1_get_next_index                                     1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _ConnInit
     _LoadMenuItem
       _eeprom_read
   _IOInit
   _LCDByte
     _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _MenuInit
     _LoadMenuItem
       _eeprom_read
   _dump_conn
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _handle_received_cmds
     _get_msg
       _get_distance
       _get_msg_index
         _get_distance
         _get_minus_index
         _get_next_index
         _get_plus_index
       _get_next_index
     _handle_HEART_BEAT_RQT_CMD
       _create_HEART_BEAT_RSP_CMD
         _create_cmd
           _compose
             _crc_calculate
             _memcpy
         _extract_HEART_BEAT_RQT_CMD
           _memcpy
       _dump_msg
         _LCDByte
           _LCDBusyLoop
         _LCDGotoXY
           _LCDByte
             _LCDBusyLoop
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _send_msg
         _send_string
           _send_byte
             _send_half_byte

 _ISR (ROOT)
   _receive_input
     i1_get_next_index

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      57       9       90.6%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     23      45       7       86.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     42      44       5       85.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      EE      12        0.0%
ABS                  0      0      EE       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Jul 09 02:18:01 2016

                       ?_LCDBusyLoop 0070                           __CFG_CP$ON 0000  
                                  pc 0002                       ?_get_msg_index 0023  
                   get_msg@end_index 002E                                   _RD 0C60  
                        __CFG_CPD$ON 0000                                   _WR 0C61  
                                 fsr 0004   __size_of_create_HEART_BEAT_RSP_CMD 002E  
                     create_cmd@pmsg 0038                      ?_get_next_index 0070  
                        __CFG_LVP$ON 0000                                  l301 06DC  
                                l302 06DD                                  l236 0D7F  
                                l350 0E0D                                  l351 0DF6  
                                l457 0D86   __end_of_extract_HEART_BEAT_RQT_CMD 0CE2  
         _extract_HEART_BEAT_RQT_CMD 0CD1                                  _GIE 005F  
                                _RA0 0028                                  _RA1 0029  
                                _RA2 002A                                  _RB1 0031  
                                _RA3 002B                                  _RA4 002C  
                                _RC1 0039                                  _RA5 002D  
                                _RC2 003A                                  _RA6 002E  
                                _RC3 003B                                  _RA7 002F  
                                _ISR 0F32                                  fsr0 0004  
                    __end_of_ADCInit 0D2B                                  indf 0000  
                       __CFG_IESO$ON 0000                     ?_get_minus_index 0020  
            __size_of_send_half_byte 006C                          get_msg@temp 002F  
                        get_msg@pmsg 002C                          get_msg@pstr 002A  
                    create_cmd@pconn 003F                      __end_of_LCDByte 071A  
                    __end_of_LCDInit 05A1                                 ?_ISR 0070  
                        LCDByte@temp 002B                                 l3003 041F  
                               l3005 0451                                 l3031 05AF  
                               l2401 0FB1                                 l3131 07D8  
                               l3211 0202                                 l2323 016A  
                               l3019 0E1F                                 l3141 07F9  
                               l3205 01E1                                 l2245 0C9F  
                               l2253 0CAF                                 l2333 0186  
                               l2309 00F2                                 l2263 0CCD  
                               l2319 0161                                 l3137 07EE  
                               l3129 07CA                                 l3153 0ED2  
                               l3225 0215                                 l3217 0211  
                               l3313 030D                                 l3243 0DFF  
                               l3155 0EE0                                 l3163 0EF9  
                               l3227 018E                                 l2275 0CBD  
                               l2291 005A                                 l3307 02FA  
                               l3237 0DF8                                 l3229 0258  
                               l3173 0D44                                 l3239 0DFA  
                               l3263 0640                                 l3271 064E  
                               l3159 0EEE                                 l3183 01AE  
                               l3353 03A8                                 l2297 006D  
                               l3361 0D6C                                 l3347 0391  
                               l3611 0EC4                                 l3277 060C  
                               l3189 01C4                                 l2397 0FAF  
                               l3365 0D73                                 l3279 0669  
                               l3199 01DB                        ?_LoadMenuItem 0070  
                               l2981 0531                                 l2979 0501  
                       __CFG_WDTE$ON 0000                                 u3000 0516  
                               u3020 0522                                 u3014 0519  
                               u3040 052E                                 u2081 0D84  
                               u3105 05DE                                 u3034 0525  
                               u3125 06C9                                 u3205 07E5  
                               u3215 07EF                                 u3145 06E4  
                               u3065 0432                                 u3155 0700  
                               u3085 05B8                                 u3245 0ED5  
                               u3095 05C4                                 u3175 07CD  
                               u3335 01F8                                 u3265 0EE6  
                               u3195 07D9                                 u3275 0EEF  
                               u2900 04E0                                 u2920 04EC  
                               u2914 04E3                                 u2940 04F8  
                               u2934 04EF                                 u2954 04FB  
                               u2980 050A                                 u3777 0E50  
                               u2994 050D                                 u3787 0E64  
                               u3797 0540                                 _WREN 0C62  
                     ??_get_distance 0021                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _main 0E98  
                               _mode 00E2                   __size_of_LCDGotoXY 0026  
                               btemp 007E                        __CFG_BOREN$ON 0000  
                               ltemp 007E                      ?_get_plus_index 0020  
                               start 0012                                 ttemp 007E  
                               wtemp 007E               create_cmd@cmd_data_len 0037  
                   create_cmd@cmd_id 0034                        __CFG_MCLRE$ON 0000  
                   create_cmd@msg_id 0035                                ??_ISR 0075  
                        compose@data 002D                          compose@from 0029  
                        compose@pmsg 0033           ?_handle_HEART_BEAT_RQT_CMD 0070  
                              ?_main 0070                                _EEADR 010D  
                              STR_11 068D                                STR_12 06B3  
                              STR_13 06A1                                STR_14 06B3  
                              STR_15 06AF                                STR_16 06B4  
                              STR_17 06B9                                STR_18 06BE  
                              _CARRY 0018                         LCDInit@style 002E  
                    __end_of___lwdiv 07FE                                i1l138 04C3  
                    __end_of___lwmod 0EFE                                i1l274 0F5A  
  __end_of_create_HEART_BEAT_RSP_CMD 0E98                                _PORTC 0007  
                              _TRISC 0087                      __end_of_get_msg 0FB3  
                    __end_of_compose 07C0                      __end_of_dpowers 0685  
                              _count 00CC                       ??_LoadMenuItem 0022  
                 get_minus_index@sub 0020                                pclath 000A  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                      __end_of_sprintf 025F  
                   __end_of_ConnInit 0D41                      __initialization 0015  
                    ??_get_msg_index 0024                         __end_of_main 0ECA  
                   __end_of_MenuInit 076E                            ??_ADCInit 0020  
                             ??_main 0061                    __end_of_LCDGotoXY 0E14  
                      LCDByte@isdata 0025                            ??_LCDByte 0026  
                          ??_LCDInit 002C                         compose@msgid 002B  
                             _ADRESH 001E                               _ADRESL 009E  
                             _EEDATA 010C                               _EECON1 018C  
                             _EECON2 018D                               i1l2423 0C93  
                             i1l2443 0492                               i1l2445 04BE  
                       ?_send_string 0027                               _IOInit 0FB3  
                   i1_get_next_index 0C8C                       send_string@len 0029  
                     send_string@str 0027                       __CFG_PWRTE$OFF 0000  
                     _LCDWriteString 0609                 __size_of_eeprom_read 0024  
                             _g_menu 00C3                            ??___lwdiv 0024  
                          ??___lwmod 002C                     __end_of_dump_msg 031F  
                             _memcpy 0E14                 __size_of_LCDBusyLoop 0068  
                             _sdebug 01B0                 __end_of_get_distance 0CC1  
                          ??_get_msg 0028                            ??_compose 002F  
       __end_of_handle_received_cmds 0D80                     __end_of_send_msg 0F32  
                       __pdataCOMMON 007D              get_distance@start_index 0021  
     handle_HEART_BEAT_RQT_CMD@pmsgi 00A0                       _send_half_byte 04CD  
                             saved_w 007E                    get_plus_index@add 0020  
                          ??_sprintf 003D              __end_of__initialization 0041  
                    eeprom_read@addr 0021                   create_cmd@cmd_data 0036  
             __end_of_LCDWriteString 066B                            LCDByte@hn 0028  
                          LCDByte@ln 0029                       __pcstackCOMMON 0070  
                   ??_get_next_index 0020                         __pidataBANK0 07FF  
                       __pidataBANK1 0CF3                     crc_calculate@crc 0026  
     create_HEART_BEAT_RSP_CMD@pconn 0046       create_HEART_BEAT_RSP_CMD@pmsgi 0040  
     create_HEART_BEAT_RSP_CMD@pmsgo 0041                 __end_of_LoadMenuItem 0D17  
              __end_of_crc_calculate 0458               __end_of_send_half_byte 0539  
        ?_extract_HEART_BEAT_RQT_CMD 0029                       _OPTION_REGbits 0081  
                          ?_ConnInit 0070                     ??_get_plus_index 0021  
                         __pbssBANK0 0062                           __pbssBANK1 00C3  
                         __pbssBANK3 0190                              ?_IOInit 0070  
                          ?_MenuInit 0070        handle_HEART_BEAT_RQT_CMD@msgo 00A1  
                 __size_of_dump_conn 009D                       get_msg_index@i 0027  
                    ?_LCDWriteString 002C                              ISR@byte 007B  
                         __pmaintext 0E98                           __pintentry 0004  
             __size_of_receive_input 0075                   __size_of_send_byte 002B  
                            ?_memcpy 0020                              _ADCInit 0D17  
        ??_handle_HEART_BEAT_RQT_CMD 005F                      ?_send_half_byte 0020  
                            _LCDByte 06C3                              _LCDInit 0539  
                         _create_cmd 0DA4                   get_msg@start_index 002D  
                         _buffer_rcv 0190                           ??_ConnInit 0025  
       create_HEART_BEAT_RSP_CMD@rqt 0048         create_HEART_BEAT_RSP_CMD@rsp 0047  
                         __stringtab 066B                         dump_msg@pmsg 0046  
           __size_of_get_minus_index 0010                           ??_MenuInit 0025  
                          ?_dump_msg 0046                      __size_of_IOInit 004D  
               __size_of_send_string 001F                 _handle_received_cmds 0D60  
                          ?_send_msg 0070                __size_of_get_distance 0010  
                    _start_index_rcv 0062                              ___cgram 00D4  
                            ___lwdiv 07C0                              ___lwmod 0ECA  
                    __size_of_memcpy 002B                            _ANSELbits 0188  
                            __ptext1 0D60                              __ptext2 0DC9  
                            __ptext3 0EFE                              __ptext4 0D41  
                            __ptext5 0E3F                              __ptext6 04CD  
                            __ptext7 025F                              __ptext8 0E6A  
                            __ptext9 0CD1                              _get_msg 0F67  
                            _compose 076E                    __end_of_dump_conn 03BC  
                       __size_of_ISR 0035             __end_ofi1_get_next_index 0C96  
                            _dpowers 067B           ?_create_HEART_BEAT_RSP_CMD 0040  
               get_minus_index@index 0021                              _msg_rcv 01D0  
                            _low_rcv 00E1                            _LCDGotoXY 0DEE  
                            _submode 00E4                              _sprintf 0188  
                            clrloop0 0C85                        _receive_input 0458  
               end_of_initialization 0041                    __end_of_send_byte 0E6A  
                            memcpy@d 0027                              memcpy@n 0022  
                            memcpy@s 0025            _handle_HEART_BEAT_RQT_CMD 0DC9  
                         ??_dump_msg 0048                         _get_distance 0CB1  
                     dump_conn@count 00C0                  get_next_index@index 0020  
                     dump_conn@pconn 00C2                ?_handle_received_cmds 0070  
              __size_of_LoadMenuItem 0013                           ??_send_msg 002C  
              __end_of_get_msg_index 0188                    __end_of_stop_mark 068D  
                        ?_create_cmd 0034                    LCDWriteString@msg 002C  
                          _TRISAbits 0085                            _TRISBbits 0086  
                          _TRISCbits 0087                           ?_LCDGotoXY 002C  
                     ?_receive_input 0070                         _LoadMenuItem 0D04  
                         _start_mark 0685                           LCDInit@__i 002F  
                      ??_eeprom_read 0020                           LCDGotoXY@x 002E  
                         LCDGotoXY@y 002C                       __end_of_IOInit 1000  
                   LoadMenuItem@item 0024                    ??_get_minus_index 0021  
                      ??_LCDBusyLoop 0020                           compose@cmd 002C  
                         compose@len 0031                    crc_calculate@pmsg 0020  
                      __pidataCOMMON 07FE                       __end_of_memcpy 0E3F  
                start_initialization 0015                          __end_of_ISR 0F67  
                     crc_calculate@i 0028                     ??_LCDWriteString 002E  
                  __size_of_ConnInit 0016                             ??_IOInit 0020  
             ??_handle_received_cmds 0061                           dump_conn@i 00C1  
                         dump_conn@s 00A0             __CFG_FOSC$INTRC_NOCLKOUT 0000  
                  __size_of_MenuInit 0054                  __size_of_create_cmd 0025  
             get_msg_index@end_index 0023                  __end_of_eeprom_read 0DA4  
                         init_fetch0 0CE2                     ??_send_half_byte 0021  
                        __pdataBANK0 0063                          __pdataBANK1 00D4  
                           ??_memcpy 0024                             ?_ADCInit 0070  
                __end_of_LCDBusyLoop 0609                             ?_LCDByte 0025  
                           ?_LCDInit 0070                          __pbssCOMMON 007C  
                           LCDByte@c 002A                            ___latbits 0002  
                    ??_receive_input 0071                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0                          ??_LCDGotoXY 002D  
                     compose@datalen 002E                     LCDWriteInt@F1650 00DC  
                        sprintf@flag 0041                          sprintf@prec 0042  
             __size_of_crc_calculate 009C                    __size_of_dump_msg 00C0  
                           ISR@value 007A                     ___lwdiv@dividend 0022  
 __size_of_handle_HEART_BEAT_RQT_CMD 0025                    __size_of_send_msg 0034  
                           ?___lwdiv 0020                             ?___lwmod 0028  
                          __pstrings 066B                             ?_get_msg 0070  
                           ?_compose 0029                           send_byte@c 0026  
                  ?i1_get_next_index 0070              __size_of_get_next_index 000C  
                          _count_rcv 00CE          ??_create_HEART_BEAT_RSP_CMD 0042  
                 ??i1_get_next_index 0070                      LCDBusyLoop@busy 0022  
                          _dump_conn 031F                      LCDBusyLoop@temp 0023  
                   ___lwdiv@quotient 0026                             ?_sprintf 002E  
                      ??_send_string 002A             get_msg_index@start_index 0026  
                  interrupt_function 0004                            clear_ram0 0C84  
                        _eeprom_read 0D80                get_distance@end_index 0020  
                          _send_byte 0E3F              __size_of_get_plus_index 000F  
                        _LCDBusyLoop 05A1                     LCDWriteString@cc 0030  
  __end_of_handle_HEART_BEAT_RQT_CMD 0DEE                     __size_of_ADCInit 0014  
                         _ADCON0bits 001F                          __stringbase 067A  
                         _ADCON1bits 009F                        _crc_calculate 03BC  
                       ??_create_cmd 0039                        dump_msg@count 005D  
                          main@count 0061                     __size_of_LCDByte 0057  
                   __size_of_LCDInit 0068                            _stop_mark 0689  
                         ?_dump_conn 0070                         send_msg@pmsg 002E  
                          compose@to 002A                             _ConnInit 0D2B  
                    _get_minus_index 0CC1                             _MenuInit 071A  
                         ?_send_byte 0070            _create_HEART_BEAT_RSP_CMD 0E6A  
                          dump_msg@i 005E                         send_string@i 002B  
                __end_of_send_string 0D60                   __end_of_create_cmd 0DC9  
                       _low_half_rcv 007D                    LCDBusyLoop@status 0024  
                   __size_of___lwdiv 003E                     __size_of___lwmod 0034  
                 __end_of__stringtab 067B                        _end_index_rcv 007C  
                     ?_crc_calculate 0020                           _ANSELHbits 0189  
                   __size_of_get_msg 004C                           sprintf@val 0043  
                   __size_of_compose 0052         ??_extract_HEART_BEAT_RQT_CMD 002A  
                    ___lwdiv@divisor 0020                      ___lwdiv@counter 0025  
                           __ptext10 0DA4                             __ptext11 076E  
                           __ptext20 031F                             __ptext12 0E14  
                           __ptext21 0188                             __ptext13 03BC  
                           __ptext30 0FB3                             __ptext22 0ECA  
                           __ptext14 0F67                             __ptext31 0D2B  
                           __ptext23 07C0                             __ptext15 0045  
                           __ptext32 0D04                             __ptext24 0609  
                           __ptext16 0CA2                             __ptext33 0D80  
                           __ptext25 0DEE                             __ptext17 0C96  
                           __ptext34 0D17                             __ptext26 071A  
                           __ptext18 0CC1                             __ptext35 0F32  
                           __ptext27 0539                             __ptext19 0CB1  
                           __ptext36 0458                             __ptext28 06C3  
                           __ptext37 0C8C                             __ptext29 05A1  
                  __CFG_BOR4V$BOR21V 0000                     __size_of_sprintf 00D7  
                          send_msg@s 002D               __size_of_get_msg_index 0143  
                           _dump_msg 025F                        __size_of_main 0032  
                           _send_msg 0EFE                             _pmsg_rcv 0063  
__size_of_extract_HEART_BEAT_RQT_CMD 0011                             get_msg@i 002B  
                           _pstr_rcv 00E3                       _get_next_index 0C96  
                         _INTCONbits 000B              __end_of_get_minus_index 0CD1  
                           memcpy@d1 0028                             memcpy@s1 0020  
                        ??_dump_conn 0046                             init_ram0 0CE6  
                           intlevel1 0000                            sprintf@ap 0040  
                          sprintf@sp 002E                          _send_string 0D41  
                   ___lwmod@dividend 002A                i1get_next_index@index 0070  
                        ??_send_byte 0024        __size_of_handle_received_cmds 0020  
                          stringcode 0675                   receive_input@byte1 0073  
                 receive_input@byte2 0074                       _get_plus_index 0CA2  
                 receive_input@value 0072                        _get_msg_index 0045  
                    ??_crc_calculate 0022               __end_of_get_next_index 0CA2  
                 __end_of_start_mark 0689       extract_HEART_BEAT_RQT_CMD@pmsg 002A  
     extract_HEART_BEAT_RQT_CMD@prqt 0029                             sprintf@c 0045  
                           sprintf@f 0030                      ___lwmod@divisor 0028  
                get_plus_index@index 0022                      ___lwmod@counter 002D  
                           stringdir 0675                             stringtab 066B  
                        _server_conn 00CF                  LCDWriteString@count 002F  
              __end_of_receive_input 04CD                  send_half_byte@value 0022  
                      ?_get_distance 0020                   send_half_byte@byte 0023  
          __size_ofi1_get_next_index 000A                         ?_eeprom_read 0070  
             __end_of_get_plus_index 0CB1                    send_half_byte@low 0020  
            __size_of_LCDWriteString 0062  
