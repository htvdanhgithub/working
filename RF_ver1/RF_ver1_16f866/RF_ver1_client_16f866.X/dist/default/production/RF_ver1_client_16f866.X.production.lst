

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Jul 05 22:06:45 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	intentry,global,class=CODE,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0089                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  008F                     	;# 
    92  0090                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0097                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009A                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  0105                     	;# 
   111  0107                     	;# 
   112  0108                     	;# 
   113  0109                     	;# 
   114  010C                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  0185                     	;# 
   120  0187                     	;# 
   121  0188                     	;# 
   122  0189                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  000E                     	;# 
   140  000F                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  001D                     	;# 
   157  001E                     	;# 
   158  001F                     	;# 
   159  0081                     	;# 
   160  0085                     	;# 
   161  0086                     	;# 
   162  0087                     	;# 
   163  0089                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  008F                     	;# 
   168  0090                     	;# 
   169  0091                     	;# 
   170  0092                     	;# 
   171  0093                     	;# 
   172  0093                     	;# 
   173  0093                     	;# 
   174  0094                     	;# 
   175  0095                     	;# 
   176  0096                     	;# 
   177  0097                     	;# 
   178  0098                     	;# 
   179  0099                     	;# 
   180  009A                     	;# 
   181  009B                     	;# 
   182  009C                     	;# 
   183  009D                     	;# 
   184  009E                     	;# 
   185  009F                     	;# 
   186  0105                     	;# 
   187  0107                     	;# 
   188  0108                     	;# 
   189  0109                     	;# 
   190  010C                     	;# 
   191  010C                     	;# 
   192  010D                     	;# 
   193  010E                     	;# 
   194  010F                     	;# 
   195  0185                     	;# 
   196  0187                     	;# 
   197  0188                     	;# 
   198  0189                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201  0000                     	;# 
   202  0001                     	;# 
   203  0002                     	;# 
   204  0003                     	;# 
   205  0004                     	;# 
   206  0005                     	;# 
   207  0006                     	;# 
   208  0007                     	;# 
   209  0009                     	;# 
   210  000A                     	;# 
   211  000B                     	;# 
   212  000C                     	;# 
   213  000D                     	;# 
   214  000E                     	;# 
   215  000E                     	;# 
   216  000F                     	;# 
   217  0010                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0013                     	;# 
   221  0014                     	;# 
   222  0015                     	;# 
   223  0015                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001B                     	;# 
   231  001C                     	;# 
   232  001D                     	;# 
   233  001E                     	;# 
   234  001F                     	;# 
   235  0081                     	;# 
   236  0085                     	;# 
   237  0086                     	;# 
   238  0087                     	;# 
   239  0089                     	;# 
   240  008C                     	;# 
   241  008D                     	;# 
   242  008E                     	;# 
   243  008F                     	;# 
   244  0090                     	;# 
   245  0091                     	;# 
   246  0092                     	;# 
   247  0093                     	;# 
   248  0093                     	;# 
   249  0093                     	;# 
   250  0094                     	;# 
   251  0095                     	;# 
   252  0096                     	;# 
   253  0097                     	;# 
   254  0098                     	;# 
   255  0099                     	;# 
   256  009A                     	;# 
   257  009B                     	;# 
   258  009C                     	;# 
   259  009D                     	;# 
   260  009E                     	;# 
   261  009F                     	;# 
   262  0105                     	;# 
   263  0107                     	;# 
   264  0108                     	;# 
   265  0109                     	;# 
   266  010C                     	;# 
   267  010C                     	;# 
   268  010D                     	;# 
   269  010E                     	;# 
   270  010F                     	;# 
   271  0185                     	;# 
   272  0187                     	;# 
   273  0188                     	;# 
   274  0189                     	;# 
   275  018C                     	;# 
   276  018D                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0009                     	;# 
   286  000A                     	;# 
   287  000B                     	;# 
   288  000C                     	;# 
   289  000D                     	;# 
   290  000E                     	;# 
   291  000E                     	;# 
   292  000F                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0013                     	;# 
   297  0014                     	;# 
   298  0015                     	;# 
   299  0015                     	;# 
   300  0016                     	;# 
   301  0017                     	;# 
   302  0018                     	;# 
   303  0019                     	;# 
   304  001A                     	;# 
   305  001B                     	;# 
   306  001B                     	;# 
   307  001C                     	;# 
   308  001D                     	;# 
   309  001E                     	;# 
   310  001F                     	;# 
   311  0081                     	;# 
   312  0085                     	;# 
   313  0086                     	;# 
   314  0087                     	;# 
   315  0089                     	;# 
   316  008C                     	;# 
   317  008D                     	;# 
   318  008E                     	;# 
   319  008F                     	;# 
   320  0090                     	;# 
   321  0091                     	;# 
   322  0092                     	;# 
   323  0093                     	;# 
   324  0093                     	;# 
   325  0093                     	;# 
   326  0094                     	;# 
   327  0095                     	;# 
   328  0096                     	;# 
   329  0097                     	;# 
   330  0098                     	;# 
   331  0099                     	;# 
   332  009A                     	;# 
   333  009B                     	;# 
   334  009C                     	;# 
   335  009D                     	;# 
   336  009E                     	;# 
   337  009F                     	;# 
   338  0105                     	;# 
   339  0107                     	;# 
   340  0108                     	;# 
   341  0109                     	;# 
   342  010C                     	;# 
   343  010C                     	;# 
   344  010D                     	;# 
   345  010E                     	;# 
   346  010F                     	;# 
   347  0185                     	;# 
   348  0187                     	;# 
   349  0188                     	;# 
   350  0189                     	;# 
   351  018C                     	;# 
   352  018D                     	;# 
   353  0000                     	;# 
   354  0001                     	;# 
   355  0002                     	;# 
   356  0003                     	;# 
   357  0004                     	;# 
   358  0005                     	;# 
   359  0006                     	;# 
   360  0007                     	;# 
   361  0009                     	;# 
   362  000A                     	;# 
   363  000B                     	;# 
   364  000C                     	;# 
   365  000D                     	;# 
   366  000E                     	;# 
   367  000E                     	;# 
   368  000F                     	;# 
   369  0010                     	;# 
   370  0011                     	;# 
   371  0012                     	;# 
   372  0013                     	;# 
   373  0014                     	;# 
   374  0015                     	;# 
   375  0015                     	;# 
   376  0016                     	;# 
   377  0017                     	;# 
   378  0018                     	;# 
   379  0019                     	;# 
   380  001A                     	;# 
   381  001B                     	;# 
   382  001B                     	;# 
   383  001C                     	;# 
   384  001D                     	;# 
   385  001E                     	;# 
   386  001F                     	;# 
   387  0081                     	;# 
   388  0085                     	;# 
   389  0086                     	;# 
   390  0087                     	;# 
   391  0089                     	;# 
   392  008C                     	;# 
   393  008D                     	;# 
   394  008E                     	;# 
   395  008F                     	;# 
   396  0090                     	;# 
   397  0091                     	;# 
   398  0092                     	;# 
   399  0093                     	;# 
   400  0093                     	;# 
   401  0093                     	;# 
   402  0094                     	;# 
   403  0095                     	;# 
   404  0096                     	;# 
   405  0097                     	;# 
   406  0098                     	;# 
   407  0099                     	;# 
   408  009A                     	;# 
   409  009B                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009E                     	;# 
   413  009F                     	;# 
   414  0105                     	;# 
   415  0107                     	;# 
   416  0108                     	;# 
   417  0109                     	;# 
   418  010C                     	;# 
   419  010C                     	;# 
   420  010D                     	;# 
   421  010E                     	;# 
   422  010F                     	;# 
   423  0185                     	;# 
   424  0187                     	;# 
   425  0188                     	;# 
   426  0189                     	;# 
   427  018C                     	;# 
   428  018D                     	;# 
   429  0000                     	;# 
   430  0001                     	;# 
   431  0002                     	;# 
   432  0003                     	;# 
   433  0004                     	;# 
   434  0005                     	;# 
   435  0006                     	;# 
   436  0007                     	;# 
   437  0009                     	;# 
   438  000A                     	;# 
   439  000B                     	;# 
   440  000C                     	;# 
   441  000D                     	;# 
   442  000E                     	;# 
   443  000E                     	;# 
   444  000F                     	;# 
   445  0010                     	;# 
   446  0011                     	;# 
   447  0012                     	;# 
   448  0013                     	;# 
   449  0014                     	;# 
   450  0015                     	;# 
   451  0015                     	;# 
   452  0016                     	;# 
   453  0017                     	;# 
   454  0018                     	;# 
   455  0019                     	;# 
   456  001A                     	;# 
   457  001B                     	;# 
   458  001B                     	;# 
   459  001C                     	;# 
   460  001D                     	;# 
   461  001E                     	;# 
   462  001F                     	;# 
   463  0081                     	;# 
   464  0085                     	;# 
   465  0086                     	;# 
   466  0087                     	;# 
   467  0089                     	;# 
   468  008C                     	;# 
   469  008D                     	;# 
   470  008E                     	;# 
   471  008F                     	;# 
   472  0090                     	;# 
   473  0091                     	;# 
   474  0092                     	;# 
   475  0093                     	;# 
   476  0093                     	;# 
   477  0093                     	;# 
   478  0094                     	;# 
   479  0095                     	;# 
   480  0096                     	;# 
   481  0097                     	;# 
   482  0098                     	;# 
   483  0099                     	;# 
   484  009A                     	;# 
   485  009B                     	;# 
   486  009C                     	;# 
   487  009D                     	;# 
   488  009E                     	;# 
   489  009F                     	;# 
   490  0105                     	;# 
   491  0107                     	;# 
   492  0108                     	;# 
   493  0109                     	;# 
   494  010C                     	;# 
   495  010C                     	;# 
   496  010D                     	;# 
   497  010E                     	;# 
   498  010F                     	;# 
   499  0185                     	;# 
   500  0187                     	;# 
   501  0188                     	;# 
   502  0189                     	;# 
   503  018C                     	;# 
   504  018D                     	;# 
   505                           
   506                           	psect	idataCOMMON
   507  07FC                     __pidataCOMMON:	
   508                           
   509                           ;initializer for _low_half_rcv
   510  07FC  3401               	retlw	1
   511                           
   512                           	psect	idataBANK0
   513  0F4F                     __pidataBANK0:	
   514                           
   515                           ;initializer for LCDWriteInt@F1650
   516  0F4F  34F0               	retlw	240
   517  0F50  34F0               	retlw	240
   518  0F51  34F0               	retlw	240
   519  0F52  34F0               	retlw	240
   520  0F53  34F0               	retlw	240
   521                           
   522                           ;initializer for _low_rcv
   523  0F54  3401               	retlw	1
   524                           
   525                           ;initializer for _mode
   526  0F55  3401               	retlw	1
   527                           
   528                           ;initializer for _pmsg_rcv
   529  0F56  34B0               	retlw	low (_msg_rcv| (0+256))
   530                           
   531                           ;initializer for _pstr_rcv
   532  0F57  34B0               	retlw	low (_msg_rcv| (0+256))
   533                           
   534                           ;initializer for _submode
   535  0F58  3401               	retlw	1
   536                           
   537                           	psect	idataBANK1
   538  0F3D                     __pidataBANK1:	
   539                           
   540                           ;initializer for ___cgram
   541  0F3D  340C               	retlw	12
   542  0F3E  3412               	retlw	18
   543  0F3F  3412               	retlw	18
   544  0F40  340C               	retlw	12
   545  0F41  3400               	retlw	0
   546  0F42  3400               	retlw	0
   547  0F43  3400               	retlw	0
   548  0F44  3400               	retlw	0
   549                           
   550                           	psect	strings
   551  0567                     __pstrings:	
   552  0567                     stringtab:	
   553  0567                     __stringtab:	
   554                           
   555                           ;	String table - string pointers are 1 byte each
   556  0567  1BFF               	btfsc	btemp+1,7
   557  0568  2D71               	ljmp	stringcode
   558  0569  1383               	bcf	3,7
   559  056A  187F               	btfsc	btemp+1,0
   560  056B  1783               	bsf	3,7
   561  056C  0800               	movf	0,w
   562  056D  0A84               	incf	4,f
   563  056E  1903               	skipnz
   564  056F  0AFF               	incf	btemp+1,f
   565  0570  0008               	return
   566  0571                     stringcode:	
   567  0571                     stringdir:	
   568  0571  3005               	movlw	high stringdir
   569  0572  008A               	movwf	10
   570  0573  0804               	movf	4,w
   571  0574  0A84               	incf	4,f
   572  0575  0782               	addwf	2,f
   573  0576                     __stringbase:	
   574  0576  3400               	retlw	0
   575  0577                     __end_of__stringtab:	
   576  0577                     _dpowers:	
   577  0577  3401               	retlw	1
   578  0578  3400               	retlw	0
   579  0579  340A               	retlw	10
   580  057A  3400               	retlw	0
   581  057B  3464               	retlw	100
   582  057C  3400               	retlw	0
   583  057D  34E8               	retlw	232
   584  057E  3403               	retlw	3
   585  057F  3410               	retlw	16
   586  0580  3427               	retlw	39
   587  0581                     __end_of_dpowers:	
   588  0581                     _start_mark:	
   589  0581  34DE               	retlw	222
   590  0582  34DF               	retlw	223
   591  0583  34E0               	retlw	224
   592  0584  34E1               	retlw	225
   593  0585                     __end_of_start_mark:	
   594  0585                     _stop_mark:	
   595  0585  34E1               	retlw	225
   596  0586  34E0               	retlw	224
   597  0587  34DF               	retlw	223
   598  0588  34DE               	retlw	222
   599  0589                     __end_of_stop_mark:	
   600  001F                     _ADCON0bits	set	31
   601  001E                     _ADRESH	set	30
   602  000B                     _INTCONbits	set	11
   603  0007                     _PORTC	set	7
   604  0018                     _CARRY	set	24
   605  005F                     _GIE	set	95
   606  0028                     _RA0	set	40
   607  0029                     _RA1	set	41
   608  002A                     _RA2	set	42
   609  002B                     _RA3	set	43
   610  002C                     _RA4	set	44
   611  002D                     _RA5	set	45
   612  002E                     _RA6	set	46
   613  002F                     _RA7	set	47
   614  0031                     _RB1	set	49
   615  0039                     _RC1	set	57
   616  003A                     _RC2	set	58
   617  003B                     _RC3	set	59
   618  009F                     _ADCON1bits	set	159
   619  009E                     _ADRESL	set	158
   620  0081                     _OPTION_REGbits	set	129
   621  0085                     _TRISAbits	set	133
   622  0086                     _TRISBbits	set	134
   623  0087                     _TRISC	set	135
   624  0087                     _TRISCbits	set	135
   625  010D                     _EEADR	set	269
   626  010C                     _EEDATA	set	268
   627  0189                     _ANSELHbits	set	393
   628  0188                     _ANSELbits	set	392
   629  018C                     _EECON1	set	396
   630  018D                     _EECON2	set	397
   631  0C60                     _RD	set	3168
   632  0C61                     _WR	set	3169
   633  0C62                     _WREN	set	3170
   634  0589                     STR_11:	
   635  0589  344D               	retlw	77	;'M'
   636  058A  343A               	retlw	58	;':'
   637  058B  3425               	retlw	37	;'%'
   638  058C  3464               	retlw	100	;'d'
   639  058D  342C               	retlw	44	;','
   640  058E  3425               	retlw	37	;'%'
   641  058F  3464               	retlw	100	;'d'
   642  0590  342C               	retlw	44	;','
   643  0591  3425               	retlw	37	;'%'
   644  0592  3464               	retlw	100	;'d'
   645  0593  342C               	retlw	44	;','
   646  0594  3425               	retlw	37	;'%'
   647  0595  3464               	retlw	100	;'d'
   648  0596  342C               	retlw	44	;','
   649  0597  3425               	retlw	37	;'%'
   650  0598  3464               	retlw	100	;'d'
   651  0599  342C               	retlw	44	;','
   652  059A  3425               	retlw	37	;'%'
   653  059B  3464               	retlw	100	;'d'
   654  059C  3400               	retlw	0
   655  059D                     STR_13:	
   656  059D  3443               	retlw	67	;'C'
   657  059E  343A               	retlw	58	;':'
   658  059F  3425               	retlw	37	;'%'
   659  05A0  3464               	retlw	100	;'d'
   660  05A1  342C               	retlw	44	;','
   661  05A2  3425               	retlw	37	;'%'
   662  05A3  3464               	retlw	100	;'d'
   663  05A4  342C               	retlw	44	;','
   664  05A5  3425               	retlw	37	;'%'
   665  05A6  3464               	retlw	100	;'d'
   666  05A7  342C               	retlw	44	;','
   667  05A8  3425               	retlw	37	;'%'
   668  05A9  3464               	retlw	100	;'d'
   669  05AA  3400               	retlw	0
   670  05AB                     STR_15:	
   671  05AB  3449               	retlw	73	;'I'
   672  05AC  3444               	retlw	68	;'D'
   673  05AD  3431               	retlw	49	;'1'
   674  05AE  343A               	retlw	58	;':'
   675  05AF  3400               	retlw	0
   676  05B0                     STR_16:	
   677  05B0  3449               	retlw	73	;'I'
   678  05B1  3444               	retlw	68	;'D'
   679  05B2  3432               	retlw	50	;'2'
   680  05B3  343A               	retlw	58	;':'
   681  05B4  3400               	retlw	0
   682  05B5                     STR_17:	
   683  05B5  3449               	retlw	73	;'I'
   684  05B6  3444               	retlw	68	;'D'
   685  05B7  3433               	retlw	51	;'3'
   686  05B8  343A               	retlw	58	;':'
   687  05B9  3400               	retlw	0
   688  05BA                     STR_18:	
   689  05BA  3449               	retlw	73	;'I'
   690  05BB  3444               	retlw	68	;'D'
   691  05BC  3434               	retlw	52	;'4'
   692  05BD  343A               	retlw	58	;':'
   693  05BE  3400               	retlw	0
   694  05AF                     
   695                           ; #config settings
   696  0000                     
   697                           	psect	cinit
   698  0015                     start_initialization:	
   699  0015                     __initialization:	
   700                           
   701                           ; Clear objects allocated to COMMON
   702  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   703                           
   704                           ; Clear objects allocated to BANK0
   705  0016  1383               	bcf	3,7	;select IRP bank0
   706  0017  3052               	movlw	low __pbssBANK0
   707  0018  0084               	movwf	4
   708  0019  3063               	movlw	low (__pbssBANK0+17)
   709  001A  120A  158A  2735  120A  118A  	fcall	clear_ram0
   710                           
   711                           ; Clear objects allocated to BANK1
   712  001F  30C3               	movlw	low __pbssBANK1
   713  0020  0084               	movwf	4
   714  0021  30E3               	movlw	low (__pbssBANK1+32)
   715  0022  120A  158A  2735  120A  118A  	fcall	clear_ram0
   716                           
   717                           ; Clear objects allocated to BANK3
   718  0027  1783               	bsf	3,7	;select IRP bank2
   719  0028  3090               	movlw	low __pbssBANK3
   720  0029  0084               	movwf	4
   721  002A  30C7               	movlw	low (__pbssBANK3+55)
   722  002B  120A  158A  2735  120A  118A  	fcall	clear_ram0
   723                           
   724                           ; Initialize objects allocated to BANK1
   725  0030  1383               	bcf	3,7	;select IRP bank0
   726  0031  30EB               	movlw	low (__pdataBANK1+8)
   727  0032  00FD               	movwf	btemp+-1
   728  0033  300F               	movlw	high __pidataBANK1
   729  0034  00FE               	movwf	btemp
   730  0035  303D               	movlw	low __pidataBANK1
   731  0036  00FF               	movwf	btemp+1
   732  0037  30E3               	movlw	low __pdataBANK1
   733  0038  0084               	movwf	4
   734  0039  120A  158A  27A8  120A  118A  	fcall	init_ram0
   735                           
   736                           ; Initialize objects allocated to BANK0
   737  003E  306D               	movlw	low (__pdataBANK0+10)
   738  003F  00FD               	movwf	btemp+-1
   739  0040  300F               	movlw	high __pidataBANK0
   740  0041  00FE               	movwf	btemp
   741  0042  304F               	movlw	low __pidataBANK0
   742  0043  00FF               	movwf	btemp+1
   743  0044  3063               	movlw	low __pdataBANK0
   744  0045  0084               	movwf	4
   745  0046  120A  158A  27A8  120A  118A  	fcall	init_ram0
   746                           
   747                           ; Initialize objects allocated to COMMON
   748  004B  120A  118A  27FC   	fcall	__pidataCOMMON	;fetch initializer
   749  004E  00FD               	movwf	__pdataCOMMON& (0+127)
   750  004F                     end_of_initialization:	
   751                           ;End of C runtime variable initialization code
   752                           
   753  004F                     __end_of__initialization:	
   754  004F  0183               	clrf	3
   755  0050  120A  118A  2EB1   	ljmp	_main	;jump to C main() function
   756                           
   757                           	psect	bssCOMMON
   758  007C                     __pbssCOMMON:	
   759  007C                     _end_index_rcv:	
   760  007C                     	ds	1
   761                           
   762                           	psect	dataCOMMON
   763  007D                     __pdataCOMMON:	
   764  007D                     _low_half_rcv:	
   765  007D                     	ds	1
   766                           
   767                           	psect	bssBANK0
   768  0052                     __pbssBANK0:	
   769  0052                     _g_menu:	
   770  0052                     	ds	9
   771  005B                     _count:	
   772  005B                     	ds	2
   773  005D                     _count_rcv:	
   774  005D                     	ds	1
   775  005E                     _start_index_rcv:	
   776  005E                     	ds	1
   777  005F                     _server_conn:	
   778  005F                     	ds	4
   779                           
   780                           	psect	dataBANK0
   781  0063                     __pdataBANK0:	
   782  0063                     LCDWriteInt@F1650:	
   783  0063                     	ds	5
   784  0068                     _low_rcv:	
   785  0068                     	ds	1
   786  0069                     _mode:	
   787  0069                     	ds	1
   788  006A                     _pmsg_rcv:	
   789  006A                     	ds	1
   790  006B                     _pstr_rcv:	
   791  006B                     	ds	1
   792  006C                     _submode:	
   793  006C                     	ds	1
   794                           
   795                           	psect	bssBANK1
   796  00C3                     __pbssBANK1:	
   797  00C3                     _buffer_rcv:	
   798  00C3                     	ds	32
   799                           
   800                           	psect	dataBANK1
   801  00E3                     __pdataBANK1:	
   802  00E3                     ___cgram:	
   803  00E3                     	ds	8
   804                           
   805                           	psect	bssBANK3
   806  0190                     __pbssBANK3:	
   807  0190                     _sdebug:	
   808  0190                     	ds	32
   809  01B0                     _msg_rcv:	
   810  01B0                     	ds	23
   811                           
   812                           	psect	clrtext
   813  0F35                     clear_ram0:	
   814                           ;	Called with FSR containing the base address, and
   815                           ;	W with the last address+1
   816                           
   817  0F35  0064               	clrwdt	;clear the watchdog before getting into this loop
   818  0F36                     clrloop0:	
   819  0F36  0180               	clrf	0	;clear RAM location pointed to by FSR
   820  0F37  0A84               	incf	4,f	;increment pointer
   821  0F38  0604               	xorwf	4,w	;XOR with final address
   822  0F39  1903               	btfsc	3,2	;have we reached the end yet?
   823  0F3A  3400               	retlw	0	;all done for this memory range, return
   824  0F3B  0604               	xorwf	4,w	;XOR again to restore value
   825  0F3C  2F36               	goto	clrloop0	;do the next byte
   826                           
   827                           	psect	inittext
   828  0FA4                     init_fetch0:	
   829                           ;	Called with low address in FSR and high address in W
   830                           
   831  0FA4  087E               	movf	126,w
   832  0FA5  008A               	movwf	10
   833  0FA6  087F               	movf	127,w
   834  0FA7  0082               	movwf	2
   835  0FA8                     init_ram0:	
   836                           ;Called with:
   837                           ;	high address of idata address in btemp 
   838                           ;	low address of idata address in btemp+1 
   839                           ;	low address of data in FSR
   840                           ;	high address + 1 of data in btemp-1
   841                           
   842  0FA8  27A4  120A  158A   	fcall	init_fetch0
   843  0FAB  0080               	movwf	0
   844  0FAC  0A84               	incf	4,f
   845  0FAD  0804               	movf	4,w
   846  0FAE  067D               	xorwf	125,w
   847  0FAF  1903               	btfsc	3,2
   848  0FB0  3400               	retlw	0
   849  0FB1  0AFF               	incf	127,f
   850  0FB2  1903               	btfsc	3,2
   851  0FB3  0AFE               	incf	126,f
   852  0FB4  2FA8               	goto	init_ram0
   853                           
   854                           	psect	cstackBANK1
   855  00A0                     __pcstackBANK1:	
   856  00A0                     dump_msg@s:	
   857  00A0                     dump_conn@s:	
   858                           ; 32 bytes @ 0x0
   859                           
   860                           
   861                           ; 32 bytes @ 0x0
   862  00A0                     	ds	32
   863  00C0                     dump_msg@count:	
   864  00C0                     dump_conn@count:	
   865                           ; 1 bytes @ 0x20
   866                           
   867                           
   868                           ; 1 bytes @ 0x20
   869  00C0                     	ds	1
   870  00C1                     dump_msg@i:	
   871  00C1                     dump_conn@i:	
   872                           ; 1 bytes @ 0x21
   873                           
   874                           
   875                           ; 1 bytes @ 0x21
   876  00C1                     	ds	1
   877  00C2                     dump_msg@pmsg:	
   878  00C2                     dump_conn@pconn:	
   879                           ; 1 bytes @ 0x22
   880                           
   881                           
   882                           ; 1 bytes @ 0x22
   883  00C2                     	ds	1
   884                           
   885                           	psect	cstackCOMMON
   886  0070                     __pcstackCOMMON:	
   887  0070                     ?_LoadMenuItem:	
   888  0070                     ?_LCDInit:	
   889                           ; 1 bytes @ 0x0
   890                           
   891  0070                     ?_MenuInit:	
   892                           ; 1 bytes @ 0x0
   893                           
   894  0070                     ?_LCDBusyLoop:	
   895                           ; 1 bytes @ 0x0
   896                           
   897  0070                     ?_eeprom_read:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0070                     ?_ADCInit:	
   901                           ; 1 bytes @ 0x0
   902                           
   903  0070                     ?_get_next_index:	
   904                           ; 1 bytes @ 0x0
   905                           
   906  0070                     ?_receive_input:	
   907                           ; 1 bytes @ 0x0
   908                           
   909  0070                     ?_dump_msg:	
   910                           ; 1 bytes @ 0x0
   911                           
   912  0070                     ?_get_msg:	
   913                           ; 1 bytes @ 0x0
   914                           
   915  0070                     ?_dump_conn:	
   916                           ; 1 bytes @ 0x0
   917                           
   918  0070                     ?_ConnInit:	
   919                           ; 1 bytes @ 0x0
   920                           
   921  0070                     ?_IOInit:	
   922                           ; 1 bytes @ 0x0
   923                           
   924  0070                     ?_ISR:	
   925                           ; 1 bytes @ 0x0
   926                           
   927  0070                     ?_main:	
   928                           ; 1 bytes @ 0x0
   929                           
   930  0070                     ?i1_get_next_index:	
   931                           ; 1 bytes @ 0x0
   932                           
   933  0070                     ??i1_get_next_index:	
   934                           ; 1 bytes @ 0x0
   935                           
   936  0070                     i1get_next_index@index:	
   937                           ; 1 bytes @ 0x0
   938                           
   939                           
   940                           ; 1 bytes @ 0x0
   941  0070                     	ds	1
   942  0071                     ??_receive_input:	
   943                           
   944                           ; 1 bytes @ 0x1
   945  0071                     	ds	1
   946  0072                     receive_input@value:	
   947                           
   948                           ; 1 bytes @ 0x2
   949  0072                     	ds	1
   950  0073                     receive_input@byte1:	
   951                           
   952                           ; 1 bytes @ 0x3
   953  0073                     	ds	1
   954  0074                     receive_input@byte2:	
   955                           
   956                           ; 1 bytes @ 0x4
   957  0074                     	ds	1
   958  0075                     ??_ISR:	
   959                           
   960                           ; 1 bytes @ 0x5
   961  0075                     	ds	5
   962  007A                     ISR@value:	
   963                           
   964                           ; 1 bytes @ 0xA
   965  007A                     	ds	1
   966  007B                     ISR@byte:	
   967                           
   968                           ; 1 bytes @ 0xB
   969  007B                     	ds	1
   970                           
   971                           	psect	cstackBANK0
   972  0020                     __pcstackBANK0:	
   973  0020                     ??_LCDBusyLoop:	
   974  0020                     ??_eeprom_read:	
   975                           ; 1 bytes @ 0x0
   976                           
   977  0020                     ??_ADCInit:	
   978                           ; 1 bytes @ 0x0
   979                           
   980  0020                     ??_get_next_index:	
   981                           ; 1 bytes @ 0x0
   982                           
   983  0020                     ?_get_plus_index:	
   984                           ; 1 bytes @ 0x0
   985                           
   986  0020                     ?_get_minus_index:	
   987                           ; 1 bytes @ 0x0
   988                           
   989  0020                     ?_get_distance:	
   990                           ; 1 bytes @ 0x0
   991                           
   992  0020                     ??_IOInit:	
   993                           ; 1 bytes @ 0x0
   994                           
   995  0020                     ?___lwdiv:	
   996                           ; 1 bytes @ 0x0
   997                           
   998  0020                     get_next_index@index:	
   999                           ; 2 bytes @ 0x0
  1000                           
  1001  0020                     get_plus_index@add:	
  1002                           ; 1 bytes @ 0x0
  1003                           
  1004  0020                     get_minus_index@sub:	
  1005                           ; 1 bytes @ 0x0
  1006                           
  1007  0020                     get_distance@end_index:	
  1008                           ; 1 bytes @ 0x0
  1009                           
  1010  0020                     ___lwdiv@divisor:	
  1011                           ; 1 bytes @ 0x0
  1012                           
  1013                           
  1014                           ; 2 bytes @ 0x0
  1015  0020                     	ds	1
  1016  0021                     ??_get_plus_index:	
  1017  0021                     ??_get_minus_index:	
  1018                           ; 1 bytes @ 0x1
  1019                           
  1020  0021                     ??_get_distance:	
  1021                           ; 1 bytes @ 0x1
  1022                           
  1023  0021                     get_minus_index@index:	
  1024                           ; 1 bytes @ 0x1
  1025                           
  1026  0021                     get_distance@start_index:	
  1027                           ; 1 bytes @ 0x1
  1028                           
  1029  0021                     eeprom_read@addr:	
  1030                           ; 1 bytes @ 0x1
  1031                           
  1032                           
  1033                           ; 1 bytes @ 0x1
  1034  0021                     	ds	1
  1035  0022                     ??_LoadMenuItem:	
  1036  0022                     get_plus_index@index:	
  1037                           ; 1 bytes @ 0x2
  1038                           
  1039  0022                     LCDBusyLoop@busy:	
  1040                           ; 1 bytes @ 0x2
  1041                           
  1042  0022                     ___lwdiv@dividend:	
  1043                           ; 1 bytes @ 0x2
  1044                           
  1045                           
  1046                           ; 2 bytes @ 0x2
  1047  0022                     	ds	1
  1048  0023                     ?_get_msg_index:	
  1049  0023                     get_msg_index@end_index:	
  1050                           ; 1 bytes @ 0x3
  1051                           
  1052  0023                     LCDBusyLoop@temp:	
  1053                           ; 1 bytes @ 0x3
  1054                           
  1055                           
  1056                           ; 1 bytes @ 0x3
  1057  0023                     	ds	1
  1058  0024                     ??_get_msg_index:	
  1059  0024                     ??___lwdiv:	
  1060                           ; 1 bytes @ 0x4
  1061                           
  1062  0024                     LCDBusyLoop@status:	
  1063                           ; 1 bytes @ 0x4
  1064                           
  1065  0024                     LoadMenuItem@item:	
  1066                           ; 1 bytes @ 0x4
  1067                           
  1068                           
  1069                           ; 1 bytes @ 0x4
  1070  0024                     	ds	1
  1071  0025                     ?_LCDByte:	
  1072  0025                     ??_MenuInit:	
  1073                           ; 1 bytes @ 0x5
  1074                           
  1075  0025                     ??_ConnInit:	
  1076                           ; 1 bytes @ 0x5
  1077                           
  1078  0025                     LCDByte@isdata:	
  1079                           ; 1 bytes @ 0x5
  1080                           
  1081  0025                     ___lwdiv@quotient:	
  1082                           ; 1 bytes @ 0x5
  1083                           
  1084                           
  1085                           ; 2 bytes @ 0x5
  1086  0025                     	ds	1
  1087  0026                     ??_LCDByte:	
  1088  0026                     get_msg_index@start_index:	
  1089                           ; 1 bytes @ 0x6
  1090                           
  1091                           
  1092                           ; 1 bytes @ 0x6
  1093  0026                     	ds	1
  1094  0027                     get_msg_index@i:	
  1095  0027                     ___lwdiv@counter:	
  1096                           ; 1 bytes @ 0x7
  1097                           
  1098                           
  1099                           ; 1 bytes @ 0x7
  1100  0027                     	ds	1
  1101  0028                     ??_get_msg:	
  1102  0028                     ?___lwmod:	
  1103                           ; 1 bytes @ 0x8
  1104                           
  1105  0028                     LCDByte@hn:	
  1106                           ; 2 bytes @ 0x8
  1107                           
  1108  0028                     ___lwmod@divisor:	
  1109                           ; 1 bytes @ 0x8
  1110                           
  1111                           
  1112                           ; 2 bytes @ 0x8
  1113  0028                     	ds	1
  1114  0029                     LCDByte@ln:	
  1115                           
  1116                           ; 1 bytes @ 0x9
  1117  0029                     	ds	1
  1118  002A                     get_msg@pstr:	
  1119  002A                     LCDByte@c:	
  1120                           ; 1 bytes @ 0xA
  1121                           
  1122  002A                     ___lwmod@dividend:	
  1123                           ; 1 bytes @ 0xA
  1124                           
  1125                           
  1126                           ; 2 bytes @ 0xA
  1127  002A                     	ds	1
  1128  002B                     get_msg@pmsg:	
  1129  002B                     LCDByte@temp:	
  1130                           ; 1 bytes @ 0xB
  1131                           
  1132                           
  1133                           ; 1 bytes @ 0xB
  1134  002B                     	ds	1
  1135  002C                     ?_LCDGotoXY:	
  1136  002C                     ?_LCDWriteString:	
  1137                           ; 1 bytes @ 0xC
  1138                           
  1139  002C                     ??_LCDInit:	
  1140                           ; 1 bytes @ 0xC
  1141                           
  1142  002C                     ??___lwmod:	
  1143                           ; 1 bytes @ 0xC
  1144                           
  1145  002C                     get_msg@i:	
  1146                           ; 1 bytes @ 0xC
  1147                           
  1148  002C                     LCDGotoXY@y:	
  1149                           ; 1 bytes @ 0xC
  1150                           
  1151  002C                     LCDWriteString@msg:	
  1152                           ; 1 bytes @ 0xC
  1153                           
  1154                           
  1155                           ; 2 bytes @ 0xC
  1156  002C                     	ds	1
  1157  002D                     ??_LCDGotoXY:	
  1158  002D                     get_msg@start_index:	
  1159                           ; 1 bytes @ 0xD
  1160                           
  1161  002D                     ___lwmod@counter:	
  1162                           ; 1 bytes @ 0xD
  1163                           
  1164                           
  1165                           ; 1 bytes @ 0xD
  1166  002D                     	ds	1
  1167  002E                     ??_LCDWriteString:	
  1168  002E                     ?_sprintf:	
  1169                           ; 1 bytes @ 0xE
  1170                           
  1171  002E                     get_msg@end_index:	
  1172                           ; 2 bytes @ 0xE
  1173                           
  1174  002E                     LCDInit@style:	
  1175                           ; 1 bytes @ 0xE
  1176                           
  1177  002E                     LCDGotoXY@x:	
  1178                           ; 1 bytes @ 0xE
  1179                           
  1180  002E                     sprintf@sp:	
  1181                           ; 1 bytes @ 0xE
  1182                           
  1183                           
  1184                           ; 2 bytes @ 0xE
  1185  002E                     	ds	1
  1186  002F                     get_msg@temp:	
  1187  002F                     LCDInit@__i:	
  1188                           ; 1 bytes @ 0xF
  1189                           
  1190  002F                     LCDWriteString@count:	
  1191                           ; 1 bytes @ 0xF
  1192                           
  1193                           
  1194                           ; 1 bytes @ 0xF
  1195  002F                     	ds	1
  1196  0030                     LCDWriteString@cc:	
  1197  0030                     sprintf@f:	
  1198                           ; 1 bytes @ 0x10
  1199                           
  1200                           
  1201                           ; 1 bytes @ 0x10
  1202  0030                     	ds	13
  1203  003D                     ??_sprintf:	
  1204                           
  1205                           ; 1 bytes @ 0x1D
  1206  003D                     	ds	3
  1207  0040                     sprintf@ap:	
  1208                           
  1209                           ; 1 bytes @ 0x20
  1210  0040                     	ds	1
  1211  0041                     sprintf@flag:	
  1212                           
  1213                           ; 1 bytes @ 0x21
  1214  0041                     	ds	1
  1215  0042                     sprintf@prec:	
  1216                           
  1217                           ; 1 bytes @ 0x22
  1218  0042                     	ds	1
  1219  0043                     sprintf@val:	
  1220                           
  1221                           ; 2 bytes @ 0x23
  1222  0043                     	ds	2
  1223  0045                     sprintf@c:	
  1224                           
  1225                           ; 1 bytes @ 0x25
  1226  0045                     	ds	1
  1227  0046                     ??_dump_msg:	
  1228  0046                     ??_dump_conn:	
  1229                           ; 1 bytes @ 0x26
  1230                           
  1231                           
  1232                           ; 1 bytes @ 0x26
  1233  0046                     	ds	11
  1234  0051                     ??_main:	
  1235  0051                     main@count:	
  1236                           ; 1 bytes @ 0x31
  1237                           
  1238                           
  1239                           ; 1 bytes @ 0x31
  1240  0051                     	ds	1
  1241                           
  1242                           	psect	maintext
  1243  06B1                     __pmaintext:	
  1244 ;;
  1245 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1246 ;;
  1247 ;; *************** function _main *****************
  1248 ;; Defined at:
  1249 ;;		line 105 in file "do_am.c"
  1250 ;; Parameters:    Size  Location     Type
  1251 ;;		None
  1252 ;; Auto vars:     Size  Location     Type
  1253 ;;  count           1   49[BANK0 ] unsigned char 
  1254 ;;  value           1    0        unsigned char 
  1255 ;;  ret             1    0        unsigned char 
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1260 ;; Tracked objects:
  1261 ;;		On entry : B00/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1265 ;;      Params:         0       0       0       0       0
  1266 ;;      Locals:         0       1       0       0       0
  1267 ;;      Temps:          0       0       0       0       0
  1268 ;;      Totals:         0       1       0       0       0
  1269 ;;Total ram usage:        1 bytes
  1270 ;; Hardware stack levels required when called:    7
  1271 ;; This function calls:
  1272 ;;		_ADCInit
  1273 ;;		_ConnInit
  1274 ;;		_IOInit
  1275 ;;		_LCDByte
  1276 ;;		_LCDInit
  1277 ;;		_MenuInit
  1278 ;;		_dump_conn
  1279 ;;		_dump_msg
  1280 ;;		_get_msg
  1281 ;; This function is called by:
  1282 ;;		Startup code after reset
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           
  1287                           ;psect for function _main
  1288  06B1                     _main:	
  1289                           
  1290                           ;do_am.c: 108: LCDInit(0B00000000);
  1291                           
  1292                           ;incstack = 0
  1293                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1294  06B1  3000               	movlw	0
  1295  06B2  120A  118A  2435  120A  118A  	fcall	_LCDInit
  1296                           
  1297                           ;do_am.c: 111: ADCInit();
  1298  06B7  120A  158A  27C8  120A  118A  	fcall	_ADCInit
  1299                           
  1300                           ;do_am.c: 114: IOInit();
  1301  06BC  120A  118A  2664  120A  118A  	fcall	_IOInit
  1302                           
  1303                           ;do_am.c: 116: MenuInit();
  1304  06C1  120A  118A  272F  120A  118A  	fcall	_MenuInit
  1305                           
  1306                           ;do_am.c: 118: ConnInit();
  1307  06C6  120A  158A  2774  120A  118A  	fcall	_ConnInit
  1308                           
  1309                           ;do_am.c: 121: (LCDByte(0b00000001,0));
  1310  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  1311  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  1312  06CD  01A5               	clrf	LCDByte@isdata
  1313  06CE  3001               	movlw	1
  1314  06CF  120A  118A  25BF  120A  118A  	fcall	_LCDByte
  1315                           
  1316                           ;do_am.c: 123: uint8_t count = 0;
  1317  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  1318  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  1319  06D6  01D1               	clrf	main@count
  1320                           
  1321                           ;do_am.c: 124: uint8_t ret;
  1322                           ;do_am.c: 125: uint8_t value;
  1323                           ;do_am.c: 127: dump_conn(&server_conn);
  1324  06D7  305F               	movlw	(low (_server_conn| 0))& (0+255)
  1325  06D8  120A  118A  2323  120A  118A  	fcall	_dump_conn
  1326  06DD                     l2574:	
  1327                           ;do_am.c: 128: while(1)
  1328                           
  1329                           
  1330                           ;do_am.c: 129: {
  1331                           ;do_am.c: 130: if(get_msg(pmsg_rcv) == 1)
  1332  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  1333  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  1334  06DF  086A               	movf	_pmsg_rcv,w
  1335  06E0  120A  118A  2616  120A  118A  	fcall	_get_msg
  1336  06E5  3A01               	xorlw	1
  1337  06E6  1D03               	skipz
  1338  06E7  2EDD               	goto	l2574
  1339                           
  1340                           ;do_am.c: 131: {
  1341                           ;do_am.c: 132: dump_msg(pmsg_rcv);
  1342  06E8  1283               	bcf	3,5	;RP0=0, select bank0
  1343  06E9  1303               	bcf	3,6	;RP1=0, select bank0
  1344  06EA  086A               	movf	_pmsg_rcv,w
  1345  06EB  120A  118A  226C  120A  118A  	fcall	_dump_msg
  1346                           
  1347                           ;do_am.c: 133: }
  1348                           ;do_am.c: 143: {
  1349  06F0  2EDD               	goto	l2574
  1350  06F1                     __end_of_main:	
  1351                           
  1352                           	psect	text1
  1353  0616                     __ptext1:	
  1354 ;; *************** function _get_msg *****************
  1355 ;; Defined at:
  1356 ;;		line 103 in file "msg.h"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;  pmsg            1    wreg     PTR struct .
  1359 ;;		 -> msg_rcv(23), 
  1360 ;; Auto vars:     Size  Location     Type
  1361 ;;  pmsg            1   11[BANK0 ] PTR struct .
  1362 ;;		 -> msg_rcv(23), 
  1363 ;;  temp            1   15[BANK0 ] unsigned char 
  1364 ;;  end_index       1   14[BANK0 ] unsigned char 
  1365 ;;  start_index     1   13[BANK0 ] unsigned char 
  1366 ;;  i               1   12[BANK0 ] unsigned char 
  1367 ;;  pstr            1   10[BANK0 ] PTR unsigned char 
  1368 ;;		 -> msg_rcv(23), 
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  1    wreg      unsigned char 
  1371 ;; Registers used:
  1372 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1378 ;;      Params:         0       0       0       0       0
  1379 ;;      Locals:         0       6       0       0       0
  1380 ;;      Temps:          0       2       0       0       0
  1381 ;;      Totals:         0       8       0       0       0
  1382 ;;Total ram usage:        8 bytes
  1383 ;; Hardware stack levels used:    1
  1384 ;; Hardware stack levels required when called:    5
  1385 ;; This function calls:
  1386 ;;		_get_distance
  1387 ;;		_get_msg_index
  1388 ;;		_get_next_index
  1389 ;; This function is called by:
  1390 ;;		_main
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           
  1395                           ;psect for function _get_msg
  1396  0616                     _get_msg:	
  1397                           
  1398                           ;incstack = 0
  1399                           ; Regs used in _get_msg: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1400                           ;get_msg@pmsg stored from wreg
  1401  0616  1283               	bcf	3,5	;RP0=0, select bank0
  1402  0617  1303               	bcf	3,6	;RP1=0, select bank0
  1403  0618  00AB               	movwf	get_msg@pmsg
  1404                           
  1405                           ;msg.h: 105: uint8_t *pstr = (uint8_t *)pmsg;
  1406  0619  082B               	movf	get_msg@pmsg,w
  1407  061A  00A8               	movwf	??_get_msg
  1408  061B  0828               	movf	??_get_msg,w
  1409  061C  00AA               	movwf	get_msg@pstr
  1410                           
  1411                           ;msg.h: 106: uint8_t start_index, end_index;
  1412                           ;msg.h: 107: uint8_t i = 0;
  1413  061D  01AC               	clrf	get_msg@i
  1414                           
  1415                           ;msg.h: 108: uint8_t temp;
  1416                           ;msg.h: 109: if(get_msg_index(&start_index, &end_index) == 1)
  1417  061E  302E               	movlw	(low (get_msg@end_index| 0))& (0+255)
  1418  061F  00A8               	movwf	??_get_msg
  1419  0620  0828               	movf	??_get_msg,w
  1420  0621  00A3               	movwf	get_msg_index@end_index
  1421  0622  302D               	movlw	(low (get_msg@start_index| 0))& (0+255)
  1422  0623  120A  118A  2053  120A  118A  	fcall	_get_msg_index
  1423  0628  3A01               	xorlw	1
  1424  0629  1D03               	skipz
  1425  062A  2E62               	goto	l2266
  1426                           
  1427                           ;msg.h: 110: {
  1428                           ;msg.h: 111: temp = start_index;
  1429  062B  1283               	bcf	3,5	;RP0=0, select bank0
  1430  062C  1303               	bcf	3,6	;RP1=0, select bank0
  1431  062D  082D               	movf	get_msg@start_index,w
  1432  062E                     L1:	
  1433  062E  00A8               	movwf	??_get_msg
  1434  062F  0828               	movf	??_get_msg,w
  1435  0630  00AF               	movwf	get_msg@temp
  1436                           
  1437                           ;msg.h: 113: {
  1438                           ;msg.h: 114: pstr[i++] = buffer_rcv[temp];
  1439                           
  1440                           ;msg.h: 112: while(1)
  1441  0631  082F               	movf	get_msg@temp,w
  1442  0632  3EC3               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1443  0633  0084               	movwf	4
  1444  0634  1383               	bcf	3,7	;select IRP bank1
  1445  0635  0800               	movf	0,w
  1446  0636  00A8               	movwf	??_get_msg
  1447  0637  082C               	movf	get_msg@i,w
  1448  0638  072A               	addwf	get_msg@pstr,w
  1449  0639  00A9               	movwf	??_get_msg+1
  1450  063A  0829               	movf	??_get_msg+1,w
  1451  063B  0084               	movwf	4
  1452  063C  0828               	movf	??_get_msg,w
  1453  063D  1783               	bsf	3,7	;select IRP bank2
  1454  063E  0080               	movwf	0
  1455  063F  3001               	movlw	1
  1456  0640  00A8               	movwf	??_get_msg
  1457  0641  0828               	movf	??_get_msg,w
  1458  0642  07AC               	addwf	get_msg@i,f
  1459                           
  1460                           ;msg.h: 115: buffer_rcv[temp] = 0;
  1461  0643  082F               	movf	get_msg@temp,w
  1462  0644  3EC3               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1463  0645  0084               	movwf	4
  1464  0646  1383               	bcf	3,7	;select IRP bank1
  1465  0647  0180               	clrf	0
  1466                           
  1467                           ;msg.h: 116: if(get_distance(temp, end_index) == 0)
  1468  0648  082E               	movf	get_msg@end_index,w
  1469  0649  00A8               	movwf	??_get_msg
  1470  064A  0828               	movf	??_get_msg,w
  1471  064B  00A0               	movwf	get_distance@end_index
  1472  064C  082F               	movf	get_msg@temp,w
  1473  064D  120A  158A  2784  120A  118A  	fcall	_get_distance
  1474  0652  3A00               	xorlw	0
  1475  0653  1903               	btfsc	3,2
  1476  0654  2E60               	goto	l2262
  1477                           
  1478                           ;msg.h: 119: }
  1479                           ;msg.h: 120: temp = get_next_index(temp);
  1480                           
  1481                           ;msg.h: 117: {
  1482                           ;msg.h: 118: break;
  1483  0655  1283               	bcf	3,5	;RP0=0, select bank0
  1484  0656  1303               	bcf	3,6	;RP1=0, select bank0
  1485  0657  082F               	movf	get_msg@temp,w
  1486  0658  120A  158A  2759  120A  118A  	fcall	_get_next_index
  1487  065D  1283               	bcf	3,5	;RP0=0, select bank0
  1488  065E  1303               	bcf	3,6	;RP1=0, select bank0
  1489  065F  2E2E               	goto	L1
  1490  0660                     l2262:	
  1491                           
  1492                           ;msg.h: 121: }
  1493                           ;msg.h: 123: return 1;
  1494  0660  3001               	movlw	1
  1495  0661  0008               	return
  1496  0662                     l2266:	
  1497                           
  1498                           ;msg.h: 124: }
  1499                           ;msg.h: 126: return 0;
  1500  0662  3000               	movlw	0
  1501  0663  0008               	return
  1502  0664                     __end_of_get_msg:	
  1503                           
  1504                           	psect	text2
  1505  0053                     __ptext2:	
  1506 ;; *************** function _get_msg_index *****************
  1507 ;; Defined at:
  1508 ;;		line 83 in file "circle_buffer.h"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;  start_index     1    wreg     PTR unsigned char 
  1511 ;;		 -> get_msg@start_index(1), 
  1512 ;;  end_index       1    3[BANK0 ] PTR unsigned char 
  1513 ;;		 -> get_msg@end_index(1), 
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;  start_index     1    6[BANK0 ] PTR unsigned char 
  1516 ;;		 -> get_msg@start_index(1), 
  1517 ;;  i               1    7[BANK0 ] unsigned char 
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  1    wreg      unsigned char 
  1520 ;; Registers used:
  1521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1527 ;;      Params:         0       1       0       0       0
  1528 ;;      Locals:         0       2       0       0       0
  1529 ;;      Temps:          0       2       0       0       0
  1530 ;;      Totals:         0       5       0       0       0
  1531 ;;Total ram usage:        5 bytes
  1532 ;; Hardware stack levels used:    1
  1533 ;; Hardware stack levels required when called:    4
  1534 ;; This function calls:
  1535 ;;		_get_distance
  1536 ;;		_get_minus_index
  1537 ;;		_get_next_index
  1538 ;;		_get_plus_index
  1539 ;; This function is called by:
  1540 ;;		_get_msg
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           
  1545                           ;psect for function _get_msg_index
  1546  0053                     _get_msg_index:	
  1547                           
  1548                           ;incstack = 0
  1549                           ; Regs used in _get_msg_index: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1550                           ;get_msg_index@start_index stored from wreg
  1551  0053  1283               	bcf	3,5	;RP0=0, select bank0
  1552  0054  1303               	bcf	3,6	;RP1=0, select bank0
  1553  0055  00A6               	movwf	get_msg_index@start_index
  1554                           
  1555                           ;circle_buffer.h: 105: uint8_t i;
  1556                           ;circle_buffer.h: 106: *start_index = 0xFF;
  1557  0056  30FF               	movlw	255
  1558  0057  00A4               	movwf	??_get_msg_index
  1559  0058  0826               	movf	get_msg_index@start_index,w
  1560  0059  0084               	movwf	4
  1561  005A  0824               	movf	??_get_msg_index,w
  1562  005B  1383               	bcf	3,7	;select IRP bank0
  1563  005C  0080               	movwf	0
  1564                           
  1565                           ;circle_buffer.h: 107: *end_index = 0xFF;
  1566  005D  30FF               	movlw	255
  1567  005E  00A4               	movwf	??_get_msg_index
  1568  005F  0823               	movf	get_msg_index@end_index,w
  1569  0060  0084               	movwf	4
  1570  0061  0824               	movf	??_get_msg_index,w
  1571  0062  0080               	movwf	0
  1572                           
  1573                           ;circle_buffer.h: 109: if(low_half_rcv == 0)
  1574  0063  087D               	movf	_low_half_rcv,w
  1575  0064  1D03               	btfss	3,2
  1576  0065  2868               	goto	l2128
  1577                           
  1578                           ;circle_buffer.h: 110: {
  1579                           ;circle_buffer.h: 111: return 0;
  1580  0066  3000               	movlw	0
  1581  0067  0008               	return
  1582  0068                     l2128:	
  1583                           
  1584                           ;circle_buffer.h: 112: }
  1585                           ;circle_buffer.h: 113: if(get_distance(start_index_rcv, end_index_rcv) <= 7)
  1586  0068  087C               	movf	_end_index_rcv,w
  1587  0069  00A4               	movwf	??_get_msg_index
  1588  006A  0824               	movf	??_get_msg_index,w
  1589  006B  00A0               	movwf	get_distance@end_index
  1590  006C  085E               	movf	_start_index_rcv,w
  1591  006D  120A  158A  2784  120A  118A  	fcall	_get_distance
  1592  0072  1283               	bcf	3,5	;RP0=0, select bank0
  1593  0073  1303               	bcf	3,6	;RP1=0, select bank0
  1594  0074  00A5               	movwf	??_get_msg_index+1
  1595  0075  3008               	movlw	8
  1596  0076  0225               	subwf	??_get_msg_index+1,w
  1597  0077  1803               	skipnc
  1598  0078  287B               	goto	l2134
  1599                           
  1600                           ;circle_buffer.h: 114: {
  1601                           ;circle_buffer.h: 115: return 0;
  1602  0079  3000               	movlw	0
  1603  007A  0008               	return
  1604  007B                     l2134:	
  1605                           
  1606                           ;circle_buffer.h: 116: }
  1607                           ;circle_buffer.h: 117: i = start_index_rcv;
  1608  007B  085E               	movf	_start_index_rcv,w
  1609  007C                     L2:	
  1610  007C  00A4               	movwf	??_get_msg_index
  1611  007D  0824               	movf	??_get_msg_index,w
  1612  007E  00A7               	movwf	get_msg_index@i
  1613  007F  087C               	movf	_end_index_rcv,w
  1614  0080  00A4               	movwf	??_get_msg_index
  1615  0081  0824               	movf	??_get_msg_index,w
  1616  0082  00A0               	movwf	get_distance@end_index
  1617  0083  0827               	movf	get_msg_index@i,w
  1618  0084  120A  158A  2784  120A  118A  	fcall	_get_distance
  1619  0089  1283               	bcf	3,5	;RP0=0, select bank0
  1620  008A  1303               	bcf	3,6	;RP1=0, select bank0
  1621  008B  00A5               	movwf	??_get_msg_index+1
  1622  008C  3003               	movlw	3
  1623  008D  0225               	subwf	??_get_msg_index+1,w
  1624  008E  1C03               	btfss	3,0
  1625  008F  2977               	goto	l2160
  1626                           
  1627                           ;circle_buffer.h: 119: {
  1628                           ;circle_buffer.h: 122: if((buffer_rcv[i] == start_mark[0]) && (buffer_rcv[get_plus_index
      +                          (i, 1)] == start_mark[1])
  1629                           ;circle_buffer.h: 123: && (buffer_rcv[get_plus_index(i, 2)] == start_mark[2]) && (buffer
      +                          _rcv[get_plus_index(i, 3)] == start_mark[3]))
  1630                           
  1631                           ;circle_buffer.h: 118: while(get_distance(i, end_index_rcv) >= 3)
  1632  0090  300B               	movlw	low (_start_mark-__stringbase)
  1633  0091  0084               	movwf	4
  1634  0092  120A  118A  2571  120A  118A  	fcall	stringdir
  1635  0097  00A4               	movwf	??_get_msg_index
  1636  0098  0827               	movf	get_msg_index@i,w
  1637  0099  3EC3               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1638  009A  0084               	movwf	4
  1639  009B  1383               	bcf	3,7	;select IRP bank1
  1640  009C  0800               	movf	0,w
  1641  009D  0624               	xorwf	??_get_msg_index,w
  1642  009E  1D03               	skipz
  1643  009F  2900               	goto	l2146
  1644  00A0  300C               	movlw	low (((_start_mark+1)-__stringbase)| (0+32768))
  1645  00A1  0084               	movwf	4
  1646  00A2  120A  118A  2571  120A  118A  	fcall	stringdir
  1647  00A7  00A4               	movwf	??_get_msg_index
  1648  00A8  01A0               	clrf	get_plus_index@add
  1649  00A9  0AA0               	incf	get_plus_index@add,f
  1650  00AA  0827               	movf	get_msg_index@i,w
  1651  00AB  120A  158A  2765  120A  118A  	fcall	_get_plus_index
  1652  00B0  3EC3               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1653  00B1  0084               	movwf	4
  1654  00B2  1383               	bcf	3,7	;select IRP bank1
  1655  00B3  0800               	movf	0,w
  1656  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1657  00B5  1303               	bcf	3,6	;RP1=0, select bank0
  1658  00B6  0624               	xorwf	??_get_msg_index,w
  1659  00B7  1D03               	skipz
  1660  00B8  2900               	goto	l2146
  1661  00B9  300D               	movlw	low (((_start_mark+2)-__stringbase)| (0+32768))
  1662  00BA  0084               	movwf	4
  1663  00BB  120A  118A  2571  120A  118A  	fcall	stringdir
  1664  00C0  00A4               	movwf	??_get_msg_index
  1665  00C1  3002               	movlw	2
  1666  00C2  00A5               	movwf	??_get_msg_index+1
  1667  00C3  0825               	movf	??_get_msg_index+1,w
  1668  00C4  00A0               	movwf	get_plus_index@add
  1669  00C5  0827               	movf	get_msg_index@i,w
  1670  00C6  120A  158A  2765  120A  118A  	fcall	_get_plus_index
  1671  00CB  3EC3               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1672  00CC  0084               	movwf	4
  1673  00CD  1383               	bcf	3,7	;select IRP bank1
  1674  00CE  0800               	movf	0,w
  1675  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1676  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1677  00D1  0624               	xorwf	??_get_msg_index,w
  1678  00D2  1D03               	skipz
  1679  00D3  2900               	goto	l2146
  1680                           
  1681                           ;circle_buffer.h: 124: {
  1682                           ;circle_buffer.h: 125: if(*start_index != -1)
  1683  00D4  300E               	movlw	low (((_start_mark+3)-__stringbase)| (0+32768))
  1684  00D5  0084               	movwf	4
  1685  00D6  120A  118A  2571  120A  118A  	fcall	stringdir
  1686  00DB  00A4               	movwf	??_get_msg_index
  1687  00DC  3003               	movlw	3
  1688  00DD  00A5               	movwf	??_get_msg_index+1
  1689  00DE  0825               	movf	??_get_msg_index+1,w
  1690  00DF  00A0               	movwf	get_plus_index@add
  1691  00E0  0827               	movf	get_msg_index@i,w
  1692  00E1  120A  158A  2765  120A  118A  	fcall	_get_plus_index
  1693  00E6  3EC3               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1694  00E7  0084               	movwf	4
  1695  00E8  1383               	bcf	3,7	;select IRP bank1
  1696  00E9  0800               	movf	0,w
  1697  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  1698  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  1699  00EC  0624               	xorwf	??_get_msg_index,w
  1700  00ED  1D03               	skipz
  1701  00EE  2900               	goto	l2146
  1702                           
  1703                           ;circle_buffer.h: 126: {
  1704                           ;circle_buffer.h: 127: *start_index = get_plus_index(i, 4);
  1705  00EF  3004               	movlw	4
  1706  00F0  00A4               	movwf	??_get_msg_index
  1707  00F1  0824               	movf	??_get_msg_index,w
  1708  00F2  00A0               	movwf	get_plus_index@add
  1709  00F3  0827               	movf	get_msg_index@i,w
  1710  00F4  120A  158A  2765  120A  118A  	fcall	_get_plus_index
  1711  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  1712  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  1713  00FB  00A5               	movwf	??_get_msg_index+1
  1714  00FC  0826               	movf	get_msg_index@start_index,w
  1715  00FD  0084               	movwf	4
  1716  00FE  0825               	movf	??_get_msg_index+1,w
  1717  00FF  296C               	goto	L3
  1718  0100                     l2146:	
  1719                           ;circle_buffer.h: 128: }
  1720                           ;circle_buffer.h: 129: }
  1721                           
  1722                           
  1723                           ;circle_buffer.h: 130: else if((buffer_rcv[i] == stop_mark[0]) && (buffer_rcv[get_plus_i
      +                          ndex(i, 1)] == stop_mark[1])
  1724                           ;circle_buffer.h: 131: && (buffer_rcv[get_plus_index(i, 2)] == stop_mark[2]) && (buffer_
      +                          rcv[get_plus_index(i, 3)] == stop_mark[3]))
  1725  0100  300F               	movlw	low (_stop_mark-__stringbase)
  1726  0101  0084               	movwf	4
  1727  0102  120A  118A  2571  120A  118A  	fcall	stringdir
  1728  0107  00A4               	movwf	??_get_msg_index
  1729  0108  0827               	movf	get_msg_index@i,w
  1730  0109  3EC3               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1731  010A  0084               	movwf	4
  1732  010B  0800               	movf	0,w
  1733  010C  0624               	xorwf	??_get_msg_index,w
  1734  010D  1D03               	skipz
  1735  010E  296E               	goto	l2156
  1736  010F  3010               	movlw	low (((_stop_mark+1)-__stringbase)| (0+32768))
  1737  0110  0084               	movwf	4
  1738  0111  120A  118A  2571  120A  118A  	fcall	stringdir
  1739  0116  00A4               	movwf	??_get_msg_index
  1740  0117  01A0               	clrf	get_plus_index@add
  1741  0118  0AA0               	incf	get_plus_index@add,f
  1742  0119  0827               	movf	get_msg_index@i,w
  1743  011A  120A  158A  2765  120A  118A  	fcall	_get_plus_index
  1744  011F  3EC3               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1745  0120  0084               	movwf	4
  1746  0121  1383               	bcf	3,7	;select IRP bank1
  1747  0122  0800               	movf	0,w
  1748  0123  1283               	bcf	3,5	;RP0=0, select bank0
  1749  0124  1303               	bcf	3,6	;RP1=0, select bank0
  1750  0125  0624               	xorwf	??_get_msg_index,w
  1751  0126  1D03               	skipz
  1752  0127  296E               	goto	l2156
  1753  0128  3011               	movlw	low (((_stop_mark+2)-__stringbase)| (0+32768))
  1754  0129  0084               	movwf	4
  1755  012A  120A  118A  2571  120A  118A  	fcall	stringdir
  1756  012F  00A4               	movwf	??_get_msg_index
  1757  0130  3002               	movlw	2
  1758  0131  00A5               	movwf	??_get_msg_index+1
  1759  0132  0825               	movf	??_get_msg_index+1,w
  1760  0133  00A0               	movwf	get_plus_index@add
  1761  0134  0827               	movf	get_msg_index@i,w
  1762  0135  120A  158A  2765  120A  118A  	fcall	_get_plus_index
  1763  013A  3EC3               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1764  013B  0084               	movwf	4
  1765  013C  1383               	bcf	3,7	;select IRP bank1
  1766  013D  0800               	movf	0,w
  1767  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1768  013F  1303               	bcf	3,6	;RP1=0, select bank0
  1769  0140  0624               	xorwf	??_get_msg_index,w
  1770  0141  1D03               	skipz
  1771  0142  296E               	goto	l2156
  1772                           
  1773                           ;circle_buffer.h: 132: {
  1774                           ;circle_buffer.h: 133: if(*end_index != -1)
  1775  0143  3012               	movlw	low (((_stop_mark+3)-__stringbase)| (0+32768))
  1776  0144  0084               	movwf	4
  1777  0145  120A  118A  2571  120A  118A  	fcall	stringdir
  1778  014A  00A4               	movwf	??_get_msg_index
  1779  014B  3003               	movlw	3
  1780  014C  00A5               	movwf	??_get_msg_index+1
  1781  014D  0825               	movf	??_get_msg_index+1,w
  1782  014E  00A0               	movwf	get_plus_index@add
  1783  014F  0827               	movf	get_msg_index@i,w
  1784  0150  120A  158A  2765  120A  118A  	fcall	_get_plus_index
  1785  0155  3EC3               	addlw	(low (_buffer_rcv| 0))& (0+255)
  1786  0156  0084               	movwf	4
  1787  0157  1383               	bcf	3,7	;select IRP bank1
  1788  0158  0800               	movf	0,w
  1789  0159  1283               	bcf	3,5	;RP0=0, select bank0
  1790  015A  1303               	bcf	3,6	;RP1=0, select bank0
  1791  015B  0624               	xorwf	??_get_msg_index,w
  1792  015C  1D03               	skipz
  1793  015D  296E               	goto	l2156
  1794                           
  1795                           ;circle_buffer.h: 134: {
  1796                           ;circle_buffer.h: 135: *end_index = get_minus_index(i, 1);
  1797  015E  01A0               	clrf	get_minus_index@sub
  1798  015F  0AA0               	incf	get_minus_index@sub,f
  1799  0160  0827               	movf	get_msg_index@i,w
  1800  0161  120A  158A  2794  120A  118A  	fcall	_get_minus_index
  1801  0166  1283               	bcf	3,5	;RP0=0, select bank0
  1802  0167  1303               	bcf	3,6	;RP1=0, select bank0
  1803  0168  00A4               	movwf	??_get_msg_index
  1804  0169  0823               	movf	get_msg_index@end_index,w
  1805  016A  0084               	movwf	4
  1806  016B  0824               	movf	??_get_msg_index,w
  1807  016C                     L3:	
  1808  016C  1383               	bcf	3,7	;select IRP bank0
  1809  016D  0080               	movwf	0
  1810  016E                     l2156:	
  1811                           
  1812                           ;circle_buffer.h: 136: }
  1813                           ;circle_buffer.h: 137: }
  1814                           ;circle_buffer.h: 139: i = get_next_index(i);
  1815  016E  0827               	movf	get_msg_index@i,w
  1816  016F  120A  158A  2759  120A  118A  	fcall	_get_next_index
  1817  0174  1283               	bcf	3,5	;RP0=0, select bank0
  1818  0175  1303               	bcf	3,6	;RP1=0, select bank0
  1819  0176  287C               	goto	L2
  1820  0177                     l2160:	
  1821                           
  1822                           ;circle_buffer.h: 140: }
  1823                           ;circle_buffer.h: 142: if(((*start_index != 0xFF) && (*end_index != 0xFF)) == 1)
  1824  0177  0826               	movf	get_msg_index@start_index,w
  1825  0178  0084               	movwf	4
  1826  0179  1383               	bcf	3,7	;select IRP bank0
  1827  017A  0A00               	incf	0,w
  1828  017B  1903               	btfsc	3,2
  1829  017C  2993               	goto	l2170
  1830  017D  0823               	movf	get_msg_index@end_index,w
  1831  017E  0084               	movwf	4
  1832  017F  0A00               	incf	0,w
  1833  0180  1903               	btfsc	3,2
  1834  0181  2993               	goto	l2170
  1835                           
  1836                           ;circle_buffer.h: 143: {
  1837                           ;circle_buffer.h: 144: start_index_rcv = get_plus_index(*end_index, 5);
  1838  0182  3005               	movlw	5
  1839  0183  00A4               	movwf	??_get_msg_index
  1840  0184  0824               	movf	??_get_msg_index,w
  1841  0185  00A0               	movwf	get_plus_index@add
  1842  0186  0823               	movf	get_msg_index@end_index,w
  1843  0187  0084               	movwf	4
  1844  0188  0800               	movf	0,w
  1845  0189  120A  158A  2765   	fcall	_get_plus_index
  1846  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1847  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1848  018E  00A5               	movwf	??_get_msg_index+1
  1849  018F  0825               	movf	??_get_msg_index+1,w
  1850  0190  00DE               	movwf	_start_index_rcv
  1851                           
  1852                           ;circle_buffer.h: 145: return 1;
  1853  0191  3001               	movlw	1
  1854  0192  0008               	return
  1855  0193                     l2170:	
  1856                           
  1857                           ;circle_buffer.h: 146: }
  1858                           ;circle_buffer.h: 147: return 0;
  1859  0193  3000               	movlw	0
  1860  0194  0008               	return
  1861  0195                     __end_of_get_msg_index:	
  1862                           
  1863                           	psect	text3
  1864  0F65                     __ptext3:	
  1865 ;; *************** function _get_plus_index *****************
  1866 ;; Defined at:
  1867 ;;		line 55 in file "circle_buffer.h"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;  index           1    wreg     unsigned char 
  1870 ;;  add             1    0[BANK0 ] unsigned char 
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;  index           1    2[BANK0 ] unsigned char 
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  1    wreg      unsigned char 
  1875 ;; Registers used:
  1876 ;;		wreg, status,2, status,0
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1882 ;;      Params:         0       1       0       0       0
  1883 ;;      Locals:         0       1       0       0       0
  1884 ;;      Temps:          0       1       0       0       0
  1885 ;;      Totals:         0       3       0       0       0
  1886 ;;Total ram usage:        3 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    3
  1889 ;; This function calls:
  1890 ;;		Nothing
  1891 ;; This function is called by:
  1892 ;;		_get_msg_index
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           
  1897                           ;psect for function _get_plus_index
  1898  0F65                     _get_plus_index:	
  1899                           
  1900                           ;incstack = 0
  1901                           ; Regs used in _get_plus_index: [wreg+status,2+status,0]
  1902                           ;get_plus_index@index stored from wreg
  1903  0F65  1283               	bcf	3,5	;RP0=0, select bank0
  1904  0F66  1303               	bcf	3,6	;RP1=0, select bank0
  1905  0F67  00A2               	movwf	get_plus_index@index
  1906                           
  1907                           ;circle_buffer.h: 57: index += add;
  1908  0F68  0820               	movf	get_plus_index@add,w
  1909  0F69  00A1               	movwf	??_get_plus_index
  1910  0F6A  0821               	movf	??_get_plus_index,w
  1911  0F6B  07A2               	addwf	get_plus_index@index,f
  1912                           
  1913                           ;circle_buffer.h: 58: if(index >= 32)
  1914  0F6C  3020               	movlw	32
  1915  0F6D  0222               	subwf	get_plus_index@index,w
  1916  0F6E  1C03               	skipc
  1917  0F6F  2F72               	goto	l1934
  1918                           
  1919                           ;circle_buffer.h: 59: {
  1920                           ;circle_buffer.h: 60: index -= 32;
  1921  0F70  3020               	movlw	32
  1922  0F71  02A2               	subwf	get_plus_index@index,f
  1923  0F72                     l1934:	
  1924                           
  1925                           ;circle_buffer.h: 61: }
  1926                           ;circle_buffer.h: 62: return index;
  1927  0F72  0822               	movf	get_plus_index@index,w
  1928  0F73  0008               	return
  1929  0F74                     __end_of_get_plus_index:	
  1930                           
  1931                           	psect	text4
  1932  0F59                     __ptext4:	
  1933 ;; *************** function _get_next_index *****************
  1934 ;; Defined at:
  1935 ;;		line 30 in file "circle_buffer.h"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;  index           1    wreg     unsigned char 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  index           1    0[BANK0 ] unsigned char 
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      unsigned char 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1949 ;;      Params:         0       0       0       0       0
  1950 ;;      Locals:         0       1       0       0       0
  1951 ;;      Temps:          0       0       0       0       0
  1952 ;;      Totals:         0       1       0       0       0
  1953 ;;Total ram usage:        1 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    3
  1956 ;; This function calls:
  1957 ;;		Nothing
  1958 ;; This function is called by:
  1959 ;;		_get_msg_index
  1960 ;;		_get_msg
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           
  1965                           ;psect for function _get_next_index
  1966  0F59                     _get_next_index:	
  1967                           
  1968                           ;incstack = 0
  1969                           ; Regs used in _get_next_index: [wreg+status,2+status,0]
  1970                           ;get_next_index@index stored from wreg
  1971  0F59  1283               	bcf	3,5	;RP0=0, select bank0
  1972  0F5A  1303               	bcf	3,6	;RP1=0, select bank0
  1973  0F5B  00A0               	movwf	get_next_index@index
  1974                           
  1975                           ;circle_buffer.h: 32: if(index == 32 - 1)
  1976  0F5C  301F               	movlw	31
  1977  0F5D  0620               	xorwf	get_next_index@index,w
  1978  0F5E  1D03               	btfss	3,2
  1979  0F5F  2F62               	goto	l1926
  1980                           
  1981                           ;circle_buffer.h: 33: {
  1982                           ;circle_buffer.h: 34: return 0;
  1983  0F60  3000               	movlw	0
  1984                           
  1985                           ;circle_buffer.h: 35: }
  1986  0F61  0008               	return
  1987  0F62                     l1926:	
  1988                           
  1989                           ;circle_buffer.h: 36: else
  1990                           ;circle_buffer.h: 37: {
  1991                           ;circle_buffer.h: 38: return (index + 1);
  1992  0F62  0820               	movf	get_next_index@index,w
  1993  0F63  3E01               	addlw	1
  1994  0F64  0008               	return
  1995  0F65                     __end_of_get_next_index:	
  1996                           
  1997                           	psect	text5
  1998  0F94                     __ptext5:	
  1999 ;; *************** function _get_minus_index *****************
  2000 ;; Defined at:
  2001 ;;		line 64 in file "circle_buffer.h"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;  index           1    wreg     unsigned char 
  2004 ;;  sub             1    0[BANK0 ] unsigned char 
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;  index           1    1[BANK0 ] unsigned char 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  1    wreg      unsigned char 
  2009 ;; Registers used:
  2010 ;;		wreg, status,2, status,0
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2016 ;;      Params:         0       1       0       0       0
  2017 ;;      Locals:         0       1       0       0       0
  2018 ;;      Temps:          0       0       0       0       0
  2019 ;;      Totals:         0       2       0       0       0
  2020 ;;Total ram usage:        2 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; Hardware stack levels required when called:    3
  2023 ;; This function calls:
  2024 ;;		Nothing
  2025 ;; This function is called by:
  2026 ;;		_get_msg_index
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           
  2031                           ;psect for function _get_minus_index
  2032  0F94                     _get_minus_index:	
  2033                           
  2034                           ;incstack = 0
  2035                           ; Regs used in _get_minus_index: [wreg+status,2+status,0]
  2036                           ;get_minus_index@index stored from wreg
  2037  0F94  1283               	bcf	3,5	;RP0=0, select bank0
  2038  0F95  1303               	bcf	3,6	;RP1=0, select bank0
  2039  0F96  00A1               	movwf	get_minus_index@index
  2040                           
  2041                           ;circle_buffer.h: 66: if(index < sub)
  2042  0F97  0820               	movf	get_minus_index@sub,w
  2043  0F98  0221               	subwf	get_minus_index@index,w
  2044  0F99  1803               	skipnc
  2045  0F9A  2FA0               	goto	l1944
  2046                           
  2047                           ;circle_buffer.h: 67: {
  2048                           ;circle_buffer.h: 68: return index + 32 - sub;
  2049  0F9B  0320               	decf	get_minus_index@sub,w
  2050  0F9C  3AFF               	xorlw	255
  2051  0F9D  0721               	addwf	get_minus_index@index,w
  2052  0F9E  3E20               	addlw	32
  2053  0F9F  0008               	return
  2054  0FA0                     l1944:	
  2055                           
  2056                           ;circle_buffer.h: 69: }
  2057                           ;circle_buffer.h: 70: return index - sub;
  2058  0FA0  0320               	decf	get_minus_index@sub,w
  2059  0FA1  3AFF               	xorlw	255
  2060  0FA2  0721               	addwf	get_minus_index@index,w
  2061  0FA3  0008               	return
  2062  0FA4                     __end_of_get_minus_index:	
  2063                           
  2064                           	psect	text6
  2065  0F84                     __ptext6:	
  2066 ;; *************** function _get_distance *****************
  2067 ;; Defined at:
  2068 ;;		line 72 in file "circle_buffer.h"
  2069 ;; Parameters:    Size  Location     Type
  2070 ;;  start_index     1    wreg     unsigned char 
  2071 ;;  end_index       1    0[BANK0 ] unsigned char 
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;  start_index     1    1[BANK0 ] unsigned char 
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      unsigned char 
  2076 ;; Registers used:
  2077 ;;		wreg, status,2, status,0
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2083 ;;      Params:         0       1       0       0       0
  2084 ;;      Locals:         0       1       0       0       0
  2085 ;;      Temps:          0       0       0       0       0
  2086 ;;      Totals:         0       2       0       0       0
  2087 ;;Total ram usage:        2 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    3
  2090 ;; This function calls:
  2091 ;;		Nothing
  2092 ;; This function is called by:
  2093 ;;		_get_msg_index
  2094 ;;		_get_msg
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           
  2099                           ;psect for function _get_distance
  2100  0F84                     _get_distance:	
  2101                           
  2102                           ;incstack = 0
  2103                           ; Regs used in _get_distance: [wreg+status,2+status,0]
  2104                           ;get_distance@start_index stored from wreg
  2105  0F84  1283               	bcf	3,5	;RP0=0, select bank0
  2106  0F85  1303               	bcf	3,6	;RP1=0, select bank0
  2107  0F86  00A1               	movwf	get_distance@start_index
  2108                           
  2109                           ;circle_buffer.h: 74: if(end_index < start_index)
  2110  0F87  0821               	movf	get_distance@start_index,w
  2111  0F88  0220               	subwf	get_distance@end_index,w
  2112  0F89  1803               	skipnc
  2113  0F8A  2F90               	goto	l1956
  2114                           
  2115                           ;circle_buffer.h: 75: {
  2116                           ;circle_buffer.h: 76: return end_index + 32 - start_index;
  2117  0F8B  0321               	decf	get_distance@start_index,w
  2118  0F8C  3AFF               	xorlw	255
  2119  0F8D  0720               	addwf	get_distance@end_index,w
  2120  0F8E  3E20               	addlw	32
  2121                           
  2122                           ;circle_buffer.h: 77: }
  2123  0F8F  0008               	return
  2124  0F90                     l1956:	
  2125                           
  2126                           ;circle_buffer.h: 78: else
  2127                           ;circle_buffer.h: 79: {
  2128                           ;circle_buffer.h: 80: return (end_index - start_index);
  2129  0F90  0321               	decf	get_distance@start_index,w
  2130  0F91  3AFF               	xorlw	255
  2131  0F92  0720               	addwf	get_distance@end_index,w
  2132  0F93  0008               	return
  2133  0F94                     __end_of_get_distance:	
  2134                           
  2135                           	psect	text7
  2136  026C                     __ptext7:	
  2137 ;; *************** function _dump_msg *****************
  2138 ;; Defined at:
  2139 ;;		line 75 in file "msg.h"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;  pmsg            1    wreg     PTR struct .
  2142 ;;		 -> msg_rcv(23), 
  2143 ;; Auto vars:     Size  Location     Type
  2144 ;;  pmsg            1   34[BANK1 ] PTR struct .
  2145 ;;		 -> msg_rcv(23), 
  2146 ;;  i               1   33[BANK1 ] char 
  2147 ;;  count           1   32[BANK1 ] char 
  2148 ;;  s              32    0[BANK1 ] unsigned char [32]
  2149 ;; Return value:  Size  Location     Type
  2150 ;;                  1    wreg      void 
  2151 ;; Registers used:
  2152 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2153 ;; Tracked objects:
  2154 ;;		On entry : 0/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2158 ;;      Params:         0       0       0       0       0
  2159 ;;      Locals:         0       0      35       0       0
  2160 ;;      Temps:          0      11       0       0       0
  2161 ;;      Totals:         0      11      35       0       0
  2162 ;;Total ram usage:       46 bytes
  2163 ;; Hardware stack levels used:    1
  2164 ;; Hardware stack levels required when called:    6
  2165 ;; This function calls:
  2166 ;;		_LCDByte
  2167 ;;		_LCDGotoXY
  2168 ;;		_LCDWriteString
  2169 ;;		_sprintf
  2170 ;; This function is called by:
  2171 ;;		_main
  2172 ;; This function uses a non-reentrant model
  2173 ;;
  2174                           
  2175                           
  2176                           ;psect for function _dump_msg
  2177  026C                     _dump_msg:	
  2178                           
  2179                           ;incstack = 0
  2180                           ; Regs used in _dump_msg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2181                           ;dump_msg@pmsg stored from wreg
  2182  026C  1683               	bsf	3,5	;RP0=1, select bank1
  2183  026D  1303               	bcf	3,6	;RP1=0, select bank1
  2184  026E  00C2               	movwf	dump_msg@pmsg^(0+128)
  2185                           
  2186                           ;msg.h: 77: char s[32];
  2187                           ;msg.h: 78: sprintf(s, "M:%d,%d,%d,%d,%d,%d", pmsg->msglen, pmsg->crc, pmsg->from, pmsg-
      +                          >to, pmsg->msgid, pmsg->cmd);
  2188  026F  30A0               	movlw	(low (dump_msg@s| 0))& (0+255)
  2189  0270  1283               	bcf	3,5	;RP0=0, select bank0
  2190  0271  1303               	bcf	3,6	;RP1=0, select bank0
  2191  0272  00AE               	movwf	sprintf@sp
  2192  0273  3000               	movlw	0
  2193  0274  00AF               	movwf	sprintf@sp+1
  2194  0275  3013               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2195  0276  00C6               	movwf	??_dump_msg
  2196  0277  0846               	movf	??_dump_msg,w
  2197  0278  00B0               	movwf	sprintf@f
  2198  0279  1683               	bsf	3,5	;RP0=1, select bank1
  2199  027A  1303               	bcf	3,6	;RP1=0, select bank1
  2200  027B  0842               	movf	dump_msg@pmsg^(0+128),w
  2201  027C  0084               	movwf	4
  2202  027D  1783               	bsf	3,7	;select IRP bank2
  2203  027E  0800               	movf	0,w
  2204  027F  1283               	bcf	3,5	;RP0=0, select bank0
  2205  0280  1303               	bcf	3,6	;RP1=0, select bank0
  2206  0281  00C7               	movwf	??_dump_msg+1
  2207  0282  01C8               	clrf	??_dump_msg+2
  2208  0283  0847               	movf	??_dump_msg+1,w
  2209  0284  00B1               	movwf	?_sprintf+3
  2210  0285  0848               	movf	??_dump_msg+2,w
  2211  0286  00B2               	movwf	?_sprintf+4
  2212  0287  1683               	bsf	3,5	;RP0=1, select bank1
  2213  0288  1303               	bcf	3,6	;RP1=0, select bank1
  2214  0289  0A42               	incf	dump_msg@pmsg^(0+128),w
  2215  028A  0084               	movwf	4
  2216  028B  0800               	movf	0,w
  2217  028C  1283               	bcf	3,5	;RP0=0, select bank0
  2218  028D  1303               	bcf	3,6	;RP1=0, select bank0
  2219  028E  00B3               	movwf	?_sprintf+5
  2220  028F  0A84               	incf	4,f
  2221  0290  0800               	movf	0,w
  2222  0291  00B4               	movwf	?_sprintf+6
  2223  0292  1683               	bsf	3,5	;RP0=1, select bank1
  2224  0293  1303               	bcf	3,6	;RP1=0, select bank1
  2225  0294  0842               	movf	dump_msg@pmsg^(0+128),w
  2226  0295  3E03               	addlw	3
  2227  0296  0084               	movwf	4
  2228  0297  0800               	movf	0,w
  2229  0298  1283               	bcf	3,5	;RP0=0, select bank0
  2230  0299  1303               	bcf	3,6	;RP1=0, select bank0
  2231  029A  00C9               	movwf	??_dump_msg+3
  2232  029B  01CA               	clrf	??_dump_msg+4
  2233  029C  0849               	movf	??_dump_msg+3,w
  2234  029D  00B5               	movwf	?_sprintf+7
  2235  029E  084A               	movf	??_dump_msg+4,w
  2236  029F  00B6               	movwf	?_sprintf+8
  2237  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  2238  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  2239  02A2  0842               	movf	dump_msg@pmsg^(0+128),w
  2240  02A3  3E04               	addlw	4
  2241  02A4  0084               	movwf	4
  2242  02A5  0800               	movf	0,w
  2243  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  2244  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  2245  02A8  00CB               	movwf	??_dump_msg+5
  2246  02A9  01CC               	clrf	??_dump_msg+6
  2247  02AA  084B               	movf	??_dump_msg+5,w
  2248  02AB  00B7               	movwf	?_sprintf+9
  2249  02AC  084C               	movf	??_dump_msg+6,w
  2250  02AD  00B8               	movwf	?_sprintf+10
  2251  02AE  1683               	bsf	3,5	;RP0=1, select bank1
  2252  02AF  1303               	bcf	3,6	;RP1=0, select bank1
  2253  02B0  0842               	movf	dump_msg@pmsg^(0+128),w
  2254  02B1  3E05               	addlw	5
  2255  02B2  0084               	movwf	4
  2256  02B3  0800               	movf	0,w
  2257  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  2258  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  2259  02B6  00CD               	movwf	??_dump_msg+7
  2260  02B7  01CE               	clrf	??_dump_msg+8
  2261  02B8  084D               	movf	??_dump_msg+7,w
  2262  02B9  00B9               	movwf	?_sprintf+11
  2263  02BA  084E               	movf	??_dump_msg+8,w
  2264  02BB  00BA               	movwf	?_sprintf+12
  2265  02BC  1683               	bsf	3,5	;RP0=1, select bank1
  2266  02BD  1303               	bcf	3,6	;RP1=0, select bank1
  2267  02BE  0842               	movf	dump_msg@pmsg^(0+128),w
  2268  02BF  3E06               	addlw	6
  2269  02C0  0084               	movwf	4
  2270  02C1  0800               	movf	0,w
  2271  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  2272  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  2273  02C4  00CF               	movwf	??_dump_msg+9
  2274  02C5  01D0               	clrf	??_dump_msg+10
  2275  02C6  084F               	movf	??_dump_msg+9,w
  2276  02C7  00BB               	movwf	?_sprintf+13
  2277  02C8  0850               	movf	??_dump_msg+10,w
  2278  02C9  00BC               	movwf	?_sprintf+14
  2279  02CA  120A  118A  2195  120A  118A  	fcall	_sprintf
  2280                           
  2281                           ;msg.h: 79: {{ LCDGotoXY(0,1); int8_t count = LCDWriteString(""); for(int8_t i = count +
      +                           0; i < 16; i++) { (LCDByte(' ',1)); } };}; {{ LCDGotoXY(0,1); LCDWriteString(s);};};
  2282  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  2283  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  2284  02D1  01AC               	clrf	LCDGotoXY@y
  2285  02D2  0AAC               	incf	LCDGotoXY@y,f
  2286  02D3  3000               	movlw	0
  2287  02D4  120A  118A  27D6  120A  118A  	fcall	_LCDGotoXY
  2288  02D9  3039               	movlw	(low (((STR_15+4)-__stringbase)| (0+32768)))& (0+255)
  2289  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  2290  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  2291  02DC  00AC               	movwf	LCDWriteString@msg
  2292  02DD  3080               	movlw	128
  2293  02DE  00AD               	movwf	LCDWriteString@msg+1
  2294  02DF  120A  118A  2505  120A  118A  	fcall	_LCDWriteString
  2295  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  2296  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  2297  02E6  00C6               	movwf	??_dump_msg
  2298  02E7  0846               	movf	??_dump_msg,w
  2299  02E8  1683               	bsf	3,5	;RP0=1, select bank1
  2300  02E9  1303               	bcf	3,6	;RP1=0, select bank1
  2301  02EA  00C0               	movwf	dump_msg@count^(0+128)
  2302  02EB  0840               	movf	dump_msg@count^(0+128),w
  2303  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  2304  02ED  1303               	bcf	3,6	;RP1=0, select bank0
  2305  02EE  00C6               	movwf	??_dump_msg
  2306  02EF  0846               	movf	??_dump_msg,w
  2307  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  2308  02F1  1303               	bcf	3,6	;RP1=0, select bank1
  2309  02F2  00C1               	movwf	dump_msg@i^(0+128)
  2310  02F3  0841               	movf	dump_msg@i^(0+128),w
  2311  02F4  3A80               	xorlw	128
  2312  02F5  3E70               	addlw	-144
  2313  02F6  1803               	btfsc	3,0
  2314  02F7  2B0F               	goto	l2238
  2315  02F8                     l2232:	
  2316  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  2317  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  2318  02FA  01A5               	clrf	LCDByte@isdata
  2319  02FB  0AA5               	incf	LCDByte@isdata,f
  2320  02FC  3020               	movlw	32
  2321  02FD  120A  118A  25BF  120A  118A  	fcall	_LCDByte
  2322  0302  3001               	movlw	1
  2323  0303  1283               	bcf	3,5	;RP0=0, select bank0
  2324  0304  1303               	bcf	3,6	;RP1=0, select bank0
  2325  0305  00C6               	movwf	??_dump_msg
  2326  0306  0846               	movf	??_dump_msg,w
  2327  0307  1683               	bsf	3,5	;RP0=1, select bank1
  2328  0308  1303               	bcf	3,6	;RP1=0, select bank1
  2329  0309  07C1               	addwf	dump_msg@i^(0+128),f
  2330  030A  0841               	movf	dump_msg@i^(0+128),w
  2331  030B  3A80               	xorlw	128
  2332  030C  3E70               	addlw	-144
  2333  030D  1C03               	skipc
  2334  030E  2AF8               	goto	l2232
  2335  030F                     l2238:	
  2336  030F  1283               	bcf	3,5	;RP0=0, select bank0
  2337  0310  1303               	bcf	3,6	;RP1=0, select bank0
  2338  0311  01AC               	clrf	LCDGotoXY@y
  2339  0312  0AAC               	incf	LCDGotoXY@y,f
  2340  0313  3000               	movlw	0
  2341  0314  120A  118A  27D6  120A  118A  	fcall	_LCDGotoXY
  2342  0319  30A0               	movlw	(low (dump_msg@s| 0))& (0+255)
  2343  031A  1283               	bcf	3,5	;RP0=0, select bank0
  2344  031B  1303               	bcf	3,6	;RP1=0, select bank0
  2345  031C  00AC               	movwf	LCDWriteString@msg
  2346  031D  3000               	movlw	0
  2347  031E  00AD               	movwf	LCDWriteString@msg+1
  2348  031F  120A  118A  2505   	fcall	_LCDWriteString
  2349  0322  0008               	return
  2350  0323                     __end_of_dump_msg:	
  2351                           
  2352                           	psect	text8
  2353  0323                     __ptext8:	
  2354 ;; *************** function _dump_conn *****************
  2355 ;; Defined at:
  2356 ;;		line 33 in file "connection.h"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  pconn           1    wreg     PTR struct .
  2359 ;;		 -> server_conn(4), 
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;  pconn           1   34[BANK1 ] PTR struct .
  2362 ;;		 -> server_conn(4), 
  2363 ;;  i               1   33[BANK1 ] char 
  2364 ;;  count           1   32[BANK1 ] char 
  2365 ;;  s              32    0[BANK1 ] unsigned char [32]
  2366 ;; Return value:  Size  Location     Type
  2367 ;;                  1    wreg      void 
  2368 ;; Registers used:
  2369 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2370 ;; Tracked objects:
  2371 ;;		On entry : 0/0
  2372 ;;		On exit  : 0/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2375 ;;      Params:         0       0       0       0       0
  2376 ;;      Locals:         0       0      35       0       0
  2377 ;;      Temps:          0       9       0       0       0
  2378 ;;      Totals:         0       9      35       0       0
  2379 ;;Total ram usage:       44 bytes
  2380 ;; Hardware stack levels used:    1
  2381 ;; Hardware stack levels required when called:    6
  2382 ;; This function calls:
  2383 ;;		_LCDByte
  2384 ;;		_LCDGotoXY
  2385 ;;		_LCDWriteString
  2386 ;;		_sprintf
  2387 ;; This function is called by:
  2388 ;;		_main
  2389 ;; This function uses a non-reentrant model
  2390 ;;
  2391                           
  2392                           
  2393                           ;psect for function _dump_conn
  2394  0323                     _dump_conn:	
  2395                           
  2396                           ;incstack = 0
  2397                           ; Regs used in _dump_conn: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2398                           ;dump_conn@pconn stored from wreg
  2399  0323  1683               	bsf	3,5	;RP0=1, select bank1
  2400  0324  1303               	bcf	3,6	;RP1=0, select bank1
  2401  0325  00C2               	movwf	dump_conn@pconn^(0+128)
  2402                           
  2403                           ;connection.h: 35: char s[32];
  2404                           ;connection.h: 36: sprintf(s, "C:%d,%d,%d,%d", pconn->from, pconn->to, pconn->msgid, pco
      +                          nn->available);
  2405  0326  30A0               	movlw	(low (dump_conn@s| 0))& (0+255)
  2406  0327  1283               	bcf	3,5	;RP0=0, select bank0
  2407  0328  1303               	bcf	3,6	;RP1=0, select bank0
  2408  0329  00AE               	movwf	sprintf@sp
  2409  032A  3000               	movlw	0
  2410  032B  00AF               	movwf	sprintf@sp+1
  2411  032C  3027               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2412  032D  00C6               	movwf	??_dump_conn
  2413  032E  0846               	movf	??_dump_conn,w
  2414  032F  00B0               	movwf	sprintf@f
  2415  0330  1683               	bsf	3,5	;RP0=1, select bank1
  2416  0331  1303               	bcf	3,6	;RP1=0, select bank1
  2417  0332  0842               	movf	dump_conn@pconn^(0+128),w
  2418  0333  0084               	movwf	4
  2419  0334  1383               	bcf	3,7	;select IRP bank0
  2420  0335  0800               	movf	0,w
  2421  0336  1283               	bcf	3,5	;RP0=0, select bank0
  2422  0337  1303               	bcf	3,6	;RP1=0, select bank0
  2423  0338  00C7               	movwf	??_dump_conn+1
  2424  0339  01C8               	clrf	??_dump_conn+2
  2425  033A  0847               	movf	??_dump_conn+1,w
  2426  033B  00B1               	movwf	?_sprintf+3
  2427  033C  0848               	movf	??_dump_conn+2,w
  2428  033D  00B2               	movwf	?_sprintf+4
  2429  033E  1683               	bsf	3,5	;RP0=1, select bank1
  2430  033F  1303               	bcf	3,6	;RP1=0, select bank1
  2431  0340  0A42               	incf	dump_conn@pconn^(0+128),w
  2432  0341  0084               	movwf	4
  2433  0342  0800               	movf	0,w
  2434  0343  1283               	bcf	3,5	;RP0=0, select bank0
  2435  0344  1303               	bcf	3,6	;RP1=0, select bank0
  2436  0345  00C9               	movwf	??_dump_conn+3
  2437  0346  01CA               	clrf	??_dump_conn+4
  2438  0347  0849               	movf	??_dump_conn+3,w
  2439  0348  00B3               	movwf	?_sprintf+5
  2440  0349  084A               	movf	??_dump_conn+4,w
  2441  034A  00B4               	movwf	?_sprintf+6
  2442  034B  1683               	bsf	3,5	;RP0=1, select bank1
  2443  034C  1303               	bcf	3,6	;RP1=0, select bank1
  2444  034D  0842               	movf	dump_conn@pconn^(0+128),w
  2445  034E  3E02               	addlw	2
  2446  034F  0084               	movwf	4
  2447  0350  0800               	movf	0,w
  2448  0351  1283               	bcf	3,5	;RP0=0, select bank0
  2449  0352  1303               	bcf	3,6	;RP1=0, select bank0
  2450  0353  00CB               	movwf	??_dump_conn+5
  2451  0354  01CC               	clrf	??_dump_conn+6
  2452  0355  084B               	movf	??_dump_conn+5,w
  2453  0356  00B5               	movwf	?_sprintf+7
  2454  0357  084C               	movf	??_dump_conn+6,w
  2455  0358  00B6               	movwf	?_sprintf+8
  2456  0359  1683               	bsf	3,5	;RP0=1, select bank1
  2457  035A  1303               	bcf	3,6	;RP1=0, select bank1
  2458  035B  0842               	movf	dump_conn@pconn^(0+128),w
  2459  035C  3E03               	addlw	3
  2460  035D  0084               	movwf	4
  2461  035E  0800               	movf	0,w
  2462  035F  1283               	bcf	3,5	;RP0=0, select bank0
  2463  0360  1303               	bcf	3,6	;RP1=0, select bank0
  2464  0361  00CD               	movwf	??_dump_conn+7
  2465  0362  01CE               	clrf	??_dump_conn+8
  2466  0363  084D               	movf	??_dump_conn+7,w
  2467  0364  00B7               	movwf	?_sprintf+9
  2468  0365  084E               	movf	??_dump_conn+8,w
  2469  0366  00B8               	movwf	?_sprintf+10
  2470  0367  120A  118A  2195  120A  118A  	fcall	_sprintf
  2471                           
  2472                           ;connection.h: 37: {{ LCDGotoXY(0,1); int8_t count = LCDWriteString(""); for(int8_t i = 
      +                          count + 0; i < 16; i++) { (LCDByte(' ',1)); } };}; {{ LCDGotoXY(0,1); LCDWriteString(s);
      +                          };};
  2473  036C  1283               	bcf	3,5	;RP0=0, select bank0
  2474  036D  1303               	bcf	3,6	;RP1=0, select bank0
  2475  036E  01AC               	clrf	LCDGotoXY@y
  2476  036F  0AAC               	incf	LCDGotoXY@y,f
  2477  0370  3000               	movlw	0
  2478  0371  120A  118A  27D6  120A  118A  	fcall	_LCDGotoXY
  2479  0376  3039               	movlw	(low (((STR_15+4)-__stringbase)| (0+32768)))& (0+255)
  2480  0377  1283               	bcf	3,5	;RP0=0, select bank0
  2481  0378  1303               	bcf	3,6	;RP1=0, select bank0
  2482  0379  00AC               	movwf	LCDWriteString@msg
  2483  037A  3080               	movlw	128
  2484  037B  00AD               	movwf	LCDWriteString@msg+1
  2485  037C  120A  118A  2505  120A  118A  	fcall	_LCDWriteString
  2486  0381  1283               	bcf	3,5	;RP0=0, select bank0
  2487  0382  1303               	bcf	3,6	;RP1=0, select bank0
  2488  0383  00C6               	movwf	??_dump_conn
  2489  0384  0846               	movf	??_dump_conn,w
  2490  0385  1683               	bsf	3,5	;RP0=1, select bank1
  2491  0386  1303               	bcf	3,6	;RP1=0, select bank1
  2492  0387  00C0               	movwf	dump_conn@count^(0+128)
  2493  0388  0840               	movf	dump_conn@count^(0+128),w
  2494  0389  1283               	bcf	3,5	;RP0=0, select bank0
  2495  038A  1303               	bcf	3,6	;RP1=0, select bank0
  2496  038B  00C6               	movwf	??_dump_conn
  2497  038C  0846               	movf	??_dump_conn,w
  2498  038D  1683               	bsf	3,5	;RP0=1, select bank1
  2499  038E  1303               	bcf	3,6	;RP1=0, select bank1
  2500  038F  00C1               	movwf	dump_conn@i^(0+128)
  2501  0390  0841               	movf	dump_conn@i^(0+128),w
  2502  0391  3A80               	xorlw	128
  2503  0392  3E70               	addlw	-144
  2504  0393  1803               	btfsc	3,0
  2505  0394  2BAC               	goto	l2288
  2506  0395                     l2282:	
  2507  0395  1283               	bcf	3,5	;RP0=0, select bank0
  2508  0396  1303               	bcf	3,6	;RP1=0, select bank0
  2509  0397  01A5               	clrf	LCDByte@isdata
  2510  0398  0AA5               	incf	LCDByte@isdata,f
  2511  0399  3020               	movlw	32
  2512  039A  120A  118A  25BF  120A  118A  	fcall	_LCDByte
  2513  039F  3001               	movlw	1
  2514  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  2515  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  2516  03A2  00C6               	movwf	??_dump_conn
  2517  03A3  0846               	movf	??_dump_conn,w
  2518  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  2519  03A5  1303               	bcf	3,6	;RP1=0, select bank1
  2520  03A6  07C1               	addwf	dump_conn@i^(0+128),f
  2521  03A7  0841               	movf	dump_conn@i^(0+128),w
  2522  03A8  3A80               	xorlw	128
  2523  03A9  3E70               	addlw	-144
  2524  03AA  1C03               	skipc
  2525  03AB  2B95               	goto	l2282
  2526  03AC                     l2288:	
  2527  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  2528  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  2529  03AE  01AC               	clrf	LCDGotoXY@y
  2530  03AF  0AAC               	incf	LCDGotoXY@y,f
  2531  03B0  3000               	movlw	0
  2532  03B1  120A  118A  27D6  120A  118A  	fcall	_LCDGotoXY
  2533  03B6  30A0               	movlw	(low (dump_conn@s| 0))& (0+255)
  2534  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  2535  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  2536  03B9  00AC               	movwf	LCDWriteString@msg
  2537  03BA  3000               	movlw	0
  2538  03BB  00AD               	movwf	LCDWriteString@msg+1
  2539  03BC  120A  118A  2505   	fcall	_LCDWriteString
  2540  03BF  0008               	return
  2541  03C0                     __end_of_dump_conn:	
  2542                           
  2543                           	psect	text9
  2544  0195                     __ptext9:	
  2545 ;; *************** function _sprintf *****************
  2546 ;; Defined at:
  2547 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;  sp              2   14[BANK0 ] PTR unsigned char 
  2550 ;;		 -> dump_conn@s(32), dump_msg@s(32), sdebug(32), 
  2551 ;;  f               1   16[BANK0 ] PTR const unsigned char 
  2552 ;;		 -> STR_13(14), STR_11(20), STR_9(15), STR_7(12), 
  2553 ;;		 -> STR_5(9), STR_3(6), STR_1(3), 
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  tmpval          4    0        struct .
  2556 ;;  val             2   35[BANK0 ] unsigned int 
  2557 ;;  cp              2    0        PTR const unsigned char 
  2558 ;;  len             2    0        unsigned int 
  2559 ;;  c               1   37[BANK0 ] char 
  2560 ;;  prec            1   34[BANK0 ] char 
  2561 ;;  flag            1   33[BANK0 ] unsigned char 
  2562 ;;  ap              1   32[BANK0 ] PTR void [1]
  2563 ;;		 -> ?_sprintf(2), 
  2564 ;; Return value:  Size  Location     Type
  2565 ;;                  2   14[BANK0 ] int 
  2566 ;; Registers used:
  2567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2573 ;;      Params:         0      15       0       0       0
  2574 ;;      Locals:         0       6       0       0       0
  2575 ;;      Temps:          0       3       0       0       0
  2576 ;;      Totals:         0      24       0       0       0
  2577 ;;Total ram usage:       24 bytes
  2578 ;; Hardware stack levels used:    1
  2579 ;; Hardware stack levels required when called:    4
  2580 ;; This function calls:
  2581 ;;		___lwdiv
  2582 ;;		___lwmod
  2583 ;; This function is called by:
  2584 ;;		_dump_msg
  2585 ;;		_dump_conn
  2586 ;;		_debug_1
  2587 ;;		_debug_2
  2588 ;;		_debug_3
  2589 ;;		_debug_4
  2590 ;;		_debug_5
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594                           
  2595                           ;psect for function _sprintf
  2596  0195                     _sprintf:	
  2597                           
  2598                           ;doprnt.c: 494: va_list ap;
  2599                           ;doprnt.c: 499: signed char c;
  2600                           ;doprnt.c: 506: signed char prec;
  2601                           ;doprnt.c: 508: unsigned char flag;
  2602                           ;doprnt.c: 523: union {
  2603                           ;doprnt.c: 524: unsigned long vd;
  2604                           ;doprnt.c: 525: double integ;
  2605                           ;doprnt.c: 526: } tmpval;
  2606                           ;doprnt.c: 528: unsigned int val;
  2607                           ;doprnt.c: 529: unsigned len;
  2608                           ;doprnt.c: 530: const char * cp;
  2609                           ;doprnt.c: 533: *ap = __va_start();
  2610                           
  2611                           ;incstack = 0
  2612                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2613  0195  3031               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  2614  0196  1283               	bcf	3,5	;RP0=0, select bank0
  2615  0197  1303               	bcf	3,6	;RP1=0, select bank0
  2616  0198  00BD               	movwf	??_sprintf
  2617  0199  083D               	movf	??_sprintf,w
  2618  019A  00C0               	movwf	sprintf@ap
  2619  019B                     l2064:	
  2620                           ;doprnt.c: 536: while(c = *f++) {
  2621                           
  2622  019B  3001               	movlw	1
  2623  019C  07B0               	addwf	sprintf@f,f
  2624  019D  30FF               	movlw	-1
  2625  019E  0730               	addwf	sprintf@f,w
  2626  019F  0084               	movwf	4
  2627  01A0  120A  118A  2571  120A  118A  	fcall	stringdir
  2628  01A5  00BD               	movwf	??_sprintf
  2629  01A6  083D               	movf	??_sprintf,w
  2630  01A7  00C5               	movwf	sprintf@c
  2631  01A8  0845               	movf	sprintf@c,w
  2632  01A9  1903               	btfsc	3,2
  2633  01AA  2A65               	goto	l2066
  2634                           
  2635                           ;doprnt.c: 538: if(c != '%')
  2636  01AB  3025               	movlw	37
  2637  01AC  0645               	xorwf	sprintf@c,w
  2638  01AD  1903               	btfsc	3,2
  2639  01AE  29BB               	goto	l2020
  2640                           
  2641                           ;doprnt.c: 540: {
  2642                           ;doprnt.c: 541: ((*sp++ = (c)));
  2643  01AF  082E               	movf	sprintf@sp,w
  2644  01B0  0084               	movwf	4
  2645  01B1  1383               	bcf	3,7
  2646  01B2  182F               	btfsc	sprintf@sp+1,0
  2647  01B3  1783               	bsf	3,7
  2648  01B4  0845               	movf	sprintf@c,w
  2649  01B5  0080               	movwf	0
  2650  01B6  3001               	movlw	1
  2651  01B7  07AE               	addwf	sprintf@sp,f
  2652  01B8  1803               	skipnc
  2653  01B9  0AAF               	incf	sprintf@sp+1,f
  2654                           
  2655                           ;doprnt.c: 542: continue;
  2656  01BA  299B               	goto	l2064
  2657  01BB                     l2020:	
  2658                           
  2659                           ;doprnt.c: 543: }
  2660                           ;doprnt.c: 548: flag = 0;
  2661  01BB  01C1               	clrf	sprintf@flag
  2662                           
  2663                           ;doprnt.c: 822: }
  2664                           
  2665                           ;doprnt.c: 813: continue;
  2666                           
  2667                           ;doprnt.c: 802: default:
  2668                           
  2669                           ;doprnt.c: 698: case 'i':
  2670                           ;doprnt.c: 699: break;
  2671                           
  2672                           ;doprnt.c: 697: case 'd':
  2673                           
  2674                           ;doprnt.c: 638: goto alldone;
  2675                           
  2676                           ;doprnt.c: 637: case 0:
  2677                           
  2678                           ;doprnt.c: 635: switch(c = *f++) {
  2679  01BC  3001               	movlw	1
  2680  01BD  07B0               	addwf	sprintf@f,f
  2681  01BE  30FF               	movlw	-1
  2682  01BF  0730               	addwf	sprintf@f,w
  2683  01C0  0084               	movwf	4
  2684  01C1  120A  118A  2571  120A  118A  	fcall	stringdir
  2685  01C6  00C5               	movwf	sprintf@c
  2686                           
  2687                           ; Switch size 1, requested type "space"
  2688                           ; Number of cases is 3, Range of values is 0 to 105
  2689                           ; switch strategies available:
  2690                           ; Name         Instructions Cycles
  2691                           ; simple_byte           10     6 (average)
  2692                           ; jumptable            260     6 (fixed)
  2693                           ;	Chosen strategy is simple_byte
  2694  01C7  3A00               	xorlw	0	; case 0
  2695  01C8  1903               	skipnz
  2696  01C9  2A65               	goto	l2066
  2697  01CA  3A64               	xorlw	100	; case 100
  2698  01CB  1903               	skipnz
  2699  01CC  29D1               	goto	l2026
  2700  01CD  3A0D               	xorlw	13	; case 105
  2701  01CE  1903               	skipnz
  2702  01CF  29D1               	goto	l2026
  2703  01D0  299B               	goto	l2064
  2704  01D1                     l2026:	
  2705                           
  2706                           ;doprnt.c: 1253: {
  2707                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2708  01D1  0840               	movf	sprintf@ap,w
  2709  01D2  0084               	movwf	4
  2710  01D3  1383               	bcf	3,7	;select IRP bank0
  2711  01D4  0800               	movf	0,w
  2712  01D5  00C3               	movwf	sprintf@val
  2713  01D6  0A84               	incf	4,f
  2714  01D7  0800               	movf	0,w
  2715  01D8  00C4               	movwf	sprintf@val+1
  2716  01D9  3002               	movlw	2
  2717  01DA  00BD               	movwf	??_sprintf
  2718  01DB  083D               	movf	??_sprintf,w
  2719  01DC  07C0               	addwf	sprintf@ap,f
  2720                           
  2721                           ;doprnt.c: 1261: if((int)val < 0) {
  2722  01DD  1FC4               	btfss	sprintf@val+1,7
  2723  01DE  29E8               	goto	l2036
  2724                           
  2725                           ;doprnt.c: 1262: flag |= 0x03;
  2726  01DF  3003               	movlw	3
  2727  01E0  00BD               	movwf	??_sprintf
  2728  01E1  083D               	movf	??_sprintf,w
  2729  01E2  04C1               	iorwf	sprintf@flag,f
  2730                           
  2731                           ;doprnt.c: 1263: val = -val;
  2732  01E3  09C3               	comf	sprintf@val,f
  2733  01E4  09C4               	comf	sprintf@val+1,f
  2734  01E5  0AC3               	incf	sprintf@val,f
  2735  01E6  1903               	skipnz
  2736  01E7  0AC4               	incf	sprintf@val+1,f
  2737  01E8                     l2036:	
  2738                           
  2739                           ;doprnt.c: 1264: }
  2740                           ;doprnt.c: 1266: }
  2741                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2742  01E8  01C5               	clrf	sprintf@c
  2743  01E9  0AC5               	incf	sprintf@c,f
  2744  01EA  3005               	movlw	5
  2745  01EB  0645               	xorwf	sprintf@c,w
  2746  01EC  1903               	btfsc	3,2
  2747  01ED  2A0F               	goto	l2048
  2748  01EE                     l2042:	
  2749                           
  2750                           ;doprnt.c: 1306: if(val < dpowers[c])
  2751  01EE  0845               	movf	sprintf@c,w
  2752  01EF  00BD               	movwf	??_sprintf
  2753  01F0  073D               	addwf	??_sprintf,w
  2754  01F1  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2755  01F2  0084               	movwf	4
  2756  01F3  120A  118A  2571  120A  118A  	fcall	stringdir
  2757  01F8  00BE               	movwf	??_sprintf+1
  2758  01F9  120A  118A  2571  120A  118A  	fcall	stringdir
  2759  01FE  00BF               	movwf	??_sprintf+2
  2760  01FF  083F               	movf	??_sprintf+2,w
  2761  0200  0244               	subwf	sprintf@val+1,w
  2762  0201  1D03               	skipz
  2763  0202  2A05               	goto	u1565
  2764  0203  083E               	movf	??_sprintf+1,w
  2765  0204  0243               	subwf	sprintf@val,w
  2766  0205                     u1565:	
  2767  0205  1C03               	btfss	3,0
  2768  0206  2A0F               	goto	l2048
  2769                           
  2770                           ;doprnt.c: 1307: break;
  2771  0207  3001               	movlw	1
  2772  0208  00BD               	movwf	??_sprintf
  2773  0209  083D               	movf	??_sprintf,w
  2774  020A  07C5               	addwf	sprintf@c,f
  2775  020B  3005               	movlw	5
  2776  020C  0645               	xorwf	sprintf@c,w
  2777  020D  1D03               	btfss	3,2
  2778  020E  29EE               	goto	l2042
  2779  020F                     l2048:	
  2780                           
  2781                           ;doprnt.c: 1422: {
  2782                           ;doprnt.c: 1438: if(flag & 0x03)
  2783  020F  0841               	movf	sprintf@flag,w
  2784  0210  3903               	andlw	3
  2785  0211  1903               	btfsc	3,2
  2786  0212  2A1E               	goto	l2054
  2787                           
  2788                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2789  0213  082E               	movf	sprintf@sp,w
  2790  0214  0084               	movwf	4
  2791  0215  1383               	bcf	3,7
  2792  0216  182F               	btfsc	sprintf@sp+1,0
  2793  0217  1783               	bsf	3,7
  2794  0218  302D               	movlw	45
  2795  0219  0080               	movwf	0
  2796  021A  3001               	movlw	1
  2797  021B  07AE               	addwf	sprintf@sp,f
  2798  021C  1803               	skipnc
  2799  021D  0AAF               	incf	sprintf@sp+1,f
  2800  021E                     l2054:	
  2801                           
  2802                           ;doprnt.c: 1469: }
  2803                           ;doprnt.c: 1472: prec = c;
  2804  021E  0845               	movf	sprintf@c,w
  2805  021F  00BD               	movwf	??_sprintf
  2806  0220  083D               	movf	??_sprintf,w
  2807  0221  00C2               	movwf	sprintf@prec
  2808  0222                     l2062:	
  2809                           ;doprnt.c: 1474: while(prec--) {
  2810                           
  2811  0222  30FF               	movlw	255
  2812  0223  00BD               	movwf	??_sprintf
  2813  0224  083D               	movf	??_sprintf,w
  2814  0225  07C2               	addwf	sprintf@prec,f
  2815  0226  0A42               	incf	sprintf@prec,w
  2816  0227  1903               	btfsc	3,2
  2817  0228  299B               	goto	l2064
  2818                           
  2819                           ;doprnt.c: 1478: {
  2820                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2821  0229  300A               	movlw	10
  2822  022A  00A8               	movwf	___lwmod@divisor
  2823  022B  3000               	movlw	0
  2824  022C  00A9               	movwf	___lwmod@divisor+1
  2825  022D  0842               	movf	sprintf@prec,w
  2826  022E  00BD               	movwf	??_sprintf
  2827  022F  073D               	addwf	??_sprintf,w
  2828  0230  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2829  0231  0084               	movwf	4
  2830  0232  120A  118A  2571  120A  118A  	fcall	stringdir
  2831  0237  00A0               	movwf	___lwdiv@divisor
  2832  0238  120A  118A  2571  120A  118A  	fcall	stringdir
  2833  023D  00A1               	movwf	___lwdiv@divisor+1
  2834  023E  0844               	movf	sprintf@val+1,w
  2835  023F  00A3               	movwf	___lwdiv@dividend+1
  2836  0240  0843               	movf	sprintf@val,w
  2837  0241  00A2               	movwf	___lwdiv@dividend
  2838  0242  120A  118A  26F1  120A  118A  	fcall	___lwdiv
  2839  0247  1283               	bcf	3,5	;RP0=0, select bank0
  2840  0248  1303               	bcf	3,6	;RP1=0, select bank0
  2841  0249  0821               	movf	?___lwdiv+1,w
  2842  024A  00AB               	movwf	___lwmod@dividend+1
  2843  024B  0820               	movf	?___lwdiv,w
  2844  024C  00AA               	movwf	___lwmod@dividend
  2845  024D  120A  118A  27A2  120A  118A  	fcall	___lwmod
  2846  0252  1283               	bcf	3,5	;RP0=0, select bank0
  2847  0253  1303               	bcf	3,6	;RP1=0, select bank0
  2848  0254  0828               	movf	?___lwmod,w
  2849  0255  3E30               	addlw	48
  2850  0256  00BE               	movwf	??_sprintf+1
  2851  0257  083E               	movf	??_sprintf+1,w
  2852  0258  00C5               	movwf	sprintf@c
  2853                           
  2854                           ;doprnt.c: 1523: }
  2855                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2856  0259  082E               	movf	sprintf@sp,w
  2857  025A  0084               	movwf	4
  2858  025B  1383               	bcf	3,7
  2859  025C  182F               	btfsc	sprintf@sp+1,0
  2860  025D  1783               	bsf	3,7
  2861  025E  0845               	movf	sprintf@c,w
  2862  025F  0080               	movwf	0
  2863  0260  3001               	movlw	1
  2864  0261  07AE               	addwf	sprintf@sp,f
  2865  0262  1803               	skipnc
  2866  0263  0AAF               	incf	sprintf@sp+1,f
  2867  0264  2A22               	goto	l2062
  2868  0265                     l2066:	
  2869                           ;doprnt.c: 1525: }
  2870                           ;doprnt.c: 1533: }
  2871                           ;doprnt.c: 1535: alldone:
  2872                           
  2873                           
  2874                           ;doprnt.c: 1538: *sp = 0;
  2875  0265  082E               	movf	sprintf@sp,w
  2876  0266  0084               	movwf	4
  2877  0267  1783               	bsf	3,7
  2878  0268  1C2F               	btfss	sprintf@sp+1,0
  2879  0269  1383               	bcf	3,7
  2880  026A  0180               	clrf	0
  2881  026B  0008               	return
  2882  026C                     __end_of_sprintf:	
  2883                           ;doprnt.c: 1540: return 0;
  2884                           ;	Return value of _sprintf is never used
  2885                           
  2886                           
  2887                           	psect	text10
  2888  07A2                     __ptext10:	
  2889 ;; *************** function ___lwmod *****************
  2890 ;; Defined at:
  2891 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  divisor         2    8[BANK0 ] unsigned int 
  2894 ;;  dividend        2   10[BANK0 ] unsigned int 
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;  counter         1   13[BANK0 ] unsigned char 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  2    8[BANK0 ] unsigned int 
  2899 ;; Registers used:
  2900 ;;		wreg, status,2, status,0
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2906 ;;      Params:         0       4       0       0       0
  2907 ;;      Locals:         0       1       0       0       0
  2908 ;;      Temps:          0       1       0       0       0
  2909 ;;      Totals:         0       6       0       0       0
  2910 ;;Total ram usage:        6 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    3
  2913 ;; This function calls:
  2914 ;;		Nothing
  2915 ;; This function is called by:
  2916 ;;		_sprintf
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           
  2921                           ;psect for function ___lwmod
  2922  07A2                     ___lwmod:	
  2923                           
  2924                           ;incstack = 0
  2925                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2926  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  2927  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  2928  07A4  0828               	movf	___lwmod@divisor,w
  2929  07A5  0429               	iorwf	___lwmod@divisor+1,w
  2930  07A6  1903               	btfsc	3,2
  2931  07A7  2FD1               	goto	l2008
  2932  07A8  01AD               	clrf	___lwmod@counter
  2933  07A9  0AAD               	incf	___lwmod@counter,f
  2934  07AA                     l1998:	
  2935  07AA  1BA9               	btfsc	___lwmod@divisor+1,7
  2936  07AB  2FB8               	goto	l2000
  2937  07AC  3001               	movlw	1
  2938  07AD                     u1485:	
  2939  07AD  1003               	clrc
  2940  07AE  0DA8               	rlf	___lwmod@divisor,f
  2941  07AF  0DA9               	rlf	___lwmod@divisor+1,f
  2942  07B0  3EFF               	addlw	-1
  2943  07B1  1D03               	skipz
  2944  07B2  2FAD               	goto	u1485
  2945  07B3  3001               	movlw	1
  2946  07B4  00AC               	movwf	??___lwmod
  2947  07B5  082C               	movf	??___lwmod,w
  2948  07B6  07AD               	addwf	___lwmod@counter,f
  2949  07B7  2FAA               	goto	l1998
  2950  07B8                     l2000:	
  2951  07B8  0829               	movf	___lwmod@divisor+1,w
  2952  07B9  022B               	subwf	___lwmod@dividend+1,w
  2953  07BA  1D03               	skipz
  2954  07BB  2FBE               	goto	u1505
  2955  07BC  0828               	movf	___lwmod@divisor,w
  2956  07BD  022A               	subwf	___lwmod@dividend,w
  2957  07BE                     u1505:	
  2958  07BE  1C03               	skipc
  2959  07BF  2FC6               	goto	l2004
  2960  07C0  0828               	movf	___lwmod@divisor,w
  2961  07C1  02AA               	subwf	___lwmod@dividend,f
  2962  07C2  0829               	movf	___lwmod@divisor+1,w
  2963  07C3  1C03               	skipc
  2964  07C4  03AB               	decf	___lwmod@dividend+1,f
  2965  07C5  02AB               	subwf	___lwmod@dividend+1,f
  2966  07C6                     l2004:	
  2967  07C6  3001               	movlw	1
  2968  07C7                     u1515:	
  2969  07C7  1003               	clrc
  2970  07C8  0CA9               	rrf	___lwmod@divisor+1,f
  2971  07C9  0CA8               	rrf	___lwmod@divisor,f
  2972  07CA  3EFF               	addlw	-1
  2973  07CB  1D03               	skipz
  2974  07CC  2FC7               	goto	u1515
  2975  07CD  3001               	movlw	1
  2976  07CE  02AD               	subwf	___lwmod@counter,f
  2977  07CF  1D03               	btfss	3,2
  2978  07D0  2FB8               	goto	l2000
  2979  07D1                     l2008:	
  2980  07D1  082B               	movf	___lwmod@dividend+1,w
  2981  07D2  00A9               	movwf	?___lwmod+1
  2982  07D3  082A               	movf	___lwmod@dividend,w
  2983  07D4  00A8               	movwf	?___lwmod
  2984  07D5  0008               	return
  2985  07D6                     __end_of___lwmod:	
  2986                           
  2987                           	psect	text11
  2988  06F1                     __ptext11:	
  2989 ;; *************** function ___lwdiv *****************
  2990 ;; Defined at:
  2991 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  divisor         2    0[BANK0 ] unsigned int 
  2994 ;;  dividend        2    2[BANK0 ] unsigned int 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  quotient        2    5[BANK0 ] unsigned int 
  2997 ;;  counter         1    7[BANK0 ] unsigned char 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  2    0[BANK0 ] unsigned int 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3007 ;;      Params:         0       4       0       0       0
  3008 ;;      Locals:         0       3       0       0       0
  3009 ;;      Temps:          0       1       0       0       0
  3010 ;;      Totals:         0       8       0       0       0
  3011 ;;Total ram usage:        8 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    3
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_sprintf
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           
  3022                           ;psect for function ___lwdiv
  3023  06F1                     ___lwdiv:	
  3024                           
  3025                           ;incstack = 0
  3026                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3027  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  3028  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  3029  06F3  01A5               	clrf	___lwdiv@quotient
  3030  06F4  01A6               	clrf	___lwdiv@quotient+1
  3031  06F5  0820               	movf	___lwdiv@divisor,w
  3032  06F6  0421               	iorwf	___lwdiv@divisor+1,w
  3033  06F7  1903               	btfsc	3,2
  3034  06F8  2F2A               	goto	l1986
  3035  06F9  01A7               	clrf	___lwdiv@counter
  3036  06FA  0AA7               	incf	___lwdiv@counter,f
  3037  06FB                     l1974:	
  3038  06FB  1BA1               	btfsc	___lwdiv@divisor+1,7
  3039  06FC  2F09               	goto	l1976
  3040  06FD  3001               	movlw	1
  3041  06FE                     u1415:	
  3042  06FE  1003               	clrc
  3043  06FF  0DA0               	rlf	___lwdiv@divisor,f
  3044  0700  0DA1               	rlf	___lwdiv@divisor+1,f
  3045  0701  3EFF               	addlw	-1
  3046  0702  1D03               	skipz
  3047  0703  2EFE               	goto	u1415
  3048  0704  3001               	movlw	1
  3049  0705  00A4               	movwf	??___lwdiv
  3050  0706  0824               	movf	??___lwdiv,w
  3051  0707  07A7               	addwf	___lwdiv@counter,f
  3052  0708  2EFB               	goto	l1974
  3053  0709                     l1976:	
  3054  0709  3001               	movlw	1
  3055  070A                     u1435:	
  3056  070A  1003               	clrc
  3057  070B  0DA5               	rlf	___lwdiv@quotient,f
  3058  070C  0DA6               	rlf	___lwdiv@quotient+1,f
  3059  070D  3EFF               	addlw	-1
  3060  070E  1D03               	skipz
  3061  070F  2F0A               	goto	u1435
  3062  0710  0821               	movf	___lwdiv@divisor+1,w
  3063  0711  0223               	subwf	___lwdiv@dividend+1,w
  3064  0712  1D03               	skipz
  3065  0713  2F16               	goto	u1445
  3066  0714  0820               	movf	___lwdiv@divisor,w
  3067  0715  0222               	subwf	___lwdiv@dividend,w
  3068  0716                     u1445:	
  3069  0716  1C03               	skipc
  3070  0717  2F1F               	goto	l1982
  3071  0718  0820               	movf	___lwdiv@divisor,w
  3072  0719  02A2               	subwf	___lwdiv@dividend,f
  3073  071A  0821               	movf	___lwdiv@divisor+1,w
  3074  071B  1C03               	skipc
  3075  071C  03A3               	decf	___lwdiv@dividend+1,f
  3076  071D  02A3               	subwf	___lwdiv@dividend+1,f
  3077  071E  1425               	bsf	___lwdiv@quotient,0
  3078  071F                     l1982:	
  3079  071F  3001               	movlw	1
  3080  0720                     u1455:	
  3081  0720  1003               	clrc
  3082  0721  0CA1               	rrf	___lwdiv@divisor+1,f
  3083  0722  0CA0               	rrf	___lwdiv@divisor,f
  3084  0723  3EFF               	addlw	-1
  3085  0724  1D03               	skipz
  3086  0725  2F20               	goto	u1455
  3087  0726  3001               	movlw	1
  3088  0727  02A7               	subwf	___lwdiv@counter,f
  3089  0728  1D03               	btfss	3,2
  3090  0729  2F09               	goto	l1976
  3091  072A                     l1986:	
  3092  072A  0826               	movf	___lwdiv@quotient+1,w
  3093  072B  00A1               	movwf	?___lwdiv+1
  3094  072C  0825               	movf	___lwdiv@quotient,w
  3095  072D  00A0               	movwf	?___lwdiv
  3096  072E  0008               	return
  3097  072F                     __end_of___lwdiv:	
  3098                           
  3099                           	psect	text12
  3100  0505                     __ptext12:	
  3101 ;; *************** function _LCDWriteString *****************
  3102 ;; Defined at:
  3103 ;;		line 283 in file "lcd_hd44780_pic16.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  msg             2   12[BANK0 ] PTR const unsigned char 
  3106 ;;		 -> STR_19(1), STR_18(5), STR_17(5), STR_16(5), 
  3107 ;;		 -> STR_15(5), STR_14(1), dump_conn@s(32), STR_12(1), 
  3108 ;;		 -> dump_msg@s(32), STR_10(1), STR_8(1), STR_6(1), 
  3109 ;;		 -> STR_4(1), STR_2(1), sdebug(32), 
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;  cc              1   16[BANK0 ] char 
  3112 ;;  count           1   15[BANK0 ] char 
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  1    wreg      char 
  3115 ;; Registers used:
  3116 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3122 ;;      Params:         0       2       0       0       0
  3123 ;;      Locals:         0       2       0       0       0
  3124 ;;      Temps:          0       1       0       0       0
  3125 ;;      Totals:         0       5       0       0       0
  3126 ;;Total ram usage:        5 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:    5
  3129 ;; This function calls:
  3130 ;;		_LCDByte
  3131 ;; This function is called by:
  3132 ;;		_dump_msg
  3133 ;;		_dump_conn
  3134 ;;		_debug_1
  3135 ;;		_debug_2
  3136 ;;		_debug_3
  3137 ;;		_debug_4
  3138 ;;		_debug_5
  3139 ;;		_ShowMenu
  3140 ;;		_ClearMenu
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           
  3145                           ;psect for function _LCDWriteString
  3146  0505                     _LCDWriteString:	
  3147                           
  3148                           ;lcd_hd44780_pic16.c: 285: int8_t count = 0;
  3149                           
  3150                           ;incstack = 0
  3151                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3152  0505  1283               	bcf	3,5	;RP0=0, select bank0
  3153  0506  1303               	bcf	3,6	;RP1=0, select bank0
  3154  0507  01AF               	clrf	LCDWriteString@count
  3155  0508                     l2114:	
  3156                           ;lcd_hd44780_pic16.c: 286: while(*msg!='\0')
  3157                           
  3158  0508  082D               	movf	LCDWriteString@msg+1,w
  3159  0509  00FF               	movwf	127
  3160  050A  082C               	movf	LCDWriteString@msg,w
  3161  050B  0084               	movwf	4
  3162  050C  120A  118A  2567  120A  118A  	fcall	stringtab
  3163  0511  3A00               	xorlw	0
  3164  0512  1903               	btfsc	3,2
  3165  0513  2D65               	goto	l2116
  3166                           
  3167                           ;lcd_hd44780_pic16.c: 287: {
  3168                           ;lcd_hd44780_pic16.c: 289: if(*msg=='%')
  3169  0514  082D               	movf	LCDWriteString@msg+1,w
  3170  0515  00FF               	movwf	127
  3171  0516  082C               	movf	LCDWriteString@msg,w
  3172  0517  0084               	movwf	4
  3173  0518  120A  118A  2567  120A  118A  	fcall	stringtab
  3174  051D  3A25               	xorlw	37
  3175  051E  1D03               	skipz
  3176  051F  2D4A               	goto	l2108
  3177                           
  3178                           ;lcd_hd44780_pic16.c: 290: {
  3179                           ;lcd_hd44780_pic16.c: 291: msg++;
  3180  0520  3001               	movlw	1
  3181  0521  07AC               	addwf	LCDWriteString@msg,f
  3182  0522  1803               	skipnc
  3183  0523  0AAD               	incf	LCDWriteString@msg+1,f
  3184                           
  3185                           ;lcd_hd44780_pic16.c: 292: int8_t cc=*msg-'0';
  3186  0524  082D               	movf	LCDWriteString@msg+1,w
  3187  0525  00FF               	movwf	127
  3188  0526  082C               	movf	LCDWriteString@msg,w
  3189  0527  0084               	movwf	4
  3190  0528  120A  118A  2567  120A  118A  	fcall	stringtab
  3191  052D  3ED0               	addlw	-48
  3192  052E  00AE               	movwf	??_LCDWriteString
  3193  052F  082E               	movf	??_LCDWriteString,w
  3194  0530  00B0               	movwf	LCDWriteString@cc
  3195                           
  3196                           ;lcd_hd44780_pic16.c: 294: if(cc>=0 && cc<=7)
  3197  0531  1BB0               	btfsc	LCDWriteString@cc,7
  3198  0532  2D3C               	goto	l2100
  3199  0533  0830               	movf	LCDWriteString@cc,w
  3200  0534  3A80               	xorlw	128
  3201  0535  3E78               	addlw	-136
  3202  0536  1803               	skipnc
  3203  0537  2D3C               	goto	l2100
  3204                           
  3205                           ;lcd_hd44780_pic16.c: 295: {
  3206                           ;lcd_hd44780_pic16.c: 296: (LCDByte(cc,1));
  3207  0538  01A5               	clrf	LCDByte@isdata
  3208  0539  0AA5               	incf	LCDByte@isdata,f
  3209  053A  0830               	movf	LCDWriteString@cc,w
  3210  053B  2D55               	goto	L4
  3211  053C                     l2100:	
  3212                           ;lcd_hd44780_pic16.c: 298: }
  3213                           
  3214                           ;lcd_hd44780_pic16.c: 297: count++;
  3215                           
  3216                           
  3217                           ;lcd_hd44780_pic16.c: 299: else
  3218                           ;lcd_hd44780_pic16.c: 300: {
  3219                           ;lcd_hd44780_pic16.c: 301: (LCDByte('%',1));
  3220  053C  01A5               	clrf	LCDByte@isdata
  3221  053D  0AA5               	incf	LCDByte@isdata,f
  3222  053E  3025               	movlw	37
  3223  053F  120A  118A  25BF  120A  118A  	fcall	_LCDByte
  3224                           
  3225                           ;lcd_hd44780_pic16.c: 302: count++;
  3226  0544  3001               	movlw	1
  3227  0545  1283               	bcf	3,5	;RP0=0, select bank0
  3228  0546  1303               	bcf	3,6	;RP1=0, select bank0
  3229  0547  00AE               	movwf	??_LCDWriteString
  3230  0548  082E               	movf	??_LCDWriteString,w
  3231  0549  07AF               	addwf	LCDWriteString@count,f
  3232  054A                     l2108:	
  3233                           ;lcd_hd44780_pic16.c: 305: }
  3234                           ;lcd_hd44780_pic16.c: 306: }
  3235                           
  3236                           ;lcd_hd44780_pic16.c: 304: count++;
  3237                           
  3238                           ;lcd_hd44780_pic16.c: 303: (LCDByte(*msg,1));
  3239                           
  3240                           
  3241                           ;lcd_hd44780_pic16.c: 307: else
  3242                           ;lcd_hd44780_pic16.c: 308: {
  3243                           ;lcd_hd44780_pic16.c: 309: (LCDByte(*msg,1));
  3244  054A  01A5               	clrf	LCDByte@isdata
  3245  054B  0AA5               	incf	LCDByte@isdata,f
  3246  054C  082D               	movf	LCDWriteString@msg+1,w
  3247  054D  00FF               	movwf	127
  3248  054E  082C               	movf	LCDWriteString@msg,w
  3249  054F  0084               	movwf	4
  3250  0550  120A  118A  2567  120A  118A  	fcall	stringtab
  3251  0555                     L4:	
  3252  0555  120A  118A  25BF  120A  118A  	fcall	_LCDByte
  3253                           
  3254                           ;lcd_hd44780_pic16.c: 310: count++;
  3255  055A  3001               	movlw	1
  3256  055B  1283               	bcf	3,5	;RP0=0, select bank0
  3257  055C  1303               	bcf	3,6	;RP1=0, select bank0
  3258  055D  00AE               	movwf	??_LCDWriteString
  3259  055E  082E               	movf	??_LCDWriteString,w
  3260  055F  07AF               	addwf	LCDWriteString@count,f
  3261                           
  3262                           ;lcd_hd44780_pic16.c: 311: }
  3263                           ;lcd_hd44780_pic16.c: 312: msg++;
  3264  0560  3001               	movlw	1
  3265  0561  07AC               	addwf	LCDWriteString@msg,f
  3266  0562  1803               	skipnc
  3267  0563  0AAD               	incf	LCDWriteString@msg+1,f
  3268  0564  2D08               	goto	l2114
  3269  0565                     l2116:	
  3270                           
  3271                           ;lcd_hd44780_pic16.c: 313: }
  3272                           ;lcd_hd44780_pic16.c: 315: return count;
  3273  0565  082F               	movf	LCDWriteString@count,w
  3274  0566  0008               	return
  3275  0567                     __end_of_LCDWriteString:	
  3276                           
  3277                           	psect	text13
  3278  07D6                     __ptext13:	
  3279 ;; *************** function _LCDGotoXY *****************
  3280 ;; Defined at:
  3281 ;;		line 367 in file "lcd_hd44780_pic16.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;  x               1    wreg     unsigned char 
  3284 ;;  y               1   12[BANK0 ] unsigned char 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  x               1   14[BANK0 ] unsigned char 
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  1    wreg      void 
  3289 ;; Registers used:
  3290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3296 ;;      Params:         0       1       0       0       0
  3297 ;;      Locals:         0       1       0       0       0
  3298 ;;      Temps:          0       1       0       0       0
  3299 ;;      Totals:         0       3       0       0       0
  3300 ;;Total ram usage:        3 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    5
  3303 ;; This function calls:
  3304 ;;		_LCDByte
  3305 ;; This function is called by:
  3306 ;;		_dump_msg
  3307 ;;		_dump_conn
  3308 ;;		_debug_1
  3309 ;;		_debug_2
  3310 ;;		_debug_3
  3311 ;;		_debug_4
  3312 ;;		_debug_5
  3313 ;;		_ShowMenu
  3314 ;;		_ClearMenu
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           
  3319                           ;psect for function _LCDGotoXY
  3320  07D6                     _LCDGotoXY:	
  3321                           
  3322                           ;incstack = 0
  3323                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3324                           ;LCDGotoXY@x stored from wreg
  3325  07D6  1283               	bcf	3,5	;RP0=0, select bank0
  3326  07D7  1303               	bcf	3,6	;RP1=0, select bank0
  3327  07D8  00AE               	movwf	LCDGotoXY@x
  3328                           
  3329                           ;lcd_hd44780_pic16.c: 369: if(x>=20) return;
  3330  07D9  3014               	movlw	20
  3331  07DA  022E               	subwf	LCDGotoXY@x,w
  3332  07DB  1803               	btfsc	3,0
  3333  07DC  0008               	return
  3334  07DD  2FE7               	goto	l2080
  3335  07DE                     l332:	
  3336                           ;lcd_hd44780_pic16.c: 377: case 1:
  3337                           
  3338                           ;lcd_hd44780_pic16.c: 376: break;
  3339                           
  3340                           ;lcd_hd44780_pic16.c: 374: {
  3341                           ;lcd_hd44780_pic16.c: 375: case 0:
  3342                           
  3343                           ;lcd_hd44780_pic16.c: 373: switch(y)
  3344                           
  3345                           
  3346                           ;lcd_hd44780_pic16.c: 378: x|=0b01000000;
  3347  07DE  172E               	bsf	LCDGotoXY@x,6
  3348                           
  3349                           ;lcd_hd44780_pic16.c: 379: break;
  3350  07DF  2FF5               	goto	l331
  3351  07E0                     l2074:	
  3352                           ;lcd_hd44780_pic16.c: 380: case 2:
  3353                           
  3354                           
  3355                           ;lcd_hd44780_pic16.c: 381: x+=0x14;
  3356  07E0  3014               	movlw	20
  3357  07E1  2FE3               	goto	L5
  3358  07E2                     l2076:	
  3359                           ;lcd_hd44780_pic16.c: 383: case 3:
  3360                           
  3361                           ;lcd_hd44780_pic16.c: 382: break;
  3362                           
  3363                           
  3364                           ;lcd_hd44780_pic16.c: 384: x+=0x54;
  3365  07E2  3054               	movlw	84
  3366  07E3                     L5:	
  3367  07E3  00AD               	movwf	??_LCDGotoXY
  3368  07E4  082D               	movf	??_LCDGotoXY,w
  3369  07E5  07AE               	addwf	LCDGotoXY@x,f
  3370                           
  3371                           ;lcd_hd44780_pic16.c: 386: }
  3372                           
  3373                           ;lcd_hd44780_pic16.c: 385: break;
  3374  07E6  2FF5               	goto	l331
  3375  07E7                     l2080:	
  3376  07E7  082C               	movf	LCDGotoXY@y,w
  3377                           
  3378                           ; Switch size 1, requested type "space"
  3379                           ; Number of cases is 4, Range of values is 0 to 3
  3380                           ; switch strategies available:
  3381                           ; Name         Instructions Cycles
  3382                           ; simple_byte           13     7 (average)
  3383                           ; direct_byte           20     8 (fixed)
  3384                           ; jumptable            260     6 (fixed)
  3385                           ;	Chosen strategy is simple_byte
  3386  07E8  3A00               	xorlw	0	; case 0
  3387  07E9  1903               	skipnz
  3388  07EA  2FF5               	goto	l331
  3389  07EB  3A01               	xorlw	1	; case 1
  3390  07EC  1903               	skipnz
  3391  07ED  2FDE               	goto	l332
  3392  07EE  3A03               	xorlw	3	; case 2
  3393  07EF  1903               	skipnz
  3394  07F0  2FE0               	goto	l2074
  3395  07F1  3A01               	xorlw	1	; case 3
  3396  07F2  1903               	skipnz
  3397  07F3  2FE2               	goto	l2076
  3398  07F4  2FF5               	goto	l331
  3399  07F5                     l331:	
  3400                           
  3401                           ;lcd_hd44780_pic16.c: 408: x|=0b10000000;
  3402  07F5  17AE               	bsf	LCDGotoXY@x,7
  3403                           
  3404                           ;lcd_hd44780_pic16.c: 409: (LCDByte(x,0));
  3405  07F6  01A5               	clrf	LCDByte@isdata
  3406  07F7  082E               	movf	LCDGotoXY@x,w
  3407  07F8  120A  118A  25BF   	fcall	_LCDByte
  3408  07FB  0008               	return
  3409  07FC                     __end_of_LCDGotoXY:	
  3410                           
  3411                           	psect	text14
  3412  072F                     __ptext14:	
  3413 ;; *************** function _MenuInit *****************
  3414 ;; Defined at:
  3415 ;;		line 7 in file "menu.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;		None
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;		None
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  1    wreg      void 
  3422 ;; Registers used:
  3423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3429 ;;      Params:         0       0       0       0       0
  3430 ;;      Locals:         0       0       0       0       0
  3431 ;;      Temps:          0       1       0       0       0
  3432 ;;      Totals:         0       1       0       0       0
  3433 ;;Total ram usage:        1 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    5
  3436 ;; This function calls:
  3437 ;;		_LoadMenuItem
  3438 ;; This function is called by:
  3439 ;;		_main
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           
  3444                           ;psect for function _MenuInit
  3445  072F                     _MenuInit:	
  3446                           
  3447                           ;menu.c: 9: g_menu.items[0].name = "ID1:";
  3448                           
  3449                           ;incstack = 0
  3450                           ; Regs used in _MenuInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3451  072F  3035               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  3452  0730  1283               	bcf	3,5	;RP0=0, select bank0
  3453  0731  1303               	bcf	3,6	;RP1=0, select bank0
  3454  0732  00A5               	movwf	??_MenuInit
  3455  0733  0825               	movf	??_MenuInit,w
  3456  0734  00D3               	movwf	low ((_g_menu| 0+1))
  3457                           
  3458                           ;menu.c: 10: g_menu.items[0].value = LoadMenuItem(0);
  3459  0735  3000               	movlw	0
  3460  0736  120A  158A  27B5  120A  118A  	fcall	_LoadMenuItem
  3461  073B  1283               	bcf	3,5	;RP0=0, select bank0
  3462  073C  1303               	bcf	3,6	;RP1=0, select bank0
  3463  073D  00A5               	movwf	??_MenuInit
  3464  073E  0825               	movf	??_MenuInit,w
  3465  073F  00D2               	movwf	_g_menu
  3466                           
  3467                           ;menu.c: 12: g_menu.items[1].name = "ID2:";
  3468  0740  303A               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  3469  0741  00A5               	movwf	??_MenuInit
  3470  0742  0825               	movf	??_MenuInit,w
  3471  0743  00D5               	movwf	low ((_g_menu| 0+3))
  3472                           
  3473                           ;menu.c: 13: g_menu.items[1].value = LoadMenuItem(1);
  3474  0744  3001               	movlw	1
  3475  0745  120A  158A  27B5  120A  118A  	fcall	_LoadMenuItem
  3476  074A  1283               	bcf	3,5	;RP0=0, select bank0
  3477  074B  1303               	bcf	3,6	;RP1=0, select bank0
  3478  074C  00A5               	movwf	??_MenuInit
  3479  074D  0825               	movf	??_MenuInit,w
  3480  074E  00D4               	movwf	_g_menu+2
  3481                           
  3482                           ;menu.c: 15: g_menu.items[2].name = "ID3:";
  3483  074F  303F               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  3484  0750  00A5               	movwf	??_MenuInit
  3485  0751  0825               	movf	??_MenuInit,w
  3486  0752  00D7               	movwf	low ((_g_menu| 0+5))
  3487                           
  3488                           ;menu.c: 16: g_menu.items[2].value = LoadMenuItem(2);
  3489  0753  3002               	movlw	2
  3490  0754  120A  158A  27B5  120A  118A  	fcall	_LoadMenuItem
  3491  0759  1283               	bcf	3,5	;RP0=0, select bank0
  3492  075A  1303               	bcf	3,6	;RP1=0, select bank0
  3493  075B  00A5               	movwf	??_MenuInit
  3494  075C  0825               	movf	??_MenuInit,w
  3495  075D  00D6               	movwf	_g_menu+4
  3496                           
  3497                           ;menu.c: 18: g_menu.items[3].name = "ID4:";
  3498  075E  3044               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  3499  075F  00A5               	movwf	??_MenuInit
  3500  0760  0825               	movf	??_MenuInit,w
  3501  0761  00D9               	movwf	low ((_g_menu| 0+7))
  3502                           
  3503                           ;menu.c: 19: g_menu.items[3].value = LoadMenuItem(3);
  3504  0762  3003               	movlw	3
  3505  0763  120A  158A  27B5   	fcall	_LoadMenuItem
  3506  0766  1283               	bcf	3,5	;RP0=0, select bank0
  3507  0767  1303               	bcf	3,6	;RP1=0, select bank0
  3508  0768  00A5               	movwf	??_MenuInit
  3509  0769  0825               	movf	??_MenuInit,w
  3510  076A  00D8               	movwf	_g_menu+6
  3511                           
  3512                           ;menu.c: 21: g_menu.index = 0;
  3513  076B  01DA               	clrf	_g_menu+8
  3514  076C  0008               	return
  3515  076D                     __end_of_MenuInit:	
  3516                           
  3517                           	psect	text15
  3518  0435                     __ptext15:	
  3519 ;; *************** function _LCDInit *****************
  3520 ;; Defined at:
  3521 ;;		line 211 in file "lcd_hd44780_pic16.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;  style           1    wreg     unsigned char 
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;  style           1   14[BANK0 ] unsigned char 
  3526 ;;  __i             1   15[BANK0 ] unsigned char 
  3527 ;; Return value:  Size  Location     Type
  3528 ;;                  1    wreg      void 
  3529 ;; Registers used:
  3530 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3536 ;;      Params:         0       0       0       0       0
  3537 ;;      Locals:         0       2       0       0       0
  3538 ;;      Temps:          0       2       0       0       0
  3539 ;;      Totals:         0       4       0       0       0
  3540 ;;Total ram usage:        4 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; Hardware stack levels required when called:    5
  3543 ;; This function calls:
  3544 ;;		_LCDBusyLoop
  3545 ;;		_LCDByte
  3546 ;; This function is called by:
  3547 ;;		_main
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           
  3552                           ;psect for function _LCDInit
  3553  0435                     _LCDInit:	
  3554                           
  3555                           ;incstack = 0
  3556                           ; Regs used in _LCDInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3557                           ;LCDInit@style stored from wreg
  3558  0435  1283               	bcf	3,5	;RP0=0, select bank0
  3559  0436  1303               	bcf	3,6	;RP1=0, select bank0
  3560  0437  00AE               	movwf	LCDInit@style
  3561                           
  3562                           ;lcd_hd44780_pic16.c: 213: _delay((unsigned long)((30)*(20000000/4000.0)));
  3563  0438  30C3               	movlw	195
  3564  0439  00AD               	movwf	??_LCDInit+1
  3565  043A  30CD               	movlw	205
  3566  043B  00AC               	movwf	??_LCDInit
  3567  043C                     u2537:	
  3568  043C  0BAC               	decfsz	??_LCDInit,f
  3569  043D  2C3C               	goto	u2537
  3570  043E  0BAD               	decfsz	??_LCDInit+1,f
  3571  043F  2C3C               	goto	u2537
  3572                           
  3573                           ;lcd_hd44780_pic16.c: 216: TRISC&=(~(0x0F<<4));
  3574  0440  300F               	movlw	15
  3575  0441  1283               	bcf	3,5	;RP0=0, select bank0
  3576  0442  1303               	bcf	3,6	;RP1=0, select bank0
  3577  0443  00AC               	movwf	??_LCDInit
  3578  0444  082C               	movf	??_LCDInit,w
  3579  0445  1683               	bsf	3,5	;RP0=1, select bank1
  3580  0446  1303               	bcf	3,6	;RP1=0, select bank1
  3581  0447  0587               	andwf	7,f	;volatile
  3582                           
  3583                           ;lcd_hd44780_pic16.c: 218: TRISCbits.TRISC3=0;
  3584  0448  1187               	bcf	7,3	;volatile
  3585                           
  3586                           ;lcd_hd44780_pic16.c: 219: TRISCbits.TRISC1=0;
  3587  0449  1087               	bcf	7,1	;volatile
  3588                           
  3589                           ;lcd_hd44780_pic16.c: 220: TRISCbits.TRISC2=0;
  3590  044A  1107               	bcf	7,2	;volatile
  3591                           
  3592                           ;lcd_hd44780_pic16.c: 222: PORTC&=(~(0x0F<<4));
  3593  044B  300F               	movlw	15
  3594  044C  1283               	bcf	3,5	;RP0=0, select bank0
  3595  044D  1303               	bcf	3,6	;RP1=0, select bank0
  3596  044E  00AC               	movwf	??_LCDInit
  3597  044F  082C               	movf	??_LCDInit,w
  3598  0450  0587               	andwf	7,f	;volatile
  3599                           
  3600                           ;lcd_hd44780_pic16.c: 224: (RC3=0);
  3601  0451  1187               	bcf	7,3	;volatile
  3602                           
  3603                           ;lcd_hd44780_pic16.c: 225: (RC2=0);
  3604  0452  1107               	bcf	7,2	;volatile
  3605                           
  3606                           ;lcd_hd44780_pic16.c: 226: (RC1=0);
  3607  0453  1087               	bcf	7,1	;volatile
  3608                           
  3609                           ;lcd_hd44780_pic16.c: 229: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  3610  0454  2C55               	nop2	;2 cycle nop
  3611                           
  3612                           ;lcd_hd44780_pic16.c: 231: (RC3=1);
  3613  0455  1283               	bcf	3,5	;RP0=0, select bank0
  3614  0456  1303               	bcf	3,6	;RP1=0, select bank0
  3615  0457  1587               	bsf	7,3	;volatile
  3616                           
  3617                           ;lcd_hd44780_pic16.c: 232: PORTC|=((0b00000010)<<4);
  3618  0458  1687               	bsf	7,5	;volatile
  3619                           
  3620                           ;lcd_hd44780_pic16.c: 233: _delay((unsigned long)((1)*(20000000/4000000.0)));
  3621  0459  2C5A               	nop2	;2 cycle nop
  3622  045A  2C5B               	nop2	;2 cycle nop
  3623  045B  0000               	nop
  3624                           
  3625                           ;lcd_hd44780_pic16.c: 234: (RC3=0);
  3626  045C  1283               	bcf	3,5	;RP0=0, select bank0
  3627  045D  1303               	bcf	3,6	;RP1=0, select bank0
  3628  045E  1187               	bcf	7,3	;volatile
  3629                           
  3630                           ;lcd_hd44780_pic16.c: 235: _delay((unsigned long)((1)*(20000000/4000000.0)));
  3631  045F  2C60               	nop2	;2 cycle nop
  3632  0460  2C61               	nop2	;2 cycle nop
  3633  0461  0000               	nop
  3634                           
  3635                           ;lcd_hd44780_pic16.c: 238: LCDBusyLoop();
  3636  0462  120A  118A  249D  120A  118A  	fcall	_LCDBusyLoop
  3637                           
  3638                           ;lcd_hd44780_pic16.c: 243: (LCDByte(0b00101000,0));
  3639  0467  1283               	bcf	3,5	;RP0=0, select bank0
  3640  0468  1303               	bcf	3,6	;RP1=0, select bank0
  3641  0469  01A5               	clrf	LCDByte@isdata
  3642  046A  3028               	movlw	40
  3643  046B  120A  118A  25BF  120A  118A  	fcall	_LCDByte
  3644                           
  3645                           ;lcd_hd44780_pic16.c: 244: (LCDByte(0b00001100|style,0));
  3646  0470  1283               	bcf	3,5	;RP0=0, select bank0
  3647  0471  1303               	bcf	3,6	;RP1=0, select bank0
  3648  0472  01A5               	clrf	LCDByte@isdata
  3649  0473  082E               	movf	LCDInit@style,w
  3650  0474  380C               	iorlw	12
  3651  0475  120A  118A  25BF  120A  118A  	fcall	_LCDByte
  3652                           
  3653                           ;lcd_hd44780_pic16.c: 247: (LCDByte(0b01000000,0));
  3654  047A  1283               	bcf	3,5	;RP0=0, select bank0
  3655  047B  1303               	bcf	3,6	;RP1=0, select bank0
  3656  047C  01A5               	clrf	LCDByte@isdata
  3657  047D  3040               	movlw	64
  3658  047E  120A  118A  25BF  120A  118A  	fcall	_LCDByte
  3659                           
  3660                           ;lcd_hd44780_pic16.c: 249: uint8_t __i;
  3661                           ;lcd_hd44780_pic16.c: 250: for(__i=0;__i<sizeof(__cgram);__i++)
  3662  0483  1283               	bcf	3,5	;RP0=0, select bank0
  3663  0484  1303               	bcf	3,6	;RP1=0, select bank0
  3664  0485  01AF               	clrf	LCDInit@__i
  3665  0486                     L6:	
  3666  0486  3008               	movlw	8
  3667  0487  022F               	subwf	LCDInit@__i,w
  3668  0488  1803               	btfsc	3,0
  3669  0489  0008               	return
  3670                           
  3671                           ;lcd_hd44780_pic16.c: 251: (LCDByte(__cgram[__i],1));
  3672  048A  01A5               	clrf	LCDByte@isdata
  3673  048B  0AA5               	incf	LCDByte@isdata,f
  3674  048C  082F               	movf	LCDInit@__i,w
  3675  048D  3EE3               	addlw	(low (___cgram| 0))& (0+255)
  3676  048E  0084               	movwf	4
  3677  048F  1383               	bcf	3,7	;select IRP bank1
  3678  0490  0800               	movf	0,w
  3679  0491  120A  118A  25BF  120A  118A  	fcall	_LCDByte
  3680  0496  3001               	movlw	1
  3681  0497  1283               	bcf	3,5	;RP0=0, select bank0
  3682  0498  1303               	bcf	3,6	;RP1=0, select bank0
  3683  0499  00AC               	movwf	??_LCDInit
  3684  049A  082C               	movf	??_LCDInit,w
  3685  049B  07AF               	addwf	LCDInit@__i,f
  3686  049C  2C86               	goto	L6
  3687  049D                     __end_of_LCDInit:	
  3688                           
  3689                           	psect	text16
  3690  05BF                     __ptext16:	
  3691 ;; *************** function _LCDByte *****************
  3692 ;; Defined at:
  3693 ;;		line 80 in file "lcd_hd44780_pic16.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;  c               1    wreg     unsigned char 
  3696 ;;  isdata          1    5[BANK0 ] unsigned char 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  c               1   10[BANK0 ] unsigned char 
  3699 ;;  temp            1   11[BANK0 ] unsigned char 
  3700 ;;  ln              1    9[BANK0 ] unsigned char 
  3701 ;;  hn              1    8[BANK0 ] unsigned char 
  3702 ;; Return value:  Size  Location     Type
  3703 ;;                  1    wreg      void 
  3704 ;; Registers used:
  3705 ;;		wreg, status,2, status,0, pclath, cstack
  3706 ;; Tracked objects:
  3707 ;;		On entry : 0/0
  3708 ;;		On exit  : 0/0
  3709 ;;		Unchanged: 0/0
  3710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3711 ;;      Params:         0       1       0       0       0
  3712 ;;      Locals:         0       4       0       0       0
  3713 ;;      Temps:          0       2       0       0       0
  3714 ;;      Totals:         0       7       0       0       0
  3715 ;;Total ram usage:        7 bytes
  3716 ;; Hardware stack levels used:    1
  3717 ;; Hardware stack levels required when called:    4
  3718 ;; This function calls:
  3719 ;;		_LCDBusyLoop
  3720 ;; This function is called by:
  3721 ;;		_dump_msg
  3722 ;;		_dump_conn
  3723 ;;		_main
  3724 ;;		_LCDInit
  3725 ;;		_LCDWriteString
  3726 ;;		_LCDGotoXY
  3727 ;;		_debug_1
  3728 ;;		_debug_2
  3729 ;;		_debug_3
  3730 ;;		_debug_4
  3731 ;;		_debug_5
  3732 ;;		_LCDSetStyle
  3733 ;;		_LCDWriteInt
  3734 ;;		_ShowMenu
  3735 ;;		_ClearMenu
  3736 ;; This function uses a non-reentrant model
  3737 ;;
  3738                           
  3739                           
  3740                           ;psect for function _LCDByte
  3741  05BF                     _LCDByte:	
  3742                           
  3743                           ;incstack = 0
  3744                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  3745                           ;LCDByte@c stored from wreg
  3746  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  3747  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  3748  05C1  00AA               	movwf	LCDByte@c
  3749                           
  3750                           ;lcd_hd44780_pic16.c: 89: uint8_t hn,ln;
  3751                           ;lcd_hd44780_pic16.c: 90: uint8_t temp;
  3752                           ;lcd_hd44780_pic16.c: 92: hn=c>>4;
  3753  05C2  082A               	movf	LCDByte@c,w
  3754  05C3  00A6               	movwf	??_LCDByte
  3755  05C4  3004               	movlw	4
  3756  05C5                     u1315:	
  3757  05C5  1003               	clrc
  3758  05C6  0CA6               	rrf	??_LCDByte,f
  3759  05C7  3EFF               	addlw	-1
  3760  05C8  1D03               	skipz
  3761  05C9  2DC5               	goto	u1315
  3762  05CA  0826               	movf	??_LCDByte,w
  3763  05CB  00A7               	movwf	??_LCDByte+1
  3764  05CC  0827               	movf	??_LCDByte+1,w
  3765  05CD  00A8               	movwf	LCDByte@hn
  3766                           
  3767                           ;lcd_hd44780_pic16.c: 93: ln=(c & 0x0F);
  3768  05CE  082A               	movf	LCDByte@c,w
  3769  05CF  390F               	andlw	15
  3770  05D0  00A6               	movwf	??_LCDByte
  3771  05D1  0826               	movf	??_LCDByte,w
  3772  05D2  00A9               	movwf	LCDByte@ln
  3773                           
  3774                           ;lcd_hd44780_pic16.c: 95: if(isdata==0)
  3775  05D3  0825               	movf	LCDByte@isdata,w
  3776  05D4  1D03               	btfss	3,2
  3777  05D5  2DD8               	goto	l282
  3778                           
  3779                           ;lcd_hd44780_pic16.c: 96: (RC1=0);
  3780  05D6  1087               	bcf	7,1	;volatile
  3781  05D7  2DD9               	goto	l283
  3782  05D8                     l282:	
  3783                           
  3784                           ;lcd_hd44780_pic16.c: 97: else
  3785                           ;lcd_hd44780_pic16.c: 98: (RC1=1);
  3786  05D8  1487               	bsf	7,1	;volatile
  3787  05D9                     l283:	
  3788                           
  3789                           ;lcd_hd44780_pic16.c: 100: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  3790  05D9  2DDA               	nop2	;2 cycle nop
  3791                           
  3792                           ;lcd_hd44780_pic16.c: 102: (RC3=1);
  3793  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  3794  05DB  1303               	bcf	3,6	;RP1=0, select bank0
  3795  05DC  1587               	bsf	7,3	;volatile
  3796                           
  3797                           ;lcd_hd44780_pic16.c: 106: temp=(PORTC & (~(0X0F<<4)))|((hn<<4));
  3798  05DD  0828               	movf	LCDByte@hn,w
  3799  05DE  00A6               	movwf	??_LCDByte
  3800  05DF  3004               	movlw	4
  3801  05E0                     u1335:	
  3802  05E0  1003               	clrc
  3803  05E1  0DA6               	rlf	??_LCDByte,f
  3804  05E2  3EFF               	addlw	-1
  3805  05E3  1D03               	skipz
  3806  05E4  2DE0               	goto	u1335
  3807  05E5  0807               	movf	7,w	;volatile
  3808  05E6  390F               	andlw	15
  3809  05E7  0426               	iorwf	??_LCDByte,w
  3810  05E8  00A7               	movwf	??_LCDByte+1
  3811  05E9  0827               	movf	??_LCDByte+1,w
  3812  05EA  00AB               	movwf	LCDByte@temp
  3813                           
  3814                           ;lcd_hd44780_pic16.c: 107: PORTC=temp;
  3815  05EB  082B               	movf	LCDByte@temp,w
  3816  05EC  0087               	movwf	7	;volatile
  3817                           
  3818                           ;lcd_hd44780_pic16.c: 109: _delay((unsigned long)((1)*(20000000/4000000.0)));
  3819  05ED  2DEE               	nop2	;2 cycle nop
  3820  05EE  2DEF               	nop2	;2 cycle nop
  3821  05EF  0000               	nop
  3822                           
  3823                           ;lcd_hd44780_pic16.c: 113: (RC3=0);
  3824  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  3825  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  3826  05F2  1187               	bcf	7,3	;volatile
  3827                           
  3828                           ;lcd_hd44780_pic16.c: 115: _delay((unsigned long)((1)*(20000000/4000000.0)));
  3829  05F3  2DF4               	nop2	;2 cycle nop
  3830  05F4  2DF5               	nop2	;2 cycle nop
  3831  05F5  0000               	nop
  3832                           
  3833                           ;lcd_hd44780_pic16.c: 118: (RC3=1);
  3834  05F6  1283               	bcf	3,5	;RP0=0, select bank0
  3835  05F7  1303               	bcf	3,6	;RP1=0, select bank0
  3836  05F8  1587               	bsf	7,3	;volatile
  3837                           
  3838                           ;lcd_hd44780_pic16.c: 120: temp=(PORTC & (~(0X0F<<4)))|((ln<<4));
  3839  05F9  0829               	movf	LCDByte@ln,w
  3840  05FA  00A6               	movwf	??_LCDByte
  3841  05FB  3004               	movlw	4
  3842  05FC                     u1345:	
  3843  05FC  1003               	clrc
  3844  05FD  0DA6               	rlf	??_LCDByte,f
  3845  05FE  3EFF               	addlw	-1
  3846  05FF  1D03               	skipz
  3847  0600  2DFC               	goto	u1345
  3848  0601  0807               	movf	7,w	;volatile
  3849  0602  390F               	andlw	15
  3850  0603  0426               	iorwf	??_LCDByte,w
  3851  0604  00A7               	movwf	??_LCDByte+1
  3852  0605  0827               	movf	??_LCDByte+1,w
  3853  0606  00AB               	movwf	LCDByte@temp
  3854                           
  3855                           ;lcd_hd44780_pic16.c: 122: PORTC=temp;
  3856  0607  082B               	movf	LCDByte@temp,w
  3857  0608  0087               	movwf	7	;volatile
  3858                           
  3859                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((1)*(20000000/4000000.0)));
  3860  0609  2E0A               	nop2	;2 cycle nop
  3861  060A  2E0B               	nop2	;2 cycle nop
  3862  060B  0000               	nop
  3863                           
  3864                           ;lcd_hd44780_pic16.c: 128: (RC3=0);
  3865  060C  1283               	bcf	3,5	;RP0=0, select bank0
  3866  060D  1303               	bcf	3,6	;RP1=0, select bank0
  3867  060E  1187               	bcf	7,3	;volatile
  3868                           
  3869                           ;lcd_hd44780_pic16.c: 130: _delay((unsigned long)((1)*(20000000/4000000.0)));
  3870  060F  2E10               	nop2	;2 cycle nop
  3871  0610  2E11               	nop2	;2 cycle nop
  3872  0611  0000               	nop
  3873                           
  3874                           ;lcd_hd44780_pic16.c: 132: LCDBusyLoop();
  3875  0612  120A  118A  249D   	fcall	_LCDBusyLoop
  3876  0615  0008               	return
  3877  0616                     __end_of_LCDByte:	
  3878                           
  3879                           	psect	text17
  3880  049D                     __ptext17:	
  3881 ;; *************** function _LCDBusyLoop *****************
  3882 ;; Defined at:
  3883 ;;		line 135 in file "lcd_hd44780_pic16.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;		None
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;  status          1    4[BANK0 ] unsigned char 
  3888 ;;  temp            1    3[BANK0 ] unsigned char 
  3889 ;;  busy            1    2[BANK0 ] unsigned char 
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      void 
  3892 ;; Registers used:
  3893 ;;		wreg, status,2, status,0
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3899 ;;      Params:         0       0       0       0       0
  3900 ;;      Locals:         0       3       0       0       0
  3901 ;;      Temps:          0       2       0       0       0
  3902 ;;      Totals:         0       5       0       0       0
  3903 ;;Total ram usage:        5 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    3
  3906 ;; This function calls:
  3907 ;;		Nothing
  3908 ;; This function is called by:
  3909 ;;		_LCDByte
  3910 ;;		_LCDInit
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           
  3915                           ;psect for function _LCDBusyLoop
  3916  049D                     _LCDBusyLoop:	
  3917                           
  3918                           ;lcd_hd44780_pic16.c: 139: uint8_t busy,status=0x00,temp;
  3919                           
  3920                           ;incstack = 0
  3921                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  3922  049D  1283               	bcf	3,5	;RP0=0, select bank0
  3923  049E  1303               	bcf	3,6	;RP1=0, select bank0
  3924  049F  01A4               	clrf	LCDBusyLoop@status
  3925                           
  3926                           ;lcd_hd44780_pic16.c: 142: TRISC|=(0x0f<<4);
  3927  04A0  30F0               	movlw	240
  3928  04A1  00A0               	movwf	??_LCDBusyLoop
  3929  04A2  0820               	movf	??_LCDBusyLoop,w
  3930  04A3  1683               	bsf	3,5	;RP0=1, select bank1
  3931  04A4  1303               	bcf	3,6	;RP1=0, select bank1
  3932  04A5  0487               	iorwf	7,f	;volatile
  3933                           
  3934                           ;lcd_hd44780_pic16.c: 145: (RC2=1);
  3935  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  3936  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  3937  04A8  1507               	bsf	7,2	;volatile
  3938                           
  3939                           ;lcd_hd44780_pic16.c: 146: (RC1=0);
  3940  04A9  1087               	bcf	7,1	;volatile
  3941                           
  3942                           ;lcd_hd44780_pic16.c: 150: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  3943  04AA  2CAB               	nop2	;2 cycle nop
  3944  04AB                     l1852:	
  3945                           ;lcd_hd44780_pic16.c: 153: do
  3946                           
  3947                           
  3948                           ;lcd_hd44780_pic16.c: 154: {
  3949                           ;lcd_hd44780_pic16.c: 156: (RC3=1);
  3950  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  3951  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  3952  04AD  1587               	bsf	7,3	;volatile
  3953                           
  3954                           ;lcd_hd44780_pic16.c: 159: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  3955  04AE  2CAF               	nop2	;2 cycle nop
  3956                           
  3957                           ;lcd_hd44780_pic16.c: 161: status=(PORTC>>4);
  3958  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  3959  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  3960  04B1  0807               	movf	7,w	;volatile
  3961  04B2  00A0               	movwf	??_LCDBusyLoop
  3962  04B3  3004               	movlw	4
  3963  04B4                     u1275:	
  3964  04B4  1003               	clrc
  3965  04B5  0CA0               	rrf	??_LCDBusyLoop,f
  3966  04B6  3EFF               	addlw	-1
  3967  04B7  1D03               	skipz
  3968  04B8  2CB4               	goto	u1275
  3969  04B9  0820               	movf	??_LCDBusyLoop,w
  3970  04BA  00A1               	movwf	??_LCDBusyLoop+1
  3971  04BB  0821               	movf	??_LCDBusyLoop+1,w
  3972  04BC  00A4               	movwf	LCDBusyLoop@status
  3973                           
  3974                           ;lcd_hd44780_pic16.c: 162: status=status<<4;
  3975  04BD  0824               	movf	LCDBusyLoop@status,w
  3976  04BE  00A0               	movwf	??_LCDBusyLoop
  3977  04BF  3003               	movlw	3
  3978  04C0                     u1285:	
  3979  04C0  1003               	clrc
  3980  04C1  0DA0               	rlf	??_LCDBusyLoop,f
  3981  04C2  3EFF               	addlw	-1
  3982  04C3  1D03               	skipz
  3983  04C4  2CC0               	goto	u1285
  3984  04C5  1003               	clrc
  3985  04C6  0D20               	rlf	??_LCDBusyLoop,w
  3986  04C7  00A1               	movwf	??_LCDBusyLoop+1
  3987  04C8  0821               	movf	??_LCDBusyLoop+1,w
  3988  04C9  00A4               	movwf	LCDBusyLoop@status
  3989                           
  3990                           ;lcd_hd44780_pic16.c: 164: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  3991  04CA  2CCB               	nop2	;2 cycle nop
  3992                           
  3993                           ;lcd_hd44780_pic16.c: 167: (RC3=0);
  3994  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  3995  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  3996  04CD  1187               	bcf	7,3	;volatile
  3997                           
  3998                           ;lcd_hd44780_pic16.c: 168: _delay((unsigned long)((1)*(20000000/4000000.0)));
  3999  04CE  2CCF               	nop2	;2 cycle nop
  4000  04CF  2CD0               	nop2	;2 cycle nop
  4001  04D0  0000               	nop
  4002                           
  4003                           ;lcd_hd44780_pic16.c: 170: (RC3=1);
  4004  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  4005  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  4006  04D3  1587               	bsf	7,3	;volatile
  4007                           
  4008                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  4009  04D4  2CD5               	nop2	;2 cycle nop
  4010                           
  4011                           ;lcd_hd44780_pic16.c: 173: temp=(PORTC>>4);
  4012  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  4013  04D6  1303               	bcf	3,6	;RP1=0, select bank0
  4014  04D7  0807               	movf	7,w	;volatile
  4015  04D8  00A0               	movwf	??_LCDBusyLoop
  4016  04D9  3004               	movlw	4
  4017  04DA                     u1295:	
  4018  04DA  1003               	clrc
  4019  04DB  0CA0               	rrf	??_LCDBusyLoop,f
  4020  04DC  3EFF               	addlw	-1
  4021  04DD  1D03               	skipz
  4022  04DE  2CDA               	goto	u1295
  4023  04DF  0820               	movf	??_LCDBusyLoop,w
  4024  04E0  00A1               	movwf	??_LCDBusyLoop+1
  4025  04E1  0821               	movf	??_LCDBusyLoop+1,w
  4026  04E2  00A3               	movwf	LCDBusyLoop@temp
  4027                           
  4028                           ;lcd_hd44780_pic16.c: 174: temp&=0x0F;
  4029  04E3  300F               	movlw	15
  4030  04E4  00A0               	movwf	??_LCDBusyLoop
  4031  04E5  0820               	movf	??_LCDBusyLoop,w
  4032  04E6  05A3               	andwf	LCDBusyLoop@temp,f
  4033                           
  4034                           ;lcd_hd44780_pic16.c: 176: status=status|temp;
  4035  04E7  0824               	movf	LCDBusyLoop@status,w
  4036  04E8  0423               	iorwf	LCDBusyLoop@temp,w
  4037  04E9  00A0               	movwf	??_LCDBusyLoop
  4038  04EA  0820               	movf	??_LCDBusyLoop,w
  4039  04EB  00A4               	movwf	LCDBusyLoop@status
  4040                           
  4041                           ;lcd_hd44780_pic16.c: 178: busy=status & 0b10000000;
  4042  04EC  0824               	movf	LCDBusyLoop@status,w
  4043  04ED  3980               	andlw	128
  4044  04EE  00A0               	movwf	??_LCDBusyLoop
  4045  04EF  0820               	movf	??_LCDBusyLoop,w
  4046  04F0  00A2               	movwf	LCDBusyLoop@busy
  4047                           
  4048                           ;lcd_hd44780_pic16.c: 180: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  4049  04F1  2CF2               	nop2	;2 cycle nop
  4050                           
  4051                           ;lcd_hd44780_pic16.c: 182: (RC3=0);
  4052  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  4053  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  4054  04F4  1187               	bcf	7,3	;volatile
  4055                           
  4056                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((1)*(20000000/4000000.0)));
  4057  04F5  2CF6               	nop2	;2 cycle nop
  4058  04F6  2CF7               	nop2	;2 cycle nop
  4059  04F7  0000               	nop
  4060                           
  4061                           ;lcd_hd44780_pic16.c: 184: }while(busy);
  4062  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  4063  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  4064  04FA  0822               	movf	LCDBusyLoop@busy,w
  4065  04FB  1D03               	btfss	3,2
  4066  04FC  2CAB               	goto	l1852
  4067                           
  4068                           ;lcd_hd44780_pic16.c: 186: (RC2=0);
  4069  04FD  1107               	bcf	7,2	;volatile
  4070                           
  4071                           ;lcd_hd44780_pic16.c: 189: TRISC&=(~(0x0F<<4));
  4072  04FE  300F               	movlw	15
  4073  04FF  00A0               	movwf	??_LCDBusyLoop
  4074  0500  0820               	movf	??_LCDBusyLoop,w
  4075  0501  1683               	bsf	3,5	;RP0=1, select bank1
  4076  0502  1303               	bcf	3,6	;RP1=0, select bank1
  4077  0503  0587               	andwf	7,f	;volatile
  4078  0504  0008               	return
  4079  0505                     __end_of_LCDBusyLoop:	
  4080                           
  4081                           	psect	text18
  4082  0664                     __ptext18:	
  4083 ;; *************** function _IOInit *****************
  4084 ;; Defined at:
  4085 ;;		line 46 in file "do_am.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;		None
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;		None
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      void 
  4092 ;; Registers used:
  4093 ;;		None
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4099 ;;      Params:         0       0       0       0       0
  4100 ;;      Locals:         0       0       0       0       0
  4101 ;;      Temps:          0       0       0       0       0
  4102 ;;      Totals:         0       0       0       0       0
  4103 ;;Total ram usage:        0 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    3
  4106 ;; This function calls:
  4107 ;;		Nothing
  4108 ;; This function is called by:
  4109 ;;		_main
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           
  4114                           ;psect for function _IOInit
  4115  0664                     _IOInit:	
  4116                           
  4117                           ;do_am.c: 49: (TRISBbits.TRISB2 = 1);
  4118                           
  4119                           ;incstack = 0
  4120                           ; Regs used in _IOInit: []
  4121  0664  1683               	bsf	3,5	;RP0=1, select bank1
  4122  0665  1303               	bcf	3,6	;RP1=0, select bank1
  4123  0666  1506               	bsf	6,2	;volatile
  4124                           
  4125                           ;do_am.c: 50: ANSELHbits.ANS8 = 0;
  4126  0667  1683               	bsf	3,5	;RP0=1, select bank3
  4127  0668  1703               	bsf	3,6	;RP1=1, select bank3
  4128  0669  1009               	bcf	9,0	;volatile
  4129                           
  4130                           ;do_am.c: 52: (TRISBbits.TRISB0 = 1);
  4131  066A  1683               	bsf	3,5	;RP0=1, select bank1
  4132  066B  1303               	bcf	3,6	;RP1=0, select bank1
  4133  066C  1406               	bsf	6,0	;volatile
  4134                           
  4135                           ;do_am.c: 53: ANSELHbits.ANS12 = 0;
  4136  066D  1683               	bsf	3,5	;RP0=1, select bank3
  4137  066E  1703               	bsf	3,6	;RP1=1, select bank3
  4138  066F  1209               	bcf	9,4	;volatile
  4139                           
  4140                           ;do_am.c: 55: INTCONbits.GIE = 1;
  4141  0670  178B               	bsf	11,7	;volatile
  4142                           
  4143                           ;do_am.c: 56: INTCONbits.INTE = 1;
  4144  0671  160B               	bsf	11,4	;volatile
  4145                           
  4146                           ;do_am.c: 57: INTCONbits.INTF = 0;
  4147  0672  108B               	bcf	11,1	;volatile
  4148                           
  4149                           ;do_am.c: 58: OPTION_REGbits.INTEDG = 0;
  4150  0673  1683               	bsf	3,5	;RP0=1, select bank1
  4151  0674  1303               	bcf	3,6	;RP1=0, select bank1
  4152  0675  1301               	bcf	1,6	;volatile
  4153                           
  4154                           ;do_am.c: 60: (TRISAbits.TRISA0 = 1);
  4155  0676  1405               	bsf	5,0	;volatile
  4156                           
  4157                           ;do_am.c: 61: ANSELbits.ANS0 = 0;
  4158  0677  1683               	bsf	3,5	;RP0=1, select bank3
  4159  0678  1703               	bsf	3,6	;RP1=1, select bank3
  4160  0679  1008               	bcf	8,0	;volatile
  4161                           
  4162                           ;do_am.c: 63: (TRISAbits.TRISA1 = 1);
  4163  067A  1683               	bsf	3,5	;RP0=1, select bank1
  4164  067B  1303               	bcf	3,6	;RP1=0, select bank1
  4165  067C  1485               	bsf	5,1	;volatile
  4166                           
  4167                           ;do_am.c: 64: ANSELbits.ANS1 = 0;
  4168  067D  1683               	bsf	3,5	;RP0=1, select bank3
  4169  067E  1703               	bsf	3,6	;RP1=1, select bank3
  4170  067F  1088               	bcf	8,1	;volatile
  4171                           
  4172                           ;do_am.c: 65: (TRISAbits.TRISA2 = 1);
  4173  0680  1683               	bsf	3,5	;RP0=1, select bank1
  4174  0681  1303               	bcf	3,6	;RP1=0, select bank1
  4175  0682  1505               	bsf	5,2	;volatile
  4176                           
  4177                           ;do_am.c: 66: ANSELbits.ANS2 = 0;
  4178  0683  1683               	bsf	3,5	;RP0=1, select bank3
  4179  0684  1703               	bsf	3,6	;RP1=1, select bank3
  4180  0685  1108               	bcf	8,2	;volatile
  4181                           
  4182                           ;do_am.c: 67: (TRISAbits.TRISA3 = 1);
  4183  0686  1683               	bsf	3,5	;RP0=1, select bank1
  4184  0687  1303               	bcf	3,6	;RP1=0, select bank1
  4185  0688  1585               	bsf	5,3	;volatile
  4186                           
  4187                           ;do_am.c: 68: ANSELbits.ANS3 = 0;
  4188  0689  1683               	bsf	3,5	;RP0=1, select bank3
  4189  068A  1703               	bsf	3,6	;RP1=1, select bank3
  4190  068B  1188               	bcf	8,3	;volatile
  4191                           
  4192                           ;do_am.c: 70: (TRISBbits.TRISB1 = 0);
  4193  068C  1683               	bsf	3,5	;RP0=1, select bank1
  4194  068D  1303               	bcf	3,6	;RP1=0, select bank1
  4195  068E  1086               	bcf	6,1	;volatile
  4196                           
  4197                           ;do_am.c: 71: ANSELHbits.ANS10 = 0;
  4198  068F  1683               	bsf	3,5	;RP0=1, select bank3
  4199  0690  1703               	bsf	3,6	;RP1=1, select bank3
  4200  0691  1109               	bcf	9,2	;volatile
  4201                           
  4202                           ;do_am.c: 73: (TRISAbits.TRISA4 = 0);
  4203  0692  1683               	bsf	3,5	;RP0=1, select bank1
  4204  0693  1303               	bcf	3,6	;RP1=0, select bank1
  4205  0694  1205               	bcf	5,4	;volatile
  4206                           
  4207                           ;do_am.c: 75: (TRISAbits.TRISA5 = 0);
  4208  0695  1285               	bcf	5,5	;volatile
  4209                           
  4210                           ;do_am.c: 76: ANSELbits.ANS4 = 0;
  4211  0696  1683               	bsf	3,5	;RP0=1, select bank3
  4212  0697  1703               	bsf	3,6	;RP1=1, select bank3
  4213  0698  1208               	bcf	8,4	;volatile
  4214                           
  4215                           ;do_am.c: 78: (TRISAbits.TRISA6 = 0);
  4216  0699  1683               	bsf	3,5	;RP0=1, select bank1
  4217  069A  1303               	bcf	3,6	;RP1=0, select bank1
  4218  069B  1305               	bcf	5,6	;volatile
  4219                           
  4220                           ;do_am.c: 80: (TRISAbits.TRISA7 = 0);
  4221  069C  1385               	bcf	5,7	;volatile
  4222                           
  4223                           ;do_am.c: 82: RB1 = 1;
  4224  069D  1283               	bcf	3,5	;RP0=0, select bank0
  4225  069E  1303               	bcf	3,6	;RP1=0, select bank0
  4226  069F  1486               	bsf	6,1	;volatile
  4227                           
  4228                           ;do_am.c: 85: (TRISBbits.TRISB4 = 1);
  4229  06A0  1683               	bsf	3,5	;RP0=1, select bank1
  4230  06A1  1303               	bcf	3,6	;RP1=0, select bank1
  4231  06A2  1606               	bsf	6,4	;volatile
  4232                           
  4233                           ;do_am.c: 86: ANSELHbits.ANS11 = 0;
  4234  06A3  1683               	bsf	3,5	;RP0=1, select bank3
  4235  06A4  1703               	bsf	3,6	;RP1=1, select bank3
  4236  06A5  1189               	bcf	9,3	;volatile
  4237                           
  4238                           ;do_am.c: 88: (TRISBbits.TRISB6 = 1);
  4239  06A6  1683               	bsf	3,5	;RP0=1, select bank1
  4240  06A7  1303               	bcf	3,6	;RP1=0, select bank1
  4241  06A8  1706               	bsf	6,6	;volatile
  4242                           
  4243                           ;do_am.c: 90: (TRISBbits.TRISB5 = 1);
  4244  06A9  1686               	bsf	6,5	;volatile
  4245                           
  4246                           ;do_am.c: 91: ANSELHbits.ANS13 = 0;
  4247  06AA  1683               	bsf	3,5	;RP0=1, select bank3
  4248  06AB  1703               	bsf	3,6	;RP1=1, select bank3
  4249  06AC  1289               	bcf	9,5	;volatile
  4250                           
  4251                           ;do_am.c: 93: (TRISBbits.TRISB7 = 1);
  4252  06AD  1683               	bsf	3,5	;RP0=1, select bank1
  4253  06AE  1303               	bcf	3,6	;RP1=0, select bank1
  4254  06AF  1786               	bsf	6,7	;volatile
  4255  06B0  0008               	return
  4256  06B1                     __end_of_IOInit:	
  4257                           
  4258                           	psect	text19
  4259  0F74                     __ptext19:	
  4260 ;; *************** function _ConnInit *****************
  4261 ;; Defined at:
  4262 ;;		line 38 in file "do_am.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;		None
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;		None
  4267 ;; Return value:  Size  Location     Type
  4268 ;;                  1    wreg      void 
  4269 ;; Registers used:
  4270 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4276 ;;      Params:         0       0       0       0       0
  4277 ;;      Locals:         0       0       0       0       0
  4278 ;;      Temps:          0       1       0       0       0
  4279 ;;      Totals:         0       1       0       0       0
  4280 ;;Total ram usage:        1 bytes
  4281 ;; Hardware stack levels used:    1
  4282 ;; Hardware stack levels required when called:    5
  4283 ;; This function calls:
  4284 ;;		_LoadMenuItem
  4285 ;; This function is called by:
  4286 ;;		_main
  4287 ;; This function uses a non-reentrant model
  4288 ;;
  4289                           
  4290                           
  4291                           ;psect for function _ConnInit
  4292  0F74                     _ConnInit:	
  4293                           
  4294                           ;do_am.c: 40: server_conn.from = LoadMenuItem(0);
  4295                           
  4296                           ;incstack = 0
  4297                           ; Regs used in _ConnInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4298  0F74  3000               	movlw	0
  4299  0F75  120A  158A  27B5   	fcall	_LoadMenuItem
  4300  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  4301  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  4302  0F7A  00A5               	movwf	??_ConnInit
  4303  0F7B  0825               	movf	??_ConnInit,w
  4304  0F7C  00DF               	movwf	_server_conn
  4305                           
  4306                           ;do_am.c: 41: server_conn.to = 8;
  4307  0F7D  3008               	movlw	8
  4308  0F7E  00A5               	movwf	??_ConnInit
  4309  0F7F  0825               	movf	??_ConnInit,w
  4310  0F80  00E0               	movwf	_server_conn+1
  4311                           
  4312                           ;do_am.c: 42: server_conn.msgid = 0;
  4313  0F81  01E1               	clrf	_server_conn+2
  4314                           
  4315                           ;do_am.c: 43: server_conn.available = 0;
  4316  0F82  01E2               	clrf	_server_conn+3
  4317  0F83  0008               	return
  4318  0F84                     __end_of_ConnInit:	
  4319                           
  4320                           	psect	text20
  4321  0FB5                     __ptext20:	
  4322 ;; *************** function _LoadMenuItem *****************
  4323 ;; Defined at:
  4324 ;;		line 36 in file "menu.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  item            1    wreg     unsigned char 
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;  item            1    4[BANK0 ] unsigned char 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  1    wreg      unsigned char 
  4331 ;; Registers used:
  4332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4338 ;;      Params:         0       0       0       0       0
  4339 ;;      Locals:         0       1       0       0       0
  4340 ;;      Temps:          0       2       0       0       0
  4341 ;;      Totals:         0       3       0       0       0
  4342 ;;Total ram usage:        3 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    4
  4345 ;; This function calls:
  4346 ;;		_eeprom_read
  4347 ;; This function is called by:
  4348 ;;		_ConnInit
  4349 ;;		_MenuInit
  4350 ;; This function uses a non-reentrant model
  4351 ;;
  4352                           
  4353                           
  4354                           ;psect for function _LoadMenuItem
  4355  0FB5                     _LoadMenuItem:	
  4356                           
  4357                           ;incstack = 0
  4358                           ; Regs used in _LoadMenuItem: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4359                           ;LoadMenuItem@item stored from wreg
  4360  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  4361  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  4362  0FB7  00A4               	movwf	LoadMenuItem@item
  4363                           
  4364                           ;menu.c: 38: g_menu.items[item].value = eeprom_read(item);
  4365  0FB8  0824               	movf	LoadMenuItem@item,w
  4366  0FB9  120A  158A  27DC   	fcall	_eeprom_read
  4367  0FBC  1283               	bcf	3,5	;RP0=0, select bank0
  4368  0FBD  1303               	bcf	3,6	;RP1=0, select bank0
  4369  0FBE  00A2               	movwf	??_LoadMenuItem
  4370  0FBF  0824               	movf	LoadMenuItem@item,w
  4371  0FC0  00A3               	movwf	??_LoadMenuItem+1
  4372  0FC1  0723               	addwf	??_LoadMenuItem+1,w
  4373  0FC2  3E52               	addlw	(low (_g_menu| 0))& (0+255)
  4374  0FC3  0084               	movwf	4
  4375  0FC4  0822               	movf	??_LoadMenuItem,w
  4376  0FC5  1383               	bcf	3,7	;select IRP bank0
  4377  0FC6  0080               	movwf	0
  4378  0FC7  0008               	return
  4379  0FC8                     __end_of_LoadMenuItem:	
  4380                           
  4381                           	psect	text21
  4382  0FDC                     __ptext21:	
  4383 ;; *************** function _eeprom_read *****************
  4384 ;; Defined at:
  4385 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eeread.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;  addr            1    wreg     unsigned char 
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;  addr            1    1[BANK0 ] unsigned char 
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  1    wreg      unsigned char 
  4392 ;; Registers used:
  4393 ;;		wreg, status,2, status,0
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4399 ;;      Params:         0       0       0       0       0
  4400 ;;      Locals:         0       1       0       0       0
  4401 ;;      Temps:          0       1       0       0       0
  4402 ;;      Totals:         0       2       0       0       0
  4403 ;;Total ram usage:        2 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    3
  4406 ;; This function calls:
  4407 ;;		Nothing
  4408 ;; This function is called by:
  4409 ;;		_LoadMenuItem
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           
  4414                           ;psect for function _eeprom_read
  4415  0FDC                     _eeprom_read:	
  4416                           
  4417                           ;incstack = 0
  4418                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4419                           ;eeprom_read@addr stored from wreg
  4420  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  4421  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  4422  0FDE  00A1               	movwf	eeprom_read@addr
  4423  0FDF  2FE2               	goto	l438
  4424  0FE0                     u1391:	
  4425  0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  4426  0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  4427  0FE2                     l438:	
  4428  0FE2  0064               	clrwdt	;# 
  4429  0FE3  1683               	bsf	3,5	;RP0=1, select bank3
  4430  0FE4  1703               	bsf	3,6	;RP1=1, select bank3
  4431  0FE5  188C               	btfsc	12,1	;volsfr
  4432  0FE6  2FE0               	goto	u1391
  4433  0FE7  1283               	bcf	3,5	;RP0=0, select bank0
  4434  0FE8  1303               	bcf	3,6	;RP1=0, select bank0
  4435  0FE9  0821               	movf	eeprom_read@addr,w
  4436  0FEA  1283               	bcf	3,5	;RP0=0, select bank2
  4437  0FEB  1703               	bsf	3,6	;RP1=1, select bank2
  4438  0FEC  008D               	movwf	13	;volatile
  4439  0FED  303F               	movlw	63
  4440  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  4441  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  4442  0FF0  00A0               	movwf	??_eeprom_read
  4443  0FF1  0820               	movf	??_eeprom_read,w
  4444  0FF2  1683               	bsf	3,5	;RP0=1, select bank3
  4445  0FF3  1703               	bsf	3,6	;RP1=1, select bank3
  4446  0FF4  058C               	andwf	12,f	;volsfr
  4447  0FF5  140C               	bsf	12,0	;volsfr
  4448  0FF6  1003               	clrc
  4449  0FF7  180C               	btfsc	12,0	;volsfr
  4450  0FF8  1403               	setc
  4451  0FF9  3000               	movlw	0
  4452  0FFA  1803               	skipnc
  4453  0FFB  3001               	movlw	1
  4454  0FFC  1283               	bcf	3,5	;RP0=0, select bank2
  4455  0FFD  1703               	bsf	3,6	;RP1=1, select bank2
  4456  0FFE  080C               	movf	12,w	;volatile
  4457  0FFF  0008               	return
  4458  1000                     __end_of_eeprom_read:	
  4459                           
  4460                           	psect	text22
  4461  0FC8                     __ptext22:	
  4462 ;; *************** function _ADCInit *****************
  4463 ;; Defined at:
  4464 ;;		line 7 in file "adc_pic16.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;		None
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;		None
  4469 ;; Return value:  Size  Location     Type
  4470 ;;                  1    wreg      void 
  4471 ;; Registers used:
  4472 ;;		wreg, status,2, status,0
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4478 ;;      Params:         0       0       0       0       0
  4479 ;;      Locals:         0       0       0       0       0
  4480 ;;      Temps:          0       0       0       0       0
  4481 ;;      Totals:         0       0       0       0       0
  4482 ;;Total ram usage:        0 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; Hardware stack levels required when called:    3
  4485 ;; This function calls:
  4486 ;;		Nothing
  4487 ;; This function is called by:
  4488 ;;		_main
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           
  4493                           ;psect for function _ADCInit
  4494  0FC8                     _ADCInit:	
  4495                           
  4496                           ;adc_pic16.c: 10: TRISBbits.TRISB5 = 1;
  4497                           
  4498                           ;incstack = 0
  4499                           ; Regs used in _ADCInit: [wreg+status,2+status,0]
  4500  0FC8  1683               	bsf	3,5	;RP0=1, select bank1
  4501  0FC9  1303               	bcf	3,6	;RP1=0, select bank1
  4502  0FCA  1686               	bsf	6,5	;volatile
  4503                           
  4504                           ;adc_pic16.c: 11: ANSELHbits.ANS13 = 1;
  4505  0FCB  1683               	bsf	3,5	;RP0=1, select bank3
  4506  0FCC  1703               	bsf	3,6	;RP1=1, select bank3
  4507  0FCD  1689               	bsf	9,5	;volatile
  4508                           
  4509                           ;adc_pic16.c: 17: ADCON1bits.VCFG0 = 0;
  4510  0FCE  1683               	bsf	3,5	;RP0=1, select bank1
  4511  0FCF  1303               	bcf	3,6	;RP1=0, select bank1
  4512  0FD0  121F               	bcf	31,4	;volatile
  4513                           
  4514                           ;adc_pic16.c: 19: ADCON0bits.ADCS = 0b11;
  4515  0FD1  30C0               	movlw	192
  4516  0FD2  1283               	bcf	3,5	;RP0=0, select bank0
  4517  0FD3  1303               	bcf	3,6	;RP1=0, select bank0
  4518  0FD4  049F               	iorwf	31,f	;volatile
  4519                           
  4520                           ;adc_pic16.c: 22: ADCON1bits.ADFM = 1;
  4521  0FD5  1683               	bsf	3,5	;RP0=1, select bank1
  4522  0FD6  1303               	bcf	3,6	;RP1=0, select bank1
  4523  0FD7  179F               	bsf	31,7	;volatile
  4524                           
  4525                           ;adc_pic16.c: 24: ADCON0bits.ADON = 1;
  4526  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  4527  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  4528  0FDA  141F               	bsf	31,0	;volatile
  4529  0FDB  0008               	return
  4530  0FDC                     __end_of_ADCInit:	
  4531                           
  4532                           	psect	text23
  4533  076D                     __ptext23:	
  4534 ;; *************** function _ISR *****************
  4535 ;; Defined at:
  4536 ;;		line 97 in file "do_am.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;		None
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;  byte            1   11[COMMON] PTR struct .
  4541 ;;		 -> ISR@value(1), 
  4542 ;;  value           1   10[COMMON] unsigned char 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  1    wreg      void 
  4545 ;; Registers used:
  4546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4552 ;;      Params:         0       0       0       0       0
  4553 ;;      Locals:         2       0       0       0       0
  4554 ;;      Temps:          5       0       0       0       0
  4555 ;;      Totals:         7       0       0       0       0
  4556 ;;Total ram usage:        7 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    2
  4559 ;; This function calls:
  4560 ;;		_receive_input
  4561 ;; This function is called by:
  4562 ;;		Interrupt level 1
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           
  4567                           ;psect for function _ISR
  4568  076D                     _ISR:	
  4569                           
  4570                           ;do_am.c: 99: if(INTCONbits.INTF == 1)
  4571  076D  1C8B               	btfss	11,1	;volatile
  4572  076E  2F95               	goto	i1l254
  4573                           
  4574                           ;do_am.c: 100: {
  4575                           ;do_am.c: 101: { uint8_t value; { value = 0; BITbits_t *byte = (BITbits_t *)&value; byte
      +                          ->B0 = RA0; byte->B1 = RA1; byte->B2 = RA2; byte->B3 = RA3; }; receive_input(value); };
  4576  076F  01FA               	clrf	ISR@value
  4577  0770  307A               	movlw	(low (ISR@value| 0))& (0+255)
  4578  0771  00F5               	movwf	??_ISR
  4579  0772  0875               	movf	??_ISR,w
  4580  0773  00FB               	movwf	ISR@byte
  4581  0774  087B               	movf	ISR@byte,w
  4582  0775  0084               	movwf	4
  4583  0776  1000               	bcf	0,0
  4584  0777  1805               	btfsc	5,0	;volatile
  4585  0778  1400               	bsf	0,0
  4586  0779  087B               	movf	ISR@byte,w
  4587  077A  0084               	movwf	4
  4588  077B  1080               	bcf	0,1
  4589  077C  1283               	bcf	3,5	;RP0=0, select bank0
  4590  077D  1303               	bcf	3,6	;RP1=0, select bank0
  4591  077E  1885               	btfsc	5,1	;volatile
  4592  077F  1480               	bsf	0,1
  4593  0780  087B               	movf	ISR@byte,w
  4594  0781  0084               	movwf	4
  4595  0782  1100               	bcf	0,2
  4596  0783  1283               	bcf	3,5	;RP0=0, select bank0
  4597  0784  1303               	bcf	3,6	;RP1=0, select bank0
  4598  0785  1905               	btfsc	5,2	;volatile
  4599  0786  1500               	bsf	0,2
  4600  0787  087B               	movf	ISR@byte,w
  4601  0788  0084               	movwf	4
  4602  0789  1180               	bcf	0,3
  4603  078A  1283               	bcf	3,5	;RP0=0, select bank0
  4604  078B  1303               	bcf	3,6	;RP1=0, select bank0
  4605  078C  1985               	btfsc	5,3	;volatile
  4606  078D  1580               	bsf	0,3
  4607  078E  087A               	movf	ISR@value,w
  4608  078F  120A  118A  23C0  120A  118A  	fcall	_receive_input
  4609                           
  4610                           ;do_am.c: 102: INTCONbits.INTF = 0;
  4611  0794  108B               	bcf	11,1	;volatile
  4612  0795                     i1l254:	
  4613  0795  0879               	movf	??_ISR+4,w
  4614  0796  1283               	bcf	3,5	;RP0=0, select bank0
  4615  0797  1303               	bcf	3,6	;RP1=0, select bank0
  4616  0798  00FF               	movwf	127
  4617  0799  0878               	movf	??_ISR+3,w
  4618  079A  008A               	movwf	10
  4619  079B  0877               	movf	??_ISR+2,w
  4620  079C  0084               	movwf	4
  4621  079D  0E76               	swapf	(??_ISR+1)^(0+-128),w
  4622  079E  0083               	movwf	3
  4623  079F  0EFE               	swapf	126,f
  4624  07A0  0E7E               	swapf	126,w
  4625  07A1  0009               	retfie
  4626  07A2                     __end_of_ISR:	
  4627                           
  4628                           	psect	intentry
  4629  0004                     __pintentry:	
  4630                           ;incstack = 0
  4631                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4632                           
  4633  0004                     interrupt_function:	
  4634  007E                     saved_w	set	btemp
  4635  0004  00FE               	movwf	btemp
  4636  0005  0E03               	swapf	3,w
  4637  0006  00F6               	movwf	??_ISR+1
  4638  0007  0804               	movf	4,w
  4639  0008  00F7               	movwf	??_ISR+2
  4640  0009  080A               	movf	10,w
  4641  000A  00F8               	movwf	??_ISR+3
  4642  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4643  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4644  000D  087F               	movf	btemp+1,w
  4645  000E  00F9               	movwf	??_ISR+4
  4646  000F  120A  118A  2F6D   	ljmp	_ISR
  4647                           
  4648                           	psect	text24
  4649  03C0                     __ptext24:	
  4650 ;; *************** function _receive_input *****************
  4651 ;; Defined at:
  4652 ;;		line 41 in file "circle_buffer.h"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;  value           1    wreg     unsigned char 
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;  value           1    2[COMMON] unsigned char 
  4657 ;;  byte2           1    4[COMMON] PTR struct .
  4658 ;;		 -> receive_input@value(1), 
  4659 ;;  byte1           1    3[COMMON] PTR struct .
  4660 ;;		 -> buffer_rcv(32), 
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  1    wreg      void 
  4663 ;; Registers used:
  4664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4670 ;;      Params:         0       0       0       0       0
  4671 ;;      Locals:         3       0       0       0       0
  4672 ;;      Temps:          1       0       0       0       0
  4673 ;;      Totals:         4       0       0       0       0
  4674 ;;Total ram usage:        4 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    1
  4677 ;; This function calls:
  4678 ;;		i1_get_next_index
  4679 ;; This function is called by:
  4680 ;;		_ISR
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           
  4685                           ;psect for function _receive_input
  4686  03C0                     _receive_input:	
  4687                           
  4688                           ;incstack = 0
  4689                           ; Regs used in _receive_input: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4690                           ;receive_input@value stored from wreg
  4691  03C0  00F2               	movwf	receive_input@value
  4692                           
  4693                           ;circle_buffer.h: 43: { BITbits_t *byte1 = (BITbits_t *)&buffer_rcv[end_index_rcv]; BITb
      +                          its_t *byte2 = (BITbits_t *)&value; if(low_half_rcv == 1) { byte1->B0 = byte2->B0; byte1
      +                          ->B1 = byte2->B1; byte1->B2 = byte2->B2; byte1->B3 = byte2->B3; } else { byte1->B4 = byt
      +                          e2->B0; 
  4694  03C1  087C               	movf	_end_index_rcv,w
  4695  03C2  3EC3               	addlw	(low (_buffer_rcv| 0))& (0+255)
  4696  03C3  00F1               	movwf	??_receive_input
  4697  03C4  0871               	movf	??_receive_input,w
  4698  03C5  00F3               	movwf	receive_input@byte1
  4699  03C6  3072               	movlw	(low (receive_input@value| 0))& (0+255)
  4700  03C7  00F1               	movwf	??_receive_input
  4701  03C8  0871               	movf	??_receive_input,w
  4702  03C9  00F4               	movwf	receive_input@byte2
  4703  03CA  037D               	decf	_low_half_rcv,w
  4704  03CB  1D03               	btfss	3,2
  4705  03CC  2BFA               	goto	i1l2212
  4706  03CD  0874               	movf	receive_input@byte2,w
  4707  03CE  0084               	movwf	4
  4708  03CF  1003               	clrc
  4709  03D0  1800               	btfsc	0,0
  4710  03D1  1403               	setc
  4711  03D2  0873               	movf	receive_input@byte1,w
  4712  03D3  0084               	movwf	4
  4713  03D4  1383               	bcf	3,7	;select IRP bank0
  4714  03D5  1000               	bcf	0,0
  4715  03D6  1803               	btfsc	3,0
  4716  03D7  1400               	bsf	0,0
  4717  03D8  0874               	movf	receive_input@byte2,w
  4718  03D9  0084               	movwf	4
  4719  03DA  1003               	clrc
  4720  03DB  1880               	btfsc	0,1
  4721  03DC  1403               	setc
  4722  03DD  0873               	movf	receive_input@byte1,w
  4723  03DE  0084               	movwf	4
  4724  03DF  1383               	bcf	3,7	;select IRP bank0
  4725  03E0  1080               	bcf	0,1
  4726  03E1  1803               	btfsc	3,0
  4727  03E2  1480               	bsf	0,1
  4728  03E3  0874               	movf	receive_input@byte2,w
  4729  03E4  0084               	movwf	4
  4730  03E5  1003               	clrc
  4731  03E6  1900               	btfsc	0,2
  4732  03E7  1403               	setc
  4733  03E8  0873               	movf	receive_input@byte1,w
  4734  03E9  0084               	movwf	4
  4735  03EA  1383               	bcf	3,7	;select IRP bank0
  4736  03EB  1100               	bcf	0,2
  4737  03EC  1803               	btfsc	3,0
  4738  03ED  1500               	bsf	0,2
  4739  03EE  0874               	movf	receive_input@byte2,w
  4740  03EF  0084               	movwf	4
  4741  03F0  1003               	clrc
  4742  03F1  1980               	btfsc	0,3
  4743  03F2  1403               	setc
  4744  03F3  0873               	movf	receive_input@byte1,w
  4745  03F4  0084               	movwf	4
  4746  03F5  1383               	bcf	3,7	;select IRP bank0
  4747  03F6  1180               	bcf	0,3
  4748  03F7  1803               	btfsc	3,0
  4749  03F8  1580               	bsf	0,3
  4750  03F9  2C26               	goto	i1l2214
  4751  03FA                     i1l2212:	
  4752  03FA  0874               	movf	receive_input@byte2,w
  4753  03FB  0084               	movwf	4
  4754  03FC  1003               	clrc
  4755  03FD  1800               	btfsc	0,0
  4756  03FE  1403               	setc
  4757  03FF  0873               	movf	receive_input@byte1,w
  4758  0400  0084               	movwf	4
  4759  0401  1383               	bcf	3,7	;select IRP bank0
  4760  0402  1200               	bcf	0,4
  4761  0403  1803               	btfsc	3,0
  4762  0404  1600               	bsf	0,4
  4763  0405  0874               	movf	receive_input@byte2,w
  4764  0406  0084               	movwf	4
  4765  0407  1003               	clrc
  4766  0408  1880               	btfsc	0,1
  4767  0409  1403               	setc
  4768  040A  0873               	movf	receive_input@byte1,w
  4769  040B  0084               	movwf	4
  4770  040C  1383               	bcf	3,7	;select IRP bank0
  4771  040D  1280               	bcf	0,5
  4772  040E  1803               	btfsc	3,0
  4773  040F  1680               	bsf	0,5
  4774  0410  0874               	movf	receive_input@byte2,w
  4775  0411  0084               	movwf	4
  4776  0412  1003               	clrc
  4777  0413  1900               	btfsc	0,2
  4778  0414  1403               	setc
  4779  0415  0873               	movf	receive_input@byte1,w
  4780  0416  0084               	movwf	4
  4781  0417  1383               	bcf	3,7	;select IRP bank0
  4782  0418  1300               	bcf	0,6
  4783  0419  1803               	btfsc	3,0
  4784  041A  1700               	bsf	0,6
  4785  041B  0874               	movf	receive_input@byte2,w
  4786  041C  0084               	movwf	4
  4787  041D  1003               	clrc
  4788  041E  1980               	btfsc	0,3
  4789  041F  1403               	setc
  4790  0420  0873               	movf	receive_input@byte1,w
  4791  0421  0084               	movwf	4
  4792  0422  1383               	bcf	3,7	;select IRP bank0
  4793  0423  1380               	bcf	0,7
  4794  0424  1803               	btfsc	3,0
  4795  0425  1780               	bsf	0,7
  4796  0426                     i1l2214:	
  4797                           
  4798                           ;circle_buffer.h: 44: if(low_half_rcv == 1)
  4799  0426  037D               	decf	_low_half_rcv,w
  4800  0427  1D03               	btfss	3,2
  4801  0428  2C2B               	goto	i1l136
  4802                           
  4803                           ;circle_buffer.h: 45: {
  4804                           ;circle_buffer.h: 46: low_half_rcv = 0;
  4805  0429  01FD               	clrf	_low_half_rcv
  4806                           
  4807                           ;circle_buffer.h: 47: }
  4808  042A  0008               	return
  4809  042B                     i1l136:	
  4810                           
  4811                           ;circle_buffer.h: 48: else
  4812                           ;circle_buffer.h: 49: {
  4813                           ;circle_buffer.h: 50: low_half_rcv = 1;
  4814  042B  01FD               	clrf	_low_half_rcv
  4815  042C  0AFD               	incf	_low_half_rcv,f
  4816                           
  4817                           ;circle_buffer.h: 51: end_index_rcv = get_next_index(end_index_rcv);
  4818  042D  087C               	movf	_end_index_rcv,w
  4819  042E  120A  158A  2745   	fcall	i1_get_next_index
  4820  0431  00F1               	movwf	??_receive_input
  4821  0432  0871               	movf	??_receive_input,w
  4822  0433  00FC               	movwf	_end_index_rcv
  4823  0434  0008               	return
  4824  0435                     __end_of_receive_input:	
  4825                           
  4826                           	psect	text25
  4827  0F45                     __ptext25:	
  4828 ;; *************** function i1_get_next_index *****************
  4829 ;; Defined at:
  4830 ;;		line 30 in file "circle_buffer.h"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;  index           1    wreg     unsigned char 
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;  index           1    0[COMMON] unsigned char 
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  1    wreg      unsigned char 
  4837 ;; Registers used:
  4838 ;;		wreg, status,2, status,0
  4839 ;; Tracked objects:
  4840 ;;		On entry : 0/0
  4841 ;;		On exit  : 0/0
  4842 ;;		Unchanged: 0/0
  4843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4844 ;;      Params:         0       0       0       0       0
  4845 ;;      Locals:         1       0       0       0       0
  4846 ;;      Temps:          0       0       0       0       0
  4847 ;;      Totals:         1       0       0       0       0
  4848 ;;Total ram usage:        1 bytes
  4849 ;; Hardware stack levels used:    1
  4850 ;; This function calls:
  4851 ;;		Nothing
  4852 ;; This function is called by:
  4853 ;;		_receive_input
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           
  4858                           ;psect for function i1_get_next_index
  4859  0F45                     i1_get_next_index:	
  4860                           
  4861                           ;incstack = 0
  4862                           ; Regs used in i1_get_next_index: [wreg+status,2+status,0]
  4863                           ;i1get_next_index@index stored from wreg
  4864  0F45  00F0               	movwf	i1get_next_index@index
  4865                           
  4866                           ;circle_buffer.h: 32: if(index == 32 - 1)
  4867  0F46  301F               	movlw	31
  4868  0F47  0670               	xorwf	i1get_next_index@index,w
  4869  0F48  1D03               	btfss	3,2
  4870  0F49  2F4C               	goto	i1l2184
  4871                           
  4872                           ;circle_buffer.h: 33: {
  4873                           ;circle_buffer.h: 34: return 0;
  4874  0F4A  3000               	movlw	0
  4875                           
  4876                           ;circle_buffer.h: 35: }
  4877  0F4B  0008               	return
  4878  0F4C                     i1l2184:	
  4879                           
  4880                           ;circle_buffer.h: 36: else
  4881                           ;circle_buffer.h: 37: {
  4882                           ;circle_buffer.h: 38: return (index + 1);
  4883  0F4C  0870               	movf	i1get_next_index@index,w
  4884  0F4D  3E01               	addlw	1
  4885  0F4E  0008               	return
  4886  0F4F                     __end_ofi1_get_next_index:	
  4887  007E                     btemp	set	126	;btemp
  4888  007E                     wtemp	set	126
  4889  007E                     wtemp0	set	126
  4890  0080                     wtemp1	set	128
  4891  0082                     wtemp2	set	130
  4892  0084                     wtemp3	set	132
  4893  0086                     wtemp4	set	134
  4894  0088                     wtemp5	set	136
  4895  007F                     wtemp6	set	127
  4896  007E                     ttemp	set	126
  4897  007E                     ttemp0	set	126
  4898  0081                     ttemp1	set	129
  4899  0084                     ttemp2	set	132
  4900  0087                     ttemp3	set	135
  4901  007F                     ttemp4	set	127
  4902  007E                     ltemp	set	126
  4903  007E                     ltemp0	set	126
  4904  0082                     ltemp1	set	130
  4905  0086                     ltemp2	set	134
  4906  0080                     ltemp3	set	128


Data Sizes:
    Strings     54
    Constant    18
    Data        19
    BSS         105
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     50      77
    BANK1            80     35      75
    BANK3            96      0      55
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_13(CODE[14]), STR_11(CODE[20]), STR_9(CODE[15]), STR_7(CODE[12]), 
		 -> STR_5(CODE[9]), STR_3(CODE[6]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> dump_conn@s(BANK1[32]), dump_msg@s(BANK1[32]), sdebug(BANK3[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S785$name	PTR unsigned char  size(1) Largest target is 5
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 

    g_menu.items.name	PTR unsigned char  size(1) Largest target is 5
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[5]), 

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_19(CODE[1]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[1]), dump_conn@s(BANK1[32]), STR_12(CODE[1]), 
		 -> dump_msg@s(BANK1[32]), STR_10(CODE[1]), STR_8(CODE[1]), STR_6(CODE[1]), 
		 -> STR_4(CODE[1]), STR_2(CODE[1]), sdebug(BANK3[32]), 

    ISR@byte	PTR struct . size(1) Largest target is 1
		 -> ISR@value(COMMON[1]), 

    dump_conn@pconn	PTR struct . size(1) Largest target is 4
		 -> server_conn(BANK0[4]), 

    get_msg@pmsg	PTR struct . size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    get_msg@pstr	PTR unsigned char  size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    pstr_rcv	PTR unsigned char  size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    pmsg_rcv	PTR struct . size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    dump_msg@pmsg	PTR struct . size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    sp__memcpy	PTR void  size(1) Largest target is 0

    get_msg_index@end_index	PTR unsigned char  size(1) Largest target is 1
		 -> get_msg@end_index(BANK0[1]), 

    get_msg_index@start_index	PTR unsigned char  size(1) Largest target is 1
		 -> get_msg@start_index(BANK0[1]), 

    receive_input@byte2	PTR struct . size(1) Largest target is 1
		 -> receive_input@value(COMMON[1]), 

    receive_input@byte1	PTR struct . size(1) Largest target is 32
		 -> buffer_rcv(BANK1[32]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_receive_input
    _receive_input->i1_get_next_index

Critical Paths under _main in BANK0

    _main->_dump_msg
    _get_msg->_get_msg_index
    _get_msg_index->_get_plus_index
    _dump_msg->_sprintf
    _dump_conn->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCDWriteString->_LCDByte
    _LCDGotoXY->_LCDByte
    _MenuInit->_LoadMenuItem
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop
    _ConnInit->_LoadMenuItem
    _LoadMenuItem->_eeprom_read

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_dump_conn
    _main->_dump_msg

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   24864
                                             49 BANK0      1     1      0
                            _ADCInit
                           _ConnInit
                             _IOInit
                            _LCDByte
                            _LCDInit
                           _MenuInit
                          _dump_conn
                           _dump_msg
                            _get_msg
 ---------------------------------------------------------------------------------
 (1) _get_msg                                              8     8      0    2314
                                              8 BANK0      8     8      0
                       _get_distance
                      _get_msg_index
                     _get_next_index
 ---------------------------------------------------------------------------------
 (2) _get_msg_index                                        5     4      1    1658
                                              3 BANK0      5     4      1
                       _get_distance
                    _get_minus_index
                     _get_next_index
                     _get_plus_index
 ---------------------------------------------------------------------------------
 (3) _get_plus_index                                       3     2      1     580
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _get_next_index                                       1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _get_minus_index                                      2     1      1     196
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (3) _get_distance                                         2     1      1     324
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _dump_msg                                            46    46      0    9444
                                             38 BANK0     11    11      0
                                              0 BANK1     35    35      0
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _dump_conn                                           44    44      0    9400
                                             38 BANK0      9     9      0
                                              0 BANK1     35    35      0
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             32    17     15    1719
                                             14 BANK0     24     9     15
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteString                                       5     3      2    2913
                                             12 BANK0      5     3      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _LCDGotoXY                                            3     2      1    2841
                                             12 BANK0      3     2      1
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _MenuInit                                             1     1      0      66
                                              5 BANK0      1     1      0
                       _LoadMenuItem
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              4     4      0    1890
                                             12 BANK0      4     4      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (3) _LCDByte                                              7     6      1    1683
                                              5 BANK0      7     6      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (4) _LCDBusyLoop                                          5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _IOInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConnInit                                             1     1      0      66
                                              5 BANK0      1     1      0
                       _LoadMenuItem
 ---------------------------------------------------------------------------------
 (2) _LoadMenuItem                                         3     3      0      66
                                              2 BANK0      3     3      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  7     7      0     566
                                              5 COMMON     7     7      0
                      _receive_input
 ---------------------------------------------------------------------------------
 (6) _receive_input                                        4     4      0     428
                                              1 COMMON     4     4      0
                   i1_get_next_index
 ---------------------------------------------------------------------------------
 (7) i1_get_next_index                                     1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _ConnInit
     _LoadMenuItem
       _eeprom_read
   _IOInit
   _LCDByte
     _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _MenuInit
     _LoadMenuItem
       _eeprom_read
   _dump_conn
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _dump_msg
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _get_msg
     _get_distance
     _get_msg_index
       _get_distance
       _get_minus_index
       _get_next_index
       _get_plus_index
     _get_next_index

 _ISR (ROOT)
   _receive_input
     i1_get_next_index

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      37       9       57.3%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     23      4B       7       93.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     32      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      DD      12        0.0%
ABS                  0      0      DD       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Jul 05 22:06:45 2016

             ?_LCDBusyLoop 0070                 __CFG_CP$ON 0000                          pc 0002  
           ?_get_msg_index 0023           get_msg@end_index 002E                         _RD 0C60  
              __CFG_CPD$ON 0000                         _WR 0C61                         fsr 0004  
          ?_get_next_index 0070                __CFG_LVP$ON 0000                        l331 07F5  
                      l332 07DE                        l282 05D8                        l283 05D9  
                      l438 0FE2                        _GIE 005F                        _RA0 0028  
                      _RA1 0029                        _RA2 002A                        _RB1 0031  
                      _RA3 002B                        _RA4 002C                        _RC1 0039  
                      _RA5 002D                        _RC2 003A                        _RA6 002E  
                      _RC3 003B                        _RA7 002F                        _ISR 076D  
                      fsr0 0004            __end_of_ADCInit 0FDC                        indf 0000  
             __CFG_IESO$ON 0000           ?_get_minus_index 0020                get_msg@temp 002F  
              get_msg@pmsg 002B                get_msg@pstr 002A            __end_of_LCDByte 0616  
          __end_of_LCDInit 049D                       ?_ISR 0070                LCDByte@temp 002B  
                     l2000 07B8                       l2100 053C                       l2004 07C6  
                     l2020 01BB                       l2008 07D1                       l2114 0508  
                     l2042 01EE                       l2026 01D1                       l2116 0565  
                     l2108 054A                       l2036 01E8                       l2062 0222  
                     l2054 021E                       l2134 007B                       l2080 07E7  
                     l2048 020F                       l2064 019B                       l2232 02F8  
                     l2160 0177                       l2128 0068                       l2074 07E0  
                     l2066 0265                       l2170 0193                       l2146 0100  
                     l2076 07E2                       l2156 016E                       l2238 030F  
                     l2262 0660                       l2282 0395                       l2266 0662  
                     l2288 03AC                       l1852 04AB                       l1926 0F62  
                     l1934 0F72                       l2574 06DD                       l1944 0FA0  
                     l1956 0F90                       l1982 071F                       l1974 06FB  
            ?_LoadMenuItem 0070                       l1976 0709                       l1986 072A  
                     l1998 07AA               __CFG_WDTE$ON 0000                       u1315 05C5  
                     u1335 05E0                       u1415 06FE                       u1345 05FC  
                     u1505 07BE                       u1275 04B4                       u1435 070A  
                     u1515 07C7                       u1285 04C0                       u1445 0716  
                     u1391 0FE0                       u1295 04DA                       u1455 0720  
                     u1485 07AD                       u1565 0205                       u2537 043C  
                     _WREN 0C62             ??_get_distance 0021               __CFG_WRT$OFF 0000  
            __CFG_FCMEN$ON 0000                       _main 06B1                       _mode 0069  
       __size_of_LCDGotoXY 0026                       btemp 007E              __CFG_BOREN$ON 0000  
                     ltemp 007E            ?_get_plus_index 0020                       start 0012  
                     ttemp 007E                       wtemp 007E              __CFG_MCLRE$ON 0000  
                    ??_ISR 0075                      ?_main 0070                      _EEADR 010D  
                    STR_11 0589                      STR_12 05AF                      STR_13 059D  
                    STR_14 05AF                      STR_15 05AB                      STR_16 05B0  
                    STR_17 05B5                      STR_18 05BA                      _CARRY 0018  
             LCDInit@style 002E            __end_of___lwdiv 072F                      i1l136 042B  
                    i1l254 0795            __end_of___lwmod 07D6                      _PORTC 0007  
                    _TRISC 0087            __end_of_get_msg 0664            __end_of_dpowers 0581  
                    _count 005B             ??_LoadMenuItem 0022         get_minus_index@sub 0020  
                    pclath 000A                      ltemp0 007E                      ltemp1 0082  
                    ltemp2 0086                      ltemp3 0080                      ttemp0 007E  
                    ttemp1 0081                      ttemp2 0084                      ttemp3 0087  
                    ttemp4 007F                      status 0003                      wtemp0 007E  
                    wtemp1 0080                      wtemp2 0082                      wtemp3 0084  
                    wtemp4 0086                      wtemp5 0088                      wtemp6 007F  
          __end_of_sprintf 026C           __end_of_ConnInit 0F84            __initialization 0015  
          ??_get_msg_index 0024               __end_of_main 06F1           __end_of_MenuInit 076D  
                ??_ADCInit 0020                     ??_main 0051          __end_of_LCDGotoXY 07FC  
            LCDByte@isdata 0025                  ??_LCDByte 0026                  ??_LCDInit 002C  
                   _ADRESH 001E                     _ADRESL 009E                     _EEDATA 010C  
                   _EECON1 018C                     _EECON2 018D                     i1l2212 03FA  
                   i1l2214 0426                     i1l2184 0F4C                     _IOInit 0664  
         i1_get_next_index 0F45             __CFG_PWRTE$OFF 0000             _LCDWriteString 0505  
     __size_of_eeprom_read 0024                     _g_menu 0052                  ??___lwdiv 0024  
                ??___lwmod 002C           __end_of_dump_msg 0323       __size_of_LCDBusyLoop 0068  
                   _sdebug 0190       __end_of_get_distance 0F94                  ??_get_msg 0028  
             __pdataCOMMON 007D    get_distance@start_index 0021                     saved_w 007E  
        get_plus_index@add 0020                  ??_sprintf 003D    __end_of__initialization 004F  
          eeprom_read@addr 0021     __end_of_LCDWriteString 0567                  LCDByte@hn 0028  
                LCDByte@ln 0029             __pcstackCOMMON 0070           ??_get_next_index 0020  
             __pidataBANK0 0F4F               __pidataBANK1 0F3D       __end_of_LoadMenuItem 0FC8  
           _OPTION_REGbits 0081                  ?_ConnInit 0070           ??_get_plus_index 0021  
               __pbssBANK0 0052                 __pbssBANK1 00C3                 __pbssBANK3 0190  
                  ?_IOInit 0070                  ?_MenuInit 0070         __size_of_dump_conn 009D  
           get_msg_index@i 0027            ?_LCDWriteString 002C                    ISR@byte 007B  
               __pmaintext 06B1                 __pintentry 0004     __size_of_receive_input 0075  
                  _ADCInit 0FC8                    _LCDByte 05BF                    _LCDInit 0435  
       get_msg@start_index 002D                 _buffer_rcv 00C3                 ??_ConnInit 0025  
               __stringtab 0567               dump_msg@pmsg 00C2   __size_of_get_minus_index 0010  
               ??_MenuInit 0025                  ?_dump_msg 0070            __size_of_IOInit 004D  
    __size_of_get_distance 0010            _start_index_rcv 005E                    ___cgram 00E3  
                  ___lwdiv 06F1                    ___lwmod 07A2                  _ANSELbits 0188  
                  __ptext1 0616                    __ptext2 0053                    __ptext3 0F65  
                  __ptext4 0F59                    __ptext5 0F94                    __ptext6 0F84  
                  __ptext7 026C                    __ptext8 0323                    __ptext9 0195  
                  _get_msg 0616          __end_of_dump_conn 03C0               __size_of_ISR 0035  
 __end_ofi1_get_next_index 0F4F                    _dpowers 0577       get_minus_index@index 0021  
                  _msg_rcv 01B0                    _low_rcv 0068                  _LCDGotoXY 07D6  
                  _submode 006C                    _sprintf 0195                    clrloop0 0F36  
            _receive_input 03C0       end_of_initialization 004F                 ??_dump_msg 0046  
             _get_distance 0F84             dump_conn@count 00C0        get_next_index@index 0020  
           dump_conn@pconn 00C2      __size_of_LoadMenuItem 0013      __end_of_get_msg_index 0195  
        __end_of_stop_mark 0589          LCDWriteString@msg 002C                  _TRISAbits 0085  
                _TRISBbits 0086                  _TRISCbits 0087                 ?_LCDGotoXY 002C  
           ?_receive_input 0070               _LoadMenuItem 0FB5                 _start_mark 0581  
               LCDInit@__i 002F              ??_eeprom_read 0020                 LCDGotoXY@x 002E  
               LCDGotoXY@y 002C             __end_of_IOInit 06B1           LoadMenuItem@item 0024  
        ??_get_minus_index 0021              ??_LCDBusyLoop 0020              __pidataCOMMON 07FC  
      start_initialization 0015                __end_of_ISR 07A2           ??_LCDWriteString 002E  
        __size_of_ConnInit 0010                   ??_IOInit 0020                 dump_conn@i 00C1  
               dump_conn@s 00A0   __CFG_FOSC$INTRC_NOCLKOUT 0000          __size_of_MenuInit 003E  
   get_msg_index@end_index 0023        __end_of_eeprom_read 1000                 init_fetch0 0FA4  
              __pdataBANK0 0063                __pdataBANK1 00E3                   ?_ADCInit 0070  
      __end_of_LCDBusyLoop 0505                   ?_LCDByte 0025                   ?_LCDInit 0070  
              __pbssCOMMON 007C                   LCDByte@c 002A                  ___latbits 0002  
          ??_receive_input 0071              __pcstackBANK0 0020              __pcstackBANK1 00A0  
              ??_LCDGotoXY 002D           LCDWriteInt@F1650 0063                sprintf@flag 0041  
              sprintf@prec 0042          __size_of_dump_msg 00B7                   ISR@value 007A  
         ___lwdiv@dividend 0022                   ?___lwdiv 0020                   ?___lwmod 0028  
                __pstrings 0567                   ?_get_msg 0070          ?i1_get_next_index 0070  
  __size_of_get_next_index 000C                  _count_rcv 005D         ??i1_get_next_index 0070  
          LCDBusyLoop@busy 0022                  _dump_conn 0323            LCDBusyLoop@temp 0023  
         ___lwdiv@quotient 0025                   ?_sprintf 002E   get_msg_index@start_index 0026  
        interrupt_function 0004                  clear_ram0 0F35                _eeprom_read 0FDC  
    get_distance@end_index 0020    __size_of_get_plus_index 000F                _LCDBusyLoop 049D  
         LCDWriteString@cc 0030           __size_of_ADCInit 0014                 _ADCON0bits 001F  
              __stringbase 0576                 _ADCON1bits 009F              dump_msg@count 00C0  
                main@count 0051           __size_of_LCDByte 0057           __size_of_LCDInit 0068  
                _stop_mark 0585                 ?_dump_conn 0070                   _ConnInit 0F74  
          _get_minus_index 0F94                   _MenuInit 072F                  dump_msg@i 00C1  
                dump_msg@s 00A0               _low_half_rcv 007D          LCDBusyLoop@status 0024  
         __size_of___lwdiv 003E           __size_of___lwmod 0034         __end_of__stringtab 0577  
            _end_index_rcv 007C                 _ANSELHbits 0189           __size_of_get_msg 004E  
               sprintf@val 0043            ___lwdiv@divisor 0020            ___lwdiv@counter 0027  
                 __ptext10 07A2                   __ptext11 06F1                   __ptext20 0FB5  
                 __ptext12 0505                   __ptext21 0FDC                   __ptext13 07D6  
                 __ptext22 0FC8                   __ptext14 072F                   __ptext23 076D  
                 __ptext15 0435                   __ptext24 03C0                   __ptext16 05BF  
                 __ptext25 0F45                   __ptext17 049D                   __ptext18 0664  
                 __ptext19 0F74          __CFG_BOR4V$BOR21V 0000           __size_of_sprintf 00D7  
   __size_of_get_msg_index 0142                   _dump_msg 026C              __size_of_main 0040  
                 _pmsg_rcv 006A                   get_msg@i 002C                   _pstr_rcv 006B  
           _get_next_index 0F59                 _INTCONbits 000B    __end_of_get_minus_index 0FA4  
              ??_dump_conn 0046                   init_ram0 0FA8                   intlevel1 0000  
                sprintf@ap 0040                  sprintf@sp 002E           ___lwmod@dividend 002A  
    i1get_next_index@index 0070                  stringcode 0571         receive_input@byte1 0073  
       receive_input@byte2 0074             _get_plus_index 0F65         receive_input@value 0072  
            _get_msg_index 0053     __end_of_get_next_index 0F65         __end_of_start_mark 0585  
                 sprintf@c 0045                   sprintf@f 0030            ___lwmod@divisor 0028  
      get_plus_index@index 0022            ___lwmod@counter 002D                   stringdir 0571  
                 stringtab 0567                _server_conn 005F        LCDWriteString@count 002F  
    __end_of_receive_input 0435              ?_get_distance 0020  __size_ofi1_get_next_index 000A  
             ?_eeprom_read 0070     __end_of_get_plus_index 0F74    __size_of_LCDWriteString 0062  
