

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Jun 26 16:18:40 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	dabs	1,0x7E,2
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  001D                     	;# 
    82  001E                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0087                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0107                     	;# 
   113  0108                     	;# 
   114  0109                     	;# 
   115  010C                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0187                     	;# 
   122  0188                     	;# 
   123  0189                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000D                     	;# 
   139  000E                     	;# 
   140  000E                     	;# 
   141  000F                     	;# 
   142  0010                     	;# 
   143  0011                     	;# 
   144  0012                     	;# 
   145  0013                     	;# 
   146  0014                     	;# 
   147  0015                     	;# 
   148  0015                     	;# 
   149  0016                     	;# 
   150  0017                     	;# 
   151  0018                     	;# 
   152  0019                     	;# 
   153  001A                     	;# 
   154  001B                     	;# 
   155  001B                     	;# 
   156  001C                     	;# 
   157  001D                     	;# 
   158  001E                     	;# 
   159  001F                     	;# 
   160  0081                     	;# 
   161  0085                     	;# 
   162  0086                     	;# 
   163  0087                     	;# 
   164  0089                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  008F                     	;# 
   169  0090                     	;# 
   170  0091                     	;# 
   171  0092                     	;# 
   172  0093                     	;# 
   173  0093                     	;# 
   174  0093                     	;# 
   175  0094                     	;# 
   176  0095                     	;# 
   177  0096                     	;# 
   178  0097                     	;# 
   179  0098                     	;# 
   180  0099                     	;# 
   181  009A                     	;# 
   182  009B                     	;# 
   183  009C                     	;# 
   184  009D                     	;# 
   185  009E                     	;# 
   186  009F                     	;# 
   187  0105                     	;# 
   188  0107                     	;# 
   189  0108                     	;# 
   190  0109                     	;# 
   191  010C                     	;# 
   192  010C                     	;# 
   193  010D                     	;# 
   194  010E                     	;# 
   195  010F                     	;# 
   196  0185                     	;# 
   197  0187                     	;# 
   198  0188                     	;# 
   199  0189                     	;# 
   200  018C                     	;# 
   201  018D                     	;# 
   202  0000                     	;# 
   203  0001                     	;# 
   204  0002                     	;# 
   205  0003                     	;# 
   206  0004                     	;# 
   207  0005                     	;# 
   208  0006                     	;# 
   209  0007                     	;# 
   210  0009                     	;# 
   211  000A                     	;# 
   212  000B                     	;# 
   213  000C                     	;# 
   214  000D                     	;# 
   215  000E                     	;# 
   216  000E                     	;# 
   217  000F                     	;# 
   218  0010                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0014                     	;# 
   223  0015                     	;# 
   224  0015                     	;# 
   225  0016                     	;# 
   226  0017                     	;# 
   227  0018                     	;# 
   228  0019                     	;# 
   229  001A                     	;# 
   230  001B                     	;# 
   231  001B                     	;# 
   232  001C                     	;# 
   233  001D                     	;# 
   234  001E                     	;# 
   235  001F                     	;# 
   236  0081                     	;# 
   237  0085                     	;# 
   238  0086                     	;# 
   239  0087                     	;# 
   240  0089                     	;# 
   241  008C                     	;# 
   242  008D                     	;# 
   243  008E                     	;# 
   244  008F                     	;# 
   245  0090                     	;# 
   246  0091                     	;# 
   247  0092                     	;# 
   248  0093                     	;# 
   249  0093                     	;# 
   250  0093                     	;# 
   251  0094                     	;# 
   252  0095                     	;# 
   253  0096                     	;# 
   254  0097                     	;# 
   255  0098                     	;# 
   256  0099                     	;# 
   257  009A                     	;# 
   258  009B                     	;# 
   259  009C                     	;# 
   260  009D                     	;# 
   261  009E                     	;# 
   262  009F                     	;# 
   263  0105                     	;# 
   264  0107                     	;# 
   265  0108                     	;# 
   266  0109                     	;# 
   267  010C                     	;# 
   268  010C                     	;# 
   269  010D                     	;# 
   270  010E                     	;# 
   271  010F                     	;# 
   272  0185                     	;# 
   273  0187                     	;# 
   274  0188                     	;# 
   275  0189                     	;# 
   276  018C                     	;# 
   277  018D                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000D                     	;# 
   291  000E                     	;# 
   292  000E                     	;# 
   293  000F                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0013                     	;# 
   298  0014                     	;# 
   299  0015                     	;# 
   300  0015                     	;# 
   301  0016                     	;# 
   302  0017                     	;# 
   303  0018                     	;# 
   304  0019                     	;# 
   305  001A                     	;# 
   306  001B                     	;# 
   307  001B                     	;# 
   308  001C                     	;# 
   309  001D                     	;# 
   310  001E                     	;# 
   311  001F                     	;# 
   312  0081                     	;# 
   313  0085                     	;# 
   314  0086                     	;# 
   315  0087                     	;# 
   316  0089                     	;# 
   317  008C                     	;# 
   318  008D                     	;# 
   319  008E                     	;# 
   320  008F                     	;# 
   321  0090                     	;# 
   322  0091                     	;# 
   323  0092                     	;# 
   324  0093                     	;# 
   325  0093                     	;# 
   326  0093                     	;# 
   327  0094                     	;# 
   328  0095                     	;# 
   329  0096                     	;# 
   330  0097                     	;# 
   331  0098                     	;# 
   332  0099                     	;# 
   333  009A                     	;# 
   334  009B                     	;# 
   335  009C                     	;# 
   336  009D                     	;# 
   337  009E                     	;# 
   338  009F                     	;# 
   339  0105                     	;# 
   340  0107                     	;# 
   341  0108                     	;# 
   342  0109                     	;# 
   343  010C                     	;# 
   344  010C                     	;# 
   345  010D                     	;# 
   346  010E                     	;# 
   347  010F                     	;# 
   348  0185                     	;# 
   349  0187                     	;# 
   350  0188                     	;# 
   351  0189                     	;# 
   352  018C                     	;# 
   353  018D                     	;# 
   354  0000                     	;# 
   355  0001                     	;# 
   356  0002                     	;# 
   357  0003                     	;# 
   358  0004                     	;# 
   359  0005                     	;# 
   360  0006                     	;# 
   361  0007                     	;# 
   362  0009                     	;# 
   363  000A                     	;# 
   364  000B                     	;# 
   365  000C                     	;# 
   366  000D                     	;# 
   367  000E                     	;# 
   368  000E                     	;# 
   369  000F                     	;# 
   370  0010                     	;# 
   371  0011                     	;# 
   372  0012                     	;# 
   373  0013                     	;# 
   374  0014                     	;# 
   375  0015                     	;# 
   376  0015                     	;# 
   377  0016                     	;# 
   378  0017                     	;# 
   379  0018                     	;# 
   380  0019                     	;# 
   381  001A                     	;# 
   382  001B                     	;# 
   383  001B                     	;# 
   384  001C                     	;# 
   385  001D                     	;# 
   386  001E                     	;# 
   387  001F                     	;# 
   388  0081                     	;# 
   389  0085                     	;# 
   390  0086                     	;# 
   391  0087                     	;# 
   392  0089                     	;# 
   393  008C                     	;# 
   394  008D                     	;# 
   395  008E                     	;# 
   396  008F                     	;# 
   397  0090                     	;# 
   398  0091                     	;# 
   399  0092                     	;# 
   400  0093                     	;# 
   401  0093                     	;# 
   402  0093                     	;# 
   403  0094                     	;# 
   404  0095                     	;# 
   405  0096                     	;# 
   406  0097                     	;# 
   407  0098                     	;# 
   408  0099                     	;# 
   409  009A                     	;# 
   410  009B                     	;# 
   411  009C                     	;# 
   412  009D                     	;# 
   413  009E                     	;# 
   414  009F                     	;# 
   415  0105                     	;# 
   416  0107                     	;# 
   417  0108                     	;# 
   418  0109                     	;# 
   419  010C                     	;# 
   420  010C                     	;# 
   421  010D                     	;# 
   422  010E                     	;# 
   423  010F                     	;# 
   424  0185                     	;# 
   425  0187                     	;# 
   426  0188                     	;# 
   427  0189                     	;# 
   428  018C                     	;# 
   429  018D                     	;# 
   430                           
   431                           	psect	idataBANK1
   432  0C20                     __pidataBANK1:	
   433                           
   434                           ;initializer for ___cgram
   435  0C20  340C               	retlw	12
   436  0C21  3412               	retlw	18
   437  0C22  3412               	retlw	18
   438  0C23  340C               	retlw	12
   439  0C24  3400               	retlw	0
   440  0C25  3400               	retlw	0
   441  0C26  3400               	retlw	0
   442  0C27  3400               	retlw	0
   443                           
   444                           ;initializer for LCDWriteInt@F1646
   445  0C28  34F0               	retlw	240
   446  0C29  34F0               	retlw	240
   447  0C2A  34F0               	retlw	240
   448  0C2B  34F0               	retlw	240
   449  0C2C  34F0               	retlw	240
   450                           
   451                           ;initializer for _mode
   452  0C2D  3401               	retlw	1
   453                           
   454                           ;initializer for _pmsg
   455  0C2E  34A9               	retlw	low (_msg| 0)
   456                           
   457                           ;initializer for _submode
   458  0C2F  3401               	retlw	1
   459                           
   460                           	psect	strings
   461  0600                     __pstrings:	
   462  0600                     stringtab:	
   463  0600                     __stringtab:	
   464                           
   465                           ;	String table - string pointers are 1 byte each
   466  0600  1BFF               	btfsc	btemp+1,7
   467  0601  2E0A               	ljmp	stringcode
   468  0602  1383               	bcf	3,7
   469  0603  187F               	btfsc	btemp+1,0
   470  0604  1783               	bsf	3,7
   471  0605  0800               	movf	0,w
   472  0606  0A84               	incf	4,f
   473  0607  1903               	skipnz
   474  0608  0AFF               	incf	btemp+1,f
   475  0609  0008               	return
   476  060A                     stringcode:	
   477  060A                     stringdir:	
   478  060A  3006               	movlw	high stringdir
   479  060B  008A               	movwf	10
   480  060C  0804               	movf	4,w
   481  060D  0A84               	incf	4,f
   482  060E  0782               	addwf	2,f
   483  060F                     __stringbase:	
   484  060F  3400               	retlw	0
   485  0610                     __end_of__stringtab:	
   486  0610                     _dpowers:	
   487  0610  3401               	retlw	1
   488  0611  3400               	retlw	0
   489  0612  340A               	retlw	10
   490  0613  3400               	retlw	0
   491  0614  3464               	retlw	100
   492  0615  3400               	retlw	0
   493  0616  34E8               	retlw	232
   494  0617  3403               	retlw	3
   495  0618  3410               	retlw	16
   496  0619  3427               	retlw	39
   497  061A                     __end_of_dpowers:	
   498  001F                     _ADCON0bits	set	31
   499  001E                     _ADRESH	set	30
   500  0007                     _PORTC	set	7
   501  0018                     _CARRY	set	24
   502  005F                     _GIE	set	95
   503  002D                     _RA5	set	45
   504  002F                     _RA7	set	47
   505  0030                     _RB0	set	48
   506  0031                     _RB1	set	49
   507  0032                     _RB2	set	50
   508  0033                     _RB3	set	51
   509  0034                     _RB4	set	52
   510  0035                     _RB5	set	53
   511  0036                     _RB6	set	54
   512  0037                     _RB7	set	55
   513  0039                     _RC1	set	57
   514  003A                     _RC2	set	58
   515  003B                     _RC3	set	59
   516  009F                     _ADCON1bits	set	159
   517  009E                     _ADRESL	set	158
   518  0085                     _TRISAbits	set	133
   519  0086                     _TRISBbits	set	134
   520  0087                     _TRISC	set	135
   521  0087                     _TRISCbits	set	135
   522  010D                     _EEADR	set	269
   523  010C                     _EEDATA	set	268
   524  0189                     _ANSELHbits	set	393
   525  0188                     _ANSELbits	set	392
   526  018C                     _EECON1	set	396
   527  018D                     _EECON2	set	397
   528  0C60                     _RD	set	3168
   529  0C61                     _WR	set	3169
   530  0C62                     _WREN	set	3170
   531  061A                     STR_1:	
   532  061A  344D               	retlw	77	;'M'
   533  061B  343A               	retlw	58	;':'
   534  061C  3425               	retlw	37	;'%'
   535  061D  3464               	retlw	100	;'d'
   536  061E  342C               	retlw	44	;','
   537  061F  3425               	retlw	37	;'%'
   538  0620  3464               	retlw	100	;'d'
   539  0621  342C               	retlw	44	;','
   540  0622  3425               	retlw	37	;'%'
   541  0623  3464               	retlw	100	;'d'
   542  0624  342C               	retlw	44	;','
   543  0625  3425               	retlw	37	;'%'
   544  0626  3464               	retlw	100	;'d'
   545  0627  342C               	retlw	44	;','
   546  0628  3425               	retlw	37	;'%'
   547  0629  3464               	retlw	100	;'d'
   548  062A  342C               	retlw	44	;','
   549  062B  3425               	retlw	37	;'%'
   550  062C  3464               	retlw	100	;'d'
   551  062D  3400               	retlw	0
   552  062E                     STR_3:	
   553  062E  3443               	retlw	67	;'C'
   554  062F  343A               	retlw	58	;':'
   555  0630  3425               	retlw	37	;'%'
   556  0631  3464               	retlw	100	;'d'
   557  0632  342C               	retlw	44	;','
   558  0633  3425               	retlw	37	;'%'
   559  0634  3464               	retlw	100	;'d'
   560  0635  342C               	retlw	44	;','
   561  0636  3425               	retlw	37	;'%'
   562  0637  3464               	retlw	100	;'d'
   563  0638  342C               	retlw	44	;','
   564  0639  3425               	retlw	37	;'%'
   565  063A  3464               	retlw	100	;'d'
   566  063B  3400               	retlw	0
   567  063C                     STR_8:	
   568  063C  344E               	retlw	78	;'N'
   569  063D  344F               	retlw	79	;'O'
   570  063E  3454               	retlw	84	;'T'
   571  063F  3445               	retlw	69	;'E'
   572  0640  3444               	retlw	68	;'D'
   573  0641  3449               	retlw	73	;'I'
   574  0642  3454               	retlw	84	;'T'
   575  0643  3420               	retlw	32	;' '
   576  0644  344D               	retlw	77	;'M'
   577  0645  344F               	retlw	79	;'O'
   578  0646  3444               	retlw	68	;'D'
   579  0647  3445               	retlw	69	;'E'
   580  0648  3400               	retlw	0
   581  0649                     STR_9:	
   582  0649  344E               	retlw	78	;'N'
   583  064A  344F               	retlw	79	;'O'
   584  064B  3452               	retlw	82	;'R'
   585  064C  344D               	retlw	77	;'M'
   586  064D  3441               	retlw	65	;'A'
   587  064E  344C               	retlw	76	;'L'
   588  064F  3420               	retlw	32	;' '
   589  0650  344D               	retlw	77	;'M'
   590  0651  344F               	retlw	79	;'O'
   591  0652  3444               	retlw	68	;'D'
   592  0653  3445               	retlw	69	;'E'
   593  0654  3400               	retlw	0
   594  0655                     STR_6:	
   595  0655  344D               	retlw	77	;'M'
   596  0656  3445               	retlw	69	;'E'
   597  0657  344E               	retlw	78	;'N'
   598  0658  3455               	retlw	85	;'U'
   599  0659  3420               	retlw	32	;' '
   600  065A  344D               	retlw	77	;'M'
   601  065B  344F               	retlw	79	;'O'
   602  065C  3444               	retlw	68	;'D'
   603  065D  3445               	retlw	69	;'E'
   604  065E  3400               	retlw	0
   605  065F                     STR_12:	
   606  065F  3449               	retlw	73	;'I'
   607  0660  3444               	retlw	68	;'D'
   608  0661  3431               	retlw	49	;'1'
   609  0662  343A               	retlw	58	;':'
   610  0663  3400               	retlw	0
   611  0664                     STR_13:	
   612  0664  3449               	retlw	73	;'I'
   613  0665  3444               	retlw	68	;'D'
   614  0666  3432               	retlw	50	;'2'
   615  0667  343A               	retlw	58	;':'
   616  0668  3400               	retlw	0
   617  0669                     STR_14:	
   618  0669  3449               	retlw	73	;'I'
   619  066A  3444               	retlw	68	;'D'
   620  066B  3433               	retlw	51	;'3'
   621  066C  343A               	retlw	58	;':'
   622  066D  3400               	retlw	0
   623  066E                     STR_15:	
   624  066E  3449               	retlw	73	;'I'
   625  066F  3444               	retlw	68	;'D'
   626  0670  3434               	retlw	52	;'4'
   627  0671  343A               	retlw	58	;':'
   628  0672  3400               	retlw	0
   629  0673                     STR_11:	
   630  0673  3444               	retlw	68	;'D'
   631  0674  344F               	retlw	79	;'O'
   632  0675  3457               	retlw	87	;'W'
   633  0676  344E               	retlw	78	;'N'
   634  0677  3400               	retlw	0
   635  0678                     STR_5:	
   636  0678  3461               	retlw	97	;'a'
   637  0679  3462               	retlw	98	;'b'
   638  067A  3463               	retlw	99	;'c'
   639  067B  3400               	retlw	0
   640  067C                     STR_10:	
   641  067C  3455               	retlw	85	;'U'
   642  067D  3450               	retlw	80	;'P'
   643  067E  3400               	retlw	0
   644  0663                     
   645                           ; #config settings
   646  0000                     
   647                           	psect	cinit
   648  0015                     start_initialization:	
   649  0015                     __initialization:	
   650                           
   651                           ; Clear objects allocated to BANK1
   652  0015  1383               	bcf	3,7	;select IRP bank0
   653  0016  30A0               	movlw	low __pbssBANK1
   654  0017  0084               	movwf	4
   655  0018  30C0               	movlw	low (__pbssBANK1+32)
   656  0019  120A  158A  23CA  120A  118A  	fcall	clear_ram0
   657                           
   658                           ; Clear objects allocated to BANK3
   659  001E  1783               	bsf	3,7	;select IRP bank2
   660  001F  3090               	movlw	low __pbssBANK3
   661  0020  0084               	movwf	4
   662  0021  30D0               	movlw	low (__pbssBANK3+64)
   663  0022  120A  158A  23CA  120A  118A  	fcall	clear_ram0
   664                           
   665                           ; Initialize objects allocated to BANK1
   666  0027  1383               	bcf	3,7	;select IRP bank0
   667  0028  30ED               	movlw	low (__pdataBANK1+16)
   668  0029  00FD               	movwf	btemp+-1
   669  002A  300C               	movlw	high __pidataBANK1
   670  002B  00FE               	movwf	btemp
   671  002C  3020               	movlw	low __pidataBANK1
   672  002D  00FF               	movwf	btemp+1
   673  002E  30DD               	movlw	low __pdataBANK1
   674  002F  0084               	movwf	4
   675  0030  120A  158A  2434   	fcall	init_ram0
   676  0033                     end_of_initialization:	
   677                           ;End of C runtime variable initialization code
   678                           
   679  0033                     __end_of__initialization:	
   680  0033  0183               	clrf	3
   681  0034  120A  118A  2837   	ljmp	_main	;jump to C main() function
   682                           
   683                           	psect	bssBANK1
   684  00A0                     __pbssBANK1:	
   685  00A0                     _g_menu:	
   686  00A0                     	ds	9
   687  00A9                     _msg:	
   688  00A9                     	ds	23
   689                           
   690                           	psect	dataBANK1
   691  00DD                     __pdataBANK1:	
   692  00DD                     ___cgram:	
   693  00DD                     	ds	8
   694  00E5                     LCDWriteInt@F1646:	
   695  00E5                     	ds	5
   696  00EA                     _mode:	
   697  00EA                     	ds	1
   698  00EB                     _pmsg:	
   699  00EB                     	ds	1
   700  00EC                     _submode:	
   701  00EC                     	ds	1
   702                           
   703                           	psect	bssBANK3
   704  0190                     __pbssBANK3:	
   705  0190                     _client_conn:	
   706  0190                     	ds	64
   707                           
   708                           	psect	clrtext
   709  0BCA                     clear_ram0:	
   710                           ;	Called with FSR containing the base address, and
   711                           ;	W with the last address+1
   712                           
   713  0BCA  0064               	clrwdt	;clear the watchdog before getting into this loop
   714  0BCB                     clrloop0:	
   715  0BCB  0180               	clrf	0	;clear RAM location pointed to by FSR
   716  0BCC  0A84               	incf	4,f	;increment pointer
   717  0BCD  0604               	xorwf	4,w	;XOR with final address
   718  0BCE  1903               	btfsc	3,2	;have we reached the end yet?
   719  0BCF  3400               	retlw	0	;all done for this memory range, return
   720  0BD0  0604               	xorwf	4,w	;XOR again to restore value
   721  0BD1  2BCB               	goto	clrloop0	;do the next byte
   722                           
   723                           	psect	inittext
   724  0C30                     init_fetch0:	
   725                           ;	Called with low address in FSR and high address in W
   726                           
   727  0C30  087E               	movf	126,w
   728  0C31  008A               	movwf	10
   729  0C32  087F               	movf	127,w
   730  0C33  0082               	movwf	2
   731  0C34                     init_ram0:	
   732                           ;Called with:
   733                           ;	high address of idata address in btemp 
   734                           ;	low address of idata address in btemp+1 
   735                           ;	low address of data in FSR
   736                           ;	high address + 1 of data in btemp-1
   737                           
   738  0C34  2430  120A  158A   	fcall	init_fetch0
   739  0C37  0080               	movwf	0
   740  0C38  0A84               	incf	4,f
   741  0C39  0804               	movf	4,w
   742  0C3A  067D               	xorwf	125,w
   743  0C3B  1903               	btfsc	3,2
   744  0C3C  3400               	retlw	0
   745  0C3D  0AFF               	incf	127,f
   746  0C3E  1903               	btfsc	3,2
   747  0C3F  0AFE               	incf	126,f
   748  0C40  2C34               	goto	init_ram0
   749                           
   750                           	psect	cstackBANK1
   751  00C0                     __pcstackBANK1:	
   752  00C0                     ??_main:	
   753                           
   754                           ; 1 bytes @ 0x0
   755  00C0                     	ds	5
   756  00C5                     main@sendc:	
   757                           
   758                           ; 1 bytes @ 0x5
   759  00C5                     	ds	1
   760  00C6                     main@revc:	
   761                           
   762                           ; 1 bytes @ 0x6
   763  00C6                     	ds	1
   764  00C7                     main@prsp:	
   765                           
   766                           ; 1 bytes @ 0x7
   767  00C7                     	ds	1
   768  00C8                     main@rsp:	
   769                           
   770                           ; 1 bytes @ 0x8
   771  00C8                     	ds	1
   772  00C9                     main@prqt:	
   773                           
   774                           ; 1 bytes @ 0x9
   775  00C9                     	ds	1
   776  00CA                     main@count:	
   777                           
   778                           ; 1 bytes @ 0xA
   779  00CA                     	ds	1
   780  00CB                     main@count_554:	
   781                           
   782                           ; 1 bytes @ 0xB
   783  00CB                     	ds	1
   784  00CC                     main@count_557:	
   785                           
   786                           ; 1 bytes @ 0xC
   787  00CC                     	ds	1
   788  00CD                     main@count_560:	
   789                           
   790                           ; 1 bytes @ 0xD
   791  00CD                     	ds	1
   792  00CE                     main@count_563:	
   793                           
   794                           ; 1 bytes @ 0xE
   795  00CE                     	ds	1
   796  00CF                     main@count_566:	
   797                           
   798                           ; 1 bytes @ 0xF
   799  00CF                     	ds	1
   800  00D0                     main@rqt:	
   801                           
   802                           ; 1 bytes @ 0x10
   803  00D0                     	ds	1
   804  00D1                     main@pconn:	
   805                           
   806                           ; 1 bytes @ 0x11
   807  00D1                     	ds	1
   808  00D2                     main@s:	
   809                           
   810                           ; 1 bytes @ 0x12
   811  00D2                     	ds	1
   812  00D3                     main@i_553:	
   813                           
   814                           ; 1 bytes @ 0x13
   815  00D3                     	ds	1
   816  00D4                     main@i_556:	
   817                           
   818                           ; 1 bytes @ 0x14
   819  00D4                     	ds	1
   820  00D5                     main@i_559:	
   821                           
   822                           ; 1 bytes @ 0x15
   823  00D5                     	ds	1
   824  00D6                     main@i_562:	
   825                           
   826                           ; 1 bytes @ 0x16
   827  00D6                     	ds	1
   828  00D7                     main@i_565:	
   829                           
   830                           ; 1 bytes @ 0x17
   831  00D7                     	ds	1
   832  00D8                     main@i_568:	
   833                           
   834                           ; 1 bytes @ 0x18
   835  00D8                     	ds	1
   836  00D9                     main@i_524:	
   837                           
   838                           ; 1 bytes @ 0x19
   839  00D9                     	ds	1
   840  00DA                     main@i:	
   841                           
   842                           ; 1 bytes @ 0x1A
   843  00DA                     	ds	1
   844  00DB                     main@byte:	
   845                           
   846                           ; 1 bytes @ 0x1B
   847  00DB                     	ds	1
   848  00DC                     main@byte_534:	
   849                           
   850                           ; 1 bytes @ 0x1C
   851  00DC                     	ds	1
   852                           
   853                           	psect	cstackCOMMON
   854  0070                     __pcstackCOMMON:	
   855  0070                     ?_LCDInit:	
   856  0070                     ?_MenuInit:	
   857                           ; 1 bytes @ 0x0
   858                           
   859  0070                     ?_ShowMenu:	
   860                           ; 1 bytes @ 0x0
   861                           
   862  0070                     ?_LCDSetStyle:	
   863                           ; 1 bytes @ 0x0
   864                           
   865  0070                     ?_ClearMenu:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0070                     ?_ValueInc:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0070                     ?_MenuUp:	
   872                           ; 1 bytes @ 0x0
   873                           
   874  0070                     ?_MenuDown:	
   875                           ; 1 bytes @ 0x0
   876                           
   877  0070                     ?_LCDBusyLoop:	
   878                           ; 1 bytes @ 0x0
   879                           
   880  0070                     ?_LoadMenuItem:	
   881                           ; 1 bytes @ 0x0
   882                           
   883  0070                     ?_eeprom_read:	
   884                           ; 1 bytes @ 0x0
   885                           
   886  0070                     ?_ADCInit:	
   887                           ; 1 bytes @ 0x0
   888                           
   889  0070                     ?_dum_msg:	
   890                           ; 1 bytes @ 0x0
   891                           
   892  0070                     ?_ConnInit:	
   893                           ; 1 bytes @ 0x0
   894                           
   895  0070                     ?_IOInit:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  0070                     ?_ISR:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  0070                     ??_ISR:	
   902                           ; 1 bytes @ 0x0
   903                           
   904  0070                     ?_main:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ?_SaveMenuItem:	
   908                           ; 1 bytes @ 0x0
   909                           
   910  0070                     ?_ValueDec:	
   911                           ; 1 bytes @ 0x0
   912                           
   913                           
   914                           ; 2 bytes @ 0x0
   915  0070                     	ds	4
   916  0074                     ?_memcpy:	
   917  0074                     ??_MenuUp:	
   918                           ; 1 bytes @ 0x4
   919                           
   920  0074                     ??_MenuDown:	
   921                           ; 1 bytes @ 0x4
   922                           
   923  0074                     ??_LCDBusyLoop:	
   924                           ; 1 bytes @ 0x4
   925                           
   926  0074                     ?_eeprom_write:	
   927                           ; 1 bytes @ 0x4
   928                           
   929  0074                     ??_eeprom_read:	
   930                           ; 1 bytes @ 0x4
   931                           
   932  0074                     ??_ADCInit:	
   933                           ; 1 bytes @ 0x4
   934                           
   935  0074                     ??_ConnInit:	
   936                           ; 1 bytes @ 0x4
   937                           
   938  0074                     ??_IOInit:	
   939                           ; 1 bytes @ 0x4
   940                           
   941  0074                     ?_crc_calculate:	
   942                           ; 1 bytes @ 0x4
   943                           
   944  0074                     ?___awdiv:	
   945                           ; 2 bytes @ 0x4
   946                           
   947  0074                     ?___awmod:	
   948                           ; 2 bytes @ 0x4
   949                           
   950  0074                     ?___lwdiv:	
   951                           ; 2 bytes @ 0x4
   952                           
   953  0074                     eeprom_write@value:	
   954                           ; 2 bytes @ 0x4
   955                           
   956  0074                     ___awdiv@divisor:	
   957                           ; 1 bytes @ 0x4
   958                           
   959  0074                     ___awmod@divisor:	
   960                           ; 2 bytes @ 0x4
   961                           
   962  0074                     ___lwdiv@divisor:	
   963                           ; 2 bytes @ 0x4
   964                           
   965  0074                     memcpy@s1:	
   966                           ; 2 bytes @ 0x4
   967                           
   968                           
   969                           ; 2 bytes @ 0x4
   970  0074                     	ds	1
   971  0075                     ??_eeprom_write:	
   972  0075                     eeprom_read@addr:	
   973                           ; 1 bytes @ 0x5
   974                           
   975                           
   976                           ; 1 bytes @ 0x5
   977  0075                     	ds	1
   978  0076                     ??_LoadMenuItem:	
   979  0076                     ??_crc_calculate:	
   980                           ; 1 bytes @ 0x6
   981                           
   982  0076                     ConnInit@i:	
   983                           ; 1 bytes @ 0x6
   984                           
   985  0076                     LCDBusyLoop@busy:	
   986                           ; 1 bytes @ 0x6
   987                           
   988  0076                     eeprom_write@addr:	
   989                           ; 1 bytes @ 0x6
   990                           
   991  0076                     ___awdiv@dividend:	
   992                           ; 1 bytes @ 0x6
   993                           
   994  0076                     ___awmod@dividend:	
   995                           ; 2 bytes @ 0x6
   996                           
   997  0076                     ___lwdiv@dividend:	
   998                           ; 2 bytes @ 0x6
   999                           
  1000  0076                     memcpy@n:	
  1001                           ; 2 bytes @ 0x6
  1002                           
  1003                           
  1004                           ; 2 bytes @ 0x6
  1005  0076                     	ds	1
  1006  0077                     ??_SaveMenuItem:	
  1007  0077                     LCDBusyLoop@temp:	
  1008                           ; 1 bytes @ 0x7
  1009                           
  1010                           
  1011                           ; 1 bytes @ 0x7
  1012  0077                     	ds	1
  1013  0078                     ??_memcpy:	
  1014  0078                     ??___awdiv:	
  1015                           ; 1 bytes @ 0x8
  1016                           
  1017  0078                     ??___awmod:	
  1018                           ; 1 bytes @ 0x8
  1019                           
  1020  0078                     ??___lwdiv:	
  1021                           ; 1 bytes @ 0x8
  1022                           
  1023  0078                     LCDBusyLoop@status:	
  1024                           ; 1 bytes @ 0x8
  1025                           
  1026  0078                     LoadMenuItem@item:	
  1027                           ; 1 bytes @ 0x8
  1028                           
  1029                           
  1030                           ; 1 bytes @ 0x8
  1031  0078                     	ds	1
  1032  0079                     ?_LCDByte:	
  1033  0079                     ??_MenuInit:	
  1034                           ; 1 bytes @ 0x9
  1035                           
  1036  0079                     ??___lwmod:	
  1037                           ; 1 bytes @ 0x9
  1038                           
  1039  0079                     create_REG_ID_RQT_CMD@pconn:	
  1040                           ; 1 bytes @ 0x9
  1041                           
  1042  0079                     LCDByte@isdata:	
  1043                           ; 1 bytes @ 0x9
  1044                           
  1045  0079                     SaveMenuItem@item:	
  1046                           ; 1 bytes @ 0x9
  1047                           
  1048                           
  1049                           ; 1 bytes @ 0x9
  1050  0079                     	ds	1
  1051  007A                     ??_LCDSetStyle:	
  1052                           
  1053                           	psect	cstackBANK0
  1054  0020                     __pcstackBANK0:	
  1055                           ; 1 bytes @ 0xA
  1056                           
  1057  0020                     ??_LCDByte:	
  1058  0020                     ??_ValueInc:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0020                     ??_ValueDec:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  0020                     ___awdiv@counter:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  0020                     ___awmod@counter:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  0020                     crc_calculate@crc:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0020                     ___lwdiv@quotient:	
  1074                           ; 2 bytes @ 0x0
  1075                           
  1076  0020                     memcpy@s:	
  1077                           ; 2 bytes @ 0x0
  1078                           
  1079                           
  1080                           ; 2 bytes @ 0x0
  1081  0020                     	ds	1
  1082  0021                     ___awdiv@sign:	
  1083  0021                     ___awmod@sign:	
  1084                           ; 1 bytes @ 0x1
  1085                           
  1086                           
  1087                           ; 1 bytes @ 0x1
  1088  0021                     	ds	1
  1089  0022                     crc_calculate@i:	
  1090  0022                     LCDByte@hn:	
  1091                           ; 1 bytes @ 0x2
  1092                           
  1093  0022                     ___lwdiv@counter:	
  1094                           ; 1 bytes @ 0x2
  1095                           
  1096  0022                     memcpy@d:	
  1097                           ; 1 bytes @ 0x2
  1098                           
  1099  0022                     ___awdiv@quotient:	
  1100                           ; 1 bytes @ 0x2
  1101                           
  1102                           
  1103                           ; 2 bytes @ 0x2
  1104  0022                     	ds	1
  1105  0023                     ?___lwmod:	
  1106  0023                     crc_calculate@pmsg:	
  1107                           ; 2 bytes @ 0x3
  1108                           
  1109  0023                     LCDByte@ln:	
  1110                           ; 1 bytes @ 0x3
  1111                           
  1112  0023                     memcpy@d1:	
  1113                           ; 1 bytes @ 0x3
  1114                           
  1115  0023                     ___lwmod@divisor:	
  1116                           ; 1 bytes @ 0x3
  1117                           
  1118                           
  1119                           ; 2 bytes @ 0x3
  1120  0023                     	ds	1
  1121  0024                     ?_compose:	
  1122  0024                     compose@from:	
  1123                           ; 1 bytes @ 0x4
  1124                           
  1125  0024                     LCDByte@c:	
  1126                           ; 1 bytes @ 0x4
  1127                           
  1128                           
  1129                           ; 1 bytes @ 0x4
  1130  0024                     	ds	1
  1131  0025                     compose@to:	
  1132  0025                     LCDByte@temp:	
  1133                           ; 1 bytes @ 0x5
  1134                           
  1135  0025                     ___lwmod@dividend:	
  1136                           ; 1 bytes @ 0x5
  1137                           
  1138                           
  1139                           ; 2 bytes @ 0x5
  1140  0025                     	ds	1
  1141  0026                     ?_LCDGotoXY:	
  1142  0026                     ?_LCDWriteString:	
  1143                           ; 1 bytes @ 0x6
  1144                           
  1145  0026                     ??_LCDInit:	
  1146                           ; 1 bytes @ 0x6
  1147                           
  1148  0026                     ?_LCDWriteInt:	
  1149                           ; 1 bytes @ 0x6
  1150                           
  1151  0026                     compose@msgid:	
  1152                           ; 1 bytes @ 0x6
  1153                           
  1154  0026                     LCDSetStyle@style:	
  1155                           ; 1 bytes @ 0x6
  1156                           
  1157  0026                     LCDGotoXY@y:	
  1158                           ; 1 bytes @ 0x6
  1159                           
  1160  0026                     LCDWriteString@msg:	
  1161                           ; 1 bytes @ 0x6
  1162                           
  1163  0026                     LCDWriteInt@val:	
  1164                           ; 2 bytes @ 0x6
  1165                           
  1166                           
  1167                           ; 2 bytes @ 0x6
  1168  0026                     	ds	1
  1169  0027                     ??_LCDGotoXY:	
  1170  0027                     compose@cmd:	
  1171                           ; 1 bytes @ 0x7
  1172                           
  1173  0027                     ___lwmod@counter:	
  1174                           ; 1 bytes @ 0x7
  1175                           
  1176                           
  1177                           ; 1 bytes @ 0x7
  1178  0027                     	ds	1
  1179  0028                     ??_LCDWriteString:	
  1180  0028                     ?_sprintf:	
  1181                           ; 1 bytes @ 0x8
  1182                           
  1183  0028                     LCDInit@style:	
  1184                           ; 2 bytes @ 0x8
  1185                           
  1186  0028                     LCDWriteInt@field_length:	
  1187                           ; 1 bytes @ 0x8
  1188                           
  1189  0028                     LCDGotoXY@x:	
  1190                           ; 1 bytes @ 0x8
  1191                           
  1192  0028                     sprintf@f:	
  1193                           ; 1 bytes @ 0x8
  1194                           
  1195  0028                     compose@data:	
  1196                           ; 1 bytes @ 0x8
  1197                           
  1198                           
  1199                           ; 2 bytes @ 0x8
  1200  0028                     	ds	1
  1201  0029                     ??_LCDWriteInt:	
  1202  0029                     LCDInit@__i:	
  1203                           ; 1 bytes @ 0x9
  1204                           
  1205  0029                     LCDWriteString@count:	
  1206                           ; 1 bytes @ 0x9
  1207                           
  1208                           
  1209                           ; 1 bytes @ 0x9
  1210  0029                     	ds	1
  1211  002A                     compose@datalen:	
  1212  002A                     LCDWriteString@cc:	
  1213                           ; 1 bytes @ 0xA
  1214                           
  1215                           
  1216                           ; 1 bytes @ 0xA
  1217  002A                     	ds	1
  1218  002B                     ??_ClearMenu:	
  1219  002B                     ??_compose:	
  1220                           ; 1 bytes @ 0xB
  1221                           
  1222  002B                     LCDWriteInt@str:	
  1223                           ; 1 bytes @ 0xB
  1224                           
  1225                           
  1226                           ; 5 bytes @ 0xB
  1227  002B                     	ds	1
  1228  002C                     ClearMenu@count:	
  1229                           
  1230                           ; 1 bytes @ 0xC
  1231  002C                     	ds	1
  1232  002D                     ClearMenu@i:	
  1233  002D                     compose@len:	
  1234                           ; 1 bytes @ 0xD
  1235                           
  1236                           
  1237                           ; 2 bytes @ 0xD
  1238  002D                     	ds	2
  1239  002F                     compose@pmsg:	
  1240                           
  1241                           ; 1 bytes @ 0xF
  1242  002F                     	ds	1
  1243  0030                     ?_create_REG_ID_RQT_CMD:	
  1244  0030                     create_REG_ID_RQT_CMD@prqt:	
  1245                           ; 1 bytes @ 0x10
  1246                           
  1247  0030                     LCDWriteInt@j:	
  1248                           ; 1 bytes @ 0x10
  1249                           
  1250                           
  1251                           ; 2 bytes @ 0x10
  1252  0030                     	ds	1
  1253  0031                     create_REG_ID_RQT_CMD@pmsg:	
  1254                           
  1255                           ; 1 bytes @ 0x11
  1256  0031                     	ds	1
  1257  0032                     ??_create_REG_ID_RQT_CMD:	
  1258  0032                     LCDWriteInt@i:	
  1259                           ; 1 bytes @ 0x12
  1260                           
  1261                           
  1262                           ; 2 bytes @ 0x12
  1263  0032                     	ds	2
  1264  0034                     ??_ShowMenu:	
  1265                           
  1266                           ; 1 bytes @ 0x14
  1267  0034                     	ds	1
  1268  0035                     ??_sprintf:	
  1269                           
  1270                           ; 1 bytes @ 0x15
  1271  0035                     	ds	3
  1272  0038                     ShowMenu@count:	
  1273  0038                     sprintf@ap:	
  1274                           ; 1 bytes @ 0x18
  1275                           
  1276                           
  1277                           ; 1 bytes @ 0x18
  1278  0038                     	ds	1
  1279  0039                     ShowMenu@i:	
  1280  0039                     sprintf@flag:	
  1281                           ; 1 bytes @ 0x19
  1282                           
  1283                           
  1284                           ; 1 bytes @ 0x19
  1285  0039                     	ds	1
  1286  003A                     sprintf@prec:	
  1287                           
  1288                           ; 1 bytes @ 0x1A
  1289  003A                     	ds	1
  1290  003B                     sprintf@val:	
  1291                           
  1292                           ; 2 bytes @ 0x1B
  1293  003B                     	ds	2
  1294  003D                     sprintf@sp:	
  1295                           
  1296                           ; 1 bytes @ 0x1D
  1297  003D                     	ds	1
  1298  003E                     sprintf@c:	
  1299                           
  1300                           ; 1 bytes @ 0x1E
  1301  003E                     	ds	1
  1302  003F                     ??_dum_msg:	
  1303                           
  1304                           ; 1 bytes @ 0x1F
  1305  003F                     	ds	11
  1306  004A                     dum_msg@s:	
  1307                           
  1308                           ; 32 bytes @ 0x2A
  1309  004A                     	ds	32
  1310  006A                     dum_msg@count:	
  1311                           
  1312                           ; 1 bytes @ 0x4A
  1313  006A                     	ds	1
  1314  006B                     dum_msg@i:	
  1315                           
  1316                           ; 1 bytes @ 0x4B
  1317  006B                     	ds	1
  1318  006C                     dum_msg@pmsg:	
  1319                           
  1320                           ; 1 bytes @ 0x4C
  1321  006C                     	ds	1
  1322                           
  1323                           	psect	maintext
  1324  0037                     __pmaintext:	
  1325 ;;
  1326 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1327 ;;
  1328 ;; *************** function _main *****************
  1329 ;; Defined at:
  1330 ;;		line 183 in file "do_am.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;		None
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;  byte            1   28[BANK1 ] PTR struct .
  1335 ;;		 -> msg(23), 
  1336 ;;  byte            1   27[BANK1 ] PTR struct .
  1337 ;;		 -> msg(23), 
  1338 ;;  i               1   22[BANK1 ] char 
  1339 ;;  i               1   21[BANK1 ] char 
  1340 ;;  i               1   25[BANK1 ] unsigned char 
  1341 ;;  count           1   13[BANK1 ] char 
  1342 ;;  count           1   12[BANK1 ] char 
  1343 ;;  i               1   20[BANK1 ] char 
  1344 ;;  i               1   19[BANK1 ] char 
  1345 ;;  i               1   24[BANK1 ] char 
  1346 ;;  i               1   23[BANK1 ] char 
  1347 ;;  count           1   11[BANK1 ] char 
  1348 ;;  count           1   10[BANK1 ] char 
  1349 ;;  s               1   18[BANK1 ] PTR unsigned char 
  1350 ;;		 -> msg(23), 
  1351 ;;  count           1   15[BANK1 ] char 
  1352 ;;  count           1   14[BANK1 ] char 
  1353 ;;  i               1   26[BANK1 ] unsigned char 
  1354 ;;  pconn           1   17[BANK1 ] PTR struct .
  1355 ;;		 -> NULL(0), client_conn(64), 
  1356 ;;  rqt             1   16[BANK1 ] struct .
  1357 ;;  prqt            1    9[BANK1 ] PTR struct .
  1358 ;;		 -> main@rqt(1), 
  1359 ;;  rsp             1    8[BANK1 ] struct .
  1360 ;;  prsp            1    7[BANK1 ] PTR struct .
  1361 ;;		 -> main@rsp(1), 
  1362 ;;  revc            1    6[BANK1 ] unsigned char 
  1363 ;;  sendc           1    5[BANK1 ] unsigned char 
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  1    wreg      void 
  1366 ;; Registers used:
  1367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : B00/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1373 ;;      Params:         0       0       0       0       0
  1374 ;;      Locals:         0       0      24       0       0
  1375 ;;      Temps:          0       0       5       0       0
  1376 ;;      Totals:         0       0      29       0       0
  1377 ;;Total ram usage:       29 bytes
  1378 ;; Hardware stack levels required when called:    5
  1379 ;; This function calls:
  1380 ;;		_ADCInit
  1381 ;;		_ClearMenu
  1382 ;;		_ConnInit
  1383 ;;		_IOInit
  1384 ;;		_LCDByte
  1385 ;;		_LCDGotoXY
  1386 ;;		_LCDInit
  1387 ;;		_LCDSetStyle
  1388 ;;		_LCDWriteString
  1389 ;;		_MenuDown
  1390 ;;		_MenuInit
  1391 ;;		_MenuUp
  1392 ;;		_ShowMenu
  1393 ;;		_ValueDec
  1394 ;;		_ValueInc
  1395 ;;		_compose
  1396 ;;		_create_REG_ID_RQT_CMD
  1397 ;;		_dum_msg
  1398 ;; This function is called by:
  1399 ;;		Startup code after reset
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           
  1404                           ;psect for function _main
  1405  0037                     _main:	
  1406                           
  1407                           ;do_am.c: 186: LCDInit(0B00000000);
  1408                           
  1409                           ;incstack = 0
  1410                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1411  0037  3000               	movlw	0
  1412  0038  120A  118A  2753  120A  118A  	fcall	_LCDInit
  1413                           
  1414                           ;do_am.c: 189: ADCInit();
  1415  003D  120A  158A  2441  120A  118A  	fcall	_ADCInit
  1416                           
  1417                           ;do_am.c: 192: IOInit();
  1418  0042  120A  158A  2608  120A  118A  	fcall	_IOInit
  1419                           
  1420                           ;do_am.c: 194: MenuInit();
  1421  0047  120A  158A  258C  120A  118A  	fcall	_MenuInit
  1422                           
  1423                           ;do_am.c: 196: ConnInit();
  1424  004C  120A  118A  27B7  120A  118A  	fcall	_ConnInit
  1425                           
  1426                           ;do_am.c: 199: (LCDByte(0b00000001,0));
  1427  0051  01F9               	clrf	LCDByte@isdata
  1428  0052  3001               	movlw	1
  1429  0053  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  1430                           
  1431                           ;do_am.c: 201: compose(pmsg, 11, 22, 33, 44, "abc", 3);
  1432  0058  300B               	movlw	11
  1433  0059  1683               	bsf	3,5	;RP0=1, select bank1
  1434  005A  1303               	bcf	3,6	;RP1=0, select bank1
  1435  005B  00C0               	movwf	??_main^(0+128)
  1436  005C  0840               	movf	??_main^(0+128),w
  1437  005D  1283               	bcf	3,5	;RP0=0, select bank0
  1438  005E  1303               	bcf	3,6	;RP1=0, select bank0
  1439  005F  00A4               	movwf	compose@from
  1440  0060  3016               	movlw	22
  1441  0061  1683               	bsf	3,5	;RP0=1, select bank1
  1442  0062  1303               	bcf	3,6	;RP1=0, select bank1
  1443  0063  00C1               	movwf	(??_main+1)^(0+128)
  1444  0064  0841               	movf	(??_main+1)^(0+128),w
  1445  0065  1283               	bcf	3,5	;RP0=0, select bank0
  1446  0066  1303               	bcf	3,6	;RP1=0, select bank0
  1447  0067  00A5               	movwf	compose@to
  1448  0068  3021               	movlw	33
  1449  0069  1683               	bsf	3,5	;RP0=1, select bank1
  1450  006A  1303               	bcf	3,6	;RP1=0, select bank1
  1451  006B  00C2               	movwf	(??_main+2)^(0+128)
  1452  006C  0842               	movf	(??_main+2)^(0+128),w
  1453  006D  1283               	bcf	3,5	;RP0=0, select bank0
  1454  006E  1303               	bcf	3,6	;RP1=0, select bank0
  1455  006F  00A6               	movwf	compose@msgid
  1456  0070  302C               	movlw	44
  1457  0071  1683               	bsf	3,5	;RP0=1, select bank1
  1458  0072  1303               	bcf	3,6	;RP1=0, select bank1
  1459  0073  00C3               	movwf	(??_main+3)^(0+128)
  1460  0074  0843               	movf	(??_main+3)^(0+128),w
  1461  0075  1283               	bcf	3,5	;RP0=0, select bank0
  1462  0076  1303               	bcf	3,6	;RP1=0, select bank0
  1463  0077  00A7               	movwf	compose@cmd
  1464  0078  3069               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1465  0079  00A8               	movwf	compose@data
  1466  007A  3080               	movlw	128
  1467  007B  00A9               	movwf	compose@data+1
  1468  007C  3003               	movlw	3
  1469  007D  1683               	bsf	3,5	;RP0=1, select bank1
  1470  007E  1303               	bcf	3,6	;RP1=0, select bank1
  1471  007F  00C4               	movwf	(??_main+4)^(0+128)
  1472  0080  0844               	movf	(??_main+4)^(0+128),w
  1473  0081  1283               	bcf	3,5	;RP0=0, select bank0
  1474  0082  1303               	bcf	3,6	;RP1=0, select bank0
  1475  0083  00AA               	movwf	compose@datalen
  1476  0084  1683               	bsf	3,5	;RP0=1, select bank1
  1477  0085  1303               	bcf	3,6	;RP1=0, select bank1
  1478  0086  086B               	movf	_pmsg^(0+128),w
  1479  0087  120A  158A  26A1  120A  118A  	fcall	_compose
  1480                           
  1481                           ;do_am.c: 202: uint8_t sendc = 0x78;
  1482  008C  3078               	movlw	120
  1483  008D  1683               	bsf	3,5	;RP0=1, select bank1
  1484  008E  1303               	bcf	3,6	;RP1=0, select bank1
  1485  008F  00C0               	movwf	??_main^(0+128)
  1486  0090  0840               	movf	??_main^(0+128),w
  1487  0091  00C5               	movwf	main@sendc^(0+128)
  1488                           
  1489                           ;do_am.c: 203: uint8_t revc = 0;
  1490  0092  01C6               	clrf	main@revc^(0+128)
  1491                           
  1492                           ;do_am.c: 204: REG_ID_RQT_CMD_t rqt;
  1493                           ;do_am.c: 205: REG_ID_RQT_CMD_t *prqt = &rqt;
  1494  0093  30D0               	movlw	(low (main@rqt| 0))& (0+255)
  1495  0094  00C0               	movwf	??_main^(0+128)
  1496  0095  0840               	movf	??_main^(0+128),w
  1497  0096  00C9               	movwf	main@prqt^(0+128)
  1498                           
  1499                           ;do_am.c: 206: REG_ID_RSP_CMD_t rsp;
  1500                           ;do_am.c: 207: REG_ID_RSP_CMD_t *prsp = &rsp;
  1501  0097  30C8               	movlw	(low (main@rsp| 0))& (0+255)
  1502  0098  00C0               	movwf	??_main^(0+128)
  1503  0099  0840               	movf	??_main^(0+128),w
  1504  009A  00C7               	movwf	main@prsp^(0+128)
  1505                           
  1506                           ;do_am.c: 208: Connection_t *pconn = (0);
  1507  009B  01D1               	clrf	main@pconn^(0+128)
  1508  009C  2B20               	goto	l2427
  1509  009D                     l2429:	
  1510                           
  1511                           ;do_am.c: 213: {
  1512                           ;do_am.c: 214: for(uint8_t i = 0; i < 1; i++)
  1513  009D  1683               	bsf	3,5	;RP0=1, select bank1
  1514  009E  1303               	bcf	3,6	;RP1=0, select bank1
  1515  009F  01DA               	clrf	main@i^(0+128)
  1516  00A0  085A               	movf	main@i^(0+128),w
  1517  00A1  1D03               	btfss	3,2
  1518  00A2  2991               	goto	l2489
  1519  00A3                     l2435:	
  1520                           
  1521                           ;do_am.c: 215: {
  1522                           ;do_am.c: 216: rqt.id = i;
  1523  00A3  085A               	movf	main@i^(0+128),w
  1524  00A4  00C0               	movwf	??_main^(0+128)
  1525  00A5  0840               	movf	??_main^(0+128),w
  1526  00A6  00D0               	movwf	main@rqt^(0+128)
  1527                           
  1528                           ;do_am.c: 217: pconn = (Connection_t *)&client_conn[i];
  1529  00A7  085A               	movf	main@i^(0+128),w
  1530  00A8  00C0               	movwf	??_main^(0+128)
  1531  00A9  3001               	movlw	1
  1532  00AA                     u2345:	
  1533  00AA  1003               	clrc
  1534  00AB  0DC0               	rlf	??_main^(0+128),f
  1535  00AC  3EFF               	addlw	-1
  1536  00AD  1D03               	skipz
  1537  00AE  28AA               	goto	u2345
  1538  00AF  1003               	clrc
  1539  00B0  0D40               	rlf	??_main^(0+128),w
  1540  00B1  3E90               	addlw	(low (_client_conn| (0+256)))& (0+255)
  1541  00B2  00C1               	movwf	(??_main+1)^(0+128)
  1542  00B3  0841               	movf	(??_main+1)^(0+128),w
  1543  00B4  00D1               	movwf	main@pconn^(0+128)
  1544                           
  1545                           ;do_am.c: 218: { create_REG_ID_RQT_CMD(pconn, prqt, pmsg); {uint8_t *s = (uint8_t *)pmsg
      +                          ; { for(uint8_t i = 0; i < pmsg->msglen; i++) { { { { BITbits_t *byte = (BITbits_t *)&s[
      +                          i]; if(1 == 1) { RB0 = byte->B0; RB1 = byte->B1; RB2 = byte->B2; RB3 = byte->B3; } else 
      +                          {
  1546  00B5  0849               	movf	main@prqt^(0+128),w
  1547  00B6  00C0               	movwf	??_main^(0+128)
  1548  00B7  0840               	movf	??_main^(0+128),w
  1549  00B8  1283               	bcf	3,5	;RP0=0, select bank0
  1550  00B9  1303               	bcf	3,6	;RP1=0, select bank0
  1551  00BA  00B0               	movwf	create_REG_ID_RQT_CMD@prqt
  1552  00BB  1683               	bsf	3,5	;RP0=1, select bank1
  1553  00BC  1303               	bcf	3,6	;RP1=0, select bank1
  1554  00BD  086B               	movf	_pmsg^(0+128),w
  1555  00BE  00C1               	movwf	(??_main+1)^(0+128)
  1556  00BF  0841               	movf	(??_main+1)^(0+128),w
  1557  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1558  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1559  00C2  00B1               	movwf	create_REG_ID_RQT_CMD@pmsg
  1560  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  1561  00C4  1303               	bcf	3,6	;RP1=0, select bank1
  1562  00C5  0851               	movf	main@pconn^(0+128),w
  1563  00C6  120A  158A  24D3  120A  118A  	fcall	_create_REG_ID_RQT_CMD
  1564  00CB  1683               	bsf	3,5	;RP0=1, select bank1
  1565  00CC  1303               	bcf	3,6	;RP1=0, select bank1
  1566  00CD  086B               	movf	_pmsg^(0+128),w
  1567  00CE  00C0               	movwf	??_main^(0+128)
  1568  00CF  0840               	movf	??_main^(0+128),w
  1569  00D0  00D2               	movwf	main@s^(0+128)
  1570  00D1  01D9               	clrf	main@i_524^(0+128)
  1571  00D2                     l2481:	
  1572  00D2  086B               	movf	_pmsg^(0+128),w
  1573  00D3  0084               	movwf	4
  1574  00D4  1383               	bcf	3,7	;select IRP bank0
  1575  00D5  0800               	movf	0,w
  1576  00D6  0259               	subwf	main@i_524^(0+128),w
  1577  00D7  1803               	btfsc	3,0
  1578  00D8  2982               	goto	l2483
  1579  00D9  0859               	movf	main@i_524^(0+128),w
  1580  00DA  0752               	addwf	main@s^(0+128),w
  1581  00DB  00C0               	movwf	??_main^(0+128)
  1582  00DC  0840               	movf	??_main^(0+128),w
  1583  00DD  00DB               	movwf	main@byte^(0+128)
  1584  00DE  085B               	movf	main@byte^(0+128),w
  1585  00DF  0084               	movwf	4
  1586  00E0  1383               	bcf	3,7	;select IRP bank0
  1587  00E1  1C00               	btfss	0,0
  1588  00E2  28E7               	goto	u2350
  1589  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  1590  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  1591  00E5  1406               	bsf	6,0	;volatile
  1592  00E6  28EA               	goto	l2449
  1593  00E7                     u2350:	
  1594  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  1595  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  1596  00E9  1006               	bcf	6,0	;volatile
  1597  00EA                     l2449:	
  1598  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  1599  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  1600  00EC  085B               	movf	main@byte^(0+128),w
  1601  00ED  0084               	movwf	4
  1602  00EE  1383               	bcf	3,7	;select IRP bank0
  1603  00EF  1C80               	btfss	0,1
  1604  00F0  28F5               	goto	u2370
  1605  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  1606  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  1607  00F3  1486               	bsf	6,1	;volatile
  1608  00F4  28F8               	goto	l2451
  1609  00F5                     u2370:	
  1610  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  1611  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  1612  00F7  1086               	bcf	6,1	;volatile
  1613  00F8                     l2451:	
  1614  00F8  1683               	bsf	3,5	;RP0=1, select bank1
  1615  00F9  1303               	bcf	3,6	;RP1=0, select bank1
  1616  00FA  085B               	movf	main@byte^(0+128),w
  1617  00FB  0084               	movwf	4
  1618  00FC  1383               	bcf	3,7	;select IRP bank0
  1619  00FD  1D00               	btfss	0,2
  1620  00FE  2903               	goto	u2390
  1621  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0100  1303               	bcf	3,6	;RP1=0, select bank0
  1623  0101  1506               	bsf	6,2	;volatile
  1624  0102  2906               	goto	l2453
  1625  0103                     u2390:	
  1626  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1627  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1628  0105  1106               	bcf	6,2	;volatile
  1629  0106                     l2453:	
  1630  0106  1683               	bsf	3,5	;RP0=1, select bank1
  1631  0107  1303               	bcf	3,6	;RP1=0, select bank1
  1632  0108  085B               	movf	main@byte^(0+128),w
  1633  0109  0084               	movwf	4
  1634  010A  1383               	bcf	3,7	;select IRP bank0
  1635  010B  1D80               	btfss	0,3
  1636  010C  2911               	goto	u2490
  1637  010D  1283               	bcf	3,5	;RP0=0, select bank0
  1638  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1639  010F  1586               	bsf	6,3	;volatile
  1640  0110  2914               	goto	l2457
  1641  0111                     u2490:	
  1642  0111  1283               	bcf	3,5	;RP0=0, select bank0
  1643  0112  1303               	bcf	3,6	;RP1=0, select bank0
  1644  0113  1186               	bcf	6,3	;volatile
  1645  0114                     l2457:	
  1646  0114  3080               	movlw	128
  1647  0115  0685               	xorwf	5,f
  1648  0116  2917               	nop2	;2 cycle nop
  1649  0117  2918               	nop2	;2 cycle nop
  1650  0118  0000               	nop
  1651  0119  3080               	movlw	128
  1652  011A  1283               	bcf	3,5	;RP0=0, select bank0
  1653  011B  1303               	bcf	3,6	;RP1=0, select bank0
  1654  011C  0685               	xorwf	5,f
  1655  011D  3021               	movlw	33
  1656  011E  1683               	bsf	3,5	;RP0=1, select bank1
  1657  011F  1303               	bcf	3,6	;RP1=0, select bank1
  1658  0120  00C1               	movwf	(??_main^(0+128)+1)
  1659  0121  3076               	movlw	118
  1660  0122  00C0               	movwf	??_main^(0+128)
  1661  0123                     u2947:	
  1662  0123  0BC0               	decfsz	??_main^(0+128),f
  1663  0124  2923               	goto	u2947
  1664  0125  0BC1               	decfsz	(??_main^(0+128)+1),f
  1665  0126  2923               	goto	u2947
  1666  0127  0000               	nop
  1667  0128  1683               	bsf	3,5	;RP0=1, select bank1
  1668  0129  1303               	bcf	3,6	;RP1=0, select bank1
  1669  012A  0859               	movf	main@i_524^(0+128),w
  1670  012B  0752               	addwf	main@s^(0+128),w
  1671  012C  00C0               	movwf	??_main^(0+128)
  1672  012D  0840               	movf	??_main^(0+128),w
  1673  012E  00DC               	movwf	main@byte_534^(0+128)
  1674  012F  1683               	bsf	3,5	;RP0=1, select bank1
  1675  0130  1303               	bcf	3,6	;RP1=0, select bank1
  1676  0131  085C               	movf	main@byte_534^(0+128),w
  1677  0132  0084               	movwf	4
  1678  0133  1383               	bcf	3,7	;select IRP bank0
  1679  0134  1E00               	btfss	0,4
  1680  0135  293A               	goto	u2590
  1681  0136  1283               	bcf	3,5	;RP0=0, select bank0
  1682  0137  1303               	bcf	3,6	;RP1=0, select bank0
  1683  0138  1406               	bsf	6,0	;volatile
  1684  0139  293D               	goto	u2604
  1685  013A                     u2590:	
  1686  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1687  013B  1303               	bcf	3,6	;RP1=0, select bank0
  1688  013C  1006               	bcf	6,0	;volatile
  1689  013D                     u2604:	
  1690  013D  1683               	bsf	3,5	;RP0=1, select bank1
  1691  013E  1303               	bcf	3,6	;RP1=0, select bank1
  1692  013F  085C               	movf	main@byte_534^(0+128),w
  1693  0140  0084               	movwf	4
  1694  0141  1383               	bcf	3,7	;select IRP bank0
  1695  0142  1E80               	btfss	0,5
  1696  0143  2948               	goto	u2610
  1697  0144  1283               	bcf	3,5	;RP0=0, select bank0
  1698  0145  1303               	bcf	3,6	;RP1=0, select bank0
  1699  0146  1486               	bsf	6,1	;volatile
  1700  0147  294B               	goto	u2624
  1701  0148                     u2610:	
  1702  0148  1283               	bcf	3,5	;RP0=0, select bank0
  1703  0149  1303               	bcf	3,6	;RP1=0, select bank0
  1704  014A  1086               	bcf	6,1	;volatile
  1705  014B                     u2624:	
  1706  014B  1683               	bsf	3,5	;RP0=1, select bank1
  1707  014C  1303               	bcf	3,6	;RP1=0, select bank1
  1708  014D  085C               	movf	main@byte_534^(0+128),w
  1709  014E  0084               	movwf	4
  1710  014F  1383               	bcf	3,7	;select IRP bank0
  1711  0150  1F00               	btfss	0,6
  1712  0151  2956               	goto	u2630
  1713  0152  1283               	bcf	3,5	;RP0=0, select bank0
  1714  0153  1303               	bcf	3,6	;RP1=0, select bank0
  1715  0154  1506               	bsf	6,2	;volatile
  1716  0155  2959               	goto	u2644
  1717  0156                     u2630:	
  1718  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1719  0157  1303               	bcf	3,6	;RP1=0, select bank0
  1720  0158  1106               	bcf	6,2	;volatile
  1721  0159                     u2644:	
  1722  0159  1683               	bsf	3,5	;RP0=1, select bank1
  1723  015A  1303               	bcf	3,6	;RP1=0, select bank1
  1724  015B  085C               	movf	main@byte_534^(0+128),w
  1725  015C  0084               	movwf	4
  1726  015D  1383               	bcf	3,7	;select IRP bank0
  1727  015E  1F80               	btfss	0,7
  1728  015F  2964               	goto	u2650
  1729  0160  1283               	bcf	3,5	;RP0=0, select bank0
  1730  0161  1303               	bcf	3,6	;RP1=0, select bank0
  1731  0162  1586               	bsf	6,3	;volatile
  1732  0163  2967               	goto	l2471
  1733  0164                     u2650:	
  1734  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1735  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1736  0166  1186               	bcf	6,3	;volatile
  1737  0167                     l2471:	
  1738  0167  3080               	movlw	128
  1739  0168  0685               	xorwf	5,f
  1740  0169  296A               	nop2	;2 cycle nop
  1741  016A  296B               	nop2	;2 cycle nop
  1742  016B  0000               	nop
  1743  016C  3080               	movlw	128
  1744  016D  1283               	bcf	3,5	;RP0=0, select bank0
  1745  016E  1303               	bcf	3,6	;RP1=0, select bank0
  1746  016F  0685               	xorwf	5,f
  1747  0170  3021               	movlw	33
  1748  0171  1683               	bsf	3,5	;RP0=1, select bank1
  1749  0172  1303               	bcf	3,6	;RP1=0, select bank1
  1750  0173  00C1               	movwf	(??_main^(0+128)+1)
  1751  0174  3076               	movlw	118
  1752  0175  00C0               	movwf	??_main^(0+128)
  1753  0176                     u2957:	
  1754  0176  0BC0               	decfsz	??_main^(0+128),f
  1755  0177  2976               	goto	u2957
  1756  0178  0BC1               	decfsz	(??_main^(0+128)+1),f
  1757  0179  2976               	goto	u2957
  1758  017A  0000               	nop
  1759  017B  3001               	movlw	1
  1760  017C  1683               	bsf	3,5	;RP0=1, select bank1
  1761  017D  1303               	bcf	3,6	;RP1=0, select bank1
  1762  017E  00C0               	movwf	??_main^(0+128)
  1763  017F  0840               	movf	??_main^(0+128),w
  1764  0180  07D9               	addwf	main@i_524^(0+128),f
  1765  0181  28D2               	goto	l2481
  1766  0182                     l2483:	
  1767  0182  086B               	movf	_pmsg^(0+128),w
  1768  0183  120A  118A  24FD  120A  118A  	fcall	_dum_msg
  1769  0188  3001               	movlw	1
  1770  0189  1683               	bsf	3,5	;RP0=1, select bank1
  1771  018A  1303               	bcf	3,6	;RP1=0, select bank1
  1772  018B  00C0               	movwf	??_main^(0+128)
  1773  018C  0840               	movf	??_main^(0+128),w
  1774  018D  07DA               	addwf	main@i^(0+128),f
  1775  018E  085A               	movf	main@i^(0+128),w
  1776  018F  1903               	btfsc	3,2
  1777  0190  28A3               	goto	l2435
  1778  0191                     l2489:	
  1779                           
  1780                           ;do_am.c: 222: }
  1781                           ;do_am.c: 229: _delay((unsigned long)((200)*(20000000/4000.0)));
  1782  0191  3006               	movlw	6
  1783  0192  00C2               	movwf	(??_main^(0+128)+2)
  1784  0193  3013               	movlw	19
  1785  0194  00C1               	movwf	(??_main^(0+128)+1)
  1786  0195  30B1               	movlw	177
  1787  0196  00C0               	movwf	??_main^(0+128)
  1788  0197                     u2967:	
  1789  0197  0BC0               	decfsz	??_main^(0+128),f
  1790  0198  2997               	goto	u2967
  1791  0199  0BC1               	decfsz	(??_main^(0+128)+1),f
  1792  019A  2997               	goto	u2967
  1793  019B  0BC2               	decfsz	(??_main^(0+128)+2),f
  1794  019C  2997               	goto	u2967
  1795  019D  299E               	nop2
  1796                           
  1797                           ;do_am.c: 230: }
  1798  019E  2B20               	goto	l2427
  1799  019F                     l2491:	
  1800                           
  1801                           ;do_am.c: 233: {
  1802                           ;do_am.c: 234: if(mode == NORMAL)
  1803  019F  1683               	bsf	3,5	;RP0=1, select bank1
  1804  01A0  1303               	bcf	3,6	;RP1=0, select bank1
  1805  01A1  036A               	decf	_mode^(0+128),w
  1806  01A2  1D03               	btfss	3,2
  1807  01A3  29E1               	goto	l2513
  1808                           
  1809                           ;do_am.c: 235: {
  1810                           ;do_am.c: 236: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("MENU MODE"); for(int8_
      +                          t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  1811  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  1812  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  1813  01A6  01A6               	clrf	LCDGotoXY@y
  1814  01A7  0AA6               	incf	LCDGotoXY@y,f
  1815  01A8  3000               	movlw	0
  1816  01A9  120A  158A  2487  120A  118A  	fcall	_LCDGotoXY
  1817  01AE  3046               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1818  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  1819  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  1820  01B1  00A6               	movwf	LCDWriteString@msg
  1821  01B2  3080               	movlw	128
  1822  01B3  00A7               	movwf	LCDWriteString@msg+1
  1823  01B4  120A  118A  258B  120A  118A  	fcall	_LCDWriteString
  1824  01B9  1683               	bsf	3,5	;RP0=1, select bank1
  1825  01BA  1303               	bcf	3,6	;RP1=0, select bank1
  1826  01BB  00C0               	movwf	??_main^(0+128)
  1827  01BC  0840               	movf	??_main^(0+128),w
  1828  01BD  00CA               	movwf	main@count^(0+128)
  1829  01BE  084A               	movf	main@count^(0+128),w
  1830  01BF  00C0               	movwf	??_main^(0+128)
  1831  01C0  0840               	movf	??_main^(0+128),w
  1832  01C1  00D3               	movwf	main@i_553^(0+128)
  1833  01C2  0853               	movf	main@i_553^(0+128),w
  1834  01C3  3A80               	xorlw	128
  1835  01C4  3E70               	addlw	-144
  1836  01C5  1803               	btfsc	3,0
  1837  01C6  29DA               	goto	l2509
  1838  01C7                     l2503:	
  1839  01C7  01F9               	clrf	LCDByte@isdata
  1840  01C8  0AF9               	incf	LCDByte@isdata,f
  1841  01C9  3020               	movlw	32
  1842  01CA  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  1843  01CF  3001               	movlw	1
  1844  01D0  1683               	bsf	3,5	;RP0=1, select bank1
  1845  01D1  1303               	bcf	3,6	;RP1=0, select bank1
  1846  01D2  00C0               	movwf	??_main^(0+128)
  1847  01D3  0840               	movf	??_main^(0+128),w
  1848  01D4  07D3               	addwf	main@i_553^(0+128),f
  1849  01D5  0853               	movf	main@i_553^(0+128),w
  1850  01D6  3A80               	xorlw	128
  1851  01D7  3E70               	addlw	-144
  1852  01D8  1C03               	skipc
  1853  01D9  29C7               	goto	l2503
  1854  01DA                     l2509:	
  1855                           
  1856                           ;do_am.c: 237: mode = MENU;
  1857  01DA  01EA               	clrf	_mode^(0+128)
  1858                           
  1859                           ;do_am.c: 238: ShowMenu();
  1860  01DB  120A  158A  27A2  120A  118A  	fcall	_ShowMenu
  1861                           
  1862                           ;do_am.c: 239: }
  1863  01E0  2A23               	goto	l2535
  1864  01E1                     l2513:	
  1865                           
  1866                           ;do_am.c: 240: else
  1867                           ;do_am.c: 241: {
  1868                           ;do_am.c: 242: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("EDIT MODE"); for(int8_
      +                          t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  1869  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1870  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  1871  01E3  01A6               	clrf	LCDGotoXY@y
  1872  01E4  0AA6               	incf	LCDGotoXY@y,f
  1873  01E5  3000               	movlw	0
  1874  01E6  120A  158A  2487  120A  118A  	fcall	_LCDGotoXY
  1875  01EB  3030               	movlw	(low (((STR_8+3)-__stringbase)| (0+32768)))& (0+255)
  1876  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1877  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  1878  01EE  00A6               	movwf	LCDWriteString@msg
  1879  01EF  3080               	movlw	128
  1880  01F0  00A7               	movwf	LCDWriteString@msg+1
  1881  01F1  120A  118A  258B  120A  118A  	fcall	_LCDWriteString
  1882  01F6  1683               	bsf	3,5	;RP0=1, select bank1
  1883  01F7  1303               	bcf	3,6	;RP1=0, select bank1
  1884  01F8  00C0               	movwf	??_main^(0+128)
  1885  01F9  0840               	movf	??_main^(0+128),w
  1886  01FA  00CB               	movwf	main@count_554^(0+128)
  1887  01FB  084B               	movf	main@count_554^(0+128),w
  1888  01FC  00C0               	movwf	??_main^(0+128)
  1889  01FD  0840               	movf	??_main^(0+128),w
  1890  01FE  00D4               	movwf	main@i_556^(0+128)
  1891  01FF  0854               	movf	main@i_556^(0+128),w
  1892  0200  3A80               	xorlw	128
  1893  0201  3E70               	addlw	-144
  1894  0202  1803               	btfsc	3,0
  1895  0203  2A17               	goto	l2529
  1896  0204                     l2523:	
  1897  0204  01F9               	clrf	LCDByte@isdata
  1898  0205  0AF9               	incf	LCDByte@isdata,f
  1899  0206  3020               	movlw	32
  1900  0207  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  1901  020C  3001               	movlw	1
  1902  020D  1683               	bsf	3,5	;RP0=1, select bank1
  1903  020E  1303               	bcf	3,6	;RP1=0, select bank1
  1904  020F  00C0               	movwf	??_main^(0+128)
  1905  0210  0840               	movf	??_main^(0+128),w
  1906  0211  07D4               	addwf	main@i_556^(0+128),f
  1907  0212  0854               	movf	main@i_556^(0+128),w
  1908  0213  3A80               	xorlw	128
  1909  0214  3E70               	addlw	-144
  1910  0215  1C03               	skipc
  1911  0216  2A04               	goto	l2523
  1912  0217                     l2529:	
  1913                           
  1914                           ;do_am.c: 243: submode = EDIT;
  1915  0217  01EC               	clrf	_submode^(0+128)
  1916                           
  1917                           ;do_am.c: 244: ShowMenu();
  1918  0218  120A  158A  27A2  120A  118A  	fcall	_ShowMenu
  1919                           
  1920                           ;do_am.c: 245: LCDSetStyle(0B00000001);
  1921  021D  3001               	movlw	1
  1922  021E  120A  158A  23D2  120A  118A  	fcall	_LCDSetStyle
  1923  0223                     l2535:	
  1924                           
  1925                           ;do_am.c: 246: }
  1926                           ;do_am.c: 248: _delay((unsigned long)((200)*(20000000/4000.0)));
  1927  0223  3006               	movlw	6
  1928  0224  1683               	bsf	3,5	;RP0=1, select bank1
  1929  0225  1303               	bcf	3,6	;RP1=0, select bank1
  1930  0226  00C2               	movwf	(??_main^(0+128)+2)
  1931  0227  3013               	movlw	19
  1932  0228  00C1               	movwf	(??_main^(0+128)+1)
  1933  0229  30B1               	movlw	177
  1934  022A  00C0               	movwf	??_main^(0+128)
  1935  022B                     u2977:	
  1936  022B  0BC0               	decfsz	??_main^(0+128),f
  1937  022C  2A2B               	goto	u2977
  1938  022D  0BC1               	decfsz	(??_main^(0+128)+1),f
  1939  022E  2A2B               	goto	u2977
  1940  022F  0BC2               	decfsz	(??_main^(0+128)+2),f
  1941  0230  2A2B               	goto	u2977
  1942  0231  2A32               	nop2
  1943                           
  1944                           ;do_am.c: 249: }
  1945  0232  2B20               	goto	l2427
  1946  0233                     l2537:	
  1947                           
  1948                           ;do_am.c: 252: {
  1949                           ;do_am.c: 253: if(mode == MENU)
  1950  0233  1683               	bsf	3,5	;RP0=1, select bank1
  1951  0234  1303               	bcf	3,6	;RP1=0, select bank1
  1952  0235  086A               	movf	_mode^(0+128),w
  1953  0236  1D03               	btfss	3,2
  1954  0237  2AB7               	goto	l2577
  1955                           
  1956                           ;do_am.c: 254: {
  1957                           ;do_am.c: 255: if(submode == EDIT)
  1958  0238  086C               	movf	_submode^(0+128),w
  1959  0239  1D03               	btfss	3,2
  1960  023A  2A7A               	goto	l2559
  1961                           
  1962                           ;do_am.c: 256: {
  1963                           ;do_am.c: 257: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("NOTEDIT MODE"); for(in
      +                          t8_t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  1964  023B  1283               	bcf	3,5	;RP0=0, select bank0
  1965  023C  1303               	bcf	3,6	;RP1=0, select bank0
  1966  023D  01A6               	clrf	LCDGotoXY@y
  1967  023E  0AA6               	incf	LCDGotoXY@y,f
  1968  023F  3000               	movlw	0
  1969  0240  120A  158A  2487  120A  118A  	fcall	_LCDGotoXY
  1970  0245  302D               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1971  0246  1283               	bcf	3,5	;RP0=0, select bank0
  1972  0247  1303               	bcf	3,6	;RP1=0, select bank0
  1973  0248  00A6               	movwf	LCDWriteString@msg
  1974  0249  3080               	movlw	128
  1975  024A  00A7               	movwf	LCDWriteString@msg+1
  1976  024B  120A  118A  258B  120A  118A  	fcall	_LCDWriteString
  1977  0250  1683               	bsf	3,5	;RP0=1, select bank1
  1978  0251  1303               	bcf	3,6	;RP1=0, select bank1
  1979  0252  00C0               	movwf	??_main^(0+128)
  1980  0253  0840               	movf	??_main^(0+128),w
  1981  0254  00CC               	movwf	main@count_557^(0+128)
  1982  0255  084C               	movf	main@count_557^(0+128),w
  1983  0256  00C0               	movwf	??_main^(0+128)
  1984  0257  0840               	movf	??_main^(0+128),w
  1985  0258  00D5               	movwf	main@i_559^(0+128)
  1986  0259  0855               	movf	main@i_559^(0+128),w
  1987  025A  3A80               	xorlw	128
  1988  025B  3E70               	addlw	-144
  1989  025C  1803               	btfsc	3,0
  1990  025D  2A71               	goto	l173
  1991  025E                     l2551:	
  1992  025E  01F9               	clrf	LCDByte@isdata
  1993  025F  0AF9               	incf	LCDByte@isdata,f
  1994  0260  3020               	movlw	32
  1995  0261  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  1996  0266  3001               	movlw	1
  1997  0267  1683               	bsf	3,5	;RP0=1, select bank1
  1998  0268  1303               	bcf	3,6	;RP1=0, select bank1
  1999  0269  00C0               	movwf	??_main^(0+128)
  2000  026A  0840               	movf	??_main^(0+128),w
  2001  026B  07D5               	addwf	main@i_559^(0+128),f
  2002  026C  0855               	movf	main@i_559^(0+128),w
  2003  026D  3A80               	xorlw	128
  2004  026E  3E70               	addlw	-144
  2005  026F  1C03               	skipc
  2006  0270  2A5E               	goto	l2551
  2007  0271                     l173:	
  2008                           
  2009                           ;do_am.c: 258: submode = NOTEDIT;
  2010  0271  01EC               	clrf	_submode^(0+128)
  2011  0272  0AEC               	incf	_submode^(0+128),f
  2012                           
  2013                           ;do_am.c: 259: LCDSetStyle(0B00000000);
  2014  0273  3000               	movlw	0
  2015  0274  120A  158A  23D2  120A  118A  	fcall	_LCDSetStyle
  2016                           
  2017                           ;do_am.c: 260: }
  2018  0279  2AB7               	goto	l2577
  2019  027A                     l2559:	
  2020                           
  2021                           ;do_am.c: 261: else
  2022                           ;do_am.c: 262: {
  2023                           ;do_am.c: 263: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("NORMAL MODE"); for(int
      +                          8_t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  2024  027A  1283               	bcf	3,5	;RP0=0, select bank0
  2025  027B  1303               	bcf	3,6	;RP1=0, select bank0
  2026  027C  01A6               	clrf	LCDGotoXY@y
  2027  027D  0AA6               	incf	LCDGotoXY@y,f
  2028  027E  3000               	movlw	0
  2029  027F  120A  158A  2487  120A  118A  	fcall	_LCDGotoXY
  2030  0284  303A               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2031  0285  1283               	bcf	3,5	;RP0=0, select bank0
  2032  0286  1303               	bcf	3,6	;RP1=0, select bank0
  2033  0287  00A6               	movwf	LCDWriteString@msg
  2034  0288  3080               	movlw	128
  2035  0289  00A7               	movwf	LCDWriteString@msg+1
  2036  028A  120A  118A  258B  120A  118A  	fcall	_LCDWriteString
  2037  028F  1683               	bsf	3,5	;RP0=1, select bank1
  2038  0290  1303               	bcf	3,6	;RP1=0, select bank1
  2039  0291  00C0               	movwf	??_main^(0+128)
  2040  0292  0840               	movf	??_main^(0+128),w
  2041  0293  00CD               	movwf	main@count_560^(0+128)
  2042  0294  084D               	movf	main@count_560^(0+128),w
  2043  0295  00C0               	movwf	??_main^(0+128)
  2044  0296  0840               	movf	??_main^(0+128),w
  2045  0297  00D6               	movwf	main@i_562^(0+128)
  2046  0298  0856               	movf	main@i_562^(0+128),w
  2047  0299  3A80               	xorlw	128
  2048  029A  3E70               	addlw	-144
  2049  029B  1803               	btfsc	3,0
  2050  029C  2AB0               	goto	l176
  2051  029D                     l2569:	
  2052  029D  01F9               	clrf	LCDByte@isdata
  2053  029E  0AF9               	incf	LCDByte@isdata,f
  2054  029F  3020               	movlw	32
  2055  02A0  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  2056  02A5  3001               	movlw	1
  2057  02A6  1683               	bsf	3,5	;RP0=1, select bank1
  2058  02A7  1303               	bcf	3,6	;RP1=0, select bank1
  2059  02A8  00C0               	movwf	??_main^(0+128)
  2060  02A9  0840               	movf	??_main^(0+128),w
  2061  02AA  07D6               	addwf	main@i_562^(0+128),f
  2062  02AB  0856               	movf	main@i_562^(0+128),w
  2063  02AC  3A80               	xorlw	128
  2064  02AD  3E70               	addlw	-144
  2065  02AE  1C03               	skipc
  2066  02AF  2A9D               	goto	l2569
  2067  02B0                     l176:	
  2068                           
  2069                           ;do_am.c: 264: mode = NORMAL;
  2070  02B0  01EA               	clrf	_mode^(0+128)
  2071  02B1  0AEA               	incf	_mode^(0+128),f
  2072                           
  2073                           ;do_am.c: 265: ClearMenu();
  2074  02B2  120A  158A  2527  120A  118A  	fcall	_ClearMenu
  2075  02B7                     l2577:	
  2076                           
  2077                           ;do_am.c: 266: }
  2078                           ;do_am.c: 267: }
  2079                           ;do_am.c: 269: _delay((unsigned long)((200)*(20000000/4000.0)));
  2080  02B7  3006               	movlw	6
  2081  02B8  1683               	bsf	3,5	;RP0=1, select bank1
  2082  02B9  1303               	bcf	3,6	;RP1=0, select bank1
  2083  02BA  00C2               	movwf	(??_main^(0+128)+2)
  2084  02BB  3013               	movlw	19
  2085  02BC  00C1               	movwf	(??_main^(0+128)+1)
  2086  02BD  30B1               	movlw	177
  2087  02BE  00C0               	movwf	??_main^(0+128)
  2088  02BF                     u2987:	
  2089  02BF  0BC0               	decfsz	??_main^(0+128),f
  2090  02C0  2ABF               	goto	u2987
  2091  02C1  0BC1               	decfsz	(??_main^(0+128)+1),f
  2092  02C2  2ABF               	goto	u2987
  2093  02C3  0BC2               	decfsz	(??_main^(0+128)+2),f
  2094  02C4  2ABF               	goto	u2987
  2095  02C5  2AC6               	nop2
  2096                           
  2097                           ;do_am.c: 270: }
  2098  02C6  2B20               	goto	l2427
  2099  02C7                     l2579:	
  2100                           
  2101                           ;do_am.c: 273: {
  2102                           ;do_am.c: 274: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("UP"); for(int8_t i = c
      +                          ount + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  2103  02C7  01A6               	clrf	LCDGotoXY@y
  2104  02C8  0AA6               	incf	LCDGotoXY@y,f
  2105  02C9  3000               	movlw	0
  2106  02CA  120A  158A  2487  120A  118A  	fcall	_LCDGotoXY
  2107  02CF  306D               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2108  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  2109  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  2110  02D2  00A6               	movwf	LCDWriteString@msg
  2111  02D3  3080               	movlw	128
  2112  02D4  00A7               	movwf	LCDWriteString@msg+1
  2113  02D5  120A  118A  258B  120A  118A  	fcall	_LCDWriteString
  2114  02DA  1683               	bsf	3,5	;RP0=1, select bank1
  2115  02DB  1303               	bcf	3,6	;RP1=0, select bank1
  2116  02DC  00C0               	movwf	??_main^(0+128)
  2117  02DD  0840               	movf	??_main^(0+128),w
  2118  02DE  00CE               	movwf	main@count_563^(0+128)
  2119  02DF  084E               	movf	main@count_563^(0+128),w
  2120  02E0  00C0               	movwf	??_main^(0+128)
  2121  02E1  0840               	movf	??_main^(0+128),w
  2122  02E2  00D7               	movwf	main@i_565^(0+128)
  2123  02E3  0857               	movf	main@i_565^(0+128),w
  2124  02E4  3A80               	xorlw	128
  2125  02E5  3E70               	addlw	-144
  2126  02E6  1803               	btfsc	3,0
  2127  02E7  2AFB               	goto	l2595
  2128  02E8                     l2589:	
  2129  02E8  01F9               	clrf	LCDByte@isdata
  2130  02E9  0AF9               	incf	LCDByte@isdata,f
  2131  02EA  3020               	movlw	32
  2132  02EB  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  2133  02F0  3001               	movlw	1
  2134  02F1  1683               	bsf	3,5	;RP0=1, select bank1
  2135  02F2  1303               	bcf	3,6	;RP1=0, select bank1
  2136  02F3  00C0               	movwf	??_main^(0+128)
  2137  02F4  0840               	movf	??_main^(0+128),w
  2138  02F5  07D7               	addwf	main@i_565^(0+128),f
  2139  02F6  0857               	movf	main@i_565^(0+128),w
  2140  02F7  3A80               	xorlw	128
  2141  02F8  3E70               	addlw	-144
  2142  02F9  1C03               	skipc
  2143  02FA  2AE8               	goto	l2589
  2144  02FB                     l2595:	
  2145                           
  2146                           ;do_am.c: 275: if(mode == MENU)
  2147  02FB  086A               	movf	_mode^(0+128),w
  2148  02FC  1D03               	btfss	3,2
  2149  02FD  2B11               	goto	l2605
  2150                           
  2151                           ;do_am.c: 276: {
  2152                           ;do_am.c: 277: if(submode == EDIT)
  2153  02FE  086C               	movf	_submode^(0+128),w
  2154  02FF  1D03               	btfss	3,2
  2155  0300  2B07               	goto	l2601
  2156                           
  2157                           ;do_am.c: 278: {
  2158                           ;do_am.c: 279: ValueInc();
  2159  0301  120A  158A  2455  120A  118A  	fcall	_ValueInc
  2160                           
  2161                           ;do_am.c: 280: }
  2162  0306  2B0C               	goto	l2603
  2163  0307                     l2601:	
  2164                           
  2165                           ;do_am.c: 281: else
  2166                           ;do_am.c: 282: {
  2167                           ;do_am.c: 283: MenuUp();
  2168  0307  120A  158A  23F4  120A  118A  	fcall	_MenuUp
  2169  030C                     l2603:	
  2170                           
  2171                           ;do_am.c: 284: }
  2172                           ;do_am.c: 285: ShowMenu();
  2173  030C  120A  158A  27A2  120A  118A  	fcall	_ShowMenu
  2174  0311                     l2605:	
  2175                           
  2176                           ;do_am.c: 286: }
  2177                           ;do_am.c: 287: _delay((unsigned long)((200)*(20000000/4000.0)));
  2178  0311  3006               	movlw	6
  2179  0312  1683               	bsf	3,5	;RP0=1, select bank1
  2180  0313  1303               	bcf	3,6	;RP1=0, select bank1
  2181  0314  00C2               	movwf	(??_main^(0+128)+2)
  2182  0315  3013               	movlw	19
  2183  0316  00C1               	movwf	(??_main^(0+128)+1)
  2184  0317  30B1               	movlw	177
  2185  0318  00C0               	movwf	??_main^(0+128)
  2186  0319                     u2997:	
  2187  0319  0BC0               	decfsz	??_main^(0+128),f
  2188  031A  2B19               	goto	u2997
  2189  031B  0BC1               	decfsz	(??_main^(0+128)+1),f
  2190  031C  2B19               	goto	u2997
  2191  031D  0BC2               	decfsz	(??_main^(0+128)+2),f
  2192  031E  2B19               	goto	u2997
  2193  031F  2B20               	nop2
  2194  0320                     l2427:	
  2195                           ;do_am.c: 210: while(1)
  2196                           
  2197                           ;do_am.c: 288: }
  2198                           
  2199                           
  2200                           ;do_am.c: 211: {
  2201                           ;do_am.c: 212: if(RA5 == 0)
  2202  0320  1283               	bcf	3,5	;RP0=0, select bank0
  2203  0321  1303               	bcf	3,6	;RP1=0, select bank0
  2204  0322  1E85               	btfss	5,5	;volatile
  2205  0323  289D               	goto	l2429
  2206                           
  2207                           ;do_am.c: 231: else
  2208                           ;do_am.c: 232: if(RB4 == 0)
  2209  0324  1E06               	btfss	6,4	;volatile
  2210  0325  299F               	goto	l2491
  2211                           
  2212                           ;do_am.c: 250: else
  2213                           ;do_am.c: 251: if(RB6 == 0)
  2214  0326  1F06               	btfss	6,6	;volatile
  2215  0327  2A33               	goto	l2537
  2216                           
  2217                           ;do_am.c: 271: else
  2218                           ;do_am.c: 272: if(RB5 == 0)
  2219  0328  1E86               	btfss	6,5	;volatile
  2220  0329  2AC7               	goto	l2579
  2221                           
  2222                           ;do_am.c: 289: else
  2223                           ;do_am.c: 290: if(RB7 == 0)
  2224  032A  1B86               	btfsc	6,7	;volatile
  2225  032B  2B20               	goto	l2427
  2226                           
  2227                           ;do_am.c: 291: {
  2228                           ;do_am.c: 292: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("DOWN"); for(int8_t i =
      +                           count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  2229  032C  01A6               	clrf	LCDGotoXY@y
  2230  032D  0AA6               	incf	LCDGotoXY@y,f
  2231  032E  3000               	movlw	0
  2232  032F  120A  158A  2487  120A  118A  	fcall	_LCDGotoXY
  2233  0334  3064               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2234  0335  1283               	bcf	3,5	;RP0=0, select bank0
  2235  0336  1303               	bcf	3,6	;RP1=0, select bank0
  2236  0337  00A6               	movwf	LCDWriteString@msg
  2237  0338  3080               	movlw	128
  2238  0339  00A7               	movwf	LCDWriteString@msg+1
  2239  033A  120A  118A  258B  120A  118A  	fcall	_LCDWriteString
  2240  033F  1683               	bsf	3,5	;RP0=1, select bank1
  2241  0340  1303               	bcf	3,6	;RP1=0, select bank1
  2242  0341  00C0               	movwf	??_main^(0+128)
  2243  0342  0840               	movf	??_main^(0+128),w
  2244  0343  00CF               	movwf	main@count_566^(0+128)
  2245  0344  084F               	movf	main@count_566^(0+128),w
  2246  0345  00C0               	movwf	??_main^(0+128)
  2247  0346  0840               	movf	??_main^(0+128),w
  2248  0347  00D8               	movwf	main@i_568^(0+128)
  2249  0348  0858               	movf	main@i_568^(0+128),w
  2250  0349  3A80               	xorlw	128
  2251  034A  3E70               	addlw	-144
  2252  034B  1803               	btfsc	3,0
  2253  034C  2B60               	goto	l2623
  2254  034D                     l2617:	
  2255  034D  01F9               	clrf	LCDByte@isdata
  2256  034E  0AF9               	incf	LCDByte@isdata,f
  2257  034F  3020               	movlw	32
  2258  0350  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  2259  0355  3001               	movlw	1
  2260  0356  1683               	bsf	3,5	;RP0=1, select bank1
  2261  0357  1303               	bcf	3,6	;RP1=0, select bank1
  2262  0358  00C0               	movwf	??_main^(0+128)
  2263  0359  0840               	movf	??_main^(0+128),w
  2264  035A  07D8               	addwf	main@i_568^(0+128),f
  2265  035B  0858               	movf	main@i_568^(0+128),w
  2266  035C  3A80               	xorlw	128
  2267  035D  3E70               	addlw	-144
  2268  035E  1C03               	skipc
  2269  035F  2B4D               	goto	l2617
  2270  0360                     l2623:	
  2271                           
  2272                           ;do_am.c: 293: if(mode == MENU)
  2273  0360  086A               	movf	_mode^(0+128),w
  2274  0361  1D03               	btfss	3,2
  2275  0362  2B76               	goto	l2633
  2276                           
  2277                           ;do_am.c: 294: {
  2278                           ;do_am.c: 295: if(submode == EDIT)
  2279  0363  086C               	movf	_submode^(0+128),w
  2280  0364  1D03               	btfss	3,2
  2281  0365  2B6C               	goto	l2629
  2282                           
  2283                           ;do_am.c: 296: {
  2284                           ;do_am.c: 297: ValueDec();
  2285  0366  120A  118A  25ED  120A  118A  	fcall	_ValueDec
  2286                           
  2287                           ;do_am.c: 298: }
  2288  036B  2B71               	goto	l2631
  2289  036C                     l2629:	
  2290                           
  2291                           ;do_am.c: 299: else
  2292                           ;do_am.c: 300: {
  2293                           ;do_am.c: 301: MenuDown();
  2294  036C  120A  158A  23E7  120A  118A  	fcall	_MenuDown
  2295  0371                     l2631:	
  2296                           
  2297                           ;do_am.c: 302: }
  2298                           ;do_am.c: 303: ShowMenu();
  2299  0371  120A  158A  27A2  120A  118A  	fcall	_ShowMenu
  2300  0376                     l2633:	
  2301                           
  2302                           ;do_am.c: 304: }
  2303                           ;do_am.c: 305: _delay((unsigned long)((200)*(20000000/4000.0)));
  2304  0376  3006               	movlw	6
  2305  0377  1683               	bsf	3,5	;RP0=1, select bank1
  2306  0378  1303               	bcf	3,6	;RP1=0, select bank1
  2307  0379  00C2               	movwf	(??_main^(0+128)+2)
  2308  037A  3013               	movlw	19
  2309  037B  00C1               	movwf	(??_main^(0+128)+1)
  2310  037C  30B1               	movlw	177
  2311  037D  00C0               	movwf	??_main^(0+128)
  2312  037E                     u3007:	
  2313  037E  0BC0               	decfsz	??_main^(0+128),f
  2314  037F  2B7E               	goto	u3007
  2315  0380  0BC1               	decfsz	(??_main^(0+128)+1),f
  2316  0381  2B7E               	goto	u3007
  2317  0382  0BC2               	decfsz	(??_main^(0+128)+2),f
  2318  0383  2B7E               	goto	u3007
  2319  0384  2B85               	nop2
  2320  0385  2B20               	goto	l2427
  2321  0386                     __end_of_main:	
  2322                           
  2323                           	psect	text1
  2324  04FD                     __ptext1:	
  2325 ;; *************** function _dum_msg *****************
  2326 ;; Defined at:
  2327 ;;		line 72 in file "msg.h"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;  pmsg            1    wreg     PTR struct .
  2330 ;;		 -> msg(23), 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;  pmsg            1   76[BANK0 ] PTR struct .
  2333 ;;		 -> msg(23), 
  2334 ;;  i               1   75[BANK0 ] char 
  2335 ;;  count           1   74[BANK0 ] char 
  2336 ;;  s              32   42[BANK0 ] unsigned char [32]
  2337 ;; Return value:  Size  Location     Type
  2338 ;;                  1    wreg      void 
  2339 ;; Registers used:
  2340 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2346 ;;      Params:         0       0       0       0       0
  2347 ;;      Locals:         0      35       0       0       0
  2348 ;;      Temps:          0      11       0       0       0
  2349 ;;      Totals:         0      46       0       0       0
  2350 ;;Total ram usage:       46 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    4
  2353 ;; This function calls:
  2354 ;;		_LCDByte
  2355 ;;		_LCDGotoXY
  2356 ;;		_LCDWriteString
  2357 ;;		_sprintf
  2358 ;; This function is called by:
  2359 ;;		_main
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           
  2364                           ;psect for function _dum_msg
  2365  04FD                     _dum_msg:	
  2366                           
  2367                           ;incstack = 0
  2368                           ; Regs used in _dum_msg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2369                           ;dum_msg@pmsg stored from wreg
  2370  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  2371  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  2372  04FF  00EC               	movwf	dum_msg@pmsg
  2373                           
  2374                           ;msg.h: 74: char s[32];
  2375                           ;msg.h: 75: sprintf(s, "M:%d,%d,%d,%d,%d,%d", pmsg->msglen, pmsg->crc, pmsg->from, pmsg-
      +                          >to, pmsg->msgid, pmsg->cmd);
  2376  0500  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2377  0501  00BF               	movwf	??_dum_msg
  2378  0502  083F               	movf	??_dum_msg,w
  2379  0503  00A8               	movwf	sprintf@f
  2380  0504  086C               	movf	dum_msg@pmsg,w
  2381  0505  0084               	movwf	4
  2382  0506  1383               	bcf	3,7	;select IRP bank0
  2383  0507  0800               	movf	0,w
  2384  0508  00C0               	movwf	??_dum_msg+1
  2385  0509  01C1               	clrf	??_dum_msg+2
  2386  050A  0840               	movf	??_dum_msg+1,w
  2387  050B  00A9               	movwf	?_sprintf+1
  2388  050C  0841               	movf	??_dum_msg+2,w
  2389  050D  00AA               	movwf	?_sprintf+2
  2390  050E  0A6C               	incf	dum_msg@pmsg,w
  2391  050F  0084               	movwf	4
  2392  0510  0800               	movf	0,w
  2393  0511  00AB               	movwf	?_sprintf+3
  2394  0512  0A84               	incf	4,f
  2395  0513  0800               	movf	0,w
  2396  0514  00AC               	movwf	?_sprintf+4
  2397  0515  086C               	movf	dum_msg@pmsg,w
  2398  0516  3E03               	addlw	3
  2399  0517  0084               	movwf	4
  2400  0518  0800               	movf	0,w
  2401  0519  00C2               	movwf	??_dum_msg+3
  2402  051A  01C3               	clrf	??_dum_msg+4
  2403  051B  0842               	movf	??_dum_msg+3,w
  2404  051C  00AD               	movwf	?_sprintf+5
  2405  051D  0843               	movf	??_dum_msg+4,w
  2406  051E  00AE               	movwf	?_sprintf+6
  2407  051F  086C               	movf	dum_msg@pmsg,w
  2408  0520  3E04               	addlw	4
  2409  0521  0084               	movwf	4
  2410  0522  0800               	movf	0,w
  2411  0523  00C4               	movwf	??_dum_msg+5
  2412  0524  01C5               	clrf	??_dum_msg+6
  2413  0525  0844               	movf	??_dum_msg+5,w
  2414  0526  00AF               	movwf	?_sprintf+7
  2415  0527  0845               	movf	??_dum_msg+6,w
  2416  0528  00B0               	movwf	?_sprintf+8
  2417  0529  086C               	movf	dum_msg@pmsg,w
  2418  052A  3E05               	addlw	5
  2419  052B  0084               	movwf	4
  2420  052C  0800               	movf	0,w
  2421  052D  00C6               	movwf	??_dum_msg+7
  2422  052E  01C7               	clrf	??_dum_msg+8
  2423  052F  0846               	movf	??_dum_msg+7,w
  2424  0530  00B1               	movwf	?_sprintf+9
  2425  0531  0847               	movf	??_dum_msg+8,w
  2426  0532  00B2               	movwf	?_sprintf+10
  2427  0533  086C               	movf	dum_msg@pmsg,w
  2428  0534  3E06               	addlw	6
  2429  0535  0084               	movwf	4
  2430  0536  0800               	movf	0,w
  2431  0537  00C8               	movwf	??_dum_msg+9
  2432  0538  01C9               	clrf	??_dum_msg+10
  2433  0539  0848               	movf	??_dum_msg+9,w
  2434  053A  00B3               	movwf	?_sprintf+11
  2435  053B  0849               	movf	??_dum_msg+10,w
  2436  053C  00B4               	movwf	?_sprintf+12
  2437  053D  304A               	movlw	(low (dum_msg@s| 0))& (0+255)
  2438  053E  120A  118A  2386  120A  118A  	fcall	_sprintf
  2439                           
  2440                           ;msg.h: 76: {{ LCDGotoXY(0,1); int8_t count = LCDWriteString(""); for(int8_t i = count +
      +                           0; i < 16; i++) { (LCDByte(' ',1)); } };}; {{ LCDGotoXY(0,1); LCDWriteString(s);};};
  2441  0543  1283               	bcf	3,5	;RP0=0, select bank0
  2442  0544  1303               	bcf	3,6	;RP1=0, select bank0
  2443  0545  01A6               	clrf	LCDGotoXY@y
  2444  0546  0AA6               	incf	LCDGotoXY@y,f
  2445  0547  3000               	movlw	0
  2446  0548  120A  158A  2487  120A  118A  	fcall	_LCDGotoXY
  2447  054D  3054               	movlw	(low (((STR_12+4)-__stringbase)| (0+32768)))& (0+255)
  2448  054E  1283               	bcf	3,5	;RP0=0, select bank0
  2449  054F  1303               	bcf	3,6	;RP1=0, select bank0
  2450  0550  00A6               	movwf	LCDWriteString@msg
  2451  0551  3080               	movlw	128
  2452  0552  00A7               	movwf	LCDWriteString@msg+1
  2453  0553  120A  118A  258B  120A  118A  	fcall	_LCDWriteString
  2454  0558  1283               	bcf	3,5	;RP0=0, select bank0
  2455  0559  1303               	bcf	3,6	;RP1=0, select bank0
  2456  055A  00BF               	movwf	??_dum_msg
  2457  055B  083F               	movf	??_dum_msg,w
  2458  055C  00EA               	movwf	dum_msg@count
  2459  055D  086A               	movf	dum_msg@count,w
  2460  055E  00BF               	movwf	??_dum_msg
  2461  055F  083F               	movf	??_dum_msg,w
  2462  0560  00EB               	movwf	dum_msg@i
  2463  0561  086B               	movf	dum_msg@i,w
  2464  0562  3A80               	xorlw	128
  2465  0563  3E70               	addlw	-144
  2466  0564  1803               	btfsc	3,0
  2467  0565  2D79               	goto	l2229
  2468  0566                     l2223:	
  2469  0566  01F9               	clrf	LCDByte@isdata
  2470  0567  0AF9               	incf	LCDByte@isdata,f
  2471  0568  3020               	movlw	32
  2472  0569  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  2473  056E  3001               	movlw	1
  2474  056F  1283               	bcf	3,5	;RP0=0, select bank0
  2475  0570  1303               	bcf	3,6	;RP1=0, select bank0
  2476  0571  00BF               	movwf	??_dum_msg
  2477  0572  083F               	movf	??_dum_msg,w
  2478  0573  07EB               	addwf	dum_msg@i,f
  2479  0574  086B               	movf	dum_msg@i,w
  2480  0575  3A80               	xorlw	128
  2481  0576  3E70               	addlw	-144
  2482  0577  1C03               	skipc
  2483  0578  2D66               	goto	l2223
  2484  0579                     l2229:	
  2485  0579  01A6               	clrf	LCDGotoXY@y
  2486  057A  0AA6               	incf	LCDGotoXY@y,f
  2487  057B  3000               	movlw	0
  2488  057C  120A  158A  2487  120A  118A  	fcall	_LCDGotoXY
  2489  0581  304A               	movlw	(low (dum_msg@s| 0))& (0+255)
  2490  0582  1283               	bcf	3,5	;RP0=0, select bank0
  2491  0583  1303               	bcf	3,6	;RP1=0, select bank0
  2492  0584  00A6               	movwf	LCDWriteString@msg
  2493  0585  3000               	movlw	0
  2494  0586  00A7               	movwf	LCDWriteString@msg+1
  2495  0587  120A  118A  258B   	fcall	_LCDWriteString
  2496  058A  0008               	return
  2497  058B                     __end_of_dum_msg:	
  2498                           
  2499                           	psect	text2
  2500  0386                     __ptext2:	
  2501 ;; *************** function _sprintf *****************
  2502 ;; Defined at:
  2503 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  2504 ;; Parameters:    Size  Location     Type
  2505 ;;  sp              1    wreg     PTR unsigned char 
  2506 ;;		 -> dum_conn@s(32), dum_msg@s(32), 
  2507 ;;  f               1    8[BANK0 ] PTR const unsigned char 
  2508 ;;		 -> STR_3(14), STR_1(20), 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  sp              1   29[BANK0 ] PTR unsigned char 
  2511 ;;		 -> dum_conn@s(32), dum_msg@s(32), 
  2512 ;;  tmpval          4    0        struct .
  2513 ;;  val             2   27[BANK0 ] unsigned int 
  2514 ;;  cp              2    0        PTR const unsigned char 
  2515 ;;  len             2    0        unsigned int 
  2516 ;;  c               1   30[BANK0 ] char 
  2517 ;;  prec            1   26[BANK0 ] char 
  2518 ;;  flag            1   25[BANK0 ] unsigned char 
  2519 ;;  ap              1   24[BANK0 ] PTR void [1]
  2520 ;;		 -> ?_sprintf(2), 
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  2    8[BANK0 ] int 
  2523 ;; Registers used:
  2524 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2530 ;;      Params:         0      13       0       0       0
  2531 ;;      Locals:         0       7       0       0       0
  2532 ;;      Temps:          0       3       0       0       0
  2533 ;;      Totals:         0      23       0       0       0
  2534 ;;Total ram usage:       23 bytes
  2535 ;; Hardware stack levels used:    1
  2536 ;; Hardware stack levels required when called:    2
  2537 ;; This function calls:
  2538 ;;		___lwdiv
  2539 ;;		___lwmod
  2540 ;; This function is called by:
  2541 ;;		_dum_msg
  2542 ;;		_dum_conn
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           
  2547                           ;psect for function _sprintf
  2548  0386                     _sprintf:	
  2549                           
  2550                           ;incstack = 0
  2551                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2552                           ;sprintf@sp stored from wreg
  2553  0386  1283               	bcf	3,5	;RP0=0, select bank0
  2554  0387  1303               	bcf	3,6	;RP1=0, select bank0
  2555  0388  00BD               	movwf	sprintf@sp
  2556                           
  2557                           ;doprnt.c: 494: va_list ap;
  2558                           ;doprnt.c: 499: signed char c;
  2559                           ;doprnt.c: 506: signed char prec;
  2560                           ;doprnt.c: 508: unsigned char flag;
  2561                           ;doprnt.c: 523: union {
  2562                           ;doprnt.c: 524: unsigned long vd;
  2563                           ;doprnt.c: 525: double integ;
  2564                           ;doprnt.c: 526: } tmpval;
  2565                           ;doprnt.c: 528: unsigned int val;
  2566                           ;doprnt.c: 529: unsigned len;
  2567                           ;doprnt.c: 530: const char * cp;
  2568                           ;doprnt.c: 533: *ap = __va_start();
  2569  0389  3029               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2570  038A  00B5               	movwf	??_sprintf
  2571  038B  0835               	movf	??_sprintf,w
  2572  038C  00B8               	movwf	sprintf@ap
  2573  038D                     l2099:	
  2574                           ;doprnt.c: 536: while(c = *f++) {
  2575                           
  2576  038D  3001               	movlw	1
  2577  038E  07A8               	addwf	sprintf@f,f
  2578  038F  30FF               	movlw	-1
  2579  0390  0728               	addwf	sprintf@f,w
  2580  0391  0084               	movwf	4
  2581  0392  120A  118A  260A  120A  118A  	fcall	stringdir
  2582  0397  00B5               	movwf	??_sprintf
  2583  0398  0835               	movf	??_sprintf,w
  2584  0399  00BE               	movwf	sprintf@c
  2585  039A  083E               	movf	sprintf@c,w
  2586  039B  1903               	btfsc	3,2
  2587  039C  2C57               	goto	l2101
  2588                           
  2589                           ;doprnt.c: 538: if(c != '%')
  2590  039D  3025               	movlw	37
  2591  039E  063E               	xorwf	sprintf@c,w
  2592  039F  1903               	btfsc	3,2
  2593  03A0  2BAD               	goto	l2055
  2594                           
  2595                           ;doprnt.c: 540: {
  2596                           ;doprnt.c: 541: ((*sp++ = (c)));
  2597  03A1  083E               	movf	sprintf@c,w
  2598  03A2  00B5               	movwf	??_sprintf
  2599  03A3  083D               	movf	sprintf@sp,w
  2600  03A4  0084               	movwf	4
  2601  03A5  0835               	movf	??_sprintf,w
  2602  03A6  1383               	bcf	3,7	;select IRP bank0
  2603  03A7  0080               	movwf	0
  2604  03A8  3001               	movlw	1
  2605  03A9  00B5               	movwf	??_sprintf
  2606  03AA  0835               	movf	??_sprintf,w
  2607  03AB  07BD               	addwf	sprintf@sp,f
  2608                           
  2609                           ;doprnt.c: 542: continue;
  2610  03AC  2B8D               	goto	l2099
  2611  03AD                     l2055:	
  2612                           
  2613                           ;doprnt.c: 543: }
  2614                           ;doprnt.c: 548: flag = 0;
  2615  03AD  01B9               	clrf	sprintf@flag
  2616                           
  2617                           ;doprnt.c: 822: }
  2618                           
  2619                           ;doprnt.c: 813: continue;
  2620                           
  2621                           ;doprnt.c: 802: default:
  2622                           
  2623                           ;doprnt.c: 698: case 'i':
  2624                           ;doprnt.c: 699: break;
  2625                           
  2626                           ;doprnt.c: 697: case 'd':
  2627                           
  2628                           ;doprnt.c: 638: goto alldone;
  2629                           
  2630                           ;doprnt.c: 637: case 0:
  2631                           
  2632                           ;doprnt.c: 635: switch(c = *f++) {
  2633  03AE  3001               	movlw	1
  2634  03AF  07A8               	addwf	sprintf@f,f
  2635  03B0  30FF               	movlw	-1
  2636  03B1  0728               	addwf	sprintf@f,w
  2637  03B2  0084               	movwf	4
  2638  03B3  120A  118A  260A  120A  118A  	fcall	stringdir
  2639  03B8  00BE               	movwf	sprintf@c
  2640                           
  2641                           ; Switch size 1, requested type "space"
  2642                           ; Number of cases is 3, Range of values is 0 to 105
  2643                           ; switch strategies available:
  2644                           ; Name         Instructions Cycles
  2645                           ; simple_byte           10     6 (average)
  2646                           ; jumptable            260     6 (fixed)
  2647                           ;	Chosen strategy is simple_byte
  2648  03B9  3A00               	xorlw	0	; case 0
  2649  03BA  1903               	skipnz
  2650  03BB  2C57               	goto	l2101
  2651  03BC  3A64               	xorlw	100	; case 100
  2652  03BD  1903               	skipnz
  2653  03BE  2BC3               	goto	l2061
  2654  03BF  3A0D               	xorlw	13	; case 105
  2655  03C0  1903               	skipnz
  2656  03C1  2BC3               	goto	l2061
  2657  03C2  2B8D               	goto	l2099
  2658  03C3                     l2061:	
  2659                           
  2660                           ;doprnt.c: 1253: {
  2661                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2662  03C3  0838               	movf	sprintf@ap,w
  2663  03C4  0084               	movwf	4
  2664  03C5  1383               	bcf	3,7	;select IRP bank0
  2665  03C6  0800               	movf	0,w
  2666  03C7  00BB               	movwf	sprintf@val
  2667  03C8  0A84               	incf	4,f
  2668  03C9  0800               	movf	0,w
  2669  03CA  00BC               	movwf	sprintf@val+1
  2670  03CB  3002               	movlw	2
  2671  03CC  00B5               	movwf	??_sprintf
  2672  03CD  0835               	movf	??_sprintf,w
  2673  03CE  07B8               	addwf	sprintf@ap,f
  2674                           
  2675                           ;doprnt.c: 1261: if((int)val < 0) {
  2676  03CF  1FBC               	btfss	sprintf@val+1,7
  2677  03D0  2BDA               	goto	l2071
  2678                           
  2679                           ;doprnt.c: 1262: flag |= 0x03;
  2680  03D1  3003               	movlw	3
  2681  03D2  00B5               	movwf	??_sprintf
  2682  03D3  0835               	movf	??_sprintf,w
  2683  03D4  04B9               	iorwf	sprintf@flag,f
  2684                           
  2685                           ;doprnt.c: 1263: val = -val;
  2686  03D5  09BB               	comf	sprintf@val,f
  2687  03D6  09BC               	comf	sprintf@val+1,f
  2688  03D7  0ABB               	incf	sprintf@val,f
  2689  03D8  1903               	skipnz
  2690  03D9  0ABC               	incf	sprintf@val+1,f
  2691  03DA                     l2071:	
  2692                           
  2693                           ;doprnt.c: 1264: }
  2694                           ;doprnt.c: 1266: }
  2695                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2696  03DA  01BE               	clrf	sprintf@c
  2697  03DB  0ABE               	incf	sprintf@c,f
  2698  03DC  3005               	movlw	5
  2699  03DD  063E               	xorwf	sprintf@c,w
  2700  03DE  1903               	btfsc	3,2
  2701  03DF  2C01               	goto	l2083
  2702  03E0                     l2077:	
  2703                           
  2704                           ;doprnt.c: 1306: if(val < dpowers[c])
  2705  03E0  083E               	movf	sprintf@c,w
  2706  03E1  00B5               	movwf	??_sprintf
  2707  03E2  0735               	addwf	??_sprintf,w
  2708  03E3  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2709  03E4  0084               	movwf	4
  2710  03E5  120A  118A  260A  120A  118A  	fcall	stringdir
  2711  03EA  00B6               	movwf	??_sprintf+1
  2712  03EB  120A  118A  260A  120A  118A  	fcall	stringdir
  2713  03F0  00B7               	movwf	??_sprintf+2
  2714  03F1  0837               	movf	??_sprintf+2,w
  2715  03F2  023C               	subwf	sprintf@val+1,w
  2716  03F3  1D03               	skipz
  2717  03F4  2BF7               	goto	u1985
  2718  03F5  0836               	movf	??_sprintf+1,w
  2719  03F6  023B               	subwf	sprintf@val,w
  2720  03F7                     u1985:	
  2721  03F7  1C03               	btfss	3,0
  2722  03F8  2C01               	goto	l2083
  2723                           
  2724                           ;doprnt.c: 1307: break;
  2725  03F9  3001               	movlw	1
  2726  03FA  00B5               	movwf	??_sprintf
  2727  03FB  0835               	movf	??_sprintf,w
  2728  03FC  07BE               	addwf	sprintf@c,f
  2729  03FD  3005               	movlw	5
  2730  03FE  063E               	xorwf	sprintf@c,w
  2731  03FF  1D03               	btfss	3,2
  2732  0400  2BE0               	goto	l2077
  2733  0401                     l2083:	
  2734                           
  2735                           ;doprnt.c: 1422: {
  2736                           ;doprnt.c: 1438: if(flag & 0x03)
  2737  0401  0839               	movf	sprintf@flag,w
  2738  0402  3903               	andlw	3
  2739  0403  1903               	btfsc	3,2
  2740  0404  2C10               	goto	l2089
  2741                           
  2742                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2743  0405  302D               	movlw	45
  2744  0406  00B5               	movwf	??_sprintf
  2745  0407  083D               	movf	sprintf@sp,w
  2746  0408  0084               	movwf	4
  2747  0409  0835               	movf	??_sprintf,w
  2748  040A  1383               	bcf	3,7	;select IRP bank0
  2749  040B  0080               	movwf	0
  2750  040C  3001               	movlw	1
  2751  040D  00B5               	movwf	??_sprintf
  2752  040E  0835               	movf	??_sprintf,w
  2753  040F  07BD               	addwf	sprintf@sp,f
  2754  0410                     l2089:	
  2755                           
  2756                           ;doprnt.c: 1469: }
  2757                           ;doprnt.c: 1472: prec = c;
  2758  0410  083E               	movf	sprintf@c,w
  2759  0411  00B5               	movwf	??_sprintf
  2760  0412  0835               	movf	??_sprintf,w
  2761  0413  00BA               	movwf	sprintf@prec
  2762  0414                     l2097:	
  2763                           ;doprnt.c: 1474: while(prec--) {
  2764                           
  2765  0414  30FF               	movlw	255
  2766  0415  00B5               	movwf	??_sprintf
  2767  0416  0835               	movf	??_sprintf,w
  2768  0417  07BA               	addwf	sprintf@prec,f
  2769  0418  0A3A               	incf	sprintf@prec,w
  2770  0419  1903               	btfsc	3,2
  2771  041A  2B8D               	goto	l2099
  2772                           
  2773                           ;doprnt.c: 1478: {
  2774                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2775  041B  300A               	movlw	10
  2776  041C  00A3               	movwf	___lwmod@divisor
  2777  041D  3000               	movlw	0
  2778  041E  00A4               	movwf	___lwmod@divisor+1
  2779  041F  083A               	movf	sprintf@prec,w
  2780  0420  00B5               	movwf	??_sprintf
  2781  0421  0735               	addwf	??_sprintf,w
  2782  0422  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2783  0423  0084               	movwf	4
  2784  0424  120A  118A  260A  120A  118A  	fcall	stringdir
  2785  0429  00F4               	movwf	___lwdiv@divisor
  2786  042A  120A  118A  260A  120A  118A  	fcall	stringdir
  2787  042F  00F5               	movwf	___lwdiv@divisor+1
  2788  0430  083C               	movf	sprintf@val+1,w
  2789  0431  00F7               	movwf	___lwdiv@dividend+1
  2790  0432  083B               	movf	sprintf@val,w
  2791  0433  00F6               	movwf	___lwdiv@dividend
  2792  0434  120A  158A  25CA  120A  118A  	fcall	___lwdiv
  2793  0439  0875               	movf	?___lwdiv+1,w
  2794  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2795  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2796  043C  00A6               	movwf	___lwmod@dividend+1
  2797  043D  0874               	movf	?___lwdiv,w
  2798  043E  00A5               	movwf	___lwmod@dividend
  2799  043F  120A  158A  2558  120A  118A  	fcall	___lwmod
  2800  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2801  0445  1303               	bcf	3,6	;RP1=0, select bank0
  2802  0446  0823               	movf	?___lwmod,w
  2803  0447  3E30               	addlw	48
  2804  0448  00B6               	movwf	??_sprintf+1
  2805  0449  0836               	movf	??_sprintf+1,w
  2806  044A  00BE               	movwf	sprintf@c
  2807                           
  2808                           ;doprnt.c: 1523: }
  2809                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2810  044B  083E               	movf	sprintf@c,w
  2811  044C  00B5               	movwf	??_sprintf
  2812  044D  083D               	movf	sprintf@sp,w
  2813  044E  0084               	movwf	4
  2814  044F  0835               	movf	??_sprintf,w
  2815  0450  1383               	bcf	3,7	;select IRP bank0
  2816  0451  0080               	movwf	0
  2817  0452  3001               	movlw	1
  2818  0453  00B5               	movwf	??_sprintf
  2819  0454  0835               	movf	??_sprintf,w
  2820  0455  07BD               	addwf	sprintf@sp,f
  2821  0456  2C14               	goto	l2097
  2822  0457                     l2101:	
  2823                           ;doprnt.c: 1525: }
  2824                           ;doprnt.c: 1533: }
  2825                           ;doprnt.c: 1535: alldone:
  2826                           
  2827                           
  2828                           ;doprnt.c: 1538: *sp = 0;
  2829  0457  083D               	movf	sprintf@sp,w
  2830  0458  0084               	movwf	4
  2831  0459  1383               	bcf	3,7	;select IRP bank0
  2832  045A  0180               	clrf	0
  2833  045B  0008               	return
  2834  045C                     __end_of_sprintf:	
  2835                           ;doprnt.c: 1540: return 0;
  2836                           ;	Return value of _sprintf is never used
  2837                           
  2838                           
  2839                           	psect	text3
  2840  0D58                     __ptext3:	
  2841 ;; *************** function ___lwmod *****************
  2842 ;; Defined at:
  2843 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;  divisor         2    3[BANK0 ] unsigned int 
  2846 ;;  dividend        2    5[BANK0 ] unsigned int 
  2847 ;; Auto vars:     Size  Location     Type
  2848 ;;  counter         1    7[BANK0 ] unsigned char 
  2849 ;; Return value:  Size  Location     Type
  2850 ;;                  2    3[BANK0 ] unsigned int 
  2851 ;; Registers used:
  2852 ;;		wreg, status,2, status,0
  2853 ;; Tracked objects:
  2854 ;;		On entry : 0/0
  2855 ;;		On exit  : 0/0
  2856 ;;		Unchanged: 0/0
  2857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2858 ;;      Params:         0       4       0       0       0
  2859 ;;      Locals:         0       1       0       0       0
  2860 ;;      Temps:          1       0       0       0       0
  2861 ;;      Totals:         1       5       0       0       0
  2862 ;;Total ram usage:        6 bytes
  2863 ;; Hardware stack levels used:    1
  2864 ;; Hardware stack levels required when called:    1
  2865 ;; This function calls:
  2866 ;;		Nothing
  2867 ;; This function is called by:
  2868 ;;		_sprintf
  2869 ;; This function uses a non-reentrant model
  2870 ;;
  2871                           
  2872                           
  2873                           ;psect for function ___lwmod
  2874  0D58                     ___lwmod:	
  2875                           
  2876                           ;incstack = 0
  2877                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2878  0D58  1283               	bcf	3,5	;RP0=0, select bank0
  2879  0D59  1303               	bcf	3,6	;RP1=0, select bank0
  2880  0D5A  0823               	movf	___lwmod@divisor,w
  2881  0D5B  0424               	iorwf	___lwmod@divisor+1,w
  2882  0D5C  1903               	btfsc	3,2
  2883  0D5D  2D87               	goto	l2027
  2884  0D5E  01A7               	clrf	___lwmod@counter
  2885  0D5F  0AA7               	incf	___lwmod@counter,f
  2886  0D60                     l2017:	
  2887  0D60  1BA4               	btfsc	___lwmod@divisor+1,7
  2888  0D61  2D6E               	goto	l2019
  2889  0D62  3001               	movlw	1
  2890  0D63                     u1905:	
  2891  0D63  1003               	clrc
  2892  0D64  0DA3               	rlf	___lwmod@divisor,f
  2893  0D65  0DA4               	rlf	___lwmod@divisor+1,f
  2894  0D66  3EFF               	addlw	-1
  2895  0D67  1D03               	skipz
  2896  0D68  2D63               	goto	u1905
  2897  0D69  3001               	movlw	1
  2898  0D6A  00F9               	movwf	??___lwmod
  2899  0D6B  0879               	movf	??___lwmod,w
  2900  0D6C  07A7               	addwf	___lwmod@counter,f
  2901  0D6D  2D60               	goto	l2017
  2902  0D6E                     l2019:	
  2903  0D6E  0824               	movf	___lwmod@divisor+1,w
  2904  0D6F  0226               	subwf	___lwmod@dividend+1,w
  2905  0D70  1D03               	skipz
  2906  0D71  2D74               	goto	u1925
  2907  0D72  0823               	movf	___lwmod@divisor,w
  2908  0D73  0225               	subwf	___lwmod@dividend,w
  2909  0D74                     u1925:	
  2910  0D74  1C03               	skipc
  2911  0D75  2D7C               	goto	l2023
  2912  0D76  0823               	movf	___lwmod@divisor,w
  2913  0D77  02A5               	subwf	___lwmod@dividend,f
  2914  0D78  0824               	movf	___lwmod@divisor+1,w
  2915  0D79  1C03               	skipc
  2916  0D7A  03A6               	decf	___lwmod@dividend+1,f
  2917  0D7B  02A6               	subwf	___lwmod@dividend+1,f
  2918  0D7C                     l2023:	
  2919  0D7C  3001               	movlw	1
  2920  0D7D                     u1935:	
  2921  0D7D  1003               	clrc
  2922  0D7E  0CA4               	rrf	___lwmod@divisor+1,f
  2923  0D7F  0CA3               	rrf	___lwmod@divisor,f
  2924  0D80  3EFF               	addlw	-1
  2925  0D81  1D03               	skipz
  2926  0D82  2D7D               	goto	u1935
  2927  0D83  3001               	movlw	1
  2928  0D84  02A7               	subwf	___lwmod@counter,f
  2929  0D85  1D03               	btfss	3,2
  2930  0D86  2D6E               	goto	l2019
  2931  0D87                     l2027:	
  2932  0D87  0826               	movf	___lwmod@dividend+1,w
  2933  0D88  00A4               	movwf	?___lwmod+1
  2934  0D89  0825               	movf	___lwmod@dividend,w
  2935  0D8A  00A3               	movwf	?___lwmod
  2936  0D8B  0008               	return
  2937  0D8C                     __end_of___lwmod:	
  2938                           
  2939                           	psect	text4
  2940  0DCA                     __ptext4:	
  2941 ;; *************** function ___lwdiv *****************
  2942 ;; Defined at:
  2943 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;  divisor         2    4[COMMON] unsigned int 
  2946 ;;  dividend        2    6[COMMON] unsigned int 
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;  quotient        2    0[BANK0 ] unsigned int 
  2949 ;;  counter         1    2[BANK0 ] unsigned char 
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  2    4[COMMON] unsigned int 
  2952 ;; Registers used:
  2953 ;;		wreg, status,2, status,0
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2959 ;;      Params:         4       0       0       0       0
  2960 ;;      Locals:         0       3       0       0       0
  2961 ;;      Temps:          1       0       0       0       0
  2962 ;;      Totals:         5       3       0       0       0
  2963 ;;Total ram usage:        8 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:    1
  2966 ;; This function calls:
  2967 ;;		Nothing
  2968 ;; This function is called by:
  2969 ;;		_sprintf
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           
  2974                           ;psect for function ___lwdiv
  2975  0DCA                     ___lwdiv:	
  2976                           
  2977                           ;incstack = 0
  2978                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2979  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  2980  0DCB  1303               	bcf	3,6	;RP1=0, select bank0
  2981  0DCC  01A0               	clrf	___lwdiv@quotient
  2982  0DCD  01A1               	clrf	___lwdiv@quotient+1
  2983  0DCE  0874               	movf	___lwdiv@divisor,w
  2984  0DCF  0475               	iorwf	___lwdiv@divisor+1,w
  2985  0DD0  1903               	btfsc	3,2
  2986  0DD1  2E03               	goto	l2005
  2987  0DD2  01A2               	clrf	___lwdiv@counter
  2988  0DD3  0AA2               	incf	___lwdiv@counter,f
  2989  0DD4                     l1993:	
  2990  0DD4  1BF5               	btfsc	___lwdiv@divisor+1,7
  2991  0DD5  2DE2               	goto	l1995
  2992  0DD6  3001               	movlw	1
  2993  0DD7                     u1835:	
  2994  0DD7  1003               	clrc
  2995  0DD8  0DF4               	rlf	___lwdiv@divisor,f
  2996  0DD9  0DF5               	rlf	___lwdiv@divisor+1,f
  2997  0DDA  3EFF               	addlw	-1
  2998  0DDB  1D03               	skipz
  2999  0DDC  2DD7               	goto	u1835
  3000  0DDD  3001               	movlw	1
  3001  0DDE  00F8               	movwf	??___lwdiv
  3002  0DDF  0878               	movf	??___lwdiv,w
  3003  0DE0  07A2               	addwf	___lwdiv@counter,f
  3004  0DE1  2DD4               	goto	l1993
  3005  0DE2                     l1995:	
  3006  0DE2  3001               	movlw	1
  3007  0DE3                     u1855:	
  3008  0DE3  1003               	clrc
  3009  0DE4  0DA0               	rlf	___lwdiv@quotient,f
  3010  0DE5  0DA1               	rlf	___lwdiv@quotient+1,f
  3011  0DE6  3EFF               	addlw	-1
  3012  0DE7  1D03               	skipz
  3013  0DE8  2DE3               	goto	u1855
  3014  0DE9  0875               	movf	___lwdiv@divisor+1,w
  3015  0DEA  0277               	subwf	___lwdiv@dividend+1,w
  3016  0DEB  1D03               	skipz
  3017  0DEC  2DEF               	goto	u1865
  3018  0DED  0874               	movf	___lwdiv@divisor,w
  3019  0DEE  0276               	subwf	___lwdiv@dividend,w
  3020  0DEF                     u1865:	
  3021  0DEF  1C03               	skipc
  3022  0DF0  2DF8               	goto	l2001
  3023  0DF1  0874               	movf	___lwdiv@divisor,w
  3024  0DF2  02F6               	subwf	___lwdiv@dividend,f
  3025  0DF3  0875               	movf	___lwdiv@divisor+1,w
  3026  0DF4  1C03               	skipc
  3027  0DF5  03F7               	decf	___lwdiv@dividend+1,f
  3028  0DF6  02F7               	subwf	___lwdiv@dividend+1,f
  3029  0DF7  1420               	bsf	___lwdiv@quotient,0
  3030  0DF8                     l2001:	
  3031  0DF8  3001               	movlw	1
  3032  0DF9                     u1875:	
  3033  0DF9  1003               	clrc
  3034  0DFA  0CF5               	rrf	___lwdiv@divisor+1,f
  3035  0DFB  0CF4               	rrf	___lwdiv@divisor,f
  3036  0DFC  3EFF               	addlw	-1
  3037  0DFD  1D03               	skipz
  3038  0DFE  2DF9               	goto	u1875
  3039  0DFF  3001               	movlw	1
  3040  0E00  02A2               	subwf	___lwdiv@counter,f
  3041  0E01  1D03               	btfss	3,2
  3042  0E02  2DE2               	goto	l1995
  3043  0E03                     l2005:	
  3044  0E03  0821               	movf	___lwdiv@quotient+1,w
  3045  0E04  00F5               	movwf	?___lwdiv+1
  3046  0E05  0820               	movf	___lwdiv@quotient,w
  3047  0E06  00F4               	movwf	?___lwdiv
  3048  0E07  0008               	return
  3049  0E08                     __end_of___lwdiv:	
  3050                           
  3051                           	psect	text5
  3052  0CD3                     __ptext5:	
  3053 ;; *************** function _create_REG_ID_RQT_CMD *****************
  3054 ;; Defined at:
  3055 ;;		line 28 in file "reg_id.h"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;  pconn           1    wreg     PTR struct .
  3058 ;;		 -> NULL(0), client_conn(64), 
  3059 ;;  prqt            1   16[BANK0 ] PTR const struct .
  3060 ;;		 -> main@rqt(1), 
  3061 ;;  pmsg            1   17[BANK0 ] PTR struct .
  3062 ;;		 -> msg(23), 
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  pconn           1    9[COMMON] PTR struct .
  3065 ;;		 -> NULL(0), client_conn(64), 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      void 
  3068 ;; Registers used:
  3069 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3075 ;;      Params:         0       2       0       0       0
  3076 ;;      Locals:         1       0       0       0       0
  3077 ;;      Temps:          0       3       0       0       0
  3078 ;;      Totals:         1       5       0       0       0
  3079 ;;Total ram usage:        6 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    4
  3082 ;; This function calls:
  3083 ;;		_compose
  3084 ;; This function is called by:
  3085 ;;		_main
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           
  3090                           ;psect for function _create_REG_ID_RQT_CMD
  3091  0CD3                     _create_REG_ID_RQT_CMD:	
  3092                           
  3093                           ;incstack = 0
  3094                           ; Regs used in _create_REG_ID_RQT_CMD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  3095                           ;create_REG_ID_RQT_CMD@pconn stored from wreg
  3096  0CD3  00F9               	movwf	create_REG_ID_RQT_CMD@pconn
  3097                           
  3098                           ;reg_id.h: 30: compose(pmsg,
  3099                           ;reg_id.h: 31: pconn->from,
  3100                           ;reg_id.h: 32: pconn->to,
  3101                           ;reg_id.h: 33: pconn->msgid++,
  3102                           ;reg_id.h: 34: REG_ID_RQT,
  3103                           ;reg_id.h: 35: (uint8_t *)prqt,
  3104                           ;reg_id.h: 36: 1);
  3105  0CD4  0879               	movf	create_REG_ID_RQT_CMD@pconn,w
  3106  0CD5  0084               	movwf	4
  3107  0CD6  1783               	bsf	3,7	;select IRP bank2
  3108  0CD7  0800               	movf	0,w
  3109  0CD8  1283               	bcf	3,5	;RP0=0, select bank0
  3110  0CD9  1303               	bcf	3,6	;RP1=0, select bank0
  3111  0CDA  00B2               	movwf	??_create_REG_ID_RQT_CMD
  3112  0CDB  0832               	movf	??_create_REG_ID_RQT_CMD,w
  3113  0CDC  00A4               	movwf	compose@from
  3114  0CDD  0A79               	incf	create_REG_ID_RQT_CMD@pconn,w
  3115  0CDE  0084               	movwf	4
  3116  0CDF  0800               	movf	0,w
  3117  0CE0  00B3               	movwf	??_create_REG_ID_RQT_CMD+1
  3118  0CE1  0833               	movf	??_create_REG_ID_RQT_CMD+1,w
  3119  0CE2  00A5               	movwf	compose@to
  3120  0CE3  0879               	movf	create_REG_ID_RQT_CMD@pconn,w
  3121  0CE4  3E02               	addlw	2
  3122  0CE5  0084               	movwf	4
  3123  0CE6  3001               	movlw	1
  3124  0CE7  0780               	addwf	0,f
  3125  0CE8  30FF               	movlw	-1
  3126  0CE9  0700               	addwf	0,w
  3127  0CEA  00B4               	movwf	??_create_REG_ID_RQT_CMD+2
  3128  0CEB  0834               	movf	??_create_REG_ID_RQT_CMD+2,w
  3129  0CEC  00A6               	movwf	compose@msgid
  3130  0CED  01A7               	clrf	compose@cmd
  3131  0CEE  0830               	movf	create_REG_ID_RQT_CMD@prqt,w
  3132  0CEF  00A8               	movwf	compose@data
  3133  0CF0  3000               	movlw	0
  3134  0CF1  00A9               	movwf	compose@data+1
  3135  0CF2  01AA               	clrf	compose@datalen
  3136  0CF3  0AAA               	incf	compose@datalen,f
  3137  0CF4  0831               	movf	create_REG_ID_RQT_CMD@pmsg,w
  3138  0CF5  120A  158A  26A1   	fcall	_compose
  3139  0CF8  0008               	return
  3140  0CF9                     __end_of_create_REG_ID_RQT_CMD:	
  3141                           
  3142                           	psect	text6
  3143  0EA1                     __ptext6:	
  3144 ;; *************** function _compose *****************
  3145 ;; Defined at:
  3146 ;;		line 54 in file "msg.h"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  pmsg            1    wreg     PTR struct .
  3149 ;;		 -> msg(23), 
  3150 ;;  from            1    4[BANK0 ] unsigned char 
  3151 ;;  to              1    5[BANK0 ] unsigned char 
  3152 ;;  msgid           1    6[BANK0 ] unsigned char 
  3153 ;;  cmd             1    7[BANK0 ] unsigned char 
  3154 ;;  data            2    8[BANK0 ] PTR unsigned char 
  3155 ;;		 -> main@rqt(1), STR_5(4), 
  3156 ;;  datalen         1   10[BANK0 ] unsigned char 
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  pmsg            1   15[BANK0 ] PTR struct .
  3159 ;;		 -> msg(23), 
  3160 ;;  len             2   13[BANK0 ] unsigned int 
  3161 ;; Return value:  Size  Location     Type
  3162 ;;                  1    wreg      void 
  3163 ;; Registers used:
  3164 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3170 ;;      Params:         0       7       0       0       0
  3171 ;;      Locals:         0       3       0       0       0
  3172 ;;      Temps:          0       2       0       0       0
  3173 ;;      Totals:         0      12       0       0       0
  3174 ;;Total ram usage:       12 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    3
  3177 ;; This function calls:
  3178 ;;		_crc_calculate
  3179 ;;		_memcpy
  3180 ;; This function is called by:
  3181 ;;		_create_REG_ID_RQT_CMD
  3182 ;;		_main
  3183 ;;		_create_REG_ID_RSP_CMD
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           
  3188                           ;psect for function _compose
  3189  0EA1                     _compose:	
  3190                           
  3191                           ;incstack = 0
  3192                           ; Regs used in _compose: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3193                           ;compose@pmsg stored from wreg
  3194  0EA1  1283               	bcf	3,5	;RP0=0, select bank0
  3195  0EA2  1303               	bcf	3,6	;RP1=0, select bank0
  3196  0EA3  00AF               	movwf	compose@pmsg
  3197                           
  3198                           ;msg.h: 62: register size_t len = datalen;
  3199  0EA4  082A               	movf	compose@datalen,w
  3200  0EA5  00AB               	movwf	??_compose
  3201  0EA6  01AC               	clrf	??_compose+1
  3202  0EA7  082B               	movf	??_compose,w
  3203  0EA8  00AD               	movwf	compose@len
  3204  0EA9  082C               	movf	??_compose+1,w
  3205  0EAA  00AE               	movwf	compose@len+1
  3206                           
  3207                           ;msg.h: 63: pmsg->from = from;
  3208  0EAB  0824               	movf	compose@from,w
  3209  0EAC  00AB               	movwf	??_compose
  3210  0EAD  082F               	movf	compose@pmsg,w
  3211  0EAE  3E03               	addlw	3
  3212  0EAF  0084               	movwf	4
  3213  0EB0  082B               	movf	??_compose,w
  3214  0EB1  1383               	bcf	3,7	;select IRP bank0
  3215  0EB2  0080               	movwf	0
  3216                           
  3217                           ;msg.h: 64: pmsg->to = to;
  3218  0EB3  0825               	movf	compose@to,w
  3219  0EB4  00AB               	movwf	??_compose
  3220  0EB5  082F               	movf	compose@pmsg,w
  3221  0EB6  3E04               	addlw	4
  3222  0EB7  0084               	movwf	4
  3223  0EB8  082B               	movf	??_compose,w
  3224  0EB9  0080               	movwf	0
  3225                           
  3226                           ;msg.h: 65: pmsg->msgid = msgid;
  3227  0EBA  0826               	movf	compose@msgid,w
  3228  0EBB  00AB               	movwf	??_compose
  3229  0EBC  082F               	movf	compose@pmsg,w
  3230  0EBD  3E05               	addlw	5
  3231  0EBE  0084               	movwf	4
  3232  0EBF  082B               	movf	??_compose,w
  3233  0EC0  0080               	movwf	0
  3234                           
  3235                           ;msg.h: 66: pmsg->cmd = cmd;
  3236  0EC1  0827               	movf	compose@cmd,w
  3237  0EC2  00AB               	movwf	??_compose
  3238  0EC3  082F               	movf	compose@pmsg,w
  3239  0EC4  3E06               	addlw	6
  3240  0EC5  0084               	movwf	4
  3241  0EC6  082B               	movf	??_compose,w
  3242  0EC7  0080               	movwf	0
  3243                           
  3244                           ;msg.h: 67: memcpy((void *)pmsg->data, (void *)data, len);
  3245  0EC8  0828               	movf	compose@data,w
  3246  0EC9  00F4               	movwf	memcpy@s1
  3247  0ECA  0829               	movf	compose@data+1,w
  3248  0ECB  00F5               	movwf	memcpy@s1+1
  3249  0ECC  082E               	movf	compose@len+1,w
  3250  0ECD  00F7               	movwf	memcpy@n+1
  3251  0ECE  082D               	movf	compose@len,w
  3252  0ECF  00F6               	movwf	memcpy@n
  3253  0ED0  082F               	movf	compose@pmsg,w
  3254  0ED1  3E07               	addlw	7
  3255  0ED2  120A  158A  24F9  120A  158A  	fcall	_memcpy
  3256                           
  3257                           ;msg.h: 68: pmsg->msglen = datalen + 7;
  3258  0ED7  1283               	bcf	3,5	;RP0=0, select bank0
  3259  0ED8  1303               	bcf	3,6	;RP1=0, select bank0
  3260  0ED9  082A               	movf	compose@datalen,w
  3261  0EDA  3E07               	addlw	7
  3262  0EDB  00AB               	movwf	??_compose
  3263  0EDC  082F               	movf	compose@pmsg,w
  3264  0EDD  0084               	movwf	4
  3265  0EDE  082B               	movf	??_compose,w
  3266  0EDF  1383               	bcf	3,7	;select IRP bank0
  3267  0EE0  0080               	movwf	0
  3268                           
  3269                           ;msg.h: 70: pmsg->crc = crc_calculate(pmsg);
  3270  0EE1  082F               	movf	compose@pmsg,w
  3271  0EE2  120A  118A  267F   	fcall	_crc_calculate
  3272  0EE5  1283               	bcf	3,5	;RP0=0, select bank0
  3273  0EE6  1303               	bcf	3,6	;RP1=0, select bank0
  3274  0EE7  0A2F               	incf	compose@pmsg,w
  3275  0EE8  0084               	movwf	4
  3276  0EE9  0874               	movf	?_crc_calculate,w
  3277  0EEA  1383               	bcf	3,7	;select IRP bank0
  3278  0EEB  0080               	movwf	0
  3279  0EEC  0A84               	incf	4,f
  3280  0EED  0875               	movf	?_crc_calculate+1,w
  3281  0EEE  0080               	movwf	0
  3282  0EEF  0008               	return
  3283  0EF0                     __end_of_compose:	
  3284                           
  3285                           	psect	text7
  3286  0CF9                     __ptext7:	
  3287 ;; *************** function _memcpy *****************
  3288 ;; Defined at:
  3289 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;  d1              1    wreg     PTR void 
  3292 ;;		 -> msg(23), 
  3293 ;;  s1              2    4[COMMON] PTR const void 
  3294 ;;		 -> main@rqt(1), STR_5(4), 
  3295 ;;  n               2    6[COMMON] unsigned int 
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;  d1              1    3[BANK0 ] PTR void 
  3298 ;;		 -> msg(23), 
  3299 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  3300 ;;		 -> main@rqt(1), STR_5(4), 
  3301 ;;  d               1    2[BANK0 ] PTR unsigned char 
  3302 ;;		 -> msg(23), 
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  1    wreg      PTR void 
  3305 ;; Registers used:
  3306 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3312 ;;      Params:         4       0       0       0       0
  3313 ;;      Locals:         0       4       0       0       0
  3314 ;;      Temps:          1       0       0       0       0
  3315 ;;      Totals:         5       4       0       0       0
  3316 ;;Total ram usage:        9 bytes
  3317 ;; Hardware stack levels used:    2
  3318 ;; Hardware stack levels required when called:    1
  3319 ;; This function calls:
  3320 ;;		Nothing
  3321 ;; This function is called by:
  3322 ;;		_compose
  3323 ;;		_extract_REG_ID_RQT_CMD
  3324 ;;		_extract_REG_ID_RSP_CMD
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _memcpy
  3330  0CF9                     _memcpy:	
  3331                           
  3332                           ;incstack = 0
  3333                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3334                           ;memcpy@d1 stored from wreg
  3335  0CF9  1283               	bcf	3,5	;RP0=0, select bank0
  3336  0CFA  1303               	bcf	3,6	;RP1=0, select bank0
  3337  0CFB  00A3               	movwf	memcpy@d1
  3338  0CFC  0874               	movf	memcpy@s1,w
  3339  0CFD  00A0               	movwf	memcpy@s
  3340  0CFE  0875               	movf	memcpy@s1+1,w
  3341  0CFF  00A1               	movwf	memcpy@s+1
  3342  0D00  0823               	movf	memcpy@d1,w
  3343  0D01  00F8               	movwf	??_memcpy
  3344  0D02  0878               	movf	??_memcpy,w
  3345  0D03  00A2               	movwf	memcpy@d
  3346  0D04                     l1845:	
  3347  0D04  3001               	movlw	1
  3348  0D05  02F6               	subwf	memcpy@n,f
  3349  0D06  3000               	movlw	0
  3350  0D07  1C03               	skipc
  3351  0D08  03F7               	decf	memcpy@n+1,f
  3352  0D09  02F7               	subwf	memcpy@n+1,f
  3353  0D0A  0A76               	incf	memcpy@n,w
  3354  0D0B  1903               	btfsc	3,2
  3355  0D0C  0A77               	incf	memcpy@n+1,w
  3356  0D0D  1903               	btfsc	3,2
  3357  0D0E  0008               	return
  3358  0D0F  0821               	movf	memcpy@s+1,w
  3359  0D10  00FF               	movwf	127
  3360  0D11  0820               	movf	memcpy@s,w
  3361  0D12  0084               	movwf	4
  3362  0D13  120A  118A  2600  120A  158A  	fcall	stringtab
  3363  0D18  00F8               	movwf	??_memcpy
  3364  0D19  0822               	movf	memcpy@d,w
  3365  0D1A  0084               	movwf	4
  3366  0D1B  0878               	movf	??_memcpy,w
  3367  0D1C  1383               	bcf	3,7	;select IRP bank0
  3368  0D1D  0080               	movwf	0
  3369  0D1E  3001               	movlw	1
  3370  0D1F  07A0               	addwf	memcpy@s,f
  3371  0D20  1803               	skipnc
  3372  0D21  0AA1               	incf	memcpy@s+1,f
  3373  0D22  3001               	movlw	1
  3374  0D23  00F8               	movwf	??_memcpy
  3375  0D24  0878               	movf	??_memcpy,w
  3376  0D25  07A2               	addwf	memcpy@d,f
  3377  0D26  2D04               	goto	l1845
  3378  0D27                     __end_of_memcpy:	
  3379                           ;	Return value of _memcpy is never used
  3380                           
  3381                           
  3382                           	psect	text8
  3383  067F                     __ptext8:	
  3384 ;; *************** function _crc_calculate *****************
  3385 ;; Defined at:
  3386 ;;		line 34 in file "msg.h"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;  pmsg            1    wreg     PTR struct .
  3389 ;;		 -> msg(23), 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;  pmsg            1    3[BANK0 ] PTR struct .
  3392 ;;		 -> msg(23), 
  3393 ;;  i               1    2[BANK0 ] unsigned char 
  3394 ;;  crc             2    0[BANK0 ] unsigned int 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  2    4[COMMON] unsigned int 
  3397 ;; Registers used:
  3398 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3404 ;;      Params:         2       0       0       0       0
  3405 ;;      Locals:         0       4       0       0       0
  3406 ;;      Temps:          3       0       0       0       0
  3407 ;;      Totals:         5       4       0       0       0
  3408 ;;Total ram usage:        9 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    1
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_compose
  3415 ;;		_crc_verify
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           
  3420                           ;psect for function _crc_calculate
  3421  067F                     _crc_calculate:	
  3422                           
  3423                           ;incstack = 0
  3424                           ; Regs used in _crc_calculate: [wreg-fsr0h+status,2+status,0]
  3425                           ;crc_calculate@pmsg stored from wreg
  3426  067F  1283               	bcf	3,5	;RP0=0, select bank0
  3427  0680  1303               	bcf	3,6	;RP1=0, select bank0
  3428  0681  00A3               	movwf	crc_calculate@pmsg
  3429                           
  3430                           ;msg.h: 36: uint16_t crc;
  3431                           ;msg.h: 37: crc = (uint8_t)pmsg->msglen;
  3432  0682  0823               	movf	crc_calculate@pmsg,w
  3433  0683  0084               	movwf	4
  3434  0684  1383               	bcf	3,7	;select IRP bank0
  3435  0685  0800               	movf	0,w
  3436  0686  00F6               	movwf	??_crc_calculate
  3437  0687  01F7               	clrf	??_crc_calculate+1
  3438  0688  0876               	movf	??_crc_calculate,w
  3439  0689  00A0               	movwf	crc_calculate@crc
  3440  068A  0877               	movf	??_crc_calculate+1,w
  3441  068B  00A1               	movwf	crc_calculate@crc+1
  3442                           
  3443                           ;msg.h: 38: crc += (uint8_t)pmsg->from;
  3444  068C  0823               	movf	crc_calculate@pmsg,w
  3445  068D  3E03               	addlw	3
  3446  068E  0084               	movwf	4
  3447  068F  0800               	movf	0,w
  3448  0690  00F6               	movwf	??_crc_calculate
  3449  0691  01F7               	clrf	??_crc_calculate+1
  3450  0692  0876               	movf	??_crc_calculate,w
  3451  0693  07A0               	addwf	crc_calculate@crc,f
  3452  0694  1803               	skipnc
  3453  0695  0AA1               	incf	crc_calculate@crc+1,f
  3454  0696  0877               	movf	??_crc_calculate+1,w
  3455  0697  07A1               	addwf	crc_calculate@crc+1,f
  3456                           
  3457                           ;msg.h: 39: crc += (uint8_t)pmsg->to;
  3458  0698  0823               	movf	crc_calculate@pmsg,w
  3459  0699  3E04               	addlw	4
  3460  069A  0084               	movwf	4
  3461  069B  0800               	movf	0,w
  3462  069C  00F6               	movwf	??_crc_calculate
  3463  069D  01F7               	clrf	??_crc_calculate+1
  3464  069E  0876               	movf	??_crc_calculate,w
  3465  069F  07A0               	addwf	crc_calculate@crc,f
  3466  06A0  1803               	skipnc
  3467  06A1  0AA1               	incf	crc_calculate@crc+1,f
  3468  06A2  0877               	movf	??_crc_calculate+1,w
  3469  06A3  07A1               	addwf	crc_calculate@crc+1,f
  3470                           
  3471                           ;msg.h: 40: crc += (uint8_t)pmsg->msgid;
  3472  06A4  0823               	movf	crc_calculate@pmsg,w
  3473  06A5  3E05               	addlw	5
  3474  06A6  0084               	movwf	4
  3475  06A7  0800               	movf	0,w
  3476  06A8  00F6               	movwf	??_crc_calculate
  3477  06A9  01F7               	clrf	??_crc_calculate+1
  3478  06AA  0876               	movf	??_crc_calculate,w
  3479  06AB  07A0               	addwf	crc_calculate@crc,f
  3480  06AC  1803               	skipnc
  3481  06AD  0AA1               	incf	crc_calculate@crc+1,f
  3482  06AE  0877               	movf	??_crc_calculate+1,w
  3483  06AF  07A1               	addwf	crc_calculate@crc+1,f
  3484                           
  3485                           ;msg.h: 41: crc += (uint8_t)pmsg->cmd;
  3486  06B0  0823               	movf	crc_calculate@pmsg,w
  3487  06B1  3E06               	addlw	6
  3488  06B2  0084               	movwf	4
  3489  06B3  0800               	movf	0,w
  3490  06B4  00F6               	movwf	??_crc_calculate
  3491  06B5  01F7               	clrf	??_crc_calculate+1
  3492  06B6  0876               	movf	??_crc_calculate,w
  3493  06B7  07A0               	addwf	crc_calculate@crc,f
  3494  06B8  1803               	skipnc
  3495  06B9  0AA1               	incf	crc_calculate@crc+1,f
  3496  06BA  0877               	movf	??_crc_calculate+1,w
  3497  06BB  07A1               	addwf	crc_calculate@crc+1,f
  3498                           
  3499                           ;msg.h: 43: for(uint8_t i = 0; i < pmsg->msglen - 7; i++)
  3500  06BC  01A2               	clrf	crc_calculate@i
  3501  06BD                     l1829:	
  3502  06BD  0823               	movf	crc_calculate@pmsg,w
  3503  06BE  0084               	movwf	4
  3504  06BF  0800               	movf	0,w
  3505  06C0  3EF9               	addlw	249
  3506  06C1  00F6               	movwf	??_crc_calculate
  3507  06C2  30FF               	movlw	255
  3508  06C3  1803               	skipnc
  3509  06C4  3000               	movlw	0
  3510  06C5  00F7               	movwf	??_crc_calculate+1
  3511  06C6  0877               	movf	??_crc_calculate+1,w
  3512  06C7  3A80               	xorlw	128
  3513  06C8  3C80               	sublw	128
  3514  06C9  1D03               	skipz
  3515  06CA  2ECD               	goto	u1535
  3516  06CB  0876               	movf	??_crc_calculate,w
  3517  06CC  0222               	subwf	crc_calculate@i,w
  3518  06CD                     u1535:	
  3519  06CD  1803               	btfsc	3,0
  3520  06CE  2EE6               	goto	l1831
  3521                           
  3522                           ;msg.h: 44: {
  3523                           ;msg.h: 45: crc += (uint8_t)pmsg->data[i];
  3524  06CF  1283               	bcf	3,5	;RP0=0, select bank0
  3525  06D0  1303               	bcf	3,6	;RP1=0, select bank0
  3526  06D1  0822               	movf	crc_calculate@i,w
  3527  06D2  3E07               	addlw	7
  3528  06D3  0723               	addwf	crc_calculate@pmsg,w
  3529  06D4  00F6               	movwf	??_crc_calculate
  3530  06D5  0876               	movf	??_crc_calculate,w
  3531  06D6  0084               	movwf	4
  3532  06D7  1383               	bcf	3,7	;select IRP bank0
  3533  06D8  0800               	movf	0,w
  3534  06D9  00F7               	movwf	??_crc_calculate+1
  3535  06DA  01F8               	clrf	??_crc_calculate+2
  3536  06DB  0877               	movf	??_crc_calculate+1,w
  3537  06DC  07A0               	addwf	crc_calculate@crc,f
  3538  06DD  1803               	skipnc
  3539  06DE  0AA1               	incf	crc_calculate@crc+1,f
  3540  06DF  0878               	movf	??_crc_calculate+2,w
  3541  06E0  07A1               	addwf	crc_calculate@crc+1,f
  3542  06E1  3001               	movlw	1
  3543  06E2  00F6               	movwf	??_crc_calculate
  3544  06E3  0876               	movf	??_crc_calculate,w
  3545  06E4  07A2               	addwf	crc_calculate@i,f
  3546  06E5  2EBD               	goto	l1829
  3547  06E6                     l1831:	
  3548                           
  3549                           ;msg.h: 46: }
  3550                           ;msg.h: 48: return crc;
  3551  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  3552  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  3553  06E8  0821               	movf	crc_calculate@crc+1,w
  3554  06E9  00F5               	movwf	?_crc_calculate+1
  3555  06EA  0820               	movf	crc_calculate@crc,w
  3556  06EB  00F4               	movwf	?_crc_calculate
  3557  06EC  0008               	return
  3558  06ED                     __end_of_crc_calculate:	
  3559                           
  3560                           	psect	text9
  3561  0C55                     __ptext9:	
  3562 ;; *************** function _ValueInc *****************
  3563 ;; Defined at:
  3564 ;;		line 62 in file "menu.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  1    wreg      void 
  3571 ;; Registers used:
  3572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3578 ;;      Params:         0       0       0       0       0
  3579 ;;      Locals:         0       0       0       0       0
  3580 ;;      Temps:          0       2       0       0       0
  3581 ;;      Totals:         0       2       0       0       0
  3582 ;;Total ram usage:        2 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    3
  3585 ;; This function calls:
  3586 ;;		_SaveMenuItem
  3587 ;; This function is called by:
  3588 ;;		_main
  3589 ;; This function uses a non-reentrant model
  3590 ;;
  3591                           
  3592                           
  3593                           ;psect for function _ValueInc
  3594  0C55                     _ValueInc:	
  3595                           
  3596                           ;menu.c: 64: g_menu.items[g_menu.index].value++;
  3597                           
  3598                           ;incstack = 0
  3599                           ; Regs used in _ValueInc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3600  0C55  3001               	movlw	1
  3601  0C56  1283               	bcf	3,5	;RP0=0, select bank0
  3602  0C57  1303               	bcf	3,6	;RP1=0, select bank0
  3603  0C58  00A0               	movwf	??_ValueInc
  3604  0C59  1683               	bsf	3,5	;RP0=1, select bank1
  3605  0C5A  1303               	bcf	3,6	;RP1=0, select bank1
  3606  0C5B  0828               	movf	(_g_menu^(0+128)+8),w
  3607  0C5C  1283               	bcf	3,5	;RP0=0, select bank0
  3608  0C5D  1303               	bcf	3,6	;RP1=0, select bank0
  3609  0C5E  00A1               	movwf	??_ValueInc+1
  3610  0C5F  0721               	addwf	??_ValueInc+1,w
  3611  0C60  3EA0               	addlw	(low (_g_menu| 0))& (0+255)
  3612  0C61  0084               	movwf	4
  3613  0C62  0820               	movf	??_ValueInc,w
  3614  0C63  1383               	bcf	3,7	;select IRP bank1
  3615  0C64  0780               	addwf	0,f
  3616                           
  3617                           ;menu.c: 65: SaveMenuItem(g_menu.index);
  3618  0C65  1683               	bsf	3,5	;RP0=1, select bank1
  3619  0C66  1303               	bcf	3,6	;RP1=0, select bank1
  3620  0C67  0828               	movf	(_g_menu^(0+128)+8),w
  3621  0C68  120A  158A  2410   	fcall	_SaveMenuItem
  3622  0C6B  0008               	return
  3623  0C6C                     __end_of_ValueInc:	
  3624                           
  3625                           	psect	text10
  3626  05ED                     __ptext10:	
  3627 ;; *************** function _ValueDec *****************
  3628 ;; Defined at:
  3629 ;;		line 67 in file "menu.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;		None
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;		None
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  2   81[None  ] int 
  3636 ;; Registers used:
  3637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3643 ;;      Params:         0       0       0       0       0
  3644 ;;      Locals:         0       0       0       0       0
  3645 ;;      Temps:          0       1       0       0       0
  3646 ;;      Totals:         0       1       0       0       0
  3647 ;;Total ram usage:        1 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    3
  3650 ;; This function calls:
  3651 ;;		_SaveMenuItem
  3652 ;; This function is called by:
  3653 ;;		_main
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           
  3658                           ;psect for function _ValueDec
  3659  05ED                     _ValueDec:	
  3660                           
  3661                           ;menu.c: 69: g_menu.items[g_menu.index].value--;
  3662                           
  3663                           ;incstack = 0
  3664                           ; Regs used in _ValueDec: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3665  05ED  1683               	bsf	3,5	;RP0=1, select bank1
  3666  05EE  1303               	bcf	3,6	;RP1=0, select bank1
  3667  05EF  0828               	movf	(_g_menu^(0+128)+8),w
  3668  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  3669  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  3670  05F2  00A0               	movwf	??_ValueDec
  3671  05F3  0720               	addwf	??_ValueDec,w
  3672  05F4  3EA0               	addlw	(low (_g_menu| 0))& (0+255)
  3673  05F5  0084               	movwf	4
  3674  05F6  3001               	movlw	1
  3675  05F7  1383               	bcf	3,7	;select IRP bank1
  3676  05F8  0280               	subwf	0,f
  3677                           
  3678                           ;menu.c: 70: SaveMenuItem(g_menu.index);
  3679  05F9  1683               	bsf	3,5	;RP0=1, select bank1
  3680  05FA  1303               	bcf	3,6	;RP1=0, select bank1
  3681  05FB  0828               	movf	(_g_menu^(0+128)+8),w
  3682  05FC  120A  158A  2410   	fcall	_SaveMenuItem
  3683  05FF  0008               	return
  3684  0600                     __end_of_ValueDec:	
  3685                           
  3686                           	psect	text11
  3687  0C10                     __ptext11:	
  3688 ;; *************** function _SaveMenuItem *****************
  3689 ;; Defined at:
  3690 ;;		line 32 in file "menu.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  item            1    wreg     unsigned char 
  3693 ;; Auto vars:     Size  Location     Type
  3694 ;;  item            1    9[COMMON] unsigned char 
  3695 ;; Return value:  Size  Location     Type
  3696 ;;                  1    wreg      void 
  3697 ;; Registers used:
  3698 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3699 ;; Tracked objects:
  3700 ;;		On entry : 0/0
  3701 ;;		On exit  : 0/0
  3702 ;;		Unchanged: 0/0
  3703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3704 ;;      Params:         0       0       0       0       0
  3705 ;;      Locals:         1       0       0       0       0
  3706 ;;      Temps:          2       0       0       0       0
  3707 ;;      Totals:         3       0       0       0       0
  3708 ;;Total ram usage:        3 bytes
  3709 ;; Hardware stack levels used:    1
  3710 ;; Hardware stack levels required when called:    2
  3711 ;; This function calls:
  3712 ;;		_eeprom_write
  3713 ;; This function is called by:
  3714 ;;		_ValueInc
  3715 ;;		_ValueDec
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           
  3720                           ;psect for function _SaveMenuItem
  3721  0C10                     _SaveMenuItem:	
  3722                           
  3723                           ;incstack = 0
  3724                           ; Regs used in _SaveMenuItem: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3725                           ;SaveMenuItem@item stored from wreg
  3726  0C10  00F9               	movwf	SaveMenuItem@item
  3727                           
  3728                           ;menu.c: 34: eeprom_write(item, g_menu.items[item].value);
  3729  0C11  0879               	movf	SaveMenuItem@item,w
  3730  0C12  00F7               	movwf	??_SaveMenuItem
  3731  0C13  0777               	addwf	??_SaveMenuItem,w
  3732  0C14  3EA0               	addlw	(low (_g_menu| 0))& (0+255)
  3733  0C15  0084               	movwf	4
  3734  0C16  1383               	bcf	3,7	;select IRP bank1
  3735  0C17  0800               	movf	0,w
  3736  0C18  00F8               	movwf	??_SaveMenuItem+1
  3737  0C19  0878               	movf	??_SaveMenuItem+1,w
  3738  0C1A  00F4               	movwf	eeprom_write@value
  3739  0C1B  0879               	movf	SaveMenuItem@item,w
  3740  0C1C  120A  158A  24AD   	fcall	_eeprom_write
  3741  0C1F  0008               	return
  3742  0C20                     __end_of_SaveMenuItem:	
  3743                           
  3744                           	psect	text12
  3745  0CAD                     __ptext12:	
  3746 ;; *************** function _eeprom_write *****************
  3747 ;; Defined at:
  3748 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eewrite.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;  addr            1    wreg     unsigned char 
  3751 ;;  value           1    4[COMMON] unsigned char 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  addr            1    6[COMMON] unsigned char 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      void 
  3756 ;; Registers used:
  3757 ;;		wreg, status,2, status,0
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3763 ;;      Params:         1       0       0       0       0
  3764 ;;      Locals:         1       0       0       0       0
  3765 ;;      Temps:          1       0       0       0       0
  3766 ;;      Totals:         3       0       0       0       0
  3767 ;;Total ram usage:        3 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    1
  3770 ;; This function calls:
  3771 ;;		Nothing
  3772 ;; This function is called by:
  3773 ;;		_SaveMenuItem
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           
  3778                           ;psect for function _eeprom_write
  3779  0CAD                     _eeprom_write:	
  3780                           
  3781                           ;incstack = 0
  3782                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  3783                           ;eeprom_write@addr stored from wreg
  3784  0CAD  00F6               	movwf	eeprom_write@addr
  3785  0CAE                     l385:	
  3786  0CAE  1683               	bsf	3,5	;RP0=1, select bank3
  3787  0CAF  1703               	bsf	3,6	;RP1=1, select bank3
  3788  0CB0  188C               	btfsc	12,1	;volsfr
  3789  0CB1  2CAE               	goto	l385
  3790  0CB2  0876               	movf	eeprom_write@addr,w
  3791  0CB3  1283               	bcf	3,5	;RP0=0, select bank2
  3792  0CB4  1703               	bsf	3,6	;RP1=1, select bank2
  3793  0CB5  008D               	movwf	13	;volatile
  3794  0CB6  0874               	movf	eeprom_write@value,w
  3795  0CB7  008C               	movwf	12	;volatile
  3796  0CB8  303F               	movlw	63
  3797  0CB9  00F5               	movwf	??_eeprom_write
  3798  0CBA  0875               	movf	??_eeprom_write,w
  3799  0CBB  1683               	bsf	3,5	;RP0=1, select bank3
  3800  0CBC  1703               	bsf	3,6	;RP1=1, select bank3
  3801  0CBD  058C               	andwf	12,f	;volsfr
  3802  0CBE  1283               	bcf	3,5	;RP0=0, select bank0
  3803  0CBF  1303               	bcf	3,6	;RP1=0, select bank0
  3804  0CC0  1003               	bcf	3,0	;volatile
  3805  0CC1  1B8B               	btfsc	11,7	;volatile
  3806  0CC2  1403               	bsf	3,0	;volatile
  3807  0CC3  138B               	bcf	11,7	;volatile
  3808  0CC4  1683               	bsf	3,5	;RP0=1, select bank3
  3809  0CC5  1703               	bsf	3,6	;RP1=1, select bank3
  3810  0CC6  150C               	bsf	12,2	;volsfr
  3811  0CC7  3055               	movlw	85
  3812  0CC8  008D               	movwf	13	;volsfr
  3813  0CC9  30AA               	movlw	170
  3814  0CCA  008D               	movwf	13	;volsfr
  3815  0CCB  148C               	bsf	12,1	;volsfr
  3816  0CCC  110C               	bcf	12,2	;volsfr
  3817  0CCD  1283               	bcf	3,5	;RP0=0, select bank0
  3818  0CCE  1303               	bcf	3,6	;RP1=0, select bank0
  3819  0CCF  1C03               	btfss	3,0	;volatile
  3820  0CD0  0008               	return
  3821  0CD1  178B               	bsf	11,7	;volatile
  3822  0CD2  0008               	return
  3823  0CD3                     __end_of_eeprom_write:	
  3824                           
  3825                           	psect	text13
  3826  0FA2                     __ptext13:	
  3827 ;; *************** function _ShowMenu *****************
  3828 ;; Defined at:
  3829 ;;		line 23 in file "menu.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;		None
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;  i               1   25[BANK0 ] char 
  3834 ;;  count           1   24[BANK0 ] char 
  3835 ;; Return value:  Size  Location     Type
  3836 ;;                  1    wreg      void 
  3837 ;; Registers used:
  3838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3839 ;; Tracked objects:
  3840 ;;		On entry : 0/0
  3841 ;;		On exit  : 0/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3844 ;;      Params:         0       0       0       0       0
  3845 ;;      Locals:         0       2       0       0       0
  3846 ;;      Temps:          0       4       0       0       0
  3847 ;;      Totals:         0       6       0       0       0
  3848 ;;Total ram usage:        6 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; Hardware stack levels required when called:    4
  3851 ;; This function calls:
  3852 ;;		_LCDByte
  3853 ;;		_LCDGotoXY
  3854 ;;		_LCDWriteInt
  3855 ;;		_LCDWriteString
  3856 ;; This function is called by:
  3857 ;;		_main
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           
  3862                           ;psect for function _ShowMenu
  3863  0FA2                     _ShowMenu:	
  3864                           
  3865                           ;menu.c: 25: { LCDGotoXY(0,0); int8_t count = LCDWriteString(g_menu.items[g_menu.index].
      +                          name); for(int8_t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };
  3866                           
  3867                           ;incstack = 0
  3868                           ; Regs used in _ShowMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3869  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  3870  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  3871  0FA4  01A6               	clrf	LCDGotoXY@y
  3872  0FA5  3000               	movlw	0
  3873  0FA6  120A  158A  2487  120A  158A  	fcall	_LCDGotoXY
  3874  0FAB  1403               	setc
  3875  0FAC  1683               	bsf	3,5	;RP0=1, select bank1
  3876  0FAD  1303               	bcf	3,6	;RP1=0, select bank1
  3877  0FAE  0D28               	rlf	(_g_menu^(0+128)+8),w
  3878  0FAF  3EA0               	addlw	(low (_g_menu| 0))& (0+255)
  3879  0FB0  0084               	movwf	4
  3880  0FB1  1383               	bcf	3,7	;select IRP bank1
  3881  0FB2  0800               	movf	0,w
  3882  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  3883  0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  3884  0FB5  00A6               	movwf	LCDWriteString@msg
  3885  0FB6  3000               	movlw	0
  3886  0FB7  1D03               	btfss	3,2
  3887  0FB8  3080               	movlw	128
  3888  0FB9  00A7               	movwf	LCDWriteString@msg+1
  3889  0FBA  120A  118A  258B  120A  158A  	fcall	_LCDWriteString
  3890  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  3891  0FC0  1303               	bcf	3,6	;RP1=0, select bank0
  3892  0FC1  00B4               	movwf	??_ShowMenu
  3893  0FC2  0834               	movf	??_ShowMenu,w
  3894  0FC3  00B8               	movwf	ShowMenu@count
  3895  0FC4  0838               	movf	ShowMenu@count,w
  3896  0FC5  00B4               	movwf	??_ShowMenu
  3897  0FC6  0834               	movf	??_ShowMenu,w
  3898  0FC7  00B9               	movwf	ShowMenu@i
  3899  0FC8  0839               	movf	ShowMenu@i,w
  3900  0FC9  3A80               	xorlw	128
  3901  0FCA  3E70               	addlw	-144
  3902  0FCB  1803               	btfsc	3,0
  3903  0FCC  2FE0               	goto	l2329
  3904  0FCD                     l2323:	
  3905  0FCD  01F9               	clrf	LCDByte@isdata
  3906  0FCE  0AF9               	incf	LCDByte@isdata,f
  3907  0FCF  3020               	movlw	32
  3908  0FD0  120A  158A  26F0  120A  158A  	fcall	_LCDByte
  3909  0FD5  3001               	movlw	1
  3910  0FD6  1283               	bcf	3,5	;RP0=0, select bank0
  3911  0FD7  1303               	bcf	3,6	;RP1=0, select bank0
  3912  0FD8  00B4               	movwf	??_ShowMenu
  3913  0FD9  0834               	movf	??_ShowMenu,w
  3914  0FDA  07B9               	addwf	ShowMenu@i,f
  3915  0FDB  0839               	movf	ShowMenu@i,w
  3916  0FDC  3A80               	xorlw	128
  3917  0FDD  3E70               	addlw	-144
  3918  0FDE  1C03               	skipc
  3919  0FDF  2FCD               	goto	l2323
  3920  0FE0                     l2329:	
  3921                           
  3922                           ;menu.c: 26: { LCDGotoXY(4,0); LCDWriteInt(g_menu.items[g_menu.index].value,3);};
  3923  0FE0  01A6               	clrf	LCDGotoXY@y
  3924  0FE1  3004               	movlw	4
  3925  0FE2  120A  158A  2487  120A  158A  	fcall	_LCDGotoXY
  3926  0FE7  1683               	bsf	3,5	;RP0=1, select bank1
  3927  0FE8  1303               	bcf	3,6	;RP1=0, select bank1
  3928  0FE9  0828               	movf	(_g_menu^(0+128)+8),w
  3929  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  3930  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  3931  0FEC  00B4               	movwf	??_ShowMenu
  3932  0FED  0734               	addwf	??_ShowMenu,w
  3933  0FEE  3EA0               	addlw	(low (_g_menu| 0))& (0+255)
  3934  0FEF  0084               	movwf	4
  3935  0FF0  1383               	bcf	3,7	;select IRP bank1
  3936  0FF1  0800               	movf	0,w
  3937  0FF2  00B5               	movwf	??_ShowMenu+1
  3938  0FF3  01B6               	clrf	??_ShowMenu+2
  3939  0FF4  0835               	movf	??_ShowMenu+1,w
  3940  0FF5  00A6               	movwf	LCDWriteInt@val
  3941  0FF6  0836               	movf	??_ShowMenu+2,w
  3942  0FF7  00A7               	movwf	LCDWriteInt@val+1
  3943  0FF8  3003               	movlw	3
  3944  0FF9  00B7               	movwf	??_ShowMenu+3
  3945  0FFA  0837               	movf	??_ShowMenu+3,w
  3946  0FFB  00A8               	movwf	LCDWriteInt@field_length
  3947  0FFC  120A  118A  245C   	fcall	_LCDWriteInt
  3948  0FFF  0008               	return
  3949  1000                     __end_of_ShowMenu:	
  3950                           
  3951                           	psect	text14
  3952  045C                     __ptext14:	
  3953 ;; *************** function _LCDWriteInt *****************
  3954 ;; Defined at:
  3955 ;;		line 328 in file "lcd_hd44780_pic16.c"
  3956 ;; Parameters:    Size  Location     Type
  3957 ;;  val             2    6[BANK0 ] int 
  3958 ;;  field_length    1    8[BANK0 ] char 
  3959 ;; Auto vars:     Size  Location     Type
  3960 ;;  str             5   11[BANK0 ] unsigned char [5]
  3961 ;;  i               2   18[BANK0 ] int 
  3962 ;;  j               2   16[BANK0 ] int 
  3963 ;; Return value:  Size  Location     Type
  3964 ;;                  1    wreg      char 
  3965 ;; Registers used:
  3966 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3972 ;;      Params:         0       3       0       0       0
  3973 ;;      Locals:         0       9       0       0       0
  3974 ;;      Temps:          0       2       0       0       0
  3975 ;;      Totals:         0      14       0       0       0
  3976 ;;Total ram usage:       14 bytes
  3977 ;; Hardware stack levels used:    1
  3978 ;; Hardware stack levels required when called:    3
  3979 ;; This function calls:
  3980 ;;		_LCDByte
  3981 ;;		___awdiv
  3982 ;;		___awmod
  3983 ;; This function is called by:
  3984 ;;		_ShowMenu
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           
  3989                           ;psect for function _LCDWriteInt
  3990  045C                     _LCDWriteInt:	
  3991                           
  3992                           ;lcd_hd44780_pic16.c: 330: char str[5]={-16,-16,-16,-16,-16};
  3993                           
  3994                           ;incstack = 0
  3995                           ; Regs used in _LCDWriteInt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3996  045C  302B               	movlw	LCDWriteInt@str& (0+255)
  3997  045D  0084               	movwf	4
  3998  045E  1683               	bsf	3,5	;RP0=1, select bank1
  3999  045F  1303               	bcf	3,6	;RP1=0, select bank1
  4000  0460  0865               	movf	LCDWriteInt@F1646^(0+128),w
  4001  0461  1383               	bcf	3,7	;select IRP bank0
  4002  0462  0080               	movwf	0
  4003  0463  0A84               	incf	4,f
  4004  0464  0866               	movf	(LCDWriteInt@F1646^(0+128)+1),w
  4005  0465  0080               	movwf	0
  4006  0466  0A84               	incf	4,f
  4007  0467  0867               	movf	(LCDWriteInt@F1646^(0+128)+2),w
  4008  0468  0080               	movwf	0
  4009  0469  0A84               	incf	4,f
  4010  046A  0868               	movf	(LCDWriteInt@F1646^(0+128)+3),w
  4011  046B  0080               	movwf	0
  4012  046C  0A84               	incf	4,f
  4013  046D  0869               	movf	(LCDWriteInt@F1646^(0+128)+4),w
  4014  046E  0080               	movwf	0
  4015                           
  4016                           ;lcd_hd44780_pic16.c: 331: int i=4,j=0;
  4017  046F  3004               	movlw	4
  4018  0470  1283               	bcf	3,5	;RP0=0, select bank0
  4019  0471  1303               	bcf	3,6	;RP1=0, select bank0
  4020  0472  00B2               	movwf	LCDWriteInt@i
  4021  0473  3000               	movlw	0
  4022  0474  00B3               	movwf	LCDWriteInt@i+1
  4023  0475  01B0               	clrf	LCDWriteInt@j
  4024  0476  01B1               	clrf	LCDWriteInt@j+1
  4025                           
  4026                           ;lcd_hd44780_pic16.c: 333: if(val == 0)
  4027  0477  0826               	movf	LCDWriteInt@val,w
  4028  0478  0427               	iorwf	LCDWriteInt@val+1,w
  4029  0479  1903               	btfsc	3,2
  4030                           
  4031                           ;lcd_hd44780_pic16.c: 334: {
  4032                           ;lcd_hd44780_pic16.c: 335: str[4] = 0;
  4033  047A  01AF               	clrf	LCDWriteInt@str+4
  4034                           
  4035                           ;lcd_hd44780_pic16.c: 336: }
  4036                           ;lcd_hd44780_pic16.c: 338: if(val<0)
  4037  047B  1FA7               	btfss	LCDWriteInt@val+1,7
  4038  047C  2C8C               	goto	l2177
  4039                           
  4040                           ;lcd_hd44780_pic16.c: 339: {
  4041                           ;lcd_hd44780_pic16.c: 340: (LCDByte('-',1));
  4042  047D  01F9               	clrf	LCDByte@isdata
  4043  047E  0AF9               	incf	LCDByte@isdata,f
  4044  047F  302D               	movlw	45
  4045  0480  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  4046                           
  4047                           ;lcd_hd44780_pic16.c: 341: val=val*-1;
  4048  0485  1283               	bcf	3,5	;RP0=0, select bank0
  4049  0486  1303               	bcf	3,6	;RP1=0, select bank0
  4050  0487  09A6               	comf	LCDWriteInt@val,f
  4051  0488  09A7               	comf	LCDWriteInt@val+1,f
  4052  0489  0AA6               	incf	LCDWriteInt@val,f
  4053  048A  1903               	skipnz
  4054  048B  0AA7               	incf	LCDWriteInt@val+1,f
  4055  048C                     l2177:	
  4056                           ;lcd_hd44780_pic16.c: 342: }
  4057                           ;lcd_hd44780_pic16.c: 344: while(val)
  4058                           
  4059  048C  0826               	movf	LCDWriteInt@val,w
  4060  048D  0427               	iorwf	LCDWriteInt@val+1,w
  4061  048E  1903               	btfsc	3,2
  4062  048F  2CC1               	goto	l2179
  4063                           
  4064                           ;lcd_hd44780_pic16.c: 345: {
  4065                           ;lcd_hd44780_pic16.c: 346: str[i]=val%10;
  4066  0490  300A               	movlw	10
  4067  0491  00F4               	movwf	___awmod@divisor
  4068  0492  3000               	movlw	0
  4069  0493  00F5               	movwf	___awmod@divisor+1
  4070  0494  0827               	movf	LCDWriteInt@val+1,w
  4071  0495  00F7               	movwf	___awmod@dividend+1
  4072  0496  0826               	movf	LCDWriteInt@val,w
  4073  0497  00F6               	movwf	___awmod@dividend
  4074  0498  120A  158A  2654  120A  118A  	fcall	___awmod
  4075  049D  0874               	movf	?___awmod,w
  4076  049E  1283               	bcf	3,5	;RP0=0, select bank0
  4077  049F  1303               	bcf	3,6	;RP1=0, select bank0
  4078  04A0  00A9               	movwf	??_LCDWriteInt
  4079  04A1  0832               	movf	LCDWriteInt@i,w
  4080  04A2  3E2B               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  4081  04A3  0084               	movwf	4
  4082  04A4  0829               	movf	??_LCDWriteInt,w
  4083  04A5  1383               	bcf	3,7	;select IRP bank0
  4084  04A6  0080               	movwf	0
  4085                           
  4086                           ;lcd_hd44780_pic16.c: 347: val=val/10;
  4087  04A7  300A               	movlw	10
  4088  04A8  00F4               	movwf	___awdiv@divisor
  4089  04A9  3000               	movlw	0
  4090  04AA  00F5               	movwf	___awdiv@divisor+1
  4091  04AB  0827               	movf	LCDWriteInt@val+1,w
  4092  04AC  00F7               	movwf	___awdiv@dividend+1
  4093  04AD  0826               	movf	LCDWriteInt@val,w
  4094  04AE  00F6               	movwf	___awdiv@dividend
  4095  04AF  120A  158A  2747  120A  118A  	fcall	___awdiv
  4096  04B4  0875               	movf	?___awdiv+1,w
  4097  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  4098  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  4099  04B7  00A7               	movwf	LCDWriteInt@val+1
  4100  04B8  0874               	movf	?___awdiv,w
  4101  04B9  00A6               	movwf	LCDWriteInt@val
  4102                           
  4103                           ;lcd_hd44780_pic16.c: 348: i--;
  4104  04BA  30FF               	movlw	255
  4105  04BB  07B2               	addwf	LCDWriteInt@i,f
  4106  04BC  1803               	skipnc
  4107  04BD  0AB3               	incf	LCDWriteInt@i+1,f
  4108  04BE  30FF               	movlw	255
  4109  04BF  07B3               	addwf	LCDWriteInt@i+1,f
  4110  04C0  2C8C               	goto	l2177
  4111  04C1                     l2179:	
  4112                           
  4113                           ;lcd_hd44780_pic16.c: 349: }
  4114                           ;lcd_hd44780_pic16.c: 350: if(field_length==-1)
  4115  04C1  0A28               	incf	LCDWriteInt@field_length,w
  4116  04C2  1903               	btfsc	3,2
  4117  04C3  2CD6               	goto	l2187
  4118                           
  4119                           ;lcd_hd44780_pic16.c: 352: else
  4120                           ;lcd_hd44780_pic16.c: 353: j=5-field_length;
  4121                           
  4122                           ;lcd_hd44780_pic16.c: 351: while(str[j]==-16) j++;
  4123  04C4  0828               	movf	LCDWriteInt@field_length,w
  4124  04C5  00A9               	movwf	??_LCDWriteInt
  4125  04C6  01AA               	clrf	??_LCDWriteInt+1
  4126  04C7  1BA9               	btfsc	??_LCDWriteInt,7
  4127  04C8  03AA               	decf	??_LCDWriteInt+1,f
  4128  04C9  09A9               	comf	??_LCDWriteInt,f
  4129  04CA  09AA               	comf	??_LCDWriteInt+1,f
  4130  04CB  0AA9               	incf	??_LCDWriteInt,f
  4131  04CC  1903               	skipnz
  4132  04CD  0AAA               	incf	??_LCDWriteInt+1,f
  4133  04CE  0829               	movf	??_LCDWriteInt,w
  4134  04CF  3E05               	addlw	5
  4135  04D0  00B0               	movwf	LCDWriteInt@j
  4136  04D1  082A               	movf	??_LCDWriteInt+1,w
  4137  04D2  1803               	skipnc
  4138  04D3  3E01               	addlw	1
  4139  04D4  3E00               	addlw	0
  4140  04D5  00B1               	movwf	LCDWriteInt@j+1
  4141  04D6                     l2187:	
  4142                           
  4143                           ;lcd_hd44780_pic16.c: 356: for(i=j;i<5;i++)
  4144  04D6  0831               	movf	LCDWriteInt@j+1,w
  4145  04D7  00B3               	movwf	LCDWriteInt@i+1
  4146  04D8  0830               	movf	LCDWriteInt@j,w
  4147  04D9  00B2               	movwf	LCDWriteInt@i
  4148  04DA                     L3:	
  4149  04DA  0833               	movf	LCDWriteInt@i+1,w
  4150  04DB  3A80               	xorlw	128
  4151  04DC  00FF               	movwf	127
  4152  04DD  3080               	movlw	128
  4153  04DE  027F               	subwf	127,w
  4154  04DF  1D03               	skipz
  4155  04E0  2CE3               	goto	u2125
  4156  04E1  3005               	movlw	5
  4157  04E2  0232               	subwf	LCDWriteInt@i,w
  4158  04E3                     u2125:	
  4159  04E3  1803               	btfsc	3,0
  4160  04E4  0008               	return
  4161                           
  4162                           ;lcd_hd44780_pic16.c: 357: {
  4163                           ;lcd_hd44780_pic16.c: 358: (LCDByte(48+str[i],1));
  4164  04E5  01F9               	clrf	LCDByte@isdata
  4165  04E6  0AF9               	incf	LCDByte@isdata,f
  4166  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  4167  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  4168  04E9  0832               	movf	LCDWriteInt@i,w
  4169  04EA  3E2B               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  4170  04EB  0084               	movwf	4
  4171  04EC  1383               	bcf	3,7	;select IRP bank0
  4172  04ED  0800               	movf	0,w
  4173  04EE  3E30               	addlw	48
  4174  04EF  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  4175  04F4  3001               	movlw	1
  4176  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  4177  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  4178  04F7  07B2               	addwf	LCDWriteInt@i,f
  4179  04F8  1803               	skipnc
  4180  04F9  0AB3               	incf	LCDWriteInt@i+1,f
  4181  04FA  3000               	movlw	0
  4182  04FB  07B3               	addwf	LCDWriteInt@i+1,f
  4183  04FC  2CDA               	goto	L3
  4184  04FD                     __end_of_LCDWriteInt:	
  4185                           ;lcd_hd44780_pic16.c: 359: }
  4186                           ;lcd_hd44780_pic16.c: 360: return field_length;
  4187                           ;	Return value of _LCDWriteInt is never used
  4188                           
  4189                           
  4190                           	psect	text15
  4191  0E54                     __ptext15:	
  4192 ;; *************** function ___awmod *****************
  4193 ;; Defined at:
  4194 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;  divisor         2    4[COMMON] int 
  4197 ;;  dividend        2    6[COMMON] int 
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;  sign            1    1[BANK0 ] unsigned char 
  4200 ;;  counter         1    0[BANK0 ] unsigned char 
  4201 ;; Return value:  Size  Location     Type
  4202 ;;                  2    4[COMMON] int 
  4203 ;; Registers used:
  4204 ;;		wreg, status,2, status,0
  4205 ;; Tracked objects:
  4206 ;;		On entry : 0/0
  4207 ;;		On exit  : 0/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4210 ;;      Params:         4       0       0       0       0
  4211 ;;      Locals:         0       2       0       0       0
  4212 ;;      Temps:          1       0       0       0       0
  4213 ;;      Totals:         5       2       0       0       0
  4214 ;;Total ram usage:        7 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    1
  4217 ;; This function calls:
  4218 ;;		Nothing
  4219 ;; This function is called by:
  4220 ;;		_LCDWriteInt
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           
  4225                           ;psect for function ___awmod
  4226  0E54                     ___awmod:	
  4227                           
  4228                           ;incstack = 0
  4229                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4230  0E54  1283               	bcf	3,5	;RP0=0, select bank0
  4231  0E55  1303               	bcf	3,6	;RP1=0, select bank0
  4232  0E56  01A1               	clrf	___awmod@sign
  4233  0E57  1FF7               	btfss	___awmod@dividend+1,7
  4234  0E58  2E60               	goto	l1953
  4235  0E59  09F6               	comf	___awmod@dividend,f
  4236  0E5A  09F7               	comf	___awmod@dividend+1,f
  4237  0E5B  0AF6               	incf	___awmod@dividend,f
  4238  0E5C  1903               	skipnz
  4239  0E5D  0AF7               	incf	___awmod@dividend+1,f
  4240  0E5E  01A1               	clrf	___awmod@sign
  4241  0E5F  0AA1               	incf	___awmod@sign,f
  4242  0E60                     l1953:	
  4243  0E60  1FF5               	btfss	___awmod@divisor+1,7
  4244  0E61  2E67               	goto	l1957
  4245  0E62  09F4               	comf	___awmod@divisor,f
  4246  0E63  09F5               	comf	___awmod@divisor+1,f
  4247  0E64  0AF4               	incf	___awmod@divisor,f
  4248  0E65  1903               	skipnz
  4249  0E66  0AF5               	incf	___awmod@divisor+1,f
  4250  0E67                     l1957:	
  4251  0E67  0874               	movf	___awmod@divisor,w
  4252  0E68  0475               	iorwf	___awmod@divisor+1,w
  4253  0E69  1903               	btfsc	3,2
  4254  0E6A  2E94               	goto	l1975
  4255  0E6B  01A0               	clrf	___awmod@counter
  4256  0E6C  0AA0               	incf	___awmod@counter,f
  4257  0E6D                     l1965:	
  4258  0E6D  1BF5               	btfsc	___awmod@divisor+1,7
  4259  0E6E  2E7B               	goto	l1967
  4260  0E6F  3001               	movlw	1
  4261  0E70                     u1765:	
  4262  0E70  1003               	clrc
  4263  0E71  0DF4               	rlf	___awmod@divisor,f
  4264  0E72  0DF5               	rlf	___awmod@divisor+1,f
  4265  0E73  3EFF               	addlw	-1
  4266  0E74  1D03               	skipz
  4267  0E75  2E70               	goto	u1765
  4268  0E76  3001               	movlw	1
  4269  0E77  00F8               	movwf	??___awmod
  4270  0E78  0878               	movf	??___awmod,w
  4271  0E79  07A0               	addwf	___awmod@counter,f
  4272  0E7A  2E6D               	goto	l1965
  4273  0E7B                     l1967:	
  4274  0E7B  0875               	movf	___awmod@divisor+1,w
  4275  0E7C  0277               	subwf	___awmod@dividend+1,w
  4276  0E7D  1D03               	skipz
  4277  0E7E  2E81               	goto	u1785
  4278  0E7F  0874               	movf	___awmod@divisor,w
  4279  0E80  0276               	subwf	___awmod@dividend,w
  4280  0E81                     u1785:	
  4281  0E81  1C03               	skipc
  4282  0E82  2E89               	goto	l1971
  4283  0E83  0874               	movf	___awmod@divisor,w
  4284  0E84  02F6               	subwf	___awmod@dividend,f
  4285  0E85  0875               	movf	___awmod@divisor+1,w
  4286  0E86  1C03               	skipc
  4287  0E87  03F7               	decf	___awmod@dividend+1,f
  4288  0E88  02F7               	subwf	___awmod@dividend+1,f
  4289  0E89                     l1971:	
  4290  0E89  3001               	movlw	1
  4291  0E8A                     u1795:	
  4292  0E8A  1003               	clrc
  4293  0E8B  0CF5               	rrf	___awmod@divisor+1,f
  4294  0E8C  0CF4               	rrf	___awmod@divisor,f
  4295  0E8D  3EFF               	addlw	-1
  4296  0E8E  1D03               	skipz
  4297  0E8F  2E8A               	goto	u1795
  4298  0E90  3001               	movlw	1
  4299  0E91  02A0               	subwf	___awmod@counter,f
  4300  0E92  1D03               	btfss	3,2
  4301  0E93  2E7B               	goto	l1967
  4302  0E94                     l1975:	
  4303  0E94  0821               	movf	___awmod@sign,w
  4304  0E95  1903               	btfsc	3,2
  4305  0E96  2E9C               	goto	l1979
  4306  0E97  09F6               	comf	___awmod@dividend,f
  4307  0E98  09F7               	comf	___awmod@dividend+1,f
  4308  0E99  0AF6               	incf	___awmod@dividend,f
  4309  0E9A  1903               	skipnz
  4310  0E9B  0AF7               	incf	___awmod@dividend+1,f
  4311  0E9C                     l1979:	
  4312  0E9C  0877               	movf	___awmod@dividend+1,w
  4313  0E9D  00F5               	movwf	?___awmod+1
  4314  0E9E  0876               	movf	___awmod@dividend,w
  4315  0E9F  00F4               	movwf	?___awmod
  4316  0EA0  0008               	return
  4317  0EA1                     __end_of___awmod:	
  4318                           
  4319                           	psect	text16
  4320  0F47                     __ptext16:	
  4321 ;; *************** function ___awdiv *****************
  4322 ;; Defined at:
  4323 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  divisor         2    4[COMMON] int 
  4326 ;;  dividend        2    6[COMMON] int 
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;  quotient        2    2[BANK0 ] int 
  4329 ;;  sign            1    1[BANK0 ] unsigned char 
  4330 ;;  counter         1    0[BANK0 ] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  2    4[COMMON] int 
  4333 ;; Registers used:
  4334 ;;		wreg, status,2, status,0
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4340 ;;      Params:         4       0       0       0       0
  4341 ;;      Locals:         0       4       0       0       0
  4342 ;;      Temps:          1       0       0       0       0
  4343 ;;      Totals:         5       4       0       0       0
  4344 ;;Total ram usage:        9 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    1
  4347 ;; This function calls:
  4348 ;;		Nothing
  4349 ;; This function is called by:
  4350 ;;		_LCDWriteInt
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           
  4355                           ;psect for function ___awdiv
  4356  0F47                     ___awdiv:	
  4357                           
  4358                           ;incstack = 0
  4359                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4360  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  4361  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  4362  0F49  01A1               	clrf	___awdiv@sign
  4363  0F4A  1FF5               	btfss	___awdiv@divisor+1,7
  4364  0F4B  2F53               	goto	l1909
  4365  0F4C  09F4               	comf	___awdiv@divisor,f
  4366  0F4D  09F5               	comf	___awdiv@divisor+1,f
  4367  0F4E  0AF4               	incf	___awdiv@divisor,f
  4368  0F4F  1903               	skipnz
  4369  0F50  0AF5               	incf	___awdiv@divisor+1,f
  4370  0F51  01A1               	clrf	___awdiv@sign
  4371  0F52  0AA1               	incf	___awdiv@sign,f
  4372  0F53                     l1909:	
  4373  0F53  1FF7               	btfss	___awdiv@dividend+1,7
  4374  0F54  2F5E               	goto	l1915
  4375  0F55  09F6               	comf	___awdiv@dividend,f
  4376  0F56  09F7               	comf	___awdiv@dividend+1,f
  4377  0F57  0AF6               	incf	___awdiv@dividend,f
  4378  0F58  1903               	skipnz
  4379  0F59  0AF7               	incf	___awdiv@dividend+1,f
  4380  0F5A  3001               	movlw	1
  4381  0F5B  00F8               	movwf	??___awdiv
  4382  0F5C  0878               	movf	??___awdiv,w
  4383  0F5D  06A1               	xorwf	___awdiv@sign,f
  4384  0F5E                     l1915:	
  4385  0F5E  01A2               	clrf	___awdiv@quotient
  4386  0F5F  01A3               	clrf	___awdiv@quotient+1
  4387  0F60  0874               	movf	___awdiv@divisor,w
  4388  0F61  0475               	iorwf	___awdiv@divisor+1,w
  4389  0F62  1903               	btfsc	3,2
  4390  0F63  2F95               	goto	l1937
  4391  0F64  01A0               	clrf	___awdiv@counter
  4392  0F65  0AA0               	incf	___awdiv@counter,f
  4393  0F66                     l1925:	
  4394  0F66  1BF5               	btfsc	___awdiv@divisor+1,7
  4395  0F67  2F74               	goto	l1927
  4396  0F68  3001               	movlw	1
  4397  0F69                     u1665:	
  4398  0F69  1003               	clrc
  4399  0F6A  0DF4               	rlf	___awdiv@divisor,f
  4400  0F6B  0DF5               	rlf	___awdiv@divisor+1,f
  4401  0F6C  3EFF               	addlw	-1
  4402  0F6D  1D03               	skipz
  4403  0F6E  2F69               	goto	u1665
  4404  0F6F  3001               	movlw	1
  4405  0F70  00F8               	movwf	??___awdiv
  4406  0F71  0878               	movf	??___awdiv,w
  4407  0F72  07A0               	addwf	___awdiv@counter,f
  4408  0F73  2F66               	goto	l1925
  4409  0F74                     l1927:	
  4410  0F74  3001               	movlw	1
  4411  0F75                     u1685:	
  4412  0F75  1003               	clrc
  4413  0F76  0DA2               	rlf	___awdiv@quotient,f
  4414  0F77  0DA3               	rlf	___awdiv@quotient+1,f
  4415  0F78  3EFF               	addlw	-1
  4416  0F79  1D03               	skipz
  4417  0F7A  2F75               	goto	u1685
  4418  0F7B  0875               	movf	___awdiv@divisor+1,w
  4419  0F7C  0277               	subwf	___awdiv@dividend+1,w
  4420  0F7D  1D03               	skipz
  4421  0F7E  2F81               	goto	u1695
  4422  0F7F  0874               	movf	___awdiv@divisor,w
  4423  0F80  0276               	subwf	___awdiv@dividend,w
  4424  0F81                     u1695:	
  4425  0F81  1C03               	skipc
  4426  0F82  2F8A               	goto	l1933
  4427  0F83  0874               	movf	___awdiv@divisor,w
  4428  0F84  02F6               	subwf	___awdiv@dividend,f
  4429  0F85  0875               	movf	___awdiv@divisor+1,w
  4430  0F86  1C03               	skipc
  4431  0F87  03F7               	decf	___awdiv@dividend+1,f
  4432  0F88  02F7               	subwf	___awdiv@dividend+1,f
  4433  0F89  1422               	bsf	___awdiv@quotient,0
  4434  0F8A                     l1933:	
  4435  0F8A  3001               	movlw	1
  4436  0F8B                     u1705:	
  4437  0F8B  1003               	clrc
  4438  0F8C  0CF5               	rrf	___awdiv@divisor+1,f
  4439  0F8D  0CF4               	rrf	___awdiv@divisor,f
  4440  0F8E  3EFF               	addlw	-1
  4441  0F8F  1D03               	skipz
  4442  0F90  2F8B               	goto	u1705
  4443  0F91  3001               	movlw	1
  4444  0F92  02A0               	subwf	___awdiv@counter,f
  4445  0F93  1D03               	btfss	3,2
  4446  0F94  2F74               	goto	l1927
  4447  0F95                     l1937:	
  4448  0F95  0821               	movf	___awdiv@sign,w
  4449  0F96  1903               	btfsc	3,2
  4450  0F97  2F9D               	goto	l1941
  4451  0F98  09A2               	comf	___awdiv@quotient,f
  4452  0F99  09A3               	comf	___awdiv@quotient+1,f
  4453  0F9A  0AA2               	incf	___awdiv@quotient,f
  4454  0F9B  1903               	skipnz
  4455  0F9C  0AA3               	incf	___awdiv@quotient+1,f
  4456  0F9D                     l1941:	
  4457  0F9D  0823               	movf	___awdiv@quotient+1,w
  4458  0F9E  00F5               	movwf	?___awdiv+1
  4459  0F9F  0822               	movf	___awdiv@quotient,w
  4460  0FA0  00F4               	movwf	?___awdiv
  4461  0FA1  0008               	return
  4462  0FA2                     __end_of___awdiv:	
  4463                           
  4464                           	psect	text17
  4465  0BF4                     __ptext17:	
  4466 ;; *************** function _MenuUp *****************
  4467 ;; Defined at:
  4468 ;;		line 40 in file "menu.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;		None
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;		None
  4473 ;; Return value:  Size  Location     Type
  4474 ;;                  1    wreg      void 
  4475 ;; Registers used:
  4476 ;;		wreg, status,2, status,0
  4477 ;; Tracked objects:
  4478 ;;		On entry : 0/0
  4479 ;;		On exit  : 0/0
  4480 ;;		Unchanged: 0/0
  4481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4482 ;;      Params:         0       0       0       0       0
  4483 ;;      Locals:         0       0       0       0       0
  4484 ;;      Temps:          1       0       0       0       0
  4485 ;;      Totals:         1       0       0       0       0
  4486 ;;Total ram usage:        1 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    1
  4489 ;; This function calls:
  4490 ;;		Nothing
  4491 ;; This function is called by:
  4492 ;;		_main
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           
  4497                           ;psect for function _MenuUp
  4498  0BF4                     _MenuUp:	
  4499                           
  4500                           ;menu.c: 42: if(g_menu.index == 0)
  4501                           
  4502                           ;incstack = 0
  4503                           ; Regs used in _MenuUp: [wreg+status,2+status,0]
  4504  0BF4  1683               	bsf	3,5	;RP0=1, select bank1
  4505  0BF5  1303               	bcf	3,6	;RP1=0, select bank1
  4506  0BF6  0828               	movf	(_g_menu^(0+128)+8),w
  4507  0BF7  1D03               	btfss	3,2
  4508  0BF8  2BFE               	goto	l2359
  4509                           
  4510                           ;menu.c: 43: {
  4511                           ;menu.c: 44: g_menu.index = 4 - 1;
  4512  0BF9  3003               	movlw	3
  4513  0BFA  00F4               	movwf	??_MenuUp
  4514  0BFB  0874               	movf	??_MenuUp,w
  4515  0BFC  00A8               	movwf	(_g_menu^(0+128)+8)
  4516                           
  4517                           ;menu.c: 45: }
  4518  0BFD  0008               	return
  4519  0BFE                     l2359:	
  4520                           
  4521                           ;menu.c: 46: else
  4522                           ;menu.c: 47: {
  4523                           ;menu.c: 48: g_menu.index--;
  4524  0BFE  3001               	movlw	1
  4525  0BFF  02A8               	subwf	(_g_menu^(0+128)+8),f
  4526  0C00  0008               	return
  4527  0C01                     __end_of_MenuUp:	
  4528                           
  4529                           	psect	text18
  4530  0D8C                     __ptext18:	
  4531 ;; *************** function _MenuInit *****************
  4532 ;; Defined at:
  4533 ;;		line 7 in file "menu.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;		None
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;		None
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  1    wreg      void 
  4540 ;; Registers used:
  4541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4547 ;;      Params:         0       0       0       0       0
  4548 ;;      Locals:         0       0       0       0       0
  4549 ;;      Temps:          1       0       0       0       0
  4550 ;;      Totals:         1       0       0       0       0
  4551 ;;Total ram usage:        1 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    3
  4554 ;; This function calls:
  4555 ;;		_LoadMenuItem
  4556 ;; This function is called by:
  4557 ;;		_main
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561                           
  4562                           ;psect for function _MenuInit
  4563  0D8C                     _MenuInit:	
  4564                           
  4565                           ;menu.c: 9: g_menu.items[0].name = "ID1:";
  4566                           
  4567                           ;incstack = 0
  4568                           ; Regs used in _MenuInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4569  0D8C  3050               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  4570  0D8D  00F9               	movwf	??_MenuInit
  4571  0D8E  0879               	movf	??_MenuInit,w
  4572  0D8F  1683               	bsf	3,5	;RP0=1, select bank1
  4573  0D90  1303               	bcf	3,6	;RP1=0, select bank1
  4574  0D91  00A1               	movwf	(low ((_g_menu| 0+1)))^(0+128)
  4575                           
  4576                           ;menu.c: 10: g_menu.items[0].value = LoadMenuItem(0);
  4577  0D92  3000               	movlw	0
  4578  0D93  120A  158A  2401  120A  158A  	fcall	_LoadMenuItem
  4579  0D98  00F9               	movwf	??_MenuInit
  4580  0D99  0879               	movf	??_MenuInit,w
  4581  0D9A  1683               	bsf	3,5	;RP0=1, select bank1
  4582  0D9B  1303               	bcf	3,6	;RP1=0, select bank1
  4583  0D9C  00A0               	movwf	_g_menu^(0+128)
  4584                           
  4585                           ;menu.c: 12: g_menu.items[1].name = "ID2:";
  4586  0D9D  3055               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  4587  0D9E  00F9               	movwf	??_MenuInit
  4588  0D9F  0879               	movf	??_MenuInit,w
  4589  0DA0  00A3               	movwf	(low ((_g_menu| 0+3)))^(0+128)
  4590                           
  4591                           ;menu.c: 13: g_menu.items[1].value = LoadMenuItem(1);
  4592  0DA1  3001               	movlw	1
  4593  0DA2  120A  158A  2401  120A  158A  	fcall	_LoadMenuItem
  4594  0DA7  00F9               	movwf	??_MenuInit
  4595  0DA8  0879               	movf	??_MenuInit,w
  4596  0DA9  1683               	bsf	3,5	;RP0=1, select bank1
  4597  0DAA  1303               	bcf	3,6	;RP1=0, select bank1
  4598  0DAB  00A2               	movwf	(_g_menu^(0+128)+2)
  4599                           
  4600                           ;menu.c: 15: g_menu.items[2].name = "ID3:";
  4601  0DAC  305A               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  4602  0DAD  00F9               	movwf	??_MenuInit
  4603  0DAE  0879               	movf	??_MenuInit,w
  4604  0DAF  00A5               	movwf	(low ((_g_menu| 0+5)))^(0+128)
  4605                           
  4606                           ;menu.c: 16: g_menu.items[2].value = LoadMenuItem(2);
  4607  0DB0  3002               	movlw	2
  4608  0DB1  120A  158A  2401  120A  158A  	fcall	_LoadMenuItem
  4609  0DB6  00F9               	movwf	??_MenuInit
  4610  0DB7  0879               	movf	??_MenuInit,w
  4611  0DB8  1683               	bsf	3,5	;RP0=1, select bank1
  4612  0DB9  1303               	bcf	3,6	;RP1=0, select bank1
  4613  0DBA  00A4               	movwf	(_g_menu^(0+128)+4)
  4614                           
  4615                           ;menu.c: 18: g_menu.items[3].name = "ID4:";
  4616  0DBB  305F               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  4617  0DBC  00F9               	movwf	??_MenuInit
  4618  0DBD  0879               	movf	??_MenuInit,w
  4619  0DBE  00A7               	movwf	(low ((_g_menu| 0+7)))^(0+128)
  4620                           
  4621                           ;menu.c: 19: g_menu.items[3].value = LoadMenuItem(3);
  4622  0DBF  3003               	movlw	3
  4623  0DC0  120A  158A  2401   	fcall	_LoadMenuItem
  4624  0DC3  00F9               	movwf	??_MenuInit
  4625  0DC4  0879               	movf	??_MenuInit,w
  4626  0DC5  1683               	bsf	3,5	;RP0=1, select bank1
  4627  0DC6  1303               	bcf	3,6	;RP1=0, select bank1
  4628  0DC7  00A6               	movwf	(_g_menu^(0+128)+6)
  4629                           
  4630                           ;menu.c: 21: g_menu.index = 0;
  4631  0DC8  01A8               	clrf	(_g_menu^(0+128)+8)
  4632  0DC9  0008               	return
  4633  0DCA                     __end_of_MenuInit:	
  4634                           
  4635                           	psect	text19
  4636  0C01                     __ptext19:	
  4637 ;; *************** function _LoadMenuItem *****************
  4638 ;; Defined at:
  4639 ;;		line 36 in file "menu.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;  item            1    wreg     unsigned char 
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;  item            1    8[COMMON] unsigned char 
  4644 ;; Return value:  Size  Location     Type
  4645 ;;                  1    wreg      unsigned char 
  4646 ;; Registers used:
  4647 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4648 ;; Tracked objects:
  4649 ;;		On entry : 0/0
  4650 ;;		On exit  : 0/0
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4653 ;;      Params:         0       0       0       0       0
  4654 ;;      Locals:         1       0       0       0       0
  4655 ;;      Temps:          2       0       0       0       0
  4656 ;;      Totals:         3       0       0       0       0
  4657 ;;Total ram usage:        3 bytes
  4658 ;; Hardware stack levels used:    1
  4659 ;; Hardware stack levels required when called:    2
  4660 ;; This function calls:
  4661 ;;		_eeprom_read
  4662 ;; This function is called by:
  4663 ;;		_MenuInit
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           
  4668                           ;psect for function _LoadMenuItem
  4669  0C01                     _LoadMenuItem:	
  4670                           
  4671                           ;incstack = 0
  4672                           ; Regs used in _LoadMenuItem: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4673                           ;LoadMenuItem@item stored from wreg
  4674  0C01  00F8               	movwf	LoadMenuItem@item
  4675                           
  4676                           ;menu.c: 38: g_menu.items[item].value = eeprom_read(item);
  4677  0C02  0878               	movf	LoadMenuItem@item,w
  4678  0C03  120A  158A  246C   	fcall	_eeprom_read
  4679  0C06  00F6               	movwf	??_LoadMenuItem
  4680  0C07  0878               	movf	LoadMenuItem@item,w
  4681  0C08  00F7               	movwf	??_LoadMenuItem+1
  4682  0C09  0777               	addwf	??_LoadMenuItem+1,w
  4683  0C0A  3EA0               	addlw	(low (_g_menu| 0))& (0+255)
  4684  0C0B  0084               	movwf	4
  4685  0C0C  0876               	movf	??_LoadMenuItem,w
  4686  0C0D  1383               	bcf	3,7	;select IRP bank1
  4687  0C0E  0080               	movwf	0
  4688  0C0F  0008               	return
  4689  0C10                     __end_of_LoadMenuItem:	
  4690                           
  4691                           	psect	text20
  4692  0C6C                     __ptext20:	
  4693 ;; *************** function _eeprom_read *****************
  4694 ;; Defined at:
  4695 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eeread.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;  addr            1    wreg     unsigned char 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;  addr            1    5[COMMON] unsigned char 
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      unsigned char 
  4702 ;; Registers used:
  4703 ;;		wreg, status,2, status,0
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4709 ;;      Params:         0       0       0       0       0
  4710 ;;      Locals:         1       0       0       0       0
  4711 ;;      Temps:          1       0       0       0       0
  4712 ;;      Totals:         2       0       0       0       0
  4713 ;;Total ram usage:        2 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    1
  4716 ;; This function calls:
  4717 ;;		Nothing
  4718 ;; This function is called by:
  4719 ;;		_LoadMenuItem
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           
  4724                           ;psect for function _eeprom_read
  4725  0C6C                     _eeprom_read:	
  4726                           
  4727                           ;incstack = 0
  4728                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4729                           ;eeprom_read@addr stored from wreg
  4730  0C6C  00F5               	movwf	eeprom_read@addr
  4731  0C6D                     l363:	
  4732  0C6D  0064               	clrwdt	;# 
  4733  0C6E  1683               	bsf	3,5	;RP0=1, select bank3
  4734  0C6F  1703               	bsf	3,6	;RP1=1, select bank3
  4735  0C70  188C               	btfsc	12,1	;volsfr
  4736  0C71  2C6D               	goto	l363
  4737  0C72  0875               	movf	eeprom_read@addr,w
  4738  0C73  1283               	bcf	3,5	;RP0=0, select bank2
  4739  0C74  1703               	bsf	3,6	;RP1=1, select bank2
  4740  0C75  008D               	movwf	13	;volatile
  4741  0C76  303F               	movlw	63
  4742  0C77  00F4               	movwf	??_eeprom_read
  4743  0C78  0874               	movf	??_eeprom_read,w
  4744  0C79  1683               	bsf	3,5	;RP0=1, select bank3
  4745  0C7A  1703               	bsf	3,6	;RP1=1, select bank3
  4746  0C7B  058C               	andwf	12,f	;volsfr
  4747  0C7C  140C               	bsf	12,0	;volsfr
  4748  0C7D  1003               	clrc
  4749  0C7E  180C               	btfsc	12,0	;volsfr
  4750  0C7F  1403               	setc
  4751  0C80  3000               	movlw	0
  4752  0C81  1803               	skipnc
  4753  0C82  3001               	movlw	1
  4754  0C83  1283               	bcf	3,5	;RP0=0, select bank2
  4755  0C84  1703               	bsf	3,6	;RP1=1, select bank2
  4756  0C85  080C               	movf	12,w	;volatile
  4757  0C86  0008               	return
  4758  0C87                     __end_of_eeprom_read:	
  4759                           
  4760                           	psect	text21
  4761  0BE7                     __ptext21:	
  4762 ;; *************** function _MenuDown *****************
  4763 ;; Defined at:
  4764 ;;		line 51 in file "menu.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;		None
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;		None
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      void 
  4771 ;; Registers used:
  4772 ;;		wreg, status,2, status,0
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4778 ;;      Params:         0       0       0       0       0
  4779 ;;      Locals:         0       0       0       0       0
  4780 ;;      Temps:          1       0       0       0       0
  4781 ;;      Totals:         1       0       0       0       0
  4782 ;;Total ram usage:        1 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    1
  4785 ;; This function calls:
  4786 ;;		Nothing
  4787 ;; This function is called by:
  4788 ;;		_main
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           
  4793                           ;psect for function _MenuDown
  4794  0BE7                     _MenuDown:	
  4795                           
  4796                           ;menu.c: 53: if(g_menu.index == 4 - 1)
  4797                           
  4798                           ;incstack = 0
  4799                           ; Regs used in _MenuDown: [wreg+status,2+status,0]
  4800  0BE7  3003               	movlw	3
  4801  0BE8  1683               	bsf	3,5	;RP0=1, select bank1
  4802  0BE9  1303               	bcf	3,6	;RP1=0, select bank1
  4803  0BEA  0628               	xorwf	(_g_menu^(0+128)+8),w
  4804  0BEB  1D03               	btfss	3,2
  4805  0BEC  2BEF               	goto	l2369
  4806                           
  4807                           ;menu.c: 54: {
  4808                           ;menu.c: 55: g_menu.index = 0;
  4809  0BED  01A8               	clrf	(_g_menu^(0+128)+8)
  4810                           
  4811                           ;menu.c: 56: }
  4812  0BEE  0008               	return
  4813  0BEF                     l2369:	
  4814                           
  4815                           ;menu.c: 57: else
  4816                           ;menu.c: 58: {
  4817                           ;menu.c: 59: g_menu.index++;
  4818  0BEF  3001               	movlw	1
  4819  0BF0  00F4               	movwf	??_MenuDown
  4820  0BF1  0874               	movf	??_MenuDown,w
  4821  0BF2  07A8               	addwf	(_g_menu^(0+128)+8),f
  4822  0BF3  0008               	return
  4823  0BF4                     __end_of_MenuDown:	
  4824                           
  4825                           	psect	text22
  4826  0BD2                     __ptext22:	
  4827 ;; *************** function _LCDSetStyle *****************
  4828 ;; Defined at:
  4829 ;;		line 207 in file "lcd_hd44780_pic16.c"
  4830 ;; Parameters:    Size  Location     Type
  4831 ;;  style           1    wreg     unsigned char 
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;  style           1    6[BANK0 ] unsigned char 
  4834 ;; Return value:  Size  Location     Type
  4835 ;;                  1    wreg      void 
  4836 ;; Registers used:
  4837 ;;		wreg, status,2, status,0, pclath, cstack
  4838 ;; Tracked objects:
  4839 ;;		On entry : 0/0
  4840 ;;		On exit  : 0/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4843 ;;      Params:         0       0       0       0       0
  4844 ;;      Locals:         0       1       0       0       0
  4845 ;;      Temps:          0       0       0       0       0
  4846 ;;      Totals:         0       1       0       0       0
  4847 ;;Total ram usage:        1 bytes
  4848 ;; Hardware stack levels used:    1
  4849 ;; Hardware stack levels required when called:    3
  4850 ;; This function calls:
  4851 ;;		_LCDByte
  4852 ;; This function is called by:
  4853 ;;		_main
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           
  4858                           ;psect for function _LCDSetStyle
  4859  0BD2                     _LCDSetStyle:	
  4860                           
  4861                           ;incstack = 0
  4862                           ; Regs used in _LCDSetStyle: [wreg+status,2+status,0+pclath+cstack]
  4863                           ;LCDSetStyle@style stored from wreg
  4864  0BD2  1283               	bcf	3,5	;RP0=0, select bank0
  4865  0BD3  1303               	bcf	3,6	;RP1=0, select bank0
  4866  0BD4  00A6               	movwf	LCDSetStyle@style
  4867                           
  4868                           ;lcd_hd44780_pic16.c: 209: (LCDByte(0b00001100|style,0));
  4869  0BD5  01F9               	clrf	LCDByte@isdata
  4870  0BD6  0826               	movf	LCDSetStyle@style,w
  4871  0BD7  380C               	iorlw	12
  4872  0BD8  120A  158A  26F0   	fcall	_LCDByte
  4873  0BDB  0008               	return
  4874  0BDC                     __end_of_LCDSetStyle:	
  4875                           
  4876                           	psect	text23
  4877  0753                     __ptext23:	
  4878 ;; *************** function _LCDInit *****************
  4879 ;; Defined at:
  4880 ;;		line 211 in file "lcd_hd44780_pic16.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  style           1    wreg     unsigned char 
  4883 ;; Auto vars:     Size  Location     Type
  4884 ;;  style           1    8[BANK0 ] unsigned char 
  4885 ;;  __i             1    9[BANK0 ] unsigned char 
  4886 ;; Return value:  Size  Location     Type
  4887 ;;                  1    wreg      void 
  4888 ;; Registers used:
  4889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4895 ;;      Params:         0       0       0       0       0
  4896 ;;      Locals:         0       2       0       0       0
  4897 ;;      Temps:          0       2       0       0       0
  4898 ;;      Totals:         0       4       0       0       0
  4899 ;;Total ram usage:        4 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    3
  4902 ;; This function calls:
  4903 ;;		_LCDBusyLoop
  4904 ;;		_LCDByte
  4905 ;; This function is called by:
  4906 ;;		_main
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910                           
  4911                           ;psect for function _LCDInit
  4912  0753                     _LCDInit:	
  4913                           
  4914                           ;incstack = 0
  4915                           ; Regs used in _LCDInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4916                           ;LCDInit@style stored from wreg
  4917  0753  1283               	bcf	3,5	;RP0=0, select bank0
  4918  0754  1303               	bcf	3,6	;RP1=0, select bank0
  4919  0755  00A8               	movwf	LCDInit@style
  4920                           
  4921                           ;lcd_hd44780_pic16.c: 213: _delay((unsigned long)((30)*(20000000/4000.0)));
  4922  0756  30C3               	movlw	195
  4923  0757  00A7               	movwf	??_LCDInit+1
  4924  0758  30CD               	movlw	205
  4925  0759  00A6               	movwf	??_LCDInit
  4926  075A                     u3017:	
  4927  075A  0BA6               	decfsz	??_LCDInit,f
  4928  075B  2F5A               	goto	u3017
  4929  075C  0BA7               	decfsz	??_LCDInit+1,f
  4930  075D  2F5A               	goto	u3017
  4931                           
  4932                           ;lcd_hd44780_pic16.c: 216: TRISC&=(~(0x0F<<4));
  4933  075E  300F               	movlw	15
  4934  075F  1283               	bcf	3,5	;RP0=0, select bank0
  4935  0760  1303               	bcf	3,6	;RP1=0, select bank0
  4936  0761  00A6               	movwf	??_LCDInit
  4937  0762  0826               	movf	??_LCDInit,w
  4938  0763  1683               	bsf	3,5	;RP0=1, select bank1
  4939  0764  1303               	bcf	3,6	;RP1=0, select bank1
  4940  0765  0587               	andwf	7,f	;volatile
  4941                           
  4942                           ;lcd_hd44780_pic16.c: 218: TRISCbits.TRISC3=0;
  4943  0766  1187               	bcf	7,3	;volatile
  4944                           
  4945                           ;lcd_hd44780_pic16.c: 219: TRISCbits.TRISC1=0;
  4946  0767  1087               	bcf	7,1	;volatile
  4947                           
  4948                           ;lcd_hd44780_pic16.c: 220: TRISCbits.TRISC2=0;
  4949  0768  1107               	bcf	7,2	;volatile
  4950                           
  4951                           ;lcd_hd44780_pic16.c: 222: PORTC&=(~(0x0F<<4));
  4952  0769  300F               	movlw	15
  4953  076A  1283               	bcf	3,5	;RP0=0, select bank0
  4954  076B  1303               	bcf	3,6	;RP1=0, select bank0
  4955  076C  00A6               	movwf	??_LCDInit
  4956  076D  0826               	movf	??_LCDInit,w
  4957  076E  0587               	andwf	7,f	;volatile
  4958                           
  4959                           ;lcd_hd44780_pic16.c: 224: (RC3=0);
  4960  076F  1187               	bcf	7,3	;volatile
  4961                           
  4962                           ;lcd_hd44780_pic16.c: 225: (RC2=0);
  4963  0770  1107               	bcf	7,2	;volatile
  4964                           
  4965                           ;lcd_hd44780_pic16.c: 226: (RC1=0);
  4966  0771  1087               	bcf	7,1	;volatile
  4967                           
  4968                           ;lcd_hd44780_pic16.c: 229: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  4969  0772  2F73               	nop2	;2 cycle nop
  4970                           
  4971                           ;lcd_hd44780_pic16.c: 231: (RC3=1);
  4972  0773  1283               	bcf	3,5	;RP0=0, select bank0
  4973  0774  1303               	bcf	3,6	;RP1=0, select bank0
  4974  0775  1587               	bsf	7,3	;volatile
  4975                           
  4976                           ;lcd_hd44780_pic16.c: 232: PORTC|=((0b00000010)<<4);
  4977  0776  1687               	bsf	7,5	;volatile
  4978                           
  4979                           ;lcd_hd44780_pic16.c: 233: _delay((unsigned long)((1)*(20000000/4000000.0)));
  4980  0777  2F78               	nop2	;2 cycle nop
  4981  0778  2F79               	nop2	;2 cycle nop
  4982  0779  0000               	nop
  4983                           
  4984                           ;lcd_hd44780_pic16.c: 234: (RC3=0);
  4985  077A  1283               	bcf	3,5	;RP0=0, select bank0
  4986  077B  1303               	bcf	3,6	;RP1=0, select bank0
  4987  077C  1187               	bcf	7,3	;volatile
  4988                           
  4989                           ;lcd_hd44780_pic16.c: 235: _delay((unsigned long)((1)*(20000000/4000000.0)));
  4990  077D  2F7E               	nop2	;2 cycle nop
  4991  077E  2F7F               	nop2	;2 cycle nop
  4992  077F  0000               	nop
  4993                           
  4994                           ;lcd_hd44780_pic16.c: 238: LCDBusyLoop();
  4995  0780  120A  118A  26ED  120A  118A  	fcall	_LCDBusyLoop
  4996                           
  4997                           ;lcd_hd44780_pic16.c: 243: (LCDByte(0b00101000,0));
  4998  0785  01F9               	clrf	LCDByte@isdata
  4999  0786  3028               	movlw	40
  5000  0787  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  5001                           
  5002                           ;lcd_hd44780_pic16.c: 244: (LCDByte(0b00001100|style,0));
  5003  078C  01F9               	clrf	LCDByte@isdata
  5004  078D  1283               	bcf	3,5	;RP0=0, select bank0
  5005  078E  1303               	bcf	3,6	;RP1=0, select bank0
  5006  078F  0828               	movf	LCDInit@style,w
  5007  0790  380C               	iorlw	12
  5008  0791  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  5009                           
  5010                           ;lcd_hd44780_pic16.c: 247: (LCDByte(0b01000000,0));
  5011  0796  01F9               	clrf	LCDByte@isdata
  5012  0797  3040               	movlw	64
  5013  0798  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  5014                           
  5015                           ;lcd_hd44780_pic16.c: 249: uint8_t __i;
  5016                           ;lcd_hd44780_pic16.c: 250: for(__i=0;__i<sizeof(__cgram);__i++)
  5017  079D  1283               	bcf	3,5	;RP0=0, select bank0
  5018  079E  1303               	bcf	3,6	;RP1=0, select bank0
  5019  079F  01A9               	clrf	LCDInit@__i
  5020  07A0                     L4:	
  5021  07A0  3008               	movlw	8
  5022  07A1  0229               	subwf	LCDInit@__i,w
  5023  07A2  1803               	btfsc	3,0
  5024  07A3  0008               	return
  5025                           
  5026                           ;lcd_hd44780_pic16.c: 251: (LCDByte(__cgram[__i],1));
  5027  07A4  01F9               	clrf	LCDByte@isdata
  5028  07A5  0AF9               	incf	LCDByte@isdata,f
  5029  07A6  0829               	movf	LCDInit@__i,w
  5030  07A7  3EDD               	addlw	(low (___cgram| 0))& (0+255)
  5031  07A8  0084               	movwf	4
  5032  07A9  1383               	bcf	3,7	;select IRP bank1
  5033  07AA  0800               	movf	0,w
  5034  07AB  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  5035  07B0  3001               	movlw	1
  5036  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  5037  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  5038  07B3  00A6               	movwf	??_LCDInit
  5039  07B4  0826               	movf	??_LCDInit,w
  5040  07B5  07A9               	addwf	LCDInit@__i,f
  5041  07B6  2FA0               	goto	L4
  5042  07B7                     __end_of_LCDInit:	
  5043                           
  5044                           	psect	text24
  5045  0E08                     __ptext24:	
  5046 ;; *************** function _IOInit *****************
  5047 ;; Defined at:
  5048 ;;		line 133 in file "do_am.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;		None
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;		None
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  1    wreg      void 
  5055 ;; Registers used:
  5056 ;;		None
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5062 ;;      Params:         0       0       0       0       0
  5063 ;;      Locals:         0       0       0       0       0
  5064 ;;      Temps:          0       0       0       0       0
  5065 ;;      Totals:         0       0       0       0       0
  5066 ;;Total ram usage:        0 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    1
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_main
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           
  5077                           ;psect for function _IOInit
  5078  0E08                     _IOInit:	
  5079                           
  5080                           ;do_am.c: 136: (TRISAbits.TRISA5 = 1);
  5081                           
  5082                           ;incstack = 0
  5083                           ; Regs used in _IOInit: []
  5084  0E08  1683               	bsf	3,5	;RP0=1, select bank1
  5085  0E09  1303               	bcf	3,6	;RP1=0, select bank1
  5086  0E0A  1685               	bsf	5,5	;volatile
  5087                           
  5088                           ;do_am.c: 137: ANSELbits.ANS4 = 0;
  5089  0E0B  1683               	bsf	3,5	;RP0=1, select bank3
  5090  0E0C  1703               	bsf	3,6	;RP1=1, select bank3
  5091  0E0D  1208               	bcf	8,4	;volatile
  5092                           
  5093                           ;do_am.c: 139: (TRISAbits.TRISA6 = 1);
  5094  0E0E  1683               	bsf	3,5	;RP0=1, select bank1
  5095  0E0F  1303               	bcf	3,6	;RP1=0, select bank1
  5096  0E10  1705               	bsf	5,6	;volatile
  5097                           
  5098                           ;do_am.c: 142: (TRISAbits.TRISA0 = 1);
  5099  0E11  1405               	bsf	5,0	;volatile
  5100                           
  5101                           ;do_am.c: 143: ANSELbits.ANS0 = 0;
  5102  0E12  1683               	bsf	3,5	;RP0=1, select bank3
  5103  0E13  1703               	bsf	3,6	;RP1=1, select bank3
  5104  0E14  1008               	bcf	8,0	;volatile
  5105                           
  5106                           ;do_am.c: 145: (TRISAbits.TRISA1 = 1);
  5107  0E15  1683               	bsf	3,5	;RP0=1, select bank1
  5108  0E16  1303               	bcf	3,6	;RP1=0, select bank1
  5109  0E17  1485               	bsf	5,1	;volatile
  5110                           
  5111                           ;do_am.c: 146: ANSELbits.ANS1 = 0;
  5112  0E18  1683               	bsf	3,5	;RP0=1, select bank3
  5113  0E19  1703               	bsf	3,6	;RP1=1, select bank3
  5114  0E1A  1088               	bcf	8,1	;volatile
  5115                           
  5116                           ;do_am.c: 147: (TRISAbits.TRISA2 = 1);
  5117  0E1B  1683               	bsf	3,5	;RP0=1, select bank1
  5118  0E1C  1303               	bcf	3,6	;RP1=0, select bank1
  5119  0E1D  1505               	bsf	5,2	;volatile
  5120                           
  5121                           ;do_am.c: 148: ANSELbits.ANS2 = 0;
  5122  0E1E  1683               	bsf	3,5	;RP0=1, select bank3
  5123  0E1F  1703               	bsf	3,6	;RP1=1, select bank3
  5124  0E20  1108               	bcf	8,2	;volatile
  5125                           
  5126                           ;do_am.c: 149: (TRISAbits.TRISA3 = 1);
  5127  0E21  1683               	bsf	3,5	;RP0=1, select bank1
  5128  0E22  1303               	bcf	3,6	;RP1=0, select bank1
  5129  0E23  1585               	bsf	5,3	;volatile
  5130                           
  5131                           ;do_am.c: 150: ANSELbits.ANS3 = 0;
  5132  0E24  1683               	bsf	3,5	;RP0=1, select bank3
  5133  0E25  1703               	bsf	3,6	;RP1=1, select bank3
  5134  0E26  1188               	bcf	8,3	;volatile
  5135                           
  5136                           ;do_am.c: 152: (TRISAbits.TRISA7 = 0);
  5137  0E27  1683               	bsf	3,5	;RP0=1, select bank1
  5138  0E28  1303               	bcf	3,6	;RP1=0, select bank1
  5139  0E29  1385               	bcf	5,7	;volatile
  5140                           
  5141                           ;do_am.c: 154: (TRISBbits.TRISB0 = 0);
  5142  0E2A  1006               	bcf	6,0	;volatile
  5143                           
  5144                           ;do_am.c: 155: ANSELHbits.ANS12 = 0;
  5145  0E2B  1683               	bsf	3,5	;RP0=1, select bank3
  5146  0E2C  1703               	bsf	3,6	;RP1=1, select bank3
  5147  0E2D  1209               	bcf	9,4	;volatile
  5148                           
  5149                           ;do_am.c: 157: (TRISBbits.TRISB1 = 0);
  5150  0E2E  1683               	bsf	3,5	;RP0=1, select bank1
  5151  0E2F  1303               	bcf	3,6	;RP1=0, select bank1
  5152  0E30  1086               	bcf	6,1	;volatile
  5153                           
  5154                           ;do_am.c: 158: ANSELHbits.ANS10 = 0;
  5155  0E31  1683               	bsf	3,5	;RP0=1, select bank3
  5156  0E32  1703               	bsf	3,6	;RP1=1, select bank3
  5157  0E33  1109               	bcf	9,2	;volatile
  5158                           
  5159                           ;do_am.c: 160: (TRISBbits.TRISB2 = 0);
  5160  0E34  1683               	bsf	3,5	;RP0=1, select bank1
  5161  0E35  1303               	bcf	3,6	;RP1=0, select bank1
  5162  0E36  1106               	bcf	6,2	;volatile
  5163                           
  5164                           ;do_am.c: 161: ANSELHbits.ANS8 = 0;
  5165  0E37  1683               	bsf	3,5	;RP0=1, select bank3
  5166  0E38  1703               	bsf	3,6	;RP1=1, select bank3
  5167  0E39  1009               	bcf	9,0	;volatile
  5168                           
  5169                           ;do_am.c: 163: (TRISBbits.TRISB3 = 0);
  5170  0E3A  1683               	bsf	3,5	;RP0=1, select bank1
  5171  0E3B  1303               	bcf	3,6	;RP1=0, select bank1
  5172  0E3C  1186               	bcf	6,3	;volatile
  5173                           
  5174                           ;do_am.c: 164: ANSELHbits.ANS9 = 0;
  5175  0E3D  1683               	bsf	3,5	;RP0=1, select bank3
  5176  0E3E  1703               	bsf	3,6	;RP1=1, select bank3
  5177  0E3F  1089               	bcf	9,1	;volatile
  5178                           
  5179                           ;do_am.c: 166: RA7 = 1;
  5180  0E40  1283               	bcf	3,5	;RP0=0, select bank0
  5181  0E41  1303               	bcf	3,6	;RP1=0, select bank0
  5182  0E42  1785               	bsf	5,7	;volatile
  5183                           
  5184                           ;do_am.c: 169: (TRISBbits.TRISB4 = 1);
  5185  0E43  1683               	bsf	3,5	;RP0=1, select bank1
  5186  0E44  1303               	bcf	3,6	;RP1=0, select bank1
  5187  0E45  1606               	bsf	6,4	;volatile
  5188                           
  5189                           ;do_am.c: 170: ANSELHbits.ANS11 = 0;
  5190  0E46  1683               	bsf	3,5	;RP0=1, select bank3
  5191  0E47  1703               	bsf	3,6	;RP1=1, select bank3
  5192  0E48  1189               	bcf	9,3	;volatile
  5193                           
  5194                           ;do_am.c: 172: (TRISBbits.TRISB6 = 1);
  5195  0E49  1683               	bsf	3,5	;RP0=1, select bank1
  5196  0E4A  1303               	bcf	3,6	;RP1=0, select bank1
  5197  0E4B  1706               	bsf	6,6	;volatile
  5198                           
  5199                           ;do_am.c: 174: (TRISBbits.TRISB5 = 1);
  5200  0E4C  1686               	bsf	6,5	;volatile
  5201                           
  5202                           ;do_am.c: 175: ANSELHbits.ANS13 = 0;
  5203  0E4D  1683               	bsf	3,5	;RP0=1, select bank3
  5204  0E4E  1703               	bsf	3,6	;RP1=1, select bank3
  5205  0E4F  1289               	bcf	9,5	;volatile
  5206                           
  5207                           ;do_am.c: 177: (TRISBbits.TRISB7 = 1);
  5208  0E50  1683               	bsf	3,5	;RP0=1, select bank1
  5209  0E51  1303               	bcf	3,6	;RP1=0, select bank1
  5210  0E52  1786               	bsf	6,7	;volatile
  5211  0E53  0008               	return
  5212  0E54                     __end_of_IOInit:	
  5213                           
  5214                           	psect	text25
  5215  07B7                     __ptext25:	
  5216 ;; *************** function _ConnInit *****************
  5217 ;; Defined at:
  5218 ;;		line 123 in file "do_am.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;		None
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  i               1    6[COMMON] unsigned char 
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  1    wreg      void 
  5225 ;; Registers used:
  5226 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5232 ;;      Params:         0       0       0       0       0
  5233 ;;      Locals:         1       0       0       0       0
  5234 ;;      Temps:          2       0       0       0       0
  5235 ;;      Totals:         3       0       0       0       0
  5236 ;;Total ram usage:        3 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; Hardware stack levels required when called:    1
  5239 ;; This function calls:
  5240 ;;		Nothing
  5241 ;; This function is called by:
  5242 ;;		_main
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           
  5247                           ;psect for function _ConnInit
  5248  07B7                     _ConnInit:	
  5249                           
  5250                           ;do_am.c: 125: for(uint8_t i = 0; i < 16; i++)
  5251                           
  5252                           ;incstack = 0
  5253                           ; Regs used in _ConnInit: [wreg-fsr0h+status,2+status,0]
  5254  07B7  01F6               	clrf	ConnInit@i
  5255  07B8                     L5:	
  5256  07B8  3010               	movlw	16
  5257  07B9  0276               	subwf	ConnInit@i,w
  5258  07BA  1803               	btfsc	3,0
  5259  07BB  0008               	return
  5260                           
  5261                           ;do_am.c: 126: {
  5262                           ;do_am.c: 127: client_conn[i].from = 16;
  5263  07BC  3010               	movlw	16
  5264  07BD  00F4               	movwf	??_ConnInit
  5265  07BE  0876               	movf	ConnInit@i,w
  5266  07BF  00F5               	movwf	??_ConnInit+1
  5267  07C0  3001               	movlw	1
  5268  07C1                     u2175:	
  5269  07C1  1003               	clrc
  5270  07C2  0DF5               	rlf	??_ConnInit+1,f
  5271  07C3  3EFF               	addlw	-1
  5272  07C4  1D03               	skipz
  5273  07C5  2FC1               	goto	u2175
  5274  07C6  1003               	clrc
  5275  07C7  0D75               	rlf	??_ConnInit+1,w
  5276  07C8  3E90               	addlw	(low (_client_conn| (0+256)))& (0+255)
  5277  07C9  0084               	movwf	4
  5278  07CA  0874               	movf	??_ConnInit,w
  5279  07CB  1783               	bsf	3,7	;select IRP bank3
  5280  07CC  0080               	movwf	0
  5281                           
  5282                           ;do_am.c: 128: client_conn[i].to = i;
  5283  07CD  0876               	movf	ConnInit@i,w
  5284  07CE  00F4               	movwf	??_ConnInit
  5285  07CF  0876               	movf	ConnInit@i,w
  5286  07D0  00F5               	movwf	??_ConnInit+1
  5287  07D1  3001               	movlw	1
  5288  07D2                     u2185:	
  5289  07D2  1003               	clrc
  5290  07D3  0DF5               	rlf	??_ConnInit+1,f
  5291  07D4  3EFF               	addlw	-1
  5292  07D5  1D03               	skipz
  5293  07D6  2FD2               	goto	u2185
  5294  07D7  1003               	clrc
  5295  07D8  0D75               	rlf	??_ConnInit+1,w
  5296  07D9  3E01               	addlw	1
  5297  07DA  3E90               	addlw	(low (_client_conn| (0+256)))& (0+255)
  5298  07DB  0084               	movwf	4
  5299  07DC  0874               	movf	??_ConnInit,w
  5300  07DD  0080               	movwf	0
  5301                           
  5302                           ;do_am.c: 129: client_conn[i].msgid = 0;
  5303  07DE  0876               	movf	ConnInit@i,w
  5304  07DF  00F4               	movwf	??_ConnInit
  5305  07E0  3001               	movlw	1
  5306  07E1                     u2195:	
  5307  07E1  1003               	clrc
  5308  07E2  0DF4               	rlf	??_ConnInit,f
  5309  07E3  3EFF               	addlw	-1
  5310  07E4  1D03               	skipz
  5311  07E5  2FE1               	goto	u2195
  5312  07E6  1003               	clrc
  5313  07E7  0D74               	rlf	??_ConnInit,w
  5314  07E8  3E02               	addlw	2
  5315  07E9  3E90               	addlw	(low (_client_conn| (0+256)))& (0+255)
  5316  07EA  0084               	movwf	4
  5317  07EB  0180               	clrf	0
  5318                           
  5319                           ;do_am.c: 130: client_conn[i].available = 0;
  5320  07EC  0876               	movf	ConnInit@i,w
  5321  07ED  00F4               	movwf	??_ConnInit
  5322  07EE  3001               	movlw	1
  5323  07EF                     u2205:	
  5324  07EF  1003               	clrc
  5325  07F0  0DF4               	rlf	??_ConnInit,f
  5326  07F1  3EFF               	addlw	-1
  5327  07F2  1D03               	skipz
  5328  07F3  2FEF               	goto	u2205
  5329  07F4  1003               	clrc
  5330  07F5  0D74               	rlf	??_ConnInit,w
  5331  07F6  3E03               	addlw	3
  5332  07F7  3E90               	addlw	(low (_client_conn| (0+256)))& (0+255)
  5333  07F8  0084               	movwf	4
  5334  07F9  0180               	clrf	0
  5335  07FA  3001               	movlw	1
  5336  07FB  00F4               	movwf	??_ConnInit
  5337  07FC  0874               	movf	??_ConnInit,w
  5338  07FD  07F6               	addwf	ConnInit@i,f
  5339  07FE  2FB8               	goto	L5
  5340  07FF                     __end_of_ConnInit:	
  5341                           
  5342                           	psect	text26
  5343  0D27                     __ptext26:	
  5344 ;; *************** function _ClearMenu *****************
  5345 ;; Defined at:
  5346 ;;		line 28 in file "menu.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;		None
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  i               1   13[BANK0 ] char 
  5351 ;;  count           1   12[BANK0 ] char 
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  1    wreg      void 
  5354 ;; Registers used:
  5355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5361 ;;      Params:         0       0       0       0       0
  5362 ;;      Locals:         0       2       0       0       0
  5363 ;;      Temps:          0       1       0       0       0
  5364 ;;      Totals:         0       3       0       0       0
  5365 ;;Total ram usage:        3 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    4
  5368 ;; This function calls:
  5369 ;;		_LCDByte
  5370 ;;		_LCDGotoXY
  5371 ;;		_LCDWriteString
  5372 ;; This function is called by:
  5373 ;;		_main
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           
  5378                           ;psect for function _ClearMenu
  5379  0D27                     _ClearMenu:	
  5380                           
  5381                           ;menu.c: 30: { LCDGotoXY(0,0); int8_t count = LCDWriteString(""); for(int8_t i = count +
      +                           0; i < 16; i++) { (LCDByte(' ',1)); } };
  5382                           
  5383                           ;incstack = 0
  5384                           ; Regs used in _ClearMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5385  0D27  1283               	bcf	3,5	;RP0=0, select bank0
  5386  0D28  1303               	bcf	3,6	;RP1=0, select bank0
  5387  0D29  01A6               	clrf	LCDGotoXY@y
  5388  0D2A  3000               	movlw	0
  5389  0D2B  120A  158A  2487  120A  158A  	fcall	_LCDGotoXY
  5390  0D30  3054               	movlw	(low (((STR_12+4)-__stringbase)| (0+32768)))& (0+255)
  5391  0D31  1283               	bcf	3,5	;RP0=0, select bank0
  5392  0D32  1303               	bcf	3,6	;RP1=0, select bank0
  5393  0D33  00A6               	movwf	LCDWriteString@msg
  5394  0D34  3080               	movlw	128
  5395  0D35  00A7               	movwf	LCDWriteString@msg+1
  5396  0D36  120A  118A  258B  120A  158A  	fcall	_LCDWriteString
  5397  0D3B  1283               	bcf	3,5	;RP0=0, select bank0
  5398  0D3C  1303               	bcf	3,6	;RP1=0, select bank0
  5399  0D3D  00AB               	movwf	??_ClearMenu
  5400  0D3E  082B               	movf	??_ClearMenu,w
  5401  0D3F  00AC               	movwf	ClearMenu@count
  5402  0D40  082C               	movf	ClearMenu@count,w
  5403  0D41  00AB               	movwf	??_ClearMenu
  5404  0D42  082B               	movf	??_ClearMenu,w
  5405  0D43  00AD               	movwf	ClearMenu@i
  5406  0D44                     L6:	
  5407  0D44  082D               	movf	ClearMenu@i,w
  5408  0D45  3A80               	xorlw	128
  5409  0D46  3E70               	addlw	-144
  5410  0D47  1803               	btfsc	3,0
  5411  0D48  0008               	return
  5412  0D49  01F9               	clrf	LCDByte@isdata
  5413  0D4A  0AF9               	incf	LCDByte@isdata,f
  5414  0D4B  3020               	movlw	32
  5415  0D4C  120A  158A  26F0  120A  158A  	fcall	_LCDByte
  5416  0D51  3001               	movlw	1
  5417  0D52  1283               	bcf	3,5	;RP0=0, select bank0
  5418  0D53  1303               	bcf	3,6	;RP1=0, select bank0
  5419  0D54  00AB               	movwf	??_ClearMenu
  5420  0D55  082B               	movf	??_ClearMenu,w
  5421  0D56  07AD               	addwf	ClearMenu@i,f
  5422  0D57  2D44               	goto	L6
  5423  0D58                     __end_of_ClearMenu:	
  5424                           
  5425                           	psect	text27
  5426  058B                     __ptext27:	
  5427 ;; *************** function _LCDWriteString *****************
  5428 ;; Defined at:
  5429 ;;		line 283 in file "lcd_hd44780_pic16.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;  msg             2    6[BANK0 ] PTR const unsigned char 
  5432 ;;		 -> STR_16(1), STR_15(5), STR_14(5), STR_13(5), 
  5433 ;;		 -> STR_12(5), STR_11(5), STR_10(3), STR_9(12), 
  5434 ;;		 -> STR_8(13), STR_7(10), STR_6(10), STR_4(1), 
  5435 ;;		 -> dum_conn@s(32), STR_2(1), dum_msg@s(32), 
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;  cc              1   10[BANK0 ] char 
  5438 ;;  count           1    9[BANK0 ] char 
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  1    wreg      char 
  5441 ;; Registers used:
  5442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5448 ;;      Params:         0       2       0       0       0
  5449 ;;      Locals:         0       2       0       0       0
  5450 ;;      Temps:          0       1       0       0       0
  5451 ;;      Totals:         0       5       0       0       0
  5452 ;;Total ram usage:        5 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:    3
  5455 ;; This function calls:
  5456 ;;		_LCDByte
  5457 ;; This function is called by:
  5458 ;;		_dum_msg
  5459 ;;		_main
  5460 ;;		_ShowMenu
  5461 ;;		_ClearMenu
  5462 ;;		_dum_conn
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           
  5467                           ;psect for function _LCDWriteString
  5468  058B                     _LCDWriteString:	
  5469                           
  5470                           ;lcd_hd44780_pic16.c: 285: int8_t count = 0;
  5471                           
  5472                           ;incstack = 0
  5473                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5474  058B  1283               	bcf	3,5	;RP0=0, select bank0
  5475  058C  1303               	bcf	3,6	;RP1=0, select bank0
  5476  058D  01A9               	clrf	LCDWriteString@count
  5477  058E                     l2149:	
  5478                           ;lcd_hd44780_pic16.c: 286: while(*msg!='\0')
  5479                           
  5480  058E  0827               	movf	LCDWriteString@msg+1,w
  5481  058F  00FF               	movwf	127
  5482  0590  0826               	movf	LCDWriteString@msg,w
  5483  0591  0084               	movwf	4
  5484  0592  120A  118A  2600  120A  118A  	fcall	stringtab
  5485  0597  3A00               	xorlw	0
  5486  0598  1903               	btfsc	3,2
  5487  0599  2DEB               	goto	l2151
  5488                           
  5489                           ;lcd_hd44780_pic16.c: 287: {
  5490                           ;lcd_hd44780_pic16.c: 289: if(*msg=='%')
  5491  059A  0827               	movf	LCDWriteString@msg+1,w
  5492  059B  00FF               	movwf	127
  5493  059C  0826               	movf	LCDWriteString@msg,w
  5494  059D  0084               	movwf	4
  5495  059E  120A  118A  2600  120A  118A  	fcall	stringtab
  5496  05A3  3A25               	xorlw	37
  5497  05A4  1D03               	skipz
  5498  05A5  2DD0               	goto	l2143
  5499                           
  5500                           ;lcd_hd44780_pic16.c: 290: {
  5501                           ;lcd_hd44780_pic16.c: 291: msg++;
  5502  05A6  3001               	movlw	1
  5503  05A7  07A6               	addwf	LCDWriteString@msg,f
  5504  05A8  1803               	skipnc
  5505  05A9  0AA7               	incf	LCDWriteString@msg+1,f
  5506                           
  5507                           ;lcd_hd44780_pic16.c: 292: int8_t cc=*msg-'0';
  5508  05AA  0827               	movf	LCDWriteString@msg+1,w
  5509  05AB  00FF               	movwf	127
  5510  05AC  0826               	movf	LCDWriteString@msg,w
  5511  05AD  0084               	movwf	4
  5512  05AE  120A  118A  2600  120A  118A  	fcall	stringtab
  5513  05B3  3ED0               	addlw	-48
  5514  05B4  00A8               	movwf	??_LCDWriteString
  5515  05B5  0828               	movf	??_LCDWriteString,w
  5516  05B6  00AA               	movwf	LCDWriteString@cc
  5517                           
  5518                           ;lcd_hd44780_pic16.c: 294: if(cc>=0 && cc<=7)
  5519  05B7  1BAA               	btfsc	LCDWriteString@cc,7
  5520  05B8  2DC2               	goto	l2135
  5521  05B9  082A               	movf	LCDWriteString@cc,w
  5522  05BA  3A80               	xorlw	128
  5523  05BB  3E78               	addlw	-136
  5524  05BC  1803               	skipnc
  5525  05BD  2DC2               	goto	l2135
  5526                           
  5527                           ;lcd_hd44780_pic16.c: 295: {
  5528                           ;lcd_hd44780_pic16.c: 296: (LCDByte(cc,1));
  5529  05BE  01F9               	clrf	LCDByte@isdata
  5530  05BF  0AF9               	incf	LCDByte@isdata,f
  5531  05C0  082A               	movf	LCDWriteString@cc,w
  5532  05C1  2DDB               	goto	L7
  5533  05C2                     l2135:	
  5534                           ;lcd_hd44780_pic16.c: 298: }
  5535                           
  5536                           ;lcd_hd44780_pic16.c: 297: count++;
  5537                           
  5538                           
  5539                           ;lcd_hd44780_pic16.c: 299: else
  5540                           ;lcd_hd44780_pic16.c: 300: {
  5541                           ;lcd_hd44780_pic16.c: 301: (LCDByte('%',1));
  5542  05C2  01F9               	clrf	LCDByte@isdata
  5543  05C3  0AF9               	incf	LCDByte@isdata,f
  5544  05C4  3025               	movlw	37
  5545  05C5  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  5546                           
  5547                           ;lcd_hd44780_pic16.c: 302: count++;
  5548  05CA  3001               	movlw	1
  5549  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  5550  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  5551  05CD  00A8               	movwf	??_LCDWriteString
  5552  05CE  0828               	movf	??_LCDWriteString,w
  5553  05CF  07A9               	addwf	LCDWriteString@count,f
  5554  05D0                     l2143:	
  5555                           ;lcd_hd44780_pic16.c: 305: }
  5556                           ;lcd_hd44780_pic16.c: 306: }
  5557                           
  5558                           ;lcd_hd44780_pic16.c: 304: count++;
  5559                           
  5560                           ;lcd_hd44780_pic16.c: 303: (LCDByte(*msg,1));
  5561                           
  5562                           
  5563                           ;lcd_hd44780_pic16.c: 307: else
  5564                           ;lcd_hd44780_pic16.c: 308: {
  5565                           ;lcd_hd44780_pic16.c: 309: (LCDByte(*msg,1));
  5566  05D0  01F9               	clrf	LCDByte@isdata
  5567  05D1  0AF9               	incf	LCDByte@isdata,f
  5568  05D2  0827               	movf	LCDWriteString@msg+1,w
  5569  05D3  00FF               	movwf	127
  5570  05D4  0826               	movf	LCDWriteString@msg,w
  5571  05D5  0084               	movwf	4
  5572  05D6  120A  118A  2600  120A  118A  	fcall	stringtab
  5573  05DB                     L7:	
  5574  05DB  120A  158A  26F0  120A  118A  	fcall	_LCDByte
  5575                           
  5576                           ;lcd_hd44780_pic16.c: 310: count++;
  5577  05E0  3001               	movlw	1
  5578  05E1  1283               	bcf	3,5	;RP0=0, select bank0
  5579  05E2  1303               	bcf	3,6	;RP1=0, select bank0
  5580  05E3  00A8               	movwf	??_LCDWriteString
  5581  05E4  0828               	movf	??_LCDWriteString,w
  5582  05E5  07A9               	addwf	LCDWriteString@count,f
  5583                           
  5584                           ;lcd_hd44780_pic16.c: 311: }
  5585                           ;lcd_hd44780_pic16.c: 312: msg++;
  5586  05E6  3001               	movlw	1
  5587  05E7  07A6               	addwf	LCDWriteString@msg,f
  5588  05E8  1803               	skipnc
  5589  05E9  0AA7               	incf	LCDWriteString@msg+1,f
  5590  05EA  2D8E               	goto	l2149
  5591  05EB                     l2151:	
  5592                           
  5593                           ;lcd_hd44780_pic16.c: 313: }
  5594                           ;lcd_hd44780_pic16.c: 315: return count;
  5595  05EB  0829               	movf	LCDWriteString@count,w
  5596  05EC  0008               	return
  5597  05ED                     __end_of_LCDWriteString:	
  5598                           
  5599                           	psect	text28
  5600  0C87                     __ptext28:	
  5601 ;; *************** function _LCDGotoXY *****************
  5602 ;; Defined at:
  5603 ;;		line 367 in file "lcd_hd44780_pic16.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;  x               1    wreg     unsigned char 
  5606 ;;  y               1    6[BANK0 ] unsigned char 
  5607 ;; Auto vars:     Size  Location     Type
  5608 ;;  x               1    8[BANK0 ] unsigned char 
  5609 ;; Return value:  Size  Location     Type
  5610 ;;                  1    wreg      void 
  5611 ;; Registers used:
  5612 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5613 ;; Tracked objects:
  5614 ;;		On entry : 0/0
  5615 ;;		On exit  : 0/0
  5616 ;;		Unchanged: 0/0
  5617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5618 ;;      Params:         0       1       0       0       0
  5619 ;;      Locals:         0       1       0       0       0
  5620 ;;      Temps:          0       1       0       0       0
  5621 ;;      Totals:         0       3       0       0       0
  5622 ;;Total ram usage:        3 bytes
  5623 ;; Hardware stack levels used:    1
  5624 ;; Hardware stack levels required when called:    3
  5625 ;; This function calls:
  5626 ;;		_LCDByte
  5627 ;; This function is called by:
  5628 ;;		_dum_msg
  5629 ;;		_main
  5630 ;;		_ShowMenu
  5631 ;;		_ClearMenu
  5632 ;;		_dum_conn
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           
  5637                           ;psect for function _LCDGotoXY
  5638  0C87                     _LCDGotoXY:	
  5639                           
  5640                           ;incstack = 0
  5641                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5642                           ;LCDGotoXY@x stored from wreg
  5643  0C87  1283               	bcf	3,5	;RP0=0, select bank0
  5644  0C88  1303               	bcf	3,6	;RP1=0, select bank0
  5645  0C89  00A8               	movwf	LCDGotoXY@x
  5646                           
  5647                           ;lcd_hd44780_pic16.c: 369: if(x>=20) return;
  5648  0C8A  3014               	movlw	20
  5649  0C8B  0228               	subwf	LCDGotoXY@x,w
  5650  0C8C  1803               	btfsc	3,0
  5651  0C8D  0008               	return
  5652  0C8E  2C98               	goto	l2115
  5653  0C8F                     l264:	
  5654                           ;lcd_hd44780_pic16.c: 377: case 1:
  5655                           
  5656                           ;lcd_hd44780_pic16.c: 376: break;
  5657                           
  5658                           ;lcd_hd44780_pic16.c: 374: {
  5659                           ;lcd_hd44780_pic16.c: 375: case 0:
  5660                           
  5661                           ;lcd_hd44780_pic16.c: 373: switch(y)
  5662                           
  5663                           
  5664                           ;lcd_hd44780_pic16.c: 378: x|=0b01000000;
  5665  0C8F  1728               	bsf	LCDGotoXY@x,6
  5666                           
  5667                           ;lcd_hd44780_pic16.c: 379: break;
  5668  0C90  2CA6               	goto	l263
  5669  0C91                     l2109:	
  5670                           ;lcd_hd44780_pic16.c: 380: case 2:
  5671                           
  5672                           
  5673                           ;lcd_hd44780_pic16.c: 381: x+=0x14;
  5674  0C91  3014               	movlw	20
  5675  0C92  2C94               	goto	L8
  5676  0C93                     l2111:	
  5677                           ;lcd_hd44780_pic16.c: 383: case 3:
  5678                           
  5679                           ;lcd_hd44780_pic16.c: 382: break;
  5680                           
  5681                           
  5682                           ;lcd_hd44780_pic16.c: 384: x+=0x54;
  5683  0C93  3054               	movlw	84
  5684  0C94                     L8:	
  5685  0C94  00A7               	movwf	??_LCDGotoXY
  5686  0C95  0827               	movf	??_LCDGotoXY,w
  5687  0C96  07A8               	addwf	LCDGotoXY@x,f
  5688                           
  5689                           ;lcd_hd44780_pic16.c: 386: }
  5690                           
  5691                           ;lcd_hd44780_pic16.c: 385: break;
  5692  0C97  2CA6               	goto	l263
  5693  0C98                     l2115:	
  5694  0C98  0826               	movf	LCDGotoXY@y,w
  5695                           
  5696                           ; Switch size 1, requested type "space"
  5697                           ; Number of cases is 4, Range of values is 0 to 3
  5698                           ; switch strategies available:
  5699                           ; Name         Instructions Cycles
  5700                           ; simple_byte           13     7 (average)
  5701                           ; direct_byte           20     8 (fixed)
  5702                           ; jumptable            260     6 (fixed)
  5703                           ;	Chosen strategy is simple_byte
  5704  0C99  3A00               	xorlw	0	; case 0
  5705  0C9A  1903               	skipnz
  5706  0C9B  2CA6               	goto	l263
  5707  0C9C  3A01               	xorlw	1	; case 1
  5708  0C9D  1903               	skipnz
  5709  0C9E  2C8F               	goto	l264
  5710  0C9F  3A03               	xorlw	3	; case 2
  5711  0CA0  1903               	skipnz
  5712  0CA1  2C91               	goto	l2109
  5713  0CA2  3A01               	xorlw	1	; case 3
  5714  0CA3  1903               	skipnz
  5715  0CA4  2C93               	goto	l2111
  5716  0CA5  2CA6               	goto	l263
  5717  0CA6                     l263:	
  5718                           
  5719                           ;lcd_hd44780_pic16.c: 408: x|=0b10000000;
  5720  0CA6  17A8               	bsf	LCDGotoXY@x,7
  5721                           
  5722                           ;lcd_hd44780_pic16.c: 409: (LCDByte(x,0));
  5723  0CA7  01F9               	clrf	LCDByte@isdata
  5724  0CA8  0828               	movf	LCDGotoXY@x,w
  5725  0CA9  120A  158A  26F0   	fcall	_LCDByte
  5726  0CAC  0008               	return
  5727  0CAD                     __end_of_LCDGotoXY:	
  5728                           
  5729                           	psect	text29
  5730  0EF0                     __ptext29:	
  5731 ;; *************** function _LCDByte *****************
  5732 ;; Defined at:
  5733 ;;		line 80 in file "lcd_hd44780_pic16.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;  c               1    wreg     unsigned char 
  5736 ;;  isdata          1    9[COMMON] unsigned char 
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;  c               1    4[BANK0 ] unsigned char 
  5739 ;;  temp            1    5[BANK0 ] unsigned char 
  5740 ;;  ln              1    3[BANK0 ] unsigned char 
  5741 ;;  hn              1    2[BANK0 ] unsigned char 
  5742 ;; Return value:  Size  Location     Type
  5743 ;;                  1    wreg      void 
  5744 ;; Registers used:
  5745 ;;		wreg, status,2, status,0, pclath, cstack
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5751 ;;      Params:         1       0       0       0       0
  5752 ;;      Locals:         0       4       0       0       0
  5753 ;;      Temps:          0       2       0       0       0
  5754 ;;      Totals:         1       6       0       0       0
  5755 ;;Total ram usage:        7 bytes
  5756 ;; Hardware stack levels used:    1
  5757 ;; Hardware stack levels required when called:    2
  5758 ;; This function calls:
  5759 ;;		_LCDBusyLoop
  5760 ;; This function is called by:
  5761 ;;		_dum_msg
  5762 ;;		_main
  5763 ;;		_LCDSetStyle
  5764 ;;		_LCDInit
  5765 ;;		_LCDWriteString
  5766 ;;		_LCDWriteInt
  5767 ;;		_LCDGotoXY
  5768 ;;		_ShowMenu
  5769 ;;		_ClearMenu
  5770 ;;		_dum_conn
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           
  5775                           ;psect for function _LCDByte
  5776  0EF0                     _LCDByte:	
  5777                           
  5778                           ;incstack = 0
  5779                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  5780                           ;LCDByte@c stored from wreg
  5781  0EF0  1283               	bcf	3,5	;RP0=0, select bank0
  5782  0EF1  1303               	bcf	3,6	;RP1=0, select bank0
  5783  0EF2  00A4               	movwf	LCDByte@c
  5784                           
  5785                           ;lcd_hd44780_pic16.c: 89: uint8_t hn,ln;
  5786                           ;lcd_hd44780_pic16.c: 90: uint8_t temp;
  5787                           ;lcd_hd44780_pic16.c: 92: hn=c>>4;
  5788  0EF3  0824               	movf	LCDByte@c,w
  5789  0EF4  00A0               	movwf	??_LCDByte
  5790  0EF5  3004               	movlw	4
  5791  0EF6                     u1555:	
  5792  0EF6  1003               	clrc
  5793  0EF7  0CA0               	rrf	??_LCDByte,f
  5794  0EF8  3EFF               	addlw	-1
  5795  0EF9  1D03               	skipz
  5796  0EFA  2EF6               	goto	u1555
  5797  0EFB  0820               	movf	??_LCDByte,w
  5798  0EFC  00A1               	movwf	??_LCDByte+1
  5799  0EFD  0821               	movf	??_LCDByte+1,w
  5800  0EFE  00A2               	movwf	LCDByte@hn
  5801                           
  5802                           ;lcd_hd44780_pic16.c: 93: ln=(c & 0x0F);
  5803  0EFF  0824               	movf	LCDByte@c,w
  5804  0F00  390F               	andlw	15
  5805  0F01  00A0               	movwf	??_LCDByte
  5806  0F02  0820               	movf	??_LCDByte,w
  5807  0F03  00A3               	movwf	LCDByte@ln
  5808                           
  5809                           ;lcd_hd44780_pic16.c: 95: if(isdata==0)
  5810  0F04  0879               	movf	LCDByte@isdata,w
  5811  0F05  1D03               	btfss	3,2
  5812  0F06  2F09               	goto	l214
  5813                           
  5814                           ;lcd_hd44780_pic16.c: 96: (RC1=0);
  5815  0F07  1087               	bcf	7,1	;volatile
  5816  0F08  2F0A               	goto	l215
  5817  0F09                     l214:	
  5818                           
  5819                           ;lcd_hd44780_pic16.c: 97: else
  5820                           ;lcd_hd44780_pic16.c: 98: (RC1=1);
  5821  0F09  1487               	bsf	7,1	;volatile
  5822  0F0A                     l215:	
  5823                           
  5824                           ;lcd_hd44780_pic16.c: 100: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  5825  0F0A  2F0B               	nop2	;2 cycle nop
  5826                           
  5827                           ;lcd_hd44780_pic16.c: 102: (RC3=1);
  5828  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  5829  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  5830  0F0D  1587               	bsf	7,3	;volatile
  5831                           
  5832                           ;lcd_hd44780_pic16.c: 106: temp=(PORTC & (~(0X0F<<4)))|((hn<<4));
  5833  0F0E  0822               	movf	LCDByte@hn,w
  5834  0F0F  00A0               	movwf	??_LCDByte
  5835  0F10  3004               	movlw	4
  5836  0F11                     u1575:	
  5837  0F11  1003               	clrc
  5838  0F12  0DA0               	rlf	??_LCDByte,f
  5839  0F13  3EFF               	addlw	-1
  5840  0F14  1D03               	skipz
  5841  0F15  2F11               	goto	u1575
  5842  0F16  0807               	movf	7,w	;volatile
  5843  0F17  390F               	andlw	15
  5844  0F18  0420               	iorwf	??_LCDByte,w
  5845  0F19  00A1               	movwf	??_LCDByte+1
  5846  0F1A  0821               	movf	??_LCDByte+1,w
  5847  0F1B  00A5               	movwf	LCDByte@temp
  5848                           
  5849                           ;lcd_hd44780_pic16.c: 107: PORTC=temp;
  5850  0F1C  0825               	movf	LCDByte@temp,w
  5851  0F1D  0087               	movwf	7	;volatile
  5852                           
  5853                           ;lcd_hd44780_pic16.c: 109: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5854  0F1E  2F1F               	nop2	;2 cycle nop
  5855  0F1F  2F20               	nop2	;2 cycle nop
  5856  0F20  0000               	nop
  5857                           
  5858                           ;lcd_hd44780_pic16.c: 113: (RC3=0);
  5859  0F21  1283               	bcf	3,5	;RP0=0, select bank0
  5860  0F22  1303               	bcf	3,6	;RP1=0, select bank0
  5861  0F23  1187               	bcf	7,3	;volatile
  5862                           
  5863                           ;lcd_hd44780_pic16.c: 115: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5864  0F24  2F25               	nop2	;2 cycle nop
  5865  0F25  2F26               	nop2	;2 cycle nop
  5866  0F26  0000               	nop
  5867                           
  5868                           ;lcd_hd44780_pic16.c: 118: (RC3=1);
  5869  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  5870  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  5871  0F29  1587               	bsf	7,3	;volatile
  5872                           
  5873                           ;lcd_hd44780_pic16.c: 120: temp=(PORTC & (~(0X0F<<4)))|((ln<<4));
  5874  0F2A  0823               	movf	LCDByte@ln,w
  5875  0F2B  00A0               	movwf	??_LCDByte
  5876  0F2C  3004               	movlw	4
  5877  0F2D                     u1585:	
  5878  0F2D  1003               	clrc
  5879  0F2E  0DA0               	rlf	??_LCDByte,f
  5880  0F2F  3EFF               	addlw	-1
  5881  0F30  1D03               	skipz
  5882  0F31  2F2D               	goto	u1585
  5883  0F32  0807               	movf	7,w	;volatile
  5884  0F33  390F               	andlw	15
  5885  0F34  0420               	iorwf	??_LCDByte,w
  5886  0F35  00A1               	movwf	??_LCDByte+1
  5887  0F36  0821               	movf	??_LCDByte+1,w
  5888  0F37  00A5               	movwf	LCDByte@temp
  5889                           
  5890                           ;lcd_hd44780_pic16.c: 122: PORTC=temp;
  5891  0F38  0825               	movf	LCDByte@temp,w
  5892  0F39  0087               	movwf	7	;volatile
  5893                           
  5894                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5895  0F3A  2F3B               	nop2	;2 cycle nop
  5896  0F3B  2F3C               	nop2	;2 cycle nop
  5897  0F3C  0000               	nop
  5898                           
  5899                           ;lcd_hd44780_pic16.c: 128: (RC3=0);
  5900  0F3D  1283               	bcf	3,5	;RP0=0, select bank0
  5901  0F3E  1303               	bcf	3,6	;RP1=0, select bank0
  5902  0F3F  1187               	bcf	7,3	;volatile
  5903                           
  5904                           ;lcd_hd44780_pic16.c: 130: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5905  0F40  2F41               	nop2	;2 cycle nop
  5906  0F41  2F42               	nop2	;2 cycle nop
  5907  0F42  0000               	nop
  5908                           
  5909                           ;lcd_hd44780_pic16.c: 132: LCDBusyLoop();
  5910  0F43  120A  118A  26ED   	fcall	_LCDBusyLoop
  5911  0F46  0008               	return
  5912  0F47                     __end_of_LCDByte:	
  5913                           
  5914                           	psect	text30
  5915  06ED                     __ptext30:	
  5916 ;; *************** function _LCDBusyLoop *****************
  5917 ;; Defined at:
  5918 ;;		line 135 in file "lcd_hd44780_pic16.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;		None
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;  status          1    8[COMMON] unsigned char 
  5923 ;;  temp            1    7[COMMON] unsigned char 
  5924 ;;  busy            1    6[COMMON] unsigned char 
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  1    wreg      void 
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5934 ;;      Params:         0       0       0       0       0
  5935 ;;      Locals:         3       0       0       0       0
  5936 ;;      Temps:          2       0       0       0       0
  5937 ;;      Totals:         5       0       0       0       0
  5938 ;;Total ram usage:        5 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    1
  5941 ;; This function calls:
  5942 ;;		Nothing
  5943 ;; This function is called by:
  5944 ;;		_LCDByte
  5945 ;;		_LCDInit
  5946 ;; This function uses a non-reentrant model
  5947 ;;
  5948                           
  5949                           
  5950                           ;psect for function _LCDBusyLoop
  5951  06ED                     _LCDBusyLoop:	
  5952                           
  5953                           ;lcd_hd44780_pic16.c: 139: uint8_t busy,status=0x00,temp;
  5954                           
  5955                           ;incstack = 0
  5956                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  5957  06ED  01F8               	clrf	LCDBusyLoop@status
  5958                           
  5959                           ;lcd_hd44780_pic16.c: 142: TRISC|=(0x0f<<4);
  5960  06EE  30F0               	movlw	240
  5961  06EF  00F4               	movwf	??_LCDBusyLoop
  5962  06F0  0874               	movf	??_LCDBusyLoop,w
  5963  06F1  1683               	bsf	3,5	;RP0=1, select bank1
  5964  06F2  1303               	bcf	3,6	;RP1=0, select bank1
  5965  06F3  0487               	iorwf	7,f	;volatile
  5966                           
  5967                           ;lcd_hd44780_pic16.c: 145: (RC2=1);
  5968  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  5969  06F5  1303               	bcf	3,6	;RP1=0, select bank0
  5970  06F6  1507               	bsf	7,2	;volatile
  5971                           
  5972                           ;lcd_hd44780_pic16.c: 146: (RC1=0);
  5973  06F7  1087               	bcf	7,1	;volatile
  5974                           
  5975                           ;lcd_hd44780_pic16.c: 150: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  5976  06F8  2EF9               	nop2	;2 cycle nop
  5977  06F9                     l1777:	
  5978                           ;lcd_hd44780_pic16.c: 153: do
  5979                           
  5980                           
  5981                           ;lcd_hd44780_pic16.c: 154: {
  5982                           ;lcd_hd44780_pic16.c: 156: (RC3=1);
  5983  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  5984  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  5985  06FB  1587               	bsf	7,3	;volatile
  5986                           
  5987                           ;lcd_hd44780_pic16.c: 159: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  5988  06FC  2EFD               	nop2	;2 cycle nop
  5989                           
  5990                           ;lcd_hd44780_pic16.c: 161: status=(PORTC>>4);
  5991  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  5992  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  5993  06FF  0807               	movf	7,w	;volatile
  5994  0700  00F4               	movwf	??_LCDBusyLoop
  5995  0701  3004               	movlw	4
  5996  0702                     u1495:	
  5997  0702  1003               	clrc
  5998  0703  0CF4               	rrf	??_LCDBusyLoop,f
  5999  0704  3EFF               	addlw	-1
  6000  0705  1D03               	skipz
  6001  0706  2F02               	goto	u1495
  6002  0707  0874               	movf	??_LCDBusyLoop,w
  6003  0708  00F5               	movwf	??_LCDBusyLoop+1
  6004  0709  0875               	movf	??_LCDBusyLoop+1,w
  6005  070A  00F8               	movwf	LCDBusyLoop@status
  6006                           
  6007                           ;lcd_hd44780_pic16.c: 162: status=status<<4;
  6008  070B  0878               	movf	LCDBusyLoop@status,w
  6009  070C  00F4               	movwf	??_LCDBusyLoop
  6010  070D  3003               	movlw	3
  6011  070E                     u1505:	
  6012  070E  1003               	clrc
  6013  070F  0DF4               	rlf	??_LCDBusyLoop,f
  6014  0710  3EFF               	addlw	-1
  6015  0711  1D03               	skipz
  6016  0712  2F0E               	goto	u1505
  6017  0713  1003               	clrc
  6018  0714  0D74               	rlf	??_LCDBusyLoop,w
  6019  0715  00F5               	movwf	??_LCDBusyLoop+1
  6020  0716  0875               	movf	??_LCDBusyLoop+1,w
  6021  0717  00F8               	movwf	LCDBusyLoop@status
  6022                           
  6023                           ;lcd_hd44780_pic16.c: 164: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  6024  0718  2F19               	nop2	;2 cycle nop
  6025                           
  6026                           ;lcd_hd44780_pic16.c: 167: (RC3=0);
  6027  0719  1283               	bcf	3,5	;RP0=0, select bank0
  6028  071A  1303               	bcf	3,6	;RP1=0, select bank0
  6029  071B  1187               	bcf	7,3	;volatile
  6030                           
  6031                           ;lcd_hd44780_pic16.c: 168: _delay((unsigned long)((1)*(20000000/4000000.0)));
  6032  071C  2F1D               	nop2	;2 cycle nop
  6033  071D  2F1E               	nop2	;2 cycle nop
  6034  071E  0000               	nop
  6035                           
  6036                           ;lcd_hd44780_pic16.c: 170: (RC3=1);
  6037  071F  1283               	bcf	3,5	;RP0=0, select bank0
  6038  0720  1303               	bcf	3,6	;RP1=0, select bank0
  6039  0721  1587               	bsf	7,3	;volatile
  6040                           
  6041                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  6042  0722  2F23               	nop2	;2 cycle nop
  6043                           
  6044                           ;lcd_hd44780_pic16.c: 173: temp=(PORTC>>4);
  6045  0723  1283               	bcf	3,5	;RP0=0, select bank0
  6046  0724  1303               	bcf	3,6	;RP1=0, select bank0
  6047  0725  0807               	movf	7,w	;volatile
  6048  0726  00F4               	movwf	??_LCDBusyLoop
  6049  0727  3004               	movlw	4
  6050  0728                     u1515:	
  6051  0728  1003               	clrc
  6052  0729  0CF4               	rrf	??_LCDBusyLoop,f
  6053  072A  3EFF               	addlw	-1
  6054  072B  1D03               	skipz
  6055  072C  2F28               	goto	u1515
  6056  072D  0874               	movf	??_LCDBusyLoop,w
  6057  072E  00F5               	movwf	??_LCDBusyLoop+1
  6058  072F  0875               	movf	??_LCDBusyLoop+1,w
  6059  0730  00F7               	movwf	LCDBusyLoop@temp
  6060                           
  6061                           ;lcd_hd44780_pic16.c: 174: temp&=0x0F;
  6062  0731  300F               	movlw	15
  6063  0732  00F4               	movwf	??_LCDBusyLoop
  6064  0733  0874               	movf	??_LCDBusyLoop,w
  6065  0734  05F7               	andwf	LCDBusyLoop@temp,f
  6066                           
  6067                           ;lcd_hd44780_pic16.c: 176: status=status|temp;
  6068  0735  0878               	movf	LCDBusyLoop@status,w
  6069  0736  0477               	iorwf	LCDBusyLoop@temp,w
  6070  0737  00F4               	movwf	??_LCDBusyLoop
  6071  0738  0874               	movf	??_LCDBusyLoop,w
  6072  0739  00F8               	movwf	LCDBusyLoop@status
  6073                           
  6074                           ;lcd_hd44780_pic16.c: 178: busy=status & 0b10000000;
  6075  073A  0878               	movf	LCDBusyLoop@status,w
  6076  073B  3980               	andlw	128
  6077  073C  00F4               	movwf	??_LCDBusyLoop
  6078  073D  0874               	movf	??_LCDBusyLoop,w
  6079  073E  00F6               	movwf	LCDBusyLoop@busy
  6080                           
  6081                           ;lcd_hd44780_pic16.c: 180: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  6082  073F  2F40               	nop2	;2 cycle nop
  6083                           
  6084                           ;lcd_hd44780_pic16.c: 182: (RC3=0);
  6085  0740  1283               	bcf	3,5	;RP0=0, select bank0
  6086  0741  1303               	bcf	3,6	;RP1=0, select bank0
  6087  0742  1187               	bcf	7,3	;volatile
  6088                           
  6089                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((1)*(20000000/4000000.0)));
  6090  0743  2F44               	nop2	;2 cycle nop
  6091  0744  2F45               	nop2	;2 cycle nop
  6092  0745  0000               	nop
  6093                           
  6094                           ;lcd_hd44780_pic16.c: 184: }while(busy);
  6095  0746  0876               	movf	LCDBusyLoop@busy,w
  6096  0747  1D03               	btfss	3,2
  6097  0748  2EF9               	goto	l1777
  6098                           
  6099                           ;lcd_hd44780_pic16.c: 186: (RC2=0);
  6100  0749  1283               	bcf	3,5	;RP0=0, select bank0
  6101  074A  1303               	bcf	3,6	;RP1=0, select bank0
  6102  074B  1107               	bcf	7,2	;volatile
  6103                           
  6104                           ;lcd_hd44780_pic16.c: 189: TRISC&=(~(0x0F<<4));
  6105  074C  300F               	movlw	15
  6106  074D  00F4               	movwf	??_LCDBusyLoop
  6107  074E  0874               	movf	??_LCDBusyLoop,w
  6108  074F  1683               	bsf	3,5	;RP0=1, select bank1
  6109  0750  1303               	bcf	3,6	;RP1=0, select bank1
  6110  0751  0587               	andwf	7,f	;volatile
  6111  0752  0008               	return
  6112  0753                     __end_of_LCDBusyLoop:	
  6113                           
  6114                           	psect	text31
  6115  0C41                     __ptext31:	
  6116 ;; *************** function _ADCInit *****************
  6117 ;; Defined at:
  6118 ;;		line 7 in file "adc_pic16.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;		None
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;		None
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		wreg, status,2, status,0
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6132 ;;      Params:         0       0       0       0       0
  6133 ;;      Locals:         0       0       0       0       0
  6134 ;;      Temps:          0       0       0       0       0
  6135 ;;      Totals:         0       0       0       0       0
  6136 ;;Total ram usage:        0 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:    1
  6139 ;; This function calls:
  6140 ;;		Nothing
  6141 ;; This function is called by:
  6142 ;;		_main
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           
  6147                           ;psect for function _ADCInit
  6148  0C41                     _ADCInit:	
  6149                           
  6150                           ;adc_pic16.c: 10: TRISBbits.TRISB5 = 1;
  6151                           
  6152                           ;incstack = 0
  6153                           ; Regs used in _ADCInit: [wreg+status,2+status,0]
  6154  0C41  1683               	bsf	3,5	;RP0=1, select bank1
  6155  0C42  1303               	bcf	3,6	;RP1=0, select bank1
  6156  0C43  1686               	bsf	6,5	;volatile
  6157                           
  6158                           ;adc_pic16.c: 11: ANSELHbits.ANS13 = 1;
  6159  0C44  1683               	bsf	3,5	;RP0=1, select bank3
  6160  0C45  1703               	bsf	3,6	;RP1=1, select bank3
  6161  0C46  1689               	bsf	9,5	;volatile
  6162                           
  6163                           ;adc_pic16.c: 17: ADCON1bits.VCFG0 = 0;
  6164  0C47  1683               	bsf	3,5	;RP0=1, select bank1
  6165  0C48  1303               	bcf	3,6	;RP1=0, select bank1
  6166  0C49  121F               	bcf	31,4	;volatile
  6167                           
  6168                           ;adc_pic16.c: 19: ADCON0bits.ADCS = 0b11;
  6169  0C4A  30C0               	movlw	192
  6170  0C4B  1283               	bcf	3,5	;RP0=0, select bank0
  6171  0C4C  1303               	bcf	3,6	;RP1=0, select bank0
  6172  0C4D  049F               	iorwf	31,f	;volatile
  6173                           
  6174                           ;adc_pic16.c: 22: ADCON1bits.ADFM = 1;
  6175  0C4E  1683               	bsf	3,5	;RP0=1, select bank1
  6176  0C4F  1303               	bcf	3,6	;RP1=0, select bank1
  6177  0C50  179F               	bsf	31,7	;volatile
  6178                           
  6179                           ;adc_pic16.c: 24: ADCON0bits.ADON = 1;
  6180  0C51  1283               	bcf	3,5	;RP0=0, select bank0
  6181  0C52  1303               	bcf	3,6	;RP1=0, select bank0
  6182  0C53  141F               	bsf	31,0	;volatile
  6183  0C54  0008               	return
  6184  0C55                     __end_of_ADCInit:	
  6185                           
  6186                           	psect	text32
  6187  0BDC                     __ptext32:	
  6188 ;; *************** function _ISR *****************
  6189 ;; Defined at:
  6190 ;;		line 180 in file "do_am.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;		None
  6193 ;; Auto vars:     Size  Location     Type
  6194 ;;		None
  6195 ;; Return value:  Size  Location     Type
  6196 ;;                  1    wreg      void 
  6197 ;; Registers used:
  6198 ;;		None
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/0
  6201 ;;		On exit  : 0/0
  6202 ;;		Unchanged: 0/0
  6203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6204 ;;      Params:         0       0       0       0       0
  6205 ;;      Locals:         0       0       0       0       0
  6206 ;;      Temps:          4       0       0       0       0
  6207 ;;      Totals:         4       0       0       0       0
  6208 ;;Total ram usage:        4 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; This function calls:
  6211 ;;		Nothing
  6212 ;; This function is called by:
  6213 ;;		Interrupt level 1
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           
  6218                           ;psect for function _ISR
  6219  0BDC                     _ISR:	
  6220  0BDC  0873               	movf	??_ISR+3,w
  6221  0BDD  00FF               	movwf	127
  6222  0BDE  0872               	movf	??_ISR+2,w
  6223  0BDF  008A               	movwf	10
  6224  0BE0  0871               	movf	??_ISR+1,w
  6225  0BE1  0084               	movwf	4
  6226  0BE2  0E70               	swapf	??_ISR^(0+-128),w
  6227  0BE3  0083               	movwf	3
  6228  0BE4  0EFE               	swapf	126,f
  6229  0BE5  0E7E               	swapf	126,w
  6230  0BE6  0009               	retfie
  6231  0BE7                     __end_of_ISR:	
  6232  007E                     btemp	set	126	;btemp
  6233  007E                     wtemp	set	126
  6234  007E                     wtemp0	set	126
  6235  0080                     wtemp1	set	128
  6236  0082                     wtemp2	set	130
  6237  0084                     wtemp3	set	132
  6238  0086                     wtemp4	set	134
  6239  0088                     wtemp5	set	136
  6240  007F                     wtemp6	set	127
  6241  007E                     ttemp	set	126
  6242  007E                     ttemp0	set	126
  6243  0081                     ttemp1	set	129
  6244  0084                     ttemp2	set	132
  6245  0087                     ttemp3	set	135
  6246  007F                     ttemp4	set	127
  6247  007E                     ltemp	set	126
  6248  007E                     ltemp0	set	126
  6249  0082                     ltemp1	set	130
  6250  0086                     ltemp2	set	134
  6251  0080                     ltemp3	set	128
  6252                           
  6253                           	psect	intentry
  6254  0004                     __pintentry:	
  6255                           ;incstack = 0
  6256                           ; Regs used in _ISR: []
  6257                           
  6258  0004                     interrupt_function:	
  6259  007E                     saved_w	set	btemp
  6260  0004  00FE               	movwf	btemp
  6261  0005  0E03               	swapf	3,w
  6262  0006  00F0               	movwf	??_ISR
  6263  0007  0804               	movf	4,w
  6264  0008  00F1               	movwf	??_ISR+1
  6265  0009  080A               	movf	10,w
  6266  000A  00F2               	movwf	??_ISR+2
  6267  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6268  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6269  000D  087F               	movf	btemp+1,w
  6270  000E  00F3               	movwf	??_ISR+3
  6271  000F  120A  158A  2BDC   	ljmp	_ISR


Data Sizes:
    Strings     101
    Constant    10
    Data        16
    BSS         96
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80     77      77
    BANK1            80     29      77
    BANK3            96      0      64
    BANK2            96      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(1) Largest target is 23
		 -> msg(BANK1[23]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 23
		 -> msg(BANK1[23]), 

    memcpy@s1	PTR const void  size(2) Largest target is 4
		 -> main@rqt(BANK1[1]), STR_5(CODE[4]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 4
		 -> main@rqt(BANK1[1]), STR_5(CODE[4]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_3(CODE[14]), STR_1(CODE[20]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 32
		 -> dum_conn@s(BANK0[32]), dum_msg@s(BANK0[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S644$name	PTR unsigned char  size(1) Largest target is 5
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), 

    g_menu.items.name	PTR unsigned char  size(1) Largest target is 5
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), 

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_16(CODE[1]), STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), 
		 -> STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[3]), STR_9(CODE[12]), 
		 -> STR_8(CODE[13]), STR_7(CODE[10]), STR_6(CODE[10]), STR_4(CODE[1]), 
		 -> dum_conn@s(BANK0[32]), STR_2(CODE[1]), dum_msg@s(BANK0[32]), 

    main@byte_534	PTR struct . size(1) Largest target is 23
		 -> msg(BANK1[23]), 

    main@byte	PTR struct . size(1) Largest target is 23
		 -> msg(BANK1[23]), 

    main@s	PTR unsigned char  size(1) Largest target is 23
		 -> msg(BANK1[23]), 

    main@pconn	PTR struct . size(1) Largest target is 64
		 -> NULL(NULL[0]), client_conn(BANK3[64]), 

    main@prsp	PTR struct . size(1) Largest target is 1
		 -> main@rsp(BANK1[1]), 

    main@prqt	PTR struct . size(1) Largest target is 1
		 -> main@rqt(BANK1[1]), 

    pmsg	PTR struct . size(1) Largest target is 23
		 -> msg(BANK1[23]), 

    create_REG_ID_RQT_CMD@prqt	PTR const struct . size(1) Largest target is 1
		 -> main@rqt(BANK1[1]), 

    create_REG_ID_RQT_CMD@pconn	PTR struct . size(1) Largest target is 64
		 -> NULL(NULL[0]), client_conn(BANK3[64]), 

    create_REG_ID_RQT_CMD@pmsg	PTR struct . size(1) Largest target is 23
		 -> msg(BANK1[23]), 

    dum_msg@pmsg	PTR struct . size(1) Largest target is 23
		 -> msg(BANK1[23]), 

    sp__memcpy	PTR void  size(1) Largest target is 23
		 -> msg(BANK1[23]), 

    compose@data	PTR unsigned char  size(2) Largest target is 4
		 -> main@rqt(BANK1[1]), STR_5(CODE[4]), 

    compose@pmsg	PTR struct . size(1) Largest target is 23
		 -> msg(BANK1[23]), 

    crc_calculate@pmsg	PTR struct . size(1) Largest target is 23
		 -> msg(BANK1[23]), 


Critical Paths under _main in COMMON

    _main->_LCDByte
    _main->_MenuInit
    _main->_create_REG_ID_RQT_CMD
    _dum_msg->_LCDByte
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _compose->_crc_calculate
    _compose->_memcpy
    _ValueInc->_SaveMenuItem
    _ValueDec->_SaveMenuItem
    _SaveMenuItem->_eeprom_write
    _ShowMenu->_LCDByte
    _LCDWriteInt->_LCDByte
    _MenuInit->_LoadMenuItem
    _LoadMenuItem->_eeprom_read
    _LCDSetStyle->_LCDByte
    _LCDInit->_LCDByte
    _ClearMenu->_LCDByte
    _LCDWriteString->_LCDByte
    _LCDGotoXY->_LCDByte
    _LCDByte->_LCDBusyLoop

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_dum_msg
    _dum_msg->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _create_REG_ID_RQT_CMD->_compose
    _compose->_crc_calculate
    _compose->_memcpy
    _ShowMenu->_LCDWriteInt
    _LCDWriteInt->_LCDByte
    _LCDSetStyle->_LCDByte
    _LCDInit->_LCDByte
    _ClearMenu->_LCDWriteString
    _LCDWriteString->_LCDByte
    _LCDGotoXY->_LCDByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0   43774
                                              0 BANK1     29    29      0
                            _ADCInit
                          _ClearMenu
                           _ConnInit
                             _IOInit
                            _LCDByte
                          _LCDGotoXY
                            _LCDInit
                        _LCDSetStyle
                     _LCDWriteString
                           _MenuDown
                           _MenuInit
                             _MenuUp
                           _ShowMenu
                           _ValueDec
                           _ValueInc
                            _compose
              _create_REG_ID_RQT_CMD
                            _dum_msg
 ---------------------------------------------------------------------------------
 (1) _dum_msg                                             46    46      0    8647
                                             31 BANK0     46    46      0
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             31    18     13    1242
                                              8 BANK0     23    10     13
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              9 COMMON     1     1      0
                                              3 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              4 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _create_REG_ID_RQT_CMD                                6     4      2    2745
                                              9 COMMON     1     1      0
                                             16 BANK0      5     3      2
                            _compose
 ---------------------------------------------------------------------------------
 (2) _compose                                             12     5      7    2477
                                              4 BANK0     12     5      7
                      _crc_calculate
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                               9     5      4     594
                                              4 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _crc_calculate                                        9     7      2     288
                                              4 COMMON     5     3      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _ValueInc                                             2     2      0     152
                                              0 BANK0      2     2      0
                       _SaveMenuItem
 ---------------------------------------------------------------------------------
 (1) _ValueDec                                             1     1      0     152
                                              0 BANK0      1     1      0
                       _SaveMenuItem
 ---------------------------------------------------------------------------------
 (2) _SaveMenuItem                                         3     3      0     152
                                              7 COMMON     3     3      0
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     108
                                              4 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _ShowMenu                                             6     6      0   10286
                                             20 BANK0      6     6      0
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (2) _LCDWriteInt                                         14    11      3    3100
                                              6 BANK0     14    11      3
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     424
                                              4 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              4 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _MenuUp                                               1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _MenuInit                                             1     1      0      66
                                              9 COMMON     1     1      0
                       _LoadMenuItem
 ---------------------------------------------------------------------------------
 (2) _LoadMenuItem                                         3     3      0      66
                                              6 COMMON     3     3      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _MenuDown                                             1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCDSetStyle                                          1     1      0    1769
                                              6 BANK0      1     1      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              4     4      0    1954
                                              6 BANK0      4     4      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _IOInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConnInit                                             3     3      0     156
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ClearMenu                                            3     3      0    7186
                                             11 BANK0      3     3      0
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (2) _LCDWriteString                                       5     3      2    2721
                                              6 BANK0      5     3      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _LCDGotoXY                                            3     2      1    2649
                                              6 BANK0      3     2      1
                            _LCDByte
 ---------------------------------------------------------------------------------
 (3) _LCDByte                                              7     6      1    1747
                                              9 COMMON     1     0      1
                                              0 BANK0      6     6      0
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (4) _LCDBusyLoop                                          5     5      0     117
                                              4 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _ClearMenu
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
   _ConnInit
   _IOInit
   _LCDByte
     _LCDBusyLoop
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _LCDSetStyle
     _LCDByte
       _LCDBusyLoop
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   _MenuDown
   _MenuInit
     _LoadMenuItem
       _eeprom_read
   _MenuUp
   _ShowMenu
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteInt
       _LCDByte
         _LCDBusyLoop
       ___awdiv
       ___awmod
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
   _ValueDec
     _SaveMenuItem
       _eeprom_write
   _ValueInc
     _SaveMenuItem
       _eeprom_write
   _compose
     _crc_calculate
     _memcpy
   _create_REG_ID_RQT_CMD
     _compose
       _crc_calculate
       _memcpy
   _dum_msg
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      40       9       66.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     1D      4D       7       96.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4D      4D       5       96.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      E4      12        0.0%
ABS                  0      0      E4       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Jun 26 16:18:40 2016

                  ?_LCDBusyLoop 0070                      __CFG_CP$ON 0000                               pc 0002  
                            _RD 0C60                     __CFG_CPD$ON 0000                              _WR 0C61  
                  ___awdiv@sign 0021                              fsr 0004                    ?_LCDSetStyle 0070  
                   __CFG_LVP$ON 0000                             l214 0F09                             l215 0F0A  
                           l173 0271                             l263 0CA6                             l264 0C8F  
                           l176 02B0                             l363 0C6D                             l385 0CAE  
                           _GIE 005F                             _RB0 0030                             _RB1 0031  
                           _RB2 0032                             _RC1 0039                             _RB3 0033  
                           _RA5 002D                             _RC2 003A                             _RB4 0034  
                           _RC3 003B                             _RB5 0035                             _RA7 002F  
                           _RB6 0036                             _RB7 0037                             _ISR 0BDC  
                           _msg 00A9                             fsr0 0004                 __end_of_ADCInit 0C55  
                           indf 0000                    ___awmod@sign 0021                    __CFG_IESO$ON 0000  
       LCDWriteInt@field_length 0028                 __end_of_LCDByte 0F47                 __end_of_LCDInit 07B7  
                  ?_LCDWriteInt 0026                            ?_ISR 0070                     LCDByte@temp 0025  
                          l2001 0DF8                            l2005 0E03                            l2101 0457  
                          l2111 0C93                            l2023 0D7C                            l2017 0D60  
                          l2115 0C98                            l2019 0D6E                            l2027 0D87  
                          l2109 0C91                            l2061 03C3                            l2151 05EB  
                          l2135 05C2                            l2143 05D0                            l2071 03DA  
                          l2055 03AD                            l2223 0566                            l2323 0FCD  
                          l2083 0401                            l2149 058E                            l2077 03E0  
                          l2229 0579                            l2503 01C7                            l2177 048C  
                          l2329 0FE0                            l2097 0414                            l2089 0410  
                          l2601 0307                            l2513 01E1                            l2187 04D6  
                          l2179 04C1                            l2099 038D                            l2603 030C  
                          l2523 0204                            l2451 00F8                            l2435 00A3  
                          l2427 0320                            l2605 0311                            l2509 01DA  
                          l2453 0106                            l2429 009D                            l2359 0BFE  
                          l1831 06E6                            l2631 0371                            l2623 0360  
                          l2551 025E                            l2535 0223                            l2471 0167  
                          l2369 0BEF                            l2633 0376                            l2617 034D  
                          l2537 0233                            l2529 0217                            l2457 0114  
                          l2449 00EA                            l2481 00D2                            l1915 0F5E  
                          l2491 019F                            l2483 0182                            l1941 0F9D  
                          l1933 0F8A                            l1925 0F66                            l1909 0F53  
                          l1829 06BD                            l1845 0D04                            l2629 036C  
                          l1927 0F74                            l2559 027A                            l1777 06F9  
                          l1937 0F95                            l1953 0E60                            l2569 029D  
                          l2577 02B7                            l2489 0191                            l1971 0E89  
                          l2595 02FB                            l2579 02C7                            l1965 0E6D  
                          l1957 0E67                            l2589 02E8                   ?_LoadMenuItem 0070  
                          l1967 0E7B                            l1975 0E94                            l1993 0DD4  
                          l1979 0E9C                            l1995 0DE2                            STR_1 061A  
                  __CFG_WDTE$ON 0000                            STR_2 0663                            STR_3 062E  
                          STR_5 0678                            STR_6 0655                            STR_7 063F  
                          STR_8 063C                            STR_9 0649                            u2205 07EF  
                          u2125 04E3                            u3007 037E                            u1505 070E  
                          u3017 075A                            u1515 0728                            u2350 00E7  
                          u2175 07C1                            u1535 06CD                            u2185 07D2  
                          u1705 0F8B                            u2345 00AA                            u2610 0148  
                          u2370 00F5                            u1555 0EF6                            u2195 07E1  
                          u2604 013D                            u2630 0156                            u2390 0103  
                          u1495 0702                            u1575 0F11                            u2624 014B  
                          u1585 0F2D                            u1665 0F69                            u1905 0D63  
                          u2650 0164                            u2490 0111                            u1835 0DD7  
                          u2644 0159                            u1685 0F75                            u1765 0E70  
                          u1925 0D74                            u2590 013A                            u1695 0F81  
                          u1855 0DE3                            u1935 0D7D                            u1785 0E81  
                          u1865 0DEF                            u1795 0E8A                            u1875 0DF9  
                          u1985 03F7                            u2947 0123                            u2957 0176  
                          u2967 0197                            u2977 022B                            u2987 02BF  
                          u2997 0319                            _WREN 0C62                  ??_eeprom_write 0075  
                  __CFG_WRT$OFF 0000                   __CFG_FCMEN$ON 0000                            _main 0037  
                          _mode 00EA              __size_of_LCDGotoXY 0026                            _pmsg 00EB  
                          btemp 007E                   __CFG_BOREN$ON 0000                            ltemp 007E  
                          start 0012                            ttemp 007E                            wtemp 007E  
                 __CFG_MCLRE$ON 0000                           ??_ISR 0070                     compose@data 0028  
                   compose@from 0024                     compose@pmsg 002F                           ?_main 0070  
               __end_of___awdiv 0FA2                           _EEADR 010D                           STR_10 067C  
                         STR_11 0673                    main@byte_534 00DC                           STR_12 065F  
                         STR_13 0664                           STR_14 0669                           STR_15 066E  
                         STR_16 0663                 __end_of___awmod 0EA1                           _CARRY 0018  
                  LCDInit@style 0028                 ___awdiv@divisor 0074                 __end_of___lwdiv 0E08  
               __end_of___lwmod 0D8C                 ___awdiv@counter 0020                           _PORTC 0007  
                         _TRISC 0087                 __end_of_compose 0EF0                 __end_of_dum_msg 058B  
               __end_of_dpowers 061A                  ??_LoadMenuItem 0076                           main@i 00DA  
                         main@s 00D2                           pclath 000A                           ltemp0 007E  
                         ltemp1 0082                           ltemp2 0086                           ltemp3 0080  
                         ttemp0 007E                           ttemp1 0081                           ttemp2 0084  
                         ttemp3 0087                           ttemp4 007F                           status 0003  
                         wtemp0 007E                           wtemp1 0080                           wtemp2 0082  
                         wtemp3 0084                           wtemp4 0086                           wtemp5 0088  
                         wtemp6 007F                 __end_of_sprintf 045C       create_REG_ID_RQT_CMD@pmsg 0031  
     create_REG_ID_RQT_CMD@prqt 0030                __end_of_ConnInit 07FF                 __initialization 0015  
                  __end_of_main 0386                     dum_msg@pmsg 006C                __end_of_MenuDown 0BF4  
              __end_of_MenuInit 0DCA                       ??_ADCInit 0074              __size_of_ClearMenu 0031  
                        ??_main 00C0               __end_of_LCDGotoXY 0CAD                   LCDByte@isdata 0079  
                     ??_LCDByte 0020                       ??_LCDInit 0026                __end_of_ValueDec 0600  
              __end_of_ValueInc 0C6C                __end_of_ShowMenu 1000                    compose@msgid 0026  
                        _ADRESH 001E                          _ADRESL 009E                   main@count_560 00CD  
                        _EEDATA 010C                   main@count_554 00CB                   main@count_563 00CE  
                 main@count_557 00CC                   main@count_566 00CF                          _EECON1 018C  
                        _EECON2 018D                ___awdiv@dividend 0076                          _IOInit 0E08  
                __CFG_PWRTE$OFF 0000  __size_of_create_REG_ID_RQT_CMD 0026                          _MenuUp 0BF4  
 __end_of_create_REG_ID_RQT_CMD 0CF9                  _LCDWriteString 058B            __size_of_eeprom_read 001B  
                     ??___awdiv 0078                       ??___awmod 0078                          _g_menu 00A0  
                     ??___lwdiv 0078                       ??___lwmod 0079                          _memcpy 0CF9  
          __size_of_LCDBusyLoop 0066                ___awdiv@quotient 0022                 ___awmod@divisor 0074  
          __end_of_eeprom_write 0CD3                 ___awmod@counter 0020                       ??_compose 002B  
                     ??_dum_msg 003F                   ?_SaveMenuItem 0070            __size_of_LCDSetStyle 000A  
                  LCDWriteInt@i 0032                    LCDWriteInt@j 0030                          saved_w 007E  
                     ??_sprintf 0035               __end_of_ClearMenu 0D58            __size_of_LCDWriteInt 00A1  
       __end_of__initialization 0033                 eeprom_read@addr 0075          __end_of_LCDWriteString 05ED  
                     LCDByte@hn 0022                       LCDByte@ln 0023                  __pcstackCOMMON 0070  
                  __pidataBANK1 0C20                crc_calculate@crc 0020            __end_of_LoadMenuItem 0C10  
                  dum_msg@count 006A           __end_of_crc_calculate 06ED                  ??_SaveMenuItem 0077  
             eeprom_write@value 0074                       ?_ConnInit 0070                      __pbssBANK1 00A0  
                    __pbssBANK3 0190                         ?_IOInit 0070                       ?_MenuDown 0070  
                     ?_MenuInit 0070                 ?_LCDWriteString 0026                         ?_MenuUp 0070  
                     ?_ValueDec 0070                       ?_ValueInc 0070                      __pmaintext 0037  
                     ?_ShowMenu 0070                      __pintentry 0004                         ?_memcpy 0074  
                       _ADCInit 0C41                SaveMenuItem@item 0079                  ClearMenu@count 002C  
                       _LCDByte 0EF0                         _LCDInit 0753                      ??_ConnInit 0074  
                    __stringtab 0600                LCDSetStyle@style 0026                      ??_MenuDown 0074  
                    ??_MenuInit 0079                 __size_of_IOInit 004C                      ??_ValueDec 0020  
               __size_of_MenuUp 000D                      ??_ValueInc 0020                      ??_ShowMenu 0034  
         __size_of_eeprom_write 0026                         ___cgram 00DD                         ___awdiv 0F47  
                       ___awmod 0E54                         ___lwdiv 0DCA                         ___lwmod 0D58  
               __size_of_memcpy 002E                       _ANSELbits 0188                         __ptext1 04FD  
                       __ptext2 0386                         __ptext3 0D58                         __ptext4 0DCA  
                       __ptext5 0CD3                         __ptext6 0EA1                         __ptext7 0CF9  
                       __ptext8 067F                         __ptext9 0C55                         _compose 0EA1  
                  __size_of_ISR 000B                         _dum_msg 04FD                         _dpowers 0610  
              ___awmod@dividend 0076                       _LCDGotoXY 0C87                         _submode 00EC  
                       _sprintf 0386                         clrloop0 0BCB                         main@rqt 00D0  
                       main@rsp 00C8            end_of_initialization 0033                         memcpy@d 0022  
                       memcpy@n 0076                         memcpy@s 0020                    _eeprom_write 0CAD  
          __end_of_SaveMenuItem 0C20           __size_of_LoadMenuItem 000F                       ConnInit@i 0076  
             LCDWriteString@msg 0026                       _TRISAbits 0085                       _TRISBbits 0086  
                     _TRISCbits 0087                      ?_LCDGotoXY 0026                    _LoadMenuItem 0C01  
                    LCDInit@__i 0029                   ??_eeprom_read 0074                      LCDGotoXY@x 0028  
                    LCDGotoXY@y 0026                  __end_of_IOInit 0E54                LoadMenuItem@item 0078  
                     _ClearMenu 0D27                   ??_LCDBusyLoop 0074                  __end_of_MenuUp 0C01  
         _create_REG_ID_RQT_CMD 0CD3                      compose@cmd 0027                      compose@len 002D  
             crc_calculate@pmsg 0023                   ??_LCDSetStyle 007A                  __end_of_memcpy 0D27  
           start_initialization 0015                     __end_of_ISR 0BE7                  crc_calculate@i 0022  
                 ??_LCDWriteInt 0029                ??_LCDWriteString 0028                   ShowMenu@count 0038  
             __size_of_ConnInit 0048                        ??_IOInit 0074        __CFG_FOSC$INTRC_NOCLKOUT 0000  
             __size_of_MenuDown 000D               __size_of_MenuInit 003E                      ?_ClearMenu 0070  
                      ??_MenuUp 0074                       ShowMenu@i 0039             __end_of_eeprom_read 0C87  
                    init_fetch0 0C30               __size_of_ValueDec 0013               __size_of_ValueInc 0017  
                   __pdataBANK1 00DD               __size_of_ShowMenu 005E                        ??_memcpy 0078  
                      ?_ADCInit 0070             __end_of_LCDBusyLoop 0753                        ?_LCDByte 0079  
                      ?_LCDInit 0070                        LCDByte@c 0024                       ___latbits 0002  
                 __pcstackBANK0 0020                   __pcstackBANK1 00C0                     ??_LCDGotoXY 0027  
           __end_of_LCDSetStyle 0BDC           __size_of_SaveMenuItem 0010                  compose@datalen 002A  
              eeprom_write@addr 0076                LCDWriteInt@F1646 00E5                     sprintf@flag 0039  
                   sprintf@prec 003A             __end_of_LCDWriteInt 04FD          __size_of_crc_calculate 006E  
              ___lwdiv@dividend 0076          ?_create_REG_ID_RQT_CMD 0030                        ?___awdiv 0074  
                      ?___awmod 0074                        ?___lwdiv 0074                        ?___lwmod 0023  
                     __pstrings 0600                        ?_compose 0024                        ?_dum_msg 0070  
                  _SaveMenuItem 0C10                     _client_conn 0190                 LCDBusyLoop@busy 0076  
               LCDBusyLoop@temp 0077                ___lwdiv@quotient 0020                        ?_sprintf 0028  
             interrupt_function 0004                       clear_ram0 0BCA                     _eeprom_read 0C6C  
                   ??_ClearMenu 002B                     _LCDBusyLoop 06ED                LCDWriteString@cc 002A  
              __size_of_ADCInit 0014                      _ADCON0bits 001F                     __stringbase 060F  
                    _ADCON1bits 009F                       main@i_524 00D9                       main@i_553 00D3  
                     main@i_562 00D6                       main@i_556 00D4                       main@i_565 00D7  
                   _LCDSetStyle 0BD2                       main@i_559 00D5                       main@i_568 00D8  
                 _crc_calculate 067F                       main@count 00CA                       main@pconn 00D1  
                     main@sendc 00C5                __size_of_LCDByte 0057                __size_of_LCDInit 0064  
                     compose@to 0025                        _ConnInit 07B7                     _LCDWriteInt 045C  
                      _MenuDown 0BE7                        _MenuInit 0D8C                        _ValueDec 05ED  
                      _ValueInc 0C55                        _ShowMenu 0FA2                __size_of___awdiv 005B  
              __size_of___awmod 004D               LCDBusyLoop@status 0078                __size_of___lwdiv 003E  
              __size_of___lwmod 0034              __end_of__stringtab 0610                  ?_crc_calculate 0074  
                    _ANSELHbits 0189                      sprintf@val 003B                __size_of_compose 004F  
              __size_of_dum_msg 008E                 ___lwdiv@divisor 0074                 ___lwdiv@counter 0022  
                      __ptext10 05ED                        __ptext11 0C10                        __ptext20 0C6C  
                      __ptext12 0CAD                        __ptext21 0BE7                        __ptext13 0FA2  
                      __ptext30 06ED                        __ptext22 0BD2                        __ptext14 045C  
                      __ptext31 0C41                        __ptext23 0753                        __ptext15 0E54  
                      __ptext32 0BDC                        __ptext24 0E08                        __ptext16 0F47  
                      __ptext25 07B7                        __ptext17 0BF4                        __ptext26 0D27  
                      __ptext18 0D8C                        __ptext27 058B                        __ptext19 0C01  
                      __ptext28 0C87                        __ptext29 0EF0               __CFG_BOR4V$BOR21V 0000  
    create_REG_ID_RQT_CMD@pconn 0079                __size_of_sprintf 00D6                   __size_of_main 034F  
                      main@byte 00DB                        main@revc 00C6                        main@prqt 00C9  
                      main@prsp 00C7                        dum_msg@i 006B                        dum_msg@s 004A  
                    ClearMenu@i 002D                        memcpy@d1 0023                        memcpy@s1 0074  
                      init_ram0 0C34                        intlevel1 0000                       sprintf@ap 0038  
                     sprintf@sp 003D                ___lwmod@dividend 0025                  LCDWriteInt@val 0026  
                LCDWriteInt@str 002B         ??_create_REG_ID_RQT_CMD 0032                       stringcode 060A  
               ??_crc_calculate 0076                        sprintf@c 003E                        sprintf@f 0028  
               ___lwmod@divisor 0023                 ___lwmod@counter 0027                        stringdir 060A  
                      stringtab 0600             LCDWriteString@count 0029                   ?_eeprom_write 0074  
                  ?_eeprom_read 0070         __size_of_LCDWriteString 0062  
