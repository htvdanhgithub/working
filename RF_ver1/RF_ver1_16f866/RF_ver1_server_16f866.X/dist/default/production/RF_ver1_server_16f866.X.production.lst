

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Jul 05 22:56:01 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	intentry,global,class=CODE,delta=2
    60                           	psect	text36,local,class=CODE,merge=1,delta=2
    61                           	psect	text37,local,class=CODE,merge=1,delta=2
    62                           	dabs	1,0x7E,2
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  008F                     	;# 
   106  0090                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  0105                     	;# 
   125  0107                     	;# 
   126  0108                     	;# 
   127  0109                     	;# 
   128  010C                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  010F                     	;# 
   133  0185                     	;# 
   134  0187                     	;# 
   135  0188                     	;# 
   136  0189                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  000E                     	;# 
   154  000F                     	;# 
   155  0010                     	;# 
   156  0011                     	;# 
   157  0012                     	;# 
   158  0013                     	;# 
   159  0014                     	;# 
   160  0015                     	;# 
   161  0015                     	;# 
   162  0016                     	;# 
   163  0017                     	;# 
   164  0018                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001B                     	;# 
   168  001B                     	;# 
   169  001C                     	;# 
   170  001D                     	;# 
   171  001E                     	;# 
   172  001F                     	;# 
   173  0081                     	;# 
   174  0085                     	;# 
   175  0086                     	;# 
   176  0087                     	;# 
   177  0089                     	;# 
   178  008C                     	;# 
   179  008D                     	;# 
   180  008E                     	;# 
   181  008F                     	;# 
   182  0090                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0093                     	;# 
   188  0094                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0098                     	;# 
   193  0099                     	;# 
   194  009A                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  009F                     	;# 
   200  0105                     	;# 
   201  0107                     	;# 
   202  0108                     	;# 
   203  0109                     	;# 
   204  010C                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  010F                     	;# 
   209  0185                     	;# 
   210  0187                     	;# 
   211  0188                     	;# 
   212  0189                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  0000                     	;# 
   216  0001                     	;# 
   217  0002                     	;# 
   218  0003                     	;# 
   219  0004                     	;# 
   220  0005                     	;# 
   221  0006                     	;# 
   222  0007                     	;# 
   223  0009                     	;# 
   224  000A                     	;# 
   225  000B                     	;# 
   226  000C                     	;# 
   227  000D                     	;# 
   228  000E                     	;# 
   229  000E                     	;# 
   230  000F                     	;# 
   231  0010                     	;# 
   232  0011                     	;# 
   233  0012                     	;# 
   234  0013                     	;# 
   235  0014                     	;# 
   236  0015                     	;# 
   237  0015                     	;# 
   238  0016                     	;# 
   239  0017                     	;# 
   240  0018                     	;# 
   241  0019                     	;# 
   242  001A                     	;# 
   243  001B                     	;# 
   244  001B                     	;# 
   245  001C                     	;# 
   246  001D                     	;# 
   247  001E                     	;# 
   248  001F                     	;# 
   249  0081                     	;# 
   250  0085                     	;# 
   251  0086                     	;# 
   252  0087                     	;# 
   253  0089                     	;# 
   254  008C                     	;# 
   255  008D                     	;# 
   256  008E                     	;# 
   257  008F                     	;# 
   258  0090                     	;# 
   259  0091                     	;# 
   260  0092                     	;# 
   261  0093                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0094                     	;# 
   265  0095                     	;# 
   266  0096                     	;# 
   267  0097                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009A                     	;# 
   271  009B                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276  0105                     	;# 
   277  0107                     	;# 
   278  0108                     	;# 
   279  0109                     	;# 
   280  010C                     	;# 
   281  010C                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  010F                     	;# 
   285  0185                     	;# 
   286  0187                     	;# 
   287  0188                     	;# 
   288  0189                     	;# 
   289  018C                     	;# 
   290  018D                     	;# 
   291  0000                     	;# 
   292  0001                     	;# 
   293  0002                     	;# 
   294  0003                     	;# 
   295  0004                     	;# 
   296  0005                     	;# 
   297  0006                     	;# 
   298  0007                     	;# 
   299  0009                     	;# 
   300  000A                     	;# 
   301  000B                     	;# 
   302  000C                     	;# 
   303  000D                     	;# 
   304  000E                     	;# 
   305  000E                     	;# 
   306  000F                     	;# 
   307  0010                     	;# 
   308  0011                     	;# 
   309  0012                     	;# 
   310  0013                     	;# 
   311  0014                     	;# 
   312  0015                     	;# 
   313  0015                     	;# 
   314  0016                     	;# 
   315  0017                     	;# 
   316  0018                     	;# 
   317  0019                     	;# 
   318  001A                     	;# 
   319  001B                     	;# 
   320  001B                     	;# 
   321  001C                     	;# 
   322  001D                     	;# 
   323  001E                     	;# 
   324  001F                     	;# 
   325  0081                     	;# 
   326  0085                     	;# 
   327  0086                     	;# 
   328  0087                     	;# 
   329  0089                     	;# 
   330  008C                     	;# 
   331  008D                     	;# 
   332  008E                     	;# 
   333  008F                     	;# 
   334  0090                     	;# 
   335  0091                     	;# 
   336  0092                     	;# 
   337  0093                     	;# 
   338  0093                     	;# 
   339  0093                     	;# 
   340  0094                     	;# 
   341  0095                     	;# 
   342  0096                     	;# 
   343  0097                     	;# 
   344  0098                     	;# 
   345  0099                     	;# 
   346  009A                     	;# 
   347  009B                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009E                     	;# 
   351  009F                     	;# 
   352  0105                     	;# 
   353  0107                     	;# 
   354  0108                     	;# 
   355  0109                     	;# 
   356  010C                     	;# 
   357  010C                     	;# 
   358  010D                     	;# 
   359  010E                     	;# 
   360  010F                     	;# 
   361  0185                     	;# 
   362  0187                     	;# 
   363  0188                     	;# 
   364  0189                     	;# 
   365  018C                     	;# 
   366  018D                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0009                     	;# 
   376  000A                     	;# 
   377  000B                     	;# 
   378  000C                     	;# 
   379  000D                     	;# 
   380  000E                     	;# 
   381  000E                     	;# 
   382  000F                     	;# 
   383  0010                     	;# 
   384  0011                     	;# 
   385  0012                     	;# 
   386  0013                     	;# 
   387  0014                     	;# 
   388  0015                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  001D                     	;# 
   399  001E                     	;# 
   400  001F                     	;# 
   401  0081                     	;# 
   402  0085                     	;# 
   403  0086                     	;# 
   404  0087                     	;# 
   405  0089                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0093                     	;# 
   416  0094                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0097                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009C                     	;# 
   425  009D                     	;# 
   426  009E                     	;# 
   427  009F                     	;# 
   428  0105                     	;# 
   429  0107                     	;# 
   430  0108                     	;# 
   431  0109                     	;# 
   432  010C                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  010F                     	;# 
   437  0185                     	;# 
   438  0187                     	;# 
   439  0188                     	;# 
   440  0189                     	;# 
   441  018C                     	;# 
   442  018D                     	;# 
   443  0000                     	;# 
   444  0001                     	;# 
   445  0002                     	;# 
   446  0003                     	;# 
   447  0004                     	;# 
   448  0005                     	;# 
   449  0006                     	;# 
   450  0007                     	;# 
   451  0009                     	;# 
   452  000A                     	;# 
   453  000B                     	;# 
   454  000C                     	;# 
   455  000D                     	;# 
   456  000E                     	;# 
   457  000E                     	;# 
   458  000F                     	;# 
   459  0010                     	;# 
   460  0011                     	;# 
   461  0012                     	;# 
   462  0013                     	;# 
   463  0014                     	;# 
   464  0015                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001B                     	;# 
   473  001C                     	;# 
   474  001D                     	;# 
   475  001E                     	;# 
   476  001F                     	;# 
   477  0081                     	;# 
   478  0085                     	;# 
   479  0086                     	;# 
   480  0087                     	;# 
   481  0089                     	;# 
   482  008C                     	;# 
   483  008D                     	;# 
   484  008E                     	;# 
   485  008F                     	;# 
   486  0090                     	;# 
   487  0091                     	;# 
   488  0092                     	;# 
   489  0093                     	;# 
   490  0093                     	;# 
   491  0093                     	;# 
   492  0094                     	;# 
   493  0095                     	;# 
   494  0096                     	;# 
   495  0097                     	;# 
   496  0098                     	;# 
   497  0099                     	;# 
   498  009A                     	;# 
   499  009B                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  009F                     	;# 
   504  0105                     	;# 
   505  0107                     	;# 
   506  0108                     	;# 
   507  0109                     	;# 
   508  010C                     	;# 
   509  010C                     	;# 
   510  010D                     	;# 
   511  010E                     	;# 
   512  010F                     	;# 
   513  0185                     	;# 
   514  0187                     	;# 
   515  0188                     	;# 
   516  0189                     	;# 
   517  018C                     	;# 
   518  018D                     	;# 
   519                           
   520                           	psect	idataCOMMON
   521  07FF                     __pidataCOMMON:	
   522                           
   523                           ;initializer for _low_half_rcv
   524  07FF  3401               	retlw	1
   525                           
   526                           	psect	idataBANK0
   527  07FB                     __pidataBANK0:	
   528                           
   529                           ;initializer for _mode
   530  07FB  3401               	retlw	1
   531                           
   532                           ;initializer for _pmsg
   533  07FC  3410               	retlw	low (_msg| (0+256))
   534                           
   535                           ;initializer for _pmsg_rcv
   536  07FD  3427               	retlw	low (_msg_rcv| (0+256))
   537                           
   538                           ;initializer for _submode
   539  07FE  3401               	retlw	1
   540                           
   541                           	psect	idataBANK1
   542  09F8                     __pidataBANK1:	
   543                           
   544                           ;initializer for ___cgram
   545  09F8  340C               	retlw	12
   546  09F9  3412               	retlw	18
   547  09FA  3412               	retlw	18
   548  09FB  340C               	retlw	12
   549  09FC  3400               	retlw	0
   550  09FD  3400               	retlw	0
   551  09FE  3400               	retlw	0
   552  09FF  3400               	retlw	0
   553                           
   554                           ;initializer for LCDWriteInt@F1650
   555  0A00  34F0               	retlw	240
   556  0A01  34F0               	retlw	240
   557  0A02  34F0               	retlw	240
   558  0A03  34F0               	retlw	240
   559  0A04  34F0               	retlw	240
   560                           
   561                           ;initializer for _low_rcv
   562  0A05  3401               	retlw	1
   563                           
   564                           ;initializer for _pstr_rcv
   565  0A06  3427               	retlw	low (_msg_rcv| (0+256))
   566                           
   567                           	psect	strings
   568  0600                     __pstrings:	
   569  0600                     stringtab:	
   570  0600                     __stringtab:	
   571                           
   572                           ;	String table - string pointers are 1 byte each
   573  0600  1BFF               	btfsc	btemp+1,7
   574  0601  2E0A               	ljmp	stringcode
   575  0602  1383               	bcf	3,7
   576  0603  187F               	btfsc	btemp+1,0
   577  0604  1783               	bsf	3,7
   578  0605  0800               	movf	0,w
   579  0606  0A84               	incf	4,f
   580  0607  1903               	skipnz
   581  0608  0AFF               	incf	btemp+1,f
   582  0609  0008               	return
   583  060A                     stringcode:	
   584  060A                     stringdir:	
   585  060A  3006               	movlw	high stringdir
   586  060B  008A               	movwf	10
   587  060C  0804               	movf	4,w
   588  060D  0A84               	incf	4,f
   589  060E  0782               	addwf	2,f
   590  060F                     __stringbase:	
   591  060F  3400               	retlw	0
   592  0610                     __end_of__stringtab:	
   593  0610                     _dpowers:	
   594  0610  3401               	retlw	1
   595  0611  3400               	retlw	0
   596  0612  340A               	retlw	10
   597  0613  3400               	retlw	0
   598  0614  3464               	retlw	100
   599  0615  3400               	retlw	0
   600  0616  34E8               	retlw	232
   601  0617  3403               	retlw	3
   602  0618  3410               	retlw	16
   603  0619  3427               	retlw	39
   604  061A                     __end_of_dpowers:	
   605  061A                     _start_mark:	
   606  061A  34DE               	retlw	222
   607  061B  34DF               	retlw	223
   608  061C  34E0               	retlw	224
   609  061D  34E1               	retlw	225
   610  061E                     __end_of_start_mark:	
   611  061E                     _stop_mark:	
   612  061E  34E1               	retlw	225
   613  061F  34E0               	retlw	224
   614  0620  34DF               	retlw	223
   615  0621  34DE               	retlw	222
   616  0622                     __end_of_stop_mark:	
   617  001F                     _ADCON0bits	set	31
   618  001E                     _ADRESH	set	30
   619  000B                     _INTCONbits	set	11
   620  0007                     _PORTC	set	7
   621  0018                     _CARRY	set	24
   622  005F                     _GIE	set	95
   623  0028                     _RA0	set	40
   624  0029                     _RA1	set	41
   625  002A                     _RA2	set	42
   626  002B                     _RA3	set	43
   627  002C                     _RA4	set	44
   628  002D                     _RA5	set	45
   629  002E                     _RA6	set	46
   630  002F                     _RA7	set	47
   631  0031                     _RB1	set	49
   632  0032                     _RB2	set	50
   633  0034                     _RB4	set	52
   634  0035                     _RB5	set	53
   635  0036                     _RB6	set	54
   636  0037                     _RB7	set	55
   637  0039                     _RC1	set	57
   638  003A                     _RC2	set	58
   639  003B                     _RC3	set	59
   640  009F                     _ADCON1bits	set	159
   641  009E                     _ADRESL	set	158
   642  0081                     _OPTION_REGbits	set	129
   643  0085                     _TRISAbits	set	133
   644  0086                     _TRISBbits	set	134
   645  0087                     _TRISC	set	135
   646  0087                     _TRISCbits	set	135
   647  010D                     _EEADR	set	269
   648  010C                     _EEDATA	set	268
   649  0189                     _ANSELHbits	set	393
   650  0188                     _ANSELbits	set	392
   651  018C                     _EECON1	set	396
   652  018D                     _EECON2	set	397
   653  0C60                     _RD	set	3168
   654  0C61                     _WR	set	3169
   655  0C62                     _WREN	set	3170
   656  0622                     STR_11:	
   657  0622  344D               	retlw	77	;'M'
   658  0623  343A               	retlw	58	;':'
   659  0624  3425               	retlw	37	;'%'
   660  0625  3464               	retlw	100	;'d'
   661  0626  342C               	retlw	44	;','
   662  0627  3425               	retlw	37	;'%'
   663  0628  3464               	retlw	100	;'d'
   664  0629  342C               	retlw	44	;','
   665  062A  3425               	retlw	37	;'%'
   666  062B  3464               	retlw	100	;'d'
   667  062C  342C               	retlw	44	;','
   668  062D  3425               	retlw	37	;'%'
   669  062E  3464               	retlw	100	;'d'
   670  062F  342C               	retlw	44	;','
   671  0630  3425               	retlw	37	;'%'
   672  0631  3464               	retlw	100	;'d'
   673  0632  342C               	retlw	44	;','
   674  0633  3425               	retlw	37	;'%'
   675  0634  3464               	retlw	100	;'d'
   676  0635  3400               	retlw	0
   677  0636                     STR_13:	
   678  0636  3443               	retlw	67	;'C'
   679  0637  343A               	retlw	58	;':'
   680  0638  3425               	retlw	37	;'%'
   681  0639  3464               	retlw	100	;'d'
   682  063A  342C               	retlw	44	;','
   683  063B  3425               	retlw	37	;'%'
   684  063C  3464               	retlw	100	;'d'
   685  063D  342C               	retlw	44	;','
   686  063E  3425               	retlw	37	;'%'
   687  063F  3464               	retlw	100	;'d'
   688  0640  342C               	retlw	44	;','
   689  0641  3425               	retlw	37	;'%'
   690  0642  3464               	retlw	100	;'d'
   691  0643  3400               	retlw	0
   692  0644                     STR_18:	
   693  0644  344E               	retlw	78	;'N'
   694  0645  344F               	retlw	79	;'O'
   695  0646  3454               	retlw	84	;'T'
   696  0647  3445               	retlw	69	;'E'
   697  0648  3444               	retlw	68	;'D'
   698  0649  3449               	retlw	73	;'I'
   699  064A  3454               	retlw	84	;'T'
   700  064B  3420               	retlw	32	;' '
   701  064C  344D               	retlw	77	;'M'
   702  064D  344F               	retlw	79	;'O'
   703  064E  3444               	retlw	68	;'D'
   704  064F  3445               	retlw	69	;'E'
   705  0650  3400               	retlw	0
   706  0651                     STR_19:	
   707  0651  344E               	retlw	78	;'N'
   708  0652  344F               	retlw	79	;'O'
   709  0653  3452               	retlw	82	;'R'
   710  0654  344D               	retlw	77	;'M'
   711  0655  3441               	retlw	65	;'A'
   712  0656  344C               	retlw	76	;'L'
   713  0657  3420               	retlw	32	;' '
   714  0658  344D               	retlw	77	;'M'
   715  0659  344F               	retlw	79	;'O'
   716  065A  3444               	retlw	68	;'D'
   717  065B  3445               	retlw	69	;'E'
   718  065C  3400               	retlw	0
   719  065D                     STR_16:	
   720  065D  344D               	retlw	77	;'M'
   721  065E  3445               	retlw	69	;'E'
   722  065F  344E               	retlw	78	;'N'
   723  0660  3455               	retlw	85	;'U'
   724  0661  3420               	retlw	32	;' '
   725  0662  344D               	retlw	77	;'M'
   726  0663  344F               	retlw	79	;'O'
   727  0664  3444               	retlw	68	;'D'
   728  0665  3445               	retlw	69	;'E'
   729  0666  3400               	retlw	0
   730  0667                     STR_22:	
   731  0667  3449               	retlw	73	;'I'
   732  0668  3444               	retlw	68	;'D'
   733  0669  3431               	retlw	49	;'1'
   734  066A  343A               	retlw	58	;':'
   735  066B  3400               	retlw	0
   736  066C                     STR_23:	
   737  066C  3449               	retlw	73	;'I'
   738  066D  3444               	retlw	68	;'D'
   739  066E  3432               	retlw	50	;'2'
   740  066F  343A               	retlw	58	;':'
   741  0670  3400               	retlw	0
   742  0671                     STR_24:	
   743  0671  3449               	retlw	73	;'I'
   744  0672  3444               	retlw	68	;'D'
   745  0673  3433               	retlw	51	;'3'
   746  0674  343A               	retlw	58	;':'
   747  0675  3400               	retlw	0
   748  0676                     STR_25:	
   749  0676  3449               	retlw	73	;'I'
   750  0677  3444               	retlw	68	;'D'
   751  0678  3434               	retlw	52	;'4'
   752  0679  343A               	retlw	58	;':'
   753  067A  3400               	retlw	0
   754  067B                     STR_21:	
   755  067B  3444               	retlw	68	;'D'
   756  067C  344F               	retlw	79	;'O'
   757  067D  3457               	retlw	87	;'W'
   758  067E  344E               	retlw	78	;'N'
   759  067F  3400               	retlw	0
   760  0680                     STR_15:	
   761  0680  3461               	retlw	97	;'a'
   762  0681  3462               	retlw	98	;'b'
   763  0682  3463               	retlw	99	;'c'
   764  0683  3400               	retlw	0
   765  0684                     STR_20:	
   766  0684  3455               	retlw	85	;'U'
   767  0685  3450               	retlw	80	;'P'
   768  0686  3400               	retlw	0
   769  066B                     
   770                           ; #config settings
   771  0000                     
   772                           	psect	cinit
   773  0015                     start_initialization:	
   774  0015                     __initialization:	
   775                           
   776                           ; Clear objects allocated to COMMON
   777  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   778                           
   779                           ; Clear objects allocated to BANK0
   780  0016  01DA               	clrf	__pbssBANK0& (0+127)
   781  0017  01DB               	clrf	(__pbssBANK0+1)& (0+127)
   782                           
   783                           ; Clear objects allocated to BANK1
   784  0018  1383               	bcf	3,7	;select IRP bank0
   785  0019  30D2               	movlw	low __pbssBANK1
   786  001A  0084               	movwf	4
   787  001B  30DD               	movlw	low (__pbssBANK1+11)
   788  001C  120A  158A  21E6  120A  118A  	fcall	clear_ram0
   789                           
   790                           ; Clear objects allocated to BANK3
   791  0021  1783               	bsf	3,7	;select IRP bank2
   792  0022  3090               	movlw	low __pbssBANK3
   793  0023  0084               	movwf	4
   794  0024  30F0               	movlw	low (__pbssBANK3+96)
   795  0025  120A  158A  21E6  120A  118A  	fcall	clear_ram0
   796                           
   797                           ; Clear objects allocated to BANK2
   798  002A  3010               	movlw	low __pbssBANK2
   799  002B  0084               	movwf	4
   800  002C  303E               	movlw	low (__pbssBANK2+46)
   801  002D  120A  158A  21E6  120A  118A  	fcall	clear_ram0
   802                           
   803                           ; Initialize objects allocated to BANK1
   804  0032  1383               	bcf	3,7	;select IRP bank0
   805  0033  30D2               	movlw	low (__pdataBANK1+15)
   806  0034  00FD               	movwf	btemp+-1
   807  0035  3009               	movlw	high __pidataBANK1
   808  0036  00FE               	movwf	btemp
   809  0037  30F8               	movlw	low __pidataBANK1
   810  0038  00FF               	movwf	btemp+1
   811  0039  30C3               	movlw	low __pdataBANK1
   812  003A  0084               	movwf	4
   813  003B  120A  158A  222D  120A  118A  	fcall	init_ram0
   814                           
   815                           ; Initialize objects allocated to BANK0
   816  0040  305A               	movlw	low (__pdataBANK0+4)
   817  0041  00FD               	movwf	btemp+-1
   818  0042  3007               	movlw	high __pidataBANK0
   819  0043  00FE               	movwf	btemp
   820  0044  30FB               	movlw	low __pidataBANK0
   821  0045  00FF               	movwf	btemp+1
   822  0046  3056               	movlw	low __pdataBANK0
   823  0047  0084               	movwf	4
   824  0048  120A  158A  222D  120A  118A  	fcall	init_ram0
   825                           
   826                           ; Initialize objects allocated to COMMON
   827  004D  120A  118A  27FF   	fcall	__pidataCOMMON	;fetch initializer
   828  0050  00FD               	movwf	__pdataCOMMON& (0+127)
   829  0051                     end_of_initialization:	
   830                           ;End of C runtime variable initialization code
   831                           
   832  0051                     __end_of__initialization:	
   833  0051  0183               	clrf	3
   834  0052  120A  118A  2855   	ljmp	_main	;jump to C main() function
   835                           
   836                           	psect	bssCOMMON
   837  007C                     __pbssCOMMON:	
   838  007C                     _end_index_rcv:	
   839  007C                     	ds	1
   840                           
   841                           	psect	dataCOMMON
   842  007D                     __pdataCOMMON:	
   843  007D                     _low_half_rcv:	
   844  007D                     	ds	1
   845                           
   846                           	psect	bssBANK0
   847  005A                     __pbssBANK0:	
   848  005A                     _count_rcv:	
   849  005A                     	ds	1
   850  005B                     _start_index_rcv:	
   851  005B                     	ds	1
   852                           
   853                           	psect	dataBANK0
   854  0056                     __pdataBANK0:	
   855  0056                     _mode:	
   856  0056                     	ds	1
   857  0057                     _pmsg:	
   858  0057                     	ds	1
   859  0058                     _pmsg_rcv:	
   860  0058                     	ds	1
   861  0059                     _submode:	
   862  0059                     	ds	1
   863                           
   864                           	psect	bssBANK1
   865  00D2                     __pbssBANK1:	
   866  00D2                     _g_menu:	
   867  00D2                     	ds	9
   868  00DB                     _count:	
   869  00DB                     	ds	2
   870                           
   871                           	psect	dataBANK1
   872  00C3                     __pdataBANK1:	
   873  00C3                     ___cgram:	
   874  00C3                     	ds	8
   875  00CB                     LCDWriteInt@F1650:	
   876  00CB                     	ds	5
   877  00D0                     _low_rcv:	
   878  00D0                     	ds	1
   879  00D1                     _pstr_rcv:	
   880  00D1                     	ds	1
   881                           
   882                           	psect	bssBANK3
   883  0190                     __pbssBANK3:	
   884  0190                     _client_conn:	
   885  0190                     	ds	32
   886  01B0                     _buffer_rcv:	
   887  01B0                     	ds	32
   888  01D0                     _sdebug:	
   889  01D0                     	ds	32
   890                           
   891                           	psect	bssBANK2
   892  0110                     __pbssBANK2:	
   893  0110                     _msg:	
   894  0110                     	ds	23
   895  0127                     _msg_rcv:	
   896  0127                     	ds	23
   897                           
   898                           	psect	clrtext
   899  09E6                     clear_ram0:	
   900                           ;	Called with FSR containing the base address, and
   901                           ;	W with the last address+1
   902                           
   903  09E6  0064               	clrwdt	;clear the watchdog before getting into this loop
   904  09E7                     clrloop0:	
   905  09E7  0180               	clrf	0	;clear RAM location pointed to by FSR
   906  09E8  0A84               	incf	4,f	;increment pointer
   907  09E9  0604               	xorwf	4,w	;XOR with final address
   908  09EA  1903               	btfsc	3,2	;have we reached the end yet?
   909  09EB  3400               	retlw	0	;all done for this memory range, return
   910  09EC  0604               	xorwf	4,w	;XOR again to restore value
   911  09ED  29E7               	goto	clrloop0	;do the next byte
   912                           
   913                           	psect	inittext
   914  0A29                     init_fetch0:	
   915                           ;	Called with low address in FSR and high address in W
   916                           
   917  0A29  087E               	movf	126,w
   918  0A2A  008A               	movwf	10
   919  0A2B  087F               	movf	127,w
   920  0A2C  0082               	movwf	2
   921  0A2D                     init_ram0:	
   922                           ;Called with:
   923                           ;	high address of idata address in btemp 
   924                           ;	low address of idata address in btemp+1 
   925                           ;	low address of data in FSR
   926                           ;	high address + 1 of data in btemp-1
   927                           
   928  0A2D  2229  120A  158A   	fcall	init_fetch0
   929  0A30  0080               	movwf	0
   930  0A31  0A84               	incf	4,f
   931  0A32  0804               	movf	4,w
   932  0A33  067D               	xorwf	125,w
   933  0A34  1903               	btfsc	3,2
   934  0A35  3400               	retlw	0
   935  0A36  0AFF               	incf	127,f
   936  0A37  1903               	btfsc	3,2
   937  0A38  0AFE               	incf	126,f
   938  0A39  2A2D               	goto	init_ram0
   939                           
   940                           	psect	cstackBANK2
   941  013E                     __pcstackBANK2:	
   942  013E                     main@ret:	
   943                           
   944                           ; 1 bytes @ 0x0
   945  013E                     	ds	1
   946  013F                     main@value:	
   947                           
   948                           ; 1 bytes @ 0x1
   949  013F                     	ds	1
   950  0140                     main@sendc:	
   951                           
   952                           ; 1 bytes @ 0x2
   953  0140                     	ds	1
   954  0141                     main@revc:	
   955                           
   956                           ; 1 bytes @ 0x3
   957  0141                     	ds	1
   958  0142                     main@prqt:	
   959                           
   960                           ; 1 bytes @ 0x4
   961  0142                     	ds	1
   962  0143                     main@prsp:	
   963                           
   964                           ; 1 bytes @ 0x5
   965  0143                     	ds	1
   966  0144                     main@pconn:	
   967                           
   968                           ; 1 bytes @ 0x6
   969  0144                     	ds	1
   970  0145                     main@rqt:	
   971                           
   972                           ; 1 bytes @ 0x7
   973  0145                     	ds	1
   974  0146                     main@rsp:	
   975                           
   976                           ; 1 bytes @ 0x8
   977  0146                     	ds	1
   978  0147                     main@count:	
   979                           
   980                           ; 1 bytes @ 0x9
   981  0147                     	ds	1
   982  0148                     main@count_809:	
   983                           
   984                           ; 1 bytes @ 0xA
   985  0148                     	ds	1
   986  0149                     main@count_812:	
   987                           
   988                           ; 1 bytes @ 0xB
   989  0149                     	ds	1
   990  014A                     main@count_815:	
   991                           
   992                           ; 1 bytes @ 0xC
   993  014A                     	ds	1
   994  014B                     main@count_818:	
   995                           
   996                           ; 1 bytes @ 0xD
   997  014B                     	ds	1
   998  014C                     main@count_821:	
   999                           
  1000                           ; 1 bytes @ 0xE
  1001  014C                     	ds	1
  1002  014D                     main@i:	
  1003                           
  1004                           ; 1 bytes @ 0xF
  1005  014D                     	ds	1
  1006  014E                     main@i_811:	
  1007                           
  1008                           ; 1 bytes @ 0x10
  1009  014E                     	ds	1
  1010  014F                     main@i_814:	
  1011                           
  1012                           ; 1 bytes @ 0x11
  1013  014F                     	ds	1
  1014  0150                     main@i_817:	
  1015                           
  1016                           ; 1 bytes @ 0x12
  1017  0150                     	ds	1
  1018  0151                     main@i_820:	
  1019                           
  1020                           ; 1 bytes @ 0x13
  1021  0151                     	ds	1
  1022  0152                     main@i_823:	
  1023                           
  1024                           ; 1 bytes @ 0x14
  1025  0152                     	ds	1
  1026                           
  1027                           	psect	cstackBANK1
  1028  00A0                     __pcstackBANK1:	
  1029  00A0                     dump_msg@s:	
  1030                           
  1031                           ; 32 bytes @ 0x0
  1032  00A0                     	ds	32
  1033  00C0                     dump_msg@count:	
  1034                           
  1035                           ; 1 bytes @ 0x20
  1036  00C0                     	ds	1
  1037  00C1                     dump_msg@i:	
  1038                           
  1039                           ; 1 bytes @ 0x21
  1040  00C1                     	ds	1
  1041  00C2                     dump_msg@pmsg:	
  1042                           
  1043                           ; 1 bytes @ 0x22
  1044  00C2                     	ds	1
  1045                           
  1046                           	psect	cstackCOMMON
  1047  0070                     __pcstackCOMMON:	
  1048  0070                     ?_LCDInit:	
  1049  0070                     ?_MenuInit:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052  0070                     ?_ShowMenu:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055  0070                     ?_LCDSetStyle:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058  0070                     ?_ClearMenu:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0070                     ?_ValueInc:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  0070                     ?_MenuUp:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  0070                     ?_MenuDown:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  0070                     ?_LCDBusyLoop:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0070                     ?_LoadMenuItem:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  0070                     ?_eeprom_read:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079  0070                     ?_ADCInit:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082  0070                     ?_send_byte:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  0070                     ?_get_next_index:	
  1086                           ; 1 bytes @ 0x0
  1087                           
  1088  0070                     ??_get_next_index:	
  1089                           ; 1 bytes @ 0x0
  1090                           
  1091  0070                     ?_receive_input:	
  1092                           ; 1 bytes @ 0x0
  1093                           
  1094  0070                     ?_dump_msg:	
  1095                           ; 1 bytes @ 0x0
  1096                           
  1097  0070                     ?_ConnInit:	
  1098                           ; 1 bytes @ 0x0
  1099                           
  1100  0070                     ?_IOInit:	
  1101                           ; 1 bytes @ 0x0
  1102                           
  1103  0070                     ?_ISR:	
  1104                           ; 1 bytes @ 0x0
  1105                           
  1106  0070                     ?_main:	
  1107                           ; 1 bytes @ 0x0
  1108                           
  1109  0070                     ?_SaveMenuItem:	
  1110                           ; 1 bytes @ 0x0
  1111                           
  1112  0070                     ?_ValueDec:	
  1113                           ; 1 bytes @ 0x0
  1114                           
  1115  0070                     get_next_index@index:	
  1116                           ; 2 bytes @ 0x0
  1117                           
  1118                           
  1119                           ; 1 bytes @ 0x0
  1120  0070                     	ds	1
  1121  0071                     ??_receive_input:	
  1122                           
  1123                           ; 1 bytes @ 0x1
  1124  0071                     	ds	1
  1125  0072                     receive_input@value:	
  1126                           
  1127                           ; 1 bytes @ 0x2
  1128  0072                     	ds	1
  1129  0073                     receive_input@byte1:	
  1130                           
  1131                           ; 1 bytes @ 0x3
  1132  0073                     	ds	1
  1133  0074                     receive_input@byte2:	
  1134                           
  1135                           ; 1 bytes @ 0x4
  1136  0074                     	ds	1
  1137  0075                     ??_ISR:	
  1138                           
  1139                           ; 1 bytes @ 0x5
  1140  0075                     	ds	5
  1141  007A                     ISR@value:	
  1142                           
  1143                           ; 1 bytes @ 0xA
  1144  007A                     	ds	1
  1145  007B                     ISR@byte:	
  1146                           
  1147                           ; 1 bytes @ 0xB
  1148  007B                     	ds	1
  1149                           
  1150                           	psect	cstackBANK0
  1151  0020                     __pcstackBANK0:	
  1152  0020                     ??_MenuUp:	
  1153  0020                     ??_MenuDown:	
  1154                           ; 1 bytes @ 0x0
  1155                           
  1156  0020                     ??_LCDBusyLoop:	
  1157                           ; 1 bytes @ 0x0
  1158                           
  1159  0020                     ?_eeprom_write:	
  1160                           ; 1 bytes @ 0x0
  1161                           
  1162  0020                     ??_eeprom_read:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0020                     ??_ADCInit:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0020                     ?_send_half_byte:	
  1169                           ; 1 bytes @ 0x0
  1170                           
  1171  0020                     ??_ConnInit:	
  1172                           ; 1 bytes @ 0x0
  1173                           
  1174  0020                     ??_IOInit:	
  1175                           ; 1 bytes @ 0x0
  1176                           
  1177  0020                     ?_memcpy:	
  1178                           ; 1 bytes @ 0x0
  1179                           
  1180  0020                     ?_crc_calculate:	
  1181                           ; 2 bytes @ 0x0
  1182                           
  1183  0020                     ?___awdiv:	
  1184                           ; 2 bytes @ 0x0
  1185                           
  1186  0020                     ?___awmod:	
  1187                           ; 2 bytes @ 0x0
  1188                           
  1189  0020                     ?___lwdiv:	
  1190                           ; 2 bytes @ 0x0
  1191                           
  1192  0020                     send_half_byte@low:	
  1193                           ; 2 bytes @ 0x0
  1194                           
  1195  0020                     eeprom_write@value:	
  1196                           ; 1 bytes @ 0x0
  1197                           
  1198  0020                     crc_calculate@pmsg:	
  1199                           ; 1 bytes @ 0x0
  1200                           
  1201  0020                     ___awdiv@divisor:	
  1202                           ; 2 bytes @ 0x0
  1203                           
  1204  0020                     ___awmod@divisor:	
  1205                           ; 2 bytes @ 0x0
  1206                           
  1207  0020                     ___lwdiv@divisor:	
  1208                           ; 2 bytes @ 0x0
  1209                           
  1210  0020                     memcpy@d1:	
  1211                           ; 2 bytes @ 0x0
  1212                           
  1213                           
  1214                           ; 2 bytes @ 0x0
  1215  0020                     	ds	1
  1216  0021                     ??_eeprom_write:	
  1217  0021                     ??_send_half_byte:	
  1218                           ; 1 bytes @ 0x1
  1219                           
  1220  0021                     eeprom_read@addr:	
  1221                           ; 1 bytes @ 0x1
  1222                           
  1223                           
  1224                           ; 1 bytes @ 0x1
  1225  0021                     	ds	1
  1226  0022                     ??_LoadMenuItem:	
  1227  0022                     ??_crc_calculate:	
  1228                           ; 1 bytes @ 0x2
  1229                           
  1230  0022                     send_half_byte@value:	
  1231                           ; 1 bytes @ 0x2
  1232                           
  1233  0022                     ConnInit@i:	
  1234                           ; 1 bytes @ 0x2
  1235                           
  1236  0022                     LCDBusyLoop@busy:	
  1237                           ; 1 bytes @ 0x2
  1238                           
  1239  0022                     eeprom_write@addr:	
  1240                           ; 1 bytes @ 0x2
  1241                           
  1242  0022                     ___awdiv@dividend:	
  1243                           ; 1 bytes @ 0x2
  1244                           
  1245  0022                     ___awmod@dividend:	
  1246                           ; 2 bytes @ 0x2
  1247                           
  1248  0022                     ___lwdiv@dividend:	
  1249                           ; 2 bytes @ 0x2
  1250                           
  1251  0022                     memcpy@s1:	
  1252                           ; 2 bytes @ 0x2
  1253                           
  1254                           
  1255                           ; 2 bytes @ 0x2
  1256  0022                     	ds	1
  1257  0023                     ??_SaveMenuItem:	
  1258  0023                     send_half_byte@byte:	
  1259                           ; 1 bytes @ 0x3
  1260                           
  1261  0023                     LCDBusyLoop@temp:	
  1262                           ; 1 bytes @ 0x3
  1263                           
  1264                           
  1265                           ; 1 bytes @ 0x3
  1266  0023                     	ds	1
  1267  0024                     ??_send_byte:	
  1268  0024                     ??___awdiv:	
  1269                           ; 1 bytes @ 0x4
  1270                           
  1271  0024                     ??___awmod:	
  1272                           ; 1 bytes @ 0x4
  1273                           
  1274  0024                     ??___lwdiv:	
  1275                           ; 1 bytes @ 0x4
  1276                           
  1277  0024                     LCDBusyLoop@status:	
  1278                           ; 1 bytes @ 0x4
  1279                           
  1280  0024                     LoadMenuItem@item:	
  1281                           ; 1 bytes @ 0x4
  1282                           
  1283  0024                     memcpy@n:	
  1284                           ; 1 bytes @ 0x4
  1285                           
  1286                           
  1287                           ; 2 bytes @ 0x4
  1288  0024                     	ds	1
  1289  0025                     ?_LCDByte:	
  1290  0025                     ??_MenuInit:	
  1291                           ; 1 bytes @ 0x5
  1292                           
  1293  0025                     LCDByte@isdata:	
  1294                           ; 1 bytes @ 0x5
  1295                           
  1296  0025                     SaveMenuItem@item:	
  1297                           ; 1 bytes @ 0x5
  1298                           
  1299  0025                     ___awdiv@counter:	
  1300                           ; 1 bytes @ 0x5
  1301                           
  1302  0025                     ___awmod@counter:	
  1303                           ; 1 bytes @ 0x5
  1304                           
  1305  0025                     ___lwdiv@counter:	
  1306                           ; 1 bytes @ 0x5
  1307                           
  1308                           
  1309                           ; 1 bytes @ 0x5
  1310  0025                     	ds	1
  1311  0026                     ??_LCDByte:	
  1312  0026                     ??_memcpy:	
  1313                           ; 1 bytes @ 0x6
  1314                           
  1315  0026                     ??_ValueInc:	
  1316                           ; 1 bytes @ 0x6
  1317                           
  1318  0026                     ??_ValueDec:	
  1319                           ; 1 bytes @ 0x6
  1320                           
  1321  0026                     send_byte@c:	
  1322                           ; 1 bytes @ 0x6
  1323                           
  1324  0026                     ___awdiv@sign:	
  1325                           ; 1 bytes @ 0x6
  1326                           
  1327  0026                     ___awmod@sign:	
  1328                           ; 1 bytes @ 0x6
  1329                           
  1330  0026                     crc_calculate@crc:	
  1331                           ; 1 bytes @ 0x6
  1332                           
  1333  0026                     ___lwdiv@quotient:	
  1334                           ; 2 bytes @ 0x6
  1335                           
  1336                           
  1337                           ; 2 bytes @ 0x6
  1338  0026                     	ds	1
  1339  0027                     ?_send_string:	
  1340  0027                     send_string@str:	
  1341                           ; 1 bytes @ 0x7
  1342                           
  1343  0027                     ___awdiv@quotient:	
  1344                           ; 2 bytes @ 0x7
  1345                           
  1346  0027                     memcpy@d:	
  1347                           ; 2 bytes @ 0x7
  1348                           
  1349                           
  1350                           ; 2 bytes @ 0x7
  1351  0027                     	ds	1
  1352  0028                     ?___lwmod:	
  1353  0028                     crc_calculate@i:	
  1354                           ; 2 bytes @ 0x8
  1355                           
  1356  0028                     LCDByte@hn:	
  1357                           ; 1 bytes @ 0x8
  1358                           
  1359  0028                     ___lwmod@divisor:	
  1360                           ; 1 bytes @ 0x8
  1361                           
  1362                           
  1363                           ; 2 bytes @ 0x8
  1364  0028                     	ds	1
  1365  0029                     send_string@len:	
  1366  0029                     LCDByte@ln:	
  1367                           ; 1 bytes @ 0x9
  1368                           
  1369  0029                     memcpy@s:	
  1370                           ; 1 bytes @ 0x9
  1371                           
  1372                           
  1373                           ; 2 bytes @ 0x9
  1374  0029                     	ds	1
  1375  002A                     ??_send_string:	
  1376  002A                     LCDByte@c:	
  1377                           ; 1 bytes @ 0xA
  1378                           
  1379  002A                     ___lwmod@dividend:	
  1380                           ; 1 bytes @ 0xA
  1381                           
  1382                           
  1383                           ; 2 bytes @ 0xA
  1384  002A                     	ds	1
  1385  002B                     ?_compose:	
  1386  002B                     send_string@i:	
  1387                           ; 1 bytes @ 0xB
  1388                           
  1389  002B                     LCDByte@temp:	
  1390                           ; 1 bytes @ 0xB
  1391                           
  1392  002B                     compose@pmsg:	
  1393                           ; 1 bytes @ 0xB
  1394                           
  1395                           
  1396                           ; 2 bytes @ 0xB
  1397  002B                     	ds	1
  1398  002C                     ?_LCDGotoXY:	
  1399  002C                     ?_LCDWriteString:	
  1400                           ; 1 bytes @ 0xC
  1401                           
  1402  002C                     ??_LCDInit:	
  1403                           ; 1 bytes @ 0xC
  1404                           
  1405  002C                     ??_LCDSetStyle:	
  1406                           ; 1 bytes @ 0xC
  1407                           
  1408  002C                     ?_send_msg:	
  1409                           ; 1 bytes @ 0xC
  1410                           
  1411  002C                     ?_LCDWriteInt:	
  1412                           ; 1 bytes @ 0xC
  1413                           
  1414  002C                     ??___lwmod:	
  1415                           ; 1 bytes @ 0xC
  1416                           
  1417  002C                     LCDSetStyle@style:	
  1418                           ; 1 bytes @ 0xC
  1419                           
  1420  002C                     LCDGotoXY@y:	
  1421                           ; 1 bytes @ 0xC
  1422                           
  1423  002C                     send_msg@pmsg:	
  1424                           ; 1 bytes @ 0xC
  1425                           
  1426  002C                     LCDWriteString@msg:	
  1427                           ; 2 bytes @ 0xC
  1428                           
  1429  002C                     LCDWriteInt@val:	
  1430                           ; 2 bytes @ 0xC
  1431                           
  1432                           
  1433                           ; 2 bytes @ 0xC
  1434  002C                     	ds	1
  1435  002D                     ??_LCDGotoXY:	
  1436  002D                     compose@from:	
  1437                           ; 1 bytes @ 0xD
  1438                           
  1439  002D                     ___lwmod@counter:	
  1440                           ; 1 bytes @ 0xD
  1441                           
  1442                           
  1443                           ; 1 bytes @ 0xD
  1444  002D                     	ds	1
  1445  002E                     ??_LCDWriteString:	
  1446  002E                     ??_send_msg:	
  1447                           ; 1 bytes @ 0xE
  1448                           
  1449  002E                     ?_sprintf:	
  1450                           ; 1 bytes @ 0xE
  1451                           
  1452  002E                     compose@to:	
  1453                           ; 2 bytes @ 0xE
  1454                           
  1455  002E                     LCDInit@style:	
  1456                           ; 1 bytes @ 0xE
  1457                           
  1458  002E                     LCDWriteInt@field_length:	
  1459                           ; 1 bytes @ 0xE
  1460                           
  1461  002E                     LCDGotoXY@x:	
  1462                           ; 1 bytes @ 0xE
  1463                           
  1464  002E                     sprintf@sp:	
  1465                           ; 1 bytes @ 0xE
  1466                           
  1467                           
  1468                           ; 2 bytes @ 0xE
  1469  002E                     	ds	1
  1470  002F                     ??_LCDWriteInt:	
  1471  002F                     compose@msgid:	
  1472                           ; 1 bytes @ 0xF
  1473                           
  1474  002F                     LCDInit@__i:	
  1475                           ; 1 bytes @ 0xF
  1476                           
  1477  002F                     LCDWriteString@count:	
  1478                           ; 1 bytes @ 0xF
  1479                           
  1480  002F                     send_msg@s:	
  1481                           ; 1 bytes @ 0xF
  1482                           
  1483                           
  1484                           ; 2 bytes @ 0xF
  1485  002F                     	ds	1
  1486  0030                     compose@cmd:	
  1487  0030                     LCDWriteString@cc:	
  1488                           ; 1 bytes @ 0x10
  1489                           
  1490  0030                     sprintf@f:	
  1491                           ; 1 bytes @ 0x10
  1492                           
  1493                           
  1494                           ; 1 bytes @ 0x10
  1495  0030                     	ds	1
  1496  0031                     ??_ClearMenu:	
  1497  0031                     compose@data:	
  1498                           ; 1 bytes @ 0x11
  1499                           
  1500  0031                     LCDWriteInt@str:	
  1501                           ; 2 bytes @ 0x11
  1502                           
  1503                           
  1504                           ; 5 bytes @ 0x11
  1505  0031                     	ds	1
  1506  0032                     ClearMenu@count:	
  1507                           
  1508                           ; 1 bytes @ 0x12
  1509  0032                     	ds	1
  1510  0033                     compose@datalen:	
  1511  0033                     ClearMenu@i:	
  1512                           ; 1 bytes @ 0x13
  1513                           
  1514                           
  1515                           ; 1 bytes @ 0x13
  1516  0033                     	ds	1
  1517  0034                     ??_compose:	
  1518                           
  1519                           ; 1 bytes @ 0x14
  1520  0034                     	ds	2
  1521  0036                     compose@len:	
  1522  0036                     LCDWriteInt@j:	
  1523                           ; 2 bytes @ 0x16
  1524                           
  1525                           
  1526                           ; 2 bytes @ 0x16
  1527  0036                     	ds	2
  1528  0038                     LCDWriteInt@i:	
  1529                           
  1530                           ; 2 bytes @ 0x18
  1531  0038                     	ds	2
  1532  003A                     ??_ShowMenu:	
  1533                           
  1534                           ; 1 bytes @ 0x1A
  1535  003A                     	ds	3
  1536  003D                     ??_sprintf:	
  1537                           
  1538                           ; 1 bytes @ 0x1D
  1539  003D                     	ds	1
  1540  003E                     ShowMenu@count:	
  1541                           
  1542                           ; 1 bytes @ 0x1E
  1543  003E                     	ds	1
  1544  003F                     ShowMenu@i:	
  1545                           
  1546                           ; 1 bytes @ 0x1F
  1547  003F                     	ds	1
  1548  0040                     sprintf@ap:	
  1549                           
  1550                           ; 1 bytes @ 0x20
  1551  0040                     	ds	1
  1552  0041                     sprintf@flag:	
  1553                           
  1554                           ; 1 bytes @ 0x21
  1555  0041                     	ds	1
  1556  0042                     sprintf@prec:	
  1557                           
  1558                           ; 1 bytes @ 0x22
  1559  0042                     	ds	1
  1560  0043                     sprintf@val:	
  1561                           
  1562                           ; 2 bytes @ 0x23
  1563  0043                     	ds	2
  1564  0045                     sprintf@c:	
  1565                           
  1566                           ; 1 bytes @ 0x25
  1567  0045                     	ds	1
  1568  0046                     ??_dump_msg:	
  1569                           
  1570                           ; 1 bytes @ 0x26
  1571  0046                     	ds	11
  1572  0051                     ??_main:	
  1573                           
  1574                           ; 1 bytes @ 0x31
  1575  0051                     	ds	5
  1576                           
  1577                           	psect	maintext
  1578  0055                     __pmaintext:	
  1579 ;;
  1580 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1581 ;;
  1582 ;; *************** function _main *****************
  1583 ;; Defined at:
  1584 ;;		line 110 in file "do_am.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;  i               1   18[BANK2 ] char 
  1589 ;;  i               1   17[BANK2 ] char 
  1590 ;;  count           1   12[BANK2 ] char 
  1591 ;;  count           1   11[BANK2 ] char 
  1592 ;;  i               1   16[BANK2 ] char 
  1593 ;;  i               1   15[BANK2 ] char 
  1594 ;;  i               1   20[BANK2 ] char 
  1595 ;;  i               1   19[BANK2 ] char 
  1596 ;;  count           1   10[BANK2 ] char 
  1597 ;;  count           1    9[BANK2 ] char 
  1598 ;;  count           1   14[BANK2 ] char 
  1599 ;;  count           1   13[BANK2 ] char 
  1600 ;;  rsp             1    8[BANK2 ] struct .
  1601 ;;  rqt             1    7[BANK2 ] struct .
  1602 ;;  pconn           1    6[BANK2 ] PTR struct .
  1603 ;;		 -> NULL(0), 
  1604 ;;  prsp            1    5[BANK2 ] PTR struct .
  1605 ;;		 -> main@rsp(1), 
  1606 ;;  prqt            1    4[BANK2 ] PTR struct .
  1607 ;;		 -> main@rqt(1), 
  1608 ;;  revc            1    3[BANK2 ] unsigned char 
  1609 ;;  sendc           1    2[BANK2 ] unsigned char 
  1610 ;;  value           1    1[BANK2 ] unsigned char 
  1611 ;;  ret             1    0[BANK2 ] unsigned char 
  1612 ;;  end_index       1    0        unsigned char 
  1613 ;;  start_index     1    0        unsigned char 
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1618 ;; Tracked objects:
  1619 ;;		On entry : B00/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1623 ;;      Params:         0       0       0       0       0
  1624 ;;      Locals:         0       0       0       0      21
  1625 ;;      Temps:          0       5       0       0       0
  1626 ;;      Totals:         0       5       0       0      21
  1627 ;;Total ram usage:       26 bytes
  1628 ;; Hardware stack levels required when called:    7
  1629 ;; This function calls:
  1630 ;;		_ADCInit
  1631 ;;		_ClearMenu
  1632 ;;		_ConnInit
  1633 ;;		_IOInit
  1634 ;;		_LCDByte
  1635 ;;		_LCDGotoXY
  1636 ;;		_LCDInit
  1637 ;;		_LCDSetStyle
  1638 ;;		_LCDWriteString
  1639 ;;		_MenuDown
  1640 ;;		_MenuInit
  1641 ;;		_MenuUp
  1642 ;;		_ShowMenu
  1643 ;;		_ValueDec
  1644 ;;		_ValueInc
  1645 ;;		_compose
  1646 ;;		_dump_msg
  1647 ;;		_send_msg
  1648 ;; This function is called by:
  1649 ;;		Startup code after reset
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           
  1654                           ;psect for function _main
  1655  0055                     _main:	
  1656                           
  1657                           ;do_am.c: 113: LCDInit(0B00000000);
  1658                           
  1659                           ;incstack = 0
  1660                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1661  0055  3000               	movlw	0
  1662  0056  120A  158A  2798  120A  118A  	fcall	_LCDInit
  1663                           
  1664                           ;do_am.c: 116: ADCInit();
  1665  005B  120A  158A  2272  120A  118A  	fcall	_ADCInit
  1666                           
  1667                           ;do_am.c: 119: IOInit();
  1668  0060  120A  158A  24D0  120A  118A  	fcall	_IOInit
  1669                           
  1670                           ;do_am.c: 121: MenuInit();
  1671  0065  120A  158A  256A  120A  118A  	fcall	_MenuInit
  1672                           
  1673                           ;do_am.c: 123: ConnInit();
  1674  006A  120A  158A  2486  120A  118A  	fcall	_ConnInit
  1675                           
  1676                           ;do_am.c: 126: (LCDByte(0b00000001,0));
  1677  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1678  0070  1303               	bcf	3,6	;RP1=0, select bank0
  1679  0071  01A5               	clrf	LCDByte@isdata
  1680  0072  3001               	movlw	1
  1681  0073  120A  158A  25BE  120A  118A  	fcall	_LCDByte
  1682                           
  1683                           ;do_am.c: 128: uint8_t ret = 0;
  1684  0078  1283               	bcf	3,5	;RP0=0, select bank2
  1685  0079  1703               	bsf	3,6	;RP1=1, select bank2
  1686  007A  01BE               	clrf	main@ret^(0+256)
  1687                           
  1688                           ;do_am.c: 129: uint8_t value = 0x99;
  1689  007B  3099               	movlw	153
  1690  007C  1283               	bcf	3,5	;RP0=0, select bank0
  1691  007D  1303               	bcf	3,6	;RP1=0, select bank0
  1692  007E  00D1               	movwf	??_main
  1693  007F  0851               	movf	??_main,w
  1694  0080  1283               	bcf	3,5	;RP0=0, select bank2
  1695  0081  1703               	bsf	3,6	;RP1=1, select bank2
  1696  0082  00BF               	movwf	main@value^(0+256)
  1697                           
  1698                           ;do_am.c: 130: uint8_t sendc = 0x78;
  1699  0083  3078               	movlw	120
  1700  0084  1283               	bcf	3,5	;RP0=0, select bank0
  1701  0085  1303               	bcf	3,6	;RP1=0, select bank0
  1702  0086  00D1               	movwf	??_main
  1703  0087  0851               	movf	??_main,w
  1704  0088  1283               	bcf	3,5	;RP0=0, select bank2
  1705  0089  1703               	bsf	3,6	;RP1=1, select bank2
  1706  008A  00C0               	movwf	main@sendc^(0+256)
  1707                           
  1708                           ;do_am.c: 131: uint8_t revc = 0;
  1709  008B  01C1               	clrf	main@revc^(0+256)
  1710                           
  1711                           ;do_am.c: 132: REG_ID_RQT_CMD_t rqt;
  1712                           ;do_am.c: 133: REG_ID_RQT_CMD_t *prqt = &rqt;
  1713  008C  3045               	movlw	(low (main@rqt| (0+256)))& (0+255)
  1714  008D  1283               	bcf	3,5	;RP0=0, select bank0
  1715  008E  1303               	bcf	3,6	;RP1=0, select bank0
  1716  008F  00D1               	movwf	??_main
  1717  0090  0851               	movf	??_main,w
  1718  0091  1283               	bcf	3,5	;RP0=0, select bank2
  1719  0092  1703               	bsf	3,6	;RP1=1, select bank2
  1720  0093  00C2               	movwf	main@prqt^(0+256)
  1721                           
  1722                           ;do_am.c: 134: REG_ID_RSP_CMD_t rsp;
  1723                           ;do_am.c: 135: REG_ID_RSP_CMD_t *prsp = &rsp;
  1724  0094  3046               	movlw	(low (main@rsp| (0+256)))& (0+255)
  1725  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1726  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1727  0097  00D1               	movwf	??_main
  1728  0098  0851               	movf	??_main,w
  1729  0099  1283               	bcf	3,5	;RP0=0, select bank2
  1730  009A  1703               	bsf	3,6	;RP1=1, select bank2
  1731  009B  00C3               	movwf	main@prsp^(0+256)
  1732                           
  1733                           ;do_am.c: 136: Connection_t *pconn = (0);
  1734  009C  01C4               	clrf	main@pconn^(0+256)
  1735  009D  2AB5               	goto	l4194
  1736  009E                     l4196:	
  1737                           
  1738                           ;do_am.c: 142: {
  1739                           ;do_am.c: 152: count++;
  1740  009E  3001               	movlw	1
  1741  009F  1683               	bsf	3,5	;RP0=1, select bank1
  1742  00A0  1303               	bcf	3,6	;RP1=0, select bank1
  1743  00A1  07DB               	addwf	_count^(0+128),f
  1744  00A2  1803               	skipnc
  1745  00A3  0ADC               	incf	(_count+1)^(0+128),f
  1746  00A4  3000               	movlw	0
  1747  00A5  07DC               	addwf	(_count+1)^(0+128),f
  1748                           
  1749                           ;do_am.c: 153: compose(pmsg, 11 + count, 22 + count, 33 + count, 44 + count, "abc", 3);
  1750  00A6  1283               	bcf	3,5	;RP0=0, select bank0
  1751  00A7  1303               	bcf	3,6	;RP1=0, select bank0
  1752  00A8  0857               	movf	_pmsg,w
  1753  00A9  00AB               	movwf	compose@pmsg
  1754  00AA  3001               	movlw	1
  1755  00AB  00AC               	movwf	compose@pmsg+1
  1756  00AC  1683               	bsf	3,5	;RP0=1, select bank1
  1757  00AD  1303               	bcf	3,6	;RP1=0, select bank1
  1758  00AE  085B               	movf	_count^(0+128),w
  1759  00AF  3E0B               	addlw	11
  1760  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  1761  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  1762  00B2  00D1               	movwf	??_main
  1763  00B3  0851               	movf	??_main,w
  1764  00B4  00AD               	movwf	compose@from
  1765  00B5  1683               	bsf	3,5	;RP0=1, select bank1
  1766  00B6  1303               	bcf	3,6	;RP1=0, select bank1
  1767  00B7  085B               	movf	_count^(0+128),w
  1768  00B8  3E16               	addlw	22
  1769  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1770  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  1771  00BB  00D2               	movwf	??_main+1
  1772  00BC  0852               	movf	??_main+1,w
  1773  00BD  00AE               	movwf	compose@to
  1774  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  1775  00BF  1303               	bcf	3,6	;RP1=0, select bank1
  1776  00C0  085B               	movf	_count^(0+128),w
  1777  00C1  3E21               	addlw	33
  1778  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  1779  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  1780  00C4  00D3               	movwf	??_main+2
  1781  00C5  0853               	movf	??_main+2,w
  1782  00C6  00AF               	movwf	compose@msgid
  1783  00C7  1683               	bsf	3,5	;RP0=1, select bank1
  1784  00C8  1303               	bcf	3,6	;RP1=0, select bank1
  1785  00C9  085B               	movf	_count^(0+128),w
  1786  00CA  3E2C               	addlw	44
  1787  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1788  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1789  00CD  00D4               	movwf	??_main+3
  1790  00CE  0854               	movf	??_main+3,w
  1791  00CF  00B0               	movwf	compose@cmd
  1792  00D0  3071               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1793  00D1  00B1               	movwf	compose@data
  1794  00D2  3080               	movlw	128
  1795  00D3  00B2               	movwf	compose@data+1
  1796  00D4  3003               	movlw	3
  1797  00D5  00D5               	movwf	??_main+4
  1798  00D6  0855               	movf	??_main+4,w
  1799  00D7  00B3               	movwf	compose@datalen
  1800  00D8  120A  118A  2687  120A  118A  	fcall	_compose
  1801                           
  1802                           ;do_am.c: 154: send_msg(pmsg);
  1803  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  1804  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  1805  00DF  0857               	movf	_pmsg,w
  1806  00E0  00AC               	movwf	send_msg@pmsg
  1807  00E1  3001               	movlw	1
  1808  00E2  00AD               	movwf	send_msg@pmsg+1
  1809  00E3  120A  158A  2413  120A  118A  	fcall	_send_msg
  1810                           
  1811                           ;do_am.c: 155: dump_msg(pmsg);
  1812  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  1813  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  1814  00EA  0857               	movf	_pmsg,w
  1815  00EB  120A  118A  23FE  120A  118A  	fcall	_dump_msg
  1816                           
  1817                           ;do_am.c: 180: _delay((unsigned long)((200)*(20000000/4000.0)));
  1818  00F0  3006               	movlw	6
  1819  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  1820  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  1821  00F3  00D3               	movwf	??_main+2
  1822  00F4  3013               	movlw	19
  1823  00F5  00D2               	movwf	??_main+1
  1824  00F6  30B1               	movlw	177
  1825  00F7  00D1               	movwf	??_main
  1826  00F8                     u4887:	
  1827  00F8  0BD1               	decfsz	??_main,f
  1828  00F9  28F8               	goto	u4887
  1829  00FA  0BD2               	decfsz	??_main+1,f
  1830  00FB  28F8               	goto	u4887
  1831  00FC  0BD3               	decfsz	??_main+2,f
  1832  00FD  28F8               	goto	u4887
  1833  00FE  28FF               	nop2
  1834                           
  1835                           ;do_am.c: 181: }
  1836  00FF  2AB5               	goto	l4194
  1837  0100                     l4206:	
  1838                           
  1839                           ;do_am.c: 184: {
  1840                           ;do_am.c: 185: if(mode == NORMAL)
  1841  0100  0356               	decf	_mode,w
  1842  0101  1D03               	btfss	3,2
  1843  0102  294A               	goto	l4228
  1844                           
  1845                           ;do_am.c: 186: {
  1846                           ;do_am.c: 187: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("MENU MODE"); for(int8_
      +                          t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  1847  0103  01AC               	clrf	LCDGotoXY@y
  1848  0104  0AAC               	incf	LCDGotoXY@y,f
  1849  0105  3000               	movlw	0
  1850  0106  120A  158A  22C9  120A  118A  	fcall	_LCDGotoXY
  1851  010B  304E               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1852  010C  1283               	bcf	3,5	;RP0=0, select bank0
  1853  010D  1303               	bcf	3,6	;RP1=0, select bank0
  1854  010E  00AC               	movwf	LCDWriteString@msg
  1855  010F  3080               	movlw	128
  1856  0110  00AD               	movwf	LCDWriteString@msg+1
  1857  0111  120A  158A  26CE  120A  118A  	fcall	_LCDWriteString
  1858  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1859  0117  1303               	bcf	3,6	;RP1=0, select bank0
  1860  0118  00D1               	movwf	??_main
  1861  0119  0851               	movf	??_main,w
  1862  011A  1283               	bcf	3,5	;RP0=0, select bank2
  1863  011B  1703               	bsf	3,6	;RP1=1, select bank2
  1864  011C  00C7               	movwf	main@count^(0+256)
  1865  011D  0847               	movf	main@count^(0+256),w
  1866  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1867  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1868  0120  00D1               	movwf	??_main
  1869  0121  0851               	movf	??_main,w
  1870  0122  1283               	bcf	3,5	;RP0=0, select bank2
  1871  0123  1703               	bsf	3,6	;RP1=1, select bank2
  1872  0124  00CD               	movwf	main@i^(0+256)
  1873  0125  084D               	movf	main@i^(0+256),w
  1874  0126  3A80               	xorlw	128
  1875  0127  3E70               	addlw	-144
  1876  0128  1803               	btfsc	3,0
  1877  0129  2941               	goto	l4224
  1878  012A                     l4218:	
  1879  012A  1283               	bcf	3,5	;RP0=0, select bank0
  1880  012B  1303               	bcf	3,6	;RP1=0, select bank0
  1881  012C  01A5               	clrf	LCDByte@isdata
  1882  012D  0AA5               	incf	LCDByte@isdata,f
  1883  012E  3020               	movlw	32
  1884  012F  120A  158A  25BE  120A  118A  	fcall	_LCDByte
  1885  0134  3001               	movlw	1
  1886  0135  1283               	bcf	3,5	;RP0=0, select bank0
  1887  0136  1303               	bcf	3,6	;RP1=0, select bank0
  1888  0137  00D1               	movwf	??_main
  1889  0138  0851               	movf	??_main,w
  1890  0139  1283               	bcf	3,5	;RP0=0, select bank2
  1891  013A  1703               	bsf	3,6	;RP1=1, select bank2
  1892  013B  07CD               	addwf	main@i^(0+256),f
  1893  013C  084D               	movf	main@i^(0+256),w
  1894  013D  3A80               	xorlw	128
  1895  013E  3E70               	addlw	-144
  1896  013F  1C03               	skipc
  1897  0140  292A               	goto	l4218
  1898  0141                     l4224:	
  1899                           
  1900                           ;do_am.c: 188: mode = MENU;
  1901  0141  1283               	bcf	3,5	;RP0=0, select bank0
  1902  0142  1303               	bcf	3,6	;RP1=0, select bank0
  1903  0143  01D6               	clrf	_mode
  1904                           
  1905                           ;do_am.c: 189: ShowMenu();
  1906  0144  120A  158A  2670  120A  118A  	fcall	_ShowMenu
  1907                           
  1908                           ;do_am.c: 190: }
  1909  0149  2998               	goto	l4250
  1910  014A                     l4228:	
  1911                           
  1912                           ;do_am.c: 191: else
  1913                           ;do_am.c: 192: {
  1914                           ;do_am.c: 193: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("EDIT MODE"); for(int8_
      +                          t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  1915  014A  1283               	bcf	3,5	;RP0=0, select bank0
  1916  014B  1303               	bcf	3,6	;RP1=0, select bank0
  1917  014C  01AC               	clrf	LCDGotoXY@y
  1918  014D  0AAC               	incf	LCDGotoXY@y,f
  1919  014E  3000               	movlw	0
  1920  014F  120A  158A  22C9  120A  118A  	fcall	_LCDGotoXY
  1921  0154  3038               	movlw	(low (((STR_18+3)-__stringbase)| (0+32768)))& (0+255)
  1922  0155  1283               	bcf	3,5	;RP0=0, select bank0
  1923  0156  1303               	bcf	3,6	;RP1=0, select bank0
  1924  0157  00AC               	movwf	LCDWriteString@msg
  1925  0158  3080               	movlw	128
  1926  0159  00AD               	movwf	LCDWriteString@msg+1
  1927  015A  120A  158A  26CE  120A  118A  	fcall	_LCDWriteString
  1928  015F  1283               	bcf	3,5	;RP0=0, select bank0
  1929  0160  1303               	bcf	3,6	;RP1=0, select bank0
  1930  0161  00D1               	movwf	??_main
  1931  0162  0851               	movf	??_main,w
  1932  0163  1283               	bcf	3,5	;RP0=0, select bank2
  1933  0164  1703               	bsf	3,6	;RP1=1, select bank2
  1934  0165  00C8               	movwf	main@count_809^(0+256)
  1935  0166  0848               	movf	main@count_809^(0+256),w
  1936  0167  1283               	bcf	3,5	;RP0=0, select bank0
  1937  0168  1303               	bcf	3,6	;RP1=0, select bank0
  1938  0169  00D1               	movwf	??_main
  1939  016A  0851               	movf	??_main,w
  1940  016B  1283               	bcf	3,5	;RP0=0, select bank2
  1941  016C  1703               	bsf	3,6	;RP1=1, select bank2
  1942  016D  00CE               	movwf	main@i_811^(0+256)
  1943  016E  084E               	movf	main@i_811^(0+256),w
  1944  016F  3A80               	xorlw	128
  1945  0170  3E70               	addlw	-144
  1946  0171  1803               	btfsc	3,0
  1947  0172  298A               	goto	l4244
  1948  0173                     l4238:	
  1949  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1950  0174  1303               	bcf	3,6	;RP1=0, select bank0
  1951  0175  01A5               	clrf	LCDByte@isdata
  1952  0176  0AA5               	incf	LCDByte@isdata,f
  1953  0177  3020               	movlw	32
  1954  0178  120A  158A  25BE  120A  118A  	fcall	_LCDByte
  1955  017D  3001               	movlw	1
  1956  017E  1283               	bcf	3,5	;RP0=0, select bank0
  1957  017F  1303               	bcf	3,6	;RP1=0, select bank0
  1958  0180  00D1               	movwf	??_main
  1959  0181  0851               	movf	??_main,w
  1960  0182  1283               	bcf	3,5	;RP0=0, select bank2
  1961  0183  1703               	bsf	3,6	;RP1=1, select bank2
  1962  0184  07CE               	addwf	main@i_811^(0+256),f
  1963  0185  084E               	movf	main@i_811^(0+256),w
  1964  0186  3A80               	xorlw	128
  1965  0187  3E70               	addlw	-144
  1966  0188  1C03               	skipc
  1967  0189  2973               	goto	l4238
  1968  018A                     l4244:	
  1969                           
  1970                           ;do_am.c: 194: submode = EDIT;
  1971  018A  1283               	bcf	3,5	;RP0=0, select bank0
  1972  018B  1303               	bcf	3,6	;RP1=0, select bank0
  1973  018C  01D9               	clrf	_submode
  1974                           
  1975                           ;do_am.c: 195: ShowMenu();
  1976  018D  120A  158A  2670  120A  118A  	fcall	_ShowMenu
  1977                           
  1978                           ;do_am.c: 196: LCDSetStyle(0B00000001);
  1979  0192  3001               	movlw	1
  1980  0193  120A  118A  25F2  120A  118A  	fcall	_LCDSetStyle
  1981  0198                     l4250:	
  1982                           
  1983                           ;do_am.c: 197: }
  1984                           ;do_am.c: 199: _delay((unsigned long)((200)*(20000000/4000.0)));
  1985  0198  3006               	movlw	6
  1986  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1987  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1988  019B  00D3               	movwf	??_main+2
  1989  019C  3013               	movlw	19
  1990  019D  00D2               	movwf	??_main+1
  1991  019E  30B1               	movlw	177
  1992  019F  00D1               	movwf	??_main
  1993  01A0                     u4897:	
  1994  01A0  0BD1               	decfsz	??_main,f
  1995  01A1  29A0               	goto	u4897
  1996  01A2  0BD2               	decfsz	??_main+1,f
  1997  01A3  29A0               	goto	u4897
  1998  01A4  0BD3               	decfsz	??_main+2,f
  1999  01A5  29A0               	goto	u4897
  2000  01A6  29A7               	nop2
  2001                           
  2002                           ;do_am.c: 200: }
  2003  01A7  2AB5               	goto	l4194
  2004  01A8                     l4252:	
  2005                           
  2006                           ;do_am.c: 203: {
  2007                           ;do_am.c: 204: if(mode == MENU)
  2008  01A8  0856               	movf	_mode,w
  2009  01A9  1D03               	btfss	3,2
  2010  01AA  2A40               	goto	l4292
  2011                           
  2012                           ;do_am.c: 205: {
  2013                           ;do_am.c: 206: if(submode == EDIT)
  2014  01AB  0859               	movf	_submode,w
  2015  01AC  1D03               	btfss	3,2
  2016  01AD  29F7               	goto	l4274
  2017                           
  2018                           ;do_am.c: 207: {
  2019                           ;do_am.c: 208: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("NOTEDIT MODE"); for(in
      +                          t8_t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  2020  01AE  01AC               	clrf	LCDGotoXY@y
  2021  01AF  0AAC               	incf	LCDGotoXY@y,f
  2022  01B0  3000               	movlw	0
  2023  01B1  120A  158A  22C9  120A  118A  	fcall	_LCDGotoXY
  2024  01B6  3035               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  2025  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  2026  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  2027  01B9  00AC               	movwf	LCDWriteString@msg
  2028  01BA  3080               	movlw	128
  2029  01BB  00AD               	movwf	LCDWriteString@msg+1
  2030  01BC  120A  158A  26CE  120A  118A  	fcall	_LCDWriteString
  2031  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  2032  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  2033  01C3  00D1               	movwf	??_main
  2034  01C4  0851               	movf	??_main,w
  2035  01C5  1283               	bcf	3,5	;RP0=0, select bank2
  2036  01C6  1703               	bsf	3,6	;RP1=1, select bank2
  2037  01C7  00C9               	movwf	main@count_812^(0+256)
  2038  01C8  0849               	movf	main@count_812^(0+256),w
  2039  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  2040  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  2041  01CB  00D1               	movwf	??_main
  2042  01CC  0851               	movf	??_main,w
  2043  01CD  1283               	bcf	3,5	;RP0=0, select bank2
  2044  01CE  1703               	bsf	3,6	;RP1=1, select bank2
  2045  01CF  00CF               	movwf	main@i_814^(0+256)
  2046  01D0  084F               	movf	main@i_814^(0+256),w
  2047  01D1  3A80               	xorlw	128
  2048  01D2  3E70               	addlw	-144
  2049  01D3  1803               	btfsc	3,0
  2050  01D4  29EC               	goto	l307
  2051  01D5                     l4266:	
  2052  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  2053  01D6  1303               	bcf	3,6	;RP1=0, select bank0
  2054  01D7  01A5               	clrf	LCDByte@isdata
  2055  01D8  0AA5               	incf	LCDByte@isdata,f
  2056  01D9  3020               	movlw	32
  2057  01DA  120A  158A  25BE  120A  118A  	fcall	_LCDByte
  2058  01DF  3001               	movlw	1
  2059  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  2060  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  2061  01E2  00D1               	movwf	??_main
  2062  01E3  0851               	movf	??_main,w
  2063  01E4  1283               	bcf	3,5	;RP0=0, select bank2
  2064  01E5  1703               	bsf	3,6	;RP1=1, select bank2
  2065  01E6  07CF               	addwf	main@i_814^(0+256),f
  2066  01E7  084F               	movf	main@i_814^(0+256),w
  2067  01E8  3A80               	xorlw	128
  2068  01E9  3E70               	addlw	-144
  2069  01EA  1C03               	skipc
  2070  01EB  29D5               	goto	l4266
  2071  01EC                     l307:	
  2072                           
  2073                           ;do_am.c: 209: submode = NOTEDIT;
  2074  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  2075  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  2076  01EE  01D9               	clrf	_submode
  2077  01EF  0AD9               	incf	_submode,f
  2078                           
  2079                           ;do_am.c: 210: LCDSetStyle(0B00000000);
  2080  01F0  3000               	movlw	0
  2081  01F1  120A  118A  25F2  120A  118A  	fcall	_LCDSetStyle
  2082                           
  2083                           ;do_am.c: 211: }
  2084  01F6  2A40               	goto	l4292
  2085  01F7                     l4274:	
  2086                           
  2087                           ;do_am.c: 212: else
  2088                           ;do_am.c: 213: {
  2089                           ;do_am.c: 214: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("NORMAL MODE"); for(int
      +                          8_t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  2090  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  2091  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  2092  01F9  01AC               	clrf	LCDGotoXY@y
  2093  01FA  0AAC               	incf	LCDGotoXY@y,f
  2094  01FB  3000               	movlw	0
  2095  01FC  120A  158A  22C9  120A  118A  	fcall	_LCDGotoXY
  2096  0201  3042               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  2097  0202  1283               	bcf	3,5	;RP0=0, select bank0
  2098  0203  1303               	bcf	3,6	;RP1=0, select bank0
  2099  0204  00AC               	movwf	LCDWriteString@msg
  2100  0205  3080               	movlw	128
  2101  0206  00AD               	movwf	LCDWriteString@msg+1
  2102  0207  120A  158A  26CE  120A  118A  	fcall	_LCDWriteString
  2103  020C  1283               	bcf	3,5	;RP0=0, select bank0
  2104  020D  1303               	bcf	3,6	;RP1=0, select bank0
  2105  020E  00D1               	movwf	??_main
  2106  020F  0851               	movf	??_main,w
  2107  0210  1283               	bcf	3,5	;RP0=0, select bank2
  2108  0211  1703               	bsf	3,6	;RP1=1, select bank2
  2109  0212  00CA               	movwf	main@count_815^(0+256)
  2110  0213  084A               	movf	main@count_815^(0+256),w
  2111  0214  1283               	bcf	3,5	;RP0=0, select bank0
  2112  0215  1303               	bcf	3,6	;RP1=0, select bank0
  2113  0216  00D1               	movwf	??_main
  2114  0217  0851               	movf	??_main,w
  2115  0218  1283               	bcf	3,5	;RP0=0, select bank2
  2116  0219  1703               	bsf	3,6	;RP1=1, select bank2
  2117  021A  00D0               	movwf	main@i_817^(0+256)
  2118  021B  0850               	movf	main@i_817^(0+256),w
  2119  021C  3A80               	xorlw	128
  2120  021D  3E70               	addlw	-144
  2121  021E  1803               	btfsc	3,0
  2122  021F  2A37               	goto	l310
  2123  0220                     l4284:	
  2124  0220  1283               	bcf	3,5	;RP0=0, select bank0
  2125  0221  1303               	bcf	3,6	;RP1=0, select bank0
  2126  0222  01A5               	clrf	LCDByte@isdata
  2127  0223  0AA5               	incf	LCDByte@isdata,f
  2128  0224  3020               	movlw	32
  2129  0225  120A  158A  25BE  120A  118A  	fcall	_LCDByte
  2130  022A  3001               	movlw	1
  2131  022B  1283               	bcf	3,5	;RP0=0, select bank0
  2132  022C  1303               	bcf	3,6	;RP1=0, select bank0
  2133  022D  00D1               	movwf	??_main
  2134  022E  0851               	movf	??_main,w
  2135  022F  1283               	bcf	3,5	;RP0=0, select bank2
  2136  0230  1703               	bsf	3,6	;RP1=1, select bank2
  2137  0231  07D0               	addwf	main@i_817^(0+256),f
  2138  0232  0850               	movf	main@i_817^(0+256),w
  2139  0233  3A80               	xorlw	128
  2140  0234  3E70               	addlw	-144
  2141  0235  1C03               	skipc
  2142  0236  2A20               	goto	l4284
  2143  0237                     l310:	
  2144                           
  2145                           ;do_am.c: 215: mode = NORMAL;
  2146  0237  1283               	bcf	3,5	;RP0=0, select bank0
  2147  0238  1303               	bcf	3,6	;RP1=0, select bank0
  2148  0239  01D6               	clrf	_mode
  2149  023A  0AD6               	incf	_mode,f
  2150                           
  2151                           ;do_am.c: 216: ClearMenu();
  2152  023B  120A  158A  2379  120A  118A  	fcall	_ClearMenu
  2153  0240                     l4292:	
  2154                           
  2155                           ;do_am.c: 217: }
  2156                           ;do_am.c: 218: }
  2157                           ;do_am.c: 220: _delay((unsigned long)((200)*(20000000/4000.0)));
  2158  0240  3006               	movlw	6
  2159  0241  1283               	bcf	3,5	;RP0=0, select bank0
  2160  0242  1303               	bcf	3,6	;RP1=0, select bank0
  2161  0243  00D3               	movwf	??_main+2
  2162  0244  3013               	movlw	19
  2163  0245  00D2               	movwf	??_main+1
  2164  0246  30B1               	movlw	177
  2165  0247  00D1               	movwf	??_main
  2166  0248                     u4907:	
  2167  0248  0BD1               	decfsz	??_main,f
  2168  0249  2A48               	goto	u4907
  2169  024A  0BD2               	decfsz	??_main+1,f
  2170  024B  2A48               	goto	u4907
  2171  024C  0BD3               	decfsz	??_main+2,f
  2172  024D  2A48               	goto	u4907
  2173  024E  2A4F               	nop2
  2174                           
  2175                           ;do_am.c: 221: }
  2176  024F  2AB5               	goto	l4194
  2177  0250                     l4294:	
  2178                           
  2179                           ;do_am.c: 224: {
  2180                           ;do_am.c: 225: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("UP"); for(int8_t i = c
      +                          ount + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  2181  0250  01AC               	clrf	LCDGotoXY@y
  2182  0251  0AAC               	incf	LCDGotoXY@y,f
  2183  0252  3000               	movlw	0
  2184  0253  120A  158A  22C9  120A  118A  	fcall	_LCDGotoXY
  2185  0258  3075               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  2186  0259  1283               	bcf	3,5	;RP0=0, select bank0
  2187  025A  1303               	bcf	3,6	;RP1=0, select bank0
  2188  025B  00AC               	movwf	LCDWriteString@msg
  2189  025C  3080               	movlw	128
  2190  025D  00AD               	movwf	LCDWriteString@msg+1
  2191  025E  120A  158A  26CE  120A  118A  	fcall	_LCDWriteString
  2192  0263  1283               	bcf	3,5	;RP0=0, select bank0
  2193  0264  1303               	bcf	3,6	;RP1=0, select bank0
  2194  0265  00D1               	movwf	??_main
  2195  0266  0851               	movf	??_main,w
  2196  0267  1283               	bcf	3,5	;RP0=0, select bank2
  2197  0268  1703               	bsf	3,6	;RP1=1, select bank2
  2198  0269  00CB               	movwf	main@count_818^(0+256)
  2199  026A  084B               	movf	main@count_818^(0+256),w
  2200  026B  1283               	bcf	3,5	;RP0=0, select bank0
  2201  026C  1303               	bcf	3,6	;RP1=0, select bank0
  2202  026D  00D1               	movwf	??_main
  2203  026E  0851               	movf	??_main,w
  2204  026F  1283               	bcf	3,5	;RP0=0, select bank2
  2205  0270  1703               	bsf	3,6	;RP1=1, select bank2
  2206  0271  00D1               	movwf	main@i_820^(0+256)
  2207  0272  0851               	movf	main@i_820^(0+256),w
  2208  0273  3A80               	xorlw	128
  2209  0274  3E70               	addlw	-144
  2210  0275  1803               	btfsc	3,0
  2211  0276  2A8E               	goto	l4310
  2212  0277                     l4304:	
  2213  0277  1283               	bcf	3,5	;RP0=0, select bank0
  2214  0278  1303               	bcf	3,6	;RP1=0, select bank0
  2215  0279  01A5               	clrf	LCDByte@isdata
  2216  027A  0AA5               	incf	LCDByte@isdata,f
  2217  027B  3020               	movlw	32
  2218  027C  120A  158A  25BE  120A  118A  	fcall	_LCDByte
  2219  0281  3001               	movlw	1
  2220  0282  1283               	bcf	3,5	;RP0=0, select bank0
  2221  0283  1303               	bcf	3,6	;RP1=0, select bank0
  2222  0284  00D1               	movwf	??_main
  2223  0285  0851               	movf	??_main,w
  2224  0286  1283               	bcf	3,5	;RP0=0, select bank2
  2225  0287  1703               	bsf	3,6	;RP1=1, select bank2
  2226  0288  07D1               	addwf	main@i_820^(0+256),f
  2227  0289  0851               	movf	main@i_820^(0+256),w
  2228  028A  3A80               	xorlw	128
  2229  028B  3E70               	addlw	-144
  2230  028C  1C03               	skipc
  2231  028D  2A77               	goto	l4304
  2232  028E                     l4310:	
  2233                           
  2234                           ;do_am.c: 226: if(mode == MENU)
  2235  028E  1283               	bcf	3,5	;RP0=0, select bank0
  2236  028F  1303               	bcf	3,6	;RP1=0, select bank0
  2237  0290  0856               	movf	_mode,w
  2238  0291  1D03               	btfss	3,2
  2239  0292  2AA6               	goto	l4320
  2240                           
  2241                           ;do_am.c: 227: {
  2242                           ;do_am.c: 228: if(submode == EDIT)
  2243  0293  0859               	movf	_submode,w
  2244  0294  1D03               	btfss	3,2
  2245  0295  2A9C               	goto	l4316
  2246                           
  2247                           ;do_am.c: 229: {
  2248                           ;do_am.c: 230: ValueInc();
  2249  0296  120A  118A  27E4  120A  118A  	fcall	_ValueInc
  2250                           
  2251                           ;do_am.c: 231: }
  2252  029B  2AA1               	goto	l4318
  2253  029C                     l4316:	
  2254                           
  2255                           ;do_am.c: 232: else
  2256                           ;do_am.c: 233: {
  2257                           ;do_am.c: 234: MenuUp();
  2258  029C  120A  158A  2218  120A  118A  	fcall	_MenuUp
  2259  02A1                     l4318:	
  2260                           
  2261                           ;do_am.c: 235: }
  2262                           ;do_am.c: 236: ShowMenu();
  2263  02A1  120A  158A  2670  120A  118A  	fcall	_ShowMenu
  2264  02A6                     l4320:	
  2265                           
  2266                           ;do_am.c: 237: }
  2267                           ;do_am.c: 238: _delay((unsigned long)((200)*(20000000/4000.0)));
  2268  02A6  3006               	movlw	6
  2269  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2270  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  2271  02A9  00D3               	movwf	??_main+2
  2272  02AA  3013               	movlw	19
  2273  02AB  00D2               	movwf	??_main+1
  2274  02AC  30B1               	movlw	177
  2275  02AD  00D1               	movwf	??_main
  2276  02AE                     u4917:	
  2277  02AE  0BD1               	decfsz	??_main,f
  2278  02AF  2AAE               	goto	u4917
  2279  02B0  0BD2               	decfsz	??_main+1,f
  2280  02B1  2AAE               	goto	u4917
  2281  02B2  0BD3               	decfsz	??_main+2,f
  2282  02B3  2AAE               	goto	u4917
  2283  02B4  2AB5               	nop2
  2284  02B5                     l4194:	
  2285                           ;do_am.c: 138: uint8_t start_index, end_index;
  2286                           ;do_am.c: 139: while(1)
  2287                           
  2288                           ;do_am.c: 239: }
  2289                           
  2290                           
  2291                           ;do_am.c: 140: {
  2292                           ;do_am.c: 141: if(RB2 == 0)
  2293  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  2294  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  2295  02B7  1D06               	btfss	6,2	;volatile
  2296  02B8  289E               	goto	l4196
  2297                           
  2298                           ;do_am.c: 182: else
  2299                           ;do_am.c: 183: if(RB4 == 0)
  2300  02B9  1E06               	btfss	6,4	;volatile
  2301  02BA  2900               	goto	l4206
  2302                           
  2303                           ;do_am.c: 201: else
  2304                           ;do_am.c: 202: if(RB6 == 0)
  2305  02BB  1F06               	btfss	6,6	;volatile
  2306  02BC  29A8               	goto	l4252
  2307                           
  2308                           ;do_am.c: 222: else
  2309                           ;do_am.c: 223: if(RB5 == 0)
  2310  02BD  1E86               	btfss	6,5	;volatile
  2311  02BE  2A50               	goto	l4294
  2312                           
  2313                           ;do_am.c: 240: else
  2314                           ;do_am.c: 241: if(RB7 == 0)
  2315  02BF  1B86               	btfsc	6,7	;volatile
  2316  02C0  2AB5               	goto	l4194
  2317                           
  2318                           ;do_am.c: 242: {
  2319                           ;do_am.c: 243: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("DOWN"); for(int8_t i =
      +                           count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  2320  02C1  01AC               	clrf	LCDGotoXY@y
  2321  02C2  0AAC               	incf	LCDGotoXY@y,f
  2322  02C3  3000               	movlw	0
  2323  02C4  120A  158A  22C9  120A  118A  	fcall	_LCDGotoXY
  2324  02C9  306C               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  2325  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  2326  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  2327  02CC  00AC               	movwf	LCDWriteString@msg
  2328  02CD  3080               	movlw	128
  2329  02CE  00AD               	movwf	LCDWriteString@msg+1
  2330  02CF  120A  158A  26CE  120A  118A  	fcall	_LCDWriteString
  2331  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  2332  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  2333  02D6  00D1               	movwf	??_main
  2334  02D7  0851               	movf	??_main,w
  2335  02D8  1283               	bcf	3,5	;RP0=0, select bank2
  2336  02D9  1703               	bsf	3,6	;RP1=1, select bank2
  2337  02DA  00CC               	movwf	main@count_821^(0+256)
  2338  02DB  084C               	movf	main@count_821^(0+256),w
  2339  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  2340  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  2341  02DE  00D1               	movwf	??_main
  2342  02DF  0851               	movf	??_main,w
  2343  02E0  1283               	bcf	3,5	;RP0=0, select bank2
  2344  02E1  1703               	bsf	3,6	;RP1=1, select bank2
  2345  02E2  00D2               	movwf	main@i_823^(0+256)
  2346  02E3  0852               	movf	main@i_823^(0+256),w
  2347  02E4  3A80               	xorlw	128
  2348  02E5  3E70               	addlw	-144
  2349  02E6  1803               	btfsc	3,0
  2350  02E7  2AFF               	goto	l4338
  2351  02E8                     l4332:	
  2352  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  2353  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  2354  02EA  01A5               	clrf	LCDByte@isdata
  2355  02EB  0AA5               	incf	LCDByte@isdata,f
  2356  02EC  3020               	movlw	32
  2357  02ED  120A  158A  25BE  120A  118A  	fcall	_LCDByte
  2358  02F2  3001               	movlw	1
  2359  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  2360  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  2361  02F5  00D1               	movwf	??_main
  2362  02F6  0851               	movf	??_main,w
  2363  02F7  1283               	bcf	3,5	;RP0=0, select bank2
  2364  02F8  1703               	bsf	3,6	;RP1=1, select bank2
  2365  02F9  07D2               	addwf	main@i_823^(0+256),f
  2366  02FA  0852               	movf	main@i_823^(0+256),w
  2367  02FB  3A80               	xorlw	128
  2368  02FC  3E70               	addlw	-144
  2369  02FD  1C03               	skipc
  2370  02FE  2AE8               	goto	l4332
  2371  02FF                     l4338:	
  2372                           
  2373                           ;do_am.c: 244: if(mode == MENU)
  2374  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  2375  0300  1303               	bcf	3,6	;RP1=0, select bank0
  2376  0301  0856               	movf	_mode,w
  2377  0302  1D03               	btfss	3,2
  2378  0303  2B17               	goto	l4348
  2379                           
  2380                           ;do_am.c: 245: {
  2381                           ;do_am.c: 246: if(submode == EDIT)
  2382  0304  0859               	movf	_submode,w
  2383  0305  1D03               	btfss	3,2
  2384  0306  2B0D               	goto	l4344
  2385                           
  2386                           ;do_am.c: 247: {
  2387                           ;do_am.c: 248: ValueDec();
  2388  0307  120A  158A  225F  120A  118A  	fcall	_ValueDec
  2389                           
  2390                           ;do_am.c: 249: }
  2391  030C  2B12               	goto	l4346
  2392  030D                     l4344:	
  2393                           
  2394                           ;do_am.c: 250: else
  2395                           ;do_am.c: 251: {
  2396                           ;do_am.c: 252: MenuDown();
  2397  030D  120A  158A  2207  120A  118A  	fcall	_MenuDown
  2398  0312                     l4346:	
  2399                           
  2400                           ;do_am.c: 253: }
  2401                           ;do_am.c: 254: ShowMenu();
  2402  0312  120A  158A  2670  120A  118A  	fcall	_ShowMenu
  2403  0317                     l4348:	
  2404                           
  2405                           ;do_am.c: 255: }
  2406                           ;do_am.c: 256: _delay((unsigned long)((200)*(20000000/4000.0)));
  2407  0317  3006               	movlw	6
  2408  0318  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0319  1303               	bcf	3,6	;RP1=0, select bank0
  2410  031A  00D3               	movwf	??_main+2
  2411  031B  3013               	movlw	19
  2412  031C  00D2               	movwf	??_main+1
  2413  031D  30B1               	movlw	177
  2414  031E  00D1               	movwf	??_main
  2415  031F                     u4927:	
  2416  031F  0BD1               	decfsz	??_main,f
  2417  0320  2B1F               	goto	u4927
  2418  0321  0BD2               	decfsz	??_main+1,f
  2419  0322  2B1F               	goto	u4927
  2420  0323  0BD3               	decfsz	??_main+2,f
  2421  0324  2B1F               	goto	u4927
  2422  0325  2B26               	nop2
  2423  0326  2AB5               	goto	l4194
  2424  0327                     __end_of_main:	
  2425                           
  2426                           	psect	text1
  2427  0C13                     __ptext1:	
  2428 ;; *************** function _send_msg *****************
  2429 ;; Defined at:
  2430 ;;		line 29 in file "msg.h"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;  pmsg            2   12[BANK0 ] PTR struct .
  2433 ;;		 -> msg(23), handle_REG_ID_RQT_CMD@msgo(23), 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  s               2   15[BANK0 ] PTR unsigned char 
  2436 ;;		 -> msg(23), handle_REG_ID_RQT_CMD@msgo(23), 
  2437 ;; Return value:  Size  Location     Type
  2438 ;;                  1    wreg      void 
  2439 ;; Registers used:
  2440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2446 ;;      Params:         0       2       0       0       0
  2447 ;;      Locals:         0       2       0       0       0
  2448 ;;      Temps:          0       1       0       0       0
  2449 ;;      Totals:         0       5       0       0       0
  2450 ;;Total ram usage:        5 bytes
  2451 ;; Hardware stack levels used:    1
  2452 ;; Hardware stack levels required when called:    6
  2453 ;; This function calls:
  2454 ;;		_send_string
  2455 ;; This function is called by:
  2456 ;;		_main
  2457 ;;		_send_REG_ID_RQT_CMD_and_wait
  2458 ;;		_handle_REG_ID_RQT_CMD
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           
  2463                           ;psect for function _send_msg
  2464  0C13                     _send_msg:	
  2465                           
  2466                           ;msg.h: 31: send_string(start_mark, 4);
  2467                           
  2468                           ;incstack = 0
  2469                           ; Regs used in _send_msg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2470  0C13  300B               	movlw	(low ((_start_mark-__stringbase)| (0+32768)))& (0+255)
  2471  0C14  1283               	bcf	3,5	;RP0=0, select bank0
  2472  0C15  1303               	bcf	3,6	;RP1=0, select bank0
  2473  0C16  00A7               	movwf	send_string@str
  2474  0C17  3080               	movlw	128
  2475  0C18  00A8               	movwf	send_string@str+1
  2476  0C19  3004               	movlw	4
  2477  0C1A  00AE               	movwf	??_send_msg
  2478  0C1B  082E               	movf	??_send_msg,w
  2479  0C1C  00A9               	movwf	send_string@len
  2480  0C1D  120A  158A  2286  120A  158A  	fcall	_send_string
  2481                           
  2482                           ;msg.h: 32: uint8_t *s = (uint8_t *)pmsg;
  2483  0C22  1283               	bcf	3,5	;RP0=0, select bank0
  2484  0C23  1303               	bcf	3,6	;RP1=0, select bank0
  2485  0C24  082C               	movf	send_msg@pmsg,w
  2486  0C25  00AF               	movwf	send_msg@s
  2487  0C26  082D               	movf	send_msg@pmsg+1,w
  2488  0C27  00B0               	movwf	send_msg@s+1
  2489                           
  2490                           ;msg.h: 33: send_string(s, pmsg->msglen);
  2491  0C28  082F               	movf	send_msg@s,w
  2492  0C29  00A7               	movwf	send_string@str
  2493  0C2A  0830               	movf	send_msg@s+1,w
  2494  0C2B  00A8               	movwf	send_string@str+1
  2495  0C2C  082C               	movf	send_msg@pmsg,w
  2496  0C2D  0084               	movwf	4
  2497  0C2E  1783               	bsf	3,7
  2498  0C2F  1C2D               	btfss	send_msg@pmsg+1,0
  2499  0C30  1383               	bcf	3,7
  2500  0C31  0800               	movf	0,w
  2501  0C32  00AE               	movwf	??_send_msg
  2502  0C33  082E               	movf	??_send_msg,w
  2503  0C34  00A9               	movwf	send_string@len
  2504  0C35  120A  158A  2286  120A  158A  	fcall	_send_string
  2505                           
  2506                           ;msg.h: 34: send_string(stop_mark, 4);
  2507  0C3A  300F               	movlw	(low ((_stop_mark-__stringbase)| (0+32768)))& (0+255)
  2508  0C3B  1283               	bcf	3,5	;RP0=0, select bank0
  2509  0C3C  1303               	bcf	3,6	;RP1=0, select bank0
  2510  0C3D  00A7               	movwf	send_string@str
  2511  0C3E  3080               	movlw	128
  2512  0C3F  00A8               	movwf	send_string@str+1
  2513  0C40  3004               	movlw	4
  2514  0C41  00AE               	movwf	??_send_msg
  2515  0C42  082E               	movf	??_send_msg,w
  2516  0C43  00A9               	movwf	send_string@len
  2517  0C44  120A  158A  2286   	fcall	_send_string
  2518  0C47  0008               	return
  2519  0C48                     __end_of_send_msg:	
  2520                           
  2521                           	psect	text2
  2522  0A86                     __ptext2:	
  2523 ;; *************** function _send_string *****************
  2524 ;; Defined at:
  2525 ;;		line 29 in file "packet.h"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;  str             2    7[BANK0 ] PTR unsigned char 
  2528 ;;		 -> msg(23), handle_REG_ID_RQT_CMD@msgo(23), stop_mark(4), start_mark(4), 
  2529 ;;  len             1    9[BANK0 ] unsigned char 
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;  i               1   11[BANK0 ] unsigned char 
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  1    wreg      void 
  2534 ;; Registers used:
  2535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2541 ;;      Params:         0       3       0       0       0
  2542 ;;      Locals:         0       1       0       0       0
  2543 ;;      Temps:          0       1       0       0       0
  2544 ;;      Totals:         0       5       0       0       0
  2545 ;;Total ram usage:        5 bytes
  2546 ;; Hardware stack levels used:    1
  2547 ;; Hardware stack levels required when called:    5
  2548 ;; This function calls:
  2549 ;;		_send_byte
  2550 ;; This function is called by:
  2551 ;;		_send_msg
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           
  2556                           ;psect for function _send_string
  2557  0A86                     _send_string:	
  2558                           
  2559                           ;packet.h: 31: for(uint8_t i = 0; i < len; i++)
  2560                           
  2561                           ;incstack = 0
  2562                           ; Regs used in _send_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2563  0A86  1283               	bcf	3,5	;RP0=0, select bank0
  2564  0A87  1303               	bcf	3,6	;RP1=0, select bank0
  2565  0A88  01AB               	clrf	send_string@i
  2566  0A89                     l3626:	
  2567  0A89  0829               	movf	send_string@len,w
  2568  0A8A  022B               	subwf	send_string@i,w
  2569  0A8B  1803               	btfsc	3,0
  2570  0A8C  0008               	return
  2571                           
  2572                           ;packet.h: 32: {
  2573                           ;packet.h: 33: send_byte(str[i]);
  2574  0A8D  082B               	movf	send_string@i,w
  2575  0A8E  0727               	addwf	send_string@str,w
  2576  0A8F  0084               	movwf	4
  2577  0A90  0828               	movf	send_string@str+1,w
  2578  0A91  1803               	skipnc
  2579  0A92  0A28               	incf	send_string@str+1,w
  2580  0A93  00FF               	movwf	127
  2581  0A94  120A  118A  2600  120A  158A  	fcall	stringtab
  2582  0A99  120A  158A  22EF  120A  158A  	fcall	_send_byte
  2583  0A9E  3001               	movlw	1
  2584  0A9F  1283               	bcf	3,5	;RP0=0, select bank0
  2585  0AA0  1303               	bcf	3,6	;RP1=0, select bank0
  2586  0AA1  00AA               	movwf	??_send_string
  2587  0AA2  082A               	movf	??_send_string,w
  2588  0AA3  07AB               	addwf	send_string@i,f
  2589  0AA4  2A89               	goto	l3626
  2590  0AA5                     __end_of_send_string:	
  2591                           
  2592                           	psect	text3
  2593  0AEF                     __ptext3:	
  2594 ;; *************** function _send_byte *****************
  2595 ;; Defined at:
  2596 ;;		line 20 in file "packet.h"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;  c               1    wreg     unsigned char 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  c               1    6[BANK0 ] unsigned char 
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  1    wreg      void 
  2603 ;; Registers used:
  2604 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2605 ;; Tracked objects:
  2606 ;;		On entry : 0/0
  2607 ;;		On exit  : 0/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2610 ;;      Params:         0       0       0       0       0
  2611 ;;      Locals:         0       1       0       0       0
  2612 ;;      Temps:          0       2       0       0       0
  2613 ;;      Totals:         0       3       0       0       0
  2614 ;;Total ram usage:        3 bytes
  2615 ;; Hardware stack levels used:    1
  2616 ;; Hardware stack levels required when called:    4
  2617 ;; This function calls:
  2618 ;;		_send_half_byte
  2619 ;; This function is called by:
  2620 ;;		_send_string
  2621 ;; This function uses a non-reentrant model
  2622 ;;
  2623                           
  2624                           
  2625                           ;psect for function _send_byte
  2626  0AEF                     _send_byte:	
  2627                           
  2628                           ;incstack = 0
  2629                           ; Regs used in _send_byte: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2630                           ;send_byte@c stored from wreg
  2631  0AEF  1283               	bcf	3,5	;RP0=0, select bank0
  2632  0AF0  1303               	bcf	3,6	;RP1=0, select bank0
  2633  0AF1  00A6               	movwf	send_byte@c
  2634                           
  2635                           ;packet.h: 22: send_half_byte(c, 1);
  2636  0AF2  01A0               	clrf	send_half_byte@low
  2637  0AF3  0AA0               	incf	send_half_byte@low,f
  2638  0AF4  0826               	movf	send_byte@c,w
  2639  0AF5  120A  118A  2778  120A  158A  	fcall	_send_half_byte
  2640                           
  2641                           ;packet.h: 23: _delay((unsigned long)((5)*(20000000/4000.0)));
  2642  0AFA  3021               	movlw	33
  2643  0AFB  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0AFC  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0AFD  00A5               	movwf	??_send_byte+1
  2646  0AFE  3076               	movlw	118
  2647  0AFF  00A4               	movwf	??_send_byte
  2648  0B00                     u4937:	
  2649  0B00  0BA4               	decfsz	??_send_byte,f
  2650  0B01  2B00               	goto	u4937
  2651  0B02  0BA5               	decfsz	??_send_byte+1,f
  2652  0B03  2B00               	goto	u4937
  2653  0B04  0000               	nop
  2654                           
  2655                           ;packet.h: 24: send_half_byte(c, 0);
  2656  0B05  1283               	bcf	3,5	;RP0=0, select bank0
  2657  0B06  1303               	bcf	3,6	;RP1=0, select bank0
  2658  0B07  01A0               	clrf	send_half_byte@low
  2659  0B08  0826               	movf	send_byte@c,w
  2660  0B09  120A  118A  2778  120A  158A  	fcall	_send_half_byte
  2661                           
  2662                           ;packet.h: 25: _delay((unsigned long)((5)*(20000000/4000.0)));
  2663  0B0E  3021               	movlw	33
  2664  0B0F  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0B10  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0B11  00A5               	movwf	??_send_byte+1
  2667  0B12  3076               	movlw	118
  2668  0B13  00A4               	movwf	??_send_byte
  2669  0B14                     u4947:	
  2670  0B14  0BA4               	decfsz	??_send_byte,f
  2671  0B15  2B14               	goto	u4947
  2672  0B16  0BA5               	decfsz	??_send_byte+1,f
  2673  0B17  2B14               	goto	u4947
  2674  0B18  0000               	nop
  2675  0B19  0008               	return
  2676  0B1A                     __end_of_send_byte:	
  2677                           
  2678                           	psect	text4
  2679  0778                     __ptext4:	
  2680 ;; *************** function _send_half_byte *****************
  2681 ;; Defined at:
  2682 ;;		line 14 in file "packet.h"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;  value           1    wreg     unsigned char 
  2685 ;;  low             1    0[BANK0 ] unsigned char 
  2686 ;; Auto vars:     Size  Location     Type
  2687 ;;  value           1    2[BANK0 ] unsigned char 
  2688 ;;  byte            1    3[BANK0 ] PTR struct .
  2689 ;;		 -> send_half_byte@value(1), 
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      void 
  2692 ;; Registers used:
  2693 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2699 ;;      Params:         0       1       0       0       0
  2700 ;;      Locals:         0       2       0       0       0
  2701 ;;      Temps:          0       1       0       0       0
  2702 ;;      Totals:         0       4       0       0       0
  2703 ;;Total ram usage:        4 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    3
  2706 ;; This function calls:
  2707 ;;		Nothing
  2708 ;; This function is called by:
  2709 ;;		_send_byte
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           
  2714                           ;psect for function _send_half_byte
  2715  0778                     _send_half_byte:	
  2716                           
  2717                           ;incstack = 0
  2718                           ; Regs used in _send_half_byte: [wreg-fsr0h+status,2+status,0]
  2719                           ;send_half_byte@value stored from wreg
  2720  0778  1283               	bcf	3,5	;RP0=0, select bank0
  2721  0779  1303               	bcf	3,6	;RP1=0, select bank0
  2722  077A  00A2               	movwf	send_half_byte@value
  2723                           
  2724                           ;packet.h: 16: { BITbits_t *byte = (BITbits_t *)&value; if(low == 1) { RA4 = byte->B0; R
      +                          A5 = byte->B1; RA6 = byte->B2; RA7 = byte->B3; } else { RA4 = byte->B4; RA5 = byte->B5; 
      +                          RA6 = byte->B6; RA7 = byte->B7; } };
  2725  077B  3022               	movlw	(low (send_half_byte@value| 0))& (0+255)
  2726  077C  00A1               	movwf	??_send_half_byte
  2727  077D  0821               	movf	??_send_half_byte,w
  2728  077E  00A3               	movwf	send_half_byte@byte
  2729  077F  0320               	decf	send_half_byte@low,w
  2730  0780  1D03               	btfss	3,2
  2731  0781  2FAC               	goto	l3376
  2732  0782  0823               	movf	send_half_byte@byte,w
  2733  0783  0084               	movwf	4
  2734  0784  1383               	bcf	3,7	;select IRP bank0
  2735  0785  1C00               	btfss	0,0
  2736  0786  2F8B               	goto	u3520
  2737  0787  1283               	bcf	3,5	;RP0=0, select bank0
  2738  0788  1303               	bcf	3,6	;RP1=0, select bank0
  2739  0789  1605               	bsf	5,4	;volatile
  2740  078A  2F8E               	goto	u3534
  2741  078B                     u3520:	
  2742  078B  1283               	bcf	3,5	;RP0=0, select bank0
  2743  078C  1303               	bcf	3,6	;RP1=0, select bank0
  2744  078D  1205               	bcf	5,4	;volatile
  2745  078E                     u3534:	
  2746  078E  0823               	movf	send_half_byte@byte,w
  2747  078F  0084               	movwf	4
  2748  0790  1383               	bcf	3,7	;select IRP bank0
  2749  0791  1C80               	btfss	0,1
  2750  0792  2F97               	goto	u3540
  2751  0793  1283               	bcf	3,5	;RP0=0, select bank0
  2752  0794  1303               	bcf	3,6	;RP1=0, select bank0
  2753  0795  1685               	bsf	5,5	;volatile
  2754  0796  2F9A               	goto	u3554
  2755  0797                     u3540:	
  2756  0797  1283               	bcf	3,5	;RP0=0, select bank0
  2757  0798  1303               	bcf	3,6	;RP1=0, select bank0
  2758  0799  1285               	bcf	5,5	;volatile
  2759  079A                     u3554:	
  2760  079A  0823               	movf	send_half_byte@byte,w
  2761  079B  0084               	movwf	4
  2762  079C  1383               	bcf	3,7	;select IRP bank0
  2763  079D  1D00               	btfss	0,2
  2764  079E  2FA3               	goto	u3560
  2765  079F  1283               	bcf	3,5	;RP0=0, select bank0
  2766  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  2767  07A1  1705               	bsf	5,6	;volatile
  2768  07A2  2FA6               	goto	u3574
  2769  07A3                     u3560:	
  2770  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  2771  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  2772  07A5  1305               	bcf	5,6	;volatile
  2773  07A6                     u3574:	
  2774  07A6  0823               	movf	send_half_byte@byte,w
  2775  07A7  0084               	movwf	4
  2776  07A8  1383               	bcf	3,7	;select IRP bank0
  2777  07A9  1980               	btfsc	0,3
  2778  07AA  2FD5               	goto	L1
  2779  07AB  2FD9               	goto	u3660
  2780  07AC                     l3376:	
  2781  07AC  0823               	movf	send_half_byte@byte,w
  2782  07AD  0084               	movwf	4
  2783  07AE  1383               	bcf	3,7	;select IRP bank0
  2784  07AF  1E00               	btfss	0,4
  2785  07B0  2FB5               	goto	u3600
  2786  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  2787  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  2788  07B3  1605               	bsf	5,4	;volatile
  2789  07B4  2FB8               	goto	u3614
  2790  07B5                     u3600:	
  2791  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  2792  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  2793  07B7  1205               	bcf	5,4	;volatile
  2794  07B8                     u3614:	
  2795  07B8  0823               	movf	send_half_byte@byte,w
  2796  07B9  0084               	movwf	4
  2797  07BA  1383               	bcf	3,7	;select IRP bank0
  2798  07BB  1E80               	btfss	0,5
  2799  07BC  2FC1               	goto	u3620
  2800  07BD  1283               	bcf	3,5	;RP0=0, select bank0
  2801  07BE  1303               	bcf	3,6	;RP1=0, select bank0
  2802  07BF  1685               	bsf	5,5	;volatile
  2803  07C0  2FC4               	goto	u3634
  2804  07C1                     u3620:	
  2805  07C1  1283               	bcf	3,5	;RP0=0, select bank0
  2806  07C2  1303               	bcf	3,6	;RP1=0, select bank0
  2807  07C3  1285               	bcf	5,5	;volatile
  2808  07C4                     u3634:	
  2809  07C4  0823               	movf	send_half_byte@byte,w
  2810  07C5  0084               	movwf	4
  2811  07C6  1383               	bcf	3,7	;select IRP bank0
  2812  07C7  1F00               	btfss	0,6
  2813  07C8  2FCD               	goto	u3640
  2814  07C9  1283               	bcf	3,5	;RP0=0, select bank0
  2815  07CA  1303               	bcf	3,6	;RP1=0, select bank0
  2816  07CB  1705               	bsf	5,6	;volatile
  2817  07CC  2FD0               	goto	u3654
  2818  07CD                     u3640:	
  2819  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  2820  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  2821  07CF  1305               	bcf	5,6	;volatile
  2822  07D0                     u3654:	
  2823  07D0  0823               	movf	send_half_byte@byte,w
  2824  07D1  0084               	movwf	4
  2825  07D2  1383               	bcf	3,7	;select IRP bank0
  2826  07D3  1F80               	btfss	0,7
  2827  07D4  2FD9               	goto	u3660
  2828  07D5                     L1:	
  2829  07D5  1283               	bcf	3,5	;RP0=0, select bank0
  2830  07D6  1303               	bcf	3,6	;RP1=0, select bank0
  2831  07D7  1785               	bsf	5,7	;volatile
  2832  07D8  2FDC               	goto	l3378
  2833  07D9                     u3660:	
  2834  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  2835  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  2836  07DB  1385               	bcf	5,7	;volatile
  2837  07DC                     l3378:	
  2838                           
  2839                           ;packet.h: 17: {RB1 = 0; _delay((unsigned long)((1)*(20000000/4000000.0))); RB1 = 1;};
  2840  07DC  1086               	bcf	6,1	;volatile
  2841  07DD  2FDE               	nop2	;2 cycle nop
  2842  07DE  2FDF               	nop2	;2 cycle nop
  2843  07DF  0000               	nop
  2844  07E0  1283               	bcf	3,5	;RP0=0, select bank0
  2845  07E1  1303               	bcf	3,6	;RP1=0, select bank0
  2846  07E2  1486               	bsf	6,1	;volatile
  2847  07E3  0008               	return
  2848  07E4                     __end_of_send_half_byte:	
  2849                           
  2850                           	psect	text5
  2851  03FE                     __ptext5:	
  2852 ;; *************** function _dump_msg *****************
  2853 ;; Defined at:
  2854 ;;		line 75 in file "msg.h"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;  pmsg            1    wreg     PTR struct .
  2857 ;;		 -> msg(23), 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  pmsg            1   34[BANK1 ] PTR struct .
  2860 ;;		 -> msg(23), 
  2861 ;;  i               1   33[BANK1 ] char 
  2862 ;;  count           1   32[BANK1 ] char 
  2863 ;;  s              32    0[BANK1 ] unsigned char [32]
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2873 ;;      Params:         0       0       0       0       0
  2874 ;;      Locals:         0       0      35       0       0
  2875 ;;      Temps:          0      11       0       0       0
  2876 ;;      Totals:         0      11      35       0       0
  2877 ;;Total ram usage:       46 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    6
  2880 ;; This function calls:
  2881 ;;		_LCDByte
  2882 ;;		_LCDGotoXY
  2883 ;;		_LCDWriteString
  2884 ;;		_sprintf
  2885 ;; This function is called by:
  2886 ;;		_main
  2887 ;; This function uses a non-reentrant model
  2888 ;;
  2889                           
  2890                           
  2891                           ;psect for function _dump_msg
  2892  03FE                     _dump_msg:	
  2893                           
  2894                           ;incstack = 0
  2895                           ; Regs used in _dump_msg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2896                           ;dump_msg@pmsg stored from wreg
  2897  03FE  1683               	bsf	3,5	;RP0=1, select bank1
  2898  03FF  1303               	bcf	3,6	;RP1=0, select bank1
  2899  0400  00C2               	movwf	dump_msg@pmsg^(0+128)
  2900                           
  2901                           ;msg.h: 77: char s[32];
  2902                           ;msg.h: 78: sprintf(s, "M:%d,%d,%d,%d,%d,%d", pmsg->msglen, pmsg->crc, pmsg->from, pmsg-
      +                          >to, pmsg->msgid, pmsg->cmd);
  2903  0401  30A0               	movlw	(low (dump_msg@s| 0))& (0+255)
  2904  0402  1283               	bcf	3,5	;RP0=0, select bank0
  2905  0403  1303               	bcf	3,6	;RP1=0, select bank0
  2906  0404  00AE               	movwf	sprintf@sp
  2907  0405  3000               	movlw	0
  2908  0406  00AF               	movwf	sprintf@sp+1
  2909  0407  3013               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2910  0408  00C6               	movwf	??_dump_msg
  2911  0409  0846               	movf	??_dump_msg,w
  2912  040A  00B0               	movwf	sprintf@f
  2913  040B  1683               	bsf	3,5	;RP0=1, select bank1
  2914  040C  1303               	bcf	3,6	;RP1=0, select bank1
  2915  040D  0842               	movf	dump_msg@pmsg^(0+128),w
  2916  040E  0084               	movwf	4
  2917  040F  1783               	bsf	3,7	;select IRP bank2
  2918  0410  0800               	movf	0,w
  2919  0411  1283               	bcf	3,5	;RP0=0, select bank0
  2920  0412  1303               	bcf	3,6	;RP1=0, select bank0
  2921  0413  00C7               	movwf	??_dump_msg+1
  2922  0414  01C8               	clrf	??_dump_msg+2
  2923  0415  0847               	movf	??_dump_msg+1,w
  2924  0416  00B1               	movwf	?_sprintf+3
  2925  0417  0848               	movf	??_dump_msg+2,w
  2926  0418  00B2               	movwf	?_sprintf+4
  2927  0419  1683               	bsf	3,5	;RP0=1, select bank1
  2928  041A  1303               	bcf	3,6	;RP1=0, select bank1
  2929  041B  0A42               	incf	dump_msg@pmsg^(0+128),w
  2930  041C  0084               	movwf	4
  2931  041D  0800               	movf	0,w
  2932  041E  1283               	bcf	3,5	;RP0=0, select bank0
  2933  041F  1303               	bcf	3,6	;RP1=0, select bank0
  2934  0420  00B3               	movwf	?_sprintf+5
  2935  0421  0A84               	incf	4,f
  2936  0422  0800               	movf	0,w
  2937  0423  00B4               	movwf	?_sprintf+6
  2938  0424  1683               	bsf	3,5	;RP0=1, select bank1
  2939  0425  1303               	bcf	3,6	;RP1=0, select bank1
  2940  0426  0842               	movf	dump_msg@pmsg^(0+128),w
  2941  0427  3E03               	addlw	3
  2942  0428  0084               	movwf	4
  2943  0429  0800               	movf	0,w
  2944  042A  1283               	bcf	3,5	;RP0=0, select bank0
  2945  042B  1303               	bcf	3,6	;RP1=0, select bank0
  2946  042C  00C9               	movwf	??_dump_msg+3
  2947  042D  01CA               	clrf	??_dump_msg+4
  2948  042E  0849               	movf	??_dump_msg+3,w
  2949  042F  00B5               	movwf	?_sprintf+7
  2950  0430  084A               	movf	??_dump_msg+4,w
  2951  0431  00B6               	movwf	?_sprintf+8
  2952  0432  1683               	bsf	3,5	;RP0=1, select bank1
  2953  0433  1303               	bcf	3,6	;RP1=0, select bank1
  2954  0434  0842               	movf	dump_msg@pmsg^(0+128),w
  2955  0435  3E04               	addlw	4
  2956  0436  0084               	movwf	4
  2957  0437  0800               	movf	0,w
  2958  0438  1283               	bcf	3,5	;RP0=0, select bank0
  2959  0439  1303               	bcf	3,6	;RP1=0, select bank0
  2960  043A  00CB               	movwf	??_dump_msg+5
  2961  043B  01CC               	clrf	??_dump_msg+6
  2962  043C  084B               	movf	??_dump_msg+5,w
  2963  043D  00B7               	movwf	?_sprintf+9
  2964  043E  084C               	movf	??_dump_msg+6,w
  2965  043F  00B8               	movwf	?_sprintf+10
  2966  0440  1683               	bsf	3,5	;RP0=1, select bank1
  2967  0441  1303               	bcf	3,6	;RP1=0, select bank1
  2968  0442  0842               	movf	dump_msg@pmsg^(0+128),w
  2969  0443  3E05               	addlw	5
  2970  0444  0084               	movwf	4
  2971  0445  0800               	movf	0,w
  2972  0446  1283               	bcf	3,5	;RP0=0, select bank0
  2973  0447  1303               	bcf	3,6	;RP1=0, select bank0
  2974  0448  00CD               	movwf	??_dump_msg+7
  2975  0449  01CE               	clrf	??_dump_msg+8
  2976  044A  084D               	movf	??_dump_msg+7,w
  2977  044B  00B9               	movwf	?_sprintf+11
  2978  044C  084E               	movf	??_dump_msg+8,w
  2979  044D  00BA               	movwf	?_sprintf+12
  2980  044E  1683               	bsf	3,5	;RP0=1, select bank1
  2981  044F  1303               	bcf	3,6	;RP1=0, select bank1
  2982  0450  0842               	movf	dump_msg@pmsg^(0+128),w
  2983  0451  3E06               	addlw	6
  2984  0452  0084               	movwf	4
  2985  0453  0800               	movf	0,w
  2986  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2987  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2988  0456  00CF               	movwf	??_dump_msg+9
  2989  0457  01D0               	clrf	??_dump_msg+10
  2990  0458  084F               	movf	??_dump_msg+9,w
  2991  0459  00BB               	movwf	?_sprintf+13
  2992  045A  0850               	movf	??_dump_msg+10,w
  2993  045B  00BC               	movwf	?_sprintf+14
  2994  045C  120A  118A  2327  120A  118A  	fcall	_sprintf
  2995                           
  2996                           ;msg.h: 79: {{ LCDGotoXY(0,1); int8_t count = LCDWriteString(""); for(int8_t i = count +
      +                           0; i < 16; i++) { (LCDByte(' ',1)); } };}; {{ LCDGotoXY(0,1); LCDWriteString(s);};};
  2997  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2998  0462  1303               	bcf	3,6	;RP1=0, select bank0
  2999  0463  01AC               	clrf	LCDGotoXY@y
  3000  0464  0AAC               	incf	LCDGotoXY@y,f
  3001  0465  3000               	movlw	0
  3002  0466  120A  158A  22C9  120A  118A  	fcall	_LCDGotoXY
  3003  046B  305C               	movlw	(low (((STR_22+4)-__stringbase)| (0+32768)))& (0+255)
  3004  046C  1283               	bcf	3,5	;RP0=0, select bank0
  3005  046D  1303               	bcf	3,6	;RP1=0, select bank0
  3006  046E  00AC               	movwf	LCDWriteString@msg
  3007  046F  3080               	movlw	128
  3008  0470  00AD               	movwf	LCDWriteString@msg+1
  3009  0471  120A  158A  26CE  120A  118A  	fcall	_LCDWriteString
  3010  0476  1283               	bcf	3,5	;RP0=0, select bank0
  3011  0477  1303               	bcf	3,6	;RP1=0, select bank0
  3012  0478  00C6               	movwf	??_dump_msg
  3013  0479  0846               	movf	??_dump_msg,w
  3014  047A  1683               	bsf	3,5	;RP0=1, select bank1
  3015  047B  1303               	bcf	3,6	;RP1=0, select bank1
  3016  047C  00C0               	movwf	dump_msg@count^(0+128)
  3017  047D  0840               	movf	dump_msg@count^(0+128),w
  3018  047E  1283               	bcf	3,5	;RP0=0, select bank0
  3019  047F  1303               	bcf	3,6	;RP1=0, select bank0
  3020  0480  00C6               	movwf	??_dump_msg
  3021  0481  0846               	movf	??_dump_msg,w
  3022  0482  1683               	bsf	3,5	;RP0=1, select bank1
  3023  0483  1303               	bcf	3,6	;RP1=0, select bank1
  3024  0484  00C1               	movwf	dump_msg@i^(0+128)
  3025  0485  0841               	movf	dump_msg@i^(0+128),w
  3026  0486  3A80               	xorlw	128
  3027  0487  3E70               	addlw	-144
  3028  0488  1803               	btfsc	3,0
  3029  0489  2CA1               	goto	l3868
  3030  048A                     l3862:	
  3031  048A  1283               	bcf	3,5	;RP0=0, select bank0
  3032  048B  1303               	bcf	3,6	;RP1=0, select bank0
  3033  048C  01A5               	clrf	LCDByte@isdata
  3034  048D  0AA5               	incf	LCDByte@isdata,f
  3035  048E  3020               	movlw	32
  3036  048F  120A  158A  25BE  120A  118A  	fcall	_LCDByte
  3037  0494  3001               	movlw	1
  3038  0495  1283               	bcf	3,5	;RP0=0, select bank0
  3039  0496  1303               	bcf	3,6	;RP1=0, select bank0
  3040  0497  00C6               	movwf	??_dump_msg
  3041  0498  0846               	movf	??_dump_msg,w
  3042  0499  1683               	bsf	3,5	;RP0=1, select bank1
  3043  049A  1303               	bcf	3,6	;RP1=0, select bank1
  3044  049B  07C1               	addwf	dump_msg@i^(0+128),f
  3045  049C  0841               	movf	dump_msg@i^(0+128),w
  3046  049D  3A80               	xorlw	128
  3047  049E  3E70               	addlw	-144
  3048  049F  1C03               	skipc
  3049  04A0  2C8A               	goto	l3862
  3050  04A1                     l3868:	
  3051  04A1  1283               	bcf	3,5	;RP0=0, select bank0
  3052  04A2  1303               	bcf	3,6	;RP1=0, select bank0
  3053  04A3  01AC               	clrf	LCDGotoXY@y
  3054  04A4  0AAC               	incf	LCDGotoXY@y,f
  3055  04A5  3000               	movlw	0
  3056  04A6  120A  158A  22C9  120A  118A  	fcall	_LCDGotoXY
  3057  04AB  30A0               	movlw	(low (dump_msg@s| 0))& (0+255)
  3058  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  3059  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  3060  04AE  00AC               	movwf	LCDWriteString@msg
  3061  04AF  3000               	movlw	0
  3062  04B0  00AD               	movwf	LCDWriteString@msg+1
  3063  04B1  120A  158A  26CE   	fcall	_LCDWriteString
  3064  04B4  0008               	return
  3065  04B5                     __end_of_dump_msg:	
  3066                           
  3067                           	psect	text6
  3068  0327                     __ptext6:	
  3069 ;; *************** function _sprintf *****************
  3070 ;; Defined at:
  3071 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;  sp              2   14[BANK0 ] PTR unsigned char 
  3074 ;;		 -> dump_conn@s(32), dump_msg@s(32), sdebug(32), 
  3075 ;;  f               1   16[BANK0 ] PTR const unsigned char 
  3076 ;;		 -> STR_13(14), STR_11(20), STR_9(15), STR_7(12), 
  3077 ;;		 -> STR_5(9), STR_3(6), STR_1(3), 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  tmpval          4    0        struct .
  3080 ;;  val             2   35[BANK0 ] unsigned int 
  3081 ;;  cp              2    0        PTR const unsigned char 
  3082 ;;  len             2    0        unsigned int 
  3083 ;;  c               1   37[BANK0 ] char 
  3084 ;;  prec            1   34[BANK0 ] char 
  3085 ;;  flag            1   33[BANK0 ] unsigned char 
  3086 ;;  ap              1   32[BANK0 ] PTR void [1]
  3087 ;;		 -> ?_sprintf(2), 
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  2   14[BANK0 ] int 
  3090 ;; Registers used:
  3091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3097 ;;      Params:         0      15       0       0       0
  3098 ;;      Locals:         0       6       0       0       0
  3099 ;;      Temps:          0       3       0       0       0
  3100 ;;      Totals:         0      24       0       0       0
  3101 ;;Total ram usage:       24 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:    4
  3104 ;; This function calls:
  3105 ;;		___lwdiv
  3106 ;;		___lwmod
  3107 ;; This function is called by:
  3108 ;;		_dump_msg
  3109 ;;		_debug_1
  3110 ;;		_debug_2
  3111 ;;		_debug_3
  3112 ;;		_debug_4
  3113 ;;		_debug_5
  3114 ;;		_dump_conn
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           
  3119                           ;psect for function _sprintf
  3120  0327                     _sprintf:	
  3121                           
  3122                           ;doprnt.c: 494: va_list ap;
  3123                           ;doprnt.c: 499: signed char c;
  3124                           ;doprnt.c: 506: signed char prec;
  3125                           ;doprnt.c: 508: unsigned char flag;
  3126                           ;doprnt.c: 523: union {
  3127                           ;doprnt.c: 524: unsigned long vd;
  3128                           ;doprnt.c: 525: double integ;
  3129                           ;doprnt.c: 526: } tmpval;
  3130                           ;doprnt.c: 528: unsigned int val;
  3131                           ;doprnt.c: 529: unsigned len;
  3132                           ;doprnt.c: 530: const char * cp;
  3133                           ;doprnt.c: 533: *ap = __va_start();
  3134                           
  3135                           ;incstack = 0
  3136                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3137  0327  3031               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  3138  0328  1283               	bcf	3,5	;RP0=0, select bank0
  3139  0329  1303               	bcf	3,6	;RP1=0, select bank0
  3140  032A  00BD               	movwf	??_sprintf
  3141  032B  083D               	movf	??_sprintf,w
  3142  032C  00C0               	movwf	sprintf@ap
  3143  032D                     l3680:	
  3144                           ;doprnt.c: 536: while(c = *f++) {
  3145                           
  3146  032D  3001               	movlw	1
  3147  032E  07B0               	addwf	sprintf@f,f
  3148  032F  30FF               	movlw	-1
  3149  0330  0730               	addwf	sprintf@f,w
  3150  0331  0084               	movwf	4
  3151  0332  120A  118A  260A  120A  118A  	fcall	stringdir
  3152  0337  00BD               	movwf	??_sprintf
  3153  0338  083D               	movf	??_sprintf,w
  3154  0339  00C5               	movwf	sprintf@c
  3155  033A  0845               	movf	sprintf@c,w
  3156  033B  1903               	btfsc	3,2
  3157  033C  2BF7               	goto	l3682
  3158                           
  3159                           ;doprnt.c: 538: if(c != '%')
  3160  033D  3025               	movlw	37
  3161  033E  0645               	xorwf	sprintf@c,w
  3162  033F  1903               	btfsc	3,2
  3163  0340  2B4D               	goto	l3636
  3164                           
  3165                           ;doprnt.c: 540: {
  3166                           ;doprnt.c: 541: ((*sp++ = (c)));
  3167  0341  082E               	movf	sprintf@sp,w
  3168  0342  0084               	movwf	4
  3169  0343  1383               	bcf	3,7
  3170  0344  182F               	btfsc	sprintf@sp+1,0
  3171  0345  1783               	bsf	3,7
  3172  0346  0845               	movf	sprintf@c,w
  3173  0347  0080               	movwf	0
  3174  0348  3001               	movlw	1
  3175  0349  07AE               	addwf	sprintf@sp,f
  3176  034A  1803               	skipnc
  3177  034B  0AAF               	incf	sprintf@sp+1,f
  3178                           
  3179                           ;doprnt.c: 542: continue;
  3180  034C  2B2D               	goto	l3680
  3181  034D                     l3636:	
  3182                           
  3183                           ;doprnt.c: 543: }
  3184                           ;doprnt.c: 548: flag = 0;
  3185  034D  01C1               	clrf	sprintf@flag
  3186                           
  3187                           ;doprnt.c: 822: }
  3188                           
  3189                           ;doprnt.c: 813: continue;
  3190                           
  3191                           ;doprnt.c: 802: default:
  3192                           
  3193                           ;doprnt.c: 698: case 'i':
  3194                           ;doprnt.c: 699: break;
  3195                           
  3196                           ;doprnt.c: 697: case 'd':
  3197                           
  3198                           ;doprnt.c: 638: goto alldone;
  3199                           
  3200                           ;doprnt.c: 637: case 0:
  3201                           
  3202                           ;doprnt.c: 635: switch(c = *f++) {
  3203  034E  3001               	movlw	1
  3204  034F  07B0               	addwf	sprintf@f,f
  3205  0350  30FF               	movlw	-1
  3206  0351  0730               	addwf	sprintf@f,w
  3207  0352  0084               	movwf	4
  3208  0353  120A  118A  260A  120A  118A  	fcall	stringdir
  3209  0358  00C5               	movwf	sprintf@c
  3210                           
  3211                           ; Switch size 1, requested type "space"
  3212                           ; Number of cases is 3, Range of values is 0 to 105
  3213                           ; switch strategies available:
  3214                           ; Name         Instructions Cycles
  3215                           ; simple_byte           10     6 (average)
  3216                           ; jumptable            260     6 (fixed)
  3217                           ;	Chosen strategy is simple_byte
  3218  0359  3A00               	xorlw	0	; case 0
  3219  035A  1903               	skipnz
  3220  035B  2BF7               	goto	l3682
  3221  035C  3A64               	xorlw	100	; case 100
  3222  035D  1903               	skipnz
  3223  035E  2B63               	goto	l3642
  3224  035F  3A0D               	xorlw	13	; case 105
  3225  0360  1903               	skipnz
  3226  0361  2B63               	goto	l3642
  3227  0362  2B2D               	goto	l3680
  3228  0363                     l3642:	
  3229                           
  3230                           ;doprnt.c: 1253: {
  3231                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3232  0363  0840               	movf	sprintf@ap,w
  3233  0364  0084               	movwf	4
  3234  0365  1383               	bcf	3,7	;select IRP bank0
  3235  0366  0800               	movf	0,w
  3236  0367  00C3               	movwf	sprintf@val
  3237  0368  0A84               	incf	4,f
  3238  0369  0800               	movf	0,w
  3239  036A  00C4               	movwf	sprintf@val+1
  3240  036B  3002               	movlw	2
  3241  036C  00BD               	movwf	??_sprintf
  3242  036D  083D               	movf	??_sprintf,w
  3243  036E  07C0               	addwf	sprintf@ap,f
  3244                           
  3245                           ;doprnt.c: 1261: if((int)val < 0) {
  3246  036F  1FC4               	btfss	sprintf@val+1,7
  3247  0370  2B7A               	goto	l3652
  3248                           
  3249                           ;doprnt.c: 1262: flag |= 0x03;
  3250  0371  3003               	movlw	3
  3251  0372  00BD               	movwf	??_sprintf
  3252  0373  083D               	movf	??_sprintf,w
  3253  0374  04C1               	iorwf	sprintf@flag,f
  3254                           
  3255                           ;doprnt.c: 1263: val = -val;
  3256  0375  09C3               	comf	sprintf@val,f
  3257  0376  09C4               	comf	sprintf@val+1,f
  3258  0377  0AC3               	incf	sprintf@val,f
  3259  0378  1903               	skipnz
  3260  0379  0AC4               	incf	sprintf@val+1,f
  3261  037A                     l3652:	
  3262                           
  3263                           ;doprnt.c: 1264: }
  3264                           ;doprnt.c: 1266: }
  3265                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3266  037A  01C5               	clrf	sprintf@c
  3267  037B  0AC5               	incf	sprintf@c,f
  3268  037C  3005               	movlw	5
  3269  037D  0645               	xorwf	sprintf@c,w
  3270  037E  1903               	btfsc	3,2
  3271  037F  2BA1               	goto	l3664
  3272  0380                     l3658:	
  3273                           
  3274                           ;doprnt.c: 1306: if(val < dpowers[c])
  3275  0380  0845               	movf	sprintf@c,w
  3276  0381  00BD               	movwf	??_sprintf
  3277  0382  073D               	addwf	??_sprintf,w
  3278  0383  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3279  0384  0084               	movwf	4
  3280  0385  120A  118A  260A  120A  118A  	fcall	stringdir
  3281  038A  00BE               	movwf	??_sprintf+1
  3282  038B  120A  118A  260A  120A  118A  	fcall	stringdir
  3283  0390  00BF               	movwf	??_sprintf+2
  3284  0391  083F               	movf	??_sprintf+2,w
  3285  0392  0244               	subwf	sprintf@val+1,w
  3286  0393  1D03               	skipz
  3287  0394  2B97               	goto	u4165
  3288  0395  083E               	movf	??_sprintf+1,w
  3289  0396  0243               	subwf	sprintf@val,w
  3290  0397                     u4165:	
  3291  0397  1C03               	btfss	3,0
  3292  0398  2BA1               	goto	l3664
  3293                           
  3294                           ;doprnt.c: 1307: break;
  3295  0399  3001               	movlw	1
  3296  039A  00BD               	movwf	??_sprintf
  3297  039B  083D               	movf	??_sprintf,w
  3298  039C  07C5               	addwf	sprintf@c,f
  3299  039D  3005               	movlw	5
  3300  039E  0645               	xorwf	sprintf@c,w
  3301  039F  1D03               	btfss	3,2
  3302  03A0  2B80               	goto	l3658
  3303  03A1                     l3664:	
  3304                           
  3305                           ;doprnt.c: 1422: {
  3306                           ;doprnt.c: 1438: if(flag & 0x03)
  3307  03A1  0841               	movf	sprintf@flag,w
  3308  03A2  3903               	andlw	3
  3309  03A3  1903               	btfsc	3,2
  3310  03A4  2BB0               	goto	l3670
  3311                           
  3312                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3313  03A5  082E               	movf	sprintf@sp,w
  3314  03A6  0084               	movwf	4
  3315  03A7  1383               	bcf	3,7
  3316  03A8  182F               	btfsc	sprintf@sp+1,0
  3317  03A9  1783               	bsf	3,7
  3318  03AA  302D               	movlw	45
  3319  03AB  0080               	movwf	0
  3320  03AC  3001               	movlw	1
  3321  03AD  07AE               	addwf	sprintf@sp,f
  3322  03AE  1803               	skipnc
  3323  03AF  0AAF               	incf	sprintf@sp+1,f
  3324  03B0                     l3670:	
  3325                           
  3326                           ;doprnt.c: 1469: }
  3327                           ;doprnt.c: 1472: prec = c;
  3328  03B0  0845               	movf	sprintf@c,w
  3329  03B1  00BD               	movwf	??_sprintf
  3330  03B2  083D               	movf	??_sprintf,w
  3331  03B3  00C2               	movwf	sprintf@prec
  3332  03B4                     l3678:	
  3333                           ;doprnt.c: 1474: while(prec--) {
  3334                           
  3335  03B4  30FF               	movlw	255
  3336  03B5  00BD               	movwf	??_sprintf
  3337  03B6  083D               	movf	??_sprintf,w
  3338  03B7  07C2               	addwf	sprintf@prec,f
  3339  03B8  0A42               	incf	sprintf@prec,w
  3340  03B9  1903               	btfsc	3,2
  3341  03BA  2B2D               	goto	l3680
  3342                           
  3343                           ;doprnt.c: 1478: {
  3344                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3345  03BB  300A               	movlw	10
  3346  03BC  00A8               	movwf	___lwmod@divisor
  3347  03BD  3000               	movlw	0
  3348  03BE  00A9               	movwf	___lwmod@divisor+1
  3349  03BF  0842               	movf	sprintf@prec,w
  3350  03C0  00BD               	movwf	??_sprintf
  3351  03C1  073D               	addwf	??_sprintf,w
  3352  03C2  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3353  03C3  0084               	movwf	4
  3354  03C4  120A  118A  260A  120A  118A  	fcall	stringdir
  3355  03C9  00A0               	movwf	___lwdiv@divisor
  3356  03CA  120A  118A  260A  120A  118A  	fcall	stringdir
  3357  03CF  00A1               	movwf	___lwdiv@divisor+1
  3358  03D0  0844               	movf	sprintf@val+1,w
  3359  03D1  00A3               	movwf	___lwdiv@dividend+1
  3360  03D2  0843               	movf	sprintf@val,w
  3361  03D3  00A2               	movwf	___lwdiv@dividend
  3362  03D4  120A  158A  2448  120A  118A  	fcall	___lwdiv
  3363  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  3364  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  3365  03DB  0821               	movf	?___lwdiv+1,w
  3366  03DC  00AB               	movwf	___lwmod@dividend+1
  3367  03DD  0820               	movf	?___lwdiv,w
  3368  03DE  00AA               	movwf	___lwmod@dividend
  3369  03DF  120A  158A  23AA  120A  118A  	fcall	___lwmod
  3370  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  3371  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  3372  03E6  0828               	movf	?___lwmod,w
  3373  03E7  3E30               	addlw	48
  3374  03E8  00BE               	movwf	??_sprintf+1
  3375  03E9  083E               	movf	??_sprintf+1,w
  3376  03EA  00C5               	movwf	sprintf@c
  3377                           
  3378                           ;doprnt.c: 1523: }
  3379                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3380  03EB  082E               	movf	sprintf@sp,w
  3381  03EC  0084               	movwf	4
  3382  03ED  1383               	bcf	3,7
  3383  03EE  182F               	btfsc	sprintf@sp+1,0
  3384  03EF  1783               	bsf	3,7
  3385  03F0  0845               	movf	sprintf@c,w
  3386  03F1  0080               	movwf	0
  3387  03F2  3001               	movlw	1
  3388  03F3  07AE               	addwf	sprintf@sp,f
  3389  03F4  1803               	skipnc
  3390  03F5  0AAF               	incf	sprintf@sp+1,f
  3391  03F6  2BB4               	goto	l3678
  3392  03F7                     l3682:	
  3393                           ;doprnt.c: 1525: }
  3394                           ;doprnt.c: 1533: }
  3395                           ;doprnt.c: 1535: alldone:
  3396                           
  3397                           
  3398                           ;doprnt.c: 1538: *sp = 0;
  3399  03F7  082E               	movf	sprintf@sp,w
  3400  03F8  0084               	movwf	4
  3401  03F9  1783               	bsf	3,7
  3402  03FA  1C2F               	btfss	sprintf@sp+1,0
  3403  03FB  1383               	bcf	3,7
  3404  03FC  0180               	clrf	0
  3405  03FD  0008               	return
  3406  03FE                     __end_of_sprintf:	
  3407                           ;doprnt.c: 1540: return 0;
  3408                           ;	Return value of _sprintf is never used
  3409                           
  3410                           
  3411                           	psect	text7
  3412  0BAA                     __ptext7:	
  3413 ;; *************** function ___lwmod *****************
  3414 ;; Defined at:
  3415 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;  divisor         2    8[BANK0 ] unsigned int 
  3418 ;;  dividend        2   10[BANK0 ] unsigned int 
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  counter         1   13[BANK0 ] unsigned char 
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  2    8[BANK0 ] unsigned int 
  3423 ;; Registers used:
  3424 ;;		wreg, status,2, status,0
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3430 ;;      Params:         0       4       0       0       0
  3431 ;;      Locals:         0       1       0       0       0
  3432 ;;      Temps:          0       1       0       0       0
  3433 ;;      Totals:         0       6       0       0       0
  3434 ;;Total ram usage:        6 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    3
  3437 ;; This function calls:
  3438 ;;		Nothing
  3439 ;; This function is called by:
  3440 ;;		_sprintf
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           
  3445                           ;psect for function ___lwmod
  3446  0BAA                     ___lwmod:	
  3447                           
  3448                           ;incstack = 0
  3449                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3450  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  3451  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  3452  0BAC  0828               	movf	___lwmod@divisor,w
  3453  0BAD  0429               	iorwf	___lwmod@divisor+1,w
  3454  0BAE  1903               	btfsc	3,2
  3455  0BAF  2BD9               	goto	l3616
  3456  0BB0  01AD               	clrf	___lwmod@counter
  3457  0BB1  0AAD               	incf	___lwmod@counter,f
  3458  0BB2                     l3606:	
  3459  0BB2  1BA9               	btfsc	___lwmod@divisor+1,7
  3460  0BB3  2BC0               	goto	l3608
  3461  0BB4  3001               	movlw	1
  3462  0BB5                     u4075:	
  3463  0BB5  1003               	clrc
  3464  0BB6  0DA8               	rlf	___lwmod@divisor,f
  3465  0BB7  0DA9               	rlf	___lwmod@divisor+1,f
  3466  0BB8  3EFF               	addlw	-1
  3467  0BB9  1D03               	skipz
  3468  0BBA  2BB5               	goto	u4075
  3469  0BBB  3001               	movlw	1
  3470  0BBC  00AC               	movwf	??___lwmod
  3471  0BBD  082C               	movf	??___lwmod,w
  3472  0BBE  07AD               	addwf	___lwmod@counter,f
  3473  0BBF  2BB2               	goto	l3606
  3474  0BC0                     l3608:	
  3475  0BC0  0829               	movf	___lwmod@divisor+1,w
  3476  0BC1  022B               	subwf	___lwmod@dividend+1,w
  3477  0BC2  1D03               	skipz
  3478  0BC3  2BC6               	goto	u4095
  3479  0BC4  0828               	movf	___lwmod@divisor,w
  3480  0BC5  022A               	subwf	___lwmod@dividend,w
  3481  0BC6                     u4095:	
  3482  0BC6  1C03               	skipc
  3483  0BC7  2BCE               	goto	l3612
  3484  0BC8  0828               	movf	___lwmod@divisor,w
  3485  0BC9  02AA               	subwf	___lwmod@dividend,f
  3486  0BCA  0829               	movf	___lwmod@divisor+1,w
  3487  0BCB  1C03               	skipc
  3488  0BCC  03AB               	decf	___lwmod@dividend+1,f
  3489  0BCD  02AB               	subwf	___lwmod@dividend+1,f
  3490  0BCE                     l3612:	
  3491  0BCE  3001               	movlw	1
  3492  0BCF                     u4105:	
  3493  0BCF  1003               	clrc
  3494  0BD0  0CA9               	rrf	___lwmod@divisor+1,f
  3495  0BD1  0CA8               	rrf	___lwmod@divisor,f
  3496  0BD2  3EFF               	addlw	-1
  3497  0BD3  1D03               	skipz
  3498  0BD4  2BCF               	goto	u4105
  3499  0BD5  3001               	movlw	1
  3500  0BD6  02AD               	subwf	___lwmod@counter,f
  3501  0BD7  1D03               	btfss	3,2
  3502  0BD8  2BC0               	goto	l3608
  3503  0BD9                     l3616:	
  3504  0BD9  082B               	movf	___lwmod@dividend+1,w
  3505  0BDA  00A9               	movwf	?___lwmod+1
  3506  0BDB  082A               	movf	___lwmod@dividend,w
  3507  0BDC  00A8               	movwf	?___lwmod
  3508  0BDD  0008               	return
  3509  0BDE                     __end_of___lwmod:	
  3510                           
  3511                           	psect	text8
  3512  0C48                     __ptext8:	
  3513 ;; *************** function ___lwdiv *****************
  3514 ;; Defined at:
  3515 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;  divisor         2    0[BANK0 ] unsigned int 
  3518 ;;  dividend        2    2[BANK0 ] unsigned int 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  quotient        2    6[BANK0 ] unsigned int 
  3521 ;;  counter         1    5[BANK0 ] unsigned char 
  3522 ;; Return value:  Size  Location     Type
  3523 ;;                  2    0[BANK0 ] unsigned int 
  3524 ;; Registers used:
  3525 ;;		wreg, status,2, status,0
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3531 ;;      Params:         0       4       0       0       0
  3532 ;;      Locals:         0       3       0       0       0
  3533 ;;      Temps:          0       1       0       0       0
  3534 ;;      Totals:         0       8       0       0       0
  3535 ;;Total ram usage:        8 bytes
  3536 ;; Hardware stack levels used:    1
  3537 ;; Hardware stack levels required when called:    3
  3538 ;; This function calls:
  3539 ;;		Nothing
  3540 ;; This function is called by:
  3541 ;;		_sprintf
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           
  3546                           ;psect for function ___lwdiv
  3547  0C48                     ___lwdiv:	
  3548                           
  3549                           ;incstack = 0
  3550                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3551  0C48  1283               	bcf	3,5	;RP0=0, select bank0
  3552  0C49  1303               	bcf	3,6	;RP1=0, select bank0
  3553  0C4A  01A6               	clrf	___lwdiv@quotient
  3554  0C4B  01A7               	clrf	___lwdiv@quotient+1
  3555  0C4C  0820               	movf	___lwdiv@divisor,w
  3556  0C4D  0421               	iorwf	___lwdiv@divisor+1,w
  3557  0C4E  1903               	btfsc	3,2
  3558  0C4F  2C81               	goto	l3594
  3559  0C50  01A5               	clrf	___lwdiv@counter
  3560  0C51  0AA5               	incf	___lwdiv@counter,f
  3561  0C52                     l3582:	
  3562  0C52  1BA1               	btfsc	___lwdiv@divisor+1,7
  3563  0C53  2C60               	goto	l3584
  3564  0C54  3001               	movlw	1
  3565  0C55                     u4005:	
  3566  0C55  1003               	clrc
  3567  0C56  0DA0               	rlf	___lwdiv@divisor,f
  3568  0C57  0DA1               	rlf	___lwdiv@divisor+1,f
  3569  0C58  3EFF               	addlw	-1
  3570  0C59  1D03               	skipz
  3571  0C5A  2C55               	goto	u4005
  3572  0C5B  3001               	movlw	1
  3573  0C5C  00A4               	movwf	??___lwdiv
  3574  0C5D  0824               	movf	??___lwdiv,w
  3575  0C5E  07A5               	addwf	___lwdiv@counter,f
  3576  0C5F  2C52               	goto	l3582
  3577  0C60                     l3584:	
  3578  0C60  3001               	movlw	1
  3579  0C61                     u4025:	
  3580  0C61  1003               	clrc
  3581  0C62  0DA6               	rlf	___lwdiv@quotient,f
  3582  0C63  0DA7               	rlf	___lwdiv@quotient+1,f
  3583  0C64  3EFF               	addlw	-1
  3584  0C65  1D03               	skipz
  3585  0C66  2C61               	goto	u4025
  3586  0C67  0821               	movf	___lwdiv@divisor+1,w
  3587  0C68  0223               	subwf	___lwdiv@dividend+1,w
  3588  0C69  1D03               	skipz
  3589  0C6A  2C6D               	goto	u4035
  3590  0C6B  0820               	movf	___lwdiv@divisor,w
  3591  0C6C  0222               	subwf	___lwdiv@dividend,w
  3592  0C6D                     u4035:	
  3593  0C6D  1C03               	skipc
  3594  0C6E  2C76               	goto	l3590
  3595  0C6F  0820               	movf	___lwdiv@divisor,w
  3596  0C70  02A2               	subwf	___lwdiv@dividend,f
  3597  0C71  0821               	movf	___lwdiv@divisor+1,w
  3598  0C72  1C03               	skipc
  3599  0C73  03A3               	decf	___lwdiv@dividend+1,f
  3600  0C74  02A3               	subwf	___lwdiv@dividend+1,f
  3601  0C75  1426               	bsf	___lwdiv@quotient,0
  3602  0C76                     l3590:	
  3603  0C76  3001               	movlw	1
  3604  0C77                     u4045:	
  3605  0C77  1003               	clrc
  3606  0C78  0CA1               	rrf	___lwdiv@divisor+1,f
  3607  0C79  0CA0               	rrf	___lwdiv@divisor,f
  3608  0C7A  3EFF               	addlw	-1
  3609  0C7B  1D03               	skipz
  3610  0C7C  2C77               	goto	u4045
  3611  0C7D  3001               	movlw	1
  3612  0C7E  02A5               	subwf	___lwdiv@counter,f
  3613  0C7F  1D03               	btfss	3,2
  3614  0C80  2C60               	goto	l3584
  3615  0C81                     l3594:	
  3616  0C81  0827               	movf	___lwdiv@quotient+1,w
  3617  0C82  00A1               	movwf	?___lwdiv+1
  3618  0C83  0826               	movf	___lwdiv@quotient,w
  3619  0C84  00A0               	movwf	?___lwdiv
  3620  0C85  0008               	return
  3621  0C86                     __end_of___lwdiv:	
  3622                           
  3623                           	psect	text9
  3624  0687                     __ptext9:	
  3625 ;; *************** function _compose *****************
  3626 ;; Defined at:
  3627 ;;		line 57 in file "msg.h"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;  pmsg            2   11[BANK0 ] PTR struct .
  3630 ;;		 -> msg(23), handle_REG_ID_RQT_CMD@msgo(23), 
  3631 ;;  from            1   13[BANK0 ] unsigned char 
  3632 ;;  to              1   14[BANK0 ] unsigned char 
  3633 ;;  msgid           1   15[BANK0 ] unsigned char 
  3634 ;;  cmd             1   16[BANK0 ] unsigned char 
  3635 ;;  data            2   17[BANK0 ] PTR unsigned char 
  3636 ;;		 -> STR_15(4), create_REG_ID_RSP_CMD@rsp(1), 
  3637 ;;  datalen         1   19[BANK0 ] unsigned char 
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;  len             2   22[BANK0 ] unsigned int 
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  1    wreg      void 
  3642 ;; Registers used:
  3643 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3649 ;;      Params:         0       9       0       0       0
  3650 ;;      Locals:         0       2       0       0       0
  3651 ;;      Temps:          0       2       0       0       0
  3652 ;;      Totals:         0      13       0       0       0
  3653 ;;Total ram usage:       13 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    4
  3656 ;; This function calls:
  3657 ;;		_crc_calculate
  3658 ;;		_memcpy
  3659 ;; This function is called by:
  3660 ;;		_main
  3661 ;;		_create_REG_ID_RQT_CMD
  3662 ;;		_create_REG_ID_RSP_CMD
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           
  3667                           ;psect for function _compose
  3668  0687                     _compose:	
  3669                           
  3670                           ;msg.h: 65: register size_t len = datalen;
  3671                           
  3672                           ;incstack = 0
  3673                           ; Regs used in _compose: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3674  0687  1283               	bcf	3,5	;RP0=0, select bank0
  3675  0688  1303               	bcf	3,6	;RP1=0, select bank0
  3676  0689  0833               	movf	compose@datalen,w
  3677  068A  00B4               	movwf	??_compose
  3678  068B  01B5               	clrf	??_compose+1
  3679  068C  0834               	movf	??_compose,w
  3680  068D  00B6               	movwf	compose@len
  3681  068E  0835               	movf	??_compose+1,w
  3682  068F  00B7               	movwf	compose@len+1
  3683                           
  3684                           ;msg.h: 66: pmsg->from = from;
  3685  0690  3003               	movlw	3
  3686  0691  072B               	addwf	compose@pmsg,w
  3687  0692  00B4               	movwf	??_compose
  3688  0693  082C               	movf	compose@pmsg+1,w
  3689  0694  1803               	skipnc
  3690  0695  3E01               	addlw	1
  3691  0696  00B5               	movwf	??_compose+1
  3692  0697  0834               	movf	??_compose,w
  3693  0698  0084               	movwf	4
  3694  0699  1383               	bcf	3,7
  3695  069A  1835               	btfsc	??_compose+1,0
  3696  069B  1783               	bsf	3,7
  3697  069C  082D               	movf	compose@from,w
  3698  069D  0080               	movwf	0
  3699                           
  3700                           ;msg.h: 67: pmsg->to = to;
  3701  069E  3004               	movlw	4
  3702  069F  072B               	addwf	compose@pmsg,w
  3703  06A0  00B4               	movwf	??_compose
  3704  06A1  082C               	movf	compose@pmsg+1,w
  3705  06A2  1803               	skipnc
  3706  06A3  3E01               	addlw	1
  3707  06A4  00B5               	movwf	??_compose+1
  3708  06A5  0834               	movf	??_compose,w
  3709  06A6  0084               	movwf	4
  3710  06A7  1383               	bcf	3,7
  3711  06A8  1835               	btfsc	??_compose+1,0
  3712  06A9  1783               	bsf	3,7
  3713  06AA  082E               	movf	compose@to,w
  3714  06AB  0080               	movwf	0
  3715                           
  3716                           ;msg.h: 68: pmsg->msgid = msgid;
  3717  06AC  3005               	movlw	5
  3718  06AD  072B               	addwf	compose@pmsg,w
  3719  06AE  00B4               	movwf	??_compose
  3720  06AF  082C               	movf	compose@pmsg+1,w
  3721  06B0  1803               	skipnc
  3722  06B1  3E01               	addlw	1
  3723  06B2  00B5               	movwf	??_compose+1
  3724  06B3  0834               	movf	??_compose,w
  3725  06B4  0084               	movwf	4
  3726  06B5  1383               	bcf	3,7
  3727  06B6  1835               	btfsc	??_compose+1,0
  3728  06B7  1783               	bsf	3,7
  3729  06B8  082F               	movf	compose@msgid,w
  3730  06B9  0080               	movwf	0
  3731                           
  3732                           ;msg.h: 69: pmsg->cmd = cmd;
  3733  06BA  3006               	movlw	6
  3734  06BB  072B               	addwf	compose@pmsg,w
  3735  06BC  00B4               	movwf	??_compose
  3736  06BD  082C               	movf	compose@pmsg+1,w
  3737  06BE  1803               	skipnc
  3738  06BF  3E01               	addlw	1
  3739  06C0  00B5               	movwf	??_compose+1
  3740  06C1  0834               	movf	??_compose,w
  3741  06C2  0084               	movwf	4
  3742  06C3  1383               	bcf	3,7
  3743  06C4  1835               	btfsc	??_compose+1,0
  3744  06C5  1783               	bsf	3,7
  3745  06C6  0830               	movf	compose@cmd,w
  3746  06C7  0080               	movwf	0
  3747                           
  3748                           ;msg.h: 70: memcpy((void *)pmsg->data, (void *)data, len);
  3749  06C8  3007               	movlw	7
  3750  06C9  072B               	addwf	compose@pmsg,w
  3751  06CA  00A0               	movwf	memcpy@d1
  3752  06CB  082C               	movf	compose@pmsg+1,w
  3753  06CC  1803               	skipnc
  3754  06CD  3E01               	addlw	1
  3755  06CE  00A1               	movwf	memcpy@d1+1
  3756  06CF  0831               	movf	compose@data,w
  3757  06D0  00A2               	movwf	memcpy@s1
  3758  06D1  0832               	movf	compose@data+1,w
  3759  06D2  00A3               	movwf	memcpy@s1+1
  3760  06D3  0837               	movf	compose@len+1,w
  3761  06D4  00A5               	movwf	memcpy@n+1
  3762  06D5  0836               	movf	compose@len,w
  3763  06D6  00A4               	movwf	memcpy@n
  3764  06D7  120A  158A  231A  120A  118A  	fcall	_memcpy
  3765                           
  3766                           ;msg.h: 71: pmsg->msglen = datalen + 7;
  3767  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  3768  06DD  1303               	bcf	3,6	;RP1=0, select bank0
  3769  06DE  0833               	movf	compose@datalen,w
  3770  06DF  3E07               	addlw	7
  3771  06E0  00B4               	movwf	??_compose
  3772  06E1  082B               	movf	compose@pmsg,w
  3773  06E2  0084               	movwf	4
  3774  06E3  1383               	bcf	3,7
  3775  06E4  182C               	btfsc	compose@pmsg+1,0
  3776  06E5  1783               	bsf	3,7
  3777  06E6  0834               	movf	??_compose,w
  3778  06E7  0080               	movwf	0
  3779                           
  3780                           ;msg.h: 73: pmsg->crc = crc_calculate(pmsg);
  3781  06E8  082B               	movf	compose@pmsg,w
  3782  06E9  00A0               	movwf	crc_calculate@pmsg
  3783  06EA  082C               	movf	compose@pmsg+1,w
  3784  06EB  00A1               	movwf	crc_calculate@pmsg+1
  3785  06EC  120A  118A  2556   	fcall	_crc_calculate
  3786  06EF  3001               	movlw	1
  3787  06F0  1283               	bcf	3,5	;RP0=0, select bank0
  3788  06F1  1303               	bcf	3,6	;RP1=0, select bank0
  3789  06F2  072B               	addwf	compose@pmsg,w
  3790  06F3  00B4               	movwf	??_compose
  3791  06F4  082C               	movf	compose@pmsg+1,w
  3792  06F5  1803               	skipnc
  3793  06F6  3E01               	addlw	1
  3794  06F7  00B5               	movwf	??_compose+1
  3795  06F8  0834               	movf	??_compose,w
  3796  06F9  0084               	movwf	4
  3797  06FA  1783               	bsf	3,7
  3798  06FB  1C35               	btfss	??_compose+1,0
  3799  06FC  1383               	bcf	3,7
  3800  06FD  0820               	movf	?_crc_calculate,w
  3801  06FE  0080               	movwf	0
  3802  06FF  0A84               	incf	4,f
  3803  0700  0821               	movf	?_crc_calculate+1,w
  3804  0701  0080               	movwf	0
  3805  0702  0008               	return
  3806  0703                     __end_of_compose:	
  3807                           
  3808                           	psect	text10
  3809  0B1A                     __ptext10:	
  3810 ;; *************** function _memcpy *****************
  3811 ;; Defined at:
  3812 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  d1              2    0[BANK0 ] PTR void 
  3815 ;;		 -> msg(23), handle_REG_ID_RQT_CMD@msgo(23), create_REG_ID_RSP_CMD@rqt(1), 
  3816 ;;  s1              2    2[BANK0 ] PTR const void 
  3817 ;;		 -> STR_15(4), create_REG_ID_RSP_CMD@rsp(1), 
  3818 ;;  n               2    4[BANK0 ] unsigned int 
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;  s               2    9[BANK0 ] PTR const unsigned char 
  3821 ;;		 -> STR_15(4), create_REG_ID_RSP_CMD@rsp(1), 
  3822 ;;  d               2    7[BANK0 ] PTR unsigned char 
  3823 ;;		 -> msg(23), handle_REG_ID_RQT_CMD@msgo(23), create_REG_ID_RSP_CMD@rqt(1), 
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  2    0[BANK0 ] PTR void 
  3826 ;; Registers used:
  3827 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3833 ;;      Params:         0       6       0       0       0
  3834 ;;      Locals:         0       4       0       0       0
  3835 ;;      Temps:          0       1       0       0       0
  3836 ;;      Totals:         0      11       0       0       0
  3837 ;;Total ram usage:       11 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:    3
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_compose
  3844 ;;		_extract_REG_ID_RQT_CMD
  3845 ;;		_extract_REG_ID_RSP_CMD
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           
  3850                           ;psect for function _memcpy
  3851  0B1A                     _memcpy:	
  3852                           
  3853                           ;incstack = 0
  3854                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3855  0B1A  1283               	bcf	3,5	;RP0=0, select bank0
  3856  0B1B  1303               	bcf	3,6	;RP1=0, select bank0
  3857  0B1C  0822               	movf	memcpy@s1,w
  3858  0B1D  00A9               	movwf	memcpy@s
  3859  0B1E  0823               	movf	memcpy@s1+1,w
  3860  0B1F  00AA               	movwf	memcpy@s+1
  3861  0B20  0820               	movf	memcpy@d1,w
  3862  0B21  00A7               	movwf	memcpy@d
  3863  0B22  0821               	movf	memcpy@d1+1,w
  3864  0B23  00A8               	movwf	memcpy@d+1
  3865  0B24                     l3766:	
  3866  0B24  3001               	movlw	1
  3867  0B25  02A4               	subwf	memcpy@n,f
  3868  0B26  3000               	movlw	0
  3869  0B27  1C03               	skipc
  3870  0B28  03A5               	decf	memcpy@n+1,f
  3871  0B29  02A5               	subwf	memcpy@n+1,f
  3872  0B2A  0A24               	incf	memcpy@n,w
  3873  0B2B  1903               	btfsc	3,2
  3874  0B2C  0A25               	incf	memcpy@n+1,w
  3875  0B2D  1903               	btfsc	3,2
  3876  0B2E  0008               	return
  3877  0B2F  082A               	movf	memcpy@s+1,w
  3878  0B30  00FF               	movwf	127
  3879  0B31  0829               	movf	memcpy@s,w
  3880  0B32  0084               	movwf	4
  3881  0B33  120A  118A  2600  120A  158A  	fcall	stringtab
  3882  0B38  00A6               	movwf	??_memcpy
  3883  0B39  0827               	movf	memcpy@d,w
  3884  0B3A  0084               	movwf	4
  3885  0B3B  1383               	bcf	3,7
  3886  0B3C  1828               	btfsc	memcpy@d+1,0
  3887  0B3D  1783               	bsf	3,7
  3888  0B3E  0826               	movf	??_memcpy,w
  3889  0B3F  0080               	movwf	0
  3890  0B40  3001               	movlw	1
  3891  0B41  07A9               	addwf	memcpy@s,f
  3892  0B42  1803               	skipnc
  3893  0B43  0AAA               	incf	memcpy@s+1,f
  3894  0B44  3001               	movlw	1
  3895  0B45  07A7               	addwf	memcpy@d,f
  3896  0B46  1803               	skipnc
  3897  0B47  0AA8               	incf	memcpy@d+1,f
  3898  0B48  2B24               	goto	l3766
  3899  0B49                     __end_of_memcpy:	
  3900                           ;	Return value of _memcpy is never used
  3901                           
  3902                           
  3903                           	psect	text11
  3904  0556                     __ptext11:	
  3905 ;; *************** function _crc_calculate *****************
  3906 ;; Defined at:
  3907 ;;		line 37 in file "msg.h"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;  pmsg            2    0[BANK0 ] PTR struct .
  3910 ;;		 -> msg(23), handle_REG_ID_RQT_CMD@msgo(23), 
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;  i               1    8[BANK0 ] unsigned char 
  3913 ;;  crc             2    6[BANK0 ] unsigned int 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  2    0[BANK0 ] unsigned int 
  3916 ;; Registers used:
  3917 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3923 ;;      Params:         0       2       0       0       0
  3924 ;;      Locals:         0       3       0       0       0
  3925 ;;      Temps:          0       4       0       0       0
  3926 ;;      Totals:         0       9       0       0       0
  3927 ;;Total ram usage:        9 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    3
  3930 ;; This function calls:
  3931 ;;		Nothing
  3932 ;; This function is called by:
  3933 ;;		_compose
  3934 ;;		_crc_verify
  3935 ;; This function uses a non-reentrant model
  3936 ;;
  3937                           
  3938                           
  3939                           ;psect for function _crc_calculate
  3940  0556                     _crc_calculate:	
  3941                           
  3942                           ;msg.h: 39: uint16_t crc;
  3943                           ;msg.h: 40: crc = (uint8_t)pmsg->msglen;
  3944                           
  3945                           ;incstack = 0
  3946                           ; Regs used in _crc_calculate: [wreg-fsr0h+status,2+status,0]
  3947  0556  1283               	bcf	3,5	;RP0=0, select bank0
  3948  0557  1303               	bcf	3,6	;RP1=0, select bank0
  3949  0558  0820               	movf	crc_calculate@pmsg,w
  3950  0559  0084               	movwf	4
  3951  055A  1783               	bsf	3,7
  3952  055B  1C21               	btfss	crc_calculate@pmsg+1,0
  3953  055C  1383               	bcf	3,7
  3954  055D  0800               	movf	0,w
  3955  055E  00A2               	movwf	??_crc_calculate
  3956  055F  01A3               	clrf	??_crc_calculate+1
  3957  0560  0822               	movf	??_crc_calculate,w
  3958  0561  00A6               	movwf	crc_calculate@crc
  3959  0562  0823               	movf	??_crc_calculate+1,w
  3960  0563  00A7               	movwf	crc_calculate@crc+1
  3961                           
  3962                           ;msg.h: 41: crc += (uint8_t)pmsg->from;
  3963  0564  3003               	movlw	3
  3964  0565  0720               	addwf	crc_calculate@pmsg,w
  3965  0566  00A2               	movwf	??_crc_calculate
  3966  0567  0821               	movf	crc_calculate@pmsg+1,w
  3967  0568  1803               	skipnc
  3968  0569  3E01               	addlw	1
  3969  056A  00A3               	movwf	??_crc_calculate+1
  3970  056B  0822               	movf	??_crc_calculate,w
  3971  056C  0084               	movwf	4
  3972  056D  1783               	bsf	3,7
  3973  056E  1C23               	btfss	??_crc_calculate+1,0
  3974  056F  1383               	bcf	3,7
  3975  0570  0800               	movf	0,w
  3976  0571  00A4               	movwf	??_crc_calculate+2
  3977  0572  01A5               	clrf	??_crc_calculate+3
  3978  0573  0824               	movf	??_crc_calculate+2,w
  3979  0574  07A6               	addwf	crc_calculate@crc,f
  3980  0575  1803               	skipnc
  3981  0576  0AA7               	incf	crc_calculate@crc+1,f
  3982  0577  0825               	movf	??_crc_calculate+3,w
  3983  0578  07A7               	addwf	crc_calculate@crc+1,f
  3984                           
  3985                           ;msg.h: 42: crc += (uint8_t)pmsg->to;
  3986  0579  3004               	movlw	4
  3987  057A  0720               	addwf	crc_calculate@pmsg,w
  3988  057B  00A2               	movwf	??_crc_calculate
  3989  057C  0821               	movf	crc_calculate@pmsg+1,w
  3990  057D  1803               	skipnc
  3991  057E  3E01               	addlw	1
  3992  057F  00A3               	movwf	??_crc_calculate+1
  3993  0580  0822               	movf	??_crc_calculate,w
  3994  0581  0084               	movwf	4
  3995  0582  1783               	bsf	3,7
  3996  0583  1C23               	btfss	??_crc_calculate+1,0
  3997  0584  1383               	bcf	3,7
  3998  0585  0800               	movf	0,w
  3999  0586  00A4               	movwf	??_crc_calculate+2
  4000  0587  01A5               	clrf	??_crc_calculate+3
  4001  0588  0824               	movf	??_crc_calculate+2,w
  4002  0589  07A6               	addwf	crc_calculate@crc,f
  4003  058A  1803               	skipnc
  4004  058B  0AA7               	incf	crc_calculate@crc+1,f
  4005  058C  0825               	movf	??_crc_calculate+3,w
  4006  058D  07A7               	addwf	crc_calculate@crc+1,f
  4007                           
  4008                           ;msg.h: 43: crc += (uint8_t)pmsg->msgid;
  4009  058E  3005               	movlw	5
  4010  058F  0720               	addwf	crc_calculate@pmsg,w
  4011  0590  00A2               	movwf	??_crc_calculate
  4012  0591  0821               	movf	crc_calculate@pmsg+1,w
  4013  0592  1803               	skipnc
  4014  0593  3E01               	addlw	1
  4015  0594  00A3               	movwf	??_crc_calculate+1
  4016  0595  0822               	movf	??_crc_calculate,w
  4017  0596  0084               	movwf	4
  4018  0597  1783               	bsf	3,7
  4019  0598  1C23               	btfss	??_crc_calculate+1,0
  4020  0599  1383               	bcf	3,7
  4021  059A  0800               	movf	0,w
  4022  059B  00A4               	movwf	??_crc_calculate+2
  4023  059C  01A5               	clrf	??_crc_calculate+3
  4024  059D  0824               	movf	??_crc_calculate+2,w
  4025  059E  07A6               	addwf	crc_calculate@crc,f
  4026  059F  1803               	skipnc
  4027  05A0  0AA7               	incf	crc_calculate@crc+1,f
  4028  05A1  0825               	movf	??_crc_calculate+3,w
  4029  05A2  07A7               	addwf	crc_calculate@crc+1,f
  4030                           
  4031                           ;msg.h: 44: crc += (uint8_t)pmsg->cmd;
  4032  05A3  3006               	movlw	6
  4033  05A4  0720               	addwf	crc_calculate@pmsg,w
  4034  05A5  00A2               	movwf	??_crc_calculate
  4035  05A6  0821               	movf	crc_calculate@pmsg+1,w
  4036  05A7  1803               	skipnc
  4037  05A8  3E01               	addlw	1
  4038  05A9  00A3               	movwf	??_crc_calculate+1
  4039  05AA  0822               	movf	??_crc_calculate,w
  4040  05AB  0084               	movwf	4
  4041  05AC  1783               	bsf	3,7
  4042  05AD  1C23               	btfss	??_crc_calculate+1,0
  4043  05AE  1383               	bcf	3,7
  4044  05AF  0800               	movf	0,w
  4045  05B0  00A4               	movwf	??_crc_calculate+2
  4046  05B1  01A5               	clrf	??_crc_calculate+3
  4047  05B2  0824               	movf	??_crc_calculate+2,w
  4048  05B3  07A6               	addwf	crc_calculate@crc,f
  4049  05B4  1803               	skipnc
  4050  05B5  0AA7               	incf	crc_calculate@crc+1,f
  4051  05B6  0825               	movf	??_crc_calculate+3,w
  4052  05B7  07A7               	addwf	crc_calculate@crc+1,f
  4053                           
  4054                           ;msg.h: 46: for(uint8_t i = 0; i < pmsg->msglen - 7; i++)
  4055  05B8  01A8               	clrf	crc_calculate@i
  4056  05B9                     l3752:	
  4057  05B9  0820               	movf	crc_calculate@pmsg,w
  4058  05BA  0084               	movwf	4
  4059  05BB  1783               	bsf	3,7
  4060  05BC  1C21               	btfss	crc_calculate@pmsg+1,0
  4061  05BD  1383               	bcf	3,7
  4062  05BE  0800               	movf	0,w
  4063  05BF  3EF9               	addlw	249
  4064  05C0  00A2               	movwf	??_crc_calculate
  4065  05C1  30FF               	movlw	255
  4066  05C2  1803               	skipnc
  4067  05C3  3000               	movlw	0
  4068  05C4  00A3               	movwf	??_crc_calculate+1
  4069  05C5  0823               	movf	??_crc_calculate+1,w
  4070  05C6  3A80               	xorlw	128
  4071  05C7  3C80               	sublw	128
  4072  05C8  1D03               	skipz
  4073  05C9  2DCC               	goto	u4265
  4074  05CA  0822               	movf	??_crc_calculate,w
  4075  05CB  0228               	subwf	crc_calculate@i,w
  4076  05CC                     u4265:	
  4077  05CC  1803               	btfsc	3,0
  4078  05CD  2DEB               	goto	l3754
  4079                           
  4080                           ;msg.h: 47: {
  4081                           ;msg.h: 48: crc += (uint8_t)pmsg->data[i];
  4082  05CE  1283               	bcf	3,5	;RP0=0, select bank0
  4083  05CF  1303               	bcf	3,6	;RP1=0, select bank0
  4084  05D0  0828               	movf	crc_calculate@i,w
  4085  05D1  3E07               	addlw	7
  4086  05D2  0720               	addwf	crc_calculate@pmsg,w
  4087  05D3  00A2               	movwf	??_crc_calculate
  4088  05D4  0821               	movf	crc_calculate@pmsg+1,w
  4089  05D5  1803               	skipnc
  4090  05D6  3E01               	addlw	1
  4091  05D7  00A3               	movwf	??_crc_calculate+1
  4092  05D8  0822               	movf	??_crc_calculate,w
  4093  05D9  0084               	movwf	4
  4094  05DA  1783               	bsf	3,7
  4095  05DB  1C23               	btfss	??_crc_calculate+1,0
  4096  05DC  1383               	bcf	3,7
  4097  05DD  0800               	movf	0,w
  4098  05DE  00A4               	movwf	??_crc_calculate+2
  4099  05DF  01A5               	clrf	??_crc_calculate+3
  4100  05E0  0824               	movf	??_crc_calculate+2,w
  4101  05E1  07A6               	addwf	crc_calculate@crc,f
  4102  05E2  1803               	skipnc
  4103  05E3  0AA7               	incf	crc_calculate@crc+1,f
  4104  05E4  0825               	movf	??_crc_calculate+3,w
  4105  05E5  07A7               	addwf	crc_calculate@crc+1,f
  4106  05E6  3001               	movlw	1
  4107  05E7  00A2               	movwf	??_crc_calculate
  4108  05E8  0822               	movf	??_crc_calculate,w
  4109  05E9  07A8               	addwf	crc_calculate@i,f
  4110  05EA  2DB9               	goto	l3752
  4111  05EB                     l3754:	
  4112                           
  4113                           ;msg.h: 49: }
  4114                           ;msg.h: 51: return crc;
  4115  05EB  1283               	bcf	3,5	;RP0=0, select bank0
  4116  05EC  1303               	bcf	3,6	;RP1=0, select bank0
  4117  05ED  0827               	movf	crc_calculate@crc+1,w
  4118  05EE  00A1               	movwf	?_crc_calculate+1
  4119  05EF  0826               	movf	crc_calculate@crc,w
  4120  05F0  00A0               	movwf	?_crc_calculate
  4121  05F1  0008               	return
  4122  05F2                     __end_of_crc_calculate:	
  4123                           
  4124                           	psect	text12
  4125  07E4                     __ptext12:	
  4126 ;; *************** function _ValueInc *****************
  4127 ;; Defined at:
  4128 ;;		line 62 in file "menu.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;		None
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;		None
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      void 
  4135 ;; Registers used:
  4136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4142 ;;      Params:         0       0       0       0       0
  4143 ;;      Locals:         0       0       0       0       0
  4144 ;;      Temps:          0       2       0       0       0
  4145 ;;      Totals:         0       2       0       0       0
  4146 ;;Total ram usage:        2 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:    5
  4149 ;; This function calls:
  4150 ;;		_SaveMenuItem
  4151 ;; This function is called by:
  4152 ;;		_main
  4153 ;; This function uses a non-reentrant model
  4154 ;;
  4155                           
  4156                           
  4157                           ;psect for function _ValueInc
  4158  07E4                     _ValueInc:	
  4159                           
  4160                           ;menu.c: 64: g_menu.items[g_menu.index].value++;
  4161                           
  4162                           ;incstack = 0
  4163                           ; Regs used in _ValueInc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4164  07E4  3001               	movlw	1
  4165  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  4166  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  4167  07E7  00A6               	movwf	??_ValueInc
  4168  07E8  1683               	bsf	3,5	;RP0=1, select bank1
  4169  07E9  1303               	bcf	3,6	;RP1=0, select bank1
  4170  07EA  085A               	movf	(_g_menu^(0+128)+8),w
  4171  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  4172  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  4173  07ED  00A7               	movwf	??_ValueInc+1
  4174  07EE  0727               	addwf	??_ValueInc+1,w
  4175  07EF  3ED2               	addlw	(low (_g_menu| 0))& (0+255)
  4176  07F0  0084               	movwf	4
  4177  07F1  0826               	movf	??_ValueInc,w
  4178  07F2  1383               	bcf	3,7	;select IRP bank1
  4179  07F3  0780               	addwf	0,f
  4180                           
  4181                           ;menu.c: 65: SaveMenuItem(g_menu.index);
  4182  07F4  1683               	bsf	3,5	;RP0=1, select bank1
  4183  07F5  1303               	bcf	3,6	;RP1=0, select bank1
  4184  07F6  085A               	movf	(_g_menu^(0+128)+8),w
  4185  07F7  120A  158A  223A   	fcall	_SaveMenuItem
  4186  07FA  0008               	return
  4187  07FB                     __end_of_ValueInc:	
  4188                           
  4189                           	psect	text13
  4190  0A5F                     __ptext13:	
  4191 ;; *************** function _ValueDec *****************
  4192 ;; Defined at:
  4193 ;;		line 67 in file "menu.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  2   93[None  ] int 
  4200 ;; Registers used:
  4201 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4207 ;;      Params:         0       0       0       0       0
  4208 ;;      Locals:         0       0       0       0       0
  4209 ;;      Temps:          0       1       0       0       0
  4210 ;;      Totals:         0       1       0       0       0
  4211 ;;Total ram usage:        1 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    5
  4214 ;; This function calls:
  4215 ;;		_SaveMenuItem
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           
  4222                           ;psect for function _ValueDec
  4223  0A5F                     _ValueDec:	
  4224                           
  4225                           ;menu.c: 69: g_menu.items[g_menu.index].value--;
  4226                           
  4227                           ;incstack = 0
  4228                           ; Regs used in _ValueDec: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4229  0A5F  1683               	bsf	3,5	;RP0=1, select bank1
  4230  0A60  1303               	bcf	3,6	;RP1=0, select bank1
  4231  0A61  085A               	movf	(_g_menu^(0+128)+8),w
  4232  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  4233  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  4234  0A64  00A6               	movwf	??_ValueDec
  4235  0A65  0726               	addwf	??_ValueDec,w
  4236  0A66  3ED2               	addlw	(low (_g_menu| 0))& (0+255)
  4237  0A67  0084               	movwf	4
  4238  0A68  3001               	movlw	1
  4239  0A69  1383               	bcf	3,7	;select IRP bank1
  4240  0A6A  0280               	subwf	0,f
  4241                           
  4242                           ;menu.c: 70: SaveMenuItem(g_menu.index);
  4243  0A6B  1683               	bsf	3,5	;RP0=1, select bank1
  4244  0A6C  1303               	bcf	3,6	;RP1=0, select bank1
  4245  0A6D  085A               	movf	(_g_menu^(0+128)+8),w
  4246  0A6E  120A  158A  223A   	fcall	_SaveMenuItem
  4247  0A71  0008               	return
  4248  0A72                     __end_of_ValueDec:	
  4249                           
  4250                           	psect	text14
  4251  0A3A                     __ptext14:	
  4252 ;; *************** function _SaveMenuItem *****************
  4253 ;; Defined at:
  4254 ;;		line 32 in file "menu.c"
  4255 ;; Parameters:    Size  Location     Type
  4256 ;;  item            1    wreg     unsigned char 
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;  item            1    5[BANK0 ] unsigned char 
  4259 ;; Return value:  Size  Location     Type
  4260 ;;                  1    wreg      void 
  4261 ;; Registers used:
  4262 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4263 ;; Tracked objects:
  4264 ;;		On entry : 0/0
  4265 ;;		On exit  : 0/0
  4266 ;;		Unchanged: 0/0
  4267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4268 ;;      Params:         0       0       0       0       0
  4269 ;;      Locals:         0       1       0       0       0
  4270 ;;      Temps:          0       2       0       0       0
  4271 ;;      Totals:         0       3       0       0       0
  4272 ;;Total ram usage:        3 bytes
  4273 ;; Hardware stack levels used:    1
  4274 ;; Hardware stack levels required when called:    4
  4275 ;; This function calls:
  4276 ;;		_eeprom_write
  4277 ;; This function is called by:
  4278 ;;		_ValueInc
  4279 ;;		_ValueDec
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           
  4284                           ;psect for function _SaveMenuItem
  4285  0A3A                     _SaveMenuItem:	
  4286                           
  4287                           ;incstack = 0
  4288                           ; Regs used in _SaveMenuItem: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4289                           ;SaveMenuItem@item stored from wreg
  4290  0A3A  1283               	bcf	3,5	;RP0=0, select bank0
  4291  0A3B  1303               	bcf	3,6	;RP1=0, select bank0
  4292  0A3C  00A5               	movwf	SaveMenuItem@item
  4293                           
  4294                           ;menu.c: 34: eeprom_write(item, g_menu.items[item].value);
  4295  0A3D  0825               	movf	SaveMenuItem@item,w
  4296  0A3E  00A3               	movwf	??_SaveMenuItem
  4297  0A3F  0723               	addwf	??_SaveMenuItem,w
  4298  0A40  3ED2               	addlw	(low (_g_menu| 0))& (0+255)
  4299  0A41  0084               	movwf	4
  4300  0A42  1383               	bcf	3,7	;select IRP bank1
  4301  0A43  0800               	movf	0,w
  4302  0A44  00A4               	movwf	??_SaveMenuItem+1
  4303  0A45  0824               	movf	??_SaveMenuItem+1,w
  4304  0A46  00A0               	movwf	eeprom_write@value
  4305  0A47  0825               	movf	SaveMenuItem@item,w
  4306  0A48  120A  158A  2349   	fcall	_eeprom_write
  4307  0A4B  0008               	return
  4308  0A4C                     __end_of_SaveMenuItem:	
  4309                           
  4310                           	psect	text15
  4311  0B49                     __ptext15:	
  4312 ;; *************** function _eeprom_write *****************
  4313 ;; Defined at:
  4314 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eewrite.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;  addr            1    wreg     unsigned char 
  4317 ;;  value           1    0[BANK0 ] unsigned char 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  addr            1    2[BANK0 ] unsigned char 
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg, status,2, status,0
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4329 ;;      Params:         0       1       0       0       0
  4330 ;;      Locals:         0       1       0       0       0
  4331 ;;      Temps:          0       1       0       0       0
  4332 ;;      Totals:         0       3       0       0       0
  4333 ;;Total ram usage:        3 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    3
  4336 ;; This function calls:
  4337 ;;		Nothing
  4338 ;; This function is called by:
  4339 ;;		_SaveMenuItem
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           
  4344                           ;psect for function _eeprom_write
  4345  0B49                     _eeprom_write:	
  4346                           
  4347                           ;incstack = 0
  4348                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  4349                           ;eeprom_write@addr stored from wreg
  4350  0B49  1283               	bcf	3,5	;RP0=0, select bank0
  4351  0B4A  1303               	bcf	3,6	;RP1=0, select bank0
  4352  0B4B  00A2               	movwf	eeprom_write@addr
  4353  0B4C                     l526:	
  4354  0B4C  1683               	bsf	3,5	;RP0=1, select bank3
  4355  0B4D  1703               	bsf	3,6	;RP1=1, select bank3
  4356  0B4E  188C               	btfsc	12,1	;volsfr
  4357  0B4F  2B4C               	goto	l526
  4358  0B50  1283               	bcf	3,5	;RP0=0, select bank0
  4359  0B51  1303               	bcf	3,6	;RP1=0, select bank0
  4360  0B52  0822               	movf	eeprom_write@addr,w
  4361  0B53  1283               	bcf	3,5	;RP0=0, select bank2
  4362  0B54  1703               	bsf	3,6	;RP1=1, select bank2
  4363  0B55  008D               	movwf	13	;volatile
  4364  0B56  1283               	bcf	3,5	;RP0=0, select bank0
  4365  0B57  1303               	bcf	3,6	;RP1=0, select bank0
  4366  0B58  0820               	movf	eeprom_write@value,w
  4367  0B59  1283               	bcf	3,5	;RP0=0, select bank2
  4368  0B5A  1703               	bsf	3,6	;RP1=1, select bank2
  4369  0B5B  008C               	movwf	12	;volatile
  4370  0B5C  303F               	movlw	63
  4371  0B5D  1283               	bcf	3,5	;RP0=0, select bank0
  4372  0B5E  1303               	bcf	3,6	;RP1=0, select bank0
  4373  0B5F  00A1               	movwf	??_eeprom_write
  4374  0B60  0821               	movf	??_eeprom_write,w
  4375  0B61  1683               	bsf	3,5	;RP0=1, select bank3
  4376  0B62  1703               	bsf	3,6	;RP1=1, select bank3
  4377  0B63  058C               	andwf	12,f	;volsfr
  4378  0B64  1283               	bcf	3,5	;RP0=0, select bank0
  4379  0B65  1303               	bcf	3,6	;RP1=0, select bank0
  4380  0B66  1003               	bcf	3,0	;volatile
  4381  0B67  1B8B               	btfsc	11,7	;volatile
  4382  0B68  1403               	bsf	3,0	;volatile
  4383  0B69  138B               	bcf	11,7	;volatile
  4384  0B6A  1683               	bsf	3,5	;RP0=1, select bank3
  4385  0B6B  1703               	bsf	3,6	;RP1=1, select bank3
  4386  0B6C  150C               	bsf	12,2	;volsfr
  4387  0B6D  3055               	movlw	85
  4388  0B6E  008D               	movwf	13	;volsfr
  4389  0B6F  30AA               	movlw	170
  4390  0B70  008D               	movwf	13	;volsfr
  4391  0B71  148C               	bsf	12,1	;volsfr
  4392  0B72  110C               	bcf	12,2	;volsfr
  4393  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  4394  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  4395  0B75  1C03               	btfss	3,0	;volatile
  4396  0B76  0008               	return
  4397  0B77  178B               	bsf	11,7	;volatile
  4398  0B78  0008               	return
  4399  0B79                     __end_of_eeprom_write:	
  4400                           
  4401                           	psect	text16
  4402  0E70                     __ptext16:	
  4403 ;; *************** function _ShowMenu *****************
  4404 ;; Defined at:
  4405 ;;		line 23 in file "menu.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;		None
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;  i               1   31[BANK0 ] char 
  4410 ;;  count           1   30[BANK0 ] char 
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  1    wreg      void 
  4413 ;; Registers used:
  4414 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4420 ;;      Params:         0       0       0       0       0
  4421 ;;      Locals:         0       2       0       0       0
  4422 ;;      Temps:          0       4       0       0       0
  4423 ;;      Totals:         0       6       0       0       0
  4424 ;;Total ram usage:        6 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    6
  4427 ;; This function calls:
  4428 ;;		_LCDByte
  4429 ;;		_LCDGotoXY
  4430 ;;		_LCDWriteInt
  4431 ;;		_LCDWriteString
  4432 ;; This function is called by:
  4433 ;;		_main
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           
  4438                           ;psect for function _ShowMenu
  4439  0E70                     _ShowMenu:	
  4440                           
  4441                           ;menu.c: 25: { LCDGotoXY(0,0); int8_t count = LCDWriteString(g_menu.items[g_menu.index].
      +                          name); for(int8_t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };
  4442                           
  4443                           ;incstack = 0
  4444                           ; Regs used in _ShowMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4445  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  4446  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  4447  0E72  01AC               	clrf	LCDGotoXY@y
  4448  0E73  3000               	movlw	0
  4449  0E74  120A  158A  22C9  120A  158A  	fcall	_LCDGotoXY
  4450  0E79  1403               	setc
  4451  0E7A  1683               	bsf	3,5	;RP0=1, select bank1
  4452  0E7B  1303               	bcf	3,6	;RP1=0, select bank1
  4453  0E7C  0D5A               	rlf	(_g_menu^(0+128)+8),w
  4454  0E7D  3ED2               	addlw	(low (_g_menu| 0))& (0+255)
  4455  0E7E  0084               	movwf	4
  4456  0E7F  1383               	bcf	3,7	;select IRP bank1
  4457  0E80  0800               	movf	0,w
  4458  0E81  1283               	bcf	3,5	;RP0=0, select bank0
  4459  0E82  1303               	bcf	3,6	;RP1=0, select bank0
  4460  0E83  00AC               	movwf	LCDWriteString@msg
  4461  0E84  3000               	movlw	0
  4462  0E85  1D03               	btfss	3,2
  4463  0E86  3080               	movlw	128
  4464  0E87  00AD               	movwf	LCDWriteString@msg+1
  4465  0E88  120A  158A  26CE  120A  158A  	fcall	_LCDWriteString
  4466  0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  4467  0E8E  1303               	bcf	3,6	;RP1=0, select bank0
  4468  0E8F  00BA               	movwf	??_ShowMenu
  4469  0E90  083A               	movf	??_ShowMenu,w
  4470  0E91  00BE               	movwf	ShowMenu@count
  4471  0E92  083E               	movf	ShowMenu@count,w
  4472  0E93  00BA               	movwf	??_ShowMenu
  4473  0E94  083A               	movf	??_ShowMenu,w
  4474  0E95  00BF               	movwf	ShowMenu@i
  4475  0E96  083F               	movf	ShowMenu@i,w
  4476  0E97  3A80               	xorlw	128
  4477  0E98  3E70               	addlw	-144
  4478  0E99  1803               	btfsc	3,0
  4479  0E9A  2EAE               	goto	l3974
  4480  0E9B                     l3968:	
  4481  0E9B  01A5               	clrf	LCDByte@isdata
  4482  0E9C  0AA5               	incf	LCDByte@isdata,f
  4483  0E9D  3020               	movlw	32
  4484  0E9E  120A  158A  25BE  120A  158A  	fcall	_LCDByte
  4485  0EA3  3001               	movlw	1
  4486  0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  4487  0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  4488  0EA6  00BA               	movwf	??_ShowMenu
  4489  0EA7  083A               	movf	??_ShowMenu,w
  4490  0EA8  07BF               	addwf	ShowMenu@i,f
  4491  0EA9  083F               	movf	ShowMenu@i,w
  4492  0EAA  3A80               	xorlw	128
  4493  0EAB  3E70               	addlw	-144
  4494  0EAC  1C03               	skipc
  4495  0EAD  2E9B               	goto	l3968
  4496  0EAE                     l3974:	
  4497                           
  4498                           ;menu.c: 26: { LCDGotoXY(4,0); LCDWriteInt(g_menu.items[g_menu.index].value,3);};
  4499  0EAE  01AC               	clrf	LCDGotoXY@y
  4500  0EAF  3004               	movlw	4
  4501  0EB0  120A  158A  22C9  120A  158A  	fcall	_LCDGotoXY
  4502  0EB5  1683               	bsf	3,5	;RP0=1, select bank1
  4503  0EB6  1303               	bcf	3,6	;RP1=0, select bank1
  4504  0EB7  085A               	movf	(_g_menu^(0+128)+8),w
  4505  0EB8  1283               	bcf	3,5	;RP0=0, select bank0
  4506  0EB9  1303               	bcf	3,6	;RP1=0, select bank0
  4507  0EBA  00BA               	movwf	??_ShowMenu
  4508  0EBB  073A               	addwf	??_ShowMenu,w
  4509  0EBC  3ED2               	addlw	(low (_g_menu| 0))& (0+255)
  4510  0EBD  0084               	movwf	4
  4511  0EBE  1383               	bcf	3,7	;select IRP bank1
  4512  0EBF  0800               	movf	0,w
  4513  0EC0  00BB               	movwf	??_ShowMenu+1
  4514  0EC1  01BC               	clrf	??_ShowMenu+2
  4515  0EC2  083B               	movf	??_ShowMenu+1,w
  4516  0EC3  00AC               	movwf	LCDWriteInt@val
  4517  0EC4  083C               	movf	??_ShowMenu+2,w
  4518  0EC5  00AD               	movwf	LCDWriteInt@val+1
  4519  0EC6  3003               	movlw	3
  4520  0EC7  00BD               	movwf	??_ShowMenu+3
  4521  0EC8  083D               	movf	??_ShowMenu+3,w
  4522  0EC9  00AE               	movwf	LCDWriteInt@field_length
  4523  0ECA  120A  118A  24B5   	fcall	_LCDWriteInt
  4524  0ECD  0008               	return
  4525  0ECE                     __end_of_ShowMenu:	
  4526                           
  4527                           	psect	text17
  4528  04B5                     __ptext17:	
  4529 ;; *************** function _LCDWriteInt *****************
  4530 ;; Defined at:
  4531 ;;		line 328 in file "lcd_hd44780_pic16.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  val             2   12[BANK0 ] int 
  4534 ;;  field_length    1   14[BANK0 ] char 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  str             5   17[BANK0 ] unsigned char [5]
  4537 ;;  i               2   24[BANK0 ] int 
  4538 ;;  j               2   22[BANK0 ] int 
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  1    wreg      char 
  4541 ;; Registers used:
  4542 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4548 ;;      Params:         0       3       0       0       0
  4549 ;;      Locals:         0       9       0       0       0
  4550 ;;      Temps:          0       2       0       0       0
  4551 ;;      Totals:         0      14       0       0       0
  4552 ;;Total ram usage:       14 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    5
  4555 ;; This function calls:
  4556 ;;		_LCDByte
  4557 ;;		___awdiv
  4558 ;;		___awmod
  4559 ;; This function is called by:
  4560 ;;		_ShowMenu
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564                           
  4565                           ;psect for function _LCDWriteInt
  4566  04B5                     _LCDWriteInt:	
  4567                           
  4568                           ;lcd_hd44780_pic16.c: 330: char str[5]={-16,-16,-16,-16,-16};
  4569                           
  4570                           ;incstack = 0
  4571                           ; Regs used in _LCDWriteInt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4572  04B5  3031               	movlw	LCDWriteInt@str& (0+255)
  4573  04B6  0084               	movwf	4
  4574  04B7  1683               	bsf	3,5	;RP0=1, select bank1
  4575  04B8  1303               	bcf	3,6	;RP1=0, select bank1
  4576  04B9  084B               	movf	LCDWriteInt@F1650^(0+128),w
  4577  04BA  1383               	bcf	3,7	;select IRP bank0
  4578  04BB  0080               	movwf	0
  4579  04BC  0A84               	incf	4,f
  4580  04BD  084C               	movf	(LCDWriteInt@F1650^(0+128)+1),w
  4581  04BE  0080               	movwf	0
  4582  04BF  0A84               	incf	4,f
  4583  04C0  084D               	movf	(LCDWriteInt@F1650^(0+128)+2),w
  4584  04C1  0080               	movwf	0
  4585  04C2  0A84               	incf	4,f
  4586  04C3  084E               	movf	(LCDWriteInt@F1650^(0+128)+3),w
  4587  04C4  0080               	movwf	0
  4588  04C5  0A84               	incf	4,f
  4589  04C6  084F               	movf	(LCDWriteInt@F1650^(0+128)+4),w
  4590  04C7  0080               	movwf	0
  4591                           
  4592                           ;lcd_hd44780_pic16.c: 331: int i=4,j=0;
  4593  04C8  3004               	movlw	4
  4594  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  4595  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  4596  04CB  00B8               	movwf	LCDWriteInt@i
  4597  04CC  3000               	movlw	0
  4598  04CD  00B9               	movwf	LCDWriteInt@i+1
  4599  04CE  01B6               	clrf	LCDWriteInt@j
  4600  04CF  01B7               	clrf	LCDWriteInt@j+1
  4601                           
  4602                           ;lcd_hd44780_pic16.c: 333: if(val == 0)
  4603  04D0  082C               	movf	LCDWriteInt@val,w
  4604  04D1  042D               	iorwf	LCDWriteInt@val+1,w
  4605  04D2  1903               	btfsc	3,2
  4606                           
  4607                           ;lcd_hd44780_pic16.c: 334: {
  4608                           ;lcd_hd44780_pic16.c: 335: str[4] = 0;
  4609  04D3  01B5               	clrf	LCDWriteInt@str+4
  4610                           
  4611                           ;lcd_hd44780_pic16.c: 336: }
  4612                           ;lcd_hd44780_pic16.c: 338: if(val<0)
  4613  04D4  1FAD               	btfss	LCDWriteInt@val+1,7
  4614  04D5  2CE5               	goto	l3792
  4615                           
  4616                           ;lcd_hd44780_pic16.c: 339: {
  4617                           ;lcd_hd44780_pic16.c: 340: (LCDByte('-',1));
  4618  04D6  01A5               	clrf	LCDByte@isdata
  4619  04D7  0AA5               	incf	LCDByte@isdata,f
  4620  04D8  302D               	movlw	45
  4621  04D9  120A  158A  25BE  120A  118A  	fcall	_LCDByte
  4622                           
  4623                           ;lcd_hd44780_pic16.c: 341: val=val*-1;
  4624  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  4625  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  4626  04E0  09AC               	comf	LCDWriteInt@val,f
  4627  04E1  09AD               	comf	LCDWriteInt@val+1,f
  4628  04E2  0AAC               	incf	LCDWriteInt@val,f
  4629  04E3  1903               	skipnz
  4630  04E4  0AAD               	incf	LCDWriteInt@val+1,f
  4631  04E5                     l3792:	
  4632                           ;lcd_hd44780_pic16.c: 342: }
  4633                           ;lcd_hd44780_pic16.c: 344: while(val)
  4634                           
  4635  04E5  082C               	movf	LCDWriteInt@val,w
  4636  04E6  042D               	iorwf	LCDWriteInt@val+1,w
  4637  04E7  1903               	btfsc	3,2
  4638  04E8  2D1A               	goto	l3794
  4639                           
  4640                           ;lcd_hd44780_pic16.c: 345: {
  4641                           ;lcd_hd44780_pic16.c: 346: str[i]=val%10;
  4642  04E9  300A               	movlw	10
  4643  04EA  00A0               	movwf	___awmod@divisor
  4644  04EB  3000               	movlw	0
  4645  04EC  00A1               	movwf	___awmod@divisor+1
  4646  04ED  082D               	movf	LCDWriteInt@val+1,w
  4647  04EE  00A3               	movwf	___awmod@dividend+1
  4648  04EF  082C               	movf	LCDWriteInt@val,w
  4649  04F0  00A2               	movwf	___awmod@dividend
  4650  04F1  120A  158A  251D  120A  118A  	fcall	___awmod
  4651  04F6  1283               	bcf	3,5	;RP0=0, select bank0
  4652  04F7  1303               	bcf	3,6	;RP1=0, select bank0
  4653  04F8  0820               	movf	?___awmod,w
  4654  04F9  00AF               	movwf	??_LCDWriteInt
  4655  04FA  0838               	movf	LCDWriteInt@i,w
  4656  04FB  3E31               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  4657  04FC  0084               	movwf	4
  4658  04FD  082F               	movf	??_LCDWriteInt,w
  4659  04FE  1383               	bcf	3,7	;select IRP bank0
  4660  04FF  0080               	movwf	0
  4661                           
  4662                           ;lcd_hd44780_pic16.c: 347: val=val/10;
  4663  0500  300A               	movlw	10
  4664  0501  00A0               	movwf	___awdiv@divisor
  4665  0502  3000               	movlw	0
  4666  0503  00A1               	movwf	___awdiv@divisor+1
  4667  0504  082D               	movf	LCDWriteInt@val+1,w
  4668  0505  00A3               	movwf	___awdiv@dividend+1
  4669  0506  082C               	movf	LCDWriteInt@val,w
  4670  0507  00A2               	movwf	___awdiv@dividend
  4671  0508  120A  158A  2615  120A  118A  	fcall	___awdiv
  4672  050D  1283               	bcf	3,5	;RP0=0, select bank0
  4673  050E  1303               	bcf	3,6	;RP1=0, select bank0
  4674  050F  0821               	movf	?___awdiv+1,w
  4675  0510  00AD               	movwf	LCDWriteInt@val+1
  4676  0511  0820               	movf	?___awdiv,w
  4677  0512  00AC               	movwf	LCDWriteInt@val
  4678                           
  4679                           ;lcd_hd44780_pic16.c: 348: i--;
  4680  0513  30FF               	movlw	255
  4681  0514  07B8               	addwf	LCDWriteInt@i,f
  4682  0515  1803               	skipnc
  4683  0516  0AB9               	incf	LCDWriteInt@i+1,f
  4684  0517  30FF               	movlw	255
  4685  0518  07B9               	addwf	LCDWriteInt@i+1,f
  4686  0519  2CE5               	goto	l3792
  4687  051A                     l3794:	
  4688                           
  4689                           ;lcd_hd44780_pic16.c: 349: }
  4690                           ;lcd_hd44780_pic16.c: 350: if(field_length==-1)
  4691  051A  0A2E               	incf	LCDWriteInt@field_length,w
  4692  051B  1903               	btfsc	3,2
  4693  051C  2D2F               	goto	l3802
  4694                           
  4695                           ;lcd_hd44780_pic16.c: 352: else
  4696                           ;lcd_hd44780_pic16.c: 353: j=5-field_length;
  4697                           
  4698                           ;lcd_hd44780_pic16.c: 351: while(str[j]==-16) j++;
  4699  051D  082E               	movf	LCDWriteInt@field_length,w
  4700  051E  00AF               	movwf	??_LCDWriteInt
  4701  051F  01B0               	clrf	??_LCDWriteInt+1
  4702  0520  1BAF               	btfsc	??_LCDWriteInt,7
  4703  0521  03B0               	decf	??_LCDWriteInt+1,f
  4704  0522  09AF               	comf	??_LCDWriteInt,f
  4705  0523  09B0               	comf	??_LCDWriteInt+1,f
  4706  0524  0AAF               	incf	??_LCDWriteInt,f
  4707  0525  1903               	skipnz
  4708  0526  0AB0               	incf	??_LCDWriteInt+1,f
  4709  0527  082F               	movf	??_LCDWriteInt,w
  4710  0528  3E05               	addlw	5
  4711  0529  00B6               	movwf	LCDWriteInt@j
  4712  052A  0830               	movf	??_LCDWriteInt+1,w
  4713  052B  1803               	skipnc
  4714  052C  3E01               	addlw	1
  4715  052D  3E00               	addlw	0
  4716  052E  00B7               	movwf	LCDWriteInt@j+1
  4717  052F                     l3802:	
  4718                           
  4719                           ;lcd_hd44780_pic16.c: 356: for(i=j;i<5;i++)
  4720  052F  0837               	movf	LCDWriteInt@j+1,w
  4721  0530  00B9               	movwf	LCDWriteInt@i+1
  4722  0531  0836               	movf	LCDWriteInt@j,w
  4723  0532  00B8               	movwf	LCDWriteInt@i
  4724  0533                     L2:	
  4725  0533  0839               	movf	LCDWriteInt@i+1,w
  4726  0534  3A80               	xorlw	128
  4727  0535  00FF               	movwf	127
  4728  0536  3080               	movlw	128
  4729  0537  027F               	subwf	127,w
  4730  0538  1D03               	skipz
  4731  0539  2D3C               	goto	u4325
  4732  053A  3005               	movlw	5
  4733  053B  0238               	subwf	LCDWriteInt@i,w
  4734  053C                     u4325:	
  4735  053C  1803               	btfsc	3,0
  4736  053D  0008               	return
  4737                           
  4738                           ;lcd_hd44780_pic16.c: 357: {
  4739                           ;lcd_hd44780_pic16.c: 358: (LCDByte(48+str[i],1));
  4740  053E  1283               	bcf	3,5	;RP0=0, select bank0
  4741  053F  1303               	bcf	3,6	;RP1=0, select bank0
  4742  0540  01A5               	clrf	LCDByte@isdata
  4743  0541  0AA5               	incf	LCDByte@isdata,f
  4744  0542  0838               	movf	LCDWriteInt@i,w
  4745  0543  3E31               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  4746  0544  0084               	movwf	4
  4747  0545  1383               	bcf	3,7	;select IRP bank0
  4748  0546  0800               	movf	0,w
  4749  0547  3E30               	addlw	48
  4750  0548  120A  158A  25BE  120A  118A  	fcall	_LCDByte
  4751  054D  3001               	movlw	1
  4752  054E  1283               	bcf	3,5	;RP0=0, select bank0
  4753  054F  1303               	bcf	3,6	;RP1=0, select bank0
  4754  0550  07B8               	addwf	LCDWriteInt@i,f
  4755  0551  1803               	skipnc
  4756  0552  0AB9               	incf	LCDWriteInt@i+1,f
  4757  0553  3000               	movlw	0
  4758  0554  07B9               	addwf	LCDWriteInt@i+1,f
  4759  0555  2D33               	goto	L2
  4760  0556                     __end_of_LCDWriteInt:	
  4761                           ;lcd_hd44780_pic16.c: 359: }
  4762                           ;lcd_hd44780_pic16.c: 360: return field_length;
  4763                           ;	Return value of _LCDWriteInt is never used
  4764                           
  4765                           
  4766                           	psect	text18
  4767  0D1D                     __ptext18:	
  4768 ;; *************** function ___awmod *****************
  4769 ;; Defined at:
  4770 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;  divisor         2    0[BANK0 ] int 
  4773 ;;  dividend        2    2[BANK0 ] int 
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;  sign            1    6[BANK0 ] unsigned char 
  4776 ;;  counter         1    5[BANK0 ] unsigned char 
  4777 ;; Return value:  Size  Location     Type
  4778 ;;                  2    0[BANK0 ] int 
  4779 ;; Registers used:
  4780 ;;		wreg, status,2, status,0
  4781 ;; Tracked objects:
  4782 ;;		On entry : 0/0
  4783 ;;		On exit  : 0/0
  4784 ;;		Unchanged: 0/0
  4785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4786 ;;      Params:         0       4       0       0       0
  4787 ;;      Locals:         0       2       0       0       0
  4788 ;;      Temps:          0       1       0       0       0
  4789 ;;      Totals:         0       7       0       0       0
  4790 ;;Total ram usage:        7 bytes
  4791 ;; Hardware stack levels used:    1
  4792 ;; Hardware stack levels required when called:    3
  4793 ;; This function calls:
  4794 ;;		Nothing
  4795 ;; This function is called by:
  4796 ;;		_LCDWriteInt
  4797 ;; This function uses a non-reentrant model
  4798 ;;
  4799                           
  4800                           
  4801                           ;psect for function ___awmod
  4802  0D1D                     ___awmod:	
  4803                           
  4804                           ;incstack = 0
  4805                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4806  0D1D  1283               	bcf	3,5	;RP0=0, select bank0
  4807  0D1E  1303               	bcf	3,6	;RP1=0, select bank0
  4808  0D1F  01A6               	clrf	___awmod@sign
  4809  0D20  1FA3               	btfss	___awmod@dividend+1,7
  4810  0D21  2D29               	goto	l3542
  4811  0D22  09A2               	comf	___awmod@dividend,f
  4812  0D23  09A3               	comf	___awmod@dividend+1,f
  4813  0D24  0AA2               	incf	___awmod@dividend,f
  4814  0D25  1903               	skipnz
  4815  0D26  0AA3               	incf	___awmod@dividend+1,f
  4816  0D27  01A6               	clrf	___awmod@sign
  4817  0D28  0AA6               	incf	___awmod@sign,f
  4818  0D29                     l3542:	
  4819  0D29  1FA1               	btfss	___awmod@divisor+1,7
  4820  0D2A  2D30               	goto	l3546
  4821  0D2B  09A0               	comf	___awmod@divisor,f
  4822  0D2C  09A1               	comf	___awmod@divisor+1,f
  4823  0D2D  0AA0               	incf	___awmod@divisor,f
  4824  0D2E  1903               	skipnz
  4825  0D2F  0AA1               	incf	___awmod@divisor+1,f
  4826  0D30                     l3546:	
  4827  0D30  0820               	movf	___awmod@divisor,w
  4828  0D31  0421               	iorwf	___awmod@divisor+1,w
  4829  0D32  1903               	btfsc	3,2
  4830  0D33  2D5D               	goto	l3564
  4831  0D34  01A5               	clrf	___awmod@counter
  4832  0D35  0AA5               	incf	___awmod@counter,f
  4833  0D36                     l3554:	
  4834  0D36  1BA1               	btfsc	___awmod@divisor+1,7
  4835  0D37  2D44               	goto	l3556
  4836  0D38  3001               	movlw	1
  4837  0D39                     u3935:	
  4838  0D39  1003               	clrc
  4839  0D3A  0DA0               	rlf	___awmod@divisor,f
  4840  0D3B  0DA1               	rlf	___awmod@divisor+1,f
  4841  0D3C  3EFF               	addlw	-1
  4842  0D3D  1D03               	skipz
  4843  0D3E  2D39               	goto	u3935
  4844  0D3F  3001               	movlw	1
  4845  0D40  00A4               	movwf	??___awmod
  4846  0D41  0824               	movf	??___awmod,w
  4847  0D42  07A5               	addwf	___awmod@counter,f
  4848  0D43  2D36               	goto	l3554
  4849  0D44                     l3556:	
  4850  0D44  0821               	movf	___awmod@divisor+1,w
  4851  0D45  0223               	subwf	___awmod@dividend+1,w
  4852  0D46  1D03               	skipz
  4853  0D47  2D4A               	goto	u3955
  4854  0D48  0820               	movf	___awmod@divisor,w
  4855  0D49  0222               	subwf	___awmod@dividend,w
  4856  0D4A                     u3955:	
  4857  0D4A  1C03               	skipc
  4858  0D4B  2D52               	goto	l3560
  4859  0D4C  0820               	movf	___awmod@divisor,w
  4860  0D4D  02A2               	subwf	___awmod@dividend,f
  4861  0D4E  0821               	movf	___awmod@divisor+1,w
  4862  0D4F  1C03               	skipc
  4863  0D50  03A3               	decf	___awmod@dividend+1,f
  4864  0D51  02A3               	subwf	___awmod@dividend+1,f
  4865  0D52                     l3560:	
  4866  0D52  3001               	movlw	1
  4867  0D53                     u3965:	
  4868  0D53  1003               	clrc
  4869  0D54  0CA1               	rrf	___awmod@divisor+1,f
  4870  0D55  0CA0               	rrf	___awmod@divisor,f
  4871  0D56  3EFF               	addlw	-1
  4872  0D57  1D03               	skipz
  4873  0D58  2D53               	goto	u3965
  4874  0D59  3001               	movlw	1
  4875  0D5A  02A5               	subwf	___awmod@counter,f
  4876  0D5B  1D03               	btfss	3,2
  4877  0D5C  2D44               	goto	l3556
  4878  0D5D                     l3564:	
  4879  0D5D  0826               	movf	___awmod@sign,w
  4880  0D5E  1903               	btfsc	3,2
  4881  0D5F  2D65               	goto	l3568
  4882  0D60  09A2               	comf	___awmod@dividend,f
  4883  0D61  09A3               	comf	___awmod@dividend+1,f
  4884  0D62  0AA2               	incf	___awmod@dividend,f
  4885  0D63  1903               	skipnz
  4886  0D64  0AA3               	incf	___awmod@dividend+1,f
  4887  0D65                     l3568:	
  4888  0D65  0823               	movf	___awmod@dividend+1,w
  4889  0D66  00A1               	movwf	?___awmod+1
  4890  0D67  0822               	movf	___awmod@dividend,w
  4891  0D68  00A0               	movwf	?___awmod
  4892  0D69  0008               	return
  4893  0D6A                     __end_of___awmod:	
  4894                           
  4895                           	psect	text19
  4896  0E15                     __ptext19:	
  4897 ;; *************** function ___awdiv *****************
  4898 ;; Defined at:
  4899 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  4900 ;; Parameters:    Size  Location     Type
  4901 ;;  divisor         2    0[BANK0 ] int 
  4902 ;;  dividend        2    2[BANK0 ] int 
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;  quotient        2    7[BANK0 ] int 
  4905 ;;  sign            1    6[BANK0 ] unsigned char 
  4906 ;;  counter         1    5[BANK0 ] unsigned char 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  2    0[BANK0 ] int 
  4909 ;; Registers used:
  4910 ;;		wreg, status,2, status,0
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4916 ;;      Params:         0       4       0       0       0
  4917 ;;      Locals:         0       4       0       0       0
  4918 ;;      Temps:          0       1       0       0       0
  4919 ;;      Totals:         0       9       0       0       0
  4920 ;;Total ram usage:        9 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    3
  4923 ;; This function calls:
  4924 ;;		Nothing
  4925 ;; This function is called by:
  4926 ;;		_LCDWriteInt
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           
  4931                           ;psect for function ___awdiv
  4932  0E15                     ___awdiv:	
  4933                           
  4934                           ;incstack = 0
  4935                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4936  0E15  1283               	bcf	3,5	;RP0=0, select bank0
  4937  0E16  1303               	bcf	3,6	;RP1=0, select bank0
  4938  0E17  01A6               	clrf	___awdiv@sign
  4939  0E18  1FA1               	btfss	___awdiv@divisor+1,7
  4940  0E19  2E21               	goto	l3498
  4941  0E1A  09A0               	comf	___awdiv@divisor,f
  4942  0E1B  09A1               	comf	___awdiv@divisor+1,f
  4943  0E1C  0AA0               	incf	___awdiv@divisor,f
  4944  0E1D  1903               	skipnz
  4945  0E1E  0AA1               	incf	___awdiv@divisor+1,f
  4946  0E1F  01A6               	clrf	___awdiv@sign
  4947  0E20  0AA6               	incf	___awdiv@sign,f
  4948  0E21                     l3498:	
  4949  0E21  1FA3               	btfss	___awdiv@dividend+1,7
  4950  0E22  2E2C               	goto	l3504
  4951  0E23  09A2               	comf	___awdiv@dividend,f
  4952  0E24  09A3               	comf	___awdiv@dividend+1,f
  4953  0E25  0AA2               	incf	___awdiv@dividend,f
  4954  0E26  1903               	skipnz
  4955  0E27  0AA3               	incf	___awdiv@dividend+1,f
  4956  0E28  3001               	movlw	1
  4957  0E29  00A4               	movwf	??___awdiv
  4958  0E2A  0824               	movf	??___awdiv,w
  4959  0E2B  06A6               	xorwf	___awdiv@sign,f
  4960  0E2C                     l3504:	
  4961  0E2C  01A7               	clrf	___awdiv@quotient
  4962  0E2D  01A8               	clrf	___awdiv@quotient+1
  4963  0E2E  0820               	movf	___awdiv@divisor,w
  4964  0E2F  0421               	iorwf	___awdiv@divisor+1,w
  4965  0E30  1903               	btfsc	3,2
  4966  0E31  2E63               	goto	l3526
  4967  0E32  01A5               	clrf	___awdiv@counter
  4968  0E33  0AA5               	incf	___awdiv@counter,f
  4969  0E34                     l3514:	
  4970  0E34  1BA1               	btfsc	___awdiv@divisor+1,7
  4971  0E35  2E42               	goto	l3516
  4972  0E36  3001               	movlw	1
  4973  0E37                     u3835:	
  4974  0E37  1003               	clrc
  4975  0E38  0DA0               	rlf	___awdiv@divisor,f
  4976  0E39  0DA1               	rlf	___awdiv@divisor+1,f
  4977  0E3A  3EFF               	addlw	-1
  4978  0E3B  1D03               	skipz
  4979  0E3C  2E37               	goto	u3835
  4980  0E3D  3001               	movlw	1
  4981  0E3E  00A4               	movwf	??___awdiv
  4982  0E3F  0824               	movf	??___awdiv,w
  4983  0E40  07A5               	addwf	___awdiv@counter,f
  4984  0E41  2E34               	goto	l3514
  4985  0E42                     l3516:	
  4986  0E42  3001               	movlw	1
  4987  0E43                     u3855:	
  4988  0E43  1003               	clrc
  4989  0E44  0DA7               	rlf	___awdiv@quotient,f
  4990  0E45  0DA8               	rlf	___awdiv@quotient+1,f
  4991  0E46  3EFF               	addlw	-1
  4992  0E47  1D03               	skipz
  4993  0E48  2E43               	goto	u3855
  4994  0E49  0821               	movf	___awdiv@divisor+1,w
  4995  0E4A  0223               	subwf	___awdiv@dividend+1,w
  4996  0E4B  1D03               	skipz
  4997  0E4C  2E4F               	goto	u3865
  4998  0E4D  0820               	movf	___awdiv@divisor,w
  4999  0E4E  0222               	subwf	___awdiv@dividend,w
  5000  0E4F                     u3865:	
  5001  0E4F  1C03               	skipc
  5002  0E50  2E58               	goto	l3522
  5003  0E51  0820               	movf	___awdiv@divisor,w
  5004  0E52  02A2               	subwf	___awdiv@dividend,f
  5005  0E53  0821               	movf	___awdiv@divisor+1,w
  5006  0E54  1C03               	skipc
  5007  0E55  03A3               	decf	___awdiv@dividend+1,f
  5008  0E56  02A3               	subwf	___awdiv@dividend+1,f
  5009  0E57  1427               	bsf	___awdiv@quotient,0
  5010  0E58                     l3522:	
  5011  0E58  3001               	movlw	1
  5012  0E59                     u3875:	
  5013  0E59  1003               	clrc
  5014  0E5A  0CA1               	rrf	___awdiv@divisor+1,f
  5015  0E5B  0CA0               	rrf	___awdiv@divisor,f
  5016  0E5C  3EFF               	addlw	-1
  5017  0E5D  1D03               	skipz
  5018  0E5E  2E59               	goto	u3875
  5019  0E5F  3001               	movlw	1
  5020  0E60  02A5               	subwf	___awdiv@counter,f
  5021  0E61  1D03               	btfss	3,2
  5022  0E62  2E42               	goto	l3516
  5023  0E63                     l3526:	
  5024  0E63  0826               	movf	___awdiv@sign,w
  5025  0E64  1903               	btfsc	3,2
  5026  0E65  2E6B               	goto	l3530
  5027  0E66  09A7               	comf	___awdiv@quotient,f
  5028  0E67  09A8               	comf	___awdiv@quotient+1,f
  5029  0E68  0AA7               	incf	___awdiv@quotient,f
  5030  0E69  1903               	skipnz
  5031  0E6A  0AA8               	incf	___awdiv@quotient+1,f
  5032  0E6B                     l3530:	
  5033  0E6B  0828               	movf	___awdiv@quotient+1,w
  5034  0E6C  00A1               	movwf	?___awdiv+1
  5035  0E6D  0827               	movf	___awdiv@quotient,w
  5036  0E6E  00A0               	movwf	?___awdiv
  5037  0E6F  0008               	return
  5038  0E70                     __end_of___awdiv:	
  5039                           
  5040                           	psect	text20
  5041  0A18                     __ptext20:	
  5042 ;; *************** function _MenuUp *****************
  5043 ;; Defined at:
  5044 ;;		line 40 in file "menu.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;		None
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;		None
  5049 ;; Return value:  Size  Location     Type
  5050 ;;                  1    wreg      void 
  5051 ;; Registers used:
  5052 ;;		wreg, status,2, status,0
  5053 ;; Tracked objects:
  5054 ;;		On entry : 0/0
  5055 ;;		On exit  : 0/0
  5056 ;;		Unchanged: 0/0
  5057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5058 ;;      Params:         0       0       0       0       0
  5059 ;;      Locals:         0       0       0       0       0
  5060 ;;      Temps:          0       1       0       0       0
  5061 ;;      Totals:         0       1       0       0       0
  5062 ;;Total ram usage:        1 bytes
  5063 ;; Hardware stack levels used:    1
  5064 ;; Hardware stack levels required when called:    3
  5065 ;; This function calls:
  5066 ;;		Nothing
  5067 ;; This function is called by:
  5068 ;;		_main
  5069 ;; This function uses a non-reentrant model
  5070 ;;
  5071                           
  5072                           
  5073                           ;psect for function _MenuUp
  5074  0A18                     _MenuUp:	
  5075                           
  5076                           ;menu.c: 42: if(g_menu.index == 0)
  5077                           
  5078                           ;incstack = 0
  5079                           ; Regs used in _MenuUp: [wreg+status,2+status,0]
  5080  0A18  1683               	bsf	3,5	;RP0=1, select bank1
  5081  0A19  1303               	bcf	3,6	;RP1=0, select bank1
  5082  0A1A  085A               	movf	(_g_menu^(0+128)+8),w
  5083  0A1B  1D03               	btfss	3,2
  5084  0A1C  2A26               	goto	l4004
  5085                           
  5086                           ;menu.c: 43: {
  5087                           ;menu.c: 44: g_menu.index = 4 - 1;
  5088  0A1D  3003               	movlw	3
  5089  0A1E  1283               	bcf	3,5	;RP0=0, select bank0
  5090  0A1F  1303               	bcf	3,6	;RP1=0, select bank0
  5091  0A20  00A0               	movwf	??_MenuUp
  5092  0A21  0820               	movf	??_MenuUp,w
  5093  0A22  1683               	bsf	3,5	;RP0=1, select bank1
  5094  0A23  1303               	bcf	3,6	;RP1=0, select bank1
  5095  0A24  00DA               	movwf	(_g_menu^(0+128)+8)
  5096                           
  5097                           ;menu.c: 45: }
  5098  0A25  0008               	return
  5099  0A26                     l4004:	
  5100                           
  5101                           ;menu.c: 46: else
  5102                           ;menu.c: 47: {
  5103                           ;menu.c: 48: g_menu.index--;
  5104  0A26  3001               	movlw	1
  5105  0A27  02DA               	subwf	(_g_menu^(0+128)+8),f
  5106  0A28  0008               	return
  5107  0A29                     __end_of_MenuUp:	
  5108                           
  5109                           	psect	text21
  5110  0D6A                     __ptext21:	
  5111 ;; *************** function _MenuInit *****************
  5112 ;; Defined at:
  5113 ;;		line 7 in file "menu.c"
  5114 ;; Parameters:    Size  Location     Type
  5115 ;;		None
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;		None
  5118 ;; Return value:  Size  Location     Type
  5119 ;;                  1    wreg      void 
  5120 ;; Registers used:
  5121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5122 ;; Tracked objects:
  5123 ;;		On entry : 0/0
  5124 ;;		On exit  : 0/0
  5125 ;;		Unchanged: 0/0
  5126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5127 ;;      Params:         0       0       0       0       0
  5128 ;;      Locals:         0       0       0       0       0
  5129 ;;      Temps:          0       1       0       0       0
  5130 ;;      Totals:         0       1       0       0       0
  5131 ;;Total ram usage:        1 bytes
  5132 ;; Hardware stack levels used:    1
  5133 ;; Hardware stack levels required when called:    5
  5134 ;; This function calls:
  5135 ;;		_LoadMenuItem
  5136 ;; This function is called by:
  5137 ;;		_main
  5138 ;; This function uses a non-reentrant model
  5139 ;;
  5140                           
  5141                           
  5142                           ;psect for function _MenuInit
  5143  0D6A                     _MenuInit:	
  5144                           
  5145                           ;menu.c: 9: g_menu.items[0].name = "ID1:";
  5146                           
  5147                           ;incstack = 0
  5148                           ; Regs used in _MenuInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5149  0D6A  3058               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  5150  0D6B  1283               	bcf	3,5	;RP0=0, select bank0
  5151  0D6C  1303               	bcf	3,6	;RP1=0, select bank0
  5152  0D6D  00A5               	movwf	??_MenuInit
  5153  0D6E  0825               	movf	??_MenuInit,w
  5154  0D6F  1683               	bsf	3,5	;RP0=1, select bank1
  5155  0D70  1303               	bcf	3,6	;RP1=0, select bank1
  5156  0D71  00D3               	movwf	(low ((_g_menu| 0+1)))^(0+128)
  5157                           
  5158                           ;menu.c: 10: g_menu.items[0].value = LoadMenuItem(0);
  5159  0D72  3000               	movlw	0
  5160  0D73  120A  158A  224C  120A  158A  	fcall	_LoadMenuItem
  5161  0D78  1283               	bcf	3,5	;RP0=0, select bank0
  5162  0D79  1303               	bcf	3,6	;RP1=0, select bank0
  5163  0D7A  00A5               	movwf	??_MenuInit
  5164  0D7B  0825               	movf	??_MenuInit,w
  5165  0D7C  1683               	bsf	3,5	;RP0=1, select bank1
  5166  0D7D  1303               	bcf	3,6	;RP1=0, select bank1
  5167  0D7E  00D2               	movwf	_g_menu^(0+128)
  5168                           
  5169                           ;menu.c: 12: g_menu.items[1].name = "ID2:";
  5170  0D7F  305D               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  5171  0D80  1283               	bcf	3,5	;RP0=0, select bank0
  5172  0D81  1303               	bcf	3,6	;RP1=0, select bank0
  5173  0D82  00A5               	movwf	??_MenuInit
  5174  0D83  0825               	movf	??_MenuInit,w
  5175  0D84  1683               	bsf	3,5	;RP0=1, select bank1
  5176  0D85  1303               	bcf	3,6	;RP1=0, select bank1
  5177  0D86  00D5               	movwf	(low ((_g_menu| 0+3)))^(0+128)
  5178                           
  5179                           ;menu.c: 13: g_menu.items[1].value = LoadMenuItem(1);
  5180  0D87  3001               	movlw	1
  5181  0D88  120A  158A  224C  120A  158A  	fcall	_LoadMenuItem
  5182  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  5183  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  5184  0D8F  00A5               	movwf	??_MenuInit
  5185  0D90  0825               	movf	??_MenuInit,w
  5186  0D91  1683               	bsf	3,5	;RP0=1, select bank1
  5187  0D92  1303               	bcf	3,6	;RP1=0, select bank1
  5188  0D93  00D4               	movwf	(_g_menu^(0+128)+2)
  5189                           
  5190                           ;menu.c: 15: g_menu.items[2].name = "ID3:";
  5191  0D94  3062               	movlw	(low ((STR_24-__stringbase)| (0+32768)))& (0+255)
  5192  0D95  1283               	bcf	3,5	;RP0=0, select bank0
  5193  0D96  1303               	bcf	3,6	;RP1=0, select bank0
  5194  0D97  00A5               	movwf	??_MenuInit
  5195  0D98  0825               	movf	??_MenuInit,w
  5196  0D99  1683               	bsf	3,5	;RP0=1, select bank1
  5197  0D9A  1303               	bcf	3,6	;RP1=0, select bank1
  5198  0D9B  00D7               	movwf	(low ((_g_menu| 0+5)))^(0+128)
  5199                           
  5200                           ;menu.c: 16: g_menu.items[2].value = LoadMenuItem(2);
  5201  0D9C  3002               	movlw	2
  5202  0D9D  120A  158A  224C  120A  158A  	fcall	_LoadMenuItem
  5203  0DA2  1283               	bcf	3,5	;RP0=0, select bank0
  5204  0DA3  1303               	bcf	3,6	;RP1=0, select bank0
  5205  0DA4  00A5               	movwf	??_MenuInit
  5206  0DA5  0825               	movf	??_MenuInit,w
  5207  0DA6  1683               	bsf	3,5	;RP0=1, select bank1
  5208  0DA7  1303               	bcf	3,6	;RP1=0, select bank1
  5209  0DA8  00D6               	movwf	(_g_menu^(0+128)+4)
  5210                           
  5211                           ;menu.c: 18: g_menu.items[3].name = "ID4:";
  5212  0DA9  3067               	movlw	(low ((STR_25-__stringbase)| (0+32768)))& (0+255)
  5213  0DAA  1283               	bcf	3,5	;RP0=0, select bank0
  5214  0DAB  1303               	bcf	3,6	;RP1=0, select bank0
  5215  0DAC  00A5               	movwf	??_MenuInit
  5216  0DAD  0825               	movf	??_MenuInit,w
  5217  0DAE  1683               	bsf	3,5	;RP0=1, select bank1
  5218  0DAF  1303               	bcf	3,6	;RP1=0, select bank1
  5219  0DB0  00D9               	movwf	(low ((_g_menu| 0+7)))^(0+128)
  5220                           
  5221                           ;menu.c: 19: g_menu.items[3].value = LoadMenuItem(3);
  5222  0DB1  3003               	movlw	3
  5223  0DB2  120A  158A  224C   	fcall	_LoadMenuItem
  5224  0DB5  1283               	bcf	3,5	;RP0=0, select bank0
  5225  0DB6  1303               	bcf	3,6	;RP1=0, select bank0
  5226  0DB7  00A5               	movwf	??_MenuInit
  5227  0DB8  0825               	movf	??_MenuInit,w
  5228  0DB9  1683               	bsf	3,5	;RP0=1, select bank1
  5229  0DBA  1303               	bcf	3,6	;RP1=0, select bank1
  5230  0DBB  00D8               	movwf	(_g_menu^(0+128)+6)
  5231                           
  5232                           ;menu.c: 21: g_menu.index = 0;
  5233  0DBC  01DA               	clrf	(_g_menu^(0+128)+8)
  5234  0DBD  0008               	return
  5235  0DBE                     __end_of_MenuInit:	
  5236                           
  5237                           	psect	text22
  5238  0A4C                     __ptext22:	
  5239 ;; *************** function _LoadMenuItem *****************
  5240 ;; Defined at:
  5241 ;;		line 36 in file "menu.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  item            1    wreg     unsigned char 
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;  item            1    4[BANK0 ] unsigned char 
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      unsigned char 
  5248 ;; Registers used:
  5249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5255 ;;      Params:         0       0       0       0       0
  5256 ;;      Locals:         0       1       0       0       0
  5257 ;;      Temps:          0       2       0       0       0
  5258 ;;      Totals:         0       3       0       0       0
  5259 ;;Total ram usage:        3 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    4
  5262 ;; This function calls:
  5263 ;;		_eeprom_read
  5264 ;; This function is called by:
  5265 ;;		_MenuInit
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269                           
  5270                           ;psect for function _LoadMenuItem
  5271  0A4C                     _LoadMenuItem:	
  5272                           
  5273                           ;incstack = 0
  5274                           ; Regs used in _LoadMenuItem: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5275                           ;LoadMenuItem@item stored from wreg
  5276  0A4C  1283               	bcf	3,5	;RP0=0, select bank0
  5277  0A4D  1303               	bcf	3,6	;RP1=0, select bank0
  5278  0A4E  00A4               	movwf	LoadMenuItem@item
  5279                           
  5280                           ;menu.c: 38: g_menu.items[item].value = eeprom_read(item);
  5281  0A4F  0824               	movf	LoadMenuItem@item,w
  5282  0A50  120A  158A  22A5   	fcall	_eeprom_read
  5283  0A53  1283               	bcf	3,5	;RP0=0, select bank0
  5284  0A54  1303               	bcf	3,6	;RP1=0, select bank0
  5285  0A55  00A2               	movwf	??_LoadMenuItem
  5286  0A56  0824               	movf	LoadMenuItem@item,w
  5287  0A57  00A3               	movwf	??_LoadMenuItem+1
  5288  0A58  0723               	addwf	??_LoadMenuItem+1,w
  5289  0A59  3ED2               	addlw	(low (_g_menu| 0))& (0+255)
  5290  0A5A  0084               	movwf	4
  5291  0A5B  0822               	movf	??_LoadMenuItem,w
  5292  0A5C  1383               	bcf	3,7	;select IRP bank1
  5293  0A5D  0080               	movwf	0
  5294  0A5E  0008               	return
  5295  0A5F                     __end_of_LoadMenuItem:	
  5296                           
  5297                           	psect	text23
  5298  0AA5                     __ptext23:	
  5299 ;; *************** function _eeprom_read *****************
  5300 ;; Defined at:
  5301 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eeread.c"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;  addr            1    wreg     unsigned char 
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;  addr            1    1[BANK0 ] unsigned char 
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  1    wreg      unsigned char 
  5308 ;; Registers used:
  5309 ;;		wreg, status,2, status,0
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5315 ;;      Params:         0       0       0       0       0
  5316 ;;      Locals:         0       1       0       0       0
  5317 ;;      Temps:          0       1       0       0       0
  5318 ;;      Totals:         0       2       0       0       0
  5319 ;;Total ram usage:        2 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    3
  5322 ;; This function calls:
  5323 ;;		Nothing
  5324 ;; This function is called by:
  5325 ;;		_LoadMenuItem
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           
  5330                           ;psect for function _eeprom_read
  5331  0AA5                     _eeprom_read:	
  5332                           
  5333                           ;incstack = 0
  5334                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  5335                           ;eeprom_read@addr stored from wreg
  5336  0AA5  1283               	bcf	3,5	;RP0=0, select bank0
  5337  0AA6  1303               	bcf	3,6	;RP1=0, select bank0
  5338  0AA7  00A1               	movwf	eeprom_read@addr
  5339  0AA8  2AAB               	goto	l504
  5340  0AA9                     u3791:	
  5341  0AA9  1283               	bcf	3,5	;RP0=0, select bank0
  5342  0AAA  1303               	bcf	3,6	;RP1=0, select bank0
  5343  0AAB                     l504:	
  5344  0AAB  0064               	clrwdt	;# 
  5345  0AAC  1683               	bsf	3,5	;RP0=1, select bank3
  5346  0AAD  1703               	bsf	3,6	;RP1=1, select bank3
  5347  0AAE  188C               	btfsc	12,1	;volsfr
  5348  0AAF  2AA9               	goto	u3791
  5349  0AB0  1283               	bcf	3,5	;RP0=0, select bank0
  5350  0AB1  1303               	bcf	3,6	;RP1=0, select bank0
  5351  0AB2  0821               	movf	eeprom_read@addr,w
  5352  0AB3  1283               	bcf	3,5	;RP0=0, select bank2
  5353  0AB4  1703               	bsf	3,6	;RP1=1, select bank2
  5354  0AB5  008D               	movwf	13	;volatile
  5355  0AB6  303F               	movlw	63
  5356  0AB7  1283               	bcf	3,5	;RP0=0, select bank0
  5357  0AB8  1303               	bcf	3,6	;RP1=0, select bank0
  5358  0AB9  00A0               	movwf	??_eeprom_read
  5359  0ABA  0820               	movf	??_eeprom_read,w
  5360  0ABB  1683               	bsf	3,5	;RP0=1, select bank3
  5361  0ABC  1703               	bsf	3,6	;RP1=1, select bank3
  5362  0ABD  058C               	andwf	12,f	;volsfr
  5363  0ABE  140C               	bsf	12,0	;volsfr
  5364  0ABF  1003               	clrc
  5365  0AC0  180C               	btfsc	12,0	;volsfr
  5366  0AC1  1403               	setc
  5367  0AC2  3000               	movlw	0
  5368  0AC3  1803               	skipnc
  5369  0AC4  3001               	movlw	1
  5370  0AC5  1283               	bcf	3,5	;RP0=0, select bank2
  5371  0AC6  1703               	bsf	3,6	;RP1=1, select bank2
  5372  0AC7  080C               	movf	12,w	;volatile
  5373  0AC8  0008               	return
  5374  0AC9                     __end_of_eeprom_read:	
  5375                           
  5376                           	psect	text24
  5377  0A07                     __ptext24:	
  5378 ;; *************** function _MenuDown *****************
  5379 ;; Defined at:
  5380 ;;		line 51 in file "menu.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;		None
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;		None
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  1    wreg      void 
  5387 ;; Registers used:
  5388 ;;		wreg, status,2, status,0
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5394 ;;      Params:         0       0       0       0       0
  5395 ;;      Locals:         0       0       0       0       0
  5396 ;;      Temps:          0       1       0       0       0
  5397 ;;      Totals:         0       1       0       0       0
  5398 ;;Total ram usage:        1 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    3
  5401 ;; This function calls:
  5402 ;;		Nothing
  5403 ;; This function is called by:
  5404 ;;		_main
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           
  5409                           ;psect for function _MenuDown
  5410  0A07                     _MenuDown:	
  5411                           
  5412                           ;menu.c: 53: if(g_menu.index == 4 - 1)
  5413                           
  5414                           ;incstack = 0
  5415                           ; Regs used in _MenuDown: [wreg+status,2+status,0]
  5416  0A07  3003               	movlw	3
  5417  0A08  1683               	bsf	3,5	;RP0=1, select bank1
  5418  0A09  1303               	bcf	3,6	;RP1=0, select bank1
  5419  0A0A  065A               	xorwf	(_g_menu^(0+128)+8),w
  5420  0A0B  1D03               	btfss	3,2
  5421  0A0C  2A0F               	goto	l4014
  5422                           
  5423                           ;menu.c: 54: {
  5424                           ;menu.c: 55: g_menu.index = 0;
  5425  0A0D  01DA               	clrf	(_g_menu^(0+128)+8)
  5426                           
  5427                           ;menu.c: 56: }
  5428  0A0E  0008               	return
  5429  0A0F                     l4014:	
  5430                           
  5431                           ;menu.c: 57: else
  5432                           ;menu.c: 58: {
  5433                           ;menu.c: 59: g_menu.index++;
  5434  0A0F  3001               	movlw	1
  5435  0A10  1283               	bcf	3,5	;RP0=0, select bank0
  5436  0A11  1303               	bcf	3,6	;RP1=0, select bank0
  5437  0A12  00A0               	movwf	??_MenuDown
  5438  0A13  0820               	movf	??_MenuDown,w
  5439  0A14  1683               	bsf	3,5	;RP0=1, select bank1
  5440  0A15  1303               	bcf	3,6	;RP1=0, select bank1
  5441  0A16  07DA               	addwf	(_g_menu^(0+128)+8),f
  5442  0A17  0008               	return
  5443  0A18                     __end_of_MenuDown:	
  5444                           
  5445                           	psect	text25
  5446  05F2                     __ptext25:	
  5447 ;; *************** function _LCDSetStyle *****************
  5448 ;; Defined at:
  5449 ;;		line 207 in file "lcd_hd44780_pic16.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;  style           1    wreg     unsigned char 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  style           1   12[BANK0 ] unsigned char 
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  1    wreg      void 
  5456 ;; Registers used:
  5457 ;;		wreg, status,2, status,0, pclath, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5463 ;;      Params:         0       0       0       0       0
  5464 ;;      Locals:         0       1       0       0       0
  5465 ;;      Temps:          0       0       0       0       0
  5466 ;;      Totals:         0       1       0       0       0
  5467 ;;Total ram usage:        1 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    5
  5470 ;; This function calls:
  5471 ;;		_LCDByte
  5472 ;; This function is called by:
  5473 ;;		_main
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           
  5478                           ;psect for function _LCDSetStyle
  5479  05F2                     _LCDSetStyle:	
  5480                           
  5481                           ;incstack = 0
  5482                           ; Regs used in _LCDSetStyle: [wreg+status,2+status,0+pclath+cstack]
  5483                           ;LCDSetStyle@style stored from wreg
  5484  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  5485  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  5486  05F4  00AC               	movwf	LCDSetStyle@style
  5487                           
  5488                           ;lcd_hd44780_pic16.c: 209: (LCDByte(0b00001100|style,0));
  5489  05F5  01A5               	clrf	LCDByte@isdata
  5490  05F6  082C               	movf	LCDSetStyle@style,w
  5491  05F7  380C               	iorlw	12
  5492  05F8  120A  158A  25BE   	fcall	_LCDByte
  5493  05FB  0008               	return
  5494  05FC                     __end_of_LCDSetStyle:	
  5495                           
  5496                           	psect	text26
  5497  0F98                     __ptext26:	
  5498 ;; *************** function _LCDInit *****************
  5499 ;; Defined at:
  5500 ;;		line 211 in file "lcd_hd44780_pic16.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;  style           1    wreg     unsigned char 
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;  style           1   14[BANK0 ] unsigned char 
  5505 ;;  __i             1   15[BANK0 ] unsigned char 
  5506 ;; Return value:  Size  Location     Type
  5507 ;;                  1    wreg      void 
  5508 ;; Registers used:
  5509 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5515 ;;      Params:         0       0       0       0       0
  5516 ;;      Locals:         0       2       0       0       0
  5517 ;;      Temps:          0       2       0       0       0
  5518 ;;      Totals:         0       4       0       0       0
  5519 ;;Total ram usage:        4 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; Hardware stack levels required when called:    5
  5522 ;; This function calls:
  5523 ;;		_LCDBusyLoop
  5524 ;;		_LCDByte
  5525 ;; This function is called by:
  5526 ;;		_main
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           
  5531                           ;psect for function _LCDInit
  5532  0F98                     _LCDInit:	
  5533                           
  5534                           ;incstack = 0
  5535                           ; Regs used in _LCDInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5536                           ;LCDInit@style stored from wreg
  5537  0F98  1283               	bcf	3,5	;RP0=0, select bank0
  5538  0F99  1303               	bcf	3,6	;RP1=0, select bank0
  5539  0F9A  00AE               	movwf	LCDInit@style
  5540                           
  5541                           ;lcd_hd44780_pic16.c: 213: _delay((unsigned long)((30)*(20000000/4000.0)));
  5542  0F9B  30C3               	movlw	195
  5543  0F9C  00AD               	movwf	??_LCDInit+1
  5544  0F9D  30CD               	movlw	205
  5545  0F9E  00AC               	movwf	??_LCDInit
  5546  0F9F                     u4957:	
  5547  0F9F  0BAC               	decfsz	??_LCDInit,f
  5548  0FA0  2F9F               	goto	u4957
  5549  0FA1  0BAD               	decfsz	??_LCDInit+1,f
  5550  0FA2  2F9F               	goto	u4957
  5551                           
  5552                           ;lcd_hd44780_pic16.c: 216: TRISC&=(~(0x0F<<4));
  5553  0FA3  300F               	movlw	15
  5554  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  5555  0FA5  1303               	bcf	3,6	;RP1=0, select bank0
  5556  0FA6  00AC               	movwf	??_LCDInit
  5557  0FA7  082C               	movf	??_LCDInit,w
  5558  0FA8  1683               	bsf	3,5	;RP0=1, select bank1
  5559  0FA9  1303               	bcf	3,6	;RP1=0, select bank1
  5560  0FAA  0587               	andwf	7,f	;volatile
  5561                           
  5562                           ;lcd_hd44780_pic16.c: 218: TRISCbits.TRISC3=0;
  5563  0FAB  1187               	bcf	7,3	;volatile
  5564                           
  5565                           ;lcd_hd44780_pic16.c: 219: TRISCbits.TRISC1=0;
  5566  0FAC  1087               	bcf	7,1	;volatile
  5567                           
  5568                           ;lcd_hd44780_pic16.c: 220: TRISCbits.TRISC2=0;
  5569  0FAD  1107               	bcf	7,2	;volatile
  5570                           
  5571                           ;lcd_hd44780_pic16.c: 222: PORTC&=(~(0x0F<<4));
  5572  0FAE  300F               	movlw	15
  5573  0FAF  1283               	bcf	3,5	;RP0=0, select bank0
  5574  0FB0  1303               	bcf	3,6	;RP1=0, select bank0
  5575  0FB1  00AC               	movwf	??_LCDInit
  5576  0FB2  082C               	movf	??_LCDInit,w
  5577  0FB3  0587               	andwf	7,f	;volatile
  5578                           
  5579                           ;lcd_hd44780_pic16.c: 224: (RC3=0);
  5580  0FB4  1187               	bcf	7,3	;volatile
  5581                           
  5582                           ;lcd_hd44780_pic16.c: 225: (RC2=0);
  5583  0FB5  1107               	bcf	7,2	;volatile
  5584                           
  5585                           ;lcd_hd44780_pic16.c: 226: (RC1=0);
  5586  0FB6  1087               	bcf	7,1	;volatile
  5587                           
  5588                           ;lcd_hd44780_pic16.c: 229: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  5589  0FB7  2FB8               	nop2	;2 cycle nop
  5590                           
  5591                           ;lcd_hd44780_pic16.c: 231: (RC3=1);
  5592  0FB8  1283               	bcf	3,5	;RP0=0, select bank0
  5593  0FB9  1303               	bcf	3,6	;RP1=0, select bank0
  5594  0FBA  1587               	bsf	7,3	;volatile
  5595                           
  5596                           ;lcd_hd44780_pic16.c: 232: PORTC|=((0b00000010)<<4);
  5597  0FBB  1687               	bsf	7,5	;volatile
  5598                           
  5599                           ;lcd_hd44780_pic16.c: 233: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5600  0FBC  2FBD               	nop2	;2 cycle nop
  5601  0FBD  2FBE               	nop2	;2 cycle nop
  5602  0FBE  0000               	nop
  5603                           
  5604                           ;lcd_hd44780_pic16.c: 234: (RC3=0);
  5605  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  5606  0FC0  1303               	bcf	3,6	;RP1=0, select bank0
  5607  0FC1  1187               	bcf	7,3	;volatile
  5608                           
  5609                           ;lcd_hd44780_pic16.c: 235: _delay((unsigned long)((1)*(20000000/4000000.0)));
  5610  0FC2  2FC3               	nop2	;2 cycle nop
  5611  0FC3  2FC4               	nop2	;2 cycle nop
  5612  0FC4  0000               	nop
  5613                           
  5614                           ;lcd_hd44780_pic16.c: 238: LCDBusyLoop();
  5615  0FC5  120A  158A  2730  120A  158A  	fcall	_LCDBusyLoop
  5616                           
  5617                           ;lcd_hd44780_pic16.c: 243: (LCDByte(0b00101000,0));
  5618  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  5619  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  5620  0FCC  01A5               	clrf	LCDByte@isdata
  5621  0FCD  3028               	movlw	40
  5622  0FCE  120A  158A  25BE  120A  158A  	fcall	_LCDByte
  5623                           
  5624                           ;lcd_hd44780_pic16.c: 244: (LCDByte(0b00001100|style,0));
  5625  0FD3  1283               	bcf	3,5	;RP0=0, select bank0
  5626  0FD4  1303               	bcf	3,6	;RP1=0, select bank0
  5627  0FD5  01A5               	clrf	LCDByte@isdata
  5628  0FD6  082E               	movf	LCDInit@style,w
  5629  0FD7  380C               	iorlw	12
  5630  0FD8  120A  158A  25BE  120A  158A  	fcall	_LCDByte
  5631                           
  5632                           ;lcd_hd44780_pic16.c: 247: (LCDByte(0b01000000,0));
  5633  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  5634  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  5635  0FDF  01A5               	clrf	LCDByte@isdata
  5636  0FE0  3040               	movlw	64
  5637  0FE1  120A  158A  25BE  120A  158A  	fcall	_LCDByte
  5638                           
  5639                           ;lcd_hd44780_pic16.c: 249: uint8_t __i;
  5640                           ;lcd_hd44780_pic16.c: 250: for(__i=0;__i<sizeof(__cgram);__i++)
  5641  0FE6  1283               	bcf	3,5	;RP0=0, select bank0
  5642  0FE7  1303               	bcf	3,6	;RP1=0, select bank0
  5643  0FE8  01AF               	clrf	LCDInit@__i
  5644  0FE9                     L3:	
  5645  0FE9  3008               	movlw	8
  5646  0FEA  022F               	subwf	LCDInit@__i,w
  5647  0FEB  1803               	btfsc	3,0
  5648  0FEC  0008               	return
  5649                           
  5650                           ;lcd_hd44780_pic16.c: 251: (LCDByte(__cgram[__i],1));
  5651  0FED  01A5               	clrf	LCDByte@isdata
  5652  0FEE  0AA5               	incf	LCDByte@isdata,f
  5653  0FEF  082F               	movf	LCDInit@__i,w
  5654  0FF0  3EC3               	addlw	(low (___cgram| 0))& (0+255)
  5655  0FF1  0084               	movwf	4
  5656  0FF2  1383               	bcf	3,7	;select IRP bank1
  5657  0FF3  0800               	movf	0,w
  5658  0FF4  120A  158A  25BE  120A  158A  	fcall	_LCDByte
  5659  0FF9  3001               	movlw	1
  5660  0FFA  1283               	bcf	3,5	;RP0=0, select bank0
  5661  0FFB  1303               	bcf	3,6	;RP1=0, select bank0
  5662  0FFC  00AC               	movwf	??_LCDInit
  5663  0FFD  082C               	movf	??_LCDInit,w
  5664  0FFE  07AF               	addwf	LCDInit@__i,f
  5665  0FFF  2FE9               	goto	L3
  5666  1000                     __end_of_LCDInit:	
  5667                           
  5668                           	psect	text27
  5669  0CD0                     __ptext27:	
  5670 ;; *************** function _IOInit *****************
  5671 ;; Defined at:
  5672 ;;		line 51 in file "do_am.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;		None
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;		None
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  1    wreg      void 
  5679 ;; Registers used:
  5680 ;;		None
  5681 ;; Tracked objects:
  5682 ;;		On entry : 0/0
  5683 ;;		On exit  : 0/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5686 ;;      Params:         0       0       0       0       0
  5687 ;;      Locals:         0       0       0       0       0
  5688 ;;      Temps:          0       0       0       0       0
  5689 ;;      Totals:         0       0       0       0       0
  5690 ;;Total ram usage:        0 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    3
  5693 ;; This function calls:
  5694 ;;		Nothing
  5695 ;; This function is called by:
  5696 ;;		_main
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           
  5701                           ;psect for function _IOInit
  5702  0CD0                     _IOInit:	
  5703                           
  5704                           ;do_am.c: 54: (TRISBbits.TRISB2 = 1);
  5705                           
  5706                           ;incstack = 0
  5707                           ; Regs used in _IOInit: []
  5708  0CD0  1683               	bsf	3,5	;RP0=1, select bank1
  5709  0CD1  1303               	bcf	3,6	;RP1=0, select bank1
  5710  0CD2  1506               	bsf	6,2	;volatile
  5711                           
  5712                           ;do_am.c: 55: ANSELHbits.ANS8 = 0;
  5713  0CD3  1683               	bsf	3,5	;RP0=1, select bank3
  5714  0CD4  1703               	bsf	3,6	;RP1=1, select bank3
  5715  0CD5  1009               	bcf	9,0	;volatile
  5716                           
  5717                           ;do_am.c: 57: (TRISBbits.TRISB0 = 1);
  5718  0CD6  1683               	bsf	3,5	;RP0=1, select bank1
  5719  0CD7  1303               	bcf	3,6	;RP1=0, select bank1
  5720  0CD8  1406               	bsf	6,0	;volatile
  5721                           
  5722                           ;do_am.c: 58: ANSELHbits.ANS12 = 0;
  5723  0CD9  1683               	bsf	3,5	;RP0=1, select bank3
  5724  0CDA  1703               	bsf	3,6	;RP1=1, select bank3
  5725  0CDB  1209               	bcf	9,4	;volatile
  5726                           
  5727                           ;do_am.c: 60: INTCONbits.GIE = 1;
  5728  0CDC  178B               	bsf	11,7	;volatile
  5729                           
  5730                           ;do_am.c: 61: INTCONbits.INTE = 1;
  5731  0CDD  160B               	bsf	11,4	;volatile
  5732                           
  5733                           ;do_am.c: 62: INTCONbits.INTF = 0;
  5734  0CDE  108B               	bcf	11,1	;volatile
  5735                           
  5736                           ;do_am.c: 63: OPTION_REGbits.INTEDG = 0;
  5737  0CDF  1683               	bsf	3,5	;RP0=1, select bank1
  5738  0CE0  1303               	bcf	3,6	;RP1=0, select bank1
  5739  0CE1  1301               	bcf	1,6	;volatile
  5740                           
  5741                           ;do_am.c: 65: (TRISAbits.TRISA0 = 1);
  5742  0CE2  1405               	bsf	5,0	;volatile
  5743                           
  5744                           ;do_am.c: 66: ANSELbits.ANS0 = 0;
  5745  0CE3  1683               	bsf	3,5	;RP0=1, select bank3
  5746  0CE4  1703               	bsf	3,6	;RP1=1, select bank3
  5747  0CE5  1008               	bcf	8,0	;volatile
  5748                           
  5749                           ;do_am.c: 68: (TRISAbits.TRISA1 = 1);
  5750  0CE6  1683               	bsf	3,5	;RP0=1, select bank1
  5751  0CE7  1303               	bcf	3,6	;RP1=0, select bank1
  5752  0CE8  1485               	bsf	5,1	;volatile
  5753                           
  5754                           ;do_am.c: 69: ANSELbits.ANS1 = 0;
  5755  0CE9  1683               	bsf	3,5	;RP0=1, select bank3
  5756  0CEA  1703               	bsf	3,6	;RP1=1, select bank3
  5757  0CEB  1088               	bcf	8,1	;volatile
  5758                           
  5759                           ;do_am.c: 70: (TRISAbits.TRISA2 = 1);
  5760  0CEC  1683               	bsf	3,5	;RP0=1, select bank1
  5761  0CED  1303               	bcf	3,6	;RP1=0, select bank1
  5762  0CEE  1505               	bsf	5,2	;volatile
  5763                           
  5764                           ;do_am.c: 71: ANSELbits.ANS2 = 0;
  5765  0CEF  1683               	bsf	3,5	;RP0=1, select bank3
  5766  0CF0  1703               	bsf	3,6	;RP1=1, select bank3
  5767  0CF1  1108               	bcf	8,2	;volatile
  5768                           
  5769                           ;do_am.c: 72: (TRISAbits.TRISA3 = 1);
  5770  0CF2  1683               	bsf	3,5	;RP0=1, select bank1
  5771  0CF3  1303               	bcf	3,6	;RP1=0, select bank1
  5772  0CF4  1585               	bsf	5,3	;volatile
  5773                           
  5774                           ;do_am.c: 73: ANSELbits.ANS3 = 0;
  5775  0CF5  1683               	bsf	3,5	;RP0=1, select bank3
  5776  0CF6  1703               	bsf	3,6	;RP1=1, select bank3
  5777  0CF7  1188               	bcf	8,3	;volatile
  5778                           
  5779                           ;do_am.c: 75: (TRISBbits.TRISB1 = 0);
  5780  0CF8  1683               	bsf	3,5	;RP0=1, select bank1
  5781  0CF9  1303               	bcf	3,6	;RP1=0, select bank1
  5782  0CFA  1086               	bcf	6,1	;volatile
  5783                           
  5784                           ;do_am.c: 76: ANSELHbits.ANS10 = 0;
  5785  0CFB  1683               	bsf	3,5	;RP0=1, select bank3
  5786  0CFC  1703               	bsf	3,6	;RP1=1, select bank3
  5787  0CFD  1109               	bcf	9,2	;volatile
  5788                           
  5789                           ;do_am.c: 78: (TRISAbits.TRISA4 = 0);
  5790  0CFE  1683               	bsf	3,5	;RP0=1, select bank1
  5791  0CFF  1303               	bcf	3,6	;RP1=0, select bank1
  5792  0D00  1205               	bcf	5,4	;volatile
  5793                           
  5794                           ;do_am.c: 80: (TRISAbits.TRISA5 = 0);
  5795  0D01  1285               	bcf	5,5	;volatile
  5796                           
  5797                           ;do_am.c: 81: ANSELbits.ANS4 = 0;
  5798  0D02  1683               	bsf	3,5	;RP0=1, select bank3
  5799  0D03  1703               	bsf	3,6	;RP1=1, select bank3
  5800  0D04  1208               	bcf	8,4	;volatile
  5801                           
  5802                           ;do_am.c: 83: (TRISAbits.TRISA6 = 0);
  5803  0D05  1683               	bsf	3,5	;RP0=1, select bank1
  5804  0D06  1303               	bcf	3,6	;RP1=0, select bank1
  5805  0D07  1305               	bcf	5,6	;volatile
  5806                           
  5807                           ;do_am.c: 85: (TRISAbits.TRISA7 = 0);
  5808  0D08  1385               	bcf	5,7	;volatile
  5809                           
  5810                           ;do_am.c: 87: RB1 = 1;
  5811  0D09  1283               	bcf	3,5	;RP0=0, select bank0
  5812  0D0A  1303               	bcf	3,6	;RP1=0, select bank0
  5813  0D0B  1486               	bsf	6,1	;volatile
  5814                           
  5815                           ;do_am.c: 90: (TRISBbits.TRISB4 = 1);
  5816  0D0C  1683               	bsf	3,5	;RP0=1, select bank1
  5817  0D0D  1303               	bcf	3,6	;RP1=0, select bank1
  5818  0D0E  1606               	bsf	6,4	;volatile
  5819                           
  5820                           ;do_am.c: 91: ANSELHbits.ANS11 = 0;
  5821  0D0F  1683               	bsf	3,5	;RP0=1, select bank3
  5822  0D10  1703               	bsf	3,6	;RP1=1, select bank3
  5823  0D11  1189               	bcf	9,3	;volatile
  5824                           
  5825                           ;do_am.c: 93: (TRISBbits.TRISB6 = 1);
  5826  0D12  1683               	bsf	3,5	;RP0=1, select bank1
  5827  0D13  1303               	bcf	3,6	;RP1=0, select bank1
  5828  0D14  1706               	bsf	6,6	;volatile
  5829                           
  5830                           ;do_am.c: 95: (TRISBbits.TRISB5 = 1);
  5831  0D15  1686               	bsf	6,5	;volatile
  5832                           
  5833                           ;do_am.c: 96: ANSELHbits.ANS13 = 0;
  5834  0D16  1683               	bsf	3,5	;RP0=1, select bank3
  5835  0D17  1703               	bsf	3,6	;RP1=1, select bank3
  5836  0D18  1289               	bcf	9,5	;volatile
  5837                           
  5838                           ;do_am.c: 98: (TRISBbits.TRISB7 = 1);
  5839  0D19  1683               	bsf	3,5	;RP0=1, select bank1
  5840  0D1A  1303               	bcf	3,6	;RP1=0, select bank1
  5841  0D1B  1786               	bsf	6,7	;volatile
  5842  0D1C  0008               	return
  5843  0D1D                     __end_of_IOInit:	
  5844                           
  5845                           	psect	text28
  5846  0C86                     __ptext28:	
  5847 ;; *************** function _ConnInit *****************
  5848 ;; Defined at:
  5849 ;;		line 41 in file "do_am.c"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;		None
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  i               1    2[BANK0 ] unsigned char 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;                  1    wreg      void 
  5856 ;; Registers used:
  5857 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5863 ;;      Params:         0       0       0       0       0
  5864 ;;      Locals:         0       1       0       0       0
  5865 ;;      Temps:          0       2       0       0       0
  5866 ;;      Totals:         0       3       0       0       0
  5867 ;;Total ram usage:        3 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:    3
  5870 ;; This function calls:
  5871 ;;		Nothing
  5872 ;; This function is called by:
  5873 ;;		_main
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           
  5878                           ;psect for function _ConnInit
  5879  0C86                     _ConnInit:	
  5880                           
  5881                           ;do_am.c: 43: for(uint8_t i = 0; i < 8; i++)
  5882                           
  5883                           ;incstack = 0
  5884                           ; Regs used in _ConnInit: [wreg-fsr0h+status,2+status,0]
  5885  0C86  1283               	bcf	3,5	;RP0=0, select bank0
  5886  0C87  1303               	bcf	3,6	;RP1=0, select bank0
  5887  0C88  01A2               	clrf	ConnInit@i
  5888  0C89                     L4:	
  5889  0C89  3008               	movlw	8
  5890  0C8A  0222               	subwf	ConnInit@i,w
  5891  0C8B  1803               	btfsc	3,0
  5892  0C8C  0008               	return
  5893                           
  5894                           ;do_am.c: 44: {
  5895                           ;do_am.c: 45: client_conn[i].from = 8;
  5896  0C8D  3008               	movlw	8
  5897  0C8E  00A0               	movwf	??_ConnInit
  5898  0C8F  0822               	movf	ConnInit@i,w
  5899  0C90  00A1               	movwf	??_ConnInit+1
  5900  0C91  3001               	movlw	1
  5901  0C92                     u4375:	
  5902  0C92  1003               	clrc
  5903  0C93  0DA1               	rlf	??_ConnInit+1,f
  5904  0C94  3EFF               	addlw	-1
  5905  0C95  1D03               	skipz
  5906  0C96  2C92               	goto	u4375
  5907  0C97  1003               	clrc
  5908  0C98  0D21               	rlf	??_ConnInit+1,w
  5909  0C99  3E90               	addlw	(low (_client_conn| (0+256)))& (0+255)
  5910  0C9A  0084               	movwf	4
  5911  0C9B  0820               	movf	??_ConnInit,w
  5912  0C9C  1783               	bsf	3,7	;select IRP bank3
  5913  0C9D  0080               	movwf	0
  5914                           
  5915                           ;do_am.c: 46: client_conn[i].to = i;
  5916  0C9E  0822               	movf	ConnInit@i,w
  5917  0C9F  00A0               	movwf	??_ConnInit
  5918  0CA0  0822               	movf	ConnInit@i,w
  5919  0CA1  00A1               	movwf	??_ConnInit+1
  5920  0CA2  3001               	movlw	1
  5921  0CA3                     u4385:	
  5922  0CA3  1003               	clrc
  5923  0CA4  0DA1               	rlf	??_ConnInit+1,f
  5924  0CA5  3EFF               	addlw	-1
  5925  0CA6  1D03               	skipz
  5926  0CA7  2CA3               	goto	u4385
  5927  0CA8  1003               	clrc
  5928  0CA9  0D21               	rlf	??_ConnInit+1,w
  5929  0CAA  3E01               	addlw	1
  5930  0CAB  3E90               	addlw	(low (_client_conn| (0+256)))& (0+255)
  5931  0CAC  0084               	movwf	4
  5932  0CAD  0820               	movf	??_ConnInit,w
  5933  0CAE  0080               	movwf	0
  5934                           
  5935                           ;do_am.c: 47: client_conn[i].msgid = 0;
  5936  0CAF  0822               	movf	ConnInit@i,w
  5937  0CB0  00A0               	movwf	??_ConnInit
  5938  0CB1  3001               	movlw	1
  5939  0CB2                     u4395:	
  5940  0CB2  1003               	clrc
  5941  0CB3  0DA0               	rlf	??_ConnInit,f
  5942  0CB4  3EFF               	addlw	-1
  5943  0CB5  1D03               	skipz
  5944  0CB6  2CB2               	goto	u4395
  5945  0CB7  1003               	clrc
  5946  0CB8  0D20               	rlf	??_ConnInit,w
  5947  0CB9  3E02               	addlw	2
  5948  0CBA  3E90               	addlw	(low (_client_conn| (0+256)))& (0+255)
  5949  0CBB  0084               	movwf	4
  5950  0CBC  0180               	clrf	0
  5951                           
  5952                           ;do_am.c: 48: client_conn[i].available = 0;
  5953  0CBD  0822               	movf	ConnInit@i,w
  5954  0CBE  00A0               	movwf	??_ConnInit
  5955  0CBF  3001               	movlw	1
  5956  0CC0                     u4405:	
  5957  0CC0  1003               	clrc
  5958  0CC1  0DA0               	rlf	??_ConnInit,f
  5959  0CC2  3EFF               	addlw	-1
  5960  0CC3  1D03               	skipz
  5961  0CC4  2CC0               	goto	u4405
  5962  0CC5  1003               	clrc
  5963  0CC6  0D20               	rlf	??_ConnInit,w
  5964  0CC7  3E03               	addlw	3
  5965  0CC8  3E90               	addlw	(low (_client_conn| (0+256)))& (0+255)
  5966  0CC9  0084               	movwf	4
  5967  0CCA  0180               	clrf	0
  5968  0CCB  3001               	movlw	1
  5969  0CCC  00A0               	movwf	??_ConnInit
  5970  0CCD  0820               	movf	??_ConnInit,w
  5971  0CCE  07A2               	addwf	ConnInit@i,f
  5972  0CCF  2C89               	goto	L4
  5973  0CD0                     __end_of_ConnInit:	
  5974                           
  5975                           	psect	text29
  5976  0B79                     __ptext29:	
  5977 ;; *************** function _ClearMenu *****************
  5978 ;; Defined at:
  5979 ;;		line 28 in file "menu.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;		None
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  i               1   19[BANK0 ] char 
  5984 ;;  count           1   18[BANK0 ] char 
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  1    wreg      void 
  5987 ;; Registers used:
  5988 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5994 ;;      Params:         0       0       0       0       0
  5995 ;;      Locals:         0       2       0       0       0
  5996 ;;      Temps:          0       1       0       0       0
  5997 ;;      Totals:         0       3       0       0       0
  5998 ;;Total ram usage:        3 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    6
  6001 ;; This function calls:
  6002 ;;		_LCDByte
  6003 ;;		_LCDGotoXY
  6004 ;;		_LCDWriteString
  6005 ;; This function is called by:
  6006 ;;		_main
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           
  6011                           ;psect for function _ClearMenu
  6012  0B79                     _ClearMenu:	
  6013                           
  6014                           ;menu.c: 30: { LCDGotoXY(0,0); int8_t count = LCDWriteString(""); for(int8_t i = count +
      +                           0; i < 16; i++) { (LCDByte(' ',1)); } };
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _ClearMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6018  0B79  1283               	bcf	3,5	;RP0=0, select bank0
  6019  0B7A  1303               	bcf	3,6	;RP1=0, select bank0
  6020  0B7B  01AC               	clrf	LCDGotoXY@y
  6021  0B7C  3000               	movlw	0
  6022  0B7D  120A  158A  22C9  120A  158A  	fcall	_LCDGotoXY
  6023  0B82  305C               	movlw	(low (((STR_22+4)-__stringbase)| (0+32768)))& (0+255)
  6024  0B83  1283               	bcf	3,5	;RP0=0, select bank0
  6025  0B84  1303               	bcf	3,6	;RP1=0, select bank0
  6026  0B85  00AC               	movwf	LCDWriteString@msg
  6027  0B86  3080               	movlw	128
  6028  0B87  00AD               	movwf	LCDWriteString@msg+1
  6029  0B88  120A  158A  26CE  120A  158A  	fcall	_LCDWriteString
  6030  0B8D  1283               	bcf	3,5	;RP0=0, select bank0
  6031  0B8E  1303               	bcf	3,6	;RP1=0, select bank0
  6032  0B8F  00B1               	movwf	??_ClearMenu
  6033  0B90  0831               	movf	??_ClearMenu,w
  6034  0B91  00B2               	movwf	ClearMenu@count
  6035  0B92  0832               	movf	ClearMenu@count,w
  6036  0B93  00B1               	movwf	??_ClearMenu
  6037  0B94  0831               	movf	??_ClearMenu,w
  6038  0B95  00B3               	movwf	ClearMenu@i
  6039  0B96                     L5:	
  6040  0B96  0833               	movf	ClearMenu@i,w
  6041  0B97  3A80               	xorlw	128
  6042  0B98  3E70               	addlw	-144
  6043  0B99  1803               	btfsc	3,0
  6044  0B9A  0008               	return
  6045  0B9B  01A5               	clrf	LCDByte@isdata
  6046  0B9C  0AA5               	incf	LCDByte@isdata,f
  6047  0B9D  3020               	movlw	32
  6048  0B9E  120A  158A  25BE  120A  158A  	fcall	_LCDByte
  6049  0BA3  3001               	movlw	1
  6050  0BA4  1283               	bcf	3,5	;RP0=0, select bank0
  6051  0BA5  1303               	bcf	3,6	;RP1=0, select bank0
  6052  0BA6  00B1               	movwf	??_ClearMenu
  6053  0BA7  0831               	movf	??_ClearMenu,w
  6054  0BA8  07B3               	addwf	ClearMenu@i,f
  6055  0BA9  2B96               	goto	L5
  6056  0BAA                     __end_of_ClearMenu:	
  6057                           
  6058                           	psect	text30
  6059  0ECE                     __ptext30:	
  6060 ;; *************** function _LCDWriteString *****************
  6061 ;; Defined at:
  6062 ;;		line 283 in file "lcd_hd44780_pic16.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;  msg             2   12[BANK0 ] PTR const unsigned char 
  6065 ;;		 -> STR_26(1), STR_25(5), STR_24(5), STR_23(5), 
  6066 ;;		 -> STR_22(5), STR_21(5), STR_20(3), STR_19(12), 
  6067 ;;		 -> STR_18(13), STR_17(10), STR_16(10), STR_14(1), 
  6068 ;;		 -> dump_conn@s(32), STR_12(1), dump_msg@s(32), STR_10(1), 
  6069 ;;		 -> STR_8(1), STR_6(1), STR_4(1), STR_2(1), 
  6070 ;;		 -> sdebug(32), 
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;  cc              1   16[BANK0 ] char 
  6073 ;;  count           1   15[BANK0 ] char 
  6074 ;; Return value:  Size  Location     Type
  6075 ;;                  1    wreg      char 
  6076 ;; Registers used:
  6077 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6078 ;; Tracked objects:
  6079 ;;		On entry : 0/0
  6080 ;;		On exit  : 0/0
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6083 ;;      Params:         0       2       0       0       0
  6084 ;;      Locals:         0       2       0       0       0
  6085 ;;      Temps:          0       1       0       0       0
  6086 ;;      Totals:         0       5       0       0       0
  6087 ;;Total ram usage:        5 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:    5
  6090 ;; This function calls:
  6091 ;;		_LCDByte
  6092 ;; This function is called by:
  6093 ;;		_dump_msg
  6094 ;;		_main
  6095 ;;		_ShowMenu
  6096 ;;		_ClearMenu
  6097 ;;		_debug_1
  6098 ;;		_debug_2
  6099 ;;		_debug_3
  6100 ;;		_debug_4
  6101 ;;		_debug_5
  6102 ;;		_dump_conn
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           
  6107                           ;psect for function _LCDWriteString
  6108  0ECE                     _LCDWriteString:	
  6109                           
  6110                           ;lcd_hd44780_pic16.c: 285: int8_t count = 0;
  6111                           
  6112                           ;incstack = 0
  6113                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6114  0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  6115  0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  6116  0ED0  01AF               	clrf	LCDWriteString@count
  6117  0ED1                     l3730:	
  6118                           ;lcd_hd44780_pic16.c: 286: while(*msg!='\0')
  6119                           
  6120  0ED1  082D               	movf	LCDWriteString@msg+1,w
  6121  0ED2  00FF               	movwf	127
  6122  0ED3  082C               	movf	LCDWriteString@msg,w
  6123  0ED4  0084               	movwf	4
  6124  0ED5  120A  118A  2600  120A  158A  	fcall	stringtab
  6125  0EDA  3A00               	xorlw	0
  6126  0EDB  1903               	btfsc	3,2
  6127  0EDC  2F2E               	goto	l3732
  6128                           
  6129                           ;lcd_hd44780_pic16.c: 287: {
  6130                           ;lcd_hd44780_pic16.c: 289: if(*msg=='%')
  6131  0EDD  082D               	movf	LCDWriteString@msg+1,w
  6132  0EDE  00FF               	movwf	127
  6133  0EDF  082C               	movf	LCDWriteString@msg,w
  6134  0EE0  0084               	movwf	4
  6135  0EE1  120A  118A  2600  120A  158A  	fcall	stringtab
  6136  0EE6  3A25               	xorlw	37
  6137  0EE7  1D03               	skipz
  6138  0EE8  2F13               	goto	l3724
  6139                           
  6140                           ;lcd_hd44780_pic16.c: 290: {
  6141                           ;lcd_hd44780_pic16.c: 291: msg++;
  6142  0EE9  3001               	movlw	1
  6143  0EEA  07AC               	addwf	LCDWriteString@msg,f
  6144  0EEB  1803               	skipnc
  6145  0EEC  0AAD               	incf	LCDWriteString@msg+1,f
  6146                           
  6147                           ;lcd_hd44780_pic16.c: 292: int8_t cc=*msg-'0';
  6148  0EED  082D               	movf	LCDWriteString@msg+1,w
  6149  0EEE  00FF               	movwf	127
  6150  0EEF  082C               	movf	LCDWriteString@msg,w
  6151  0EF0  0084               	movwf	4
  6152  0EF1  120A  118A  2600  120A  158A  	fcall	stringtab
  6153  0EF6  3ED0               	addlw	-48
  6154  0EF7  00AE               	movwf	??_LCDWriteString
  6155  0EF8  082E               	movf	??_LCDWriteString,w
  6156  0EF9  00B0               	movwf	LCDWriteString@cc
  6157                           
  6158                           ;lcd_hd44780_pic16.c: 294: if(cc>=0 && cc<=7)
  6159  0EFA  1BB0               	btfsc	LCDWriteString@cc,7
  6160  0EFB  2F05               	goto	l3716
  6161  0EFC  0830               	movf	LCDWriteString@cc,w
  6162  0EFD  3A80               	xorlw	128
  6163  0EFE  3E78               	addlw	-136
  6164  0EFF  1803               	skipnc
  6165  0F00  2F05               	goto	l3716
  6166                           
  6167                           ;lcd_hd44780_pic16.c: 295: {
  6168                           ;lcd_hd44780_pic16.c: 296: (LCDByte(cc,1));
  6169  0F01  01A5               	clrf	LCDByte@isdata
  6170  0F02  0AA5               	incf	LCDByte@isdata,f
  6171  0F03  0830               	movf	LCDWriteString@cc,w
  6172  0F04  2F1E               	goto	L6
  6173  0F05                     l3716:	
  6174                           ;lcd_hd44780_pic16.c: 298: }
  6175                           
  6176                           ;lcd_hd44780_pic16.c: 297: count++;
  6177                           
  6178                           
  6179                           ;lcd_hd44780_pic16.c: 299: else
  6180                           ;lcd_hd44780_pic16.c: 300: {
  6181                           ;lcd_hd44780_pic16.c: 301: (LCDByte('%',1));
  6182  0F05  01A5               	clrf	LCDByte@isdata
  6183  0F06  0AA5               	incf	LCDByte@isdata,f
  6184  0F07  3025               	movlw	37
  6185  0F08  120A  158A  25BE  120A  158A  	fcall	_LCDByte
  6186                           
  6187                           ;lcd_hd44780_pic16.c: 302: count++;
  6188  0F0D  3001               	movlw	1
  6189  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  6190  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  6191  0F10  00AE               	movwf	??_LCDWriteString
  6192  0F11  082E               	movf	??_LCDWriteString,w
  6193  0F12  07AF               	addwf	LCDWriteString@count,f
  6194  0F13                     l3724:	
  6195                           ;lcd_hd44780_pic16.c: 305: }
  6196                           ;lcd_hd44780_pic16.c: 306: }
  6197                           
  6198                           ;lcd_hd44780_pic16.c: 304: count++;
  6199                           
  6200                           ;lcd_hd44780_pic16.c: 303: (LCDByte(*msg,1));
  6201                           
  6202                           
  6203                           ;lcd_hd44780_pic16.c: 307: else
  6204                           ;lcd_hd44780_pic16.c: 308: {
  6205                           ;lcd_hd44780_pic16.c: 309: (LCDByte(*msg,1));
  6206  0F13  01A5               	clrf	LCDByte@isdata
  6207  0F14  0AA5               	incf	LCDByte@isdata,f
  6208  0F15  082D               	movf	LCDWriteString@msg+1,w
  6209  0F16  00FF               	movwf	127
  6210  0F17  082C               	movf	LCDWriteString@msg,w
  6211  0F18  0084               	movwf	4
  6212  0F19  120A  118A  2600  120A  158A  	fcall	stringtab
  6213  0F1E                     L6:	
  6214  0F1E  120A  158A  25BE  120A  158A  	fcall	_LCDByte
  6215                           
  6216                           ;lcd_hd44780_pic16.c: 310: count++;
  6217  0F23  3001               	movlw	1
  6218  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  6219  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  6220  0F26  00AE               	movwf	??_LCDWriteString
  6221  0F27  082E               	movf	??_LCDWriteString,w
  6222  0F28  07AF               	addwf	LCDWriteString@count,f
  6223                           
  6224                           ;lcd_hd44780_pic16.c: 311: }
  6225                           ;lcd_hd44780_pic16.c: 312: msg++;
  6226  0F29  3001               	movlw	1
  6227  0F2A  07AC               	addwf	LCDWriteString@msg,f
  6228  0F2B  1803               	skipnc
  6229  0F2C  0AAD               	incf	LCDWriteString@msg+1,f
  6230  0F2D  2ED1               	goto	l3730
  6231  0F2E                     l3732:	
  6232                           
  6233                           ;lcd_hd44780_pic16.c: 313: }
  6234                           ;lcd_hd44780_pic16.c: 315: return count;
  6235  0F2E  082F               	movf	LCDWriteString@count,w
  6236  0F2F  0008               	return
  6237  0F30                     __end_of_LCDWriteString:	
  6238                           
  6239                           	psect	text31
  6240  0AC9                     __ptext31:	
  6241 ;; *************** function _LCDGotoXY *****************
  6242 ;; Defined at:
  6243 ;;		line 367 in file "lcd_hd44780_pic16.c"
  6244 ;; Parameters:    Size  Location     Type
  6245 ;;  x               1    wreg     unsigned char 
  6246 ;;  y               1   12[BANK0 ] unsigned char 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  x               1   14[BANK0 ] unsigned char 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      void 
  6251 ;; Registers used:
  6252 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6258 ;;      Params:         0       1       0       0       0
  6259 ;;      Locals:         0       1       0       0       0
  6260 ;;      Temps:          0       1       0       0       0
  6261 ;;      Totals:         0       3       0       0       0
  6262 ;;Total ram usage:        3 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    5
  6265 ;; This function calls:
  6266 ;;		_LCDByte
  6267 ;; This function is called by:
  6268 ;;		_dump_msg
  6269 ;;		_main
  6270 ;;		_ShowMenu
  6271 ;;		_ClearMenu
  6272 ;;		_debug_1
  6273 ;;		_debug_2
  6274 ;;		_debug_3
  6275 ;;		_debug_4
  6276 ;;		_debug_5
  6277 ;;		_dump_conn
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           
  6282                           ;psect for function _LCDGotoXY
  6283  0AC9                     _LCDGotoXY:	
  6284                           
  6285                           ;incstack = 0
  6286                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6287                           ;LCDGotoXY@x stored from wreg
  6288  0AC9  1283               	bcf	3,5	;RP0=0, select bank0
  6289  0ACA  1303               	bcf	3,6	;RP1=0, select bank0
  6290  0ACB  00AE               	movwf	LCDGotoXY@x
  6291                           
  6292                           ;lcd_hd44780_pic16.c: 369: if(x>=20) return;
  6293  0ACC  3014               	movlw	20
  6294  0ACD  022E               	subwf	LCDGotoXY@x,w
  6295  0ACE  1803               	btfsc	3,0
  6296  0ACF  0008               	return
  6297  0AD0  2ADA               	goto	l3696
  6298  0AD1                     l398:	
  6299                           ;lcd_hd44780_pic16.c: 377: case 1:
  6300                           
  6301                           ;lcd_hd44780_pic16.c: 376: break;
  6302                           
  6303                           ;lcd_hd44780_pic16.c: 374: {
  6304                           ;lcd_hd44780_pic16.c: 375: case 0:
  6305                           
  6306                           ;lcd_hd44780_pic16.c: 373: switch(y)
  6307                           
  6308                           
  6309                           ;lcd_hd44780_pic16.c: 378: x|=0b01000000;
  6310  0AD1  172E               	bsf	LCDGotoXY@x,6
  6311                           
  6312                           ;lcd_hd44780_pic16.c: 379: break;
  6313  0AD2  2AE8               	goto	l397
  6314  0AD3                     l3690:	
  6315                           ;lcd_hd44780_pic16.c: 380: case 2:
  6316                           
  6317                           
  6318                           ;lcd_hd44780_pic16.c: 381: x+=0x14;
  6319  0AD3  3014               	movlw	20
  6320  0AD4  2AD6               	goto	L7
  6321  0AD5                     l3692:	
  6322                           ;lcd_hd44780_pic16.c: 383: case 3:
  6323                           
  6324                           ;lcd_hd44780_pic16.c: 382: break;
  6325                           
  6326                           
  6327                           ;lcd_hd44780_pic16.c: 384: x+=0x54;
  6328  0AD5  3054               	movlw	84
  6329  0AD6                     L7:	
  6330  0AD6  00AD               	movwf	??_LCDGotoXY
  6331  0AD7  082D               	movf	??_LCDGotoXY,w
  6332  0AD8  07AE               	addwf	LCDGotoXY@x,f
  6333                           
  6334                           ;lcd_hd44780_pic16.c: 386: }
  6335                           
  6336                           ;lcd_hd44780_pic16.c: 385: break;
  6337  0AD9  2AE8               	goto	l397
  6338  0ADA                     l3696:	
  6339  0ADA  082C               	movf	LCDGotoXY@y,w
  6340                           
  6341                           ; Switch size 1, requested type "space"
  6342                           ; Number of cases is 4, Range of values is 0 to 3
  6343                           ; switch strategies available:
  6344                           ; Name         Instructions Cycles
  6345                           ; simple_byte           13     7 (average)
  6346                           ; direct_byte           20     8 (fixed)
  6347                           ; jumptable            260     6 (fixed)
  6348                           ;	Chosen strategy is simple_byte
  6349  0ADB  3A00               	xorlw	0	; case 0
  6350  0ADC  1903               	skipnz
  6351  0ADD  2AE8               	goto	l397
  6352  0ADE  3A01               	xorlw	1	; case 1
  6353  0ADF  1903               	skipnz
  6354  0AE0  2AD1               	goto	l398
  6355  0AE1  3A03               	xorlw	3	; case 2
  6356  0AE2  1903               	skipnz
  6357  0AE3  2AD3               	goto	l3690
  6358  0AE4  3A01               	xorlw	1	; case 3
  6359  0AE5  1903               	skipnz
  6360  0AE6  2AD5               	goto	l3692
  6361  0AE7  2AE8               	goto	l397
  6362  0AE8                     l397:	
  6363                           
  6364                           ;lcd_hd44780_pic16.c: 408: x|=0b10000000;
  6365  0AE8  17AE               	bsf	LCDGotoXY@x,7
  6366                           
  6367                           ;lcd_hd44780_pic16.c: 409: (LCDByte(x,0));
  6368  0AE9  01A5               	clrf	LCDByte@isdata
  6369  0AEA  082E               	movf	LCDGotoXY@x,w
  6370  0AEB  120A  158A  25BE   	fcall	_LCDByte
  6371  0AEE  0008               	return
  6372  0AEF                     __end_of_LCDGotoXY:	
  6373                           
  6374                           	psect	text32
  6375  0DBE                     __ptext32:	
  6376 ;; *************** function _LCDByte *****************
  6377 ;; Defined at:
  6378 ;;		line 80 in file "lcd_hd44780_pic16.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;  c               1    wreg     unsigned char 
  6381 ;;  isdata          1    5[BANK0 ] unsigned char 
  6382 ;; Auto vars:     Size  Location     Type
  6383 ;;  c               1   10[BANK0 ] unsigned char 
  6384 ;;  temp            1   11[BANK0 ] unsigned char 
  6385 ;;  ln              1    9[BANK0 ] unsigned char 
  6386 ;;  hn              1    8[BANK0 ] unsigned char 
  6387 ;; Return value:  Size  Location     Type
  6388 ;;                  1    wreg      void 
  6389 ;; Registers used:
  6390 ;;		wreg, status,2, status,0, pclath, cstack
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6396 ;;      Params:         0       1       0       0       0
  6397 ;;      Locals:         0       4       0       0       0
  6398 ;;      Temps:          0       2       0       0       0
  6399 ;;      Totals:         0       7       0       0       0
  6400 ;;Total ram usage:        7 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:    4
  6403 ;; This function calls:
  6404 ;;		_LCDBusyLoop
  6405 ;; This function is called by:
  6406 ;;		_dump_msg
  6407 ;;		_main
  6408 ;;		_LCDSetStyle
  6409 ;;		_LCDInit
  6410 ;;		_LCDWriteString
  6411 ;;		_LCDWriteInt
  6412 ;;		_LCDGotoXY
  6413 ;;		_ShowMenu
  6414 ;;		_ClearMenu
  6415 ;;		_debug_1
  6416 ;;		_debug_2
  6417 ;;		_debug_3
  6418 ;;		_debug_4
  6419 ;;		_debug_5
  6420 ;;		_dump_conn
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           
  6425                           ;psect for function _LCDByte
  6426  0DBE                     _LCDByte:	
  6427                           
  6428                           ;incstack = 0
  6429                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  6430                           ;LCDByte@c stored from wreg
  6431  0DBE  1283               	bcf	3,5	;RP0=0, select bank0
  6432  0DBF  1303               	bcf	3,6	;RP1=0, select bank0
  6433  0DC0  00AA               	movwf	LCDByte@c
  6434                           
  6435                           ;lcd_hd44780_pic16.c: 89: uint8_t hn,ln;
  6436                           ;lcd_hd44780_pic16.c: 90: uint8_t temp;
  6437                           ;lcd_hd44780_pic16.c: 92: hn=c>>4;
  6438  0DC1  082A               	movf	LCDByte@c,w
  6439  0DC2  00A6               	movwf	??_LCDByte
  6440  0DC3  3004               	movlw	4
  6441  0DC4                     u3725:	
  6442  0DC4  1003               	clrc
  6443  0DC5  0CA6               	rrf	??_LCDByte,f
  6444  0DC6  3EFF               	addlw	-1
  6445  0DC7  1D03               	skipz
  6446  0DC8  2DC4               	goto	u3725
  6447  0DC9  0826               	movf	??_LCDByte,w
  6448  0DCA  00A7               	movwf	??_LCDByte+1
  6449  0DCB  0827               	movf	??_LCDByte+1,w
  6450  0DCC  00A8               	movwf	LCDByte@hn
  6451                           
  6452                           ;lcd_hd44780_pic16.c: 93: ln=(c & 0x0F);
  6453  0DCD  082A               	movf	LCDByte@c,w
  6454  0DCE  390F               	andlw	15
  6455  0DCF  00A6               	movwf	??_LCDByte
  6456  0DD0  0826               	movf	??_LCDByte,w
  6457  0DD1  00A9               	movwf	LCDByte@ln
  6458                           
  6459                           ;lcd_hd44780_pic16.c: 95: if(isdata==0)
  6460  0DD2  0825               	movf	LCDByte@isdata,w
  6461  0DD3  1D03               	btfss	3,2
  6462  0DD4  2DD7               	goto	l348
  6463                           
  6464                           ;lcd_hd44780_pic16.c: 96: (RC1=0);
  6465  0DD5  1087               	bcf	7,1	;volatile
  6466  0DD6  2DD8               	goto	l349
  6467  0DD7                     l348:	
  6468                           
  6469                           ;lcd_hd44780_pic16.c: 97: else
  6470                           ;lcd_hd44780_pic16.c: 98: (RC1=1);
  6471  0DD7  1487               	bsf	7,1	;volatile
  6472  0DD8                     l349:	
  6473                           
  6474                           ;lcd_hd44780_pic16.c: 100: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  6475  0DD8  2DD9               	nop2	;2 cycle nop
  6476                           
  6477                           ;lcd_hd44780_pic16.c: 102: (RC3=1);
  6478  0DD9  1283               	bcf	3,5	;RP0=0, select bank0
  6479  0DDA  1303               	bcf	3,6	;RP1=0, select bank0
  6480  0DDB  1587               	bsf	7,3	;volatile
  6481                           
  6482                           ;lcd_hd44780_pic16.c: 106: temp=(PORTC & (~(0X0F<<4)))|((hn<<4));
  6483  0DDC  0828               	movf	LCDByte@hn,w
  6484  0DDD  00A6               	movwf	??_LCDByte
  6485  0DDE  3004               	movlw	4
  6486  0DDF                     u3745:	
  6487  0DDF  1003               	clrc
  6488  0DE0  0DA6               	rlf	??_LCDByte,f
  6489  0DE1  3EFF               	addlw	-1
  6490  0DE2  1D03               	skipz
  6491  0DE3  2DDF               	goto	u3745
  6492  0DE4  0807               	movf	7,w	;volatile
  6493  0DE5  390F               	andlw	15
  6494  0DE6  0426               	iorwf	??_LCDByte,w
  6495  0DE7  00A7               	movwf	??_LCDByte+1
  6496  0DE8  0827               	movf	??_LCDByte+1,w
  6497  0DE9  00AB               	movwf	LCDByte@temp
  6498                           
  6499                           ;lcd_hd44780_pic16.c: 107: PORTC=temp;
  6500  0DEA  082B               	movf	LCDByte@temp,w
  6501  0DEB  0087               	movwf	7	;volatile
  6502                           
  6503                           ;lcd_hd44780_pic16.c: 109: _delay((unsigned long)((1)*(20000000/4000000.0)));
  6504  0DEC  2DED               	nop2	;2 cycle nop
  6505  0DED  2DEE               	nop2	;2 cycle nop
  6506  0DEE  0000               	nop
  6507                           
  6508                           ;lcd_hd44780_pic16.c: 113: (RC3=0);
  6509  0DEF  1283               	bcf	3,5	;RP0=0, select bank0
  6510  0DF0  1303               	bcf	3,6	;RP1=0, select bank0
  6511  0DF1  1187               	bcf	7,3	;volatile
  6512                           
  6513                           ;lcd_hd44780_pic16.c: 115: _delay((unsigned long)((1)*(20000000/4000000.0)));
  6514  0DF2  2DF3               	nop2	;2 cycle nop
  6515  0DF3  2DF4               	nop2	;2 cycle nop
  6516  0DF4  0000               	nop
  6517                           
  6518                           ;lcd_hd44780_pic16.c: 118: (RC3=1);
  6519  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
  6520  0DF6  1303               	bcf	3,6	;RP1=0, select bank0
  6521  0DF7  1587               	bsf	7,3	;volatile
  6522                           
  6523                           ;lcd_hd44780_pic16.c: 120: temp=(PORTC & (~(0X0F<<4)))|((ln<<4));
  6524  0DF8  0829               	movf	LCDByte@ln,w
  6525  0DF9  00A6               	movwf	??_LCDByte
  6526  0DFA  3004               	movlw	4
  6527  0DFB                     u3755:	
  6528  0DFB  1003               	clrc
  6529  0DFC  0DA6               	rlf	??_LCDByte,f
  6530  0DFD  3EFF               	addlw	-1
  6531  0DFE  1D03               	skipz
  6532  0DFF  2DFB               	goto	u3755
  6533  0E00  0807               	movf	7,w	;volatile
  6534  0E01  390F               	andlw	15
  6535  0E02  0426               	iorwf	??_LCDByte,w
  6536  0E03  00A7               	movwf	??_LCDByte+1
  6537  0E04  0827               	movf	??_LCDByte+1,w
  6538  0E05  00AB               	movwf	LCDByte@temp
  6539                           
  6540                           ;lcd_hd44780_pic16.c: 122: PORTC=temp;
  6541  0E06  082B               	movf	LCDByte@temp,w
  6542  0E07  0087               	movwf	7	;volatile
  6543                           
  6544                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((1)*(20000000/4000000.0)));
  6545  0E08  2E09               	nop2	;2 cycle nop
  6546  0E09  2E0A               	nop2	;2 cycle nop
  6547  0E0A  0000               	nop
  6548                           
  6549                           ;lcd_hd44780_pic16.c: 128: (RC3=0);
  6550  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
  6551  0E0C  1303               	bcf	3,6	;RP1=0, select bank0
  6552  0E0D  1187               	bcf	7,3	;volatile
  6553                           
  6554                           ;lcd_hd44780_pic16.c: 130: _delay((unsigned long)((1)*(20000000/4000000.0)));
  6555  0E0E  2E0F               	nop2	;2 cycle nop
  6556  0E0F  2E10               	nop2	;2 cycle nop
  6557  0E10  0000               	nop
  6558                           
  6559                           ;lcd_hd44780_pic16.c: 132: LCDBusyLoop();
  6560  0E11  120A  158A  2730   	fcall	_LCDBusyLoop
  6561  0E14  0008               	return
  6562  0E15                     __end_of_LCDByte:	
  6563                           
  6564                           	psect	text33
  6565  0F30                     __ptext33:	
  6566 ;; *************** function _LCDBusyLoop *****************
  6567 ;; Defined at:
  6568 ;;		line 135 in file "lcd_hd44780_pic16.c"
  6569 ;; Parameters:    Size  Location     Type
  6570 ;;		None
  6571 ;; Auto vars:     Size  Location     Type
  6572 ;;  status          1    4[BANK0 ] unsigned char 
  6573 ;;  temp            1    3[BANK0 ] unsigned char 
  6574 ;;  busy            1    2[BANK0 ] unsigned char 
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  1    wreg      void 
  6577 ;; Registers used:
  6578 ;;		wreg, status,2, status,0
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6584 ;;      Params:         0       0       0       0       0
  6585 ;;      Locals:         0       3       0       0       0
  6586 ;;      Temps:          0       2       0       0       0
  6587 ;;      Totals:         0       5       0       0       0
  6588 ;;Total ram usage:        5 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    3
  6591 ;; This function calls:
  6592 ;;		Nothing
  6593 ;; This function is called by:
  6594 ;;		_LCDByte
  6595 ;;		_LCDInit
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           
  6600                           ;psect for function _LCDBusyLoop
  6601  0F30                     _LCDBusyLoop:	
  6602                           
  6603                           ;lcd_hd44780_pic16.c: 139: uint8_t busy,status=0x00,temp;
  6604                           
  6605                           ;incstack = 0
  6606                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  6607  0F30  1283               	bcf	3,5	;RP0=0, select bank0
  6608  0F31  1303               	bcf	3,6	;RP1=0, select bank0
  6609  0F32  01A4               	clrf	LCDBusyLoop@status
  6610                           
  6611                           ;lcd_hd44780_pic16.c: 142: TRISC|=(0x0f<<4);
  6612  0F33  30F0               	movlw	240
  6613  0F34  00A0               	movwf	??_LCDBusyLoop
  6614  0F35  0820               	movf	??_LCDBusyLoop,w
  6615  0F36  1683               	bsf	3,5	;RP0=1, select bank1
  6616  0F37  1303               	bcf	3,6	;RP1=0, select bank1
  6617  0F38  0487               	iorwf	7,f	;volatile
  6618                           
  6619                           ;lcd_hd44780_pic16.c: 145: (RC2=1);
  6620  0F39  1283               	bcf	3,5	;RP0=0, select bank0
  6621  0F3A  1303               	bcf	3,6	;RP1=0, select bank0
  6622  0F3B  1507               	bsf	7,2	;volatile
  6623                           
  6624                           ;lcd_hd44780_pic16.c: 146: (RC1=0);
  6625  0F3C  1087               	bcf	7,1	;volatile
  6626                           
  6627                           ;lcd_hd44780_pic16.c: 150: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  6628  0F3D  2F3E               	nop2	;2 cycle nop
  6629  0F3E                     l3394:	
  6630                           ;lcd_hd44780_pic16.c: 153: do
  6631                           
  6632                           
  6633                           ;lcd_hd44780_pic16.c: 154: {
  6634                           ;lcd_hd44780_pic16.c: 156: (RC3=1);
  6635  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  6636  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  6637  0F40  1587               	bsf	7,3	;volatile
  6638                           
  6639                           ;lcd_hd44780_pic16.c: 159: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  6640  0F41  2F42               	nop2	;2 cycle nop
  6641                           
  6642                           ;lcd_hd44780_pic16.c: 161: status=(PORTC>>4);
  6643  0F42  1283               	bcf	3,5	;RP0=0, select bank0
  6644  0F43  1303               	bcf	3,6	;RP1=0, select bank0
  6645  0F44  0807               	movf	7,w	;volatile
  6646  0F45  00A0               	movwf	??_LCDBusyLoop
  6647  0F46  3004               	movlw	4
  6648  0F47                     u3685:	
  6649  0F47  1003               	clrc
  6650  0F48  0CA0               	rrf	??_LCDBusyLoop,f
  6651  0F49  3EFF               	addlw	-1
  6652  0F4A  1D03               	skipz
  6653  0F4B  2F47               	goto	u3685
  6654  0F4C  0820               	movf	??_LCDBusyLoop,w
  6655  0F4D  00A1               	movwf	??_LCDBusyLoop+1
  6656  0F4E  0821               	movf	??_LCDBusyLoop+1,w
  6657  0F4F  00A4               	movwf	LCDBusyLoop@status
  6658                           
  6659                           ;lcd_hd44780_pic16.c: 162: status=status<<4;
  6660  0F50  0824               	movf	LCDBusyLoop@status,w
  6661  0F51  00A0               	movwf	??_LCDBusyLoop
  6662  0F52  3003               	movlw	3
  6663  0F53                     u3695:	
  6664  0F53  1003               	clrc
  6665  0F54  0DA0               	rlf	??_LCDBusyLoop,f
  6666  0F55  3EFF               	addlw	-1
  6667  0F56  1D03               	skipz
  6668  0F57  2F53               	goto	u3695
  6669  0F58  1003               	clrc
  6670  0F59  0D20               	rlf	??_LCDBusyLoop,w
  6671  0F5A  00A1               	movwf	??_LCDBusyLoop+1
  6672  0F5B  0821               	movf	??_LCDBusyLoop+1,w
  6673  0F5C  00A4               	movwf	LCDBusyLoop@status
  6674                           
  6675                           ;lcd_hd44780_pic16.c: 164: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  6676  0F5D  2F5E               	nop2	;2 cycle nop
  6677                           
  6678                           ;lcd_hd44780_pic16.c: 167: (RC3=0);
  6679  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  6680  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
  6681  0F60  1187               	bcf	7,3	;volatile
  6682                           
  6683                           ;lcd_hd44780_pic16.c: 168: _delay((unsigned long)((1)*(20000000/4000000.0)));
  6684  0F61  2F62               	nop2	;2 cycle nop
  6685  0F62  2F63               	nop2	;2 cycle nop
  6686  0F63  0000               	nop
  6687                           
  6688                           ;lcd_hd44780_pic16.c: 170: (RC3=1);
  6689  0F64  1283               	bcf	3,5	;RP0=0, select bank0
  6690  0F65  1303               	bcf	3,6	;RP1=0, select bank0
  6691  0F66  1587               	bsf	7,3	;volatile
  6692                           
  6693                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  6694  0F67  2F68               	nop2	;2 cycle nop
  6695                           
  6696                           ;lcd_hd44780_pic16.c: 173: temp=(PORTC>>4);
  6697  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  6698  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  6699  0F6A  0807               	movf	7,w	;volatile
  6700  0F6B  00A0               	movwf	??_LCDBusyLoop
  6701  0F6C  3004               	movlw	4
  6702  0F6D                     u3705:	
  6703  0F6D  1003               	clrc
  6704  0F6E  0CA0               	rrf	??_LCDBusyLoop,f
  6705  0F6F  3EFF               	addlw	-1
  6706  0F70  1D03               	skipz
  6707  0F71  2F6D               	goto	u3705
  6708  0F72  0820               	movf	??_LCDBusyLoop,w
  6709  0F73  00A1               	movwf	??_LCDBusyLoop+1
  6710  0F74  0821               	movf	??_LCDBusyLoop+1,w
  6711  0F75  00A3               	movwf	LCDBusyLoop@temp
  6712                           
  6713                           ;lcd_hd44780_pic16.c: 174: temp&=0x0F;
  6714  0F76  300F               	movlw	15
  6715  0F77  00A0               	movwf	??_LCDBusyLoop
  6716  0F78  0820               	movf	??_LCDBusyLoop,w
  6717  0F79  05A3               	andwf	LCDBusyLoop@temp,f
  6718                           
  6719                           ;lcd_hd44780_pic16.c: 176: status=status|temp;
  6720  0F7A  0824               	movf	LCDBusyLoop@status,w
  6721  0F7B  0423               	iorwf	LCDBusyLoop@temp,w
  6722  0F7C  00A0               	movwf	??_LCDBusyLoop
  6723  0F7D  0820               	movf	??_LCDBusyLoop,w
  6724  0F7E  00A4               	movwf	LCDBusyLoop@status
  6725                           
  6726                           ;lcd_hd44780_pic16.c: 178: busy=status & 0b10000000;
  6727  0F7F  0824               	movf	LCDBusyLoop@status,w
  6728  0F80  3980               	andlw	128
  6729  0F81  00A0               	movwf	??_LCDBusyLoop
  6730  0F82  0820               	movf	??_LCDBusyLoop,w
  6731  0F83  00A2               	movwf	LCDBusyLoop@busy
  6732                           
  6733                           ;lcd_hd44780_pic16.c: 180: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  6734  0F84  2F85               	nop2	;2 cycle nop
  6735                           
  6736                           ;lcd_hd44780_pic16.c: 182: (RC3=0);
  6737  0F85  1283               	bcf	3,5	;RP0=0, select bank0
  6738  0F86  1303               	bcf	3,6	;RP1=0, select bank0
  6739  0F87  1187               	bcf	7,3	;volatile
  6740                           
  6741                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((1)*(20000000/4000000.0)));
  6742  0F88  2F89               	nop2	;2 cycle nop
  6743  0F89  2F8A               	nop2	;2 cycle nop
  6744  0F8A  0000               	nop
  6745                           
  6746                           ;lcd_hd44780_pic16.c: 184: }while(busy);
  6747  0F8B  1283               	bcf	3,5	;RP0=0, select bank0
  6748  0F8C  1303               	bcf	3,6	;RP1=0, select bank0
  6749  0F8D  0822               	movf	LCDBusyLoop@busy,w
  6750  0F8E  1D03               	btfss	3,2
  6751  0F8F  2F3E               	goto	l3394
  6752                           
  6753                           ;lcd_hd44780_pic16.c: 186: (RC2=0);
  6754  0F90  1107               	bcf	7,2	;volatile
  6755                           
  6756                           ;lcd_hd44780_pic16.c: 189: TRISC&=(~(0x0F<<4));
  6757  0F91  300F               	movlw	15
  6758  0F92  00A0               	movwf	??_LCDBusyLoop
  6759  0F93  0820               	movf	??_LCDBusyLoop,w
  6760  0F94  1683               	bsf	3,5	;RP0=1, select bank1
  6761  0F95  1303               	bcf	3,6	;RP1=0, select bank1
  6762  0F96  0587               	andwf	7,f	;volatile
  6763  0F97  0008               	return
  6764  0F98                     __end_of_LCDBusyLoop:	
  6765                           
  6766                           	psect	text34
  6767  0A72                     __ptext34:	
  6768 ;; *************** function _ADCInit *****************
  6769 ;; Defined at:
  6770 ;;		line 7 in file "adc_pic16.c"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;		None
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;		None
  6775 ;; Return value:  Size  Location     Type
  6776 ;;                  1    wreg      void 
  6777 ;; Registers used:
  6778 ;;		wreg, status,2, status,0
  6779 ;; Tracked objects:
  6780 ;;		On entry : 0/0
  6781 ;;		On exit  : 0/0
  6782 ;;		Unchanged: 0/0
  6783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6784 ;;      Params:         0       0       0       0       0
  6785 ;;      Locals:         0       0       0       0       0
  6786 ;;      Temps:          0       0       0       0       0
  6787 ;;      Totals:         0       0       0       0       0
  6788 ;;Total ram usage:        0 bytes
  6789 ;; Hardware stack levels used:    1
  6790 ;; Hardware stack levels required when called:    3
  6791 ;; This function calls:
  6792 ;;		Nothing
  6793 ;; This function is called by:
  6794 ;;		_main
  6795 ;; This function uses a non-reentrant model
  6796 ;;
  6797                           
  6798                           
  6799                           ;psect for function _ADCInit
  6800  0A72                     _ADCInit:	
  6801                           
  6802                           ;adc_pic16.c: 10: TRISBbits.TRISB5 = 1;
  6803                           
  6804                           ;incstack = 0
  6805                           ; Regs used in _ADCInit: [wreg+status,2+status,0]
  6806  0A72  1683               	bsf	3,5	;RP0=1, select bank1
  6807  0A73  1303               	bcf	3,6	;RP1=0, select bank1
  6808  0A74  1686               	bsf	6,5	;volatile
  6809                           
  6810                           ;adc_pic16.c: 11: ANSELHbits.ANS13 = 1;
  6811  0A75  1683               	bsf	3,5	;RP0=1, select bank3
  6812  0A76  1703               	bsf	3,6	;RP1=1, select bank3
  6813  0A77  1689               	bsf	9,5	;volatile
  6814                           
  6815                           ;adc_pic16.c: 17: ADCON1bits.VCFG0 = 0;
  6816  0A78  1683               	bsf	3,5	;RP0=1, select bank1
  6817  0A79  1303               	bcf	3,6	;RP1=0, select bank1
  6818  0A7A  121F               	bcf	31,4	;volatile
  6819                           
  6820                           ;adc_pic16.c: 19: ADCON0bits.ADCS = 0b11;
  6821  0A7B  30C0               	movlw	192
  6822  0A7C  1283               	bcf	3,5	;RP0=0, select bank0
  6823  0A7D  1303               	bcf	3,6	;RP1=0, select bank0
  6824  0A7E  049F               	iorwf	31,f	;volatile
  6825                           
  6826                           ;adc_pic16.c: 22: ADCON1bits.ADFM = 1;
  6827  0A7F  1683               	bsf	3,5	;RP0=1, select bank1
  6828  0A80  1303               	bcf	3,6	;RP1=0, select bank1
  6829  0A81  179F               	bsf	31,7	;volatile
  6830                           
  6831                           ;adc_pic16.c: 24: ADCON0bits.ADON = 1;
  6832  0A82  1283               	bcf	3,5	;RP0=0, select bank0
  6833  0A83  1303               	bcf	3,6	;RP1=0, select bank0
  6834  0A84  141F               	bsf	31,0	;volatile
  6835  0A85  0008               	return
  6836  0A86                     __end_of_ADCInit:	
  6837                           
  6838                           	psect	text35
  6839  0BDE                     __ptext35:	
  6840 ;; *************** function _ISR *****************
  6841 ;; Defined at:
  6842 ;;		line 102 in file "do_am.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;		None
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;  byte            1   11[COMMON] PTR struct .
  6847 ;;		 -> ISR@value(1), 
  6848 ;;  value           1   10[COMMON] unsigned char 
  6849 ;; Return value:  Size  Location     Type
  6850 ;;                  1    wreg      void 
  6851 ;; Registers used:
  6852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6858 ;;      Params:         0       0       0       0       0
  6859 ;;      Locals:         2       0       0       0       0
  6860 ;;      Temps:          5       0       0       0       0
  6861 ;;      Totals:         7       0       0       0       0
  6862 ;;Total ram usage:        7 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; Hardware stack levels required when called:    2
  6865 ;; This function calls:
  6866 ;;		_receive_input
  6867 ;; This function is called by:
  6868 ;;		Interrupt level 1
  6869 ;; This function uses a non-reentrant model
  6870 ;;
  6871                           
  6872                           
  6873                           ;psect for function _ISR
  6874  0BDE                     _ISR:	
  6875                           
  6876                           ;do_am.c: 104: if(INTCONbits.INTF == 1)
  6877  0BDE  1C8B               	btfss	11,1	;volatile
  6878  0BDF  2C06               	goto	i1l289
  6879                           
  6880                           ;do_am.c: 105: {
  6881                           ;do_am.c: 106: { uint8_t value; { value = 0; BITbits_t *byte = (BITbits_t *)&value; byte
      +                          ->B0 = RA0; byte->B1 = RA1; byte->B2 = RA2; byte->B3 = RA3; }; receive_input(value); };
  6882  0BE0  01FA               	clrf	ISR@value
  6883  0BE1  307A               	movlw	(low (ISR@value| 0))& (0+255)
  6884  0BE2  00F5               	movwf	??_ISR
  6885  0BE3  0875               	movf	??_ISR,w
  6886  0BE4  00FB               	movwf	ISR@byte
  6887  0BE5  087B               	movf	ISR@byte,w
  6888  0BE6  0084               	movwf	4
  6889  0BE7  1000               	bcf	0,0
  6890  0BE8  1805               	btfsc	5,0	;volatile
  6891  0BE9  1400               	bsf	0,0
  6892  0BEA  087B               	movf	ISR@byte,w
  6893  0BEB  0084               	movwf	4
  6894  0BEC  1080               	bcf	0,1
  6895  0BED  1283               	bcf	3,5	;RP0=0, select bank0
  6896  0BEE  1303               	bcf	3,6	;RP1=0, select bank0
  6897  0BEF  1885               	btfsc	5,1	;volatile
  6898  0BF0  1480               	bsf	0,1
  6899  0BF1  087B               	movf	ISR@byte,w
  6900  0BF2  0084               	movwf	4
  6901  0BF3  1100               	bcf	0,2
  6902  0BF4  1283               	bcf	3,5	;RP0=0, select bank0
  6903  0BF5  1303               	bcf	3,6	;RP1=0, select bank0
  6904  0BF6  1905               	btfsc	5,2	;volatile
  6905  0BF7  1500               	bsf	0,2
  6906  0BF8  087B               	movf	ISR@byte,w
  6907  0BF9  0084               	movwf	4
  6908  0BFA  1180               	bcf	0,3
  6909  0BFB  1283               	bcf	3,5	;RP0=0, select bank0
  6910  0BFC  1303               	bcf	3,6	;RP1=0, select bank0
  6911  0BFD  1985               	btfsc	5,3	;volatile
  6912  0BFE  1580               	bsf	0,3
  6913  0BFF  087A               	movf	ISR@value,w
  6914  0C00  120A  118A  2703  120A  158A  	fcall	_receive_input
  6915                           
  6916                           ;do_am.c: 107: INTCONbits.INTF = 0;
  6917  0C05  108B               	bcf	11,1	;volatile
  6918  0C06                     i1l289:	
  6919  0C06  0879               	movf	??_ISR+4,w
  6920  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  6921  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  6922  0C09  00FF               	movwf	127
  6923  0C0A  0878               	movf	??_ISR+3,w
  6924  0C0B  008A               	movwf	10
  6925  0C0C  0877               	movf	??_ISR+2,w
  6926  0C0D  0084               	movwf	4
  6927  0C0E  0E76               	swapf	(??_ISR+1)^(0+-128),w
  6928  0C0F  0083               	movwf	3
  6929  0C10  0EFE               	swapf	126,f
  6930  0C11  0E7E               	swapf	126,w
  6931  0C12  0009               	retfie
  6932  0C13                     __end_of_ISR:	
  6933                           
  6934                           	psect	intentry
  6935  0004                     __pintentry:	
  6936                           ;incstack = 0
  6937                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6938                           
  6939  0004                     interrupt_function:	
  6940  007E                     saved_w	set	btemp
  6941  0004  00FE               	movwf	btemp
  6942  0005  0E03               	swapf	3,w
  6943  0006  00F6               	movwf	??_ISR+1
  6944  0007  0804               	movf	4,w
  6945  0008  00F7               	movwf	??_ISR+2
  6946  0009  080A               	movf	10,w
  6947  000A  00F8               	movwf	??_ISR+3
  6948  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6949  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6950  000D  087F               	movf	btemp+1,w
  6951  000E  00F9               	movwf	??_ISR+4
  6952  000F  120A  158A  2BDE   	ljmp	_ISR
  6953                           
  6954                           	psect	text36
  6955  0703                     __ptext36:	
  6956 ;; *************** function _receive_input *****************
  6957 ;; Defined at:
  6958 ;;		line 41 in file "circle_buffer.h"
  6959 ;; Parameters:    Size  Location     Type
  6960 ;;  value           1    wreg     unsigned char 
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;  value           1    2[COMMON] unsigned char 
  6963 ;;  byte2           1    4[COMMON] PTR struct .
  6964 ;;		 -> receive_input@value(1), 
  6965 ;;  byte1           1    3[COMMON] PTR struct .
  6966 ;;		 -> buffer_rcv(32), 
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  1    wreg      void 
  6969 ;; Registers used:
  6970 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6976 ;;      Params:         0       0       0       0       0
  6977 ;;      Locals:         3       0       0       0       0
  6978 ;;      Temps:          1       0       0       0       0
  6979 ;;      Totals:         4       0       0       0       0
  6980 ;;Total ram usage:        4 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    1
  6983 ;; This function calls:
  6984 ;;		_get_next_index
  6985 ;; This function is called by:
  6986 ;;		_ISR
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           
  6991                           ;psect for function _receive_input
  6992  0703                     _receive_input:	
  6993                           
  6994                           ;incstack = 0
  6995                           ; Regs used in _receive_input: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6996                           ;receive_input@value stored from wreg
  6997  0703  00F2               	movwf	receive_input@value
  6998                           
  6999                           ;circle_buffer.h: 43: { BITbits_t *byte1 = (BITbits_t *)&buffer_rcv[end_index_rcv]; BITb
      +                          its_t *byte2 = (BITbits_t *)&value; if(low_half_rcv == 1) { byte1->B0 = byte2->B0; byte1
      +                          ->B1 = byte2->B1; byte1->B2 = byte2->B2; byte1->B3 = byte2->B3; } else { byte1->B4 = byt
      +                          e2->B0; 
  7000  0704  087C               	movf	_end_index_rcv,w
  7001  0705  3EB0               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  7002  0706  00F1               	movwf	??_receive_input
  7003  0707  0871               	movf	??_receive_input,w
  7004  0708  00F3               	movwf	receive_input@byte1
  7005  0709  3072               	movlw	(low (receive_input@value| 0))& (0+255)
  7006  070A  00F1               	movwf	??_receive_input
  7007  070B  0871               	movf	??_receive_input,w
  7008  070C  00F4               	movwf	receive_input@byte2
  7009  070D  037D               	decf	_low_half_rcv,w
  7010  070E  1D03               	btfss	3,2
  7011  070F  2F3D               	goto	i1l2766
  7012  0710  0874               	movf	receive_input@byte2,w
  7013  0711  0084               	movwf	4
  7014  0712  1003               	clrc
  7015  0713  1800               	btfsc	0,0
  7016  0714  1403               	setc
  7017  0715  0873               	movf	receive_input@byte1,w
  7018  0716  0084               	movwf	4
  7019  0717  1783               	bsf	3,7	;select IRP bank2
  7020  0718  1000               	bcf	0,0
  7021  0719  1803               	btfsc	3,0
  7022  071A  1400               	bsf	0,0
  7023  071B  0874               	movf	receive_input@byte2,w
  7024  071C  0084               	movwf	4
  7025  071D  1003               	clrc
  7026  071E  1880               	btfsc	0,1
  7027  071F  1403               	setc
  7028  0720  0873               	movf	receive_input@byte1,w
  7029  0721  0084               	movwf	4
  7030  0722  1783               	bsf	3,7	;select IRP bank2
  7031  0723  1080               	bcf	0,1
  7032  0724  1803               	btfsc	3,0
  7033  0725  1480               	bsf	0,1
  7034  0726  0874               	movf	receive_input@byte2,w
  7035  0727  0084               	movwf	4
  7036  0728  1003               	clrc
  7037  0729  1900               	btfsc	0,2
  7038  072A  1403               	setc
  7039  072B  0873               	movf	receive_input@byte1,w
  7040  072C  0084               	movwf	4
  7041  072D  1783               	bsf	3,7	;select IRP bank2
  7042  072E  1100               	bcf	0,2
  7043  072F  1803               	btfsc	3,0
  7044  0730  1500               	bsf	0,2
  7045  0731  0874               	movf	receive_input@byte2,w
  7046  0732  0084               	movwf	4
  7047  0733  1003               	clrc
  7048  0734  1980               	btfsc	0,3
  7049  0735  1403               	setc
  7050  0736  0873               	movf	receive_input@byte1,w
  7051  0737  0084               	movwf	4
  7052  0738  1783               	bsf	3,7	;select IRP bank2
  7053  0739  1180               	bcf	0,3
  7054  073A  1803               	btfsc	3,0
  7055  073B  1580               	bsf	0,3
  7056  073C  2F69               	goto	i1l2768
  7057  073D                     i1l2766:	
  7058  073D  0874               	movf	receive_input@byte2,w
  7059  073E  0084               	movwf	4
  7060  073F  1003               	clrc
  7061  0740  1800               	btfsc	0,0
  7062  0741  1403               	setc
  7063  0742  0873               	movf	receive_input@byte1,w
  7064  0743  0084               	movwf	4
  7065  0744  1783               	bsf	3,7	;select IRP bank2
  7066  0745  1200               	bcf	0,4
  7067  0746  1803               	btfsc	3,0
  7068  0747  1600               	bsf	0,4
  7069  0748  0874               	movf	receive_input@byte2,w
  7070  0749  0084               	movwf	4
  7071  074A  1003               	clrc
  7072  074B  1880               	btfsc	0,1
  7073  074C  1403               	setc
  7074  074D  0873               	movf	receive_input@byte1,w
  7075  074E  0084               	movwf	4
  7076  074F  1783               	bsf	3,7	;select IRP bank2
  7077  0750  1280               	bcf	0,5
  7078  0751  1803               	btfsc	3,0
  7079  0752  1680               	bsf	0,5
  7080  0753  0874               	movf	receive_input@byte2,w
  7081  0754  0084               	movwf	4
  7082  0755  1003               	clrc
  7083  0756  1900               	btfsc	0,2
  7084  0757  1403               	setc
  7085  0758  0873               	movf	receive_input@byte1,w
  7086  0759  0084               	movwf	4
  7087  075A  1783               	bsf	3,7	;select IRP bank2
  7088  075B  1300               	bcf	0,6
  7089  075C  1803               	btfsc	3,0
  7090  075D  1700               	bsf	0,6
  7091  075E  0874               	movf	receive_input@byte2,w
  7092  075F  0084               	movwf	4
  7093  0760  1003               	clrc
  7094  0761  1980               	btfsc	0,3
  7095  0762  1403               	setc
  7096  0763  0873               	movf	receive_input@byte1,w
  7097  0764  0084               	movwf	4
  7098  0765  1783               	bsf	3,7	;select IRP bank2
  7099  0766  1380               	bcf	0,7
  7100  0767  1803               	btfsc	3,0
  7101  0768  1780               	bsf	0,7
  7102  0769                     i1l2768:	
  7103                           
  7104                           ;circle_buffer.h: 44: if(low_half_rcv == 1)
  7105  0769  037D               	decf	_low_half_rcv,w
  7106  076A  1D03               	btfss	3,2
  7107  076B  2F6E               	goto	i1l158
  7108                           
  7109                           ;circle_buffer.h: 45: {
  7110                           ;circle_buffer.h: 46: low_half_rcv = 0;
  7111  076C  01FD               	clrf	_low_half_rcv
  7112                           
  7113                           ;circle_buffer.h: 47: }
  7114  076D  0008               	return
  7115  076E                     i1l158:	
  7116                           
  7117                           ;circle_buffer.h: 48: else
  7118                           ;circle_buffer.h: 49: {
  7119                           ;circle_buffer.h: 50: low_half_rcv = 1;
  7120  076E  01FD               	clrf	_low_half_rcv
  7121  076F  0AFD               	incf	_low_half_rcv,f
  7122                           
  7123                           ;circle_buffer.h: 51: end_index_rcv = get_next_index(end_index_rcv);
  7124  0770  087C               	movf	_end_index_rcv,w
  7125  0771  120A  158A  21EE   	fcall	_get_next_index
  7126  0774  00F1               	movwf	??_receive_input
  7127  0775  0871               	movf	??_receive_input,w
  7128  0776  00FC               	movwf	_end_index_rcv
  7129  0777  0008               	return
  7130  0778                     __end_of_receive_input:	
  7131                           
  7132                           	psect	text37
  7133  09EE                     __ptext37:	
  7134 ;; *************** function _get_next_index *****************
  7135 ;; Defined at:
  7136 ;;		line 30 in file "circle_buffer.h"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;  index           1    wreg     unsigned char 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;  index           1    0[COMMON] unsigned char 
  7141 ;; Return value:  Size  Location     Type
  7142 ;;                  1    wreg      unsigned char 
  7143 ;; Registers used:
  7144 ;;		wreg, status,2, status,0
  7145 ;; Tracked objects:
  7146 ;;		On entry : 0/0
  7147 ;;		On exit  : 0/0
  7148 ;;		Unchanged: 0/0
  7149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7150 ;;      Params:         0       0       0       0       0
  7151 ;;      Locals:         1       0       0       0       0
  7152 ;;      Temps:          0       0       0       0       0
  7153 ;;      Totals:         1       0       0       0       0
  7154 ;;Total ram usage:        1 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; This function calls:
  7157 ;;		Nothing
  7158 ;; This function is called by:
  7159 ;;		_receive_input
  7160 ;;		_get_msg_index
  7161 ;;		_get_msg
  7162 ;; This function uses a non-reentrant model
  7163 ;;
  7164                           
  7165                           
  7166                           ;psect for function _get_next_index
  7167  09EE                     _get_next_index:	
  7168                           
  7169                           ;incstack = 0
  7170                           ; Regs used in _get_next_index: [wreg+status,2+status,0]
  7171                           ;get_next_index@index stored from wreg
  7172  09EE  00F0               	movwf	get_next_index@index
  7173                           
  7174                           ;circle_buffer.h: 32: if(index == 32 - 1)
  7175  09EF  301F               	movlw	31
  7176  09F0  0670               	xorwf	get_next_index@index,w
  7177  09F1  1D03               	btfss	3,2
  7178  09F2  29F5               	goto	i1l2610
  7179                           
  7180                           ;circle_buffer.h: 33: {
  7181                           ;circle_buffer.h: 34: return 0;
  7182  09F3  3000               	movlw	0
  7183                           
  7184                           ;circle_buffer.h: 35: }
  7185  09F4  0008               	return
  7186  09F5                     i1l2610:	
  7187                           
  7188                           ;circle_buffer.h: 36: else
  7189                           ;circle_buffer.h: 37: {
  7190                           ;circle_buffer.h: 38: return (index + 1);
  7191  09F5  0870               	movf	get_next_index@index,w
  7192  09F6  3E01               	addlw	1
  7193  09F7  0008               	return
  7194  09F8                     __end_of_get_next_index:	
  7195  007E                     btemp	set	126	;btemp
  7196  007E                     wtemp	set	126
  7197  007E                     wtemp0	set	126
  7198  0080                     wtemp1	set	128
  7199  0082                     wtemp2	set	130
  7200  0084                     wtemp3	set	132
  7201  0086                     wtemp4	set	134
  7202  0088                     wtemp5	set	136
  7203  007F                     wtemp6	set	127
  7204  007E                     ttemp	set	126
  7205  007E                     ttemp0	set	126
  7206  0081                     ttemp1	set	129
  7207  0084                     ttemp2	set	132
  7208  0087                     ttemp3	set	135
  7209  007F                     ttemp4	set	127
  7210  007E                     ltemp	set	126
  7211  007E                     ltemp0	set	126
  7212  0082                     ltemp1	set	130
  7213  0086                     ltemp2	set	134
  7214  0080                     ltemp3	set	128


Data Sizes:
    Strings     101
    Constant    18
    Data        20
    BSS         156
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     54      60
    BANK1            80     35      61
    BANK3            96      0      96
    BANK2            96     21      67

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 23
		 -> msg(BANK2[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), create_REG_ID_RSP_CMD@rqt(COMMON[1]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 23
		 -> msg(BANK2[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), create_REG_ID_RSP_CMD@rqt(COMMON[1]), 

    memcpy@s1	PTR const void  size(2) Largest target is 4
		 -> STR_15(CODE[4]), create_REG_ID_RSP_CMD@rsp(COMMON[1]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), create_REG_ID_RSP_CMD@rsp(COMMON[1]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_13(CODE[14]), STR_11(CODE[20]), STR_9(CODE[15]), STR_7(CODE[12]), 
		 -> STR_5(CODE[9]), STR_3(CODE[6]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> dump_conn@s(BANK0[32]), dump_msg@s(BANK1[32]), sdebug(BANK3[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S899$name	PTR unsigned char  size(1) Largest target is 5
		 -> STR_25(CODE[5]), STR_24(CODE[5]), STR_23(CODE[5]), STR_22(CODE[5]), 

    g_menu.items.name	PTR unsigned char  size(1) Largest target is 5
		 -> STR_25(CODE[5]), STR_24(CODE[5]), STR_23(CODE[5]), STR_22(CODE[5]), 

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_26(CODE[1]), STR_25(CODE[5]), STR_24(CODE[5]), STR_23(CODE[5]), 
		 -> STR_22(CODE[5]), STR_21(CODE[5]), STR_20(CODE[3]), STR_19(CODE[12]), 
		 -> STR_18(CODE[13]), STR_17(CODE[10]), STR_16(CODE[10]), STR_14(CODE[1]), 
		 -> dump_conn@s(BANK0[32]), STR_12(CODE[1]), dump_msg@s(BANK1[32]), STR_10(CODE[1]), 
		 -> STR_8(CODE[1]), STR_6(CODE[1]), STR_4(CODE[1]), STR_2(CODE[1]), 
		 -> sdebug(BANK3[32]), 

    main@pconn	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    main@prsp	PTR struct . size(1) Largest target is 1
		 -> main@rsp(BANK2[1]), 

    main@prqt	PTR struct . size(1) Largest target is 1
		 -> main@rqt(BANK2[1]), 

    ISR@byte	PTR struct . size(1) Largest target is 1
		 -> ISR@value(COMMON[1]), 

    pmsg	PTR struct . size(1) Largest target is 23
		 -> msg(BANK2[23]), 

    pstr_rcv	PTR unsigned char  size(1) Largest target is 23
		 -> msg_rcv(BANK2[23]), 

    pmsg_rcv	PTR struct . size(1) Largest target is 23
		 -> msg_rcv(BANK2[23]), 

    dump_msg@pmsg	PTR struct . size(1) Largest target is 23
		 -> msg(BANK2[23]), 

    sp__memcpy	PTR void  size(2) Largest target is 23
		 -> msg(BANK2[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), create_REG_ID_RSP_CMD@rqt(COMMON[1]), 

    compose@data	PTR unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), create_REG_ID_RSP_CMD@rsp(COMMON[1]), 

    compose@pmsg	PTR struct . size(2) Largest target is 23
		 -> msg(BANK2[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), 

    crc_calculate@pmsg	PTR struct . size(2) Largest target is 23
		 -> msg(BANK2[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), 

    send_msg@pmsg	PTR struct . size(2) Largest target is 23
		 -> msg(BANK2[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), 

    send_msg@s	PTR unsigned char  size(2) Largest target is 23
		 -> msg(BANK2[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), 

    receive_input@byte2	PTR struct . size(1) Largest target is 1
		 -> receive_input@value(COMMON[1]), 

    receive_input@byte1	PTR struct . size(1) Largest target is 32
		 -> buffer_rcv(BANK3[32]), 

    send_string@str	PTR unsigned char  size(2) Largest target is 23
		 -> msg(BANK2[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), stop_mark(CODE[4]), start_mark(CODE[4]), 

    send_half_byte@byte	PTR struct . size(1) Largest target is 1
		 -> send_half_byte@value(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_receive_input
    _receive_input->_get_next_index

Critical Paths under _main in BANK0

    _main->_dump_msg
    _send_msg->_send_string
    _send_string->_send_byte
    _send_byte->_send_half_byte
    _dump_msg->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _compose->_memcpy
    _ValueInc->_SaveMenuItem
    _ValueDec->_SaveMenuItem
    _SaveMenuItem->_eeprom_write
    _ShowMenu->_LCDWriteInt
    _LCDWriteInt->_LCDByte
    _MenuInit->_LoadMenuItem
    _LoadMenuItem->_eeprom_read
    _LCDSetStyle->_LCDByte
    _LCDInit->_LCDByte
    _ClearMenu->_LCDWriteString
    _LCDWriteString->_LCDByte
    _LCDGotoXY->_LCDByte
    _LCDByte->_LCDBusyLoop

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_dump_msg

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0   64949
                                             49 BANK0      5     5      0
                                              0 BANK2     21    21      0
                            _ADCInit
                          _ClearMenu
                           _ConnInit
                             _IOInit
                            _LCDByte
                          _LCDGotoXY
                            _LCDInit
                        _LCDSetStyle
                     _LCDWriteString
                           _MenuDown
                           _MenuInit
                             _MenuUp
                           _ShowMenu
                           _ValueDec
                           _ValueInc
                            _compose
                           _dump_msg
                           _send_msg
 ---------------------------------------------------------------------------------
 (1) _send_msg                                             5     3      2    1352
                                             12 BANK0      5     3      2
                        _send_string
 ---------------------------------------------------------------------------------
 (2) _send_string                                          5     2      3    1145
                                              7 BANK0      5     2      3
                          _send_byte
 ---------------------------------------------------------------------------------
 (3) _send_byte                                            3     3      0     553
                                              4 BANK0      3     3      0
                     _send_half_byte
 ---------------------------------------------------------------------------------
 (4) _send_half_byte                                       4     3      1     491
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _dump_msg                                            46    46      0   14253
                                             38 BANK0     11    11      0
                                              0 BANK1     35    35      0
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             32    17     15    2275
                                             14 BANK0     24     9     15
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     386
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     395
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _compose                                             13     4      9    3151
                                             11 BANK0     13     4      9
                      _crc_calculate
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              11     5      6     747
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (2) _crc_calculate                                        9     7      2     408
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _ValueInc                                             2     2      0     201
                                              6 BANK0      2     2      0
                       _SaveMenuItem
 ---------------------------------------------------------------------------------
 (1) _ValueDec                                             1     1      0     201
                                              6 BANK0      1     1      0
                       _SaveMenuItem
 ---------------------------------------------------------------------------------
 (2) _SaveMenuItem                                         3     3      0     201
                                              3 BANK0      3     3      0
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     139
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _ShowMenu                                             6     6      0   16107
                                             26 BANK0      6     6      0
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (2) _LCDWriteInt                                         14    11      3    4449
                                             12 BANK0     14    11      3
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     587
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _MenuUp                                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MenuInit                                             1     1      0      93
                                              5 BANK0      1     1      0
                       _LoadMenuItem
 ---------------------------------------------------------------------------------
 (2) _LoadMenuItem                                         3     3      0      93
                                              2 BANK0      3     3      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MenuDown                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCDSetStyle                                          1     1      0    2592
                                             12 BANK0      1     1      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              4     4      0    2867
                                             12 BANK0      4     4      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _IOInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConnInit                                             3     3      0     223
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ClearMenu                                            3     3      0   11658
                                             17 BANK0      3     3      0
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (2) _LCDWriteString                                       5     3      2    4558
                                             12 BANK0      5     3      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _LCDGotoXY                                            3     2      1    4437
                                             12 BANK0      3     2      1
                            _LCDByte
 ---------------------------------------------------------------------------------
 (3) _LCDByte                                              7     6      1    2561
                                              5 BANK0      7     6      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (4) _LCDBusyLoop                                          5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  7     7      0     566
                                              5 COMMON     7     7      0
                      _receive_input
 ---------------------------------------------------------------------------------
 (6) _receive_input                                        4     4      0     428
                                              1 COMMON     4     4      0
                     _get_next_index
 ---------------------------------------------------------------------------------
 (7) _get_next_index                                       1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _ClearMenu
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
   _ConnInit
   _IOInit
   _LCDByte
     _LCDBusyLoop
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _LCDSetStyle
     _LCDByte
       _LCDBusyLoop
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   _MenuDown
   _MenuInit
     _LoadMenuItem
       _eeprom_read
   _MenuUp
   _ShowMenu
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteInt
       _LCDByte
         _LCDBusyLoop
       ___awdiv
       ___awmod
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
   _ValueDec
     _SaveMenuItem
       _eeprom_write
   _ValueInc
     _SaveMenuItem
       _eeprom_write
   _compose
     _crc_calculate
     _memcpy
   _dump_msg
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _send_msg
     _send_string
       _send_byte
         _send_half_byte

 _ISR (ROOT)
   _receive_input
     _get_next_index

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     15      43      11       69.8%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     23      3D       7       76.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     36      3C       5       75.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     12A      12        0.0%
ABS                  0      0     12A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Jul 05 22:56:01 2016

            ?_LCDBusyLoop 0070                __CFG_CP$ON 0000                         pc 0002  
                      _RD 0C60               __CFG_CPD$ON 0000                        _WR 0C61  
            ___awdiv@sign 0026                        fsr 0004              ?_LCDSetStyle 0070  
         ?_get_next_index 0070               __CFG_LVP$ON 0000                       l310 0237  
                     l307 01EC                       l504 0AAB                       l348 0DD7  
                     l349 0DD8                       l526 0B4C                       l397 0AE8  
                     l398 0AD1                       _GIE 005F                       _RA0 0028  
                     _RA1 0029                       _RA2 002A                       _RB1 0031  
                     _RA3 002B                       _RB2 0032                       _RA4 002C  
                     _RC1 0039                       _RA5 002D                       _RC2 003A  
                     _RB4 0034                       _RA6 002E                       _RC3 003B  
                     _RB5 0035                       _RA7 002F                       _RB6 0036  
                     _RB7 0037                       _ISR 0BDE                       _msg 0110  
                     fsr0 0004           __end_of_ADCInit 0A86                       indf 0000  
            ___awmod@sign 0026              __CFG_IESO$ON 0000   __size_of_send_half_byte 006C  
 LCDWriteInt@field_length 002E           __end_of_LCDByte 0E15           __end_of_LCDInit 1000  
            ?_LCDWriteInt 002C                      ?_ISR 0070               LCDByte@temp 002B  
                    l4004 0A26                      l4014 0A0F                      l4310 028E  
                    l4206 0100                      l3504 0E2C                      l4320 02A6  
                    l4304 0277                      l4224 0141                      l3530 0E6B  
                    l3522 0E58                      l3514 0E34                      l4250 0198  
                    l4218 012A                      l3516 0E42                      l3612 0BCE  
                    l4332 02E8                      l4316 029C                      l4252 01A8  
                    l4244 018A                      l4228 014A                      l3526 0E63  
                    l3542 0D29                      l3606 0BB2                      l4318 02A1  
                    l4238 0173                      l3560 0D52                      l3608 0BC0  
                    l3616 0BD9                      l3376 07AC                      l4344 030D  
                    l3394 0F3E                      l3730 0ED1                      l3554 0D36  
                    l3546 0D30                      l3802 052F                      l3642 0363  
                    l3378 07DC                      l3626 0A89                      l4346 0312  
                    l4338 02FF                      l4266 01D5                      l4274 01F7  
                    l4194 02B5                      l3732 0F2E                      l3716 0F05  
                    l3724 0F13                      l3556 0D44                      l3564 0D5D  
                    l3652 037A                      l3636 034D                      l4348 0317  
                    l4284 0220                      l4292 0240                      l4196 009E  
                    l3590 0C76                      l3582 0C52                      l3670 03B0  
                    l4294 0250             ?_LoadMenuItem 0070                      l3568 0D65  
                    l3752 05B9                      l3584 0C60                      l3664 03A1  
                    l3680 032D                      l3690 0AD3                      l3498 0E21  
                    l3754 05EB                      l3594 0C81                      l3658 0380  
                    l3682 03F7                      l3692 0AD5                      l3766 0B24  
                    l3678 03B4                      l3862 048A                      l3696 0ADA  
                    l3792 04E5                      l3794 051A                      l3868 04A1  
                    l3974 0EAE                      l3968 0E9B              __CFG_WDTE$ON 0000  
                    u4005 0C55                      u4025 0C61                      u4105 0BCF  
                    u4035 0C6D                      u4045 0C77                      u3600 07B5  
                    u3520 078B                      u4075 0BB5                      u3620 07C1  
                    u3540 0797                      u4405 0CC0                      u4325 053C  
                    u4165 0397                      u3614 07B8                      u3534 078E  
                    u4095 0BC6                      u3640 07CD                      u3560 07A3  
                    u3705 0F6D                      u4265 05CC                      u3634 07C4  
                    u3554 079A                      u3660 07D9                      u3725 0DC4  
                    u3654 07D0                      u3574 07A6                      u4375 0C92  
                    u3745 0DDF                      u4385 0CA3                      u3755 0DFB  
                    u4395 0CB2                      u3835 0E37                      u3685 0F47  
                    u3695 0F53                      u3791 0AA9                      u3855 0E43  
                    u3935 0D39                      u3865 0E4F                      u3875 0E59  
                    u3955 0D4A                      u4907 0248                      u3965 0D53  
                    u4917 02AE                      u4927 031F                      u4937 0B00  
                    u4947 0B14                      u4957 0F9F                      u4887 00F8  
                    u4897 01A0                      _WREN 0C62            ??_eeprom_write 0021  
            __CFG_WRT$OFF 0000             __CFG_FCMEN$ON 0000                      _main 0055  
                    _mode 0056        __size_of_LCDGotoXY 0026                      _pmsg 0057  
                    btemp 007E             __CFG_BOREN$ON 0000                      ltemp 007E  
                    start 0012                      ttemp 007E                      wtemp 007E  
           __CFG_MCLRE$ON 0000                     ??_ISR 0075               compose@data 0031  
             compose@from 002D               compose@pmsg 002B                     ?_main 0070  
         __end_of___awdiv 0E70                     _EEADR 010D                     STR_11 0622  
                   STR_12 066B                     STR_20 0684                     STR_21 067B  
                   STR_13 0636                     STR_22 0667                     STR_15 0680  
                   STR_23 066C                     STR_24 0671                     STR_16 065D  
                   STR_17 0647                     STR_25 0676                     STR_26 066B  
                   STR_18 0644                     STR_19 0651           __end_of___awmod 0D6A  
                   _CARRY 0018              LCDInit@style 002E           ___awdiv@divisor 0020  
         __end_of___lwdiv 0C86                     i1l158 076E           __end_of___lwmod 0BDE  
                   i1l289 0C06           ___awdiv@counter 0025                     _PORTC 0007  
                   _TRISC 0087           __end_of_compose 0703           __end_of_dpowers 061A  
                   _count 00DB            ??_LoadMenuItem 0022                     main@i 014D  
                   pclath 000A                     ltemp0 007E                     ltemp1 0082  
                   ltemp2 0086                     ltemp3 0080                     ttemp0 007E  
                   ttemp1 0081                     ttemp2 0084                     ttemp3 0087  
                   ttemp4 007F                     status 0003                     wtemp0 007E  
                   wtemp1 0080                     wtemp2 0082                     wtemp3 0084  
                   wtemp4 0086                     wtemp5 0088                     wtemp6 007F  
         __end_of_sprintf 03FE          __end_of_ConnInit 0CD0           __initialization 0015  
            __end_of_main 0327          __end_of_MenuDown 0A18          __end_of_MenuInit 0DBE  
               ??_ADCInit 0020        __size_of_ClearMenu 0031                    ??_main 0051  
       __end_of_LCDGotoXY 0AEF             LCDByte@isdata 0025                 ??_LCDByte 0026  
               ??_LCDInit 002C          __end_of_ValueDec 0A72          __end_of_ValueInc 07FB  
        __end_of_ShowMenu 0ECE              compose@msgid 002F                    _ADRESH 001E  
                  _ADRESL 009E                    _EEDATA 010C             main@count_812 0149  
           main@count_821 014C             main@count_815 014A             main@count_809 0148  
           main@count_818 014B                    _EECON1 018C                    _EECON2 018D  
        ___awdiv@dividend 0022                    i1l2610 09F5                    i1l2766 073D  
                  i1l2768 0769              ?_send_string 0027                    _IOInit 0CD0  
          send_string@len 0029            send_string@str 0027            __CFG_PWRTE$OFF 0000  
                  _MenuUp 0A18            _LCDWriteString 0ECE      __size_of_eeprom_read 0024  
               ??___awdiv 0024                 ??___awmod 0024                    _g_menu 00D2  
               ??___lwdiv 0024                 ??___lwmod 002C          __end_of_dump_msg 04B5  
                  _memcpy 0B1A      __size_of_LCDBusyLoop 0068                    _sdebug 01D0  
        ___awdiv@quotient 0027           ___awmod@divisor 0020      __end_of_eeprom_write 0B79  
         ___awmod@counter 0025                 ??_compose 0034          __end_of_send_msg 0C48  
           ?_SaveMenuItem 0070              __pdataCOMMON 007D      __size_of_LCDSetStyle 000A  
            LCDWriteInt@i 0038              LCDWriteInt@j 0036            _send_half_byte 0778  
                  saved_w 007E                 ??_sprintf 003D         __end_of_ClearMenu 0BAA  
    __size_of_LCDWriteInt 00A1   __end_of__initialization 0051           eeprom_read@addr 0021  
  __end_of_LCDWriteString 0F30                 LCDByte@hn 0028                 LCDByte@ln 0029  
          __pcstackCOMMON 0070          ??_get_next_index 0070              __pidataBANK0 07FB  
            __pidataBANK1 09F8          crc_calculate@crc 0026      __end_of_LoadMenuItem 0A5F  
   __end_of_crc_calculate 05F2            ??_SaveMenuItem 0023    __end_of_send_half_byte 07E4  
          _OPTION_REGbits 0081         eeprom_write@value 0020                 ?_ConnInit 0070  
              __pbssBANK0 005A                __pbssBANK1 00D2                __pbssBANK2 0110  
              __pbssBANK3 0190                   ?_IOInit 0070                 ?_MenuDown 0070  
               ?_MenuInit 0070           ?_LCDWriteString 002C                   ?_MenuUp 0070  
                 ISR@byte 007B                 ?_ValueDec 0070                 ?_ValueInc 0070  
              __pmaintext 0055                 ?_ShowMenu 0070                __pintentry 0004  
  __size_of_receive_input 0075        __size_of_send_byte 002B                   ?_memcpy 0020  
                 _ADCInit 0A72          SaveMenuItem@item 0025            ClearMenu@count 0032  
         ?_send_half_byte 0020                   _LCDByte 0DBE                   _LCDInit 0F98  
              _buffer_rcv 01B0                ??_ConnInit 0020                __stringtab 0600  
            dump_msg@pmsg 00C2          LCDSetStyle@style 002C                ??_MenuDown 0020  
              ??_MenuInit 0025                 ?_dump_msg 0070           __size_of_IOInit 004D  
    __size_of_send_string 001F                 ?_send_msg 002C                ??_ValueDec 0026  
         __size_of_MenuUp 0011                ??_ValueInc 0026                ??_ShowMenu 003A  
   __size_of_eeprom_write 0030           _start_index_rcv 005B                   ___cgram 00C3  
                 ___awdiv 0E15                   ___awmod 0D1D                   ___lwdiv 0C48  
                 ___lwmod 0BAA           __size_of_memcpy 002F                 _ANSELbits 0188  
                 __ptext1 0C13                   __ptext2 0A86                   __ptext3 0AEF  
                 __ptext4 0778                   __ptext5 03FE                   __ptext6 0327  
                 __ptext7 0BAA                   __ptext8 0C48                   __ptext9 0687  
                 _compose 0687              __size_of_ISR 0035                   _dpowers 0610  
        ___awmod@dividend 0022                   _msg_rcv 0127                   _low_rcv 00D0  
               _LCDGotoXY 0AC9                   _submode 0059                   _sprintf 0327  
                 clrloop0 09E7                   main@ret 013E                   main@rsp 0146  
                 main@rqt 0145             _receive_input 0703      end_of_initialization 0051  
       __end_of_send_byte 0B1A                   memcpy@d 0027                   memcpy@n 0024  
                 memcpy@s 0029                ??_dump_msg 0046              _eeprom_write 0B49  
     get_next_index@index 0070      __end_of_SaveMenuItem 0A4C     __size_of_LoadMenuItem 0013  
              ??_send_msg 002E                 ConnInit@i 0022         __end_of_stop_mark 0622  
       LCDWriteString@msg 002C                 _TRISAbits 0085                 _TRISBbits 0086  
               _TRISCbits 0087                ?_LCDGotoXY 002C            ?_receive_input 0070  
            _LoadMenuItem 0A4C                _start_mark 061A                LCDInit@__i 002F  
           ??_eeprom_read 0020                LCDGotoXY@x 002E                LCDGotoXY@y 002C  
          __end_of_IOInit 0D1D          LoadMenuItem@item 0024                 _ClearMenu 0B79  
           ??_LCDBusyLoop 0020            __end_of_MenuUp 0A29                compose@cmd 0030  
              compose@len 0036         crc_calculate@pmsg 0020             __pidataCOMMON 07FF  
           ??_LCDSetStyle 002C            __end_of_memcpy 0B49       start_initialization 0015  
             __end_of_ISR 0C13            crc_calculate@i 0028             ??_LCDWriteInt 002F  
        ??_LCDWriteString 002E             ShowMenu@count 003E         __size_of_ConnInit 004A  
                ??_IOInit 0020  __CFG_FOSC$INTRC_NOCLKOUT 0000         __size_of_MenuDown 0011  
       __size_of_MenuInit 0054                ?_ClearMenu 0070                  ??_MenuUp 0020  
               ShowMenu@i 003F       __end_of_eeprom_read 0AC9                init_fetch0 0A29  
        ??_send_half_byte 0021         __size_of_ValueDec 0013         __size_of_ValueInc 0017  
             __pdataBANK0 0056               __pdataBANK1 00C3         __size_of_ShowMenu 005E  
                ??_memcpy 0026                  ?_ADCInit 0070       __end_of_LCDBusyLoop 0F98  
                ?_LCDByte 0025                  ?_LCDInit 0070               __pbssCOMMON 007C  
                LCDByte@c 002A                 ___latbits 0002           ??_receive_input 0071  
           __pcstackBANK0 0020             __pcstackBANK1 00A0             __pcstackBANK2 013E  
             ??_LCDGotoXY 002D       __end_of_LCDSetStyle 05FC     __size_of_SaveMenuItem 0012  
          compose@datalen 0033          eeprom_write@addr 0022          LCDWriteInt@F1650 00CB  
             sprintf@flag 0041               sprintf@prec 0042       __end_of_LCDWriteInt 0556  
  __size_of_crc_calculate 009C         __size_of_dump_msg 00B7                  ISR@value 007A  
        ___lwdiv@dividend 0022         __size_of_send_msg 0035                  ?___awdiv 0020  
                ?___awmod 0020                  ?___lwdiv 0020                  ?___lwmod 0028  
               __pstrings 0600                  ?_compose 002B                send_byte@c 0026  
            _SaveMenuItem 0A3A               _client_conn 0190   __size_of_get_next_index 000A  
               _count_rcv 005A           LCDBusyLoop@busy 0022           LCDBusyLoop@temp 0023  
        ___lwdiv@quotient 0026                  ?_sprintf 002E             ??_send_string 002A  
       interrupt_function 0004                 clear_ram0 09E6               _eeprom_read 0AA5  
               _send_byte 0AEF               ??_ClearMenu 0031               _LCDBusyLoop 0F30  
        LCDWriteString@cc 0030          __size_of_ADCInit 0014                _ADCON0bits 001F  
             __stringbase 060F                _ADCON1bits 009F                 main@i_811 014E  
               main@i_820 0151               _LCDSetStyle 05F2                 main@i_814 014F  
               main@i_823 0152                 main@i_817 0150             _crc_calculate 0556  
           dump_msg@count 00C0                 main@count 0147                 main@pconn 0144  
               main@sendc 0140          __size_of_LCDByte 0057          __size_of_LCDInit 0068  
               main@value 013F                 _stop_mark 061E              send_msg@pmsg 002C  
               compose@to 002E                  _ConnInit 0C86               _LCDWriteInt 04B5  
                _MenuDown 0A07                  _MenuInit 0D6A                ?_send_byte 0070  
               dump_msg@i 00C1                 dump_msg@s 00A0              send_string@i 002B  
     __end_of_send_string 0AA5                  _ValueDec 0A5F                  _ValueInc 07E4  
                _ShowMenu 0E70              _low_half_rcv 007D          __size_of___awdiv 005B  
        __size_of___awmod 004D         LCDBusyLoop@status 0024          __size_of___lwdiv 003E  
        __size_of___lwmod 0034        __end_of__stringtab 0610             _end_index_rcv 007C  
          ?_crc_calculate 0020                _ANSELHbits 0189                sprintf@val 0043  
        __size_of_compose 007C           ___lwdiv@divisor 0020           ___lwdiv@counter 0025  
                __ptext10 0B1A                  __ptext11 0556                  __ptext20 0A18  
                __ptext12 07E4                  __ptext21 0D6A                  __ptext13 0A5F  
                __ptext30 0ECE                  __ptext22 0A4C                  __ptext14 0A3A  
                __ptext31 0AC9                  __ptext23 0AA5                  __ptext15 0B49  
                __ptext32 0DBE                  __ptext24 0A07                  __ptext16 0E70  
                __ptext33 0F30                  __ptext25 05F2                  __ptext17 04B5  
                __ptext34 0A72                  __ptext26 0F98                  __ptext18 0D1D  
                __ptext35 0BDE                  __ptext27 0CD0                  __ptext19 0E15  
                __ptext36 0703                  __ptext28 0C86                  __ptext37 09EE  
                __ptext29 0B79         __CFG_BOR4V$BOR21V 0000          __size_of_sprintf 00D7  
               send_msg@s 002F                  _dump_msg 03FE             __size_of_main 02D2  
                _send_msg 0C13                  _pmsg_rcv 0058                  _pstr_rcv 00D1  
                main@revc 0141                  main@prsp 0143                  main@prqt 0142  
          _get_next_index 09EE                _INTCONbits 000B                ClearMenu@i 0033  
                memcpy@d1 0020                  memcpy@s1 0022                  init_ram0 0A2D  
                intlevel1 0000                 sprintf@ap 0040                 sprintf@sp 002E  
             _send_string 0A86          ___lwmod@dividend 002A            LCDWriteInt@val 002C  
          LCDWriteInt@str 0031               ??_send_byte 0024                 stringcode 060A  
      receive_input@byte1 0073        receive_input@byte2 0074        receive_input@value 0072  
         ??_crc_calculate 0022    __end_of_get_next_index 09F8        __end_of_start_mark 061E  
                sprintf@c 0045                  sprintf@f 0030           ___lwmod@divisor 0028  
         ___lwmod@counter 002D                  stringdir 060A                  stringtab 0600  
     LCDWriteString@count 002F     __end_of_receive_input 0778       send_half_byte@value 0022  
           ?_eeprom_write 0020        send_half_byte@byte 0023              ?_eeprom_read 0070  
       send_half_byte@low 0020   __size_of_LCDWriteString 0062  
