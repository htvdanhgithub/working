

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Jul 24 13:52:26 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	intentry,global,class=CODE,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	dabs	1,0x7E,2
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000E                     	;# 
    89  000F                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  001D                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0086                     	;# 
   111  0087                     	;# 
   112  0089                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  008F                     	;# 
   117  0090                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  0105                     	;# 
   136  0107                     	;# 
   137  0108                     	;# 
   138  0109                     	;# 
   139  010C                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  010F                     	;# 
   144  0185                     	;# 
   145  0187                     	;# 
   146  0188                     	;# 
   147  0189                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  0105                     	;# 
   212  0107                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  0185                     	;# 
   221  0187                     	;# 
   222  0188                     	;# 
   223  0189                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0009                     	;# 
   235  000A                     	;# 
   236  000B                     	;# 
   237  000C                     	;# 
   238  000D                     	;# 
   239  000E                     	;# 
   240  000E                     	;# 
   241  000F                     	;# 
   242  0010                     	;# 
   243  0011                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0014                     	;# 
   247  0015                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0017                     	;# 
   251  0018                     	;# 
   252  0019                     	;# 
   253  001A                     	;# 
   254  001B                     	;# 
   255  001B                     	;# 
   256  001C                     	;# 
   257  001D                     	;# 
   258  001E                     	;# 
   259  001F                     	;# 
   260  0081                     	;# 
   261  0085                     	;# 
   262  0086                     	;# 
   263  0087                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  008F                     	;# 
   269  0090                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0095                     	;# 
   277  0096                     	;# 
   278  0097                     	;# 
   279  0098                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  009F                     	;# 
   287  0105                     	;# 
   288  0107                     	;# 
   289  0108                     	;# 
   290  0109                     	;# 
   291  010C                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  010F                     	;# 
   296  0185                     	;# 
   297  0187                     	;# 
   298  0188                     	;# 
   299  0189                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0009                     	;# 
   311  000A                     	;# 
   312  000B                     	;# 
   313  000C                     	;# 
   314  000D                     	;# 
   315  000E                     	;# 
   316  000E                     	;# 
   317  000F                     	;# 
   318  0010                     	;# 
   319  0011                     	;# 
   320  0012                     	;# 
   321  0013                     	;# 
   322  0014                     	;# 
   323  0015                     	;# 
   324  0015                     	;# 
   325  0016                     	;# 
   326  0017                     	;# 
   327  0018                     	;# 
   328  0019                     	;# 
   329  001A                     	;# 
   330  001B                     	;# 
   331  001B                     	;# 
   332  001C                     	;# 
   333  001D                     	;# 
   334  001E                     	;# 
   335  001F                     	;# 
   336  0081                     	;# 
   337  0085                     	;# 
   338  0086                     	;# 
   339  0087                     	;# 
   340  0089                     	;# 
   341  008C                     	;# 
   342  008D                     	;# 
   343  008E                     	;# 
   344  008F                     	;# 
   345  0090                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0093                     	;# 
   349  0093                     	;# 
   350  0093                     	;# 
   351  0094                     	;# 
   352  0095                     	;# 
   353  0096                     	;# 
   354  0097                     	;# 
   355  0098                     	;# 
   356  0099                     	;# 
   357  009A                     	;# 
   358  009B                     	;# 
   359  009C                     	;# 
   360  009D                     	;# 
   361  009E                     	;# 
   362  009F                     	;# 
   363  0105                     	;# 
   364  0107                     	;# 
   365  0108                     	;# 
   366  0109                     	;# 
   367  010C                     	;# 
   368  010C                     	;# 
   369  010D                     	;# 
   370  010E                     	;# 
   371  010F                     	;# 
   372  0185                     	;# 
   373  0187                     	;# 
   374  0188                     	;# 
   375  0189                     	;# 
   376  018C                     	;# 
   377  018D                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0009                     	;# 
   387  000A                     	;# 
   388  000B                     	;# 
   389  000C                     	;# 
   390  000D                     	;# 
   391  000E                     	;# 
   392  000E                     	;# 
   393  000F                     	;# 
   394  0010                     	;# 
   395  0011                     	;# 
   396  0012                     	;# 
   397  0013                     	;# 
   398  0014                     	;# 
   399  0015                     	;# 
   400  0015                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001B                     	;# 
   408  001C                     	;# 
   409  001D                     	;# 
   410  001E                     	;# 
   411  001F                     	;# 
   412  0081                     	;# 
   413  0085                     	;# 
   414  0086                     	;# 
   415  0087                     	;# 
   416  0089                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  008F                     	;# 
   421  0090                     	;# 
   422  0091                     	;# 
   423  0092                     	;# 
   424  0093                     	;# 
   425  0093                     	;# 
   426  0093                     	;# 
   427  0094                     	;# 
   428  0095                     	;# 
   429  0096                     	;# 
   430  0097                     	;# 
   431  0098                     	;# 
   432  0099                     	;# 
   433  009A                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  009F                     	;# 
   439  0105                     	;# 
   440  0107                     	;# 
   441  0108                     	;# 
   442  0109                     	;# 
   443  010C                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  0185                     	;# 
   449  0187                     	;# 
   450  0188                     	;# 
   451  0189                     	;# 
   452  018C                     	;# 
   453  018D                     	;# 
   454  0000                     	;# 
   455  0001                     	;# 
   456  0002                     	;# 
   457  0003                     	;# 
   458  0004                     	;# 
   459  0005                     	;# 
   460  0006                     	;# 
   461  0007                     	;# 
   462  0009                     	;# 
   463  000A                     	;# 
   464  000B                     	;# 
   465  000C                     	;# 
   466  000D                     	;# 
   467  000E                     	;# 
   468  000E                     	;# 
   469  000F                     	;# 
   470  0010                     	;# 
   471  0011                     	;# 
   472  0012                     	;# 
   473  0013                     	;# 
   474  0014                     	;# 
   475  0015                     	;# 
   476  0015                     	;# 
   477  0016                     	;# 
   478  0017                     	;# 
   479  0018                     	;# 
   480  0019                     	;# 
   481  001A                     	;# 
   482  001B                     	;# 
   483  001B                     	;# 
   484  001C                     	;# 
   485  001D                     	;# 
   486  001E                     	;# 
   487  001F                     	;# 
   488  0081                     	;# 
   489  0085                     	;# 
   490  0086                     	;# 
   491  0087                     	;# 
   492  0089                     	;# 
   493  008C                     	;# 
   494  008D                     	;# 
   495  008E                     	;# 
   496  008F                     	;# 
   497  0090                     	;# 
   498  0091                     	;# 
   499  0092                     	;# 
   500  0093                     	;# 
   501  0093                     	;# 
   502  0093                     	;# 
   503  0094                     	;# 
   504  0095                     	;# 
   505  0096                     	;# 
   506  0097                     	;# 
   507  0098                     	;# 
   508  0099                     	;# 
   509  009A                     	;# 
   510  009B                     	;# 
   511  009C                     	;# 
   512  009D                     	;# 
   513  009E                     	;# 
   514  009F                     	;# 
   515  0105                     	;# 
   516  0107                     	;# 
   517  0108                     	;# 
   518  0109                     	;# 
   519  010C                     	;# 
   520  010C                     	;# 
   521  010D                     	;# 
   522  010E                     	;# 
   523  010F                     	;# 
   524  0185                     	;# 
   525  0187                     	;# 
   526  0188                     	;# 
   527  0189                     	;# 
   528  018C                     	;# 
   529  018D                     	;# 
   530                           
   531                           	psect	idataCOMMON
   532  07FF                     __pidataCOMMON:	
   533                           
   534                           ;initializer for _low_half_rcv
   535  07FF  3401               	retlw	1
   536                           
   537                           	psect	idataBANK0
   538  17D4                     __pidataBANK0:	
   539                           
   540                           ;initializer for _low_rcv
   541  17D4  3401               	retlw	1
   542                           
   543                           ;initializer for _pmsg
   544  17D5  3410               	retlw	low (_msg| (0+256))
   545                           
   546                           ;initializer for _pmsg_rcv
   547  17D6  34D8               	retlw	low (_msg_rcv| (0+256))
   548                           
   549                           ;initializer for _pstr_rcv
   550  17D7  34D8               	retlw	low (_msg_rcv| (0+256))
   551                           
   552                           	psect	idataBANK1
   553  0812                     __pidataBANK1:	
   554                           
   555                           ;initializer for ___cgram
   556  0812  340C               	retlw	12
   557  0813  3412               	retlw	18
   558  0814  3412               	retlw	18
   559  0815  340C               	retlw	12
   560  0816  3400               	retlw	0
   561  0817  3400               	retlw	0
   562  0818  3400               	retlw	0
   563  0819  3400               	retlw	0
   564                           
   565                           ;initializer for LCDWriteInt@F1650
   566  081A  34F0               	retlw	240
   567  081B  34F0               	retlw	240
   568  081C  34F0               	retlw	240
   569  081D  34F0               	retlw	240
   570  081E  34F0               	retlw	240
   571                           
   572                           ;initializer for _mode
   573  081F  3401               	retlw	1
   574                           
   575                           ;initializer for _submode
   576  0820  3401               	retlw	1
   577                           
   578                           	psect	strings
   579  0631                     __pstrings:	
   580  0631                     stringtab:	
   581  0631                     __stringtab:	
   582                           
   583                           ;	String table - string pointers are 1 byte each
   584  0631  1BFF               	btfsc	btemp+1,7
   585  0632  2E3B               	ljmp	stringcode
   586  0633  1383               	bcf	3,7
   587  0634  187F               	btfsc	btemp+1,0
   588  0635  1783               	bsf	3,7
   589  0636  0800               	movf	0,w
   590  0637  0A84               	incf	4,f
   591  0638  1903               	skipnz
   592  0639  0AFF               	incf	btemp+1,f
   593  063A  0008               	return
   594  063B                     stringcode:	
   595  063B                     stringdir:	
   596  063B  3006               	movlw	high stringdir
   597  063C  008A               	movwf	10
   598  063D  0804               	movf	4,w
   599  063E  0A84               	incf	4,f
   600  063F  0782               	addwf	2,f
   601  0640                     __stringbase:	
   602  0640  3400               	retlw	0
   603  0641                     __end_of__stringtab:	
   604  0641                     _dpowers:	
   605  0641  3401               	retlw	1
   606  0642  3400               	retlw	0
   607  0643  340A               	retlw	10
   608  0644  3400               	retlw	0
   609  0645  3464               	retlw	100
   610  0646  3400               	retlw	0
   611  0647  34E8               	retlw	232
   612  0648  3403               	retlw	3
   613  0649  3410               	retlw	16
   614  064A  3427               	retlw	39
   615  064B                     __end_of_dpowers:	
   616  064B                     _start_mark:	
   617  064B  34DE               	retlw	222
   618  064C  34DF               	retlw	223
   619  064D  34E0               	retlw	224
   620  064E  34E1               	retlw	225
   621  064F                     __end_of_start_mark:	
   622  064F                     _stop_mark:	
   623  064F  34E1               	retlw	225
   624  0650  34E0               	retlw	224
   625  0651  34DF               	retlw	223
   626  0652  34DE               	retlw	222
   627  0653                     __end_of_stop_mark:	
   628  001F                     _ADCON0bits	set	31
   629  001E                     _ADRESH	set	30
   630  000B                     _INTCONbits	set	11
   631  0007                     _PORTC	set	7
   632  0018                     _CARRY	set	24
   633  005F                     _GIE	set	95
   634  0028                     _RA0	set	40
   635  0029                     _RA1	set	41
   636  002A                     _RA2	set	42
   637  002B                     _RA3	set	43
   638  002C                     _RA4	set	44
   639  002D                     _RA5	set	45
   640  002E                     _RA6	set	46
   641  002F                     _RA7	set	47
   642  0031                     _RB1	set	49
   643  0032                     _RB2	set	50
   644  0034                     _RB4	set	52
   645  0035                     _RB5	set	53
   646  0036                     _RB6	set	54
   647  0037                     _RB7	set	55
   648  0039                     _RC1	set	57
   649  003A                     _RC2	set	58
   650  003B                     _RC3	set	59
   651  009F                     _ADCON1bits	set	159
   652  009E                     _ADRESL	set	158
   653  0081                     _OPTION_REGbits	set	129
   654  0085                     _TRISAbits	set	133
   655  0086                     _TRISBbits	set	134
   656  0087                     _TRISC	set	135
   657  0087                     _TRISCbits	set	135
   658  010D                     _EEADR	set	269
   659  010C                     _EEDATA	set	268
   660  0189                     _ANSELHbits	set	393
   661  0188                     _ANSELbits	set	392
   662  018C                     _EECON1	set	396
   663  018D                     _EECON2	set	397
   664  0C60                     _RD	set	3168
   665  0C61                     _WR	set	3169
   666  0C62                     _WREN	set	3170
   667  0653                     STR_11:	
   668  0653  344D               	retlw	77	;'M'
   669  0654  343A               	retlw	58	;':'
   670  0655  3425               	retlw	37	;'%'
   671  0656  3464               	retlw	100	;'d'
   672  0657  342C               	retlw	44	;','
   673  0658  3425               	retlw	37	;'%'
   674  0659  3464               	retlw	100	;'d'
   675  065A  342C               	retlw	44	;','
   676  065B  3425               	retlw	37	;'%'
   677  065C  3464               	retlw	100	;'d'
   678  065D  342C               	retlw	44	;','
   679  065E  3425               	retlw	37	;'%'
   680  065F  3464               	retlw	100	;'d'
   681  0660  342C               	retlw	44	;','
   682  0661  3425               	retlw	37	;'%'
   683  0662  3464               	retlw	100	;'d'
   684  0663  342C               	retlw	44	;','
   685  0664  3425               	retlw	37	;'%'
   686  0665  3464               	retlw	100	;'d'
   687  0666  3400               	retlw	0
   688  0667                     STR_13:	
   689  0667  3443               	retlw	67	;'C'
   690  0668  343A               	retlw	58	;':'
   691  0669  3425               	retlw	37	;'%'
   692  066A  3464               	retlw	100	;'d'
   693  066B  342C               	retlw	44	;','
   694  066C  3425               	retlw	37	;'%'
   695  066D  3464               	retlw	100	;'d'
   696  066E  342C               	retlw	44	;','
   697  066F  3425               	retlw	37	;'%'
   698  0670  3464               	retlw	100	;'d'
   699  0671  342C               	retlw	44	;','
   700  0672  3425               	retlw	37	;'%'
   701  0673  3464               	retlw	100	;'d'
   702  0674  3400               	retlw	0
   703  0675                     STR_17:	
   704  0675  344E               	retlw	78	;'N'
   705  0676  344F               	retlw	79	;'O'
   706  0677  3454               	retlw	84	;'T'
   707  0678  3445               	retlw	69	;'E'
   708  0679  3444               	retlw	68	;'D'
   709  067A  3449               	retlw	73	;'I'
   710  067B  3454               	retlw	84	;'T'
   711  067C  3420               	retlw	32	;' '
   712  067D  344D               	retlw	77	;'M'
   713  067E  344F               	retlw	79	;'O'
   714  067F  3444               	retlw	68	;'D'
   715  0680  3445               	retlw	69	;'E'
   716  0681  3400               	retlw	0
   717  0682                     STR_18:	
   718  0682  344E               	retlw	78	;'N'
   719  0683  344F               	retlw	79	;'O'
   720  0684  3452               	retlw	82	;'R'
   721  0685  344D               	retlw	77	;'M'
   722  0686  3441               	retlw	65	;'A'
   723  0687  344C               	retlw	76	;'L'
   724  0688  3420               	retlw	32	;' '
   725  0689  344D               	retlw	77	;'M'
   726  068A  344F               	retlw	79	;'O'
   727  068B  3444               	retlw	68	;'D'
   728  068C  3445               	retlw	69	;'E'
   729  068D  3400               	retlw	0
   730  068E                     STR_15:	
   731  068E  344D               	retlw	77	;'M'
   732  068F  3445               	retlw	69	;'E'
   733  0690  344E               	retlw	78	;'N'
   734  0691  3455               	retlw	85	;'U'
   735  0692  3420               	retlw	32	;' '
   736  0693  344D               	retlw	77	;'M'
   737  0694  344F               	retlw	79	;'O'
   738  0695  3444               	retlw	68	;'D'
   739  0696  3445               	retlw	69	;'E'
   740  0697  3400               	retlw	0
   741  0698                     STR_21:	
   742  0698  3449               	retlw	73	;'I'
   743  0699  3444               	retlw	68	;'D'
   744  069A  3431               	retlw	49	;'1'
   745  069B  343A               	retlw	58	;':'
   746  069C  3400               	retlw	0
   747  069D                     STR_22:	
   748  069D  3449               	retlw	73	;'I'
   749  069E  3444               	retlw	68	;'D'
   750  069F  3432               	retlw	50	;'2'
   751  06A0  343A               	retlw	58	;':'
   752  06A1  3400               	retlw	0
   753  06A2                     STR_23:	
   754  06A2  3449               	retlw	73	;'I'
   755  06A3  3444               	retlw	68	;'D'
   756  06A4  3433               	retlw	51	;'3'
   757  06A5  343A               	retlw	58	;':'
   758  06A6  3400               	retlw	0
   759  06A7                     STR_24:	
   760  06A7  3449               	retlw	73	;'I'
   761  06A8  3444               	retlw	68	;'D'
   762  06A9  3434               	retlw	52	;'4'
   763  06AA  343A               	retlw	58	;':'
   764  06AB  3400               	retlw	0
   765  06AC                     STR_20:	
   766  06AC  3444               	retlw	68	;'D'
   767  06AD  344F               	retlw	79	;'O'
   768  06AE  3457               	retlw	87	;'W'
   769  06AF  344E               	retlw	78	;'N'
   770  06B0  3400               	retlw	0
   771  06B1                     STR_19:	
   772  06B1  3455               	retlw	85	;'U'
   773  06B2  3450               	retlw	80	;'P'
   774  06B3  3400               	retlw	0
   775  069C                     
   776                           ; #config settings
   777  0000                     
   778                           	psect	cinit
   779  0015                     start_initialization:	
   780  0015                     __initialization:	
   781                           
   782                           ; Clear objects allocated to COMMON
   783  0015  01FC               	clrf	__pbssCOMMON& (0+127)
   784                           
   785                           ; Clear objects allocated to BANK0
   786  0016  01EE               	clrf	__pbssBANK0& (0+127)
   787  0017  01EF               	clrf	(__pbssBANK0+1)& (0+127)
   788                           
   789                           ; Clear objects allocated to BANK1
   790  0018  1383               	bcf	3,7	;select IRP bank0
   791  0019  30A0               	movlw	low __pbssBANK1
   792  001A  0084               	movwf	4
   793  001B  30CB               	movlw	low (__pbssBANK1+43)
   794  001C  160A  118A  27D8  120A  118A  	fcall	clear_ram0
   795                           
   796                           ; Clear objects allocated to BANK3
   797  0021  1783               	bsf	3,7	;select IRP bank2
   798  0022  3090               	movlw	low __pbssBANK3
   799  0023  0084               	movwf	4
   800  0024  30EF               	movlw	low (__pbssBANK3+95)
   801  0025  160A  118A  27D8  120A  118A  	fcall	clear_ram0
   802                           
   803                           ; Clear objects allocated to BANK2
   804  002A  3010               	movlw	low __pbssBANK2
   805  002B  0084               	movwf	4
   806  002C  3027               	movlw	low (__pbssBANK2+23)
   807  002D  160A  118A  27D8  120A  118A  	fcall	clear_ram0
   808                           
   809                           ; Initialize objects allocated to BANK1
   810  0032  1383               	bcf	3,7	;select IRP bank0
   811  0033  30F0               	movlw	low (__pdataBANK1+15)
   812  0034  00FD               	movwf	btemp+-1
   813  0035  3008               	movlw	high __pidataBANK1
   814  0036  00FE               	movwf	btemp
   815  0037  3012               	movlw	low __pidataBANK1
   816  0038  00FF               	movwf	btemp+1
   817  0039  30E1               	movlw	low __pdataBANK1
   818  003A  0084               	movwf	4
   819  003B  120A  158A  2067  120A  118A  	fcall	init_ram0
   820                           
   821                           ; Initialize objects allocated to BANK0
   822  0040  306E               	movlw	low (__pdataBANK0+4)
   823  0041  00FD               	movwf	btemp+-1
   824  0042  3017               	movlw	high __pidataBANK0
   825  0043  00FE               	movwf	btemp
   826  0044  30D4               	movlw	low __pidataBANK0
   827  0045  00FF               	movwf	btemp+1
   828  0046  306A               	movlw	low __pdataBANK0
   829  0047  0084               	movwf	4
   830  0048  120A  158A  2067  120A  118A  	fcall	init_ram0
   831                           
   832                           ; Initialize objects allocated to COMMON
   833  004D  120A  118A  27FF   	fcall	__pidataCOMMON	;fetch initializer
   834  0050  00FD               	movwf	__pdataCOMMON& (0+127)
   835  0051                     end_of_initialization:	
   836                           ;End of C runtime variable initialization code
   837                           
   838  0051                     __end_of__initialization:	
   839  0051  0183               	clrf	3
   840  0052  120A  118A  2855   	ljmp	_main	;jump to C main() function
   841                           
   842                           	psect	bssCOMMON
   843  007C                     __pbssCOMMON:	
   844  007C                     _end_index_rcv:	
   845  007C                     	ds	1
   846                           
   847                           	psect	dataCOMMON
   848  007D                     __pdataCOMMON:	
   849  007D                     _low_half_rcv:	
   850  007D                     	ds	1
   851                           
   852                           	psect	bssBANK0
   853  006E                     __pbssBANK0:	
   854  006E                     _count_rcv:	
   855  006E                     	ds	1
   856  006F                     _start_index_rcv:	
   857  006F                     	ds	1
   858                           
   859                           	psect	dataBANK0
   860  006A                     __pdataBANK0:	
   861  006A                     _low_rcv:	
   862  006A                     	ds	1
   863  006B                     _pmsg:	
   864  006B                     	ds	1
   865  006C                     _pmsg_rcv:	
   866  006C                     	ds	1
   867  006D                     _pstr_rcv:	
   868  006D                     	ds	1
   869                           
   870                           	psect	bssBANK1
   871  00A0                     __pbssBANK1:	
   872  00A0                     _g_menu:	
   873  00A0                     	ds	9
   874  00A9                     _count:	
   875  00A9                     	ds	2
   876  00AB                     _sdebug:	
   877  00AB                     	ds	32
   878                           
   879                           	psect	dataBANK1
   880  00E1                     __pdataBANK1:	
   881  00E1                     ___cgram:	
   882  00E1                     	ds	8
   883  00E9                     LCDWriteInt@F1650:	
   884  00E9                     	ds	5
   885  00EE                     _mode:	
   886  00EE                     	ds	1
   887  00EF                     _submode:	
   888  00EF                     	ds	1
   889                           
   890                           	psect	bssBANK3
   891  0190                     __pbssBANK3:	
   892  0190                     _client_conn:	
   893  0190                     	ds	40
   894  01B8                     _buffer_rcv:	
   895  01B8                     	ds	32
   896  01D8                     _msg_rcv:	
   897  01D8                     	ds	23
   898                           
   899                           	psect	bssBANK2
   900  0110                     __pbssBANK2:	
   901  0110                     _msg:	
   902  0110                     	ds	23
   903                           
   904                           	psect	clrtext
   905  17D8                     clear_ram0:	
   906                           ;	Called with FSR containing the base address, and
   907                           ;	W with the last address+1
   908                           
   909  17D8  0064               	clrwdt	;clear the watchdog before getting into this loop
   910  17D9                     clrloop0:	
   911  17D9  0180               	clrf	0	;clear RAM location pointed to by FSR
   912  17DA  0A84               	incf	4,f	;increment pointer
   913  17DB  0604               	xorwf	4,w	;XOR with final address
   914  17DC  1903               	btfsc	3,2	;have we reached the end yet?
   915  17DD  3400               	retlw	0	;all done for this memory range, return
   916  17DE  0604               	xorwf	4,w	;XOR again to restore value
   917  17DF  2FD9               	goto	clrloop0	;do the next byte
   918                           
   919                           	psect	inittext
   920  0863                     init_fetch0:	
   921                           ;	Called with low address in FSR and high address in W
   922                           
   923  0863  087E               	movf	126,w
   924  0864  008A               	movwf	10
   925  0865  087F               	movf	127,w
   926  0866  0082               	movwf	2
   927  0867                     init_ram0:	
   928                           ;Called with:
   929                           ;	high address of idata address in btemp 
   930                           ;	low address of idata address in btemp+1 
   931                           ;	low address of data in FSR
   932                           ;	high address + 1 of data in btemp-1
   933                           
   934  0867  2063  120A  158A   	fcall	init_fetch0
   935  086A  0080               	movwf	0
   936  086B  0A84               	incf	4,f
   937  086C  0804               	movf	4,w
   938  086D  067D               	xorwf	125,w
   939  086E  1903               	btfsc	3,2
   940  086F  3400               	retlw	0
   941  0870  0AFF               	incf	127,f
   942  0871  1903               	btfsc	3,2
   943  0872  0AFE               	incf	126,f
   944  0873  2867               	goto	init_ram0
   945                           
   946                           	psect	cstackBANK1
   947  00CB                     __pcstackBANK1:	
   948  00CB                     main@ret:	
   949                           
   950                           ; 1 bytes @ 0x0
   951  00CB                     	ds	1
   952  00CC                     main@value:	
   953                           
   954                           ; 1 bytes @ 0x1
   955  00CC                     	ds	1
   956  00CD                     main@sendc:	
   957                           
   958                           ; 1 bytes @ 0x2
   959  00CD                     	ds	1
   960  00CE                     main@revc:	
   961                           
   962                           ; 1 bytes @ 0x3
   963  00CE                     	ds	1
   964  00CF                     main@prqt:	
   965                           
   966                           ; 1 bytes @ 0x4
   967  00CF                     	ds	1
   968  00D0                     main@prsp:	
   969                           
   970                           ; 1 bytes @ 0x5
   971  00D0                     	ds	1
   972  00D1                     main@pconn:	
   973                           
   974                           ; 1 bytes @ 0x6
   975  00D1                     	ds	1
   976  00D2                     main@rqt:	
   977                           
   978                           ; 1 bytes @ 0x7
   979  00D2                     	ds	1
   980  00D3                     main@rsp:	
   981                           
   982                           ; 1 bytes @ 0x8
   983  00D3                     	ds	1
   984  00D4                     main@rqt_750:	
   985                           
   986                           ; 1 bytes @ 0x9
   987  00D4                     	ds	1
   988  00D5                     main@count:	
   989                           
   990                           ; 1 bytes @ 0xA
   991  00D5                     	ds	1
   992  00D6                     main@count_756:	
   993                           
   994                           ; 1 bytes @ 0xB
   995  00D6                     	ds	1
   996  00D7                     main@count_759:	
   997                           
   998                           ; 1 bytes @ 0xC
   999  00D7                     	ds	1
  1000  00D8                     main@count_762:	
  1001                           
  1002                           ; 1 bytes @ 0xD
  1003  00D8                     	ds	1
  1004  00D9                     main@count_765:	
  1005                           
  1006                           ; 1 bytes @ 0xE
  1007  00D9                     	ds	1
  1008  00DA                     main@count_768:	
  1009                           
  1010                           ; 1 bytes @ 0xF
  1011  00DA                     	ds	1
  1012  00DB                     main@i:	
  1013                           
  1014                           ; 1 bytes @ 0x10
  1015  00DB                     	ds	1
  1016  00DC                     main@i_758:	
  1017                           
  1018                           ; 1 bytes @ 0x11
  1019  00DC                     	ds	1
  1020  00DD                     main@i_761:	
  1021                           
  1022                           ; 1 bytes @ 0x12
  1023  00DD                     	ds	1
  1024  00DE                     main@i_764:	
  1025                           
  1026                           ; 1 bytes @ 0x13
  1027  00DE                     	ds	1
  1028  00DF                     main@i_767:	
  1029                           
  1030                           ; 1 bytes @ 0x14
  1031  00DF                     	ds	1
  1032  00E0                     main@i_770:	
  1033                           
  1034                           ; 1 bytes @ 0x15
  1035  00E0                     	ds	1
  1036                           
  1037                           	psect	cstackCOMMON
  1038  0070                     __pcstackCOMMON:	
  1039  0070                     ?_LCDInit:	
  1040  0070                     ?_ADCInit:	
  1041                           ; 1 bytes @ 0x0
  1042                           
  1043  0070                     ?_MenuInit:	
  1044                           ; 1 bytes @ 0x0
  1045                           
  1046  0070                     ?_ShowMenu:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049  0070                     ?_LCDSetStyle:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052  0070                     ?_ClearMenu:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055  0070                     ?_ValueInc:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058  0070                     ?_MenuUp:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0070                     ?_MenuDown:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  0070                     ?_LCDBusyLoop:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  0070                     ?_LoadMenuItem:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  0070                     ?_eeprom_read:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0070                     ?_send_byte:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  0070                     ?_debug_1:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079  0070                     ?_get_next_index:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082  0070                     ?_receive_input:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  0070                     ?_send_msg:	
  1086                           ; 1 bytes @ 0x0
  1087                           
  1088  0070                     ?_crc_verify:	
  1089                           ; 1 bytes @ 0x0
  1090                           
  1091  0070                     ?_get_msg:	
  1092                           ; 1 bytes @ 0x0
  1093                           
  1094  0070                     ?_ConnInit:	
  1095                           ; 1 bytes @ 0x0
  1096                           
  1097  0070                     ?_IOInit:	
  1098                           ; 1 bytes @ 0x0
  1099                           
  1100  0070                     ?_ISR:	
  1101                           ; 1 bytes @ 0x0
  1102                           
  1103  0070                     ?_main:	
  1104                           ; 1 bytes @ 0x0
  1105                           
  1106  0070                     ?_SaveMenuItem:	
  1107                           ; 1 bytes @ 0x0
  1108                           
  1109  0070                     ?i1_get_next_index:	
  1110                           ; 1 bytes @ 0x0
  1111                           
  1112  0070                     ??i1_get_next_index:	
  1113                           ; 1 bytes @ 0x0
  1114                           
  1115  0070                     ?_ValueDec:	
  1116                           ; 1 bytes @ 0x0
  1117                           
  1118  0070                     i1get_next_index@index:	
  1119                           ; 2 bytes @ 0x0
  1120                           
  1121                           
  1122                           ; 1 bytes @ 0x0
  1123  0070                     	ds	1
  1124  0071                     ??_receive_input:	
  1125                           
  1126                           ; 1 bytes @ 0x1
  1127  0071                     	ds	1
  1128  0072                     receive_input@value:	
  1129                           
  1130                           ; 1 bytes @ 0x2
  1131  0072                     	ds	1
  1132  0073                     receive_input@byte1:	
  1133                           
  1134                           ; 1 bytes @ 0x3
  1135  0073                     	ds	1
  1136  0074                     receive_input@byte2:	
  1137                           
  1138                           ; 1 bytes @ 0x4
  1139  0074                     	ds	1
  1140  0075                     ??_ISR:	
  1141                           
  1142                           ; 1 bytes @ 0x5
  1143  0075                     	ds	5
  1144  007A                     ISR@value:	
  1145                           
  1146                           ; 1 bytes @ 0xA
  1147  007A                     	ds	1
  1148  007B                     ISR@byte:	
  1149                           
  1150                           ; 1 bytes @ 0xB
  1151  007B                     	ds	1
  1152                           
  1153                           	psect	cstackBANK0
  1154  0020                     __pcstackBANK0:	
  1155  0020                     ?_memcpy:	
  1156  0020                     ??_ADCInit:	
  1157                           ; 1 bytes @ 0x0
  1158                           
  1159  0020                     ??_MenuUp:	
  1160                           ; 1 bytes @ 0x0
  1161                           
  1162  0020                     ??_MenuDown:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0020                     ??_LCDBusyLoop:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0020                     ?_eeprom_write:	
  1169                           ; 1 bytes @ 0x0
  1170                           
  1171  0020                     ??_eeprom_read:	
  1172                           ; 1 bytes @ 0x0
  1173                           
  1174  0020                     ?_send_half_byte:	
  1175                           ; 1 bytes @ 0x0
  1176                           
  1177  0020                     ??_get_next_index:	
  1178                           ; 1 bytes @ 0x0
  1179                           
  1180  0020                     ?_get_plus_index:	
  1181                           ; 1 bytes @ 0x0
  1182                           
  1183  0020                     ?_get_minus_index:	
  1184                           ; 1 bytes @ 0x0
  1185                           
  1186  0020                     ?_get_distance:	
  1187                           ; 1 bytes @ 0x0
  1188                           
  1189  0020                     ?_is_right_addr:	
  1190                           ; 1 bytes @ 0x0
  1191                           
  1192  0020                     ??_IOInit:	
  1193                           ; 1 bytes @ 0x0
  1194                           
  1195  0020                     ?___bmul:	
  1196                           ; 1 bytes @ 0x0
  1197                           
  1198  0020                     ?_crc_calculate:	
  1199                           ; 1 bytes @ 0x0
  1200                           
  1201  0020                     ?___awdiv:	
  1202                           ; 2 bytes @ 0x0
  1203                           
  1204  0020                     ?___awmod:	
  1205                           ; 2 bytes @ 0x0
  1206                           
  1207  0020                     ?___lwdiv:	
  1208                           ; 2 bytes @ 0x0
  1209                           
  1210  0020                     send_half_byte@low:	
  1211                           ; 2 bytes @ 0x0
  1212                           
  1213  0020                     get_next_index@index:	
  1214                           ; 1 bytes @ 0x0
  1215                           
  1216  0020                     get_plus_index@add:	
  1217                           ; 1 bytes @ 0x0
  1218                           
  1219  0020                     get_minus_index@sub:	
  1220                           ; 1 bytes @ 0x0
  1221                           
  1222  0020                     get_distance@end_index:	
  1223                           ; 1 bytes @ 0x0
  1224                           
  1225  0020                     is_right_addr@pmsg:	
  1226                           ; 1 bytes @ 0x0
  1227                           
  1228  0020                     eeprom_write@value:	
  1229                           ; 1 bytes @ 0x0
  1230                           
  1231  0020                     ___bmul@multiplicand:	
  1232                           ; 1 bytes @ 0x0
  1233                           
  1234  0020                     crc_calculate@pmsg:	
  1235                           ; 1 bytes @ 0x0
  1236                           
  1237  0020                     ___awdiv@divisor:	
  1238                           ; 2 bytes @ 0x0
  1239                           
  1240  0020                     ___awmod@divisor:	
  1241                           ; 2 bytes @ 0x0
  1242                           
  1243  0020                     ___lwdiv@divisor:	
  1244                           ; 2 bytes @ 0x0
  1245                           
  1246  0020                     memcpy@s1:	
  1247                           ; 2 bytes @ 0x0
  1248                           
  1249                           
  1250                           ; 2 bytes @ 0x0
  1251  0020                     	ds	1
  1252  0021                     ??_eeprom_write:	
  1253  0021                     ??_send_half_byte:	
  1254                           ; 1 bytes @ 0x1
  1255                           
  1256  0021                     ??_get_plus_index:	
  1257                           ; 1 bytes @ 0x1
  1258                           
  1259  0021                     ??_get_minus_index:	
  1260                           ; 1 bytes @ 0x1
  1261                           
  1262  0021                     ??_get_distance:	
  1263                           ; 1 bytes @ 0x1
  1264                           
  1265  0021                     ??_is_right_addr:	
  1266                           ; 1 bytes @ 0x1
  1267                           
  1268  0021                     ??___bmul:	
  1269                           ; 1 bytes @ 0x1
  1270                           
  1271  0021                     get_minus_index@index:	
  1272                           ; 1 bytes @ 0x1
  1273                           
  1274  0021                     get_distance@start_index:	
  1275                           ; 1 bytes @ 0x1
  1276                           
  1277  0021                     eeprom_read@addr:	
  1278                           ; 1 bytes @ 0x1
  1279                           
  1280                           
  1281                           ; 1 bytes @ 0x1
  1282  0021                     	ds	1
  1283  0022                     ??_LoadMenuItem:	
  1284  0022                     ??_crc_calculate:	
  1285                           ; 1 bytes @ 0x2
  1286                           
  1287  0022                     send_half_byte@value:	
  1288                           ; 1 bytes @ 0x2
  1289                           
  1290  0022                     get_plus_index@index:	
  1291                           ; 1 bytes @ 0x2
  1292                           
  1293  0022                     _is_right_addr$549:	
  1294                           ; 1 bytes @ 0x2
  1295                           
  1296  0022                     LCDBusyLoop@busy:	
  1297                           ; 1 bytes @ 0x2
  1298                           
  1299  0022                     eeprom_write@addr:	
  1300                           ; 1 bytes @ 0x2
  1301                           
  1302  0022                     ___bmul@product:	
  1303                           ; 1 bytes @ 0x2
  1304                           
  1305  0022                     ___awdiv@dividend:	
  1306                           ; 1 bytes @ 0x2
  1307                           
  1308  0022                     ___awmod@dividend:	
  1309                           ; 2 bytes @ 0x2
  1310                           
  1311  0022                     ___lwdiv@dividend:	
  1312                           ; 2 bytes @ 0x2
  1313                           
  1314  0022                     memcpy@n:	
  1315                           ; 2 bytes @ 0x2
  1316                           
  1317                           
  1318                           ; 2 bytes @ 0x2
  1319  0022                     	ds	1
  1320  0023                     ?_get_msg_index:	
  1321  0023                     ??_SaveMenuItem:	
  1322                           ; 1 bytes @ 0x3
  1323                           
  1324  0023                     send_half_byte@byte:	
  1325                           ; 1 bytes @ 0x3
  1326                           
  1327  0023                     get_msg_index@end_index:	
  1328                           ; 1 bytes @ 0x3
  1329                           
  1330  0023                     is_right_addr@pconn:	
  1331                           ; 1 bytes @ 0x3
  1332                           
  1333  0023                     LCDBusyLoop@temp:	
  1334                           ; 1 bytes @ 0x3
  1335                           
  1336  0023                     ___bmul@multiplier:	
  1337                           ; 1 bytes @ 0x3
  1338                           
  1339                           
  1340                           ; 1 bytes @ 0x3
  1341  0023                     	ds	1
  1342  0024                     ??_memcpy:	
  1343  0024                     ??_send_byte:	
  1344                           ; 1 bytes @ 0x4
  1345                           
  1346  0024                     ??_get_msg_index:	
  1347                           ; 1 bytes @ 0x4
  1348                           
  1349  0024                     ??_ConnInit:	
  1350                           ; 1 bytes @ 0x4
  1351                           
  1352  0024                     ??___awdiv:	
  1353                           ; 1 bytes @ 0x4
  1354                           
  1355  0024                     ??___awmod:	
  1356                           ; 1 bytes @ 0x4
  1357                           
  1358  0024                     ??___lwdiv:	
  1359                           ; 1 bytes @ 0x4
  1360                           
  1361  0024                     LCDBusyLoop@status:	
  1362                           ; 1 bytes @ 0x4
  1363                           
  1364  0024                     LoadMenuItem@item:	
  1365                           ; 1 bytes @ 0x4
  1366                           
  1367                           
  1368                           ; 1 bytes @ 0x4
  1369  0024                     	ds	1
  1370  0025                     ?_LCDByte:	
  1371  0025                     ??_MenuInit:	
  1372                           ; 1 bytes @ 0x5
  1373                           
  1374  0025                     LCDByte@isdata:	
  1375                           ; 1 bytes @ 0x5
  1376                           
  1377  0025                     SaveMenuItem@item:	
  1378                           ; 1 bytes @ 0x5
  1379                           
  1380  0025                     ___awdiv@counter:	
  1381                           ; 1 bytes @ 0x5
  1382                           
  1383  0025                     ___awmod@counter:	
  1384                           ; 1 bytes @ 0x5
  1385                           
  1386  0025                     ___lwdiv@quotient:	
  1387                           ; 1 bytes @ 0x5
  1388                           
  1389  0025                     memcpy@s:	
  1390                           ; 2 bytes @ 0x5
  1391                           
  1392                           
  1393                           ; 2 bytes @ 0x5
  1394  0025                     	ds	1
  1395  0026                     ??_LCDByte:	
  1396  0026                     ??_ValueInc:	
  1397                           ; 1 bytes @ 0x6
  1398                           
  1399  0026                     ??_ValueDec:	
  1400                           ; 1 bytes @ 0x6
  1401                           
  1402  0026                     send_byte@c:	
  1403                           ; 1 bytes @ 0x6
  1404                           
  1405  0026                     get_msg_index@start_index:	
  1406                           ; 1 bytes @ 0x6
  1407                           
  1408  0026                     ConnInit@i:	
  1409                           ; 1 bytes @ 0x6
  1410                           
  1411  0026                     ___awdiv@sign:	
  1412                           ; 1 bytes @ 0x6
  1413                           
  1414  0026                     ___awmod@sign:	
  1415                           ; 1 bytes @ 0x6
  1416                           
  1417  0026                     crc_calculate@crc:	
  1418                           ; 1 bytes @ 0x6
  1419                           
  1420                           
  1421                           ; 2 bytes @ 0x6
  1422  0026                     	ds	1
  1423  0027                     ?_send_string:	
  1424  0027                     get_msg_index@i:	
  1425                           ; 1 bytes @ 0x7
  1426                           
  1427  0027                     ___lwdiv@counter:	
  1428                           ; 1 bytes @ 0x7
  1429                           
  1430  0027                     memcpy@d:	
  1431                           ; 1 bytes @ 0x7
  1432                           
  1433  0027                     send_string@str:	
  1434                           ; 1 bytes @ 0x7
  1435                           
  1436  0027                     ___awdiv@quotient:	
  1437                           ; 2 bytes @ 0x7
  1438                           
  1439                           
  1440                           ; 2 bytes @ 0x7
  1441  0027                     	ds	1
  1442  0028                     ??_get_msg:	
  1443  0028                     ?___lwmod:	
  1444                           ; 1 bytes @ 0x8
  1445                           
  1446  0028                     crc_calculate@i:	
  1447                           ; 2 bytes @ 0x8
  1448                           
  1449  0028                     LCDByte@hn:	
  1450                           ; 1 bytes @ 0x8
  1451                           
  1452  0028                     memcpy@d1:	
  1453                           ; 1 bytes @ 0x8
  1454                           
  1455  0028                     ___lwmod@divisor:	
  1456                           ; 1 bytes @ 0x8
  1457                           
  1458                           
  1459                           ; 2 bytes @ 0x8
  1460  0028                     	ds	1
  1461  0029                     ??_crc_verify:	
  1462  0029                     ?_compose:	
  1463                           ; 1 bytes @ 0x9
  1464                           
  1465  0029                     send_string@len:	
  1466                           ; 1 bytes @ 0x9
  1467                           
  1468  0029                     compose@from:	
  1469                           ; 1 bytes @ 0x9
  1470                           
  1471  0029                     LCDByte@ln:	
  1472                           ; 1 bytes @ 0x9
  1473                           
  1474                           
  1475                           ; 1 bytes @ 0x9
  1476  0029                     	ds	1
  1477  002A                     ??_send_string:	
  1478  002A                     compose@to:	
  1479                           ; 1 bytes @ 0xA
  1480                           
  1481  002A                     get_msg@pstr:	
  1482                           ; 1 bytes @ 0xA
  1483                           
  1484  002A                     LCDByte@c:	
  1485                           ; 1 bytes @ 0xA
  1486                           
  1487  002A                     ___lwmod@dividend:	
  1488                           ; 1 bytes @ 0xA
  1489                           
  1490                           
  1491                           ; 2 bytes @ 0xA
  1492  002A                     	ds	1
  1493  002B                     send_string@i:	
  1494  002B                     crc_verify@pmsg:	
  1495                           ; 1 bytes @ 0xB
  1496                           
  1497  002B                     compose@msgid:	
  1498                           ; 1 bytes @ 0xB
  1499                           
  1500  002B                     get_msg@i:	
  1501                           ; 1 bytes @ 0xB
  1502                           
  1503  002B                     LCDByte@temp:	
  1504                           ; 1 bytes @ 0xB
  1505                           
  1506                           
  1507                           ; 1 bytes @ 0xB
  1508  002B                     	ds	1
  1509  002C                     ?_LCDGotoXY:	
  1510  002C                     ?_LCDWriteString:	
  1511                           ; 1 bytes @ 0xC
  1512                           
  1513  002C                     ??_LCDInit:	
  1514                           ; 1 bytes @ 0xC
  1515                           
  1516  002C                     ??_LCDSetStyle:	
  1517                           ; 1 bytes @ 0xC
  1518                           
  1519  002C                     ??_send_msg:	
  1520                           ; 1 bytes @ 0xC
  1521                           
  1522  002C                     ?_LCDWriteInt:	
  1523                           ; 1 bytes @ 0xC
  1524                           
  1525  002C                     ??___lwmod:	
  1526                           ; 1 bytes @ 0xC
  1527                           
  1528  002C                     compose@cmd:	
  1529                           ; 1 bytes @ 0xC
  1530                           
  1531  002C                     get_msg@pmsg:	
  1532                           ; 1 bytes @ 0xC
  1533                           
  1534  002C                     LCDSetStyle@style:	
  1535                           ; 1 bytes @ 0xC
  1536                           
  1537  002C                     LCDGotoXY@y:	
  1538                           ; 1 bytes @ 0xC
  1539                           
  1540  002C                     LCDWriteString@msg:	
  1541                           ; 1 bytes @ 0xC
  1542                           
  1543  002C                     LCDWriteInt@val:	
  1544                           ; 2 bytes @ 0xC
  1545                           
  1546                           
  1547                           ; 2 bytes @ 0xC
  1548  002C                     	ds	1
  1549  002D                     ??_LCDGotoXY:	
  1550  002D                     send_msg@s:	
  1551                           ; 1 bytes @ 0xD
  1552                           
  1553  002D                     compose@data:	
  1554                           ; 1 bytes @ 0xD
  1555                           
  1556  002D                     get_msg@start_index:	
  1557                           ; 1 bytes @ 0xD
  1558                           
  1559  002D                     ___lwmod@counter:	
  1560                           ; 1 bytes @ 0xD
  1561                           
  1562                           
  1563                           ; 1 bytes @ 0xD
  1564  002D                     	ds	1
  1565  002E                     ??_LCDWriteString:	
  1566  002E                     ?_sprintf:	
  1567                           ; 1 bytes @ 0xE
  1568                           
  1569  002E                     send_msg@pmsg:	
  1570                           ; 2 bytes @ 0xE
  1571                           
  1572  002E                     compose@datalen:	
  1573                           ; 1 bytes @ 0xE
  1574                           
  1575  002E                     get_msg@end_index:	
  1576                           ; 1 bytes @ 0xE
  1577                           
  1578  002E                     LCDInit@style:	
  1579                           ; 1 bytes @ 0xE
  1580                           
  1581  002E                     LCDWriteInt@field_length:	
  1582                           ; 1 bytes @ 0xE
  1583                           
  1584  002E                     LCDGotoXY@x:	
  1585                           ; 1 bytes @ 0xE
  1586                           
  1587  002E                     sprintf@f:	
  1588                           ; 1 bytes @ 0xE
  1589                           
  1590                           
  1591                           ; 1 bytes @ 0xE
  1592  002E                     	ds	1
  1593  002F                     ??_compose:	
  1594  002F                     ??_LCDWriteInt:	
  1595                           ; 1 bytes @ 0xF
  1596                           
  1597  002F                     get_msg@temp:	
  1598                           ; 1 bytes @ 0xF
  1599                           
  1600  002F                     LCDInit@__i:	
  1601                           ; 1 bytes @ 0xF
  1602                           
  1603  002F                     LCDWriteString@count:	
  1604                           ; 1 bytes @ 0xF
  1605                           
  1606                           
  1607                           ; 1 bytes @ 0xF
  1608  002F                     	ds	1
  1609  0030                     LCDWriteString@cc:	
  1610                           
  1611                           ; 1 bytes @ 0x10
  1612  0030                     	ds	1
  1613  0031                     ??_ClearMenu:	
  1614  0031                     compose@len:	
  1615                           ; 1 bytes @ 0x11
  1616                           
  1617  0031                     LCDWriteInt@str:	
  1618                           ; 2 bytes @ 0x11
  1619                           
  1620                           
  1621                           ; 5 bytes @ 0x11
  1622  0031                     	ds	1
  1623  0032                     ClearMenu@count:	
  1624                           
  1625                           ; 1 bytes @ 0x12
  1626  0032                     	ds	1
  1627  0033                     compose@pmsg:	
  1628  0033                     ClearMenu@i:	
  1629                           ; 1 bytes @ 0x13
  1630                           
  1631                           
  1632                           ; 1 bytes @ 0x13
  1633  0033                     	ds	1
  1634  0034                     ?_create_cmd:	
  1635  0034                     create_cmd@cmd_id:	
  1636                           ; 1 bytes @ 0x14
  1637                           
  1638                           
  1639                           ; 1 bytes @ 0x14
  1640  0034                     	ds	1
  1641  0035                     create_cmd@msg_id:	
  1642                           
  1643                           ; 1 bytes @ 0x15
  1644  0035                     	ds	1
  1645  0036                     create_cmd@cmd_data:	
  1646  0036                     LCDWriteInt@j:	
  1647                           ; 1 bytes @ 0x16
  1648                           
  1649                           
  1650                           ; 2 bytes @ 0x16
  1651  0036                     	ds	1
  1652  0037                     create_cmd@cmd_data_len:	
  1653                           
  1654                           ; 1 bytes @ 0x17
  1655  0037                     	ds	1
  1656  0038                     create_cmd@pmsg:	
  1657  0038                     LCDWriteInt@i:	
  1658                           ; 1 bytes @ 0x18
  1659                           
  1660                           
  1661                           ; 2 bytes @ 0x18
  1662  0038                     	ds	1
  1663  0039                     ??_create_cmd:	
  1664                           
  1665                           ; 1 bytes @ 0x19
  1666  0039                     	ds	1
  1667  003A                     ??_ShowMenu:	
  1668                           
  1669                           ; 1 bytes @ 0x1A
  1670  003A                     	ds	1
  1671  003B                     ??_sprintf:	
  1672                           
  1673                           ; 1 bytes @ 0x1B
  1674  003B                     	ds	3
  1675  003E                     ShowMenu@count:	
  1676  003E                     sprintf@ap:	
  1677                           ; 1 bytes @ 0x1E
  1678                           
  1679                           
  1680                           ; 1 bytes @ 0x1E
  1681  003E                     	ds	1
  1682  003F                     create_cmd@pconn:	
  1683  003F                     ShowMenu@i:	
  1684                           ; 1 bytes @ 0x1F
  1685                           
  1686  003F                     sprintf@flag:	
  1687                           ; 1 bytes @ 0x1F
  1688                           
  1689                           
  1690                           ; 1 bytes @ 0x1F
  1691  003F                     	ds	1
  1692  0040                     ?_create_HEART_BEAT_RQT_CMD:	
  1693  0040                     create_HEART_BEAT_RQT_CMD@prqt:	
  1694                           ; 1 bytes @ 0x20
  1695                           
  1696  0040                     sprintf@prec:	
  1697                           ; 1 bytes @ 0x20
  1698                           
  1699                           
  1700                           ; 1 bytes @ 0x20
  1701  0040                     	ds	1
  1702  0041                     create_HEART_BEAT_RQT_CMD@pmsg:	
  1703  0041                     sprintf@val:	
  1704                           ; 1 bytes @ 0x21
  1705                           
  1706                           
  1707                           ; 2 bytes @ 0x21
  1708  0041                     	ds	1
  1709  0042                     ??_create_HEART_BEAT_RQT_CMD:	
  1710                           
  1711                           ; 1 bytes @ 0x22
  1712  0042                     	ds	1
  1713  0043                     sprintf@sp:	
  1714                           
  1715                           ; 1 bytes @ 0x23
  1716  0043                     	ds	1
  1717  0044                     sprintf@c:	
  1718                           
  1719                           ; 1 bytes @ 0x24
  1720  0044                     	ds	1
  1721  0045                     ??_debug_1:	
  1722                           
  1723                           ; 1 bytes @ 0x25
  1724  0045                     	ds	1
  1725  0046                     create_HEART_BEAT_RQT_CMD@pconn:	
  1726                           
  1727                           ; 1 bytes @ 0x26
  1728  0046                     	ds	2
  1729  0048                     debug_1@v1:	
  1730                           
  1731                           ; 1 bytes @ 0x28
  1732  0048                     	ds	1
  1733  0049                     debug_1@count:	
  1734                           
  1735                           ; 1 bytes @ 0x29
  1736  0049                     	ds	1
  1737  004A                     debug_1@i:	
  1738                           
  1739                           ; 1 bytes @ 0x2A
  1740  004A                     	ds	1
  1741  004B                     ?_send_HEART_BEAT_RQT_CMD_and_wait:	
  1742  004B                     send_HEART_BEAT_RQT_CMD_and_wait@prqt:	
  1743                           ; 1 bytes @ 0x2B
  1744                           
  1745                           
  1746                           ; 1 bytes @ 0x2B
  1747  004B                     	ds	1
  1748  004C                     ??_send_HEART_BEAT_RQT_CMD_and_wait:	
  1749                           
  1750                           ; 1 bytes @ 0x2C
  1751  004C                     	ds	3
  1752  004F                     send_HEART_BEAT_RQT_CMD_and_wait@pconn:	
  1753                           
  1754                           ; 1 bytes @ 0x2F
  1755  004F                     	ds	1
  1756  0050                     send_HEART_BEAT_RQT_CMD_and_wait@msg:	
  1757                           
  1758                           ; 23 bytes @ 0x30
  1759  0050                     	ds	23
  1760  0067                     ??_main:	
  1761                           
  1762                           ; 1 bytes @ 0x47
  1763  0067                     	ds	3
  1764                           
  1765                           	psect	maintext
  1766  0055                     __pmaintext:	
  1767 ;;
  1768 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1769 ;;
  1770 ;; *************** function _main *****************
  1771 ;; Defined at:
  1772 ;;		line 111 in file "do_am.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;  i               1   19[BANK1 ] char 
  1777 ;;  i               1   18[BANK1 ] char 
  1778 ;;  count           1   13[BANK1 ] char 
  1779 ;;  count           1   12[BANK1 ] char 
  1780 ;;  i               1   17[BANK1 ] char 
  1781 ;;  i               1   16[BANK1 ] char 
  1782 ;;  i               1   21[BANK1 ] char 
  1783 ;;  i               1   20[BANK1 ] char 
  1784 ;;  count           1   11[BANK1 ] char 
  1785 ;;  count           1   10[BANK1 ] char 
  1786 ;;  count           1   15[BANK1 ] char 
  1787 ;;  count           1   14[BANK1 ] char 
  1788 ;;  rqt             1    9[BANK1 ] struct .
  1789 ;;  rsp             1    8[BANK1 ] struct .
  1790 ;;  rqt             1    7[BANK1 ] struct .
  1791 ;;  pconn           1    6[BANK1 ] PTR struct .
  1792 ;;		 -> NULL(0), 
  1793 ;;  prsp            1    5[BANK1 ] PTR struct .
  1794 ;;		 -> main@rsp(1), 
  1795 ;;  prqt            1    4[BANK1 ] PTR struct .
  1796 ;;		 -> main@rqt(1), 
  1797 ;;  revc            1    3[BANK1 ] unsigned char 
  1798 ;;  sendc           1    2[BANK1 ] unsigned char 
  1799 ;;  value           1    1[BANK1 ] unsigned char 
  1800 ;;  ret             1    0[BANK1 ] unsigned char 
  1801 ;;  end_index       1    0        unsigned char 
  1802 ;;  start_index     1    0        unsigned char 
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1807 ;; Tracked objects:
  1808 ;;		On entry : B00/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1812 ;;      Params:         0       0       0       0       0
  1813 ;;      Locals:         0       0      22       0       0
  1814 ;;      Temps:          0       3       0       0       0
  1815 ;;      Totals:         0       3      22       0       0
  1816 ;;Total ram usage:       25 bytes
  1817 ;; Hardware stack levels required when called:    8
  1818 ;; This function calls:
  1819 ;;		_ADCInit
  1820 ;;		_ClearMenu
  1821 ;;		_ConnInit
  1822 ;;		_IOInit
  1823 ;;		_LCDByte
  1824 ;;		_LCDGotoXY
  1825 ;;		_LCDInit
  1826 ;;		_LCDSetStyle
  1827 ;;		_LCDWriteString
  1828 ;;		_MenuDown
  1829 ;;		_MenuInit
  1830 ;;		_MenuUp
  1831 ;;		_ShowMenu
  1832 ;;		_ValueDec
  1833 ;;		_ValueInc
  1834 ;;		_send_HEART_BEAT_RQT_CMD_and_wait
  1835 ;; This function is called by:
  1836 ;;		Startup code after reset
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           
  1841                           ;psect for function _main
  1842  0055                     _main:	
  1843                           
  1844                           ;do_am.c: 114: LCDInit(0B00000000);
  1845                           
  1846                           ;incstack = 0
  1847                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1848  0055  3000               	movlw	0
  1849  0056  120A  158A  272C  120A  118A  	fcall	_LCDInit
  1850                           
  1851                           ;do_am.c: 117: ADCInit();
  1852  005B  120A  158A  20BF  120A  118A  	fcall	_ADCInit
  1853                           
  1854                           ;do_am.c: 120: IOInit();
  1855  0060  120A  158A  23B8  120A  118A  	fcall	_IOInit
  1856                           
  1857                           ;do_am.c: 122: MenuInit();
  1858  0065  120A  158A  24A4  120A  118A  	fcall	_MenuInit
  1859                           
  1860                           ;do_am.c: 124: ConnInit();
  1861  006A  120A  158A  24F8  120A  118A  	fcall	_ConnInit
  1862                           
  1863                           ;do_am.c: 127: (LCDByte(0b00000001,0));
  1864  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1865  0070  1303               	bcf	3,6	;RP1=0, select bank0
  1866  0071  01A5               	clrf	LCDByte@isdata
  1867  0072  3001               	movlw	1
  1868  0073  120A  118A  27A8  120A  118A  	fcall	_LCDByte
  1869                           
  1870                           ;do_am.c: 129: uint8_t ret = 0;
  1871  0078  1683               	bsf	3,5	;RP0=1, select bank1
  1872  0079  1303               	bcf	3,6	;RP1=0, select bank1
  1873  007A  01CB               	clrf	main@ret^(0+128)
  1874                           
  1875                           ;do_am.c: 130: uint8_t value = 0x99;
  1876  007B  3099               	movlw	153
  1877  007C  1283               	bcf	3,5	;RP0=0, select bank0
  1878  007D  1303               	bcf	3,6	;RP1=0, select bank0
  1879  007E  00E7               	movwf	??_main
  1880  007F  0867               	movf	??_main,w
  1881  0080  1683               	bsf	3,5	;RP0=1, select bank1
  1882  0081  1303               	bcf	3,6	;RP1=0, select bank1
  1883  0082  00CC               	movwf	main@value^(0+128)
  1884                           
  1885                           ;do_am.c: 131: uint8_t sendc = 0x78;
  1886  0083  3078               	movlw	120
  1887  0084  1283               	bcf	3,5	;RP0=0, select bank0
  1888  0085  1303               	bcf	3,6	;RP1=0, select bank0
  1889  0086  00E7               	movwf	??_main
  1890  0087  0867               	movf	??_main,w
  1891  0088  1683               	bsf	3,5	;RP0=1, select bank1
  1892  0089  1303               	bcf	3,6	;RP1=0, select bank1
  1893  008A  00CD               	movwf	main@sendc^(0+128)
  1894                           
  1895                           ;do_am.c: 132: uint8_t revc = 0;
  1896  008B  01CE               	clrf	main@revc^(0+128)
  1897                           
  1898                           ;do_am.c: 133: REG_ID_RQT_CMD_t rqt;
  1899                           ;do_am.c: 134: REG_ID_RQT_CMD_t *prqt = &rqt;
  1900  008C  30D2               	movlw	(low (main@rqt| 0))& (0+255)
  1901  008D  1283               	bcf	3,5	;RP0=0, select bank0
  1902  008E  1303               	bcf	3,6	;RP1=0, select bank0
  1903  008F  00E7               	movwf	??_main
  1904  0090  0867               	movf	??_main,w
  1905  0091  1683               	bsf	3,5	;RP0=1, select bank1
  1906  0092  1303               	bcf	3,6	;RP1=0, select bank1
  1907  0093  00CF               	movwf	main@prqt^(0+128)
  1908                           
  1909                           ;do_am.c: 135: REG_ID_RSP_CMD_t rsp;
  1910                           ;do_am.c: 136: REG_ID_RSP_CMD_t *prsp = &rsp;
  1911  0094  30D3               	movlw	(low (main@rsp| 0))& (0+255)
  1912  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1913  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1914  0097  00E7               	movwf	??_main
  1915  0098  0867               	movf	??_main,w
  1916  0099  1683               	bsf	3,5	;RP0=1, select bank1
  1917  009A  1303               	bcf	3,6	;RP1=0, select bank1
  1918  009B  00D0               	movwf	main@prsp^(0+128)
  1919                           
  1920                           ;do_am.c: 137: Connection_t *pconn = (0);
  1921  009C  01D1               	clrf	main@pconn^(0+128)
  1922  009D  2A6B               	goto	l3383
  1923  009E                     l3385:	
  1924                           
  1925                           ;do_am.c: 144: {
  1926                           ;do_am.c: 145: HEART_BEAT_RQT_CMD_t rqt;
  1927                           ;do_am.c: 146: send_HEART_BEAT_RQT_CMD_and_wait(&client_conn[0], &rqt);
  1928  009E  30D4               	movlw	(low (main@rqt_750| 0))& (0+255)
  1929  009F  00E7               	movwf	??_main
  1930  00A0  0867               	movf	??_main,w
  1931  00A1  00CB               	movwf	send_HEART_BEAT_RQT_CMD_and_wait@prqt
  1932  00A2  3090               	movlw	(low (_client_conn| (0+256)))& (0+255)
  1933  00A3  120A  118A  26B4  120A  118A  	fcall	_send_HEART_BEAT_RQT_CMD_and_wait
  1934                           
  1935                           ;do_am.c: 185: _delay((unsigned long)((200)*(20000000/4000.0)));
  1936  00A8  3006               	movlw	6
  1937  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  1938  00AA  1303               	bcf	3,6	;RP1=0, select bank0
  1939  00AB  00E9               	movwf	??_main+2
  1940  00AC  3013               	movlw	19
  1941  00AD  00E8               	movwf	??_main+1
  1942  00AE  30B1               	movlw	177
  1943  00AF  00E7               	movwf	??_main
  1944  00B0                     u3757:	
  1945  00B0  0BE7               	decfsz	??_main,f
  1946  00B1  28B0               	goto	u3757
  1947  00B2  0BE8               	decfsz	??_main+1,f
  1948  00B3  28B0               	goto	u3757
  1949  00B4  0BE9               	decfsz	??_main+2,f
  1950  00B5  28B0               	goto	u3757
  1951  00B6  28B7               	nop2
  1952                           
  1953                           ;do_am.c: 186: }
  1954  00B7  2A6B               	goto	l3383
  1955  00B8                     l3389:	
  1956                           
  1957                           ;do_am.c: 189: {
  1958                           ;do_am.c: 190: if(mode == NORMAL)
  1959  00B8  1683               	bsf	3,5	;RP0=1, select bank1
  1960  00B9  1303               	bcf	3,6	;RP1=0, select bank1
  1961  00BA  036E               	decf	_mode^(0+128),w
  1962  00BB  1D03               	btfss	3,2
  1963  00BC  2904               	goto	l3411
  1964                           
  1965                           ;do_am.c: 191: {
  1966                           ;do_am.c: 192: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("MENU MODE"); for(int8_
      +                          t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  1967  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  1968  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  1969  00BF  01AC               	clrf	LCDGotoXY@y
  1970  00C0  0AAC               	incf	LCDGotoXY@y,f
  1971  00C1  3000               	movlw	0
  1972  00C2  120A  158A  21B4  120A  118A  	fcall	_LCDGotoXY
  1973  00C7  304E               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1974  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  1975  00C9  1303               	bcf	3,6	;RP1=0, select bank0
  1976  00CA  00AC               	movwf	LCDWriteString@msg
  1977  00CB  3080               	movlw	128
  1978  00CC  00AD               	movwf	LCDWriteString@msg+1
  1979  00CD  120A  158A  2662  120A  118A  	fcall	_LCDWriteString
  1980  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  1981  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  1982  00D4  00E7               	movwf	??_main
  1983  00D5  0867               	movf	??_main,w
  1984  00D6  1683               	bsf	3,5	;RP0=1, select bank1
  1985  00D7  1303               	bcf	3,6	;RP1=0, select bank1
  1986  00D8  00D5               	movwf	main@count^(0+128)
  1987  00D9  0855               	movf	main@count^(0+128),w
  1988  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  1989  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  1990  00DC  00E7               	movwf	??_main
  1991  00DD  0867               	movf	??_main,w
  1992  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  1993  00DF  1303               	bcf	3,6	;RP1=0, select bank1
  1994  00E0  00DB               	movwf	main@i^(0+128)
  1995  00E1  085B               	movf	main@i^(0+128),w
  1996  00E2  3A80               	xorlw	128
  1997  00E3  3E70               	addlw	-144
  1998  00E4  1803               	btfsc	3,0
  1999  00E5  28FD               	goto	l3407
  2000  00E6                     l3401:	
  2001  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  2002  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  2003  00E8  01A5               	clrf	LCDByte@isdata
  2004  00E9  0AA5               	incf	LCDByte@isdata,f
  2005  00EA  3020               	movlw	32
  2006  00EB  120A  118A  27A8  120A  118A  	fcall	_LCDByte
  2007  00F0  3001               	movlw	1
  2008  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  2009  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  2010  00F3  00E7               	movwf	??_main
  2011  00F4  0867               	movf	??_main,w
  2012  00F5  1683               	bsf	3,5	;RP0=1, select bank1
  2013  00F6  1303               	bcf	3,6	;RP1=0, select bank1
  2014  00F7  07DB               	addwf	main@i^(0+128),f
  2015  00F8  085B               	movf	main@i^(0+128),w
  2016  00F9  3A80               	xorlw	128
  2017  00FA  3E70               	addlw	-144
  2018  00FB  1C03               	skipc
  2019  00FC  28E6               	goto	l3401
  2020  00FD                     l3407:	
  2021                           
  2022                           ;do_am.c: 193: mode = MENU;
  2023  00FD  01EE               	clrf	_mode^(0+128)
  2024                           
  2025                           ;do_am.c: 194: ShowMenu();
  2026  00FE  120A  158A  2604  120A  118A  	fcall	_ShowMenu
  2027                           
  2028                           ;do_am.c: 195: }
  2029  0103  2950               	goto	l3433
  2030  0104                     l3411:	
  2031                           
  2032                           ;do_am.c: 196: else
  2033                           ;do_am.c: 197: {
  2034                           ;do_am.c: 198: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("EDIT MODE"); for(int8_
      +                          t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  2035  0104  1283               	bcf	3,5	;RP0=0, select bank0
  2036  0105  1303               	bcf	3,6	;RP1=0, select bank0
  2037  0106  01AC               	clrf	LCDGotoXY@y
  2038  0107  0AAC               	incf	LCDGotoXY@y,f
  2039  0108  3000               	movlw	0
  2040  0109  120A  158A  21B4  120A  118A  	fcall	_LCDGotoXY
  2041  010E  3038               	movlw	(low (((STR_17+3)-__stringbase)| (0+32768)))& (0+255)
  2042  010F  1283               	bcf	3,5	;RP0=0, select bank0
  2043  0110  1303               	bcf	3,6	;RP1=0, select bank0
  2044  0111  00AC               	movwf	LCDWriteString@msg
  2045  0112  3080               	movlw	128
  2046  0113  00AD               	movwf	LCDWriteString@msg+1
  2047  0114  120A  158A  2662  120A  118A  	fcall	_LCDWriteString
  2048  0119  1283               	bcf	3,5	;RP0=0, select bank0
  2049  011A  1303               	bcf	3,6	;RP1=0, select bank0
  2050  011B  00E7               	movwf	??_main
  2051  011C  0867               	movf	??_main,w
  2052  011D  1683               	bsf	3,5	;RP0=1, select bank1
  2053  011E  1303               	bcf	3,6	;RP1=0, select bank1
  2054  011F  00D6               	movwf	main@count_756^(0+128)
  2055  0120  0856               	movf	main@count_756^(0+128),w
  2056  0121  1283               	bcf	3,5	;RP0=0, select bank0
  2057  0122  1303               	bcf	3,6	;RP1=0, select bank0
  2058  0123  00E7               	movwf	??_main
  2059  0124  0867               	movf	??_main,w
  2060  0125  1683               	bsf	3,5	;RP0=1, select bank1
  2061  0126  1303               	bcf	3,6	;RP1=0, select bank1
  2062  0127  00DC               	movwf	main@i_758^(0+128)
  2063  0128  085C               	movf	main@i_758^(0+128),w
  2064  0129  3A80               	xorlw	128
  2065  012A  3E70               	addlw	-144
  2066  012B  1803               	btfsc	3,0
  2067  012C  2944               	goto	l3427
  2068  012D                     l3421:	
  2069  012D  1283               	bcf	3,5	;RP0=0, select bank0
  2070  012E  1303               	bcf	3,6	;RP1=0, select bank0
  2071  012F  01A5               	clrf	LCDByte@isdata
  2072  0130  0AA5               	incf	LCDByte@isdata,f
  2073  0131  3020               	movlw	32
  2074  0132  120A  118A  27A8  120A  118A  	fcall	_LCDByte
  2075  0137  3001               	movlw	1
  2076  0138  1283               	bcf	3,5	;RP0=0, select bank0
  2077  0139  1303               	bcf	3,6	;RP1=0, select bank0
  2078  013A  00E7               	movwf	??_main
  2079  013B  0867               	movf	??_main,w
  2080  013C  1683               	bsf	3,5	;RP0=1, select bank1
  2081  013D  1303               	bcf	3,6	;RP1=0, select bank1
  2082  013E  07DC               	addwf	main@i_758^(0+128),f
  2083  013F  085C               	movf	main@i_758^(0+128),w
  2084  0140  3A80               	xorlw	128
  2085  0141  3E70               	addlw	-144
  2086  0142  1C03               	skipc
  2087  0143  292D               	goto	l3421
  2088  0144                     l3427:	
  2089                           
  2090                           ;do_am.c: 199: submode = EDIT;
  2091  0144  01EF               	clrf	_submode^(0+128)
  2092                           
  2093                           ;do_am.c: 200: ShowMenu();
  2094  0145  120A  158A  2604  120A  118A  	fcall	_ShowMenu
  2095                           
  2096                           ;do_am.c: 201: LCDSetStyle(0B00000001);
  2097  014A  3001               	movlw	1
  2098  014B  160A  118A  27EA  120A  118A  	fcall	_LCDSetStyle
  2099  0150                     l3433:	
  2100                           
  2101                           ;do_am.c: 202: }
  2102                           ;do_am.c: 204: _delay((unsigned long)((200)*(20000000/4000.0)));
  2103  0150  3006               	movlw	6
  2104  0151  1283               	bcf	3,5	;RP0=0, select bank0
  2105  0152  1303               	bcf	3,6	;RP1=0, select bank0
  2106  0153  00E9               	movwf	??_main+2
  2107  0154  3013               	movlw	19
  2108  0155  00E8               	movwf	??_main+1
  2109  0156  30B1               	movlw	177
  2110  0157  00E7               	movwf	??_main
  2111  0158                     u3767:	
  2112  0158  0BE7               	decfsz	??_main,f
  2113  0159  2958               	goto	u3767
  2114  015A  0BE8               	decfsz	??_main+1,f
  2115  015B  2958               	goto	u3767
  2116  015C  0BE9               	decfsz	??_main+2,f
  2117  015D  2958               	goto	u3767
  2118  015E  295F               	nop2
  2119                           
  2120                           ;do_am.c: 205: }
  2121  015F  2A6B               	goto	l3383
  2122  0160                     l3435:	
  2123                           
  2124                           ;do_am.c: 208: {
  2125                           ;do_am.c: 209: if(mode == MENU)
  2126  0160  1683               	bsf	3,5	;RP0=1, select bank1
  2127  0161  1303               	bcf	3,6	;RP1=0, select bank1
  2128  0162  086E               	movf	_mode^(0+128),w
  2129  0163  1D03               	btfss	3,2
  2130  0164  29F8               	goto	l3475
  2131                           
  2132                           ;do_am.c: 210: {
  2133                           ;do_am.c: 211: if(submode == EDIT)
  2134  0165  086F               	movf	_submode^(0+128),w
  2135  0166  1D03               	btfss	3,2
  2136  0167  29B1               	goto	l3457
  2137                           
  2138                           ;do_am.c: 212: {
  2139                           ;do_am.c: 213: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("NOTEDIT MODE"); for(in
      +                          t8_t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  2140  0168  1283               	bcf	3,5	;RP0=0, select bank0
  2141  0169  1303               	bcf	3,6	;RP1=0, select bank0
  2142  016A  01AC               	clrf	LCDGotoXY@y
  2143  016B  0AAC               	incf	LCDGotoXY@y,f
  2144  016C  3000               	movlw	0
  2145  016D  120A  158A  21B4  120A  118A  	fcall	_LCDGotoXY
  2146  0172  3035               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  2147  0173  1283               	bcf	3,5	;RP0=0, select bank0
  2148  0174  1303               	bcf	3,6	;RP1=0, select bank0
  2149  0175  00AC               	movwf	LCDWriteString@msg
  2150  0176  3080               	movlw	128
  2151  0177  00AD               	movwf	LCDWriteString@msg+1
  2152  0178  120A  158A  2662  120A  118A  	fcall	_LCDWriteString
  2153  017D  1283               	bcf	3,5	;RP0=0, select bank0
  2154  017E  1303               	bcf	3,6	;RP1=0, select bank0
  2155  017F  00E7               	movwf	??_main
  2156  0180  0867               	movf	??_main,w
  2157  0181  1683               	bsf	3,5	;RP0=1, select bank1
  2158  0182  1303               	bcf	3,6	;RP1=0, select bank1
  2159  0183  00D7               	movwf	main@count_759^(0+128)
  2160  0184  0857               	movf	main@count_759^(0+128),w
  2161  0185  1283               	bcf	3,5	;RP0=0, select bank0
  2162  0186  1303               	bcf	3,6	;RP1=0, select bank0
  2163  0187  00E7               	movwf	??_main
  2164  0188  0867               	movf	??_main,w
  2165  0189  1683               	bsf	3,5	;RP0=1, select bank1
  2166  018A  1303               	bcf	3,6	;RP1=0, select bank1
  2167  018B  00DD               	movwf	main@i_761^(0+128)
  2168  018C  085D               	movf	main@i_761^(0+128),w
  2169  018D  3A80               	xorlw	128
  2170  018E  3E70               	addlw	-144
  2171  018F  1803               	btfsc	3,0
  2172  0190  29A8               	goto	l305
  2173  0191                     l3449:	
  2174  0191  1283               	bcf	3,5	;RP0=0, select bank0
  2175  0192  1303               	bcf	3,6	;RP1=0, select bank0
  2176  0193  01A5               	clrf	LCDByte@isdata
  2177  0194  0AA5               	incf	LCDByte@isdata,f
  2178  0195  3020               	movlw	32
  2179  0196  120A  118A  27A8  120A  118A  	fcall	_LCDByte
  2180  019B  3001               	movlw	1
  2181  019C  1283               	bcf	3,5	;RP0=0, select bank0
  2182  019D  1303               	bcf	3,6	;RP1=0, select bank0
  2183  019E  00E7               	movwf	??_main
  2184  019F  0867               	movf	??_main,w
  2185  01A0  1683               	bsf	3,5	;RP0=1, select bank1
  2186  01A1  1303               	bcf	3,6	;RP1=0, select bank1
  2187  01A2  07DD               	addwf	main@i_761^(0+128),f
  2188  01A3  085D               	movf	main@i_761^(0+128),w
  2189  01A4  3A80               	xorlw	128
  2190  01A5  3E70               	addlw	-144
  2191  01A6  1C03               	skipc
  2192  01A7  2991               	goto	l3449
  2193  01A8                     l305:	
  2194                           
  2195                           ;do_am.c: 214: submode = NOTEDIT;
  2196  01A8  01EF               	clrf	_submode^(0+128)
  2197  01A9  0AEF               	incf	_submode^(0+128),f
  2198                           
  2199                           ;do_am.c: 215: LCDSetStyle(0B00000000);
  2200  01AA  3000               	movlw	0
  2201  01AB  160A  118A  27EA  120A  118A  	fcall	_LCDSetStyle
  2202                           
  2203                           ;do_am.c: 216: }
  2204  01B0  29F8               	goto	l3475
  2205  01B1                     l3457:	
  2206                           
  2207                           ;do_am.c: 217: else
  2208                           ;do_am.c: 218: {
  2209                           ;do_am.c: 219: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("NORMAL MODE"); for(int
      +                          8_t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  2210  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  2211  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  2212  01B3  01AC               	clrf	LCDGotoXY@y
  2213  01B4  0AAC               	incf	LCDGotoXY@y,f
  2214  01B5  3000               	movlw	0
  2215  01B6  120A  158A  21B4  120A  118A  	fcall	_LCDGotoXY
  2216  01BB  3042               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  2217  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  2218  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  2219  01BE  00AC               	movwf	LCDWriteString@msg
  2220  01BF  3080               	movlw	128
  2221  01C0  00AD               	movwf	LCDWriteString@msg+1
  2222  01C1  120A  158A  2662  120A  118A  	fcall	_LCDWriteString
  2223  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  2224  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  2225  01C8  00E7               	movwf	??_main
  2226  01C9  0867               	movf	??_main,w
  2227  01CA  1683               	bsf	3,5	;RP0=1, select bank1
  2228  01CB  1303               	bcf	3,6	;RP1=0, select bank1
  2229  01CC  00D8               	movwf	main@count_762^(0+128)
  2230  01CD  0858               	movf	main@count_762^(0+128),w
  2231  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  2232  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  2233  01D0  00E7               	movwf	??_main
  2234  01D1  0867               	movf	??_main,w
  2235  01D2  1683               	bsf	3,5	;RP0=1, select bank1
  2236  01D3  1303               	bcf	3,6	;RP1=0, select bank1
  2237  01D4  00DE               	movwf	main@i_764^(0+128)
  2238  01D5  085E               	movf	main@i_764^(0+128),w
  2239  01D6  3A80               	xorlw	128
  2240  01D7  3E70               	addlw	-144
  2241  01D8  1803               	btfsc	3,0
  2242  01D9  29F1               	goto	l308
  2243  01DA                     l3467:	
  2244  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  2245  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  2246  01DC  01A5               	clrf	LCDByte@isdata
  2247  01DD  0AA5               	incf	LCDByte@isdata,f
  2248  01DE  3020               	movlw	32
  2249  01DF  120A  118A  27A8  120A  118A  	fcall	_LCDByte
  2250  01E4  3001               	movlw	1
  2251  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  2252  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  2253  01E7  00E7               	movwf	??_main
  2254  01E8  0867               	movf	??_main,w
  2255  01E9  1683               	bsf	3,5	;RP0=1, select bank1
  2256  01EA  1303               	bcf	3,6	;RP1=0, select bank1
  2257  01EB  07DE               	addwf	main@i_764^(0+128),f
  2258  01EC  085E               	movf	main@i_764^(0+128),w
  2259  01ED  3A80               	xorlw	128
  2260  01EE  3E70               	addlw	-144
  2261  01EF  1C03               	skipc
  2262  01F0  29DA               	goto	l3467
  2263  01F1                     l308:	
  2264                           
  2265                           ;do_am.c: 220: mode = NORMAL;
  2266  01F1  01EE               	clrf	_mode^(0+128)
  2267  01F2  0AEE               	incf	_mode^(0+128),f
  2268                           
  2269                           ;do_am.c: 221: ClearMenu();
  2270  01F3  120A  158A  2260  120A  118A  	fcall	_ClearMenu
  2271  01F8                     l3475:	
  2272                           
  2273                           ;do_am.c: 222: }
  2274                           ;do_am.c: 223: }
  2275                           ;do_am.c: 225: _delay((unsigned long)((200)*(20000000/4000.0)));
  2276  01F8  3006               	movlw	6
  2277  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  2278  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  2279  01FB  00E9               	movwf	??_main+2
  2280  01FC  3013               	movlw	19
  2281  01FD  00E8               	movwf	??_main+1
  2282  01FE  30B1               	movlw	177
  2283  01FF  00E7               	movwf	??_main
  2284  0200                     u3777:	
  2285  0200  0BE7               	decfsz	??_main,f
  2286  0201  2A00               	goto	u3777
  2287  0202  0BE8               	decfsz	??_main+1,f
  2288  0203  2A00               	goto	u3777
  2289  0204  0BE9               	decfsz	??_main+2,f
  2290  0205  2A00               	goto	u3777
  2291  0206  2A07               	nop2
  2292                           
  2293                           ;do_am.c: 226: }
  2294  0207  2A6B               	goto	l3383
  2295  0208                     l3477:	
  2296                           
  2297                           ;do_am.c: 229: {
  2298                           ;do_am.c: 230: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("UP"); for(int8_t i = c
      +                          ount + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  2299  0208  01AC               	clrf	LCDGotoXY@y
  2300  0209  0AAC               	incf	LCDGotoXY@y,f
  2301  020A  3000               	movlw	0
  2302  020B  120A  158A  21B4  120A  118A  	fcall	_LCDGotoXY
  2303  0210  3071               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  2304  0211  1283               	bcf	3,5	;RP0=0, select bank0
  2305  0212  1303               	bcf	3,6	;RP1=0, select bank0
  2306  0213  00AC               	movwf	LCDWriteString@msg
  2307  0214  3080               	movlw	128
  2308  0215  00AD               	movwf	LCDWriteString@msg+1
  2309  0216  120A  158A  2662  120A  118A  	fcall	_LCDWriteString
  2310  021B  1283               	bcf	3,5	;RP0=0, select bank0
  2311  021C  1303               	bcf	3,6	;RP1=0, select bank0
  2312  021D  00E7               	movwf	??_main
  2313  021E  0867               	movf	??_main,w
  2314  021F  1683               	bsf	3,5	;RP0=1, select bank1
  2315  0220  1303               	bcf	3,6	;RP1=0, select bank1
  2316  0221  00D9               	movwf	main@count_765^(0+128)
  2317  0222  0859               	movf	main@count_765^(0+128),w
  2318  0223  1283               	bcf	3,5	;RP0=0, select bank0
  2319  0224  1303               	bcf	3,6	;RP1=0, select bank0
  2320  0225  00E7               	movwf	??_main
  2321  0226  0867               	movf	??_main,w
  2322  0227  1683               	bsf	3,5	;RP0=1, select bank1
  2323  0228  1303               	bcf	3,6	;RP1=0, select bank1
  2324  0229  00DF               	movwf	main@i_767^(0+128)
  2325  022A  085F               	movf	main@i_767^(0+128),w
  2326  022B  3A80               	xorlw	128
  2327  022C  3E70               	addlw	-144
  2328  022D  1803               	btfsc	3,0
  2329  022E  2A46               	goto	l3493
  2330  022F                     l3487:	
  2331  022F  1283               	bcf	3,5	;RP0=0, select bank0
  2332  0230  1303               	bcf	3,6	;RP1=0, select bank0
  2333  0231  01A5               	clrf	LCDByte@isdata
  2334  0232  0AA5               	incf	LCDByte@isdata,f
  2335  0233  3020               	movlw	32
  2336  0234  120A  118A  27A8  120A  118A  	fcall	_LCDByte
  2337  0239  3001               	movlw	1
  2338  023A  1283               	bcf	3,5	;RP0=0, select bank0
  2339  023B  1303               	bcf	3,6	;RP1=0, select bank0
  2340  023C  00E7               	movwf	??_main
  2341  023D  0867               	movf	??_main,w
  2342  023E  1683               	bsf	3,5	;RP0=1, select bank1
  2343  023F  1303               	bcf	3,6	;RP1=0, select bank1
  2344  0240  07DF               	addwf	main@i_767^(0+128),f
  2345  0241  085F               	movf	main@i_767^(0+128),w
  2346  0242  3A80               	xorlw	128
  2347  0243  3E70               	addlw	-144
  2348  0244  1C03               	skipc
  2349  0245  2A2F               	goto	l3487
  2350  0246                     l3493:	
  2351                           
  2352                           ;do_am.c: 231: if(mode == MENU)
  2353  0246  086E               	movf	_mode^(0+128),w
  2354  0247  1D03               	btfss	3,2
  2355  0248  2A5C               	goto	l3503
  2356                           
  2357                           ;do_am.c: 232: {
  2358                           ;do_am.c: 233: if(submode == EDIT)
  2359  0249  086F               	movf	_submode^(0+128),w
  2360  024A  1D03               	btfss	3,2
  2361  024B  2A52               	goto	l3499
  2362                           
  2363                           ;do_am.c: 234: {
  2364                           ;do_am.c: 235: ValueInc();
  2365  024C  120A  158A  20D3  120A  118A  	fcall	_ValueInc
  2366                           
  2367                           ;do_am.c: 236: }
  2368  0251  2A57               	goto	l3501
  2369  0252                     l3499:	
  2370                           
  2371                           ;do_am.c: 237: else
  2372                           ;do_am.c: 238: {
  2373                           ;do_am.c: 239: MenuUp();
  2374  0252  120A  158A  2052  120A  118A  	fcall	_MenuUp
  2375  0257                     l3501:	
  2376                           
  2377                           ;do_am.c: 240: }
  2378                           ;do_am.c: 241: ShowMenu();
  2379  0257  120A  158A  2604  120A  118A  	fcall	_ShowMenu
  2380  025C                     l3503:	
  2381                           
  2382                           ;do_am.c: 242: }
  2383                           ;do_am.c: 243: _delay((unsigned long)((200)*(20000000/4000.0)));
  2384  025C  3006               	movlw	6
  2385  025D  1283               	bcf	3,5	;RP0=0, select bank0
  2386  025E  1303               	bcf	3,6	;RP1=0, select bank0
  2387  025F  00E9               	movwf	??_main+2
  2388  0260  3013               	movlw	19
  2389  0261  00E8               	movwf	??_main+1
  2390  0262  30B1               	movlw	177
  2391  0263  00E7               	movwf	??_main
  2392  0264                     u3787:	
  2393  0264  0BE7               	decfsz	??_main,f
  2394  0265  2A64               	goto	u3787
  2395  0266  0BE8               	decfsz	??_main+1,f
  2396  0267  2A64               	goto	u3787
  2397  0268  0BE9               	decfsz	??_main+2,f
  2398  0269  2A64               	goto	u3787
  2399  026A  2A6B               	nop2
  2400  026B                     l3383:	
  2401                           ;do_am.c: 139: uint8_t start_index, end_index;
  2402                           ;do_am.c: 140: while(1)
  2403                           
  2404                           ;do_am.c: 244: }
  2405                           
  2406                           
  2407                           ;do_am.c: 141: {
  2408                           ;do_am.c: 143: if(RB2 == 0)
  2409  026B  1283               	bcf	3,5	;RP0=0, select bank0
  2410  026C  1303               	bcf	3,6	;RP1=0, select bank0
  2411  026D  1D06               	btfss	6,2	;volatile
  2412  026E  289E               	goto	l3385
  2413                           
  2414                           ;do_am.c: 187: else
  2415                           ;do_am.c: 188: if(RB4 == 0)
  2416  026F  1E06               	btfss	6,4	;volatile
  2417  0270  28B8               	goto	l3389
  2418                           
  2419                           ;do_am.c: 206: else
  2420                           ;do_am.c: 207: if(RB6 == 0)
  2421  0271  1F06               	btfss	6,6	;volatile
  2422  0272  2960               	goto	l3435
  2423                           
  2424                           ;do_am.c: 227: else
  2425                           ;do_am.c: 228: if(RB5 == 0)
  2426  0273  1E86               	btfss	6,5	;volatile
  2427  0274  2A08               	goto	l3477
  2428                           
  2429                           ;do_am.c: 245: else
  2430                           ;do_am.c: 246: if(RB7 == 0)
  2431  0275  1B86               	btfsc	6,7	;volatile
  2432  0276  2A6B               	goto	l3383
  2433                           
  2434                           ;do_am.c: 247: {
  2435                           ;do_am.c: 248: {{{ LCDGotoXY(0,1); int8_t count = LCDWriteString("DOWN"); for(int8_t i =
      +                           count + 0; i < 16; i++) { (LCDByte(' ',1)); } };};};
  2436  0277  01AC               	clrf	LCDGotoXY@y
  2437  0278  0AAC               	incf	LCDGotoXY@y,f
  2438  0279  3000               	movlw	0
  2439  027A  120A  158A  21B4  120A  118A  	fcall	_LCDGotoXY
  2440  027F  306C               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  2441  0280  1283               	bcf	3,5	;RP0=0, select bank0
  2442  0281  1303               	bcf	3,6	;RP1=0, select bank0
  2443  0282  00AC               	movwf	LCDWriteString@msg
  2444  0283  3080               	movlw	128
  2445  0284  00AD               	movwf	LCDWriteString@msg+1
  2446  0285  120A  158A  2662  120A  118A  	fcall	_LCDWriteString
  2447  028A  1283               	bcf	3,5	;RP0=0, select bank0
  2448  028B  1303               	bcf	3,6	;RP1=0, select bank0
  2449  028C  00E7               	movwf	??_main
  2450  028D  0867               	movf	??_main,w
  2451  028E  1683               	bsf	3,5	;RP0=1, select bank1
  2452  028F  1303               	bcf	3,6	;RP1=0, select bank1
  2453  0290  00DA               	movwf	main@count_768^(0+128)
  2454  0291  085A               	movf	main@count_768^(0+128),w
  2455  0292  1283               	bcf	3,5	;RP0=0, select bank0
  2456  0293  1303               	bcf	3,6	;RP1=0, select bank0
  2457  0294  00E7               	movwf	??_main
  2458  0295  0867               	movf	??_main,w
  2459  0296  1683               	bsf	3,5	;RP0=1, select bank1
  2460  0297  1303               	bcf	3,6	;RP1=0, select bank1
  2461  0298  00E0               	movwf	main@i_770^(0+128)
  2462  0299  0860               	movf	main@i_770^(0+128),w
  2463  029A  3A80               	xorlw	128
  2464  029B  3E70               	addlw	-144
  2465  029C  1803               	btfsc	3,0
  2466  029D  2AB5               	goto	l3521
  2467  029E                     l3515:	
  2468  029E  1283               	bcf	3,5	;RP0=0, select bank0
  2469  029F  1303               	bcf	3,6	;RP1=0, select bank0
  2470  02A0  01A5               	clrf	LCDByte@isdata
  2471  02A1  0AA5               	incf	LCDByte@isdata,f
  2472  02A2  3020               	movlw	32
  2473  02A3  120A  118A  27A8  120A  118A  	fcall	_LCDByte
  2474  02A8  3001               	movlw	1
  2475  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  2476  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  2477  02AB  00E7               	movwf	??_main
  2478  02AC  0867               	movf	??_main,w
  2479  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  2480  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  2481  02AF  07E0               	addwf	main@i_770^(0+128),f
  2482  02B0  0860               	movf	main@i_770^(0+128),w
  2483  02B1  3A80               	xorlw	128
  2484  02B2  3E70               	addlw	-144
  2485  02B3  1C03               	skipc
  2486  02B4  2A9E               	goto	l3515
  2487  02B5                     l3521:	
  2488                           
  2489                           ;do_am.c: 249: if(mode == MENU)
  2490  02B5  086E               	movf	_mode^(0+128),w
  2491  02B6  1D03               	btfss	3,2
  2492  02B7  2ACB               	goto	l3531
  2493                           
  2494                           ;do_am.c: 250: {
  2495                           ;do_am.c: 251: if(submode == EDIT)
  2496  02B8  086F               	movf	_submode^(0+128),w
  2497  02B9  1D03               	btfss	3,2
  2498  02BA  2AC1               	goto	l3527
  2499                           
  2500                           ;do_am.c: 252: {
  2501                           ;do_am.c: 253: ValueDec();
  2502  02BB  120A  158A  20AC  120A  118A  	fcall	_ValueDec
  2503                           
  2504                           ;do_am.c: 254: }
  2505  02C0  2AC6               	goto	l3529
  2506  02C1                     l3527:	
  2507                           
  2508                           ;do_am.c: 255: else
  2509                           ;do_am.c: 256: {
  2510                           ;do_am.c: 257: MenuDown();
  2511  02C1  120A  158A  2041  120A  118A  	fcall	_MenuDown
  2512  02C6                     l3529:	
  2513                           
  2514                           ;do_am.c: 258: }
  2515                           ;do_am.c: 259: ShowMenu();
  2516  02C6  120A  158A  2604  120A  118A  	fcall	_ShowMenu
  2517  02CB                     l3531:	
  2518                           
  2519                           ;do_am.c: 260: }
  2520                           ;do_am.c: 261: _delay((unsigned long)((200)*(20000000/4000.0)));
  2521  02CB  3006               	movlw	6
  2522  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  2523  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  2524  02CE  00E9               	movwf	??_main+2
  2525  02CF  3013               	movlw	19
  2526  02D0  00E8               	movwf	??_main+1
  2527  02D1  30B1               	movlw	177
  2528  02D2  00E7               	movwf	??_main
  2529  02D3                     u3797:	
  2530  02D3  0BE7               	decfsz	??_main,f
  2531  02D4  2AD3               	goto	u3797
  2532  02D5  0BE8               	decfsz	??_main+1,f
  2533  02D6  2AD3               	goto	u3797
  2534  02D7  0BE9               	decfsz	??_main+2,f
  2535  02D8  2AD3               	goto	u3797
  2536  02D9  2ADA               	nop2
  2537  02DA  2A6B               	goto	l3383
  2538  02DB                     __end_of_main:	
  2539                           
  2540                           	psect	text1
  2541  06B4                     __ptext1:	
  2542 ;; *************** function _send_HEART_BEAT_RQT_CMD_and_wait *****************
  2543 ;; Defined at:
  2544 ;;		line 38 in file "heart_beat.h"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;  pconn           1    wreg     PTR struct .
  2547 ;;		 -> client_conn(40), 
  2548 ;;  prqt            1   43[BANK0 ] PTR const struct .
  2549 ;;		 -> main@rqt_750(1), 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  pconn           1   47[BANK0 ] PTR struct .
  2552 ;;		 -> client_conn(40), 
  2553 ;;  msg            23   48[BANK0 ] struct .
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      unsigned char 
  2556 ;; Registers used:
  2557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2563 ;;      Params:         0       1       0       0       0
  2564 ;;      Locals:         0      24       0       0       0
  2565 ;;      Temps:          0       3       0       0       0
  2566 ;;      Totals:         0      28       0       0       0
  2567 ;;Total ram usage:       28 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    7
  2570 ;; This function calls:
  2571 ;;		_crc_verify
  2572 ;;		_create_HEART_BEAT_RQT_CMD
  2573 ;;		_debug_1
  2574 ;;		_get_msg
  2575 ;;		_is_right_addr
  2576 ;;		_send_msg
  2577 ;; This function is called by:
  2578 ;;		_main
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           
  2583                           ;psect for function _send_HEART_BEAT_RQT_CMD_and_wait
  2584  06B4                     _send_HEART_BEAT_RQT_CMD_and_wait:	
  2585                           
  2586                           ;incstack = 0
  2587                           ; Regs used in _send_HEART_BEAT_RQT_CMD_and_wait: [wreg-fsr0h+status,2+status,0+btemp+1+
      +                          pclath+cstack]
  2588                           ;send_HEART_BEAT_RQT_CMD_and_wait@pconn stored from wreg
  2589  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  2590  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  2591  06B6  00CF               	movwf	send_HEART_BEAT_RQT_CMD_and_wait@pconn
  2592                           
  2593                           ;heart_beat.h: 40: Msg_t msg;
  2594                           ;heart_beat.h: 41: create_HEART_BEAT_RQT_CMD(pconn, prqt, &msg);
  2595  06B7  084B               	movf	send_HEART_BEAT_RQT_CMD_and_wait@prqt,w
  2596  06B8  00CC               	movwf	??_send_HEART_BEAT_RQT_CMD_and_wait
  2597  06B9  084C               	movf	??_send_HEART_BEAT_RQT_CMD_and_wait,w
  2598  06BA  00C0               	movwf	create_HEART_BEAT_RQT_CMD@prqt
  2599  06BB  3050               	movlw	(low (send_HEART_BEAT_RQT_CMD_and_wait@msg| 0))& (0+255)
  2600  06BC  00CD               	movwf	??_send_HEART_BEAT_RQT_CMD_and_wait+1
  2601  06BD  084D               	movf	??_send_HEART_BEAT_RQT_CMD_and_wait+1,w
  2602  06BE  00C1               	movwf	create_HEART_BEAT_RQT_CMD@pmsg
  2603  06BF  084F               	movf	send_HEART_BEAT_RQT_CMD_and_wait@pconn,w
  2604  06C0  120A  158A  2128  120A  118A  	fcall	_create_HEART_BEAT_RQT_CMD
  2605                           
  2606                           ;heart_beat.h: 42: send_msg(&msg);
  2607  06C5  3050               	movlw	(low (send_HEART_BEAT_RQT_CMD_and_wait@msg| 0))& (0+255)
  2608  06C6  120A  158A  22C5  120A  118A  	fcall	_send_msg
  2609                           
  2610                           ;heart_beat.h: 44: _delay((unsigned long)((200)*(20000000/4000.0)));
  2611  06CB  3006               	movlw	6
  2612  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  2613  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  2614  06CE  00CE               	movwf	??_send_HEART_BEAT_RQT_CMD_and_wait+2
  2615  06CF  3013               	movlw	19
  2616  06D0  00CD               	movwf	??_send_HEART_BEAT_RQT_CMD_and_wait+1
  2617  06D1  30B1               	movlw	177
  2618  06D2  00CC               	movwf	??_send_HEART_BEAT_RQT_CMD_and_wait
  2619  06D3                     u3807:	
  2620  06D3  0BCC               	decfsz	??_send_HEART_BEAT_RQT_CMD_and_wait,f
  2621  06D4  2ED3               	goto	u3807
  2622  06D5  0BCD               	decfsz	??_send_HEART_BEAT_RQT_CMD_and_wait+1,f
  2623  06D6  2ED3               	goto	u3807
  2624  06D7  0BCE               	decfsz	??_send_HEART_BEAT_RQT_CMD_and_wait+2,f
  2625  06D8  2ED3               	goto	u3807
  2626  06D9  2EDA               	nop2
  2627                           
  2628                           ;heart_beat.h: 46: if((get_msg(pmsg_rcv) == 1)
  2629                           ;heart_beat.h: 47: && (crc_verify(pmsg_rcv) == 1)
  2630                           ;heart_beat.h: 48: && (is_right_addr(pconn, pmsg_rcv) == 1)
  2631                           ;heart_beat.h: 49: && (pmsg_rcv->cmd == HEART_BEAT_RSP)
  2632                           ;heart_beat.h: 50: && (msg.msgid == pmsg_rcv->msgid))
  2633  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  2634  06DB  1303               	bcf	3,6	;RP1=0, select bank0
  2635  06DC  086C               	movf	_pmsg_rcv,w
  2636  06DD  120A  158A  236C  120A  118A  	fcall	_get_msg
  2637  06E2  3A01               	xorlw	1
  2638  06E3  1D03               	skipz
  2639  06E4  2F19               	goto	l3023
  2640  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  2641  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  2642  06E7  086C               	movf	_pmsg_rcv,w
  2643  06E8  120A  158A  2149  120A  118A  	fcall	_crc_verify
  2644  06ED  3A01               	xorlw	1
  2645  06EE  1D03               	skipz
  2646  06EF  2F19               	goto	l3023
  2647  06F0  1283               	bcf	3,5	;RP0=0, select bank0
  2648  06F1  1303               	bcf	3,6	;RP1=0, select bank0
  2649  06F2  086C               	movf	_pmsg_rcv,w
  2650  06F3  00CC               	movwf	??_send_HEART_BEAT_RQT_CMD_and_wait
  2651  06F4  084C               	movf	??_send_HEART_BEAT_RQT_CMD_and_wait,w
  2652  06F5  00A0               	movwf	is_right_addr@pmsg
  2653  06F6  084F               	movf	send_HEART_BEAT_RQT_CMD_and_wait@pconn,w
  2654  06F7  120A  158A  20EA  120A  118A  	fcall	_is_right_addr
  2655  06FC  3A01               	xorlw	1
  2656  06FD  1D03               	skipz
  2657  06FE  2F19               	goto	l3023
  2658  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  2659  0700  1303               	bcf	3,6	;RP1=0, select bank0
  2660  0701  086C               	movf	_pmsg_rcv,w
  2661  0702  3E06               	addlw	6
  2662  0703  0084               	movwf	4
  2663  0704  3003               	movlw	3
  2664  0705  1783               	bsf	3,7	;select IRP bank2
  2665  0706  0600               	xorwf	0,w
  2666  0707  1D03               	btfss	3,2
  2667  0708  2F19               	goto	l3023
  2668  0709  086C               	movf	_pmsg_rcv,w
  2669  070A  3E05               	addlw	5
  2670  070B  0084               	movwf	4
  2671  070C  0855               	movf	send_HEART_BEAT_RQT_CMD_and_wait@msg+5,w
  2672  070D  0600               	xorwf	0,w
  2673  070E  1D03               	skipz
  2674  070F  2F19               	goto	l3023
  2675                           
  2676                           ;heart_beat.h: 51: {
  2677                           ;heart_beat.h: 52: pconn->heart_beat_count = 0;
  2678  0710  084F               	movf	send_HEART_BEAT_RQT_CMD_and_wait@pconn,w
  2679  0711  3E03               	addlw	3
  2680  0712  0084               	movwf	4
  2681  0713  0180               	clrf	0
  2682                           
  2683                           ;heart_beat.h: 53: debug_1(1);
  2684  0714  3001               	movlw	1
  2685  0715  120A  158A  25A8   	fcall	_debug_1
  2686                           
  2687                           ;heart_beat.h: 56: return 1;
  2688                           ;	Return value of _send_HEART_BEAT_RQT_CMD_and_wait is never used
  2689  0718  0008               	return
  2690  0719                     l3023:	
  2691                           
  2692                           ;heart_beat.h: 57: }
  2693                           ;heart_beat.h: 58: pconn->heart_beat_count++;
  2694  0719  3001               	movlw	1
  2695  071A  1283               	bcf	3,5	;RP0=0, select bank0
  2696  071B  1303               	bcf	3,6	;RP1=0, select bank0
  2697  071C  00CC               	movwf	??_send_HEART_BEAT_RQT_CMD_and_wait
  2698  071D  084F               	movf	send_HEART_BEAT_RQT_CMD_and_wait@pconn,w
  2699  071E  3E03               	addlw	3
  2700  071F  0084               	movwf	4
  2701  0720  084C               	movf	??_send_HEART_BEAT_RQT_CMD_and_wait,w
  2702  0721  1783               	bsf	3,7	;select IRP bank2
  2703  0722  0780               	addwf	0,f
  2704                           
  2705                           ;heart_beat.h: 59: if(pconn->heart_beat_count == 5)
  2706  0723  084F               	movf	send_HEART_BEAT_RQT_CMD_and_wait@pconn,w
  2707  0724  3E03               	addlw	3
  2708  0725  0084               	movwf	4
  2709  0726  3005               	movlw	5
  2710  0727  0600               	xorwf	0,w
  2711  0728  1D03               	btfss	3,2
  2712  0729  0008               	return
  2713                           
  2714                           ;heart_beat.h: 60: {
  2715                           ;heart_beat.h: 61: pconn->available = 0;
  2716  072A  084F               	movf	send_HEART_BEAT_RQT_CMD_and_wait@pconn,w
  2717  072B  3E04               	addlw	4
  2718  072C  0084               	movwf	4
  2719  072D  0180               	clrf	0
  2720                           
  2721                           ;heart_beat.h: 62: pconn->heart_beat_count = 0;
  2722  072E  084F               	movf	send_HEART_BEAT_RQT_CMD_and_wait@pconn,w
  2723  072F  3E03               	addlw	3
  2724  0730  0084               	movwf	4
  2725  0731  0180               	clrf	0
  2726  0732  0008               	return
  2727  0733                     __end_of_send_HEART_BEAT_RQT_CMD_and_wait:	
  2728                           ;heart_beat.h: 63: }
  2729                           ;heart_beat.h: 64: return 0;
  2730                           ;	Return value of _send_HEART_BEAT_RQT_CMD_and_wait is never used
  2731                           
  2732                           
  2733                           	psect	text2
  2734  0AC5                     __ptext2:	
  2735 ;; *************** function _send_msg *****************
  2736 ;; Defined at:
  2737 ;;		line 29 in file "msg.h"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;  pmsg            1    wreg     PTR struct .
  2740 ;;		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(23), handle_REG_ID_RQT_CMD@msgo(23), 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;  pmsg            1   14[BANK0 ] PTR struct .
  2743 ;;		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(23), handle_REG_ID_RQT_CMD@msgo(23), 
  2744 ;;  s               1   13[BANK0 ] PTR unsigned char 
  2745 ;;		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(23), handle_REG_ID_RQT_CMD@msgo(23), 
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  1    wreg      void 
  2748 ;; Registers used:
  2749 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2755 ;;      Params:         0       0       0       0       0
  2756 ;;      Locals:         0       2       0       0       0
  2757 ;;      Temps:          0       1       0       0       0
  2758 ;;      Totals:         0       3       0       0       0
  2759 ;;Total ram usage:        3 bytes
  2760 ;; Hardware stack levels used:    1
  2761 ;; Hardware stack levels required when called:    6
  2762 ;; This function calls:
  2763 ;;		_send_string
  2764 ;; This function is called by:
  2765 ;;		_send_HEART_BEAT_RQT_CMD_and_wait
  2766 ;;		_handle_REG_ID_RQT_CMD
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           
  2771                           ;psect for function _send_msg
  2772  0AC5                     _send_msg:	
  2773                           
  2774                           ;incstack = 0
  2775                           ; Regs used in _send_msg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2776                           ;send_msg@pmsg stored from wreg
  2777  0AC5  1283               	bcf	3,5	;RP0=0, select bank0
  2778  0AC6  1303               	bcf	3,6	;RP1=0, select bank0
  2779  0AC7  00AE               	movwf	send_msg@pmsg
  2780                           
  2781                           ;msg.h: 31: send_string(start_mark, 4);
  2782  0AC8  300B               	movlw	(low ((_start_mark-__stringbase)| (0+32768)))& (0+255)
  2783  0AC9  00A7               	movwf	send_string@str
  2784  0ACA  3080               	movlw	128
  2785  0ACB  00A8               	movwf	send_string@str+1
  2786  0ACC  3004               	movlw	4
  2787  0ACD  00AC               	movwf	??_send_msg
  2788  0ACE  082C               	movf	??_send_msg,w
  2789  0ACF  00A9               	movwf	send_string@len
  2790  0AD0  120A  158A  2109  120A  158A  	fcall	_send_string
  2791                           
  2792                           ;msg.h: 32: uint8_t *s = (uint8_t *)pmsg;
  2793  0AD5  1283               	bcf	3,5	;RP0=0, select bank0
  2794  0AD6  1303               	bcf	3,6	;RP1=0, select bank0
  2795  0AD7  082E               	movf	send_msg@pmsg,w
  2796  0AD8  00AC               	movwf	??_send_msg
  2797  0AD9  082C               	movf	??_send_msg,w
  2798  0ADA  00AD               	movwf	send_msg@s
  2799                           
  2800                           ;msg.h: 33: send_string(s, pmsg->msglen);
  2801  0ADB  082D               	movf	send_msg@s,w
  2802  0ADC  00A7               	movwf	send_string@str
  2803  0ADD  3000               	movlw	0
  2804  0ADE  00A8               	movwf	send_string@str+1
  2805  0ADF  082E               	movf	send_msg@pmsg,w
  2806  0AE0  0084               	movwf	4
  2807  0AE1  1383               	bcf	3,7	;select IRP bank0
  2808  0AE2  0800               	movf	0,w
  2809  0AE3  00AC               	movwf	??_send_msg
  2810  0AE4  082C               	movf	??_send_msg,w
  2811  0AE5  00A9               	movwf	send_string@len
  2812  0AE6  120A  158A  2109  120A  158A  	fcall	_send_string
  2813                           
  2814                           ;msg.h: 34: send_string(stop_mark, 4);
  2815  0AEB  300F               	movlw	(low ((_stop_mark-__stringbase)| (0+32768)))& (0+255)
  2816  0AEC  1283               	bcf	3,5	;RP0=0, select bank0
  2817  0AED  1303               	bcf	3,6	;RP1=0, select bank0
  2818  0AEE  00A7               	movwf	send_string@str
  2819  0AEF  3080               	movlw	128
  2820  0AF0  00A8               	movwf	send_string@str+1
  2821  0AF1  3004               	movlw	4
  2822  0AF2  00AC               	movwf	??_send_msg
  2823  0AF3  082C               	movf	??_send_msg,w
  2824  0AF4  00A9               	movwf	send_string@len
  2825  0AF5  120A  158A  2109   	fcall	_send_string
  2826  0AF8  0008               	return
  2827  0AF9                     __end_of_send_msg:	
  2828                           
  2829                           	psect	text3
  2830  0909                     __ptext3:	
  2831 ;; *************** function _send_string *****************
  2832 ;; Defined at:
  2833 ;;		line 29 in file "packet.h"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;  str             2    7[BANK0 ] PTR unsigned char 
  2836 ;;		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(23), handle_REG_ID_RQT_CMD@msgo(23), stop_mark(4), start_mark(4), 
  2837 ;;  len             1    9[BANK0 ] unsigned char 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  i               1   11[BANK0 ] unsigned char 
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  1    wreg      void 
  2842 ;; Registers used:
  2843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2849 ;;      Params:         0       3       0       0       0
  2850 ;;      Locals:         0       1       0       0       0
  2851 ;;      Temps:          0       1       0       0       0
  2852 ;;      Totals:         0       5       0       0       0
  2853 ;;Total ram usage:        5 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    5
  2856 ;; This function calls:
  2857 ;;		_send_byte
  2858 ;; This function is called by:
  2859 ;;		_send_msg
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           
  2864                           ;psect for function _send_string
  2865  0909                     _send_string:	
  2866                           
  2867                           ;packet.h: 31: for(uint8_t i = 0; i < len; i++)
  2868                           
  2869                           ;incstack = 0
  2870 ;; using string table level
  2871                           ; Regs used in _send_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2872  0909  1283               	bcf	3,5	;RP0=0, select bank0
  2873  090A  1303               	bcf	3,6	;RP1=0, select bank0
  2874  090B  01AB               	clrf	send_string@i
  2875  090C                     l2533:	
  2876  090C  0829               	movf	send_string@len,w
  2877  090D  022B               	subwf	send_string@i,w
  2878  090E  1803               	btfsc	3,0
  2879  090F  0008               	return
  2880                           
  2881                           ;packet.h: 32: {
  2882                           ;packet.h: 33: send_byte(str[i]);
  2883  0910  082B               	movf	send_string@i,w
  2884  0911  0727               	addwf	send_string@str,w
  2885  0912  0084               	movwf	4
  2886  0913  0828               	movf	send_string@str+1,w
  2887  0914  1803               	skipnc
  2888  0915  0A28               	incf	send_string@str+1,w
  2889  0916  00FF               	movwf	127
  2890  0917  120A  118A  2631  120A  158A  	fcall	stringtab
  2891  091C  120A  158A  2205  120A  158A  	fcall	_send_byte
  2892  0921  3001               	movlw	1
  2893  0922  1283               	bcf	3,5	;RP0=0, select bank0
  2894  0923  1303               	bcf	3,6	;RP1=0, select bank0
  2895  0924  00AA               	movwf	??_send_string
  2896  0925  082A               	movf	??_send_string,w
  2897  0926  07AB               	addwf	send_string@i,f
  2898  0927  290C               	goto	l2533
  2899  0928                     __end_of_send_string:	
  2900                           
  2901                           	psect	text4
  2902  0A05                     __ptext4:	
  2903 ;; *************** function _send_byte *****************
  2904 ;; Defined at:
  2905 ;;		line 20 in file "packet.h"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;  c               1    wreg     unsigned char 
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;  c               1    6[BANK0 ] unsigned char 
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      void 
  2912 ;; Registers used:
  2913 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2919 ;;      Params:         0       0       0       0       0
  2920 ;;      Locals:         0       1       0       0       0
  2921 ;;      Temps:          0       2       0       0       0
  2922 ;;      Totals:         0       3       0       0       0
  2923 ;;Total ram usage:        3 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:    4
  2926 ;; This function calls:
  2927 ;;		_send_half_byte
  2928 ;; This function is called by:
  2929 ;;		_send_string
  2930 ;; This function uses a non-reentrant model
  2931 ;;
  2932                           
  2933                           
  2934                           ;psect for function _send_byte
  2935  0A05                     _send_byte:	
  2936                           
  2937                           ;incstack = 0
  2938                           ; Regs used in _send_byte: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2939                           ;send_byte@c stored from wreg
  2940  0A05  1283               	bcf	3,5	;RP0=0, select bank0
  2941  0A06  1303               	bcf	3,6	;RP1=0, select bank0
  2942  0A07  00A6               	movwf	send_byte@c
  2943                           
  2944                           ;packet.h: 22: send_half_byte(c, 1);
  2945  0A08  01A0               	clrf	send_half_byte@low
  2946  0A09  0AA0               	incf	send_half_byte@low,f
  2947  0A0A  0826               	movf	send_byte@c,w
  2948  0A0B  120A  158A  2794  120A  158A  	fcall	_send_half_byte
  2949                           
  2950                           ;packet.h: 23: _delay((unsigned long)((5)*(20000000/4000.0)));
  2951  0A10  3021               	movlw	33
  2952  0A11  1283               	bcf	3,5	;RP0=0, select bank0
  2953  0A12  1303               	bcf	3,6	;RP1=0, select bank0
  2954  0A13  00A5               	movwf	??_send_byte+1
  2955  0A14  3076               	movlw	118
  2956  0A15  00A4               	movwf	??_send_byte
  2957  0A16                     u3817:	
  2958  0A16  0BA4               	decfsz	??_send_byte,f
  2959  0A17  2A16               	goto	u3817
  2960  0A18  0BA5               	decfsz	??_send_byte+1,f
  2961  0A19  2A16               	goto	u3817
  2962  0A1A  0000               	nop
  2963                           
  2964                           ;packet.h: 24: send_half_byte(c, 0);
  2965  0A1B  1283               	bcf	3,5	;RP0=0, select bank0
  2966  0A1C  1303               	bcf	3,6	;RP1=0, select bank0
  2967  0A1D  01A0               	clrf	send_half_byte@low
  2968  0A1E  0826               	movf	send_byte@c,w
  2969  0A1F  120A  158A  2794  120A  158A  	fcall	_send_half_byte
  2970                           
  2971                           ;packet.h: 25: _delay((unsigned long)((5)*(20000000/4000.0)));
  2972  0A24  3021               	movlw	33
  2973  0A25  1283               	bcf	3,5	;RP0=0, select bank0
  2974  0A26  1303               	bcf	3,6	;RP1=0, select bank0
  2975  0A27  00A5               	movwf	??_send_byte+1
  2976  0A28  3076               	movlw	118
  2977  0A29  00A4               	movwf	??_send_byte
  2978  0A2A                     u3827:	
  2979  0A2A  0BA4               	decfsz	??_send_byte,f
  2980  0A2B  2A2A               	goto	u3827
  2981  0A2C  0BA5               	decfsz	??_send_byte+1,f
  2982  0A2D  2A2A               	goto	u3827
  2983  0A2E  0000               	nop
  2984  0A2F  0008               	return
  2985  0A30                     __end_of_send_byte:	
  2986                           
  2987                           	psect	text5
  2988  0F94                     __ptext5:	
  2989 ;; *************** function _send_half_byte *****************
  2990 ;; Defined at:
  2991 ;;		line 14 in file "packet.h"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  value           1    wreg     unsigned char 
  2994 ;;  low             1    0[BANK0 ] unsigned char 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  value           1    2[BANK0 ] unsigned char 
  2997 ;;  byte            1    3[BANK0 ] PTR struct .
  2998 ;;		 -> send_half_byte@value(1), 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  1    wreg      void 
  3001 ;; Registers used:
  3002 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3008 ;;      Params:         0       1       0       0       0
  3009 ;;      Locals:         0       2       0       0       0
  3010 ;;      Temps:          0       1       0       0       0
  3011 ;;      Totals:         0       4       0       0       0
  3012 ;;Total ram usage:        4 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    3
  3015 ;; This function calls:
  3016 ;;		Nothing
  3017 ;; This function is called by:
  3018 ;;		_send_byte
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           
  3023                           ;psect for function _send_half_byte
  3024  0F94                     _send_half_byte:	
  3025                           
  3026                           ;incstack = 0
  3027                           ; Regs used in _send_half_byte: [wreg-fsr0h+status,2+status,0]
  3028                           ;send_half_byte@value stored from wreg
  3029  0F94  1283               	bcf	3,5	;RP0=0, select bank0
  3030  0F95  1303               	bcf	3,6	;RP1=0, select bank0
  3031  0F96  00A2               	movwf	send_half_byte@value
  3032                           
  3033                           ;packet.h: 16: { BITbits_t *byte = (BITbits_t *)&value; if(low == 1) { RA4 = byte->B0; R
      +                          A5 = byte->B1; RA6 = byte->B2; RA7 = byte->B3; } else { RA4 = byte->B4; RA5 = byte->B5; 
      +                          RA6 = byte->B6; RA7 = byte->B7; } };
  3034  0F97  3022               	movlw	(low (send_half_byte@value| 0))& (0+255)
  3035  0F98  00A1               	movwf	??_send_half_byte
  3036  0F99  0821               	movf	??_send_half_byte,w
  3037  0F9A  00A3               	movwf	send_half_byte@byte
  3038  0F9B  0320               	decf	send_half_byte@low,w
  3039  0F9C  1D03               	btfss	3,2
  3040  0F9D  2FC8               	goto	l2297
  3041  0F9E  0823               	movf	send_half_byte@byte,w
  3042  0F9F  0084               	movwf	4
  3043  0FA0  1383               	bcf	3,7	;select IRP bank0
  3044  0FA1  1C00               	btfss	0,0
  3045  0FA2  2FA7               	goto	u1900
  3046  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  3047  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  3048  0FA5  1605               	bsf	5,4	;volatile
  3049  0FA6  2FAA               	goto	u1914
  3050  0FA7                     u1900:	
  3051  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  3052  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  3053  0FA9  1205               	bcf	5,4	;volatile
  3054  0FAA                     u1914:	
  3055  0FAA  0823               	movf	send_half_byte@byte,w
  3056  0FAB  0084               	movwf	4
  3057  0FAC  1383               	bcf	3,7	;select IRP bank0
  3058  0FAD  1C80               	btfss	0,1
  3059  0FAE  2FB3               	goto	u1920
  3060  0FAF  1283               	bcf	3,5	;RP0=0, select bank0
  3061  0FB0  1303               	bcf	3,6	;RP1=0, select bank0
  3062  0FB1  1685               	bsf	5,5	;volatile
  3063  0FB2  2FB6               	goto	u1934
  3064  0FB3                     u1920:	
  3065  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  3066  0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  3067  0FB5  1285               	bcf	5,5	;volatile
  3068  0FB6                     u1934:	
  3069  0FB6  0823               	movf	send_half_byte@byte,w
  3070  0FB7  0084               	movwf	4
  3071  0FB8  1383               	bcf	3,7	;select IRP bank0
  3072  0FB9  1D00               	btfss	0,2
  3073  0FBA  2FBF               	goto	u1940
  3074  0FBB  1283               	bcf	3,5	;RP0=0, select bank0
  3075  0FBC  1303               	bcf	3,6	;RP1=0, select bank0
  3076  0FBD  1705               	bsf	5,6	;volatile
  3077  0FBE  2FC2               	goto	u1954
  3078  0FBF                     u1940:	
  3079  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  3080  0FC0  1303               	bcf	3,6	;RP1=0, select bank0
  3081  0FC1  1305               	bcf	5,6	;volatile
  3082  0FC2                     u1954:	
  3083  0FC2  0823               	movf	send_half_byte@byte,w
  3084  0FC3  0084               	movwf	4
  3085  0FC4  1383               	bcf	3,7	;select IRP bank0
  3086  0FC5  1980               	btfsc	0,3
  3087  0FC6  2FF1               	goto	L1
  3088  0FC7  2FF5               	goto	u2040
  3089  0FC8                     l2297:	
  3090  0FC8  0823               	movf	send_half_byte@byte,w
  3091  0FC9  0084               	movwf	4
  3092  0FCA  1383               	bcf	3,7	;select IRP bank0
  3093  0FCB  1E00               	btfss	0,4
  3094  0FCC  2FD1               	goto	u1980
  3095  0FCD  1283               	bcf	3,5	;RP0=0, select bank0
  3096  0FCE  1303               	bcf	3,6	;RP1=0, select bank0
  3097  0FCF  1605               	bsf	5,4	;volatile
  3098  0FD0  2FD4               	goto	u1994
  3099  0FD1                     u1980:	
  3100  0FD1  1283               	bcf	3,5	;RP0=0, select bank0
  3101  0FD2  1303               	bcf	3,6	;RP1=0, select bank0
  3102  0FD3  1205               	bcf	5,4	;volatile
  3103  0FD4                     u1994:	
  3104  0FD4  0823               	movf	send_half_byte@byte,w
  3105  0FD5  0084               	movwf	4
  3106  0FD6  1383               	bcf	3,7	;select IRP bank0
  3107  0FD7  1E80               	btfss	0,5
  3108  0FD8  2FDD               	goto	u2000
  3109  0FD9  1283               	bcf	3,5	;RP0=0, select bank0
  3110  0FDA  1303               	bcf	3,6	;RP1=0, select bank0
  3111  0FDB  1685               	bsf	5,5	;volatile
  3112  0FDC  2FE0               	goto	u2014
  3113  0FDD                     u2000:	
  3114  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  3115  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  3116  0FDF  1285               	bcf	5,5	;volatile
  3117  0FE0                     u2014:	
  3118  0FE0  0823               	movf	send_half_byte@byte,w
  3119  0FE1  0084               	movwf	4
  3120  0FE2  1383               	bcf	3,7	;select IRP bank0
  3121  0FE3  1F00               	btfss	0,6
  3122  0FE4  2FE9               	goto	u2020
  3123  0FE5  1283               	bcf	3,5	;RP0=0, select bank0
  3124  0FE6  1303               	bcf	3,6	;RP1=0, select bank0
  3125  0FE7  1705               	bsf	5,6	;volatile
  3126  0FE8  2FEC               	goto	u2034
  3127  0FE9                     u2020:	
  3128  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  3129  0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  3130  0FEB  1305               	bcf	5,6	;volatile
  3131  0FEC                     u2034:	
  3132  0FEC  0823               	movf	send_half_byte@byte,w
  3133  0FED  0084               	movwf	4
  3134  0FEE  1383               	bcf	3,7	;select IRP bank0
  3135  0FEF  1F80               	btfss	0,7
  3136  0FF0  2FF5               	goto	u2040
  3137  0FF1                     L1:	
  3138  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  3139  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  3140  0FF3  1785               	bsf	5,7	;volatile
  3141  0FF4  2FF8               	goto	l2299
  3142  0FF5                     u2040:	
  3143  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  3144  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  3145  0FF7  1385               	bcf	5,7	;volatile
  3146  0FF8                     l2299:	
  3147                           
  3148                           ;packet.h: 17: {RB1 = 0; _delay((unsigned long)((1)*(20000000/4000000.0))); RB1 = 1;};
  3149  0FF8  1086               	bcf	6,1	;volatile
  3150  0FF9  2FFA               	nop2	;2 cycle nop
  3151  0FFA  2FFB               	nop2	;2 cycle nop
  3152  0FFB  0000               	nop
  3153  0FFC  1283               	bcf	3,5	;RP0=0, select bank0
  3154  0FFD  1303               	bcf	3,6	;RP1=0, select bank0
  3155  0FFE  1486               	bsf	6,1	;volatile
  3156  0FFF  0008               	return
  3157  1000                     __end_of_send_half_byte:	
  3158                           
  3159                           	psect	text6
  3160  08EA                     __ptext6:	
  3161 ;; *************** function _is_right_addr *****************
  3162 ;; Defined at:
  3163 ;;		line 28 in file "cmd.h"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  pconn           1    wreg     PTR struct .
  3166 ;;		 -> client_conn(40), 
  3167 ;;  pmsg            1    0[BANK0 ] PTR struct .
  3168 ;;		 -> msg_rcv(23), 
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;  pconn           1    3[BANK0 ] PTR struct .
  3171 ;;		 -> client_conn(40), 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      unsigned char 
  3174 ;; Registers used:
  3175 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3181 ;;      Params:         0       1       0       0       0
  3182 ;;      Locals:         0       2       0       0       0
  3183 ;;      Temps:          0       1       0       0       0
  3184 ;;      Totals:         0       4       0       0       0
  3185 ;;Total ram usage:        4 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    3
  3188 ;; This function calls:
  3189 ;;		Nothing
  3190 ;; This function is called by:
  3191 ;;		_send_HEART_BEAT_RQT_CMD_and_wait
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           
  3196                           ;psect for function _is_right_addr
  3197  08EA                     _is_right_addr:	
  3198                           
  3199                           ;incstack = 0
  3200                           ; Regs used in _is_right_addr: [wreg-fsr0h+status,2+status,0]
  3201                           ;is_right_addr@pconn stored from wreg
  3202  08EA  1283               	bcf	3,5	;RP0=0, select bank0
  3203  08EB  1303               	bcf	3,6	;RP1=0, select bank0
  3204  08EC  00A3               	movwf	is_right_addr@pconn
  3205                           
  3206                           ;cmd.h: 31: return ((pconn->from == pmsg->to) && (pconn->to == pmsg->from));
  3207  08ED  01A2               	clrf	_is_right_addr$549
  3208  08EE  0820               	movf	is_right_addr@pmsg,w
  3209  08EF  3E04               	addlw	4
  3210  08F0  0084               	movwf	4
  3211  08F1  1783               	bsf	3,7	;select IRP bank2
  3212  08F2  0800               	movf	0,w
  3213  08F3  00A1               	movwf	??_is_right_addr
  3214  08F4  0823               	movf	is_right_addr@pconn,w
  3215  08F5  0084               	movwf	4
  3216  08F6  0800               	movf	0,w
  3217  08F7  0621               	xorwf	??_is_right_addr,w
  3218  08F8  1D03               	skipz
  3219  08F9  2907               	goto	l2875
  3220  08FA  0820               	movf	is_right_addr@pmsg,w
  3221  08FB  3E03               	addlw	3
  3222  08FC  0084               	movwf	4
  3223  08FD  0800               	movf	0,w
  3224  08FE  00A1               	movwf	??_is_right_addr
  3225  08FF  0A23               	incf	is_right_addr@pconn,w
  3226  0900  0084               	movwf	4
  3227  0901  0800               	movf	0,w
  3228  0902  0621               	xorwf	??_is_right_addr,w
  3229  0903  1D03               	skipz
  3230  0904  2907               	goto	l2875
  3231  0905  01A2               	clrf	_is_right_addr$549
  3232  0906  0AA2               	incf	_is_right_addr$549,f
  3233  0907                     l2875:	
  3234  0907  0822               	movf	_is_right_addr$549,w
  3235  0908  0008               	return
  3236  0909                     __end_of_is_right_addr:	
  3237                           
  3238                           	psect	text7
  3239  0B6C                     __ptext7:	
  3240 ;; *************** function _get_msg *****************
  3241 ;; Defined at:
  3242 ;;		line 102 in file "msg.h"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;  pmsg            1    wreg     PTR struct .
  3245 ;;		 -> msg_rcv(23), 
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;  pmsg            1   12[BANK0 ] PTR struct .
  3248 ;;		 -> msg_rcv(23), 
  3249 ;;  temp            1   15[BANK0 ] unsigned char 
  3250 ;;  end_index       1   14[BANK0 ] unsigned char 
  3251 ;;  start_index     1   13[BANK0 ] unsigned char 
  3252 ;;  i               1   11[BANK0 ] unsigned char 
  3253 ;;  pstr            1   10[BANK0 ] PTR unsigned char 
  3254 ;;		 -> msg_rcv(23), 
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  1    wreg      unsigned char 
  3257 ;; Registers used:
  3258 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3264 ;;      Params:         0       0       0       0       0
  3265 ;;      Locals:         0       6       0       0       0
  3266 ;;      Temps:          0       2       0       0       0
  3267 ;;      Totals:         0       8       0       0       0
  3268 ;;Total ram usage:        8 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    5
  3271 ;; This function calls:
  3272 ;;		_get_distance
  3273 ;;		_get_msg_index
  3274 ;;		_get_next_index
  3275 ;; This function is called by:
  3276 ;;		_send_HEART_BEAT_RQT_CMD_and_wait
  3277 ;;		_handle_received_cmds
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           
  3282                           ;psect for function _get_msg
  3283  0B6C                     _get_msg:	
  3284                           
  3285                           ;incstack = 0
  3286                           ; Regs used in _get_msg: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3287                           ;get_msg@pmsg stored from wreg
  3288  0B6C  1283               	bcf	3,5	;RP0=0, select bank0
  3289  0B6D  1303               	bcf	3,6	;RP1=0, select bank0
  3290  0B6E  00AC               	movwf	get_msg@pmsg
  3291                           
  3292                           ;msg.h: 104: uint8_t *pstr = (uint8_t *)pmsg;
  3293  0B6F  082C               	movf	get_msg@pmsg,w
  3294  0B70  00A8               	movwf	??_get_msg
  3295  0B71  0828               	movf	??_get_msg,w
  3296  0B72  00AA               	movwf	get_msg@pstr
  3297                           
  3298                           ;msg.h: 105: uint8_t start_index, end_index;
  3299                           ;msg.h: 106: uint8_t i = 0;
  3300  0B73  01AB               	clrf	get_msg@i
  3301                           
  3302                           ;msg.h: 107: uint8_t temp;
  3303                           ;msg.h: 108: if(get_msg_index(&start_index, &end_index) == 1)
  3304  0B74  302E               	movlw	(low (get_msg@end_index| 0))& (0+255)
  3305  0B75  00A8               	movwf	??_get_msg
  3306  0B76  0828               	movf	??_get_msg,w
  3307  0B77  00A3               	movwf	get_msg_index@end_index
  3308  0B78  302D               	movlw	(low (get_msg@start_index| 0))& (0+255)
  3309  0B79  120A  118A  22DB  120A  158A  	fcall	_get_msg_index
  3310  0B7E  3A01               	xorlw	1
  3311  0B7F  1D03               	skipz
  3312  0B80  2BB6               	goto	l2863
  3313                           
  3314                           ;msg.h: 109: {
  3315                           ;msg.h: 110: temp = start_index;
  3316  0B81  1283               	bcf	3,5	;RP0=0, select bank0
  3317  0B82  1303               	bcf	3,6	;RP1=0, select bank0
  3318  0B83  082D               	movf	get_msg@start_index,w
  3319  0B84                     L2:	
  3320  0B84  00A8               	movwf	??_get_msg
  3321  0B85  0828               	movf	??_get_msg,w
  3322  0B86  00AF               	movwf	get_msg@temp
  3323                           
  3324                           ;msg.h: 112: {
  3325                           ;msg.h: 113: pstr[i++] = buffer_rcv[temp];
  3326                           
  3327                           ;msg.h: 111: while(1)
  3328  0B87  082F               	movf	get_msg@temp,w
  3329  0B88  3EB8               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3330  0B89  0084               	movwf	4
  3331  0B8A  1783               	bsf	3,7	;select IRP bank3
  3332  0B8B  0800               	movf	0,w
  3333  0B8C  00A8               	movwf	??_get_msg
  3334  0B8D  082B               	movf	get_msg@i,w
  3335  0B8E  072A               	addwf	get_msg@pstr,w
  3336  0B8F  00A9               	movwf	??_get_msg+1
  3337  0B90  0829               	movf	??_get_msg+1,w
  3338  0B91  0084               	movwf	4
  3339  0B92  0828               	movf	??_get_msg,w
  3340  0B93  0080               	movwf	0
  3341  0B94  3001               	movlw	1
  3342  0B95  00A8               	movwf	??_get_msg
  3343  0B96  0828               	movf	??_get_msg,w
  3344  0B97  07AB               	addwf	get_msg@i,f
  3345                           
  3346                           ;msg.h: 114: buffer_rcv[temp] = 0;
  3347  0B98  082F               	movf	get_msg@temp,w
  3348  0B99  3EB8               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3349  0B9A  0084               	movwf	4
  3350  0B9B  0180               	clrf	0
  3351                           
  3352                           ;msg.h: 115: if(get_distance(temp, end_index) == 0)
  3353  0B9C  082E               	movf	get_msg@end_index,w
  3354  0B9D  00A8               	movwf	??_get_msg
  3355  0B9E  0828               	movf	??_get_msg,w
  3356  0B9F  00A0               	movwf	get_distance@end_index
  3357  0BA0  082F               	movf	get_msg@temp,w
  3358  0BA1  120A  158A  2021  120A  158A  	fcall	_get_distance
  3359  0BA6  3A00               	xorlw	0
  3360  0BA7  1903               	btfsc	3,2
  3361  0BA8  2BB4               	goto	l2859
  3362                           
  3363                           ;msg.h: 118: }
  3364                           ;msg.h: 119: temp = get_next_index(temp);
  3365                           
  3366                           ;msg.h: 116: {
  3367                           ;msg.h: 117: break;
  3368  0BA9  1283               	bcf	3,5	;RP0=0, select bank0
  3369  0BAA  1303               	bcf	3,6	;RP1=0, select bank0
  3370  0BAB  082F               	movf	get_msg@temp,w
  3371  0BAC  160A  118A  27F4  120A  158A  	fcall	_get_next_index
  3372  0BB1  1283               	bcf	3,5	;RP0=0, select bank0
  3373  0BB2  1303               	bcf	3,6	;RP1=0, select bank0
  3374  0BB3  2B84               	goto	L2
  3375  0BB4                     l2859:	
  3376                           
  3377                           ;msg.h: 120: }
  3378                           ;msg.h: 122: return 1;
  3379  0BB4  3001               	movlw	1
  3380  0BB5  0008               	return
  3381  0BB6                     l2863:	
  3382                           
  3383                           ;msg.h: 123: }
  3384                           ;msg.h: 125: return 0;
  3385  0BB6  3000               	movlw	0
  3386  0BB7  0008               	return
  3387  0BB8                     __end_of_get_msg:	
  3388                           
  3389                           	psect	text8
  3390  02DB                     __ptext8:	
  3391 ;; *************** function _get_msg_index *****************
  3392 ;; Defined at:
  3393 ;;		line 83 in file "circle_buffer.h"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;  start_index     1    wreg     PTR unsigned char 
  3396 ;;		 -> get_msg@start_index(1), 
  3397 ;;  end_index       1    3[BANK0 ] PTR unsigned char 
  3398 ;;		 -> get_msg@end_index(1), 
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;  start_index     1    6[BANK0 ] PTR unsigned char 
  3401 ;;		 -> get_msg@start_index(1), 
  3402 ;;  i               1    7[BANK0 ] unsigned char 
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      unsigned char 
  3405 ;; Registers used:
  3406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3412 ;;      Params:         0       1       0       0       0
  3413 ;;      Locals:         0       2       0       0       0
  3414 ;;      Temps:          0       2       0       0       0
  3415 ;;      Totals:         0       5       0       0       0
  3416 ;;Total ram usage:        5 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    4
  3419 ;; This function calls:
  3420 ;;		_get_distance
  3421 ;;		_get_minus_index
  3422 ;;		_get_next_index
  3423 ;;		_get_plus_index
  3424 ;; This function is called by:
  3425 ;;		_get_msg
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           
  3430                           ;psect for function _get_msg_index
  3431  02DB                     _get_msg_index:	
  3432                           
  3433                           ;incstack = 0
  3434                           ; Regs used in _get_msg_index: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3435                           ;get_msg_index@start_index stored from wreg
  3436  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  3437  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  3438  02DD  00A6               	movwf	get_msg_index@start_index
  3439                           
  3440                           ;circle_buffer.h: 105: uint8_t i;
  3441                           ;circle_buffer.h: 106: *start_index = 0xFF;
  3442  02DE  30FF               	movlw	255
  3443  02DF  00A4               	movwf	??_get_msg_index
  3444  02E0  0826               	movf	get_msg_index@start_index,w
  3445  02E1  0084               	movwf	4
  3446  02E2  0824               	movf	??_get_msg_index,w
  3447  02E3  1383               	bcf	3,7	;select IRP bank0
  3448  02E4  0080               	movwf	0
  3449                           
  3450                           ;circle_buffer.h: 107: *end_index = 0xFF;
  3451  02E5  30FF               	movlw	255
  3452  02E6  00A4               	movwf	??_get_msg_index
  3453  02E7  0823               	movf	get_msg_index@end_index,w
  3454  02E8  0084               	movwf	4
  3455  02E9  0824               	movf	??_get_msg_index,w
  3456  02EA  0080               	movwf	0
  3457                           
  3458                           ;circle_buffer.h: 109: if(low_half_rcv == 0)
  3459  02EB  087D               	movf	_low_half_rcv,w
  3460  02EC  1D03               	btfss	3,2
  3461  02ED  2AF0               	goto	l2651
  3462                           
  3463                           ;circle_buffer.h: 110: {
  3464                           ;circle_buffer.h: 111: return 0;
  3465  02EE  3000               	movlw	0
  3466  02EF  0008               	return
  3467  02F0                     l2651:	
  3468                           
  3469                           ;circle_buffer.h: 112: }
  3470                           ;circle_buffer.h: 113: if(get_distance(start_index_rcv, end_index_rcv) <= 7)
  3471  02F0  087C               	movf	_end_index_rcv,w
  3472  02F1  00A4               	movwf	??_get_msg_index
  3473  02F2  0824               	movf	??_get_msg_index,w
  3474  02F3  00A0               	movwf	get_distance@end_index
  3475  02F4  086F               	movf	_start_index_rcv,w
  3476  02F5  120A  158A  2021  120A  118A  	fcall	_get_distance
  3477  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  3478  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  3479  02FC  00A5               	movwf	??_get_msg_index+1
  3480  02FD  3008               	movlw	8
  3481  02FE  0225               	subwf	??_get_msg_index+1,w
  3482  02FF  1803               	skipnc
  3483  0300  2B03               	goto	l2657
  3484                           
  3485                           ;circle_buffer.h: 114: {
  3486                           ;circle_buffer.h: 115: return 0;
  3487  0301  3000               	movlw	0
  3488  0302  0008               	return
  3489  0303                     l2657:	
  3490                           
  3491                           ;circle_buffer.h: 116: }
  3492                           ;circle_buffer.h: 117: i = start_index_rcv;
  3493  0303  086F               	movf	_start_index_rcv,w
  3494  0304                     L3:	
  3495  0304  00A4               	movwf	??_get_msg_index
  3496  0305  0824               	movf	??_get_msg_index,w
  3497  0306  00A7               	movwf	get_msg_index@i
  3498  0307  087C               	movf	_end_index_rcv,w
  3499  0308  00A4               	movwf	??_get_msg_index
  3500  0309  0824               	movf	??_get_msg_index,w
  3501  030A  00A0               	movwf	get_distance@end_index
  3502  030B  0827               	movf	get_msg_index@i,w
  3503  030C  120A  158A  2021  120A  118A  	fcall	_get_distance
  3504  0311  1283               	bcf	3,5	;RP0=0, select bank0
  3505  0312  1303               	bcf	3,6	;RP1=0, select bank0
  3506  0313  00A5               	movwf	??_get_msg_index+1
  3507  0314  3003               	movlw	3
  3508  0315  0225               	subwf	??_get_msg_index+1,w
  3509  0316  1C03               	btfss	3,0
  3510  0317  2C00               	goto	l2683
  3511                           
  3512                           ;circle_buffer.h: 119: {
  3513                           ;circle_buffer.h: 122: if((buffer_rcv[i] == start_mark[0]) && (buffer_rcv[get_plus_index
      +                          (i, 1)] == start_mark[1])
  3514                           ;circle_buffer.h: 123: && (buffer_rcv[get_plus_index(i, 2)] == start_mark[2]) && (buffer
      +                          _rcv[get_plus_index(i, 3)] == start_mark[3]))
  3515                           
  3516                           ;circle_buffer.h: 118: while(get_distance(i, end_index_rcv) >= 3)
  3517  0318  300B               	movlw	low (_start_mark-__stringbase)
  3518  0319  0084               	movwf	4
  3519  031A  120A  118A  263B  120A  118A  	fcall	stringdir
  3520  031F  00A4               	movwf	??_get_msg_index
  3521  0320  0827               	movf	get_msg_index@i,w
  3522  0321  3EB8               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3523  0322  0084               	movwf	4
  3524  0323  1783               	bsf	3,7	;select IRP bank3
  3525  0324  0800               	movf	0,w
  3526  0325  0624               	xorwf	??_get_msg_index,w
  3527  0326  1D03               	skipz
  3528  0327  2B88               	goto	l2669
  3529  0328  300C               	movlw	low (((_start_mark+1)-__stringbase)| (0+32768))
  3530  0329  0084               	movwf	4
  3531  032A  120A  118A  263B  120A  118A  	fcall	stringdir
  3532  032F  00A4               	movwf	??_get_msg_index
  3533  0330  01A0               	clrf	get_plus_index@add
  3534  0331  0AA0               	incf	get_plus_index@add,f
  3535  0332  0827               	movf	get_msg_index@i,w
  3536  0333  120A  158A  2003  120A  118A  	fcall	_get_plus_index
  3537  0338  3EB8               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3538  0339  0084               	movwf	4
  3539  033A  1783               	bsf	3,7	;select IRP bank3
  3540  033B  0800               	movf	0,w
  3541  033C  1283               	bcf	3,5	;RP0=0, select bank0
  3542  033D  1303               	bcf	3,6	;RP1=0, select bank0
  3543  033E  0624               	xorwf	??_get_msg_index,w
  3544  033F  1D03               	skipz
  3545  0340  2B88               	goto	l2669
  3546  0341  300D               	movlw	low (((_start_mark+2)-__stringbase)| (0+32768))
  3547  0342  0084               	movwf	4
  3548  0343  120A  118A  263B  120A  118A  	fcall	stringdir
  3549  0348  00A4               	movwf	??_get_msg_index
  3550  0349  3002               	movlw	2
  3551  034A  00A5               	movwf	??_get_msg_index+1
  3552  034B  0825               	movf	??_get_msg_index+1,w
  3553  034C  00A0               	movwf	get_plus_index@add
  3554  034D  0827               	movf	get_msg_index@i,w
  3555  034E  120A  158A  2003  120A  118A  	fcall	_get_plus_index
  3556  0353  3EB8               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3557  0354  0084               	movwf	4
  3558  0355  1783               	bsf	3,7	;select IRP bank3
  3559  0356  0800               	movf	0,w
  3560  0357  1283               	bcf	3,5	;RP0=0, select bank0
  3561  0358  1303               	bcf	3,6	;RP1=0, select bank0
  3562  0359  0624               	xorwf	??_get_msg_index,w
  3563  035A  1D03               	skipz
  3564  035B  2B88               	goto	l2669
  3565                           
  3566                           ;circle_buffer.h: 124: {
  3567                           ;circle_buffer.h: 125: if(*start_index != -1)
  3568  035C  300E               	movlw	low (((_start_mark+3)-__stringbase)| (0+32768))
  3569  035D  0084               	movwf	4
  3570  035E  120A  118A  263B  120A  118A  	fcall	stringdir
  3571  0363  00A4               	movwf	??_get_msg_index
  3572  0364  3003               	movlw	3
  3573  0365  00A5               	movwf	??_get_msg_index+1
  3574  0366  0825               	movf	??_get_msg_index+1,w
  3575  0367  00A0               	movwf	get_plus_index@add
  3576  0368  0827               	movf	get_msg_index@i,w
  3577  0369  120A  158A  2003  120A  118A  	fcall	_get_plus_index
  3578  036E  3EB8               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3579  036F  0084               	movwf	4
  3580  0370  1783               	bsf	3,7	;select IRP bank3
  3581  0371  0800               	movf	0,w
  3582  0372  1283               	bcf	3,5	;RP0=0, select bank0
  3583  0373  1303               	bcf	3,6	;RP1=0, select bank0
  3584  0374  0624               	xorwf	??_get_msg_index,w
  3585  0375  1D03               	skipz
  3586  0376  2B88               	goto	l2669
  3587                           
  3588                           ;circle_buffer.h: 126: {
  3589                           ;circle_buffer.h: 127: *start_index = get_plus_index(i, 4);
  3590  0377  3004               	movlw	4
  3591  0378  00A4               	movwf	??_get_msg_index
  3592  0379  0824               	movf	??_get_msg_index,w
  3593  037A  00A0               	movwf	get_plus_index@add
  3594  037B  0827               	movf	get_msg_index@i,w
  3595  037C  120A  158A  2003  120A  118A  	fcall	_get_plus_index
  3596  0381  1283               	bcf	3,5	;RP0=0, select bank0
  3597  0382  1303               	bcf	3,6	;RP1=0, select bank0
  3598  0383  00A5               	movwf	??_get_msg_index+1
  3599  0384  0826               	movf	get_msg_index@start_index,w
  3600  0385  0084               	movwf	4
  3601  0386  0825               	movf	??_get_msg_index+1,w
  3602  0387  2BF5               	goto	L4
  3603  0388                     l2669:	
  3604                           ;circle_buffer.h: 128: }
  3605                           ;circle_buffer.h: 129: }
  3606                           
  3607                           
  3608                           ;circle_buffer.h: 130: else if((buffer_rcv[i] == stop_mark[0]) && (buffer_rcv[get_plus_i
      +                          ndex(i, 1)] == stop_mark[1])
  3609                           ;circle_buffer.h: 131: && (buffer_rcv[get_plus_index(i, 2)] == stop_mark[2]) && (buffer_
      +                          rcv[get_plus_index(i, 3)] == stop_mark[3]))
  3610  0388  300F               	movlw	low (_stop_mark-__stringbase)
  3611  0389  0084               	movwf	4
  3612  038A  120A  118A  263B  120A  118A  	fcall	stringdir
  3613  038F  00A4               	movwf	??_get_msg_index
  3614  0390  0827               	movf	get_msg_index@i,w
  3615  0391  3EB8               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3616  0392  0084               	movwf	4
  3617  0393  1783               	bsf	3,7	;select IRP bank3
  3618  0394  0800               	movf	0,w
  3619  0395  0624               	xorwf	??_get_msg_index,w
  3620  0396  1D03               	skipz
  3621  0397  2BF7               	goto	l2679
  3622  0398  3010               	movlw	low (((_stop_mark+1)-__stringbase)| (0+32768))
  3623  0399  0084               	movwf	4
  3624  039A  120A  118A  263B  120A  118A  	fcall	stringdir
  3625  039F  00A4               	movwf	??_get_msg_index
  3626  03A0  01A0               	clrf	get_plus_index@add
  3627  03A1  0AA0               	incf	get_plus_index@add,f
  3628  03A2  0827               	movf	get_msg_index@i,w
  3629  03A3  120A  158A  2003  120A  118A  	fcall	_get_plus_index
  3630  03A8  3EB8               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3631  03A9  0084               	movwf	4
  3632  03AA  1783               	bsf	3,7	;select IRP bank3
  3633  03AB  0800               	movf	0,w
  3634  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  3635  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  3636  03AE  0624               	xorwf	??_get_msg_index,w
  3637  03AF  1D03               	skipz
  3638  03B0  2BF7               	goto	l2679
  3639  03B1  3011               	movlw	low (((_stop_mark+2)-__stringbase)| (0+32768))
  3640  03B2  0084               	movwf	4
  3641  03B3  120A  118A  263B  120A  118A  	fcall	stringdir
  3642  03B8  00A4               	movwf	??_get_msg_index
  3643  03B9  3002               	movlw	2
  3644  03BA  00A5               	movwf	??_get_msg_index+1
  3645  03BB  0825               	movf	??_get_msg_index+1,w
  3646  03BC  00A0               	movwf	get_plus_index@add
  3647  03BD  0827               	movf	get_msg_index@i,w
  3648  03BE  120A  158A  2003  120A  118A  	fcall	_get_plus_index
  3649  03C3  3EB8               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3650  03C4  0084               	movwf	4
  3651  03C5  1783               	bsf	3,7	;select IRP bank3
  3652  03C6  0800               	movf	0,w
  3653  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  3654  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  3655  03C9  0624               	xorwf	??_get_msg_index,w
  3656  03CA  1D03               	skipz
  3657  03CB  2BF7               	goto	l2679
  3658                           
  3659                           ;circle_buffer.h: 132: {
  3660                           ;circle_buffer.h: 133: if(*end_index != -1)
  3661  03CC  3012               	movlw	low (((_stop_mark+3)-__stringbase)| (0+32768))
  3662  03CD  0084               	movwf	4
  3663  03CE  120A  118A  263B  120A  118A  	fcall	stringdir
  3664  03D3  00A4               	movwf	??_get_msg_index
  3665  03D4  3003               	movlw	3
  3666  03D5  00A5               	movwf	??_get_msg_index+1
  3667  03D6  0825               	movf	??_get_msg_index+1,w
  3668  03D7  00A0               	movwf	get_plus_index@add
  3669  03D8  0827               	movf	get_msg_index@i,w
  3670  03D9  120A  158A  2003  120A  118A  	fcall	_get_plus_index
  3671  03DE  3EB8               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  3672  03DF  0084               	movwf	4
  3673  03E0  1783               	bsf	3,7	;select IRP bank3
  3674  03E1  0800               	movf	0,w
  3675  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  3676  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  3677  03E4  0624               	xorwf	??_get_msg_index,w
  3678  03E5  1D03               	skipz
  3679  03E6  2BF7               	goto	l2679
  3680                           
  3681                           ;circle_buffer.h: 134: {
  3682                           ;circle_buffer.h: 135: *end_index = get_minus_index(i, 1);
  3683  03E7  01A0               	clrf	get_minus_index@sub
  3684  03E8  0AA0               	incf	get_minus_index@sub,f
  3685  03E9  0827               	movf	get_msg_index@i,w
  3686  03EA  120A  158A  2031  120A  118A  	fcall	_get_minus_index
  3687  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  3688  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  3689  03F1  00A4               	movwf	??_get_msg_index
  3690  03F2  0823               	movf	get_msg_index@end_index,w
  3691  03F3  0084               	movwf	4
  3692  03F4  0824               	movf	??_get_msg_index,w
  3693  03F5                     L4:	
  3694  03F5  1383               	bcf	3,7	;select IRP bank0
  3695  03F6  0080               	movwf	0
  3696  03F7                     l2679:	
  3697                           
  3698                           ;circle_buffer.h: 136: }
  3699                           ;circle_buffer.h: 137: }
  3700                           ;circle_buffer.h: 139: i = get_next_index(i);
  3701  03F7  0827               	movf	get_msg_index@i,w
  3702  03F8  160A  118A  27F4  120A  118A  	fcall	_get_next_index
  3703  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  3704  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  3705  03FF  2B04               	goto	L3
  3706  0400                     l2683:	
  3707                           
  3708                           ;circle_buffer.h: 140: }
  3709                           ;circle_buffer.h: 142: if(((*start_index != 0xFF) && (*end_index != 0xFF)) == 1)
  3710  0400  0826               	movf	get_msg_index@start_index,w
  3711  0401  0084               	movwf	4
  3712  0402  1383               	bcf	3,7	;select IRP bank0
  3713  0403  0A00               	incf	0,w
  3714  0404  1903               	btfsc	3,2
  3715  0405  2C1C               	goto	l2693
  3716  0406  0823               	movf	get_msg_index@end_index,w
  3717  0407  0084               	movwf	4
  3718  0408  0A00               	incf	0,w
  3719  0409  1903               	btfsc	3,2
  3720  040A  2C1C               	goto	l2693
  3721                           
  3722                           ;circle_buffer.h: 143: {
  3723                           ;circle_buffer.h: 144: start_index_rcv = get_plus_index(*end_index, 5);
  3724  040B  3005               	movlw	5
  3725  040C  00A4               	movwf	??_get_msg_index
  3726  040D  0824               	movf	??_get_msg_index,w
  3727  040E  00A0               	movwf	get_plus_index@add
  3728  040F  0823               	movf	get_msg_index@end_index,w
  3729  0410  0084               	movwf	4
  3730  0411  0800               	movf	0,w
  3731  0412  120A  158A  2003   	fcall	_get_plus_index
  3732  0415  1283               	bcf	3,5	;RP0=0, select bank0
  3733  0416  1303               	bcf	3,6	;RP1=0, select bank0
  3734  0417  00A5               	movwf	??_get_msg_index+1
  3735  0418  0825               	movf	??_get_msg_index+1,w
  3736  0419  00EF               	movwf	_start_index_rcv
  3737                           
  3738                           ;circle_buffer.h: 145: return 1;
  3739  041A  3001               	movlw	1
  3740  041B  0008               	return
  3741  041C                     l2693:	
  3742                           
  3743                           ;circle_buffer.h: 146: }
  3744                           ;circle_buffer.h: 147: return 0;
  3745  041C  3000               	movlw	0
  3746  041D  0008               	return
  3747  041E                     __end_of_get_msg_index:	
  3748                           
  3749                           	psect	text9
  3750  0803                     __ptext9:	
  3751 ;; *************** function _get_plus_index *****************
  3752 ;; Defined at:
  3753 ;;		line 55 in file "circle_buffer.h"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;  index           1    wreg     unsigned char 
  3756 ;;  add             1    0[BANK0 ] unsigned char 
  3757 ;; Auto vars:     Size  Location     Type
  3758 ;;  index           1    2[BANK0 ] unsigned char 
  3759 ;; Return value:  Size  Location     Type
  3760 ;;                  1    wreg      unsigned char 
  3761 ;; Registers used:
  3762 ;;		wreg, status,2, status,0
  3763 ;; Tracked objects:
  3764 ;;		On entry : 0/0
  3765 ;;		On exit  : 0/0
  3766 ;;		Unchanged: 0/0
  3767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3768 ;;      Params:         0       1       0       0       0
  3769 ;;      Locals:         0       1       0       0       0
  3770 ;;      Temps:          0       1       0       0       0
  3771 ;;      Totals:         0       3       0       0       0
  3772 ;;Total ram usage:        3 bytes
  3773 ;; Hardware stack levels used:    1
  3774 ;; Hardware stack levels required when called:    3
  3775 ;; This function calls:
  3776 ;;		Nothing
  3777 ;; This function is called by:
  3778 ;;		_get_msg_index
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           
  3783                           ;psect for function _get_plus_index
  3784  0803                     _get_plus_index:	
  3785                           
  3786                           ;incstack = 0
  3787                           ; Regs used in _get_plus_index: [wreg+status,2+status,0]
  3788                           ;get_plus_index@index stored from wreg
  3789  0803  1283               	bcf	3,5	;RP0=0, select bank0
  3790  0804  1303               	bcf	3,6	;RP1=0, select bank0
  3791  0805  00A2               	movwf	get_plus_index@index
  3792                           
  3793                           ;circle_buffer.h: 57: index += add;
  3794  0806  0820               	movf	get_plus_index@add,w
  3795  0807  00A1               	movwf	??_get_plus_index
  3796  0808  0821               	movf	??_get_plus_index,w
  3797  0809  07A2               	addwf	get_plus_index@index,f
  3798                           
  3799                           ;circle_buffer.h: 58: if(index >= 32)
  3800  080A  3020               	movlw	32
  3801  080B  0222               	subwf	get_plus_index@index,w
  3802  080C  1C03               	skipc
  3803  080D  2810               	goto	l2437
  3804                           
  3805                           ;circle_buffer.h: 59: {
  3806                           ;circle_buffer.h: 60: index -= 32;
  3807  080E  3020               	movlw	32
  3808  080F  02A2               	subwf	get_plus_index@index,f
  3809  0810                     l2437:	
  3810                           
  3811                           ;circle_buffer.h: 61: }
  3812                           ;circle_buffer.h: 62: return index;
  3813  0810  0822               	movf	get_plus_index@index,w
  3814  0811  0008               	return
  3815  0812                     __end_of_get_plus_index:	
  3816                           
  3817                           	psect	text10
  3818  17F4                     __ptext10:	
  3819 ;; *************** function _get_next_index *****************
  3820 ;; Defined at:
  3821 ;;		line 30 in file "circle_buffer.h"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;  index           1    wreg     unsigned char 
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;  index           1    0[BANK0 ] unsigned char 
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  1    wreg      unsigned char 
  3828 ;; Registers used:
  3829 ;;		wreg, status,2, status,0
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3835 ;;      Params:         0       0       0       0       0
  3836 ;;      Locals:         0       1       0       0       0
  3837 ;;      Temps:          0       0       0       0       0
  3838 ;;      Totals:         0       1       0       0       0
  3839 ;;Total ram usage:        1 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    3
  3842 ;; This function calls:
  3843 ;;		Nothing
  3844 ;; This function is called by:
  3845 ;;		_get_msg_index
  3846 ;;		_get_msg
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           
  3851                           ;psect for function _get_next_index
  3852  17F4                     _get_next_index:	
  3853                           
  3854                           ;incstack = 0
  3855                           ; Regs used in _get_next_index: [wreg+status,2+status,0]
  3856                           ;get_next_index@index stored from wreg
  3857  17F4  1283               	bcf	3,5	;RP0=0, select bank0
  3858  17F5  1303               	bcf	3,6	;RP1=0, select bank0
  3859  17F6  00A0               	movwf	get_next_index@index
  3860                           
  3861                           ;circle_buffer.h: 32: if(index == 32 - 1)
  3862  17F7  301F               	movlw	31
  3863  17F8  0620               	xorwf	get_next_index@index,w
  3864  17F9  1D03               	btfss	3,2
  3865  17FA  2FFD               	goto	l2429
  3866                           
  3867                           ;circle_buffer.h: 33: {
  3868                           ;circle_buffer.h: 34: return 0;
  3869  17FB  3000               	movlw	0
  3870                           
  3871                           ;circle_buffer.h: 35: }
  3872  17FC  0008               	return
  3873  17FD                     l2429:	
  3874                           
  3875                           ;circle_buffer.h: 36: else
  3876                           ;circle_buffer.h: 37: {
  3877                           ;circle_buffer.h: 38: return (index + 1);
  3878  17FD  0820               	movf	get_next_index@index,w
  3879  17FE  3E01               	addlw	1
  3880  17FF  0008               	return
  3881  1800                     __end_of_get_next_index:	
  3882                           
  3883                           	psect	text11
  3884  0831                     __ptext11:	
  3885 ;; *************** function _get_minus_index *****************
  3886 ;; Defined at:
  3887 ;;		line 64 in file "circle_buffer.h"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;  index           1    wreg     unsigned char 
  3890 ;;  sub             1    0[BANK0 ] unsigned char 
  3891 ;; Auto vars:     Size  Location     Type
  3892 ;;  index           1    1[BANK0 ] unsigned char 
  3893 ;; Return value:  Size  Location     Type
  3894 ;;                  1    wreg      unsigned char 
  3895 ;; Registers used:
  3896 ;;		wreg, status,2, status,0
  3897 ;; Tracked objects:
  3898 ;;		On entry : 0/0
  3899 ;;		On exit  : 0/0
  3900 ;;		Unchanged: 0/0
  3901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3902 ;;      Params:         0       1       0       0       0
  3903 ;;      Locals:         0       1       0       0       0
  3904 ;;      Temps:          0       0       0       0       0
  3905 ;;      Totals:         0       2       0       0       0
  3906 ;;Total ram usage:        2 bytes
  3907 ;; Hardware stack levels used:    1
  3908 ;; Hardware stack levels required when called:    3
  3909 ;; This function calls:
  3910 ;;		Nothing
  3911 ;; This function is called by:
  3912 ;;		_get_msg_index
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           
  3917                           ;psect for function _get_minus_index
  3918  0831                     _get_minus_index:	
  3919                           
  3920                           ;incstack = 0
  3921                           ; Regs used in _get_minus_index: [wreg+status,2+status,0]
  3922                           ;get_minus_index@index stored from wreg
  3923  0831  1283               	bcf	3,5	;RP0=0, select bank0
  3924  0832  1303               	bcf	3,6	;RP1=0, select bank0
  3925  0833  00A1               	movwf	get_minus_index@index
  3926                           
  3927                           ;circle_buffer.h: 66: if(index < sub)
  3928  0834  0820               	movf	get_minus_index@sub,w
  3929  0835  0221               	subwf	get_minus_index@index,w
  3930  0836  1803               	skipnc
  3931  0837  283D               	goto	l2447
  3932                           
  3933                           ;circle_buffer.h: 67: {
  3934                           ;circle_buffer.h: 68: return index + 32 - sub;
  3935  0838  0320               	decf	get_minus_index@sub,w
  3936  0839  3AFF               	xorlw	255
  3937  083A  0721               	addwf	get_minus_index@index,w
  3938  083B  3E20               	addlw	32
  3939  083C  0008               	return
  3940  083D                     l2447:	
  3941                           
  3942                           ;circle_buffer.h: 69: }
  3943                           ;circle_buffer.h: 70: return index - sub;
  3944  083D  0320               	decf	get_minus_index@sub,w
  3945  083E  3AFF               	xorlw	255
  3946  083F  0721               	addwf	get_minus_index@index,w
  3947  0840  0008               	return
  3948  0841                     __end_of_get_minus_index:	
  3949                           
  3950                           	psect	text12
  3951  0821                     __ptext12:	
  3952 ;; *************** function _get_distance *****************
  3953 ;; Defined at:
  3954 ;;		line 72 in file "circle_buffer.h"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;  start_index     1    wreg     unsigned char 
  3957 ;;  end_index       1    0[BANK0 ] unsigned char 
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;  start_index     1    1[BANK0 ] unsigned char 
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  1    wreg      unsigned char 
  3962 ;; Registers used:
  3963 ;;		wreg, status,2, status,0
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3969 ;;      Params:         0       1       0       0       0
  3970 ;;      Locals:         0       1       0       0       0
  3971 ;;      Temps:          0       0       0       0       0
  3972 ;;      Totals:         0       2       0       0       0
  3973 ;;Total ram usage:        2 bytes
  3974 ;; Hardware stack levels used:    1
  3975 ;; Hardware stack levels required when called:    3
  3976 ;; This function calls:
  3977 ;;		Nothing
  3978 ;; This function is called by:
  3979 ;;		_get_msg_index
  3980 ;;		_get_msg
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           
  3985                           ;psect for function _get_distance
  3986  0821                     _get_distance:	
  3987                           
  3988                           ;incstack = 0
  3989                           ; Regs used in _get_distance: [wreg+status,2+status,0]
  3990                           ;get_distance@start_index stored from wreg
  3991  0821  1283               	bcf	3,5	;RP0=0, select bank0
  3992  0822  1303               	bcf	3,6	;RP1=0, select bank0
  3993  0823  00A1               	movwf	get_distance@start_index
  3994                           
  3995                           ;circle_buffer.h: 74: if(end_index < start_index)
  3996  0824  0821               	movf	get_distance@start_index,w
  3997  0825  0220               	subwf	get_distance@end_index,w
  3998  0826  1803               	skipnc
  3999  0827  282D               	goto	l2459
  4000                           
  4001                           ;circle_buffer.h: 75: {
  4002                           ;circle_buffer.h: 76: return end_index + 32 - start_index;
  4003  0828  0321               	decf	get_distance@start_index,w
  4004  0829  3AFF               	xorlw	255
  4005  082A  0720               	addwf	get_distance@end_index,w
  4006  082B  3E20               	addlw	32
  4007                           
  4008                           ;circle_buffer.h: 77: }
  4009  082C  0008               	return
  4010  082D                     l2459:	
  4011                           
  4012                           ;circle_buffer.h: 78: else
  4013                           ;circle_buffer.h: 79: {
  4014                           ;circle_buffer.h: 80: return (end_index - start_index);
  4015  082D  0321               	decf	get_distance@start_index,w
  4016  082E  3AFF               	xorlw	255
  4017  082F  0720               	addwf	get_distance@end_index,w
  4018  0830  0008               	return
  4019  0831                     __end_of_get_distance:	
  4020                           
  4021                           	psect	text13
  4022  0DA8                     __ptext13:	
  4023 ;; *************** function _debug_1 *****************
  4024 ;; Defined at:
  4025 ;;		line 29 in file "debug.h"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;  v1              1    wreg     unsigned char 
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;  v1              1   40[BANK0 ] unsigned char 
  4030 ;;  i               1   42[BANK0 ] char 
  4031 ;;  count           1   41[BANK0 ] char 
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      void 
  4034 ;; Registers used:
  4035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4041 ;;      Params:         0       0       0       0       0
  4042 ;;      Locals:         0       3       0       0       0
  4043 ;;      Temps:          0       3       0       0       0
  4044 ;;      Totals:         0       6       0       0       0
  4045 ;;Total ram usage:        6 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    6
  4048 ;; This function calls:
  4049 ;;		_LCDByte
  4050 ;;		_LCDGotoXY
  4051 ;;		_LCDWriteString
  4052 ;;		_sprintf
  4053 ;; This function is called by:
  4054 ;;		_send_HEART_BEAT_RQT_CMD_and_wait
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           
  4059                           ;psect for function _debug_1
  4060  0DA8                     _debug_1:	
  4061                           
  4062                           ;incstack = 0
  4063                           ; Regs used in _debug_1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4064                           ;debug_1@v1 stored from wreg
  4065  0DA8  1283               	bcf	3,5	;RP0=0, select bank0
  4066  0DA9  1303               	bcf	3,6	;RP1=0, select bank0
  4067  0DAA  00C8               	movwf	debug_1@v1
  4068                           
  4069                           ;debug.h: 31: sprintf(sdebug, "%d", v1);
  4070  0DAB  3024               	movlw	(low (((STR_11+17)-__stringbase)| (0+32768)))& (0+255)
  4071  0DAC  00C5               	movwf	??_debug_1
  4072  0DAD  0845               	movf	??_debug_1,w
  4073  0DAE  00AE               	movwf	sprintf@f
  4074  0DAF  0848               	movf	debug_1@v1,w
  4075  0DB0  00C6               	movwf	??_debug_1+1
  4076  0DB1  01C7               	clrf	??_debug_1+2
  4077  0DB2  0846               	movf	??_debug_1+1,w
  4078  0DB3  00AF               	movwf	?_sprintf+1
  4079  0DB4  0847               	movf	??_debug_1+2,w
  4080  0DB5  00B0               	movwf	?_sprintf+2
  4081  0DB6  30AB               	movlw	(low (_sdebug| 0))& (0+255)
  4082  0DB7  120A  118A  241E  120A  158A  	fcall	_sprintf
  4083                           
  4084                           ;debug.h: 32: {{ LCDGotoXY(0,1); int8_t count = LCDWriteString(""); for(int8_t i = count
      +                           + 0; i < 16; i++) { (LCDByte(' ',1)); } };}; {{ LCDGotoXY(0,1); LCDWriteString(sdebug);
      +                          };};;
  4085  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  4086  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  4087  0DBE  01AC               	clrf	LCDGotoXY@y
  4088  0DBF  0AAC               	incf	LCDGotoXY@y,f
  4089  0DC0  3000               	movlw	0
  4090  0DC1  120A  158A  21B4  120A  158A  	fcall	_LCDGotoXY
  4091  0DC6  305C               	movlw	(low (((STR_21+4)-__stringbase)| (0+32768)))& (0+255)
  4092  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  4093  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  4094  0DC9  00AC               	movwf	LCDWriteString@msg
  4095  0DCA  3080               	movlw	128
  4096  0DCB  00AD               	movwf	LCDWriteString@msg+1
  4097  0DCC  120A  158A  2662  120A  158A  	fcall	_LCDWriteString
  4098  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  4099  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  4100  0DD3  00C5               	movwf	??_debug_1
  4101  0DD4  0845               	movf	??_debug_1,w
  4102  0DD5  00C9               	movwf	debug_1@count
  4103  0DD6  0849               	movf	debug_1@count,w
  4104  0DD7  00C5               	movwf	??_debug_1
  4105  0DD8  0845               	movf	??_debug_1,w
  4106  0DD9  00CA               	movwf	debug_1@i
  4107  0DDA  084A               	movf	debug_1@i,w
  4108  0DDB  3A80               	xorlw	128
  4109  0DDC  3E70               	addlw	-144
  4110  0DDD  1803               	btfsc	3,0
  4111  0DDE  2DF2               	goto	l2823
  4112  0DDF                     l2817:	
  4113  0DDF  01A5               	clrf	LCDByte@isdata
  4114  0DE0  0AA5               	incf	LCDByte@isdata,f
  4115  0DE1  3020               	movlw	32
  4116  0DE2  120A  118A  27A8  120A  158A  	fcall	_LCDByte
  4117  0DE7  3001               	movlw	1
  4118  0DE8  1283               	bcf	3,5	;RP0=0, select bank0
  4119  0DE9  1303               	bcf	3,6	;RP1=0, select bank0
  4120  0DEA  00C5               	movwf	??_debug_1
  4121  0DEB  0845               	movf	??_debug_1,w
  4122  0DEC  07CA               	addwf	debug_1@i,f
  4123  0DED  084A               	movf	debug_1@i,w
  4124  0DEE  3A80               	xorlw	128
  4125  0DEF  3E70               	addlw	-144
  4126  0DF0  1C03               	skipc
  4127  0DF1  2DDF               	goto	l2817
  4128  0DF2                     l2823:	
  4129  0DF2  01AC               	clrf	LCDGotoXY@y
  4130  0DF3  0AAC               	incf	LCDGotoXY@y,f
  4131  0DF4  3000               	movlw	0
  4132  0DF5  120A  158A  21B4  120A  158A  	fcall	_LCDGotoXY
  4133  0DFA  30AB               	movlw	(low (_sdebug| 0))& (0+255)
  4134  0DFB  1283               	bcf	3,5	;RP0=0, select bank0
  4135  0DFC  1303               	bcf	3,6	;RP1=0, select bank0
  4136  0DFD  00AC               	movwf	LCDWriteString@msg
  4137  0DFE  3000               	movlw	0
  4138  0DFF  00AD               	movwf	LCDWriteString@msg+1
  4139  0E00  120A  158A  2662   	fcall	_LCDWriteString
  4140  0E03  0008               	return
  4141  0E04                     __end_of_debug_1:	
  4142                           
  4143                           	psect	text14
  4144  041E                     __ptext14:	
  4145 ;; *************** function _sprintf *****************
  4146 ;; Defined at:
  4147 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;  sp              1    wreg     PTR unsigned char 
  4150 ;;		 -> dump_conn@s(32), sdebug(32), 
  4151 ;;  f               1   14[BANK0 ] PTR const unsigned char 
  4152 ;;		 -> STR_13(14), STR_11(20), STR_9(15), STR_7(12), 
  4153 ;;		 -> STR_5(9), STR_3(6), STR_1(3), 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  sp              1   35[BANK0 ] PTR unsigned char 
  4156 ;;		 -> dump_conn@s(32), sdebug(32), 
  4157 ;;  tmpval          4    0        struct .
  4158 ;;  val             2   33[BANK0 ] unsigned int 
  4159 ;;  cp              2    0        PTR const unsigned char 
  4160 ;;  len             2    0        unsigned int 
  4161 ;;  c               1   36[BANK0 ] char 
  4162 ;;  prec            1   32[BANK0 ] char 
  4163 ;;  flag            1   31[BANK0 ] unsigned char 
  4164 ;;  ap              1   30[BANK0 ] PTR void [1]
  4165 ;;		 -> ?_sprintf(2), 
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  2   14[BANK0 ] int 
  4168 ;; Registers used:
  4169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4175 ;;      Params:         0      13       0       0       0
  4176 ;;      Locals:         0       7       0       0       0
  4177 ;;      Temps:          0       3       0       0       0
  4178 ;;      Totals:         0      23       0       0       0
  4179 ;;Total ram usage:       23 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    4
  4182 ;; This function calls:
  4183 ;;		___lwdiv
  4184 ;;		___lwmod
  4185 ;; This function is called by:
  4186 ;;		_debug_1
  4187 ;;		_debug_2
  4188 ;;		_debug_3
  4189 ;;		_debug_4
  4190 ;;		_debug_5
  4191 ;;		_dump_msg
  4192 ;;		_dump_conn
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           
  4197                           ;psect for function _sprintf
  4198  041E                     _sprintf:	
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4202                           ;sprintf@sp stored from wreg
  4203  041E  1283               	bcf	3,5	;RP0=0, select bank0
  4204  041F  1303               	bcf	3,6	;RP1=0, select bank0
  4205  0420  00C3               	movwf	sprintf@sp
  4206                           
  4207                           ;doprnt.c: 494: va_list ap;
  4208                           ;doprnt.c: 499: signed char c;
  4209                           ;doprnt.c: 506: signed char prec;
  4210                           ;doprnt.c: 508: unsigned char flag;
  4211                           ;doprnt.c: 523: union {
  4212                           ;doprnt.c: 524: unsigned long vd;
  4213                           ;doprnt.c: 525: double integ;
  4214                           ;doprnt.c: 526: } tmpval;
  4215                           ;doprnt.c: 528: unsigned int val;
  4216                           ;doprnt.c: 529: unsigned len;
  4217                           ;doprnt.c: 530: const char * cp;
  4218                           ;doprnt.c: 533: *ap = __va_start();
  4219  0421  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  4220  0422  00BB               	movwf	??_sprintf
  4221  0423  083B               	movf	??_sprintf,w
  4222  0424  00BE               	movwf	sprintf@ap
  4223  0425                     l2587:	
  4224                           ;doprnt.c: 536: while(c = *f++) {
  4225                           
  4226  0425  3001               	movlw	1
  4227  0426  07AE               	addwf	sprintf@f,f
  4228  0427  30FF               	movlw	-1
  4229  0428  072E               	addwf	sprintf@f,w
  4230  0429  0084               	movwf	4
  4231  042A  120A  118A  263B  120A  118A  	fcall	stringdir
  4232  042F  00BB               	movwf	??_sprintf
  4233  0430  083B               	movf	??_sprintf,w
  4234  0431  00C4               	movwf	sprintf@c
  4235  0432  0844               	movf	sprintf@c,w
  4236  0433  1903               	btfsc	3,2
  4237  0434  2CEF               	goto	l2589
  4238                           
  4239                           ;doprnt.c: 538: if(c != '%')
  4240  0435  3025               	movlw	37
  4241  0436  0644               	xorwf	sprintf@c,w
  4242  0437  1903               	btfsc	3,2
  4243  0438  2C45               	goto	l2543
  4244                           
  4245                           ;doprnt.c: 540: {
  4246                           ;doprnt.c: 541: ((*sp++ = (c)));
  4247  0439  0844               	movf	sprintf@c,w
  4248  043A  00BB               	movwf	??_sprintf
  4249  043B  0843               	movf	sprintf@sp,w
  4250  043C  0084               	movwf	4
  4251  043D  083B               	movf	??_sprintf,w
  4252  043E  1383               	bcf	3,7	;select IRP bank0
  4253  043F  0080               	movwf	0
  4254  0440  3001               	movlw	1
  4255  0441  00BB               	movwf	??_sprintf
  4256  0442  083B               	movf	??_sprintf,w
  4257  0443  07C3               	addwf	sprintf@sp,f
  4258                           
  4259                           ;doprnt.c: 542: continue;
  4260  0444  2C25               	goto	l2587
  4261  0445                     l2543:	
  4262                           
  4263                           ;doprnt.c: 543: }
  4264                           ;doprnt.c: 548: flag = 0;
  4265  0445  01BF               	clrf	sprintf@flag
  4266                           
  4267                           ;doprnt.c: 822: }
  4268                           
  4269                           ;doprnt.c: 813: continue;
  4270                           
  4271                           ;doprnt.c: 802: default:
  4272                           
  4273                           ;doprnt.c: 698: case 'i':
  4274                           ;doprnt.c: 699: break;
  4275                           
  4276                           ;doprnt.c: 697: case 'd':
  4277                           
  4278                           ;doprnt.c: 638: goto alldone;
  4279                           
  4280                           ;doprnt.c: 637: case 0:
  4281                           
  4282                           ;doprnt.c: 635: switch(c = *f++) {
  4283  0446  3001               	movlw	1
  4284  0447  07AE               	addwf	sprintf@f,f
  4285  0448  30FF               	movlw	-1
  4286  0449  072E               	addwf	sprintf@f,w
  4287  044A  0084               	movwf	4
  4288  044B  120A  118A  263B  120A  118A  	fcall	stringdir
  4289  0450  00C4               	movwf	sprintf@c
  4290                           
  4291                           ; Switch size 1, requested type "space"
  4292                           ; Number of cases is 3, Range of values is 0 to 105
  4293                           ; switch strategies available:
  4294                           ; Name         Instructions Cycles
  4295                           ; simple_byte           10     6 (average)
  4296                           ; jumptable            260     6 (fixed)
  4297                           ;	Chosen strategy is simple_byte
  4298  0451  3A00               	xorlw	0	; case 0
  4299  0452  1903               	skipnz
  4300  0453  2CEF               	goto	l2589
  4301  0454  3A64               	xorlw	100	; case 100
  4302  0455  1903               	skipnz
  4303  0456  2C5B               	goto	l2549
  4304  0457  3A0D               	xorlw	13	; case 105
  4305  0458  1903               	skipnz
  4306  0459  2C5B               	goto	l2549
  4307  045A  2C25               	goto	l2587
  4308  045B                     l2549:	
  4309                           
  4310                           ;doprnt.c: 1253: {
  4311                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4312  045B  083E               	movf	sprintf@ap,w
  4313  045C  0084               	movwf	4
  4314  045D  1383               	bcf	3,7	;select IRP bank0
  4315  045E  0800               	movf	0,w
  4316  045F  00C1               	movwf	sprintf@val
  4317  0460  0A84               	incf	4,f
  4318  0461  0800               	movf	0,w
  4319  0462  00C2               	movwf	sprintf@val+1
  4320  0463  3002               	movlw	2
  4321  0464  00BB               	movwf	??_sprintf
  4322  0465  083B               	movf	??_sprintf,w
  4323  0466  07BE               	addwf	sprintf@ap,f
  4324                           
  4325                           ;doprnt.c: 1261: if((int)val < 0) {
  4326  0467  1FC2               	btfss	sprintf@val+1,7
  4327  0468  2C72               	goto	l2559
  4328                           
  4329                           ;doprnt.c: 1262: flag |= 0x03;
  4330  0469  3003               	movlw	3
  4331  046A  00BB               	movwf	??_sprintf
  4332  046B  083B               	movf	??_sprintf,w
  4333  046C  04BF               	iorwf	sprintf@flag,f
  4334                           
  4335                           ;doprnt.c: 1263: val = -val;
  4336  046D  09C1               	comf	sprintf@val,f
  4337  046E  09C2               	comf	sprintf@val+1,f
  4338  046F  0AC1               	incf	sprintf@val,f
  4339  0470  1903               	skipnz
  4340  0471  0AC2               	incf	sprintf@val+1,f
  4341  0472                     l2559:	
  4342                           
  4343                           ;doprnt.c: 1264: }
  4344                           ;doprnt.c: 1266: }
  4345                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4346  0472  01C4               	clrf	sprintf@c
  4347  0473  0AC4               	incf	sprintf@c,f
  4348  0474  3005               	movlw	5
  4349  0475  0644               	xorwf	sprintf@c,w
  4350  0476  1903               	btfsc	3,2
  4351  0477  2C99               	goto	l2571
  4352  0478                     l2565:	
  4353                           
  4354                           ;doprnt.c: 1306: if(val < dpowers[c])
  4355  0478  0844               	movf	sprintf@c,w
  4356  0479  00BB               	movwf	??_sprintf
  4357  047A  073B               	addwf	??_sprintf,w
  4358  047B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4359  047C  0084               	movwf	4
  4360  047D  120A  118A  263B  120A  118A  	fcall	stringdir
  4361  0482  00BC               	movwf	??_sprintf+1
  4362  0483  120A  118A  263B  120A  118A  	fcall	stringdir
  4363  0488  00BD               	movwf	??_sprintf+2
  4364  0489  083D               	movf	??_sprintf+2,w
  4365  048A  0242               	subwf	sprintf@val+1,w
  4366  048B  1D03               	skipz
  4367  048C  2C8F               	goto	u2375
  4368  048D  083C               	movf	??_sprintf+1,w
  4369  048E  0241               	subwf	sprintf@val,w
  4370  048F                     u2375:	
  4371  048F  1C03               	btfss	3,0
  4372  0490  2C99               	goto	l2571
  4373                           
  4374                           ;doprnt.c: 1307: break;
  4375  0491  3001               	movlw	1
  4376  0492  00BB               	movwf	??_sprintf
  4377  0493  083B               	movf	??_sprintf,w
  4378  0494  07C4               	addwf	sprintf@c,f
  4379  0495  3005               	movlw	5
  4380  0496  0644               	xorwf	sprintf@c,w
  4381  0497  1D03               	btfss	3,2
  4382  0498  2C78               	goto	l2565
  4383  0499                     l2571:	
  4384                           
  4385                           ;doprnt.c: 1422: {
  4386                           ;doprnt.c: 1438: if(flag & 0x03)
  4387  0499  083F               	movf	sprintf@flag,w
  4388  049A  3903               	andlw	3
  4389  049B  1903               	btfsc	3,2
  4390  049C  2CA8               	goto	l2577
  4391                           
  4392                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4393  049D  302D               	movlw	45
  4394  049E  00BB               	movwf	??_sprintf
  4395  049F  0843               	movf	sprintf@sp,w
  4396  04A0  0084               	movwf	4
  4397  04A1  083B               	movf	??_sprintf,w
  4398  04A2  1383               	bcf	3,7	;select IRP bank0
  4399  04A3  0080               	movwf	0
  4400  04A4  3001               	movlw	1
  4401  04A5  00BB               	movwf	??_sprintf
  4402  04A6  083B               	movf	??_sprintf,w
  4403  04A7  07C3               	addwf	sprintf@sp,f
  4404  04A8                     l2577:	
  4405                           
  4406                           ;doprnt.c: 1469: }
  4407                           ;doprnt.c: 1472: prec = c;
  4408  04A8  0844               	movf	sprintf@c,w
  4409  04A9  00BB               	movwf	??_sprintf
  4410  04AA  083B               	movf	??_sprintf,w
  4411  04AB  00C0               	movwf	sprintf@prec
  4412  04AC                     l2585:	
  4413                           ;doprnt.c: 1474: while(prec--) {
  4414                           
  4415  04AC  30FF               	movlw	255
  4416  04AD  00BB               	movwf	??_sprintf
  4417  04AE  083B               	movf	??_sprintf,w
  4418  04AF  07C0               	addwf	sprintf@prec,f
  4419  04B0  0A40               	incf	sprintf@prec,w
  4420  04B1  1903               	btfsc	3,2
  4421  04B2  2C25               	goto	l2587
  4422                           
  4423                           ;doprnt.c: 1478: {
  4424                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4425  04B3  300A               	movlw	10
  4426  04B4  00A8               	movwf	___lwmod@divisor
  4427  04B5  3000               	movlw	0
  4428  04B6  00A9               	movwf	___lwmod@divisor+1
  4429  04B7  0840               	movf	sprintf@prec,w
  4430  04B8  00BB               	movwf	??_sprintf
  4431  04B9  073B               	addwf	??_sprintf,w
  4432  04BA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4433  04BB  0084               	movwf	4
  4434  04BC  120A  118A  263B  120A  118A  	fcall	stringdir
  4435  04C1  00A0               	movwf	___lwdiv@divisor
  4436  04C2  120A  118A  263B  120A  118A  	fcall	stringdir
  4437  04C7  00A1               	movwf	___lwdiv@divisor+1
  4438  04C8  0842               	movf	sprintf@val+1,w
  4439  04C9  00A3               	movwf	___lwdiv@dividend+1
  4440  04CA  0841               	movf	sprintf@val,w
  4441  04CB  00A2               	movwf	___lwdiv@dividend
  4442  04CC  120A  158A  232E  120A  118A  	fcall	___lwdiv
  4443  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  4444  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  4445  04D3  0821               	movf	?___lwdiv+1,w
  4446  04D4  00AB               	movwf	___lwmod@dividend+1
  4447  04D5  0820               	movf	?___lwdiv,w
  4448  04D6  00AA               	movwf	___lwmod@dividend
  4449  04D7  120A  158A  2291  120A  118A  	fcall	___lwmod
  4450  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  4451  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  4452  04DE  0828               	movf	?___lwmod,w
  4453  04DF  3E30               	addlw	48
  4454  04E0  00BC               	movwf	??_sprintf+1
  4455  04E1  083C               	movf	??_sprintf+1,w
  4456  04E2  00C4               	movwf	sprintf@c
  4457                           
  4458                           ;doprnt.c: 1523: }
  4459                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4460  04E3  0844               	movf	sprintf@c,w
  4461  04E4  00BB               	movwf	??_sprintf
  4462  04E5  0843               	movf	sprintf@sp,w
  4463  04E6  0084               	movwf	4
  4464  04E7  083B               	movf	??_sprintf,w
  4465  04E8  1383               	bcf	3,7	;select IRP bank0
  4466  04E9  0080               	movwf	0
  4467  04EA  3001               	movlw	1
  4468  04EB  00BB               	movwf	??_sprintf
  4469  04EC  083B               	movf	??_sprintf,w
  4470  04ED  07C3               	addwf	sprintf@sp,f
  4471  04EE  2CAC               	goto	l2585
  4472  04EF                     l2589:	
  4473                           ;doprnt.c: 1525: }
  4474                           ;doprnt.c: 1533: }
  4475                           ;doprnt.c: 1535: alldone:
  4476                           
  4477                           
  4478                           ;doprnt.c: 1538: *sp = 0;
  4479  04EF  0843               	movf	sprintf@sp,w
  4480  04F0  0084               	movwf	4
  4481  04F1  1383               	bcf	3,7	;select IRP bank0
  4482  04F2  0180               	clrf	0
  4483  04F3  0008               	return
  4484  04F4                     __end_of_sprintf:	
  4485                           ;doprnt.c: 1540: return 0;
  4486                           ;	Return value of _sprintf is never used
  4487                           
  4488                           
  4489                           	psect	text15
  4490  0A91                     __ptext15:	
  4491 ;; *************** function ___lwmod *****************
  4492 ;; Defined at:
  4493 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;  divisor         2    8[BANK0 ] unsigned int 
  4496 ;;  dividend        2   10[BANK0 ] unsigned int 
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;  counter         1   13[BANK0 ] unsigned char 
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  2    8[BANK0 ] unsigned int 
  4501 ;; Registers used:
  4502 ;;		wreg, status,2, status,0
  4503 ;; Tracked objects:
  4504 ;;		On entry : 0/0
  4505 ;;		On exit  : 0/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4508 ;;      Params:         0       4       0       0       0
  4509 ;;      Locals:         0       1       0       0       0
  4510 ;;      Temps:          0       1       0       0       0
  4511 ;;      Totals:         0       6       0       0       0
  4512 ;;Total ram usage:        6 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:    3
  4515 ;; This function calls:
  4516 ;;		Nothing
  4517 ;; This function is called by:
  4518 ;;		_sprintf
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           
  4523                           ;psect for function ___lwmod
  4524  0A91                     ___lwmod:	
  4525                           
  4526                           ;incstack = 0
  4527                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4528  0A91  1283               	bcf	3,5	;RP0=0, select bank0
  4529  0A92  1303               	bcf	3,6	;RP1=0, select bank0
  4530  0A93  0828               	movf	___lwmod@divisor,w
  4531  0A94  0429               	iorwf	___lwmod@divisor+1,w
  4532  0A95  1903               	btfsc	3,2
  4533  0A96  2AC0               	goto	l2523
  4534  0A97  01AD               	clrf	___lwmod@counter
  4535  0A98  0AAD               	incf	___lwmod@counter,f
  4536  0A99                     l2513:	
  4537  0A99  1BA9               	btfsc	___lwmod@divisor+1,7
  4538  0A9A  2AA7               	goto	l2515
  4539  0A9B  3001               	movlw	1
  4540  0A9C                     u2285:	
  4541  0A9C  1003               	clrc
  4542  0A9D  0DA8               	rlf	___lwmod@divisor,f
  4543  0A9E  0DA9               	rlf	___lwmod@divisor+1,f
  4544  0A9F  3EFF               	addlw	-1
  4545  0AA0  1D03               	skipz
  4546  0AA1  2A9C               	goto	u2285
  4547  0AA2  3001               	movlw	1
  4548  0AA3  00AC               	movwf	??___lwmod
  4549  0AA4  082C               	movf	??___lwmod,w
  4550  0AA5  07AD               	addwf	___lwmod@counter,f
  4551  0AA6  2A99               	goto	l2513
  4552  0AA7                     l2515:	
  4553  0AA7  0829               	movf	___lwmod@divisor+1,w
  4554  0AA8  022B               	subwf	___lwmod@dividend+1,w
  4555  0AA9  1D03               	skipz
  4556  0AAA  2AAD               	goto	u2305
  4557  0AAB  0828               	movf	___lwmod@divisor,w
  4558  0AAC  022A               	subwf	___lwmod@dividend,w
  4559  0AAD                     u2305:	
  4560  0AAD  1C03               	skipc
  4561  0AAE  2AB5               	goto	l2519
  4562  0AAF  0828               	movf	___lwmod@divisor,w
  4563  0AB0  02AA               	subwf	___lwmod@dividend,f
  4564  0AB1  0829               	movf	___lwmod@divisor+1,w
  4565  0AB2  1C03               	skipc
  4566  0AB3  03AB               	decf	___lwmod@dividend+1,f
  4567  0AB4  02AB               	subwf	___lwmod@dividend+1,f
  4568  0AB5                     l2519:	
  4569  0AB5  3001               	movlw	1
  4570  0AB6                     u2315:	
  4571  0AB6  1003               	clrc
  4572  0AB7  0CA9               	rrf	___lwmod@divisor+1,f
  4573  0AB8  0CA8               	rrf	___lwmod@divisor,f
  4574  0AB9  3EFF               	addlw	-1
  4575  0ABA  1D03               	skipz
  4576  0ABB  2AB6               	goto	u2315
  4577  0ABC  3001               	movlw	1
  4578  0ABD  02AD               	subwf	___lwmod@counter,f
  4579  0ABE  1D03               	btfss	3,2
  4580  0ABF  2AA7               	goto	l2515
  4581  0AC0                     l2523:	
  4582  0AC0  082B               	movf	___lwmod@dividend+1,w
  4583  0AC1  00A9               	movwf	?___lwmod+1
  4584  0AC2  082A               	movf	___lwmod@dividend,w
  4585  0AC3  00A8               	movwf	?___lwmod
  4586  0AC4  0008               	return
  4587  0AC5                     __end_of___lwmod:	
  4588                           
  4589                           	psect	text16
  4590  0B2E                     __ptext16:	
  4591 ;; *************** function ___lwdiv *****************
  4592 ;; Defined at:
  4593 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;  divisor         2    0[BANK0 ] unsigned int 
  4596 ;;  dividend        2    2[BANK0 ] unsigned int 
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;  quotient        2    5[BANK0 ] unsigned int 
  4599 ;;  counter         1    7[BANK0 ] unsigned char 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  2    0[BANK0 ] unsigned int 
  4602 ;; Registers used:
  4603 ;;		wreg, status,2, status,0
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4609 ;;      Params:         0       4       0       0       0
  4610 ;;      Locals:         0       3       0       0       0
  4611 ;;      Temps:          0       1       0       0       0
  4612 ;;      Totals:         0       8       0       0       0
  4613 ;;Total ram usage:        8 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    3
  4616 ;; This function calls:
  4617 ;;		Nothing
  4618 ;; This function is called by:
  4619 ;;		_sprintf
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           
  4624                           ;psect for function ___lwdiv
  4625  0B2E                     ___lwdiv:	
  4626                           
  4627                           ;incstack = 0
  4628                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4629  0B2E  1283               	bcf	3,5	;RP0=0, select bank0
  4630  0B2F  1303               	bcf	3,6	;RP1=0, select bank0
  4631  0B30  01A5               	clrf	___lwdiv@quotient
  4632  0B31  01A6               	clrf	___lwdiv@quotient+1
  4633  0B32  0820               	movf	___lwdiv@divisor,w
  4634  0B33  0421               	iorwf	___lwdiv@divisor+1,w
  4635  0B34  1903               	btfsc	3,2
  4636  0B35  2B67               	goto	l2501
  4637  0B36  01A7               	clrf	___lwdiv@counter
  4638  0B37  0AA7               	incf	___lwdiv@counter,f
  4639  0B38                     l2489:	
  4640  0B38  1BA1               	btfsc	___lwdiv@divisor+1,7
  4641  0B39  2B46               	goto	l2491
  4642  0B3A  3001               	movlw	1
  4643  0B3B                     u2215:	
  4644  0B3B  1003               	clrc
  4645  0B3C  0DA0               	rlf	___lwdiv@divisor,f
  4646  0B3D  0DA1               	rlf	___lwdiv@divisor+1,f
  4647  0B3E  3EFF               	addlw	-1
  4648  0B3F  1D03               	skipz
  4649  0B40  2B3B               	goto	u2215
  4650  0B41  3001               	movlw	1
  4651  0B42  00A4               	movwf	??___lwdiv
  4652  0B43  0824               	movf	??___lwdiv,w
  4653  0B44  07A7               	addwf	___lwdiv@counter,f
  4654  0B45  2B38               	goto	l2489
  4655  0B46                     l2491:	
  4656  0B46  3001               	movlw	1
  4657  0B47                     u2235:	
  4658  0B47  1003               	clrc
  4659  0B48  0DA5               	rlf	___lwdiv@quotient,f
  4660  0B49  0DA6               	rlf	___lwdiv@quotient+1,f
  4661  0B4A  3EFF               	addlw	-1
  4662  0B4B  1D03               	skipz
  4663  0B4C  2B47               	goto	u2235
  4664  0B4D  0821               	movf	___lwdiv@divisor+1,w
  4665  0B4E  0223               	subwf	___lwdiv@dividend+1,w
  4666  0B4F  1D03               	skipz
  4667  0B50  2B53               	goto	u2245
  4668  0B51  0820               	movf	___lwdiv@divisor,w
  4669  0B52  0222               	subwf	___lwdiv@dividend,w
  4670  0B53                     u2245:	
  4671  0B53  1C03               	skipc
  4672  0B54  2B5C               	goto	l2497
  4673  0B55  0820               	movf	___lwdiv@divisor,w
  4674  0B56  02A2               	subwf	___lwdiv@dividend,f
  4675  0B57  0821               	movf	___lwdiv@divisor+1,w
  4676  0B58  1C03               	skipc
  4677  0B59  03A3               	decf	___lwdiv@dividend+1,f
  4678  0B5A  02A3               	subwf	___lwdiv@dividend+1,f
  4679  0B5B  1425               	bsf	___lwdiv@quotient,0
  4680  0B5C                     l2497:	
  4681  0B5C  3001               	movlw	1
  4682  0B5D                     u2255:	
  4683  0B5D  1003               	clrc
  4684  0B5E  0CA1               	rrf	___lwdiv@divisor+1,f
  4685  0B5F  0CA0               	rrf	___lwdiv@divisor,f
  4686  0B60  3EFF               	addlw	-1
  4687  0B61  1D03               	skipz
  4688  0B62  2B5D               	goto	u2255
  4689  0B63  3001               	movlw	1
  4690  0B64  02A7               	subwf	___lwdiv@counter,f
  4691  0B65  1D03               	btfss	3,2
  4692  0B66  2B46               	goto	l2491
  4693  0B67                     l2501:	
  4694  0B67  0826               	movf	___lwdiv@quotient+1,w
  4695  0B68  00A1               	movwf	?___lwdiv+1
  4696  0B69  0825               	movf	___lwdiv@quotient,w
  4697  0B6A  00A0               	movwf	?___lwdiv
  4698  0B6B  0008               	return
  4699  0B6C                     __end_of___lwdiv:	
  4700                           
  4701                           	psect	text17
  4702  0928                     __ptext17:	
  4703 ;; *************** function _create_HEART_BEAT_RQT_CMD *****************
  4704 ;; Defined at:
  4705 ;;		line 30 in file "heart_beat.h"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;  pconn           1    wreg     PTR struct .
  4708 ;;		 -> client_conn(40), 
  4709 ;;  prqt            1   32[BANK0 ] PTR const struct .
  4710 ;;		 -> main@rqt_750(1), 
  4711 ;;  pmsg            1   33[BANK0 ] PTR struct .
  4712 ;;		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(23), 
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;  pconn           1   38[BANK0 ] PTR struct .
  4715 ;;		 -> client_conn(40), 
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      void 
  4718 ;; Registers used:
  4719 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4725 ;;      Params:         0       2       0       0       0
  4726 ;;      Locals:         0       1       0       0       0
  4727 ;;      Temps:          0       4       0       0       0
  4728 ;;      Totals:         0       7       0       0       0
  4729 ;;Total ram usage:        7 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:    6
  4732 ;; This function calls:
  4733 ;;		_create_cmd
  4734 ;; This function is called by:
  4735 ;;		_send_HEART_BEAT_RQT_CMD_and_wait
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           
  4740                           ;psect for function _create_HEART_BEAT_RQT_CMD
  4741  0928                     _create_HEART_BEAT_RQT_CMD:	
  4742                           
  4743                           ;incstack = 0
  4744                           ; Regs used in _create_HEART_BEAT_RQT_CMD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4745                           ;create_HEART_BEAT_RQT_CMD@pconn stored from wreg
  4746  0928  1283               	bcf	3,5	;RP0=0, select bank0
  4747  0929  1303               	bcf	3,6	;RP1=0, select bank0
  4748  092A  00C6               	movwf	create_HEART_BEAT_RQT_CMD@pconn
  4749                           
  4750                           ;heart_beat.h: 32: create_cmd(pconn, HEART_BEAT_RQT, pconn->msgid++, prqt, 1, pmsg);
  4751  092B  3002               	movlw	2
  4752  092C  00C2               	movwf	??_create_HEART_BEAT_RQT_CMD
  4753  092D  0842               	movf	??_create_HEART_BEAT_RQT_CMD,w
  4754  092E  00B4               	movwf	create_cmd@cmd_id
  4755  092F  0846               	movf	create_HEART_BEAT_RQT_CMD@pconn,w
  4756  0930  3E02               	addlw	2
  4757  0931  0084               	movwf	4
  4758  0932  3001               	movlw	1
  4759  0933  1783               	bsf	3,7	;select IRP bank2
  4760  0934  0780               	addwf	0,f
  4761  0935  30FF               	movlw	-1
  4762  0936  0700               	addwf	0,w
  4763  0937  00C3               	movwf	??_create_HEART_BEAT_RQT_CMD+1
  4764  0938  0843               	movf	??_create_HEART_BEAT_RQT_CMD+1,w
  4765  0939  00B5               	movwf	create_cmd@msg_id
  4766  093A  0840               	movf	create_HEART_BEAT_RQT_CMD@prqt,w
  4767  093B  00C4               	movwf	??_create_HEART_BEAT_RQT_CMD+2
  4768  093C  0844               	movf	??_create_HEART_BEAT_RQT_CMD+2,w
  4769  093D  00B6               	movwf	create_cmd@cmd_data
  4770  093E  01B7               	clrf	create_cmd@cmd_data_len
  4771  093F  0AB7               	incf	create_cmd@cmd_data_len,f
  4772  0940  0841               	movf	create_HEART_BEAT_RQT_CMD@pmsg,w
  4773  0941  00C5               	movwf	??_create_HEART_BEAT_RQT_CMD+3
  4774  0942  0845               	movf	??_create_HEART_BEAT_RQT_CMD+3,w
  4775  0943  00B8               	movwf	create_cmd@pmsg
  4776  0944  0846               	movf	create_HEART_BEAT_RQT_CMD@pconn,w
  4777  0945  120A  158A  218F   	fcall	_create_cmd
  4778  0948  0008               	return
  4779  0949                     __end_of_create_HEART_BEAT_RQT_CMD:	
  4780                           
  4781                           	psect	text18
  4782  098F                     __ptext18:	
  4783 ;; *************** function _create_cmd *****************
  4784 ;; Defined at:
  4785 ;;		line 57 in file "cmd.h"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;  pconn           1    wreg     PTR struct .
  4788 ;;		 -> NULL(0), client_conn(40), 
  4789 ;;  cmd_id          1   20[BANK0 ] unsigned char 
  4790 ;;  msg_id          1   21[BANK0 ] unsigned char 
  4791 ;;  cmd_data        1   22[BANK0 ] PTR const void 
  4792 ;;		 -> main@rqt_750(1), create_REG_ID_RSP_CMD@rsp(1), 
  4793 ;;  cmd_data_len    1   23[BANK0 ] unsigned char 
  4794 ;;  pmsg            1   24[BANK0 ] PTR struct .
  4795 ;;		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(23), handle_REG_ID_RQT_CMD@msgo(23), 
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;  pconn           1   31[BANK0 ] PTR struct .
  4798 ;;		 -> NULL(0), client_conn(40), 
  4799 ;; Return value:  Size  Location     Type
  4800 ;;                  1    wreg      void 
  4801 ;; Registers used:
  4802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4803 ;; Tracked objects:
  4804 ;;		On entry : 0/0
  4805 ;;		On exit  : 0/0
  4806 ;;		Unchanged: 0/0
  4807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4808 ;;      Params:         0       5       0       0       0
  4809 ;;      Locals:         0       1       0       0       0
  4810 ;;      Temps:          0       6       0       0       0
  4811 ;;      Totals:         0      12       0       0       0
  4812 ;;Total ram usage:       12 bytes
  4813 ;; Hardware stack levels used:    1
  4814 ;; Hardware stack levels required when called:    5
  4815 ;; This function calls:
  4816 ;;		_compose
  4817 ;; This function is called by:
  4818 ;;		_create_HEART_BEAT_RQT_CMD
  4819 ;;		_create_REG_ID_RSP_CMD
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           
  4824                           ;psect for function _create_cmd
  4825  098F                     _create_cmd:	
  4826                           
  4827                           ;incstack = 0
  4828                           ; Regs used in _create_cmd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4829                           ;create_cmd@pconn stored from wreg
  4830  098F  1283               	bcf	3,5	;RP0=0, select bank0
  4831  0990  1303               	bcf	3,6	;RP1=0, select bank0
  4832  0991  00BF               	movwf	create_cmd@pconn
  4833                           
  4834                           ;cmd.h: 59: compose(pmsg,
  4835                           ;cmd.h: 60: pconn->from,
  4836                           ;cmd.h: 61: pconn->to,
  4837                           ;cmd.h: 62: msg_id,
  4838                           ;cmd.h: 63: cmd_id,
  4839                           ;cmd.h: 64: (uint8_t *)cmd_data,
  4840                           ;cmd.h: 65: cmd_data_len);
  4841  0992  083F               	movf	create_cmd@pconn,w
  4842  0993  0084               	movwf	4
  4843  0994  1783               	bsf	3,7	;select IRP bank2
  4844  0995  0800               	movf	0,w
  4845  0996  00B9               	movwf	??_create_cmd
  4846  0997  0839               	movf	??_create_cmd,w
  4847  0998  00A9               	movwf	compose@from
  4848  0999  0A3F               	incf	create_cmd@pconn,w
  4849  099A  0084               	movwf	4
  4850  099B  0800               	movf	0,w
  4851  099C  00BA               	movwf	??_create_cmd+1
  4852  099D  083A               	movf	??_create_cmd+1,w
  4853  099E  00AA               	movwf	compose@to
  4854  099F  0835               	movf	create_cmd@msg_id,w
  4855  09A0  00BB               	movwf	??_create_cmd+2
  4856  09A1  083B               	movf	??_create_cmd+2,w
  4857  09A2  00AB               	movwf	compose@msgid
  4858  09A3  0834               	movf	create_cmd@cmd_id,w
  4859  09A4  00BC               	movwf	??_create_cmd+3
  4860  09A5  083C               	movf	??_create_cmd+3,w
  4861  09A6  00AC               	movwf	compose@cmd
  4862  09A7  0836               	movf	create_cmd@cmd_data,w
  4863  09A8  00BD               	movwf	??_create_cmd+4
  4864  09A9  083D               	movf	??_create_cmd+4,w
  4865  09AA  00AD               	movwf	compose@data
  4866  09AB  0837               	movf	create_cmd@cmd_data_len,w
  4867  09AC  00BE               	movwf	??_create_cmd+5
  4868  09AD  083E               	movf	??_create_cmd+5,w
  4869  09AE  00AE               	movwf	compose@datalen
  4870  09AF  0838               	movf	create_cmd@pmsg,w
  4871  09B0  120A  158A  2452   	fcall	_compose
  4872  09B3  0008               	return
  4873  09B4                     __end_of_create_cmd:	
  4874                           
  4875                           	psect	text19
  4876  0C52                     __ptext19:	
  4877 ;; *************** function _compose *****************
  4878 ;; Defined at:
  4879 ;;		line 57 in file "msg.h"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;  pmsg            1    wreg     PTR struct .
  4882 ;;		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(23), handle_REG_ID_RQT_CMD@msgo(23), 
  4883 ;;  from            1    9[BANK0 ] unsigned char 
  4884 ;;  to              1   10[BANK0 ] unsigned char 
  4885 ;;  msgid           1   11[BANK0 ] unsigned char 
  4886 ;;  cmd             1   12[BANK0 ] unsigned char 
  4887 ;;  data            1   13[BANK0 ] PTR unsigned char 
  4888 ;;		 -> main@rqt_750(1), create_REG_ID_RSP_CMD@rsp(1), 
  4889 ;;  datalen         1   14[BANK0 ] unsigned char 
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;  pmsg            1   19[BANK0 ] PTR struct .
  4892 ;;		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(23), handle_REG_ID_RQT_CMD@msgo(23), 
  4893 ;;  len             2   17[BANK0 ] unsigned int 
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      void 
  4896 ;; Registers used:
  4897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4903 ;;      Params:         0       6       0       0       0
  4904 ;;      Locals:         0       3       0       0       0
  4905 ;;      Temps:          0       2       0       0       0
  4906 ;;      Totals:         0      11       0       0       0
  4907 ;;Total ram usage:       11 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    4
  4910 ;; This function calls:
  4911 ;;		_crc_calculate
  4912 ;;		_memcpy
  4913 ;; This function is called by:
  4914 ;;		_create_cmd
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           
  4919                           ;psect for function _compose
  4920  0C52                     _compose:	
  4921                           
  4922                           ;incstack = 0
  4923                           ; Regs used in _compose: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4924                           ;compose@pmsg stored from wreg
  4925  0C52  1283               	bcf	3,5	;RP0=0, select bank0
  4926  0C53  1303               	bcf	3,6	;RP1=0, select bank0
  4927  0C54  00B3               	movwf	compose@pmsg
  4928                           
  4929                           ;msg.h: 65: register size_t len = datalen;
  4930  0C55  082E               	movf	compose@datalen,w
  4931  0C56  00AF               	movwf	??_compose
  4932  0C57  01B0               	clrf	??_compose+1
  4933  0C58  082F               	movf	??_compose,w
  4934  0C59  00B1               	movwf	compose@len
  4935  0C5A  0830               	movf	??_compose+1,w
  4936  0C5B  00B2               	movwf	compose@len+1
  4937                           
  4938                           ;msg.h: 66: pmsg->from = from;
  4939  0C5C  0829               	movf	compose@from,w
  4940  0C5D  00AF               	movwf	??_compose
  4941  0C5E  0833               	movf	compose@pmsg,w
  4942  0C5F  3E03               	addlw	3
  4943  0C60  0084               	movwf	4
  4944  0C61  082F               	movf	??_compose,w
  4945  0C62  1383               	bcf	3,7	;select IRP bank0
  4946  0C63  0080               	movwf	0
  4947                           
  4948                           ;msg.h: 67: pmsg->to = to;
  4949  0C64  082A               	movf	compose@to,w
  4950  0C65  00AF               	movwf	??_compose
  4951  0C66  0833               	movf	compose@pmsg,w
  4952  0C67  3E04               	addlw	4
  4953  0C68  0084               	movwf	4
  4954  0C69  082F               	movf	??_compose,w
  4955  0C6A  0080               	movwf	0
  4956                           
  4957                           ;msg.h: 68: pmsg->msgid = msgid;
  4958  0C6B  082B               	movf	compose@msgid,w
  4959  0C6C  00AF               	movwf	??_compose
  4960  0C6D  0833               	movf	compose@pmsg,w
  4961  0C6E  3E05               	addlw	5
  4962  0C6F  0084               	movwf	4
  4963  0C70  082F               	movf	??_compose,w
  4964  0C71  0080               	movwf	0
  4965                           
  4966                           ;msg.h: 69: pmsg->cmd = cmd;
  4967  0C72  082C               	movf	compose@cmd,w
  4968  0C73  00AF               	movwf	??_compose
  4969  0C74  0833               	movf	compose@pmsg,w
  4970  0C75  3E06               	addlw	6
  4971  0C76  0084               	movwf	4
  4972  0C77  082F               	movf	??_compose,w
  4973  0C78  0080               	movwf	0
  4974                           
  4975                           ;msg.h: 70: memcpy((void *)pmsg->data, (void *)data, len);
  4976  0C79  082D               	movf	compose@data,w
  4977  0C7A  00A0               	movwf	memcpy@s1
  4978  0C7B  3000               	movlw	0
  4979  0C7C  00A1               	movwf	memcpy@s1+1
  4980  0C7D  0832               	movf	compose@len+1,w
  4981  0C7E  00A3               	movwf	memcpy@n+1
  4982  0C7F  0831               	movf	compose@len,w
  4983  0C80  00A2               	movwf	memcpy@n
  4984  0C81  0833               	movf	compose@pmsg,w
  4985  0C82  3E07               	addlw	7
  4986  0C83  120A  158A  21DA  120A  158A  	fcall	_memcpy
  4987                           
  4988                           ;msg.h: 71: pmsg->msglen = datalen + 7;
  4989  0C88  1283               	bcf	3,5	;RP0=0, select bank0
  4990  0C89  1303               	bcf	3,6	;RP1=0, select bank0
  4991  0C8A  082E               	movf	compose@datalen,w
  4992  0C8B  3E07               	addlw	7
  4993  0C8C  00AF               	movwf	??_compose
  4994  0C8D  0833               	movf	compose@pmsg,w
  4995  0C8E  0084               	movwf	4
  4996  0C8F  082F               	movf	??_compose,w
  4997  0C90  1383               	bcf	3,7	;select IRP bank0
  4998  0C91  0080               	movwf	0
  4999                           
  5000                           ;msg.h: 73: pmsg->crc = crc_calculate(pmsg);
  5001  0C92  0833               	movf	compose@pmsg,w
  5002  0C93  00A0               	movwf	crc_calculate@pmsg
  5003  0C94  3000               	movlw	0
  5004  0C95  00A1               	movwf	crc_calculate@pmsg+1
  5005  0C96  120A  118A  2595   	fcall	_crc_calculate
  5006  0C99  1283               	bcf	3,5	;RP0=0, select bank0
  5007  0C9A  1303               	bcf	3,6	;RP1=0, select bank0
  5008  0C9B  0A33               	incf	compose@pmsg,w
  5009  0C9C  0084               	movwf	4
  5010  0C9D  0820               	movf	?_crc_calculate,w
  5011  0C9E  1383               	bcf	3,7	;select IRP bank0
  5012  0C9F  0080               	movwf	0
  5013  0CA0  0A84               	incf	4,f
  5014  0CA1  0821               	movf	?_crc_calculate+1,w
  5015  0CA2  0080               	movwf	0
  5016  0CA3  0008               	return
  5017  0CA4                     __end_of_compose:	
  5018                           
  5019                           	psect	text20
  5020  09DA                     __ptext20:	
  5021 ;; *************** function _memcpy *****************
  5022 ;; Defined at:
  5023 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;  d1              1    wreg     PTR void 
  5026 ;;		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(23), handle_REG_ID_RQT_CMD@msgo(23), create_REG_ID_RSP_CMD@rqt(1), 
  5027 ;;  s1              2    0[BANK0 ] PTR const void 
  5028 ;;		 -> msg_rcv.data(16), main@rqt_750(1), create_REG_ID_RSP_CMD@rsp(1), msg_rcv(23), 
  5029 ;;  n               2    2[BANK0 ] unsigned int 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  d1              1    8[BANK0 ] PTR void 
  5032 ;;		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(23), handle_REG_ID_RQT_CMD@msgo(23), create_REG_ID_RSP_CMD@rqt(1), 
  5033 ;;  s               2    5[BANK0 ] PTR const unsigned char 
  5034 ;;		 -> msg_rcv.data(16), main@rqt_750(1), create_REG_ID_RSP_CMD@rsp(1), msg_rcv(23), 
  5035 ;;  d               1    7[BANK0 ] PTR unsigned char 
  5036 ;;		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(23), handle_REG_ID_RQT_CMD@msgo(23), create_REG_ID_RSP_CMD@rqt(1), 
  5037 ;; Return value:  Size  Location     Type
  5038 ;;                  1    wreg      PTR void 
  5039 ;; Registers used:
  5040 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5041 ;; Tracked objects:
  5042 ;;		On entry : 0/0
  5043 ;;		On exit  : 0/0
  5044 ;;		Unchanged: 0/0
  5045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5046 ;;      Params:         0       4       0       0       0
  5047 ;;      Locals:         0       4       0       0       0
  5048 ;;      Temps:          0       1       0       0       0
  5049 ;;      Totals:         0       9       0       0       0
  5050 ;;Total ram usage:        9 bytes
  5051 ;; Hardware stack levels used:    1
  5052 ;; Hardware stack levels required when called:    3
  5053 ;; This function calls:
  5054 ;;		Nothing
  5055 ;; This function is called by:
  5056 ;;		_compose
  5057 ;;		_extract_REG_ID_RQT_CMD
  5058 ;;		_extract_HEART_BEAT_RSP_CMD
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           
  5063                           ;psect for function _memcpy
  5064  09DA                     _memcpy:	
  5065                           
  5066                           ;incstack = 0
  5067                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  5068                           ;memcpy@d1 stored from wreg
  5069  09DA  1283               	bcf	3,5	;RP0=0, select bank0
  5070  09DB  1303               	bcf	3,6	;RP1=0, select bank0
  5071  09DC  00A8               	movwf	memcpy@d1
  5072  09DD  0820               	movf	memcpy@s1,w
  5073  09DE  00A5               	movwf	memcpy@s
  5074  09DF  0821               	movf	memcpy@s1+1,w
  5075  09E0  00A6               	movwf	memcpy@s+1
  5076  09E1  0828               	movf	memcpy@d1,w
  5077  09E2  00A4               	movwf	??_memcpy
  5078  09E3  0824               	movf	??_memcpy,w
  5079  09E4  00A7               	movwf	memcpy@d
  5080  09E5                     l2337:	
  5081  09E5  3001               	movlw	1
  5082  09E6  02A2               	subwf	memcpy@n,f
  5083  09E7  3000               	movlw	0
  5084  09E8  1C03               	skipc
  5085  09E9  03A3               	decf	memcpy@n+1,f
  5086  09EA  02A3               	subwf	memcpy@n+1,f
  5087  09EB  0A22               	incf	memcpy@n,w
  5088  09EC  1903               	btfsc	3,2
  5089  09ED  0A23               	incf	memcpy@n+1,w
  5090  09EE  1903               	btfsc	3,2
  5091  09EF  0008               	return
  5092  09F0  0825               	movf	memcpy@s,w
  5093  09F1  0084               	movwf	4
  5094  09F2  1783               	bsf	3,7
  5095  09F3  1C26               	btfss	memcpy@s+1,0
  5096  09F4  1383               	bcf	3,7
  5097  09F5  0800               	movf	0,w
  5098  09F6  00A4               	movwf	??_memcpy
  5099  09F7  0827               	movf	memcpy@d,w
  5100  09F8  0084               	movwf	4
  5101  09F9  0824               	movf	??_memcpy,w
  5102  09FA  1383               	bcf	3,7	;select IRP bank0
  5103  09FB  0080               	movwf	0
  5104  09FC  3001               	movlw	1
  5105  09FD  07A5               	addwf	memcpy@s,f
  5106  09FE  1803               	skipnc
  5107  09FF  0AA6               	incf	memcpy@s+1,f
  5108  0A00  3001               	movlw	1
  5109  0A01  00A4               	movwf	??_memcpy
  5110  0A02  0824               	movf	??_memcpy,w
  5111  0A03  07A7               	addwf	memcpy@d,f
  5112  0A04  29E5               	goto	l2337
  5113  0A05                     __end_of_memcpy:	
  5114                           ;	Return value of _memcpy is never used
  5115                           
  5116                           
  5117                           	psect	text21
  5118  0949                     __ptext21:	
  5119 ;; *************** function _crc_verify *****************
  5120 ;; Defined at:
  5121 ;;		line 53 in file "msg.h"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  pmsg            1    wreg     PTR struct .
  5124 ;;		 -> msg_rcv(23), 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  pmsg            1   11[BANK0 ] PTR struct .
  5127 ;;		 -> msg_rcv(23), 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      unsigned char 
  5130 ;; Registers used:
  5131 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5137 ;;      Params:         0       0       0       0       0
  5138 ;;      Locals:         0       1       0       0       0
  5139 ;;      Temps:          0       2       0       0       0
  5140 ;;      Totals:         0       3       0       0       0
  5141 ;;Total ram usage:        3 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    4
  5144 ;; This function calls:
  5145 ;;		_crc_calculate
  5146 ;; This function is called by:
  5147 ;;		_send_HEART_BEAT_RQT_CMD_and_wait
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           
  5152                           ;psect for function _crc_verify
  5153  0949                     _crc_verify:	
  5154                           
  5155                           ;incstack = 0
  5156                           ; Regs used in _crc_verify: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5157                           ;crc_verify@pmsg stored from wreg
  5158  0949  1283               	bcf	3,5	;RP0=0, select bank0
  5159  094A  1303               	bcf	3,6	;RP1=0, select bank0
  5160  094B  00AB               	movwf	crc_verify@pmsg
  5161                           
  5162                           ;msg.h: 55: return ((crc_calculate(pmsg) == pmsg->crc) ? 1 : 0);
  5163  094C  0A2B               	incf	crc_verify@pmsg,w
  5164  094D  0084               	movwf	4
  5165  094E  1783               	bsf	3,7	;select IRP bank2
  5166  094F  0800               	movf	0,w
  5167  0950  00A9               	movwf	??_crc_verify
  5168  0951  0A84               	incf	4,f
  5169  0952  0800               	movf	0,w
  5170  0953  00AA               	movwf	??_crc_verify+1
  5171  0954  082B               	movf	crc_verify@pmsg,w
  5172  0955  00A0               	movwf	crc_calculate@pmsg
  5173  0956  3001               	movlw	1
  5174  0957  00A1               	movwf	crc_calculate@pmsg+1
  5175  0958  120A  118A  2595  120A  158A  	fcall	_crc_calculate
  5176  095D  1283               	bcf	3,5	;RP0=0, select bank0
  5177  095E  1303               	bcf	3,6	;RP1=0, select bank0
  5178  095F  082A               	movf	??_crc_verify+1,w
  5179  0960  0621               	xorwf	?_crc_calculate+1,w
  5180  0961  1D03               	skipz
  5181  0962  2965               	goto	u2855
  5182  0963  0829               	movf	??_crc_verify,w
  5183  0964  0620               	xorwf	?_crc_calculate,w
  5184  0965                     u2855:	
  5185  0965  1D03               	btfss	3,2
  5186  0966  2969               	goto	u2850
  5187  0967  3001               	movlw	1
  5188  0968  0008               	return
  5189  0969                     u2850:	
  5190  0969  3000               	movlw	0
  5191  096A  0008               	return
  5192  096B                     __end_of_crc_verify:	
  5193                           
  5194                           	psect	text22
  5195  0595                     __ptext22:	
  5196 ;; *************** function _crc_calculate *****************
  5197 ;; Defined at:
  5198 ;;		line 37 in file "msg.h"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;  pmsg            2    0[BANK0 ] PTR struct .
  5201 ;;		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(23), handle_REG_ID_RQT_CMD@msgo(23), msg_rcv(23), 
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;  i               1    8[BANK0 ] unsigned char 
  5204 ;;  crc             2    6[BANK0 ] unsigned int 
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  2    0[BANK0 ] unsigned int 
  5207 ;; Registers used:
  5208 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5214 ;;      Params:         0       2       0       0       0
  5215 ;;      Locals:         0       3       0       0       0
  5216 ;;      Temps:          0       4       0       0       0
  5217 ;;      Totals:         0       9       0       0       0
  5218 ;;Total ram usage:        9 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    3
  5221 ;; This function calls:
  5222 ;;		Nothing
  5223 ;; This function is called by:
  5224 ;;		_crc_verify
  5225 ;;		_compose
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           
  5230                           ;psect for function _crc_calculate
  5231  0595                     _crc_calculate:	
  5232                           
  5233                           ;msg.h: 39: uint16_t crc;
  5234                           ;msg.h: 40: crc = (uint8_t)pmsg->msglen;
  5235                           
  5236                           ;incstack = 0
  5237                           ; Regs used in _crc_calculate: [wreg-fsr0h+status,2+status,0]
  5238  0595  1283               	bcf	3,5	;RP0=0, select bank0
  5239  0596  1303               	bcf	3,6	;RP1=0, select bank0
  5240  0597  0820               	movf	crc_calculate@pmsg,w
  5241  0598  0084               	movwf	4
  5242  0599  1783               	bsf	3,7
  5243  059A  1C21               	btfss	crc_calculate@pmsg+1,0
  5244  059B  1383               	bcf	3,7
  5245  059C  0800               	movf	0,w
  5246  059D  00A2               	movwf	??_crc_calculate
  5247  059E  01A3               	clrf	??_crc_calculate+1
  5248  059F  0822               	movf	??_crc_calculate,w
  5249  05A0  00A6               	movwf	crc_calculate@crc
  5250  05A1  0823               	movf	??_crc_calculate+1,w
  5251  05A2  00A7               	movwf	crc_calculate@crc+1
  5252                           
  5253                           ;msg.h: 41: crc += (uint8_t)pmsg->from;
  5254  05A3  3003               	movlw	3
  5255  05A4  0720               	addwf	crc_calculate@pmsg,w
  5256  05A5  00A2               	movwf	??_crc_calculate
  5257  05A6  0821               	movf	crc_calculate@pmsg+1,w
  5258  05A7  1803               	skipnc
  5259  05A8  3E01               	addlw	1
  5260  05A9  00A3               	movwf	??_crc_calculate+1
  5261  05AA  0822               	movf	??_crc_calculate,w
  5262  05AB  0084               	movwf	4
  5263  05AC  1783               	bsf	3,7
  5264  05AD  1C23               	btfss	??_crc_calculate+1,0
  5265  05AE  1383               	bcf	3,7
  5266  05AF  0800               	movf	0,w
  5267  05B0  00A4               	movwf	??_crc_calculate+2
  5268  05B1  01A5               	clrf	??_crc_calculate+3
  5269  05B2  0824               	movf	??_crc_calculate+2,w
  5270  05B3  07A6               	addwf	crc_calculate@crc,f
  5271  05B4  1803               	skipnc
  5272  05B5  0AA7               	incf	crc_calculate@crc+1,f
  5273  05B6  0825               	movf	??_crc_calculate+3,w
  5274  05B7  07A7               	addwf	crc_calculate@crc+1,f
  5275                           
  5276                           ;msg.h: 42: crc += (uint8_t)pmsg->to;
  5277  05B8  3004               	movlw	4
  5278  05B9  0720               	addwf	crc_calculate@pmsg,w
  5279  05BA  00A2               	movwf	??_crc_calculate
  5280  05BB  0821               	movf	crc_calculate@pmsg+1,w
  5281  05BC  1803               	skipnc
  5282  05BD  3E01               	addlw	1
  5283  05BE  00A3               	movwf	??_crc_calculate+1
  5284  05BF  0822               	movf	??_crc_calculate,w
  5285  05C0  0084               	movwf	4
  5286  05C1  1783               	bsf	3,7
  5287  05C2  1C23               	btfss	??_crc_calculate+1,0
  5288  05C3  1383               	bcf	3,7
  5289  05C4  0800               	movf	0,w
  5290  05C5  00A4               	movwf	??_crc_calculate+2
  5291  05C6  01A5               	clrf	??_crc_calculate+3
  5292  05C7  0824               	movf	??_crc_calculate+2,w
  5293  05C8  07A6               	addwf	crc_calculate@crc,f
  5294  05C9  1803               	skipnc
  5295  05CA  0AA7               	incf	crc_calculate@crc+1,f
  5296  05CB  0825               	movf	??_crc_calculate+3,w
  5297  05CC  07A7               	addwf	crc_calculate@crc+1,f
  5298                           
  5299                           ;msg.h: 43: crc += (uint8_t)pmsg->msgid;
  5300  05CD  3005               	movlw	5
  5301  05CE  0720               	addwf	crc_calculate@pmsg,w
  5302  05CF  00A2               	movwf	??_crc_calculate
  5303  05D0  0821               	movf	crc_calculate@pmsg+1,w
  5304  05D1  1803               	skipnc
  5305  05D2  3E01               	addlw	1
  5306  05D3  00A3               	movwf	??_crc_calculate+1
  5307  05D4  0822               	movf	??_crc_calculate,w
  5308  05D5  0084               	movwf	4
  5309  05D6  1783               	bsf	3,7
  5310  05D7  1C23               	btfss	??_crc_calculate+1,0
  5311  05D8  1383               	bcf	3,7
  5312  05D9  0800               	movf	0,w
  5313  05DA  00A4               	movwf	??_crc_calculate+2
  5314  05DB  01A5               	clrf	??_crc_calculate+3
  5315  05DC  0824               	movf	??_crc_calculate+2,w
  5316  05DD  07A6               	addwf	crc_calculate@crc,f
  5317  05DE  1803               	skipnc
  5318  05DF  0AA7               	incf	crc_calculate@crc+1,f
  5319  05E0  0825               	movf	??_crc_calculate+3,w
  5320  05E1  07A7               	addwf	crc_calculate@crc+1,f
  5321                           
  5322                           ;msg.h: 44: crc += (uint8_t)pmsg->cmd;
  5323  05E2  3006               	movlw	6
  5324  05E3  0720               	addwf	crc_calculate@pmsg,w
  5325  05E4  00A2               	movwf	??_crc_calculate
  5326  05E5  0821               	movf	crc_calculate@pmsg+1,w
  5327  05E6  1803               	skipnc
  5328  05E7  3E01               	addlw	1
  5329  05E8  00A3               	movwf	??_crc_calculate+1
  5330  05E9  0822               	movf	??_crc_calculate,w
  5331  05EA  0084               	movwf	4
  5332  05EB  1783               	bsf	3,7
  5333  05EC  1C23               	btfss	??_crc_calculate+1,0
  5334  05ED  1383               	bcf	3,7
  5335  05EE  0800               	movf	0,w
  5336  05EF  00A4               	movwf	??_crc_calculate+2
  5337  05F0  01A5               	clrf	??_crc_calculate+3
  5338  05F1  0824               	movf	??_crc_calculate+2,w
  5339  05F2  07A6               	addwf	crc_calculate@crc,f
  5340  05F3  1803               	skipnc
  5341  05F4  0AA7               	incf	crc_calculate@crc+1,f
  5342  05F5  0825               	movf	??_crc_calculate+3,w
  5343  05F6  07A7               	addwf	crc_calculate@crc+1,f
  5344                           
  5345                           ;msg.h: 46: for(uint8_t i = 0; i < pmsg->msglen - 7; i++)
  5346  05F7  01A8               	clrf	crc_calculate@i
  5347  05F8                     l2321:	
  5348  05F8  0820               	movf	crc_calculate@pmsg,w
  5349  05F9  0084               	movwf	4
  5350  05FA  1783               	bsf	3,7
  5351  05FB  1C21               	btfss	crc_calculate@pmsg+1,0
  5352  05FC  1383               	bcf	3,7
  5353  05FD  0800               	movf	0,w
  5354  05FE  3EF9               	addlw	249
  5355  05FF  00A2               	movwf	??_crc_calculate
  5356  0600  30FF               	movlw	255
  5357  0601  1803               	skipnc
  5358  0602  3000               	movlw	0
  5359  0603  00A3               	movwf	??_crc_calculate+1
  5360  0604  0823               	movf	??_crc_calculate+1,w
  5361  0605  3A80               	xorlw	128
  5362  0606  3C80               	sublw	128
  5363  0607  1D03               	skipz
  5364  0608  2E0B               	goto	u2065
  5365  0609  0822               	movf	??_crc_calculate,w
  5366  060A  0228               	subwf	crc_calculate@i,w
  5367  060B                     u2065:	
  5368  060B  1803               	btfsc	3,0
  5369  060C  2E2A               	goto	l2323
  5370                           
  5371                           ;msg.h: 47: {
  5372                           ;msg.h: 48: crc += (uint8_t)pmsg->data[i];
  5373  060D  1283               	bcf	3,5	;RP0=0, select bank0
  5374  060E  1303               	bcf	3,6	;RP1=0, select bank0
  5375  060F  0828               	movf	crc_calculate@i,w
  5376  0610  3E07               	addlw	7
  5377  0611  0720               	addwf	crc_calculate@pmsg,w
  5378  0612  00A2               	movwf	??_crc_calculate
  5379  0613  0821               	movf	crc_calculate@pmsg+1,w
  5380  0614  1803               	skipnc
  5381  0615  3E01               	addlw	1
  5382  0616  00A3               	movwf	??_crc_calculate+1
  5383  0617  0822               	movf	??_crc_calculate,w
  5384  0618  0084               	movwf	4
  5385  0619  1783               	bsf	3,7
  5386  061A  1C23               	btfss	??_crc_calculate+1,0
  5387  061B  1383               	bcf	3,7
  5388  061C  0800               	movf	0,w
  5389  061D  00A4               	movwf	??_crc_calculate+2
  5390  061E  01A5               	clrf	??_crc_calculate+3
  5391  061F  0824               	movf	??_crc_calculate+2,w
  5392  0620  07A6               	addwf	crc_calculate@crc,f
  5393  0621  1803               	skipnc
  5394  0622  0AA7               	incf	crc_calculate@crc+1,f
  5395  0623  0825               	movf	??_crc_calculate+3,w
  5396  0624  07A7               	addwf	crc_calculate@crc+1,f
  5397  0625  3001               	movlw	1
  5398  0626  00A2               	movwf	??_crc_calculate
  5399  0627  0822               	movf	??_crc_calculate,w
  5400  0628  07A8               	addwf	crc_calculate@i,f
  5401  0629  2DF8               	goto	l2321
  5402  062A                     l2323:	
  5403                           
  5404                           ;msg.h: 49: }
  5405                           ;msg.h: 51: return crc;
  5406  062A  1283               	bcf	3,5	;RP0=0, select bank0
  5407  062B  1303               	bcf	3,6	;RP1=0, select bank0
  5408  062C  0827               	movf	crc_calculate@crc+1,w
  5409  062D  00A1               	movwf	?_crc_calculate+1
  5410  062E  0826               	movf	crc_calculate@crc,w
  5411  062F  00A0               	movwf	?_crc_calculate
  5412  0630  0008               	return
  5413  0631                     __end_of_crc_calculate:	
  5414                           
  5415                           	psect	text23
  5416  08D3                     __ptext23:	
  5417 ;; *************** function _ValueInc *****************
  5418 ;; Defined at:
  5419 ;;		line 62 in file "menu.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;		None
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      void 
  5426 ;; Registers used:
  5427 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5433 ;;      Params:         0       0       0       0       0
  5434 ;;      Locals:         0       0       0       0       0
  5435 ;;      Temps:          0       2       0       0       0
  5436 ;;      Totals:         0       2       0       0       0
  5437 ;;Total ram usage:        2 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    5
  5440 ;; This function calls:
  5441 ;;		_SaveMenuItem
  5442 ;; This function is called by:
  5443 ;;		_main
  5444 ;; This function uses a non-reentrant model
  5445 ;;
  5446                           
  5447                           
  5448                           ;psect for function _ValueInc
  5449  08D3                     _ValueInc:	
  5450                           
  5451                           ;menu.c: 64: g_menu.items[g_menu.index].value++;
  5452                           
  5453                           ;incstack = 0
  5454                           ; Regs used in _ValueInc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5455  08D3  3001               	movlw	1
  5456  08D4  1283               	bcf	3,5	;RP0=0, select bank0
  5457  08D5  1303               	bcf	3,6	;RP1=0, select bank0
  5458  08D6  00A6               	movwf	??_ValueInc
  5459  08D7  1683               	bsf	3,5	;RP0=1, select bank1
  5460  08D8  1303               	bcf	3,6	;RP1=0, select bank1
  5461  08D9  0828               	movf	(_g_menu^(0+128)+8),w
  5462  08DA  1283               	bcf	3,5	;RP0=0, select bank0
  5463  08DB  1303               	bcf	3,6	;RP1=0, select bank0
  5464  08DC  00A7               	movwf	??_ValueInc+1
  5465  08DD  0727               	addwf	??_ValueInc+1,w
  5466  08DE  3EA0               	addlw	(low (_g_menu| 0))& (0+255)
  5467  08DF  0084               	movwf	4
  5468  08E0  0826               	movf	??_ValueInc,w
  5469  08E1  1383               	bcf	3,7	;select IRP bank1
  5470  08E2  0780               	addwf	0,f
  5471                           
  5472                           ;menu.c: 65: SaveMenuItem(g_menu.index);
  5473  08E3  1683               	bsf	3,5	;RP0=1, select bank1
  5474  08E4  1303               	bcf	3,6	;RP1=0, select bank1
  5475  08E5  0828               	movf	(_g_menu^(0+128)+8),w
  5476  08E6  120A  158A  2074   	fcall	_SaveMenuItem
  5477  08E9  0008               	return
  5478  08EA                     __end_of_ValueInc:	
  5479                           
  5480                           	psect	text24
  5481  08AC                     __ptext24:	
  5482 ;; *************** function _ValueDec *****************
  5483 ;; Defined at:
  5484 ;;		line 67 in file "menu.c"
  5485 ;; Parameters:    Size  Location     Type
  5486 ;;		None
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;		None
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  2   72[None  ] int 
  5491 ;; Registers used:
  5492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5498 ;;      Params:         0       0       0       0       0
  5499 ;;      Locals:         0       0       0       0       0
  5500 ;;      Temps:          0       1       0       0       0
  5501 ;;      Totals:         0       1       0       0       0
  5502 ;;Total ram usage:        1 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    5
  5505 ;; This function calls:
  5506 ;;		_SaveMenuItem
  5507 ;; This function is called by:
  5508 ;;		_main
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           
  5513                           ;psect for function _ValueDec
  5514  08AC                     _ValueDec:	
  5515                           
  5516                           ;menu.c: 69: g_menu.items[g_menu.index].value--;
  5517                           
  5518                           ;incstack = 0
  5519                           ; Regs used in _ValueDec: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5520  08AC  1683               	bsf	3,5	;RP0=1, select bank1
  5521  08AD  1303               	bcf	3,6	;RP1=0, select bank1
  5522  08AE  0828               	movf	(_g_menu^(0+128)+8),w
  5523  08AF  1283               	bcf	3,5	;RP0=0, select bank0
  5524  08B0  1303               	bcf	3,6	;RP1=0, select bank0
  5525  08B1  00A6               	movwf	??_ValueDec
  5526  08B2  0726               	addwf	??_ValueDec,w
  5527  08B3  3EA0               	addlw	(low (_g_menu| 0))& (0+255)
  5528  08B4  0084               	movwf	4
  5529  08B5  3001               	movlw	1
  5530  08B6  1383               	bcf	3,7	;select IRP bank1
  5531  08B7  0280               	subwf	0,f
  5532                           
  5533                           ;menu.c: 70: SaveMenuItem(g_menu.index);
  5534  08B8  1683               	bsf	3,5	;RP0=1, select bank1
  5535  08B9  1303               	bcf	3,6	;RP1=0, select bank1
  5536  08BA  0828               	movf	(_g_menu^(0+128)+8),w
  5537  08BB  120A  158A  2074   	fcall	_SaveMenuItem
  5538  08BE  0008               	return
  5539  08BF                     __end_of_ValueDec:	
  5540                           
  5541                           	psect	text25
  5542  0874                     __ptext25:	
  5543 ;; *************** function _SaveMenuItem *****************
  5544 ;; Defined at:
  5545 ;;		line 32 in file "menu.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;  item            1    wreg     unsigned char 
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;  item            1    5[BANK0 ] unsigned char 
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  1    wreg      void 
  5552 ;; Registers used:
  5553 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5559 ;;      Params:         0       0       0       0       0
  5560 ;;      Locals:         0       1       0       0       0
  5561 ;;      Temps:          0       2       0       0       0
  5562 ;;      Totals:         0       3       0       0       0
  5563 ;;Total ram usage:        3 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    4
  5566 ;; This function calls:
  5567 ;;		_eeprom_write
  5568 ;; This function is called by:
  5569 ;;		_ValueInc
  5570 ;;		_ValueDec
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           
  5575                           ;psect for function _SaveMenuItem
  5576  0874                     _SaveMenuItem:	
  5577                           
  5578                           ;incstack = 0
  5579                           ; Regs used in _SaveMenuItem: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5580                           ;SaveMenuItem@item stored from wreg
  5581  0874  1283               	bcf	3,5	;RP0=0, select bank0
  5582  0875  1303               	bcf	3,6	;RP1=0, select bank0
  5583  0876  00A5               	movwf	SaveMenuItem@item
  5584                           
  5585                           ;menu.c: 34: eeprom_write(item, g_menu.items[item].value);
  5586  0877  0825               	movf	SaveMenuItem@item,w
  5587  0878  00A3               	movwf	??_SaveMenuItem
  5588  0879  0723               	addwf	??_SaveMenuItem,w
  5589  087A  3EA0               	addlw	(low (_g_menu| 0))& (0+255)
  5590  087B  0084               	movwf	4
  5591  087C  1383               	bcf	3,7	;select IRP bank1
  5592  087D  0800               	movf	0,w
  5593  087E  00A4               	movwf	??_SaveMenuItem+1
  5594  087F  0824               	movf	??_SaveMenuItem+1,w
  5595  0880  00A0               	movwf	eeprom_write@value
  5596  0881  0825               	movf	SaveMenuItem@item,w
  5597  0882  120A  158A  2230   	fcall	_eeprom_write
  5598  0885  0008               	return
  5599  0886                     __end_of_SaveMenuItem:	
  5600                           
  5601                           	psect	text26
  5602  0A30                     __ptext26:	
  5603 ;; *************** function _eeprom_write *****************
  5604 ;; Defined at:
  5605 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eewrite.c"
  5606 ;; Parameters:    Size  Location     Type
  5607 ;;  addr            1    wreg     unsigned char 
  5608 ;;  value           1    0[BANK0 ] unsigned char 
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;  addr            1    2[BANK0 ] unsigned char 
  5611 ;; Return value:  Size  Location     Type
  5612 ;;                  1    wreg      void 
  5613 ;; Registers used:
  5614 ;;		wreg, status,2, status,0
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5620 ;;      Params:         0       1       0       0       0
  5621 ;;      Locals:         0       1       0       0       0
  5622 ;;      Temps:          0       1       0       0       0
  5623 ;;      Totals:         0       3       0       0       0
  5624 ;;Total ram usage:        3 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    3
  5627 ;; This function calls:
  5628 ;;		Nothing
  5629 ;; This function is called by:
  5630 ;;		_SaveMenuItem
  5631 ;; This function uses a non-reentrant model
  5632 ;;
  5633                           
  5634                           
  5635                           ;psect for function _eeprom_write
  5636  0A30                     _eeprom_write:	
  5637                           
  5638                           ;incstack = 0
  5639                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  5640                           ;eeprom_write@addr stored from wreg
  5641  0A30  1283               	bcf	3,5	;RP0=0, select bank0
  5642  0A31  1303               	bcf	3,6	;RP1=0, select bank0
  5643  0A32  00A2               	movwf	eeprom_write@addr
  5644  0A33                     l547:	
  5645  0A33  1683               	bsf	3,5	;RP0=1, select bank3
  5646  0A34  1703               	bsf	3,6	;RP1=1, select bank3
  5647  0A35  188C               	btfsc	12,1	;volsfr
  5648  0A36  2A33               	goto	l547
  5649  0A37  1283               	bcf	3,5	;RP0=0, select bank0
  5650  0A38  1303               	bcf	3,6	;RP1=0, select bank0
  5651  0A39  0822               	movf	eeprom_write@addr,w
  5652  0A3A  1283               	bcf	3,5	;RP0=0, select bank2
  5653  0A3B  1703               	bsf	3,6	;RP1=1, select bank2
  5654  0A3C  008D               	movwf	13	;volatile
  5655  0A3D  1283               	bcf	3,5	;RP0=0, select bank0
  5656  0A3E  1303               	bcf	3,6	;RP1=0, select bank0
  5657  0A3F  0820               	movf	eeprom_write@value,w
  5658  0A40  1283               	bcf	3,5	;RP0=0, select bank2
  5659  0A41  1703               	bsf	3,6	;RP1=1, select bank2
  5660  0A42  008C               	movwf	12	;volatile
  5661  0A43  303F               	movlw	63
  5662  0A44  1283               	bcf	3,5	;RP0=0, select bank0
  5663  0A45  1303               	bcf	3,6	;RP1=0, select bank0
  5664  0A46  00A1               	movwf	??_eeprom_write
  5665  0A47  0821               	movf	??_eeprom_write,w
  5666  0A48  1683               	bsf	3,5	;RP0=1, select bank3
  5667  0A49  1703               	bsf	3,6	;RP1=1, select bank3
  5668  0A4A  058C               	andwf	12,f	;volsfr
  5669  0A4B  1283               	bcf	3,5	;RP0=0, select bank0
  5670  0A4C  1303               	bcf	3,6	;RP1=0, select bank0
  5671  0A4D  1003               	bcf	3,0	;volatile
  5672  0A4E  1B8B               	btfsc	11,7	;volatile
  5673  0A4F  1403               	bsf	3,0	;volatile
  5674  0A50  138B               	bcf	11,7	;volatile
  5675  0A51  1683               	bsf	3,5	;RP0=1, select bank3
  5676  0A52  1703               	bsf	3,6	;RP1=1, select bank3
  5677  0A53  150C               	bsf	12,2	;volsfr
  5678  0A54  3055               	movlw	85
  5679  0A55  008D               	movwf	13	;volsfr
  5680  0A56  30AA               	movlw	170
  5681  0A57  008D               	movwf	13	;volsfr
  5682  0A58  148C               	bsf	12,1	;volsfr
  5683  0A59  110C               	bcf	12,2	;volsfr
  5684  0A5A  1283               	bcf	3,5	;RP0=0, select bank0
  5685  0A5B  1303               	bcf	3,6	;RP1=0, select bank0
  5686  0A5C  1C03               	btfss	3,0	;volatile
  5687  0A5D  0008               	return
  5688  0A5E  178B               	bsf	11,7	;volatile
  5689  0A5F  0008               	return
  5690  0A60                     __end_of_eeprom_write:	
  5691                           
  5692                           	psect	text27
  5693  0E04                     __ptext27:	
  5694 ;; *************** function _ShowMenu *****************
  5695 ;; Defined at:
  5696 ;;		line 23 in file "menu.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;		None
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;  i               1   31[BANK0 ] char 
  5701 ;;  count           1   30[BANK0 ] char 
  5702 ;; Return value:  Size  Location     Type
  5703 ;;                  1    wreg      void 
  5704 ;; Registers used:
  5705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5711 ;;      Params:         0       0       0       0       0
  5712 ;;      Locals:         0       2       0       0       0
  5713 ;;      Temps:          0       4       0       0       0
  5714 ;;      Totals:         0       6       0       0       0
  5715 ;;Total ram usage:        6 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    6
  5718 ;; This function calls:
  5719 ;;		_LCDByte
  5720 ;;		_LCDGotoXY
  5721 ;;		_LCDWriteInt
  5722 ;;		_LCDWriteString
  5723 ;; This function is called by:
  5724 ;;		_main
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           
  5729                           ;psect for function _ShowMenu
  5730  0E04                     _ShowMenu:	
  5731                           
  5732                           ;menu.c: 25: { LCDGotoXY(0,0); int8_t count = LCDWriteString(g_menu.items[g_menu.index].
      +                          name); for(int8_t i = count + 0; i < 16; i++) { (LCDByte(' ',1)); } };
  5733                           
  5734                           ;incstack = 0
  5735                           ; Regs used in _ShowMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5736  0E04  1283               	bcf	3,5	;RP0=0, select bank0
  5737  0E05  1303               	bcf	3,6	;RP1=0, select bank0
  5738  0E06  01AC               	clrf	LCDGotoXY@y
  5739  0E07  3000               	movlw	0
  5740  0E08  120A  158A  21B4  120A  158A  	fcall	_LCDGotoXY
  5741  0E0D  1403               	setc
  5742  0E0E  1683               	bsf	3,5	;RP0=1, select bank1
  5743  0E0F  1303               	bcf	3,6	;RP1=0, select bank1
  5744  0E10  0D28               	rlf	(_g_menu^(0+128)+8),w
  5745  0E11  3EA0               	addlw	(low (_g_menu| 0))& (0+255)
  5746  0E12  0084               	movwf	4
  5747  0E13  1383               	bcf	3,7	;select IRP bank1
  5748  0E14  0800               	movf	0,w
  5749  0E15  1283               	bcf	3,5	;RP0=0, select bank0
  5750  0E16  1303               	bcf	3,6	;RP1=0, select bank0
  5751  0E17  00AC               	movwf	LCDWriteString@msg
  5752  0E18  3000               	movlw	0
  5753  0E19  1D03               	btfss	3,2
  5754  0E1A  3080               	movlw	128
  5755  0E1B  00AD               	movwf	LCDWriteString@msg+1
  5756  0E1C  120A  158A  2662  120A  158A  	fcall	_LCDWriteString
  5757  0E21  1283               	bcf	3,5	;RP0=0, select bank0
  5758  0E22  1303               	bcf	3,6	;RP1=0, select bank0
  5759  0E23  00BA               	movwf	??_ShowMenu
  5760  0E24  083A               	movf	??_ShowMenu,w
  5761  0E25  00BE               	movwf	ShowMenu@count
  5762  0E26  083E               	movf	ShowMenu@count,w
  5763  0E27  00BA               	movwf	??_ShowMenu
  5764  0E28  083A               	movf	??_ShowMenu,w
  5765  0E29  00BF               	movwf	ShowMenu@i
  5766  0E2A  083F               	movf	ShowMenu@i,w
  5767  0E2B  3A80               	xorlw	128
  5768  0E2C  3E70               	addlw	-144
  5769  0E2D  1803               	btfsc	3,0
  5770  0E2E  2E42               	goto	l3131
  5771  0E2F                     l3125:	
  5772  0E2F  01A5               	clrf	LCDByte@isdata
  5773  0E30  0AA5               	incf	LCDByte@isdata,f
  5774  0E31  3020               	movlw	32
  5775  0E32  120A  118A  27A8  120A  158A  	fcall	_LCDByte
  5776  0E37  3001               	movlw	1
  5777  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  5778  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  5779  0E3A  00BA               	movwf	??_ShowMenu
  5780  0E3B  083A               	movf	??_ShowMenu,w
  5781  0E3C  07BF               	addwf	ShowMenu@i,f
  5782  0E3D  083F               	movf	ShowMenu@i,w
  5783  0E3E  3A80               	xorlw	128
  5784  0E3F  3E70               	addlw	-144
  5785  0E40  1C03               	skipc
  5786  0E41  2E2F               	goto	l3125
  5787  0E42                     l3131:	
  5788                           
  5789                           ;menu.c: 26: { LCDGotoXY(4,0); LCDWriteInt(g_menu.items[g_menu.index].value,3);};
  5790  0E42  01AC               	clrf	LCDGotoXY@y
  5791  0E43  3004               	movlw	4
  5792  0E44  120A  158A  21B4  120A  158A  	fcall	_LCDGotoXY
  5793  0E49  1683               	bsf	3,5	;RP0=1, select bank1
  5794  0E4A  1303               	bcf	3,6	;RP1=0, select bank1
  5795  0E4B  0828               	movf	(_g_menu^(0+128)+8),w
  5796  0E4C  1283               	bcf	3,5	;RP0=0, select bank0
  5797  0E4D  1303               	bcf	3,6	;RP1=0, select bank0
  5798  0E4E  00BA               	movwf	??_ShowMenu
  5799  0E4F  073A               	addwf	??_ShowMenu,w
  5800  0E50  3EA0               	addlw	(low (_g_menu| 0))& (0+255)
  5801  0E51  0084               	movwf	4
  5802  0E52  1383               	bcf	3,7	;select IRP bank1
  5803  0E53  0800               	movf	0,w
  5804  0E54  00BB               	movwf	??_ShowMenu+1
  5805  0E55  01BC               	clrf	??_ShowMenu+2
  5806  0E56  083B               	movf	??_ShowMenu+1,w
  5807  0E57  00AC               	movwf	LCDWriteInt@val
  5808  0E58  083C               	movf	??_ShowMenu+2,w
  5809  0E59  00AD               	movwf	LCDWriteInt@val+1
  5810  0E5A  3003               	movlw	3
  5811  0E5B  00BD               	movwf	??_ShowMenu+3
  5812  0E5C  083D               	movf	??_ShowMenu+3,w
  5813  0E5D  00AE               	movwf	LCDWriteInt@field_length
  5814  0E5E  120A  118A  24F4   	fcall	_LCDWriteInt
  5815  0E61  0008               	return
  5816  0E62                     __end_of_ShowMenu:	
  5817                           
  5818                           	psect	text28
  5819  04F4                     __ptext28:	
  5820 ;; *************** function _LCDWriteInt *****************
  5821 ;; Defined at:
  5822 ;;		line 328 in file "lcd_hd44780_pic16.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  val             2   12[BANK0 ] int 
  5825 ;;  field_length    1   14[BANK0 ] char 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  str             5   17[BANK0 ] unsigned char [5]
  5828 ;;  i               2   24[BANK0 ] int 
  5829 ;;  j               2   22[BANK0 ] int 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  1    wreg      char 
  5832 ;; Registers used:
  5833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5839 ;;      Params:         0       3       0       0       0
  5840 ;;      Locals:         0       9       0       0       0
  5841 ;;      Temps:          0       2       0       0       0
  5842 ;;      Totals:         0      14       0       0       0
  5843 ;;Total ram usage:       14 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    5
  5846 ;; This function calls:
  5847 ;;		_LCDByte
  5848 ;;		___awdiv
  5849 ;;		___awmod
  5850 ;; This function is called by:
  5851 ;;		_ShowMenu
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           
  5856                           ;psect for function _LCDWriteInt
  5857  04F4                     _LCDWriteInt:	
  5858                           
  5859                           ;lcd_hd44780_pic16.c: 330: char str[5]={-16,-16,-16,-16,-16};
  5860                           
  5861                           ;incstack = 0
  5862                           ; Regs used in _LCDWriteInt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5863  04F4  3031               	movlw	LCDWriteInt@str& (0+255)
  5864  04F5  0084               	movwf	4
  5865  04F6  1683               	bsf	3,5	;RP0=1, select bank1
  5866  04F7  1303               	bcf	3,6	;RP1=0, select bank1
  5867  04F8  0869               	movf	LCDWriteInt@F1650^(0+128),w
  5868  04F9  1383               	bcf	3,7	;select IRP bank0
  5869  04FA  0080               	movwf	0
  5870  04FB  0A84               	incf	4,f
  5871  04FC  086A               	movf	(LCDWriteInt@F1650^(0+128)+1),w
  5872  04FD  0080               	movwf	0
  5873  04FE  0A84               	incf	4,f
  5874  04FF  086B               	movf	(LCDWriteInt@F1650^(0+128)+2),w
  5875  0500  0080               	movwf	0
  5876  0501  0A84               	incf	4,f
  5877  0502  086C               	movf	(LCDWriteInt@F1650^(0+128)+3),w
  5878  0503  0080               	movwf	0
  5879  0504  0A84               	incf	4,f
  5880  0505  086D               	movf	(LCDWriteInt@F1650^(0+128)+4),w
  5881  0506  0080               	movwf	0
  5882                           
  5883                           ;lcd_hd44780_pic16.c: 331: int i=4,j=0;
  5884  0507  3004               	movlw	4
  5885  0508  1283               	bcf	3,5	;RP0=0, select bank0
  5886  0509  1303               	bcf	3,6	;RP1=0, select bank0
  5887  050A  00B8               	movwf	LCDWriteInt@i
  5888  050B  3000               	movlw	0
  5889  050C  00B9               	movwf	LCDWriteInt@i+1
  5890  050D  01B6               	clrf	LCDWriteInt@j
  5891  050E  01B7               	clrf	LCDWriteInt@j+1
  5892                           
  5893                           ;lcd_hd44780_pic16.c: 333: if(val == 0)
  5894  050F  082C               	movf	LCDWriteInt@val,w
  5895  0510  042D               	iorwf	LCDWriteInt@val+1,w
  5896  0511  1903               	btfsc	3,2
  5897                           
  5898                           ;lcd_hd44780_pic16.c: 334: {
  5899                           ;lcd_hd44780_pic16.c: 335: str[4] = 0;
  5900  0512  01B5               	clrf	LCDWriteInt@str+4
  5901                           
  5902                           ;lcd_hd44780_pic16.c: 336: }
  5903                           ;lcd_hd44780_pic16.c: 338: if(val<0)
  5904  0513  1FAD               	btfss	LCDWriteInt@val+1,7
  5905  0514  2D24               	goto	l2905
  5906                           
  5907                           ;lcd_hd44780_pic16.c: 339: {
  5908                           ;lcd_hd44780_pic16.c: 340: (LCDByte('-',1));
  5909  0515  01A5               	clrf	LCDByte@isdata
  5910  0516  0AA5               	incf	LCDByte@isdata,f
  5911  0517  302D               	movlw	45
  5912  0518  120A  118A  27A8  120A  118A  	fcall	_LCDByte
  5913                           
  5914                           ;lcd_hd44780_pic16.c: 341: val=val*-1;
  5915  051D  1283               	bcf	3,5	;RP0=0, select bank0
  5916  051E  1303               	bcf	3,6	;RP1=0, select bank0
  5917  051F  09AC               	comf	LCDWriteInt@val,f
  5918  0520  09AD               	comf	LCDWriteInt@val+1,f
  5919  0521  0AAC               	incf	LCDWriteInt@val,f
  5920  0522  1903               	skipnz
  5921  0523  0AAD               	incf	LCDWriteInt@val+1,f
  5922  0524                     l2905:	
  5923                           ;lcd_hd44780_pic16.c: 342: }
  5924                           ;lcd_hd44780_pic16.c: 344: while(val)
  5925                           
  5926  0524  082C               	movf	LCDWriteInt@val,w
  5927  0525  042D               	iorwf	LCDWriteInt@val+1,w
  5928  0526  1903               	btfsc	3,2
  5929  0527  2D59               	goto	l2907
  5930                           
  5931                           ;lcd_hd44780_pic16.c: 345: {
  5932                           ;lcd_hd44780_pic16.c: 346: str[i]=val%10;
  5933  0528  300A               	movlw	10
  5934  0529  00A0               	movwf	___awmod@divisor
  5935  052A  3000               	movlw	0
  5936  052B  00A1               	movwf	___awmod@divisor+1
  5937  052C  082D               	movf	LCDWriteInt@val+1,w
  5938  052D  00A3               	movwf	___awmod@dividend+1
  5939  052E  082C               	movf	LCDWriteInt@val,w
  5940  052F  00A2               	movwf	___awmod@dividend
  5941  0530  120A  158A  2405  120A  118A  	fcall	___awmod
  5942  0535  1283               	bcf	3,5	;RP0=0, select bank0
  5943  0536  1303               	bcf	3,6	;RP1=0, select bank0
  5944  0537  0820               	movf	?___awmod,w
  5945  0538  00AF               	movwf	??_LCDWriteInt
  5946  0539  0838               	movf	LCDWriteInt@i,w
  5947  053A  3E31               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  5948  053B  0084               	movwf	4
  5949  053C  082F               	movf	??_LCDWriteInt,w
  5950  053D  1383               	bcf	3,7	;select IRP bank0
  5951  053E  0080               	movwf	0
  5952                           
  5953                           ;lcd_hd44780_pic16.c: 347: val=val/10;
  5954  053F  300A               	movlw	10
  5955  0540  00A0               	movwf	___awdiv@divisor
  5956  0541  3000               	movlw	0
  5957  0542  00A1               	movwf	___awdiv@divisor+1
  5958  0543  082D               	movf	LCDWriteInt@val+1,w
  5959  0544  00A3               	movwf	___awdiv@dividend+1
  5960  0545  082C               	movf	LCDWriteInt@val,w
  5961  0546  00A2               	movwf	___awdiv@dividend
  5962  0547  120A  158A  254D  120A  118A  	fcall	___awdiv
  5963  054C  1283               	bcf	3,5	;RP0=0, select bank0
  5964  054D  1303               	bcf	3,6	;RP1=0, select bank0
  5965  054E  0821               	movf	?___awdiv+1,w
  5966  054F  00AD               	movwf	LCDWriteInt@val+1
  5967  0550  0820               	movf	?___awdiv,w
  5968  0551  00AC               	movwf	LCDWriteInt@val
  5969                           
  5970                           ;lcd_hd44780_pic16.c: 348: i--;
  5971  0552  30FF               	movlw	255
  5972  0553  07B8               	addwf	LCDWriteInt@i,f
  5973  0554  1803               	skipnc
  5974  0555  0AB9               	incf	LCDWriteInt@i+1,f
  5975  0556  30FF               	movlw	255
  5976  0557  07B9               	addwf	LCDWriteInt@i+1,f
  5977  0558  2D24               	goto	l2905
  5978  0559                     l2907:	
  5979                           
  5980                           ;lcd_hd44780_pic16.c: 349: }
  5981                           ;lcd_hd44780_pic16.c: 350: if(field_length==-1)
  5982  0559  0A2E               	incf	LCDWriteInt@field_length,w
  5983  055A  1903               	btfsc	3,2
  5984  055B  2D6E               	goto	l2915
  5985                           
  5986                           ;lcd_hd44780_pic16.c: 352: else
  5987                           ;lcd_hd44780_pic16.c: 353: j=5-field_length;
  5988                           
  5989                           ;lcd_hd44780_pic16.c: 351: while(str[j]==-16) j++;
  5990  055C  082E               	movf	LCDWriteInt@field_length,w
  5991  055D  00AF               	movwf	??_LCDWriteInt
  5992  055E  01B0               	clrf	??_LCDWriteInt+1
  5993  055F  1BAF               	btfsc	??_LCDWriteInt,7
  5994  0560  03B0               	decf	??_LCDWriteInt+1,f
  5995  0561  09AF               	comf	??_LCDWriteInt,f
  5996  0562  09B0               	comf	??_LCDWriteInt+1,f
  5997  0563  0AAF               	incf	??_LCDWriteInt,f
  5998  0564  1903               	skipnz
  5999  0565  0AB0               	incf	??_LCDWriteInt+1,f
  6000  0566  082F               	movf	??_LCDWriteInt,w
  6001  0567  3E05               	addlw	5
  6002  0568  00B6               	movwf	LCDWriteInt@j
  6003  0569  0830               	movf	??_LCDWriteInt+1,w
  6004  056A  1803               	skipnc
  6005  056B  3E01               	addlw	1
  6006  056C  3E00               	addlw	0
  6007  056D  00B7               	movwf	LCDWriteInt@j+1
  6008  056E                     l2915:	
  6009                           
  6010                           ;lcd_hd44780_pic16.c: 356: for(i=j;i<5;i++)
  6011  056E  0837               	movf	LCDWriteInt@j+1,w
  6012  056F  00B9               	movwf	LCDWriteInt@i+1
  6013  0570  0836               	movf	LCDWriteInt@j,w
  6014  0571  00B8               	movwf	LCDWriteInt@i
  6015  0572                     L5:	
  6016  0572  0839               	movf	LCDWriteInt@i+1,w
  6017  0573  3A80               	xorlw	128
  6018  0574  00FF               	movwf	127
  6019  0575  3080               	movlw	128
  6020  0576  027F               	subwf	127,w
  6021  0577  1D03               	skipz
  6022  0578  2D7B               	goto	u2955
  6023  0579  3005               	movlw	5
  6024  057A  0238               	subwf	LCDWriteInt@i,w
  6025  057B                     u2955:	
  6026  057B  1803               	btfsc	3,0
  6027  057C  0008               	return
  6028                           
  6029                           ;lcd_hd44780_pic16.c: 357: {
  6030                           ;lcd_hd44780_pic16.c: 358: (LCDByte(48+str[i],1));
  6031  057D  1283               	bcf	3,5	;RP0=0, select bank0
  6032  057E  1303               	bcf	3,6	;RP1=0, select bank0
  6033  057F  01A5               	clrf	LCDByte@isdata
  6034  0580  0AA5               	incf	LCDByte@isdata,f
  6035  0581  0838               	movf	LCDWriteInt@i,w
  6036  0582  3E31               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  6037  0583  0084               	movwf	4
  6038  0584  1383               	bcf	3,7	;select IRP bank0
  6039  0585  0800               	movf	0,w
  6040  0586  3E30               	addlw	48
  6041  0587  120A  118A  27A8  120A  118A  	fcall	_LCDByte
  6042  058C  3001               	movlw	1
  6043  058D  1283               	bcf	3,5	;RP0=0, select bank0
  6044  058E  1303               	bcf	3,6	;RP1=0, select bank0
  6045  058F  07B8               	addwf	LCDWriteInt@i,f
  6046  0590  1803               	skipnc
  6047  0591  0AB9               	incf	LCDWriteInt@i+1,f
  6048  0592  3000               	movlw	0
  6049  0593  07B9               	addwf	LCDWriteInt@i+1,f
  6050  0594  2D72               	goto	L5
  6051  0595                     __end_of_LCDWriteInt:	
  6052                           ;lcd_hd44780_pic16.c: 359: }
  6053                           ;lcd_hd44780_pic16.c: 360: return field_length;
  6054                           ;	Return value of _LCDWriteInt is never used
  6055                           
  6056                           
  6057                           	psect	text29
  6058  0C05                     __ptext29:	
  6059 ;; *************** function ___awmod *****************
  6060 ;; Defined at:
  6061 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;  divisor         2    0[BANK0 ] int 
  6064 ;;  dividend        2    2[BANK0 ] int 
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;  sign            1    6[BANK0 ] unsigned char 
  6067 ;;  counter         1    5[BANK0 ] unsigned char 
  6068 ;; Return value:  Size  Location     Type
  6069 ;;                  2    0[BANK0 ] int 
  6070 ;; Registers used:
  6071 ;;		wreg, status,2, status,0
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6077 ;;      Params:         0       4       0       0       0
  6078 ;;      Locals:         0       2       0       0       0
  6079 ;;      Temps:          0       1       0       0       0
  6080 ;;      Totals:         0       7       0       0       0
  6081 ;;Total ram usage:        7 bytes
  6082 ;; Hardware stack levels used:    1
  6083 ;; Hardware stack levels required when called:    3
  6084 ;; This function calls:
  6085 ;;		Nothing
  6086 ;; This function is called by:
  6087 ;;		_LCDWriteInt
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           
  6092                           ;psect for function ___awmod
  6093  0C05                     ___awmod:	
  6094                           
  6095                           ;incstack = 0
  6096                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6097  0C05  1283               	bcf	3,5	;RP0=0, select bank0
  6098  0C06  1303               	bcf	3,6	;RP1=0, select bank0
  6099  0C07  01A6               	clrf	___awmod@sign
  6100  0C08  1FA3               	btfss	___awmod@dividend+1,7
  6101  0C09  2C11               	goto	l2775
  6102  0C0A  09A2               	comf	___awmod@dividend,f
  6103  0C0B  09A3               	comf	___awmod@dividend+1,f
  6104  0C0C  0AA2               	incf	___awmod@dividend,f
  6105  0C0D  1903               	skipnz
  6106  0C0E  0AA3               	incf	___awmod@dividend+1,f
  6107  0C0F  01A6               	clrf	___awmod@sign
  6108  0C10  0AA6               	incf	___awmod@sign,f
  6109  0C11                     l2775:	
  6110  0C11  1FA1               	btfss	___awmod@divisor+1,7
  6111  0C12  2C18               	goto	l2779
  6112  0C13  09A0               	comf	___awmod@divisor,f
  6113  0C14  09A1               	comf	___awmod@divisor+1,f
  6114  0C15  0AA0               	incf	___awmod@divisor,f
  6115  0C16  1903               	skipnz
  6116  0C17  0AA1               	incf	___awmod@divisor+1,f
  6117  0C18                     l2779:	
  6118  0C18  0820               	movf	___awmod@divisor,w
  6119  0C19  0421               	iorwf	___awmod@divisor+1,w
  6120  0C1A  1903               	btfsc	3,2
  6121  0C1B  2C45               	goto	l2797
  6122  0C1C  01A5               	clrf	___awmod@counter
  6123  0C1D  0AA5               	incf	___awmod@counter,f
  6124  0C1E                     l2787:	
  6125  0C1E  1BA1               	btfsc	___awmod@divisor+1,7
  6126  0C1F  2C2C               	goto	l2789
  6127  0C20  3001               	movlw	1
  6128  0C21                     u2775:	
  6129  0C21  1003               	clrc
  6130  0C22  0DA0               	rlf	___awmod@divisor,f
  6131  0C23  0DA1               	rlf	___awmod@divisor+1,f
  6132  0C24  3EFF               	addlw	-1
  6133  0C25  1D03               	skipz
  6134  0C26  2C21               	goto	u2775
  6135  0C27  3001               	movlw	1
  6136  0C28  00A4               	movwf	??___awmod
  6137  0C29  0824               	movf	??___awmod,w
  6138  0C2A  07A5               	addwf	___awmod@counter,f
  6139  0C2B  2C1E               	goto	l2787
  6140  0C2C                     l2789:	
  6141  0C2C  0821               	movf	___awmod@divisor+1,w
  6142  0C2D  0223               	subwf	___awmod@dividend+1,w
  6143  0C2E  1D03               	skipz
  6144  0C2F  2C32               	goto	u2795
  6145  0C30  0820               	movf	___awmod@divisor,w
  6146  0C31  0222               	subwf	___awmod@dividend,w
  6147  0C32                     u2795:	
  6148  0C32  1C03               	skipc
  6149  0C33  2C3A               	goto	l2793
  6150  0C34  0820               	movf	___awmod@divisor,w
  6151  0C35  02A2               	subwf	___awmod@dividend,f
  6152  0C36  0821               	movf	___awmod@divisor+1,w
  6153  0C37  1C03               	skipc
  6154  0C38  03A3               	decf	___awmod@dividend+1,f
  6155  0C39  02A3               	subwf	___awmod@dividend+1,f
  6156  0C3A                     l2793:	
  6157  0C3A  3001               	movlw	1
  6158  0C3B                     u2805:	
  6159  0C3B  1003               	clrc
  6160  0C3C  0CA1               	rrf	___awmod@divisor+1,f
  6161  0C3D  0CA0               	rrf	___awmod@divisor,f
  6162  0C3E  3EFF               	addlw	-1
  6163  0C3F  1D03               	skipz
  6164  0C40  2C3B               	goto	u2805
  6165  0C41  3001               	movlw	1
  6166  0C42  02A5               	subwf	___awmod@counter,f
  6167  0C43  1D03               	btfss	3,2
  6168  0C44  2C2C               	goto	l2789
  6169  0C45                     l2797:	
  6170  0C45  0826               	movf	___awmod@sign,w
  6171  0C46  1903               	btfsc	3,2
  6172  0C47  2C4D               	goto	l2801
  6173  0C48  09A2               	comf	___awmod@dividend,f
  6174  0C49  09A3               	comf	___awmod@dividend+1,f
  6175  0C4A  0AA2               	incf	___awmod@dividend,f
  6176  0C4B  1903               	skipnz
  6177  0C4C  0AA3               	incf	___awmod@dividend+1,f
  6178  0C4D                     l2801:	
  6179  0C4D  0823               	movf	___awmod@dividend+1,w
  6180  0C4E  00A1               	movwf	?___awmod+1
  6181  0C4F  0822               	movf	___awmod@dividend,w
  6182  0C50  00A0               	movwf	?___awmod
  6183  0C51  0008               	return
  6184  0C52                     __end_of___awmod:	
  6185                           
  6186                           	psect	text30
  6187  0D4D                     __ptext30:	
  6188 ;; *************** function ___awdiv *****************
  6189 ;; Defined at:
  6190 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;  divisor         2    0[BANK0 ] int 
  6193 ;;  dividend        2    2[BANK0 ] int 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;  quotient        2    7[BANK0 ] int 
  6196 ;;  sign            1    6[BANK0 ] unsigned char 
  6197 ;;  counter         1    5[BANK0 ] unsigned char 
  6198 ;; Return value:  Size  Location     Type
  6199 ;;                  2    0[BANK0 ] int 
  6200 ;; Registers used:
  6201 ;;		wreg, status,2, status,0
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6207 ;;      Params:         0       4       0       0       0
  6208 ;;      Locals:         0       4       0       0       0
  6209 ;;      Temps:          0       1       0       0       0
  6210 ;;      Totals:         0       9       0       0       0
  6211 ;;Total ram usage:        9 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    3
  6214 ;; This function calls:
  6215 ;;		Nothing
  6216 ;; This function is called by:
  6217 ;;		_LCDWriteInt
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           
  6222                           ;psect for function ___awdiv
  6223  0D4D                     ___awdiv:	
  6224                           
  6225                           ;incstack = 0
  6226                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6227  0D4D  1283               	bcf	3,5	;RP0=0, select bank0
  6228  0D4E  1303               	bcf	3,6	;RP1=0, select bank0
  6229  0D4F  01A6               	clrf	___awdiv@sign
  6230  0D50  1FA1               	btfss	___awdiv@divisor+1,7
  6231  0D51  2D59               	goto	l2731
  6232  0D52  09A0               	comf	___awdiv@divisor,f
  6233  0D53  09A1               	comf	___awdiv@divisor+1,f
  6234  0D54  0AA0               	incf	___awdiv@divisor,f
  6235  0D55  1903               	skipnz
  6236  0D56  0AA1               	incf	___awdiv@divisor+1,f
  6237  0D57  01A6               	clrf	___awdiv@sign
  6238  0D58  0AA6               	incf	___awdiv@sign,f
  6239  0D59                     l2731:	
  6240  0D59  1FA3               	btfss	___awdiv@dividend+1,7
  6241  0D5A  2D64               	goto	l2737
  6242  0D5B  09A2               	comf	___awdiv@dividend,f
  6243  0D5C  09A3               	comf	___awdiv@dividend+1,f
  6244  0D5D  0AA2               	incf	___awdiv@dividend,f
  6245  0D5E  1903               	skipnz
  6246  0D5F  0AA3               	incf	___awdiv@dividend+1,f
  6247  0D60  3001               	movlw	1
  6248  0D61  00A4               	movwf	??___awdiv
  6249  0D62  0824               	movf	??___awdiv,w
  6250  0D63  06A6               	xorwf	___awdiv@sign,f
  6251  0D64                     l2737:	
  6252  0D64  01A7               	clrf	___awdiv@quotient
  6253  0D65  01A8               	clrf	___awdiv@quotient+1
  6254  0D66  0820               	movf	___awdiv@divisor,w
  6255  0D67  0421               	iorwf	___awdiv@divisor+1,w
  6256  0D68  1903               	btfsc	3,2
  6257  0D69  2D9B               	goto	l2759
  6258  0D6A  01A5               	clrf	___awdiv@counter
  6259  0D6B  0AA5               	incf	___awdiv@counter,f
  6260  0D6C                     l2747:	
  6261  0D6C  1BA1               	btfsc	___awdiv@divisor+1,7
  6262  0D6D  2D7A               	goto	l2749
  6263  0D6E  3001               	movlw	1
  6264  0D6F                     u2675:	
  6265  0D6F  1003               	clrc
  6266  0D70  0DA0               	rlf	___awdiv@divisor,f
  6267  0D71  0DA1               	rlf	___awdiv@divisor+1,f
  6268  0D72  3EFF               	addlw	-1
  6269  0D73  1D03               	skipz
  6270  0D74  2D6F               	goto	u2675
  6271  0D75  3001               	movlw	1
  6272  0D76  00A4               	movwf	??___awdiv
  6273  0D77  0824               	movf	??___awdiv,w
  6274  0D78  07A5               	addwf	___awdiv@counter,f
  6275  0D79  2D6C               	goto	l2747
  6276  0D7A                     l2749:	
  6277  0D7A  3001               	movlw	1
  6278  0D7B                     u2695:	
  6279  0D7B  1003               	clrc
  6280  0D7C  0DA7               	rlf	___awdiv@quotient,f
  6281  0D7D  0DA8               	rlf	___awdiv@quotient+1,f
  6282  0D7E  3EFF               	addlw	-1
  6283  0D7F  1D03               	skipz
  6284  0D80  2D7B               	goto	u2695
  6285  0D81  0821               	movf	___awdiv@divisor+1,w
  6286  0D82  0223               	subwf	___awdiv@dividend+1,w
  6287  0D83  1D03               	skipz
  6288  0D84  2D87               	goto	u2705
  6289  0D85  0820               	movf	___awdiv@divisor,w
  6290  0D86  0222               	subwf	___awdiv@dividend,w
  6291  0D87                     u2705:	
  6292  0D87  1C03               	skipc
  6293  0D88  2D90               	goto	l2755
  6294  0D89  0820               	movf	___awdiv@divisor,w
  6295  0D8A  02A2               	subwf	___awdiv@dividend,f
  6296  0D8B  0821               	movf	___awdiv@divisor+1,w
  6297  0D8C  1C03               	skipc
  6298  0D8D  03A3               	decf	___awdiv@dividend+1,f
  6299  0D8E  02A3               	subwf	___awdiv@dividend+1,f
  6300  0D8F  1427               	bsf	___awdiv@quotient,0
  6301  0D90                     l2755:	
  6302  0D90  3001               	movlw	1
  6303  0D91                     u2715:	
  6304  0D91  1003               	clrc
  6305  0D92  0CA1               	rrf	___awdiv@divisor+1,f
  6306  0D93  0CA0               	rrf	___awdiv@divisor,f
  6307  0D94  3EFF               	addlw	-1
  6308  0D95  1D03               	skipz
  6309  0D96  2D91               	goto	u2715
  6310  0D97  3001               	movlw	1
  6311  0D98  02A5               	subwf	___awdiv@counter,f
  6312  0D99  1D03               	btfss	3,2
  6313  0D9A  2D7A               	goto	l2749
  6314  0D9B                     l2759:	
  6315  0D9B  0826               	movf	___awdiv@sign,w
  6316  0D9C  1903               	btfsc	3,2
  6317  0D9D  2DA3               	goto	l2763
  6318  0D9E  09A7               	comf	___awdiv@quotient,f
  6319  0D9F  09A8               	comf	___awdiv@quotient+1,f
  6320  0DA0  0AA7               	incf	___awdiv@quotient,f
  6321  0DA1  1903               	skipnz
  6322  0DA2  0AA8               	incf	___awdiv@quotient+1,f
  6323  0DA3                     l2763:	
  6324  0DA3  0828               	movf	___awdiv@quotient+1,w
  6325  0DA4  00A1               	movwf	?___awdiv+1
  6326  0DA5  0827               	movf	___awdiv@quotient,w
  6327  0DA6  00A0               	movwf	?___awdiv
  6328  0DA7  0008               	return
  6329  0DA8                     __end_of___awdiv:	
  6330                           
  6331                           	psect	text31
  6332  0852                     __ptext31:	
  6333 ;; *************** function _MenuUp *****************
  6334 ;; Defined at:
  6335 ;;		line 40 in file "menu.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;		None
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;		None
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  1    wreg      void 
  6342 ;; Registers used:
  6343 ;;		wreg, status,2, status,0
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6349 ;;      Params:         0       0       0       0       0
  6350 ;;      Locals:         0       0       0       0       0
  6351 ;;      Temps:          0       1       0       0       0
  6352 ;;      Totals:         0       1       0       0       0
  6353 ;;Total ram usage:        1 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    3
  6356 ;; This function calls:
  6357 ;;		Nothing
  6358 ;; This function is called by:
  6359 ;;		_main
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           
  6364                           ;psect for function _MenuUp
  6365  0852                     _MenuUp:	
  6366                           
  6367                           ;menu.c: 42: if(g_menu.index == 0)
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in _MenuUp: [wreg+status,2+status,0]
  6371  0852  1683               	bsf	3,5	;RP0=1, select bank1
  6372  0853  1303               	bcf	3,6	;RP1=0, select bank1
  6373  0854  0828               	movf	(_g_menu^(0+128)+8),w
  6374  0855  1D03               	btfss	3,2
  6375  0856  2860               	goto	l3161
  6376                           
  6377                           ;menu.c: 43: {
  6378                           ;menu.c: 44: g_menu.index = 4 - 1;
  6379  0857  3003               	movlw	3
  6380  0858  1283               	bcf	3,5	;RP0=0, select bank0
  6381  0859  1303               	bcf	3,6	;RP1=0, select bank0
  6382  085A  00A0               	movwf	??_MenuUp
  6383  085B  0820               	movf	??_MenuUp,w
  6384  085C  1683               	bsf	3,5	;RP0=1, select bank1
  6385  085D  1303               	bcf	3,6	;RP1=0, select bank1
  6386  085E  00A8               	movwf	(_g_menu^(0+128)+8)
  6387                           
  6388                           ;menu.c: 45: }
  6389  085F  0008               	return
  6390  0860                     l3161:	
  6391                           
  6392                           ;menu.c: 46: else
  6393                           ;menu.c: 47: {
  6394                           ;menu.c: 48: g_menu.index--;
  6395  0860  3001               	movlw	1
  6396  0861  02A8               	subwf	(_g_menu^(0+128)+8),f
  6397  0862  0008               	return
  6398  0863                     __end_of_MenuUp:	
  6399                           
  6400                           	psect	text32
  6401  0CA4                     __ptext32:	
  6402 ;; *************** function _MenuInit *****************
  6403 ;; Defined at:
  6404 ;;		line 7 in file "menu.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;		None
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;		None
  6409 ;; Return value:  Size  Location     Type
  6410 ;;                  1    wreg      void 
  6411 ;; Registers used:
  6412 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 0/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6418 ;;      Params:         0       0       0       0       0
  6419 ;;      Locals:         0       0       0       0       0
  6420 ;;      Temps:          0       1       0       0       0
  6421 ;;      Totals:         0       1       0       0       0
  6422 ;;Total ram usage:        1 bytes
  6423 ;; Hardware stack levels used:    1
  6424 ;; Hardware stack levels required when called:    5
  6425 ;; This function calls:
  6426 ;;		_LoadMenuItem
  6427 ;; This function is called by:
  6428 ;;		_main
  6429 ;; This function uses a non-reentrant model
  6430 ;;
  6431                           
  6432                           
  6433                           ;psect for function _MenuInit
  6434  0CA4                     _MenuInit:	
  6435                           
  6436                           ;menu.c: 9: g_menu.items[0].name = "ID1:";
  6437                           
  6438                           ;incstack = 0
  6439                           ; Regs used in _MenuInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6440  0CA4  3058               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  6441  0CA5  1283               	bcf	3,5	;RP0=0, select bank0
  6442  0CA6  1303               	bcf	3,6	;RP1=0, select bank0
  6443  0CA7  00A5               	movwf	??_MenuInit
  6444  0CA8  0825               	movf	??_MenuInit,w
  6445  0CA9  1683               	bsf	3,5	;RP0=1, select bank1
  6446  0CAA  1303               	bcf	3,6	;RP1=0, select bank1
  6447  0CAB  00A1               	movwf	(low ((_g_menu| 0+1)))^(0+128)
  6448                           
  6449                           ;menu.c: 10: g_menu.items[0].value = LoadMenuItem(0);
  6450  0CAC  3000               	movlw	0
  6451  0CAD  120A  158A  2099  120A  158A  	fcall	_LoadMenuItem
  6452  0CB2  1283               	bcf	3,5	;RP0=0, select bank0
  6453  0CB3  1303               	bcf	3,6	;RP1=0, select bank0
  6454  0CB4  00A5               	movwf	??_MenuInit
  6455  0CB5  0825               	movf	??_MenuInit,w
  6456  0CB6  1683               	bsf	3,5	;RP0=1, select bank1
  6457  0CB7  1303               	bcf	3,6	;RP1=0, select bank1
  6458  0CB8  00A0               	movwf	_g_menu^(0+128)
  6459                           
  6460                           ;menu.c: 12: g_menu.items[1].name = "ID2:";
  6461  0CB9  305D               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  6462  0CBA  1283               	bcf	3,5	;RP0=0, select bank0
  6463  0CBB  1303               	bcf	3,6	;RP1=0, select bank0
  6464  0CBC  00A5               	movwf	??_MenuInit
  6465  0CBD  0825               	movf	??_MenuInit,w
  6466  0CBE  1683               	bsf	3,5	;RP0=1, select bank1
  6467  0CBF  1303               	bcf	3,6	;RP1=0, select bank1
  6468  0CC0  00A3               	movwf	(low ((_g_menu| 0+3)))^(0+128)
  6469                           
  6470                           ;menu.c: 13: g_menu.items[1].value = LoadMenuItem(1);
  6471  0CC1  3001               	movlw	1
  6472  0CC2  120A  158A  2099  120A  158A  	fcall	_LoadMenuItem
  6473  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  6474  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  6475  0CC9  00A5               	movwf	??_MenuInit
  6476  0CCA  0825               	movf	??_MenuInit,w
  6477  0CCB  1683               	bsf	3,5	;RP0=1, select bank1
  6478  0CCC  1303               	bcf	3,6	;RP1=0, select bank1
  6479  0CCD  00A2               	movwf	(_g_menu^(0+128)+2)
  6480                           
  6481                           ;menu.c: 15: g_menu.items[2].name = "ID3:";
  6482  0CCE  3062               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  6483  0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  6484  0CD0  1303               	bcf	3,6	;RP1=0, select bank0
  6485  0CD1  00A5               	movwf	??_MenuInit
  6486  0CD2  0825               	movf	??_MenuInit,w
  6487  0CD3  1683               	bsf	3,5	;RP0=1, select bank1
  6488  0CD4  1303               	bcf	3,6	;RP1=0, select bank1
  6489  0CD5  00A5               	movwf	(low ((_g_menu| 0+5)))^(0+128)
  6490                           
  6491                           ;menu.c: 16: g_menu.items[2].value = LoadMenuItem(2);
  6492  0CD6  3002               	movlw	2
  6493  0CD7  120A  158A  2099  120A  158A  	fcall	_LoadMenuItem
  6494  0CDC  1283               	bcf	3,5	;RP0=0, select bank0
  6495  0CDD  1303               	bcf	3,6	;RP1=0, select bank0
  6496  0CDE  00A5               	movwf	??_MenuInit
  6497  0CDF  0825               	movf	??_MenuInit,w
  6498  0CE0  1683               	bsf	3,5	;RP0=1, select bank1
  6499  0CE1  1303               	bcf	3,6	;RP1=0, select bank1
  6500  0CE2  00A4               	movwf	(_g_menu^(0+128)+4)
  6501                           
  6502                           ;menu.c: 18: g_menu.items[3].name = "ID4:";
  6503  0CE3  3067               	movlw	(low ((STR_24-__stringbase)| (0+32768)))& (0+255)
  6504  0CE4  1283               	bcf	3,5	;RP0=0, select bank0
  6505  0CE5  1303               	bcf	3,6	;RP1=0, select bank0
  6506  0CE6  00A5               	movwf	??_MenuInit
  6507  0CE7  0825               	movf	??_MenuInit,w
  6508  0CE8  1683               	bsf	3,5	;RP0=1, select bank1
  6509  0CE9  1303               	bcf	3,6	;RP1=0, select bank1
  6510  0CEA  00A7               	movwf	(low ((_g_menu| 0+7)))^(0+128)
  6511                           
  6512                           ;menu.c: 19: g_menu.items[3].value = LoadMenuItem(3);
  6513  0CEB  3003               	movlw	3
  6514  0CEC  120A  158A  2099   	fcall	_LoadMenuItem
  6515  0CEF  1283               	bcf	3,5	;RP0=0, select bank0
  6516  0CF0  1303               	bcf	3,6	;RP1=0, select bank0
  6517  0CF1  00A5               	movwf	??_MenuInit
  6518  0CF2  0825               	movf	??_MenuInit,w
  6519  0CF3  1683               	bsf	3,5	;RP0=1, select bank1
  6520  0CF4  1303               	bcf	3,6	;RP1=0, select bank1
  6521  0CF5  00A6               	movwf	(_g_menu^(0+128)+6)
  6522                           
  6523                           ;menu.c: 21: g_menu.index = 0;
  6524  0CF6  01A8               	clrf	(_g_menu^(0+128)+8)
  6525  0CF7  0008               	return
  6526  0CF8                     __end_of_MenuInit:	
  6527                           
  6528                           	psect	text33
  6529  0899                     __ptext33:	
  6530 ;; *************** function _LoadMenuItem *****************
  6531 ;; Defined at:
  6532 ;;		line 36 in file "menu.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;  item            1    wreg     unsigned char 
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;  item            1    4[BANK0 ] unsigned char 
  6537 ;; Return value:  Size  Location     Type
  6538 ;;                  1    wreg      unsigned char 
  6539 ;; Registers used:
  6540 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6546 ;;      Params:         0       0       0       0       0
  6547 ;;      Locals:         0       1       0       0       0
  6548 ;;      Temps:          0       2       0       0       0
  6549 ;;      Totals:         0       3       0       0       0
  6550 ;;Total ram usage:        3 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    4
  6553 ;; This function calls:
  6554 ;;		_eeprom_read
  6555 ;; This function is called by:
  6556 ;;		_MenuInit
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           
  6561                           ;psect for function _LoadMenuItem
  6562  0899                     _LoadMenuItem:	
  6563                           
  6564                           ;incstack = 0
  6565                           ; Regs used in _LoadMenuItem: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6566                           ;LoadMenuItem@item stored from wreg
  6567  0899  1283               	bcf	3,5	;RP0=0, select bank0
  6568  089A  1303               	bcf	3,6	;RP1=0, select bank0
  6569  089B  00A4               	movwf	LoadMenuItem@item
  6570                           
  6571                           ;menu.c: 38: g_menu.items[item].value = eeprom_read(item);
  6572  089C  0824               	movf	LoadMenuItem@item,w
  6573  089D  120A  158A  216B   	fcall	_eeprom_read
  6574  08A0  1283               	bcf	3,5	;RP0=0, select bank0
  6575  08A1  1303               	bcf	3,6	;RP1=0, select bank0
  6576  08A2  00A2               	movwf	??_LoadMenuItem
  6577  08A3  0824               	movf	LoadMenuItem@item,w
  6578  08A4  00A3               	movwf	??_LoadMenuItem+1
  6579  08A5  0723               	addwf	??_LoadMenuItem+1,w
  6580  08A6  3EA0               	addlw	(low (_g_menu| 0))& (0+255)
  6581  08A7  0084               	movwf	4
  6582  08A8  0822               	movf	??_LoadMenuItem,w
  6583  08A9  1383               	bcf	3,7	;select IRP bank1
  6584  08AA  0080               	movwf	0
  6585  08AB  0008               	return
  6586  08AC                     __end_of_LoadMenuItem:	
  6587                           
  6588                           	psect	text34
  6589  096B                     __ptext34:	
  6590 ;; *************** function _eeprom_read *****************
  6591 ;; Defined at:
  6592 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eeread.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;  addr            1    wreg     unsigned char 
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;  addr            1    1[BANK0 ] unsigned char 
  6597 ;; Return value:  Size  Location     Type
  6598 ;;                  1    wreg      unsigned char 
  6599 ;; Registers used:
  6600 ;;		wreg, status,2, status,0
  6601 ;; Tracked objects:
  6602 ;;		On entry : 0/0
  6603 ;;		On exit  : 0/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6606 ;;      Params:         0       0       0       0       0
  6607 ;;      Locals:         0       1       0       0       0
  6608 ;;      Temps:          0       1       0       0       0
  6609 ;;      Totals:         0       2       0       0       0
  6610 ;;Total ram usage:        2 bytes
  6611 ;; Hardware stack levels used:    1
  6612 ;; Hardware stack levels required when called:    3
  6613 ;; This function calls:
  6614 ;;		Nothing
  6615 ;; This function is called by:
  6616 ;;		_LoadMenuItem
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           
  6621                           ;psect for function _eeprom_read
  6622  096B                     _eeprom_read:	
  6623                           
  6624                           ;incstack = 0
  6625                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  6626                           ;eeprom_read@addr stored from wreg
  6627  096B  1283               	bcf	3,5	;RP0=0, select bank0
  6628  096C  1303               	bcf	3,6	;RP1=0, select bank0
  6629  096D  00A1               	movwf	eeprom_read@addr
  6630  096E  2971               	goto	l525
  6631  096F                     u2631:	
  6632  096F  1283               	bcf	3,5	;RP0=0, select bank0
  6633  0970  1303               	bcf	3,6	;RP1=0, select bank0
  6634  0971                     l525:	
  6635  0971  0064               	clrwdt	;# 
  6636  0972  1683               	bsf	3,5	;RP0=1, select bank3
  6637  0973  1703               	bsf	3,6	;RP1=1, select bank3
  6638  0974  188C               	btfsc	12,1	;volsfr
  6639  0975  296F               	goto	u2631
  6640  0976  1283               	bcf	3,5	;RP0=0, select bank0
  6641  0977  1303               	bcf	3,6	;RP1=0, select bank0
  6642  0978  0821               	movf	eeprom_read@addr,w
  6643  0979  1283               	bcf	3,5	;RP0=0, select bank2
  6644  097A  1703               	bsf	3,6	;RP1=1, select bank2
  6645  097B  008D               	movwf	13	;volatile
  6646  097C  303F               	movlw	63
  6647  097D  1283               	bcf	3,5	;RP0=0, select bank0
  6648  097E  1303               	bcf	3,6	;RP1=0, select bank0
  6649  097F  00A0               	movwf	??_eeprom_read
  6650  0980  0820               	movf	??_eeprom_read,w
  6651  0981  1683               	bsf	3,5	;RP0=1, select bank3
  6652  0982  1703               	bsf	3,6	;RP1=1, select bank3
  6653  0983  058C               	andwf	12,f	;volsfr
  6654  0984  140C               	bsf	12,0	;volsfr
  6655  0985  1003               	clrc
  6656  0986  180C               	btfsc	12,0	;volsfr
  6657  0987  1403               	setc
  6658  0988  3000               	movlw	0
  6659  0989  1803               	skipnc
  6660  098A  3001               	movlw	1
  6661  098B  1283               	bcf	3,5	;RP0=0, select bank2
  6662  098C  1703               	bsf	3,6	;RP1=1, select bank2
  6663  098D  080C               	movf	12,w	;volatile
  6664  098E  0008               	return
  6665  098F                     __end_of_eeprom_read:	
  6666                           
  6667                           	psect	text35
  6668  0841                     __ptext35:	
  6669 ;; *************** function _MenuDown *****************
  6670 ;; Defined at:
  6671 ;;		line 51 in file "menu.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;		None
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;		None
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  1    wreg      void 
  6678 ;; Registers used:
  6679 ;;		wreg, status,2, status,0
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6685 ;;      Params:         0       0       0       0       0
  6686 ;;      Locals:         0       0       0       0       0
  6687 ;;      Temps:          0       1       0       0       0
  6688 ;;      Totals:         0       1       0       0       0
  6689 ;;Total ram usage:        1 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    3
  6692 ;; This function calls:
  6693 ;;		Nothing
  6694 ;; This function is called by:
  6695 ;;		_main
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           
  6700                           ;psect for function _MenuDown
  6701  0841                     _MenuDown:	
  6702                           
  6703                           ;menu.c: 53: if(g_menu.index == 4 - 1)
  6704                           
  6705                           ;incstack = 0
  6706                           ; Regs used in _MenuDown: [wreg+status,2+status,0]
  6707  0841  3003               	movlw	3
  6708  0842  1683               	bsf	3,5	;RP0=1, select bank1
  6709  0843  1303               	bcf	3,6	;RP1=0, select bank1
  6710  0844  0628               	xorwf	(_g_menu^(0+128)+8),w
  6711  0845  1D03               	btfss	3,2
  6712  0846  2849               	goto	l3171
  6713                           
  6714                           ;menu.c: 54: {
  6715                           ;menu.c: 55: g_menu.index = 0;
  6716  0847  01A8               	clrf	(_g_menu^(0+128)+8)
  6717                           
  6718                           ;menu.c: 56: }
  6719  0848  0008               	return
  6720  0849                     l3171:	
  6721                           
  6722                           ;menu.c: 57: else
  6723                           ;menu.c: 58: {
  6724                           ;menu.c: 59: g_menu.index++;
  6725  0849  3001               	movlw	1
  6726  084A  1283               	bcf	3,5	;RP0=0, select bank0
  6727  084B  1303               	bcf	3,6	;RP1=0, select bank0
  6728  084C  00A0               	movwf	??_MenuDown
  6729  084D  0820               	movf	??_MenuDown,w
  6730  084E  1683               	bsf	3,5	;RP0=1, select bank1
  6731  084F  1303               	bcf	3,6	;RP1=0, select bank1
  6732  0850  07A8               	addwf	(_g_menu^(0+128)+8),f
  6733  0851  0008               	return
  6734  0852                     __end_of_MenuDown:	
  6735                           
  6736                           	psect	text36
  6737  17EA                     __ptext36:	
  6738 ;; *************** function _LCDSetStyle *****************
  6739 ;; Defined at:
  6740 ;;		line 207 in file "lcd_hd44780_pic16.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;  style           1    wreg     unsigned char 
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;  style           1   12[BANK0 ] unsigned char 
  6745 ;; Return value:  Size  Location     Type
  6746 ;;                  1    wreg      void 
  6747 ;; Registers used:
  6748 ;;		wreg, status,2, status,0, pclath, cstack
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/0
  6751 ;;		On exit  : 0/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6754 ;;      Params:         0       0       0       0       0
  6755 ;;      Locals:         0       1       0       0       0
  6756 ;;      Temps:          0       0       0       0       0
  6757 ;;      Totals:         0       1       0       0       0
  6758 ;;Total ram usage:        1 bytes
  6759 ;; Hardware stack levels used:    1
  6760 ;; Hardware stack levels required when called:    5
  6761 ;; This function calls:
  6762 ;;		_LCDByte
  6763 ;; This function is called by:
  6764 ;;		_main
  6765 ;; This function uses a non-reentrant model
  6766 ;;
  6767                           
  6768                           
  6769                           ;psect for function _LCDSetStyle
  6770  17EA                     _LCDSetStyle:	
  6771                           
  6772                           ;incstack = 0
  6773                           ; Regs used in _LCDSetStyle: [wreg+status,2+status,0+pclath+cstack]
  6774                           ;LCDSetStyle@style stored from wreg
  6775  17EA  1283               	bcf	3,5	;RP0=0, select bank0
  6776  17EB  1303               	bcf	3,6	;RP1=0, select bank0
  6777  17EC  00AC               	movwf	LCDSetStyle@style
  6778                           
  6779                           ;lcd_hd44780_pic16.c: 209: (LCDByte(0b00001100|style,0));
  6780  17ED  01A5               	clrf	LCDByte@isdata
  6781  17EE  082C               	movf	LCDSetStyle@style,w
  6782  17EF  380C               	iorlw	12
  6783  17F0  120A  118A  27A8   	fcall	_LCDByte
  6784  17F3  0008               	return
  6785  17F4                     __end_of_LCDSetStyle:	
  6786                           
  6787                           	psect	text37
  6788  0F2C                     __ptext37:	
  6789 ;; *************** function _LCDInit *****************
  6790 ;; Defined at:
  6791 ;;		line 211 in file "lcd_hd44780_pic16.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;  style           1    wreg     unsigned char 
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;  style           1   14[BANK0 ] unsigned char 
  6796 ;;  __i             1   15[BANK0 ] unsigned char 
  6797 ;; Return value:  Size  Location     Type
  6798 ;;                  1    wreg      void 
  6799 ;; Registers used:
  6800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6801 ;; Tracked objects:
  6802 ;;		On entry : 0/0
  6803 ;;		On exit  : 0/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6806 ;;      Params:         0       0       0       0       0
  6807 ;;      Locals:         0       2       0       0       0
  6808 ;;      Temps:          0       2       0       0       0
  6809 ;;      Totals:         0       4       0       0       0
  6810 ;;Total ram usage:        4 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    5
  6813 ;; This function calls:
  6814 ;;		_LCDBusyLoop
  6815 ;;		_LCDByte
  6816 ;; This function is called by:
  6817 ;;		_main
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           
  6822                           ;psect for function _LCDInit
  6823  0F2C                     _LCDInit:	
  6824                           
  6825                           ;incstack = 0
  6826                           ; Regs used in _LCDInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6827                           ;LCDInit@style stored from wreg
  6828  0F2C  1283               	bcf	3,5	;RP0=0, select bank0
  6829  0F2D  1303               	bcf	3,6	;RP1=0, select bank0
  6830  0F2E  00AE               	movwf	LCDInit@style
  6831                           
  6832                           ;lcd_hd44780_pic16.c: 213: _delay((unsigned long)((30)*(20000000/4000.0)));
  6833  0F2F  30C3               	movlw	195
  6834  0F30  00AD               	movwf	??_LCDInit+1
  6835  0F31  30CD               	movlw	205
  6836  0F32  00AC               	movwf	??_LCDInit
  6837  0F33                     u3837:	
  6838  0F33  0BAC               	decfsz	??_LCDInit,f
  6839  0F34  2F33               	goto	u3837
  6840  0F35  0BAD               	decfsz	??_LCDInit+1,f
  6841  0F36  2F33               	goto	u3837
  6842                           
  6843                           ;lcd_hd44780_pic16.c: 216: TRISC&=(~(0x0F<<4));
  6844  0F37  300F               	movlw	15
  6845  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  6846  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  6847  0F3A  00AC               	movwf	??_LCDInit
  6848  0F3B  082C               	movf	??_LCDInit,w
  6849  0F3C  1683               	bsf	3,5	;RP0=1, select bank1
  6850  0F3D  1303               	bcf	3,6	;RP1=0, select bank1
  6851  0F3E  0587               	andwf	7,f	;volatile
  6852                           
  6853                           ;lcd_hd44780_pic16.c: 218: TRISCbits.TRISC3=0;
  6854  0F3F  1187               	bcf	7,3	;volatile
  6855                           
  6856                           ;lcd_hd44780_pic16.c: 219: TRISCbits.TRISC1=0;
  6857  0F40  1087               	bcf	7,1	;volatile
  6858                           
  6859                           ;lcd_hd44780_pic16.c: 220: TRISCbits.TRISC2=0;
  6860  0F41  1107               	bcf	7,2	;volatile
  6861                           
  6862                           ;lcd_hd44780_pic16.c: 222: PORTC&=(~(0x0F<<4));
  6863  0F42  300F               	movlw	15
  6864  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  6865  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  6866  0F45  00AC               	movwf	??_LCDInit
  6867  0F46  082C               	movf	??_LCDInit,w
  6868  0F47  0587               	andwf	7,f	;volatile
  6869                           
  6870                           ;lcd_hd44780_pic16.c: 224: (RC3=0);
  6871  0F48  1187               	bcf	7,3	;volatile
  6872                           
  6873                           ;lcd_hd44780_pic16.c: 225: (RC2=0);
  6874  0F49  1107               	bcf	7,2	;volatile
  6875                           
  6876                           ;lcd_hd44780_pic16.c: 226: (RC1=0);
  6877  0F4A  1087               	bcf	7,1	;volatile
  6878                           
  6879                           ;lcd_hd44780_pic16.c: 229: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  6880  0F4B  2F4C               	nop2	;2 cycle nop
  6881                           
  6882                           ;lcd_hd44780_pic16.c: 231: (RC3=1);
  6883  0F4C  1283               	bcf	3,5	;RP0=0, select bank0
  6884  0F4D  1303               	bcf	3,6	;RP1=0, select bank0
  6885  0F4E  1587               	bsf	7,3	;volatile
  6886                           
  6887                           ;lcd_hd44780_pic16.c: 232: PORTC|=((0b00000010)<<4);
  6888  0F4F  1687               	bsf	7,5	;volatile
  6889                           
  6890                           ;lcd_hd44780_pic16.c: 233: _delay((unsigned long)((1)*(20000000/4000000.0)));
  6891  0F50  2F51               	nop2	;2 cycle nop
  6892  0F51  2F52               	nop2	;2 cycle nop
  6893  0F52  0000               	nop
  6894                           
  6895                           ;lcd_hd44780_pic16.c: 234: (RC3=0);
  6896  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  6897  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  6898  0F55  1187               	bcf	7,3	;volatile
  6899                           
  6900                           ;lcd_hd44780_pic16.c: 235: _delay((unsigned long)((1)*(20000000/4000000.0)));
  6901  0F56  2F57               	nop2	;2 cycle nop
  6902  0F57  2F58               	nop2	;2 cycle nop
  6903  0F58  0000               	nop
  6904                           
  6905                           ;lcd_hd44780_pic16.c: 238: LCDBusyLoop();
  6906  0F59  120A  158A  26C4  120A  158A  	fcall	_LCDBusyLoop
  6907                           
  6908                           ;lcd_hd44780_pic16.c: 243: (LCDByte(0b00101000,0));
  6909  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  6910  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
  6911  0F60  01A5               	clrf	LCDByte@isdata
  6912  0F61  3028               	movlw	40
  6913  0F62  120A  118A  27A8  120A  158A  	fcall	_LCDByte
  6914                           
  6915                           ;lcd_hd44780_pic16.c: 244: (LCDByte(0b00001100|style,0));
  6916  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  6917  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  6918  0F69  01A5               	clrf	LCDByte@isdata
  6919  0F6A  082E               	movf	LCDInit@style,w
  6920  0F6B  380C               	iorlw	12
  6921  0F6C  120A  118A  27A8  120A  158A  	fcall	_LCDByte
  6922                           
  6923                           ;lcd_hd44780_pic16.c: 247: (LCDByte(0b01000000,0));
  6924  0F71  1283               	bcf	3,5	;RP0=0, select bank0
  6925  0F72  1303               	bcf	3,6	;RP1=0, select bank0
  6926  0F73  01A5               	clrf	LCDByte@isdata
  6927  0F74  3040               	movlw	64
  6928  0F75  120A  118A  27A8  120A  158A  	fcall	_LCDByte
  6929                           
  6930                           ;lcd_hd44780_pic16.c: 249: uint8_t __i;
  6931                           ;lcd_hd44780_pic16.c: 250: for(__i=0;__i<sizeof(__cgram);__i++)
  6932  0F7A  1283               	bcf	3,5	;RP0=0, select bank0
  6933  0F7B  1303               	bcf	3,6	;RP1=0, select bank0
  6934  0F7C  01AF               	clrf	LCDInit@__i
  6935  0F7D                     L6:	
  6936  0F7D  3008               	movlw	8
  6937  0F7E  022F               	subwf	LCDInit@__i,w
  6938  0F7F  1803               	btfsc	3,0
  6939  0F80  0008               	return
  6940                           
  6941                           ;lcd_hd44780_pic16.c: 251: (LCDByte(__cgram[__i],1));
  6942  0F81  01A5               	clrf	LCDByte@isdata
  6943  0F82  0AA5               	incf	LCDByte@isdata,f
  6944  0F83  082F               	movf	LCDInit@__i,w
  6945  0F84  3EE1               	addlw	(low (___cgram| 0))& (0+255)
  6946  0F85  0084               	movwf	4
  6947  0F86  1383               	bcf	3,7	;select IRP bank1
  6948  0F87  0800               	movf	0,w
  6949  0F88  120A  118A  27A8  120A  158A  	fcall	_LCDByte
  6950  0F8D  3001               	movlw	1
  6951  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  6952  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  6953  0F90  00AC               	movwf	??_LCDInit
  6954  0F91  082C               	movf	??_LCDInit,w
  6955  0F92  07AF               	addwf	LCDInit@__i,f
  6956  0F93  2F7D               	goto	L6
  6957  0F94                     __end_of_LCDInit:	
  6958                           
  6959                           	psect	text38
  6960  0BB8                     __ptext38:	
  6961 ;; *************** function _IOInit *****************
  6962 ;; Defined at:
  6963 ;;		line 52 in file "do_am.c"
  6964 ;; Parameters:    Size  Location     Type
  6965 ;;		None
  6966 ;; Auto vars:     Size  Location     Type
  6967 ;;		None
  6968 ;; Return value:  Size  Location     Type
  6969 ;;                  1    wreg      void 
  6970 ;; Registers used:
  6971 ;;		None
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6977 ;;      Params:         0       0       0       0       0
  6978 ;;      Locals:         0       0       0       0       0
  6979 ;;      Temps:          0       0       0       0       0
  6980 ;;      Totals:         0       0       0       0       0
  6981 ;;Total ram usage:        0 bytes
  6982 ;; Hardware stack levels used:    1
  6983 ;; Hardware stack levels required when called:    3
  6984 ;; This function calls:
  6985 ;;		Nothing
  6986 ;; This function is called by:
  6987 ;;		_main
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           
  6992                           ;psect for function _IOInit
  6993  0BB8                     _IOInit:	
  6994                           
  6995                           ;do_am.c: 55: (TRISBbits.TRISB2 = 1);
  6996                           
  6997                           ;incstack = 0
  6998                           ; Regs used in _IOInit: []
  6999  0BB8  1683               	bsf	3,5	;RP0=1, select bank1
  7000  0BB9  1303               	bcf	3,6	;RP1=0, select bank1
  7001  0BBA  1506               	bsf	6,2	;volatile
  7002                           
  7003                           ;do_am.c: 56: ANSELHbits.ANS8 = 0;
  7004  0BBB  1683               	bsf	3,5	;RP0=1, select bank3
  7005  0BBC  1703               	bsf	3,6	;RP1=1, select bank3
  7006  0BBD  1009               	bcf	9,0	;volatile
  7007                           
  7008                           ;do_am.c: 58: (TRISBbits.TRISB0 = 1);
  7009  0BBE  1683               	bsf	3,5	;RP0=1, select bank1
  7010  0BBF  1303               	bcf	3,6	;RP1=0, select bank1
  7011  0BC0  1406               	bsf	6,0	;volatile
  7012                           
  7013                           ;do_am.c: 59: ANSELHbits.ANS12 = 0;
  7014  0BC1  1683               	bsf	3,5	;RP0=1, select bank3
  7015  0BC2  1703               	bsf	3,6	;RP1=1, select bank3
  7016  0BC3  1209               	bcf	9,4	;volatile
  7017                           
  7018                           ;do_am.c: 61: INTCONbits.GIE = 1;
  7019  0BC4  178B               	bsf	11,7	;volatile
  7020                           
  7021                           ;do_am.c: 62: INTCONbits.INTE = 1;
  7022  0BC5  160B               	bsf	11,4	;volatile
  7023                           
  7024                           ;do_am.c: 63: INTCONbits.INTF = 0;
  7025  0BC6  108B               	bcf	11,1	;volatile
  7026                           
  7027                           ;do_am.c: 64: OPTION_REGbits.INTEDG = 0;
  7028  0BC7  1683               	bsf	3,5	;RP0=1, select bank1
  7029  0BC8  1303               	bcf	3,6	;RP1=0, select bank1
  7030  0BC9  1301               	bcf	1,6	;volatile
  7031                           
  7032                           ;do_am.c: 66: (TRISAbits.TRISA0 = 1);
  7033  0BCA  1405               	bsf	5,0	;volatile
  7034                           
  7035                           ;do_am.c: 67: ANSELbits.ANS0 = 0;
  7036  0BCB  1683               	bsf	3,5	;RP0=1, select bank3
  7037  0BCC  1703               	bsf	3,6	;RP1=1, select bank3
  7038  0BCD  1008               	bcf	8,0	;volatile
  7039                           
  7040                           ;do_am.c: 69: (TRISAbits.TRISA1 = 1);
  7041  0BCE  1683               	bsf	3,5	;RP0=1, select bank1
  7042  0BCF  1303               	bcf	3,6	;RP1=0, select bank1
  7043  0BD0  1485               	bsf	5,1	;volatile
  7044                           
  7045                           ;do_am.c: 70: ANSELbits.ANS1 = 0;
  7046  0BD1  1683               	bsf	3,5	;RP0=1, select bank3
  7047  0BD2  1703               	bsf	3,6	;RP1=1, select bank3
  7048  0BD3  1088               	bcf	8,1	;volatile
  7049                           
  7050                           ;do_am.c: 71: (TRISAbits.TRISA2 = 1);
  7051  0BD4  1683               	bsf	3,5	;RP0=1, select bank1
  7052  0BD5  1303               	bcf	3,6	;RP1=0, select bank1
  7053  0BD6  1505               	bsf	5,2	;volatile
  7054                           
  7055                           ;do_am.c: 72: ANSELbits.ANS2 = 0;
  7056  0BD7  1683               	bsf	3,5	;RP0=1, select bank3
  7057  0BD8  1703               	bsf	3,6	;RP1=1, select bank3
  7058  0BD9  1108               	bcf	8,2	;volatile
  7059                           
  7060                           ;do_am.c: 73: (TRISAbits.TRISA3 = 1);
  7061  0BDA  1683               	bsf	3,5	;RP0=1, select bank1
  7062  0BDB  1303               	bcf	3,6	;RP1=0, select bank1
  7063  0BDC  1585               	bsf	5,3	;volatile
  7064                           
  7065                           ;do_am.c: 74: ANSELbits.ANS3 = 0;
  7066  0BDD  1683               	bsf	3,5	;RP0=1, select bank3
  7067  0BDE  1703               	bsf	3,6	;RP1=1, select bank3
  7068  0BDF  1188               	bcf	8,3	;volatile
  7069                           
  7070                           ;do_am.c: 76: (TRISBbits.TRISB1 = 0);
  7071  0BE0  1683               	bsf	3,5	;RP0=1, select bank1
  7072  0BE1  1303               	bcf	3,6	;RP1=0, select bank1
  7073  0BE2  1086               	bcf	6,1	;volatile
  7074                           
  7075                           ;do_am.c: 77: ANSELHbits.ANS10 = 0;
  7076  0BE3  1683               	bsf	3,5	;RP0=1, select bank3
  7077  0BE4  1703               	bsf	3,6	;RP1=1, select bank3
  7078  0BE5  1109               	bcf	9,2	;volatile
  7079                           
  7080                           ;do_am.c: 79: (TRISAbits.TRISA4 = 0);
  7081  0BE6  1683               	bsf	3,5	;RP0=1, select bank1
  7082  0BE7  1303               	bcf	3,6	;RP1=0, select bank1
  7083  0BE8  1205               	bcf	5,4	;volatile
  7084                           
  7085                           ;do_am.c: 81: (TRISAbits.TRISA5 = 0);
  7086  0BE9  1285               	bcf	5,5	;volatile
  7087                           
  7088                           ;do_am.c: 82: ANSELbits.ANS4 = 0;
  7089  0BEA  1683               	bsf	3,5	;RP0=1, select bank3
  7090  0BEB  1703               	bsf	3,6	;RP1=1, select bank3
  7091  0BEC  1208               	bcf	8,4	;volatile
  7092                           
  7093                           ;do_am.c: 84: (TRISAbits.TRISA6 = 0);
  7094  0BED  1683               	bsf	3,5	;RP0=1, select bank1
  7095  0BEE  1303               	bcf	3,6	;RP1=0, select bank1
  7096  0BEF  1305               	bcf	5,6	;volatile
  7097                           
  7098                           ;do_am.c: 86: (TRISAbits.TRISA7 = 0);
  7099  0BF0  1385               	bcf	5,7	;volatile
  7100                           
  7101                           ;do_am.c: 88: RB1 = 1;
  7102  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  7103  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  7104  0BF3  1486               	bsf	6,1	;volatile
  7105                           
  7106                           ;do_am.c: 91: (TRISBbits.TRISB4 = 1);
  7107  0BF4  1683               	bsf	3,5	;RP0=1, select bank1
  7108  0BF5  1303               	bcf	3,6	;RP1=0, select bank1
  7109  0BF6  1606               	bsf	6,4	;volatile
  7110                           
  7111                           ;do_am.c: 92: ANSELHbits.ANS11 = 0;
  7112  0BF7  1683               	bsf	3,5	;RP0=1, select bank3
  7113  0BF8  1703               	bsf	3,6	;RP1=1, select bank3
  7114  0BF9  1189               	bcf	9,3	;volatile
  7115                           
  7116                           ;do_am.c: 94: (TRISBbits.TRISB6 = 1);
  7117  0BFA  1683               	bsf	3,5	;RP0=1, select bank1
  7118  0BFB  1303               	bcf	3,6	;RP1=0, select bank1
  7119  0BFC  1706               	bsf	6,6	;volatile
  7120                           
  7121                           ;do_am.c: 96: (TRISBbits.TRISB5 = 1);
  7122  0BFD  1686               	bsf	6,5	;volatile
  7123                           
  7124                           ;do_am.c: 97: ANSELHbits.ANS13 = 0;
  7125  0BFE  1683               	bsf	3,5	;RP0=1, select bank3
  7126  0BFF  1703               	bsf	3,6	;RP1=1, select bank3
  7127  0C00  1289               	bcf	9,5	;volatile
  7128                           
  7129                           ;do_am.c: 99: (TRISBbits.TRISB7 = 1);
  7130  0C01  1683               	bsf	3,5	;RP0=1, select bank1
  7131  0C02  1303               	bcf	3,6	;RP1=0, select bank1
  7132  0C03  1786               	bsf	6,7	;volatile
  7133  0C04  0008               	return
  7134  0C05                     __end_of_IOInit:	
  7135                           
  7136                           	psect	text39
  7137  0CF8                     __ptext39:	
  7138 ;; *************** function _ConnInit *****************
  7139 ;; Defined at:
  7140 ;;		line 41 in file "do_am.c"
  7141 ;; Parameters:    Size  Location     Type
  7142 ;;		None
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;  i               1    6[BANK0 ] unsigned char 
  7145 ;; Return value:  Size  Location     Type
  7146 ;;                  1    wreg      void 
  7147 ;; Registers used:
  7148 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7154 ;;      Params:         0       0       0       0       0
  7155 ;;      Locals:         0       1       0       0       0
  7156 ;;      Temps:          0       2       0       0       0
  7157 ;;      Totals:         0       3       0       0       0
  7158 ;;Total ram usage:        3 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; Hardware stack levels required when called:    4
  7161 ;; This function calls:
  7162 ;;		___bmul
  7163 ;; This function is called by:
  7164 ;;		_main
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           
  7169                           ;psect for function _ConnInit
  7170  0CF8                     _ConnInit:	
  7171                           
  7172                           ;do_am.c: 43: for(uint8_t i = 0; i < 8; i++)
  7173                           
  7174                           ;incstack = 0
  7175                           ; Regs used in _ConnInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7176  0CF8  1283               	bcf	3,5	;RP0=0, select bank0
  7177  0CF9  1303               	bcf	3,6	;RP1=0, select bank0
  7178  0CFA  01A6               	clrf	ConnInit@i
  7179  0CFB                     L7:	
  7180  0CFB  3008               	movlw	8
  7181  0CFC  0226               	subwf	ConnInit@i,w
  7182  0CFD  1803               	btfsc	3,0
  7183  0CFE  0008               	return
  7184                           
  7185                           ;do_am.c: 44: {
  7186                           ;do_am.c: 45: client_conn[i].from = 8;
  7187  0CFF  3008               	movlw	8
  7188  0D00  00A4               	movwf	??_ConnInit
  7189  0D01  3005               	movlw	5
  7190  0D02  00A5               	movwf	??_ConnInit+1
  7191  0D03  0825               	movf	??_ConnInit+1,w
  7192  0D04  00A0               	movwf	___bmul@multiplicand
  7193  0D05  0826               	movf	ConnInit@i,w
  7194  0D06  120A  158A  2086  120A  158A  	fcall	___bmul
  7195  0D0B  3E90               	addlw	(low (_client_conn| (0+256)))& (0+255)
  7196  0D0C  0084               	movwf	4
  7197  0D0D  1283               	bcf	3,5	;RP0=0, select bank0
  7198  0D0E  1303               	bcf	3,6	;RP1=0, select bank0
  7199  0D0F  0824               	movf	??_ConnInit,w
  7200  0D10  1783               	bsf	3,7	;select IRP bank3
  7201  0D11  0080               	movwf	0
  7202                           
  7203                           ;do_am.c: 46: client_conn[i].to = 255;
  7204  0D12  30FF               	movlw	255
  7205  0D13  00A4               	movwf	??_ConnInit
  7206  0D14  3005               	movlw	5
  7207  0D15  00A5               	movwf	??_ConnInit+1
  7208  0D16  0825               	movf	??_ConnInit+1,w
  7209  0D17  00A0               	movwf	___bmul@multiplicand
  7210  0D18  0826               	movf	ConnInit@i,w
  7211  0D19  120A  158A  2086  120A  158A  	fcall	___bmul
  7212  0D1E  3E01               	addlw	1
  7213  0D1F  3E90               	addlw	(low (_client_conn| (0+256)))& (0+255)
  7214  0D20  0084               	movwf	4
  7215  0D21  1283               	bcf	3,5	;RP0=0, select bank0
  7216  0D22  1303               	bcf	3,6	;RP1=0, select bank0
  7217  0D23  0824               	movf	??_ConnInit,w
  7218  0D24  1783               	bsf	3,7	;select IRP bank3
  7219  0D25  0080               	movwf	0
  7220                           
  7221                           ;do_am.c: 47: client_conn[i].msgid = 0;
  7222  0D26  3005               	movlw	5
  7223  0D27  00A4               	movwf	??_ConnInit
  7224  0D28  0824               	movf	??_ConnInit,w
  7225  0D29  00A0               	movwf	___bmul@multiplicand
  7226  0D2A  0826               	movf	ConnInit@i,w
  7227  0D2B  120A  158A  2086  120A  158A  	fcall	___bmul
  7228  0D30  3E02               	addlw	2
  7229  0D31  3E90               	addlw	(low (_client_conn| (0+256)))& (0+255)
  7230  0D32  0084               	movwf	4
  7231  0D33  1783               	bsf	3,7	;select IRP bank3
  7232  0D34  0180               	clrf	0
  7233                           
  7234                           ;do_am.c: 48: client_conn[i].available = 0;
  7235  0D35  3005               	movlw	5
  7236  0D36  1283               	bcf	3,5	;RP0=0, select bank0
  7237  0D37  1303               	bcf	3,6	;RP1=0, select bank0
  7238  0D38  00A4               	movwf	??_ConnInit
  7239  0D39  0824               	movf	??_ConnInit,w
  7240  0D3A  00A0               	movwf	___bmul@multiplicand
  7241  0D3B  0826               	movf	ConnInit@i,w
  7242  0D3C  120A  158A  2086  120A  158A  	fcall	___bmul
  7243  0D41  3E04               	addlw	4
  7244  0D42  3E90               	addlw	(low (_client_conn| (0+256)))& (0+255)
  7245  0D43  0084               	movwf	4
  7246  0D44  1783               	bsf	3,7	;select IRP bank3
  7247  0D45  0180               	clrf	0
  7248  0D46  3001               	movlw	1
  7249  0D47  1283               	bcf	3,5	;RP0=0, select bank0
  7250  0D48  1303               	bcf	3,6	;RP1=0, select bank0
  7251  0D49  00A4               	movwf	??_ConnInit
  7252  0D4A  0824               	movf	??_ConnInit,w
  7253  0D4B  07A6               	addwf	ConnInit@i,f
  7254  0D4C  2CFB               	goto	L7
  7255  0D4D                     __end_of_ConnInit:	
  7256                           
  7257                           	psect	text40
  7258  0886                     __ptext40:	
  7259 ;; *************** function ___bmul *****************
  7260 ;; Defined at:
  7261 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
  7262 ;; Parameters:    Size  Location     Type
  7263 ;;  multiplier      1    wreg     unsigned char 
  7264 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7267 ;;  product         1    2[BANK0 ] unsigned char 
  7268 ;; Return value:  Size  Location     Type
  7269 ;;                  1    wreg      unsigned char 
  7270 ;; Registers used:
  7271 ;;		wreg, status,2, status,0
  7272 ;; Tracked objects:
  7273 ;;		On entry : 0/0
  7274 ;;		On exit  : 0/0
  7275 ;;		Unchanged: 0/0
  7276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7277 ;;      Params:         0       1       0       0       0
  7278 ;;      Locals:         0       2       0       0       0
  7279 ;;      Temps:          0       1       0       0       0
  7280 ;;      Totals:         0       4       0       0       0
  7281 ;;Total ram usage:        4 bytes
  7282 ;; Hardware stack levels used:    1
  7283 ;; Hardware stack levels required when called:    3
  7284 ;; This function calls:
  7285 ;;		Nothing
  7286 ;; This function is called by:
  7287 ;;		_ConnInit
  7288 ;;		_ShowMenu
  7289 ;;		_SaveMenuItem
  7290 ;;		_LoadMenuItem
  7291 ;;		_ValueInc
  7292 ;;		_ValueDec
  7293 ;;		_find_conn_entry
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           
  7298                           ;psect for function ___bmul
  7299  0886                     ___bmul:	
  7300                           
  7301                           ;incstack = 0
  7302                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7303                           ;___bmul@multiplier stored from wreg
  7304  0886  1283               	bcf	3,5	;RP0=0, select bank0
  7305  0887  1303               	bcf	3,6	;RP1=0, select bank0
  7306  0888  00A3               	movwf	___bmul@multiplier
  7307  0889  01A2               	clrf	___bmul@product
  7308  088A                     l2933:	
  7309  088A  1C23               	btfss	___bmul@multiplier,0
  7310  088B  2890               	goto	l2937
  7311  088C  0820               	movf	___bmul@multiplicand,w
  7312  088D  00A1               	movwf	??___bmul
  7313  088E  0821               	movf	??___bmul,w
  7314  088F  07A2               	addwf	___bmul@product,f
  7315  0890                     l2937:	
  7316  0890  1003               	clrc
  7317  0891  0DA0               	rlf	___bmul@multiplicand,f
  7318  0892  1003               	clrc
  7319  0893  0CA3               	rrf	___bmul@multiplier,f
  7320  0894  0823               	movf	___bmul@multiplier,w
  7321  0895  1D03               	btfss	3,2
  7322  0896  288A               	goto	l2933
  7323  0897  0822               	movf	___bmul@product,w
  7324  0898  0008               	return
  7325  0899                     __end_of___bmul:	
  7326                           
  7327                           	psect	text41
  7328  0A60                     __ptext41:	
  7329 ;; *************** function _ClearMenu *****************
  7330 ;; Defined at:
  7331 ;;		line 28 in file "menu.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;		None
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;  i               1   19[BANK0 ] char 
  7336 ;;  count           1   18[BANK0 ] char 
  7337 ;; Return value:  Size  Location     Type
  7338 ;;                  1    wreg      void 
  7339 ;; Registers used:
  7340 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7346 ;;      Params:         0       0       0       0       0
  7347 ;;      Locals:         0       2       0       0       0
  7348 ;;      Temps:          0       1       0       0       0
  7349 ;;      Totals:         0       3       0       0       0
  7350 ;;Total ram usage:        3 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:    6
  7353 ;; This function calls:
  7354 ;;		_LCDByte
  7355 ;;		_LCDGotoXY
  7356 ;;		_LCDWriteString
  7357 ;; This function is called by:
  7358 ;;		_main
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           
  7363                           ;psect for function _ClearMenu
  7364  0A60                     _ClearMenu:	
  7365                           
  7366                           ;menu.c: 30: { LCDGotoXY(0,0); int8_t count = LCDWriteString(""); for(int8_t i = count +
      +                           0; i < 16; i++) { (LCDByte(' ',1)); } };
  7367                           
  7368                           ;incstack = 0
  7369                           ; Regs used in _ClearMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7370  0A60  1283               	bcf	3,5	;RP0=0, select bank0
  7371  0A61  1303               	bcf	3,6	;RP1=0, select bank0
  7372  0A62  01AC               	clrf	LCDGotoXY@y
  7373  0A63  3000               	movlw	0
  7374  0A64  120A  158A  21B4  120A  158A  	fcall	_LCDGotoXY
  7375  0A69  305C               	movlw	(low (((STR_21+4)-__stringbase)| (0+32768)))& (0+255)
  7376  0A6A  1283               	bcf	3,5	;RP0=0, select bank0
  7377  0A6B  1303               	bcf	3,6	;RP1=0, select bank0
  7378  0A6C  00AC               	movwf	LCDWriteString@msg
  7379  0A6D  3080               	movlw	128
  7380  0A6E  00AD               	movwf	LCDWriteString@msg+1
  7381  0A6F  120A  158A  2662  120A  158A  	fcall	_LCDWriteString
  7382  0A74  1283               	bcf	3,5	;RP0=0, select bank0
  7383  0A75  1303               	bcf	3,6	;RP1=0, select bank0
  7384  0A76  00B1               	movwf	??_ClearMenu
  7385  0A77  0831               	movf	??_ClearMenu,w
  7386  0A78  00B2               	movwf	ClearMenu@count
  7387  0A79  0832               	movf	ClearMenu@count,w
  7388  0A7A  00B1               	movwf	??_ClearMenu
  7389  0A7B  0831               	movf	??_ClearMenu,w
  7390  0A7C  00B3               	movwf	ClearMenu@i
  7391  0A7D                     L8:	
  7392  0A7D  0833               	movf	ClearMenu@i,w
  7393  0A7E  3A80               	xorlw	128
  7394  0A7F  3E70               	addlw	-144
  7395  0A80  1803               	btfsc	3,0
  7396  0A81  0008               	return
  7397  0A82  01A5               	clrf	LCDByte@isdata
  7398  0A83  0AA5               	incf	LCDByte@isdata,f
  7399  0A84  3020               	movlw	32
  7400  0A85  120A  118A  27A8  120A  158A  	fcall	_LCDByte
  7401  0A8A  3001               	movlw	1
  7402  0A8B  1283               	bcf	3,5	;RP0=0, select bank0
  7403  0A8C  1303               	bcf	3,6	;RP1=0, select bank0
  7404  0A8D  00B1               	movwf	??_ClearMenu
  7405  0A8E  0831               	movf	??_ClearMenu,w
  7406  0A8F  07B3               	addwf	ClearMenu@i,f
  7407  0A90  2A7D               	goto	L8
  7408  0A91                     __end_of_ClearMenu:	
  7409                           
  7410                           	psect	text42
  7411  0E62                     __ptext42:	
  7412 ;; *************** function _LCDWriteString *****************
  7413 ;; Defined at:
  7414 ;;		line 283 in file "lcd_hd44780_pic16.c"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;  msg             2   12[BANK0 ] PTR const unsigned char 
  7417 ;;		 -> STR_25(1), STR_24(5), STR_23(5), STR_22(5), 
  7418 ;;		 -> STR_21(5), STR_20(5), STR_19(3), STR_18(12), 
  7419 ;;		 -> STR_17(13), STR_16(10), STR_15(10), STR_14(1), 
  7420 ;;		 -> dump_conn@s(32), STR_12(1), STR_10(1), STR_8(1), 
  7421 ;;		 -> STR_6(1), STR_4(1), STR_2(1), sdebug(32), 
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;  cc              1   16[BANK0 ] char 
  7424 ;;  count           1   15[BANK0 ] char 
  7425 ;; Return value:  Size  Location     Type
  7426 ;;                  1    wreg      char 
  7427 ;; Registers used:
  7428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7434 ;;      Params:         0       2       0       0       0
  7435 ;;      Locals:         0       2       0       0       0
  7436 ;;      Temps:          0       1       0       0       0
  7437 ;;      Totals:         0       5       0       0       0
  7438 ;;Total ram usage:        5 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; Hardware stack levels required when called:    5
  7441 ;; This function calls:
  7442 ;;		_LCDByte
  7443 ;; This function is called by:
  7444 ;;		_debug_1
  7445 ;;		_main
  7446 ;;		_ShowMenu
  7447 ;;		_ClearMenu
  7448 ;;		_debug_2
  7449 ;;		_debug_3
  7450 ;;		_debug_4
  7451 ;;		_debug_5
  7452 ;;		_dump_msg
  7453 ;;		_dump_conn
  7454 ;; This function uses a non-reentrant model
  7455 ;;
  7456                           
  7457                           
  7458                           ;psect for function _LCDWriteString
  7459  0E62                     _LCDWriteString:	
  7460                           
  7461                           ;lcd_hd44780_pic16.c: 285: int8_t count = 0;
  7462                           
  7463                           ;incstack = 0
  7464 ;; using string table level
  7465                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7466  0E62  1283               	bcf	3,5	;RP0=0, select bank0
  7467  0E63  1303               	bcf	3,6	;RP1=0, select bank0
  7468  0E64  01AF               	clrf	LCDWriteString@count
  7469  0E65                     l2637:	
  7470                           ;lcd_hd44780_pic16.c: 286: while(*msg!='\0')
  7471                           
  7472  0E65  082D               	movf	LCDWriteString@msg+1,w
  7473  0E66  00FF               	movwf	127
  7474  0E67  082C               	movf	LCDWriteString@msg,w
  7475  0E68  0084               	movwf	4
  7476  0E69  120A  118A  2631  120A  158A  	fcall	stringtab
  7477  0E6E  3A00               	xorlw	0
  7478  0E6F  1903               	btfsc	3,2
  7479  0E70  2EC2               	goto	l2639
  7480                           
  7481                           ;lcd_hd44780_pic16.c: 287: {
  7482                           ;lcd_hd44780_pic16.c: 289: if(*msg=='%')
  7483  0E71  082D               	movf	LCDWriteString@msg+1,w
  7484  0E72  00FF               	movwf	127
  7485  0E73  082C               	movf	LCDWriteString@msg,w
  7486  0E74  0084               	movwf	4
  7487  0E75  120A  118A  2631  120A  158A  	fcall	stringtab
  7488  0E7A  3A25               	xorlw	37
  7489  0E7B  1D03               	skipz
  7490  0E7C  2EA7               	goto	l2631
  7491                           
  7492                           ;lcd_hd44780_pic16.c: 290: {
  7493                           ;lcd_hd44780_pic16.c: 291: msg++;
  7494  0E7D  3001               	movlw	1
  7495  0E7E  07AC               	addwf	LCDWriteString@msg,f
  7496  0E7F  1803               	skipnc
  7497  0E80  0AAD               	incf	LCDWriteString@msg+1,f
  7498                           
  7499                           ;lcd_hd44780_pic16.c: 292: int8_t cc=*msg-'0';
  7500  0E81  082D               	movf	LCDWriteString@msg+1,w
  7501  0E82  00FF               	movwf	127
  7502  0E83  082C               	movf	LCDWriteString@msg,w
  7503  0E84  0084               	movwf	4
  7504  0E85  120A  118A  2631  120A  158A  	fcall	stringtab
  7505  0E8A  3ED0               	addlw	-48
  7506  0E8B  00AE               	movwf	??_LCDWriteString
  7507  0E8C  082E               	movf	??_LCDWriteString,w
  7508  0E8D  00B0               	movwf	LCDWriteString@cc
  7509                           
  7510                           ;lcd_hd44780_pic16.c: 294: if(cc>=0 && cc<=7)
  7511  0E8E  1BB0               	btfsc	LCDWriteString@cc,7
  7512  0E8F  2E99               	goto	l2623
  7513  0E90  0830               	movf	LCDWriteString@cc,w
  7514  0E91  3A80               	xorlw	128
  7515  0E92  3E78               	addlw	-136
  7516  0E93  1803               	skipnc
  7517  0E94  2E99               	goto	l2623
  7518                           
  7519                           ;lcd_hd44780_pic16.c: 295: {
  7520                           ;lcd_hd44780_pic16.c: 296: (LCDByte(cc,1));
  7521  0E95  01A5               	clrf	LCDByte@isdata
  7522  0E96  0AA5               	incf	LCDByte@isdata,f
  7523  0E97  0830               	movf	LCDWriteString@cc,w
  7524  0E98  2EB2               	goto	L9
  7525  0E99                     l2623:	
  7526                           ;lcd_hd44780_pic16.c: 298: }
  7527                           
  7528                           ;lcd_hd44780_pic16.c: 297: count++;
  7529                           
  7530                           
  7531                           ;lcd_hd44780_pic16.c: 299: else
  7532                           ;lcd_hd44780_pic16.c: 300: {
  7533                           ;lcd_hd44780_pic16.c: 301: (LCDByte('%',1));
  7534  0E99  01A5               	clrf	LCDByte@isdata
  7535  0E9A  0AA5               	incf	LCDByte@isdata,f
  7536  0E9B  3025               	movlw	37
  7537  0E9C  120A  118A  27A8  120A  158A  	fcall	_LCDByte
  7538                           
  7539                           ;lcd_hd44780_pic16.c: 302: count++;
  7540  0EA1  3001               	movlw	1
  7541  0EA2  1283               	bcf	3,5	;RP0=0, select bank0
  7542  0EA3  1303               	bcf	3,6	;RP1=0, select bank0
  7543  0EA4  00AE               	movwf	??_LCDWriteString
  7544  0EA5  082E               	movf	??_LCDWriteString,w
  7545  0EA6  07AF               	addwf	LCDWriteString@count,f
  7546  0EA7                     l2631:	
  7547                           ;lcd_hd44780_pic16.c: 305: }
  7548                           ;lcd_hd44780_pic16.c: 306: }
  7549                           
  7550                           ;lcd_hd44780_pic16.c: 304: count++;
  7551                           
  7552                           ;lcd_hd44780_pic16.c: 303: (LCDByte(*msg,1));
  7553                           
  7554                           
  7555                           ;lcd_hd44780_pic16.c: 307: else
  7556                           ;lcd_hd44780_pic16.c: 308: {
  7557                           ;lcd_hd44780_pic16.c: 309: (LCDByte(*msg,1));
  7558  0EA7  01A5               	clrf	LCDByte@isdata
  7559  0EA8  0AA5               	incf	LCDByte@isdata,f
  7560  0EA9  082D               	movf	LCDWriteString@msg+1,w
  7561  0EAA  00FF               	movwf	127
  7562  0EAB  082C               	movf	LCDWriteString@msg,w
  7563  0EAC  0084               	movwf	4
  7564  0EAD  120A  118A  2631  120A  158A  	fcall	stringtab
  7565  0EB2                     L9:	
  7566  0EB2  120A  118A  27A8  120A  158A  	fcall	_LCDByte
  7567                           
  7568                           ;lcd_hd44780_pic16.c: 310: count++;
  7569  0EB7  3001               	movlw	1
  7570  0EB8  1283               	bcf	3,5	;RP0=0, select bank0
  7571  0EB9  1303               	bcf	3,6	;RP1=0, select bank0
  7572  0EBA  00AE               	movwf	??_LCDWriteString
  7573  0EBB  082E               	movf	??_LCDWriteString,w
  7574  0EBC  07AF               	addwf	LCDWriteString@count,f
  7575                           
  7576                           ;lcd_hd44780_pic16.c: 311: }
  7577                           ;lcd_hd44780_pic16.c: 312: msg++;
  7578  0EBD  3001               	movlw	1
  7579  0EBE  07AC               	addwf	LCDWriteString@msg,f
  7580  0EBF  1803               	skipnc
  7581  0EC0  0AAD               	incf	LCDWriteString@msg+1,f
  7582  0EC1  2E65               	goto	l2637
  7583  0EC2                     l2639:	
  7584                           
  7585                           ;lcd_hd44780_pic16.c: 313: }
  7586                           ;lcd_hd44780_pic16.c: 315: return count;
  7587  0EC2  082F               	movf	LCDWriteString@count,w
  7588  0EC3  0008               	return
  7589  0EC4                     __end_of_LCDWriteString:	
  7590                           
  7591                           	psect	text43
  7592  09B4                     __ptext43:	
  7593 ;; *************** function _LCDGotoXY *****************
  7594 ;; Defined at:
  7595 ;;		line 367 in file "lcd_hd44780_pic16.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;  x               1    wreg     unsigned char 
  7598 ;;  y               1   12[BANK0 ] unsigned char 
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;  x               1   14[BANK0 ] unsigned char 
  7601 ;; Return value:  Size  Location     Type
  7602 ;;                  1    wreg      void 
  7603 ;; Registers used:
  7604 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7610 ;;      Params:         0       1       0       0       0
  7611 ;;      Locals:         0       1       0       0       0
  7612 ;;      Temps:          0       1       0       0       0
  7613 ;;      Totals:         0       3       0       0       0
  7614 ;;Total ram usage:        3 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:    5
  7617 ;; This function calls:
  7618 ;;		_LCDByte
  7619 ;; This function is called by:
  7620 ;;		_debug_1
  7621 ;;		_main
  7622 ;;		_ShowMenu
  7623 ;;		_ClearMenu
  7624 ;;		_debug_2
  7625 ;;		_debug_3
  7626 ;;		_debug_4
  7627 ;;		_debug_5
  7628 ;;		_dump_msg
  7629 ;;		_dump_conn
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           
  7634                           ;psect for function _LCDGotoXY
  7635  09B4                     _LCDGotoXY:	
  7636                           
  7637                           ;incstack = 0
  7638                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7639                           ;LCDGotoXY@x stored from wreg
  7640  09B4  1283               	bcf	3,5	;RP0=0, select bank0
  7641  09B5  1303               	bcf	3,6	;RP1=0, select bank0
  7642  09B6  00AE               	movwf	LCDGotoXY@x
  7643                           
  7644                           ;lcd_hd44780_pic16.c: 369: if(x>=20) return;
  7645  09B7  3014               	movlw	20
  7646  09B8  022E               	subwf	LCDGotoXY@x,w
  7647  09B9  1803               	btfsc	3,0
  7648  09BA  0008               	return
  7649  09BB  29C5               	goto	l2603
  7650  09BC                     l396:	
  7651                           ;lcd_hd44780_pic16.c: 377: case 1:
  7652                           
  7653                           ;lcd_hd44780_pic16.c: 376: break;
  7654                           
  7655                           ;lcd_hd44780_pic16.c: 374: {
  7656                           ;lcd_hd44780_pic16.c: 375: case 0:
  7657                           
  7658                           ;lcd_hd44780_pic16.c: 373: switch(y)
  7659                           
  7660                           
  7661                           ;lcd_hd44780_pic16.c: 378: x|=0b01000000;
  7662  09BC  172E               	bsf	LCDGotoXY@x,6
  7663                           
  7664                           ;lcd_hd44780_pic16.c: 379: break;
  7665  09BD  29D3               	goto	l395
  7666  09BE                     l2597:	
  7667                           ;lcd_hd44780_pic16.c: 380: case 2:
  7668                           
  7669                           
  7670                           ;lcd_hd44780_pic16.c: 381: x+=0x14;
  7671  09BE  3014               	movlw	20
  7672  09BF  29C1               	goto	L10
  7673  09C0                     l2599:	
  7674                           ;lcd_hd44780_pic16.c: 383: case 3:
  7675                           
  7676                           ;lcd_hd44780_pic16.c: 382: break;
  7677                           
  7678                           
  7679                           ;lcd_hd44780_pic16.c: 384: x+=0x54;
  7680  09C0  3054               	movlw	84
  7681  09C1                     L10:	
  7682  09C1  00AD               	movwf	??_LCDGotoXY
  7683  09C2  082D               	movf	??_LCDGotoXY,w
  7684  09C3  07AE               	addwf	LCDGotoXY@x,f
  7685                           
  7686                           ;lcd_hd44780_pic16.c: 386: }
  7687                           
  7688                           ;lcd_hd44780_pic16.c: 385: break;
  7689  09C4  29D3               	goto	l395
  7690  09C5                     l2603:	
  7691  09C5  082C               	movf	LCDGotoXY@y,w
  7692                           
  7693                           ; Switch size 1, requested type "space"
  7694                           ; Number of cases is 4, Range of values is 0 to 3
  7695                           ; switch strategies available:
  7696                           ; Name         Instructions Cycles
  7697                           ; simple_byte           13     7 (average)
  7698                           ; direct_byte           20     8 (fixed)
  7699                           ; jumptable            260     6 (fixed)
  7700                           ;	Chosen strategy is simple_byte
  7701  09C6  3A00               	xorlw	0	; case 0
  7702  09C7  1903               	skipnz
  7703  09C8  29D3               	goto	l395
  7704  09C9  3A01               	xorlw	1	; case 1
  7705  09CA  1903               	skipnz
  7706  09CB  29BC               	goto	l396
  7707  09CC  3A03               	xorlw	3	; case 2
  7708  09CD  1903               	skipnz
  7709  09CE  29BE               	goto	l2597
  7710  09CF  3A01               	xorlw	1	; case 3
  7711  09D0  1903               	skipnz
  7712  09D1  29C0               	goto	l2599
  7713  09D2  29D3               	goto	l395
  7714  09D3                     l395:	
  7715                           
  7716                           ;lcd_hd44780_pic16.c: 408: x|=0b10000000;
  7717  09D3  17AE               	bsf	LCDGotoXY@x,7
  7718                           
  7719                           ;lcd_hd44780_pic16.c: 409: (LCDByte(x,0));
  7720  09D4  01A5               	clrf	LCDByte@isdata
  7721  09D5  082E               	movf	LCDGotoXY@x,w
  7722  09D6  120A  118A  27A8   	fcall	_LCDByte
  7723  09D9  0008               	return
  7724  09DA                     __end_of_LCDGotoXY:	
  7725                           
  7726                           	psect	text44
  7727  07A8                     __ptext44:	
  7728 ;; *************** function _LCDByte *****************
  7729 ;; Defined at:
  7730 ;;		line 80 in file "lcd_hd44780_pic16.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;  c               1    wreg     unsigned char 
  7733 ;;  isdata          1    5[BANK0 ] unsigned char 
  7734 ;; Auto vars:     Size  Location     Type
  7735 ;;  c               1   10[BANK0 ] unsigned char 
  7736 ;;  temp            1   11[BANK0 ] unsigned char 
  7737 ;;  ln              1    9[BANK0 ] unsigned char 
  7738 ;;  hn              1    8[BANK0 ] unsigned char 
  7739 ;; Return value:  Size  Location     Type
  7740 ;;                  1    wreg      void 
  7741 ;; Registers used:
  7742 ;;		wreg, status,2, status,0, pclath, cstack
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7748 ;;      Params:         0       1       0       0       0
  7749 ;;      Locals:         0       4       0       0       0
  7750 ;;      Temps:          0       2       0       0       0
  7751 ;;      Totals:         0       7       0       0       0
  7752 ;;Total ram usage:        7 bytes
  7753 ;; Hardware stack levels used:    1
  7754 ;; Hardware stack levels required when called:    4
  7755 ;; This function calls:
  7756 ;;		_LCDBusyLoop
  7757 ;; This function is called by:
  7758 ;;		_debug_1
  7759 ;;		_main
  7760 ;;		_LCDSetStyle
  7761 ;;		_LCDInit
  7762 ;;		_LCDWriteString
  7763 ;;		_LCDWriteInt
  7764 ;;		_LCDGotoXY
  7765 ;;		_ShowMenu
  7766 ;;		_ClearMenu
  7767 ;;		_debug_2
  7768 ;;		_debug_3
  7769 ;;		_debug_4
  7770 ;;		_debug_5
  7771 ;;		_dump_msg
  7772 ;;		_dump_conn
  7773 ;; This function uses a non-reentrant model
  7774 ;;
  7775                           
  7776                           
  7777                           ;psect for function _LCDByte
  7778  07A8                     _LCDByte:	
  7779                           
  7780                           ;incstack = 0
  7781                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  7782                           ;LCDByte@c stored from wreg
  7783  07A8  1283               	bcf	3,5	;RP0=0, select bank0
  7784  07A9  1303               	bcf	3,6	;RP1=0, select bank0
  7785  07AA  00AA               	movwf	LCDByte@c
  7786                           
  7787                           ;lcd_hd44780_pic16.c: 89: uint8_t hn,ln;
  7788                           ;lcd_hd44780_pic16.c: 90: uint8_t temp;
  7789                           ;lcd_hd44780_pic16.c: 92: hn=c>>4;
  7790  07AB  082A               	movf	LCDByte@c,w
  7791  07AC  00A6               	movwf	??_LCDByte
  7792  07AD  3004               	movlw	4
  7793  07AE                     u2125:	
  7794  07AE  1003               	clrc
  7795  07AF  0CA6               	rrf	??_LCDByte,f
  7796  07B0  3EFF               	addlw	-1
  7797  07B1  1D03               	skipz
  7798  07B2  2FAE               	goto	u2125
  7799  07B3  0826               	movf	??_LCDByte,w
  7800  07B4  00A7               	movwf	??_LCDByte+1
  7801  07B5  0827               	movf	??_LCDByte+1,w
  7802  07B6  00A8               	movwf	LCDByte@hn
  7803                           
  7804                           ;lcd_hd44780_pic16.c: 93: ln=(c & 0x0F);
  7805  07B7  082A               	movf	LCDByte@c,w
  7806  07B8  390F               	andlw	15
  7807  07B9  00A6               	movwf	??_LCDByte
  7808  07BA  0826               	movf	??_LCDByte,w
  7809  07BB  00A9               	movwf	LCDByte@ln
  7810                           
  7811                           ;lcd_hd44780_pic16.c: 95: if(isdata==0)
  7812  07BC  0825               	movf	LCDByte@isdata,w
  7813  07BD  1D03               	btfss	3,2
  7814  07BE  2FC1               	goto	l346
  7815                           
  7816                           ;lcd_hd44780_pic16.c: 96: (RC1=0);
  7817  07BF  1087               	bcf	7,1	;volatile
  7818  07C0  2FC2               	goto	l347
  7819  07C1                     l346:	
  7820                           
  7821                           ;lcd_hd44780_pic16.c: 97: else
  7822                           ;lcd_hd44780_pic16.c: 98: (RC1=1);
  7823  07C1  1487               	bsf	7,1	;volatile
  7824  07C2                     l347:	
  7825                           
  7826                           ;lcd_hd44780_pic16.c: 100: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  7827  07C2  2FC3               	nop2	;2 cycle nop
  7828                           
  7829                           ;lcd_hd44780_pic16.c: 102: (RC3=1);
  7830  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  7831  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  7832  07C5  1587               	bsf	7,3	;volatile
  7833                           
  7834                           ;lcd_hd44780_pic16.c: 106: temp=(PORTC & (~(0X0F<<4)))|((hn<<4));
  7835  07C6  0828               	movf	LCDByte@hn,w
  7836  07C7  00A6               	movwf	??_LCDByte
  7837  07C8  3004               	movlw	4
  7838  07C9                     u2145:	
  7839  07C9  1003               	clrc
  7840  07CA  0DA6               	rlf	??_LCDByte,f
  7841  07CB  3EFF               	addlw	-1
  7842  07CC  1D03               	skipz
  7843  07CD  2FC9               	goto	u2145
  7844  07CE  0807               	movf	7,w	;volatile
  7845  07CF  390F               	andlw	15
  7846  07D0  0426               	iorwf	??_LCDByte,w
  7847  07D1  00A7               	movwf	??_LCDByte+1
  7848  07D2  0827               	movf	??_LCDByte+1,w
  7849  07D3  00AB               	movwf	LCDByte@temp
  7850                           
  7851                           ;lcd_hd44780_pic16.c: 107: PORTC=temp;
  7852  07D4  082B               	movf	LCDByte@temp,w
  7853  07D5  0087               	movwf	7	;volatile
  7854                           
  7855                           ;lcd_hd44780_pic16.c: 109: _delay((unsigned long)((1)*(20000000/4000000.0)));
  7856  07D6  2FD7               	nop2	;2 cycle nop
  7857  07D7  2FD8               	nop2	;2 cycle nop
  7858  07D8  0000               	nop
  7859                           
  7860                           ;lcd_hd44780_pic16.c: 113: (RC3=0);
  7861  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  7862  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  7863  07DB  1187               	bcf	7,3	;volatile
  7864                           
  7865                           ;lcd_hd44780_pic16.c: 115: _delay((unsigned long)((1)*(20000000/4000000.0)));
  7866  07DC  2FDD               	nop2	;2 cycle nop
  7867  07DD  2FDE               	nop2	;2 cycle nop
  7868  07DE  0000               	nop
  7869                           
  7870                           ;lcd_hd44780_pic16.c: 118: (RC3=1);
  7871  07DF  1283               	bcf	3,5	;RP0=0, select bank0
  7872  07E0  1303               	bcf	3,6	;RP1=0, select bank0
  7873  07E1  1587               	bsf	7,3	;volatile
  7874                           
  7875                           ;lcd_hd44780_pic16.c: 120: temp=(PORTC & (~(0X0F<<4)))|((ln<<4));
  7876  07E2  0829               	movf	LCDByte@ln,w
  7877  07E3  00A6               	movwf	??_LCDByte
  7878  07E4  3004               	movlw	4
  7879  07E5                     u2155:	
  7880  07E5  1003               	clrc
  7881  07E6  0DA6               	rlf	??_LCDByte,f
  7882  07E7  3EFF               	addlw	-1
  7883  07E8  1D03               	skipz
  7884  07E9  2FE5               	goto	u2155
  7885  07EA  0807               	movf	7,w	;volatile
  7886  07EB  390F               	andlw	15
  7887  07EC  0426               	iorwf	??_LCDByte,w
  7888  07ED  00A7               	movwf	??_LCDByte+1
  7889  07EE  0827               	movf	??_LCDByte+1,w
  7890  07EF  00AB               	movwf	LCDByte@temp
  7891                           
  7892                           ;lcd_hd44780_pic16.c: 122: PORTC=temp;
  7893  07F0  082B               	movf	LCDByte@temp,w
  7894  07F1  0087               	movwf	7	;volatile
  7895                           
  7896                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((1)*(20000000/4000000.0)));
  7897  07F2  2FF3               	nop2	;2 cycle nop
  7898  07F3  2FF4               	nop2	;2 cycle nop
  7899  07F4  0000               	nop
  7900                           
  7901                           ;lcd_hd44780_pic16.c: 128: (RC3=0);
  7902  07F5  1283               	bcf	3,5	;RP0=0, select bank0
  7903  07F6  1303               	bcf	3,6	;RP1=0, select bank0
  7904  07F7  1187               	bcf	7,3	;volatile
  7905                           
  7906                           ;lcd_hd44780_pic16.c: 130: _delay((unsigned long)((1)*(20000000/4000000.0)));
  7907  07F8  2FF9               	nop2	;2 cycle nop
  7908  07F9  2FFA               	nop2	;2 cycle nop
  7909  07FA  0000               	nop
  7910                           
  7911                           ;lcd_hd44780_pic16.c: 132: LCDBusyLoop();
  7912  07FB  120A  158A  26C4   	fcall	_LCDBusyLoop
  7913  07FE  0008               	return
  7914  07FF                     __end_of_LCDByte:	
  7915                           
  7916                           	psect	text45
  7917  0EC4                     __ptext45:	
  7918 ;; *************** function _LCDBusyLoop *****************
  7919 ;; Defined at:
  7920 ;;		line 135 in file "lcd_hd44780_pic16.c"
  7921 ;; Parameters:    Size  Location     Type
  7922 ;;		None
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;  status          1    4[BANK0 ] unsigned char 
  7925 ;;  temp            1    3[BANK0 ] unsigned char 
  7926 ;;  busy            1    2[BANK0 ] unsigned char 
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  1    wreg      void 
  7929 ;; Registers used:
  7930 ;;		wreg, status,2, status,0
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7936 ;;      Params:         0       0       0       0       0
  7937 ;;      Locals:         0       3       0       0       0
  7938 ;;      Temps:          0       2       0       0       0
  7939 ;;      Totals:         0       5       0       0       0
  7940 ;;Total ram usage:        5 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    3
  7943 ;; This function calls:
  7944 ;;		Nothing
  7945 ;; This function is called by:
  7946 ;;		_LCDByte
  7947 ;;		_LCDInit
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           
  7952                           ;psect for function _LCDBusyLoop
  7953  0EC4                     _LCDBusyLoop:	
  7954                           
  7955                           ;lcd_hd44780_pic16.c: 139: uint8_t busy,status=0x00,temp;
  7956                           
  7957                           ;incstack = 0
  7958                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  7959  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  7960  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  7961  0EC6  01A4               	clrf	LCDBusyLoop@status
  7962                           
  7963                           ;lcd_hd44780_pic16.c: 142: TRISC|=(0x0f<<4);
  7964  0EC7  30F0               	movlw	240
  7965  0EC8  00A0               	movwf	??_LCDBusyLoop
  7966  0EC9  0820               	movf	??_LCDBusyLoop,w
  7967  0ECA  1683               	bsf	3,5	;RP0=1, select bank1
  7968  0ECB  1303               	bcf	3,6	;RP1=0, select bank1
  7969  0ECC  0487               	iorwf	7,f	;volatile
  7970                           
  7971                           ;lcd_hd44780_pic16.c: 145: (RC2=1);
  7972  0ECD  1283               	bcf	3,5	;RP0=0, select bank0
  7973  0ECE  1303               	bcf	3,6	;RP1=0, select bank0
  7974  0ECF  1507               	bsf	7,2	;volatile
  7975                           
  7976                           ;lcd_hd44780_pic16.c: 146: (RC1=0);
  7977  0ED0  1087               	bcf	7,1	;volatile
  7978                           
  7979                           ;lcd_hd44780_pic16.c: 150: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  7980  0ED1  2ED2               	nop2	;2 cycle nop
  7981  0ED2                     l2349:	
  7982                           ;lcd_hd44780_pic16.c: 153: do
  7983                           
  7984                           
  7985                           ;lcd_hd44780_pic16.c: 154: {
  7986                           ;lcd_hd44780_pic16.c: 156: (RC3=1);
  7987  0ED2  1283               	bcf	3,5	;RP0=0, select bank0
  7988  0ED3  1303               	bcf	3,6	;RP1=0, select bank0
  7989  0ED4  1587               	bsf	7,3	;volatile
  7990                           
  7991                           ;lcd_hd44780_pic16.c: 159: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  7992  0ED5  2ED6               	nop2	;2 cycle nop
  7993                           
  7994                           ;lcd_hd44780_pic16.c: 161: status=(PORTC>>4);
  7995  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
  7996  0ED7  1303               	bcf	3,6	;RP1=0, select bank0
  7997  0ED8  0807               	movf	7,w	;volatile
  7998  0ED9  00A0               	movwf	??_LCDBusyLoop
  7999  0EDA  3004               	movlw	4
  8000  0EDB                     u2085:	
  8001  0EDB  1003               	clrc
  8002  0EDC  0CA0               	rrf	??_LCDBusyLoop,f
  8003  0EDD  3EFF               	addlw	-1
  8004  0EDE  1D03               	skipz
  8005  0EDF  2EDB               	goto	u2085
  8006  0EE0  0820               	movf	??_LCDBusyLoop,w
  8007  0EE1  00A1               	movwf	??_LCDBusyLoop+1
  8008  0EE2  0821               	movf	??_LCDBusyLoop+1,w
  8009  0EE3  00A4               	movwf	LCDBusyLoop@status
  8010                           
  8011                           ;lcd_hd44780_pic16.c: 162: status=status<<4;
  8012  0EE4  0824               	movf	LCDBusyLoop@status,w
  8013  0EE5  00A0               	movwf	??_LCDBusyLoop
  8014  0EE6  3003               	movlw	3
  8015  0EE7                     u2095:	
  8016  0EE7  1003               	clrc
  8017  0EE8  0DA0               	rlf	??_LCDBusyLoop,f
  8018  0EE9  3EFF               	addlw	-1
  8019  0EEA  1D03               	skipz
  8020  0EEB  2EE7               	goto	u2095
  8021  0EEC  1003               	clrc
  8022  0EED  0D20               	rlf	??_LCDBusyLoop,w
  8023  0EEE  00A1               	movwf	??_LCDBusyLoop+1
  8024  0EEF  0821               	movf	??_LCDBusyLoop+1,w
  8025  0EF0  00A4               	movwf	LCDBusyLoop@status
  8026                           
  8027                           ;lcd_hd44780_pic16.c: 164: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  8028  0EF1  2EF2               	nop2	;2 cycle nop
  8029                           
  8030                           ;lcd_hd44780_pic16.c: 167: (RC3=0);
  8031  0EF2  1283               	bcf	3,5	;RP0=0, select bank0
  8032  0EF3  1303               	bcf	3,6	;RP1=0, select bank0
  8033  0EF4  1187               	bcf	7,3	;volatile
  8034                           
  8035                           ;lcd_hd44780_pic16.c: 168: _delay((unsigned long)((1)*(20000000/4000000.0)));
  8036  0EF5  2EF6               	nop2	;2 cycle nop
  8037  0EF6  2EF7               	nop2	;2 cycle nop
  8038  0EF7  0000               	nop
  8039                           
  8040                           ;lcd_hd44780_pic16.c: 170: (RC3=1);
  8041  0EF8  1283               	bcf	3,5	;RP0=0, select bank0
  8042  0EF9  1303               	bcf	3,6	;RP1=0, select bank0
  8043  0EFA  1587               	bsf	7,3	;volatile
  8044                           
  8045                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  8046  0EFB  2EFC               	nop2	;2 cycle nop
  8047                           
  8048                           ;lcd_hd44780_pic16.c: 173: temp=(PORTC>>4);
  8049  0EFC  1283               	bcf	3,5	;RP0=0, select bank0
  8050  0EFD  1303               	bcf	3,6	;RP1=0, select bank0
  8051  0EFE  0807               	movf	7,w	;volatile
  8052  0EFF  00A0               	movwf	??_LCDBusyLoop
  8053  0F00  3004               	movlw	4
  8054  0F01                     u2105:	
  8055  0F01  1003               	clrc
  8056  0F02  0CA0               	rrf	??_LCDBusyLoop,f
  8057  0F03  3EFF               	addlw	-1
  8058  0F04  1D03               	skipz
  8059  0F05  2F01               	goto	u2105
  8060  0F06  0820               	movf	??_LCDBusyLoop,w
  8061  0F07  00A1               	movwf	??_LCDBusyLoop+1
  8062  0F08  0821               	movf	??_LCDBusyLoop+1,w
  8063  0F09  00A3               	movwf	LCDBusyLoop@temp
  8064                           
  8065                           ;lcd_hd44780_pic16.c: 174: temp&=0x0F;
  8066  0F0A  300F               	movlw	15
  8067  0F0B  00A0               	movwf	??_LCDBusyLoop
  8068  0F0C  0820               	movf	??_LCDBusyLoop,w
  8069  0F0D  05A3               	andwf	LCDBusyLoop@temp,f
  8070                           
  8071                           ;lcd_hd44780_pic16.c: 176: status=status|temp;
  8072  0F0E  0824               	movf	LCDBusyLoop@status,w
  8073  0F0F  0423               	iorwf	LCDBusyLoop@temp,w
  8074  0F10  00A0               	movwf	??_LCDBusyLoop
  8075  0F11  0820               	movf	??_LCDBusyLoop,w
  8076  0F12  00A4               	movwf	LCDBusyLoop@status
  8077                           
  8078                           ;lcd_hd44780_pic16.c: 178: busy=status & 0b10000000;
  8079  0F13  0824               	movf	LCDBusyLoop@status,w
  8080  0F14  3980               	andlw	128
  8081  0F15  00A0               	movwf	??_LCDBusyLoop
  8082  0F16  0820               	movf	??_LCDBusyLoop,w
  8083  0F17  00A2               	movwf	LCDBusyLoop@busy
  8084                           
  8085                           ;lcd_hd44780_pic16.c: 180: _delay((unsigned long)((0.5)*(20000000/4000000.0)));
  8086  0F18  2F19               	nop2	;2 cycle nop
  8087                           
  8088                           ;lcd_hd44780_pic16.c: 182: (RC3=0);
  8089  0F19  1283               	bcf	3,5	;RP0=0, select bank0
  8090  0F1A  1303               	bcf	3,6	;RP1=0, select bank0
  8091  0F1B  1187               	bcf	7,3	;volatile
  8092                           
  8093                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((1)*(20000000/4000000.0)));
  8094  0F1C  2F1D               	nop2	;2 cycle nop
  8095  0F1D  2F1E               	nop2	;2 cycle nop
  8096  0F1E  0000               	nop
  8097                           
  8098                           ;lcd_hd44780_pic16.c: 184: }while(busy);
  8099  0F1F  1283               	bcf	3,5	;RP0=0, select bank0
  8100  0F20  1303               	bcf	3,6	;RP1=0, select bank0
  8101  0F21  0822               	movf	LCDBusyLoop@busy,w
  8102  0F22  1D03               	btfss	3,2
  8103  0F23  2ED2               	goto	l2349
  8104                           
  8105                           ;lcd_hd44780_pic16.c: 186: (RC2=0);
  8106  0F24  1107               	bcf	7,2	;volatile
  8107                           
  8108                           ;lcd_hd44780_pic16.c: 189: TRISC&=(~(0x0F<<4));
  8109  0F25  300F               	movlw	15
  8110  0F26  00A0               	movwf	??_LCDBusyLoop
  8111  0F27  0820               	movf	??_LCDBusyLoop,w
  8112  0F28  1683               	bsf	3,5	;RP0=1, select bank1
  8113  0F29  1303               	bcf	3,6	;RP1=0, select bank1
  8114  0F2A  0587               	andwf	7,f	;volatile
  8115  0F2B  0008               	return
  8116  0F2C                     __end_of_LCDBusyLoop:	
  8117                           
  8118                           	psect	text46
  8119  08BF                     __ptext46:	
  8120 ;; *************** function _ADCInit *****************
  8121 ;; Defined at:
  8122 ;;		line 7 in file "../RF_ver1_client_16f866.X/adc_pic16.c"
  8123 ;; Parameters:    Size  Location     Type
  8124 ;;		None
  8125 ;; Auto vars:     Size  Location     Type
  8126 ;;		None
  8127 ;; Return value:  Size  Location     Type
  8128 ;;                  1    wreg      void 
  8129 ;; Registers used:
  8130 ;;		wreg, status,2, status,0
  8131 ;; Tracked objects:
  8132 ;;		On entry : 0/0
  8133 ;;		On exit  : 0/0
  8134 ;;		Unchanged: 0/0
  8135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8136 ;;      Params:         0       0       0       0       0
  8137 ;;      Locals:         0       0       0       0       0
  8138 ;;      Temps:          0       0       0       0       0
  8139 ;;      Totals:         0       0       0       0       0
  8140 ;;Total ram usage:        0 bytes
  8141 ;; Hardware stack levels used:    1
  8142 ;; Hardware stack levels required when called:    3
  8143 ;; This function calls:
  8144 ;;		Nothing
  8145 ;; This function is called by:
  8146 ;;		_main
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           
  8151                           ;psect for function _ADCInit
  8152  08BF                     _ADCInit:	
  8153                           
  8154                           ;adc_pic16.c: 10: TRISBbits.TRISB5 = 1;
  8155                           
  8156                           ;incstack = 0
  8157                           ; Regs used in _ADCInit: [wreg+status,2+status,0]
  8158  08BF  1683               	bsf	3,5	;RP0=1, select bank1
  8159  08C0  1303               	bcf	3,6	;RP1=0, select bank1
  8160  08C1  1686               	bsf	6,5	;volatile
  8161                           
  8162                           ;adc_pic16.c: 11: ANSELHbits.ANS13 = 1;
  8163  08C2  1683               	bsf	3,5	;RP0=1, select bank3
  8164  08C3  1703               	bsf	3,6	;RP1=1, select bank3
  8165  08C4  1689               	bsf	9,5	;volatile
  8166                           
  8167                           ;adc_pic16.c: 17: ADCON1bits.VCFG0 = 0;
  8168  08C5  1683               	bsf	3,5	;RP0=1, select bank1
  8169  08C6  1303               	bcf	3,6	;RP1=0, select bank1
  8170  08C7  121F               	bcf	31,4	;volatile
  8171                           
  8172                           ;adc_pic16.c: 19: ADCON0bits.ADCS = 0b11;
  8173  08C8  30C0               	movlw	192
  8174  08C9  1283               	bcf	3,5	;RP0=0, select bank0
  8175  08CA  1303               	bcf	3,6	;RP1=0, select bank0
  8176  08CB  049F               	iorwf	31,f	;volatile
  8177                           
  8178                           ;adc_pic16.c: 22: ADCON1bits.ADFM = 1;
  8179  08CC  1683               	bsf	3,5	;RP0=1, select bank1
  8180  08CD  1303               	bcf	3,6	;RP1=0, select bank1
  8181  08CE  179F               	bsf	31,7	;volatile
  8182                           
  8183                           ;adc_pic16.c: 24: ADCON0bits.ADON = 1;
  8184  08CF  1283               	bcf	3,5	;RP0=0, select bank0
  8185  08D0  1303               	bcf	3,6	;RP1=0, select bank0
  8186  08D1  141F               	bsf	31,0	;volatile
  8187  08D2  0008               	return
  8188  08D3                     __end_of_ADCInit:	
  8189                           
  8190                           	psect	text47
  8191  0AF9                     __ptext47:	
  8192 ;; *************** function _ISR *****************
  8193 ;; Defined at:
  8194 ;;		line 103 in file "do_am.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;		None
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;  byte            1   11[COMMON] PTR struct .
  8199 ;;		 -> ISR@value(1), 
  8200 ;;  value           1   10[COMMON] unsigned char 
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  1    wreg      void 
  8203 ;; Registers used:
  8204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8210 ;;      Params:         0       0       0       0       0
  8211 ;;      Locals:         2       0       0       0       0
  8212 ;;      Temps:          5       0       0       0       0
  8213 ;;      Totals:         7       0       0       0       0
  8214 ;;Total ram usage:        7 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    2
  8217 ;; This function calls:
  8218 ;;		_receive_input
  8219 ;; This function is called by:
  8220 ;;		Interrupt level 1
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           
  8225                           ;psect for function _ISR
  8226  0AF9                     _ISR:	
  8227                           
  8228                           ;do_am.c: 105: if(INTCONbits.INTF == 1)
  8229  0AF9  1C8B               	btfss	11,1	;volatile
  8230  0AFA  2B21               	goto	i1l287
  8231                           
  8232                           ;do_am.c: 106: {
  8233                           ;do_am.c: 107: { uint8_t value; { value = 0; BITbits_t *byte = (BITbits_t *)&value; byte
      +                          ->B0 = RA0; byte->B1 = RA1; byte->B2 = RA2; byte->B3 = RA3; }; receive_input(value); };
  8234  0AFB  01FA               	clrf	ISR@value
  8235  0AFC  307A               	movlw	(low (ISR@value| 0))& (0+255)
  8236  0AFD  00F5               	movwf	??_ISR
  8237  0AFE  0875               	movf	??_ISR,w
  8238  0AFF  00FB               	movwf	ISR@byte
  8239  0B00  087B               	movf	ISR@byte,w
  8240  0B01  0084               	movwf	4
  8241  0B02  1000               	bcf	0,0
  8242  0B03  1805               	btfsc	5,0	;volatile
  8243  0B04  1400               	bsf	0,0
  8244  0B05  087B               	movf	ISR@byte,w
  8245  0B06  0084               	movwf	4
  8246  0B07  1080               	bcf	0,1
  8247  0B08  1283               	bcf	3,5	;RP0=0, select bank0
  8248  0B09  1303               	bcf	3,6	;RP1=0, select bank0
  8249  0B0A  1885               	btfsc	5,1	;volatile
  8250  0B0B  1480               	bsf	0,1
  8251  0B0C  087B               	movf	ISR@byte,w
  8252  0B0D  0084               	movwf	4
  8253  0B0E  1100               	bcf	0,2
  8254  0B0F  1283               	bcf	3,5	;RP0=0, select bank0
  8255  0B10  1303               	bcf	3,6	;RP1=0, select bank0
  8256  0B11  1905               	btfsc	5,2	;volatile
  8257  0B12  1500               	bsf	0,2
  8258  0B13  087B               	movf	ISR@byte,w
  8259  0B14  0084               	movwf	4
  8260  0B15  1180               	bcf	0,3
  8261  0B16  1283               	bcf	3,5	;RP0=0, select bank0
  8262  0B17  1303               	bcf	3,6	;RP1=0, select bank0
  8263  0B18  1985               	btfsc	5,3	;volatile
  8264  0B19  1580               	bsf	0,3
  8265  0B1A  087A               	movf	ISR@value,w
  8266  0B1B  120A  118A  2733  120A  158A  	fcall	_receive_input
  8267                           
  8268                           ;do_am.c: 108: INTCONbits.INTF = 0;
  8269  0B20  108B               	bcf	11,1	;volatile
  8270  0B21                     i1l287:	
  8271  0B21  0879               	movf	??_ISR+4,w
  8272  0B22  1283               	bcf	3,5	;RP0=0, select bank0
  8273  0B23  1303               	bcf	3,6	;RP1=0, select bank0
  8274  0B24  00FF               	movwf	127
  8275  0B25  0878               	movf	??_ISR+3,w
  8276  0B26  008A               	movwf	10
  8277  0B27  0877               	movf	??_ISR+2,w
  8278  0B28  0084               	movwf	4
  8279  0B29  0E76               	swapf	(??_ISR+1)^(0+-128),w
  8280  0B2A  0083               	movwf	3
  8281  0B2B  0EFE               	swapf	126,f
  8282  0B2C  0E7E               	swapf	126,w
  8283  0B2D  0009               	retfie
  8284  0B2E                     __end_of_ISR:	
  8285                           
  8286                           	psect	intentry
  8287  0004                     __pintentry:	
  8288                           ;incstack = 0
  8289                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8290                           
  8291  0004                     interrupt_function:	
  8292  007E                     saved_w	set	btemp
  8293  0004  00FE               	movwf	btemp
  8294  0005  0E03               	swapf	3,w
  8295  0006  00F6               	movwf	??_ISR+1
  8296  0007  0804               	movf	4,w
  8297  0008  00F7               	movwf	??_ISR+2
  8298  0009  080A               	movf	10,w
  8299  000A  00F8               	movwf	??_ISR+3
  8300  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8301  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8302  000D  087F               	movf	btemp+1,w
  8303  000E  00F9               	movwf	??_ISR+4
  8304  000F  120A  158A  2AF9   	ljmp	_ISR
  8305                           
  8306                           	psect	text48
  8307  0733                     __ptext48:	
  8308 ;; *************** function _receive_input *****************
  8309 ;; Defined at:
  8310 ;;		line 41 in file "circle_buffer.h"
  8311 ;; Parameters:    Size  Location     Type
  8312 ;;  value           1    wreg     unsigned char 
  8313 ;; Auto vars:     Size  Location     Type
  8314 ;;  value           1    2[COMMON] unsigned char 
  8315 ;;  byte2           1    4[COMMON] PTR struct .
  8316 ;;		 -> receive_input@value(1), 
  8317 ;;  byte1           1    3[COMMON] PTR struct .
  8318 ;;		 -> buffer_rcv(32), 
  8319 ;; Return value:  Size  Location     Type
  8320 ;;                  1    wreg      void 
  8321 ;; Registers used:
  8322 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8323 ;; Tracked objects:
  8324 ;;		On entry : 0/0
  8325 ;;		On exit  : 0/0
  8326 ;;		Unchanged: 0/0
  8327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8328 ;;      Params:         0       0       0       0       0
  8329 ;;      Locals:         3       0       0       0       0
  8330 ;;      Temps:          1       0       0       0       0
  8331 ;;      Totals:         4       0       0       0       0
  8332 ;;Total ram usage:        4 bytes
  8333 ;; Hardware stack levels used:    1
  8334 ;; Hardware stack levels required when called:    1
  8335 ;; This function calls:
  8336 ;;		i1_get_next_index
  8337 ;; This function is called by:
  8338 ;;		_ISR
  8339 ;; This function uses a non-reentrant model
  8340 ;;
  8341                           
  8342                           
  8343                           ;psect for function _receive_input
  8344  0733                     _receive_input:	
  8345                           
  8346                           ;incstack = 0
  8347                           ; Regs used in _receive_input: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8348                           ;receive_input@value stored from wreg
  8349  0733  00F2               	movwf	receive_input@value
  8350                           
  8351                           ;circle_buffer.h: 43: { BITbits_t *byte1 = (BITbits_t *)&buffer_rcv[end_index_rcv]; BITb
      +                          its_t *byte2 = (BITbits_t *)&value; if(low_half_rcv == 1) { byte1->B0 = byte2->B0; byte1
      +                          ->B1 = byte2->B1; byte1->B2 = byte2->B2; byte1->B3 = byte2->B3; } else { byte1->B4 = byt
      +                          e2->B0; 
  8352  0734  087C               	movf	_end_index_rcv,w
  8353  0735  3EB8               	addlw	(low (_buffer_rcv| (0+256)))& (0+255)
  8354  0736  00F1               	movwf	??_receive_input
  8355  0737  0871               	movf	??_receive_input,w
  8356  0738  00F3               	movwf	receive_input@byte1
  8357  0739  3072               	movlw	(low (receive_input@value| 0))& (0+255)
  8358  073A  00F1               	movwf	??_receive_input
  8359  073B  0871               	movf	??_receive_input,w
  8360  073C  00F4               	movwf	receive_input@byte2
  8361  073D  037D               	decf	_low_half_rcv,w
  8362  073E  1D03               	btfss	3,2
  8363  073F  2F6D               	goto	i1l2965
  8364  0740  0874               	movf	receive_input@byte2,w
  8365  0741  0084               	movwf	4
  8366  0742  1003               	clrc
  8367  0743  1800               	btfsc	0,0
  8368  0744  1403               	setc
  8369  0745  0873               	movf	receive_input@byte1,w
  8370  0746  0084               	movwf	4
  8371  0747  1783               	bsf	3,7	;select IRP bank2
  8372  0748  1000               	bcf	0,0
  8373  0749  1803               	btfsc	3,0
  8374  074A  1400               	bsf	0,0
  8375  074B  0874               	movf	receive_input@byte2,w
  8376  074C  0084               	movwf	4
  8377  074D  1003               	clrc
  8378  074E  1880               	btfsc	0,1
  8379  074F  1403               	setc
  8380  0750  0873               	movf	receive_input@byte1,w
  8381  0751  0084               	movwf	4
  8382  0752  1783               	bsf	3,7	;select IRP bank2
  8383  0753  1080               	bcf	0,1
  8384  0754  1803               	btfsc	3,0
  8385  0755  1480               	bsf	0,1
  8386  0756  0874               	movf	receive_input@byte2,w
  8387  0757  0084               	movwf	4
  8388  0758  1003               	clrc
  8389  0759  1900               	btfsc	0,2
  8390  075A  1403               	setc
  8391  075B  0873               	movf	receive_input@byte1,w
  8392  075C  0084               	movwf	4
  8393  075D  1783               	bsf	3,7	;select IRP bank2
  8394  075E  1100               	bcf	0,2
  8395  075F  1803               	btfsc	3,0
  8396  0760  1500               	bsf	0,2
  8397  0761  0874               	movf	receive_input@byte2,w
  8398  0762  0084               	movwf	4
  8399  0763  1003               	clrc
  8400  0764  1980               	btfsc	0,3
  8401  0765  1403               	setc
  8402  0766  0873               	movf	receive_input@byte1,w
  8403  0767  0084               	movwf	4
  8404  0768  1783               	bsf	3,7	;select IRP bank2
  8405  0769  1180               	bcf	0,3
  8406  076A  1803               	btfsc	3,0
  8407  076B  1580               	bsf	0,3
  8408  076C  2F99               	goto	i1l2967
  8409  076D                     i1l2965:	
  8410  076D  0874               	movf	receive_input@byte2,w
  8411  076E  0084               	movwf	4
  8412  076F  1003               	clrc
  8413  0770  1800               	btfsc	0,0
  8414  0771  1403               	setc
  8415  0772  0873               	movf	receive_input@byte1,w
  8416  0773  0084               	movwf	4
  8417  0774  1783               	bsf	3,7	;select IRP bank2
  8418  0775  1200               	bcf	0,4
  8419  0776  1803               	btfsc	3,0
  8420  0777  1600               	bsf	0,4
  8421  0778  0874               	movf	receive_input@byte2,w
  8422  0779  0084               	movwf	4
  8423  077A  1003               	clrc
  8424  077B  1880               	btfsc	0,1
  8425  077C  1403               	setc
  8426  077D  0873               	movf	receive_input@byte1,w
  8427  077E  0084               	movwf	4
  8428  077F  1783               	bsf	3,7	;select IRP bank2
  8429  0780  1280               	bcf	0,5
  8430  0781  1803               	btfsc	3,0
  8431  0782  1680               	bsf	0,5
  8432  0783  0874               	movf	receive_input@byte2,w
  8433  0784  0084               	movwf	4
  8434  0785  1003               	clrc
  8435  0786  1900               	btfsc	0,2
  8436  0787  1403               	setc
  8437  0788  0873               	movf	receive_input@byte1,w
  8438  0789  0084               	movwf	4
  8439  078A  1783               	bsf	3,7	;select IRP bank2
  8440  078B  1300               	bcf	0,6
  8441  078C  1803               	btfsc	3,0
  8442  078D  1700               	bsf	0,6
  8443  078E  0874               	movf	receive_input@byte2,w
  8444  078F  0084               	movwf	4
  8445  0790  1003               	clrc
  8446  0791  1980               	btfsc	0,3
  8447  0792  1403               	setc
  8448  0793  0873               	movf	receive_input@byte1,w
  8449  0794  0084               	movwf	4
  8450  0795  1783               	bsf	3,7	;select IRP bank2
  8451  0796  1380               	bcf	0,7
  8452  0797  1803               	btfsc	3,0
  8453  0798  1780               	bsf	0,7
  8454  0799                     i1l2967:	
  8455                           
  8456                           ;circle_buffer.h: 44: if(low_half_rcv == 1)
  8457  0799  037D               	decf	_low_half_rcv,w
  8458  079A  1D03               	btfss	3,2
  8459  079B  2F9E               	goto	i1l137
  8460                           
  8461                           ;circle_buffer.h: 45: {
  8462                           ;circle_buffer.h: 46: low_half_rcv = 0;
  8463  079C  01FD               	clrf	_low_half_rcv
  8464                           
  8465                           ;circle_buffer.h: 47: }
  8466  079D  0008               	return
  8467  079E                     i1l137:	
  8468                           
  8469                           ;circle_buffer.h: 48: else
  8470                           ;circle_buffer.h: 49: {
  8471                           ;circle_buffer.h: 50: low_half_rcv = 1;
  8472  079E  01FD               	clrf	_low_half_rcv
  8473  079F  0AFD               	incf	_low_half_rcv,f
  8474                           
  8475                           ;circle_buffer.h: 51: end_index_rcv = get_next_index(end_index_rcv);
  8476  07A0  087C               	movf	_end_index_rcv,w
  8477  07A1  160A  118A  27E0   	fcall	i1_get_next_index
  8478  07A4  00F1               	movwf	??_receive_input
  8479  07A5  0871               	movf	??_receive_input,w
  8480  07A6  00FC               	movwf	_end_index_rcv
  8481  07A7  0008               	return
  8482  07A8                     __end_of_receive_input:	
  8483                           
  8484                           	psect	text49
  8485  17E0                     __ptext49:	
  8486 ;; *************** function i1_get_next_index *****************
  8487 ;; Defined at:
  8488 ;;		line 30 in file "circle_buffer.h"
  8489 ;; Parameters:    Size  Location     Type
  8490 ;;  index           1    wreg     unsigned char 
  8491 ;; Auto vars:     Size  Location     Type
  8492 ;;  index           1    0[COMMON] unsigned char 
  8493 ;; Return value:  Size  Location     Type
  8494 ;;                  1    wreg      unsigned char 
  8495 ;; Registers used:
  8496 ;;		wreg, status,2, status,0
  8497 ;; Tracked objects:
  8498 ;;		On entry : 0/0
  8499 ;;		On exit  : 0/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8502 ;;      Params:         0       0       0       0       0
  8503 ;;      Locals:         1       0       0       0       0
  8504 ;;      Temps:          0       0       0       0       0
  8505 ;;      Totals:         1       0       0       0       0
  8506 ;;Total ram usage:        1 bytes
  8507 ;; Hardware stack levels used:    1
  8508 ;; This function calls:
  8509 ;;		Nothing
  8510 ;; This function is called by:
  8511 ;;		_receive_input
  8512 ;; This function uses a non-reentrant model
  8513 ;;
  8514                           
  8515                           
  8516                           ;psect for function i1_get_next_index
  8517  17E0                     i1_get_next_index:	
  8518                           
  8519                           ;incstack = 0
  8520                           ; Regs used in i1_get_next_index: [wreg+status,2+status,0]
  8521                           ;i1get_next_index@index stored from wreg
  8522  17E0  00F0               	movwf	i1get_next_index@index
  8523                           
  8524                           ;circle_buffer.h: 32: if(index == 32 - 1)
  8525  17E1  301F               	movlw	31
  8526  17E2  0670               	xorwf	i1get_next_index@index,w
  8527  17E3  1D03               	btfss	3,2
  8528  17E4  2FE7               	goto	i1l2953
  8529                           
  8530                           ;circle_buffer.h: 33: {
  8531                           ;circle_buffer.h: 34: return 0;
  8532  17E5  3000               	movlw	0
  8533                           
  8534                           ;circle_buffer.h: 35: }
  8535  17E6  0008               	return
  8536  17E7                     i1l2953:	
  8537                           
  8538                           ;circle_buffer.h: 36: else
  8539                           ;circle_buffer.h: 37: {
  8540                           ;circle_buffer.h: 38: return (index + 1);
  8541  17E7  0870               	movf	i1get_next_index@index,w
  8542  17E8  3E01               	addlw	1
  8543  17E9  0008               	return
  8544  17EA                     __end_ofi1_get_next_index:	
  8545  007E                     btemp	set	126	;btemp
  8546  007E                     wtemp	set	126
  8547  007E                     wtemp0	set	126
  8548  0080                     wtemp1	set	128
  8549  0082                     wtemp2	set	130
  8550  0084                     wtemp3	set	132
  8551  0086                     wtemp4	set	134
  8552  0088                     wtemp5	set	136
  8553  007F                     wtemp6	set	127
  8554  007E                     ttemp	set	126
  8555  007E                     ttemp0	set	126
  8556  0081                     ttemp1	set	129
  8557  0084                     ttemp2	set	132
  8558  0087                     ttemp3	set	135
  8559  007F                     ttemp4	set	127
  8560  007E                     ltemp	set	126
  8561  007E                     ltemp0	set	126
  8562  0082                     ltemp1	set	130
  8563  0086                     ltemp2	set	134
  8564  0080                     ltemp3	set	128


Data Sizes:
    Strings     97
    Constant    18
    Data        20
    BSS         164
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     74      80
    BANK1            80     22      80
    BANK3            96      0      95
    BANK2            96      0      23

Pointer List with Targets:

    memcpy@d1	PTR void  size(1) Largest target is 23
		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(BANK0[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), create_REG_ID_RSP_CMD@rqt(COMMON[1]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 23
		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(BANK0[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), create_REG_ID_RSP_CMD@rqt(COMMON[1]), 

    memcpy@s1	PTR const void  size(2) Largest target is 23
		 -> msg_rcv.data(BANK3[16]), main@rqt_750(BANK1[1]), create_REG_ID_RSP_CMD@rsp(COMMON[1]), msg_rcv(BANK3[23]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 23
		 -> msg_rcv.data(BANK3[16]), main@rqt_750(BANK1[1]), create_REG_ID_RSP_CMD@rsp(COMMON[1]), msg_rcv(BANK3[23]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_13(CODE[14]), STR_11(CODE[20]), STR_9(CODE[15]), STR_7(CODE[12]), 
		 -> STR_5(CODE[9]), STR_3(CODE[6]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 32
		 -> dump_conn@s(BANK0[32]), sdebug(BANK1[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S849$name	PTR unsigned char  size(1) Largest target is 5
		 -> STR_24(CODE[5]), STR_23(CODE[5]), STR_22(CODE[5]), STR_21(CODE[5]), 

    g_menu.items.name	PTR unsigned char  size(1) Largest target is 5
		 -> STR_24(CODE[5]), STR_23(CODE[5]), STR_22(CODE[5]), STR_21(CODE[5]), 

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_25(CODE[1]), STR_24(CODE[5]), STR_23(CODE[5]), STR_22(CODE[5]), 
		 -> STR_21(CODE[5]), STR_20(CODE[5]), STR_19(CODE[3]), STR_18(CODE[12]), 
		 -> STR_17(CODE[13]), STR_16(CODE[10]), STR_15(CODE[10]), STR_14(CODE[1]), 
		 -> dump_conn@s(BANK0[32]), STR_12(CODE[1]), STR_10(CODE[1]), STR_8(CODE[1]), 
		 -> STR_6(CODE[1]), STR_4(CODE[1]), STR_2(CODE[1]), sdebug(BANK1[32]), 

    main@pconn	PTR struct . size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    main@prsp	PTR struct . size(1) Largest target is 1
		 -> main@rsp(BANK1[1]), 

    main@prqt	PTR struct . size(1) Largest target is 1
		 -> main@rqt(BANK1[1]), 

    ISR@byte	PTR struct . size(1) Largest target is 1
		 -> ISR@value(COMMON[1]), 

    pmsg	PTR struct . size(1) Largest target is 23
		 -> msg(BANK2[23]), 

    send_HEART_BEAT_RQT_CMD_and_wait@prqt	PTR const struct . size(1) Largest target is 1
		 -> main@rqt_750(BANK1[1]), 

    send_HEART_BEAT_RQT_CMD_and_wait@pconn	PTR struct . size(1) Largest target is 40
		 -> client_conn(BANK3[40]), 

    create_HEART_BEAT_RQT_CMD@pmsg	PTR struct . size(1) Largest target is 23
		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(BANK0[23]), 

    create_HEART_BEAT_RQT_CMD@prqt	PTR const struct . size(1) Largest target is 1
		 -> main@rqt_750(BANK1[1]), 

    create_HEART_BEAT_RQT_CMD@pconn	PTR struct . size(1) Largest target is 40
		 -> client_conn(BANK3[40]), 

    create_cmd@cmd_data	PTR const void  size(1) Largest target is 1
		 -> main@rqt_750(BANK1[1]), create_REG_ID_RSP_CMD@rsp(COMMON[1]), 

    create_cmd@pconn	PTR struct . size(1) Largest target is 40
		 -> NULL(NULL[0]), client_conn(BANK3[40]), 

    create_cmd@pmsg	PTR struct . size(1) Largest target is 23
		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(BANK0[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), 

    is_right_addr@pmsg	PTR struct . size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    is_right_addr@pconn	PTR struct . size(1) Largest target is 40
		 -> client_conn(BANK3[40]), 

    sp__find_conn_entry	PTR struct . size(1) Largest target is 40
		 -> NULL(NULL[0]), client_conn(BANK3[40]), 

    get_msg@pmsg	PTR struct . size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    get_msg@pstr	PTR unsigned char  size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    pstr_rcv	PTR unsigned char  size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    pmsg_rcv	PTR struct . size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    sp__memcpy	PTR void  size(1) Largest target is 23
		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(BANK0[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), create_REG_ID_RSP_CMD@rqt(COMMON[1]), 

    compose@data	PTR unsigned char  size(1) Largest target is 1
		 -> main@rqt_750(BANK1[1]), create_REG_ID_RSP_CMD@rsp(COMMON[1]), 

    compose@pmsg	PTR struct . size(1) Largest target is 23
		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(BANK0[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), 

    crc_verify@pmsg	PTR struct . size(1) Largest target is 23
		 -> msg_rcv(BANK3[23]), 

    crc_calculate@pmsg	PTR struct . size(2) Largest target is 23
		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(BANK0[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), msg_rcv(BANK3[23]), 

    send_msg@pmsg	PTR struct . size(1) Largest target is 23
		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(BANK0[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), 

    send_msg@s	PTR unsigned char  size(1) Largest target is 23
		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(BANK0[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), 

    get_msg_index@end_index	PTR unsigned char  size(1) Largest target is 1
		 -> get_msg@end_index(BANK0[1]), 

    get_msg_index@start_index	PTR unsigned char  size(1) Largest target is 1
		 -> get_msg@start_index(BANK0[1]), 

    receive_input@byte2	PTR struct . size(1) Largest target is 1
		 -> receive_input@value(COMMON[1]), 

    receive_input@byte1	PTR struct . size(1) Largest target is 32
		 -> buffer_rcv(BANK3[32]), 

    send_string@str	PTR unsigned char  size(2) Largest target is 23
		 -> send_HEART_BEAT_RQT_CMD_and_wait@msg(BANK0[23]), handle_REG_ID_RQT_CMD@msgo(BANK0[23]), stop_mark(CODE[4]), start_mark(CODE[4]), 

    send_half_byte@byte	PTR struct . size(1) Largest target is 1
		 -> send_half_byte@value(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_receive_input
    _receive_input->i1_get_next_index

Critical Paths under _main in BANK0

    _main->_send_HEART_BEAT_RQT_CMD_and_wait
    _send_HEART_BEAT_RQT_CMD_and_wait->_debug_1
    _send_msg->_send_string
    _send_string->_send_byte
    _send_byte->_send_half_byte
    _get_msg->_get_msg_index
    _get_msg_index->_get_plus_index
    _debug_1->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _create_HEART_BEAT_RQT_CMD->_create_cmd
    _create_cmd->_compose
    _compose->_crc_calculate
    _compose->_memcpy
    _crc_verify->_crc_calculate
    _ValueInc->_SaveMenuItem
    _ValueDec->_SaveMenuItem
    _SaveMenuItem->_eeprom_write
    _ShowMenu->_LCDWriteInt
    _LCDWriteInt->_LCDByte
    _MenuInit->_LoadMenuItem
    _LoadMenuItem->_eeprom_read
    _LCDSetStyle->_LCDByte
    _LCDInit->_LCDByte
    _ConnInit->___bmul
    _ClearMenu->_LCDWriteString
    _LCDWriteString->_LCDByte
    _LCDGotoXY->_LCDByte
    _LCDByte->_LCDBusyLoop

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0   55577
                                             71 BANK0      3     3      0
                                              0 BANK1     22    22      0
                            _ADCInit
                          _ClearMenu
                           _ConnInit
                             _IOInit
                            _LCDByte
                          _LCDGotoXY
                            _LCDInit
                        _LCDSetStyle
                     _LCDWriteString
                           _MenuDown
                           _MenuInit
                             _MenuUp
                           _ShowMenu
                           _ValueDec
                           _ValueInc
   _send_HEART_BEAT_RQT_CMD_and_wait
 ---------------------------------------------------------------------------------
 (1) _send_HEART_BEAT_RQT_CMD_and_wait                    28    27      1   18187
                                             43 BANK0     28    27      1
                         _crc_verify
          _create_HEART_BEAT_RQT_CMD
                            _debug_1
                            _get_msg
                      _is_right_addr
                           _send_msg
 ---------------------------------------------------------------------------------
 (2) _send_msg                                             3     3      0    1002
                                             12 BANK0      3     3      0
                        _send_string
 ---------------------------------------------------------------------------------
 (3) _send_string                                          5     2      3     875
                                              7 BANK0      5     2      3
                          _send_byte
 ---------------------------------------------------------------------------------
 (4) _send_byte                                            3     3      0     401
                                              4 BANK0      3     3      0
                     _send_half_byte
 ---------------------------------------------------------------------------------
 (5) _send_half_byte                                       4     3      1     357
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _is_right_addr                                        4     3      1     206
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _get_msg                                              8     8      0    2344
                                              8 BANK0      8     8      0
                       _get_distance
                      _get_msg_index
                     _get_next_index
 ---------------------------------------------------------------------------------
 (3) _get_msg_index                                        5     4      1    1658
                                              3 BANK0      5     4      1
                       _get_distance
                    _get_minus_index
                     _get_next_index
                     _get_plus_index
 ---------------------------------------------------------------------------------
 (4) _get_plus_index                                       3     2      1     580
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _get_next_index                                       1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_minus_index                                      2     1      1     196
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (4) _get_distance                                         2     1      1     324
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _debug_1                                              6     6      0   11160
                                             37 BANK0      6     6      0
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             31    18     13    1712
                                             14 BANK0     23    10     13
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _create_HEART_BEAT_RQT_CMD                            7     5      2    2751
                                             32 BANK0      7     5      2
                         _create_cmd
 ---------------------------------------------------------------------------------
 (3) _create_cmd                                          12     7      5    2505
                                             20 BANK0     12     7      5
                            _compose
 ---------------------------------------------------------------------------------
 (4) _compose                                             11     5      6    1651
                                              9 BANK0     11     5      6
                      _crc_calculate
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                               9     5      4     594
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                           3     3      0     364
                                              9 BANK0      3     3      0
                      _crc_calculate
 ---------------------------------------------------------------------------------
 (5) _crc_calculate                                        9     7      2     290
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _ValueInc                                             2     2      0     152
                                              6 BANK0      2     2      0
                       _SaveMenuItem
 ---------------------------------------------------------------------------------
 (1) _ValueDec                                             1     1      0     152
                                              6 BANK0      1     1      0
                       _SaveMenuItem
 ---------------------------------------------------------------------------------
 (2) _SaveMenuItem                                         3     3      0     152
                                              3 BANK0      3     3      0
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     108
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _ShowMenu                                             6     6      0   12846
                                             26 BANK0      6     6      0
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (2) _LCDWriteInt                                         14    11      3    3420
                                             12 BANK0     14    11      3
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     424
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _MenuUp                                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MenuInit                                             1     1      0      66
                                              5 BANK0      1     1      0
                       _LoadMenuItem
 ---------------------------------------------------------------------------------
 (2) _LoadMenuItem                                         3     3      0      66
                                              2 BANK0      3     3      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _MenuDown                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCDSetStyle                                          1     1      0    2089
                                             12 BANK0      1     1      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              4     4      0    2274
                                             12 BANK0      4     4      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _IOInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConnInit                                             3     3      0     540
                                              4 BANK0      3     3      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     406
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _ClearMenu                                            3     3      0    9426
                                             17 BANK0      3     3      0
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (3) _LCDWriteString                                       5     3      2    3681
                                             12 BANK0      5     3      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (3) _LCDGotoXY                                            3     2      1    3609
                                             12 BANK0      3     2      1
                            _LCDByte
 ---------------------------------------------------------------------------------
 (4) _LCDByte                                              7     6      1    2067
                                              5 BANK0      7     6      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (5) _LCDBusyLoop                                          5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  7     7      0     566
                                              5 COMMON     7     7      0
                      _receive_input
 ---------------------------------------------------------------------------------
 (7) _receive_input                                        4     4      0     428
                                              1 COMMON     4     4      0
                   i1_get_next_index
 ---------------------------------------------------------------------------------
 (8) i1_get_next_index                                     1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _ClearMenu
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
   _ConnInit
     ___bmul
   _IOInit
   _LCDByte
     _LCDBusyLoop
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _LCDSetStyle
     _LCDByte
       _LCDBusyLoop
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   _MenuDown
   _MenuInit
     _LoadMenuItem
       _eeprom_read
   _MenuUp
   _ShowMenu
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteInt
       _LCDByte
         _LCDBusyLoop
       ___awdiv
       ___awmod
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
   _ValueDec
     _SaveMenuItem
       _eeprom_write
   _ValueInc
     _SaveMenuItem
       _eeprom_write
   _send_HEART_BEAT_RQT_CMD_and_wait
     _crc_verify
       _crc_calculate
     _create_HEART_BEAT_RQT_CMD
       _create_cmd
         _compose
           _crc_calculate
           _memcpy
     _debug_1
       _LCDByte
         _LCDBusyLoop
       _LCDGotoXY
         _LCDByte
           _LCDBusyLoop
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _get_msg
       _get_distance
       _get_msg_index
         _get_distance
         _get_minus_index
         _get_next_index
         _get_plus_index
       _get_next_index
     _is_right_addr
     _send_msg
       _send_string
         _send_byte
           _send_half_byte

 _ISR (ROOT)
   _receive_input
     i1_get_next_index

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5F       9       99.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      17      11       24.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     16      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4A      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     124      12        0.0%
ABS                  0      0     124       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Jul 24 13:52:26 2016

                             ?_LCDBusyLoop 0070                                 __CFG_CP$ON 0000  
                                        pc 0002                             ?_get_msg_index 0023  
                           ___bmul@product 0022                           get_msg@end_index 002E  
                                       _RD 0C60                                __CFG_CPD$ON 0000  
                                       _WR 0C61                               ___awdiv@sign 0026  
                                       fsr 0004         __size_of_create_HEART_BEAT_RQT_CMD 0021  
                           create_cmd@pmsg 0038                               ?_LCDSetStyle 0070  
                          ?_get_next_index 0070                                __CFG_LVP$ON 0000  
                                      l305 01A8                                        l308 01F1  
                                      l346 07C1                                        l347 07C2  
                                      l525 0971                                        l395 09D3  
                                      l547 0A33                                        l396 09BC  
                                      _GIE 005F                                        _RA0 0028  
                                      _RA1 0029                                        _RA2 002A  
                                      _RB1 0031                                        _RA3 002B  
                                      _RB2 0032                                        _RA4 002C  
                                      _RC1 0039                                        _RA5 002D  
                                      _RC2 003A                                        _RB4 0034  
                                      _RA6 002E                                        _RC3 003B  
                                      _RB5 0035                                        _RA7 002F  
                                      _RB6 0036                                        _RB7 0037  
                                      _ISR 0AF9                                        _msg 0110  
                                      fsr0 0004                            __end_of_ADCInit 08D3  
                                      indf 0000                               ___awmod@sign 0026  
                             __CFG_IESO$ON 0000                           ?_get_minus_index 0020  
    send_HEART_BEAT_RQT_CMD_and_wait@pconn 004F                    __size_of_send_half_byte 006C  
                              get_msg@temp 002F                                get_msg@pmsg 002C  
                              get_msg@pstr 002A                            create_cmd@pconn 003F  
                  LCDWriteInt@field_length 002E                            __end_of_LCDByte 07FF  
                          __end_of_LCDInit 0F94                               ?_LCDWriteInt 002C  
                                     ?_ISR 0070                                LCDByte@temp 002B  
                                     l3023 0719                                       l2321 05F8  
                                     l3131 0E42                                       l2323 062A  
                                     l3125 0E2F                                       l2501 0B67  
                                     l3161 0860                                       l2337 09E5  
                                     l2513 0A99                                       l3401 00E6  
                                     l2603 09C5                                       l3171 0849  
                                     l2515 0AA7                                       l2523 0AC0  
                                     l3411 0104                                       l2349 0ED2  
                                     l2429 17FD                                       l2437 0810  
                                     l2533 090C                                       l3501 0257  
                                     l3421 012D                                       l2623 0E99  
                                     l2631 0EA7                                       l2519 0AB5  
                                     l2543 0445                                       l2447 083D  
                                     l3503 025C                                       l3407 00FD  
                                     l2801 0C4D                                       l2297 0FC8  
                                     l3521 02B5                                       l3433 0150  
                                     l2731 0D59                                       l2491 0B46  
                                     l2571 0499                                       l2459 082D  
                                     l2651 02F0                                       l2299 0FF8  
                                     l3531 02CB                                       l3515 029E  
                                     l3435 0160                                       l3427 0144  
                                     l2637 0E65                                       l2565 0478  
                                     l2549 045B                                       l2639 0EC2  
                                     l2559 0472                                       l2823 0DF2  
                                     l3527 02C1                                       l3383 026B  
                                     l2737 0D64                                       l2905 0524  
                                     l2497 0B5C                                       l2489 0B38  
                                     l2585 04AC                                       l2577 04A8  
                                     l2817 0DDF                                       l2657 0303  
                                     l3529 02C6                                       l3449 0191  
                                     l3457 01B1                                       l3385 009E  
                                     l2763 0DA3                                       l2755 0D90  
                                     l2747 0D6C                                       l2915 056E  
                                     l2907 0559                                       l2587 0425  
                                     l2683 0400                                       l3467 01DA  
                                     l3475 01F8                                       l2597 09BE  
                                     l2933 088A                                       l2749 0D7A  
                                     l2589 04EF                                       l2693 041C  
                                     l2669 0388                                       l3493 0246  
                                     l3477 0208                                       l3389 00B8  
                            ?_LoadMenuItem 0070                                       l2599 09C0  
                                     l2759 0D9B                                       l2775 0C11  
                                     l2679 03F7                                       l2863 0BB6  
                                     l3487 022F                                       l2937 0890  
                                     l2793 0C3A                                       l2787 0C1E  
                                     l2779 0C18                                       l2859 0BB4  
                                     l2875 0907                                       l3499 0252  
                                     l2789 0C2C                                       l2797 0C45  
                                     STR_1 0664                               __CFG_WDTE$ON 0000  
                                     STR_2 069C                                       u2000 0FDD  
                                     u2020 0FE9                                       u2014 0FE0  
                                     u2040 0FF5                                       u2105 0F01  
                                     u2034 0FEC                                       u2125 07AE  
                                     u2215 0B3B                                       u2145 07C9  
                                     u2065 060B                                       u2305 0AAD  
                                     u2155 07E5                                       u2235 0B47  
                                     u2315 0AB6                                       u2085 0EDB  
                                     u2245 0B53                                       u2095 0EE7  
                                     u2255 0B5D                                       u1900 0FA7  
                                     u2285 0A9C                                       u2631 096F  
                                     u2375 048F                                       u1920 0FB3  
                                     u2705 0D87                                       u1914 0FAA  
                                     u2715 0D91                                       u1940 0FBF  
                                     u2805 0C3B                                       u1934 0FB6  
                                     u2850 0969                                       u1954 0FC2  
                                     u2675 0D6F                                       u1980 0FD1  
                                     u2695 0D7B                                       u2775 0C21  
                                     u2855 0965                                       u3807 06D3  
                                     u3817 0A16                                       u1994 0FD4  
                                     u2795 0C32                                       u2955 057B  
                                     u3827 0A2A                                       u3837 0F33  
                                     u3757 00B0                                       u3767 0158  
                                     u3777 0200                                       u3787 0264  
                                     u3797 02D3                                       _WREN 0C62  
                           ??_eeprom_write 0021   __end_of_send_HEART_BEAT_RQT_CMD_and_wait 0733  
__size_of_send_HEART_BEAT_RQT_CMD_and_wait 007F         ??_send_HEART_BEAT_RQT_CMD_and_wait 004C  
        ?_send_HEART_BEAT_RQT_CMD_and_wait 004B           _send_HEART_BEAT_RQT_CMD_and_wait 06B4  
                           ??_get_distance 0021                               __CFG_WRT$OFF 0000  
                            __CFG_FCMEN$ON 0000                                       _main 0055  
                              main@rqt_750 00D4                                       _mode 00EE  
                       __size_of_LCDGotoXY 0026                                       _pmsg 006B  
                                     btemp 007E                              __CFG_BOREN$ON 0000  
                                     ltemp 007E                            ?_get_plus_index 0020  
                                     start 0012                                       ttemp 007E  
                                     wtemp 007E                     create_cmd@cmd_data_len 0037  
                         create_cmd@cmd_id 0034                          ___bmul@multiplier 0023  
                            __CFG_MCLRE$ON 0000                           create_cmd@msg_id 0035  
                                    ??_ISR 0075                                compose@data 002D  
                              compose@from 0029                                compose@pmsg 0033  
                                    ?_main 0070                            __end_of___awdiv 0DA8  
                                    _EEADR 010D                                      STR_11 0653  
                                    STR_20 06AC                                      STR_21 0698  
                                    STR_13 0667                                      STR_22 069D  
                                    STR_23 06A2                                      STR_15 068E  
                                    STR_16 0678                                      STR_24 06A7  
                                    STR_25 069C                                      STR_17 0675  
                                    STR_18 0682                                      STR_19 06B1  
                          __end_of___awmod 0C52                                      _CARRY 0018  
                             LCDInit@style 002E                            ___awdiv@divisor 0020  
                          __end_of___lwdiv 0B6C                                      i1l137 079E  
                          __end_of___lwmod 0AC5                                      i1l287 0B21  
        __end_of_create_HEART_BEAT_RQT_CMD 0949                            ___awdiv@counter 0025  
                                    _PORTC 0007                                      _TRISC 0087  
                          __end_of_debug_1 0E04                            __end_of_get_msg 0BB8  
                          __end_of_compose 0CA4                            __end_of_dpowers 064B  
                                    _count 00A9                             ??_LoadMenuItem 0022  
                       get_minus_index@sub 0020                                      main@i 00DB  
                                    pclath 000A                                      ltemp0 007E  
                                    ltemp1 0082                                      ltemp2 0086  
                                    ltemp3 0080                                      ttemp0 007E  
                                    ttemp1 0081                                      ttemp2 0084  
                                    ttemp3 0087                                      ttemp4 007F  
                                    status 0003                                      wtemp0 007E  
                                    wtemp1 0080                                      wtemp2 0082  
                                    wtemp3 0084                                      wtemp4 0086  
                                    wtemp5 0088                                      wtemp6 007F  
                          __end_of_sprintf 04F4                           __end_of_ConnInit 0D4D  
                          __initialization 0015                            ??_get_msg_index 0024  
                             __end_of_main 02DB                           __end_of_MenuDown 0852  
                         __end_of_MenuInit 0CF8                                  ??_ADCInit 0020  
                       __size_of_ClearMenu 0031                                     ??_main 0067  
                        __end_of_LCDGotoXY 09DA                              LCDByte@isdata 0025  
                                ??_LCDByte 0026                                  ??_LCDInit 002C  
                         __end_of_ValueDec 08BF                           __end_of_ValueInc 08EA  
                         __end_of_ShowMenu 0E62                               compose@msgid 002B  
                                   _ADRESH 001E                                     _ADRESL 009E  
                                   _EEDATA 010C                              main@count_762 00D8  
                            main@count_756 00D6                              main@count_765 00D9  
                            main@count_759 00D7                              main@count_768 00DA  
                                   _EECON1 018C                                     _EECON2 018D  
                         ___awdiv@dividend 0022                                     i1l2953 17E7  
                                   i1l2965 076D                                     i1l2967 0799  
                             ?_send_string 0027                                     _IOInit 0BB8  
                         i1_get_next_index 17E0                             send_string@len 0029  
                           send_string@str 0027                             __CFG_PWRTE$OFF 0000  
                                   _MenuUp 0852                             _LCDWriteString 0E62  
                     __size_of_eeprom_read 0024                          _is_right_addr$549 0022  
                                   ___bmul 0886                                  ??___awdiv 0024  
                                ??___awmod 0024                                     _g_menu 00A0  
                                ??___lwdiv 0024                                  ??___lwmod 002C  
                                   _memcpy 09DA                       __size_of_LCDBusyLoop 0068  
                                ??_debug_1 0045                                     _sdebug 00AB  
                         ___awdiv@quotient 0027                            ___awmod@divisor 0020  
                     __end_of_eeprom_write 0A60                            ___awmod@counter 0025  
                     __end_of_get_distance 0831                                  ??_get_msg 0028  
     send_HEART_BEAT_RQT_CMD_and_wait@prqt 004B                                  ??_compose 002F  
                         __end_of_send_msg 0AF9                              ?_SaveMenuItem 0070  
                             __pdataCOMMON 007D                     __size_of_is_right_addr 001F  
                  get_distance@start_index 0021                       __size_of_LCDSetStyle 000A  
                             LCDWriteInt@i 0038                               LCDWriteInt@j 0036  
                           _send_half_byte 0F94                                     saved_w 007E  
                        get_plus_index@add 0020                                  ??_sprintf 003B  
                        __end_of_ClearMenu 0A91                       __size_of_LCDWriteInt 00A1  
                  __end_of__initialization 0051                            eeprom_read@addr 0021  
                       create_cmd@cmd_data 0036                     __end_of_LCDWriteString 0EC4  
                                LCDByte@hn 0028                                  LCDByte@ln 0029  
                      ___bmul@multiplicand 0020                             __pcstackCOMMON 0070  
                         ??_get_next_index 0020                               __pidataBANK0 17D4  
                             __pidataBANK1 0812                           crc_calculate@crc 0026  
           create_HEART_BEAT_RQT_CMD@pconn 0046                       __end_of_LoadMenuItem 08AC  
                    __end_of_crc_calculate 0631                             ??_SaveMenuItem 0023  
                   __end_of_send_half_byte 1000                             _OPTION_REGbits 0081  
                        eeprom_write@value 0020                                  ?_ConnInit 0070  
                         ??_get_plus_index 0021                                 __pbssBANK0 006E  
                               __pbssBANK1 00A0                                 __pbssBANK2 0110  
                               __pbssBANK3 0190                                    ?_IOInit 0070  
                                ?_MenuDown 0070                                  ?_MenuInit 0070  
                           get_msg_index@i 0027                            ?_LCDWriteString 002C  
                            _is_right_addr 08EA                                    ?_MenuUp 0070  
                                  ISR@byte 007B                                  ?_ValueDec 0070  
                                ?_ValueInc 0070                                 __pmaintext 0055  
                                ?_ShowMenu 0070                                    ?___bmul 0020  
                               __pintentry 0004              create_HEART_BEAT_RQT_CMD@pmsg 0041  
            create_HEART_BEAT_RQT_CMD@prqt 0040                     __size_of_receive_input 0075  
                       __size_of_send_byte 002B                                    ?_memcpy 0020  
                                  _ADCInit 08BF                           SaveMenuItem@item 0025  
                           ClearMenu@count 0032                            ?_send_half_byte 0020  
                               _crc_verify 0949                                    _LCDByte 07A8  
                                  _LCDInit 0F2C                                 _create_cmd 098F  
                       get_msg@start_index 002D                                 _buffer_rcv 01B8  
                               ??_ConnInit 0024                                 __stringtab 0631  
                         LCDSetStyle@style 002C                                 ??_MenuDown 0020  
                 __size_of_get_minus_index 0010                                 ??_MenuInit 0025  
                          __size_of_IOInit 004D                             ?_is_right_addr 0020  
                     __size_of_send_string 001F                                  ?_send_msg 0070  
                               ??_ValueDec 0026                            __size_of_MenuUp 0011  
                               ??_ValueInc 0026                                 ??_ShowMenu 003A  
                    __size_of_eeprom_write 0030                      __size_of_get_distance 0010  
                          _start_index_rcv 006F                            __size_of___bmul 0013  
                                  ___cgram 00E1                                    ___awdiv 0D4D  
                                  ___awmod 0C05                                    ___lwdiv 0B2E  
                                  ___lwmod 0A91                                    _debug_1 0DA8  
                          __size_of_memcpy 002B                                  _ANSELbits 0188  
                                  __ptext1 06B4                                    __ptext2 0AC5  
                                  __ptext3 0909                                    __ptext4 0A05  
                                  __ptext5 0F94                                    __ptext6 08EA  
                                  __ptext7 0B6C                                    __ptext8 02DB  
                                  __ptext9 0803                                    _get_msg 0B6C  
                                  _compose 0C52                               __size_of_ISR 0035  
                 __end_ofi1_get_next_index 17EA                                    _dpowers 0641  
                         ___awmod@dividend 0022                 ?_create_HEART_BEAT_RQT_CMD 0040  
                     get_minus_index@index 0021                                    _msg_rcv 01D8  
                                  _low_rcv 006A                                  _LCDGotoXY 09B4  
                                  _submode 00EF                                    _sprintf 041E  
                                  clrloop0 17D9                                    main@ret 00CB  
                                  main@rsp 00D3                                    main@rqt 00D2  
                            _receive_input 0733                       end_of_initialization 0051  
                        __end_of_send_byte 0A30                                    memcpy@d 0027  
                                  memcpy@n 0022                                    memcpy@s 0025  
                             _eeprom_write 0A30                               _get_distance 0821  
                      get_next_index@index 0020                       __end_of_SaveMenuItem 0886  
                    __size_of_LoadMenuItem 0013                                 ??_send_msg 002C  
                    __end_of_get_msg_index 041E                                  ConnInit@i 0026  
                        __end_of_stop_mark 0653                                ?_crc_verify 0070  
                       is_right_addr@pconn 0023                                ?_create_cmd 0034  
                        LCDWriteString@msg 002C                                  _TRISAbits 0085  
                                _TRISBbits 0086                                  _TRISCbits 0087  
                               ?_LCDGotoXY 002C                             ?_receive_input 0070  
                             _LoadMenuItem 0899                                 _start_mark 064B  
                          ??_is_right_addr 0021                                 LCDInit@__i 002F  
                            ??_eeprom_read 0020                                 LCDGotoXY@x 002E  
                               LCDGotoXY@y 002C                             __end_of_IOInit 0C05  
                         LoadMenuItem@item 0024                                  _ClearMenu 0A60  
                        ??_get_minus_index 0021                              ??_LCDBusyLoop 0020  
                           __end_of_MenuUp 0863                                 compose@cmd 002C  
                               compose@len 0031                             __end_of___bmul 0899  
                        crc_calculate@pmsg 0020                              __pidataCOMMON 07FF  
                            ??_LCDSetStyle 002C                             __end_of_memcpy 0A05  
                      start_initialization 0015                                __end_of_ISR 0B2E  
                           crc_calculate@i 0028                              ??_LCDWriteInt 002F  
                         ??_LCDWriteString 002E                              ShowMenu@count 003E  
                        __size_of_ConnInit 0055                                   ??_IOInit 0020  
                 __CFG_FOSC$INTRC_NOCLKOUT 0000                          __size_of_MenuDown 0011  
                      __size_of_crc_verify 0022                          __size_of_MenuInit 0054  
                               ?_ClearMenu 0070                                   ??_MenuUp 0020  
                      __size_of_create_cmd 0025                     get_msg_index@end_index 0023  
                                ShowMenu@i 003F                                   ??___bmul 0021  
                      __end_of_eeprom_read 098F                                 init_fetch0 0863  
                         ??_send_half_byte 0021                          __size_of_ValueDec 0013  
                        __size_of_ValueInc 0017        send_HEART_BEAT_RQT_CMD_and_wait@msg 0050  
                              __pdataBANK0 006A                                __pdataBANK1 00E1  
                        __size_of_ShowMenu 005E                                   ??_memcpy 0024  
                                 ?_ADCInit 0070                               debug_1@count 0049  
                      __end_of_LCDBusyLoop 0F2C                                   ?_LCDByte 0025  
                                 ?_LCDInit 0070                                __pbssCOMMON 007C  
                                 LCDByte@c 002A                                  ___latbits 0002  
                          ??_receive_input 0071                              __pcstackBANK0 0020  
                            __pcstackBANK1 00CB                                ??_LCDGotoXY 002D  
                      __end_of_LCDSetStyle 17F4                      __size_of_SaveMenuItem 0012  
                           compose@datalen 002E                           eeprom_write@addr 0022  
                         LCDWriteInt@F1650 00E9                                sprintf@flag 003F  
                              sprintf@prec 0040                        __end_of_LCDWriteInt 0595  
                   __size_of_crc_calculate 009C                                   ISR@value 007A  
                         ___lwdiv@dividend 0022                          __size_of_send_msg 0034  
                                 ?___awdiv 0020                                   ?___awmod 0020  
                                 ?___lwdiv 0020                                   ?___lwmod 0028  
                                 ?_debug_1 0070                                  __pstrings 0631  
                                 ?_get_msg 0070                                   ?_compose 0029  
                               send_byte@c 0026                          ?i1_get_next_index 0070  
                             _SaveMenuItem 0874                                _client_conn 0190  
                  __size_of_get_next_index 000C                                  _count_rcv 006E  
              ??_create_HEART_BEAT_RQT_CMD 0042                         ??i1_get_next_index 0070  
                                debug_1@v1 0048                            LCDBusyLoop@busy 0022  
                          LCDBusyLoop@temp 0023                           ___lwdiv@quotient 0025  
                                 ?_sprintf 002E                              ??_send_string 002A  
                 get_msg_index@start_index 0026                          interrupt_function 0004  
                                clear_ram0 17D8                                _eeprom_read 096B  
                    get_distance@end_index 0020                                  _send_byte 0A05  
                              ??_ClearMenu 0031                    __size_of_get_plus_index 000F  
                              _LCDBusyLoop 0EC4                          is_right_addr@pmsg 0020  
                         LCDWriteString@cc 0030                           __size_of_ADCInit 0014  
                               _ADCON0bits 001F                                __stringbase 0640  
                               _ADCON1bits 009F                                _LCDSetStyle 17EA  
                                main@i_761 00DD                                  main@i_770 00E0  
                                main@i_764 00DE                                  main@i_758 00DC  
                                main@i_767 00DF                               ??_crc_verify 0029  
                            _crc_calculate 0595                               ??_create_cmd 0039  
                                main@count 00D5                                  main@pconn 00D1  
                                main@sendc 00CD                           __size_of_LCDByte 0057  
                         __size_of_LCDInit 0068                                  main@value 00CC  
                                _stop_mark 064F                               send_msg@pmsg 002E  
                                compose@to 002A                                   _ConnInit 0CF8  
                              _LCDWriteInt 04F4                            _get_minus_index 0831  
                                 _MenuDown 0841                                   _MenuInit 0CA4  
                               ?_send_byte 0070                  _create_HEART_BEAT_RQT_CMD 0928  
                             send_string@i 002B                         __end_of_crc_verify 096B  
                      __end_of_send_string 0928                                   _ValueDec 08AC  
                                 _ValueInc 08D3                         __end_of_create_cmd 09B4  
                                 _ShowMenu 0E04                               _low_half_rcv 007D  
                         __size_of___awdiv 005B                           __size_of___awmod 004D  
                        LCDBusyLoop@status 0024                           __size_of___lwdiv 003E  
                         __size_of___lwmod 0034                         __end_of__stringtab 0641  
                         __size_of_debug_1 005C                              _end_index_rcv 007C  
                           ?_crc_calculate 0020                                 _ANSELHbits 0189  
                         __size_of_get_msg 004C                                 sprintf@val 0041  
                         __size_of_compose 0052                            ___lwdiv@divisor 0020  
                          ___lwdiv@counter 0027                                   __ptext10 17F4  
                                 __ptext11 0831                                   __ptext20 09DA  
                                 __ptext12 0821                                   __ptext21 0949  
                                 __ptext13 0DA8                                   __ptext30 0D4D  
                                 __ptext22 0595                                   __ptext14 041E  
                                 __ptext31 0852                                   __ptext23 08D3  
                                 __ptext15 0A91                                   __ptext40 0886  
                                 __ptext32 0CA4                                   __ptext24 08AC  
                                 __ptext16 0B2E                                   __ptext41 0A60  
                                 __ptext33 0899                                   __ptext25 0874  
                                 __ptext17 0928                                   __ptext42 0E62  
                                 __ptext34 096B                                   __ptext26 0A30  
                                 __ptext18 098F                                   __ptext43 09B4  
                                 __ptext35 0841                                   __ptext27 0E04  
                                 __ptext19 0C52                                   __ptext44 07A8  
                                 __ptext36 17EA                                   __ptext28 04F4  
                                 __ptext45 0EC4                                   __ptext37 0F2C  
                                 __ptext29 0C05                                   __ptext46 08BF  
                                 __ptext38 0BB8                                   __ptext47 0AF9  
                                 __ptext39 0CF8                                   __ptext48 0733  
                                 __ptext49 17E0                          __CFG_BOR4V$BOR21V 0000  
                         __size_of_sprintf 00D6                                  send_msg@s 002D  
                   __size_of_get_msg_index 0143                                   debug_1@i 004A  
                            __size_of_main 0286                      __end_of_is_right_addr 0909  
                                 _send_msg 0AC5                                   _pmsg_rcv 006C  
                                 get_msg@i 002B                                   _pstr_rcv 006D  
                                 main@revc 00CE                                   main@prsp 00D0  
                                 main@prqt 00CF                             _get_next_index 17F4  
                               _INTCONbits 000B                    __end_of_get_minus_index 0841  
                               ClearMenu@i 0033                                   memcpy@d1 0028  
                                 memcpy@s1 0020                                   init_ram0 0867  
                                 intlevel1 0000                                  sprintf@ap 003E  
                                sprintf@sp 0043                                _send_string 0909  
                         ___lwmod@dividend 002A                             LCDWriteInt@val 002C  
                           LCDWriteInt@str 0031                      i1get_next_index@index 0070  
                              ??_send_byte 0024                                  stringcode 063B  
                       receive_input@byte1 0073                         receive_input@byte2 0074  
                           _get_plus_index 0803                         receive_input@value 0072  
                           crc_verify@pmsg 002B                              _get_msg_index 02DB  
                          ??_crc_calculate 0022                     __end_of_get_next_index 1800  
                       __end_of_start_mark 064F                                   sprintf@c 0044  
                                 sprintf@f 002E                            ___lwmod@divisor 0028  
                      get_plus_index@index 0022                            ___lwmod@counter 002D  
                                 stringdir 063B                                   stringtab 0631  
                      LCDWriteString@count 002F                      __end_of_receive_input 07A8  
                      send_half_byte@value 0022                              ?_eeprom_write 0020  
                            ?_get_distance 0020                         send_half_byte@byte 0023  
                __size_ofi1_get_next_index 000A                               ?_eeprom_read 0070  
                   __end_of_get_plus_index 0812                          send_half_byte@low 0020  
                  __size_of_LCDWriteString 0062  
