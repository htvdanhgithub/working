

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Aug 27 02:56:54 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	dabs	1,0x7E,2
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0014                     	;# 
    96  0015                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  0087                     	;# 
   113  0089                     	;# 
   114  008C                     	;# 
   115  008D                     	;# 
   116  008E                     	;# 
   117  008F                     	;# 
   118  0090                     	;# 
   119  0091                     	;# 
   120  0092                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0093                     	;# 
   124  0094                     	;# 
   125  0095                     	;# 
   126  0096                     	;# 
   127  0097                     	;# 
   128  0098                     	;# 
   129  0099                     	;# 
   130  009A                     	;# 
   131  009B                     	;# 
   132  009C                     	;# 
   133  009D                     	;# 
   134  009E                     	;# 
   135  009F                     	;# 
   136  0105                     	;# 
   137  0107                     	;# 
   138  0108                     	;# 
   139  0109                     	;# 
   140  010C                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  010E                     	;# 
   144  010F                     	;# 
   145  0185                     	;# 
   146  0187                     	;# 
   147  0188                     	;# 
   148  0189                     	;# 
   149  018C                     	;# 
   150  018D                     	;# 
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  0007                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0089                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  008F                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0093                     	;# 
   200  0094                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0098                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  009F                     	;# 
   212  0105                     	;# 
   213  0107                     	;# 
   214  0108                     	;# 
   215  0109                     	;# 
   216  010C                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  010F                     	;# 
   221  0185                     	;# 
   222  0187                     	;# 
   223  0188                     	;# 
   224  0189                     	;# 
   225  018C                     	;# 
   226  018D                     	;# 
   227                           
   228                           	psect	idataBANK0
   229  1989                     __pidataBANK0:	
   230                           
   231                           ;initializer for _temp_pre_hole
   232  1989  34FF               	retlw	255
   233                           
   234                           	psect	idataBANK1
   235  1000                     __pidataBANK1:	
   236                           
   237                           ;initializer for _cur_x
   238  1000  3402               	retlw	2
   239                           
   240                           ;initializer for _temp_pre_high
   241  1001  34FF               	retlw	255
   242                           
   243                           	psect	idataBANK3
   244  1AB7                     __pidataBANK3:	
   245                           
   246                           ;initializer for _g_char_info
   247  1AB7  3400               	retlw	0
   248  1AB8  3400               	retlw	0
   249  1AB9  3402               	retlw	2
   250  1ABA  3402               	retlw	2
   251  1ABB  3400               	retlw	0
   252  1ABC  3402               	retlw	2
   253  1ABD  3404               	retlw	4
   254  1ABE  3400               	retlw	0
   255  1ABF  3402               	retlw	2
   256  1AC0  3406               	retlw	6
   257  1AC1  3400               	retlw	0
   258  1AC2  3404               	retlw	4
   259  1AC3  340A               	retlw	10
   260  1AC4  3400               	retlw	0
   261  1AC5  3404               	retlw	4
   262  1AC6  340E               	retlw	14
   263  1AC7  3400               	retlw	0
   264  1AC8  3401               	retlw	1
   265  1AC9  340F               	retlw	15
   266  1ACA  3400               	retlw	0
   267  1ACB  3404               	retlw	4
   268  1ACC  3413               	retlw	19
   269  1ACD  3400               	retlw	0
   270  1ACE  3401               	retlw	1
   271  1ACF  3414               	retlw	20
   272  1AD0  3400               	retlw	0
   273  1AD1  3404               	retlw	4
   274                           
   275                           ;initializer for _randx
   276  1AD2  3401               	retlw	1
   277  1AD3  3400               	retlw	0
   278  1AD4  3400               	retlw	0
   279  1AD5  3400               	retlw	0
   280                           
   281                           ;initializer for _temp_pre_risk
   282  1AD6  34FF               	retlw	255
   283  1AD7  34FF               	retlw	255
   284                           
   285                           ;initializer for _tem_pre_sub_index
   286  1AD8  34FF               	retlw	-1
   287                           
   288                           ;initializer for _temp_pre_x
   289  1AD9  34FF               	retlw	-1
   290                           
   291                           	psect	stringtext
   292  0800                     __pstringtext:	
   293  0800                     stringtab:	
   294  0800                     __stringtab:	
   295                           
   296                           ;	String table - string pointers are 2 bytes each
   297  0800  1BFF               	btfsc	btemp+1,7
   298  0801  280A               	ljmp	stringcode
   299  0802  1383               	bcf	3,7
   300  0803  187F               	btfsc	btemp+1,0
   301  0804  1783               	bsf	3,7
   302  0805  0800               	movf	0,w
   303  0806  0A84               	incf	4,f
   304  0807  1903               	skipnz
   305  0808  0AFF               	incf	btemp+1,f
   306  0809  0008               	return
   307  080A                     stringcode:	
   308  080A  087F               	movf	btemp+1,w
   309  080B  397F               	andlw	127
   310  080C  008A               	movwf	10
   311  080D  0804               	movf	4,w
   312  080E  0A84               	incf	4,f
   313  080F  1903               	skipnz
   314  0810  0AFF               	incf	btemp+1,f
   315  0811  0082               	movwf	2
   316  0812                     __stringbase:	
   317  0812                     __end_of__stringtab:	
   318  0812                     _octpowers:	
   319  0812  3401               	retlw	1
   320  0813  3400               	retlw	0
   321  0814  3408               	retlw	8
   322  0815  3400               	retlw	0
   323  0816  3440               	retlw	64
   324  0817  3400               	retlw	0
   325  0818  3400               	retlw	0
   326  0819  3402               	retlw	2
   327  081A  3400               	retlw	0
   328  081B  3410               	retlw	16
   329  081C  3400               	retlw	0
   330  081D  3480               	retlw	128
   331  081E                     __end_of_octpowers:	
   332  081E                     _dpowers:	
   333  081E  3401               	retlw	1
   334  081F  3400               	retlw	0
   335  0820  340A               	retlw	10
   336  0821  3400               	retlw	0
   337  0822  3464               	retlw	100
   338  0823  3400               	retlw	0
   339  0824  34E8               	retlw	232
   340  0825  3403               	retlw	3
   341  0826  3410               	retlw	16
   342  0827  3427               	retlw	39
   343  0828                     __end_of_dpowers:	
   344  0828                     _hexpowers:	
   345  0828  3401               	retlw	1
   346  0829  3400               	retlw	0
   347  082A  3410               	retlw	16
   348  082B  3400               	retlw	0
   349  082C  3400               	retlw	0
   350  082D  3401               	retlw	1
   351  082E  3400               	retlw	0
   352  082F  3410               	retlw	16
   353  0830                     __end_of_hexpowers:	
   354  0830                     _g_matrix44:	
   355  0830  3400               	retlw	0
   356  0831  3401               	retlw	1
   357  0832  3400               	retlw	0
   358  0833  3400               	retlw	0
   359  0834  3400               	retlw	0
   360  0835  3401               	retlw	1
   361  0836  3400               	retlw	0
   362  0837  3400               	retlw	0
   363  0838  3400               	retlw	0
   364  0839  3401               	retlw	1
   365  083A  3400               	retlw	0
   366  083B  3400               	retlw	0
   367  083C  3400               	retlw	0
   368  083D  3401               	retlw	1
   369  083E  3400               	retlw	0
   370  083F  3400               	retlw	0
   371  0840  3400               	retlw	0
   372  0841  3400               	retlw	0
   373  0842  3400               	retlw	0
   374  0843  3400               	retlw	0
   375  0844  3401               	retlw	1
   376  0845  3401               	retlw	1
   377  0846  3401               	retlw	1
   378  0847  3401               	retlw	1
   379  0848  3400               	retlw	0
   380  0849  3400               	retlw	0
   381  084A  3400               	retlw	0
   382  084B  3400               	retlw	0
   383  084C  3400               	retlw	0
   384  084D  3400               	retlw	0
   385  084E  3400               	retlw	0
   386  084F  3400               	retlw	0
   387  0850  3400               	retlw	0
   388  0851  3401               	retlw	1
   389  0852  3401               	retlw	1
   390  0853  3400               	retlw	0
   391  0854  3401               	retlw	1
   392  0855  3401               	retlw	1
   393  0856  3400               	retlw	0
   394  0857  3400               	retlw	0
   395  0858  3400               	retlw	0
   396  0859  3400               	retlw	0
   397  085A  3400               	retlw	0
   398  085B  3400               	retlw	0
   399  085C  3400               	retlw	0
   400  085D  3400               	retlw	0
   401  085E  3400               	retlw	0
   402  085F  3400               	retlw	0
   403  0860  3400               	retlw	0
   404  0861  3401               	retlw	1
   405  0862  3400               	retlw	0
   406  0863  3400               	retlw	0
   407  0864  3400               	retlw	0
   408  0865  3401               	retlw	1
   409  0866  3401               	retlw	1
   410  0867  3400               	retlw	0
   411  0868  3400               	retlw	0
   412  0869  3400               	retlw	0
   413  086A  3401               	retlw	1
   414  086B  3400               	retlw	0
   415  086C  3400               	retlw	0
   416  086D  3400               	retlw	0
   417  086E  3400               	retlw	0
   418  086F  3400               	retlw	0
   419  0870  3401               	retlw	1
   420  0871  3401               	retlw	1
   421  0872  3400               	retlw	0
   422  0873  3400               	retlw	0
   423  0874  3400               	retlw	0
   424  0875  3401               	retlw	1
   425  0876  3401               	retlw	1
   426  0877  3400               	retlw	0
   427  0878  3400               	retlw	0
   428  0879  3400               	retlw	0
   429  087A  3400               	retlw	0
   430  087B  3400               	retlw	0
   431  087C  3400               	retlw	0
   432  087D  3400               	retlw	0
   433  087E  3400               	retlw	0
   434  087F  3400               	retlw	0
   435  0880  3400               	retlw	0
   436  0881  3401               	retlw	1
   437  0882  3400               	retlw	0
   438  0883  3400               	retlw	0
   439  0884  3401               	retlw	1
   440  0885  3401               	retlw	1
   441  0886  3400               	retlw	0
   442  0887  3400               	retlw	0
   443  0888  3401               	retlw	1
   444  0889  3400               	retlw	0
   445  088A  3400               	retlw	0
   446  088B  3400               	retlw	0
   447  088C  3400               	retlw	0
   448  088D  3400               	retlw	0
   449  088E  3400               	retlw	0
   450  088F  3400               	retlw	0
   451  0890  3400               	retlw	0
   452  0891  3400               	retlw	0
   453  0892  3400               	retlw	0
   454  0893  3400               	retlw	0
   455  0894  3401               	retlw	1
   456  0895  3401               	retlw	1
   457  0896  3401               	retlw	1
   458  0897  3400               	retlw	0
   459  0898  3400               	retlw	0
   460  0899  3400               	retlw	0
   461  089A  3401               	retlw	1
   462  089B  3400               	retlw	0
   463  089C  3400               	retlw	0
   464  089D  3400               	retlw	0
   465  089E  3400               	retlw	0
   466  089F  3400               	retlw	0
   467  08A0  3400               	retlw	0
   468  08A1  3401               	retlw	1
   469  08A2  3401               	retlw	1
   470  08A3  3400               	retlw	0
   471  08A4  3400               	retlw	0
   472  08A5  3401               	retlw	1
   473  08A6  3400               	retlw	0
   474  08A7  3400               	retlw	0
   475  08A8  3400               	retlw	0
   476  08A9  3401               	retlw	1
   477  08AA  3400               	retlw	0
   478  08AB  3400               	retlw	0
   479  08AC  3400               	retlw	0
   480  08AD  3400               	retlw	0
   481  08AE  3400               	retlw	0
   482  08AF  3400               	retlw	0
   483  08B0  3401               	retlw	1
   484  08B1  3400               	retlw	0
   485  08B2  3400               	retlw	0
   486  08B3  3400               	retlw	0
   487  08B4  3401               	retlw	1
   488  08B5  3401               	retlw	1
   489  08B6  3401               	retlw	1
   490  08B7  3400               	retlw	0
   491  08B8  3400               	retlw	0
   492  08B9  3400               	retlw	0
   493  08BA  3400               	retlw	0
   494  08BB  3400               	retlw	0
   495  08BC  3400               	retlw	0
   496  08BD  3400               	retlw	0
   497  08BE  3400               	retlw	0
   498  08BF  3400               	retlw	0
   499  08C0  3400               	retlw	0
   500  08C1  3401               	retlw	1
   501  08C2  3400               	retlw	0
   502  08C3  3400               	retlw	0
   503  08C4  3400               	retlw	0
   504  08C5  3401               	retlw	1
   505  08C6  3400               	retlw	0
   506  08C7  3400               	retlw	0
   507  08C8  3401               	retlw	1
   508  08C9  3401               	retlw	1
   509  08CA  3400               	retlw	0
   510  08CB  3400               	retlw	0
   511  08CC  3400               	retlw	0
   512  08CD  3400               	retlw	0
   513  08CE  3400               	retlw	0
   514  08CF  3400               	retlw	0
   515  08D0  3400               	retlw	0
   516  08D1  3400               	retlw	0
   517  08D2  3400               	retlw	0
   518  08D3  3400               	retlw	0
   519  08D4  3401               	retlw	1
   520  08D5  3401               	retlw	1
   521  08D6  3401               	retlw	1
   522  08D7  3400               	retlw	0
   523  08D8  3401               	retlw	1
   524  08D9  3400               	retlw	0
   525  08DA  3400               	retlw	0
   526  08DB  3400               	retlw	0
   527  08DC  3400               	retlw	0
   528  08DD  3400               	retlw	0
   529  08DE  3400               	retlw	0
   530  08DF  3400               	retlw	0
   531  08E0  3401               	retlw	1
   532  08E1  3401               	retlw	1
   533  08E2  3400               	retlw	0
   534  08E3  3400               	retlw	0
   535  08E4  3400               	retlw	0
   536  08E5  3401               	retlw	1
   537  08E6  3400               	retlw	0
   538  08E7  3400               	retlw	0
   539  08E8  3400               	retlw	0
   540  08E9  3401               	retlw	1
   541  08EA  3400               	retlw	0
   542  08EB  3400               	retlw	0
   543  08EC  3400               	retlw	0
   544  08ED  3400               	retlw	0
   545  08EE  3400               	retlw	0
   546  08EF  3400               	retlw	0
   547  08F0  3400               	retlw	0
   548  08F1  3400               	retlw	0
   549  08F2  3401               	retlw	1
   550  08F3  3400               	retlw	0
   551  08F4  3401               	retlw	1
   552  08F5  3401               	retlw	1
   553  08F6  3401               	retlw	1
   554  08F7  3400               	retlw	0
   555  08F8  3400               	retlw	0
   556  08F9  3400               	retlw	0
   557  08FA  3400               	retlw	0
   558  08FB  3400               	retlw	0
   559  08FC  3400               	retlw	0
   560  08FD  3400               	retlw	0
   561  08FE  3400               	retlw	0
   562  08FF  3400               	retlw	0
   563  0900  3400               	retlw	0
   564  0901  3401               	retlw	1
   565  0902  3400               	retlw	0
   566  0903  3400               	retlw	0
   567  0904  3400               	retlw	0
   568  0905  3401               	retlw	1
   569  0906  3400               	retlw	0
   570  0907  3400               	retlw	0
   571  0908  3400               	retlw	0
   572  0909  3401               	retlw	1
   573  090A  3401               	retlw	1
   574  090B  3400               	retlw	0
   575  090C  3400               	retlw	0
   576  090D  3400               	retlw	0
   577  090E  3400               	retlw	0
   578  090F  3400               	retlw	0
   579  0910  3400               	retlw	0
   580  0911  3401               	retlw	1
   581  0912  3401               	retlw	1
   582  0913  3400               	retlw	0
   583  0914  3400               	retlw	0
   584  0915  3401               	retlw	1
   585  0916  3401               	retlw	1
   586  0917  3400               	retlw	0
   587  0918  3400               	retlw	0
   588  0919  3400               	retlw	0
   589  091A  3400               	retlw	0
   590  091B  3400               	retlw	0
   591  091C  3400               	retlw	0
   592  091D  3400               	retlw	0
   593  091E  3400               	retlw	0
   594  091F  3400               	retlw	0
   595  0920  3400               	retlw	0
   596  0921  3400               	retlw	0
   597  0922  3400               	retlw	0
   598  0923  3400               	retlw	0
   599  0924  3400               	retlw	0
   600  0925  3401               	retlw	1
   601  0926  3401               	retlw	1
   602  0927  3400               	retlw	0
   603  0928  3400               	retlw	0
   604  0929  3401               	retlw	1
   605  092A  3400               	retlw	0
   606  092B  3400               	retlw	0
   607  092C  3400               	retlw	0
   608  092D  3400               	retlw	0
   609  092E  3400               	retlw	0
   610  092F  3400               	retlw	0
   611  0930  3400               	retlw	0
   612  0931  3400               	retlw	0
   613  0932  3400               	retlw	0
   614  0933  3400               	retlw	0
   615  0934  3401               	retlw	1
   616  0935  3401               	retlw	1
   617  0936  3400               	retlw	0
   618  0937  3400               	retlw	0
   619  0938  3400               	retlw	0
   620  0939  3401               	retlw	1
   621  093A  3400               	retlw	0
   622  093B  3400               	retlw	0
   623  093C  3400               	retlw	0
   624  093D  3400               	retlw	0
   625  093E  3400               	retlw	0
   626  093F  3400               	retlw	0
   627  0940  3400               	retlw	0
   628  0941  3401               	retlw	1
   629  0942  3400               	retlw	0
   630  0943  3400               	retlw	0
   631  0944  3401               	retlw	1
   632  0945  3401               	retlw	1
   633  0946  3400               	retlw	0
   634  0947  3400               	retlw	0
   635  0948  3400               	retlw	0
   636  0949  3400               	retlw	0
   637  094A  3400               	retlw	0
   638  094B  3400               	retlw	0
   639  094C  3400               	retlw	0
   640  094D  3400               	retlw	0
   641  094E  3400               	retlw	0
   642  094F  3400               	retlw	0
   643  0950  3400               	retlw	0
   644  0951  3401               	retlw	1
   645  0952  3400               	retlw	0
   646  0953  3400               	retlw	0
   647  0954  3400               	retlw	0
   648  0955  3401               	retlw	1
   649  0956  3401               	retlw	1
   650  0957  3400               	retlw	0
   651  0958  3400               	retlw	0
   652  0959  3400               	retlw	0
   653  095A  3400               	retlw	0
   654  095B  3400               	retlw	0
   655  095C  3400               	retlw	0
   656  095D  3400               	retlw	0
   657  095E  3400               	retlw	0
   658  095F  3400               	retlw	0
   659  0960  3400               	retlw	0
   660  0961  3401               	retlw	1
   661  0962  3400               	retlw	0
   662  0963  3400               	retlw	0
   663  0964  3401               	retlw	1
   664  0965  3401               	retlw	1
   665  0966  3401               	retlw	1
   666  0967  3400               	retlw	0
   667  0968  3400               	retlw	0
   668  0969  3401               	retlw	1
   669  096A  3400               	retlw	0
   670  096B  3400               	retlw	0
   671  096C  3400               	retlw	0
   672  096D  3400               	retlw	0
   673  096E  3400               	retlw	0
   674  096F  3400               	retlw	0
   675  0970  3401               	retlw	1
   676  0971  3401               	retlw	1
   677  0972  3401               	retlw	1
   678  0973  3400               	retlw	0
   679  0974  3400               	retlw	0
   680  0975  3401               	retlw	1
   681  0976  3400               	retlw	0
   682  0977  3400               	retlw	0
   683  0978  3400               	retlw	0
   684  0979  3401               	retlw	1
   685  097A  3400               	retlw	0
   686  097B  3400               	retlw	0
   687  097C  3400               	retlw	0
   688  097D  3400               	retlw	0
   689  097E  3400               	retlw	0
   690  097F  3400               	retlw	0
   691  0980  3400               	retlw	0
   692  0981  3400               	retlw	0
   693  0982  3401               	retlw	1
   694  0983  3400               	retlw	0
   695  0984  3401               	retlw	1
   696  0985  3401               	retlw	1
   697  0986  3401               	retlw	1
   698  0987  3400               	retlw	0
   699  0988  3400               	retlw	0
   700  0989  3400               	retlw	0
   701  098A  3401               	retlw	1
   702  098B  3400               	retlw	0
   703  098C  3400               	retlw	0
   704  098D  3400               	retlw	0
   705  098E  3400               	retlw	0
   706  098F  3400               	retlw	0
   707  0990  3400               	retlw	0
   708  0991  3401               	retlw	1
   709  0992  3400               	retlw	0
   710  0993  3400               	retlw	0
   711  0994  3400               	retlw	0
   712  0995  3401               	retlw	1
   713  0996  3400               	retlw	0
   714  0997  3400               	retlw	0
   715  0998  3401               	retlw	1
   716  0999  3401               	retlw	1
   717  099A  3401               	retlw	1
   718  099B  3400               	retlw	0
   719  099C  3400               	retlw	0
   720  099D  3400               	retlw	0
   721  099E  3400               	retlw	0
   722  099F  3400               	retlw	0
   723  09A0  3401               	retlw	1
   724  09A1  3400               	retlw	0
   725  09A2  3400               	retlw	0
   726  09A3  3400               	retlw	0
   727  09A4  3401               	retlw	1
   728  09A5  3401               	retlw	1
   729  09A6  3401               	retlw	1
   730  09A7  3400               	retlw	0
   731  09A8  3401               	retlw	1
   732  09A9  3400               	retlw	0
   733  09AA  3400               	retlw	0
   734  09AB  3400               	retlw	0
   735  09AC  3400               	retlw	0
   736  09AD  3400               	retlw	0
   737  09AE  3400               	retlw	0
   738  09AF  3400               	retlw	0
   739  09B0                     __end_of_g_matrix44:	
   740  09B0                     STR_40:	
   741  09B0  3467               	retlw	103	;'g'
   742  09B1  3465               	retlw	101	;'e'
   743  09B2  3474               	retlw	116	;'t'
   744  09B3  345F               	retlw	95	;'_'
   745  09B4  3468               	retlw	104	;'h'
   746  09B5  3469               	retlw	105	;'i'
   747  09B6  3467               	retlw	103	;'g'
   748  09B7  3468               	retlw	104	;'h'
   749  09B8  345F               	retlw	95	;'_'
   750  09B9  3461               	retlw	97	;'a'
   751  09BA  3466               	retlw	102	;'f'
   752  09BB  3474               	retlw	116	;'t'
   753  09BC  3465               	retlw	101	;'e'
   754  09BD  3472               	retlw	114	;'r'
   755  09BE  345F               	retlw	95	;'_'
   756  09BF  346D               	retlw	109	;'m'
   757  09C0  3465               	retlw	101	;'e'
   758  09C1  3472               	retlw	114	;'r'
   759  09C2  3467               	retlw	103	;'g'
   760  09C3  3465               	retlw	101	;'e'
   761  09C4  3420               	retlw	32	;' '
   762  09C5  3479               	retlw	121	;'y'
   763  09C6  3420               	retlw	32	;' '
   764  09C7  343D               	retlw	61	;'='
   765  09C8  3420               	retlw	32	;' '
   766  09C9  3425               	retlw	37	;'%'
   767  09CA  3464               	retlw	100	;'d'
   768  09CB  342C               	retlw	44	;','
   769  09CC  3420               	retlw	32	;' '
   770  09CD  3472               	retlw	114	;'r'
   771  09CE  346F               	retlw	111	;'o'
   772  09CF  3477               	retlw	119	;'w'
   773  09D0  3420               	retlw	32	;' '
   774  09D1  343D               	retlw	61	;'='
   775  09D2  3420               	retlw	32	;' '
   776  09D3  3425               	retlw	37	;'%'
   777  09D4  3464               	retlw	100	;'d'
   778  09D5  342C               	retlw	44	;','
   779  09D6  3420               	retlw	32	;' '
   780  09D7  3468               	retlw	104	;'h'
   781  09D8  3465               	retlw	101	;'e'
   782  09D9  3469               	retlw	105	;'i'
   783  09DA  3467               	retlw	103	;'g'
   784  09DB  3468               	retlw	104	;'h'
   785  09DC  3474               	retlw	116	;'t'
   786  09DD  3420               	retlw	32	;' '
   787  09DE  343D               	retlw	61	;'='
   788  09DF  3420               	retlw	32	;' '
   789  09E0  3425               	retlw	37	;'%'
   790  09E1  3464               	retlw	100	;'d'
   791  09E2  340A               	retlw	10
   792  09E3  3400               	retlw	0
   793  09E4                     STR_43:	
   794  09E4  343D               	retlw	61	;'='
   795  09E5  343D               	retlw	61	;'='
   796  09E6  343D               	retlw	61	;'='
   797  09E7  343D               	retlw	61	;'='
   798  09E8  343D               	retlw	61	;'='
   799  09E9  343D               	retlw	61	;'='
   800  09EA  343D               	retlw	61	;'='
   801  09EB  343D               	retlw	61	;'='
   802  09EC  343D               	retlw	61	;'='
   803  09ED  343D               	retlw	61	;'='
   804  09EE  343D               	retlw	61	;'='
   805  09EF  343D               	retlw	61	;'='
   806  09F0  343D               	retlw	61	;'='
   807  09F1  343D               	retlw	61	;'='
   808  09F2  3466               	retlw	102	;'f'
   809  09F3  3469               	retlw	105	;'i'
   810  09F4  346E               	retlw	110	;'n'
   811  09F5  3464               	retlw	100	;'d'
   812  09F6  345F               	retlw	95	;'_'
   813  09F7  3462               	retlw	98	;'b'
   814  09F8  3465               	retlw	101	;'e'
   815  09F9  3473               	retlw	115	;'s'
   816  09FA  3474               	retlw	116	;'t'
   817  09FB  345F               	retlw	95	;'_'
   818  09FC  3473               	retlw	115	;'s'
   819  09FD  346F               	retlw	111	;'o'
   820  09FE  346C               	retlw	108	;'l'
   821  09FF  3475               	retlw	117	;'u'
   822  0A00  3474               	retlw	116	;'t'
   823  0A01  3469               	retlw	105	;'i'
   824  0A02  346F               	retlw	111	;'o'
   825  0A03  346E               	retlw	110	;'n'
   826  0A04  343D               	retlw	61	;'='
   827  0A05  343D               	retlw	61	;'='
   828  0A06  343D               	retlw	61	;'='
   829  0A07  343D               	retlw	61	;'='
   830  0A08  343D               	retlw	61	;'='
   831  0A09  343D               	retlw	61	;'='
   832  0A0A  343D               	retlw	61	;'='
   833  0A0B  343D               	retlw	61	;'='
   834  0A0C  343D               	retlw	61	;'='
   835  0A0D  343D               	retlw	61	;'='
   836  0A0E  343D               	retlw	61	;'='
   837  0A0F  343D               	retlw	61	;'='
   838  0A10  3400               	retlw	0
   839  0A11                     STR_11:	
   840  0A11  3470               	retlw	112	;'p'
   841  0A12  3472               	retlw	114	;'r'
   842  0A13  3469               	retlw	105	;'i'
   843  0A14  346E               	retlw	110	;'n'
   844  0A15  3474               	retlw	116	;'t'
   845  0A16  3466               	retlw	102	;'f'
   846  0A17  344D               	retlw	77	;'M'
   847  0A18  3441               	retlw	65	;'A'
   848  0A19  3454               	retlw	84	;'T'
   849  0A1A  3452               	retlw	82	;'R'
   850  0A1B  3449               	retlw	73	;'I'
   851  0A1C  3458               	retlw	88	;'X'
   852  0A1D  3434               	retlw	52	;'4'
   853  0A1E  3434               	retlw	52	;'4'
   854  0A1F  3420               	retlw	32	;' '
   855  0A20  3469               	retlw	105	;'i'
   856  0A21  346E               	retlw	110	;'n'
   857  0A22  3464               	retlw	100	;'d'
   858  0A23  3465               	retlw	101	;'e'
   859  0A24  3478               	retlw	120	;'x'
   860  0A25  3420               	retlw	32	;' '
   861  0A26  343D               	retlw	61	;'='
   862  0A27  3420               	retlw	32	;' '
   863  0A28  3425               	retlw	37	;'%'
   864  0A29  3464               	retlw	100	;'d'
   865  0A2A  342C               	retlw	44	;','
   866  0A2B  3420               	retlw	32	;' '
   867  0A2C  3473               	retlw	115	;'s'
   868  0A2D  3475               	retlw	117	;'u'
   869  0A2E  3462               	retlw	98	;'b'
   870  0A2F  345F               	retlw	95	;'_'
   871  0A30  3469               	retlw	105	;'i'
   872  0A31  346E               	retlw	110	;'n'
   873  0A32  3464               	retlw	100	;'d'
   874  0A33  3465               	retlw	101	;'e'
   875  0A34  3478               	retlw	120	;'x'
   876  0A35  3420               	retlw	32	;' '
   877  0A36  343D               	retlw	61	;'='
   878  0A37  3420               	retlw	32	;' '
   879  0A38  3425               	retlw	37	;'%'
   880  0A39  3464               	retlw	100	;'d'
   881  0A3A  3400               	retlw	0
   882  0A3B                     STR_47:	
   883  0A3B  3474               	retlw	116	;'t'
   884  0A3C  3465               	retlw	101	;'e'
   885  0A3D  346D               	retlw	109	;'m'
   886  0A3E  3470               	retlw	112	;'p'
   887  0A3F  345F               	retlw	95	;'_'
   888  0A40  3463               	retlw	99	;'c'
   889  0A41  346F               	retlw	111	;'o'
   890  0A42  3475               	retlw	117	;'u'
   891  0A43  346E               	retlw	110	;'n'
   892  0A44  3474               	retlw	116	;'t'
   893  0A45  3428               	retlw	40	;'('
   894  0A46  3425               	retlw	37	;'%'
   895  0A47  3464               	retlw	100	;'d'
   896  0A48  3429               	retlw	41	;')'
   897  0A49  3420               	retlw	32	;' '
   898  0A4A  343D               	retlw	61	;'='
   899  0A4B  343D               	retlw	61	;'='
   900  0A4C  3420               	retlw	32	;' '
   901  0A4D  3474               	retlw	116	;'t'
   902  0A4E  3465               	retlw	101	;'e'
   903  0A4F  346D               	retlw	109	;'m'
   904  0A50  3470               	retlw	112	;'p'
   905  0A51  345F               	retlw	95	;'_'
   906  0A52  3470               	retlw	112	;'p'
   907  0A53  3472               	retlw	114	;'r'
   908  0A54  3465               	retlw	101	;'e'
   909  0A55  345F               	retlw	95	;'_'
   910  0A56  3463               	retlw	99	;'c'
   911  0A57  346F               	retlw	111	;'o'
   912  0A58  3475               	retlw	117	;'u'
   913  0A59  346E               	retlw	110	;'n'
   914  0A5A  3474               	retlw	116	;'t'
   915  0A5B  3428               	retlw	40	;'('
   916  0A5C  3425               	retlw	37	;'%'
   917  0A5D  3464               	retlw	100	;'d'
   918  0A5E  3429               	retlw	41	;')'
   919  0A5F  340A               	retlw	10
   920  0A60  3400               	retlw	0
   921  0A61                     STR_45:	
   922  0A61  3474               	retlw	116	;'t'
   923  0A62  3465               	retlw	101	;'e'
   924  0A63  346D               	retlw	109	;'m'
   925  0A64  3470               	retlw	112	;'p'
   926  0A65  345F               	retlw	95	;'_'
   927  0A66  3463               	retlw	99	;'c'
   928  0A67  346F               	retlw	111	;'o'
   929  0A68  3475               	retlw	117	;'u'
   930  0A69  346E               	retlw	110	;'n'
   931  0A6A  3474               	retlw	116	;'t'
   932  0A6B  3428               	retlw	40	;'('
   933  0A6C  3425               	retlw	37	;'%'
   934  0A6D  3464               	retlw	100	;'d'
   935  0A6E  3429               	retlw	41	;')'
   936  0A6F  3420               	retlw	32	;' '
   937  0A70  343E               	retlw	62	;'>'
   938  0A71  3420               	retlw	32	;' '
   939  0A72  3474               	retlw	116	;'t'
   940  0A73  3465               	retlw	101	;'e'
   941  0A74  346D               	retlw	109	;'m'
   942  0A75  3470               	retlw	112	;'p'
   943  0A76  345F               	retlw	95	;'_'
   944  0A77  3470               	retlw	112	;'p'
   945  0A78  3472               	retlw	114	;'r'
   946  0A79  3465               	retlw	101	;'e'
   947  0A7A  345F               	retlw	95	;'_'
   948  0A7B  3463               	retlw	99	;'c'
   949  0A7C  346F               	retlw	111	;'o'
   950  0A7D  3475               	retlw	117	;'u'
   951  0A7E  346E               	retlw	110	;'n'
   952  0A7F  3474               	retlw	116	;'t'
   953  0A80  3428               	retlw	40	;'('
   954  0A81  3425               	retlw	37	;'%'
   955  0A82  3464               	retlw	100	;'d'
   956  0A83  3429               	retlw	41	;')'
   957  0A84  340A               	retlw	10
   958  0A85  3400               	retlw	0
   959  0A86                     STR_58:	
   960  0A86  3474               	retlw	116	;'t'
   961  0A87  3465               	retlw	101	;'e'
   962  0A88  346D               	retlw	109	;'m'
   963  0A89  3470               	retlw	112	;'p'
   964  0A8A  345F               	retlw	95	;'_'
   965  0A8B  3468               	retlw	104	;'h'
   966  0A8C  346F               	retlw	111	;'o'
   967  0A8D  346C               	retlw	108	;'l'
   968  0A8E  3465               	retlw	101	;'e'
   969  0A8F  3428               	retlw	40	;'('
   970  0A90  3425               	retlw	37	;'%'
   971  0A91  3464               	retlw	100	;'d'
   972  0A92  3429               	retlw	41	;')'
   973  0A93  3420               	retlw	32	;' '
   974  0A94  343D               	retlw	61	;'='
   975  0A95  343D               	retlw	61	;'='
   976  0A96  3420               	retlw	32	;' '
   977  0A97  3474               	retlw	116	;'t'
   978  0A98  3465               	retlw	101	;'e'
   979  0A99  346D               	retlw	109	;'m'
   980  0A9A  3470               	retlw	112	;'p'
   981  0A9B  345F               	retlw	95	;'_'
   982  0A9C  3470               	retlw	112	;'p'
   983  0A9D  3472               	retlw	114	;'r'
   984  0A9E  3465               	retlw	101	;'e'
   985  0A9F  345F               	retlw	95	;'_'
   986  0AA0  3468               	retlw	104	;'h'
   987  0AA1  346F               	retlw	111	;'o'
   988  0AA2  346C               	retlw	108	;'l'
   989  0AA3  3465               	retlw	101	;'e'
   990  0AA4  3428               	retlw	40	;'('
   991  0AA5  3425               	retlw	37	;'%'
   992  0AA6  3464               	retlw	100	;'d'
   993  0AA7  3429               	retlw	41	;')'
   994  0AA8  340A               	retlw	10
   995  0AA9  3400               	retlw	0
   996  0AAA                     STR_51:	
   997  0AAA  3474               	retlw	116	;'t'
   998  0AAB  3465               	retlw	101	;'e'
   999  0AAC  346D               	retlw	109	;'m'
  1000  0AAD  3470               	retlw	112	;'p'
  1001  0AAE  345F               	retlw	95	;'_'
  1002  0AAF  3468               	retlw	104	;'h'
  1003  0AB0  3469               	retlw	105	;'i'
  1004  0AB1  3467               	retlw	103	;'g'
  1005  0AB2  3468               	retlw	104	;'h'
  1006  0AB3  3428               	retlw	40	;'('
  1007  0AB4  3425               	retlw	37	;'%'
  1008  0AB5  3464               	retlw	100	;'d'
  1009  0AB6  3429               	retlw	41	;')'
  1010  0AB7  3420               	retlw	32	;' '
  1011  0AB8  343D               	retlw	61	;'='
  1012  0AB9  343D               	retlw	61	;'='
  1013  0ABA  3420               	retlw	32	;' '
  1014  0ABB  3474               	retlw	116	;'t'
  1015  0ABC  3465               	retlw	101	;'e'
  1016  0ABD  346D               	retlw	109	;'m'
  1017  0ABE  3470               	retlw	112	;'p'
  1018  0ABF  345F               	retlw	95	;'_'
  1019  0AC0  3470               	retlw	112	;'p'
  1020  0AC1  3472               	retlw	114	;'r'
  1021  0AC2  3465               	retlw	101	;'e'
  1022  0AC3  345F               	retlw	95	;'_'
  1023  0AC4  3468               	retlw	104	;'h'
  1024  0AC5  3469               	retlw	105	;'i'
  1025  0AC6  3467               	retlw	103	;'g'
  1026  0AC7  3468               	retlw	104	;'h'
  1027  0AC8  3428               	retlw	40	;'('
  1028  0AC9  3425               	retlw	37	;'%'
  1029  0ACA  3464               	retlw	100	;'d'
  1030  0ACB  3429               	retlw	41	;')'
  1031  0ACC  340A               	retlw	10
  1032  0ACD  3400               	retlw	0
  1033  0ACE                     STR_49:	
  1034  0ACE  3474               	retlw	116	;'t'
  1035  0ACF  3465               	retlw	101	;'e'
  1036  0AD0  346D               	retlw	109	;'m'
  1037  0AD1  3470               	retlw	112	;'p'
  1038  0AD2  345F               	retlw	95	;'_'
  1039  0AD3  3472               	retlw	114	;'r'
  1040  0AD4  3469               	retlw	105	;'i'
  1041  0AD5  3473               	retlw	115	;'s'
  1042  0AD6  346B               	retlw	107	;'k'
  1043  0AD7  3428               	retlw	40	;'('
  1044  0AD8  3425               	retlw	37	;'%'
  1045  0AD9  3464               	retlw	100	;'d'
  1046  0ADA  3429               	retlw	41	;')'
  1047  0ADB  3420               	retlw	32	;' '
  1048  0ADC  343D               	retlw	61	;'='
  1049  0ADD  343D               	retlw	61	;'='
  1050  0ADE  3420               	retlw	32	;' '
  1051  0ADF  3474               	retlw	116	;'t'
  1052  0AE0  3465               	retlw	101	;'e'
  1053  0AE1  346D               	retlw	109	;'m'
  1054  0AE2  3470               	retlw	112	;'p'
  1055  0AE3  345F               	retlw	95	;'_'
  1056  0AE4  3470               	retlw	112	;'p'
  1057  0AE5  3472               	retlw	114	;'r'
  1058  0AE6  3465               	retlw	101	;'e'
  1059  0AE7  345F               	retlw	95	;'_'
  1060  0AE8  3472               	retlw	114	;'r'
  1061  0AE9  3469               	retlw	105	;'i'
  1062  0AEA  3473               	retlw	115	;'s'
  1063  0AEB  346B               	retlw	107	;'k'
  1064  0AEC  3428               	retlw	40	;'('
  1065  0AED  3425               	retlw	37	;'%'
  1066  0AEE  3464               	retlw	100	;'d'
  1067  0AEF  3429               	retlw	41	;')'
  1068  0AF0  340A               	retlw	10
  1069  0AF1  3400               	retlw	0
  1070  0AF2                     STR_54:	
  1071  0AF2  3474               	retlw	116	;'t'
  1072  0AF3  3465               	retlw	101	;'e'
  1073  0AF4  346D               	retlw	109	;'m'
  1074  0AF5  3470               	retlw	112	;'p'
  1075  0AF6  345F               	retlw	95	;'_'
  1076  0AF7  3468               	retlw	104	;'h'
  1077  0AF8  3469               	retlw	105	;'i'
  1078  0AF9  3467               	retlw	103	;'g'
  1079  0AFA  3468               	retlw	104	;'h'
  1080  0AFB  3420               	retlw	32	;' '
  1081  0AFC  343D               	retlw	61	;'='
  1082  0AFD  3420               	retlw	32	;' '
  1083  0AFE  3425               	retlw	37	;'%'
  1084  0AFF  3464               	retlw	100	;'d'
  1085  0B00  342C               	retlw	44	;','
  1086  0B01  3420               	retlw	32	;' '
  1087  0B02  3474               	retlw	116	;'t'
  1088  0B03  3465               	retlw	101	;'e'
  1089  0B04  346D               	retlw	109	;'m'
  1090  0B05  3470               	retlw	112	;'p'
  1091  0B06  345F               	retlw	95	;'_'
  1092  0B07  3470               	retlw	112	;'p'
  1093  0B08  3472               	retlw	114	;'r'
  1094  0B09  3465               	retlw	101	;'e'
  1095  0B0A  345F               	retlw	95	;'_'
  1096  0B0B  3468               	retlw	104	;'h'
  1097  0B0C  3469               	retlw	105	;'i'
  1098  0B0D  3467               	retlw	103	;'g'
  1099  0B0E  3468               	retlw	104	;'h'
  1100  0B0F  3420               	retlw	32	;' '
  1101  0B10  343D               	retlw	61	;'='
  1102  0B11  3420               	retlw	32	;' '
  1103  0B12  3425               	retlw	37	;'%'
  1104  0B13  3464               	retlw	100	;'d'
  1105  0B14  340A               	retlw	10
  1106  0B15  3400               	retlw	0
  1107  0B16                     STR_44:	
  1108  0B16  3467               	retlw	103	;'g'
  1109  0B17  345F               	retlw	95	;'_'
  1110  0B18  3463               	retlw	99	;'c'
  1111  0B19  3468               	retlw	104	;'h'
  1112  0B1A  3461               	retlw	97	;'a'
  1113  0B1B  3472               	retlw	114	;'r'
  1114  0B1C  345F               	retlw	95	;'_'
  1115  0B1D  3469               	retlw	105	;'i'
  1116  0B1E  346E               	retlw	110	;'n'
  1117  0B1F  3466               	retlw	102	;'f'
  1118  0B20  346F               	retlw	111	;'o'
  1119  0B21  345F               	retlw	95	;'_'
  1120  0B22  3469               	retlw	105	;'i'
  1121  0B23  346E               	retlw	110	;'n'
  1122  0B24  3464               	retlw	100	;'d'
  1123  0B25  3465               	retlw	101	;'e'
  1124  0B26  3478               	retlw	120	;'x'
  1125  0B27  3420               	retlw	32	;' '
  1126  0B28  343D               	retlw	61	;'='
  1127  0B29  3420               	retlw	32	;' '
  1128  0B2A  3428               	retlw	40	;'('
  1129  0B2B  3425               	retlw	37	;'%'
  1130  0B2C  3464               	retlw	100	;'d'
  1131  0B2D  3429               	retlw	41	;')'
  1132  0B2E  342C               	retlw	44	;','
  1133  0B2F  3420               	retlw	32	;' '
  1134  0B30  346E               	retlw	110	;'n'
  1135  0B31  3475               	retlw	117	;'u'
  1136  0B32  346D               	retlw	109	;'m'
  1137  0B33  3420               	retlw	32	;' '
  1138  0B34  343D               	retlw	61	;'='
  1139  0B35  3420               	retlw	32	;' '
  1140  0B36  3425               	retlw	37	;'%'
  1141  0B37  3464               	retlw	100	;'d'
  1142  0B38  340A               	retlw	10
  1143  0B39  3400               	retlw	0
  1144  0B3A                     STR_52:	
  1145  0B3A  3474               	retlw	116	;'t'
  1146  0B3B  3465               	retlw	101	;'e'
  1147  0B3C  346D               	retlw	109	;'m'
  1148  0B3D  3470               	retlw	112	;'p'
  1149  0B3E  345F               	retlw	95	;'_'
  1150  0B3F  3468               	retlw	104	;'h'
  1151  0B40  346F               	retlw	111	;'o'
  1152  0B41  346C               	retlw	108	;'l'
  1153  0B42  3465               	retlw	101	;'e'
  1154  0B43  3428               	retlw	40	;'('
  1155  0B44  3425               	retlw	37	;'%'
  1156  0B45  3464               	retlw	100	;'d'
  1157  0B46  3429               	retlw	41	;')'
  1158  0B47  3420               	retlw	32	;' '
  1159  0B48  343C               	retlw	60	;'<'
  1160  0B49  3420               	retlw	32	;' '
  1161  0B4A  3474               	retlw	116	;'t'
  1162  0B4B  3465               	retlw	101	;'e'
  1163  0B4C  346D               	retlw	109	;'m'
  1164  0B4D  3470               	retlw	112	;'p'
  1165  0B4E  345F               	retlw	95	;'_'
  1166  0B4F  3470               	retlw	112	;'p'
  1167  0B50  3472               	retlw	114	;'r'
  1168  0B51  3465               	retlw	101	;'e'
  1169  0B52  345F               	retlw	95	;'_'
  1170  0B53  3468               	retlw	104	;'h'
  1171  0B54  346F               	retlw	111	;'o'
  1172  0B55  346C               	retlw	108	;'l'
  1173  0B56  3465               	retlw	101	;'e'
  1174  0B57  3428               	retlw	40	;'('
  1175  0B58  3425               	retlw	37	;'%'
  1176  0B59  3464               	retlw	100	;'d'
  1177  0B5A  3429               	retlw	41	;')'
  1178  0B5B  340A               	retlw	10
  1179  0B5C  3400               	retlw	0
  1180  0B5D                     STR_50:	
  1181  0B5D  3474               	retlw	116	;'t'
  1182  0B5E  3465               	retlw	101	;'e'
  1183  0B5F  346D               	retlw	109	;'m'
  1184  0B60  3470               	retlw	112	;'p'
  1185  0B61  345F               	retlw	95	;'_'
  1186  0B62  3468               	retlw	104	;'h'
  1187  0B63  3469               	retlw	105	;'i'
  1188  0B64  3467               	retlw	103	;'g'
  1189  0B65  3468               	retlw	104	;'h'
  1190  0B66  3428               	retlw	40	;'('
  1191  0B67  3425               	retlw	37	;'%'
  1192  0B68  3464               	retlw	100	;'d'
  1193  0B69  3429               	retlw	41	;')'
  1194  0B6A  3420               	retlw	32	;' '
  1195  0B6B  343C               	retlw	60	;'<'
  1196  0B6C  3420               	retlw	32	;' '
  1197  0B6D  3474               	retlw	116	;'t'
  1198  0B6E  3465               	retlw	101	;'e'
  1199  0B6F  346D               	retlw	109	;'m'
  1200  0B70  3470               	retlw	112	;'p'
  1201  0B71  345F               	retlw	95	;'_'
  1202  0B72  3470               	retlw	112	;'p'
  1203  0B73  3472               	retlw	114	;'r'
  1204  0B74  3465               	retlw	101	;'e'
  1205  0B75  345F               	retlw	95	;'_'
  1206  0B76  3468               	retlw	104	;'h'
  1207  0B77  3469               	retlw	105	;'i'
  1208  0B78  3467               	retlw	103	;'g'
  1209  0B79  3468               	retlw	104	;'h'
  1210  0B7A  3428               	retlw	40	;'('
  1211  0B7B  3425               	retlw	37	;'%'
  1212  0B7C  3464               	retlw	100	;'d'
  1213  0B7D  3429               	retlw	41	;')'
  1214  0B7E  340A               	retlw	10
  1215  0B7F  3400               	retlw	0
  1216  0B80                     STR_48:	
  1217  0B80  3474               	retlw	116	;'t'
  1218  0B81  3465               	retlw	101	;'e'
  1219  0B82  346D               	retlw	109	;'m'
  1220  0B83  3470               	retlw	112	;'p'
  1221  0B84  345F               	retlw	95	;'_'
  1222  0B85  3472               	retlw	114	;'r'
  1223  0B86  3469               	retlw	105	;'i'
  1224  0B87  3473               	retlw	115	;'s'
  1225  0B88  346B               	retlw	107	;'k'
  1226  0B89  3428               	retlw	40	;'('
  1227  0B8A  3425               	retlw	37	;'%'
  1228  0B8B  3464               	retlw	100	;'d'
  1229  0B8C  3429               	retlw	41	;')'
  1230  0B8D  3420               	retlw	32	;' '
  1231  0B8E  343C               	retlw	60	;'<'
  1232  0B8F  3420               	retlw	32	;' '
  1233  0B90  3474               	retlw	116	;'t'
  1234  0B91  3465               	retlw	101	;'e'
  1235  0B92  346D               	retlw	109	;'m'
  1236  0B93  3470               	retlw	112	;'p'
  1237  0B94  345F               	retlw	95	;'_'
  1238  0B95  3470               	retlw	112	;'p'
  1239  0B96  3472               	retlw	114	;'r'
  1240  0B97  3465               	retlw	101	;'e'
  1241  0B98  345F               	retlw	95	;'_'
  1242  0B99  3472               	retlw	114	;'r'
  1243  0B9A  3469               	retlw	105	;'i'
  1244  0B9B  3473               	retlw	115	;'s'
  1245  0B9C  346B               	retlw	107	;'k'
  1246  0B9D  3428               	retlw	40	;'('
  1247  0B9E  3425               	retlw	37	;'%'
  1248  0B9F  3464               	retlw	100	;'d'
  1249  0BA0  3429               	retlw	41	;')'
  1250  0BA1  340A               	retlw	10
  1251  0BA2  3400               	retlw	0
  1252  0BA3                     STR_27:	
  1253  0BA3  343D               	retlw	61	;'='
  1254  0BA4  343D               	retlw	61	;'='
  1255  0BA5  343D               	retlw	61	;'='
  1256  0BA6  343D               	retlw	61	;'='
  1257  0BA7  343D               	retlw	61	;'='
  1258  0BA8  343D               	retlw	61	;'='
  1259  0BA9  343D               	retlw	61	;'='
  1260  0BAA  343D               	retlw	61	;'='
  1261  0BAB  343D               	retlw	61	;'='
  1262  0BAC  343D               	retlw	61	;'='
  1263  0BAD  343D               	retlw	61	;'='
  1264  0BAE  343D               	retlw	61	;'='
  1265  0BAF  343D               	retlw	61	;'='
  1266  0BB0  343D               	retlw	61	;'='
  1267  0BB1  3469               	retlw	105	;'i'
  1268  0BB2  3473               	retlw	115	;'s'
  1269  0BB3  345F               	retlw	95	;'_'
  1270  0BB4  3476               	retlw	118	;'v'
  1271  0BB5  3461               	retlw	97	;'a'
  1272  0BB6  346C               	retlw	108	;'l'
  1273  0BB7  3469               	retlw	105	;'i'
  1274  0BB8  3464               	retlw	100	;'d'
  1275  0BB9  343D               	retlw	61	;'='
  1276  0BBA  343D               	retlw	61	;'='
  1277  0BBB  343D               	retlw	61	;'='
  1278  0BBC  343D               	retlw	61	;'='
  1279  0BBD  343D               	retlw	61	;'='
  1280  0BBE  343D               	retlw	61	;'='
  1281  0BBF  343D               	retlw	61	;'='
  1282  0BC0  343D               	retlw	61	;'='
  1283  0BC1  343D               	retlw	61	;'='
  1284  0BC2  343D               	retlw	61	;'='
  1285  0BC3  343D               	retlw	61	;'='
  1286  0BC4  343D               	retlw	61	;'='
  1287  0BC5  3400               	retlw	0
  1288  0BC6                     STR_23:	
  1289  0BC6  343D               	retlw	61	;'='
  1290  0BC7  343D               	retlw	61	;'='
  1291  0BC8  343D               	retlw	61	;'='
  1292  0BC9  343D               	retlw	61	;'='
  1293  0BCA  343D               	retlw	61	;'='
  1294  0BCB  343D               	retlw	61	;'='
  1295  0BCC  343D               	retlw	61	;'='
  1296  0BCD  343D               	retlw	61	;'='
  1297  0BCE  343D               	retlw	61	;'='
  1298  0BCF  343D               	retlw	61	;'='
  1299  0BD0  343D               	retlw	61	;'='
  1300  0BD1  343D               	retlw	61	;'='
  1301  0BD2  343D               	retlw	61	;'='
  1302  0BD3  343D               	retlw	61	;'='
  1303  0BD4  3468               	retlw	104	;'h'
  1304  0BD5  3469               	retlw	105	;'i'
  1305  0BD6  3474               	retlw	116	;'t'
  1306  0BD7  345F               	retlw	95	;'_'
  1307  0BD8  346C               	retlw	108	;'l'
  1308  0BD9  3461               	retlw	97	;'a'
  1309  0BDA  346E               	retlw	110	;'n'
  1310  0BDB  3464               	retlw	100	;'d'
  1311  0BDC  343D               	retlw	61	;'='
  1312  0BDD  343D               	retlw	61	;'='
  1313  0BDE  343D               	retlw	61	;'='
  1314  0BDF  343D               	retlw	61	;'='
  1315  0BE0  343D               	retlw	61	;'='
  1316  0BE1  343D               	retlw	61	;'='
  1317  0BE2  343D               	retlw	61	;'='
  1318  0BE3  343D               	retlw	61	;'='
  1319  0BE4  343D               	retlw	61	;'='
  1320  0BE5  343D               	retlw	61	;'='
  1321  0BE6  343D               	retlw	61	;'='
  1322  0BE7  343D               	retlw	61	;'='
  1323  0BE8  3400               	retlw	0
  1324  0BE9                     STR_41:	
  1325  0BE9  3463               	retlw	99	;'c'
  1326  0BEA  346F               	retlw	111	;'o'
  1327  0BEB  346C               	retlw	108	;'l'
  1328  0BEC  3420               	retlw	32	;' '
  1329  0BED  343D               	retlw	61	;'='
  1330  0BEE  3420               	retlw	32	;' '
  1331  0BEF  3425               	retlw	37	;'%'
  1332  0BF0  3464               	retlw	100	;'d'
  1333  0BF1  342C               	retlw	44	;','
  1334  0BF2  3420               	retlw	32	;' '
  1335  0BF3  3473               	retlw	115	;'s'
  1336  0BF4  3474               	retlw	116	;'t'
  1337  0BF5  3461               	retlw	97	;'a'
  1338  0BF6  3472               	retlw	114	;'r'
  1339  0BF7  3474               	retlw	116	;'t'
  1340  0BF8  3420               	retlw	32	;' '
  1341  0BF9  343D               	retlw	61	;'='
  1342  0BFA  3420               	retlw	32	;' '
  1343  0BFB  3425               	retlw	37	;'%'
  1344  0BFC  3464               	retlw	100	;'d'
  1345  0BFD  342C               	retlw	44	;','
  1346  0BFE  3420               	retlw	32	;' '
  1347  0BFF  3473               	retlw	115	;'s'
  1348  0C00  3474               	retlw	116	;'t'
  1349  0C01  346F               	retlw	111	;'o'
  1350  0C02  3470               	retlw	112	;'p'
  1351  0C03  3420               	retlw	32	;' '
  1352  0C04  343D               	retlw	61	;'='
  1353  0C05  3420               	retlw	32	;' '
  1354  0C06  3425               	retlw	37	;'%'
  1355  0C07  3464               	retlw	100	;'d'
  1356  0C08  340A               	retlw	10
  1357  0C09  3400               	retlw	0
  1358  0C0A                     STR_10:	
  1359  0C0A  3470               	retlw	112	;'p'
  1360  0C0B  3472               	retlw	114	;'r'
  1361  0C0C  3469               	retlw	105	;'i'
  1362  0C0D  346E               	retlw	110	;'n'
  1363  0C0E  3474               	retlw	116	;'t'
  1364  0C0F  3466               	retlw	102	;'f'
  1365  0C10  345F               	retlw	95	;'_'
  1366  0C11  3461               	retlw	97	;'a'
  1367  0C12  346C               	retlw	108	;'l'
  1368  0C13  346C               	retlw	108	;'l'
  1369  0C14  345F               	retlw	95	;'_'
  1370  0C15  344D               	retlw	77	;'M'
  1371  0C16  3441               	retlw	65	;'A'
  1372  0C17  3454               	retlw	84	;'T'
  1373  0C18  3452               	retlw	82	;'R'
  1374  0C19  3449               	retlw	73	;'I'
  1375  0C1A  3458               	retlw	88	;'X'
  1376  0C1B  3434               	retlw	52	;'4'
  1377  0C1C  3434               	retlw	52	;'4'
  1378  0C1D  3420               	retlw	32	;' '
  1379  0C1E  3473               	retlw	115	;'s'
  1380  0C1F  3469               	retlw	105	;'i'
  1381  0C20  347A               	retlw	122	;'z'
  1382  0C21  3465               	retlw	101	;'e'
  1383  0C22  3420               	retlw	32	;' '
  1384  0C23  343D               	retlw	61	;'='
  1385  0C24  3420               	retlw	32	;' '
  1386  0C25  3425               	retlw	37	;'%'
  1387  0C26  3464               	retlw	100	;'d'
  1388  0C27  3400               	retlw	0
  1389  0C28                     STR_28:	
  1390  0C28  346E               	retlw	110	;'n'
  1391  0C29  346F               	retlw	111	;'o'
  1392  0C2A  3474               	retlw	116	;'t'
  1393  0C2B  3420               	retlw	32	;' '
  1394  0C2C  3476               	retlw	118	;'v'
  1395  0C2D  3461               	retlw	97	;'a'
  1396  0C2E  346C               	retlw	108	;'l'
  1397  0C2F  3469               	retlw	105	;'i'
  1398  0C30  3464               	retlw	100	;'d'
  1399  0C31  3431               	retlw	49	;'1'
  1400  0C32  3420               	retlw	32	;' '
  1401  0C33  3472               	retlw	114	;'r'
  1402  0C34  346F               	retlw	111	;'o'
  1403  0C35  3477               	retlw	119	;'w'
  1404  0C36  3420               	retlw	32	;' '
  1405  0C37  343D               	retlw	61	;'='
  1406  0C38  3420               	retlw	32	;' '
  1407  0C39  3425               	retlw	37	;'%'
  1408  0C3A  3464               	retlw	100	;'d'
  1409  0C3B  342C               	retlw	44	;','
  1410  0C3C  3420               	retlw	32	;' '
  1411  0C3D  3463               	retlw	99	;'c'
  1412  0C3E  346F               	retlw	111	;'o'
  1413  0C3F  346C               	retlw	108	;'l'
  1414  0C40  3420               	retlw	32	;' '
  1415  0C41  343D               	retlw	61	;'='
  1416  0C42  3420               	retlw	32	;' '
  1417  0C43  3425               	retlw	37	;'%'
  1418  0C44  3464               	retlw	100	;'d'
  1419  0C45  3400               	retlw	0
  1420  0C46                     STR_29:	
  1421  0C46  346E               	retlw	110	;'n'
  1422  0C47  346F               	retlw	111	;'o'
  1423  0C48  3474               	retlw	116	;'t'
  1424  0C49  3420               	retlw	32	;' '
  1425  0C4A  3476               	retlw	118	;'v'
  1426  0C4B  3461               	retlw	97	;'a'
  1427  0C4C  346C               	retlw	108	;'l'
  1428  0C4D  3469               	retlw	105	;'i'
  1429  0C4E  3464               	retlw	100	;'d'
  1430  0C4F  3432               	retlw	50	;'2'
  1431  0C50  3420               	retlw	32	;' '
  1432  0C51  3472               	retlw	114	;'r'
  1433  0C52  346F               	retlw	111	;'o'
  1434  0C53  3477               	retlw	119	;'w'
  1435  0C54  3420               	retlw	32	;' '
  1436  0C55  343D               	retlw	61	;'='
  1437  0C56  3420               	retlw	32	;' '
  1438  0C57  3425               	retlw	37	;'%'
  1439  0C58  3464               	retlw	100	;'d'
  1440  0C59  342C               	retlw	44	;','
  1441  0C5A  3420               	retlw	32	;' '
  1442  0C5B  3463               	retlw	99	;'c'
  1443  0C5C  346F               	retlw	111	;'o'
  1444  0C5D  346C               	retlw	108	;'l'
  1445  0C5E  3420               	retlw	32	;' '
  1446  0C5F  343D               	retlw	61	;'='
  1447  0C60  3420               	retlw	32	;' '
  1448  0C61  3425               	retlw	37	;'%'
  1449  0C62  3464               	retlw	100	;'d'
  1450  0C63  3400               	retlw	0
  1451  0C64                     STR_30:	
  1452  0C64  346E               	retlw	110	;'n'
  1453  0C65  346F               	retlw	111	;'o'
  1454  0C66  3474               	retlw	116	;'t'
  1455  0C67  3420               	retlw	32	;' '
  1456  0C68  3476               	retlw	118	;'v'
  1457  0C69  3461               	retlw	97	;'a'
  1458  0C6A  346C               	retlw	108	;'l'
  1459  0C6B  3469               	retlw	105	;'i'
  1460  0C6C  3464               	retlw	100	;'d'
  1461  0C6D  3433               	retlw	51	;'3'
  1462  0C6E  3420               	retlw	32	;' '
  1463  0C6F  3472               	retlw	114	;'r'
  1464  0C70  346F               	retlw	111	;'o'
  1465  0C71  3477               	retlw	119	;'w'
  1466  0C72  3420               	retlw	32	;' '
  1467  0C73  343D               	retlw	61	;'='
  1468  0C74  3420               	retlw	32	;' '
  1469  0C75  3425               	retlw	37	;'%'
  1470  0C76  3464               	retlw	100	;'d'
  1471  0C77  342C               	retlw	44	;','
  1472  0C78  3420               	retlw	32	;' '
  1473  0C79  3463               	retlw	99	;'c'
  1474  0C7A  346F               	retlw	111	;'o'
  1475  0C7B  346C               	retlw	108	;'l'
  1476  0C7C  3420               	retlw	32	;' '
  1477  0C7D  343D               	retlw	61	;'='
  1478  0C7E  3420               	retlw	32	;' '
  1479  0C7F  3425               	retlw	37	;'%'
  1480  0C80  3464               	retlw	100	;'d'
  1481  0C81  3400               	retlw	0
  1482  0C82                     STR_5:	
  1483  0C82  343C               	retlw	60	;'<'
  1484  0C83  343C               	retlw	60	;'<'
  1485  0C84  343C               	retlw	60	;'<'
  1486  0C85  343C               	retlw	60	;'<'
  1487  0C86  343C               	retlw	60	;'<'
  1488  0C87  343C               	retlw	60	;'<'
  1489  0C88  343C               	retlw	60	;'<'
  1490  0C89  343C               	retlw	60	;'<'
  1491  0C8A  343C               	retlw	60	;'<'
  1492  0C8B  343C               	retlw	60	;'<'
  1493  0C8C  343C               	retlw	60	;'<'
  1494  0C8D  343C               	retlw	60	;'<'
  1495  0C8E  343C               	retlw	60	;'<'
  1496  0C8F  343C               	retlw	60	;'<'
  1497  0C90  343C               	retlw	60	;'<'
  1498  0C91  343C               	retlw	60	;'<'
  1499  0C92  343C               	retlw	60	;'<'
  1500  0C93  343C               	retlw	60	;'<'
  1501  0C94  343C               	retlw	60	;'<'
  1502  0C95  343C               	retlw	60	;'<'
  1503  0C96  344D               	retlw	77	;'M'
  1504  0C97  3441               	retlw	65	;'A'
  1505  0C98  3454               	retlw	84	;'T'
  1506  0C99  3452               	retlw	82	;'R'
  1507  0C9A  3449               	retlw	73	;'I'
  1508  0C9B  3458               	retlw	88	;'X'
  1509  0C9C  3434               	retlw	52	;'4'
  1510  0C9D  3434               	retlw	52	;'4'
  1511  0C9E  3400               	retlw	0
  1512  0C9F                     STR_17:	
  1513  0C9F  343C               	retlw	60	;'<'
  1514  0CA0  343C               	retlw	60	;'<'
  1515  0CA1  343C               	retlw	60	;'<'
  1516  0CA2  343C               	retlw	60	;'<'
  1517  0CA3  343C               	retlw	60	;'<'
  1518  0CA4  343C               	retlw	60	;'<'
  1519  0CA5  343C               	retlw	60	;'<'
  1520  0CA6  343C               	retlw	60	;'<'
  1521  0CA7  343C               	retlw	60	;'<'
  1522  0CA8  343C               	retlw	60	;'<'
  1523  0CA9  343C               	retlw	60	;'<'
  1524  0CAA  343C               	retlw	60	;'<'
  1525  0CAB  343C               	retlw	60	;'<'
  1526  0CAC  343C               	retlw	60	;'<'
  1527  0CAD  343C               	retlw	60	;'<'
  1528  0CAE  343C               	retlw	60	;'<'
  1529  0CAF  343C               	retlw	60	;'<'
  1530  0CB0  343C               	retlw	60	;'<'
  1531  0CB1  343C               	retlw	60	;'<'
  1532  0CB2  343C               	retlw	60	;'<'
  1533  0CB3  344D               	retlw	77	;'M'
  1534  0CB4  3441               	retlw	65	;'A'
  1535  0CB5  3454               	retlw	84	;'T'
  1536  0CB6  3452               	retlw	82	;'R'
  1537  0CB7  3449               	retlw	73	;'I'
  1538  0CB8  3458               	retlw	88	;'X'
  1539  0CB9  3438               	retlw	56	;'8'
  1540  0CBA  3438               	retlw	56	;'8'
  1541  0CBB  3400               	retlw	0
  1542  0CBC                     STR_34:	
  1543  0CBC  3466               	retlw	102	;'f'
  1544  0CBD  3461               	retlw	97	;'a'
  1545  0CBE  346C               	retlw	108	;'l'
  1546  0CBF  346C               	retlw	108	;'l'
  1547  0CC0  345F               	retlw	95	;'_'
  1548  0CC1  346F               	retlw	111	;'o'
  1549  0CC2  3466               	retlw	102	;'f'
  1550  0CC3  3466               	retlw	102	;'f'
  1551  0CC4  3431               	retlw	49	;'1'
  1552  0CC5  3420               	retlw	32	;' '
  1553  0CC6  3478               	retlw	120	;'x'
  1554  0CC7  3420               	retlw	32	;' '
  1555  0CC8  343D               	retlw	61	;'='
  1556  0CC9  3420               	retlw	32	;' '
  1557  0CCA  3425               	retlw	37	;'%'
  1558  0CCB  3464               	retlw	100	;'d'
  1559  0CCC  342C               	retlw	44	;','
  1560  0CCD  3420               	retlw	32	;' '
  1561  0CCE  3479               	retlw	121	;'y'
  1562  0CCF  3420               	retlw	32	;' '
  1563  0CD0  343D               	retlw	61	;'='
  1564  0CD1  3420               	retlw	32	;' '
  1565  0CD2  3425               	retlw	37	;'%'
  1566  0CD3  3464               	retlw	100	;'d'
  1567  0CD4  340A               	retlw	10
  1568  0CD5  3400               	retlw	0
  1569  0CD6                     STR_35:	
  1570  0CD6  3466               	retlw	102	;'f'
  1571  0CD7  3461               	retlw	97	;'a'
  1572  0CD8  346C               	retlw	108	;'l'
  1573  0CD9  346C               	retlw	108	;'l'
  1574  0CDA  345F               	retlw	95	;'_'
  1575  0CDB  346F               	retlw	111	;'o'
  1576  0CDC  3466               	retlw	102	;'f'
  1577  0CDD  3466               	retlw	102	;'f'
  1578  0CDE  3432               	retlw	50	;'2'
  1579  0CDF  3420               	retlw	32	;' '
  1580  0CE0  3478               	retlw	120	;'x'
  1581  0CE1  3420               	retlw	32	;' '
  1582  0CE2  343D               	retlw	61	;'='
  1583  0CE3  3420               	retlw	32	;' '
  1584  0CE4  3425               	retlw	37	;'%'
  1585  0CE5  3464               	retlw	100	;'d'
  1586  0CE6  342C               	retlw	44	;','
  1587  0CE7  3420               	retlw	32	;' '
  1588  0CE8  3479               	retlw	121	;'y'
  1589  0CE9  3420               	retlw	32	;' '
  1590  0CEA  343D               	retlw	61	;'='
  1591  0CEB  3420               	retlw	32	;' '
  1592  0CEC  3425               	retlw	37	;'%'
  1593  0CED  3464               	retlw	100	;'d'
  1594  0CEE  340A               	retlw	10
  1595  0CEF  3400               	retlw	0
  1596  0CF0                     STR_22:	
  1597  0CF0  3464               	retlw	100	;'d'
  1598  0CF1  3465               	retlw	101	;'e'
  1599  0CF2  346C               	retlw	108	;'l'
  1600  0CF3  3465               	retlw	101	;'e'
  1601  0CF4  3474               	retlw	116	;'t'
  1602  0CF5  3465               	retlw	101	;'e'
  1603  0CF6  345F               	retlw	95	;'_'
  1604  0CF7  346D               	retlw	109	;'m'
  1605  0CF8  3461               	retlw	97	;'a'
  1606  0CF9  3474               	retlw	116	;'t'
  1607  0CFA  3472               	retlw	114	;'r'
  1608  0CFB  3469               	retlw	105	;'i'
  1609  0CFC  3478               	retlw	120	;'x'
  1610  0CFD  3420               	retlw	32	;' '
  1611  0CFE  3463               	retlw	99	;'c'
  1612  0CFF  346F               	retlw	111	;'o'
  1613  0D00  3475               	retlw	117	;'u'
  1614  0D01  346E               	retlw	110	;'n'
  1615  0D02  3474               	retlw	116	;'t'
  1616  0D03  3420               	retlw	32	;' '
  1617  0D04  343D               	retlw	61	;'='
  1618  0D05  3420               	retlw	32	;' '
  1619  0D06  3425               	retlw	37	;'%'
  1620  0D07  3464               	retlw	100	;'d'
  1621  0D08  3400               	retlw	0
  1622  0D09                     STR_61:	
  1623  0D09  3467               	retlw	103	;'g'
  1624  0D0A  345F               	retlw	95	;'_'
  1625  0D0B  3463               	retlw	99	;'c'
  1626  0D0C  3468               	retlw	104	;'h'
  1627  0D0D  3461               	retlw	97	;'a'
  1628  0D0E  3472               	retlw	114	;'r'
  1629  0D0F  345F               	retlw	95	;'_'
  1630  0D10  3469               	retlw	105	;'i'
  1631  0D11  346E               	retlw	110	;'n'
  1632  0D12  3466               	retlw	102	;'f'
  1633  0D13  346F               	retlw	111	;'o'
  1634  0D14  345F               	retlw	95	;'_'
  1635  0D15  3469               	retlw	105	;'i'
  1636  0D16  346E               	retlw	110	;'n'
  1637  0D17  3464               	retlw	100	;'d'
  1638  0D18  3465               	retlw	101	;'e'
  1639  0D19  3478               	retlw	120	;'x'
  1640  0D1A  3420               	retlw	32	;' '
  1641  0D1B  343D               	retlw	61	;'='
  1642  0D1C  3420               	retlw	32	;' '
  1643  0D1D  3425               	retlw	37	;'%'
  1644  0D1E  3464               	retlw	100	;'d'
  1645  0D1F  340A               	retlw	10
  1646  0D20  3400               	retlw	0
  1647  0D21                     STR_24:	
  1648  0D21  3468               	retlw	104	;'h'
  1649  0D22  3469               	retlw	105	;'i'
  1650  0D23  3474               	retlw	116	;'t'
  1651  0D24  3431               	retlw	49	;'1'
  1652  0D25  3420               	retlw	32	;' '
  1653  0D26  3472               	retlw	114	;'r'
  1654  0D27  346F               	retlw	111	;'o'
  1655  0D28  3477               	retlw	119	;'w'
  1656  0D29  3420               	retlw	32	;' '
  1657  0D2A  343D               	retlw	61	;'='
  1658  0D2B  3420               	retlw	32	;' '
  1659  0D2C  3425               	retlw	37	;'%'
  1660  0D2D  3464               	retlw	100	;'d'
  1661  0D2E  342C               	retlw	44	;','
  1662  0D2F  3420               	retlw	32	;' '
  1663  0D30  3463               	retlw	99	;'c'
  1664  0D31  346F               	retlw	111	;'o'
  1665  0D32  346C               	retlw	108	;'l'
  1666  0D33  3420               	retlw	32	;' '
  1667  0D34  343D               	retlw	61	;'='
  1668  0D35  3420               	retlw	32	;' '
  1669  0D36  3425               	retlw	37	;'%'
  1670  0D37  3464               	retlw	100	;'d'
  1671  0D38  3400               	retlw	0
  1672  0D39                     STR_25:	
  1673  0D39  3468               	retlw	104	;'h'
  1674  0D3A  3469               	retlw	105	;'i'
  1675  0D3B  3474               	retlw	116	;'t'
  1676  0D3C  3432               	retlw	50	;'2'
  1677  0D3D  3420               	retlw	32	;' '
  1678  0D3E  3472               	retlw	114	;'r'
  1679  0D3F  346F               	retlw	111	;'o'
  1680  0D40  3477               	retlw	119	;'w'
  1681  0D41  3420               	retlw	32	;' '
  1682  0D42  343D               	retlw	61	;'='
  1683  0D43  3420               	retlw	32	;' '
  1684  0D44  3425               	retlw	37	;'%'
  1685  0D45  3464               	retlw	100	;'d'
  1686  0D46  342C               	retlw	44	;','
  1687  0D47  3420               	retlw	32	;' '
  1688  0D48  3463               	retlw	99	;'c'
  1689  0D49  346F               	retlw	111	;'o'
  1690  0D4A  346C               	retlw	108	;'l'
  1691  0D4B  3420               	retlw	32	;' '
  1692  0D4C  343D               	retlw	61	;'='
  1693  0D4D  3420               	retlw	32	;' '
  1694  0D4E  3425               	retlw	37	;'%'
  1695  0D4F  3464               	retlw	100	;'d'
  1696  0D50  3400               	retlw	0
  1697  0D51                     STR_53:	
  1698  0D51  3457               	retlw	87	;'W'
  1699  0D52  3441               	retlw	65	;'A'
  1700  0D53  3452               	retlw	82	;'R'
  1701  0D54  344E               	retlw	78	;'N'
  1702  0D55  3449               	retlw	73	;'I'
  1703  0D56  344E               	retlw	78	;'N'
  1704  0D57  3447               	retlw	71	;'G'
  1705  0D58  3420               	retlw	32	;' '
  1706  0D59  3468               	retlw	104	;'h'
  1707  0D5A  3465               	retlw	101	;'e'
  1708  0D5B  3469               	retlw	105	;'i'
  1709  0D5C  3467               	retlw	103	;'g'
  1710  0D5D  3468               	retlw	104	;'h'
  1711  0D5E  3474               	retlw	116	;'t'
  1712  0D5F  3420               	retlw	32	;' '
  1713  0D60  343E               	retlw	62	;'>'
  1714  0D61  3420               	retlw	32	;' '
  1715  0D62  3428               	retlw	40	;'('
  1716  0D63  3425               	retlw	37	;'%'
  1717  0D64  3464               	retlw	100	;'d'
  1718  0D65  3429               	retlw	41	;')'
  1719  0D66  340A               	retlw	10
  1720  0D67  3400               	retlw	0
  1721  0D68                     STR_39:	
  1722  0D68  3467               	retlw	103	;'g'
  1723  0D69  3465               	retlw	101	;'e'
  1724  0D6A  3474               	retlw	116	;'t'
  1725  0D6B  345F               	retlw	95	;'_'
  1726  0D6C  3468               	retlw	104	;'h'
  1727  0D6D  3469               	retlw	105	;'i'
  1728  0D6E  3467               	retlw	103	;'g'
  1729  0D6F  3468               	retlw	104	;'h'
  1730  0D70  3420               	retlw	32	;' '
  1731  0D71  3468               	retlw	104	;'h'
  1732  0D72  3465               	retlw	101	;'e'
  1733  0D73  3469               	retlw	105	;'i'
  1734  0D74  3467               	retlw	103	;'g'
  1735  0D75  3468               	retlw	104	;'h'
  1736  0D76  3474               	retlw	116	;'t'
  1737  0D77  3420               	retlw	32	;' '
  1738  0D78  343D               	retlw	61	;'='
  1739  0D79  3420               	retlw	32	;' '
  1740  0D7A  3425               	retlw	37	;'%'
  1741  0D7B  3464               	retlw	100	;'d'
  1742  0D7C  340A               	retlw	10
  1743  0D7D  3400               	retlw	0
  1744  0D7E                     STR_12:	
  1745  0D7E  343C               	retlw	60	;'<'
  1746  0D7F  343C               	retlw	60	;'<'
  1747  0D80  343C               	retlw	60	;'<'
  1748  0D81  343C               	retlw	60	;'<'
  1749  0D82  343C               	retlw	60	;'<'
  1750  0D83  343C               	retlw	60	;'<'
  1751  0D84  343C               	retlw	60	;'<'
  1752  0D85  343C               	retlw	60	;'<'
  1753  0D86  343C               	retlw	60	;'<'
  1754  0D87  343C               	retlw	60	;'<'
  1755  0D88  343C               	retlw	60	;'<'
  1756  0D89  343C               	retlw	60	;'<'
  1757  0D8A  343C               	retlw	60	;'<'
  1758  0D8B  343C               	retlw	60	;'<'
  1759  0D8C  343C               	retlw	60	;'<'
  1760  0D8D  343C               	retlw	60	;'<'
  1761  0D8E  343C               	retlw	60	;'<'
  1762  0D8F  343C               	retlw	60	;'<'
  1763  0D90  343C               	retlw	60	;'<'
  1764  0D91  343C               	retlw	60	;'<'
  1765  0D92  3400               	retlw	0
  1766  0D93                     STR_9:	
  1767  0D93  343E               	retlw	62	;'>'
  1768  0D94  343E               	retlw	62	;'>'
  1769  0D95  343E               	retlw	62	;'>'
  1770  0D96  343E               	retlw	62	;'>'
  1771  0D97  343E               	retlw	62	;'>'
  1772  0D98  343E               	retlw	62	;'>'
  1773  0D99  343E               	retlw	62	;'>'
  1774  0D9A  343E               	retlw	62	;'>'
  1775  0D9B  343E               	retlw	62	;'>'
  1776  0D9C  343E               	retlw	62	;'>'
  1777  0D9D  343E               	retlw	62	;'>'
  1778  0D9E  343E               	retlw	62	;'>'
  1779  0D9F  343E               	retlw	62	;'>'
  1780  0DA0  343E               	retlw	62	;'>'
  1781  0DA1  343E               	retlw	62	;'>'
  1782  0DA2  343E               	retlw	62	;'>'
  1783  0DA3  343E               	retlw	62	;'>'
  1784  0DA4  343E               	retlw	62	;'>'
  1785  0DA5  343E               	retlw	62	;'>'
  1786  0DA6  343E               	retlw	62	;'>'
  1787  0DA7  3400               	retlw	0
  1788  0DA8                     STR_33:	
  1789  0DA8  3452               	retlw	82	;'R'
  1790  0DA9  3449               	retlw	73	;'I'
  1791  0DAA  3447               	retlw	71	;'G'
  1792  0DAB  3448               	retlw	72	;'H'
  1793  0DAC  3454               	retlw	84	;'T'
  1794  0DAD  345F               	retlw	95	;'_'
  1795  0DAE  344F               	retlw	79	;'O'
  1796  0DAF  3456               	retlw	86	;'V'
  1797  0DB0  3445               	retlw	69	;'E'
  1798  0DB1  3452               	retlw	82	;'R'
  1799  0DB2  345F               	retlw	95	;'_'
  1800  0DB3  3442               	retlw	66	;'B'
  1801  0DB4  344F               	retlw	79	;'O'
  1802  0DB5  3455               	retlw	85	;'U'
  1803  0DB6  344E               	retlw	78	;'N'
  1804  0DB7  3444               	retlw	68	;'D'
  1805  0DB8  3441               	retlw	65	;'A'
  1806  0DB9  3452               	retlw	82	;'R'
  1807  0DBA  3459               	retlw	89	;'Y'
  1808  0DBB  3400               	retlw	0
  1809  0DBC                     STR_32:	
  1810  0DBC  344C               	retlw	76	;'L'
  1811  0DBD  3445               	retlw	69	;'E'
  1812  0DBE  3446               	retlw	70	;'F'
  1813  0DBF  3454               	retlw	84	;'T'
  1814  0DC0  345F               	retlw	95	;'_'
  1815  0DC1  344F               	retlw	79	;'O'
  1816  0DC2  3456               	retlw	86	;'V'
  1817  0DC3  3445               	retlw	69	;'E'
  1818  0DC4  3452               	retlw	82	;'R'
  1819  0DC5  345F               	retlw	95	;'_'
  1820  0DC6  3442               	retlw	66	;'B'
  1821  0DC7  344F               	retlw	79	;'O'
  1822  0DC8  3455               	retlw	85	;'U'
  1823  0DC9  344E               	retlw	78	;'N'
  1824  0DCA  3444               	retlw	68	;'D'
  1825  0DCB  3441               	retlw	65	;'A'
  1826  0DCC  3452               	retlw	82	;'R'
  1827  0DCD  3459               	retlw	89	;'Y'
  1828  0DCE  3400               	retlw	0
  1829  0DCF                     STR_64:	
  1830  0DCF  3430               	retlw	48	;'0'
  1831  0DD0  3431               	retlw	49	;'1'
  1832  0DD1  3432               	retlw	50	;'2'
  1833  0DD2  3433               	retlw	51	;'3'
  1834  0DD3  3434               	retlw	52	;'4'
  1835  0DD4  3435               	retlw	53	;'5'
  1836  0DD5  3436               	retlw	54	;'6'
  1837  0DD6  3437               	retlw	55	;'7'
  1838  0DD7  3438               	retlw	56	;'8'
  1839  0DD8  3439               	retlw	57	;'9'
  1840  0DD9  3441               	retlw	65	;'A'
  1841  0DDA  3442               	retlw	66	;'B'
  1842  0DDB  3443               	retlw	67	;'C'
  1843  0DDC  3444               	retlw	68	;'D'
  1844  0DDD  3445               	retlw	69	;'E'
  1845  0DDE  3446               	retlw	70	;'F'
  1846  0DDF  3400               	retlw	0
  1847  0DE0                     STR_65:	
  1848  0DE0  3430               	retlw	48	;'0'
  1849  0DE1  3431               	retlw	49	;'1'
  1850  0DE2  3432               	retlw	50	;'2'
  1851  0DE3  3433               	retlw	51	;'3'
  1852  0DE4  3434               	retlw	52	;'4'
  1853  0DE5  3435               	retlw	53	;'5'
  1854  0DE6  3436               	retlw	54	;'6'
  1855  0DE7  3437               	retlw	55	;'7'
  1856  0DE8  3438               	retlw	56	;'8'
  1857  0DE9  3439               	retlw	57	;'9'
  1858  0DEA  3461               	retlw	97	;'a'
  1859  0DEB  3462               	retlw	98	;'b'
  1860  0DEC  3463               	retlw	99	;'c'
  1861  0DED  3464               	retlw	100	;'d'
  1862  0DEE  3465               	retlw	101	;'e'
  1863  0DEF  3466               	retlw	102	;'f'
  1864  0DF0  3400               	retlw	0
  1865  0DF1                     STR_42:	
  1866  0DF1  346E               	retlw	110	;'n'
  1867  0DF2  3475               	retlw	117	;'u'
  1868  0DF3  346D               	retlw	109	;'m'
  1869  0DF4  345F               	retlw	95	;'_'
  1870  0DF5  3468               	retlw	104	;'h'
  1871  0DF6  346F               	retlw	111	;'o'
  1872  0DF7  346C               	retlw	108	;'l'
  1873  0DF8  3465               	retlw	101	;'e'
  1874  0DF9  3420               	retlw	32	;' '
  1875  0DFA  343D               	retlw	61	;'='
  1876  0DFB  3420               	retlw	32	;' '
  1877  0DFC  3428               	retlw	40	;'('
  1878  0DFD  3425               	retlw	37	;'%'
  1879  0DFE  3464               	retlw	100	;'d'
  1880  0DFF  3429               	retlw	41	;')'
  1881  0E00  340A               	retlw	10
  1882  0E01  3400               	retlw	0
  1883  0E02                     STR_38:	
  1884  0E02  3472               	retlw	114	;'r'
  1885  0E03  3469               	retlw	105	;'i'
  1886  0E04  3467               	retlw	103	;'g'
  1887  0E05  3468               	retlw	104	;'h'
  1888  0E06  3474               	retlw	116	;'t'
  1889  0E07  345F               	retlw	95	;'_'
  1890  0E08  346D               	retlw	109	;'m'
  1891  0E09  346F               	retlw	111	;'o'
  1892  0E0A  3473               	retlw	115	;'s'
  1893  0E0B  3474               	retlw	116	;'t'
  1894  0E0C  3420               	retlw	32	;' '
  1895  0E0D  343D               	retlw	61	;'='
  1896  0E0E  3420               	retlw	32	;' '
  1897  0E0F  3425               	retlw	37	;'%'
  1898  0E10  3464               	retlw	100	;'d'
  1899  0E11  340A               	retlw	10
  1900  0E12  3400               	retlw	0
  1901  0E13                     STR_46:	
  1902  0E13  3468               	retlw	104	;'h'
  1903  0E14  3465               	retlw	101	;'e'
  1904  0E15  3469               	retlw	105	;'i'
  1905  0E16  3467               	retlw	103	;'g'
  1906  0E17  3468               	retlw	104	;'h'
  1907  0E18  3474               	retlw	116	;'t'
  1908  0E19  3420               	retlw	32	;' '
  1909  0E1A  343C               	retlw	60	;'<'
  1910  0E1B  343D               	retlw	61	;'='
  1911  0E1C  3420               	retlw	32	;' '
  1912  0E1D  3428               	retlw	40	;'('
  1913  0E1E  3425               	retlw	37	;'%'
  1914  0E1F  3464               	retlw	100	;'d'
  1915  0E20  3429               	retlw	41	;')'
  1916  0E21  340A               	retlw	10
  1917  0E22  3400               	retlw	0
  1918  0E23                     STR_37:	
  1919  0E23  346C               	retlw	108	;'l'
  1920  0E24  3465               	retlw	101	;'e'
  1921  0E25  3466               	retlw	102	;'f'
  1922  0E26  3474               	retlw	116	;'t'
  1923  0E27  345F               	retlw	95	;'_'
  1924  0E28  346D               	retlw	109	;'m'
  1925  0E29  346F               	retlw	111	;'o'
  1926  0E2A  3473               	retlw	115	;'s'
  1927  0E2B  3474               	retlw	116	;'t'
  1928  0E2C  3420               	retlw	32	;' '
  1929  0E2D  343D               	retlw	61	;'='
  1930  0E2E  3420               	retlw	32	;' '
  1931  0E2F  3425               	retlw	37	;'%'
  1932  0E30  3464               	retlw	100	;'d'
  1933  0E31  340A               	retlw	10
  1934  0E32  3400               	retlw	0
  1935  0E33                     STR_63:	
  1936  0E33  3468               	retlw	104	;'h'
  1937  0E34  3469               	retlw	105	;'i'
  1938  0E35  3474               	retlw	116	;'t'
  1939  0E36  345F               	retlw	95	;'_'
  1940  0E37  3472               	retlw	114	;'r'
  1941  0E38  3465               	retlw	101	;'e'
  1942  0E39  3473               	retlw	115	;'s'
  1943  0E3A  3420               	retlw	32	;' '
  1944  0E3B  343D               	retlw	61	;'='
  1945  0E3C  3420               	retlw	32	;' '
  1946  0E3D  3425               	retlw	37	;'%'
  1947  0E3E  3464               	retlw	100	;'d'
  1948  0E3F  340A               	retlw	10
  1949  0E40  3400               	retlw	0
  1950  0E41                     STR_60:	
  1951  0E41  3447               	retlw	71	;'G'
  1952  0E42  3441               	retlw	65	;'A'
  1953  0E43  344D               	retlw	77	;'M'
  1954  0E44  3445               	retlw	69	;'E'
  1955  0E45  3420               	retlw	32	;' '
  1956  0E46  344F               	retlw	79	;'O'
  1957  0E47  3456               	retlw	86	;'V'
  1958  0E48  3445               	retlw	69	;'E'
  1959  0E49  3452               	retlw	82	;'R'
  1960  0E4A  3421               	retlw	33	;'!'
  1961  0E4B  3421               	retlw	33	;'!'
  1962  0E4C  3421               	retlw	33	;'!'
  1963  0E4D  3400               	retlw	0
  1964  0E4E                     STR_36:	
  1965  0E4E  3472               	retlw	114	;'r'
  1966  0E4F  3469               	retlw	105	;'i'
  1967  0E50  3473               	retlw	115	;'s'
  1968  0E51  346B               	retlw	107	;'k'
  1969  0E52  3420               	retlw	32	;' '
  1970  0E53  343D               	retlw	61	;'='
  1971  0E54  3420               	retlw	32	;' '
  1972  0E55  3425               	retlw	37	;'%'
  1973  0E56  3464               	retlw	100	;'d'
  1974  0E57  340A               	retlw	10
  1975  0E58  3400               	retlw	0
  1976  0E59                     STR_26:	
  1977  0E59  346E               	retlw	110	;'n'
  1978  0E5A  346F               	retlw	111	;'o'
  1979  0E5B  3474               	retlw	116	;'t'
  1980  0E5C  3420               	retlw	32	;' '
  1981  0E5D  3468               	retlw	104	;'h'
  1982  0E5E  3469               	retlw	105	;'i'
  1983  0E5F  3474               	retlw	116	;'t'
  1984  0E60  3400               	retlw	0
  1985  0E61                     STR_31:	
  1986  0E61  3476               	retlw	118	;'v'
  1987  0E62  3461               	retlw	97	;'a'
  1988  0E63  346C               	retlw	108	;'l'
  1989  0E64  3469               	retlw	105	;'i'
  1990  0E65  3464               	retlw	100	;'d'
  1991  0E66  3400               	retlw	0
  1992  0E67                     STR_1:	
  1993  0E67  340D               	retlw	13
  1994  0E68  340A               	retlw	10
  1995  0E69  3400               	retlw	0
  1996  0E6A                     STR_6:	
  1997  0E6A  342A               	retlw	42	;'*'
  1998  0E6B  3400               	retlw	0
  1999  0E6C                     STR_7:	
  2000  0E6C  345F               	retlw	95	;'_'
  2001  0E6D  3400               	retlw	0
  2002  0E69                     
  2003                           ; #config settings
  2004  0000                     
  2005                           	psect	nvBANK0
  2006  006D                     __pnvBANK0:	
  2007  006D                     _UQEnd:	
  2008  006D                     	ds	1
  2009  006E                     _UQFront:	
  2010  006E                     	ds	1
  2011  000C                     _PIR1bits	set	12
  2012  001A                     _RCREG	set	26
  2013  0018                     _RCSTAbits	set	24
  2014  0019                     _TXREG	set	25
  2015  005F                     _GIE	set	95
  2016  005E                     _PEIE	set	94
  2017  0029                     _RA1	set	41
  2018  002A                     _RA2	set	42
  2019  0099                     _SPBRG	set	153
  2020  0085                     _TRISAbits	set	133
  2021  0098                     _TXSTAbits	set	152
  2022  0465                     _RCIE	set	1125
  2023  0188                     _ANSELbits	set	392
  2024                           
  2025                           	psect	cinit
  2026  07C2                     start_initialization:	
  2027  07C2                     __initialization:	
  2028                           
  2029                           ; Clear objects allocated to BANK0
  2030  07C2  01EA               	clrf	__pbssBANK0& (0+127)
  2031  07C3  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  2032  07C4  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  2033                           
  2034                           ; Clear objects allocated to BANK1
  2035  07C5  1683               	bsf	3,5	;RP0=1, select bank1
  2036  07C6  1303               	bcf	3,6	;RP1=0, select bank1
  2037  07C7  01E9               	clrf	__pbssBANK1& (0+127)
  2038  07C8  01EA               	clrf	(__pbssBANK1+1)& (0+127)
  2039  07C9  01EB               	clrf	(__pbssBANK1+2)& (0+127)
  2040  07CA  01EC               	clrf	(__pbssBANK1+3)& (0+127)
  2041  07CB  01ED               	clrf	(__pbssBANK1+4)& (0+127)
  2042                           
  2043                           ; Clear objects allocated to BANK3
  2044  07CC  1783               	bsf	3,7	;select IRP bank2
  2045  07CD  3090               	movlw	low __pbssBANK3
  2046  07CE  0084               	movwf	4
  2047  07CF  30B8               	movlw	low (__pbssBANK3+40)
  2048  07D0  160A  158A  21A7  120A  118A  	fcall	clear_ram0
  2049                           
  2050                           ; Clear objects allocated to BANK2
  2051  07D5  3010               	movlw	low __pbssBANK2
  2052  07D6  0084               	movwf	4
  2053  07D7  3070               	movlw	low (__pbssBANK2+96)
  2054  07D8  160A  158A  21A7  120A  118A  	fcall	clear_ram0
  2055                           
  2056                           ; Initialize objects allocated to BANK3
  2057  07DD  30DB               	movlw	low (__pdataBANK3+35)
  2058  07DE  00FD               	movwf	btemp+-1
  2059  07DF  301A               	movlw	high __pidataBANK3
  2060  07E0  00FE               	movwf	btemp
  2061  07E1  30B7               	movlw	low __pidataBANK3
  2062  07E2  00FF               	movwf	btemp+1
  2063  07E3  30B8               	movlw	low __pdataBANK3
  2064  07E4  0084               	movwf	4
  2065  07E5  160A  158A  21EC  120A  118A  	fcall	init_ram0
  2066                           
  2067                           ; Initialize objects allocated to BANK1
  2068  07EA  160A  118A  2000  120A  118A  	fcall	__pidataBANK1	;fetch initializer
  2069  07EF  00EE               	movwf	__pdataBANK1& (0+127)
  2070  07F0  160A  118A  2001  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
  2071  07F5  00EF               	movwf	(__pdataBANK1+1)& (0+127)
  2072                           
  2073                           ; Initialize objects allocated to BANK0
  2074  07F6  1283               	bcf	3,5	;RP0=0, select bank0
  2075  07F7  1303               	bcf	3,6	;RP1=0, select bank0
  2076  07F8  160A  158A  2189   	fcall	__pidataBANK0	;fetch initializer
  2077  07FB  00EF               	movwf	__pdataBANK0& (0+127)
  2078  07FC                     end_of_initialization:	
  2079                           ;End of C runtime variable initialization code
  2080                           
  2081  07FC                     __end_of__initialization:	
  2082  07FC  0183               	clrf	3
  2083  07FD  120A  118A  296A   	ljmp	_main	;jump to C main() function
  2084                           
  2085                           	psect	bssBANK0
  2086  006A                     __pbssBANK0:	
  2087  006A                     _cur_y:	
  2088  006A                     	ds	1
  2089  006B                     _g_char_info_index:	
  2090  006B                     	ds	1
  2091  006C                     _temp_y:	
  2092  006C                     	ds	1
  2093                           
  2094                           	psect	dataBANK0
  2095  006F                     __pdataBANK0:	
  2096  006F                     _temp_pre_hole:	
  2097  006F                     	ds	1
  2098                           
  2099                           	psect	bssBANK1
  2100  00E9                     __pbssBANK1:	
  2101  00E9                     _temp_risk:	
  2102  00E9                     	ds	2
  2103  00EB                     _temp_count:	
  2104  00EB                     	ds	1
  2105  00EC                     _temp_high:	
  2106  00EC                     	ds	1
  2107  00ED                     _temp_hole:	
  2108  00ED                     	ds	1
  2109                           
  2110                           	psect	dataBANK1
  2111  00EE                     __pdataBANK1:	
  2112  00EE                     _cur_x:	
  2113  00EE                     	ds	1
  2114  00EF                     _temp_pre_high:	
  2115  00EF                     	ds	1
  2116                           
  2117                           	psect	bssBANK3
  2118  0190                     __pbssBANK3:	
  2119  0190                     USARTWriteInt@F1617:	
  2120  0190                     	ds	5
  2121  0195                     _g_cur_matrix44:	
  2122  0195                     	ds	2
  2123  0197                     _temp_pre_count:	
  2124  0197                     	ds	1
  2125  0198                     _g_debug:	
  2126  0198                     	ds	32
  2127                           
  2128                           	psect	dataBANK3
  2129  01B8                     __pdataBANK3:	
  2130  01B8                     _g_char_info:	
  2131  01B8                     	ds	27
  2132  01D3                     _randx:	
  2133  01D3                     	ds	4
  2134  01D7                     _temp_pre_risk:	
  2135  01D7                     	ds	2
  2136  01D9                     _tem_pre_sub_index:	
  2137  01D9                     	ds	1
  2138  01DA                     _temp_pre_x:	
  2139  01DA                     	ds	1
  2140                           
  2141                           	psect	bssBANK2
  2142  0110                     __pbssBANK2:	
  2143  0110                     _URBuff:	
  2144  0110                     	ds	32
  2145  0130                     _g_matrix88:	
  2146  0130                     	ds	64
  2147                           
  2148                           	psect	clrtext
  2149  19A7                     clear_ram0:	
  2150                           ;	Called with FSR containing the base address, and
  2151                           ;	W with the last address+1
  2152                           
  2153  19A7  0064               	clrwdt	;clear the watchdog before getting into this loop
  2154  19A8                     clrloop0:	
  2155  19A8  0180               	clrf	0	;clear RAM location pointed to by FSR
  2156  19A9  0A84               	incf	4,f	;increment pointer
  2157  19AA  0604               	xorwf	4,w	;XOR with final address
  2158  19AB  1903               	btfsc	3,2	;have we reached the end yet?
  2159  19AC  3400               	retlw	0	;all done for this memory range, return
  2160  19AD  0604               	xorwf	4,w	;XOR again to restore value
  2161  19AE  29A8               	goto	clrloop0	;do the next byte
  2162                           
  2163                           	psect	inittext
  2164  19E8                     init_fetch0:	
  2165                           ;	Called with low address in FSR and high address in W
  2166                           
  2167  19E8  087E               	movf	126,w
  2168  19E9  008A               	movwf	10
  2169  19EA  087F               	movf	127,w
  2170  19EB  0082               	movwf	2
  2171  19EC                     init_ram0:	
  2172                           ;Called with:
  2173                           ;	high address of idata address in btemp 
  2174                           ;	low address of idata address in btemp+1 
  2175                           ;	low address of data in FSR
  2176                           ;	high address + 1 of data in btemp-1
  2177                           
  2178  19EC  21E8  160A  158A   	fcall	init_fetch0
  2179  19EF  0080               	movwf	0
  2180  19F0  0A84               	incf	4,f
  2181  19F1  0804               	movf	4,w
  2182  19F2  067D               	xorwf	125,w
  2183  19F3  1903               	btfsc	3,2
  2184  19F4  3400               	retlw	0
  2185  19F5  0AFF               	incf	127,f
  2186  19F6  1903               	btfsc	3,2
  2187  19F7  0AFE               	incf	126,f
  2188  19F8  29EC               	goto	init_ram0
  2189                           
  2190                           	psect	cstackBANK1
  2191  00A0                     __pcstackBANK1:	
  2192  00A0                     _find_best_solution$1184:	
  2193                           
  2194                           ; 2 bytes @ 0x0
  2195  00A0                     	ds	2
  2196  00A2                     find_best_solution@left_most_index:	
  2197                           
  2198                           ; 1 bytes @ 0x2
  2199  00A2                     	ds	1
  2200  00A3                     find_best_solution@right_most_index:	
  2201                           
  2202                           ; 1 bytes @ 0x3
  2203  00A3                     	ds	1
  2204  00A4                     find_best_solution@res:	
  2205                           
  2206                           ; 1 bytes @ 0x4
  2207  00A4                     	ds	1
  2208  00A5                     find_best_solution@temp_matrix88:	
  2209                           
  2210                           ; 64 bytes @ 0x5
  2211  00A5                     	ds	64
  2212  00E5                     find_best_solution@temp_cur_matrix44:	
  2213                           
  2214                           ; 2 bytes @ 0x45
  2215  00E5                     	ds	2
  2216  00E7                     find_best_solution@tem_sub_index:	
  2217                           
  2218                           ; 1 bytes @ 0x47
  2219  00E7                     	ds	1
  2220  00E8                     find_best_solution@temp_x:	
  2221                           
  2222                           ; 1 bytes @ 0x48
  2223  00E8                     	ds	1
  2224                           
  2225                           	psect	cstackCOMMON
  2226  0070                     __pcstackCOMMON:	
  2227  0070                     ?_isdigit:	
  2228  0070                     ?_srand:	
  2229                           ; 1 bit 
  2230                           
  2231  0070                     ??_isdigit:	
  2232                           ; 1 bytes @ 0x0
  2233                           
  2234  0070                     ?_USARTInit:	
  2235                           ; 1 bytes @ 0x0
  2236                           
  2237  0070                     ?_USARTWriteChar:	
  2238                           ; 1 bytes @ 0x0
  2239                           
  2240  0070                     ??_USARTWriteChar:	
  2241                           ; 1 bytes @ 0x0
  2242                           
  2243  0070                     ?_SPI1_write:	
  2244                           ; 1 bytes @ 0x0
  2245                           
  2246  0070                     ??_SPI1_write:	
  2247                           ; 1 bytes @ 0x0
  2248                           
  2249  0070                     ?_Write_Byte:	
  2250                           ; 1 bytes @ 0x0
  2251                           
  2252  0070                     ?_printf_MATRIX7219:	
  2253                           ; 1 bytes @ 0x0
  2254                           
  2255  0070                     ?_MATRIX88_to_MATRIX7219:	
  2256                           ; 1 bytes @ 0x0
  2257                           
  2258  0070                     ?_printf_MATRIX88:	
  2259                           ; 1 bytes @ 0x0
  2260                           
  2261  0070                     ?_printf_Screen:	
  2262                           ; 1 bytes @ 0x0
  2263                           
  2264  0070                     ?_printf_console_Screen:	
  2265                           ; 1 bytes @ 0x0
  2266                           
  2267  0070                     ?_Clear_Matrix:	
  2268                           ; 1 bytes @ 0x0
  2269                           
  2270  0070                     ?_is_row_full:	
  2271                           ; 1 bytes @ 0x0
  2272                           
  2273  0070                     ?_is_row_empty:	
  2274                           ; 1 bytes @ 0x0
  2275                           
  2276  0070                     ?_clear:	
  2277                           ; 1 bytes @ 0x0
  2278                           
  2279  0070                     ?_merge:	
  2280                           ; 1 bytes @ 0x0
  2281                           
  2282  0070                     ?_char_info_index_rand:	
  2283                           ; 1 bytes @ 0x0
  2284                           
  2285  0070                     ?_get_high:	
  2286                           ; 1 bytes @ 0x0
  2287                           
  2288  0070                     ?_get_holes_after_merge:	
  2289                           ; 1 bytes @ 0x0
  2290                           
  2291  0070                     ?_find_best_solution:	
  2292                           ; 1 bytes @ 0x0
  2293                           
  2294  0070                     ?___bmul:	
  2295                           ; 1 bytes @ 0x0
  2296                           
  2297  0070                     ?_memset:	
  2298                           ; 1 bytes @ 0x0
  2299                           
  2300  0070                     ?_memcpy:	
  2301                           ; 2 bytes @ 0x0
  2302                           
  2303  0070                     ?___wmul:	
  2304                           ; 2 bytes @ 0x0
  2305                           
  2306  0070                     ?___lwdiv:	
  2307                           ; 2 bytes @ 0x0
  2308                           
  2309  0070                     ?___lmul:	
  2310                           ; 2 bytes @ 0x0
  2311                           
  2312  0070                     USARTWriteChar@ch:	
  2313                           ; 4 bytes @ 0x0
  2314                           
  2315  0070                     SPI1_write@data:	
  2316                           ; 1 bytes @ 0x0
  2317                           
  2318  0070                     Write_Byte@myValue:	
  2319                           ; 1 bytes @ 0x0
  2320                           
  2321  0070                     MATRIX88_to_MATRIX7219@matrix7219:	
  2322                           ; 1 bytes @ 0x0
  2323                           
  2324  0070                     is_row_empty@row:	
  2325                           ; 1 bytes @ 0x0
  2326                           
  2327  0070                     clear@y:	
  2328                           ; 1 bytes @ 0x0
  2329                           
  2330  0070                     merge@y:	
  2331                           ; 1 bytes @ 0x0
  2332                           
  2333  0070                     ___bmul@multiplicand:	
  2334                           ; 1 bytes @ 0x0
  2335                           
  2336  0070                     _isdigit$855:	
  2337                           ; 1 bytes @ 0x0
  2338                           
  2339  0070                     USARTInit@baud_rate:	
  2340                           ; 1 bytes @ 0x0
  2341                           
  2342  0070                     is_row_full@matrix:	
  2343                           ; 2 bytes @ 0x0
  2344                           
  2345  0070                     ___wmul@multiplier:	
  2346                           ; 2 bytes @ 0x0
  2347                           
  2348  0070                     ___lwdiv@divisor:	
  2349                           ; 2 bytes @ 0x0
  2350                           
  2351  0070                     memcpy@d1:	
  2352                           ; 2 bytes @ 0x0
  2353                           
  2354  0070                     memset@p1:	
  2355                           ; 2 bytes @ 0x0
  2356                           
  2357  0070                     srand@x:	
  2358                           ; 2 bytes @ 0x0
  2359                           
  2360  0070                     ___lmul@multiplier:	
  2361                           ; 2 bytes @ 0x0
  2362                           
  2363                           
  2364                           ; 4 bytes @ 0x0
  2365  0070                     	ds	1
  2366  0071                     ?_USARTWriteString:	
  2367  0071                     ??_Write_Byte:	
  2368                           ; 1 bytes @ 0x1
  2369                           
  2370  0071                     ??_MATRIX88_to_MATRIX7219:	
  2371                           ; 1 bytes @ 0x1
  2372                           
  2373  0071                     ??_is_row_empty:	
  2374                           ; 1 bytes @ 0x1
  2375                           
  2376  0071                     ??___bmul:	
  2377                           ; 1 bytes @ 0x1
  2378                           
  2379  0071                     Write_Byte@myColumn:	
  2380                           ; 1 bytes @ 0x1
  2381                           
  2382  0071                     isdigit@c:	
  2383                           ; 1 bytes @ 0x1
  2384                           
  2385  0071                     USARTWriteString@str:	
  2386                           ; 1 bytes @ 0x1
  2387                           
  2388  0071                     clear@matrix44:	
  2389                           ; 2 bytes @ 0x1
  2390                           
  2391  0071                     merge@matrix44:	
  2392                           ; 2 bytes @ 0x1
  2393                           
  2394                           
  2395                           ; 2 bytes @ 0x1
  2396  0071                     	ds	1
  2397  0072                     ??_srand:	
  2398  0072                     ??_USARTInit:	
  2399                           ; 1 bytes @ 0x2
  2400                           
  2401  0072                     ??_printf_MATRIX7219:	
  2402                           ; 1 bytes @ 0x2
  2403                           
  2404  0072                     is_row_full@row:	
  2405                           ; 1 bytes @ 0x2
  2406                           
  2407  0072                     ___bmul@product:	
  2408                           ; 1 bytes @ 0x2
  2409                           
  2410  0072                     ___wmul@multiplicand:	
  2411                           ; 1 bytes @ 0x2
  2412                           
  2413  0072                     ___lwdiv@dividend:	
  2414                           ; 2 bytes @ 0x2
  2415                           
  2416  0072                     memcpy@s1:	
  2417                           ; 2 bytes @ 0x2
  2418                           
  2419  0072                     memset@c:	
  2420                           ; 2 bytes @ 0x2
  2421                           
  2422                           
  2423                           ; 2 bytes @ 0x2
  2424  0072                     	ds	1
  2425  0073                     ??_USARTWriteString:	
  2426  0073                     ?_debug_str:	
  2427                           ; 1 bytes @ 0x3
  2428                           
  2429  0073                     ?_debug_line:	
  2430                           ; 1 bytes @ 0x3
  2431                           
  2432  0073                     ??_is_row_full:	
  2433                           ; 1 bytes @ 0x3
  2434                           
  2435  0073                     clear@matrix88:	
  2436                           ; 1 bytes @ 0x3
  2437                           
  2438  0073                     merge@matrix88:	
  2439                           ; 1 bytes @ 0x3
  2440                           
  2441  0073                     ___bmul@multiplier:	
  2442                           ; 1 bytes @ 0x3
  2443                           
  2444  0073                     debug_str@str:	
  2445                           ; 1 bytes @ 0x3
  2446                           
  2447  0073                     debug_line@str:	
  2448                           ; 2 bytes @ 0x3
  2449                           
  2450                           
  2451                           ; 2 bytes @ 0x3
  2452  0073                     	ds	1
  2453  0074                     ??_clear:	
  2454  0074                     ??_merge:	
  2455                           ; 1 bytes @ 0x4
  2456                           
  2457  0074                     ??___wmul:	
  2458                           ; 1 bytes @ 0x4
  2459                           
  2460  0074                     ??___lwdiv:	
  2461                           ; 1 bytes @ 0x4
  2462                           
  2463  0074                     printf_MATRIX7219@matrix:	
  2464                           ; 1 bytes @ 0x4
  2465                           
  2466  0074                     MATRIX88_to_MATRIX7219@matrix88:	
  2467                           ; 1 bytes @ 0x4
  2468                           
  2469  0074                     is_row_empty@matrix:	
  2470                           ; 1 bytes @ 0x4
  2471                           
  2472  0074                     ___wmul@product:	
  2473                           ; 1 bytes @ 0x4
  2474                           
  2475  0074                     memcpy@n:	
  2476                           ; 2 bytes @ 0x4
  2477                           
  2478  0074                     memset@n:	
  2479                           ; 2 bytes @ 0x4
  2480                           
  2481  0074                     ___lmul@multiplicand:	
  2482                           ; 2 bytes @ 0x4
  2483                           
  2484                           
  2485                           ; 4 bytes @ 0x4
  2486  0074                     	ds	1
  2487  0075                     ??_debug_str:	
  2488  0075                     ??_debug_line:	
  2489                           ; 1 bytes @ 0x5
  2490                           
  2491  0075                     ?_printf_console_MATRIX44:	
  2492                           ; 1 bytes @ 0x5
  2493                           
  2494  0075                     ?_printf_console_MATRIX88:	
  2495                           ; 1 bytes @ 0x5
  2496                           
  2497  0075                     ?_is_left_boundary:	
  2498                           ; 1 bytes @ 0x5
  2499                           
  2500  0075                     ?_is_right_boundary:	
  2501                           ; 1 bytes @ 0x5
  2502                           
  2503  0075                     printf_console_MATRIX44@y:	
  2504                           ; 1 bytes @ 0x5
  2505                           
  2506  0075                     printf_MATRIX7219@col:	
  2507                           ; 1 bytes @ 0x5
  2508                           
  2509  0075                     MATRIX88_to_MATRIX7219@mask:	
  2510                           ; 1 bytes @ 0x5
  2511                           
  2512  0075                     is_row_empty@col:	
  2513                           ; 1 bytes @ 0x5
  2514                           
  2515  0075                     printf_console_MATRIX88@matrix:	
  2516                           ; 1 bytes @ 0x5
  2517                           
  2518  0075                     is_left_boundary@matrix44:	
  2519                           ; 2 bytes @ 0x5
  2520                           
  2521  0075                     is_right_boundary@matrix44:	
  2522                           ; 2 bytes @ 0x5
  2523                           
  2524  0075                     ___lwdiv@quotient:	
  2525                           ; 2 bytes @ 0x5
  2526                           
  2527                           
  2528                           ; 2 bytes @ 0x5
  2529  0075                     	ds	1
  2530  0076                     ??_memset:	
  2531  0076                     ??_memcpy:	
  2532                           ; 1 bytes @ 0x6
  2533                           
  2534  0076                     MATRIX88_to_MATRIX7219@row:	
  2535                           ; 1 bytes @ 0x6
  2536                           
  2537  0076                     printf_console_MATRIX44@matrix:	
  2538                           ; 1 bytes @ 0x6
  2539                           
  2540  0076                     memset@p:	
  2541                           ; 2 bytes @ 0x6
  2542                           
  2543                           
  2544                           ; 2 bytes @ 0x6
  2545  0076                     	ds	1
  2546  0077                     ??_printf_console_MATRIX88:	
  2547  0077                     MATRIX88_to_MATRIX7219@col:	
  2548                           ; 1 bytes @ 0x7
  2549                           
  2550  0077                     is_left_boundary@matrix88:	
  2551                           ; 1 bytes @ 0x7
  2552                           
  2553  0077                     is_right_boundary@matrix88:	
  2554                           ; 1 bytes @ 0x7
  2555                           
  2556  0077                     ___lwdiv@counter:	
  2557                           ; 1 bytes @ 0x7
  2558                           
  2559  0077                     memcpy@d:	
  2560                           ; 1 bytes @ 0x7
  2561                           
  2562                           
  2563                           ; 2 bytes @ 0x7
  2564  0077                     	ds	1
  2565  0078                     ??_printf_MATRIX88:	
  2566  0078                     ??_is_left_boundary:	
  2567                           ; 1 bytes @ 0x8
  2568                           
  2569  0078                     ??_is_right_boundary:	
  2570                           ; 1 bytes @ 0x8
  2571                           
  2572  0078                     ??___lmul:	
  2573                           ; 1 bytes @ 0x8
  2574                           
  2575  0078                     ?___lwmod:	
  2576                           ; 1 bytes @ 0x8
  2577                           
  2578  0078                     printf_console_MATRIX44@x:	
  2579                           ; 2 bytes @ 0x8
  2580                           
  2581  0078                     is_row_full@col:	
  2582                           ; 1 bytes @ 0x8
  2583                           
  2584  0078                     clear@x:	
  2585                           ; 1 bytes @ 0x8
  2586                           
  2587  0078                     merge@x:	
  2588                           ; 1 bytes @ 0x8
  2589                           
  2590  0078                     ___lwmod@divisor:	
  2591                           ; 1 bytes @ 0x8
  2592                           
  2593                           
  2594                           ; 2 bytes @ 0x8
  2595  0078                     	ds	1
  2596  0079                     ??_printf_Screen:	
  2597  0079                     ??_Clear_Matrix:	
  2598                           ; 1 bytes @ 0x9
  2599                           
  2600  0079                     printf_console_MATRIX44@row:	
  2601                           ; 1 bytes @ 0x9
  2602                           
  2603  0079                     clear@row:	
  2604                           ; 1 bytes @ 0x9
  2605                           
  2606  0079                     merge@row:	
  2607                           ; 1 bytes @ 0x9
  2608                           
  2609  0079                     memcpy@s:	
  2610                           ; 1 bytes @ 0x9
  2611                           
  2612  0079                     ___lmul@product:	
  2613                           ; 2 bytes @ 0x9
  2614                           
  2615                           
  2616                           ; 4 bytes @ 0x9
  2617  0079                     	ds	1
  2618  007A                     printf_console_MATRIX44@col:	
  2619  007A                     clear@col:	
  2620                           ; 1 bytes @ 0xA
  2621                           
  2622  007A                     merge@col:	
  2623                           ; 1 bytes @ 0xA
  2624                           
  2625  007A                     ___lwmod@dividend:	
  2626                           ; 1 bytes @ 0xA
  2627                           
  2628                           
  2629                           ; 2 bytes @ 0xA
  2630  007A                     	ds	1
  2631  007B                     ?_printf_console_cur_MATRIX44:	
  2632  007B                     ?_delete_row:	
  2633                           ; 1 bytes @ 0xB
  2634                           
  2635  007B                     printf_console_cur_MATRIX44@y:	
  2636                           ; 1 bytes @ 0xB
  2637                           
  2638  007B                     delete_row@matrix:	
  2639                           ; 1 bytes @ 0xB
  2640                           
  2641                           
  2642                           ; 2 bytes @ 0xB
  2643  007B                     	ds	1
  2644  007C                     ??___lwmod:	
  2645  007C                     printf_console_MATRIX88@row:	
  2646                           ; 1 bytes @ 0xC
  2647                           
  2648                           
  2649                           ; 1 bytes @ 0xC
  2650  007C                     	ds	1
  2651  007D                     ??___awmod:	
  2652  007D                     printf_console_MATRIX88@col:	
  2653                           ; 1 bytes @ 0xD
  2654                           
  2655  007D                     delete_row@row:	
  2656                           ; 1 bytes @ 0xD
  2657                           
  2658  007D                     ___lwmod@counter:	
  2659                           ; 1 bytes @ 0xD
  2660                           
  2661                           
  2662                           ; 1 bytes @ 0xD
  2663  007D                     	ds	1
  2664  007E                     ??_debug_int1:	
  2665  007E                     ??_debug_int2:	
  2666                           ; 1 bytes @ 0xE
  2667                           
  2668  007E                     ??_debug_int3:	
  2669                           ; 1 bytes @ 0xE
  2670                           
  2671  007E                     ??_printf_console_Screen:	
  2672                           ; 1 bytes @ 0xE
  2673                           
  2674  007E                     ??_char_info_index_rand:	
  2675                           ; 1 bytes @ 0xE
  2676                           
  2677                           
  2678                           	psect	cstackBANK0
  2679  0020                     __pcstackBANK0:	
  2680                           ; 1 bytes @ 0xE
  2681                           
  2682  0020                     ??_printf_console_MATRIX44:	
  2683  0020                     ??_delete_row:	
  2684                           ; 1 bytes @ 0x0
  2685                           
  2686  0020                     ?_merge1:	
  2687                           ; 1 bytes @ 0x0
  2688                           
  2689  0020                     ?_sprintf:	
  2690                           ; 1 bytes @ 0x0
  2691                           
  2692  0020                     ?_rand:	
  2693                           ; 2 bytes @ 0x0
  2694                           
  2695  0020                     printf_MATRIX88@matrix88:	
  2696                           ; 2 bytes @ 0x0
  2697                           
  2698  0020                     is_left_boundary@x:	
  2699                           ; 1 bytes @ 0x0
  2700                           
  2701  0020                     is_right_boundary@x:	
  2702                           ; 1 bytes @ 0x0
  2703                           
  2704  0020                     merge1@y:	
  2705                           ; 1 bytes @ 0x0
  2706                           
  2707  0020                     sprintf@f:	
  2708                           ; 1 bytes @ 0x0
  2709                           
  2710                           
  2711                           ; 2 bytes @ 0x0
  2712  0020                     	ds	1
  2713  0021                     is_left_boundary@row:	
  2714  0021                     is_right_boundary@row:	
  2715                           ; 1 bytes @ 0x1
  2716                           
  2717  0021                     merge1@matrix44:	
  2718                           ; 1 bytes @ 0x1
  2719                           
  2720  0021                     printf_MATRIX88@matrix7219:	
  2721                           ; 2 bytes @ 0x1
  2722                           
  2723                           
  2724                           ; 8 bytes @ 0x1
  2725  0021                     	ds	1
  2726  0022                     ??_rand:	
  2727  0022                     is_left_boundary@col:	
  2728                           ; 1 bytes @ 0x2
  2729                           
  2730  0022                     is_right_boundary@col:	
  2731                           ; 1 bytes @ 0x2
  2732                           
  2733                           
  2734                           ; 1 bytes @ 0x2
  2735  0022                     	ds	1
  2736  0023                     merge1@matrix88_in:	
  2737                           
  2738                           ; 1 bytes @ 0x3
  2739  0023                     	ds	1
  2740  0024                     merge1@matrix88_out:	
  2741  0024                     delete_row@len:	
  2742                           ; 1 bytes @ 0x4
  2743                           
  2744                           
  2745                           ; 2 bytes @ 0x4
  2746  0024                     	ds	1
  2747  0025                     ??_merge1:	
  2748                           
  2749                           ; 1 bytes @ 0x5
  2750  0025                     	ds	1
  2751  0026                     delete_row@i:	
  2752                           
  2753                           ; 1 bytes @ 0x6
  2754  0026                     	ds	1
  2755  0027                     ?___awmod:	
  2756  0027                     ___awmod@divisor:	
  2757                           ; 2 bytes @ 0x7
  2758                           
  2759                           
  2760                           ; 2 bytes @ 0x7
  2761  0027                     	ds	1
  2762  0028                     ??_sprintf:	
  2763                           
  2764                           ; 1 bytes @ 0x8
  2765  0028                     	ds	1
  2766  0029                     ??_printf_console_cur_MATRIX44:	
  2767  0029                     merge1@x:	
  2768                           ; 1 bytes @ 0x9
  2769                           
  2770  0029                     ___awmod@dividend:	
  2771                           ; 1 bytes @ 0x9
  2772                           
  2773                           
  2774                           ; 2 bytes @ 0x9
  2775  0029                     	ds	1
  2776  002A                     merge1@len:	
  2777                           
  2778                           ; 2 bytes @ 0xA
  2779  002A                     	ds	1
  2780  002B                     ___awmod@counter:	
  2781  002B                     _sprintf$662:	
  2782                           ; 1 bytes @ 0xB
  2783                           
  2784                           
  2785                           ; 2 bytes @ 0xB
  2786  002B                     	ds	1
  2787  002C                     merge1@row:	
  2788  002C                     ___awmod@sign:	
  2789                           ; 1 bytes @ 0xC
  2790                           
  2791                           
  2792                           ; 1 bytes @ 0xC
  2793  002C                     	ds	1
  2794  002D                     merge1@col:	
  2795  002D                     _sprintf$663:	
  2796                           ; 1 bytes @ 0xD
  2797                           
  2798                           
  2799                           ; 2 bytes @ 0xD
  2800  002D                     	ds	2
  2801  002F                     _sprintf$669:	
  2802                           
  2803                           ; 2 bytes @ 0xF
  2804  002F                     	ds	2
  2805  0031                     sprintf@idx:	
  2806                           
  2807                           ; 1 bytes @ 0x11
  2808  0031                     	ds	1
  2809  0032                     sprintf@cp:	
  2810  0032                     printf_console_cur_MATRIX44@matrix:	
  2811                           ; 1 bytes @ 0x12
  2812                           
  2813                           
  2814                           ; 2 bytes @ 0x12
  2815  0032                     	ds	1
  2816  0033                     sprintf@len:	
  2817                           
  2818                           ; 2 bytes @ 0x13
  2819  0033                     	ds	1
  2820  0034                     printf_console_cur_MATRIX44@x:	
  2821                           
  2822                           ; 1 bytes @ 0x14
  2823  0034                     	ds	1
  2824  0035                     sprintf@ap:	
  2825                           
  2826                           ; 1 bytes @ 0x15
  2827  0035                     	ds	1
  2828  0036                     sprintf@val:	
  2829                           
  2830                           ; 2 bytes @ 0x16
  2831  0036                     	ds	2
  2832  0038                     sprintf@prec:	
  2833                           
  2834                           ; 1 bytes @ 0x18
  2835  0038                     	ds	1
  2836  0039                     sprintf@width:	
  2837                           
  2838                           ; 2 bytes @ 0x19
  2839  0039                     	ds	2
  2840  003B                     sprintf@c:	
  2841                           
  2842                           ; 1 bytes @ 0x1B
  2843  003B                     	ds	1
  2844  003C                     sprintf@sp:	
  2845                           
  2846                           ; 1 bytes @ 0x1C
  2847  003C                     	ds	1
  2848  003D                     sprintf@flag:	
  2849                           
  2850                           ; 2 bytes @ 0x1D
  2851  003D                     	ds	2
  2852  003F                     ?_debug_int1:	
  2853  003F                     ?_debug_int2:	
  2854                           ; 1 bytes @ 0x1F
  2855                           
  2856  003F                     ?_debug_int3:	
  2857                           ; 1 bytes @ 0x1F
  2858                           
  2859  003F                     debug_int1@f:	
  2860                           ; 1 bytes @ 0x1F
  2861                           
  2862  003F                     debug_int2@f:	
  2863                           ; 2 bytes @ 0x1F
  2864                           
  2865  003F                     debug_int3@f:	
  2866                           ; 2 bytes @ 0x1F
  2867                           
  2868                           
  2869                           ; 2 bytes @ 0x1F
  2870  003F                     	ds	2
  2871  0041                     debug_int1@i:	
  2872  0041                     debug_int2@i1:	
  2873                           ; 2 bytes @ 0x21
  2874                           
  2875  0041                     debug_int3@i1:	
  2876                           ; 2 bytes @ 0x21
  2877                           
  2878                           
  2879                           ; 2 bytes @ 0x21
  2880  0041                     	ds	2
  2881  0043                     ?_delete_matrix:	
  2882  0043                     ?_left_most:	
  2883                           ; 1 bytes @ 0x23
  2884                           
  2885  0043                     ?_right_most:	
  2886                           ; 1 bytes @ 0x23
  2887                           
  2888  0043                     ??_get_high:	
  2889                           ; 1 bytes @ 0x23
  2890                           
  2891  0043                     ?_evaluate:	
  2892                           ; 1 bytes @ 0x23
  2893                           
  2894  0043                     debug_int2@i2:	
  2895                           ; 2 bytes @ 0x23
  2896                           
  2897  0043                     debug_int3@i2:	
  2898                           ; 2 bytes @ 0x23
  2899                           
  2900  0043                     delete_matrix@matrix:	
  2901                           ; 2 bytes @ 0x23
  2902                           
  2903  0043                     left_most@matrix44:	
  2904                           ; 2 bytes @ 0x23
  2905                           
  2906  0043                     right_most@matrix44:	
  2907                           ; 2 bytes @ 0x23
  2908                           
  2909                           
  2910                           ; 2 bytes @ 0x23
  2911  0043                     	ds	2
  2912  0045                     ??_delete_matrix:	
  2913  0045                     ?_hit_land:	
  2914                           ; 1 bytes @ 0x25
  2915                           
  2916  0045                     ?_is_valid:	
  2917                           ; 1 bytes @ 0x25
  2918                           
  2919  0045                     ?_fall_off:	
  2920                           ; 1 bytes @ 0x25
  2921                           
  2922  0045                     ??_evaluate:	
  2923                           ; 1 bytes @ 0x25
  2924                           
  2925  0045                     hit_land@y:	
  2926                           ; 1 bytes @ 0x25
  2927                           
  2928  0045                     is_valid@y:	
  2929                           ; 1 bytes @ 0x25
  2930                           
  2931  0045                     fall_off@y:	
  2932                           ; 1 bytes @ 0x25
  2933                           
  2934  0045                     left_most@matrix88:	
  2935                           ; 1 bytes @ 0x25
  2936                           
  2937  0045                     right_most@matrix88:	
  2938                           ; 1 bytes @ 0x25
  2939                           
  2940  0045                     get_high@matrix:	
  2941                           ; 1 bytes @ 0x25
  2942                           
  2943  0045                     debug_int3@i3:	
  2944                           ; 1 bytes @ 0x25
  2945                           
  2946                           
  2947                           ; 2 bytes @ 0x25
  2948  0045                     	ds	1
  2949  0046                     ??_left_most:	
  2950  0046                     ??_right_most:	
  2951                           ; 1 bytes @ 0x26
  2952                           
  2953  0046                     get_high@row:	
  2954                           ; 1 bytes @ 0x26
  2955                           
  2956  0046                     hit_land@matrix44:	
  2957                           ; 1 bytes @ 0x26
  2958                           
  2959  0046                     is_valid@matrix44:	
  2960                           ; 2 bytes @ 0x26
  2961                           
  2962  0046                     fall_off@matrix44:	
  2963                           ; 2 bytes @ 0x26
  2964                           
  2965                           
  2966                           ; 2 bytes @ 0x26
  2967  0046                     	ds	1
  2968  0047                     ?_get_high_after_merge:	
  2969  0047                     ??_get_holes_after_merge:	
  2970                           ; 1 bytes @ 0x27
  2971                           
  2972  0047                     delete_matrix@count:	
  2973                           ; 1 bytes @ 0x27
  2974                           
  2975  0047                     left_most@x:	
  2976                           ; 1 bytes @ 0x27
  2977                           
  2978  0047                     get_high_after_merge@matrix:	
  2979                           ; 1 bytes @ 0x27
  2980                           
  2981                           
  2982                           ; 2 bytes @ 0x27
  2983  0047                     	ds	1
  2984  0048                     delete_matrix@row:	
  2985  0048                     hit_land@matrix88:	
  2986                           ; 1 bytes @ 0x28
  2987                           
  2988  0048                     is_valid@matrix88:	
  2989                           ; 1 bytes @ 0x28
  2990                           
  2991  0048                     fall_off@matrix88:	
  2992                           ; 1 bytes @ 0x28
  2993                           
  2994  0048                     right_most@x:	
  2995                           ; 1 bytes @ 0x28
  2996                           
  2997                           
  2998                           ; 1 bytes @ 0x28
  2999  0048                     	ds	1
  3000  0049                     ??_hit_land:	
  3001  0049                     ??_is_valid:	
  3002                           ; 1 bytes @ 0x29
  3003                           
  3004  0049                     ??_fall_off:	
  3005                           ; 1 bytes @ 0x29
  3006                           
  3007  0049                     ??_get_high_after_merge:	
  3008                           ; 1 bytes @ 0x29
  3009                           
  3010  0049                     evaluate@risk:	
  3011                           ; 1 bytes @ 0x29
  3012                           
  3013                           
  3014                           ; 2 bytes @ 0x29
  3015  0049                     	ds	2
  3016  004B                     evaluate@full:	
  3017                           
  3018                           ; 1 bytes @ 0x2B
  3019  004B                     	ds	1
  3020  004C                     evaluate@matrix:	
  3021                           
  3022                           ; 1 bytes @ 0x2C
  3023  004C                     	ds	1
  3024  004D                     hit_land@x:	
  3025  004D                     is_valid@x:	
  3026                           ; 1 bytes @ 0x2D
  3027                           
  3028  004D                     fall_off@x:	
  3029                           ; 1 bytes @ 0x2D
  3030                           
  3031  004D                     evaluate@col:	
  3032                           ; 1 bytes @ 0x2D
  3033                           
  3034  004D                     get_high_after_merge@y:	
  3035                           ; 1 bytes @ 0x2D
  3036                           
  3037  004D                     get_holes_after_merge@num_hole:	
  3038                           ; 1 bytes @ 0x2D
  3039                           
  3040                           
  3041                           ; 1 bytes @ 0x2D
  3042  004D                     	ds	1
  3043  004E                     hit_land@col:	
  3044  004E                     is_valid@row:	
  3045                           ; 1 bytes @ 0x2E
  3046                           
  3047  004E                     fall_off@col:	
  3048                           ; 1 bytes @ 0x2E
  3049                           
  3050  004E                     evaluate@row:	
  3051                           ; 1 bytes @ 0x2E
  3052                           
  3053  004E                     get_high_after_merge@col:	
  3054                           ; 1 bytes @ 0x2E
  3055                           
  3056  004E                     get_holes_after_merge@stop:	
  3057                           ; 1 bytes @ 0x2E
  3058                           
  3059                           
  3060                           ; 1 bytes @ 0x2E
  3061  004E                     	ds	1
  3062  004F                     hit_land@row:	
  3063  004F                     is_valid@col:	
  3064                           ; 1 bytes @ 0x2F
  3065                           
  3066  004F                     fall_off@row:	
  3067                           ; 1 bytes @ 0x2F
  3068                           
  3069  004F                     get_high_after_merge@row:	
  3070                           ; 1 bytes @ 0x2F
  3071                           
  3072  004F                     get_holes_after_merge@start:	
  3073                           ; 1 bytes @ 0x2F
  3074                           
  3075                           
  3076                           ; 1 bytes @ 0x2F
  3077  004F                     	ds	1
  3078  0050                     get_holes_after_merge@matrix:	
  3079                           
  3080                           ; 1 bytes @ 0x30
  3081  0050                     	ds	1
  3082  0051                     get_holes_after_merge@col:	
  3083                           
  3084                           ; 1 bytes @ 0x31
  3085  0051                     	ds	1
  3086  0052                     get_holes_after_merge@row:	
  3087                           
  3088                           ; 1 bytes @ 0x32
  3089  0052                     	ds	1
  3090  0053                     ??_find_best_solution:	
  3091                           
  3092                           ; 1 bytes @ 0x33
  3093  0053                     	ds	7
  3094  005A                     ?_main:	
  3095  005A                     main@argc:	
  3096                           ; 2 bytes @ 0x3A
  3097                           
  3098                           
  3099                           ; 2 bytes @ 0x3A
  3100  005A                     	ds	2
  3101  005C                     main@argv:	
  3102                           
  3103                           ; 2 bytes @ 0x3C
  3104  005C                     	ds	2
  3105  005E                     ??_main:	
  3106                           
  3107                           ; 1 bytes @ 0x3E
  3108  005E                     	ds	9
  3109  0067                     main@Seed:	
  3110                           
  3111                           ; 2 bytes @ 0x47
  3112  0067                     	ds	2
  3113  0069                     main@hit_res:	
  3114                           
  3115                           ; 1 bytes @ 0x49
  3116  0069                     	ds	1
  3117                           
  3118                           	psect	maintext
  3119  016A                     __pmaintext:	
  3120 ;;
  3121 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
  3122 ;;
  3123 ;; *************** function _main *****************
  3124 ;; Defined at:
  3125 ;;		line 1194 in file "teris_16f886.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;  argc            2   58[BANK0 ] int 
  3128 ;;  argv            2   60[BANK0 ] PTR PTR unsigned char 
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;  Seed            2   71[BANK0 ] unsigned int 
  3131 ;;  hit_res         1   73[BANK0 ] unsigned char 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  2   58[BANK0 ] int 
  3134 ;; Registers used:
  3135 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : B00/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3141 ;;      Params:         0       4       0       0       0
  3142 ;;      Locals:         0       3       0       0       0
  3143 ;;      Temps:          0       9       0       0       0
  3144 ;;      Totals:         0      16       0       0       0
  3145 ;;Total ram usage:       16 bytes
  3146 ;; Hardware stack levels required when called:    6
  3147 ;; This function calls:
  3148 ;;		_Clear_Matrix
  3149 ;;		_USARTInit
  3150 ;;		___bmul
  3151 ;;		_char_info_index_rand
  3152 ;;		_clear
  3153 ;;		_debug_int1
  3154 ;;		_debug_line
  3155 ;;		_delete_matrix
  3156 ;;		_find_best_solution
  3157 ;;		_hit_land
  3158 ;;		_merge
  3159 ;;		_printf_Screen
  3160 ;;		_printf_console_MATRIX88
  3161 ;;		_srand
  3162 ;; This function is called by:
  3163 ;;		Startup code after reset
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           
  3168                           ;psect for function _main
  3169  016A                     _main:	
  3170                           
  3171                           ;teris_16f886.c: 1196: uint8_t hit_res;
  3172                           ;teris_16f886.c: 1221: (TRISAbits.TRISA3 = 0);
  3173                           
  3174                           ;incstack = 0
  3175                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3176  016A  1683               	bsf	3,5	;RP0=1, select bank1
  3177  016B  1303               	bcf	3,6	;RP1=0, select bank1
  3178  016C  1185               	bcf	5,3	;volatile
  3179                           
  3180                           ;teris_16f886.c: 1223: (TRISAbits.TRISA2 = 0);
  3181  016D  1105               	bcf	5,2	;volatile
  3182                           
  3183                           ;teris_16f886.c: 1225: (TRISAbits.TRISA1 = 0);
  3184  016E  1085               	bcf	5,1	;volatile
  3185                           
  3186                           ;teris_16f886.c: 1227: ANSELbits.ANS1 = 0;
  3187  016F  1683               	bsf	3,5	;RP0=1, select bank3
  3188  0170  1703               	bsf	3,6	;RP1=1, select bank3
  3189  0171  1088               	bcf	8,1	;volatile
  3190                           
  3191                           ;teris_16f886.c: 1228: ANSELbits.ANS2 = 0;
  3192  0172  1108               	bcf	8,2	;volatile
  3193                           
  3194                           ;teris_16f886.c: 1229: ANSELbits.ANS3 = 0;
  3195  0173  1188               	bcf	8,3	;volatile
  3196                           
  3197                           ;teris_16f886.c: 1230: RA2 = 1;
  3198  0174  1283               	bcf	3,5	;RP0=0, select bank0
  3199  0175  1303               	bcf	3,6	;RP1=0, select bank0
  3200  0176  1505               	bsf	5,2	;volatile
  3201                           
  3202                           ;teris_16f886.c: 1231: RA1 = 0;
  3203  0177  1085               	bcf	5,1	;volatile
  3204                           
  3205                           ;teris_16f886.c: 1234: USARTInit(9600);
  3206  0178  3080               	movlw	128
  3207  0179  00F0               	movwf	USARTInit@baud_rate
  3208  017A  3025               	movlw	37
  3209  017B  00F1               	movwf	USARTInit@baud_rate+1
  3210  017C  160A  158A  2493  120A  118A  	fcall	_USARTInit
  3211                           
  3212                           ;teris_16f886.c: 1237: unsigned Seed;
  3213                           ;teris_16f886.c: 1238: srand(Seed);
  3214  0181  1283               	bcf	3,5	;RP0=0, select bank0
  3215  0182  1303               	bcf	3,6	;RP1=0, select bank0
  3216  0183  0868               	movf	main@Seed+1,w
  3217  0184  00F1               	movwf	srand@x+1
  3218  0185  0867               	movf	main@Seed,w
  3219  0186  00F0               	movwf	srand@x
  3220  0187  160A  158A  21AF  120A  118A  	fcall	_srand
  3221  018C  2996               	goto	l5021
  3222  018D                     l5035:	
  3223                           
  3224                           ;teris_16f886.c: 1250: {
  3225                           ;teris_16f886.c: 1251: debug_line("GAME OVER!!!");
  3226  018D  3041               	movlw	low (STR_60| (0+32768))
  3227  018E  00F3               	movwf	debug_line@str
  3228  018F  308E               	movlw	high (STR_60| (0+32768))
  3229  0190  00F4               	movwf	debug_line@str+1
  3230  0191  160A  158A  21D7  120A  118A  	fcall	_debug_line
  3231  0196                     l5021:	
  3232                           ;teris_16f886.c: 1240: __start:
  3233                           
  3234                           ;teris_16f886.c: 1252: goto __start;
  3235                           
  3236                           
  3237                           ;teris_16f886.c: 1241: Clear_Matrix();
  3238  0196  160A  158A  220B  120A  118A  	fcall	_Clear_Matrix
  3239  019B                     l5023:	
  3240                           ;teris_16f886.c: 1242: while(1)
  3241                           
  3242                           
  3243                           ;teris_16f886.c: 1243: {
  3244                           ;teris_16f886.c: 1244: cur_y = 0;
  3245  019B  1283               	bcf	3,5	;RP0=0, select bank0
  3246  019C  1303               	bcf	3,6	;RP1=0, select bank0
  3247  019D  01EA               	clrf	_cur_y
  3248                           
  3249                           ;teris_16f886.c: 1245: cur_x = 2, cur_y = 0;
  3250  019E  3002               	movlw	2
  3251  019F  00DE               	movwf	??_main
  3252  01A0  085E               	movf	??_main,w
  3253  01A1  1683               	bsf	3,5	;RP0=1, select bank1
  3254  01A2  1303               	bcf	3,6	;RP1=0, select bank1
  3255  01A3  00EE               	movwf	_cur_x^(0+128)
  3256  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  3257  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  3258  01A6  01EA               	clrf	_cur_y
  3259                           
  3260                           ;teris_16f886.c: 1246: g_char_info_index = char_info_index_rand();
  3261  01A7  160A  158A  221F  120A  118A  	fcall	_char_info_index_rand
  3262  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  3263  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  3264  01AE  00DE               	movwf	??_main
  3265  01AF  085E               	movf	??_main,w
  3266  01B0  00EB               	movwf	_g_char_info_index
  3267                           
  3268                           ;teris_16f886.c: 1248: debug_int1("g_char_info_index = %d\n", g_char_info_index);
  3269  01B1  3009               	movlw	low (STR_61| (0+32768))
  3270  01B2  00BF               	movwf	debug_int1@f
  3271  01B3  308D               	movlw	high (STR_61| (0+32768))
  3272  01B4  00C0               	movwf	debug_int1@f+1
  3273  01B5  086B               	movf	_g_char_info_index,w
  3274  01B6  00DE               	movwf	??_main
  3275  01B7  01DF               	clrf	??_main+1
  3276  01B8  085E               	movf	??_main,w
  3277  01B9  00C1               	movwf	debug_int1@i
  3278  01BA  085F               	movf	??_main+1,w
  3279  01BB  00C2               	movwf	debug_int1@i+1
  3280  01BC  160A  158A  2273  120A  118A  	fcall	_debug_int1
  3281                           
  3282                           ;teris_16f886.c: 1249: if(find_best_solution() == 0)
  3283  01C1  160A  118A  23FE  120A  118A  	fcall	_find_best_solution
  3284  01C6  3A00               	xorlw	0
  3285  01C7  1903               	btfsc	3,2
  3286  01C8  298D               	goto	l5035
  3287                           
  3288                           ;teris_16f886.c: 1253: }
  3289                           ;teris_16f886.c: 1254: g_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].start
      +                          _index + g_char_info[g_char_info_index].cur_index];
  3290  01C9  3003               	movlw	3
  3291  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  3292  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  3293  01CC  00DE               	movwf	??_main
  3294  01CD  085E               	movf	??_main,w
  3295  01CE  00F0               	movwf	___bmul@multiplicand
  3296  01CF  086B               	movf	_g_char_info_index,w
  3297  01D0  160A  158A  21C6  120A  118A  	fcall	___bmul
  3298  01D5  3E01               	addlw	1
  3299  01D6  3EB8               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3300  01D7  0084               	movwf	4
  3301  01D8  1783               	bsf	3,7	;select IRP bank3
  3302  01D9  0800               	movf	0,w
  3303  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  3304  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  3305  01DC  00DF               	movwf	??_main+1
  3306  01DD  3003               	movlw	3
  3307  01DE  00E0               	movwf	??_main+2
  3308  01DF  0860               	movf	??_main+2,w
  3309  01E0  00F0               	movwf	___bmul@multiplicand
  3310  01E1  086B               	movf	_g_char_info_index,w
  3311  01E2  160A  158A  21C6  120A  118A  	fcall	___bmul
  3312  01E7  3EB8               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3313  01E8  0084               	movwf	4
  3314  01E9  1783               	bsf	3,7	;select IRP bank3
  3315  01EA  0800               	movf	0,w
  3316  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  3317  01EC  1303               	bcf	3,6	;RP1=0, select bank0
  3318  01ED  075F               	addwf	??_main+1,w
  3319  01EE  00E1               	movwf	??_main+3
  3320  01EF  01E2               	clrf	??_main+4
  3321  01F0  0DE2               	rlf	??_main+4,f
  3322  01F1  0EE1               	swapf	??_main+3,f
  3323  01F2  0EE2               	swapf	??_main+4,f
  3324  01F3  30F0               	movlw	240
  3325  01F4  05E2               	andwf	??_main+4,f
  3326  01F5  0861               	movf	??_main+3,w
  3327  01F6  390F               	andlw	15
  3328  01F7  04E2               	iorwf	??_main+4,f
  3329  01F8  30F0               	movlw	240
  3330  01F9  05E1               	andwf	??_main+3,f
  3331  01FA  3030               	movlw	low (_g_matrix44| (0+32768))
  3332  01FB  00E3               	movwf	??_main+5
  3333  01FC  3088               	movlw	high (_g_matrix44| (0+32768))
  3334  01FD  00E4               	movwf	??_main+6
  3335  01FE  0861               	movf	??_main+3,w
  3336  01FF  0763               	addwf	??_main+5,w
  3337  0200  00E5               	movwf	??_main+7
  3338  0201  0862               	movf	??_main+4,w
  3339  0202  1803               	skipnc
  3340  0203  0A62               	incf	??_main+4,w
  3341  0204  0764               	addwf	??_main+6,w
  3342  0205  00E6               	movwf	??_main+8
  3343  0206  0865               	movf	??_main+7,w
  3344  0207  1683               	bsf	3,5	;RP0=1, select bank3
  3345  0208  1703               	bsf	3,6	;RP1=1, select bank3
  3346  0209  0095               	movwf	_g_cur_matrix44^(0+384)
  3347  020A  1283               	bcf	3,5	;RP0=0, select bank0
  3348  020B  1303               	bcf	3,6	;RP1=0, select bank0
  3349  020C  0866               	movf	??_main+8,w
  3350  020D  1683               	bsf	3,5	;RP0=1, select bank3
  3351  020E  1703               	bsf	3,6	;RP1=1, select bank3
  3352  020F  0096               	movwf	(_g_cur_matrix44+1)^(0+384)
  3353  0210                     l5039:	
  3354                           ;teris_16f886.c: 1255: while(1)
  3355                           
  3356                           
  3357                           ;teris_16f886.c: 1256: {
  3358                           ;teris_16f886.c: 1257: hit_res = hit_land(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3359  0210  1283               	bcf	3,5	;RP0=0, select bank0
  3360  0211  1303               	bcf	3,6	;RP1=0, select bank0
  3361  0212  086A               	movf	_cur_y,w
  3362  0213  00DE               	movwf	??_main
  3363  0214  085E               	movf	??_main,w
  3364  0215  00C5               	movwf	hit_land@y
  3365  0216  1683               	bsf	3,5	;RP0=1, select bank3
  3366  0217  1703               	bsf	3,6	;RP1=1, select bank3
  3367  0218  0815               	movf	_g_cur_matrix44^(0+384),w
  3368  0219  1283               	bcf	3,5	;RP0=0, select bank0
  3369  021A  1303               	bcf	3,6	;RP1=0, select bank0
  3370  021B  00C6               	movwf	hit_land@matrix44
  3371  021C  1683               	bsf	3,5	;RP0=1, select bank3
  3372  021D  1703               	bsf	3,6	;RP1=1, select bank3
  3373  021E  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3374  021F  1283               	bcf	3,5	;RP0=0, select bank0
  3375  0220  1303               	bcf	3,6	;RP1=0, select bank0
  3376  0221  00C7               	movwf	hit_land@matrix44+1
  3377  0222  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3378  0223  00DF               	movwf	??_main+1
  3379  0224  085F               	movf	??_main+1,w
  3380  0225  00C8               	movwf	hit_land@matrix88
  3381  0226  1683               	bsf	3,5	;RP0=1, select bank1
  3382  0227  1303               	bcf	3,6	;RP1=0, select bank1
  3383  0228  086E               	movf	_cur_x^(0+128),w
  3384  0229  160A  118A  2269  120A  118A  	fcall	_hit_land
  3385  022E  1283               	bcf	3,5	;RP0=0, select bank0
  3386  022F  1303               	bcf	3,6	;RP1=0, select bank0
  3387  0230  00E0               	movwf	??_main+2
  3388  0231  0860               	movf	??_main+2,w
  3389  0232  00E9               	movwf	main@hit_res
  3390                           
  3391                           ;teris_16f886.c: 1258: debug_int1("hit_res = %d\n", hit_res);
  3392  0233  3033               	movlw	low (STR_63| (0+32768))
  3393  0234  00BF               	movwf	debug_int1@f
  3394  0235  308E               	movlw	high (STR_63| (0+32768))
  3395  0236  00C0               	movwf	debug_int1@f+1
  3396  0237  0869               	movf	main@hit_res,w
  3397  0238  00DE               	movwf	??_main
  3398  0239  01DF               	clrf	??_main+1
  3399  023A  085E               	movf	??_main,w
  3400  023B  00C1               	movwf	debug_int1@i
  3401  023C  085F               	movf	??_main+1,w
  3402  023D  00C2               	movwf	debug_int1@i+1
  3403  023E  160A  158A  2273  120A  118A  	fcall	_debug_int1
  3404                           
  3405                           ;teris_16f886.c: 1259: merge(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3406  0243  1283               	bcf	3,5	;RP0=0, select bank0
  3407  0244  1303               	bcf	3,6	;RP1=0, select bank0
  3408  0245  086A               	movf	_cur_y,w
  3409  0246  00DE               	movwf	??_main
  3410  0247  085E               	movf	??_main,w
  3411  0248  00F0               	movwf	merge@y
  3412  0249  1683               	bsf	3,5	;RP0=1, select bank3
  3413  024A  1703               	bsf	3,6	;RP1=1, select bank3
  3414  024B  0815               	movf	_g_cur_matrix44^(0+384),w
  3415  024C  00F1               	movwf	merge@matrix44
  3416  024D  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3417  024E  00F2               	movwf	merge@matrix44+1
  3418  024F  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3419  0250  1283               	bcf	3,5	;RP0=0, select bank0
  3420  0251  1303               	bcf	3,6	;RP1=0, select bank0
  3421  0252  00DF               	movwf	??_main+1
  3422  0253  085F               	movf	??_main+1,w
  3423  0254  00F3               	movwf	merge@matrix88
  3424  0255  1683               	bsf	3,5	;RP0=1, select bank1
  3425  0256  1303               	bcf	3,6	;RP1=0, select bank1
  3426  0257  086E               	movf	_cur_x^(0+128),w
  3427  0258  160A  158A  269D  120A  118A  	fcall	_merge
  3428                           
  3429                           ;teris_16f886.c: 1260: if(hit_res == 1)
  3430  025D  1283               	bcf	3,5	;RP0=0, select bank0
  3431  025E  1303               	bcf	3,6	;RP1=0, select bank0
  3432  025F  0369               	decf	main@hit_res,w
  3433  0260  1D03               	btfss	3,2
  3434  0261  2A81               	goto	l5053
  3435                           
  3436                           ;teris_16f886.c: 1261: {
  3437                           ;teris_16f886.c: 1262: printf_Screen();
  3438  0262  160A  158A  218A  120A  118A  	fcall	_printf_Screen
  3439                           
  3440                           ;teris_16f886.c: 1266: _delay((unsigned long)((100)*(20000000/4000.0)));
  3441  0267  3003               	movlw	3
  3442  0268  1283               	bcf	3,5	;RP0=0, select bank0
  3443  0269  1303               	bcf	3,6	;RP1=0, select bank0
  3444  026A  00E0               	movwf	??_main+2
  3445  026B  308A               	movlw	138
  3446  026C  00DF               	movwf	??_main+1
  3447  026D  3056               	movlw	86
  3448  026E  00DE               	movwf	??_main
  3449  026F                     u6767:	
  3450  026F  0BDE               	decfsz	??_main,f
  3451  0270  2A6F               	goto	u6767
  3452  0271  0BDF               	decfsz	??_main+1,f
  3453  0272  2A6F               	goto	u6767
  3454  0273  0BE0               	decfsz	??_main+2,f
  3455  0274  2A6F               	goto	u6767
  3456  0275  2A76               	nop2
  3457                           
  3458                           ;teris_16f886.c: 1268: delete_matrix(&g_matrix88);
  3459  0276  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3460  0277  1283               	bcf	3,5	;RP0=0, select bank0
  3461  0278  1303               	bcf	3,6	;RP1=0, select bank0
  3462  0279  00C3               	movwf	delete_matrix@matrix
  3463  027A  3001               	movlw	1
  3464  027B  00C4               	movwf	delete_matrix@matrix+1
  3465  027C  160A  158A  2522  120A  118A  	fcall	_delete_matrix
  3466  0281                     l5053:	
  3467                           
  3468                           ;teris_16f886.c: 1269: }
  3469                           ;teris_16f886.c: 1270: printf_console_MATRIX88(&g_matrix88);
  3470  0281  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3471  0282  00F5               	movwf	printf_console_MATRIX88@matrix
  3472  0283  3001               	movlw	1
  3473  0284  00F6               	movwf	printf_console_MATRIX88@matrix+1
  3474  0285  160A  158A  27A0  120A  118A  	fcall	_printf_console_MATRIX88
  3475                           
  3476                           ;teris_16f886.c: 1271: printf_Screen();
  3477  028A  160A  158A  218A  120A  118A  	fcall	_printf_Screen
  3478                           
  3479                           ;teris_16f886.c: 1272: if(hit_res == 0)
  3480  028F  1283               	bcf	3,5	;RP0=0, select bank0
  3481  0290  1303               	bcf	3,6	;RP1=0, select bank0
  3482  0291  0869               	movf	main@hit_res,w
  3483  0292  1D03               	btfss	3,2
  3484  0293  299B               	goto	l5023
  3485                           
  3486                           ;teris_16f886.c: 1273: {
  3487                           ;teris_16f886.c: 1274: clear(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3488  0294  086A               	movf	_cur_y,w
  3489  0295  00DE               	movwf	??_main
  3490  0296  085E               	movf	??_main,w
  3491  0297  00F0               	movwf	clear@y
  3492  0298  1683               	bsf	3,5	;RP0=1, select bank3
  3493  0299  1703               	bsf	3,6	;RP1=1, select bank3
  3494  029A  0815               	movf	_g_cur_matrix44^(0+384),w
  3495  029B  00F1               	movwf	clear@matrix44
  3496  029C  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3497  029D  00F2               	movwf	clear@matrix44+1
  3498  029E  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3499  029F  1283               	bcf	3,5	;RP0=0, select bank0
  3500  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  3501  02A1  00DF               	movwf	??_main+1
  3502  02A2  085F               	movf	??_main+1,w
  3503  02A3  00F3               	movwf	clear@matrix88
  3504  02A4  1683               	bsf	3,5	;RP0=1, select bank1
  3505  02A5  1303               	bcf	3,6	;RP1=0, select bank1
  3506  02A6  086E               	movf	_cur_x^(0+128),w
  3507  02A7  160A  158A  25FF  120A  118A  	fcall	_clear
  3508                           
  3509                           ;teris_16f886.c: 1279: }
  3510                           ;teris_16f886.c: 1283: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3511                           
  3512                           ;teris_16f886.c: 1276: else
  3513                           ;teris_16f886.c: 1277: {
  3514                           ;teris_16f886.c: 1278: break;
  3515                           
  3516                           ;teris_16f886.c: 1275: }
  3517  02AC  301A               	movlw	26
  3518  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  3519  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  3520  02AF  00E0               	movwf	??_main+2
  3521  02B0  305E               	movlw	94
  3522  02B1  00DF               	movwf	??_main+1
  3523  02B2  3086               	movlw	134
  3524  02B3  00DE               	movwf	??_main
  3525  02B4                     u6777:	
  3526  02B4  0BDE               	decfsz	??_main,f
  3527  02B5  2AB4               	goto	u6777
  3528  02B6  0BDF               	decfsz	??_main+1,f
  3529  02B7  2AB4               	goto	u6777
  3530  02B8  0BE0               	decfsz	??_main+2,f
  3531  02B9  2AB4               	goto	u6777
  3532  02BA  0000               	nop
  3533                           
  3534                           ;teris_16f886.c: 1285: cur_y++;
  3535  02BB  3001               	movlw	1
  3536  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  3537  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  3538  02BE  00DE               	movwf	??_main
  3539  02BF  085E               	movf	??_main,w
  3540  02C0  07EA               	addwf	_cur_y,f
  3541  02C1  2A10               	goto	l5039
  3542  02C2                     __end_of_main:	
  3543                           ;teris_16f886.c: 1295: return 0;
  3544                           ;	Return value of _main is never used
  3545                           
  3546                           ;teris_16f886.c: 1286: }
  3547                           ;teris_16f886.c: 1287: }
  3548                           ;teris_16f886.c: 1288: __exit:
  3549                           
  3550                           
  3551                           	psect	text1
  3552  19AF                     __ptext1:	
  3553 ;; *************** function _srand *****************
  3554 ;; Defined at:
  3555 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;  x               2    0[COMMON] unsigned int 
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3569 ;;      Params:         2       0       0       0       0
  3570 ;;      Locals:         0       0       0       0       0
  3571 ;;      Temps:          0       0       0       0       0
  3572 ;;      Totals:         2       0       0       0       0
  3573 ;;Total ram usage:        2 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; This function calls:
  3576 ;;		Nothing
  3577 ;; This function is called by:
  3578 ;;		_main
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           
  3583                           ;psect for function _srand
  3584  19AF                     _srand:	
  3585                           
  3586                           ;incstack = 0
  3587                           ; Regs used in _srand: [wreg]
  3588  19AF  0870               	movf	srand@x,w
  3589  19B0  1683               	bsf	3,5	;RP0=1, select bank3
  3590  19B1  1703               	bsf	3,6	;RP1=1, select bank3
  3591  19B2  00D3               	movwf	_randx^(0+384)
  3592  19B3  0871               	movf	srand@x+1,w
  3593  19B4  00D4               	movwf	(_randx^(0+384)+1)
  3594  19B5  01D5               	clrf	(_randx^(0+384)+2)
  3595  19B6  01D6               	clrf	(_randx^(0+384)+3)
  3596  19B7  0008               	return
  3597  19B8                     __end_of_srand:	
  3598                           
  3599                           	psect	text2
  3600  1E9D                     __ptext2:	
  3601 ;; *************** function _merge *****************
  3602 ;; Defined at:
  3603 ;;		line 753 in file "teris_16f886.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;  x               1    wreg     char 
  3606 ;;  y               1    0[COMMON] char 
  3607 ;;  matrix44        2    1[COMMON] PTR const struct .
  3608 ;;		 -> NULL(0), g_matrix44(384), 
  3609 ;;  matrix88        1    3[COMMON] PTR struct .
  3610 ;;		 -> g_matrix88(64), 
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  x               1    8[COMMON] char 
  3613 ;;  col             1   10[COMMON] unsigned char 
  3614 ;;  row             1    9[COMMON] unsigned char 
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  1    wreg      void 
  3617 ;; Registers used:
  3618 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3624 ;;      Params:         4       0       0       0       0
  3625 ;;      Locals:         3       0       0       0       0
  3626 ;;      Temps:          4       0       0       0       0
  3627 ;;      Totals:        11       0       0       0       0
  3628 ;;Total ram usage:       11 bytes
  3629 ;; Hardware stack levels used:    2
  3630 ;; This function calls:
  3631 ;;		Nothing
  3632 ;; This function is called by:
  3633 ;;		_main
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           
  3638                           ;psect for function _merge
  3639  1E9D                     _merge:	
  3640                           
  3641                           ;incstack = 0
  3642                           ; Regs used in _merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3643                           ;merge@x stored from wreg
  3644  1E9D  00F8               	movwf	merge@x
  3645                           
  3646                           ;teris_16f886.c: 755: for(uint8_t row = 0; row < 4; row++)
  3647  1E9E  01F9               	clrf	merge@row
  3648  1E9F                     L1:	
  3649  1E9F  3004               	movlw	4
  3650  1EA0  0279               	subwf	merge@row,w
  3651  1EA1  1803               	btfsc	3,0
  3652  1EA2  0008               	return
  3653                           
  3654                           ;teris_16f886.c: 756: {
  3655                           ;teris_16f886.c: 757: for(uint8_t col = 0; col < 4; col++)
  3656  1EA3  01FA               	clrf	merge@col
  3657  1EA4  3004               	movlw	4
  3658  1EA5  027A               	subwf	merge@col,w
  3659  1EA6  1803               	btfsc	3,0
  3660  1EA7  2EE8               	goto	l4187
  3661  1EA8                     l4179:	
  3662                           
  3663                           ;teris_16f886.c: 758: {
  3664                           ;teris_16f886.c: 759: if(matrix44->data[row][col] == 1)
  3665  1EA8  0879               	movf	merge@row,w
  3666  1EA9  00F4               	movwf	??_merge
  3667  1EAA  01F5               	clrf	??_merge+1
  3668  1EAB  1003               	clrc
  3669  1EAC  0DF4               	rlf	??_merge,f
  3670  1EAD  0DF5               	rlf	??_merge+1,f
  3671  1EAE  1003               	clrc
  3672  1EAF  0DF4               	rlf	??_merge,f
  3673  1EB0  0DF5               	rlf	??_merge+1,f
  3674  1EB1  0874               	movf	??_merge,w
  3675  1EB2  0771               	addwf	merge@matrix44,w
  3676  1EB3  00F6               	movwf	??_merge+2
  3677  1EB4  0875               	movf	??_merge+1,w
  3678  1EB5  1803               	skipnc
  3679  1EB6  0A75               	incf	??_merge+1,w
  3680  1EB7  0772               	addwf	merge@matrix44+1,w
  3681  1EB8  00F7               	movwf	??_merge+3
  3682  1EB9  087A               	movf	merge@col,w
  3683  1EBA  0776               	addwf	??_merge+2,w
  3684  1EBB  0084               	movwf	4
  3685  1EBC  0877               	movf	??_merge+3,w
  3686  1EBD  1803               	skipnc
  3687  1EBE  0A77               	incf	??_merge+3,w
  3688  1EBF  1283               	bcf	3,5	;RP0=0, select bank0
  3689  1EC0  1303               	bcf	3,6	;RP1=0, select bank0
  3690  1EC1  00FF               	movwf	127
  3691  1EC2  120A  158A  2000  160A  158A  	fcall	stringtab
  3692  1EC7  3A01               	xorlw	1
  3693  1EC8  1D03               	skipz
  3694  1EC9  2EE0               	goto	l4183
  3695                           
  3696                           ;teris_16f886.c: 760: {
  3697                           ;teris_16f886.c: 761: matrix88->data[y + row][x + col] = 1;
  3698  1ECA  087A               	movf	merge@col,w
  3699  1ECB  0778               	addwf	merge@x,w
  3700  1ECC  0773               	addwf	merge@matrix88,w
  3701  1ECD  00F4               	movwf	??_merge
  3702  1ECE  0879               	movf	merge@row,w
  3703  1ECF  0770               	addwf	merge@y,w
  3704  1ED0  00F5               	movwf	??_merge+1
  3705  1ED1  3002               	movlw	2
  3706  1ED2                     u5775:	
  3707  1ED2  1003               	clrc
  3708  1ED3  0DF5               	rlf	??_merge+1,f
  3709  1ED4  3EFF               	addlw	-1
  3710  1ED5  1D03               	skipz
  3711  1ED6  2ED2               	goto	u5775
  3712  1ED7  1003               	clrc
  3713  1ED8  0D75               	rlf	??_merge+1,w
  3714  1ED9  0774               	addwf	??_merge,w
  3715  1EDA  00F6               	movwf	??_merge+2
  3716  1EDB  0876               	movf	??_merge+2,w
  3717  1EDC  0084               	movwf	4
  3718  1EDD  1783               	bsf	3,7	;select IRP bank2
  3719  1EDE  0180               	clrf	0
  3720  1EDF  0A80               	incf	0,f
  3721  1EE0                     l4183:	
  3722  1EE0  3001               	movlw	1
  3723  1EE1  00F4               	movwf	??_merge
  3724  1EE2  0874               	movf	??_merge,w
  3725  1EE3  07FA               	addwf	merge@col,f
  3726  1EE4  3004               	movlw	4
  3727  1EE5  027A               	subwf	merge@col,w
  3728  1EE6  1C03               	skipc
  3729  1EE7  2EA8               	goto	l4179
  3730  1EE8                     l4187:	
  3731  1EE8  3001               	movlw	1
  3732  1EE9  00F4               	movwf	??_merge
  3733  1EEA  0874               	movf	??_merge,w
  3734  1EEB  07F9               	addwf	merge@row,f
  3735  1EEC  2E9F               	goto	L1
  3736  1EED                     __end_of_merge:	
  3737                           
  3738                           	psect	text3
  3739  1269                     __ptext3:	
  3740 ;; *************** function _hit_land *****************
  3741 ;; Defined at:
  3742 ;;		line 620 in file "teris_16f886.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  x               1    wreg     char 
  3745 ;;  y               1   37[BANK0 ] char 
  3746 ;;  matrix44        2   38[BANK0 ] PTR const struct .
  3747 ;;		 -> NULL(0), g_matrix44(384), 
  3748 ;;  matrix88        1   40[BANK0 ] PTR const struct .
  3749 ;;		 -> g_matrix88(64), 
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;  x               1   45[BANK0 ] char 
  3752 ;;  col             1   46[BANK0 ] char 
  3753 ;;  row             1   47[BANK0 ] char 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      unsigned char 
  3756 ;; Registers used:
  3757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3763 ;;      Params:         0       4       0       0       0
  3764 ;;      Locals:         0       3       0       0       0
  3765 ;;      Temps:          0       4       0       0       0
  3766 ;;      Totals:         0      11       0       0       0
  3767 ;;Total ram usage:       11 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    3
  3770 ;; This function calls:
  3771 ;;		_debug_int2
  3772 ;;		_debug_line
  3773 ;; This function is called by:
  3774 ;;		_main
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           
  3779                           ;psect for function _hit_land
  3780  1269                     _hit_land:	
  3781                           
  3782                           ;incstack = 0
  3783                           ; Regs used in _hit_land: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3784                           ;hit_land@x stored from wreg
  3785  1269  1283               	bcf	3,5	;RP0=0, select bank0
  3786  126A  1303               	bcf	3,6	;RP1=0, select bank0
  3787  126B  00CD               	movwf	hit_land@x
  3788                           
  3789                           ;teris_16f886.c: 622: debug_line("==============hit_land============");
  3790  126C  30C6               	movlw	low (STR_23| (0+32768))
  3791  126D  00F3               	movwf	debug_line@str
  3792  126E  308B               	movlw	high (STR_23| (0+32768))
  3793  126F  00F4               	movwf	debug_line@str+1
  3794  1270  160A  158A  21D7  160A  118A  	fcall	_debug_line
  3795                           
  3796                           ;teris_16f886.c: 624: for(int8_t row = 4 - 1; row >= 0; row--)
  3797  1275  3003               	movlw	3
  3798  1276  1283               	bcf	3,5	;RP0=0, select bank0
  3799  1277  1303               	bcf	3,6	;RP1=0, select bank0
  3800  1278  00C9               	movwf	??_hit_land
  3801  1279  0849               	movf	??_hit_land,w
  3802  127A  00CF               	movwf	hit_land@row
  3803  127B  1BCF               	btfsc	hit_land@row,7
  3804  127C  2B0D               	goto	l4137
  3805  127D                     l4105:	
  3806                           
  3807                           ;teris_16f886.c: 625: {
  3808                           ;teris_16f886.c: 626: for(int8_t col = 0; col < 4; col++)
  3809  127D  01CE               	clrf	hit_land@col
  3810  127E  084E               	movf	hit_land@col,w
  3811  127F  3A80               	xorlw	128
  3812  1280  3E7C               	addlw	-132
  3813  1281  1803               	btfsc	3,0
  3814  1282  2B07               	goto	l4133
  3815  1283                     l4111:	
  3816                           
  3817                           ;teris_16f886.c: 627: {
  3818                           ;teris_16f886.c: 628: if(matrix44->data[row][col] == 1)
  3819  1283  084F               	movf	hit_land@row,w
  3820  1284  00C9               	movwf	??_hit_land
  3821  1285  01CA               	clrf	??_hit_land+1
  3822  1286  1003               	clrc
  3823  1287  0DC9               	rlf	??_hit_land,f
  3824  1288  0DCA               	rlf	??_hit_land+1,f
  3825  1289  1003               	clrc
  3826  128A  0DC9               	rlf	??_hit_land,f
  3827  128B  0DCA               	rlf	??_hit_land+1,f
  3828  128C  0849               	movf	??_hit_land,w
  3829  128D  0746               	addwf	hit_land@matrix44,w
  3830  128E  00CB               	movwf	??_hit_land+2
  3831  128F  084A               	movf	??_hit_land+1,w
  3832  1290  1803               	skipnc
  3833  1291  0A4A               	incf	??_hit_land+1,w
  3834  1292  0747               	addwf	hit_land@matrix44+1,w
  3835  1293  00CC               	movwf	??_hit_land+3
  3836  1294  084E               	movf	hit_land@col,w
  3837  1295  074B               	addwf	??_hit_land+2,w
  3838  1296  0084               	movwf	4
  3839  1297  084C               	movf	??_hit_land+3,w
  3840  1298  1803               	skipnc
  3841  1299  0A4C               	incf	??_hit_land+3,w
  3842  129A  00FF               	movwf	127
  3843  129B  120A  158A  2000  160A  118A  	fcall	stringtab
  3844  12A0  3A01               	xorlw	1
  3845  12A1  1D03               	skipz
  3846  12A2  2AFC               	goto	l4129
  3847                           
  3848                           ;teris_16f886.c: 629: {
  3849                           ;teris_16f886.c: 630: if((y + row) >= (8 - 1))
  3850  12A3  0845               	movf	hit_land@y,w
  3851  12A4  074F               	addwf	hit_land@row,w
  3852  12A5  00C9               	movwf	??_hit_land
  3853  12A6  01CA               	clrf	??_hit_land+1
  3854  12A7  1803               	skipnc
  3855  12A8  0ACA               	incf	??_hit_land+1,f
  3856  12A9  1BC5               	btfsc	hit_land@y,7
  3857  12AA  03CA               	decf	??_hit_land+1,f
  3858  12AB  1BCF               	btfsc	hit_land@row,7
  3859  12AC  03CA               	decf	??_hit_land+1,f
  3860  12AD  1283               	bcf	3,5	;RP0=0, select bank0
  3861  12AE  1303               	bcf	3,6	;RP1=0, select bank0
  3862  12AF  084A               	movf	??_hit_land+1,w
  3863  12B0  3A80               	xorlw	128
  3864  12B1  00FF               	movwf	127
  3865  12B2  3080               	movlw	128
  3866  12B3  027F               	subwf	127,w
  3867  12B4  1D03               	skipz
  3868  12B5  2AB8               	goto	u5635
  3869  12B6  3007               	movlw	7
  3870  12B7  0249               	subwf	??_hit_land,w
  3871  12B8                     u5635:	
  3872  12B8  1C03               	skipc
  3873  12B9  2ACF               	goto	l4121
  3874                           
  3875                           ;teris_16f886.c: 631: {
  3876                           ;teris_16f886.c: 632: debug_int2("hit1 row = %d, col = %d", row, col);
  3877  12BA  3021               	movlw	low (STR_24| (0+32768))
  3878  12BB  1283               	bcf	3,5	;RP0=0, select bank0
  3879  12BC  1303               	bcf	3,6	;RP1=0, select bank0
  3880  12BD  00BF               	movwf	debug_int2@f
  3881  12BE  308D               	movlw	high (STR_24| (0+32768))
  3882  12BF  00C0               	movwf	debug_int2@f+1
  3883  12C0  084F               	movf	hit_land@row,w
  3884  12C1  00C1               	movwf	debug_int2@i1
  3885  12C2  01C2               	clrf	debug_int2@i1+1
  3886  12C3  1BC1               	btfsc	debug_int2@i1,7
  3887  12C4  03C2               	decf	debug_int2@i1+1,f
  3888  12C5  084E               	movf	hit_land@col,w
  3889  12C6  00C3               	movwf	debug_int2@i2
  3890  12C7  01C4               	clrf	debug_int2@i2+1
  3891  12C8  1BC3               	btfsc	debug_int2@i2,7
  3892  12C9  03C4               	decf	debug_int2@i2+1,f
  3893  12CA  160A  158A  22DA   	fcall	_debug_int2
  3894                           
  3895                           ;teris_16f886.c: 633: return 1;
  3896  12CD  3001               	movlw	1
  3897  12CE  0008               	return
  3898  12CF                     l4121:	
  3899                           
  3900                           ;teris_16f886.c: 634: }
  3901                           ;teris_16f886.c: 636: if(matrix88->data[y + row + 1][x + col] == 1)
  3902  12CF  1283               	bcf	3,5	;RP0=0, select bank0
  3903  12D0  1303               	bcf	3,6	;RP1=0, select bank0
  3904  12D1  084E               	movf	hit_land@col,w
  3905  12D2  074D               	addwf	hit_land@x,w
  3906  12D3  0748               	addwf	hit_land@matrix88,w
  3907  12D4  00C9               	movwf	??_hit_land
  3908  12D5  084F               	movf	hit_land@row,w
  3909  12D6  0745               	addwf	hit_land@y,w
  3910  12D7  00CA               	movwf	??_hit_land+1
  3911  12D8  3002               	movlw	2
  3912  12D9                     u5645:	
  3913  12D9  1003               	clrc
  3914  12DA  0DCA               	rlf	??_hit_land+1,f
  3915  12DB  3EFF               	addlw	-1
  3916  12DC  1D03               	skipz
  3917  12DD  2AD9               	goto	u5645
  3918  12DE  1003               	clrc
  3919  12DF  0D4A               	rlf	??_hit_land+1,w
  3920  12E0  3E08               	addlw	8
  3921  12E1  0749               	addwf	??_hit_land,w
  3922  12E2  00CB               	movwf	??_hit_land+2
  3923  12E3  084B               	movf	??_hit_land+2,w
  3924  12E4  0084               	movwf	4
  3925  12E5  1783               	bsf	3,7	;select IRP bank2
  3926  12E6  0300               	decf	0,w
  3927  12E7  1D03               	btfss	3,2
  3928  12E8  2AFC               	goto	l4129
  3929                           
  3930                           ;teris_16f886.c: 637: {
  3931                           ;teris_16f886.c: 638: debug_int2("hit2 row = %d, col = %d", row, col);
  3932  12E9  3039               	movlw	low (STR_25| (0+32768))
  3933  12EA  00BF               	movwf	debug_int2@f
  3934  12EB  308D               	movlw	high (STR_25| (0+32768))
  3935  12EC  00C0               	movwf	debug_int2@f+1
  3936  12ED  084F               	movf	hit_land@row,w
  3937  12EE  00C1               	movwf	debug_int2@i1
  3938  12EF  01C2               	clrf	debug_int2@i1+1
  3939  12F0  1BC1               	btfsc	debug_int2@i1,7
  3940  12F1  03C2               	decf	debug_int2@i1+1,f
  3941  12F2  084E               	movf	hit_land@col,w
  3942  12F3  00C3               	movwf	debug_int2@i2
  3943  12F4  01C4               	clrf	debug_int2@i2+1
  3944  12F5  1BC3               	btfsc	debug_int2@i2,7
  3945  12F6  03C4               	decf	debug_int2@i2+1,f
  3946  12F7  160A  158A  22DA   	fcall	_debug_int2
  3947                           
  3948                           ;teris_16f886.c: 639: return 1;
  3949  12FA  3001               	movlw	1
  3950  12FB  0008               	return
  3951  12FC                     l4129:	
  3952  12FC  3001               	movlw	1
  3953  12FD  1283               	bcf	3,5	;RP0=0, select bank0
  3954  12FE  1303               	bcf	3,6	;RP1=0, select bank0
  3955  12FF  00C9               	movwf	??_hit_land
  3956  1300  0849               	movf	??_hit_land,w
  3957  1301  07CE               	addwf	hit_land@col,f
  3958  1302  084E               	movf	hit_land@col,w
  3959  1303  3A80               	xorlw	128
  3960  1304  3E7C               	addlw	-132
  3961  1305  1C03               	skipc
  3962  1306  2A83               	goto	l4111
  3963  1307                     l4133:	
  3964  1307  30FF               	movlw	255
  3965  1308  00C9               	movwf	??_hit_land
  3966  1309  0849               	movf	??_hit_land,w
  3967  130A  07CF               	addwf	hit_land@row,f
  3968  130B  1FCF               	btfss	hit_land@row,7
  3969  130C  2A7D               	goto	l4105
  3970  130D                     l4137:	
  3971                           
  3972                           ;teris_16f886.c: 640: }
  3973                           ;teris_16f886.c: 641: }
  3974                           ;teris_16f886.c: 642: }
  3975                           ;teris_16f886.c: 643: }
  3976                           ;teris_16f886.c: 644: debug_line("not hit");
  3977  130D  3059               	movlw	low (STR_26| (0+32768))
  3978  130E  00F3               	movwf	debug_line@str
  3979  130F  308E               	movlw	high (STR_26| (0+32768))
  3980  1310  00F4               	movwf	debug_line@str+1
  3981  1311  160A  158A  21D7   	fcall	_debug_line
  3982                           
  3983                           ;teris_16f886.c: 645: return 0;
  3984  1314  3000               	movlw	0
  3985  1315  0008               	return
  3986  1316                     __end_of_hit_land:	
  3987                           
  3988                           	psect	text4
  3989  13FE                     __ptext4:	
  3990 ;; *************** function _find_best_solution *****************
  3991 ;; Defined at:
  3992 ;;		line 946 in file "teris_16f886.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;		None
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;  temp_x          1   72[BANK1 ] char 
  3997 ;;  tem_sub_inde    1   71[BANK1 ] unsigned char 
  3998 ;;  temp_matrix8   64    5[BANK1 ] struct .
  3999 ;;  temp_cur_mat    2   69[BANK1 ] PTR struct .
  4000 ;;		 -> g_matrix44(384), 
  4001 ;;  res             1    4[BANK1 ] unsigned char 
  4002 ;;  right_most_i    1    3[BANK1 ] char 
  4003 ;;  left_most_in    1    2[BANK1 ] char 
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  1    wreg      unsigned char 
  4006 ;; Registers used:
  4007 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4013 ;;      Params:         0       0       0       0       0
  4014 ;;      Locals:         0       0      73       0       0
  4015 ;;      Temps:          0       7       0       0       0
  4016 ;;      Totals:         0       7      73       0       0
  4017 ;;Total ram usage:       80 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    5
  4020 ;; This function calls:
  4021 ;;		___bmul
  4022 ;;		_debug_int1
  4023 ;;		_debug_int2
  4024 ;;		_debug_line
  4025 ;;		_delete_matrix
  4026 ;;		_evaluate
  4027 ;;		_fall_off
  4028 ;;		_get_high
  4029 ;;		_get_high_after_merge
  4030 ;;		_get_holes_after_merge
  4031 ;;		_is_valid
  4032 ;;		_left_most
  4033 ;;		_merge1
  4034 ;;		_printf_console_MATRIX44
  4035 ;;		_printf_console_MATRIX88
  4036 ;;		_printf_console_Screen
  4037 ;;		_printf_console_cur_MATRIX44
  4038 ;;		_right_most
  4039 ;; This function is called by:
  4040 ;;		_main
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           
  4045                           ;psect for function _find_best_solution
  4046  13FE                     _find_best_solution:	
  4047                           
  4048                           ;teris_16f886.c: 948: debug_line("==============find_best_solution============");
  4049                           
  4050                           ;incstack = 0
  4051                           ; Regs used in _find_best_solution: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4052  13FE  30E4               	movlw	low (STR_43| (0+32768))
  4053  13FF  00F3               	movwf	debug_line@str
  4054  1400  3089               	movlw	high (STR_43| (0+32768))
  4055  1401  00F4               	movwf	debug_line@str+1
  4056  1402  160A  158A  21D7  160A  118A  	fcall	_debug_line
  4057                           
  4058                           ;teris_16f886.c: 949: MATRIX44* temp_cur_matrix44;
  4059                           ;teris_16f886.c: 950: MATRIX88 temp_matrix88;
  4060                           ;teris_16f886.c: 951: uint8_t res = 0;
  4061  1407  1683               	bsf	3,5	;RP0=1, select bank1
  4062  1408  1303               	bcf	3,6	;RP1=0, select bank1
  4063  1409  01A4               	clrf	find_best_solution@res^(0+128)
  4064                           
  4065                           ;teris_16f886.c: 952: int8_t left_most_index, right_most_index;
  4066                           ;teris_16f886.c: 954: debug_int2("g_char_info_index = (%d), num = %d\n", g_char_info_ind
      +                          ex, g_char_info[g_char_info_index].num);
  4067  140A  3003               	movlw	3
  4068  140B  1283               	bcf	3,5	;RP0=0, select bank0
  4069  140C  1303               	bcf	3,6	;RP1=0, select bank0
  4070  140D  00D3               	movwf	??_find_best_solution
  4071  140E  0853               	movf	??_find_best_solution,w
  4072  140F  00F0               	movwf	___bmul@multiplicand
  4073  1410  086B               	movf	_g_char_info_index,w
  4074  1411  160A  158A  21C6  160A  118A  	fcall	___bmul
  4075  1416  3E02               	addlw	2
  4076  1417  3EB8               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4077  1418  0084               	movwf	4
  4078  1419  1783               	bsf	3,7	;select IRP bank3
  4079  141A  0800               	movf	0,w
  4080  141B  1283               	bcf	3,5	;RP0=0, select bank0
  4081  141C  1303               	bcf	3,6	;RP1=0, select bank0
  4082  141D  00D4               	movwf	??_find_best_solution+1
  4083  141E  01D5               	clrf	??_find_best_solution+2
  4084  141F  0854               	movf	??_find_best_solution+1,w
  4085  1420  1683               	bsf	3,5	;RP0=1, select bank1
  4086  1421  1303               	bcf	3,6	;RP1=0, select bank1
  4087  1422  00A0               	movwf	_find_best_solution$1184^(0+128)
  4088  1423  1283               	bcf	3,5	;RP0=0, select bank0
  4089  1424  1303               	bcf	3,6	;RP1=0, select bank0
  4090  1425  0855               	movf	??_find_best_solution+2,w
  4091  1426  1683               	bsf	3,5	;RP0=1, select bank1
  4092  1427  1303               	bcf	3,6	;RP1=0, select bank1
  4093  1428  00A1               	movwf	(_find_best_solution$1184+1)^(0+128)
  4094                           
  4095                           ;teris_16f886.c: 952: int8_t left_most_index, right_most_index;
  4096                           ;teris_16f886.c: 954: debug_int2("g_char_info_index = (%d), num = %d\n", g_char_info_ind
      +                          ex, g_char_info[g_char_info_index].num);
  4097  1429  3016               	movlw	low (STR_44| (0+32768))
  4098  142A  1283               	bcf	3,5	;RP0=0, select bank0
  4099  142B  1303               	bcf	3,6	;RP1=0, select bank0
  4100  142C  00BF               	movwf	debug_int2@f
  4101  142D  308B               	movlw	high (STR_44| (0+32768))
  4102  142E  00C0               	movwf	debug_int2@f+1
  4103  142F  086B               	movf	_g_char_info_index,w
  4104  1430  00D3               	movwf	??_find_best_solution
  4105  1431  01D4               	clrf	??_find_best_solution+1
  4106  1432  0853               	movf	??_find_best_solution,w
  4107  1433  00C1               	movwf	debug_int2@i1
  4108  1434  0854               	movf	??_find_best_solution+1,w
  4109  1435  00C2               	movwf	debug_int2@i1+1
  4110  1436  1683               	bsf	3,5	;RP0=1, select bank1
  4111  1437  1303               	bcf	3,6	;RP1=0, select bank1
  4112  1438  0821               	movf	(_find_best_solution$1184+1)^(0+128),w
  4113  1439  1283               	bcf	3,5	;RP0=0, select bank0
  4114  143A  1303               	bcf	3,6	;RP1=0, select bank0
  4115  143B  00C4               	movwf	debug_int2@i2+1
  4116  143C  1683               	bsf	3,5	;RP0=1, select bank1
  4117  143D  1303               	bcf	3,6	;RP1=0, select bank1
  4118  143E  0820               	movf	_find_best_solution$1184^(0+128),w
  4119  143F  1283               	bcf	3,5	;RP0=0, select bank0
  4120  1440  1303               	bcf	3,6	;RP1=0, select bank0
  4121  1441  00C3               	movwf	debug_int2@i2
  4122  1442  160A  158A  22DA  160A  118A  	fcall	_debug_int2
  4123                           
  4124                           ;teris_16f886.c: 955: for(uint8_t tem_sub_index = 0; tem_sub_index < g_char_info[g_char_
      +                          info_index].num; tem_sub_index++)
  4125  1447  1683               	bsf	3,5	;RP0=1, select bank1
  4126  1448  1303               	bcf	3,6	;RP1=0, select bank1
  4127  1449  01E7               	clrf	find_best_solution@tem_sub_index^(0+128)
  4128  144A                     l4999:	
  4129  144A  3003               	movlw	3
  4130  144B  1283               	bcf	3,5	;RP0=0, select bank0
  4131  144C  1303               	bcf	3,6	;RP1=0, select bank0
  4132  144D  00D3               	movwf	??_find_best_solution
  4133  144E  0853               	movf	??_find_best_solution,w
  4134  144F  00F0               	movwf	___bmul@multiplicand
  4135  1450  086B               	movf	_g_char_info_index,w
  4136  1451  160A  158A  21C6  160A  118A  	fcall	___bmul
  4137  1456  3E02               	addlw	2
  4138  1457  3EB8               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4139  1458  0084               	movwf	4
  4140  1459  1783               	bsf	3,7	;select IRP bank3
  4141  145A  0800               	movf	0,w
  4142  145B  1683               	bsf	3,5	;RP0=1, select bank1
  4143  145C  1303               	bcf	3,6	;RP1=0, select bank1
  4144  145D  0267               	subwf	find_best_solution@tem_sub_index^(0+128),w
  4145  145E  1803               	btfsc	3,0
  4146  145F  2FC1               	goto	l5001
  4147                           
  4148                           ;teris_16f886.c: 956: {
  4149                           ;teris_16f886.c: 957: temp_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].sta
      +                          rt_index + tem_sub_index];
  4150  1460  3003               	movlw	3
  4151  1461  1283               	bcf	3,5	;RP0=0, select bank0
  4152  1462  1303               	bcf	3,6	;RP1=0, select bank0
  4153  1463  00D3               	movwf	??_find_best_solution
  4154  1464  0853               	movf	??_find_best_solution,w
  4155  1465  00F0               	movwf	___bmul@multiplicand
  4156  1466  086B               	movf	_g_char_info_index,w
  4157  1467  160A  158A  21C6  160A  118A  	fcall	___bmul
  4158  146C  3EB8               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4159  146D  0084               	movwf	4
  4160  146E  1783               	bsf	3,7	;select IRP bank3
  4161  146F  0800               	movf	0,w
  4162  1470  1683               	bsf	3,5	;RP0=1, select bank1
  4163  1471  1303               	bcf	3,6	;RP1=0, select bank1
  4164  1472  0767               	addwf	find_best_solution@tem_sub_index^(0+128),w
  4165  1473  1283               	bcf	3,5	;RP0=0, select bank0
  4166  1474  1303               	bcf	3,6	;RP1=0, select bank0
  4167  1475  00D4               	movwf	??_find_best_solution+1
  4168  1476  01D5               	clrf	??_find_best_solution+2
  4169  1477  0DD5               	rlf	??_find_best_solution+2,f
  4170  1478  0ED4               	swapf	??_find_best_solution+1,f
  4171  1479  0ED5               	swapf	??_find_best_solution+2,f
  4172  147A  30F0               	movlw	240
  4173  147B  05D5               	andwf	??_find_best_solution+2,f
  4174  147C  0854               	movf	??_find_best_solution+1,w
  4175  147D  390F               	andlw	15
  4176  147E  04D5               	iorwf	??_find_best_solution+2,f
  4177  147F  30F0               	movlw	240
  4178  1480  05D4               	andwf	??_find_best_solution+1,f
  4179  1481  3030               	movlw	low (_g_matrix44| (0+32768))
  4180  1482  00D6               	movwf	??_find_best_solution+3
  4181  1483  3088               	movlw	high (_g_matrix44| (0+32768))
  4182  1484  00D7               	movwf	??_find_best_solution+4
  4183  1485  0854               	movf	??_find_best_solution+1,w
  4184  1486  0756               	addwf	??_find_best_solution+3,w
  4185  1487  00D8               	movwf	??_find_best_solution+5
  4186  1488  0855               	movf	??_find_best_solution+2,w
  4187  1489  1803               	skipnc
  4188  148A  0A55               	incf	??_find_best_solution+2,w
  4189  148B  0757               	addwf	??_find_best_solution+4,w
  4190  148C  00D9               	movwf	??_find_best_solution+6
  4191  148D  0858               	movf	??_find_best_solution+5,w
  4192  148E  1683               	bsf	3,5	;RP0=1, select bank1
  4193  148F  1303               	bcf	3,6	;RP1=0, select bank1
  4194  1490  00E5               	movwf	find_best_solution@temp_cur_matrix44^(0+128)
  4195  1491  1283               	bcf	3,5	;RP0=0, select bank0
  4196  1492  1303               	bcf	3,6	;RP1=0, select bank0
  4197  1493  0859               	movf	??_find_best_solution+6,w
  4198  1494  1683               	bsf	3,5	;RP0=1, select bank1
  4199  1495  1303               	bcf	3,6	;RP1=0, select bank1
  4200  1496  00E6               	movwf	(find_best_solution@temp_cur_matrix44+1)^(0+128)
  4201                           
  4202                           ;teris_16f886.c: 958: left_most_index = left_most(cur_x, temp_cur_matrix44, &g_matrix88)
      +                          ;
  4203  1497  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4204  1498  1283               	bcf	3,5	;RP0=0, select bank0
  4205  1499  1303               	bcf	3,6	;RP1=0, select bank0
  4206  149A  00C3               	movwf	left_most@matrix44
  4207  149B  1683               	bsf	3,5	;RP0=1, select bank1
  4208  149C  1303               	bcf	3,6	;RP1=0, select bank1
  4209  149D  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4210  149E  1283               	bcf	3,5	;RP0=0, select bank0
  4211  149F  1303               	bcf	3,6	;RP1=0, select bank0
  4212  14A0  00C4               	movwf	left_most@matrix44+1
  4213  14A1  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4214  14A2  00D3               	movwf	??_find_best_solution
  4215  14A3  0853               	movf	??_find_best_solution,w
  4216  14A4  00C5               	movwf	left_most@matrix88
  4217  14A5  1683               	bsf	3,5	;RP0=1, select bank1
  4218  14A6  1303               	bcf	3,6	;RP1=0, select bank1
  4219  14A7  086E               	movf	_cur_x^(0+128),w
  4220  14A8  160A  158A  237F  160A  118A  	fcall	_left_most
  4221  14AD  1283               	bcf	3,5	;RP0=0, select bank0
  4222  14AE  1303               	bcf	3,6	;RP1=0, select bank0
  4223  14AF  00D4               	movwf	??_find_best_solution+1
  4224  14B0  0854               	movf	??_find_best_solution+1,w
  4225  14B1  1683               	bsf	3,5	;RP0=1, select bank1
  4226  14B2  1303               	bcf	3,6	;RP1=0, select bank1
  4227  14B3  00A2               	movwf	find_best_solution@left_most_index^(0+128)
  4228                           
  4229                           ;teris_16f886.c: 959: right_most_index = right_most(cur_x, temp_cur_matrix44, &g_matrix8
      +                          8);
  4230  14B4  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4231  14B5  1283               	bcf	3,5	;RP0=0, select bank0
  4232  14B6  1303               	bcf	3,6	;RP1=0, select bank0
  4233  14B7  00C3               	movwf	right_most@matrix44
  4234  14B8  1683               	bsf	3,5	;RP0=1, select bank1
  4235  14B9  1303               	bcf	3,6	;RP1=0, select bank1
  4236  14BA  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4237  14BB  1283               	bcf	3,5	;RP0=0, select bank0
  4238  14BC  1303               	bcf	3,6	;RP1=0, select bank0
  4239  14BD  00C4               	movwf	right_most@matrix44+1
  4240  14BE  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4241  14BF  00D3               	movwf	??_find_best_solution
  4242  14C0  0853               	movf	??_find_best_solution,w
  4243  14C1  00C5               	movwf	right_most@matrix88
  4244  14C2  1683               	bsf	3,5	;RP0=1, select bank1
  4245  14C3  1303               	bcf	3,6	;RP1=0, select bank1
  4246  14C4  086E               	movf	_cur_x^(0+128),w
  4247  14C5  160A  158A  23E2  160A  118A  	fcall	_right_most
  4248  14CA  1283               	bcf	3,5	;RP0=0, select bank0
  4249  14CB  1303               	bcf	3,6	;RP1=0, select bank0
  4250  14CC  00D4               	movwf	??_find_best_solution+1
  4251  14CD  0854               	movf	??_find_best_solution+1,w
  4252  14CE  1683               	bsf	3,5	;RP0=1, select bank1
  4253  14CF  1303               	bcf	3,6	;RP1=0, select bank1
  4254  14D0  00A3               	movwf	find_best_solution@right_most_index^(0+128)
  4255                           
  4256                           ;teris_16f886.c: 961: for(int8_t temp_x = left_most_index; temp_x <= right_most_index; t
      +                          emp_x++)
  4257  14D1  0822               	movf	find_best_solution@left_most_index^(0+128),w
  4258  14D2  1283               	bcf	3,5	;RP0=0, select bank0
  4259  14D3  1303               	bcf	3,6	;RP1=0, select bank0
  4260  14D4  00D3               	movwf	??_find_best_solution
  4261  14D5  0853               	movf	??_find_best_solution,w
  4262  14D6  1683               	bsf	3,5	;RP0=1, select bank1
  4263  14D7  1303               	bcf	3,6	;RP1=0, select bank1
  4264  14D8  00E8               	movwf	find_best_solution@temp_x^(0+128)
  4265  14D9                     l4995:	
  4266  14D9  0823               	movf	find_best_solution@right_most_index^(0+128),w
  4267  14DA  3A80               	xorlw	128
  4268  14DB  1283               	bcf	3,5	;RP0=0, select bank0
  4269  14DC  1303               	bcf	3,6	;RP1=0, select bank0
  4270  14DD  00D3               	movwf	??_find_best_solution
  4271  14DE  1683               	bsf	3,5	;RP0=1, select bank1
  4272  14DF  1303               	bcf	3,6	;RP1=0, select bank1
  4273  14E0  0868               	movf	find_best_solution@temp_x^(0+128),w
  4274  14E1  3A80               	xorlw	128
  4275  14E2  1283               	bcf	3,5	;RP0=0, select bank0
  4276  14E3  1303               	bcf	3,6	;RP1=0, select bank0
  4277  14E4  02D3               	subwf	??_find_best_solution,f
  4278  14E5  1C03               	btfss	3,0
  4279  14E6  2FBA               	goto	l4997
  4280                           
  4281                           ;teris_16f886.c: 962: {
  4282                           ;teris_16f886.c: 963: temp_y = fall_off(temp_x, cur_y, temp_cur_matrix44, &g_matrix88);
  4283  14E7  1283               	bcf	3,5	;RP0=0, select bank0
  4284  14E8  086A               	movf	_cur_y,w
  4285  14E9  00D3               	movwf	??_find_best_solution
  4286  14EA  0853               	movf	??_find_best_solution,w
  4287  14EB  00C5               	movwf	fall_off@y
  4288  14EC  1683               	bsf	3,5	;RP0=1, select bank1
  4289  14ED  1303               	bcf	3,6	;RP1=0, select bank1
  4290  14EE  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4291  14EF  1283               	bcf	3,5	;RP0=0, select bank0
  4292  14F0  1303               	bcf	3,6	;RP1=0, select bank0
  4293  14F1  00C6               	movwf	fall_off@matrix44
  4294  14F2  1683               	bsf	3,5	;RP0=1, select bank1
  4295  14F3  1303               	bcf	3,6	;RP1=0, select bank1
  4296  14F4  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4297  14F5  1283               	bcf	3,5	;RP0=0, select bank0
  4298  14F6  1303               	bcf	3,6	;RP1=0, select bank0
  4299  14F7  00C7               	movwf	fall_off@matrix44+1
  4300  14F8  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4301  14F9  00D4               	movwf	??_find_best_solution+1
  4302  14FA  0854               	movf	??_find_best_solution+1,w
  4303  14FB  00C8               	movwf	fall_off@matrix88
  4304  14FC  1683               	bsf	3,5	;RP0=1, select bank1
  4305  14FD  1303               	bcf	3,6	;RP1=0, select bank1
  4306  14FE  0868               	movf	find_best_solution@temp_x^(0+128),w
  4307  14FF  160A  118A  21C9  160A  118A  	fcall	_fall_off
  4308  1504  1283               	bcf	3,5	;RP0=0, select bank0
  4309  1505  1303               	bcf	3,6	;RP1=0, select bank0
  4310  1506  00D5               	movwf	??_find_best_solution+2
  4311  1507  0855               	movf	??_find_best_solution+2,w
  4312  1508  00EC               	movwf	_temp_y
  4313                           
  4314                           ;teris_16f886.c: 965: printf_console_MATRIX44(temp_x, temp_y, temp_cur_matrix44);
  4315  1509  086C               	movf	_temp_y,w
  4316  150A  00D3               	movwf	??_find_best_solution
  4317  150B  0853               	movf	??_find_best_solution,w
  4318  150C  00F5               	movwf	printf_console_MATRIX44@y
  4319  150D  1683               	bsf	3,5	;RP0=1, select bank1
  4320  150E  1303               	bcf	3,6	;RP1=0, select bank1
  4321  150F  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4322  1510  00F6               	movwf	printf_console_MATRIX44@matrix
  4323  1511  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4324  1512  00F7               	movwf	printf_console_MATRIX44@matrix+1
  4325  1513  0868               	movf	find_best_solution@temp_x^(0+128),w
  4326  1514  120A  158A  2701  160A  118A  	fcall	_printf_console_MATRIX44
  4327                           
  4328                           ;teris_16f886.c: 966: printf_console_Screen();
  4329  1519  160A  158A  219F  160A  118A  	fcall	_printf_console_Screen
  4330                           
  4331                           ;teris_16f886.c: 968: if(is_valid(temp_x, temp_y, temp_cur_matrix44, &g_matrix88) == 0)
  4332  151E  1283               	bcf	3,5	;RP0=0, select bank0
  4333  151F  1303               	bcf	3,6	;RP1=0, select bank0
  4334  1520  086C               	movf	_temp_y,w
  4335  1521  00D3               	movwf	??_find_best_solution
  4336  1522  0853               	movf	??_find_best_solution,w
  4337  1523  00C5               	movwf	is_valid@y
  4338  1524  1683               	bsf	3,5	;RP0=1, select bank1
  4339  1525  1303               	bcf	3,6	;RP1=0, select bank1
  4340  1526  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4341  1527  1283               	bcf	3,5	;RP0=0, select bank0
  4342  1528  1303               	bcf	3,6	;RP1=0, select bank0
  4343  1529  00C6               	movwf	is_valid@matrix44
  4344  152A  1683               	bsf	3,5	;RP0=1, select bank1
  4345  152B  1303               	bcf	3,6	;RP1=0, select bank1
  4346  152C  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4347  152D  1283               	bcf	3,5	;RP0=0, select bank0
  4348  152E  1303               	bcf	3,6	;RP1=0, select bank0
  4349  152F  00C7               	movwf	is_valid@matrix44+1
  4350  1530  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4351  1531  00D4               	movwf	??_find_best_solution+1
  4352  1532  0854               	movf	??_find_best_solution+1,w
  4353  1533  00C8               	movwf	is_valid@matrix88
  4354  1534  1683               	bsf	3,5	;RP0=1, select bank1
  4355  1535  1303               	bcf	3,6	;RP1=0, select bank1
  4356  1536  0868               	movf	find_best_solution@temp_x^(0+128),w
  4357  1537  160A  118A  2316  160A  118A  	fcall	_is_valid
  4358  153C  3A00               	xorlw	0
  4359  153D  1903               	btfsc	3,2
  4360  153E  2FB1               	goto	l4993
  4361                           
  4362                           ;teris_16f886.c: 971: }
  4363                           ;teris_16f886.c: 972: res = 1;
  4364                           
  4365                           ;teris_16f886.c: 969: {
  4366                           ;teris_16f886.c: 970: continue;
  4367  153F  1683               	bsf	3,5	;RP0=1, select bank1
  4368  1540  1303               	bcf	3,6	;RP1=0, select bank1
  4369  1541  01A4               	clrf	find_best_solution@res^(0+128)
  4370  1542  0AA4               	incf	find_best_solution@res^(0+128),f
  4371                           
  4372                           ;teris_16f886.c: 973: merge1(temp_x, temp_y, temp_cur_matrix44, &g_matrix88, &temp_matri
      +                          x88);
  4373  1543  1283               	bcf	3,5	;RP0=0, select bank0
  4374  1544  1303               	bcf	3,6	;RP1=0, select bank0
  4375  1545  086C               	movf	_temp_y,w
  4376  1546  00D3               	movwf	??_find_best_solution
  4377  1547  0853               	movf	??_find_best_solution,w
  4378  1548  00A0               	movwf	merge1@y
  4379  1549  1683               	bsf	3,5	;RP0=1, select bank1
  4380  154A  1303               	bcf	3,6	;RP1=0, select bank1
  4381  154B  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4382  154C  1283               	bcf	3,5	;RP0=0, select bank0
  4383  154D  1303               	bcf	3,6	;RP1=0, select bank0
  4384  154E  00A1               	movwf	merge1@matrix44
  4385  154F  1683               	bsf	3,5	;RP0=1, select bank1
  4386  1550  1303               	bcf	3,6	;RP1=0, select bank1
  4387  1551  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4388  1552  1283               	bcf	3,5	;RP0=0, select bank0
  4389  1553  1303               	bcf	3,6	;RP1=0, select bank0
  4390  1554  00A2               	movwf	merge1@matrix44+1
  4391  1555  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4392  1556  00D4               	movwf	??_find_best_solution+1
  4393  1557  0854               	movf	??_find_best_solution+1,w
  4394  1558  00A3               	movwf	merge1@matrix88_in
  4395  1559  30A5               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4396  155A  00D5               	movwf	??_find_best_solution+2
  4397  155B  0855               	movf	??_find_best_solution+2,w
  4398  155C  00A4               	movwf	merge1@matrix88_out
  4399  155D  1683               	bsf	3,5	;RP0=1, select bank1
  4400  155E  1303               	bcf	3,6	;RP1=0, select bank1
  4401  155F  0868               	movf	find_best_solution@temp_x^(0+128),w
  4402  1560  160A  118A  207E  160A  118A  	fcall	_merge1
  4403                           
  4404                           ;teris_16f886.c: 974: temp_count = delete_matrix(&temp_matrix88);
  4405  1565  30A5               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4406  1566  1283               	bcf	3,5	;RP0=0, select bank0
  4407  1567  1303               	bcf	3,6	;RP1=0, select bank0
  4408  1568  00C3               	movwf	delete_matrix@matrix
  4409  1569  3000               	movlw	0
  4410  156A  00C4               	movwf	delete_matrix@matrix+1
  4411  156B  160A  158A  2522  160A  118A  	fcall	_delete_matrix
  4412  1570  1283               	bcf	3,5	;RP0=0, select bank0
  4413  1571  1303               	bcf	3,6	;RP1=0, select bank0
  4414  1572  00D3               	movwf	??_find_best_solution
  4415  1573  0853               	movf	??_find_best_solution,w
  4416  1574  1683               	bsf	3,5	;RP0=1, select bank1
  4417  1575  1303               	bcf	3,6	;RP1=0, select bank1
  4418  1576  00EB               	movwf	_temp_count^(0+128)
  4419                           
  4420                           ;teris_16f886.c: 975: temp_risk = evaluate(&temp_matrix88);
  4421  1577  30A5               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4422  1578  120A  158A  2680  160A  118A  	fcall	_evaluate
  4423  157D  1283               	bcf	3,5	;RP0=0, select bank0
  4424  157E  1303               	bcf	3,6	;RP1=0, select bank0
  4425  157F  0844               	movf	?_evaluate+1,w
  4426  1580  1683               	bsf	3,5	;RP0=1, select bank1
  4427  1581  1303               	bcf	3,6	;RP1=0, select bank1
  4428  1582  00EA               	movwf	(_temp_risk+1)^(0+128)
  4429  1583  1283               	bcf	3,5	;RP0=0, select bank0
  4430  1584  1303               	bcf	3,6	;RP1=0, select bank0
  4431  1585  0843               	movf	?_evaluate,w
  4432  1586  1683               	bsf	3,5	;RP0=1, select bank1
  4433  1587  1303               	bcf	3,6	;RP1=0, select bank1
  4434  1588  00E9               	movwf	_temp_risk^(0+128)
  4435                           
  4436                           ;teris_16f886.c: 976: temp_high = get_high_after_merge(temp_y, temp_cur_matrix44);
  4437  1589  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4438  158A  1283               	bcf	3,5	;RP0=0, select bank0
  4439  158B  1303               	bcf	3,6	;RP1=0, select bank0
  4440  158C  00C7               	movwf	get_high_after_merge@matrix
  4441  158D  1683               	bsf	3,5	;RP0=1, select bank1
  4442  158E  1303               	bcf	3,6	;RP1=0, select bank1
  4443  158F  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4444  1590  1283               	bcf	3,5	;RP0=0, select bank0
  4445  1591  1303               	bcf	3,6	;RP1=0, select bank0
  4446  1592  00C8               	movwf	get_high_after_merge@matrix+1
  4447  1593  086C               	movf	_temp_y,w
  4448  1594  160A  118A  20E5  160A  118A  	fcall	_get_high_after_merge
  4449  1599  1283               	bcf	3,5	;RP0=0, select bank0
  4450  159A  1303               	bcf	3,6	;RP1=0, select bank0
  4451  159B  00D3               	movwf	??_find_best_solution
  4452  159C  0853               	movf	??_find_best_solution,w
  4453  159D  1683               	bsf	3,5	;RP0=1, select bank1
  4454  159E  1303               	bcf	3,6	;RP1=0, select bank1
  4455  159F  00EC               	movwf	_temp_high^(0+128)
  4456                           
  4457                           ;teris_16f886.c: 977: temp_hole = get_holes_after_merge(&temp_matrix88);
  4458  15A0  30A5               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4459  15A1  120A  118A  202D  160A  118A  	fcall	_get_holes_after_merge
  4460  15A6  1283               	bcf	3,5	;RP0=0, select bank0
  4461  15A7  1303               	bcf	3,6	;RP1=0, select bank0
  4462  15A8  00D3               	movwf	??_find_best_solution
  4463  15A9  0853               	movf	??_find_best_solution,w
  4464  15AA  1683               	bsf	3,5	;RP0=1, select bank1
  4465  15AB  1303               	bcf	3,6	;RP1=0, select bank1
  4466  15AC  00ED               	movwf	_temp_hole^(0+128)
  4467                           
  4468                           ;teris_16f886.c: 979: printf_console_MATRIX88(&temp_matrix88);
  4469  15AD  30A5               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4470  15AE  00F5               	movwf	printf_console_MATRIX88@matrix
  4471  15AF  3000               	movlw	0
  4472  15B0  00F6               	movwf	printf_console_MATRIX88@matrix+1
  4473  15B1  160A  158A  27A0  160A  118A  	fcall	_printf_console_MATRIX88
  4474                           
  4475                           ;teris_16f886.c: 981: if(temp_count > temp_pre_count)
  4476  15B6  1683               	bsf	3,5	;RP0=1, select bank1
  4477  15B7  1303               	bcf	3,6	;RP1=0, select bank1
  4478  15B8  086B               	movf	_temp_count^(0+128),w
  4479  15B9  1683               	bsf	3,5	;RP0=1, select bank3
  4480  15BA  1703               	bsf	3,6	;RP1=1, select bank3
  4481  15BB  0217               	subwf	_temp_pre_count^(0+384),w
  4482  15BC  1803               	skipnc
  4483  15BD  2DD3               	goto	l4873
  4484                           
  4485                           ;teris_16f886.c: 982: {
  4486                           ;teris_16f886.c: 983: debug_int2("temp_count(%d) > temp_pre_count(%d)\n", temp_count, te
      +                          mp_pre_count);
  4487  15BE  3061               	movlw	low (STR_45| (0+32768))
  4488  15BF  1283               	bcf	3,5	;RP0=0, select bank0
  4489  15C0  1303               	bcf	3,6	;RP1=0, select bank0
  4490  15C1  00BF               	movwf	debug_int2@f
  4491  15C2  308A               	movlw	high (STR_45| (0+32768))
  4492  15C3  00C0               	movwf	debug_int2@f+1
  4493  15C4  1683               	bsf	3,5	;RP0=1, select bank1
  4494  15C5  1303               	bcf	3,6	;RP1=0, select bank1
  4495  15C6  086B               	movf	_temp_count^(0+128),w
  4496  15C7  1283               	bcf	3,5	;RP0=0, select bank0
  4497  15C8  1303               	bcf	3,6	;RP1=0, select bank0
  4498  15C9  00D3               	movwf	??_find_best_solution
  4499  15CA  01D4               	clrf	??_find_best_solution+1
  4500  15CB  0853               	movf	??_find_best_solution,w
  4501  15CC  00C1               	movwf	debug_int2@i1
  4502  15CD  0854               	movf	??_find_best_solution+1,w
  4503  15CE  00C2               	movwf	debug_int2@i1+1
  4504  15CF  1683               	bsf	3,5	;RP0=1, select bank3
  4505  15D0  1703               	bsf	3,6	;RP1=1, select bank3
  4506  15D1  0817               	movf	_temp_pre_count^(0+384),w
  4507  15D2  2ED8               	goto	L9
  4508  15D3                     l4873:	
  4509                           ;teris_16f886.c: 990: }
  4510                           
  4511                           ;teris_16f886.c: 989: temp_pre_x = temp_x;
  4512                           
  4513                           ;teris_16f886.c: 988: tem_pre_sub_index = tem_sub_index;
  4514                           
  4515                           ;teris_16f886.c: 987: temp_pre_hole = temp_hole;
  4516                           
  4517                           ;teris_16f886.c: 986: temp_pre_high = temp_high;
  4518                           
  4519                           ;teris_16f886.c: 985: temp_pre_risk = temp_risk;
  4520                           
  4521                           ;teris_16f886.c: 984: temp_pre_count = temp_count;
  4522                           
  4523                           
  4524                           ;teris_16f886.c: 991: else if(temp_count == temp_pre_count)
  4525  15D3  1683               	bsf	3,5	;RP0=1, select bank1
  4526  15D4  1303               	bcf	3,6	;RP1=0, select bank1
  4527  15D5  086B               	movf	_temp_count^(0+128),w
  4528  15D6  1683               	bsf	3,5	;RP0=1, select bank3
  4529  15D7  1703               	bsf	3,6	;RP1=1, select bank3
  4530  15D8  0617               	xorwf	_temp_pre_count^(0+384),w
  4531  15D9  1D03               	skipz
  4532  15DA  2FB1               	goto	l4993
  4533                           
  4534                           ;teris_16f886.c: 992: {
  4535                           ;teris_16f886.c: 993: if(get_high(&g_matrix88) <= 8/2 + 1)
  4536  15DB  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4537  15DC  160A  158A  256A  160A  118A  	fcall	_get_high
  4538  15E1  1283               	bcf	3,5	;RP0=0, select bank0
  4539  15E2  1303               	bcf	3,6	;RP1=0, select bank0
  4540  15E3  00D3               	movwf	??_find_best_solution
  4541  15E4  3006               	movlw	6
  4542  15E5  0253               	subwf	??_find_best_solution,w
  4543  15E6  1803               	skipnc
  4544  15E7  2E8E               	goto	l4935
  4545                           
  4546                           ;teris_16f886.c: 994: {
  4547                           ;teris_16f886.c: 995: debug_int1("height <= (%d)\n", 8/2 + 1);
  4548  15E8  3013               	movlw	low (STR_46| (0+32768))
  4549  15E9  00BF               	movwf	debug_int1@f
  4550  15EA  308E               	movlw	high (STR_46| (0+32768))
  4551  15EB  00C0               	movwf	debug_int1@f+1
  4552  15EC  3005               	movlw	5
  4553  15ED  00C1               	movwf	debug_int1@i
  4554  15EE  3000               	movlw	0
  4555  15EF  00C2               	movwf	debug_int1@i+1
  4556  15F0  160A  158A  2273  160A  118A  	fcall	_debug_int1
  4557                           
  4558                           ;teris_16f886.c: 996: debug_int2("temp_count(%d) == temp_pre_count(%d)\n", temp_count, t
      +                          emp_pre_count);
  4559  15F5  303B               	movlw	low (STR_47| (0+32768))
  4560  15F6  1283               	bcf	3,5	;RP0=0, select bank0
  4561  15F7  1303               	bcf	3,6	;RP1=0, select bank0
  4562  15F8  00BF               	movwf	debug_int2@f
  4563  15F9  308A               	movlw	high (STR_47| (0+32768))
  4564  15FA  00C0               	movwf	debug_int2@f+1
  4565  15FB  1683               	bsf	3,5	;RP0=1, select bank1
  4566  15FC  1303               	bcf	3,6	;RP1=0, select bank1
  4567  15FD  086B               	movf	_temp_count^(0+128),w
  4568  15FE  1283               	bcf	3,5	;RP0=0, select bank0
  4569  15FF  1303               	bcf	3,6	;RP1=0, select bank0
  4570  1600  00D3               	movwf	??_find_best_solution
  4571  1601  01D4               	clrf	??_find_best_solution+1
  4572  1602  0853               	movf	??_find_best_solution,w
  4573  1603  00C1               	movwf	debug_int2@i1
  4574  1604  0854               	movf	??_find_best_solution+1,w
  4575  1605  00C2               	movwf	debug_int2@i1+1
  4576  1606  1683               	bsf	3,5	;RP0=1, select bank3
  4577  1607  1703               	bsf	3,6	;RP1=1, select bank3
  4578  1608  0817               	movf	_temp_pre_count^(0+384),w
  4579  1609  1283               	bcf	3,5	;RP0=0, select bank0
  4580  160A  1303               	bcf	3,6	;RP1=0, select bank0
  4581  160B  00D5               	movwf	??_find_best_solution+2
  4582  160C  01D6               	clrf	??_find_best_solution+3
  4583  160D  0855               	movf	??_find_best_solution+2,w
  4584  160E  00C3               	movwf	debug_int2@i2
  4585  160F  0856               	movf	??_find_best_solution+3,w
  4586  1610  00C4               	movwf	debug_int2@i2+1
  4587  1611  160A  158A  22DA  160A  118A  	fcall	_debug_int2
  4588                           
  4589                           ;teris_16f886.c: 997: if(temp_risk < temp_pre_risk)
  4590  1616  1683               	bsf	3,5	;RP0=1, select bank3
  4591  1617  1703               	bsf	3,6	;RP1=1, select bank3
  4592  1618  0858               	movf	(_temp_pre_risk+1)^(0+384),w
  4593  1619  1683               	bsf	3,5	;RP0=1, select bank1
  4594  161A  1303               	bcf	3,6	;RP1=0, select bank1
  4595  161B  026A               	subwf	(_temp_risk+1)^(0+128),w
  4596  161C  1D03               	skipz
  4597  161D  2E24               	goto	u6605
  4598  161E  1683               	bsf	3,5	;RP0=1, select bank3
  4599  161F  1703               	bsf	3,6	;RP1=1, select bank3
  4600  1620  0857               	movf	_temp_pre_risk^(0+384),w
  4601  1621  1683               	bsf	3,5	;RP0=1, select bank1
  4602  1622  1303               	bcf	3,6	;RP1=0, select bank1
  4603  1623  0269               	subwf	_temp_risk^(0+128),w
  4604  1624                     u6605:	
  4605  1624  1C03               	btfss	3,0
  4606  1625  2F54               	goto	L6
  4607                           
  4608                           ;teris_16f886.c: 1007: else if(temp_risk == temp_pre_risk)
  4609                           
  4610                           ;teris_16f886.c: 1006: }
  4611                           
  4612                           ;teris_16f886.c: 1005: temp_pre_x = temp_x;
  4613                           
  4614                           ;teris_16f886.c: 1004: tem_pre_sub_index = tem_sub_index;
  4615                           
  4616                           ;teris_16f886.c: 1003: temp_pre_hole = temp_hole;
  4617                           
  4618                           ;teris_16f886.c: 1002: temp_pre_high = temp_high;
  4619                           
  4620                           ;teris_16f886.c: 1001: temp_pre_risk = temp_risk;
  4621                           
  4622                           ;teris_16f886.c: 1000: temp_pre_count = temp_count;
  4623                           
  4624                           ;teris_16f886.c: 998: {
  4625                           ;teris_16f886.c: 999: debug_int2("temp_risk(%d) < temp_pre_risk(%d)\n", temp_risk, temp_
      +                          pre_risk);
  4626  1626  1683               	bsf	3,5	;RP0=1, select bank3
  4627  1627  1703               	bsf	3,6	;RP1=1, select bank3
  4628  1628  0858               	movf	(_temp_pre_risk+1)^(0+384),w
  4629  1629  1683               	bsf	3,5	;RP0=1, select bank1
  4630  162A  1303               	bcf	3,6	;RP1=0, select bank1
  4631  162B  066A               	xorwf	(_temp_risk+1)^(0+128),w
  4632  162C  1D03               	skipz
  4633  162D  2E34               	goto	u6615
  4634  162E  1683               	bsf	3,5	;RP0=1, select bank3
  4635  162F  1703               	bsf	3,6	;RP1=1, select bank3
  4636  1630  0857               	movf	_temp_pre_risk^(0+384),w
  4637  1631  1683               	bsf	3,5	;RP0=1, select bank1
  4638  1632  1303               	bcf	3,6	;RP1=0, select bank1
  4639  1633  0669               	xorwf	_temp_risk^(0+128),w
  4640  1634                     u6615:	
  4641  1634  1D03               	skipz
  4642  1635  2FB1               	goto	l4993
  4643                           
  4644                           ;teris_16f886.c: 1008: {
  4645                           ;teris_16f886.c: 1009: debug_int2("temp_risk(%d) == temp_pre_risk(%d)\n", temp_risk, tem
      +                          p_pre_risk);
  4646  1636  30CE               	movlw	low (STR_49| (0+32768))
  4647  1637  1283               	bcf	3,5	;RP0=0, select bank0
  4648  1638  1303               	bcf	3,6	;RP1=0, select bank0
  4649  1639  00BF               	movwf	debug_int2@f
  4650  163A  308A               	movlw	high (STR_49| (0+32768))
  4651  163B  00C0               	movwf	debug_int2@f+1
  4652  163C  1683               	bsf	3,5	;RP0=1, select bank1
  4653  163D  1303               	bcf	3,6	;RP1=0, select bank1
  4654  163E  086A               	movf	(_temp_risk+1)^(0+128),w
  4655  163F  1283               	bcf	3,5	;RP0=0, select bank0
  4656  1640  1303               	bcf	3,6	;RP1=0, select bank0
  4657  1641  00C2               	movwf	debug_int2@i1+1
  4658  1642  1683               	bsf	3,5	;RP0=1, select bank1
  4659  1643  1303               	bcf	3,6	;RP1=0, select bank1
  4660  1644  0869               	movf	_temp_risk^(0+128),w
  4661  1645  1283               	bcf	3,5	;RP0=0, select bank0
  4662  1646  1303               	bcf	3,6	;RP1=0, select bank0
  4663  1647  00C1               	movwf	debug_int2@i1
  4664  1648  1683               	bsf	3,5	;RP0=1, select bank3
  4665  1649  1703               	bsf	3,6	;RP1=1, select bank3
  4666  164A  0858               	movf	(_temp_pre_risk+1)^(0+384),w
  4667  164B  1283               	bcf	3,5	;RP0=0, select bank0
  4668  164C  1303               	bcf	3,6	;RP1=0, select bank0
  4669  164D  00C4               	movwf	debug_int2@i2+1
  4670  164E  1683               	bsf	3,5	;RP0=1, select bank3
  4671  164F  1703               	bsf	3,6	;RP1=1, select bank3
  4672  1650  0857               	movf	_temp_pre_risk^(0+384),w
  4673  1651  1283               	bcf	3,5	;RP0=0, select bank0
  4674  1652  1303               	bcf	3,6	;RP1=0, select bank0
  4675  1653  00C3               	movwf	debug_int2@i2
  4676  1654  160A  158A  22DA  160A  118A  	fcall	_debug_int2
  4677                           
  4678                           ;teris_16f886.c: 1010: if(temp_high < temp_pre_high)
  4679  1659  1683               	bsf	3,5	;RP0=1, select bank1
  4680  165A  1303               	bcf	3,6	;RP1=0, select bank1
  4681  165B  086F               	movf	_temp_pre_high^(0+128),w
  4682  165C  026C               	subwf	_temp_high^(0+128),w
  4683  165D  1C03               	btfss	3,0
  4684  165E  2EC4               	goto	L10
  4685                           
  4686                           ;teris_16f886.c: 1020: else if(temp_high == temp_pre_high)
  4687                           
  4688                           ;teris_16f886.c: 1019: }
  4689                           
  4690                           ;teris_16f886.c: 1018: temp_pre_x = temp_x;
  4691                           
  4692                           ;teris_16f886.c: 1017: tem_pre_sub_index = tem_sub_index;
  4693                           
  4694                           ;teris_16f886.c: 1016: temp_pre_hole = temp_hole;
  4695                           
  4696                           ;teris_16f886.c: 1015: temp_pre_high = temp_high;
  4697                           
  4698                           ;teris_16f886.c: 1014: temp_pre_risk = temp_risk;
  4699                           
  4700                           ;teris_16f886.c: 1013: temp_pre_count = temp_count;
  4701                           
  4702                           ;teris_16f886.c: 1011: {
  4703                           ;teris_16f886.c: 1012: debug_int2("temp_high(%d) < temp_pre_high(%d)\n", temp_high, temp
      +                          _pre_high);
  4704  165F  1303               	bcf	3,6	;RP1=0, select bank1
  4705  1660  086C               	movf	_temp_high^(0+128),w
  4706  1661  066F               	xorwf	_temp_pre_high^(0+128),w
  4707  1662  1D03               	skipz
  4708  1663  2FB1               	goto	l4993
  4709                           
  4710                           ;teris_16f886.c: 1021: {
  4711                           ;teris_16f886.c: 1022: debug_int2("temp_high(%d) == temp_pre_high(%d)\n", temp_high, tem
      +                          p_pre_high);
  4712  1664  30AA               	movlw	low (STR_51| (0+32768))
  4713  1665  1283               	bcf	3,5	;RP0=0, select bank0
  4714  1666  1303               	bcf	3,6	;RP1=0, select bank0
  4715  1667  00BF               	movwf	debug_int2@f
  4716  1668  308A               	movlw	high (STR_51| (0+32768))
  4717  1669  00C0               	movwf	debug_int2@f+1
  4718  166A  1683               	bsf	3,5	;RP0=1, select bank1
  4719  166B  1303               	bcf	3,6	;RP1=0, select bank1
  4720  166C  086C               	movf	_temp_high^(0+128),w
  4721  166D  1283               	bcf	3,5	;RP0=0, select bank0
  4722  166E  1303               	bcf	3,6	;RP1=0, select bank0
  4723  166F  00D3               	movwf	??_find_best_solution
  4724  1670  01D4               	clrf	??_find_best_solution+1
  4725  1671  0853               	movf	??_find_best_solution,w
  4726  1672  00C1               	movwf	debug_int2@i1
  4727  1673  0854               	movf	??_find_best_solution+1,w
  4728  1674  00C2               	movwf	debug_int2@i1+1
  4729  1675  1683               	bsf	3,5	;RP0=1, select bank1
  4730  1676  1303               	bcf	3,6	;RP1=0, select bank1
  4731  1677  086F               	movf	_temp_pre_high^(0+128),w
  4732  1678  1283               	bcf	3,5	;RP0=0, select bank0
  4733  1679  1303               	bcf	3,6	;RP1=0, select bank0
  4734  167A  00D5               	movwf	??_find_best_solution+2
  4735  167B  01D6               	clrf	??_find_best_solution+3
  4736  167C  0855               	movf	??_find_best_solution+2,w
  4737  167D  00C3               	movwf	debug_int2@i2
  4738  167E  0856               	movf	??_find_best_solution+3,w
  4739  167F  00C4               	movwf	debug_int2@i2+1
  4740  1680  160A  158A  22DA  160A  118A  	fcall	_debug_int2
  4741                           
  4742                           ;teris_16f886.c: 1023: if(temp_hole < temp_pre_hole)
  4743  1685  1283               	bcf	3,5	;RP0=0, select bank0
  4744  1686  1303               	bcf	3,6	;RP1=0, select bank0
  4745  1687  086F               	movf	_temp_pre_hole,w
  4746  1688  1683               	bsf	3,5	;RP0=1, select bank1
  4747  1689  1303               	bcf	3,6	;RP1=0, select bank1
  4748  168A  026D               	subwf	_temp_hole^(0+128),w
  4749  168B  1803               	skipnc
  4750  168C  2FB1               	goto	l4993
  4751  168D  2F09               	goto	L7
  4752  168E                     l4935:	
  4753                           ;teris_16f886.c: 1032: }
  4754                           ;teris_16f886.c: 1034: }
  4755                           ;teris_16f886.c: 1036: }
  4756                           ;teris_16f886.c: 1037: }
  4757                           
  4758                           ;teris_16f886.c: 1031: temp_pre_x = temp_x;
  4759                           
  4760                           ;teris_16f886.c: 1030: tem_pre_sub_index = tem_sub_index;
  4761                           
  4762                           ;teris_16f886.c: 1029: temp_pre_hole = temp_hole;
  4763                           
  4764                           ;teris_16f886.c: 1028: temp_pre_high = temp_high;
  4765                           
  4766                           ;teris_16f886.c: 1027: temp_pre_risk = temp_risk;
  4767                           
  4768                           ;teris_16f886.c: 1026: temp_pre_count = temp_count;
  4769                           
  4770                           ;teris_16f886.c: 1024: {
  4771                           ;teris_16f886.c: 1025: debug_int2("temp_hole(%d) < temp_pre_hole(%d)\n", temp_hole, temp
      +                          _pre_hole);
  4772                           
  4773                           
  4774                           ;teris_16f886.c: 1038: else
  4775                           ;teris_16f886.c: 1039: {
  4776                           ;teris_16f886.c: 1040: debug_int1("WARNING height > (%d)\n", 8/2 + 1);
  4777  168E  3051               	movlw	low (STR_53| (0+32768))
  4778  168F  1283               	bcf	3,5	;RP0=0, select bank0
  4779  1690  1303               	bcf	3,6	;RP1=0, select bank0
  4780  1691  00BF               	movwf	debug_int1@f
  4781  1692  308D               	movlw	high (STR_53| (0+32768))
  4782  1693  00C0               	movwf	debug_int1@f+1
  4783  1694  3005               	movlw	5
  4784  1695  00C1               	movwf	debug_int1@i
  4785  1696  3000               	movlw	0
  4786  1697  00C2               	movwf	debug_int1@i+1
  4787  1698  160A  158A  2273  160A  118A  	fcall	_debug_int1
  4788                           
  4789                           ;teris_16f886.c: 1041: debug_int2("temp_high = %d, temp_pre_high = %d\n", temp_high, tem
      +                          p_pre_high);
  4790  169D  30F2               	movlw	low (STR_54| (0+32768))
  4791  169E  1283               	bcf	3,5	;RP0=0, select bank0
  4792  169F  1303               	bcf	3,6	;RP1=0, select bank0
  4793  16A0  00BF               	movwf	debug_int2@f
  4794  16A1  308A               	movlw	high (STR_54| (0+32768))
  4795  16A2  00C0               	movwf	debug_int2@f+1
  4796  16A3  1683               	bsf	3,5	;RP0=1, select bank1
  4797  16A4  1303               	bcf	3,6	;RP1=0, select bank1
  4798  16A5  086C               	movf	_temp_high^(0+128),w
  4799  16A6  1283               	bcf	3,5	;RP0=0, select bank0
  4800  16A7  1303               	bcf	3,6	;RP1=0, select bank0
  4801  16A8  00D3               	movwf	??_find_best_solution
  4802  16A9  01D4               	clrf	??_find_best_solution+1
  4803  16AA  0853               	movf	??_find_best_solution,w
  4804  16AB  00C1               	movwf	debug_int2@i1
  4805  16AC  0854               	movf	??_find_best_solution+1,w
  4806  16AD  00C2               	movwf	debug_int2@i1+1
  4807  16AE  1683               	bsf	3,5	;RP0=1, select bank1
  4808  16AF  1303               	bcf	3,6	;RP1=0, select bank1
  4809  16B0  086F               	movf	_temp_pre_high^(0+128),w
  4810  16B1  1283               	bcf	3,5	;RP0=0, select bank0
  4811  16B2  1303               	bcf	3,6	;RP1=0, select bank0
  4812  16B3  00D5               	movwf	??_find_best_solution+2
  4813  16B4  01D6               	clrf	??_find_best_solution+3
  4814  16B5  0855               	movf	??_find_best_solution+2,w
  4815  16B6  00C3               	movwf	debug_int2@i2
  4816  16B7  0856               	movf	??_find_best_solution+3,w
  4817  16B8  00C4               	movwf	debug_int2@i2+1
  4818  16B9  160A  158A  22DA  160A  118A  	fcall	_debug_int2
  4819                           
  4820                           ;teris_16f886.c: 1042: if(temp_high < temp_pre_high)
  4821  16BE  1683               	bsf	3,5	;RP0=1, select bank1
  4822  16BF  1303               	bcf	3,6	;RP1=0, select bank1
  4823  16C0  086F               	movf	_temp_pre_high^(0+128),w
  4824  16C1  026C               	subwf	_temp_high^(0+128),w
  4825  16C2  1803               	skipnc
  4826  16C3  2EDB               	goto	l4953
  4827  16C4                     L10:	
  4828                           
  4829                           ;teris_16f886.c: 1043: {
  4830                           ;teris_16f886.c: 1044: debug_int2("temp_high(%d) < temp_pre_high(%d)\n", temp_high, temp
      +                          _pre_high);
  4831  16C4  305D               	movlw	low (STR_50| (0+32768))
  4832  16C5  1283               	bcf	3,5	;RP0=0, select bank0
  4833  16C6  1303               	bcf	3,6	;RP1=0, select bank0
  4834  16C7  00BF               	movwf	debug_int2@f
  4835  16C8  308B               	movlw	high (STR_50| (0+32768))
  4836  16C9  00C0               	movwf	debug_int2@f+1
  4837  16CA  1683               	bsf	3,5	;RP0=1, select bank1
  4838  16CB  1303               	bcf	3,6	;RP1=0, select bank1
  4839  16CC  086C               	movf	_temp_high^(0+128),w
  4840  16CD  1283               	bcf	3,5	;RP0=0, select bank0
  4841  16CE  1303               	bcf	3,6	;RP1=0, select bank0
  4842  16CF  00D3               	movwf	??_find_best_solution
  4843  16D0  01D4               	clrf	??_find_best_solution+1
  4844  16D1  0853               	movf	??_find_best_solution,w
  4845  16D2  00C1               	movwf	debug_int2@i1
  4846  16D3  0854               	movf	??_find_best_solution+1,w
  4847  16D4  00C2               	movwf	debug_int2@i1+1
  4848  16D5  1683               	bsf	3,5	;RP0=1, select bank1
  4849  16D6  1303               	bcf	3,6	;RP1=0, select bank1
  4850  16D7  086F               	movf	_temp_pre_high^(0+128),w
  4851  16D8                     L9:	
  4852  16D8  1283               	bcf	3,5	;RP0=0, select bank0
  4853  16D9  1303               	bcf	3,6	;RP1=0, select bank0
  4854  16DA  2F1B               	goto	L5
  4855  16DB                     l4953:	
  4856                           ;teris_16f886.c: 1051: }
  4857                           
  4858                           ;teris_16f886.c: 1050: temp_pre_x = temp_x;
  4859                           
  4860                           ;teris_16f886.c: 1049: tem_pre_sub_index = tem_sub_index;
  4861                           
  4862                           ;teris_16f886.c: 1048: temp_pre_hole = temp_hole;
  4863                           
  4864                           ;teris_16f886.c: 1047: temp_pre_high = temp_high;
  4865                           
  4866                           ;teris_16f886.c: 1046: temp_pre_risk = temp_risk;
  4867                           
  4868                           ;teris_16f886.c: 1045: temp_pre_count = temp_count;
  4869                           
  4870                           
  4871                           ;teris_16f886.c: 1052: else if(temp_high == temp_pre_high)
  4872  16DB  1303               	bcf	3,6	;RP1=0, select bank1
  4873  16DC  086C               	movf	_temp_high^(0+128),w
  4874  16DD  066F               	xorwf	_temp_pre_high^(0+128),w
  4875  16DE  1D03               	skipz
  4876  16DF  2FB1               	goto	l4993
  4877                           
  4878                           ;teris_16f886.c: 1053: {
  4879                           ;teris_16f886.c: 1054: debug_int2("temp_high(%d) == temp_pre_high(%d)\n", temp_high, tem
      +                          p_pre_high);
  4880  16E0  30AA               	movlw	low (STR_51| (0+32768))
  4881  16E1  1283               	bcf	3,5	;RP0=0, select bank0
  4882  16E2  1303               	bcf	3,6	;RP1=0, select bank0
  4883  16E3  00BF               	movwf	debug_int2@f
  4884  16E4  308A               	movlw	high (STR_51| (0+32768))
  4885  16E5  00C0               	movwf	debug_int2@f+1
  4886  16E6  1683               	bsf	3,5	;RP0=1, select bank1
  4887  16E7  1303               	bcf	3,6	;RP1=0, select bank1
  4888  16E8  086C               	movf	_temp_high^(0+128),w
  4889  16E9  1283               	bcf	3,5	;RP0=0, select bank0
  4890  16EA  1303               	bcf	3,6	;RP1=0, select bank0
  4891  16EB  00D3               	movwf	??_find_best_solution
  4892  16EC  01D4               	clrf	??_find_best_solution+1
  4893  16ED  0853               	movf	??_find_best_solution,w
  4894  16EE  00C1               	movwf	debug_int2@i1
  4895  16EF  0854               	movf	??_find_best_solution+1,w
  4896  16F0  00C2               	movwf	debug_int2@i1+1
  4897  16F1  1683               	bsf	3,5	;RP0=1, select bank1
  4898  16F2  1303               	bcf	3,6	;RP1=0, select bank1
  4899  16F3  086F               	movf	_temp_pre_high^(0+128),w
  4900  16F4  1283               	bcf	3,5	;RP0=0, select bank0
  4901  16F5  1303               	bcf	3,6	;RP1=0, select bank0
  4902  16F6  00D5               	movwf	??_find_best_solution+2
  4903  16F7  01D6               	clrf	??_find_best_solution+3
  4904  16F8  0855               	movf	??_find_best_solution+2,w
  4905  16F9  00C3               	movwf	debug_int2@i2
  4906  16FA  0856               	movf	??_find_best_solution+3,w
  4907  16FB  00C4               	movwf	debug_int2@i2+1
  4908  16FC  160A  158A  22DA  160A  118A  	fcall	_debug_int2
  4909                           
  4910                           ;teris_16f886.c: 1055: if(temp_hole < temp_pre_hole)
  4911  1701  1283               	bcf	3,5	;RP0=0, select bank0
  4912  1702  1303               	bcf	3,6	;RP1=0, select bank0
  4913  1703  086F               	movf	_temp_pre_hole,w
  4914  1704  1683               	bsf	3,5	;RP0=1, select bank1
  4915  1705  1303               	bcf	3,6	;RP1=0, select bank1
  4916  1706  026D               	subwf	_temp_hole^(0+128),w
  4917  1707  1803               	skipnc
  4918  1708  2F22               	goto	l4973
  4919  1709                     L7:	
  4920                           
  4921                           ;teris_16f886.c: 1056: {
  4922                           ;teris_16f886.c: 1057: debug_int2("temp_hole(%d) < temp_pre_hole(%d)\n", temp_hole, temp
      +                          _pre_hole);
  4923  1709  303A               	movlw	low (STR_52| (0+32768))
  4924  170A  1283               	bcf	3,5	;RP0=0, select bank0
  4925  170B  1303               	bcf	3,6	;RP1=0, select bank0
  4926  170C  00BF               	movwf	debug_int2@f
  4927  170D  308B               	movlw	high (STR_52| (0+32768))
  4928  170E  00C0               	movwf	debug_int2@f+1
  4929  170F  1683               	bsf	3,5	;RP0=1, select bank1
  4930  1710  1303               	bcf	3,6	;RP1=0, select bank1
  4931  1711  086D               	movf	_temp_hole^(0+128),w
  4932  1712  1283               	bcf	3,5	;RP0=0, select bank0
  4933  1713  1303               	bcf	3,6	;RP1=0, select bank0
  4934  1714  00D3               	movwf	??_find_best_solution
  4935  1715  01D4               	clrf	??_find_best_solution+1
  4936  1716  0853               	movf	??_find_best_solution,w
  4937  1717  00C1               	movwf	debug_int2@i1
  4938  1718  0854               	movf	??_find_best_solution+1,w
  4939  1719  00C2               	movwf	debug_int2@i1+1
  4940  171A  086F               	movf	_temp_pre_hole,w
  4941  171B                     L5:	
  4942  171B  00D5               	movwf	??_find_best_solution+2
  4943  171C  01D6               	clrf	??_find_best_solution+3
  4944  171D  0855               	movf	??_find_best_solution+2,w
  4945  171E  00C3               	movwf	debug_int2@i2
  4946  171F  0856               	movf	??_find_best_solution+3,w
  4947  1720  00C4               	movwf	debug_int2@i2+1
  4948  1721  2F72               	goto	L2
  4949  1722                     l4973:	
  4950                           ;teris_16f886.c: 1064: }
  4951                           
  4952                           ;teris_16f886.c: 1063: temp_pre_x = temp_x;
  4953                           
  4954                           ;teris_16f886.c: 1062: tem_pre_sub_index = tem_sub_index;
  4955                           
  4956                           ;teris_16f886.c: 1061: temp_pre_hole = temp_hole;
  4957                           
  4958                           ;teris_16f886.c: 1060: temp_pre_high = temp_high;
  4959                           
  4960                           ;teris_16f886.c: 1059: temp_pre_risk = temp_risk;
  4961                           
  4962                           ;teris_16f886.c: 1058: temp_pre_count = temp_count;
  4963                           
  4964                           
  4965                           ;teris_16f886.c: 1065: else if(temp_hole == temp_pre_hole)
  4966  1722  1303               	bcf	3,6	;RP1=0, select bank1
  4967  1723  086D               	movf	_temp_hole^(0+128),w
  4968  1724  1283               	bcf	3,5	;RP0=0, select bank0
  4969  1725  1303               	bcf	3,6	;RP1=0, select bank0
  4970  1726  066F               	xorwf	_temp_pre_hole,w
  4971  1727  1D03               	skipz
  4972  1728  2FB1               	goto	l4993
  4973                           
  4974                           ;teris_16f886.c: 1066: {
  4975                           ;teris_16f886.c: 1067: debug_int2("temp_hole(%d) == temp_pre_hole(%d)\n", temp_hole, tem
      +                          p_pre_hole);
  4976  1729  3086               	movlw	low (STR_58| (0+32768))
  4977  172A  00BF               	movwf	debug_int2@f
  4978  172B  308A               	movlw	high (STR_58| (0+32768))
  4979  172C  00C0               	movwf	debug_int2@f+1
  4980  172D  1683               	bsf	3,5	;RP0=1, select bank1
  4981  172E  1303               	bcf	3,6	;RP1=0, select bank1
  4982  172F  086D               	movf	_temp_hole^(0+128),w
  4983  1730  1283               	bcf	3,5	;RP0=0, select bank0
  4984  1731  1303               	bcf	3,6	;RP1=0, select bank0
  4985  1732  00D3               	movwf	??_find_best_solution
  4986  1733  01D4               	clrf	??_find_best_solution+1
  4987  1734  0853               	movf	??_find_best_solution,w
  4988  1735  00C1               	movwf	debug_int2@i1
  4989  1736  0854               	movf	??_find_best_solution+1,w
  4990  1737  00C2               	movwf	debug_int2@i1+1
  4991  1738  086F               	movf	_temp_pre_hole,w
  4992  1739  00D5               	movwf	??_find_best_solution+2
  4993  173A  01D6               	clrf	??_find_best_solution+3
  4994  173B  0855               	movf	??_find_best_solution+2,w
  4995  173C  00C3               	movwf	debug_int2@i2
  4996  173D  0856               	movf	??_find_best_solution+3,w
  4997  173E  00C4               	movwf	debug_int2@i2+1
  4998  173F  160A  158A  22DA  160A  118A  	fcall	_debug_int2
  4999                           
  5000                           ;teris_16f886.c: 1068: if(temp_risk < temp_pre_risk)
  5001  1744  1683               	bsf	3,5	;RP0=1, select bank3
  5002  1745  1703               	bsf	3,6	;RP1=1, select bank3
  5003  1746  0858               	movf	(_temp_pre_risk+1)^(0+384),w
  5004  1747  1683               	bsf	3,5	;RP0=1, select bank1
  5005  1748  1303               	bcf	3,6	;RP1=0, select bank1
  5006  1749  026A               	subwf	(_temp_risk+1)^(0+128),w
  5007  174A  1D03               	skipz
  5008  174B  2F52               	goto	u6695
  5009  174C  1683               	bsf	3,5	;RP0=1, select bank3
  5010  174D  1703               	bsf	3,6	;RP1=1, select bank3
  5011  174E  0857               	movf	_temp_pre_risk^(0+384),w
  5012  174F  1683               	bsf	3,5	;RP0=1, select bank1
  5013  1750  1303               	bcf	3,6	;RP1=0, select bank1
  5014  1751  0269               	subwf	_temp_risk^(0+128),w
  5015  1752                     u6695:	
  5016  1752  1803               	skipnc
  5017  1753  2FB1               	goto	l4993
  5018  1754                     L6:	
  5019                           
  5020                           ;teris_16f886.c: 1069: {
  5021                           ;teris_16f886.c: 1070: debug_int2("temp_risk(%d) < temp_pre_risk(%d)\n", temp_risk, temp
      +                          _pre_risk);
  5022  1754  3080               	movlw	low (STR_48| (0+32768))
  5023  1755  1283               	bcf	3,5	;RP0=0, select bank0
  5024  1756  1303               	bcf	3,6	;RP1=0, select bank0
  5025  1757  00BF               	movwf	debug_int2@f
  5026  1758  308B               	movlw	high (STR_48| (0+32768))
  5027  1759  00C0               	movwf	debug_int2@f+1
  5028  175A  1683               	bsf	3,5	;RP0=1, select bank1
  5029  175B  1303               	bcf	3,6	;RP1=0, select bank1
  5030  175C  086A               	movf	(_temp_risk+1)^(0+128),w
  5031  175D  1283               	bcf	3,5	;RP0=0, select bank0
  5032  175E  1303               	bcf	3,6	;RP1=0, select bank0
  5033  175F  00C2               	movwf	debug_int2@i1+1
  5034  1760  1683               	bsf	3,5	;RP0=1, select bank1
  5035  1761  1303               	bcf	3,6	;RP1=0, select bank1
  5036  1762  0869               	movf	_temp_risk^(0+128),w
  5037  1763  1283               	bcf	3,5	;RP0=0, select bank0
  5038  1764  1303               	bcf	3,6	;RP1=0, select bank0
  5039  1765  00C1               	movwf	debug_int2@i1
  5040  1766  1683               	bsf	3,5	;RP0=1, select bank3
  5041  1767  1703               	bsf	3,6	;RP1=1, select bank3
  5042  1768  0858               	movf	(_temp_pre_risk+1)^(0+384),w
  5043  1769  1283               	bcf	3,5	;RP0=0, select bank0
  5044  176A  1303               	bcf	3,6	;RP1=0, select bank0
  5045  176B  00C4               	movwf	debug_int2@i2+1
  5046  176C  1683               	bsf	3,5	;RP0=1, select bank3
  5047  176D  1703               	bsf	3,6	;RP1=1, select bank3
  5048  176E  0857               	movf	_temp_pre_risk^(0+384),w
  5049  176F  1283               	bcf	3,5	;RP0=0, select bank0
  5050  1770  1303               	bcf	3,6	;RP1=0, select bank0
  5051  1771  00C3               	movwf	debug_int2@i2
  5052  1772                     L2:	
  5053  1772  160A  158A  22DA  160A  118A  	fcall	_debug_int2
  5054                           
  5055                           ;teris_16f886.c: 1071: temp_pre_count = temp_count;
  5056  1777  1683               	bsf	3,5	;RP0=1, select bank1
  5057  1778  1303               	bcf	3,6	;RP1=0, select bank1
  5058  1779  086B               	movf	_temp_count^(0+128),w
  5059  177A  1283               	bcf	3,5	;RP0=0, select bank0
  5060  177B  1303               	bcf	3,6	;RP1=0, select bank0
  5061  177C  00D3               	movwf	??_find_best_solution
  5062  177D  0853               	movf	??_find_best_solution,w
  5063  177E  1683               	bsf	3,5	;RP0=1, select bank3
  5064  177F  1703               	bsf	3,6	;RP1=1, select bank3
  5065  1780  0097               	movwf	_temp_pre_count^(0+384)
  5066                           
  5067                           ;teris_16f886.c: 1072: temp_pre_risk = temp_risk;
  5068  1781  1683               	bsf	3,5	;RP0=1, select bank1
  5069  1782  1303               	bcf	3,6	;RP1=0, select bank1
  5070  1783  086A               	movf	(_temp_risk+1)^(0+128),w
  5071  1784  1683               	bsf	3,5	;RP0=1, select bank3
  5072  1785  1703               	bsf	3,6	;RP1=1, select bank3
  5073  1786  00D8               	movwf	(_temp_pre_risk+1)^(0+384)
  5074  1787  1683               	bsf	3,5	;RP0=1, select bank1
  5075  1788  1303               	bcf	3,6	;RP1=0, select bank1
  5076  1789  0869               	movf	_temp_risk^(0+128),w
  5077  178A  1683               	bsf	3,5	;RP0=1, select bank3
  5078  178B  1703               	bsf	3,6	;RP1=1, select bank3
  5079  178C  00D7               	movwf	_temp_pre_risk^(0+384)
  5080                           
  5081                           ;teris_16f886.c: 1073: temp_pre_high = temp_high;
  5082  178D  1683               	bsf	3,5	;RP0=1, select bank1
  5083  178E  1303               	bcf	3,6	;RP1=0, select bank1
  5084  178F  086C               	movf	_temp_high^(0+128),w
  5085  1790  1283               	bcf	3,5	;RP0=0, select bank0
  5086  1791  1303               	bcf	3,6	;RP1=0, select bank0
  5087  1792  00D3               	movwf	??_find_best_solution
  5088  1793  0853               	movf	??_find_best_solution,w
  5089  1794  1683               	bsf	3,5	;RP0=1, select bank1
  5090  1795  1303               	bcf	3,6	;RP1=0, select bank1
  5091  1796  00EF               	movwf	_temp_pre_high^(0+128)
  5092                           
  5093                           ;teris_16f886.c: 1074: temp_pre_hole = temp_hole;
  5094  1797  086D               	movf	_temp_hole^(0+128),w
  5095  1798  1283               	bcf	3,5	;RP0=0, select bank0
  5096  1799  1303               	bcf	3,6	;RP1=0, select bank0
  5097  179A  00D3               	movwf	??_find_best_solution
  5098  179B  0853               	movf	??_find_best_solution,w
  5099  179C  00EF               	movwf	_temp_pre_hole
  5100                           
  5101                           ;teris_16f886.c: 1075: tem_pre_sub_index = tem_sub_index;
  5102  179D  1683               	bsf	3,5	;RP0=1, select bank1
  5103  179E  1303               	bcf	3,6	;RP1=0, select bank1
  5104  179F  0867               	movf	find_best_solution@tem_sub_index^(0+128),w
  5105  17A0  1283               	bcf	3,5	;RP0=0, select bank0
  5106  17A1  1303               	bcf	3,6	;RP1=0, select bank0
  5107  17A2  00D3               	movwf	??_find_best_solution
  5108  17A3  0853               	movf	??_find_best_solution,w
  5109  17A4  1683               	bsf	3,5	;RP0=1, select bank3
  5110  17A5  1703               	bsf	3,6	;RP1=1, select bank3
  5111  17A6  00D9               	movwf	_tem_pre_sub_index^(0+384)
  5112                           
  5113                           ;teris_16f886.c: 1076: temp_pre_x = temp_x;
  5114  17A7  1683               	bsf	3,5	;RP0=1, select bank1
  5115  17A8  1303               	bcf	3,6	;RP1=0, select bank1
  5116  17A9  0868               	movf	find_best_solution@temp_x^(0+128),w
  5117  17AA  1283               	bcf	3,5	;RP0=0, select bank0
  5118  17AB  1303               	bcf	3,6	;RP1=0, select bank0
  5119  17AC  00D3               	movwf	??_find_best_solution
  5120  17AD  0853               	movf	??_find_best_solution,w
  5121  17AE  1683               	bsf	3,5	;RP0=1, select bank3
  5122  17AF  1703               	bsf	3,6	;RP1=1, select bank3
  5123  17B0  00DA               	movwf	_temp_pre_x^(0+384)
  5124  17B1                     l4993:	
  5125  17B1  3001               	movlw	1
  5126  17B2  1283               	bcf	3,5	;RP0=0, select bank0
  5127  17B3  1303               	bcf	3,6	;RP1=0, select bank0
  5128  17B4  00D3               	movwf	??_find_best_solution
  5129  17B5  0853               	movf	??_find_best_solution,w
  5130  17B6  1683               	bsf	3,5	;RP0=1, select bank1
  5131  17B7  1303               	bcf	3,6	;RP1=0, select bank1
  5132  17B8  07E8               	addwf	find_best_solution@temp_x^(0+128),f
  5133  17B9  2CD9               	goto	l4995
  5134  17BA                     l4997:	
  5135  17BA  3001               	movlw	1
  5136  17BB  00D3               	movwf	??_find_best_solution
  5137  17BC  0853               	movf	??_find_best_solution,w
  5138  17BD  1683               	bsf	3,5	;RP0=1, select bank1
  5139  17BE  1303               	bcf	3,6	;RP1=0, select bank1
  5140  17BF  07E7               	addwf	find_best_solution@tem_sub_index^(0+128),f
  5141  17C0  2C4A               	goto	l4999
  5142  17C1                     l5001:	
  5143                           
  5144                           ;teris_16f886.c: 1077: }
  5145                           ;teris_16f886.c: 1078: }
  5146                           ;teris_16f886.c: 1079: }
  5147                           ;teris_16f886.c: 1080: }
  5148                           ;teris_16f886.c: 1081: }
  5149                           ;teris_16f886.c: 1088: }
  5150                           ;teris_16f886.c: 1089: }
  5151                           ;teris_16f886.c: 1090: if(res == 1)
  5152  17C1  0324               	decf	find_best_solution@res^(0+128),w
  5153  17C2  1D03               	btfss	3,2
  5154  17C3  2FF5               	goto	l5009
  5155                           
  5156                           ;teris_16f886.c: 1091: {
  5157                           ;teris_16f886.c: 1092: g_char_info[g_char_info_index].cur_index = tem_pre_sub_index;
  5158  17C4  1683               	bsf	3,5	;RP0=1, select bank3
  5159  17C5  1703               	bsf	3,6	;RP1=1, select bank3
  5160  17C6  0859               	movf	_tem_pre_sub_index^(0+384),w
  5161  17C7  1283               	bcf	3,5	;RP0=0, select bank0
  5162  17C8  1303               	bcf	3,6	;RP1=0, select bank0
  5163  17C9  00D3               	movwf	??_find_best_solution
  5164  17CA  3003               	movlw	3
  5165  17CB  00D4               	movwf	??_find_best_solution+1
  5166  17CC  0854               	movf	??_find_best_solution+1,w
  5167  17CD  00F0               	movwf	___bmul@multiplicand
  5168  17CE  086B               	movf	_g_char_info_index,w
  5169  17CF  160A  158A  21C6  160A  118A  	fcall	___bmul
  5170  17D4  3E01               	addlw	1
  5171  17D5  3EB8               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5172  17D6  0084               	movwf	4
  5173  17D7  1283               	bcf	3,5	;RP0=0, select bank0
  5174  17D8  1303               	bcf	3,6	;RP1=0, select bank0
  5175  17D9  0853               	movf	??_find_best_solution,w
  5176  17DA  1783               	bsf	3,7	;select IRP bank3
  5177  17DB  0080               	movwf	0
  5178                           
  5179                           ;teris_16f886.c: 1093: cur_x = temp_pre_x;
  5180  17DC  1683               	bsf	3,5	;RP0=1, select bank3
  5181  17DD  1703               	bsf	3,6	;RP1=1, select bank3
  5182  17DE  085A               	movf	_temp_pre_x^(0+384),w
  5183  17DF  1283               	bcf	3,5	;RP0=0, select bank0
  5184  17E0  1303               	bcf	3,6	;RP1=0, select bank0
  5185  17E1  00D3               	movwf	??_find_best_solution
  5186  17E2  0853               	movf	??_find_best_solution,w
  5187  17E3  1683               	bsf	3,5	;RP0=1, select bank1
  5188  17E4  1303               	bcf	3,6	;RP1=0, select bank1
  5189  17E5  00EE               	movwf	_cur_x^(0+128)
  5190                           
  5191                           ;teris_16f886.c: 1094: printf_console_cur_MATRIX44(cur_x, cur_y);
  5192  17E6  1283               	bcf	3,5	;RP0=0, select bank0
  5193  17E7  1303               	bcf	3,6	;RP1=0, select bank0
  5194  17E8  086A               	movf	_cur_y,w
  5195  17E9  00D3               	movwf	??_find_best_solution
  5196  17EA  0853               	movf	??_find_best_solution,w
  5197  17EB  00FB               	movwf	printf_console_cur_MATRIX44@y
  5198  17EC  1683               	bsf	3,5	;RP0=1, select bank1
  5199  17ED  1303               	bcf	3,6	;RP1=0, select bank1
  5200  17EE  086E               	movf	_cur_x^(0+128),w
  5201  17EF  160A  158A  264E  160A  118A  	fcall	_printf_console_cur_MATRIX44
  5202                           
  5203                           ;teris_16f886.c: 1101: }
  5204  17F4  2FFC               	goto	l5011
  5205  17F5                     l5009:	
  5206                           
  5207                           ;teris_16f886.c: 1102: else
  5208                           ;teris_16f886.c: 1103: {
  5209                           ;teris_16f886.c: 1104: debug_line("GAME OVER!!!");
  5210  17F5  3041               	movlw	low (STR_60| (0+32768))
  5211  17F6  00F3               	movwf	debug_line@str
  5212  17F7  308E               	movlw	high (STR_60| (0+32768))
  5213  17F8  00F4               	movwf	debug_line@str+1
  5214  17F9  160A  158A  21D7   	fcall	_debug_line
  5215  17FC                     l5011:	
  5216                           
  5217                           ;teris_16f886.c: 1105: }
  5218                           ;teris_16f886.c: 1106: return res;
  5219  17FC  1683               	bsf	3,5	;RP0=1, select bank1
  5220  17FD  1303               	bcf	3,6	;RP1=0, select bank1
  5221  17FE  0824               	movf	find_best_solution@res^(0+128),w
  5222  17FF  0008               	return
  5223  1800                     __end_of_find_best_solution:	
  5224                           
  5225                           	psect	text5
  5226  1BE2                     __ptext5:	
  5227 ;; *************** function _right_most *****************
  5228 ;; Defined at:
  5229 ;;		line 833 in file "teris_16f886.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;  x               1    wreg     char 
  5232 ;;  matrix44        2   35[BANK0 ] PTR const struct .
  5233 ;;		 -> g_matrix44(384), 
  5234 ;;  matrix88        1   37[BANK0 ] PTR const struct .
  5235 ;;		 -> g_matrix88(64), 
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;  x               1   40[BANK0 ] char 
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  1    wreg      char 
  5240 ;; Registers used:
  5241 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5247 ;;      Params:         0       3       0       0       0
  5248 ;;      Locals:         0       1       0       0       0
  5249 ;;      Temps:          0       2       0       0       0
  5250 ;;      Totals:         0       6       0       0       0
  5251 ;;Total ram usage:        6 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    4
  5254 ;; This function calls:
  5255 ;;		_debug_int1
  5256 ;;		_is_right_boundary
  5257 ;; This function is called by:
  5258 ;;		_find_best_solution
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           
  5263                           ;psect for function _right_most
  5264  1BE2                     _right_most:	
  5265                           
  5266                           ;incstack = 0
  5267                           ; Regs used in _right_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5268                           ;right_most@x stored from wreg
  5269  1BE2  1283               	bcf	3,5	;RP0=0, select bank0
  5270  1BE3  1303               	bcf	3,6	;RP1=0, select bank0
  5271  1BE4  00C8               	movwf	right_most@x
  5272  1BE5                     l380:	
  5273                           ;teris_16f886.c: 835: while(1)
  5274                           
  5275                           
  5276                           ;teris_16f886.c: 836: {
  5277                           ;teris_16f886.c: 837: if(is_right_boundary(x, matrix44, matrix88) == RIGHT_OVER_BOUNDARY
      +                          )
  5278  1BE5  0843               	movf	right_most@matrix44,w
  5279  1BE6  00F5               	movwf	is_right_boundary@matrix44
  5280  1BE7  0844               	movf	right_most@matrix44+1,w
  5281  1BE8  00F6               	movwf	is_right_boundary@matrix44+1
  5282  1BE9  0845               	movf	right_most@matrix88,w
  5283  1BEA  00C6               	movwf	??_right_most
  5284  1BEB  0846               	movf	??_right_most,w
  5285  1BEC  00F7               	movwf	is_right_boundary@matrix88
  5286  1BED  0848               	movf	right_most@x,w
  5287  1BEE  160A  118A  201E  160A  158A  	fcall	_is_right_boundary
  5288  1BF3  3A03               	xorlw	3
  5289  1BF4  1D03               	skipz
  5290  1BF5  2C11               	goto	l3845
  5291                           
  5292                           ;teris_16f886.c: 838: {
  5293                           ;teris_16f886.c: 839: debug_int1("right_most = %d\n", x - 1);
  5294  1BF6  3002               	movlw	low (STR_38| (0+32768))
  5295  1BF7  1283               	bcf	3,5	;RP0=0, select bank0
  5296  1BF8  1303               	bcf	3,6	;RP1=0, select bank0
  5297  1BF9  00BF               	movwf	debug_int1@f
  5298  1BFA  308E               	movlw	high (STR_38| (0+32768))
  5299  1BFB  00C0               	movwf	debug_int1@f+1
  5300  1BFC  0848               	movf	right_most@x,w
  5301  1BFD  00C6               	movwf	??_right_most
  5302  1BFE  01C7               	clrf	??_right_most+1
  5303  1BFF  1BC6               	btfsc	??_right_most,7
  5304  1C00  03C7               	decf	??_right_most+1,f
  5305  1C01  0846               	movf	??_right_most,w
  5306  1C02  3EFF               	addlw	255
  5307  1C03  00C1               	movwf	debug_int1@i
  5308  1C04  0847               	movf	??_right_most+1,w
  5309  1C05  1803               	skipnc
  5310  1C06  3E01               	addlw	1
  5311  1C07  3EFF               	addlw	255
  5312  1C08  00C2               	movwf	debug_int1@i+1
  5313  1C09  160A  158A  2273   	fcall	_debug_int1
  5314                           
  5315                           ;teris_16f886.c: 840: return x - 1;
  5316  1C0C  1283               	bcf	3,5	;RP0=0, select bank0
  5317  1C0D  1303               	bcf	3,6	;RP1=0, select bank0
  5318  1C0E  0848               	movf	right_most@x,w
  5319  1C0F  3EFF               	addlw	-1
  5320  1C10  0008               	return
  5321  1C11                     l3845:	
  5322                           
  5323                           ;teris_16f886.c: 841: }
  5324                           ;teris_16f886.c: 842: x++;
  5325  1C11  3001               	movlw	1
  5326  1C12  1283               	bcf	3,5	;RP0=0, select bank0
  5327  1C13  1303               	bcf	3,6	;RP1=0, select bank0
  5328  1C14  00C6               	movwf	??_right_most
  5329  1C15  0846               	movf	??_right_most,w
  5330  1C16  07C8               	addwf	right_most@x,f
  5331  1C17  2BE5               	goto	l380
  5332  1C18                     __end_of_right_most:	
  5333                           
  5334                           	psect	text6
  5335  101E                     __ptext6:	
  5336 ;; *************** function _is_right_boundary *****************
  5337 ;; Defined at:
  5338 ;;		line 696 in file "teris_16f886.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;  x               1    wreg     char 
  5341 ;;  matrix44        2    5[COMMON] PTR const struct .
  5342 ;;		 -> g_matrix44(384), 
  5343 ;;  matrix88        1    7[COMMON] PTR const struct .
  5344 ;;		 -> g_matrix88(64), 
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;  x               1    0[BANK0 ] char 
  5347 ;;  col             1    2[BANK0 ] char 
  5348 ;;  row             1    1[BANK0 ] char 
  5349 ;; Return value:  Size  Location     Type
  5350 ;;                  1    wreg      unsigned char 
  5351 ;; Registers used:
  5352 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5358 ;;      Params:         3       0       0       0       0
  5359 ;;      Locals:         0       3       0       0       0
  5360 ;;      Temps:          4       0       0       0       0
  5361 ;;      Totals:         7       3       0       0       0
  5362 ;;Total ram usage:       10 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    3
  5365 ;; This function calls:
  5366 ;;		_debug_line
  5367 ;; This function is called by:
  5368 ;;		_right_most
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           
  5373                           ;psect for function _is_right_boundary
  5374  101E                     _is_right_boundary:	
  5375                           
  5376                           ;incstack = 0
  5377                           ; Regs used in _is_right_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5378                           ;is_right_boundary@x stored from wreg
  5379  101E  1283               	bcf	3,5	;RP0=0, select bank0
  5380  101F  1303               	bcf	3,6	;RP1=0, select bank0
  5381  1020  00A0               	movwf	is_right_boundary@x
  5382                           
  5383                           ;teris_16f886.c: 698: for(int8_t row = 4 - 1; row >= 0; row--)
  5384  1021  3003               	movlw	3
  5385  1022  00F8               	movwf	??_is_right_boundary
  5386  1023  0878               	movf	??_is_right_boundary,w
  5387  1024  00A1               	movwf	is_right_boundary@row
  5388  1025  1BA1               	btfsc	is_right_boundary@row,7
  5389  1026  287C               	goto	l3609
  5390  1027                     l3585:	
  5391                           
  5392                           ;teris_16f886.c: 699: {
  5393                           ;teris_16f886.c: 700: for(int8_t col = 0; col < 4; col++)
  5394  1027  01A2               	clrf	is_right_boundary@col
  5395  1028  0822               	movf	is_right_boundary@col,w
  5396  1029  3A80               	xorlw	128
  5397  102A  3E7C               	addlw	-132
  5398  102B  1803               	btfsc	3,0
  5399  102C  2876               	goto	l3605
  5400  102D                     l3591:	
  5401                           
  5402                           ;teris_16f886.c: 701: {
  5403                           ;teris_16f886.c: 702: if(matrix44->data[row][col] == 1)
  5404  102D  0821               	movf	is_right_boundary@row,w
  5405  102E  00F8               	movwf	??_is_right_boundary
  5406  102F  01F9               	clrf	??_is_right_boundary+1
  5407  1030  1003               	clrc
  5408  1031  0DF8               	rlf	??_is_right_boundary,f
  5409  1032  0DF9               	rlf	??_is_right_boundary+1,f
  5410  1033  1003               	clrc
  5411  1034  0DF8               	rlf	??_is_right_boundary,f
  5412  1035  0DF9               	rlf	??_is_right_boundary+1,f
  5413  1036  0878               	movf	??_is_right_boundary,w
  5414  1037  0775               	addwf	is_right_boundary@matrix44,w
  5415  1038  00FA               	movwf	??_is_right_boundary+2
  5416  1039  0879               	movf	??_is_right_boundary+1,w
  5417  103A  1803               	skipnc
  5418  103B  0A79               	incf	??_is_right_boundary+1,w
  5419  103C  0776               	addwf	is_right_boundary@matrix44+1,w
  5420  103D  00FB               	movwf	??_is_right_boundary+3
  5421  103E  0822               	movf	is_right_boundary@col,w
  5422  103F  077A               	addwf	??_is_right_boundary+2,w
  5423  1040  0084               	movwf	4
  5424  1041  087B               	movf	??_is_right_boundary+3,w
  5425  1042  1803               	skipnc
  5426  1043  0A7B               	incf	??_is_right_boundary+3,w
  5427  1044  00FF               	movwf	127
  5428  1045  120A  158A  2000  160A  118A  	fcall	stringtab
  5429  104A  3A01               	xorlw	1
  5430  104B  1D03               	skipz
  5431  104C  286B               	goto	l3601
  5432                           
  5433                           ;teris_16f886.c: 703: {
  5434                           ;teris_16f886.c: 704: if(x + col > 8 - 1)
  5435  104D  0820               	movf	is_right_boundary@x,w
  5436  104E  0722               	addwf	is_right_boundary@col,w
  5437  104F  00F8               	movwf	??_is_right_boundary
  5438  1050  01F9               	clrf	??_is_right_boundary+1
  5439  1051  1803               	skipnc
  5440  1052  0AF9               	incf	??_is_right_boundary+1,f
  5441  1053  1BA0               	btfsc	is_right_boundary@x,7
  5442  1054  03F9               	decf	??_is_right_boundary+1,f
  5443  1055  1BA2               	btfsc	is_right_boundary@col,7
  5444  1056  03F9               	decf	??_is_right_boundary+1,f
  5445  1057  0879               	movf	??_is_right_boundary+1,w
  5446  1058  3A80               	xorlw	128
  5447  1059  00FF               	movwf	127
  5448  105A  3080               	movlw	128
  5449  105B  027F               	subwf	127,w
  5450  105C  1D03               	skipz
  5451  105D  2860               	goto	u4505
  5452  105E  3008               	movlw	8
  5453  105F  0278               	subwf	??_is_right_boundary,w
  5454  1060                     u4505:	
  5455  1060  1C03               	skipc
  5456  1061  286B               	goto	l3601
  5457                           
  5458                           ;teris_16f886.c: 705: {
  5459                           ;teris_16f886.c: 706: debug_line("RIGHT_OVER_BOUNDARY");
  5460  1062  30A8               	movlw	low (STR_33| (0+32768))
  5461  1063  00F3               	movwf	debug_line@str
  5462  1064  308D               	movlw	high (STR_33| (0+32768))
  5463  1065  00F4               	movwf	debug_line@str+1
  5464  1066  160A  158A  21D7   	fcall	_debug_line
  5465                           
  5466                           ;teris_16f886.c: 707: return RIGHT_OVER_BOUNDARY;
  5467  1069  3003               	movlw	3
  5468  106A  0008               	return
  5469  106B                     l3601:	
  5470  106B  3001               	movlw	1
  5471  106C  00F8               	movwf	??_is_right_boundary
  5472  106D  0878               	movf	??_is_right_boundary,w
  5473  106E  1283               	bcf	3,5	;RP0=0, select bank0
  5474  106F  1303               	bcf	3,6	;RP1=0, select bank0
  5475  1070  07A2               	addwf	is_right_boundary@col,f
  5476  1071  0822               	movf	is_right_boundary@col,w
  5477  1072  3A80               	xorlw	128
  5478  1073  3E7C               	addlw	-132
  5479  1074  1C03               	skipc
  5480  1075  282D               	goto	l3591
  5481  1076                     l3605:	
  5482  1076  30FF               	movlw	255
  5483  1077  00F8               	movwf	??_is_right_boundary
  5484  1078  0878               	movf	??_is_right_boundary,w
  5485  1079  07A1               	addwf	is_right_boundary@row,f
  5486  107A  1FA1               	btfss	is_right_boundary@row,7
  5487  107B  2827               	goto	l3585
  5488  107C                     l3609:	
  5489                           
  5490                           ;teris_16f886.c: 708: }
  5491                           ;teris_16f886.c: 709: }
  5492                           ;teris_16f886.c: 710: }
  5493                           ;teris_16f886.c: 711: }
  5494                           ;teris_16f886.c: 712: return OK;
  5495  107C  3000               	movlw	0
  5496  107D  0008               	return
  5497  107E                     __end_of_is_right_boundary:	
  5498                           
  5499                           	psect	text7
  5500  1E4E                     __ptext7:	
  5501 ;; *************** function _printf_console_cur_MATRIX44 *****************
  5502 ;; Defined at:
  5503 ;;		line 358 in file "teris_16f886.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  x               1    wreg     char 
  5506 ;;  y               1   11[COMMON] char 
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;  x               1   20[BANK0 ] char 
  5509 ;;  matrix          2   18[BANK0 ] PTR struct .
  5510 ;;		 -> g_matrix44(384), 
  5511 ;; Return value:  Size  Location     Type
  5512 ;;                  1    wreg      void 
  5513 ;; Registers used:
  5514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5520 ;;      Params:         1       0       0       0       0
  5521 ;;      Locals:         0       3       0       0       0
  5522 ;;      Temps:          0       9       0       0       0
  5523 ;;      Totals:         1      12       0       0       0
  5524 ;;Total ram usage:       13 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    4
  5527 ;; This function calls:
  5528 ;;		___bmul
  5529 ;;		_printf_console_MATRIX44
  5530 ;; This function is called by:
  5531 ;;		_find_best_solution
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           
  5536                           ;psect for function _printf_console_cur_MATRIX44
  5537  1E4E                     _printf_console_cur_MATRIX44:	
  5538                           
  5539                           ;incstack = 0
  5540                           ; Regs used in _printf_console_cur_MATRIX44: [wreg-fsr0h+status,2+status,0+btemp+1+pclat
      +                          h+cstack]
  5541                           ;printf_console_cur_MATRIX44@x stored from wreg
  5542  1E4E  1283               	bcf	3,5	;RP0=0, select bank0
  5543  1E4F  1303               	bcf	3,6	;RP1=0, select bank0
  5544  1E50  00B4               	movwf	printf_console_cur_MATRIX44@x
  5545                           
  5546                           ;teris_16f886.c: 360: MATRIX44* matrix = &g_matrix44[g_char_info[g_char_info_index].star
      +                          t_index + g_char_info[g_char_info_index].cur_index];
  5547  1E51  3003               	movlw	3
  5548  1E52  00A9               	movwf	??_printf_console_cur_MATRIX44
  5549  1E53  0829               	movf	??_printf_console_cur_MATRIX44,w
  5550  1E54  00F0               	movwf	___bmul@multiplicand
  5551  1E55  086B               	movf	_g_char_info_index,w
  5552  1E56  160A  158A  21C6  160A  158A  	fcall	___bmul
  5553  1E5B  3E01               	addlw	1
  5554  1E5C  3EB8               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5555  1E5D  0084               	movwf	4
  5556  1E5E  1783               	bsf	3,7	;select IRP bank3
  5557  1E5F  0800               	movf	0,w
  5558  1E60  1283               	bcf	3,5	;RP0=0, select bank0
  5559  1E61  1303               	bcf	3,6	;RP1=0, select bank0
  5560  1E62  00AA               	movwf	??_printf_console_cur_MATRIX44+1
  5561  1E63  3003               	movlw	3
  5562  1E64  00AB               	movwf	??_printf_console_cur_MATRIX44+2
  5563  1E65  082B               	movf	??_printf_console_cur_MATRIX44+2,w
  5564  1E66  00F0               	movwf	___bmul@multiplicand
  5565  1E67  086B               	movf	_g_char_info_index,w
  5566  1E68  160A  158A  21C6  160A  158A  	fcall	___bmul
  5567  1E6D  3EB8               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5568  1E6E  0084               	movwf	4
  5569  1E6F  1783               	bsf	3,7	;select IRP bank3
  5570  1E70  0800               	movf	0,w
  5571  1E71  1283               	bcf	3,5	;RP0=0, select bank0
  5572  1E72  1303               	bcf	3,6	;RP1=0, select bank0
  5573  1E73  072A               	addwf	??_printf_console_cur_MATRIX44+1,w
  5574  1E74  00AC               	movwf	??_printf_console_cur_MATRIX44+3
  5575  1E75  01AD               	clrf	??_printf_console_cur_MATRIX44+4
  5576  1E76  0DAD               	rlf	??_printf_console_cur_MATRIX44+4,f
  5577  1E77  0EAC               	swapf	??_printf_console_cur_MATRIX44+3,f
  5578  1E78  0EAD               	swapf	??_printf_console_cur_MATRIX44+4,f
  5579  1E79  30F0               	movlw	240
  5580  1E7A  05AD               	andwf	??_printf_console_cur_MATRIX44+4,f
  5581  1E7B  082C               	movf	??_printf_console_cur_MATRIX44+3,w
  5582  1E7C  390F               	andlw	15
  5583  1E7D  04AD               	iorwf	??_printf_console_cur_MATRIX44+4,f
  5584  1E7E  30F0               	movlw	240
  5585  1E7F  05AC               	andwf	??_printf_console_cur_MATRIX44+3,f
  5586  1E80  3030               	movlw	low (_g_matrix44| (0+32768))
  5587  1E81  00AE               	movwf	??_printf_console_cur_MATRIX44+5
  5588  1E82  3088               	movlw	high (_g_matrix44| (0+32768))
  5589  1E83  00AF               	movwf	??_printf_console_cur_MATRIX44+6
  5590  1E84  082C               	movf	??_printf_console_cur_MATRIX44+3,w
  5591  1E85  072E               	addwf	??_printf_console_cur_MATRIX44+5,w
  5592  1E86  00B0               	movwf	??_printf_console_cur_MATRIX44+7
  5593  1E87  082D               	movf	??_printf_console_cur_MATRIX44+4,w
  5594  1E88  1803               	skipnc
  5595  1E89  0A2D               	incf	??_printf_console_cur_MATRIX44+4,w
  5596  1E8A  072F               	addwf	??_printf_console_cur_MATRIX44+6,w
  5597  1E8B  00B1               	movwf	??_printf_console_cur_MATRIX44+8
  5598  1E8C  0830               	movf	??_printf_console_cur_MATRIX44+7,w
  5599  1E8D  00B2               	movwf	printf_console_cur_MATRIX44@matrix
  5600  1E8E  0831               	movf	??_printf_console_cur_MATRIX44+8,w
  5601  1E8F  00B3               	movwf	printf_console_cur_MATRIX44@matrix+1
  5602                           
  5603                           ;teris_16f886.c: 361: printf_console_MATRIX44(x, y, matrix);
  5604  1E90  087B               	movf	printf_console_cur_MATRIX44@y,w
  5605  1E91  00A9               	movwf	??_printf_console_cur_MATRIX44
  5606  1E92  0829               	movf	??_printf_console_cur_MATRIX44,w
  5607  1E93  00F5               	movwf	printf_console_MATRIX44@y
  5608  1E94  0832               	movf	printf_console_cur_MATRIX44@matrix,w
  5609  1E95  00F6               	movwf	printf_console_MATRIX44@matrix
  5610  1E96  0833               	movf	printf_console_cur_MATRIX44@matrix+1,w
  5611  1E97  00F7               	movwf	printf_console_MATRIX44@matrix+1
  5612  1E98  0834               	movf	printf_console_cur_MATRIX44@x,w
  5613  1E99  120A  158A  2701   	fcall	_printf_console_MATRIX44
  5614  1E9C  0008               	return
  5615  1E9D                     __end_of_printf_console_cur_MATRIX44:	
  5616                           
  5617                           	psect	text8
  5618  0F01                     __ptext8:	
  5619 ;; *************** function _printf_console_MATRIX44 *****************
  5620 ;; Defined at:
  5621 ;;		line 336 in file "teris_16f886.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  x               1    wreg     char 
  5624 ;;  y               1    5[COMMON] char 
  5625 ;;  matrix          2    6[COMMON] PTR const struct .
  5626 ;;		 -> g_matrix44(384), 
  5627 ;; Auto vars:     Size  Location     Type
  5628 ;;  x               1    8[COMMON] char 
  5629 ;;  col             1   10[COMMON] char 
  5630 ;;  row             1    9[COMMON] char 
  5631 ;; Return value:  Size  Location     Type
  5632 ;;                  1    wreg      void 
  5633 ;; Registers used:
  5634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5640 ;;      Params:         3       0       0       0       0
  5641 ;;      Locals:         3       0       0       0       0
  5642 ;;      Temps:          0       9       0       0       0
  5643 ;;      Totals:         6       9       0       0       0
  5644 ;;Total ram usage:       15 bytes
  5645 ;; Hardware stack levels used:    1
  5646 ;; Hardware stack levels required when called:    3
  5647 ;; This function calls:
  5648 ;;		_debug_line
  5649 ;;		_debug_str
  5650 ;; This function is called by:
  5651 ;;		_printf_console_cur_MATRIX44
  5652 ;;		_find_best_solution
  5653 ;;		_printf_console_all_MATRIX44
  5654 ;; This function uses a non-reentrant model
  5655 ;;
  5656                           
  5657                           
  5658                           ;psect for function _printf_console_MATRIX44
  5659  0F01                     _printf_console_MATRIX44:	
  5660                           
  5661                           ;incstack = 0
  5662                           ; Regs used in _printf_console_MATRIX44: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  5663                           ;printf_console_MATRIX44@x stored from wreg
  5664  0F01  00F8               	movwf	printf_console_MATRIX44@x
  5665                           
  5666                           ;teris_16f886.c: 338: debug_line("<<<<<<<<<<<<<<<<<<<<MATRIX44");
  5667  0F02  3082               	movlw	low (STR_5| (0+32768))
  5668  0F03  00F3               	movwf	debug_line@str
  5669  0F04  308C               	movlw	high (STR_5| (0+32768))
  5670  0F05  00F4               	movwf	debug_line@str+1
  5671  0F06  160A  158A  21D7  120A  158A  	fcall	_debug_line
  5672                           
  5673                           ;teris_16f886.c: 339: for(int8_t row = 0; row < 8; row++)
  5674  0F0B  01F9               	clrf	printf_console_MATRIX44@row
  5675  0F0C  0879               	movf	printf_console_MATRIX44@row,w
  5676  0F0D  3A80               	xorlw	128
  5677  0F0E  3E78               	addlw	-136
  5678  0F0F  1803               	btfsc	3,0
  5679  0F10  2FF8               	goto	l3449
  5680  0F11                     l3419:	
  5681                           
  5682                           ;teris_16f886.c: 340: {
  5683                           ;teris_16f886.c: 341: for(int8_t col = 0; col < 8; col++)
  5684  0F11  01FA               	clrf	printf_console_MATRIX44@col
  5685  0F12  087A               	movf	printf_console_MATRIX44@col,w
  5686  0F13  3A80               	xorlw	128
  5687  0F14  3E78               	addlw	-136
  5688  0F15  1803               	btfsc	3,0
  5689  0F16  2FE4               	goto	l3443
  5690  0F17                     l3425:	
  5691                           
  5692                           ;teris_16f886.c: 342: {
  5693                           ;teris_16f886.c: 343: if((row - y >= 0) && (row - y < 4)
  5694                           ;teris_16f886.c: 344: && (col - x >= 0) && (col - x < 4)
  5695                           ;teris_16f886.c: 345: && (matrix->data[row - y][col - x] == 1))
  5696  0F17  0875               	movf	printf_console_MATRIX44@y,w
  5697  0F18  1283               	bcf	3,5	;RP0=0, select bank0
  5698  0F19  1303               	bcf	3,6	;RP1=0, select bank0
  5699  0F1A  00A0               	movwf	??_printf_console_MATRIX44
  5700  0F1B  01A1               	clrf	??_printf_console_MATRIX44+1
  5701  0F1C  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5702  0F1D  03A1               	decf	??_printf_console_MATRIX44+1,f
  5703  0F1E  09A0               	comf	??_printf_console_MATRIX44,f
  5704  0F1F  09A1               	comf	??_printf_console_MATRIX44+1,f
  5705  0F20  0AA0               	incf	??_printf_console_MATRIX44,f
  5706  0F21  1903               	skipnz
  5707  0F22  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5708  0F23  0879               	movf	printf_console_MATRIX44@row,w
  5709  0F24  00A2               	movwf	??_printf_console_MATRIX44+2
  5710  0F25  01A3               	clrf	??_printf_console_MATRIX44+3
  5711  0F26  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5712  0F27  03A3               	decf	??_printf_console_MATRIX44+3,f
  5713  0F28  0820               	movf	??_printf_console_MATRIX44,w
  5714  0F29  0722               	addwf	??_printf_console_MATRIX44+2,w
  5715  0F2A  00A4               	movwf	??_printf_console_MATRIX44+4
  5716  0F2B  0821               	movf	??_printf_console_MATRIX44+1,w
  5717  0F2C  1803               	skipnc
  5718  0F2D  0A21               	incf	??_printf_console_MATRIX44+1,w
  5719  0F2E  0723               	addwf	??_printf_console_MATRIX44+3,w
  5720  0F2F  00A5               	movwf	??_printf_console_MATRIX44+5
  5721  0F30  1BA5               	btfsc	??_printf_console_MATRIX44+5,7
  5722  0F31  2FD0               	goto	l3437
  5723  0F32  0875               	movf	printf_console_MATRIX44@y,w
  5724  0F33  00A0               	movwf	??_printf_console_MATRIX44
  5725  0F34  01A1               	clrf	??_printf_console_MATRIX44+1
  5726  0F35  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5727  0F36  03A1               	decf	??_printf_console_MATRIX44+1,f
  5728  0F37  09A0               	comf	??_printf_console_MATRIX44,f
  5729  0F38  09A1               	comf	??_printf_console_MATRIX44+1,f
  5730  0F39  0AA0               	incf	??_printf_console_MATRIX44,f
  5731  0F3A  1903               	skipnz
  5732  0F3B  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5733  0F3C  0879               	movf	printf_console_MATRIX44@row,w
  5734  0F3D  00A2               	movwf	??_printf_console_MATRIX44+2
  5735  0F3E  01A3               	clrf	??_printf_console_MATRIX44+3
  5736  0F3F  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5737  0F40  03A3               	decf	??_printf_console_MATRIX44+3,f
  5738  0F41  0820               	movf	??_printf_console_MATRIX44,w
  5739  0F42  0722               	addwf	??_printf_console_MATRIX44+2,w
  5740  0F43  00A4               	movwf	??_printf_console_MATRIX44+4
  5741  0F44  0821               	movf	??_printf_console_MATRIX44+1,w
  5742  0F45  1803               	skipnc
  5743  0F46  0A21               	incf	??_printf_console_MATRIX44+1,w
  5744  0F47  0723               	addwf	??_printf_console_MATRIX44+3,w
  5745  0F48  00A5               	movwf	??_printf_console_MATRIX44+5
  5746  0F49  0825               	movf	??_printf_console_MATRIX44+5,w
  5747  0F4A  3A80               	xorlw	128
  5748  0F4B  00FF               	movwf	127
  5749  0F4C  3080               	movlw	128
  5750  0F4D  027F               	subwf	127,w
  5751  0F4E  1D03               	skipz
  5752  0F4F  2F52               	goto	u4125
  5753  0F50  3004               	movlw	4
  5754  0F51  0224               	subwf	??_printf_console_MATRIX44+4,w
  5755  0F52                     u4125:	
  5756  0F52  1803               	skipnc
  5757  0F53  2FD0               	goto	l3437
  5758  0F54  0878               	movf	printf_console_MATRIX44@x,w
  5759  0F55  1283               	bcf	3,5	;RP0=0, select bank0
  5760  0F56  1303               	bcf	3,6	;RP1=0, select bank0
  5761  0F57  00A0               	movwf	??_printf_console_MATRIX44
  5762  0F58  01A1               	clrf	??_printf_console_MATRIX44+1
  5763  0F59  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5764  0F5A  03A1               	decf	??_printf_console_MATRIX44+1,f
  5765  0F5B  09A0               	comf	??_printf_console_MATRIX44,f
  5766  0F5C  09A1               	comf	??_printf_console_MATRIX44+1,f
  5767  0F5D  0AA0               	incf	??_printf_console_MATRIX44,f
  5768  0F5E  1903               	skipnz
  5769  0F5F  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5770  0F60  087A               	movf	printf_console_MATRIX44@col,w
  5771  0F61  00A2               	movwf	??_printf_console_MATRIX44+2
  5772  0F62  01A3               	clrf	??_printf_console_MATRIX44+3
  5773  0F63  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5774  0F64  03A3               	decf	??_printf_console_MATRIX44+3,f
  5775  0F65  0820               	movf	??_printf_console_MATRIX44,w
  5776  0F66  0722               	addwf	??_printf_console_MATRIX44+2,w
  5777  0F67  00A4               	movwf	??_printf_console_MATRIX44+4
  5778  0F68  0821               	movf	??_printf_console_MATRIX44+1,w
  5779  0F69  1803               	skipnc
  5780  0F6A  0A21               	incf	??_printf_console_MATRIX44+1,w
  5781  0F6B  0723               	addwf	??_printf_console_MATRIX44+3,w
  5782  0F6C  00A5               	movwf	??_printf_console_MATRIX44+5
  5783  0F6D  1BA5               	btfsc	??_printf_console_MATRIX44+5,7
  5784  0F6E  2FD0               	goto	l3437
  5785  0F6F  0878               	movf	printf_console_MATRIX44@x,w
  5786  0F70  00A0               	movwf	??_printf_console_MATRIX44
  5787  0F71  01A1               	clrf	??_printf_console_MATRIX44+1
  5788  0F72  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5789  0F73  03A1               	decf	??_printf_console_MATRIX44+1,f
  5790  0F74  09A0               	comf	??_printf_console_MATRIX44,f
  5791  0F75  09A1               	comf	??_printf_console_MATRIX44+1,f
  5792  0F76  0AA0               	incf	??_printf_console_MATRIX44,f
  5793  0F77  1903               	skipnz
  5794  0F78  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5795  0F79  087A               	movf	printf_console_MATRIX44@col,w
  5796  0F7A  00A2               	movwf	??_printf_console_MATRIX44+2
  5797  0F7B  01A3               	clrf	??_printf_console_MATRIX44+3
  5798  0F7C  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5799  0F7D  03A3               	decf	??_printf_console_MATRIX44+3,f
  5800  0F7E  0820               	movf	??_printf_console_MATRIX44,w
  5801  0F7F  0722               	addwf	??_printf_console_MATRIX44+2,w
  5802  0F80  00A4               	movwf	??_printf_console_MATRIX44+4
  5803  0F81  0821               	movf	??_printf_console_MATRIX44+1,w
  5804  0F82  1803               	skipnc
  5805  0F83  0A21               	incf	??_printf_console_MATRIX44+1,w
  5806  0F84  0723               	addwf	??_printf_console_MATRIX44+3,w
  5807  0F85  00A5               	movwf	??_printf_console_MATRIX44+5
  5808  0F86  0825               	movf	??_printf_console_MATRIX44+5,w
  5809  0F87  3A80               	xorlw	128
  5810  0F88  00FF               	movwf	127
  5811  0F89  3080               	movlw	128
  5812  0F8A  027F               	subwf	127,w
  5813  0F8B  1D03               	skipz
  5814  0F8C  2F8F               	goto	u4145
  5815  0F8D  3004               	movlw	4
  5816  0F8E  0224               	subwf	??_printf_console_MATRIX44+4,w
  5817  0F8F                     u4145:	
  5818  0F8F  1803               	skipnc
  5819  0F90  2FD0               	goto	l3437
  5820  0F91  0878               	movf	printf_console_MATRIX44@x,w
  5821  0F92  1283               	bcf	3,5	;RP0=0, select bank0
  5822  0F93  1303               	bcf	3,6	;RP1=0, select bank0
  5823  0F94  00A0               	movwf	??_printf_console_MATRIX44
  5824  0F95  01A1               	clrf	??_printf_console_MATRIX44+1
  5825  0F96  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5826  0F97  03A1               	decf	??_printf_console_MATRIX44+1,f
  5827  0F98  09A0               	comf	??_printf_console_MATRIX44,f
  5828  0F99  09A1               	comf	??_printf_console_MATRIX44+1,f
  5829  0F9A  0AA0               	incf	??_printf_console_MATRIX44,f
  5830  0F9B  1903               	skipnz
  5831  0F9C  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5832  0F9D  087A               	movf	printf_console_MATRIX44@col,w
  5833  0F9E  00A2               	movwf	??_printf_console_MATRIX44+2
  5834  0F9F  01A3               	clrf	??_printf_console_MATRIX44+3
  5835  0FA0  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5836  0FA1  03A3               	decf	??_printf_console_MATRIX44+3,f
  5837  0FA2  0820               	movf	??_printf_console_MATRIX44,w
  5838  0FA3  0722               	addwf	??_printf_console_MATRIX44+2,w
  5839  0FA4  00A4               	movwf	??_printf_console_MATRIX44+4
  5840  0FA5  0821               	movf	??_printf_console_MATRIX44+1,w
  5841  0FA6  1803               	skipnc
  5842  0FA7  0A21               	incf	??_printf_console_MATRIX44+1,w
  5843  0FA8  0723               	addwf	??_printf_console_MATRIX44+3,w
  5844  0FA9  00A5               	movwf	??_printf_console_MATRIX44+5
  5845  0FAA  0824               	movf	??_printf_console_MATRIX44+4,w
  5846  0FAB  0776               	addwf	printf_console_MATRIX44@matrix,w
  5847  0FAC  00A6               	movwf	??_printf_console_MATRIX44+6
  5848  0FAD  0825               	movf	??_printf_console_MATRIX44+5,w
  5849  0FAE  1803               	skipnc
  5850  0FAF  0A25               	incf	??_printf_console_MATRIX44+5,w
  5851  0FB0  0777               	addwf	printf_console_MATRIX44@matrix+1,w
  5852  0FB1  00A7               	movwf	??_printf_console_MATRIX44+7
  5853  0FB2  0375               	decf	printf_console_MATRIX44@y,w
  5854  0FB3  3AFF               	xorlw	255
  5855  0FB4  0779               	addwf	printf_console_MATRIX44@row,w
  5856  0FB5  00A8               	movwf	??_printf_console_MATRIX44+8
  5857  0FB6  3001               	movlw	1
  5858  0FB7                     u4155:	
  5859  0FB7  1003               	clrc
  5860  0FB8  0DA8               	rlf	??_printf_console_MATRIX44+8,f
  5861  0FB9  3EFF               	addlw	-1
  5862  0FBA  1D03               	skipz
  5863  0FBB  2FB7               	goto	u4155
  5864  0FBC  1003               	clrc
  5865  0FBD  0D28               	rlf	??_printf_console_MATRIX44+8,w
  5866  0FBE  0726               	addwf	??_printf_console_MATRIX44+6,w
  5867  0FBF  0084               	movwf	4
  5868  0FC0  0827               	movf	??_printf_console_MATRIX44+7,w
  5869  0FC1  1803               	skipnc
  5870  0FC2  0A27               	incf	??_printf_console_MATRIX44+7,w
  5871  0FC3  00FF               	movwf	127
  5872  0FC4  120A  158A  2000  120A  158A  	fcall	stringtab
  5873  0FC9  3A01               	xorlw	1
  5874  0FCA  1D03               	skipz
  5875  0FCB  2FD0               	goto	l3437
  5876                           
  5877                           ;teris_16f886.c: 346: {
  5878                           ;teris_16f886.c: 347: debug_str("*");
  5879  0FCC  306A               	movlw	low (STR_6| (0+32768))
  5880  0FCD  00F3               	movwf	debug_str@str
  5881  0FCE  308E               	movlw	high (STR_6| (0+32768))
  5882  0FCF  2FD3               	goto	L11
  5883  0FD0                     l3437:	
  5884                           ;teris_16f886.c: 348: }
  5885                           
  5886                           
  5887                           ;teris_16f886.c: 349: else
  5888                           ;teris_16f886.c: 350: {
  5889                           ;teris_16f886.c: 351: debug_str("_");
  5890  0FD0  306C               	movlw	low (STR_7| (0+32768))
  5891  0FD1  00F3               	movwf	debug_str@str
  5892  0FD2  308E               	movlw	high (STR_7| (0+32768))
  5893  0FD3                     L11:	
  5894  0FD3  00F4               	movwf	debug_str@str+1
  5895  0FD4  160A  158A  2197  120A  158A  	fcall	_debug_str
  5896  0FD9  3001               	movlw	1
  5897  0FDA  1283               	bcf	3,5	;RP0=0, select bank0
  5898  0FDB  1303               	bcf	3,6	;RP1=0, select bank0
  5899  0FDC  00A0               	movwf	??_printf_console_MATRIX44
  5900  0FDD  0820               	movf	??_printf_console_MATRIX44,w
  5901  0FDE  07FA               	addwf	printf_console_MATRIX44@col,f
  5902  0FDF  087A               	movf	printf_console_MATRIX44@col,w
  5903  0FE0  3A80               	xorlw	128
  5904  0FE1  3E78               	addlw	-136
  5905  0FE2  1C03               	skipc
  5906  0FE3  2F17               	goto	l3425
  5907  0FE4                     l3443:	
  5908                           
  5909                           ;teris_16f886.c: 352: }
  5910                           ;teris_16f886.c: 353: }
  5911                           ;teris_16f886.c: 354: debug_line("");
  5912  0FE4  3069               	movlw	low ((STR_1+2)| (0+32768))
  5913  0FE5  00F3               	movwf	debug_line@str
  5914  0FE6  308E               	movlw	high ((STR_1+2)| (0+32768))
  5915  0FE7  00F4               	movwf	debug_line@str+1
  5916  0FE8  160A  158A  21D7  120A  158A  	fcall	_debug_line
  5917  0FED  3001               	movlw	1
  5918  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  5919  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  5920  0FF0  00A0               	movwf	??_printf_console_MATRIX44
  5921  0FF1  0820               	movf	??_printf_console_MATRIX44,w
  5922  0FF2  07F9               	addwf	printf_console_MATRIX44@row,f
  5923  0FF3  0879               	movf	printf_console_MATRIX44@row,w
  5924  0FF4  3A80               	xorlw	128
  5925  0FF5  3E78               	addlw	-136
  5926  0FF6  1C03               	skipc
  5927  0FF7  2F11               	goto	l3419
  5928  0FF8                     l3449:	
  5929                           
  5930                           ;teris_16f886.c: 355: }
  5931                           ;teris_16f886.c: 356: debug_line(">>>>>>>>>>>>>>>>>>>>");
  5932  0FF8  3093               	movlw	low (STR_9| (0+32768))
  5933  0FF9  00F3               	movwf	debug_line@str
  5934  0FFA  308D               	movlw	high (STR_9| (0+32768))
  5935  0FFB  00F4               	movwf	debug_line@str+1
  5936  0FFC  160A  158A  21D7   	fcall	_debug_line
  5937  0FFF  0008               	return
  5938  1000                     __end_of_printf_console_MATRIX44:	
  5939                           
  5940                           	psect	text9
  5941  199F                     __ptext9:	
  5942 ;; *************** function _printf_console_Screen *****************
  5943 ;; Defined at:
  5944 ;;		line 532 in file "teris_16f886.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;		None
  5947 ;; Auto vars:     Size  Location     Type
  5948 ;;		None
  5949 ;; Return value:  Size  Location     Type
  5950 ;;                  1    wreg      void 
  5951 ;; Registers used:
  5952 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5953 ;; Tracked objects:
  5954 ;;		On entry : 0/0
  5955 ;;		On exit  : 0/0
  5956 ;;		Unchanged: 0/0
  5957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5958 ;;      Params:         0       0       0       0       0
  5959 ;;      Locals:         0       0       0       0       0
  5960 ;;      Temps:          0       0       0       0       0
  5961 ;;      Totals:         0       0       0       0       0
  5962 ;;Total ram usage:        0 bytes
  5963 ;; Hardware stack levels used:    1
  5964 ;; Hardware stack levels required when called:    4
  5965 ;; This function calls:
  5966 ;;		_printf_console_MATRIX88
  5967 ;; This function is called by:
  5968 ;;		_find_best_solution
  5969 ;; This function uses a non-reentrant model
  5970 ;;
  5971                           
  5972                           
  5973                           ;psect for function _printf_console_Screen
  5974  199F                     _printf_console_Screen:	
  5975                           
  5976                           ;teris_16f886.c: 534: printf_console_MATRIX88(&g_matrix88);
  5977                           
  5978                           ;incstack = 0
  5979                           ; Regs used in _printf_console_Screen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  5980  199F  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  5981  19A0  00F5               	movwf	printf_console_MATRIX88@matrix
  5982  19A1  3001               	movlw	1
  5983  19A2  00F6               	movwf	printf_console_MATRIX88@matrix+1
  5984  19A3  160A  158A  27A0   	fcall	_printf_console_MATRIX88
  5985  19A6  0008               	return
  5986  19A7                     __end_of_printf_console_Screen:	
  5987                           
  5988                           	psect	text10
  5989  1FA0                     __ptext10:	
  5990 ;; *************** function _printf_console_MATRIX88 *****************
  5991 ;; Defined at:
  5992 ;;		line 502 in file "teris_16f886.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;  matrix          2    5[COMMON] PTR const struct .
  5995 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;  col             1   13[COMMON] unsigned char 
  5998 ;;  row             1   12[COMMON] unsigned char 
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  1    wreg      void 
  6001 ;; Registers used:
  6002 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6003 ;; Tracked objects:
  6004 ;;		On entry : 0/0
  6005 ;;		On exit  : 0/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6008 ;;      Params:         2       0       0       0       0
  6009 ;;      Locals:         2       0       0       0       0
  6010 ;;      Temps:          5       0       0       0       0
  6011 ;;      Totals:         9       0       0       0       0
  6012 ;;Total ram usage:        9 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:    3
  6015 ;; This function calls:
  6016 ;;		_debug_line
  6017 ;;		_debug_str
  6018 ;; This function is called by:
  6019 ;;		_printf_console_Screen
  6020 ;;		_find_best_solution
  6021 ;;		_main
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           
  6026                           ;psect for function _printf_console_MATRIX88
  6027  1FA0                     _printf_console_MATRIX88:	
  6028                           
  6029                           ;teris_16f886.c: 504: debug_line("<<<<<<<<<<<<<<<<<<<<MATRIX88");
  6030                           
  6031                           ;incstack = 0
  6032                           ; Regs used in _printf_console_MATRIX88: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  6033  1FA0  309F               	movlw	low (STR_17| (0+32768))
  6034  1FA1  00F3               	movwf	debug_line@str
  6035  1FA2  308C               	movlw	high (STR_17| (0+32768))
  6036  1FA3  00F4               	movwf	debug_line@str+1
  6037  1FA4  160A  158A  21D7  160A  158A  	fcall	_debug_line
  6038                           
  6039                           ;teris_16f886.c: 505: for(uint8_t row = 0; row < 8; row++)
  6040  1FA9  01FC               	clrf	printf_console_MATRIX88@row
  6041  1FAA  3008               	movlw	8
  6042  1FAB  027C               	subwf	printf_console_MATRIX88@row,w
  6043  1FAC  1803               	btfsc	3,0
  6044  1FAD  2FF8               	goto	l4761
  6045  1FAE                     l4739:	
  6046                           
  6047                           ;teris_16f886.c: 506: {
  6048                           ;teris_16f886.c: 507: for(uint8_t col = 0; col < 8; col++)
  6049  1FAE  01FD               	clrf	printf_console_MATRIX88@col
  6050  1FAF  3008               	movlw	8
  6051  1FB0  027D               	subwf	printf_console_MATRIX88@col,w
  6052  1FB1  1803               	btfsc	3,0
  6053  1FB2  2FE7               	goto	l4755
  6054  1FB3                     l4745:	
  6055                           
  6056                           ;teris_16f886.c: 508: {
  6057                           ;teris_16f886.c: 509: if(matrix->data[row][col] == 1)
  6058  1FB3  087C               	movf	printf_console_MATRIX88@row,w
  6059  1FB4  00F7               	movwf	??_printf_console_MATRIX88
  6060  1FB5  3002               	movlw	2
  6061  1FB6                     u6375:	
  6062  1FB6  1003               	clrc
  6063  1FB7  0DF7               	rlf	??_printf_console_MATRIX88,f
  6064  1FB8  3EFF               	addlw	-1
  6065  1FB9  1D03               	skipz
  6066  1FBA  2FB6               	goto	u6375
  6067  1FBB  1003               	clrc
  6068  1FBC  0D77               	rlf	??_printf_console_MATRIX88,w
  6069  1FBD  0775               	addwf	printf_console_MATRIX88@matrix,w
  6070  1FBE  00F8               	movwf	??_printf_console_MATRIX88+1
  6071  1FBF  0876               	movf	printf_console_MATRIX88@matrix+1,w
  6072  1FC0  1803               	skipnc
  6073  1FC1  3E01               	addlw	1
  6074  1FC2  00F9               	movwf	??_printf_console_MATRIX88+2
  6075  1FC3  087D               	movf	printf_console_MATRIX88@col,w
  6076  1FC4  0778               	addwf	??_printf_console_MATRIX88+1,w
  6077  1FC5  00FA               	movwf	??_printf_console_MATRIX88+3
  6078  1FC6  0879               	movf	??_printf_console_MATRIX88+2,w
  6079  1FC7  1803               	skipnc
  6080  1FC8  3E01               	addlw	1
  6081  1FC9  00FB               	movwf	??_printf_console_MATRIX88+4
  6082  1FCA  087A               	movf	??_printf_console_MATRIX88+3,w
  6083  1FCB  0084               	movwf	4
  6084  1FCC  1783               	bsf	3,7
  6085  1FCD  1C7B               	btfss	??_printf_console_MATRIX88+4,0
  6086  1FCE  1383               	bcf	3,7
  6087  1FCF  0300               	decf	0,w
  6088  1FD0  1D03               	btfss	3,2
  6089  1FD1  2FD6               	goto	l4749
  6090                           
  6091                           ;teris_16f886.c: 510: {
  6092                           ;teris_16f886.c: 511: debug_str("*");
  6093  1FD2  306A               	movlw	low (STR_6| (0+32768))
  6094  1FD3  00F3               	movwf	debug_str@str
  6095  1FD4  308E               	movlw	high (STR_6| (0+32768))
  6096  1FD5  2FD9               	goto	L12
  6097  1FD6                     l4749:	
  6098                           ;teris_16f886.c: 512: }
  6099                           
  6100                           
  6101                           ;teris_16f886.c: 513: else
  6102                           ;teris_16f886.c: 514: {
  6103                           ;teris_16f886.c: 515: debug_str("_");
  6104  1FD6  306C               	movlw	low (STR_7| (0+32768))
  6105  1FD7  00F3               	movwf	debug_str@str
  6106  1FD8  308E               	movlw	high (STR_7| (0+32768))
  6107  1FD9                     L12:	
  6108  1FD9  00F4               	movwf	debug_str@str+1
  6109  1FDA  160A  158A  2197  160A  158A  	fcall	_debug_str
  6110  1FDF  3001               	movlw	1
  6111  1FE0  00F7               	movwf	??_printf_console_MATRIX88
  6112  1FE1  0877               	movf	??_printf_console_MATRIX88,w
  6113  1FE2  07FD               	addwf	printf_console_MATRIX88@col,f
  6114  1FE3  3008               	movlw	8
  6115  1FE4  027D               	subwf	printf_console_MATRIX88@col,w
  6116  1FE5  1C03               	skipc
  6117  1FE6  2FB3               	goto	l4745
  6118  1FE7                     l4755:	
  6119                           
  6120                           ;teris_16f886.c: 516: }
  6121                           ;teris_16f886.c: 517: }
  6122                           ;teris_16f886.c: 518: debug_line("");
  6123  1FE7  3069               	movlw	low ((STR_1+2)| (0+32768))
  6124  1FE8  00F3               	movwf	debug_line@str
  6125  1FE9  308E               	movlw	high ((STR_1+2)| (0+32768))
  6126  1FEA  00F4               	movwf	debug_line@str+1
  6127  1FEB  160A  158A  21D7  160A  158A  	fcall	_debug_line
  6128  1FF0  3001               	movlw	1
  6129  1FF1  00F7               	movwf	??_printf_console_MATRIX88
  6130  1FF2  0877               	movf	??_printf_console_MATRIX88,w
  6131  1FF3  07FC               	addwf	printf_console_MATRIX88@row,f
  6132  1FF4  3008               	movlw	8
  6133  1FF5  027C               	subwf	printf_console_MATRIX88@row,w
  6134  1FF6  1C03               	skipc
  6135  1FF7  2FAE               	goto	l4739
  6136  1FF8                     l4761:	
  6137                           
  6138                           ;teris_16f886.c: 519: }
  6139                           ;teris_16f886.c: 520: debug_line(">>>>>>>>>>>>>>>>>>>>");
  6140  1FF8  3093               	movlw	low (STR_9| (0+32768))
  6141  1FF9  00F3               	movwf	debug_line@str
  6142  1FFA  308D               	movlw	high (STR_9| (0+32768))
  6143  1FFB  00F4               	movwf	debug_line@str+1
  6144  1FFC  160A  158A  21D7   	fcall	_debug_line
  6145  1FFF  0008               	return
  6146  2000                     __end_of_printf_console_MATRIX88:	
  6147                           
  6148                           	psect	text11
  6149  1997                     __ptext11:	
  6150 ;; *************** function _debug_str *****************
  6151 ;; Defined at:
  6152 ;;		line 284 in file "teris_16f886.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;  str             2    3[COMMON] PTR const unsigned char 
  6155 ;;		 -> STR_19(2), STR_18(2), STR_14(2), STR_13(2), 
  6156 ;;		 -> STR_7(2), STR_6(2), 
  6157 ;; Auto vars:     Size  Location     Type
  6158 ;;		None
  6159 ;; Return value:  Size  Location     Type
  6160 ;;                  1    wreg      void 
  6161 ;; Registers used:
  6162 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6163 ;; Tracked objects:
  6164 ;;		On entry : 0/0
  6165 ;;		On exit  : 0/0
  6166 ;;		Unchanged: 0/0
  6167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6168 ;;      Params:         2       0       0       0       0
  6169 ;;      Locals:         0       0       0       0       0
  6170 ;;      Temps:          0       0       0       0       0
  6171 ;;      Totals:         2       0       0       0       0
  6172 ;;Total ram usage:        2 bytes
  6173 ;; Hardware stack levels used:    1
  6174 ;; Hardware stack levels required when called:    2
  6175 ;; This function calls:
  6176 ;;		_USARTWriteString
  6177 ;; This function is called by:
  6178 ;;		_printf_console_MATRIX44
  6179 ;;		_printf_console_MATRIX88
  6180 ;;		_printf_console_MATRIX7219
  6181 ;; This function uses a non-reentrant model
  6182 ;;
  6183                           
  6184                           
  6185                           ;psect for function _debug_str
  6186  1997                     _debug_str:	
  6187                           
  6188                           ;teris_16f886.c: 289: USARTWriteString(str);
  6189                           
  6190                           ;incstack = 0
  6191                           ; Regs used in _debug_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6192  1997  0873               	movf	debug_str@str,w
  6193  1998  00F1               	movwf	USARTWriteString@str
  6194  1999  0874               	movf	debug_str@str+1,w
  6195  199A  00F2               	movwf	USARTWriteString@str+1
  6196  199B  160A  158A  2294   	fcall	_USARTWriteString
  6197  199E  0008               	return
  6198  199F                     __end_of_debug_str:	
  6199                           
  6200                           	psect	text12
  6201  107E                     __ptext12:	
  6202 ;; *************** function _merge1 *****************
  6203 ;; Defined at:
  6204 ;;		line 766 in file "teris_16f886.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;  x               1    wreg     char 
  6207 ;;  y               1    0[BANK0 ] char 
  6208 ;;  matrix44        2    1[BANK0 ] PTR const struct .
  6209 ;;		 -> g_matrix44(384), 
  6210 ;;  matrix88_in     1    3[BANK0 ] PTR const struct .
  6211 ;;		 -> g_matrix88(64), 
  6212 ;;  matrix88_out    1    4[BANK0 ] PTR struct .
  6213 ;;		 -> find_best_solution@temp_matrix88(64), 
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;  x               1    9[BANK0 ] char 
  6216 ;;  col             1   13[BANK0 ] unsigned char 
  6217 ;;  row             1   12[BANK0 ] unsigned char 
  6218 ;;  len             2   10[BANK0 ] unsigned int 
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  1    wreg      void 
  6221 ;; Registers used:
  6222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6228 ;;      Params:         0       5       0       0       0
  6229 ;;      Locals:         0       5       0       0       0
  6230 ;;      Temps:          0       4       0       0       0
  6231 ;;      Totals:         0      14       0       0       0
  6232 ;;Total ram usage:       14 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    1
  6235 ;; This function calls:
  6236 ;;		_memcpy
  6237 ;; This function is called by:
  6238 ;;		_find_best_solution
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           
  6243                           ;psect for function _merge1
  6244  107E                     _merge1:	
  6245                           
  6246                           ;incstack = 0
  6247                           ; Regs used in _merge1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6248                           ;merge1@x stored from wreg
  6249  107E  1283               	bcf	3,5	;RP0=0, select bank0
  6250  107F  1303               	bcf	3,6	;RP1=0, select bank0
  6251  1080  00A9               	movwf	merge1@x
  6252                           
  6253                           ;teris_16f886.c: 771: register size_t len;
  6254                           ;teris_16f886.c: 773: len = sizeof(MATRIX88);
  6255  1081  3040               	movlw	64
  6256  1082  00AA               	movwf	merge1@len
  6257  1083  3000               	movlw	0
  6258  1084  00AB               	movwf	merge1@len+1
  6259                           
  6260                           ;teris_16f886.c: 774: memcpy(matrix88_out, matrix88_in, len);
  6261  1085  0824               	movf	merge1@matrix88_out,w
  6262  1086  00F0               	movwf	memcpy@d1
  6263  1087  3000               	movlw	0
  6264  1088  00F1               	movwf	memcpy@d1+1
  6265  1089  0823               	movf	merge1@matrix88_in,w
  6266  108A  00F2               	movwf	memcpy@s1
  6267  108B  3001               	movlw	1
  6268  108C  00F3               	movwf	memcpy@s1+1
  6269  108D  082B               	movf	merge1@len+1,w
  6270  108E  00F5               	movwf	memcpy@n+1
  6271  108F  082A               	movf	merge1@len,w
  6272  1090  00F4               	movwf	memcpy@n
  6273  1091  120A  118A  2003  160A  118A  	fcall	_memcpy
  6274                           
  6275                           ;teris_16f886.c: 776: for(uint8_t row = 0; row < 4; row++)
  6276  1096  1283               	bcf	3,5	;RP0=0, select bank0
  6277  1097  1303               	bcf	3,6	;RP1=0, select bank0
  6278  1098  01AC               	clrf	merge1@row
  6279  1099                     L13:	
  6280  1099  3004               	movlw	4
  6281  109A  022C               	subwf	merge1@row,w
  6282  109B  1803               	btfsc	3,0
  6283  109C  0008               	return
  6284                           
  6285                           ;teris_16f886.c: 777: {
  6286                           ;teris_16f886.c: 778: for(uint8_t col = 0; col < 4; col++)
  6287  109D  01AD               	clrf	merge1@col
  6288  109E  3004               	movlw	4
  6289  109F  022D               	subwf	merge1@col,w
  6290  10A0  1803               	btfsc	3,0
  6291  10A1  28E0               	goto	l4829
  6292  10A2                     l4821:	
  6293                           
  6294                           ;teris_16f886.c: 779: {
  6295                           ;teris_16f886.c: 780: if(matrix44->data[row][col] == 1)
  6296  10A2  082C               	movf	merge1@row,w
  6297  10A3  00A5               	movwf	??_merge1
  6298  10A4  01A6               	clrf	??_merge1+1
  6299  10A5  1003               	clrc
  6300  10A6  0DA5               	rlf	??_merge1,f
  6301  10A7  0DA6               	rlf	??_merge1+1,f
  6302  10A8  1003               	clrc
  6303  10A9  0DA5               	rlf	??_merge1,f
  6304  10AA  0DA6               	rlf	??_merge1+1,f
  6305  10AB  0825               	movf	??_merge1,w
  6306  10AC  0721               	addwf	merge1@matrix44,w
  6307  10AD  00A7               	movwf	??_merge1+2
  6308  10AE  0826               	movf	??_merge1+1,w
  6309  10AF  1803               	skipnc
  6310  10B0  0A26               	incf	??_merge1+1,w
  6311  10B1  0722               	addwf	merge1@matrix44+1,w
  6312  10B2  00A8               	movwf	??_merge1+3
  6313  10B3  082D               	movf	merge1@col,w
  6314  10B4  0727               	addwf	??_merge1+2,w
  6315  10B5  0084               	movwf	4
  6316  10B6  0828               	movf	??_merge1+3,w
  6317  10B7  1803               	skipnc
  6318  10B8  0A28               	incf	??_merge1+3,w
  6319  10B9  00FF               	movwf	127
  6320  10BA  120A  158A  2000  160A  118A  	fcall	stringtab
  6321  10BF  3A01               	xorlw	1
  6322  10C0  1D03               	skipz
  6323  10C1  28D8               	goto	l4825
  6324                           
  6325                           ;teris_16f886.c: 781: {
  6326                           ;teris_16f886.c: 782: matrix88_out->data[y + row][x + col] = 1;
  6327  10C2  082D               	movf	merge1@col,w
  6328  10C3  0729               	addwf	merge1@x,w
  6329  10C4  0724               	addwf	merge1@matrix88_out,w
  6330  10C5  00A5               	movwf	??_merge1
  6331  10C6  082C               	movf	merge1@row,w
  6332  10C7  0720               	addwf	merge1@y,w
  6333  10C8  00A6               	movwf	??_merge1+1
  6334  10C9  3002               	movlw	2
  6335  10CA                     u6535:	
  6336  10CA  1003               	clrc
  6337  10CB  0DA6               	rlf	??_merge1+1,f
  6338  10CC  3EFF               	addlw	-1
  6339  10CD  1D03               	skipz
  6340  10CE  28CA               	goto	u6535
  6341  10CF  1003               	clrc
  6342  10D0  0D26               	rlf	??_merge1+1,w
  6343  10D1  0725               	addwf	??_merge1,w
  6344  10D2  00A7               	movwf	??_merge1+2
  6345  10D3  0827               	movf	??_merge1+2,w
  6346  10D4  0084               	movwf	4
  6347  10D5  1383               	bcf	3,7	;select IRP bank0
  6348  10D6  0180               	clrf	0
  6349  10D7  0A80               	incf	0,f
  6350  10D8                     l4825:	
  6351  10D8  3001               	movlw	1
  6352  10D9  00A5               	movwf	??_merge1
  6353  10DA  0825               	movf	??_merge1,w
  6354  10DB  07AD               	addwf	merge1@col,f
  6355  10DC  3004               	movlw	4
  6356  10DD  022D               	subwf	merge1@col,w
  6357  10DE  1C03               	skipc
  6358  10DF  28A2               	goto	l4821
  6359  10E0                     l4829:	
  6360  10E0  3001               	movlw	1
  6361  10E1  00A5               	movwf	??_merge1
  6362  10E2  0825               	movf	??_merge1,w
  6363  10E3  07AC               	addwf	merge1@row,f
  6364  10E4  2899               	goto	L13
  6365  10E5                     __end_of_merge1:	
  6366                           
  6367                           	psect	text13
  6368  1B7F                     __ptext13:	
  6369 ;; *************** function _left_most *****************
  6370 ;; Defined at:
  6371 ;;		line 821 in file "teris_16f886.c"
  6372 ;; Parameters:    Size  Location     Type
  6373 ;;  x               1    wreg     char 
  6374 ;;  matrix44        2   35[BANK0 ] PTR const struct .
  6375 ;;		 -> g_matrix44(384), 
  6376 ;;  matrix88        1   37[BANK0 ] PTR const struct .
  6377 ;;		 -> g_matrix88(64), 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  x               1   39[BANK0 ] char 
  6380 ;; Return value:  Size  Location     Type
  6381 ;;                  1    wreg      char 
  6382 ;; Registers used:
  6383 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6389 ;;      Params:         0       3       0       0       0
  6390 ;;      Locals:         0       1       0       0       0
  6391 ;;      Temps:          0       1       0       0       0
  6392 ;;      Totals:         0       5       0       0       0
  6393 ;;Total ram usage:        5 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; Hardware stack levels required when called:    4
  6396 ;; This function calls:
  6397 ;;		_debug_int1
  6398 ;;		_is_left_boundary
  6399 ;; This function is called by:
  6400 ;;		_find_best_solution
  6401 ;; This function uses a non-reentrant model
  6402 ;;
  6403                           
  6404                           
  6405                           ;psect for function _left_most
  6406  1B7F                     _left_most:	
  6407                           
  6408                           ;incstack = 0
  6409                           ; Regs used in _left_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6410                           ;left_most@x stored from wreg
  6411  1B7F  1283               	bcf	3,5	;RP0=0, select bank0
  6412  1B80  1303               	bcf	3,6	;RP1=0, select bank0
  6413  1B81  00C7               	movwf	left_most@x
  6414  1B82                     l373:	
  6415                           ;teris_16f886.c: 823: while(1)
  6416                           
  6417                           
  6418                           ;teris_16f886.c: 824: {
  6419                           ;teris_16f886.c: 825: if(is_left_boundary(x, matrix44, matrix88) == LEFT_OVER_BOUNDARY)
  6420  1B82  0843               	movf	left_most@matrix44,w
  6421  1B83  00F5               	movwf	is_left_boundary@matrix44
  6422  1B84  0844               	movf	left_most@matrix44+1,w
  6423  1B85  00F6               	movwf	is_left_boundary@matrix44+1
  6424  1B86  0845               	movf	left_most@matrix88,w
  6425  1B87  00C6               	movwf	??_left_most
  6426  1B88  0846               	movf	??_left_most,w
  6427  1B89  00F7               	movwf	is_left_boundary@matrix88
  6428  1B8A  0847               	movf	left_most@x,w
  6429  1B8B  160A  158A  2742  160A  158A  	fcall	_is_left_boundary
  6430  1B90  3A02               	xorlw	2
  6431  1B91  1D03               	skipz
  6432  1B92  2BA9               	goto	l3835
  6433                           
  6434                           ;teris_16f886.c: 826: {
  6435                           ;teris_16f886.c: 827: debug_int1("left_most = %d\n", x + 1);
  6436  1B93  3023               	movlw	low (STR_37| (0+32768))
  6437  1B94  1283               	bcf	3,5	;RP0=0, select bank0
  6438  1B95  1303               	bcf	3,6	;RP1=0, select bank0
  6439  1B96  00BF               	movwf	debug_int1@f
  6440  1B97  308E               	movlw	high (STR_37| (0+32768))
  6441  1B98  00C0               	movwf	debug_int1@f+1
  6442  1B99  3001               	movlw	1
  6443  1B9A  0747               	addwf	left_most@x,w
  6444  1B9B  00C1               	movwf	debug_int1@i
  6445  1B9C  01C2               	clrf	debug_int1@i+1
  6446  1B9D  1803               	skipnc
  6447  1B9E  0AC2               	incf	debug_int1@i+1,f
  6448  1B9F  1BC7               	btfsc	left_most@x,7
  6449  1BA0  03C2               	decf	debug_int1@i+1,f
  6450  1BA1  160A  158A  2273   	fcall	_debug_int1
  6451                           
  6452                           ;teris_16f886.c: 828: return x + 1;
  6453  1BA4  1283               	bcf	3,5	;RP0=0, select bank0
  6454  1BA5  1303               	bcf	3,6	;RP1=0, select bank0
  6455  1BA6  0847               	movf	left_most@x,w
  6456  1BA7  3E01               	addlw	1
  6457  1BA8  0008               	return
  6458  1BA9                     l3835:	
  6459                           
  6460                           ;teris_16f886.c: 829: }
  6461                           ;teris_16f886.c: 830: x--;
  6462  1BA9  30FF               	movlw	255
  6463  1BAA  1283               	bcf	3,5	;RP0=0, select bank0
  6464  1BAB  1303               	bcf	3,6	;RP1=0, select bank0
  6465  1BAC  00C6               	movwf	??_left_most
  6466  1BAD  0846               	movf	??_left_most,w
  6467  1BAE  07C7               	addwf	left_most@x,f
  6468  1BAF  2B82               	goto	l373
  6469  1BB0                     __end_of_left_most:	
  6470                           
  6471                           	psect	text14
  6472  1F42                     __ptext14:	
  6473 ;; *************** function _is_left_boundary *****************
  6474 ;; Defined at:
  6475 ;;		line 678 in file "teris_16f886.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  x               1    wreg     char 
  6478 ;;  matrix44        2    5[COMMON] PTR const struct .
  6479 ;;		 -> g_matrix44(384), 
  6480 ;;  matrix88        1    7[COMMON] PTR const struct .
  6481 ;;		 -> g_matrix88(64), 
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  x               1    0[BANK0 ] char 
  6484 ;;  col             1    2[BANK0 ] char 
  6485 ;;  row             1    1[BANK0 ] char 
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  1    wreg      unsigned char 
  6488 ;; Registers used:
  6489 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6495 ;;      Params:         3       0       0       0       0
  6496 ;;      Locals:         0       3       0       0       0
  6497 ;;      Temps:          5       0       0       0       0
  6498 ;;      Totals:         8       3       0       0       0
  6499 ;;Total ram usage:       11 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    3
  6502 ;; This function calls:
  6503 ;;		_debug_line
  6504 ;; This function is called by:
  6505 ;;		_left_most
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           
  6510                           ;psect for function _is_left_boundary
  6511  1F42                     _is_left_boundary:	
  6512                           
  6513                           ;incstack = 0
  6514                           ; Regs used in _is_left_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6515                           ;is_left_boundary@x stored from wreg
  6516  1F42  1283               	bcf	3,5	;RP0=0, select bank0
  6517  1F43  1303               	bcf	3,6	;RP1=0, select bank0
  6518  1F44  00A0               	movwf	is_left_boundary@x
  6519                           
  6520                           ;teris_16f886.c: 680: for(int8_t row = 4 - 1; row >= 0; row--)
  6521  1F45  3003               	movlw	3
  6522  1F46  00F8               	movwf	??_is_left_boundary
  6523  1F47  0878               	movf	??_is_left_boundary,w
  6524  1F48  00A1               	movwf	is_left_boundary@row
  6525  1F49  1BA1               	btfsc	is_left_boundary@row,7
  6526  1F4A  2F9E               	goto	l3575
  6527  1F4B                     l3551:	
  6528                           
  6529                           ;teris_16f886.c: 681: {
  6530                           ;teris_16f886.c: 682: for(int8_t col = 0; col < 4; col++)
  6531  1F4B  01A2               	clrf	is_left_boundary@col
  6532  1F4C  0822               	movf	is_left_boundary@col,w
  6533  1F4D  3A80               	xorlw	128
  6534  1F4E  3E7C               	addlw	-132
  6535  1F4F  1803               	btfsc	3,0
  6536  1F50  2F98               	goto	l3571
  6537  1F51                     l3557:	
  6538                           
  6539                           ;teris_16f886.c: 683: {
  6540                           ;teris_16f886.c: 684: if(matrix44->data[row][col] == 1)
  6541  1F51  0821               	movf	is_left_boundary@row,w
  6542  1F52  00F8               	movwf	??_is_left_boundary
  6543  1F53  01F9               	clrf	??_is_left_boundary+1
  6544  1F54  1003               	clrc
  6545  1F55  0DF8               	rlf	??_is_left_boundary,f
  6546  1F56  0DF9               	rlf	??_is_left_boundary+1,f
  6547  1F57  1003               	clrc
  6548  1F58  0DF8               	rlf	??_is_left_boundary,f
  6549  1F59  0DF9               	rlf	??_is_left_boundary+1,f
  6550  1F5A  0878               	movf	??_is_left_boundary,w
  6551  1F5B  0775               	addwf	is_left_boundary@matrix44,w
  6552  1F5C  00FA               	movwf	??_is_left_boundary+2
  6553  1F5D  0879               	movf	??_is_left_boundary+1,w
  6554  1F5E  1803               	skipnc
  6555  1F5F  0A79               	incf	??_is_left_boundary+1,w
  6556  1F60  0776               	addwf	is_left_boundary@matrix44+1,w
  6557  1F61  00FB               	movwf	??_is_left_boundary+3
  6558  1F62  0822               	movf	is_left_boundary@col,w
  6559  1F63  077A               	addwf	??_is_left_boundary+2,w
  6560  1F64  0084               	movwf	4
  6561  1F65  087B               	movf	??_is_left_boundary+3,w
  6562  1F66  1803               	skipnc
  6563  1F67  0A7B               	incf	??_is_left_boundary+3,w
  6564  1F68  00FF               	movwf	127
  6565  1F69  120A  158A  2000  160A  158A  	fcall	stringtab
  6566  1F6E  3A01               	xorlw	1
  6567  1F6F  1D03               	skipz
  6568  1F70  2F8D               	goto	l3567
  6569                           
  6570                           ;teris_16f886.c: 685: {
  6571                           ;teris_16f886.c: 686: if( x + col < 0)
  6572  1F71  0822               	movf	is_left_boundary@col,w
  6573  1F72  00F8               	movwf	??_is_left_boundary
  6574  1F73  01F9               	clrf	??_is_left_boundary+1
  6575  1F74  1BF8               	btfsc	??_is_left_boundary,7
  6576  1F75  03F9               	decf	??_is_left_boundary+1,f
  6577  1F76  0820               	movf	is_left_boundary@x,w
  6578  1F77  00FA               	movwf	??_is_left_boundary+2
  6579  1F78  01FB               	clrf	??_is_left_boundary+3
  6580  1F79  1BFA               	btfsc	??_is_left_boundary+2,7
  6581  1F7A  03FB               	decf	??_is_left_boundary+3,f
  6582  1F7B  0878               	movf	??_is_left_boundary,w
  6583  1F7C  077A               	addwf	??_is_left_boundary+2,w
  6584  1F7D  087B               	movf	??_is_left_boundary+3,w
  6585  1F7E  1803               	skipnc
  6586  1F7F  0A7B               	incf	??_is_left_boundary+3,w
  6587  1F80  0779               	addwf	??_is_left_boundary+1,w
  6588  1F81  00FC               	movwf	??_is_left_boundary+4
  6589  1F82  1FFC               	btfss	??_is_left_boundary+4,7
  6590  1F83  2F8D               	goto	l3567
  6591                           
  6592                           ;teris_16f886.c: 687: {
  6593                           ;teris_16f886.c: 688: debug_line("LEFT_OVER_BOUNDARY");
  6594  1F84  30BC               	movlw	low (STR_32| (0+32768))
  6595  1F85  00F3               	movwf	debug_line@str
  6596  1F86  308D               	movlw	high (STR_32| (0+32768))
  6597  1F87  00F4               	movwf	debug_line@str+1
  6598  1F88  160A  158A  21D7   	fcall	_debug_line
  6599                           
  6600                           ;teris_16f886.c: 689: return LEFT_OVER_BOUNDARY;
  6601  1F8B  3002               	movlw	2
  6602  1F8C  0008               	return
  6603  1F8D                     l3567:	
  6604  1F8D  3001               	movlw	1
  6605  1F8E  00F8               	movwf	??_is_left_boundary
  6606  1F8F  0878               	movf	??_is_left_boundary,w
  6607  1F90  1283               	bcf	3,5	;RP0=0, select bank0
  6608  1F91  1303               	bcf	3,6	;RP1=0, select bank0
  6609  1F92  07A2               	addwf	is_left_boundary@col,f
  6610  1F93  0822               	movf	is_left_boundary@col,w
  6611  1F94  3A80               	xorlw	128
  6612  1F95  3E7C               	addlw	-132
  6613  1F96  1C03               	skipc
  6614  1F97  2F51               	goto	l3557
  6615  1F98                     l3571:	
  6616  1F98  30FF               	movlw	255
  6617  1F99  00F8               	movwf	??_is_left_boundary
  6618  1F9A  0878               	movf	??_is_left_boundary,w
  6619  1F9B  07A1               	addwf	is_left_boundary@row,f
  6620  1F9C  1FA1               	btfss	is_left_boundary@row,7
  6621  1F9D  2F4B               	goto	l3551
  6622  1F9E                     l3575:	
  6623                           
  6624                           ;teris_16f886.c: 690: }
  6625                           ;teris_16f886.c: 691: }
  6626                           ;teris_16f886.c: 692: }
  6627                           ;teris_16f886.c: 693: }
  6628                           ;teris_16f886.c: 694: return OK;
  6629  1F9E  3000               	movlw	0
  6630  1F9F  0008               	return
  6631  1FA0                     __end_of_is_left_boundary:	
  6632                           
  6633                           	psect	text15
  6634  1316                     __ptext15:	
  6635 ;; *************** function _is_valid *****************
  6636 ;; Defined at:
  6637 ;;		line 647 in file "teris_16f886.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;  x               1    wreg     char 
  6640 ;;  y               1   37[BANK0 ] char 
  6641 ;;  matrix44        2   38[BANK0 ] PTR const struct .
  6642 ;;		 -> g_matrix44(384), 
  6643 ;;  matrix88        1   40[BANK0 ] PTR const struct .
  6644 ;;		 -> g_matrix88(64), 
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;  x               1   45[BANK0 ] char 
  6647 ;;  col             1   47[BANK0 ] char 
  6648 ;;  row             1   46[BANK0 ] char 
  6649 ;; Return value:  Size  Location     Type
  6650 ;;                  1    wreg      unsigned char 
  6651 ;; Registers used:
  6652 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6658 ;;      Params:         0       4       0       0       0
  6659 ;;      Locals:         0       3       0       0       0
  6660 ;;      Temps:          0       4       0       0       0
  6661 ;;      Totals:         0      11       0       0       0
  6662 ;;Total ram usage:       11 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    3
  6665 ;; This function calls:
  6666 ;;		_debug_int2
  6667 ;;		_debug_line
  6668 ;; This function is called by:
  6669 ;;		_find_best_solution
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           
  6674                           ;psect for function _is_valid
  6675  1316                     _is_valid:	
  6676                           
  6677                           ;incstack = 0
  6678                           ; Regs used in _is_valid: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6679                           ;is_valid@x stored from wreg
  6680  1316  1283               	bcf	3,5	;RP0=0, select bank0
  6681  1317  1303               	bcf	3,6	;RP1=0, select bank0
  6682  1318  00CD               	movwf	is_valid@x
  6683                           
  6684                           ;teris_16f886.c: 649: debug_line("==============is_valid============");
  6685  1319  30A3               	movlw	low (STR_27| (0+32768))
  6686  131A  00F3               	movwf	debug_line@str
  6687  131B  308B               	movlw	high (STR_27| (0+32768))
  6688  131C  00F4               	movwf	debug_line@str+1
  6689  131D  160A  158A  21D7  160A  118A  	fcall	_debug_line
  6690                           
  6691                           ;teris_16f886.c: 650: for(int8_t row = 4 - 1; row >= 0; row--)
  6692  1322  3003               	movlw	3
  6693  1323  1283               	bcf	3,5	;RP0=0, select bank0
  6694  1324  1303               	bcf	3,6	;RP1=0, select bank0
  6695  1325  00C9               	movwf	??_is_valid
  6696  1326  0849               	movf	??_is_valid,w
  6697  1327  00CE               	movwf	is_valid@row
  6698  1328  1BCE               	btfsc	is_valid@row,7
  6699  1329  2BF5               	goto	l3705
  6700  132A                     l3663:	
  6701                           
  6702                           ;teris_16f886.c: 651: {
  6703                           ;teris_16f886.c: 652: for(int8_t col = 0; col < 4; col++)
  6704  132A  01CF               	clrf	is_valid@col
  6705  132B  084F               	movf	is_valid@col,w
  6706  132C  3A80               	xorlw	128
  6707  132D  3E7C               	addlw	-132
  6708  132E  1803               	btfsc	3,0
  6709  132F  2BEF               	goto	l3701
  6710  1330                     l3669:	
  6711                           
  6712                           ;teris_16f886.c: 653: {
  6713                           ;teris_16f886.c: 654: if(matrix44->data[row][col] == 1)
  6714  1330  084E               	movf	is_valid@row,w
  6715  1331  00C9               	movwf	??_is_valid
  6716  1332  01CA               	clrf	??_is_valid+1
  6717  1333  1003               	clrc
  6718  1334  0DC9               	rlf	??_is_valid,f
  6719  1335  0DCA               	rlf	??_is_valid+1,f
  6720  1336  1003               	clrc
  6721  1337  0DC9               	rlf	??_is_valid,f
  6722  1338  0DCA               	rlf	??_is_valid+1,f
  6723  1339  0849               	movf	??_is_valid,w
  6724  133A  0746               	addwf	is_valid@matrix44,w
  6725  133B  00CB               	movwf	??_is_valid+2
  6726  133C  084A               	movf	??_is_valid+1,w
  6727  133D  1803               	skipnc
  6728  133E  0A4A               	incf	??_is_valid+1,w
  6729  133F  0747               	addwf	is_valid@matrix44+1,w
  6730  1340  00CC               	movwf	??_is_valid+3
  6731  1341  084F               	movf	is_valid@col,w
  6732  1342  074B               	addwf	??_is_valid+2,w
  6733  1343  0084               	movwf	4
  6734  1344  084C               	movf	??_is_valid+3,w
  6735  1345  1803               	skipnc
  6736  1346  0A4C               	incf	??_is_valid+3,w
  6737  1347  00FF               	movwf	127
  6738  1348  120A  158A  2000  160A  118A  	fcall	stringtab
  6739  134D  3A01               	xorlw	1
  6740  134E  1D03               	skipz
  6741  134F  2BE4               	goto	l3697
  6742                           
  6743                           ;teris_16f886.c: 655: {
  6744                           ;teris_16f886.c: 656: if(matrix88->data[y + row][x + col] == 1)
  6745  1350  084F               	movf	is_valid@col,w
  6746  1351  074D               	addwf	is_valid@x,w
  6747  1352  0748               	addwf	is_valid@matrix88,w
  6748  1353  00C9               	movwf	??_is_valid
  6749  1354  084E               	movf	is_valid@row,w
  6750  1355  0745               	addwf	is_valid@y,w
  6751  1356  00CA               	movwf	??_is_valid+1
  6752  1357  3002               	movlw	2
  6753  1358                     u4635:	
  6754  1358  1003               	clrc
  6755  1359  0DCA               	rlf	??_is_valid+1,f
  6756  135A  3EFF               	addlw	-1
  6757  135B  1D03               	skipz
  6758  135C  2B58               	goto	u4635
  6759  135D  1003               	clrc
  6760  135E  0D4A               	rlf	??_is_valid+1,w
  6761  135F  0749               	addwf	??_is_valid,w
  6762  1360  00CB               	movwf	??_is_valid+2
  6763  1361  084B               	movf	??_is_valid+2,w
  6764  1362  0084               	movwf	4
  6765  1363  1783               	bsf	3,7	;select IRP bank2
  6766  1364  0300               	decf	0,w
  6767  1365  1D03               	btfss	3,2
  6768  1366  2B7A               	goto	l3679
  6769                           
  6770                           ;teris_16f886.c: 657: {
  6771                           ;teris_16f886.c: 658: debug_int2("not valid1 row = %d, col = %d", row, col);
  6772  1367  3028               	movlw	low (STR_28| (0+32768))
  6773  1368  00BF               	movwf	debug_int2@f
  6774  1369  308C               	movlw	high (STR_28| (0+32768))
  6775  136A  00C0               	movwf	debug_int2@f+1
  6776  136B  084E               	movf	is_valid@row,w
  6777  136C  00C1               	movwf	debug_int2@i1
  6778  136D  01C2               	clrf	debug_int2@i1+1
  6779  136E  1BC1               	btfsc	debug_int2@i1,7
  6780  136F  03C2               	decf	debug_int2@i1+1,f
  6781  1370  084F               	movf	is_valid@col,w
  6782  1371  00C3               	movwf	debug_int2@i2
  6783  1372  01C4               	clrf	debug_int2@i2+1
  6784  1373  1BC3               	btfsc	debug_int2@i2,7
  6785  1374  03C4               	decf	debug_int2@i2+1,f
  6786  1375  160A  158A  22DA   	fcall	_debug_int2
  6787                           
  6788                           ;teris_16f886.c: 659: return 0;
  6789  1378  3000               	movlw	0
  6790  1379  0008               	return
  6791  137A                     l3679:	
  6792                           
  6793                           ;teris_16f886.c: 660: }
  6794                           ;teris_16f886.c: 662: if(( x + col < 0) || (x + col >= 8))
  6795  137A  1283               	bcf	3,5	;RP0=0, select bank0
  6796  137B  1303               	bcf	3,6	;RP1=0, select bank0
  6797  137C  084D               	movf	is_valid@x,w
  6798  137D  074F               	addwf	is_valid@col,w
  6799  137E  00C9               	movwf	??_is_valid
  6800  137F  01CA               	clrf	??_is_valid+1
  6801  1380  1803               	skipnc
  6802  1381  0ACA               	incf	??_is_valid+1,f
  6803  1382  1BCD               	btfsc	is_valid@x,7
  6804  1383  03CA               	decf	??_is_valid+1,f
  6805  1384  1BCF               	btfsc	is_valid@col,7
  6806  1385  03CA               	decf	??_is_valid+1,f
  6807  1386  1283               	bcf	3,5	;RP0=0, select bank0
  6808  1387  1303               	bcf	3,6	;RP1=0, select bank0
  6809  1388  1BCA               	btfsc	??_is_valid+1,7
  6810  1389  2BA1               	goto	l3683
  6811  138A  084D               	movf	is_valid@x,w
  6812  138B  074F               	addwf	is_valid@col,w
  6813  138C  00C9               	movwf	??_is_valid
  6814  138D  01CA               	clrf	??_is_valid+1
  6815  138E  1803               	skipnc
  6816  138F  0ACA               	incf	??_is_valid+1,f
  6817  1390  1BCD               	btfsc	is_valid@x,7
  6818  1391  03CA               	decf	??_is_valid+1,f
  6819  1392  1BCF               	btfsc	is_valid@col,7
  6820  1393  03CA               	decf	??_is_valid+1,f
  6821  1394  1283               	bcf	3,5	;RP0=0, select bank0
  6822  1395  1303               	bcf	3,6	;RP1=0, select bank0
  6823  1396  084A               	movf	??_is_valid+1,w
  6824  1397  3A80               	xorlw	128
  6825  1398  00FF               	movwf	127
  6826  1399  3080               	movlw	128
  6827  139A  027F               	subwf	127,w
  6828  139B  1D03               	skipz
  6829  139C  2B9F               	goto	u4685
  6830  139D  3008               	movlw	8
  6831  139E  0249               	subwf	??_is_valid,w
  6832  139F                     u4685:	
  6833  139F  1C03               	skipc
  6834  13A0  2BB6               	goto	l3689
  6835  13A1                     l3683:	
  6836                           
  6837                           ;teris_16f886.c: 663: {
  6838                           ;teris_16f886.c: 664: debug_int2("not valid2 row = %d, col = %d", row, col);
  6839  13A1  3046               	movlw	low (STR_29| (0+32768))
  6840  13A2  1283               	bcf	3,5	;RP0=0, select bank0
  6841  13A3  1303               	bcf	3,6	;RP1=0, select bank0
  6842  13A4  00BF               	movwf	debug_int2@f
  6843  13A5  308C               	movlw	high (STR_29| (0+32768))
  6844  13A6  00C0               	movwf	debug_int2@f+1
  6845  13A7  084E               	movf	is_valid@row,w
  6846  13A8  00C1               	movwf	debug_int2@i1
  6847  13A9  01C2               	clrf	debug_int2@i1+1
  6848  13AA  1BC1               	btfsc	debug_int2@i1,7
  6849  13AB  03C2               	decf	debug_int2@i1+1,f
  6850  13AC  084F               	movf	is_valid@col,w
  6851  13AD  00C3               	movwf	debug_int2@i2
  6852  13AE  01C4               	clrf	debug_int2@i2+1
  6853  13AF  1BC3               	btfsc	debug_int2@i2,7
  6854  13B0  03C4               	decf	debug_int2@i2+1,f
  6855  13B1  160A  158A  22DA   	fcall	_debug_int2
  6856                           
  6857                           ;teris_16f886.c: 665: return 0;
  6858  13B4  3000               	movlw	0
  6859  13B5  0008               	return
  6860  13B6                     l3689:	
  6861                           
  6862                           ;teris_16f886.c: 666: }
  6863                           ;teris_16f886.c: 667: if((y + row) > (8 - 1))
  6864  13B6  1283               	bcf	3,5	;RP0=0, select bank0
  6865  13B7  1303               	bcf	3,6	;RP1=0, select bank0
  6866  13B8  0845               	movf	is_valid@y,w
  6867  13B9  074E               	addwf	is_valid@row,w
  6868  13BA  00C9               	movwf	??_is_valid
  6869  13BB  01CA               	clrf	??_is_valid+1
  6870  13BC  1803               	skipnc
  6871  13BD  0ACA               	incf	??_is_valid+1,f
  6872  13BE  1BC5               	btfsc	is_valid@y,7
  6873  13BF  03CA               	decf	??_is_valid+1,f
  6874  13C0  1BCE               	btfsc	is_valid@row,7
  6875  13C1  03CA               	decf	??_is_valid+1,f
  6876  13C2  1283               	bcf	3,5	;RP0=0, select bank0
  6877  13C3  1303               	bcf	3,6	;RP1=0, select bank0
  6878  13C4  084A               	movf	??_is_valid+1,w
  6879  13C5  3A80               	xorlw	128
  6880  13C6  00FF               	movwf	127
  6881  13C7  3080               	movlw	128
  6882  13C8  027F               	subwf	127,w
  6883  13C9  1D03               	skipz
  6884  13CA  2BCD               	goto	u4705
  6885  13CB  3008               	movlw	8
  6886  13CC  0249               	subwf	??_is_valid,w
  6887  13CD                     u4705:	
  6888  13CD  1C03               	skipc
  6889  13CE  2BE4               	goto	l3697
  6890                           
  6891                           ;teris_16f886.c: 668: {
  6892                           ;teris_16f886.c: 669: debug_int2("not valid3 row = %d, col = %d", row, col);
  6893  13CF  3064               	movlw	low (STR_30| (0+32768))
  6894  13D0  1283               	bcf	3,5	;RP0=0, select bank0
  6895  13D1  1303               	bcf	3,6	;RP1=0, select bank0
  6896  13D2  00BF               	movwf	debug_int2@f
  6897  13D3  308C               	movlw	high (STR_30| (0+32768))
  6898  13D4  00C0               	movwf	debug_int2@f+1
  6899  13D5  084E               	movf	is_valid@row,w
  6900  13D6  00C1               	movwf	debug_int2@i1
  6901  13D7  01C2               	clrf	debug_int2@i1+1
  6902  13D8  1BC1               	btfsc	debug_int2@i1,7
  6903  13D9  03C2               	decf	debug_int2@i1+1,f
  6904  13DA  084F               	movf	is_valid@col,w
  6905  13DB  00C3               	movwf	debug_int2@i2
  6906  13DC  01C4               	clrf	debug_int2@i2+1
  6907  13DD  1BC3               	btfsc	debug_int2@i2,7
  6908  13DE  03C4               	decf	debug_int2@i2+1,f
  6909  13DF  160A  158A  22DA   	fcall	_debug_int2
  6910                           
  6911                           ;teris_16f886.c: 670: return 0;
  6912  13E2  3000               	movlw	0
  6913  13E3  0008               	return
  6914  13E4                     l3697:	
  6915  13E4  3001               	movlw	1
  6916  13E5  1283               	bcf	3,5	;RP0=0, select bank0
  6917  13E6  1303               	bcf	3,6	;RP1=0, select bank0
  6918  13E7  00C9               	movwf	??_is_valid
  6919  13E8  0849               	movf	??_is_valid,w
  6920  13E9  07CF               	addwf	is_valid@col,f
  6921  13EA  084F               	movf	is_valid@col,w
  6922  13EB  3A80               	xorlw	128
  6923  13EC  3E7C               	addlw	-132
  6924  13ED  1C03               	skipc
  6925  13EE  2B30               	goto	l3669
  6926  13EF                     l3701:	
  6927  13EF  30FF               	movlw	255
  6928  13F0  00C9               	movwf	??_is_valid
  6929  13F1  0849               	movf	??_is_valid,w
  6930  13F2  07CE               	addwf	is_valid@row,f
  6931  13F3  1FCE               	btfss	is_valid@row,7
  6932  13F4  2B2A               	goto	l3663
  6933  13F5                     l3705:	
  6934                           
  6935                           ;teris_16f886.c: 671: }
  6936                           ;teris_16f886.c: 672: }
  6937                           ;teris_16f886.c: 673: }
  6938                           ;teris_16f886.c: 674: }
  6939                           ;teris_16f886.c: 675: debug_line("valid");
  6940  13F5  3061               	movlw	low (STR_31| (0+32768))
  6941  13F6  00F3               	movwf	debug_line@str
  6942  13F7  308E               	movlw	high (STR_31| (0+32768))
  6943  13F8  00F4               	movwf	debug_line@str+1
  6944  13F9  160A  158A  21D7   	fcall	_debug_line
  6945                           
  6946                           ;teris_16f886.c: 676: return 1;
  6947  13FC  3001               	movlw	1
  6948  13FD  0008               	return
  6949  13FE                     __end_of_is_valid:	
  6950                           
  6951                           	psect	text16
  6952  19D7                     __ptext16:	
  6953 ;; *************** function _debug_line *****************
  6954 ;; Defined at:
  6955 ;;		line 292 in file "teris_16f886.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;  str             2    3[COMMON] PTR const unsigned char 
  6958 ;;		 -> STR_62(13), STR_60(13), STR_43(45), STR_33(20), 
  6959 ;;		 -> STR_32(19), STR_31(6), STR_27(35), STR_26(8), 
  6960 ;;		 -> STR_23(35), STR_21(21), STR_20(1), STR_17(29), 
  6961 ;;		 -> STR_16(21), STR_15(1), STR_12(21), STR_9(21), 
  6962 ;;		 -> STR_8(1), STR_5(29), 
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;		None
  6965 ;; Return value:  Size  Location     Type
  6966 ;;                  1    wreg      void 
  6967 ;; Registers used:
  6968 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6969 ;; Tracked objects:
  6970 ;;		On entry : 0/0
  6971 ;;		On exit  : 0/0
  6972 ;;		Unchanged: 0/0
  6973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6974 ;;      Params:         2       0       0       0       0
  6975 ;;      Locals:         0       0       0       0       0
  6976 ;;      Temps:          0       0       0       0       0
  6977 ;;      Totals:         2       0       0       0       0
  6978 ;;Total ram usage:        2 bytes
  6979 ;; Hardware stack levels used:    1
  6980 ;; Hardware stack levels required when called:    2
  6981 ;; This function calls:
  6982 ;;		_USARTWriteString
  6983 ;; This function is called by:
  6984 ;;		_printf_console_MATRIX44
  6985 ;;		_printf_console_MATRIX88
  6986 ;;		_hit_land
  6987 ;;		_is_valid
  6988 ;;		_is_left_boundary
  6989 ;;		_is_right_boundary
  6990 ;;		_find_best_solution
  6991 ;;		_main
  6992 ;;		_printf_console_MATRIX7219
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           
  6997                           ;psect for function _debug_line
  6998  19D7                     _debug_line:	
  6999                           
  7000                           ;teris_16f886.c: 298: USARTWriteString(str);
  7001                           
  7002                           ;incstack = 0
  7003                           ; Regs used in _debug_line: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7004  19D7  0873               	movf	debug_line@str,w
  7005  19D8  00F1               	movwf	USARTWriteString@str
  7006  19D9  0874               	movf	debug_line@str+1,w
  7007  19DA  00F2               	movwf	USARTWriteString@str+1
  7008  19DB  160A  158A  2294  160A  158A  	fcall	_USARTWriteString
  7009                           
  7010                           ;teris_16f886.c: 299: USARTWriteString("\r\n");
  7011  19E0  3067               	movlw	low (STR_1| (0+32768))
  7012  19E1  00F1               	movwf	USARTWriteString@str
  7013  19E2  308E               	movlw	high (STR_1| (0+32768))
  7014  19E3  00F2               	movwf	USARTWriteString@str+1
  7015  19E4  160A  158A  2294   	fcall	_USARTWriteString
  7016  19E7  0008               	return
  7017  19E8                     __end_of_debug_line:	
  7018                           
  7019                           	psect	text17
  7020  002D                     __ptext17:	
  7021 ;; *************** function _get_holes_after_merge *****************
  7022 ;; Defined at:
  7023 ;;		line 871 in file "teris_16f886.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;  matrix          1    wreg     PTR struct .
  7026 ;;		 -> find_best_solution@temp_matrix88(64), 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;  matrix          1   48[BANK0 ] PTR struct .
  7029 ;;		 -> find_best_solution@temp_matrix88(64), 
  7030 ;;  row             1   50[BANK0 ] char 
  7031 ;;  col             1   49[BANK0 ] char 
  7032 ;;  start           1   47[BANK0 ] char 
  7033 ;;  stop            1   46[BANK0 ] char 
  7034 ;;  num_hole        1   45[BANK0 ] unsigned char 
  7035 ;; Return value:  Size  Location     Type
  7036 ;;                  1    wreg      unsigned char 
  7037 ;; Registers used:
  7038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7039 ;; Tracked objects:
  7040 ;;		On entry : 0/0
  7041 ;;		On exit  : 0/0
  7042 ;;		Unchanged: 0/0
  7043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7044 ;;      Params:         0       0       0       0       0
  7045 ;;      Locals:         0       6       0       0       0
  7046 ;;      Temps:          0       6       0       0       0
  7047 ;;      Totals:         0      12       0       0       0
  7048 ;;Total ram usage:       12 bytes
  7049 ;; Hardware stack levels used:    1
  7050 ;; Hardware stack levels required when called:    3
  7051 ;; This function calls:
  7052 ;;		_debug_int1
  7053 ;;		_debug_int3
  7054 ;; This function is called by:
  7055 ;;		_find_best_solution
  7056 ;; This function uses a non-reentrant model
  7057 ;;
  7058                           
  7059                           
  7060                           ;psect for function _get_holes_after_merge
  7061  002D                     _get_holes_after_merge:	
  7062                           
  7063                           ;incstack = 0
  7064                           ; Regs used in _get_holes_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  7065                           ;get_holes_after_merge@matrix stored from wreg
  7066  002D  1283               	bcf	3,5	;RP0=0, select bank0
  7067  002E  1303               	bcf	3,6	;RP1=0, select bank0
  7068  002F  00D0               	movwf	get_holes_after_merge@matrix
  7069                           
  7070                           ;teris_16f886.c: 873: int8_t start = -1;
  7071  0030  01CF               	clrf	get_holes_after_merge@start
  7072  0031  03CF               	decf	get_holes_after_merge@start,f
  7073                           
  7074                           ;teris_16f886.c: 874: int8_t stop = -1;
  7075  0032  01CE               	clrf	get_holes_after_merge@stop
  7076  0033  03CE               	decf	get_holes_after_merge@stop,f
  7077                           
  7078                           ;teris_16f886.c: 875: uint8_t num_hole = 0;
  7079  0034  01CD               	clrf	get_holes_after_merge@num_hole
  7080                           
  7081                           ;teris_16f886.c: 876: for(int8_t col = 0; col < 8; col++)
  7082  0035  01D1               	clrf	get_holes_after_merge@col
  7083  0036  0851               	movf	get_holes_after_merge@col,w
  7084  0037  3A80               	xorlw	128
  7085  0038  3E78               	addlw	-136
  7086  0039  1803               	btfsc	3,0
  7087  003A  2958               	goto	l3971
  7088  003B                     l3905:	
  7089                           
  7090                           ;teris_16f886.c: 877: {
  7091                           ;teris_16f886.c: 878: start = stop = -1;
  7092  003B  30FF               	movlw	255
  7093  003C  00CE               	movwf	get_holes_after_merge@stop
  7094  003D  00C7               	movwf	??_get_holes_after_merge
  7095  003E  0847               	movf	??_get_holes_after_merge,w
  7096  003F  00CF               	movwf	get_holes_after_merge@start
  7097                           
  7098                           ;teris_16f886.c: 879: for(int8_t row = 0; row < 8; row++)
  7099  0040  01D2               	clrf	get_holes_after_merge@row
  7100  0041  0852               	movf	get_holes_after_merge@row,w
  7101  0042  3A80               	xorlw	128
  7102  0043  3E78               	addlw	-136
  7103  0044  1803               	btfsc	3,0
  7104  0045  2908               	goto	l404
  7105  0046                     l3913:	
  7106                           
  7107                           ;teris_16f886.c: 880: {
  7108                           ;teris_16f886.c: 881: if(col == 0)
  7109  0046  0851               	movf	get_holes_after_merge@col,w
  7110  0047  1D03               	btfss	3,2
  7111  0048  286B               	goto	l3923
  7112                           
  7113                           ;teris_16f886.c: 882: {
  7114                           ;teris_16f886.c: 883: if((matrix->data[row][col] == 0) && (matrix->data[row][col + 1] ==
      +                           1))
  7115  0049  0852               	movf	get_holes_after_merge@row,w
  7116  004A  00C7               	movwf	??_get_holes_after_merge
  7117  004B  3002               	movlw	2
  7118  004C                     u5155:	
  7119  004C  1003               	clrc
  7120  004D  0DC7               	rlf	??_get_holes_after_merge,f
  7121  004E  3EFF               	addlw	-1
  7122  004F  1D03               	skipz
  7123  0050  284C               	goto	u5155
  7124  0051  1003               	clrc
  7125  0052  0D47               	rlf	??_get_holes_after_merge,w
  7126  0053  0750               	addwf	get_holes_after_merge@matrix,w
  7127  0054  00C8               	movwf	??_get_holes_after_merge+1
  7128  0055  0851               	movf	get_holes_after_merge@col,w
  7129  0056  0748               	addwf	??_get_holes_after_merge+1,w
  7130  0057  00C9               	movwf	??_get_holes_after_merge+2
  7131  0058  0849               	movf	??_get_holes_after_merge+2,w
  7132  0059  0084               	movwf	4
  7133  005A  1383               	bcf	3,7	;select IRP bank0
  7134  005B  0800               	movf	0,w
  7135  005C  1D03               	btfss	3,2
  7136  005D  28D7               	goto	l3943
  7137  005E  0851               	movf	get_holes_after_merge@col,w
  7138  005F  3E01               	addlw	1
  7139  0060  0750               	addwf	get_holes_after_merge@matrix,w
  7140  0061  00C7               	movwf	??_get_holes_after_merge
  7141  0062  0852               	movf	get_holes_after_merge@row,w
  7142  0063  00C8               	movwf	??_get_holes_after_merge+1
  7143  0064  3002               	movlw	2
  7144  0065                     u5175:	
  7145  0065  1003               	clrc
  7146  0066  0DC8               	rlf	??_get_holes_after_merge+1,f
  7147  0067  3EFF               	addlw	-1
  7148  0068  1D03               	skipz
  7149  0069  2865               	goto	u5175
  7150  006A  28C7               	goto	L15
  7151  006B                     l3923:	
  7152                           ;teris_16f886.c: 888: }
  7153                           ;teris_16f886.c: 889: }
  7154                           ;teris_16f886.c: 890: }
  7155                           
  7156                           ;teris_16f886.c: 886: {
  7157                           ;teris_16f886.c: 887: start = row;
  7158                           
  7159                           ;teris_16f886.c: 884: {
  7160                           ;teris_16f886.c: 885: if(start == -1)
  7161                           
  7162                           
  7163                           ;teris_16f886.c: 891: else if(col == 8 - 1)
  7164  006B  3007               	movlw	7
  7165  006C  0651               	xorwf	get_holes_after_merge@col,w
  7166  006D  1D03               	btfss	3,2
  7167  006E  2891               	goto	l3933
  7168                           
  7169                           ;teris_16f886.c: 892: {
  7170                           ;teris_16f886.c: 893: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] ==
      +                           1))
  7171  006F  0852               	movf	get_holes_after_merge@row,w
  7172  0070  00C7               	movwf	??_get_holes_after_merge
  7173  0071  3002               	movlw	2
  7174  0072                     u5215:	
  7175  0072  1003               	clrc
  7176  0073  0DC7               	rlf	??_get_holes_after_merge,f
  7177  0074  3EFF               	addlw	-1
  7178  0075  1D03               	skipz
  7179  0076  2872               	goto	u5215
  7180  0077  1003               	clrc
  7181  0078  0D47               	rlf	??_get_holes_after_merge,w
  7182  0079  0750               	addwf	get_holes_after_merge@matrix,w
  7183  007A  00C8               	movwf	??_get_holes_after_merge+1
  7184  007B  0851               	movf	get_holes_after_merge@col,w
  7185  007C  0748               	addwf	??_get_holes_after_merge+1,w
  7186  007D  00C9               	movwf	??_get_holes_after_merge+2
  7187  007E  0849               	movf	??_get_holes_after_merge+2,w
  7188  007F  0084               	movwf	4
  7189  0080  1383               	bcf	3,7	;select IRP bank0
  7190  0081  0800               	movf	0,w
  7191  0082  1D03               	btfss	3,2
  7192  0083  28D7               	goto	l3943
  7193  0084  0851               	movf	get_holes_after_merge@col,w
  7194  0085  3EFF               	addlw	255
  7195  0086  0750               	addwf	get_holes_after_merge@matrix,w
  7196  0087  00C7               	movwf	??_get_holes_after_merge
  7197  0088  0852               	movf	get_holes_after_merge@row,w
  7198  0089  00C8               	movwf	??_get_holes_after_merge+1
  7199  008A  3002               	movlw	2
  7200  008B                     u5235:	
  7201  008B  1003               	clrc
  7202  008C  0DC8               	rlf	??_get_holes_after_merge+1,f
  7203  008D  3EFF               	addlw	-1
  7204  008E  1D03               	skipz
  7205  008F  288B               	goto	u5235
  7206  0090  28C7               	goto	L15
  7207  0091                     l3933:	
  7208                           ;teris_16f886.c: 898: }
  7209                           ;teris_16f886.c: 899: }
  7210                           ;teris_16f886.c: 900: }
  7211                           
  7212                           ;teris_16f886.c: 896: {
  7213                           ;teris_16f886.c: 897: start = row;
  7214                           
  7215                           ;teris_16f886.c: 894: {
  7216                           ;teris_16f886.c: 895: if(start == -1)
  7217                           
  7218                           
  7219                           ;teris_16f886.c: 901: else
  7220                           ;teris_16f886.c: 902: {
  7221                           ;teris_16f886.c: 903: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] ==
      +                           1) && (matrix->data[row][col + 1] == 1))
  7222  0091  0852               	movf	get_holes_after_merge@row,w
  7223  0092  00C7               	movwf	??_get_holes_after_merge
  7224  0093  3002               	movlw	2
  7225  0094                     u5265:	
  7226  0094  1003               	clrc
  7227  0095  0DC7               	rlf	??_get_holes_after_merge,f
  7228  0096  3EFF               	addlw	-1
  7229  0097  1D03               	skipz
  7230  0098  2894               	goto	u5265
  7231  0099  1003               	clrc
  7232  009A  0D47               	rlf	??_get_holes_after_merge,w
  7233  009B  0750               	addwf	get_holes_after_merge@matrix,w
  7234  009C  00C8               	movwf	??_get_holes_after_merge+1
  7235  009D  0851               	movf	get_holes_after_merge@col,w
  7236  009E  0748               	addwf	??_get_holes_after_merge+1,w
  7237  009F  00C9               	movwf	??_get_holes_after_merge+2
  7238  00A0  0849               	movf	??_get_holes_after_merge+2,w
  7239  00A1  0084               	movwf	4
  7240  00A2  1383               	bcf	3,7	;select IRP bank0
  7241  00A3  0800               	movf	0,w
  7242  00A4  1D03               	btfss	3,2
  7243  00A5  28D7               	goto	l3943
  7244  00A6  0851               	movf	get_holes_after_merge@col,w
  7245  00A7  3EFF               	addlw	255
  7246  00A8  0750               	addwf	get_holes_after_merge@matrix,w
  7247  00A9  00C7               	movwf	??_get_holes_after_merge
  7248  00AA  0852               	movf	get_holes_after_merge@row,w
  7249  00AB  00C8               	movwf	??_get_holes_after_merge+1
  7250  00AC  3002               	movlw	2
  7251  00AD                     u5285:	
  7252  00AD  1003               	clrc
  7253  00AE  0DC8               	rlf	??_get_holes_after_merge+1,f
  7254  00AF  3EFF               	addlw	-1
  7255  00B0  1D03               	skipz
  7256  00B1  28AD               	goto	u5285
  7257  00B2  1003               	clrc
  7258  00B3  0D48               	rlf	??_get_holes_after_merge+1,w
  7259  00B4  0747               	addwf	??_get_holes_after_merge,w
  7260  00B5  00C9               	movwf	??_get_holes_after_merge+2
  7261  00B6  0849               	movf	??_get_holes_after_merge+2,w
  7262  00B7  0084               	movwf	4
  7263  00B8  0300               	decf	0,w
  7264  00B9  1D03               	btfss	3,2
  7265  00BA  28D7               	goto	l3943
  7266  00BB  0851               	movf	get_holes_after_merge@col,w
  7267  00BC  3E01               	addlw	1
  7268  00BD  0750               	addwf	get_holes_after_merge@matrix,w
  7269  00BE  00C7               	movwf	??_get_holes_after_merge
  7270  00BF  0852               	movf	get_holes_after_merge@row,w
  7271  00C0  00C8               	movwf	??_get_holes_after_merge+1
  7272  00C1  3002               	movlw	2
  7273  00C2                     u5305:	
  7274  00C2  1003               	clrc
  7275  00C3  0DC8               	rlf	??_get_holes_after_merge+1,f
  7276  00C4  3EFF               	addlw	-1
  7277  00C5  1D03               	skipz
  7278  00C6  28C2               	goto	u5305
  7279  00C7                     L15:	
  7280  00C7  1003               	clrc
  7281  00C8  0D48               	rlf	??_get_holes_after_merge+1,w
  7282  00C9  0747               	addwf	??_get_holes_after_merge,w
  7283  00CA  00C9               	movwf	??_get_holes_after_merge+2
  7284  00CB  0849               	movf	??_get_holes_after_merge+2,w
  7285  00CC  0084               	movwf	4
  7286  00CD  0300               	decf	0,w
  7287  00CE  1D03               	btfss	3,2
  7288  00CF  28D7               	goto	l3943
  7289                           
  7290                           ;teris_16f886.c: 904: {
  7291                           ;teris_16f886.c: 905: if(start == -1)
  7292  00D0  0A4F               	incf	get_holes_after_merge@start,w
  7293  00D1  1D03               	btfss	3,2
  7294  00D2  28D7               	goto	l3943
  7295                           
  7296                           ;teris_16f886.c: 906: {
  7297                           ;teris_16f886.c: 907: start = row;
  7298  00D3  0852               	movf	get_holes_after_merge@row,w
  7299  00D4  00C7               	movwf	??_get_holes_after_merge
  7300  00D5  0847               	movf	??_get_holes_after_merge,w
  7301  00D6  00CF               	movwf	get_holes_after_merge@start
  7302  00D7                     l3943:	
  7303                           
  7304                           ;teris_16f886.c: 908: }
  7305                           ;teris_16f886.c: 909: }
  7306                           ;teris_16f886.c: 910: }
  7307                           ;teris_16f886.c: 911: if(start >= 0)
  7308  00D7  1BCF               	btfsc	get_holes_after_merge@start,7
  7309  00D8  28FF               	goto	l415
  7310                           
  7311                           ;teris_16f886.c: 912: {
  7312                           ;teris_16f886.c: 913: if(row == 8 - 1)
  7313  00D9  3007               	movlw	7
  7314  00DA  0652               	xorwf	get_holes_after_merge@row,w
  7315  00DB  1D03               	btfss	3,2
  7316  00DC  28E2               	goto	l3951
  7317                           
  7318                           ;teris_16f886.c: 914: {
  7319                           ;teris_16f886.c: 915: if(stop == -1)
  7320  00DD  0A4E               	incf	get_holes_after_merge@stop,w
  7321  00DE  1D03               	btfss	3,2
  7322  00DF  28FF               	goto	l415
  7323                           
  7324                           ;teris_16f886.c: 916: {
  7325                           ;teris_16f886.c: 917: stop = 8;
  7326  00E0  3008               	movlw	8
  7327  00E1  28FC               	goto	L14
  7328  00E2                     l3951:	
  7329                           ;teris_16f886.c: 918: }
  7330                           ;teris_16f886.c: 919: }
  7331                           
  7332                           
  7333                           ;teris_16f886.c: 920: else if(matrix->data[row + 1][col] == 1)
  7334  00E2  0852               	movf	get_holes_after_merge@row,w
  7335  00E3  00C7               	movwf	??_get_holes_after_merge
  7336  00E4  3002               	movlw	2
  7337  00E5                     u5365:	
  7338  00E5  1003               	clrc
  7339  00E6  0DC7               	rlf	??_get_holes_after_merge,f
  7340  00E7  3EFF               	addlw	-1
  7341  00E8  1D03               	skipz
  7342  00E9  28E5               	goto	u5365
  7343  00EA  1003               	clrc
  7344  00EB  0D47               	rlf	??_get_holes_after_merge,w
  7345  00EC  3E08               	addlw	8
  7346  00ED  0750               	addwf	get_holes_after_merge@matrix,w
  7347  00EE  00C8               	movwf	??_get_holes_after_merge+1
  7348  00EF  0851               	movf	get_holes_after_merge@col,w
  7349  00F0  0748               	addwf	??_get_holes_after_merge+1,w
  7350  00F1  00C9               	movwf	??_get_holes_after_merge+2
  7351  00F2  0849               	movf	??_get_holes_after_merge+2,w
  7352  00F3  0084               	movwf	4
  7353  00F4  0300               	decf	0,w
  7354  00F5  1D03               	btfss	3,2
  7355  00F6  28FF               	goto	l415
  7356                           
  7357                           ;teris_16f886.c: 921: {
  7358                           ;teris_16f886.c: 922: if(stop == -1)
  7359  00F7  0A4E               	incf	get_holes_after_merge@stop,w
  7360  00F8  1D03               	btfss	3,2
  7361  00F9  28FF               	goto	l415
  7362                           
  7363                           ;teris_16f886.c: 923: {
  7364                           ;teris_16f886.c: 924: stop = row + 1;
  7365  00FA  0852               	movf	get_holes_after_merge@row,w
  7366  00FB  3E01               	addlw	1
  7367  00FC                     L14:	
  7368  00FC  00C7               	movwf	??_get_holes_after_merge
  7369  00FD  0847               	movf	??_get_holes_after_merge,w
  7370  00FE  00CE               	movwf	get_holes_after_merge@stop
  7371  00FF                     l415:	
  7372  00FF  3001               	movlw	1
  7373  0100  00C7               	movwf	??_get_holes_after_merge
  7374  0101  0847               	movf	??_get_holes_after_merge,w
  7375  0102  07D2               	addwf	get_holes_after_merge@row,f
  7376  0103  0852               	movf	get_holes_after_merge@row,w
  7377  0104  3A80               	xorlw	128
  7378  0105  3E78               	addlw	-136
  7379  0106  1C03               	skipc
  7380  0107  2846               	goto	l3913
  7381  0108                     l404:	
  7382                           
  7383                           ;teris_16f886.c: 925: }
  7384                           ;teris_16f886.c: 926: }
  7385                           ;teris_16f886.c: 927: }
  7386                           ;teris_16f886.c: 929: }
  7387                           ;teris_16f886.c: 930: if((start >= 0) && (stop >= 0) && (stop - start >= 3))
  7388  0108  1FCF               	btfss	get_holes_after_merge@start,7
  7389  0109  1BCE               	btfsc	get_holes_after_merge@stop,7
  7390  010A  294D               	goto	l3967
  7391  010B  084F               	movf	get_holes_after_merge@start,w
  7392  010C  00C7               	movwf	??_get_holes_after_merge
  7393  010D  01C8               	clrf	??_get_holes_after_merge+1
  7394  010E  1BC7               	btfsc	??_get_holes_after_merge,7
  7395  010F  03C8               	decf	??_get_holes_after_merge+1,f
  7396  0110  09C7               	comf	??_get_holes_after_merge,f
  7397  0111  09C8               	comf	??_get_holes_after_merge+1,f
  7398  0112  0AC7               	incf	??_get_holes_after_merge,f
  7399  0113  1903               	skipnz
  7400  0114  0AC8               	incf	??_get_holes_after_merge+1,f
  7401  0115  084E               	movf	get_holes_after_merge@stop,w
  7402  0116  00C9               	movwf	??_get_holes_after_merge+2
  7403  0117  01CA               	clrf	??_get_holes_after_merge+3
  7404  0118  1BC9               	btfsc	??_get_holes_after_merge+2,7
  7405  0119  03CA               	decf	??_get_holes_after_merge+3,f
  7406  011A  0847               	movf	??_get_holes_after_merge,w
  7407  011B  0749               	addwf	??_get_holes_after_merge+2,w
  7408  011C  00CB               	movwf	??_get_holes_after_merge+4
  7409  011D  0848               	movf	??_get_holes_after_merge+1,w
  7410  011E  1803               	skipnc
  7411  011F  0A48               	incf	??_get_holes_after_merge+1,w
  7412  0120  074A               	addwf	??_get_holes_after_merge+3,w
  7413  0121  00CC               	movwf	??_get_holes_after_merge+5
  7414  0122  084C               	movf	??_get_holes_after_merge+5,w
  7415  0123  3A80               	xorlw	128
  7416  0124  00FF               	movwf	127
  7417  0125  3080               	movlw	128
  7418  0126  027F               	subwf	127,w
  7419  0127  1D03               	skipz
  7420  0128  292B               	goto	u5425
  7421  0129  3003               	movlw	3
  7422  012A  024B               	subwf	??_get_holes_after_merge+4,w
  7423  012B                     u5425:	
  7424  012B  1C03               	skipc
  7425  012C  294D               	goto	l3967
  7426                           
  7427                           ;teris_16f886.c: 931: {
  7428                           ;teris_16f886.c: 932: debug_int3("col = %d, start = %d, stop = %d\n", col, start, stop);
  7429  012D  30E9               	movlw	low (STR_41| (0+32768))
  7430  012E  1283               	bcf	3,5	;RP0=0, select bank0
  7431  012F  1303               	bcf	3,6	;RP1=0, select bank0
  7432  0130  00BF               	movwf	debug_int3@f
  7433  0131  308B               	movlw	high (STR_41| (0+32768))
  7434  0132  00C0               	movwf	debug_int3@f+1
  7435  0133  0851               	movf	get_holes_after_merge@col,w
  7436  0134  00C1               	movwf	debug_int3@i1
  7437  0135  01C2               	clrf	debug_int3@i1+1
  7438  0136  1BC1               	btfsc	debug_int3@i1,7
  7439  0137  03C2               	decf	debug_int3@i1+1,f
  7440  0138  084F               	movf	get_holes_after_merge@start,w
  7441  0139  00C3               	movwf	debug_int3@i2
  7442  013A  01C4               	clrf	debug_int3@i2+1
  7443  013B  1BC3               	btfsc	debug_int3@i2,7
  7444  013C  03C4               	decf	debug_int3@i2+1,f
  7445  013D  084E               	movf	get_holes_after_merge@stop,w
  7446  013E  00C5               	movwf	debug_int3@i3
  7447  013F  01C6               	clrf	debug_int3@i3+1
  7448  0140  1BC5               	btfsc	debug_int3@i3,7
  7449  0141  03C6               	decf	debug_int3@i3+1,f
  7450  0142  160A  158A  2326  120A  118A  	fcall	_debug_int3
  7451                           
  7452                           ;teris_16f886.c: 933: num_hole++;
  7453  0147  3001               	movlw	1
  7454  0148  1283               	bcf	3,5	;RP0=0, select bank0
  7455  0149  1303               	bcf	3,6	;RP1=0, select bank0
  7456  014A  00C7               	movwf	??_get_holes_after_merge
  7457  014B  0847               	movf	??_get_holes_after_merge,w
  7458  014C  07CD               	addwf	get_holes_after_merge@num_hole,f
  7459  014D                     l3967:	
  7460  014D  3001               	movlw	1
  7461  014E  1283               	bcf	3,5	;RP0=0, select bank0
  7462  014F  1303               	bcf	3,6	;RP1=0, select bank0
  7463  0150  00C7               	movwf	??_get_holes_after_merge
  7464  0151  0847               	movf	??_get_holes_after_merge,w
  7465  0152  07D1               	addwf	get_holes_after_merge@col,f
  7466  0153  0851               	movf	get_holes_after_merge@col,w
  7467  0154  3A80               	xorlw	128
  7468  0155  3E78               	addlw	-136
  7469  0156  1C03               	skipc
  7470  0157  283B               	goto	l3905
  7471  0158                     l3971:	
  7472                           
  7473                           ;teris_16f886.c: 934: }
  7474                           ;teris_16f886.c: 935: }
  7475                           ;teris_16f886.c: 936: debug_int1("num_hole = (%d)\n", num_hole);
  7476  0158  30F1               	movlw	low (STR_42| (0+32768))
  7477  0159  00BF               	movwf	debug_int1@f
  7478  015A  308D               	movlw	high (STR_42| (0+32768))
  7479  015B  00C0               	movwf	debug_int1@f+1
  7480  015C  084D               	movf	get_holes_after_merge@num_hole,w
  7481  015D  00C7               	movwf	??_get_holes_after_merge
  7482  015E  01C8               	clrf	??_get_holes_after_merge+1
  7483  015F  0847               	movf	??_get_holes_after_merge,w
  7484  0160  00C1               	movwf	debug_int1@i
  7485  0161  0848               	movf	??_get_holes_after_merge+1,w
  7486  0162  00C2               	movwf	debug_int1@i+1
  7487  0163  160A  158A  2273   	fcall	_debug_int1
  7488                           
  7489                           ;teris_16f886.c: 937: return num_hole;
  7490  0166  1283               	bcf	3,5	;RP0=0, select bank0
  7491  0167  1303               	bcf	3,6	;RP1=0, select bank0
  7492  0168  084D               	movf	get_holes_after_merge@num_hole,w
  7493  0169  0008               	return
  7494  016A                     __end_of_get_holes_after_merge:	
  7495                           
  7496                           	psect	text18
  7497  10E5                     __ptext18:	
  7498 ;; *************** function _get_high_after_merge *****************
  7499 ;; Defined at:
  7500 ;;		line 857 in file "teris_16f886.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;  y               1    wreg     char 
  7503 ;;  matrix          2   39[BANK0 ] PTR struct .
  7504 ;;		 -> g_matrix44(384), 
  7505 ;; Auto vars:     Size  Location     Type
  7506 ;;  y               1   45[BANK0 ] char 
  7507 ;;  col             1   46[BANK0 ] char 
  7508 ;;  row             1   47[BANK0 ] char 
  7509 ;; Return value:  Size  Location     Type
  7510 ;;                  1    wreg      unsigned char 
  7511 ;; Registers used:
  7512 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7513 ;; Tracked objects:
  7514 ;;		On entry : 0/0
  7515 ;;		On exit  : 0/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7518 ;;      Params:         0       2       0       0       0
  7519 ;;      Locals:         0       3       0       0       0
  7520 ;;      Temps:          0       4       0       0       0
  7521 ;;      Totals:         0       9       0       0       0
  7522 ;;Total ram usage:        9 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; Hardware stack levels required when called:    3
  7525 ;; This function calls:
  7526 ;;		_debug_int3
  7527 ;; This function is called by:
  7528 ;;		_find_best_solution
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           
  7533                           ;psect for function _get_high_after_merge
  7534  10E5                     _get_high_after_merge:	
  7535                           
  7536                           ;incstack = 0
  7537                           ; Regs used in _get_high_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  7538                           ;get_high_after_merge@y stored from wreg
  7539  10E5  1283               	bcf	3,5	;RP0=0, select bank0
  7540  10E6  1303               	bcf	3,6	;RP1=0, select bank0
  7541  10E7  00CD               	movwf	get_high_after_merge@y
  7542                           
  7543                           ;teris_16f886.c: 859: for(int8_t row = 0; row < 4; row++)
  7544  10E8  01CF               	clrf	get_high_after_merge@row
  7545  10E9                     L16:	
  7546  10E9  084F               	movf	get_high_after_merge@row,w
  7547  10EA  3A80               	xorlw	128
  7548  10EB  3E7C               	addlw	-132
  7549  10EC  1803               	btfsc	3,0
  7550  10ED  0008               	return
  7551                           
  7552                           ;teris_16f886.c: 860: {
  7553                           ;teris_16f886.c: 861: for(int8_t col = 0; col < 4; col++)
  7554  10EE  01CE               	clrf	get_high_after_merge@col
  7555  10EF  084E               	movf	get_high_after_merge@col,w
  7556  10F0  3A80               	xorlw	128
  7557  10F1  3E7C               	addlw	-132
  7558  10F2  1803               	btfsc	3,0
  7559  10F3  294F               	goto	l3893
  7560  10F4                     l3881:	
  7561                           
  7562                           ;teris_16f886.c: 862: {
  7563                           ;teris_16f886.c: 863: if(matrix->data[row][col] == 1)
  7564  10F4  084F               	movf	get_high_after_merge@row,w
  7565  10F5  00C9               	movwf	??_get_high_after_merge
  7566  10F6  01CA               	clrf	??_get_high_after_merge+1
  7567  10F7  1003               	clrc
  7568  10F8  0DC9               	rlf	??_get_high_after_merge,f
  7569  10F9  0DCA               	rlf	??_get_high_after_merge+1,f
  7570  10FA  1003               	clrc
  7571  10FB  0DC9               	rlf	??_get_high_after_merge,f
  7572  10FC  0DCA               	rlf	??_get_high_after_merge+1,f
  7573  10FD  0849               	movf	??_get_high_after_merge,w
  7574  10FE  0747               	addwf	get_high_after_merge@matrix,w
  7575  10FF  00CB               	movwf	??_get_high_after_merge+2
  7576  1100  084A               	movf	??_get_high_after_merge+1,w
  7577  1101  1803               	skipnc
  7578  1102  0A4A               	incf	??_get_high_after_merge+1,w
  7579  1103  0748               	addwf	get_high_after_merge@matrix+1,w
  7580  1104  00CC               	movwf	??_get_high_after_merge+3
  7581  1105  084E               	movf	get_high_after_merge@col,w
  7582  1106  074B               	addwf	??_get_high_after_merge+2,w
  7583  1107  0084               	movwf	4
  7584  1108  084C               	movf	??_get_high_after_merge+3,w
  7585  1109  1803               	skipnc
  7586  110A  0A4C               	incf	??_get_high_after_merge+3,w
  7587  110B  00FF               	movwf	127
  7588  110C  120A  158A  2000  160A  118A  	fcall	stringtab
  7589  1111  3A01               	xorlw	1
  7590  1112  1D03               	skipz
  7591  1113  2946               	goto	l3889
  7592                           
  7593                           ;teris_16f886.c: 864: {
  7594                           ;teris_16f886.c: 865: debug_int3("get_high_after_merge y = %d, row = %d, height = %d\n",
      +                           y, row, 8 - y - row);
  7595  1114  30B0               	movlw	low (STR_40| (0+32768))
  7596  1115  00BF               	movwf	debug_int3@f
  7597  1116  3089               	movlw	high (STR_40| (0+32768))
  7598  1117  00C0               	movwf	debug_int3@f+1
  7599  1118  084D               	movf	get_high_after_merge@y,w
  7600  1119  00C1               	movwf	debug_int3@i1
  7601  111A  01C2               	clrf	debug_int3@i1+1
  7602  111B  1BC1               	btfsc	debug_int3@i1,7
  7603  111C  03C2               	decf	debug_int3@i1+1,f
  7604  111D  084F               	movf	get_high_after_merge@row,w
  7605  111E  00C3               	movwf	debug_int3@i2
  7606  111F  01C4               	clrf	debug_int3@i2+1
  7607  1120  1BC3               	btfsc	debug_int3@i2,7
  7608  1121  03C4               	decf	debug_int3@i2+1,f
  7609  1122  084D               	movf	get_high_after_merge@y,w
  7610  1123  074F               	addwf	get_high_after_merge@row,w
  7611  1124  00C9               	movwf	??_get_high_after_merge
  7612  1125  01CA               	clrf	??_get_high_after_merge+1
  7613  1126  1803               	skipnc
  7614  1127  0ACA               	incf	??_get_high_after_merge+1,f
  7615  1128  1BCD               	btfsc	get_high_after_merge@y,7
  7616  1129  03CA               	decf	??_get_high_after_merge+1,f
  7617  112A  1BCF               	btfsc	get_high_after_merge@row,7
  7618  112B  03CA               	decf	??_get_high_after_merge+1,f
  7619  112C  1283               	bcf	3,5	;RP0=0, select bank0
  7620  112D  1303               	bcf	3,6	;RP1=0, select bank0
  7621  112E  09C9               	comf	??_get_high_after_merge,f
  7622  112F  09CA               	comf	??_get_high_after_merge+1,f
  7623  1130  0AC9               	incf	??_get_high_after_merge,f
  7624  1131  1903               	skipnz
  7625  1132  0ACA               	incf	??_get_high_after_merge+1,f
  7626  1133  0849               	movf	??_get_high_after_merge,w
  7627  1134  3E08               	addlw	8
  7628  1135  00C5               	movwf	debug_int3@i3
  7629  1136  084A               	movf	??_get_high_after_merge+1,w
  7630  1137  1803               	skipnc
  7631  1138  3E01               	addlw	1
  7632  1139  3E00               	addlw	0
  7633  113A  00C6               	movwf	debug_int3@i3+1
  7634  113B  160A  158A  2326   	fcall	_debug_int3
  7635                           
  7636                           ;teris_16f886.c: 866: return (uint8_t)(8 - y - row);
  7637  113E  1283               	bcf	3,5	;RP0=0, select bank0
  7638  113F  1303               	bcf	3,6	;RP1=0, select bank0
  7639  1140  084F               	movf	get_high_after_merge@row,w
  7640  1141  074D               	addwf	get_high_after_merge@y,w
  7641  1142  3AFF               	xorlw	255
  7642  1143  3E01               	addlw	1
  7643  1144  3E08               	addlw	8
  7644  1145  0008               	return
  7645  1146                     l3889:	
  7646  1146  3001               	movlw	1
  7647  1147  00C9               	movwf	??_get_high_after_merge
  7648  1148  0849               	movf	??_get_high_after_merge,w
  7649  1149  07CE               	addwf	get_high_after_merge@col,f
  7650  114A  084E               	movf	get_high_after_merge@col,w
  7651  114B  3A80               	xorlw	128
  7652  114C  3E7C               	addlw	-132
  7653  114D  1C03               	skipc
  7654  114E  28F4               	goto	l3881
  7655  114F                     l3893:	
  7656  114F  3001               	movlw	1
  7657  1150  00C9               	movwf	??_get_high_after_merge
  7658  1151  0849               	movf	??_get_high_after_merge,w
  7659  1152  07CF               	addwf	get_high_after_merge@row,f
  7660  1153  28E9               	goto	L16
  7661  1154                     __end_of_get_high_after_merge:	
  7662                           
  7663                           	psect	text19
  7664  1B26                     __ptext19:	
  7665 ;; *************** function _debug_int3 *****************
  7666 ;; Defined at:
  7667 ;;		line 325 in file "teris_16f886.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;  f               2   31[BANK0 ] PTR const unsigned char 
  7670 ;;		 -> STR_41(33), STR_40(52), 
  7671 ;;  i1              2   33[BANK0 ] int 
  7672 ;;  i2              2   35[BANK0 ] int 
  7673 ;;  i3              2   37[BANK0 ] int 
  7674 ;; Auto vars:     Size  Location     Type
  7675 ;;		None
  7676 ;; Return value:  Size  Location     Type
  7677 ;;                  1    wreg      void 
  7678 ;; Registers used:
  7679 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7680 ;; Tracked objects:
  7681 ;;		On entry : 0/0
  7682 ;;		On exit  : 0/0
  7683 ;;		Unchanged: 0/0
  7684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7685 ;;      Params:         0       8       0       0       0
  7686 ;;      Locals:         0       0       0       0       0
  7687 ;;      Temps:          0       0       0       0       0
  7688 ;;      Totals:         0       8       0       0       0
  7689 ;;Total ram usage:        8 bytes
  7690 ;; Hardware stack levels used:    1
  7691 ;; Hardware stack levels required when called:    2
  7692 ;; This function calls:
  7693 ;;		_USARTWriteString
  7694 ;;		_sprintf
  7695 ;; This function is called by:
  7696 ;;		_get_high_after_merge
  7697 ;;		_get_holes_after_merge
  7698 ;; This function uses a non-reentrant model
  7699 ;;
  7700                           
  7701                           
  7702                           ;psect for function _debug_int3
  7703  1B26                     _debug_int3:	
  7704                           
  7705                           ;teris_16f886.c: 331: sprintf(g_debug, f, i1, i2, i3);
  7706                           
  7707                           ;incstack = 0
  7708                           ; Regs used in _debug_int3: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7709  1B26  1283               	bcf	3,5	;RP0=0, select bank0
  7710  1B27  1303               	bcf	3,6	;RP1=0, select bank0
  7711  1B28  083F               	movf	debug_int3@f,w
  7712  1B29  00A0               	movwf	sprintf@f
  7713  1B2A  0840               	movf	debug_int3@f+1,w
  7714  1B2B  00A1               	movwf	sprintf@f+1
  7715  1B2C  0842               	movf	debug_int3@i1+1,w
  7716  1B2D  00A3               	movwf	?_sprintf+3
  7717  1B2E  0841               	movf	debug_int3@i1,w
  7718  1B2F  00A2               	movwf	?_sprintf+2
  7719  1B30  0844               	movf	debug_int3@i2+1,w
  7720  1B31  00A5               	movwf	?_sprintf+5
  7721  1B32  0843               	movf	debug_int3@i2,w
  7722  1B33  00A4               	movwf	?_sprintf+4
  7723  1B34  0846               	movf	debug_int3@i3+1,w
  7724  1B35  00A7               	movwf	?_sprintf+7
  7725  1B36  0845               	movf	debug_int3@i3,w
  7726  1B37  00A6               	movwf	?_sprintf+6
  7727  1B38  3098               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7728  1B39  120A  118A  22C2  160A  158A  	fcall	_sprintf
  7729                           
  7730                           ;teris_16f886.c: 332: USARTWriteString(g_debug);
  7731  1B3E  3098               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7732  1B3F  00F1               	movwf	USARTWriteString@str
  7733  1B40  3001               	movlw	1
  7734  1B41  00F2               	movwf	USARTWriteString@str+1
  7735  1B42  160A  158A  2294  160A  158A  	fcall	_USARTWriteString
  7736                           
  7737                           ;teris_16f886.c: 333: USARTWriteString("\r\n");
  7738  1B47  3067               	movlw	low (STR_1| (0+32768))
  7739  1B48  00F1               	movwf	USARTWriteString@str
  7740  1B49  308E               	movlw	high (STR_1| (0+32768))
  7741  1B4A  00F2               	movwf	USARTWriteString@str+1
  7742  1B4B  160A  158A  2294   	fcall	_USARTWriteString
  7743  1B4E  0008               	return
  7744  1B4F                     __end_of_debug_int3:	
  7745                           
  7746                           	psect	text20
  7747  1D6A                     __ptext20:	
  7748 ;; *************** function _get_high *****************
  7749 ;; Defined at:
  7750 ;;		line 845 in file "teris_16f886.c"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;  matrix          1    wreg     PTR struct .
  7753 ;;		 -> g_matrix88(64), 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;  matrix          1   37[BANK0 ] PTR struct .
  7756 ;;		 -> g_matrix88(64), 
  7757 ;;  row             1   38[BANK0 ] char 
  7758 ;; Return value:  Size  Location     Type
  7759 ;;                  1    wreg      unsigned char 
  7760 ;; Registers used:
  7761 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7762 ;; Tracked objects:
  7763 ;;		On entry : 0/0
  7764 ;;		On exit  : 0/0
  7765 ;;		Unchanged: 0/0
  7766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7767 ;;      Params:         0       0       0       0       0
  7768 ;;      Locals:         0       2       0       0       0
  7769 ;;      Temps:          0       2       0       0       0
  7770 ;;      Totals:         0       4       0       0       0
  7771 ;;Total ram usage:        4 bytes
  7772 ;; Hardware stack levels used:    1
  7773 ;; Hardware stack levels required when called:    3
  7774 ;; This function calls:
  7775 ;;		_debug_int1
  7776 ;;		_is_row_empty
  7777 ;; This function is called by:
  7778 ;;		_find_best_solution
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           
  7783                           ;psect for function _get_high
  7784  1D6A                     _get_high:	
  7785                           
  7786                           ;incstack = 0
  7787                           ; Regs used in _get_high: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7788                           ;get_high@matrix stored from wreg
  7789  1D6A  1283               	bcf	3,5	;RP0=0, select bank0
  7790  1D6B  1303               	bcf	3,6	;RP1=0, select bank0
  7791  1D6C  00C5               	movwf	get_high@matrix
  7792                           
  7793                           ;teris_16f886.c: 847: for(int8_t row = 8 - 1; row >= 0; row--)
  7794  1D6D  3007               	movlw	7
  7795  1D6E  00C3               	movwf	??_get_high
  7796  1D6F  0843               	movf	??_get_high,w
  7797  1D70  00C6               	movwf	get_high@row
  7798  1D71  1BC6               	btfsc	get_high@row,7
  7799  1D72  2DB0               	goto	l3865
  7800  1D73                     l3853:	
  7801                           
  7802                           ;teris_16f886.c: 848: {
  7803                           ;teris_16f886.c: 849: if(is_row_empty(matrix, row) == 1)
  7804  1D73  0846               	movf	get_high@row,w
  7805  1D74  00C3               	movwf	??_get_high
  7806  1D75  0843               	movf	??_get_high,w
  7807  1D76  00F0               	movwf	is_row_empty@row
  7808  1D77  0845               	movf	get_high@matrix,w
  7809  1D78  160A  158A  22FF  160A  158A  	fcall	_is_row_empty
  7810  1D7D  3A01               	xorlw	1
  7811  1D7E  1D03               	skipz
  7812  1D7F  2DA8               	goto	l3861
  7813                           
  7814                           ;teris_16f886.c: 850: {
  7815                           ;teris_16f886.c: 851: debug_int1("get_high height = %d\n", 8 - row - 1);
  7816  1D80  3068               	movlw	low (STR_39| (0+32768))
  7817  1D81  1283               	bcf	3,5	;RP0=0, select bank0
  7818  1D82  1303               	bcf	3,6	;RP1=0, select bank0
  7819  1D83  00BF               	movwf	debug_int1@f
  7820  1D84  308D               	movlw	high (STR_39| (0+32768))
  7821  1D85  00C0               	movwf	debug_int1@f+1
  7822  1D86  3001               	movlw	1
  7823  1D87  0746               	addwf	get_high@row,w
  7824  1D88  00C3               	movwf	??_get_high
  7825  1D89  01C4               	clrf	??_get_high+1
  7826  1D8A  1803               	skipnc
  7827  1D8B  0AC4               	incf	??_get_high+1,f
  7828  1D8C  1BC6               	btfsc	get_high@row,7
  7829  1D8D  03C4               	decf	??_get_high+1,f
  7830  1D8E  1283               	bcf	3,5	;RP0=0, select bank0
  7831  1D8F  1303               	bcf	3,6	;RP1=0, select bank0
  7832  1D90  09C3               	comf	??_get_high,f
  7833  1D91  09C4               	comf	??_get_high+1,f
  7834  1D92  0AC3               	incf	??_get_high,f
  7835  1D93  1903               	skipnz
  7836  1D94  0AC4               	incf	??_get_high+1,f
  7837  1D95  0843               	movf	??_get_high,w
  7838  1D96  3E08               	addlw	8
  7839  1D97  00C1               	movwf	debug_int1@i
  7840  1D98  0844               	movf	??_get_high+1,w
  7841  1D99  1803               	skipnc
  7842  1D9A  3E01               	addlw	1
  7843  1D9B  3E00               	addlw	0
  7844  1D9C  00C2               	movwf	debug_int1@i+1
  7845  1D9D  160A  158A  2273   	fcall	_debug_int1
  7846                           
  7847                           ;teris_16f886.c: 852: return (uint8_t)(8 - row - 1);
  7848  1DA0  1283               	bcf	3,5	;RP0=0, select bank0
  7849  1DA1  1303               	bcf	3,6	;RP1=0, select bank0
  7850  1DA2  0846               	movf	get_high@row,w
  7851  1DA3  3E01               	addlw	1
  7852  1DA4  3AFF               	xorlw	255
  7853  1DA5  3E01               	addlw	1
  7854  1DA6  3E08               	addlw	8
  7855  1DA7  0008               	return
  7856  1DA8                     l3861:	
  7857  1DA8  30FF               	movlw	255
  7858  1DA9  1283               	bcf	3,5	;RP0=0, select bank0
  7859  1DAA  1303               	bcf	3,6	;RP1=0, select bank0
  7860  1DAB  00C3               	movwf	??_get_high
  7861  1DAC  0843               	movf	??_get_high,w
  7862  1DAD  07C6               	addwf	get_high@row,f
  7863  1DAE  1FC6               	btfss	get_high@row,7
  7864  1DAF  2D73               	goto	l3853
  7865  1DB0                     l3865:	
  7866                           
  7867                           ;teris_16f886.c: 853: }
  7868                           ;teris_16f886.c: 854: }
  7869                           ;teris_16f886.c: 855: return 8;
  7870  1DB0  3008               	movlw	8
  7871  1DB1  0008               	return
  7872  1DB2                     __end_of_get_high:	
  7873                           
  7874                           	psect	text21
  7875  1AFF                     __ptext21:	
  7876 ;; *************** function _is_row_empty *****************
  7877 ;; Defined at:
  7878 ;;		line 598 in file "teris_16f886.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  matrix          1    wreg     PTR const struct .
  7881 ;;		 -> g_matrix88(64), 
  7882 ;;  row             1    0[COMMON] unsigned char 
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;  matrix          1    4[COMMON] PTR const struct .
  7885 ;;		 -> g_matrix88(64), 
  7886 ;;  col             1    5[COMMON] unsigned char 
  7887 ;; Return value:  Size  Location     Type
  7888 ;;                  1    wreg      unsigned char 
  7889 ;; Registers used:
  7890 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7891 ;; Tracked objects:
  7892 ;;		On entry : 0/0
  7893 ;;		On exit  : 0/0
  7894 ;;		Unchanged: 0/0
  7895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7896 ;;      Params:         1       0       0       0       0
  7897 ;;      Locals:         2       0       0       0       0
  7898 ;;      Temps:          3       0       0       0       0
  7899 ;;      Totals:         6       0       0       0       0
  7900 ;;Total ram usage:        6 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; This function calls:
  7903 ;;		Nothing
  7904 ;; This function is called by:
  7905 ;;		_get_high
  7906 ;; This function uses a non-reentrant model
  7907 ;;
  7908                           
  7909                           
  7910                           ;psect for function _is_row_empty
  7911  1AFF                     _is_row_empty:	
  7912                           
  7913                           ;incstack = 0
  7914                           ; Regs used in _is_row_empty: [wreg-fsr0h+status,2+status,0]
  7915                           ;is_row_empty@matrix stored from wreg
  7916  1AFF  00F4               	movwf	is_row_empty@matrix
  7917                           
  7918                           ;teris_16f886.c: 600: for(uint8_t col = 0; col < 8; col++)
  7919  1B00  01F5               	clrf	is_row_empty@col
  7920  1B01  3008               	movlw	8
  7921  1B02  0275               	subwf	is_row_empty@col,w
  7922  1B03  1803               	btfsc	3,0
  7923  1B04  2B24               	goto	l3541
  7924  1B05                     l3531:	
  7925                           
  7926                           ;teris_16f886.c: 601: {
  7927                           ;teris_16f886.c: 602: if(matrix->data[row][col] == 1)
  7928  1B05  0870               	movf	is_row_empty@row,w
  7929  1B06  00F1               	movwf	??_is_row_empty
  7930  1B07  3002               	movlw	2
  7931  1B08                     u4375:	
  7932  1B08  1003               	clrc
  7933  1B09  0DF1               	rlf	??_is_row_empty,f
  7934  1B0A  3EFF               	addlw	-1
  7935  1B0B  1D03               	skipz
  7936  1B0C  2B08               	goto	u4375
  7937  1B0D  1003               	clrc
  7938  1B0E  0D71               	rlf	??_is_row_empty,w
  7939  1B0F  0774               	addwf	is_row_empty@matrix,w
  7940  1B10  00F2               	movwf	??_is_row_empty+1
  7941  1B11  0875               	movf	is_row_empty@col,w
  7942  1B12  0772               	addwf	??_is_row_empty+1,w
  7943  1B13  00F3               	movwf	??_is_row_empty+2
  7944  1B14  0873               	movf	??_is_row_empty+2,w
  7945  1B15  0084               	movwf	4
  7946  1B16  1783               	bsf	3,7	;select IRP bank2
  7947  1B17  0300               	decf	0,w
  7948  1B18  1D03               	btfss	3,2
  7949  1B19  2B1C               	goto	l3537
  7950                           
  7951                           ;teris_16f886.c: 603: {
  7952                           ;teris_16f886.c: 604: return 0;
  7953  1B1A  3000               	movlw	0
  7954  1B1B  0008               	return
  7955  1B1C                     l3537:	
  7956  1B1C  3001               	movlw	1
  7957  1B1D  00F1               	movwf	??_is_row_empty
  7958  1B1E  0871               	movf	??_is_row_empty,w
  7959  1B1F  07F5               	addwf	is_row_empty@col,f
  7960  1B20  3008               	movlw	8
  7961  1B21  0275               	subwf	is_row_empty@col,w
  7962  1B22  1C03               	skipc
  7963  1B23  2B05               	goto	l3531
  7964  1B24                     l3541:	
  7965                           
  7966                           ;teris_16f886.c: 605: }
  7967                           ;teris_16f886.c: 606: }
  7968                           ;teris_16f886.c: 607: return 1;
  7969  1B24  3001               	movlw	1
  7970  1B25  0008               	return
  7971  1B26                     __end_of_is_row_empty:	
  7972                           
  7973                           	psect	text22
  7974  11C9                     __ptext22:	
  7975 ;; *************** function _fall_off *****************
  7976 ;; Defined at:
  7977 ;;		line 714 in file "teris_16f886.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;  x               1    wreg     char 
  7980 ;;  y               1   37[BANK0 ] char 
  7981 ;;  matrix44        2   38[BANK0 ] PTR const struct .
  7982 ;;		 -> g_matrix44(384), 
  7983 ;;  matrix88        1   40[BANK0 ] PTR const struct .
  7984 ;;		 -> g_matrix88(64), 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  x               1   45[BANK0 ] char 
  7987 ;;  col             1   46[BANK0 ] char 
  7988 ;;  row             1   47[BANK0 ] char 
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  1    wreg      unsigned char 
  7991 ;; Registers used:
  7992 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7998 ;;      Params:         0       4       0       0       0
  7999 ;;      Locals:         0       3       0       0       0
  8000 ;;      Temps:          0       4       0       0       0
  8001 ;;      Totals:         0      11       0       0       0
  8002 ;;Total ram usage:       11 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    3
  8005 ;; This function calls:
  8006 ;;		_debug_int2
  8007 ;; This function is called by:
  8008 ;;		_find_best_solution
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           
  8013                           ;psect for function _fall_off
  8014  11C9                     _fall_off:	
  8015                           
  8016                           ;incstack = 0
  8017                           ; Regs used in _fall_off: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8018                           ;fall_off@x stored from wreg
  8019  11C9  1283               	bcf	3,5	;RP0=0, select bank0
  8020  11CA  1303               	bcf	3,6	;RP1=0, select bank0
  8021  11CB  00CD               	movwf	fall_off@x
  8022  11CC                     l322:	
  8023                           ;teris_16f886.c: 716: while(1)
  8024                           
  8025                           
  8026                           ;teris_16f886.c: 717: {
  8027                           ;teris_16f886.c: 718: for(int8_t row = 4 - 1; row >= 0; row--)
  8028  11CC  3003               	movlw	3
  8029  11CD  00C9               	movwf	??_fall_off
  8030  11CE  0849               	movf	??_fall_off,w
  8031  11CF  00CF               	movwf	fall_off@row
  8032  11D0  1BCF               	btfsc	fall_off@row,7
  8033  11D1  2A64               	goto	l3749
  8034  11D2                     l3717:	
  8035                           
  8036                           ;teris_16f886.c: 719: {
  8037                           ;teris_16f886.c: 720: for(int8_t col = 0; col < 4; col++)
  8038  11D2  01CE               	clrf	fall_off@col
  8039  11D3  084E               	movf	fall_off@col,w
  8040  11D4  3A80               	xorlw	128
  8041  11D5  3E7C               	addlw	-132
  8042  11D6  1803               	btfsc	3,0
  8043  11D7  2A5E               	goto	l3745
  8044  11D8                     l3723:	
  8045                           
  8046                           ;teris_16f886.c: 721: {
  8047                           ;teris_16f886.c: 722: if(matrix44->data[row][col] == 1)
  8048  11D8  084F               	movf	fall_off@row,w
  8049  11D9  00C9               	movwf	??_fall_off
  8050  11DA  01CA               	clrf	??_fall_off+1
  8051  11DB  1003               	clrc
  8052  11DC  0DC9               	rlf	??_fall_off,f
  8053  11DD  0DCA               	rlf	??_fall_off+1,f
  8054  11DE  1003               	clrc
  8055  11DF  0DC9               	rlf	??_fall_off,f
  8056  11E0  0DCA               	rlf	??_fall_off+1,f
  8057  11E1  0849               	movf	??_fall_off,w
  8058  11E2  0746               	addwf	fall_off@matrix44,w
  8059  11E3  00CB               	movwf	??_fall_off+2
  8060  11E4  084A               	movf	??_fall_off+1,w
  8061  11E5  1803               	skipnc
  8062  11E6  0A4A               	incf	??_fall_off+1,w
  8063  11E7  0747               	addwf	fall_off@matrix44+1,w
  8064  11E8  00CC               	movwf	??_fall_off+3
  8065  11E9  084E               	movf	fall_off@col,w
  8066  11EA  074B               	addwf	??_fall_off+2,w
  8067  11EB  0084               	movwf	4
  8068  11EC  084C               	movf	??_fall_off+3,w
  8069  11ED  1803               	skipnc
  8070  11EE  0A4C               	incf	??_fall_off+3,w
  8071  11EF  00FF               	movwf	127
  8072  11F0  120A  158A  2000  160A  118A  	fcall	stringtab
  8073  11F5  3A01               	xorlw	1
  8074  11F6  1D03               	skipz
  8075  11F7  2A53               	goto	l3741
  8076                           
  8077                           ;teris_16f886.c: 723: {
  8078                           ;teris_16f886.c: 724: if(matrix88->data[y + row + 1][x + col] == 1)
  8079  11F8  084E               	movf	fall_off@col,w
  8080  11F9  074D               	addwf	fall_off@x,w
  8081  11FA  0748               	addwf	fall_off@matrix88,w
  8082  11FB  00C9               	movwf	??_fall_off
  8083  11FC  084F               	movf	fall_off@row,w
  8084  11FD  0745               	addwf	fall_off@y,w
  8085  11FE  00CA               	movwf	??_fall_off+1
  8086  11FF  3002               	movlw	2
  8087  1200                     u4765:	
  8088  1200  1003               	clrc
  8089  1201  0DCA               	rlf	??_fall_off+1,f
  8090  1202  3EFF               	addlw	-1
  8091  1203  1D03               	skipz
  8092  1204  2A00               	goto	u4765
  8093  1205  1003               	clrc
  8094  1206  0D4A               	rlf	??_fall_off+1,w
  8095  1207  3E08               	addlw	8
  8096  1208  0749               	addwf	??_fall_off,w
  8097  1209  00CB               	movwf	??_fall_off+2
  8098  120A  084B               	movf	??_fall_off+2,w
  8099  120B  0084               	movwf	4
  8100  120C  1783               	bsf	3,7	;select IRP bank2
  8101  120D  0300               	decf	0,w
  8102  120E  1D03               	btfss	3,2
  8103  120F  2A25               	goto	l3733
  8104                           
  8105                           ;teris_16f886.c: 725: {
  8106                           ;teris_16f886.c: 726: debug_int2("fall_off1 x = %d, y = %d\n", x, y);
  8107  1210  30BC               	movlw	low (STR_34| (0+32768))
  8108  1211  00BF               	movwf	debug_int2@f
  8109  1212  308C               	movlw	high (STR_34| (0+32768))
  8110  1213  00C0               	movwf	debug_int2@f+1
  8111  1214  084D               	movf	fall_off@x,w
  8112  1215  00C1               	movwf	debug_int2@i1
  8113  1216  01C2               	clrf	debug_int2@i1+1
  8114  1217  1BC1               	btfsc	debug_int2@i1,7
  8115  1218  03C2               	decf	debug_int2@i1+1,f
  8116  1219  0845               	movf	fall_off@y,w
  8117  121A  00C3               	movwf	debug_int2@i2
  8118  121B  01C4               	clrf	debug_int2@i2+1
  8119  121C  1BC3               	btfsc	debug_int2@i2,7
  8120  121D  03C4               	decf	debug_int2@i2+1,f
  8121  121E  160A  158A  22DA   	fcall	_debug_int2
  8122                           
  8123                           ;teris_16f886.c: 727: return y;
  8124  1221  1283               	bcf	3,5	;RP0=0, select bank0
  8125  1222  1303               	bcf	3,6	;RP1=0, select bank0
  8126  1223  0845               	movf	fall_off@y,w
  8127  1224  0008               	return
  8128  1225                     l3733:	
  8129                           
  8130                           ;teris_16f886.c: 728: }
  8131                           ;teris_16f886.c: 729: if((y + row) >= (8 - 1))
  8132  1225  0845               	movf	fall_off@y,w
  8133  1226  074F               	addwf	fall_off@row,w
  8134  1227  00C9               	movwf	??_fall_off
  8135  1228  01CA               	clrf	??_fall_off+1
  8136  1229  1803               	skipnc
  8137  122A  0ACA               	incf	??_fall_off+1,f
  8138  122B  1BC5               	btfsc	fall_off@y,7
  8139  122C  03CA               	decf	??_fall_off+1,f
  8140  122D  1BCF               	btfsc	fall_off@row,7
  8141  122E  03CA               	decf	??_fall_off+1,f
  8142  122F  1283               	bcf	3,5	;RP0=0, select bank0
  8143  1230  1303               	bcf	3,6	;RP1=0, select bank0
  8144  1231  084A               	movf	??_fall_off+1,w
  8145  1232  3A80               	xorlw	128
  8146  1233  00FF               	movwf	127
  8147  1234  3080               	movlw	128
  8148  1235  027F               	subwf	127,w
  8149  1236  1D03               	skipz
  8150  1237  2A3A               	goto	u4795
  8151  1238  3007               	movlw	7
  8152  1239  0249               	subwf	??_fall_off,w
  8153  123A                     u4795:	
  8154  123A  1C03               	skipc
  8155  123B  2A53               	goto	l3741
  8156                           
  8157                           ;teris_16f886.c: 730: {
  8158                           ;teris_16f886.c: 731: debug_int2("fall_off2 x = %d, y = %d\n", x, y);
  8159  123C  30D6               	movlw	low (STR_35| (0+32768))
  8160  123D  1283               	bcf	3,5	;RP0=0, select bank0
  8161  123E  1303               	bcf	3,6	;RP1=0, select bank0
  8162  123F  00BF               	movwf	debug_int2@f
  8163  1240  308C               	movlw	high (STR_35| (0+32768))
  8164  1241  00C0               	movwf	debug_int2@f+1
  8165  1242  084D               	movf	fall_off@x,w
  8166  1243  00C1               	movwf	debug_int2@i1
  8167  1244  01C2               	clrf	debug_int2@i1+1
  8168  1245  1BC1               	btfsc	debug_int2@i1,7
  8169  1246  03C2               	decf	debug_int2@i1+1,f
  8170  1247  0845               	movf	fall_off@y,w
  8171  1248  00C3               	movwf	debug_int2@i2
  8172  1249  01C4               	clrf	debug_int2@i2+1
  8173  124A  1BC3               	btfsc	debug_int2@i2,7
  8174  124B  03C4               	decf	debug_int2@i2+1,f
  8175  124C  160A  158A  22DA   	fcall	_debug_int2
  8176                           
  8177                           ;teris_16f886.c: 732: return y;
  8178  124F  1283               	bcf	3,5	;RP0=0, select bank0
  8179  1250  1303               	bcf	3,6	;RP1=0, select bank0
  8180  1251  0845               	movf	fall_off@y,w
  8181  1252  0008               	return
  8182  1253                     l3741:	
  8183  1253  3001               	movlw	1
  8184  1254  1283               	bcf	3,5	;RP0=0, select bank0
  8185  1255  1303               	bcf	3,6	;RP1=0, select bank0
  8186  1256  00C9               	movwf	??_fall_off
  8187  1257  0849               	movf	??_fall_off,w
  8188  1258  07CE               	addwf	fall_off@col,f
  8189  1259  084E               	movf	fall_off@col,w
  8190  125A  3A80               	xorlw	128
  8191  125B  3E7C               	addlw	-132
  8192  125C  1C03               	skipc
  8193  125D  29D8               	goto	l3723
  8194  125E                     l3745:	
  8195  125E  30FF               	movlw	255
  8196  125F  00C9               	movwf	??_fall_off
  8197  1260  0849               	movf	??_fall_off,w
  8198  1261  07CF               	addwf	fall_off@row,f
  8199  1262  1FCF               	btfss	fall_off@row,7
  8200  1263  29D2               	goto	l3717
  8201  1264                     l3749:	
  8202                           
  8203                           ;teris_16f886.c: 733: }
  8204                           ;teris_16f886.c: 734: }
  8205                           ;teris_16f886.c: 735: }
  8206                           ;teris_16f886.c: 736: }
  8207                           ;teris_16f886.c: 737: y++;
  8208  1264  3001               	movlw	1
  8209  1265  00C9               	movwf	??_fall_off
  8210  1266  0849               	movf	??_fall_off,w
  8211  1267  07C5               	addwf	fall_off@y,f
  8212  1268  29CC               	goto	l322
  8213  1269                     __end_of_fall_off:	
  8214                           
  8215                           	psect	text23
  8216  1ADA                     __ptext23:	
  8217 ;; *************** function _debug_int2 *****************
  8218 ;; Defined at:
  8219 ;;		line 314 in file "teris_16f886.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;  f               2   31[BANK0 ] PTR const unsigned char 
  8222 ;;		 -> STR_59(35), STR_58(36), STR_57(35), STR_56(36), 
  8223 ;;		 -> STR_55(35), STR_54(36), STR_52(35), STR_51(36), 
  8224 ;;		 -> STR_50(35), STR_49(36), STR_48(35), STR_47(38), 
  8225 ;;		 -> STR_45(37), STR_44(36), STR_35(26), STR_34(26), 
  8226 ;;		 -> STR_30(30), STR_29(30), STR_28(30), STR_25(24), 
  8227 ;;		 -> STR_24(24), STR_11(42), 
  8228 ;;  i1              2   33[BANK0 ] int 
  8229 ;;  i2              2   35[BANK0 ] int 
  8230 ;; Auto vars:     Size  Location     Type
  8231 ;;		None
  8232 ;; Return value:  Size  Location     Type
  8233 ;;                  1    wreg      void 
  8234 ;; Registers used:
  8235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8236 ;; Tracked objects:
  8237 ;;		On entry : 0/0
  8238 ;;		On exit  : 0/0
  8239 ;;		Unchanged: 0/0
  8240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8241 ;;      Params:         0       6       0       0       0
  8242 ;;      Locals:         0       0       0       0       0
  8243 ;;      Temps:          0       0       0       0       0
  8244 ;;      Totals:         0       6       0       0       0
  8245 ;;Total ram usage:        6 bytes
  8246 ;; Hardware stack levels used:    1
  8247 ;; Hardware stack levels required when called:    2
  8248 ;; This function calls:
  8249 ;;		_USARTWriteString
  8250 ;;		_sprintf
  8251 ;; This function is called by:
  8252 ;;		_hit_land
  8253 ;;		_is_valid
  8254 ;;		_fall_off
  8255 ;;		_find_best_solution
  8256 ;;		_printf_console_all_MATRIX44
  8257 ;; This function uses a non-reentrant model
  8258 ;;
  8259                           
  8260                           
  8261                           ;psect for function _debug_int2
  8262  1ADA                     _debug_int2:	
  8263                           
  8264                           ;teris_16f886.c: 320: sprintf(g_debug, f, i1, i2);
  8265                           
  8266                           ;incstack = 0
  8267                           ; Regs used in _debug_int2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8268  1ADA  1283               	bcf	3,5	;RP0=0, select bank0
  8269  1ADB  1303               	bcf	3,6	;RP1=0, select bank0
  8270  1ADC  083F               	movf	debug_int2@f,w
  8271  1ADD  00A0               	movwf	sprintf@f
  8272  1ADE  0840               	movf	debug_int2@f+1,w
  8273  1ADF  00A1               	movwf	sprintf@f+1
  8274  1AE0  0842               	movf	debug_int2@i1+1,w
  8275  1AE1  00A3               	movwf	?_sprintf+3
  8276  1AE2  0841               	movf	debug_int2@i1,w
  8277  1AE3  00A2               	movwf	?_sprintf+2
  8278  1AE4  0844               	movf	debug_int2@i2+1,w
  8279  1AE5  00A5               	movwf	?_sprintf+5
  8280  1AE6  0843               	movf	debug_int2@i2,w
  8281  1AE7  00A4               	movwf	?_sprintf+4
  8282  1AE8  3098               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8283  1AE9  120A  118A  22C2  160A  158A  	fcall	_sprintf
  8284                           
  8285                           ;teris_16f886.c: 321: USARTWriteString(g_debug);
  8286  1AEE  3098               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8287  1AEF  00F1               	movwf	USARTWriteString@str
  8288  1AF0  3001               	movlw	1
  8289  1AF1  00F2               	movwf	USARTWriteString@str+1
  8290  1AF2  160A  158A  2294  160A  158A  	fcall	_USARTWriteString
  8291                           
  8292                           ;teris_16f886.c: 322: USARTWriteString("\r\n");
  8293  1AF7  3067               	movlw	low (STR_1| (0+32768))
  8294  1AF8  00F1               	movwf	USARTWriteString@str
  8295  1AF9  308E               	movlw	high (STR_1| (0+32768))
  8296  1AFA  00F2               	movwf	USARTWriteString@str+1
  8297  1AFB  160A  158A  2294   	fcall	_USARTWriteString
  8298  1AFE  0008               	return
  8299  1AFF                     __end_of_debug_int2:	
  8300                           
  8301                           	psect	text24
  8302  0E80                     __ptext24:	
  8303 ;; *************** function _evaluate *****************
  8304 ;; Defined at:
  8305 ;;		line 787 in file "teris_16f886.c"
  8306 ;; Parameters:    Size  Location     Type
  8307 ;;  matrix          1    wreg     PTR const struct .
  8308 ;;		 -> find_best_solution@temp_matrix88(64), 
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;  matrix          1   44[BANK0 ] PTR const struct .
  8311 ;;		 -> find_best_solution@temp_matrix88(64), 
  8312 ;;  row             1   46[BANK0 ] char 
  8313 ;;  col             1   45[BANK0 ] unsigned char 
  8314 ;;  risk            2   41[BANK0 ] unsigned int 
  8315 ;;  full            1   43[BANK0 ] unsigned char 
  8316 ;; Return value:  Size  Location     Type
  8317 ;;                  2   35[BANK0 ] unsigned int 
  8318 ;; Registers used:
  8319 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8320 ;; Tracked objects:
  8321 ;;		On entry : 0/0
  8322 ;;		On exit  : 0/0
  8323 ;;		Unchanged: 0/0
  8324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8325 ;;      Params:         0       2       0       0       0
  8326 ;;      Locals:         0       6       0       0       0
  8327 ;;      Temps:          0       4       0       0       0
  8328 ;;      Totals:         0      12       0       0       0
  8329 ;;Total ram usage:       12 bytes
  8330 ;; Hardware stack levels used:    1
  8331 ;; Hardware stack levels required when called:    3
  8332 ;; This function calls:
  8333 ;;		_debug_int1
  8334 ;; This function is called by:
  8335 ;;		_find_best_solution
  8336 ;; This function uses a non-reentrant model
  8337 ;;
  8338                           
  8339                           
  8340                           ;psect for function _evaluate
  8341  0E80                     _evaluate:	
  8342                           
  8343                           ;incstack = 0
  8344                           ; Regs used in _evaluate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8345                           ;evaluate@matrix stored from wreg
  8346  0E80  1283               	bcf	3,5	;RP0=0, select bank0
  8347  0E81  1303               	bcf	3,6	;RP1=0, select bank0
  8348  0E82  00CC               	movwf	evaluate@matrix
  8349                           
  8350                           ;teris_16f886.c: 789: uint16_t risk = 0;
  8351  0E83  01C9               	clrf	evaluate@risk
  8352  0E84  01CA               	clrf	evaluate@risk+1
  8353                           
  8354                           ;teris_16f886.c: 790: uint8_t full = 0xFF;
  8355  0E85  30FF               	movlw	255
  8356  0E86  00C5               	movwf	??_evaluate
  8357  0E87  0845               	movf	??_evaluate,w
  8358  0E88  00CB               	movwf	evaluate@full
  8359                           
  8360                           ;teris_16f886.c: 791: for(uint8_t col = 0; col < 8; col++)
  8361  0E89  01CD               	clrf	evaluate@col
  8362  0E8A  3008               	movlw	8
  8363  0E8B  024D               	subwf	evaluate@col,w
  8364  0E8C  1803               	btfsc	3,0
  8365  0E8D  2EEF               	goto	l3813
  8366  0E8E                     l3787:	
  8367                           
  8368                           ;teris_16f886.c: 792: {
  8369                           ;teris_16f886.c: 793: full = 0xFF;
  8370  0E8E  30FF               	movlw	255
  8371  0E8F  00C5               	movwf	??_evaluate
  8372  0E90  0845               	movf	??_evaluate,w
  8373  0E91  00CB               	movwf	evaluate@full
  8374                           
  8375                           ;teris_16f886.c: 794: for(int8_t row = 8 - 1; row >= 0; row--)
  8376  0E92  3007               	movlw	7
  8377  0E93  00C5               	movwf	??_evaluate
  8378  0E94  0845               	movf	??_evaluate,w
  8379  0E95  00CE               	movwf	evaluate@row
  8380  0E96  1BCE               	btfsc	evaluate@row,7
  8381  0E97  2EE7               	goto	l3809
  8382  0E98                     l3793:	
  8383                           
  8384                           ;teris_16f886.c: 795: {
  8385                           ;teris_16f886.c: 796: if(full == 0xFF)
  8386  0E98  0A4B               	incf	evaluate@full,w
  8387  0E99  1D03               	btfss	3,2
  8388  0E9A  2EAE               	goto	l3797
  8389                           
  8390                           ;teris_16f886.c: 797: {
  8391                           ;teris_16f886.c: 798: full = matrix->data[row][col];
  8392  0E9B  084E               	movf	evaluate@row,w
  8393  0E9C  00C5               	movwf	??_evaluate
  8394  0E9D  3002               	movlw	2
  8395  0E9E                     u4915:	
  8396  0E9E  1003               	clrc
  8397  0E9F  0DC5               	rlf	??_evaluate,f
  8398  0EA0  3EFF               	addlw	-1
  8399  0EA1  1D03               	skipz
  8400  0EA2  2E9E               	goto	u4915
  8401  0EA3  1003               	clrc
  8402  0EA4  0D45               	rlf	??_evaluate,w
  8403  0EA5  074C               	addwf	evaluate@matrix,w
  8404  0EA6  00C6               	movwf	??_evaluate+1
  8405  0EA7  084D               	movf	evaluate@col,w
  8406  0EA8  0746               	addwf	??_evaluate+1,w
  8407  0EA9  00C7               	movwf	??_evaluate+2
  8408  0EAA  0847               	movf	??_evaluate+2,w
  8409  0EAB  0084               	movwf	4
  8410  0EAC  1383               	bcf	3,7	;select IRP bank0
  8411  0EAD  2EDD               	goto	L17
  8412  0EAE                     l3797:	
  8413                           ;teris_16f886.c: 799: }
  8414                           
  8415                           
  8416                           ;teris_16f886.c: 800: else
  8417                           ;teris_16f886.c: 801: {
  8418                           ;teris_16f886.c: 802: if(matrix->data[row][col] == 1)
  8419  0EAE  084E               	movf	evaluate@row,w
  8420  0EAF  00C5               	movwf	??_evaluate
  8421  0EB0  3002               	movlw	2
  8422  0EB1                     u4925:	
  8423  0EB1  1003               	clrc
  8424  0EB2  0DC5               	rlf	??_evaluate,f
  8425  0EB3  3EFF               	addlw	-1
  8426  0EB4  1D03               	skipz
  8427  0EB5  2EB1               	goto	u4925
  8428  0EB6  1003               	clrc
  8429  0EB7  0D45               	rlf	??_evaluate,w
  8430  0EB8  074C               	addwf	evaluate@matrix,w
  8431  0EB9  00C6               	movwf	??_evaluate+1
  8432  0EBA  084D               	movf	evaluate@col,w
  8433  0EBB  0746               	addwf	??_evaluate+1,w
  8434  0EBC  00C7               	movwf	??_evaluate+2
  8435  0EBD  0847               	movf	??_evaluate+2,w
  8436  0EBE  0084               	movwf	4
  8437  0EBF  1383               	bcf	3,7	;select IRP bank0
  8438  0EC0  0300               	decf	0,w
  8439  0EC1  1D03               	btfss	3,2
  8440  0EC2  2ECC               	goto	l3803
  8441                           
  8442                           ;teris_16f886.c: 803: {
  8443                           ;teris_16f886.c: 804: if(full == 0)
  8444  0EC3  084B               	movf	evaluate@full,w
  8445  0EC4  1D03               	btfss	3,2
  8446  0EC5  2ECC               	goto	l3803
  8447                           
  8448                           ;teris_16f886.c: 805: {
  8449                           ;teris_16f886.c: 806: risk++;
  8450  0EC6  3001               	movlw	1
  8451  0EC7  07C9               	addwf	evaluate@risk,f
  8452  0EC8  1803               	skipnc
  8453  0EC9  0ACA               	incf	evaluate@risk+1,f
  8454  0ECA  3000               	movlw	0
  8455  0ECB  07CA               	addwf	evaluate@risk+1,f
  8456  0ECC                     l3803:	
  8457                           
  8458                           ;teris_16f886.c: 807: }
  8459                           ;teris_16f886.c: 808: }
  8460                           ;teris_16f886.c: 809: full = matrix->data[row][col];
  8461  0ECC  084E               	movf	evaluate@row,w
  8462  0ECD  00C5               	movwf	??_evaluate
  8463  0ECE  3002               	movlw	2
  8464  0ECF                     u4955:	
  8465  0ECF  1003               	clrc
  8466  0ED0  0DC5               	rlf	??_evaluate,f
  8467  0ED1  3EFF               	addlw	-1
  8468  0ED2  1D03               	skipz
  8469  0ED3  2ECF               	goto	u4955
  8470  0ED4  1003               	clrc
  8471  0ED5  0D45               	rlf	??_evaluate,w
  8472  0ED6  074C               	addwf	evaluate@matrix,w
  8473  0ED7  00C6               	movwf	??_evaluate+1
  8474  0ED8  084D               	movf	evaluate@col,w
  8475  0ED9  0746               	addwf	??_evaluate+1,w
  8476  0EDA  00C7               	movwf	??_evaluate+2
  8477  0EDB  0847               	movf	??_evaluate+2,w
  8478  0EDC  0084               	movwf	4
  8479  0EDD                     L17:	
  8480  0EDD  0800               	movf	0,w
  8481  0EDE  00C8               	movwf	??_evaluate+3
  8482  0EDF  0848               	movf	??_evaluate+3,w
  8483  0EE0  00CB               	movwf	evaluate@full
  8484  0EE1  30FF               	movlw	255
  8485  0EE2  00C5               	movwf	??_evaluate
  8486  0EE3  0845               	movf	??_evaluate,w
  8487  0EE4  07CE               	addwf	evaluate@row,f
  8488  0EE5  1FCE               	btfss	evaluate@row,7
  8489  0EE6  2E98               	goto	l3793
  8490  0EE7                     l3809:	
  8491  0EE7  3001               	movlw	1
  8492  0EE8  00C5               	movwf	??_evaluate
  8493  0EE9  0845               	movf	??_evaluate,w
  8494  0EEA  07CD               	addwf	evaluate@col,f
  8495  0EEB  3008               	movlw	8
  8496  0EEC  024D               	subwf	evaluate@col,w
  8497  0EED  1C03               	skipc
  8498  0EEE  2E8E               	goto	l3787
  8499  0EEF                     l3813:	
  8500                           
  8501                           ;teris_16f886.c: 810: }
  8502                           ;teris_16f886.c: 811: }
  8503                           ;teris_16f886.c: 812: }
  8504                           ;teris_16f886.c: 813: debug_int1("risk = %d\n", risk);
  8505  0EEF  304E               	movlw	low (STR_36| (0+32768))
  8506  0EF0  00BF               	movwf	debug_int1@f
  8507  0EF1  308E               	movlw	high (STR_36| (0+32768))
  8508  0EF2  00C0               	movwf	debug_int1@f+1
  8509  0EF3  084A               	movf	evaluate@risk+1,w
  8510  0EF4  00C2               	movwf	debug_int1@i+1
  8511  0EF5  0849               	movf	evaluate@risk,w
  8512  0EF6  00C1               	movwf	debug_int1@i
  8513  0EF7  160A  158A  2273   	fcall	_debug_int1
  8514                           
  8515                           ;teris_16f886.c: 815: return risk;
  8516  0EFA  1283               	bcf	3,5	;RP0=0, select bank0
  8517  0EFB  1303               	bcf	3,6	;RP1=0, select bank0
  8518  0EFC  084A               	movf	evaluate@risk+1,w
  8519  0EFD  00C4               	movwf	?_evaluate+1
  8520  0EFE  0849               	movf	evaluate@risk,w
  8521  0EFF  00C3               	movwf	?_evaluate
  8522  0F00  0008               	return
  8523  0F01                     __end_of_evaluate:	
  8524                           
  8525                           	psect	text25
  8526  1D22                     __ptext25:	
  8527 ;; *************** function _delete_matrix *****************
  8528 ;; Defined at:
  8529 ;;		line 577 in file "teris_16f886.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;  matrix          2   35[BANK0 ] PTR struct .
  8532 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;  row             1   40[BANK0 ] char 
  8535 ;;  count           1   39[BANK0 ] unsigned char 
  8536 ;; Return value:  Size  Location     Type
  8537 ;;                  1    wreg      unsigned char 
  8538 ;; Registers used:
  8539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8540 ;; Tracked objects:
  8541 ;;		On entry : 0/0
  8542 ;;		On exit  : 0/0
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8545 ;;      Params:         0       2       0       0       0
  8546 ;;      Locals:         0       2       0       0       0
  8547 ;;      Temps:          0       2       0       0       0
  8548 ;;      Totals:         0       6       0       0       0
  8549 ;;Total ram usage:        6 bytes
  8550 ;; Hardware stack levels used:    1
  8551 ;; Hardware stack levels required when called:    3
  8552 ;; This function calls:
  8553 ;;		_debug_int1
  8554 ;;		_delete_row
  8555 ;;		_is_row_full
  8556 ;; This function is called by:
  8557 ;;		_find_best_solution
  8558 ;;		_main
  8559 ;; This function uses a non-reentrant model
  8560 ;;
  8561                           
  8562                           
  8563                           ;psect for function _delete_matrix
  8564  1D22                     _delete_matrix:	
  8565                           
  8566                           ;teris_16f886.c: 579: uint8_t count = 0;
  8567                           
  8568                           ;incstack = 0
  8569                           ; Regs used in _delete_matrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8570  1D22  1283               	bcf	3,5	;RP0=0, select bank0
  8571  1D23  1303               	bcf	3,6	;RP1=0, select bank0
  8572  1D24  01C7               	clrf	delete_matrix@count
  8573                           
  8574                           ;teris_16f886.c: 580: int8_t row = 8 - 1;
  8575  1D25  3007               	movlw	7
  8576  1D26  00C5               	movwf	??_delete_matrix
  8577  1D27  0845               	movf	??_delete_matrix,w
  8578  1D28  00C8               	movwf	delete_matrix@row
  8579  1D29                     l4797:	
  8580                           ;teris_16f886.c: 581: while(row >= 0)
  8581                           
  8582  1D29  1BC8               	btfsc	delete_matrix@row,7
  8583  1D2A  2D58               	goto	l4799
  8584                           
  8585                           ;teris_16f886.c: 582: {
  8586                           ;teris_16f886.c: 583: if(is_row_full(matrix, row))
  8587  1D2B  0843               	movf	delete_matrix@matrix,w
  8588  1D2C  00F0               	movwf	is_row_full@matrix
  8589  1D2D  0844               	movf	delete_matrix@matrix+1,w
  8590  1D2E  00F1               	movwf	is_row_full@matrix+1
  8591  1D2F  0848               	movf	delete_matrix@row,w
  8592  1D30  00C5               	movwf	??_delete_matrix
  8593  1D31  0845               	movf	??_delete_matrix,w
  8594  1D32  00F2               	movwf	is_row_full@row
  8595  1D33  160A  158A  234F  160A  158A  	fcall	_is_row_full
  8596  1D38  3A00               	xorlw	0
  8597  1D39  1903               	skipnz
  8598  1D3A  2D51               	goto	l4795
  8599                           
  8600                           ;teris_16f886.c: 584: {
  8601                           ;teris_16f886.c: 585: delete_row(matrix, row);
  8602  1D3B  1283               	bcf	3,5	;RP0=0, select bank0
  8603  1D3C  1303               	bcf	3,6	;RP1=0, select bank0
  8604  1D3D  0843               	movf	delete_matrix@matrix,w
  8605  1D3E  00FB               	movwf	delete_row@matrix
  8606  1D3F  0844               	movf	delete_matrix@matrix+1,w
  8607  1D40  00FC               	movwf	delete_row@matrix+1
  8608  1D41  0848               	movf	delete_matrix@row,w
  8609  1D42  00C5               	movwf	??_delete_matrix
  8610  1D43  0845               	movf	??_delete_matrix,w
  8611  1D44  00FD               	movwf	delete_row@row
  8612  1D45  160A  118A  2154  160A  158A  	fcall	_delete_row
  8613                           
  8614                           ;teris_16f886.c: 586: count++;
  8615  1D4A  3001               	movlw	1
  8616  1D4B  1283               	bcf	3,5	;RP0=0, select bank0
  8617  1D4C  1303               	bcf	3,6	;RP1=0, select bank0
  8618  1D4D  00C5               	movwf	??_delete_matrix
  8619  1D4E  0845               	movf	??_delete_matrix,w
  8620  1D4F  07C7               	addwf	delete_matrix@count,f
  8621                           
  8622                           ;teris_16f886.c: 587: }
  8623  1D50  2D29               	goto	l4797
  8624  1D51                     l4795:	
  8625                           
  8626                           ;teris_16f886.c: 588: else
  8627                           ;teris_16f886.c: 589: {
  8628                           ;teris_16f886.c: 590: row--;
  8629  1D51  30FF               	movlw	255
  8630  1D52  1283               	bcf	3,5	;RP0=0, select bank0
  8631  1D53  1303               	bcf	3,6	;RP1=0, select bank0
  8632  1D54  00C5               	movwf	??_delete_matrix
  8633  1D55  0845               	movf	??_delete_matrix,w
  8634  1D56  07C8               	addwf	delete_matrix@row,f
  8635  1D57  2D29               	goto	l4797
  8636  1D58                     l4799:	
  8637                           
  8638                           ;teris_16f886.c: 591: }
  8639                           ;teris_16f886.c: 592: }
  8640                           ;teris_16f886.c: 593: debug_int1("delete_matrix count = %d", count);
  8641  1D58  30F0               	movlw	low (STR_22| (0+32768))
  8642  1D59  00BF               	movwf	debug_int1@f
  8643  1D5A  308C               	movlw	high (STR_22| (0+32768))
  8644  1D5B  00C0               	movwf	debug_int1@f+1
  8645  1D5C  0847               	movf	delete_matrix@count,w
  8646  1D5D  00C5               	movwf	??_delete_matrix
  8647  1D5E  01C6               	clrf	??_delete_matrix+1
  8648  1D5F  0845               	movf	??_delete_matrix,w
  8649  1D60  00C1               	movwf	debug_int1@i
  8650  1D61  0846               	movf	??_delete_matrix+1,w
  8651  1D62  00C2               	movwf	debug_int1@i+1
  8652  1D63  160A  158A  2273   	fcall	_debug_int1
  8653                           
  8654                           ;teris_16f886.c: 595: return count;
  8655  1D66  1283               	bcf	3,5	;RP0=0, select bank0
  8656  1D67  1303               	bcf	3,6	;RP1=0, select bank0
  8657  1D68  0847               	movf	delete_matrix@count,w
  8658  1D69  0008               	return
  8659  1D6A                     __end_of_delete_matrix:	
  8660                           
  8661                           	psect	text26
  8662  1B4F                     __ptext26:	
  8663 ;; *************** function _is_row_full *****************
  8664 ;; Defined at:
  8665 ;;		line 543 in file "teris_16f886.c"
  8666 ;; Parameters:    Size  Location     Type
  8667 ;;  matrix          2    0[COMMON] PTR const struct .
  8668 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  8669 ;;  row             1    2[COMMON] unsigned char 
  8670 ;; Auto vars:     Size  Location     Type
  8671 ;;  col             1    8[COMMON] unsigned char 
  8672 ;; Return value:  Size  Location     Type
  8673 ;;                  1    wreg      unsigned char 
  8674 ;; Registers used:
  8675 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8676 ;; Tracked objects:
  8677 ;;		On entry : 0/0
  8678 ;;		On exit  : 0/0
  8679 ;;		Unchanged: 0/0
  8680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8681 ;;      Params:         3       0       0       0       0
  8682 ;;      Locals:         1       0       0       0       0
  8683 ;;      Temps:          5       0       0       0       0
  8684 ;;      Totals:         9       0       0       0       0
  8685 ;;Total ram usage:        9 bytes
  8686 ;; Hardware stack levels used:    1
  8687 ;; This function calls:
  8688 ;;		Nothing
  8689 ;; This function is called by:
  8690 ;;		_delete_matrix
  8691 ;; This function uses a non-reentrant model
  8692 ;;
  8693                           
  8694                           
  8695                           ;psect for function _is_row_full
  8696  1B4F                     _is_row_full:	
  8697                           
  8698                           ;teris_16f886.c: 545: for(uint8_t col = 0; col < 8; col++)
  8699                           
  8700                           ;incstack = 0
  8701                           ; Regs used in _is_row_full: [wreg-fsr0h+status,2+status,0]
  8702  1B4F  01F8               	clrf	is_row_full@col
  8703  1B50  3008               	movlw	8
  8704  1B51  0278               	subwf	is_row_full@col,w
  8705  1B52  1803               	btfsc	3,0
  8706  1B53  2B7D               	goto	l3501
  8707  1B54                     l3491:	
  8708                           
  8709                           ;teris_16f886.c: 546: {
  8710                           ;teris_16f886.c: 547: if(matrix->data[row][col] == 0)
  8711  1B54  0872               	movf	is_row_full@row,w
  8712  1B55  00F3               	movwf	??_is_row_full
  8713  1B56  3002               	movlw	2
  8714  1B57                     u4265:	
  8715  1B57  1003               	clrc
  8716  1B58  0DF3               	rlf	??_is_row_full,f
  8717  1B59  3EFF               	addlw	-1
  8718  1B5A  1D03               	skipz
  8719  1B5B  2B57               	goto	u4265
  8720  1B5C  1003               	clrc
  8721  1B5D  0D73               	rlf	??_is_row_full,w
  8722  1B5E  0770               	addwf	is_row_full@matrix,w
  8723  1B5F  00F4               	movwf	??_is_row_full+1
  8724  1B60  0871               	movf	is_row_full@matrix+1,w
  8725  1B61  1803               	skipnc
  8726  1B62  3E01               	addlw	1
  8727  1B63  00F5               	movwf	??_is_row_full+2
  8728  1B64  0878               	movf	is_row_full@col,w
  8729  1B65  0774               	addwf	??_is_row_full+1,w
  8730  1B66  00F6               	movwf	??_is_row_full+3
  8731  1B67  0875               	movf	??_is_row_full+2,w
  8732  1B68  1803               	skipnc
  8733  1B69  3E01               	addlw	1
  8734  1B6A  00F7               	movwf	??_is_row_full+4
  8735  1B6B  0876               	movf	??_is_row_full+3,w
  8736  1B6C  0084               	movwf	4
  8737  1B6D  1783               	bsf	3,7
  8738  1B6E  1C77               	btfss	??_is_row_full+4,0
  8739  1B6F  1383               	bcf	3,7
  8740  1B70  0800               	movf	0,w
  8741  1B71  1D03               	btfss	3,2
  8742  1B72  2B75               	goto	l3497
  8743                           
  8744                           ;teris_16f886.c: 548: {
  8745                           ;teris_16f886.c: 549: return 0;
  8746  1B73  3000               	movlw	0
  8747  1B74  0008               	return
  8748  1B75                     l3497:	
  8749  1B75  3001               	movlw	1
  8750  1B76  00F3               	movwf	??_is_row_full
  8751  1B77  0873               	movf	??_is_row_full,w
  8752  1B78  07F8               	addwf	is_row_full@col,f
  8753  1B79  3008               	movlw	8
  8754  1B7A  0278               	subwf	is_row_full@col,w
  8755  1B7B  1C03               	skipc
  8756  1B7C  2B54               	goto	l3491
  8757  1B7D                     l3501:	
  8758                           
  8759                           ;teris_16f886.c: 550: }
  8760                           ;teris_16f886.c: 551: }
  8761                           ;teris_16f886.c: 552: return 1;
  8762  1B7D  3001               	movlw	1
  8763  1B7E  0008               	return
  8764  1B7F                     __end_of_is_row_full:	
  8765                           
  8766                           	psect	text27
  8767  1154                     __ptext27:	
  8768 ;; *************** function _delete_row *****************
  8769 ;; Defined at:
  8770 ;;		line 554 in file "teris_16f886.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;  matrix          2   11[COMMON] PTR struct .
  8773 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  8774 ;;  row             1   13[COMMON] unsigned char 
  8775 ;; Auto vars:     Size  Location     Type
  8776 ;;  len             2    4[BANK0 ] unsigned int 
  8777 ;;  i               1    6[BANK0 ] char 
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  1    wreg      void 
  8780 ;; Registers used:
  8781 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8787 ;;      Params:         3       0       0       0       0
  8788 ;;      Locals:         0       3       0       0       0
  8789 ;;      Temps:          0       4       0       0       0
  8790 ;;      Totals:         3       7       0       0       0
  8791 ;;Total ram usage:       10 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:    1
  8794 ;; This function calls:
  8795 ;;		_memcpy
  8796 ;;		_memset
  8797 ;; This function is called by:
  8798 ;;		_delete_matrix
  8799 ;; This function uses a non-reentrant model
  8800 ;;
  8801                           
  8802                           
  8803                           ;psect for function _delete_row
  8804  1154                     _delete_row:	
  8805                           
  8806                           ;teris_16f886.c: 556: for(int8_t i = 8 - 1; i >= 0; i--)
  8807                           
  8808                           ;incstack = 0
  8809                           ; Regs used in _delete_row: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8810  1154  3007               	movlw	7
  8811  1155  1283               	bcf	3,5	;RP0=0, select bank0
  8812  1156  1303               	bcf	3,6	;RP1=0, select bank0
  8813  1157  00A0               	movwf	??_delete_row
  8814  1158  0820               	movf	??_delete_row,w
  8815  1159  00A6               	movwf	delete_row@i
  8816  115A                     L18:	
  8817  115A  1BA6               	btfsc	delete_row@i,7
  8818  115B  0008               	return
  8819                           
  8820                           ;teris_16f886.c: 557: {
  8821                           ;teris_16f886.c: 558: if(i <= row)
  8822  115C  0826               	movf	delete_row@i,w
  8823  115D  00A0               	movwf	??_delete_row
  8824  115E  01A1               	clrf	??_delete_row+1
  8825  115F  1BA0               	btfsc	??_delete_row,7
  8826  1160  03A1               	decf	??_delete_row+1,f
  8827  1161  0821               	movf	??_delete_row+1,w
  8828  1162  3A80               	xorlw	128
  8829  1163  3C80               	sublw	128
  8830  1164  1D03               	skipz
  8831  1165  2968               	goto	u6425
  8832  1166  0820               	movf	??_delete_row,w
  8833  1167  027D               	subwf	delete_row@row,w
  8834  1168                     u6425:	
  8835  1168  1C03               	skipc
  8836  1169  29C2               	goto	l4779
  8837                           
  8838                           ;teris_16f886.c: 559: {
  8839                           ;teris_16f886.c: 560: if(i > 0)
  8840  116A  1283               	bcf	3,5	;RP0=0, select bank0
  8841  116B  1303               	bcf	3,6	;RP1=0, select bank0
  8842  116C  0826               	movf	delete_row@i,w
  8843  116D  3A80               	xorlw	128
  8844  116E  3E7F               	addlw	-129
  8845  116F  1C03               	skipc
  8846  1170  29A4               	goto	l4777
  8847                           
  8848                           ;teris_16f886.c: 561: {
  8849                           ;teris_16f886.c: 565: register size_t len;
  8850                           ;teris_16f886.c: 567: len = 8*sizeof(uint8_t);
  8851  1171  3008               	movlw	8
  8852  1172  00A4               	movwf	delete_row@len
  8853  1173  3000               	movlw	0
  8854  1174  00A5               	movwf	delete_row@len+1
  8855                           
  8856                           ;teris_16f886.c: 568: memcpy(matrix->data[i], matrix->data[i - 1], len);
  8857  1175  0826               	movf	delete_row@i,w
  8858  1176  00A0               	movwf	??_delete_row
  8859  1177  3002               	movlw	2
  8860  1178                     u6445:	
  8861  1178  1003               	clrc
  8862  1179  0DA0               	rlf	??_delete_row,f
  8863  117A  3EFF               	addlw	-1
  8864  117B  1D03               	skipz
  8865  117C  2978               	goto	u6445
  8866  117D  1003               	clrc
  8867  117E  0D20               	rlf	??_delete_row,w
  8868  117F  077B               	addwf	delete_row@matrix,w
  8869  1180  00F0               	movwf	memcpy@d1
  8870  1181  087C               	movf	delete_row@matrix+1,w
  8871  1182  1803               	skipnc
  8872  1183  3E01               	addlw	1
  8873  1184  00F1               	movwf	memcpy@d1+1
  8874  1185  0826               	movf	delete_row@i,w
  8875  1186  00A1               	movwf	??_delete_row+1
  8876  1187  3002               	movlw	2
  8877  1188                     u6455:	
  8878  1188  1003               	clrc
  8879  1189  0DA1               	rlf	??_delete_row+1,f
  8880  118A  3EFF               	addlw	-1
  8881  118B  1D03               	skipz
  8882  118C  2988               	goto	u6455
  8883  118D  1003               	clrc
  8884  118E  0D21               	rlf	??_delete_row+1,w
  8885  118F  3EF8               	addlw	248
  8886  1190  077B               	addwf	delete_row@matrix,w
  8887  1191  00A2               	movwf	??_delete_row+2
  8888  1192  087C               	movf	delete_row@matrix+1,w
  8889  1193  1803               	skipnc
  8890  1194  3E01               	addlw	1
  8891  1195  00A3               	movwf	??_delete_row+3
  8892  1196  0822               	movf	??_delete_row+2,w
  8893  1197  00F2               	movwf	memcpy@s1
  8894  1198  0823               	movf	??_delete_row+3,w
  8895  1199  00F3               	movwf	memcpy@s1+1
  8896  119A  0825               	movf	delete_row@len+1,w
  8897  119B  00F5               	movwf	memcpy@n+1
  8898  119C  0824               	movf	delete_row@len,w
  8899  119D  00F4               	movwf	memcpy@n
  8900  119E  120A  118A  2003  160A  118A  	fcall	_memcpy
  8901                           
  8902                           ;teris_16f886.c: 569: }
  8903  11A3  29C2               	goto	l4779
  8904  11A4                     l4777:	
  8905                           
  8906                           ;teris_16f886.c: 570: else
  8907                           ;teris_16f886.c: 571: {
  8908                           ;teris_16f886.c: 572: memset(matrix->data[i], 0, 8*sizeof(uint8_t));
  8909  11A4  1283               	bcf	3,5	;RP0=0, select bank0
  8910  11A5  1303               	bcf	3,6	;RP1=0, select bank0
  8911  11A6  0826               	movf	delete_row@i,w
  8912  11A7  00A0               	movwf	??_delete_row
  8913  11A8  3002               	movlw	2
  8914  11A9                     u6465:	
  8915  11A9  1003               	clrc
  8916  11AA  0DA0               	rlf	??_delete_row,f
  8917  11AB  3EFF               	addlw	-1
  8918  11AC  1D03               	skipz
  8919  11AD  29A9               	goto	u6465
  8920  11AE  1003               	clrc
  8921  11AF  0D20               	rlf	??_delete_row,w
  8922  11B0  077B               	addwf	delete_row@matrix,w
  8923  11B1  00F0               	movwf	memset@p1
  8924  11B2  087C               	movf	delete_row@matrix+1,w
  8925  11B3  1803               	skipnc
  8926  11B4  3E01               	addlw	1
  8927  11B5  00F1               	movwf	memset@p1+1
  8928  11B6  3000               	movlw	0
  8929  11B7  00F2               	movwf	memset@c
  8930  11B8  00F3               	movwf	memset@c+1
  8931  11B9  3008               	movlw	8
  8932  11BA  00F4               	movwf	memset@n
  8933  11BB  3000               	movlw	0
  8934  11BC  00F5               	movwf	memset@n+1
  8935  11BD  160A  158A  2237  160A  118A  	fcall	_memset
  8936  11C2                     l4779:	
  8937  11C2  30FF               	movlw	255
  8938  11C3  1283               	bcf	3,5	;RP0=0, select bank0
  8939  11C4  1303               	bcf	3,6	;RP1=0, select bank0
  8940  11C5  00A0               	movwf	??_delete_row
  8941  11C6  0820               	movf	??_delete_row,w
  8942  11C7  07A6               	addwf	delete_row@i,f
  8943  11C8  295A               	goto	L18
  8944  11C9                     __end_of_delete_row:	
  8945                           
  8946                           	psect	text28
  8947  0003                     __ptext28:	
  8948 ;; *************** function _memcpy *****************
  8949 ;; Defined at:
  8950 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;  d1              2    0[COMMON] PTR void 
  8953 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  8954 ;;  s1              2    2[COMMON] PTR const void 
  8955 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  8956 ;;  n               2    4[COMMON] unsigned int 
  8957 ;; Auto vars:     Size  Location     Type
  8958 ;;  s               2    9[COMMON] PTR const unsigned char 
  8959 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  8960 ;;  d               2    7[COMMON] PTR unsigned char 
  8961 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  8962 ;; Return value:  Size  Location     Type
  8963 ;;                  2    0[COMMON] PTR void 
  8964 ;; Registers used:
  8965 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8966 ;; Tracked objects:
  8967 ;;		On entry : 0/0
  8968 ;;		On exit  : 0/0
  8969 ;;		Unchanged: 0/0
  8970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8971 ;;      Params:         6       0       0       0       0
  8972 ;;      Locals:         4       0       0       0       0
  8973 ;;      Temps:          1       0       0       0       0
  8974 ;;      Totals:        11       0       0       0       0
  8975 ;;Total ram usage:       11 bytes
  8976 ;; Hardware stack levels used:    1
  8977 ;; This function calls:
  8978 ;;		Nothing
  8979 ;; This function is called by:
  8980 ;;		_delete_row
  8981 ;;		_merge1
  8982 ;; This function uses a non-reentrant model
  8983 ;;
  8984                           
  8985                           
  8986                           ;psect for function _memcpy
  8987  0003                     _memcpy:	
  8988                           
  8989                           ;incstack = 0
  8990                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  8991  0003  0872               	movf	memcpy@s1,w
  8992  0004  00F9               	movwf	memcpy@s
  8993  0005  0873               	movf	memcpy@s1+1,w
  8994  0006  00FA               	movwf	memcpy@s+1
  8995  0007  0870               	movf	memcpy@d1,w
  8996  0008  00F7               	movwf	memcpy@d
  8997  0009  0871               	movf	memcpy@d1+1,w
  8998  000A  00F8               	movwf	memcpy@d+1
  8999  000B                     l3403:	
  9000  000B  3001               	movlw	1
  9001  000C  02F4               	subwf	memcpy@n,f
  9002  000D  3000               	movlw	0
  9003  000E  1C03               	skipc
  9004  000F  03F5               	decf	memcpy@n+1,f
  9005  0010  02F5               	subwf	memcpy@n+1,f
  9006  0011  0A74               	incf	memcpy@n,w
  9007  0012  1903               	btfsc	3,2
  9008  0013  0A75               	incf	memcpy@n+1,w
  9009  0014  1903               	btfsc	3,2
  9010  0015  0008               	return
  9011  0016  0879               	movf	memcpy@s,w
  9012  0017  0084               	movwf	4
  9013  0018  1783               	bsf	3,7
  9014  0019  1C7A               	btfss	memcpy@s+1,0
  9015  001A  1383               	bcf	3,7
  9016  001B  0800               	movf	0,w
  9017  001C  00F6               	movwf	??_memcpy
  9018  001D  0877               	movf	memcpy@d,w
  9019  001E  0084               	movwf	4
  9020  001F  1383               	bcf	3,7
  9021  0020  1878               	btfsc	memcpy@d+1,0
  9022  0021  1783               	bsf	3,7
  9023  0022  0876               	movf	??_memcpy,w
  9024  0023  0080               	movwf	0
  9025  0024  3001               	movlw	1
  9026  0025  07F9               	addwf	memcpy@s,f
  9027  0026  1803               	skipnc
  9028  0027  0AFA               	incf	memcpy@s+1,f
  9029  0028  3001               	movlw	1
  9030  0029  07F7               	addwf	memcpy@d,f
  9031  002A  1803               	skipnc
  9032  002B  0AF8               	incf	memcpy@d+1,f
  9033  002C  280B               	goto	l3403
  9034  002D                     __end_of_memcpy:	
  9035                           ;	Return value of _memcpy is never used
  9036                           
  9037                           
  9038                           	psect	text29
  9039  1A73                     __ptext29:	
  9040 ;; *************** function _debug_int1 *****************
  9041 ;; Defined at:
  9042 ;;		line 303 in file "teris_16f886.c"
  9043 ;; Parameters:    Size  Location     Type
  9044 ;;  f               2   31[BANK0 ] PTR const unsigned char 
  9045 ;;		 -> STR_63(14), STR_61(24), STR_53(23), STR_46(16), 
  9046 ;;		 -> STR_42(17), STR_39(22), STR_38(17), STR_37(16), 
  9047 ;;		 -> STR_36(11), STR_22(25), STR_10(30), 
  9048 ;;  i               2   33[BANK0 ] int 
  9049 ;; Auto vars:     Size  Location     Type
  9050 ;;		None
  9051 ;; Return value:  Size  Location     Type
  9052 ;;                  1    wreg      void 
  9053 ;; Registers used:
  9054 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9055 ;; Tracked objects:
  9056 ;;		On entry : 0/0
  9057 ;;		On exit  : 0/0
  9058 ;;		Unchanged: 0/0
  9059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9060 ;;      Params:         0       4       0       0       0
  9061 ;;      Locals:         0       0       0       0       0
  9062 ;;      Temps:          0       0       0       0       0
  9063 ;;      Totals:         0       4       0       0       0
  9064 ;;Total ram usage:        4 bytes
  9065 ;; Hardware stack levels used:    1
  9066 ;; Hardware stack levels required when called:    2
  9067 ;; This function calls:
  9068 ;;		_USARTWriteString
  9069 ;;		_sprintf
  9070 ;; This function is called by:
  9071 ;;		_delete_matrix
  9072 ;;		_evaluate
  9073 ;;		_left_most
  9074 ;;		_right_most
  9075 ;;		_get_high
  9076 ;;		_get_holes_after_merge
  9077 ;;		_find_best_solution
  9078 ;;		_main
  9079 ;;		_printf_console_all_MATRIX44
  9080 ;; This function uses a non-reentrant model
  9081 ;;
  9082                           
  9083                           
  9084                           ;psect for function _debug_int1
  9085  1A73                     _debug_int1:	
  9086                           
  9087                           ;teris_16f886.c: 309: sprintf(g_debug, f, i);
  9088                           
  9089                           ;incstack = 0
  9090                           ; Regs used in _debug_int1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9091  1A73  1283               	bcf	3,5	;RP0=0, select bank0
  9092  1A74  1303               	bcf	3,6	;RP1=0, select bank0
  9093  1A75  083F               	movf	debug_int1@f,w
  9094  1A76  00A0               	movwf	sprintf@f
  9095  1A77  0840               	movf	debug_int1@f+1,w
  9096  1A78  00A1               	movwf	sprintf@f+1
  9097  1A79  0842               	movf	debug_int1@i+1,w
  9098  1A7A  00A3               	movwf	?_sprintf+3
  9099  1A7B  0841               	movf	debug_int1@i,w
  9100  1A7C  00A2               	movwf	?_sprintf+2
  9101  1A7D  3098               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9102  1A7E  120A  118A  22C2  160A  158A  	fcall	_sprintf
  9103                           
  9104                           ;teris_16f886.c: 310: USARTWriteString(g_debug);
  9105  1A83  3098               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9106  1A84  00F1               	movwf	USARTWriteString@str
  9107  1A85  3001               	movlw	1
  9108  1A86  00F2               	movwf	USARTWriteString@str+1
  9109  1A87  160A  158A  2294  160A  158A  	fcall	_USARTWriteString
  9110                           
  9111                           ;teris_16f886.c: 311: USARTWriteString("\r\n");
  9112  1A8C  3067               	movlw	low (STR_1| (0+32768))
  9113  1A8D  00F1               	movwf	USARTWriteString@str
  9114  1A8E  308E               	movlw	high (STR_1| (0+32768))
  9115  1A8F  00F2               	movwf	USARTWriteString@str+1
  9116  1A90  160A  158A  2294   	fcall	_USARTWriteString
  9117  1A93  0008               	return
  9118  1A94                     __end_of_debug_int1:	
  9119                           
  9120                           	psect	text30
  9121  02C2                     __ptext30:	
  9122 ;; *************** function _sprintf *****************
  9123 ;; Defined at:
  9124 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  9125 ;; Parameters:    Size  Location     Type
  9126 ;;  sp              1    wreg     PTR unsigned char 
  9127 ;;		 -> g_debug(32), 
  9128 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  9129 ;;		 -> STR_63(14), STR_61(24), STR_59(35), STR_58(36), 
  9130 ;;		 -> STR_57(35), STR_56(36), STR_55(35), STR_54(36), 
  9131 ;;		 -> STR_53(23), STR_52(35), STR_51(36), STR_50(35), 
  9132 ;;		 -> STR_49(36), STR_48(35), STR_47(38), STR_46(16), 
  9133 ;;		 -> STR_45(37), STR_44(36), STR_42(17), STR_41(33), 
  9134 ;;		 -> STR_40(52), STR_39(22), STR_38(17), STR_37(16), 
  9135 ;;		 -> STR_36(11), STR_35(26), STR_34(26), STR_30(30), 
  9136 ;;		 -> STR_29(30), STR_28(30), STR_25(24), STR_24(24), 
  9137 ;;		 -> STR_22(25), STR_11(42), STR_10(30), 
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;  sp              1   28[BANK0 ] PTR unsigned char 
  9140 ;;		 -> g_debug(32), 
  9141 ;;  idx             1   17[BANK0 ] unsigned char 
  9142 ;;  tmpval          4    0        struct .
  9143 ;;  flag            2   29[BANK0 ] unsigned short 
  9144 ;;  width           2   25[BANK0 ] int 
  9145 ;;  val             2   22[BANK0 ] unsigned int 
  9146 ;;  len             2   19[BANK0 ] unsigned int 
  9147 ;;  c               1   27[BANK0 ] char 
  9148 ;;  prec            1   24[BANK0 ] char 
  9149 ;;  ap              1   21[BANK0 ] PTR void [1]
  9150 ;;		 -> ?_sprintf(2), 
  9151 ;;  cp              1   18[BANK0 ] PTR const unsigned char 
  9152 ;;		 -> sprintf@c(1), 
  9153 ;; Return value:  Size  Location     Type
  9154 ;;                  2    0[BANK0 ] int 
  9155 ;; Registers used:
  9156 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9157 ;; Tracked objects:
  9158 ;;		On entry : 0/0
  9159 ;;		On exit  : 0/0
  9160 ;;		Unchanged: 0/0
  9161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9162 ;;      Params:         0       8       0       0       0
  9163 ;;      Locals:         0      20       0       0       0
  9164 ;;      Temps:          0       3       0       0       0
  9165 ;;      Totals:         0      31       0       0       0
  9166 ;;Total ram usage:       31 bytes
  9167 ;; Hardware stack levels used:    1
  9168 ;; Hardware stack levels required when called:    1
  9169 ;; This function calls:
  9170 ;;		___bmul
  9171 ;;		___lwdiv
  9172 ;;		___lwmod
  9173 ;;		___wmul
  9174 ;;		_isdigit
  9175 ;; This function is called by:
  9176 ;;		_debug_int1
  9177 ;;		_debug_int2
  9178 ;;		_debug_int3
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           
  9183                           ;psect for function _sprintf
  9184  02C2                     _sprintf:	
  9185                           
  9186                           ;incstack = 0
  9187                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9188                           ;sprintf@sp stored from wreg
  9189  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  9190  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  9191  02C4  00BC               	movwf	sprintf@sp
  9192                           
  9193                           ;doprnt.c: 494: va_list ap;
  9194                           ;doprnt.c: 499: signed char c;
  9195                           ;doprnt.c: 501: int width;
  9196                           ;doprnt.c: 506: signed char prec;
  9197                           ;doprnt.c: 508: unsigned short flag;
  9198                           ;doprnt.c: 523: union {
  9199                           ;doprnt.c: 524: unsigned long vd;
  9200                           ;doprnt.c: 525: double integ;
  9201                           ;doprnt.c: 526: } tmpval;
  9202                           ;doprnt.c: 528: unsigned int val;
  9203                           ;doprnt.c: 529: unsigned len;
  9204                           ;doprnt.c: 530: const char * cp;
  9205                           ;doprnt.c: 533: *ap = __va_start();
  9206  02C5  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  9207  02C6  00A8               	movwf	??_sprintf
  9208  02C7  0828               	movf	??_sprintf,w
  9209  02C8  00B5               	movwf	sprintf@ap
  9210  02C9                     l3337:	
  9211                           ;doprnt.c: 536: while(c = *f++) {
  9212                           
  9213  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  9214  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  9215  02CB  0821               	movf	sprintf@f+1,w
  9216  02CC  00A9               	movwf	??_sprintf+1
  9217  02CD  0820               	movf	sprintf@f,w
  9218  02CE  00A8               	movwf	??_sprintf
  9219  02CF  0AA0               	incf	sprintf@f,f
  9220  02D0  1903               	skipnz
  9221  02D1  0AA1               	incf	sprintf@f+1,f
  9222  02D2  0829               	movf	??_sprintf+1,w
  9223  02D3  00FF               	movwf	127
  9224  02D4  0828               	movf	??_sprintf,w
  9225  02D5  0084               	movwf	4
  9226  02D6  120A  158A  2000  120A  118A  	fcall	stringtab
  9227  02DB  00AA               	movwf	??_sprintf+2
  9228  02DC  082A               	movf	??_sprintf+2,w
  9229  02DD  00BB               	movwf	sprintf@c
  9230  02DE  083B               	movf	sprintf@c,w
  9231  02DF  1903               	btfsc	3,2
  9232  02E0  2FBD               	goto	l3339
  9233                           
  9234                           ;doprnt.c: 538: if(c != '%')
  9235  02E1  3025               	movlw	37
  9236  02E2  063B               	xorwf	sprintf@c,w
  9237  02E3  1903               	btfsc	3,2
  9238  02E4  2AF1               	goto	l3029
  9239                           
  9240                           ;doprnt.c: 540: {
  9241                           ;doprnt.c: 541: ((*sp++ = (c)));
  9242  02E5  083B               	movf	sprintf@c,w
  9243  02E6  00A8               	movwf	??_sprintf
  9244  02E7  083C               	movf	sprintf@sp,w
  9245  02E8  0084               	movwf	4
  9246  02E9  0828               	movf	??_sprintf,w
  9247  02EA  1783               	bsf	3,7	;select IRP bank2
  9248  02EB  0080               	movwf	0
  9249  02EC  3001               	movlw	1
  9250  02ED  00A8               	movwf	??_sprintf
  9251  02EE  0828               	movf	??_sprintf,w
  9252  02EF  07BC               	addwf	sprintf@sp,f
  9253                           
  9254                           ;doprnt.c: 542: continue;
  9255  02F0  2AC9               	goto	l3337
  9256  02F1                     l3029:	
  9257                           
  9258                           ;doprnt.c: 543: }
  9259                           ;doprnt.c: 546: width = 0;
  9260  02F1  01B9               	clrf	sprintf@width
  9261  02F2  01BA               	clrf	sprintf@width+1
  9262                           
  9263                           ;doprnt.c: 548: flag = 0;
  9264  02F3  01BD               	clrf	sprintf@flag
  9265  02F4  01BE               	clrf	sprintf@flag+1
  9266                           
  9267                           ;doprnt.c: 551: switch(*f) {
  9268                           
  9269                           ;doprnt.c: 550: for(;;) {
  9270  02F5  2B01               	goto	l3033
  9271  02F6                     l511:	
  9272                           ;doprnt.c: 553: case '-':
  9273                           
  9274                           
  9275                           ;doprnt.c: 554: flag |= 0x08;
  9276  02F6  15BD               	bsf	sprintf@flag,3
  9277  02F7  2AFD               	goto	L21
  9278  02F8                     l513:	
  9279                           ;doprnt.c: 560: case ' ':
  9280                           
  9281                           ;doprnt.c: 556: continue;
  9282                           
  9283                           ;doprnt.c: 555: f++;
  9284                           
  9285                           
  9286                           ;doprnt.c: 561: flag |= 0x01;
  9287  02F8  143D               	bsf	sprintf@flag,0
  9288  02F9  2AFD               	goto	L21
  9289  02FA                     l514:	
  9290                           ;doprnt.c: 573: case '#':
  9291                           
  9292                           ;doprnt.c: 563: continue;
  9293                           
  9294                           ;doprnt.c: 562: f++;
  9295                           
  9296                           
  9297                           ;doprnt.c: 574: flag |= 0x800;
  9298  02FA  15BE               	bsf	sprintf@flag+1,3
  9299  02FB  2AFD               	goto	L21
  9300  02FC                     l515:	
  9301                           ;doprnt.c: 579: case '0':
  9302                           
  9303                           ;doprnt.c: 576: continue;
  9304                           
  9305                           ;doprnt.c: 575: f++;
  9306                           
  9307                           
  9308                           ;doprnt.c: 580: flag |= 0x04;
  9309  02FC  153D               	bsf	sprintf@flag,2
  9310  02FD                     L21:	
  9311                           
  9312                           ;doprnt.c: 581: f++;
  9313  02FD  3001               	movlw	1
  9314  02FE  07A0               	addwf	sprintf@f,f
  9315  02FF  1803               	skipnc
  9316  0300  0AA1               	incf	sprintf@f+1,f
  9317  0301                     l3033:	
  9318                           ;doprnt.c: 584: }
  9319                           
  9320                           ;doprnt.c: 582: continue;
  9321                           
  9322  0301  0821               	movf	sprintf@f+1,w
  9323  0302  00FF               	movwf	127
  9324  0303  0820               	movf	sprintf@f,w
  9325  0304  0084               	movwf	4
  9326  0305  120A  158A  2000  120A  118A  	fcall	stringtab
  9327                           
  9328                           ; Switch size 1, requested type "space"
  9329                           ; Number of cases is 4, Range of values is 32 to 48
  9330                           ; switch strategies available:
  9331                           ; Name         Instructions Cycles
  9332                           ; simple_byte           13     7 (average)
  9333                           ; direct_byte           62    11 (fixed)
  9334                           ; jumptable            263     9 (fixed)
  9335                           ;	Chosen strategy is simple_byte
  9336  030A  3A20               	xorlw	32	; case 32
  9337  030B  1903               	skipnz
  9338  030C  2AF8               	goto	l513
  9339  030D  3A03               	xorlw	3	; case 35
  9340  030E  1903               	skipnz
  9341  030F  2AFA               	goto	l514
  9342  0310  3A0E               	xorlw	14	; case 45
  9343  0311  1903               	skipnz
  9344  0312  2AF6               	goto	l511
  9345  0313  3A1D               	xorlw	29	; case 48
  9346  0314  1903               	skipnz
  9347  0315  2AFC               	goto	l515
  9348  0316  2B17               	goto	l517
  9349  0317                     l517:	
  9350                           ;doprnt.c: 586: }
  9351                           
  9352                           ;doprnt.c: 585: break;
  9353                           
  9354                           
  9355                           ;doprnt.c: 593: if(flag & 0x08)
  9356  0317  1DBD               	btfss	sprintf@flag,3
  9357  0318  2B1D               	goto	l3037
  9358                           
  9359                           ;doprnt.c: 594: flag &= ~0x04;
  9360  0319  30FB               	movlw	251
  9361  031A  05BD               	andwf	sprintf@flag,f
  9362  031B  30FF               	movlw	255
  9363  031C  05BE               	andwf	sprintf@flag+1,f
  9364  031D                     l3037:	
  9365                           
  9366                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9367  031D  0821               	movf	sprintf@f+1,w
  9368  031E  00FF               	movwf	127
  9369  031F  0820               	movf	sprintf@f,w
  9370  0320  0084               	movwf	4
  9371  0321  120A  158A  2000  120A  118A  	fcall	stringtab
  9372  0326  160A  158A  21B8  120A  118A  	fcall	_isdigit
  9373  032B  1C03               	btfss	3,0
  9374  032C  2B70               	goto	l3049
  9375                           
  9376                           ;doprnt.c: 598: width = 0;
  9377  032D  1283               	bcf	3,5	;RP0=0, select bank0
  9378  032E  1303               	bcf	3,6	;RP1=0, select bank0
  9379  032F  01B9               	clrf	sprintf@width
  9380  0330  01BA               	clrf	sprintf@width+1
  9381  0331                     l3041:	
  9382                           ;doprnt.c: 599: do {
  9383                           
  9384                           
  9385                           ;doprnt.c: 600: width *= 10;
  9386  0331  300A               	movlw	10
  9387  0332  00F0               	movwf	___wmul@multiplier
  9388  0333  3000               	movlw	0
  9389  0334  00F1               	movwf	___wmul@multiplier+1
  9390  0335  1283               	bcf	3,5	;RP0=0, select bank0
  9391  0336  1303               	bcf	3,6	;RP1=0, select bank0
  9392  0337  083A               	movf	sprintf@width+1,w
  9393  0338  00F3               	movwf	___wmul@multiplicand+1
  9394  0339  0839               	movf	sprintf@width,w
  9395  033A  00F2               	movwf	___wmul@multiplicand
  9396  033B  160A  158A  2252  120A  118A  	fcall	___wmul
  9397  0340  0871               	movf	?___wmul+1,w
  9398  0341  1283               	bcf	3,5	;RP0=0, select bank0
  9399  0342  1303               	bcf	3,6	;RP1=0, select bank0
  9400  0343  00BA               	movwf	sprintf@width+1
  9401  0344  0870               	movf	?___wmul,w
  9402  0345  00B9               	movwf	sprintf@width
  9403                           
  9404                           ;doprnt.c: 601: width += *f++ - '0';
  9405  0346  0821               	movf	sprintf@f+1,w
  9406  0347  00FF               	movwf	127
  9407  0348  0820               	movf	sprintf@f,w
  9408  0349  0084               	movwf	4
  9409  034A  120A  158A  2000  120A  118A  	fcall	stringtab
  9410  034F  3ED0               	addlw	208
  9411  0350  00A8               	movwf	??_sprintf
  9412  0351  30FF               	movlw	255
  9413  0352  1803               	skipnc
  9414  0353  3000               	movlw	0
  9415  0354  00A9               	movwf	??_sprintf+1
  9416  0355  0828               	movf	??_sprintf,w
  9417  0356  07B9               	addwf	sprintf@width,f
  9418  0357  1803               	skipnc
  9419  0358  0ABA               	incf	sprintf@width+1,f
  9420  0359  0829               	movf	??_sprintf+1,w
  9421  035A  07BA               	addwf	sprintf@width+1,f
  9422  035B  3001               	movlw	1
  9423  035C  07A0               	addwf	sprintf@f,f
  9424  035D  1803               	skipnc
  9425  035E  0AA1               	incf	sprintf@f+1,f
  9426                           
  9427                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9428  035F  0821               	movf	sprintf@f+1,w
  9429  0360  00FF               	movwf	127
  9430  0361  0820               	movf	sprintf@f,w
  9431  0362  0084               	movwf	4
  9432  0363  120A  158A  2000  120A  118A  	fcall	stringtab
  9433  0368  160A  158A  21B8  120A  118A  	fcall	_isdigit
  9434  036D  1C03               	btfss	3,0
  9435  036E  2B8E               	goto	l3057
  9436  036F  2B31               	goto	l3041
  9437  0370                     l3049:	
  9438                           ;doprnt.c: 604: } else if(*f == '*') {
  9439                           
  9440  0370  1283               	bcf	3,5	;RP0=0, select bank0
  9441  0371  1303               	bcf	3,6	;RP1=0, select bank0
  9442  0372  0821               	movf	sprintf@f+1,w
  9443  0373  00FF               	movwf	127
  9444  0374  0820               	movf	sprintf@f,w
  9445  0375  0084               	movwf	4
  9446  0376  120A  158A  2000  120A  118A  	fcall	stringtab
  9447  037B  3A2A               	xorlw	42
  9448  037C  1D03               	skipz
  9449  037D  2B8E               	goto	l3057
  9450                           
  9451                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  9452  037E  0835               	movf	sprintf@ap,w
  9453  037F  0084               	movwf	4
  9454  0380  1383               	bcf	3,7	;select IRP bank0
  9455  0381  0800               	movf	0,w
  9456  0382  00B9               	movwf	sprintf@width
  9457  0383  0A84               	incf	4,f
  9458  0384  0800               	movf	0,w
  9459  0385  00BA               	movwf	sprintf@width+1
  9460  0386  3002               	movlw	2
  9461  0387  00A8               	movwf	??_sprintf
  9462  0388  0828               	movf	??_sprintf,w
  9463  0389  07B5               	addwf	sprintf@ap,f
  9464                           
  9465                           ;doprnt.c: 606: f++;
  9466  038A  3001               	movlw	1
  9467  038B  07A0               	addwf	sprintf@f,f
  9468  038C  1803               	skipnc
  9469  038D  0AA1               	incf	sprintf@f+1,f
  9470  038E                     l3057:	
  9471                           
  9472                           ;doprnt.c: 608: }
  9473                           ;doprnt.c: 611: if(*f == '.') {
  9474  038E  1283               	bcf	3,5	;RP0=0, select bank0
  9475  038F  1303               	bcf	3,6	;RP1=0, select bank0
  9476  0390  0821               	movf	sprintf@f+1,w
  9477  0391  00FF               	movwf	127
  9478  0392  0820               	movf	sprintf@f,w
  9479  0393  0084               	movwf	4
  9480  0394  120A  158A  2000  120A  118A  	fcall	stringtab
  9481  0399  3A2E               	xorlw	46
  9482  039A  1D03               	skipz
  9483  039B  2BF0               	goto	l3075
  9484                           
  9485                           ;doprnt.c: 612: flag |= 0x4000;
  9486  039C  173E               	bsf	sprintf@flag+1,6
  9487                           
  9488                           ;doprnt.c: 613: f++;
  9489  039D  3001               	movlw	1
  9490  039E  07A0               	addwf	sprintf@f,f
  9491  039F  1803               	skipnc
  9492  03A0  0AA1               	incf	sprintf@f+1,f
  9493                           
  9494                           ;doprnt.c: 615: if(*f == '*') {
  9495  03A1  0821               	movf	sprintf@f+1,w
  9496  03A2  00FF               	movwf	127
  9497  03A3  0820               	movf	sprintf@f,w
  9498  03A4  0084               	movwf	4
  9499  03A5  120A  158A  2000  120A  118A  	fcall	stringtab
  9500  03AA  3A2A               	xorlw	42
  9501  03AB  1D03               	skipz
  9502  03AC  2BBD               	goto	l3069
  9503                           
  9504                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  9505  03AD  0835               	movf	sprintf@ap,w
  9506  03AE  0084               	movwf	4
  9507  03AF  1383               	bcf	3,7	;select IRP bank0
  9508  03B0  0800               	movf	0,w
  9509  03B1  00A8               	movwf	??_sprintf
  9510  03B2  0828               	movf	??_sprintf,w
  9511  03B3  00B8               	movwf	sprintf@prec
  9512  03B4  3002               	movlw	2
  9513  03B5  00A8               	movwf	??_sprintf
  9514  03B6  0828               	movf	??_sprintf,w
  9515  03B7  07B5               	addwf	sprintf@ap,f
  9516                           
  9517                           ;doprnt.c: 617: f++;
  9518  03B8  3001               	movlw	1
  9519  03B9  07A0               	addwf	sprintf@f,f
  9520  03BA  1803               	skipnc
  9521  03BB  0AA1               	incf	sprintf@f+1,f
  9522                           
  9523                           ;doprnt.c: 618: } else
  9524  03BC  2C8C               	goto	l3127
  9525  03BD                     l3069:	
  9526                           
  9527                           ;doprnt.c: 620: {
  9528                           ;doprnt.c: 621: prec = 0;
  9529  03BD  01B8               	clrf	sprintf@prec
  9530  03BE                     l527:	
  9531                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  9532                           
  9533  03BE  0821               	movf	sprintf@f+1,w
  9534  03BF  00FF               	movwf	127
  9535  03C0  0820               	movf	sprintf@f,w
  9536  03C1  0084               	movwf	4
  9537  03C2  120A  158A  2000  120A  118A  	fcall	stringtab
  9538  03C7  160A  158A  21B8  120A  118A  	fcall	_isdigit
  9539  03CC  1C03               	btfss	3,0
  9540  03CD  2C8C               	goto	l3127
  9541                           
  9542                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  9543  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  9544  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  9545  03D0  0821               	movf	sprintf@f+1,w
  9546  03D1  00FF               	movwf	127
  9547  03D2  0820               	movf	sprintf@f,w
  9548  03D3  0084               	movwf	4
  9549  03D4  120A  158A  2000  120A  118A  	fcall	stringtab
  9550  03D9  00A8               	movwf	??_sprintf
  9551  03DA  300A               	movlw	10
  9552  03DB  00A9               	movwf	??_sprintf+1
  9553  03DC  0829               	movf	??_sprintf+1,w
  9554  03DD  00F0               	movwf	___bmul@multiplicand
  9555  03DE  0838               	movf	sprintf@prec,w
  9556  03DF  160A  158A  21C6  120A  118A  	fcall	___bmul
  9557  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  9558  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  9559  03E6  0728               	addwf	??_sprintf,w
  9560  03E7  3ED0               	addlw	-48
  9561  03E8  00AA               	movwf	??_sprintf+2
  9562  03E9  082A               	movf	??_sprintf+2,w
  9563  03EA  00B8               	movwf	sprintf@prec
  9564  03EB  3001               	movlw	1
  9565  03EC  07A0               	addwf	sprintf@f,f
  9566  03ED  1803               	skipnc
  9567  03EE  0AA1               	incf	sprintf@f+1,f
  9568  03EF  2BBE               	goto	l527
  9569  03F0                     l3075:	
  9570                           ;doprnt.c: 624: }
  9571                           ;doprnt.c: 625: } else {
  9572                           
  9573                           
  9574                           ;doprnt.c: 626: prec = 0;
  9575  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  9576  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  9577  03F2  01B8               	clrf	sprintf@prec
  9578                           
  9579                           ;doprnt.c: 630: }
  9580                           ;doprnt.c: 635: switch(c = *f++) {
  9581  03F3  2C8C               	goto	l3127
  9582  03F4                     l534:	
  9583                           ;doprnt.c: 689: case 'o':
  9584                           
  9585                           ;doprnt.c: 638: goto alldone;
  9586                           
  9587                           ;doprnt.c: 637: case 0:
  9588                           
  9589                           
  9590                           ;doprnt.c: 691: flag |= 0x40;
  9591  03F4  173D               	bsf	sprintf@flag,6
  9592                           
  9593                           ;doprnt.c: 698: case 'i':
  9594                           ;doprnt.c: 699: break;
  9595                           
  9596                           ;doprnt.c: 697: case 'd':
  9597                           
  9598                           ;doprnt.c: 693: break;
  9599  03F5  2CB8               	goto	l3129
  9600  03F6                     l538:	
  9601                           ;doprnt.c: 712: case 'X':
  9602                           
  9603                           
  9604                           ;doprnt.c: 714: flag |= 0x20;
  9605  03F6  16BD               	bsf	sprintf@flag,5
  9606  03F7                     l539:	
  9607                           ;doprnt.c: 718: case 'x':
  9608                           
  9609                           
  9610                           ;doprnt.c: 721: flag |= 0x80;
  9611  03F7  17BD               	bsf	sprintf@flag,7
  9612                           
  9613                           ;doprnt.c: 723: break;
  9614  03F8  2CB8               	goto	l3129
  9615  03F9                     l3077:	
  9616                           ;doprnt.c: 750: dostring:
  9617                           
  9618                           
  9619                           ;doprnt.c: 753: if(prec && prec < len)
  9620  03F9  0838               	movf	sprintf@prec,w
  9621  03FA  1903               	btfsc	3,2
  9622  03FB  2C0E               	goto	l3083
  9623  03FC  0838               	movf	sprintf@prec,w
  9624  03FD  00A8               	movwf	??_sprintf
  9625  03FE  01A9               	clrf	??_sprintf+1
  9626  03FF  1BA8               	btfsc	??_sprintf,7
  9627  0400  03A9               	decf	??_sprintf+1,f
  9628  0401  0834               	movf	sprintf@len+1,w
  9629  0402  0229               	subwf	??_sprintf+1,w
  9630  0403  1D03               	skipz
  9631  0404  2C07               	goto	u3475
  9632  0405  0833               	movf	sprintf@len,w
  9633  0406  0228               	subwf	??_sprintf,w
  9634  0407                     u3475:	
  9635  0407  1803               	skipnc
  9636  0408  2C0E               	goto	l3083
  9637                           
  9638                           ;doprnt.c: 754: len = prec;
  9639  0409  0838               	movf	sprintf@prec,w
  9640  040A  00B3               	movwf	sprintf@len
  9641  040B  01B4               	clrf	sprintf@len+1
  9642  040C  1BB3               	btfsc	sprintf@len,7
  9643  040D  03B4               	decf	sprintf@len+1,f
  9644  040E                     l3083:	
  9645                           
  9646                           ;doprnt.c: 757: if(width > len)
  9647  040E  083A               	movf	sprintf@width+1,w
  9648  040F  0234               	subwf	sprintf@len+1,w
  9649  0410  1D03               	skipz
  9650  0411  2C14               	goto	u3485
  9651  0412  0839               	movf	sprintf@width,w
  9652  0413  0233               	subwf	sprintf@len,w
  9653  0414                     u3485:	
  9654  0414  1803               	skipnc
  9655  0415  2C1D               	goto	l3087
  9656                           
  9657                           ;doprnt.c: 758: width -= len;
  9658  0416  0833               	movf	sprintf@len,w
  9659  0417  02B9               	subwf	sprintf@width,f
  9660  0418  0834               	movf	sprintf@len+1,w
  9661  0419  1C03               	skipc
  9662  041A  03BA               	decf	sprintf@width+1,f
  9663  041B  02BA               	subwf	sprintf@width+1,f
  9664  041C  2C1F               	goto	l3089
  9665  041D                     l3087:	
  9666                           
  9667                           ;doprnt.c: 759: else
  9668                           ;doprnt.c: 760: width = 0;
  9669  041D  01B9               	clrf	sprintf@width
  9670  041E  01BA               	clrf	sprintf@width+1
  9671  041F                     l3089:	
  9672                           
  9673                           ;doprnt.c: 762: if(!(flag & 0x08))
  9674  041F  1DBD               	btfss	sprintf@flag,3
  9675  0420  2C2D               	goto	l3097
  9676  0421  2C4C               	goto	l3105
  9677  0422                     l3093:	
  9678                           ;doprnt.c: 764: while(width--)
  9679                           
  9680                           
  9681                           ;doprnt.c: 765: ((*sp++ = (' ')));
  9682  0422  3020               	movlw	32
  9683  0423  00A8               	movwf	??_sprintf
  9684  0424  083C               	movf	sprintf@sp,w
  9685  0425  0084               	movwf	4
  9686  0426  0828               	movf	??_sprintf,w
  9687  0427  1783               	bsf	3,7	;select IRP bank2
  9688  0428  0080               	movwf	0
  9689  0429  3001               	movlw	1
  9690  042A  00A8               	movwf	??_sprintf
  9691  042B  0828               	movf	??_sprintf,w
  9692  042C  07BC               	addwf	sprintf@sp,f
  9693  042D                     l3097:	
  9694  042D  30FF               	movlw	255
  9695  042E  07B9               	addwf	sprintf@width,f
  9696  042F  1803               	skipnc
  9697  0430  0ABA               	incf	sprintf@width+1,f
  9698  0431  30FF               	movlw	255
  9699  0432  07BA               	addwf	sprintf@width+1,f
  9700  0433  0A39               	incf	sprintf@width,w
  9701  0434  1D03               	skipz
  9702  0435  2C22               	goto	l3093
  9703  0436  0A3A               	incf	sprintf@width+1,w
  9704  0437  1903               	btfsc	3,2
  9705  0438  2C4C               	goto	l3105
  9706  0439  2C22               	goto	l3093
  9707  043A                     l3099:	
  9708                           ;doprnt.c: 767: while(len--)
  9709                           
  9710                           
  9711                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  9712  043A  0832               	movf	sprintf@cp,w
  9713  043B  0084               	movwf	4
  9714  043C  1383               	bcf	3,7	;select IRP bank0
  9715  043D  0800               	movf	0,w
  9716  043E  00A8               	movwf	??_sprintf
  9717  043F  083C               	movf	sprintf@sp,w
  9718  0440  0084               	movwf	4
  9719  0441  0828               	movf	??_sprintf,w
  9720  0442  1783               	bsf	3,7	;select IRP bank2
  9721  0443  0080               	movwf	0
  9722  0444  3001               	movlw	1
  9723  0445  00A8               	movwf	??_sprintf
  9724  0446  0828               	movf	??_sprintf,w
  9725  0447  07B2               	addwf	sprintf@cp,f
  9726  0448  3001               	movlw	1
  9727  0449  00A8               	movwf	??_sprintf
  9728  044A  0828               	movf	??_sprintf,w
  9729  044B  07BC               	addwf	sprintf@sp,f
  9730  044C                     l3105:	
  9731  044C  3001               	movlw	1
  9732  044D  02B3               	subwf	sprintf@len,f
  9733  044E  3000               	movlw	0
  9734  044F  1C03               	skipc
  9735  0450  03B4               	decf	sprintf@len+1,f
  9736  0451  02B4               	subwf	sprintf@len+1,f
  9737  0452  0A33               	incf	sprintf@len,w
  9738  0453  1D03               	skipz
  9739  0454  2C3A               	goto	l3099
  9740  0455  0A34               	incf	sprintf@len+1,w
  9741  0456  1D03               	btfss	3,2
  9742  0457  2C3A               	goto	l3099
  9743                           
  9744                           ;doprnt.c: 770: if(flag & 0x08)
  9745  0458  19BD               	btfsc	sprintf@flag,3
  9746  0459  2C66               	goto	l3113
  9747  045A  2AC9               	goto	l3337
  9748  045B                     l3109:	
  9749                           ;doprnt.c: 771: while(width--)
  9750                           
  9751                           
  9752                           ;doprnt.c: 772: ((*sp++ = (' ')));
  9753  045B  3020               	movlw	32
  9754  045C  00A8               	movwf	??_sprintf
  9755  045D  083C               	movf	sprintf@sp,w
  9756  045E  0084               	movwf	4
  9757  045F  0828               	movf	??_sprintf,w
  9758  0460  1783               	bsf	3,7	;select IRP bank2
  9759  0461  0080               	movwf	0
  9760  0462  3001               	movlw	1
  9761  0463  00A8               	movwf	??_sprintf
  9762  0464  0828               	movf	??_sprintf,w
  9763  0465  07BC               	addwf	sprintf@sp,f
  9764  0466                     l3113:	
  9765  0466  30FF               	movlw	255
  9766  0467  07B9               	addwf	sprintf@width,f
  9767  0468  1803               	skipnc
  9768  0469  0ABA               	incf	sprintf@width+1,f
  9769  046A  30FF               	movlw	255
  9770  046B  07BA               	addwf	sprintf@width+1,f
  9771  046C  0A39               	incf	sprintf@width,w
  9772  046D  1D03               	skipz
  9773  046E  2C5B               	goto	l3109
  9774  046F  0A3A               	incf	sprintf@width+1,w
  9775  0470  1903               	btfsc	3,2
  9776  0471  2AC9               	goto	l3337
  9777  0472  2C5B               	goto	l3109
  9778  0473                     l3115:	
  9779                           ;doprnt.c: 784: case 'c':
  9780                           
  9781                           ;doprnt.c: 774: continue;
  9782                           
  9783                           
  9784                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  9785  0473  0835               	movf	sprintf@ap,w
  9786  0474  0084               	movwf	4
  9787  0475  1383               	bcf	3,7	;select IRP bank0
  9788  0476  0800               	movf	0,w
  9789  0477  00A8               	movwf	??_sprintf
  9790  0478  0828               	movf	??_sprintf,w
  9791  0479  00BB               	movwf	sprintf@c
  9792  047A  3002               	movlw	2
  9793  047B  00A8               	movwf	??_sprintf
  9794  047C  0828               	movf	??_sprintf,w
  9795  047D  07B5               	addwf	sprintf@ap,f
  9796  047E                     l3119:	
  9797                           ;doprnt.c: 802: default:
  9798                           
  9799                           
  9800                           ;doprnt.c: 805: cp = (char *)&c;
  9801  047E  303B               	movlw	(low (sprintf@c| 0))& (0+255)
  9802  047F  00A8               	movwf	??_sprintf
  9803  0480  0828               	movf	??_sprintf,w
  9804  0481  00B2               	movwf	sprintf@cp
  9805                           
  9806                           ;doprnt.c: 806: len = 1;
  9807  0482  3001               	movlw	1
  9808  0483  00B3               	movwf	sprintf@len
  9809  0484  3000               	movlw	0
  9810  0485  00B4               	movwf	sprintf@len+1
  9811                           
  9812                           ;doprnt.c: 807: goto dostring;
  9813  0486  2BF9               	goto	l3077
  9814  0487                     l3123:	
  9815                           ;doprnt.c: 817: case 'u':
  9816                           
  9817                           
  9818                           ;doprnt.c: 818: flag |= 0xC0;
  9819  0487  30C0               	movlw	192
  9820  0488  04BD               	iorwf	sprintf@flag,f
  9821  0489  3000               	movlw	0
  9822  048A  04BE               	iorwf	sprintf@flag+1,f
  9823                           
  9824                           ;doprnt.c: 822: }
  9825                           
  9826                           ;doprnt.c: 819: break;
  9827  048B  2CB8               	goto	l3129
  9828  048C                     l3127:	
  9829  048C  1283               	bcf	3,5	;RP0=0, select bank0
  9830  048D  1303               	bcf	3,6	;RP1=0, select bank0
  9831  048E  0821               	movf	sprintf@f+1,w
  9832  048F  00A9               	movwf	??_sprintf+1
  9833  0490  0820               	movf	sprintf@f,w
  9834  0491  00A8               	movwf	??_sprintf
  9835  0492  0AA0               	incf	sprintf@f,f
  9836  0493  1903               	skipnz
  9837  0494  0AA1               	incf	sprintf@f+1,f
  9838  0495  0829               	movf	??_sprintf+1,w
  9839  0496  00FF               	movwf	127
  9840  0497  0828               	movf	??_sprintf,w
  9841  0498  0084               	movwf	4
  9842  0499  120A  158A  2000  120A  118A  	fcall	stringtab
  9843  049E  00BB               	movwf	sprintf@c
  9844                           
  9845                           ; Switch size 1, requested type "space"
  9846                           ; Number of cases is 8, Range of values is 0 to 120
  9847                           ; switch strategies available:
  9848                           ; Name         Instructions Cycles
  9849                           ; simple_byte           25    13 (average)
  9850                           ; jumptable            260     6 (fixed)
  9851                           ;	Chosen strategy is simple_byte
  9852  049F  3A00               	xorlw	0	; case 0
  9853  04A0  1903               	skipnz
  9854  04A1  2FBD               	goto	l3339
  9855  04A2  3A58               	xorlw	88	; case 88
  9856  04A3  1903               	skipnz
  9857  04A4  2BF6               	goto	l538
  9858  04A5  3A3B               	xorlw	59	; case 99
  9859  04A6  1903               	skipnz
  9860  04A7  2C73               	goto	l3115
  9861  04A8  3A07               	xorlw	7	; case 100
  9862  04A9  1903               	skipnz
  9863  04AA  2CB8               	goto	l3129
  9864  04AB  3A0D               	xorlw	13	; case 105
  9865  04AC  1903               	skipnz
  9866  04AD  2CB8               	goto	l3129
  9867  04AE  3A06               	xorlw	6	; case 111
  9868  04AF  1903               	skipnz
  9869  04B0  2BF4               	goto	l534
  9870  04B1  3A1A               	xorlw	26	; case 117
  9871  04B2  1903               	skipnz
  9872  04B3  2C87               	goto	l3123
  9873  04B4  3A0D               	xorlw	13	; case 120
  9874  04B5  1903               	skipnz
  9875  04B6  2BF7               	goto	l539
  9876  04B7  2C7E               	goto	l3119
  9877  04B8                     l3129:	
  9878                           
  9879                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  9880  04B8  30C0               	movlw	192
  9881  04B9  053D               	andwf	sprintf@flag,w
  9882  04BA  00A8               	movwf	??_sprintf
  9883  04BB  3000               	movlw	0
  9884  04BC  053E               	andwf	sprintf@flag+1,w
  9885  04BD  00A9               	movwf	??_sprintf+1
  9886  04BE  0828               	movf	??_sprintf,w
  9887  04BF  0429               	iorwf	??_sprintf+1,w
  9888  04C0  1D03               	btfss	3,2
  9889  04C1  2CDA               	goto	l3141
  9890                           
  9891                           ;doprnt.c: 1253: {
  9892                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9893  04C2  0835               	movf	sprintf@ap,w
  9894  04C3  0084               	movwf	4
  9895  04C4  1383               	bcf	3,7	;select IRP bank0
  9896  04C5  0800               	movf	0,w
  9897  04C6  00B6               	movwf	sprintf@val
  9898  04C7  0A84               	incf	4,f
  9899  04C8  0800               	movf	0,w
  9900  04C9  00B7               	movwf	sprintf@val+1
  9901  04CA  3002               	movlw	2
  9902  04CB  00A8               	movwf	??_sprintf
  9903  04CC  0828               	movf	??_sprintf,w
  9904  04CD  07B5               	addwf	sprintf@ap,f
  9905                           
  9906                           ;doprnt.c: 1261: if((int)val < 0) {
  9907  04CE  1FB7               	btfss	sprintf@val+1,7
  9908  04CF  2CE6               	goto	l3145
  9909                           
  9910                           ;doprnt.c: 1262: flag |= 0x03;
  9911  04D0  3003               	movlw	3
  9912  04D1  04BD               	iorwf	sprintf@flag,f
  9913  04D2  3000               	movlw	0
  9914  04D3  04BE               	iorwf	sprintf@flag+1,f
  9915                           
  9916                           ;doprnt.c: 1263: val = -val;
  9917  04D4  09B6               	comf	sprintf@val,f
  9918  04D5  09B7               	comf	sprintf@val+1,f
  9919  04D6  0AB6               	incf	sprintf@val,f
  9920  04D7  1903               	skipnz
  9921  04D8  0AB7               	incf	sprintf@val+1,f
  9922                           
  9923                           ;doprnt.c: 1264: }
  9924                           ;doprnt.c: 1266: }
  9925  04D9  2CE6               	goto	l3145
  9926  04DA                     l3141:	
  9927                           
  9928                           ;doprnt.c: 1268: else
  9929                           ;doprnt.c: 1273: {
  9930                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9931  04DA  0835               	movf	sprintf@ap,w
  9932  04DB  0084               	movwf	4
  9933  04DC  1383               	bcf	3,7	;select IRP bank0
  9934  04DD  0800               	movf	0,w
  9935  04DE  00B6               	movwf	sprintf@val
  9936  04DF  0A84               	incf	4,f
  9937  04E0  0800               	movf	0,w
  9938  04E1  00B7               	movwf	sprintf@val+1
  9939  04E2  3002               	movlw	2
  9940  04E3  00A8               	movwf	??_sprintf
  9941  04E4  0828               	movf	??_sprintf,w
  9942  04E5  07B5               	addwf	sprintf@ap,f
  9943  04E6                     l3145:	
  9944                           
  9945                           ;doprnt.c: 1287: }
  9946                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  9947  04E6  0838               	movf	sprintf@prec,w
  9948  04E7  1D03               	btfss	3,2
  9949  04E8  2D6A               	goto	l3183
  9950  04E9  0836               	movf	sprintf@val,w
  9951  04EA  0437               	iorwf	sprintf@val+1,w
  9952  04EB  1D03               	btfss	3,2
  9953  04EC  2D6A               	goto	l3183
  9954                           
  9955                           ;doprnt.c: 1291: prec++;
  9956  04ED  3001               	movlw	1
  9957  04EE  00A8               	movwf	??_sprintf
  9958  04EF  0828               	movf	??_sprintf,w
  9959  04F0  07B8               	addwf	sprintf@prec,f
  9960                           
  9961                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  9962  04F1  2D6A               	goto	l3183
  9963  04F2                     l564:	
  9964                           ;doprnt.c: 1299: case 0x00:
  9965                           
  9966                           
  9967                           ;doprnt.c: 1302: case 0xC0:
  9968                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9969  04F2  01BB               	clrf	sprintf@c
  9970  04F3  0ABB               	incf	sprintf@c,f
  9971  04F4                     L28:	
  9972  04F4  3005               	movlw	5
  9973  04F5  063B               	xorwf	sprintf@c,w
  9974  04F6  1903               	btfsc	3,2
  9975  04F7  2D79               	goto	l3185
  9976                           
  9977                           ;doprnt.c: 1306: if(val < dpowers[c])
  9978  04F8  083B               	movf	sprintf@c,w
  9979  04F9  00A8               	movwf	??_sprintf
  9980  04FA  0728               	addwf	??_sprintf,w
  9981  04FB  3E1E               	addlw	low (_dpowers| (0+32768))
  9982  04FC  0084               	movwf	4
  9983  04FD  3088               	movlw	high (_dpowers| (0+32768))
  9984  04FE  1803               	skipnc
  9985  04FF  3E01               	addlw	1
  9986  0500  00FF               	movwf	127
  9987  0501  120A  158A  2000  120A  118A  	fcall	stringtab
  9988  0506  00A9               	movwf	??_sprintf+1
  9989  0507  120A  158A  2000  120A  118A  	fcall	stringtab
  9990  050C  00AA               	movwf	??_sprintf+2
  9991  050D  082A               	movf	??_sprintf+2,w
  9992  050E  0237               	subwf	sprintf@val+1,w
  9993  050F  1D03               	skipz
  9994  0510  2D13               	goto	u3595
  9995  0511  0829               	movf	??_sprintf+1,w
  9996  0512  0236               	subwf	sprintf@val,w
  9997  0513                     u3595:	
  9998  0513  1C03               	btfss	3,0
  9999  0514  2D79               	goto	l3185
 10000                           
 10001                           ;doprnt.c: 1307: break;
 10002  0515  3001               	movlw	1
 10003  0516  00A8               	movwf	??_sprintf
 10004  0517  0828               	movf	??_sprintf,w
 10005  0518  07BB               	addwf	sprintf@c,f
 10006  0519  2CF4               	goto	L28
 10007  051A                     l569:	
 10008                           ;doprnt.c: 1314: case 0x80:
 10009                           
 10010                           ;doprnt.c: 1309: break;
 10011                           
 10012                           
 10013                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10014  051A  01BB               	clrf	sprintf@c
 10015  051B  0ABB               	incf	sprintf@c,f
 10016  051C                     L29:	
 10017  051C  3004               	movlw	4
 10018  051D  063B               	xorwf	sprintf@c,w
 10019  051E  1903               	btfsc	3,2
 10020  051F  2D79               	goto	l3185
 10021                           
 10022                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10023  0520  083B               	movf	sprintf@c,w
 10024  0521  00A8               	movwf	??_sprintf
 10025  0522  0728               	addwf	??_sprintf,w
 10026  0523  3E28               	addlw	low (_hexpowers| (0+32768))
 10027  0524  0084               	movwf	4
 10028  0525  3088               	movlw	high (_hexpowers| (0+32768))
 10029  0526  1803               	skipnc
 10030  0527  3E01               	addlw	1
 10031  0528  00FF               	movwf	127
 10032  0529  120A  158A  2000  120A  118A  	fcall	stringtab
 10033  052E  00A9               	movwf	??_sprintf+1
 10034  052F  120A  158A  2000  120A  118A  	fcall	stringtab
 10035  0534  00AA               	movwf	??_sprintf+2
 10036  0535  082A               	movf	??_sprintf+2,w
 10037  0536  0237               	subwf	sprintf@val+1,w
 10038  0537  1D03               	skipz
 10039  0538  2D3B               	goto	u3625
 10040  0539  0829               	movf	??_sprintf+1,w
 10041  053A  0236               	subwf	sprintf@val,w
 10042  053B                     u3625:	
 10043  053B  1C03               	btfss	3,0
 10044  053C  2D79               	goto	l3185
 10045                           
 10046                           ;doprnt.c: 1318: break;
 10047  053D  3001               	movlw	1
 10048  053E  00A8               	movwf	??_sprintf
 10049  053F  0828               	movf	??_sprintf,w
 10050  0540  07BB               	addwf	sprintf@c,f
 10051  0541  2D1C               	goto	L29
 10052  0542                     l573:	
 10053                           ;doprnt.c: 1326: case 0x40:
 10054                           
 10055                           ;doprnt.c: 1320: break;
 10056                           
 10057                           
 10058                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 10059  0542  01BB               	clrf	sprintf@c
 10060  0543  0ABB               	incf	sprintf@c,f
 10061  0544                     L30:	
 10062  0544  3006               	movlw	6
 10063  0545  063B               	xorwf	sprintf@c,w
 10064  0546  1903               	btfsc	3,2
 10065  0547  2D79               	goto	l3185
 10066                           
 10067                           ;doprnt.c: 1329: if(val < octpowers[c])
 10068  0548  083B               	movf	sprintf@c,w
 10069  0549  00A8               	movwf	??_sprintf
 10070  054A  0728               	addwf	??_sprintf,w
 10071  054B  3E12               	addlw	low (_octpowers| (0+32768))
 10072  054C  0084               	movwf	4
 10073  054D  3088               	movlw	high (_octpowers| (0+32768))
 10074  054E  1803               	skipnc
 10075  054F  3E01               	addlw	1
 10076  0550  00FF               	movwf	127
 10077  0551  120A  158A  2000  120A  118A  	fcall	stringtab
 10078  0556  00A9               	movwf	??_sprintf+1
 10079  0557  120A  158A  2000  120A  118A  	fcall	stringtab
 10080  055C  00AA               	movwf	??_sprintf+2
 10081  055D  082A               	movf	??_sprintf+2,w
 10082  055E  0237               	subwf	sprintf@val+1,w
 10083  055F  1D03               	skipz
 10084  0560  2D63               	goto	u3655
 10085  0561  0829               	movf	??_sprintf+1,w
 10086  0562  0236               	subwf	sprintf@val,w
 10087  0563                     u3655:	
 10088  0563  1C03               	btfss	3,0
 10089  0564  2D79               	goto	l3185
 10090                           
 10091                           ;doprnt.c: 1330: break;
 10092  0565  3001               	movlw	1
 10093  0566  00A8               	movwf	??_sprintf
 10094  0567  0828               	movf	??_sprintf,w
 10095  0568  07BB               	addwf	sprintf@c,f
 10096  0569  2D44               	goto	L30
 10097  056A                     l3183:	
 10098                           ;doprnt.c: 1336: }
 10099                           
 10100                           ;doprnt.c: 1332: break;
 10101                           
 10102  056A  083D               	movf	sprintf@flag,w
 10103  056B  39C0               	andlw	192
 10104                           
 10105                           ; Switch size 1, requested type "space"
 10106                           ; Number of cases is 4, Range of values is 0 to 192
 10107                           ; switch strategies available:
 10108                           ; Name         Instructions Cycles
 10109                           ; simple_byte           13     7 (average)
 10110                           ; jumptable            260     6 (fixed)
 10111                           ;	Chosen strategy is simple_byte
 10112  056C  3A00               	xorlw	0	; case 0
 10113  056D  1903               	skipnz
 10114  056E  2CF2               	goto	l564
 10115  056F  3A40               	xorlw	64	; case 64
 10116  0570  1903               	skipnz
 10117  0571  2D42               	goto	l573
 10118  0572  3AC0               	xorlw	192	; case 128
 10119  0573  1903               	skipnz
 10120  0574  2D1A               	goto	l569
 10121  0575  3A40               	xorlw	64	; case 192
 10122  0576  1903               	skipnz
 10123  0577  2CF2               	goto	l564
 10124  0578  2D79               	goto	l3185
 10125  0579                     l3185:	
 10126                           
 10127                           ;doprnt.c: 1339: if(c < prec)
 10128  0579  083B               	movf	sprintf@c,w
 10129  057A  3A80               	xorlw	128
 10130  057B  00A8               	movwf	??_sprintf
 10131  057C  0838               	movf	sprintf@prec,w
 10132  057D  3A80               	xorlw	128
 10133  057E  02A8               	subwf	??_sprintf,f
 10134  057F  1803               	skipnc
 10135  0580  2D86               	goto	l3189
 10136                           
 10137                           ;doprnt.c: 1340: c = prec;
 10138  0581  0838               	movf	sprintf@prec,w
 10139  0582  00A8               	movwf	??_sprintf
 10140  0583  0828               	movf	??_sprintf,w
 10141  0584  00BB               	movwf	sprintf@c
 10142  0585  2D92               	goto	l3193
 10143  0586                     l3189:	
 10144                           
 10145                           ;doprnt.c: 1341: else if(prec < c)
 10146  0586  0838               	movf	sprintf@prec,w
 10147  0587  3A80               	xorlw	128
 10148  0588  00A8               	movwf	??_sprintf
 10149  0589  083B               	movf	sprintf@c,w
 10150  058A  3A80               	xorlw	128
 10151  058B  02A8               	subwf	??_sprintf,f
 10152  058C  1803               	skipnc
 10153  058D  2D92               	goto	l3193
 10154                           
 10155                           ;doprnt.c: 1342: prec = c;
 10156  058E  083B               	movf	sprintf@c,w
 10157  058F  00A8               	movwf	??_sprintf
 10158  0590  0828               	movf	??_sprintf,w
 10159  0591  00B8               	movwf	sprintf@prec
 10160  0592                     l3193:	
 10161                           
 10162                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10163  0592  0839               	movf	sprintf@width,w
 10164  0593  043A               	iorwf	sprintf@width+1,w
 10165  0594  1903               	btfsc	3,2
 10166  0595  2DA6               	goto	l3199
 10167  0596  3003               	movlw	3
 10168  0597  053D               	andwf	sprintf@flag,w
 10169  0598  00A8               	movwf	??_sprintf
 10170  0599  3000               	movlw	0
 10171  059A  053E               	andwf	sprintf@flag+1,w
 10172  059B  00A9               	movwf	??_sprintf+1
 10173  059C  0828               	movf	??_sprintf,w
 10174  059D  0429               	iorwf	??_sprintf+1,w
 10175  059E  1903               	btfsc	3,2
 10176  059F  2DA6               	goto	l3199
 10177                           
 10178                           ;doprnt.c: 1346: width--;
 10179  05A0  30FF               	movlw	255
 10180  05A1  07B9               	addwf	sprintf@width,f
 10181  05A2  1803               	skipnc
 10182  05A3  0ABA               	incf	sprintf@width+1,f
 10183  05A4  30FF               	movlw	255
 10184  05A5  07BA               	addwf	sprintf@width+1,f
 10185  05A6                     l3199:	
 10186                           
 10187                           ;doprnt.c: 1348: if(flag & 0x4000) {
 10188  05A6  1F3E               	btfss	sprintf@flag+1,6
 10189  05A7  2DCB               	goto	l3207
 10190                           
 10191                           ;doprnt.c: 1349: if(width > prec)
 10192  05A8  0838               	movf	sprintf@prec,w
 10193  05A9  00A8               	movwf	??_sprintf
 10194  05AA  01A9               	clrf	??_sprintf+1
 10195  05AB  1BA8               	btfsc	??_sprintf,7
 10196  05AC  03A9               	decf	??_sprintf+1,f
 10197  05AD  0829               	movf	??_sprintf+1,w
 10198  05AE  3A80               	xorlw	128
 10199  05AF  00AA               	movwf	??_sprintf+2
 10200  05B0  083A               	movf	sprintf@width+1,w
 10201  05B1  3A80               	xorlw	128
 10202  05B2  022A               	subwf	??_sprintf+2,w
 10203  05B3  1D03               	skipz
 10204  05B4  2DB7               	goto	u3725
 10205  05B5  0839               	movf	sprintf@width,w
 10206  05B6  0228               	subwf	??_sprintf,w
 10207  05B7                     u3725:	
 10208  05B7  1803               	skipnc
 10209  05B8  2DC7               	goto	l3205
 10210                           
 10211                           ;doprnt.c: 1350: width -= prec;
 10212  05B9  1283               	bcf	3,5	;RP0=0, select bank0
 10213  05BA  1303               	bcf	3,6	;RP1=0, select bank0
 10214  05BB  0838               	movf	sprintf@prec,w
 10215  05BC  00A8               	movwf	??_sprintf
 10216  05BD  01A9               	clrf	??_sprintf+1
 10217  05BE  1BA8               	btfsc	??_sprintf,7
 10218  05BF  03A9               	decf	??_sprintf+1,f
 10219  05C0  0828               	movf	??_sprintf,w
 10220  05C1  02B9               	subwf	sprintf@width,f
 10221  05C2  0829               	movf	??_sprintf+1,w
 10222  05C3  1C03               	skipc
 10223  05C4  03BA               	decf	sprintf@width+1,f
 10224  05C5  02BA               	subwf	sprintf@width+1,f
 10225  05C6  2DCB               	goto	l3207
 10226  05C7                     l3205:	
 10227                           
 10228                           ;doprnt.c: 1351: else
 10229                           ;doprnt.c: 1352: width = 0;
 10230  05C7  1283               	bcf	3,5	;RP0=0, select bank0
 10231  05C8  1303               	bcf	3,6	;RP1=0, select bank0
 10232  05C9  01B9               	clrf	sprintf@width
 10233  05CA  01BA               	clrf	sprintf@width+1
 10234  05CB                     l3207:	
 10235                           
 10236                           ;doprnt.c: 1353: }
 10237                           ;doprnt.c: 1357: if((flag & (
 10238                           ;doprnt.c: 1359: 0x04|
 10239                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
 10240  05CB  30C4               	movlw	196
 10241  05CC  053D               	andwf	sprintf@flag,w
 10242  05CD  00A8               	movwf	??_sprintf
 10243  05CE  3008               	movlw	8
 10244  05CF  053E               	andwf	sprintf@flag+1,w
 10245  05D0  00A9               	movwf	??_sprintf+1
 10246  05D1  3040               	movlw	64
 10247  05D2  0628               	xorwf	??_sprintf,w
 10248  05D3  3008               	movlw	8
 10249  05D4  1903               	skipnz
 10250  05D5  0629               	xorwf	??_sprintf+1,w
 10251  05D6  1D03               	btfss	3,2
 10252  05D7  2DDE               	goto	l3213
 10253                           
 10254                           ;doprnt.c: 1362: if(width)
 10255  05D8  0839               	movf	sprintf@width,w
 10256  05D9  043A               	iorwf	sprintf@width+1,w
 10257  05DA  1903               	btfsc	3,2
 10258  05DB  2E03               	goto	l3221
 10259                           
 10260                           ;doprnt.c: 1363: width--;
 10261  05DC  30FF               	movlw	255
 10262  05DD  2DF9               	goto	L22
 10263  05DE                     l3213:	
 10264                           ;doprnt.c: 1364: } else
 10265                           
 10266                           
 10267                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10268  05DE  30C0               	movlw	192
 10269  05DF  053D               	andwf	sprintf@flag,w
 10270  05E0  00A8               	movwf	??_sprintf
 10271  05E1  3008               	movlw	8
 10272  05E2  053E               	andwf	sprintf@flag+1,w
 10273  05E3  00A9               	movwf	??_sprintf+1
 10274  05E4  3080               	movlw	128
 10275  05E5  0628               	xorwf	??_sprintf,w
 10276  05E6  3008               	movlw	8
 10277  05E7  1903               	skipnz
 10278  05E8  0629               	xorwf	??_sprintf+1,w
 10279  05E9  1D03               	btfss	3,2
 10280  05EA  2E03               	goto	l3221
 10281                           
 10282                           ;doprnt.c: 1372: if(width > 2)
 10283  05EB  083A               	movf	sprintf@width+1,w
 10284  05EC  3A80               	xorlw	128
 10285  05ED  00FF               	movwf	127
 10286  05EE  3080               	movlw	128
 10287  05EF  027F               	subwf	127,w
 10288  05F0  1D03               	skipz
 10289  05F1  2DF4               	goto	u3765
 10290  05F2  3003               	movlw	3
 10291  05F3  0239               	subwf	sprintf@width,w
 10292  05F4                     u3765:	
 10293  05F4  1C03               	skipc
 10294  05F5  2DFF               	goto	l3219
 10295                           
 10296                           ;doprnt.c: 1373: width -= 2;
 10297  05F6  30FE               	movlw	254
 10298  05F7  1283               	bcf	3,5	;RP0=0, select bank0
 10299  05F8  1303               	bcf	3,6	;RP1=0, select bank0
 10300  05F9                     L22:	
 10301  05F9  07B9               	addwf	sprintf@width,f
 10302  05FA  1803               	skipnc
 10303  05FB  0ABA               	incf	sprintf@width+1,f
 10304  05FC  30FF               	movlw	255
 10305  05FD  07BA               	addwf	sprintf@width+1,f
 10306  05FE  2E03               	goto	l3221
 10307  05FF                     l3219:	
 10308                           
 10309                           ;doprnt.c: 1374: else
 10310                           ;doprnt.c: 1375: width = 0;
 10311  05FF  1283               	bcf	3,5	;RP0=0, select bank0
 10312  0600  1303               	bcf	3,6	;RP1=0, select bank0
 10313  0601  01B9               	clrf	sprintf@width
 10314  0602  01BA               	clrf	sprintf@width+1
 10315  0603                     l3221:	
 10316                           
 10317                           ;doprnt.c: 1376: }
 10318                           ;doprnt.c: 1381: if(width > c)
 10319  0603  083B               	movf	sprintf@c,w
 10320  0604  00A8               	movwf	??_sprintf
 10321  0605  01A9               	clrf	??_sprintf+1
 10322  0606  1BA8               	btfsc	??_sprintf,7
 10323  0607  03A9               	decf	??_sprintf+1,f
 10324  0608  0829               	movf	??_sprintf+1,w
 10325  0609  3A80               	xorlw	128
 10326  060A  00AA               	movwf	??_sprintf+2
 10327  060B  083A               	movf	sprintf@width+1,w
 10328  060C  3A80               	xorlw	128
 10329  060D  022A               	subwf	??_sprintf+2,w
 10330  060E  1D03               	skipz
 10331  060F  2E12               	goto	u3775
 10332  0610  0839               	movf	sprintf@width,w
 10333  0611  0228               	subwf	??_sprintf,w
 10334  0612                     u3775:	
 10335  0612  1803               	skipnc
 10336  0613  2E22               	goto	l3225
 10337                           
 10338                           ;doprnt.c: 1382: width -= c;
 10339  0614  1283               	bcf	3,5	;RP0=0, select bank0
 10340  0615  1303               	bcf	3,6	;RP1=0, select bank0
 10341  0616  083B               	movf	sprintf@c,w
 10342  0617  00A8               	movwf	??_sprintf
 10343  0618  01A9               	clrf	??_sprintf+1
 10344  0619  1BA8               	btfsc	??_sprintf,7
 10345  061A  03A9               	decf	??_sprintf+1,f
 10346  061B  0828               	movf	??_sprintf,w
 10347  061C  02B9               	subwf	sprintf@width,f
 10348  061D  0829               	movf	??_sprintf+1,w
 10349  061E  1C03               	skipc
 10350  061F  03BA               	decf	sprintf@width+1,f
 10351  0620  02BA               	subwf	sprintf@width+1,f
 10352  0621  2E26               	goto	l3227
 10353  0622                     l3225:	
 10354                           
 10355                           ;doprnt.c: 1383: else
 10356                           ;doprnt.c: 1384: width = 0;
 10357  0622  1283               	bcf	3,5	;RP0=0, select bank0
 10358  0623  1303               	bcf	3,6	;RP1=0, select bank0
 10359  0624  01B9               	clrf	sprintf@width
 10360  0625  01BA               	clrf	sprintf@width+1
 10361  0626                     l3227:	
 10362                           
 10363                           ;doprnt.c: 1387: if(flag & 0x04) {
 10364  0626  1D3D               	btfss	sprintf@flag,2
 10365  0627  2E7D               	goto	l3263
 10366                           
 10367                           ;doprnt.c: 1392: if(flag & 0x03)
 10368  0628  3003               	movlw	3
 10369  0629  053D               	andwf	sprintf@flag,w
 10370  062A  00A8               	movwf	??_sprintf
 10371  062B  3000               	movlw	0
 10372  062C  053E               	andwf	sprintf@flag+1,w
 10373  062D  00A9               	movwf	??_sprintf+1
 10374  062E  0828               	movf	??_sprintf,w
 10375  062F  0429               	iorwf	??_sprintf+1,w
 10376  0630  1903               	btfsc	3,2
 10377  0631  2E34               	goto	l593
 10378                           
 10379                           ;doprnt.c: 1393: ((*sp++ = ('-')));
 10380  0632  302D               	movlw	45
 10381  0633  2E37               	goto	L35
 10382  0634                     l593:	
 10383                           
 10384                           ;doprnt.c: 1396: else
 10385                           ;doprnt.c: 1399: if(flag & 0x01)
 10386  0634  1C3D               	btfss	sprintf@flag,0
 10387  0635  2E3D               	goto	l3239
 10388                           
 10389                           ;doprnt.c: 1400: ((*sp++ = (' ')));
 10390  0636  3020               	movlw	32
 10391  0637                     L35:	
 10392  0637  00A8               	movwf	??_sprintf
 10393  0638  083C               	movf	sprintf@sp,w
 10394  0639  0084               	movwf	4
 10395  063A  0828               	movf	??_sprintf,w
 10396  063B  1783               	bsf	3,7	;select IRP bank2
 10397  063C  2E62               	goto	L31
 10398  063D                     l3239:	
 10399                           
 10400                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10401  063D  30C0               	movlw	192
 10402  063E  053D               	andwf	sprintf@flag,w
 10403  063F  00A8               	movwf	??_sprintf
 10404  0640  3008               	movlw	8
 10405  0641  053E               	andwf	sprintf@flag+1,w
 10406  0642  00A9               	movwf	??_sprintf+1
 10407  0643  3080               	movlw	128
 10408  0644  0628               	xorwf	??_sprintf,w
 10409  0645  3008               	movlw	8
 10410  0646  1903               	skipnz
 10411  0647  0629               	xorwf	??_sprintf+1,w
 10412  0648  1D03               	btfss	3,2
 10413  0649  2E67               	goto	l3255
 10414                           
 10415                           ;doprnt.c: 1404: ((*sp++ = ('0')));
 10416  064A  3030               	movlw	48
 10417  064B  00A8               	movwf	??_sprintf
 10418  064C  083C               	movf	sprintf@sp,w
 10419  064D  0084               	movwf	4
 10420  064E  0828               	movf	??_sprintf,w
 10421  064F  1783               	bsf	3,7	;select IRP bank2
 10422  0650  0080               	movwf	0
 10423  0651  3001               	movlw	1
 10424  0652  00A8               	movwf	??_sprintf
 10425  0653  0828               	movf	??_sprintf,w
 10426  0654  07BC               	addwf	sprintf@sp,f
 10427                           
 10428                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 10429  0655  1ABD               	btfsc	sprintf@flag,5
 10430  0656  2E59               	goto	l3249
 10431  0657  3078               	movlw	120
 10432  0658  2E5A               	goto	L23
 10433  0659                     l3249:	
 10434  0659  3058               	movlw	88
 10435  065A                     L23:	
 10436  065A  00AB               	movwf	_sprintf$662
 10437  065B  3000               	movlw	0
 10438  065C  00AC               	movwf	_sprintf$662+1
 10439  065D  082B               	movf	_sprintf$662,w
 10440  065E  00A8               	movwf	??_sprintf
 10441  065F  083C               	movf	sprintf@sp,w
 10442  0660  0084               	movwf	4
 10443  0661  0828               	movf	??_sprintf,w
 10444  0662                     L31:	
 10445  0662  0080               	movwf	0
 10446  0663  3001               	movlw	1
 10447  0664  00A8               	movwf	??_sprintf
 10448  0665  0828               	movf	??_sprintf,w
 10449  0666  07BC               	addwf	sprintf@sp,f
 10450  0667                     l3255:	
 10451                           
 10452                           ;doprnt.c: 1412: }
 10453                           ;doprnt.c: 1415: if(width)
 10454  0667  0839               	movf	sprintf@width,w
 10455  0668  043A               	iorwf	sprintf@width+1,w
 10456  0669  1903               	btfsc	3,2
 10457  066A  2F81               	goto	l3327
 10458                           
 10459                           ;doprnt.c: 1417: ((*sp++ = ('0')));
 10460                           
 10461                           ;doprnt.c: 1416: do
 10462  066B  3030               	movlw	48
 10463  066C  00A8               	movwf	??_sprintf
 10464  066D  083C               	movf	sprintf@sp,w
 10465  066E  0084               	movwf	4
 10466  066F  0828               	movf	??_sprintf,w
 10467  0670  1783               	bsf	3,7	;select IRP bank2
 10468  0671  0080               	movwf	0
 10469  0672  3001               	movlw	1
 10470  0673  00A8               	movwf	??_sprintf
 10471  0674  0828               	movf	??_sprintf,w
 10472  0675  07BC               	addwf	sprintf@sp,f
 10473                           
 10474                           ;doprnt.c: 1418: while(--width);
 10475  0676  30FF               	movlw	255
 10476  0677  07B9               	addwf	sprintf@width,f
 10477  0678  1803               	skipnc
 10478  0679  0ABA               	incf	sprintf@width+1,f
 10479  067A  30FF               	movlw	255
 10480  067B  07BA               	addwf	sprintf@width+1,f
 10481  067C  2E67               	goto	l3255
 10482  067D                     l3263:	
 10483                           ;doprnt.c: 1420: } else
 10484                           
 10485                           
 10486                           ;doprnt.c: 1422: {
 10487                           ;doprnt.c: 1424: if(width
 10488                           ;doprnt.c: 1426: && !(flag & 0x08)
 10489                           ;doprnt.c: 1428: )
 10490  067D  0839               	movf	sprintf@width,w
 10491  067E  043A               	iorwf	sprintf@width+1,w
 10492  067F  1D03               	btfss	3,2
 10493  0680  19BD               	btfsc	sprintf@flag,3
 10494  0681  2E97               	goto	l3273
 10495  0682                     l3267:	
 10496                           ;doprnt.c: 1429: do
 10497                           
 10498                           
 10499                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 10500  0682  3020               	movlw	32
 10501  0683  00A8               	movwf	??_sprintf
 10502  0684  083C               	movf	sprintf@sp,w
 10503  0685  0084               	movwf	4
 10504  0686  0828               	movf	??_sprintf,w
 10505  0687  1783               	bsf	3,7	;select IRP bank2
 10506  0688  0080               	movwf	0
 10507  0689  3001               	movlw	1
 10508  068A  00A8               	movwf	??_sprintf
 10509  068B  0828               	movf	??_sprintf,w
 10510  068C  07BC               	addwf	sprintf@sp,f
 10511                           
 10512                           ;doprnt.c: 1431: while(--width);
 10513  068D  30FF               	movlw	255
 10514  068E  07B9               	addwf	sprintf@width,f
 10515  068F  1803               	skipnc
 10516  0690  0ABA               	incf	sprintf@width+1,f
 10517  0691  30FF               	movlw	255
 10518  0692  07BA               	addwf	sprintf@width+1,f
 10519  0693  0839               	movf	sprintf@width,w
 10520  0694  043A               	iorwf	sprintf@width+1,w
 10521  0695  1D03               	btfss	3,2
 10522  0696  2E82               	goto	l3267
 10523  0697                     l3273:	
 10524                           
 10525                           ;doprnt.c: 1438: if(flag & 0x03)
 10526  0697  3003               	movlw	3
 10527  0698  053D               	andwf	sprintf@flag,w
 10528  0699  00A8               	movwf	??_sprintf
 10529  069A  3000               	movlw	0
 10530  069B  053E               	andwf	sprintf@flag+1,w
 10531  069C  00A9               	movwf	??_sprintf+1
 10532  069D  0828               	movf	??_sprintf,w
 10533  069E  0429               	iorwf	??_sprintf+1,w
 10534  069F  1903               	btfsc	3,2
 10535  06A0  2EA3               	goto	l609
 10536                           
 10537                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10538  06A1  302D               	movlw	45
 10539  06A2  2EA6               	goto	L32
 10540  06A3                     l609:	
 10541                           
 10542                           ;doprnt.c: 1443: else if(flag & 0x01)
 10543  06A3  1C3D               	btfss	sprintf@flag,0
 10544  06A4  2EB0               	goto	l3283
 10545                           
 10546                           ;doprnt.c: 1444: ((*sp++ = (' ')));
 10547  06A5  3020               	movlw	32
 10548  06A6                     L32:	
 10549  06A6  00A8               	movwf	??_sprintf
 10550  06A7  083C               	movf	sprintf@sp,w
 10551  06A8  0084               	movwf	4
 10552  06A9  0828               	movf	??_sprintf,w
 10553  06AA  1783               	bsf	3,7	;select IRP bank2
 10554  06AB  0080               	movwf	0
 10555  06AC  3001               	movlw	1
 10556  06AD  00A8               	movwf	??_sprintf
 10557  06AE  0828               	movf	??_sprintf,w
 10558  06AF  07BC               	addwf	sprintf@sp,f
 10559  06B0                     l3283:	
 10560                           
 10561                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 10562  06B0  30C0               	movlw	192
 10563  06B1  053D               	andwf	sprintf@flag,w
 10564  06B2  00A8               	movwf	??_sprintf
 10565  06B3  3008               	movlw	8
 10566  06B4  053E               	andwf	sprintf@flag+1,w
 10567  06B5  00A9               	movwf	??_sprintf+1
 10568  06B6  3040               	movlw	64
 10569  06B7  0628               	xorwf	??_sprintf,w
 10570  06B8  3008               	movlw	8
 10571  06B9  1903               	skipnz
 10572  06BA  0629               	xorwf	??_sprintf+1,w
 10573  06BB  1D03               	btfss	3,2
 10574  06BC  2EBF               	goto	l3289
 10575                           
 10576                           ;doprnt.c: 1449: ((*sp++ = ('0')));
 10577  06BD  3030               	movlw	48
 10578  06BE  2F77               	goto	L36
 10579  06BF                     l3289:	
 10580                           
 10581                           ;doprnt.c: 1450: else
 10582                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10583  06BF  30C0               	movlw	192
 10584  06C0  053D               	andwf	sprintf@flag,w
 10585  06C1  00A8               	movwf	??_sprintf
 10586  06C2  3008               	movlw	8
 10587  06C3  053E               	andwf	sprintf@flag+1,w
 10588  06C4  00A9               	movwf	??_sprintf+1
 10589  06C5  3080               	movlw	128
 10590  06C6  0628               	xorwf	??_sprintf,w
 10591  06C7  3008               	movlw	8
 10592  06C8  1903               	skipnz
 10593  06C9  0629               	xorwf	??_sprintf+1,w
 10594  06CA  1D03               	btfss	3,2
 10595  06CB  2F81               	goto	l3327
 10596                           
 10597                           ;doprnt.c: 1458: ((*sp++ = ('0')));
 10598  06CC  3030               	movlw	48
 10599  06CD  00A8               	movwf	??_sprintf
 10600  06CE  083C               	movf	sprintf@sp,w
 10601  06CF  0084               	movwf	4
 10602  06D0  0828               	movf	??_sprintf,w
 10603  06D1  1783               	bsf	3,7	;select IRP bank2
 10604  06D2  0080               	movwf	0
 10605  06D3  3001               	movlw	1
 10606  06D4  00A8               	movwf	??_sprintf
 10607  06D5  0828               	movf	??_sprintf,w
 10608  06D6  07BC               	addwf	sprintf@sp,f
 10609                           
 10610                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 10611  06D7  1ABD               	btfsc	sprintf@flag,5
 10612  06D8  2EDB               	goto	l3299
 10613  06D9  3078               	movlw	120
 10614  06DA  2EDC               	goto	L24
 10615  06DB                     l3299:	
 10616  06DB  3058               	movlw	88
 10617  06DC                     L24:	
 10618  06DC  00AD               	movwf	_sprintf$663
 10619  06DD  3000               	movlw	0
 10620  06DE  00AE               	movwf	_sprintf$663+1
 10621  06DF  082D               	movf	_sprintf$663,w
 10622  06E0  00A8               	movwf	??_sprintf
 10623  06E1  083C               	movf	sprintf@sp,w
 10624  06E2  0084               	movwf	4
 10625  06E3  0828               	movf	??_sprintf,w
 10626  06E4  2F7C               	goto	L33
 10627  06E5                     l3305:	
 10628                           ;doprnt.c: 1478: {
 10629                           ;doprnt.c: 1483: case 0x00:
 10630                           
 10631                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
 10632                           
 10633                           ;doprnt.c: 1466: }
 10634                           ;doprnt.c: 1469: }
 10635                           ;doprnt.c: 1474: while(prec--) {
 10636                           
 10637                           
 10638                           ;doprnt.c: 1486: case 0xC0:
 10639                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10640  06E5  300A               	movlw	10
 10641  06E6  00F8               	movwf	___lwmod@divisor
 10642  06E7  3000               	movlw	0
 10643  06E8  00F9               	movwf	___lwmod@divisor+1
 10644  06E9  0838               	movf	sprintf@prec,w
 10645  06EA  00A8               	movwf	??_sprintf
 10646  06EB  0728               	addwf	??_sprintf,w
 10647  06EC  3E1E               	addlw	low (_dpowers| (0+32768))
 10648  06ED  0084               	movwf	4
 10649  06EE  3088               	movlw	high (_dpowers| (0+32768))
 10650  06EF  1803               	skipnc
 10651  06F0  3E01               	addlw	1
 10652  06F1  00FF               	movwf	127
 10653  06F2  120A  158A  2000  120A  118A  	fcall	stringtab
 10654  06F7  00F0               	movwf	___lwdiv@divisor
 10655  06F8  120A  158A  2000  120A  118A  	fcall	stringtab
 10656  06FD  00F1               	movwf	___lwdiv@divisor+1
 10657  06FE  0837               	movf	sprintf@val+1,w
 10658  06FF  00F3               	movwf	___lwdiv@dividend+1
 10659  0700  0836               	movf	sprintf@val,w
 10660  0701  00F2               	movwf	___lwdiv@dividend
 10661  0702  160A  158A  2418  120A  118A  	fcall	___lwdiv
 10662  0707  0871               	movf	?___lwdiv+1,w
 10663  0708  00FB               	movwf	___lwmod@dividend+1
 10664  0709  0870               	movf	?___lwdiv,w
 10665  070A  00FA               	movwf	___lwmod@dividend
 10666  070B  160A  158A  23B0  120A  118A  	fcall	___lwmod
 10667  0710  0878               	movf	?___lwmod,w
 10668  0711  2F70               	goto	L34
 10669  0712                     l3307:	
 10670                           ;doprnt.c: 1497: case 0x80:
 10671                           
 10672                           ;doprnt.c: 1491: break;
 10673                           
 10674                           
 10675                           ;doprnt.c: 1499: {
 10676                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10677  0712  0838               	movf	sprintf@prec,w
 10678  0713  00A8               	movwf	??_sprintf
 10679  0714  0728               	addwf	??_sprintf,w
 10680  0715  3E28               	addlw	low (_hexpowers| (0+32768))
 10681  0716  0084               	movwf	4
 10682  0717  3088               	movlw	high (_hexpowers| (0+32768))
 10683  0718  1803               	skipnc
 10684  0719  3E01               	addlw	1
 10685  071A  00FF               	movwf	127
 10686  071B  120A  158A  2000  120A  118A  	fcall	stringtab
 10687  0720  00F0               	movwf	___lwdiv@divisor
 10688  0721  120A  158A  2000  120A  118A  	fcall	stringtab
 10689  0726  00F1               	movwf	___lwdiv@divisor+1
 10690  0727  0837               	movf	sprintf@val+1,w
 10691  0728  00F3               	movwf	___lwdiv@dividend+1
 10692  0729  0836               	movf	sprintf@val,w
 10693  072A  00F2               	movwf	___lwdiv@dividend
 10694  072B  160A  158A  2418  120A  118A  	fcall	___lwdiv
 10695  0730  0870               	movf	?___lwdiv,w
 10696  0731  390F               	andlw	15
 10697  0732  1283               	bcf	3,5	;RP0=0, select bank0
 10698  0733  1303               	bcf	3,6	;RP1=0, select bank0
 10699  0734  00A9               	movwf	??_sprintf+1
 10700  0735  0829               	movf	??_sprintf+1,w
 10701  0736  00B1               	movwf	sprintf@idx
 10702                           
 10703                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 10704  0737  1ABD               	btfsc	sprintf@flag,5
 10705  0738  2F3D               	goto	l3313
 10706  0739  30E0               	movlw	low (STR_65| (0+32768))
 10707  073A  00AF               	movwf	_sprintf$669
 10708  073B  308D               	movlw	high (STR_65| (0+32768))
 10709  073C  2F40               	goto	L26
 10710  073D                     l3313:	
 10711  073D  30CF               	movlw	low (STR_64| (0+32768))
 10712  073E  00AF               	movwf	_sprintf$669
 10713  073F  308D               	movlw	high (STR_64| (0+32768))
 10714  0740                     L26:	
 10715  0740  00B0               	movwf	_sprintf$669+1
 10716  0741  0831               	movf	sprintf@idx,w
 10717  0742  072F               	addwf	_sprintf$669,w
 10718  0743  0084               	movwf	4
 10719  0744  0830               	movf	_sprintf$669+1,w
 10720  0745  1803               	skipnc
 10721  0746  0A30               	incf	_sprintf$669+1,w
 10722  0747  00FF               	movwf	127
 10723  0748  120A  158A  2000  120A  118A  	fcall	stringtab
 10724  074D  00A8               	movwf	??_sprintf
 10725  074E  0828               	movf	??_sprintf,w
 10726  074F  2F75               	goto	L27
 10727  0750                     l3317:	
 10728                           ;doprnt.c: 1516: case 0x40:
 10729                           
 10730                           ;doprnt.c: 1508: }
 10731                           ;doprnt.c: 1510: break;
 10732                           
 10733                           
 10734                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
 10735  0750  0838               	movf	sprintf@prec,w
 10736  0751  00A8               	movwf	??_sprintf
 10737  0752  0728               	addwf	??_sprintf,w
 10738  0753  3E12               	addlw	low (_octpowers| (0+32768))
 10739  0754  0084               	movwf	4
 10740  0755  3088               	movlw	high (_octpowers| (0+32768))
 10741  0756  1803               	skipnc
 10742  0757  3E01               	addlw	1
 10743  0758  00FF               	movwf	127
 10744  0759  120A  158A  2000  120A  118A  	fcall	stringtab
 10745  075E  00F0               	movwf	___lwdiv@divisor
 10746  075F  120A  158A  2000  120A  118A  	fcall	stringtab
 10747  0764  00F1               	movwf	___lwdiv@divisor+1
 10748  0765  0837               	movf	sprintf@val+1,w
 10749  0766  00F3               	movwf	___lwdiv@dividend+1
 10750  0767  0836               	movf	sprintf@val,w
 10751  0768  00F2               	movwf	___lwdiv@dividend
 10752  0769  160A  158A  2418  120A  118A  	fcall	___lwdiv
 10753  076E  0870               	movf	?___lwdiv,w
 10754  076F  3907               	andlw	7
 10755  0770                     L34:	
 10756  0770  3E30               	addlw	48
 10757  0771  1283               	bcf	3,5	;RP0=0, select bank0
 10758  0772  1303               	bcf	3,6	;RP1=0, select bank0
 10759  0773  00A9               	movwf	??_sprintf+1
 10760  0774  0829               	movf	??_sprintf+1,w
 10761  0775                     L27:	
 10762  0775  00BB               	movwf	sprintf@c
 10763  0776                     l3323:	
 10764                           ;doprnt.c: 1523: }
 10765                           
 10766                           ;doprnt.c: 1520: break;
 10767                           
 10768                           
 10769                           ;doprnt.c: 1524: ((*sp++ = (c)));
 10770  0776  083B               	movf	sprintf@c,w
 10771  0777                     L36:	
 10772  0777  00A8               	movwf	??_sprintf
 10773  0778  083C               	movf	sprintf@sp,w
 10774  0779  0084               	movwf	4
 10775  077A  0828               	movf	??_sprintf,w
 10776  077B  1783               	bsf	3,7	;select IRP bank2
 10777  077C                     L33:	
 10778  077C  0080               	movwf	0
 10779  077D  3001               	movlw	1
 10780  077E  00A8               	movwf	??_sprintf
 10781  077F  0828               	movf	??_sprintf,w
 10782  0780  07BC               	addwf	sprintf@sp,f
 10783  0781                     l3327:	
 10784  0781  30FF               	movlw	255
 10785  0782  00A8               	movwf	??_sprintf
 10786  0783  0828               	movf	??_sprintf,w
 10787  0784  07B8               	addwf	sprintf@prec,f
 10788  0785  0A38               	incf	sprintf@prec,w
 10789  0786  1903               	btfsc	3,2
 10790  0787  2F98               	goto	l631
 10791  0788  083D               	movf	sprintf@flag,w
 10792  0789  39C0               	andlw	192
 10793                           
 10794                           ; Switch size 1, requested type "space"
 10795                           ; Number of cases is 4, Range of values is 0 to 192
 10796                           ; switch strategies available:
 10797                           ; Name         Instructions Cycles
 10798                           ; simple_byte           13     7 (average)
 10799                           ; jumptable            260     6 (fixed)
 10800                           ;	Chosen strategy is simple_byte
 10801  078A  3A00               	xorlw	0	; case 0
 10802  078B  1903               	skipnz
 10803  078C  2EE5               	goto	l3305
 10804  078D  3A40               	xorlw	64	; case 64
 10805  078E  1903               	skipnz
 10806  078F  2F50               	goto	l3317
 10807  0790  3AC0               	xorlw	192	; case 128
 10808  0791  1903               	skipnz
 10809  0792  2F12               	goto	l3307
 10810  0793  3A40               	xorlw	64	; case 192
 10811  0794  1903               	skipnz
 10812  0795  2EE5               	goto	l3305
 10813  0796  2F76               	goto	l3323
 10814  0797  2F76               	goto	l3323
 10815  0798                     l631:	
 10816                           
 10817                           ;doprnt.c: 1525: }
 10818                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
 10819  0798  1DBD               	btfss	sprintf@flag,3
 10820  0799  2AC9               	goto	l3337
 10821  079A  083A               	movf	sprintf@width+1,w
 10822  079B  3A80               	xorlw	128
 10823  079C  00FF               	movwf	127
 10824  079D  3080               	movlw	128
 10825  079E  027F               	subwf	127,w
 10826  079F  1D03               	skipz
 10827  07A0  2FA3               	goto	u3965
 10828  07A1  3001               	movlw	1
 10829  07A2  0239               	subwf	sprintf@width,w
 10830  07A3                     u3965:	
 10831  07A3  1C03               	skipc
 10832  07A4  2AC9               	goto	l3337
 10833  07A5                     l3331:	
 10834                           ;doprnt.c: 1529: do
 10835                           
 10836                           
 10837                           ;doprnt.c: 1530: ((*sp++ = (' ')));
 10838  07A5  3020               	movlw	32
 10839  07A6  1283               	bcf	3,5	;RP0=0, select bank0
 10840  07A7  1303               	bcf	3,6	;RP1=0, select bank0
 10841  07A8  00A8               	movwf	??_sprintf
 10842  07A9  083C               	movf	sprintf@sp,w
 10843  07AA  0084               	movwf	4
 10844  07AB  0828               	movf	??_sprintf,w
 10845  07AC  1783               	bsf	3,7	;select IRP bank2
 10846  07AD  0080               	movwf	0
 10847  07AE  3001               	movlw	1
 10848  07AF  00A8               	movwf	??_sprintf
 10849  07B0  0828               	movf	??_sprintf,w
 10850  07B1  07BC               	addwf	sprintf@sp,f
 10851                           
 10852                           ;doprnt.c: 1531: while(--width);
 10853  07B2  30FF               	movlw	255
 10854  07B3  07B9               	addwf	sprintf@width,f
 10855  07B4  1803               	skipnc
 10856  07B5  0ABA               	incf	sprintf@width+1,f
 10857  07B6  30FF               	movlw	255
 10858  07B7  07BA               	addwf	sprintf@width+1,f
 10859  07B8  0839               	movf	sprintf@width,w
 10860  07B9  043A               	iorwf	sprintf@width+1,w
 10861  07BA  1903               	btfsc	3,2
 10862  07BB  2AC9               	goto	l3337
 10863  07BC  2FA5               	goto	l3331
 10864  07BD                     l3339:	
 10865                           ;doprnt.c: 1533: }
 10866                           ;doprnt.c: 1535: alldone:
 10867                           
 10868                           
 10869                           ;doprnt.c: 1538: *sp = 0;
 10870  07BD  083C               	movf	sprintf@sp,w
 10871  07BE  0084               	movwf	4
 10872  07BF  1783               	bsf	3,7	;select IRP bank2
 10873  07C0  0180               	clrf	0
 10874  07C1  0008               	return
 10875  07C2                     __end_of_sprintf:	
 10876                           ;doprnt.c: 1540: return 0;
 10877                           ;	Return value of _sprintf is never used
 10878                           
 10879                           
 10880                           	psect	text31
 10881  19B8                     __ptext31:	
 10882 ;; *************** function _isdigit *****************
 10883 ;; Defined at:
 10884 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
 10885 ;; Parameters:    Size  Location     Type
 10886 ;;  c               1    wreg     unsigned char 
 10887 ;; Auto vars:     Size  Location     Type
 10888 ;;  c               1    1[COMMON] unsigned char 
 10889 ;; Return value:  Size  Location     Type
 10890 ;;		None               void
 10891 ;; Registers used:
 10892 ;;		wreg, status,2, status,0
 10893 ;; Tracked objects:
 10894 ;;		On entry : 0/0
 10895 ;;		On exit  : 0/0
 10896 ;;		Unchanged: 0/0
 10897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10898 ;;      Params:         0       0       0       0       0
 10899 ;;      Locals:         2       0       0       0       0
 10900 ;;      Temps:          0       0       0       0       0
 10901 ;;      Totals:         2       0       0       0       0
 10902 ;;Total ram usage:        2 bytes
 10903 ;; Hardware stack levels used:    1
 10904 ;; This function calls:
 10905 ;;		Nothing
 10906 ;; This function is called by:
 10907 ;;		_sprintf
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           
 10912                           ;psect for function _isdigit
 10913  19B8                     _isdigit:	
 10914                           
 10915                           ;incstack = 0
 10916                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 10917                           ;isdigit@c stored from wreg
 10918  19B8  00F1               	movwf	isdigit@c
 10919  19B9  01F0               	clrf	_isdigit$855
 10920  19BA  303A               	movlw	58
 10921  19BB  0271               	subwf	isdigit@c,w
 10922  19BC  1803               	skipnc
 10923  19BD  29C4               	goto	l2937
 10924  19BE  3030               	movlw	48
 10925  19BF  0271               	subwf	isdigit@c,w
 10926  19C0  1C03               	skipc
 10927  19C1  29C4               	goto	l2937
 10928  19C2  01F0               	clrf	_isdigit$855
 10929  19C3  0AF0               	incf	_isdigit$855,f
 10930  19C4                     l2937:	
 10931  19C4  0C70               	rrf	_isdigit$855,w
 10932  19C5  0008               	return
 10933  19C6                     __end_of_isdigit:	
 10934                           
 10935                           	psect	text32
 10936  1A52                     __ptext32:	
 10937 ;; *************** function ___wmul *****************
 10938 ;; Defined at:
 10939 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 10940 ;; Parameters:    Size  Location     Type
 10941 ;;  multiplier      2    0[COMMON] unsigned int 
 10942 ;;  multiplicand    2    2[COMMON] unsigned int 
 10943 ;; Auto vars:     Size  Location     Type
 10944 ;;  product         2    4[COMMON] unsigned int 
 10945 ;; Return value:  Size  Location     Type
 10946 ;;                  2    0[COMMON] unsigned int 
 10947 ;; Registers used:
 10948 ;;		wreg, status,2, status,0
 10949 ;; Tracked objects:
 10950 ;;		On entry : 0/0
 10951 ;;		On exit  : 0/0
 10952 ;;		Unchanged: 0/0
 10953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10954 ;;      Params:         4       0       0       0       0
 10955 ;;      Locals:         2       0       0       0       0
 10956 ;;      Temps:          0       0       0       0       0
 10957 ;;      Totals:         6       0       0       0       0
 10958 ;;Total ram usage:        6 bytes
 10959 ;; Hardware stack levels used:    1
 10960 ;; This function calls:
 10961 ;;		Nothing
 10962 ;; This function is called by:
 10963 ;;		_sprintf
 10964 ;; This function uses a non-reentrant model
 10965 ;;
 10966                           
 10967                           
 10968                           ;psect for function ___wmul
 10969  1A52                     ___wmul:	
 10970                           
 10971                           ;incstack = 0
 10972                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10973  1A52  01F4               	clrf	___wmul@product
 10974  1A53  01F5               	clrf	___wmul@product+1
 10975  1A54                     l2943:	
 10976  1A54  1C70               	btfss	___wmul@multiplier,0
 10977  1A55  2A5C               	goto	l720
 10978  1A56  0872               	movf	___wmul@multiplicand,w
 10979  1A57  07F4               	addwf	___wmul@product,f
 10980  1A58  1803               	skipnc
 10981  1A59  0AF5               	incf	___wmul@product+1,f
 10982  1A5A  0873               	movf	___wmul@multiplicand+1,w
 10983  1A5B  07F5               	addwf	___wmul@product+1,f
 10984  1A5C                     l720:	
 10985  1A5C  3001               	movlw	1
 10986  1A5D                     u3205:	
 10987  1A5D  1003               	clrc
 10988  1A5E  0DF2               	rlf	___wmul@multiplicand,f
 10989  1A5F  0DF3               	rlf	___wmul@multiplicand+1,f
 10990  1A60  3EFF               	addlw	-1
 10991  1A61  1D03               	skipz
 10992  1A62  2A5D               	goto	u3205
 10993  1A63  3001               	movlw	1
 10994  1A64                     u3215:	
 10995  1A64  1003               	clrc
 10996  1A65  0CF1               	rrf	___wmul@multiplier+1,f
 10997  1A66  0CF0               	rrf	___wmul@multiplier,f
 10998  1A67  3EFF               	addlw	-1
 10999  1A68  1D03               	skipz
 11000  1A69  2A64               	goto	u3215
 11001  1A6A  0870               	movf	___wmul@multiplier,w
 11002  1A6B  0471               	iorwf	___wmul@multiplier+1,w
 11003  1A6C  1D03               	btfss	3,2
 11004  1A6D  2A54               	goto	l2943
 11005  1A6E  0875               	movf	___wmul@product+1,w
 11006  1A6F  00F1               	movwf	?___wmul+1
 11007  1A70  0874               	movf	___wmul@product,w
 11008  1A71  00F0               	movwf	?___wmul
 11009  1A72  0008               	return
 11010  1A73                     __end_of___wmul:	
 11011                           
 11012                           	psect	text33
 11013  1BB0                     __ptext33:	
 11014 ;; *************** function ___lwmod *****************
 11015 ;; Defined at:
 11016 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 11017 ;; Parameters:    Size  Location     Type
 11018 ;;  divisor         2    8[COMMON] unsigned int 
 11019 ;;  dividend        2   10[COMMON] unsigned int 
 11020 ;; Auto vars:     Size  Location     Type
 11021 ;;  counter         1   13[COMMON] unsigned char 
 11022 ;; Return value:  Size  Location     Type
 11023 ;;                  2    8[COMMON] unsigned int 
 11024 ;; Registers used:
 11025 ;;		wreg, status,2, status,0
 11026 ;; Tracked objects:
 11027 ;;		On entry : 0/0
 11028 ;;		On exit  : 0/0
 11029 ;;		Unchanged: 0/0
 11030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11031 ;;      Params:         4       0       0       0       0
 11032 ;;      Locals:         1       0       0       0       0
 11033 ;;      Temps:          1       0       0       0       0
 11034 ;;      Totals:         6       0       0       0       0
 11035 ;;Total ram usage:        6 bytes
 11036 ;; Hardware stack levels used:    1
 11037 ;; This function calls:
 11038 ;;		Nothing
 11039 ;; This function is called by:
 11040 ;;		_sprintf
 11041 ;; This function uses a non-reentrant model
 11042 ;;
 11043                           
 11044                           
 11045                           ;psect for function ___lwmod
 11046  1BB0                     ___lwmod:	
 11047                           
 11048                           ;incstack = 0
 11049                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11050  1BB0  0878               	movf	___lwmod@divisor,w
 11051  1BB1  0479               	iorwf	___lwmod@divisor+1,w
 11052  1BB2  1903               	btfsc	3,2
 11053  1BB3  2BDD               	goto	l3013
 11054  1BB4  01FD               	clrf	___lwmod@counter
 11055  1BB5  0AFD               	incf	___lwmod@counter,f
 11056  1BB6                     l3003:	
 11057  1BB6  1BF9               	btfsc	___lwmod@divisor+1,7
 11058  1BB7  2BC4               	goto	l3005
 11059  1BB8  3001               	movlw	1
 11060  1BB9                     u3335:	
 11061  1BB9  1003               	clrc
 11062  1BBA  0DF8               	rlf	___lwmod@divisor,f
 11063  1BBB  0DF9               	rlf	___lwmod@divisor+1,f
 11064  1BBC  3EFF               	addlw	-1
 11065  1BBD  1D03               	skipz
 11066  1BBE  2BB9               	goto	u3335
 11067  1BBF  3001               	movlw	1
 11068  1BC0  00FC               	movwf	??___lwmod
 11069  1BC1  087C               	movf	??___lwmod,w
 11070  1BC2  07FD               	addwf	___lwmod@counter,f
 11071  1BC3  2BB6               	goto	l3003
 11072  1BC4                     l3005:	
 11073  1BC4  0879               	movf	___lwmod@divisor+1,w
 11074  1BC5  027B               	subwf	___lwmod@dividend+1,w
 11075  1BC6  1D03               	skipz
 11076  1BC7  2BCA               	goto	u3355
 11077  1BC8  0878               	movf	___lwmod@divisor,w
 11078  1BC9  027A               	subwf	___lwmod@dividend,w
 11079  1BCA                     u3355:	
 11080  1BCA  1C03               	skipc
 11081  1BCB  2BD2               	goto	l3009
 11082  1BCC  0878               	movf	___lwmod@divisor,w
 11083  1BCD  02FA               	subwf	___lwmod@dividend,f
 11084  1BCE  0879               	movf	___lwmod@divisor+1,w
 11085  1BCF  1C03               	skipc
 11086  1BD0  03FB               	decf	___lwmod@dividend+1,f
 11087  1BD1  02FB               	subwf	___lwmod@dividend+1,f
 11088  1BD2                     l3009:	
 11089  1BD2  3001               	movlw	1
 11090  1BD3                     u3365:	
 11091  1BD3  1003               	clrc
 11092  1BD4  0CF9               	rrf	___lwmod@divisor+1,f
 11093  1BD5  0CF8               	rrf	___lwmod@divisor,f
 11094  1BD6  3EFF               	addlw	-1
 11095  1BD7  1D03               	skipz
 11096  1BD8  2BD3               	goto	u3365
 11097  1BD9  3001               	movlw	1
 11098  1BDA  02FD               	subwf	___lwmod@counter,f
 11099  1BDB  1D03               	btfss	3,2
 11100  1BDC  2BC4               	goto	l3005
 11101  1BDD                     l3013:	
 11102  1BDD  087B               	movf	___lwmod@dividend+1,w
 11103  1BDE  00F9               	movwf	?___lwmod+1
 11104  1BDF  087A               	movf	___lwmod@dividend,w
 11105  1BE0  00F8               	movwf	?___lwmod
 11106  1BE1  0008               	return
 11107  1BE2                     __end_of___lwmod:	
 11108                           
 11109                           	psect	text34
 11110  1C18                     __ptext34:	
 11111 ;; *************** function ___lwdiv *****************
 11112 ;; Defined at:
 11113 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;  divisor         2    0[COMMON] unsigned int 
 11116 ;;  dividend        2    2[COMMON] unsigned int 
 11117 ;; Auto vars:     Size  Location     Type
 11118 ;;  quotient        2    5[COMMON] unsigned int 
 11119 ;;  counter         1    7[COMMON] unsigned char 
 11120 ;; Return value:  Size  Location     Type
 11121 ;;                  2    0[COMMON] unsigned int 
 11122 ;; Registers used:
 11123 ;;		wreg, status,2, status,0
 11124 ;; Tracked objects:
 11125 ;;		On entry : 0/0
 11126 ;;		On exit  : 0/0
 11127 ;;		Unchanged: 0/0
 11128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11129 ;;      Params:         4       0       0       0       0
 11130 ;;      Locals:         3       0       0       0       0
 11131 ;;      Temps:          1       0       0       0       0
 11132 ;;      Totals:         8       0       0       0       0
 11133 ;;Total ram usage:        8 bytes
 11134 ;; Hardware stack levels used:    1
 11135 ;; This function calls:
 11136 ;;		Nothing
 11137 ;; This function is called by:
 11138 ;;		_sprintf
 11139 ;; This function uses a non-reentrant model
 11140 ;;
 11141                           
 11142                           
 11143                           ;psect for function ___lwdiv
 11144  1C18                     ___lwdiv:	
 11145                           
 11146                           ;incstack = 0
 11147                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11148  1C18  01F5               	clrf	___lwdiv@quotient
 11149  1C19  01F6               	clrf	___lwdiv@quotient+1
 11150  1C1A  0870               	movf	___lwdiv@divisor,w
 11151  1C1B  0471               	iorwf	___lwdiv@divisor+1,w
 11152  1C1C  1903               	btfsc	3,2
 11153  1C1D  2C4F               	goto	l2991
 11154  1C1E  01F7               	clrf	___lwdiv@counter
 11155  1C1F  0AF7               	incf	___lwdiv@counter,f
 11156  1C20                     l2979:	
 11157  1C20  1BF1               	btfsc	___lwdiv@divisor+1,7
 11158  1C21  2C2E               	goto	l2981
 11159  1C22  3001               	movlw	1
 11160  1C23                     u3265:	
 11161  1C23  1003               	clrc
 11162  1C24  0DF0               	rlf	___lwdiv@divisor,f
 11163  1C25  0DF1               	rlf	___lwdiv@divisor+1,f
 11164  1C26  3EFF               	addlw	-1
 11165  1C27  1D03               	skipz
 11166  1C28  2C23               	goto	u3265
 11167  1C29  3001               	movlw	1
 11168  1C2A  00F4               	movwf	??___lwdiv
 11169  1C2B  0874               	movf	??___lwdiv,w
 11170  1C2C  07F7               	addwf	___lwdiv@counter,f
 11171  1C2D  2C20               	goto	l2979
 11172  1C2E                     l2981:	
 11173  1C2E  3001               	movlw	1
 11174  1C2F                     u3285:	
 11175  1C2F  1003               	clrc
 11176  1C30  0DF5               	rlf	___lwdiv@quotient,f
 11177  1C31  0DF6               	rlf	___lwdiv@quotient+1,f
 11178  1C32  3EFF               	addlw	-1
 11179  1C33  1D03               	skipz
 11180  1C34  2C2F               	goto	u3285
 11181  1C35  0871               	movf	___lwdiv@divisor+1,w
 11182  1C36  0273               	subwf	___lwdiv@dividend+1,w
 11183  1C37  1D03               	skipz
 11184  1C38  2C3B               	goto	u3295
 11185  1C39  0870               	movf	___lwdiv@divisor,w
 11186  1C3A  0272               	subwf	___lwdiv@dividend,w
 11187  1C3B                     u3295:	
 11188  1C3B  1C03               	skipc
 11189  1C3C  2C44               	goto	l2987
 11190  1C3D  0870               	movf	___lwdiv@divisor,w
 11191  1C3E  02F2               	subwf	___lwdiv@dividend,f
 11192  1C3F  0871               	movf	___lwdiv@divisor+1,w
 11193  1C40  1C03               	skipc
 11194  1C41  03F3               	decf	___lwdiv@dividend+1,f
 11195  1C42  02F3               	subwf	___lwdiv@dividend+1,f
 11196  1C43  1475               	bsf	___lwdiv@quotient,0
 11197  1C44                     l2987:	
 11198  1C44  3001               	movlw	1
 11199  1C45                     u3305:	
 11200  1C45  1003               	clrc
 11201  1C46  0CF1               	rrf	___lwdiv@divisor+1,f
 11202  1C47  0CF0               	rrf	___lwdiv@divisor,f
 11203  1C48  3EFF               	addlw	-1
 11204  1C49  1D03               	skipz
 11205  1C4A  2C45               	goto	u3305
 11206  1C4B  3001               	movlw	1
 11207  1C4C  02F7               	subwf	___lwdiv@counter,f
 11208  1C4D  1D03               	btfss	3,2
 11209  1C4E  2C2E               	goto	l2981
 11210  1C4F                     l2991:	
 11211  1C4F  0876               	movf	___lwdiv@quotient+1,w
 11212  1C50  00F1               	movwf	?___lwdiv+1
 11213  1C51  0875               	movf	___lwdiv@quotient,w
 11214  1C52  00F0               	movwf	?___lwdiv
 11215  1C53  0008               	return
 11216  1C54                     __end_of___lwdiv:	
 11217                           
 11218                           	psect	text35
 11219  19C6                     __ptext35:	
 11220 ;; *************** function ___bmul *****************
 11221 ;; Defined at:
 11222 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 11223 ;; Parameters:    Size  Location     Type
 11224 ;;  multiplier      1    wreg     unsigned char 
 11225 ;;  multiplicand    1    0[COMMON] unsigned char 
 11226 ;; Auto vars:     Size  Location     Type
 11227 ;;  multiplier      1    3[COMMON] unsigned char 
 11228 ;;  product         1    2[COMMON] unsigned char 
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      unsigned char 
 11231 ;; Registers used:
 11232 ;;		wreg, status,2, status,0
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11238 ;;      Params:         1       0       0       0       0
 11239 ;;      Locals:         2       0       0       0       0
 11240 ;;      Temps:          1       0       0       0       0
 11241 ;;      Totals:         4       0       0       0       0
 11242 ;;Total ram usage:        4 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; This function calls:
 11245 ;;		Nothing
 11246 ;; This function is called by:
 11247 ;;		_printf_console_cur_MATRIX44
 11248 ;;		_find_best_solution
 11249 ;;		_main
 11250 ;;		_sprintf
 11251 ;;		_get_MATRIX44
 11252 ;;		_printf_console_all_MATRIX44
 11253 ;; This function uses a non-reentrant model
 11254 ;;
 11255                           
 11256                           
 11257                           ;psect for function ___bmul
 11258  19C6                     ___bmul:	
 11259                           
 11260                           ;incstack = 0
 11261                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11262                           ;___bmul@multiplier stored from wreg
 11263  19C6  00F3               	movwf	___bmul@multiplier
 11264  19C7  01F2               	clrf	___bmul@product
 11265  19C8                     l2957:	
 11266  19C8  1C73               	btfss	___bmul@multiplier,0
 11267  19C9  29CE               	goto	l2961
 11268  19CA  0870               	movf	___bmul@multiplicand,w
 11269  19CB  00F1               	movwf	??___bmul
 11270  19CC  0871               	movf	??___bmul,w
 11271  19CD  07F2               	addwf	___bmul@product,f
 11272  19CE                     l2961:	
 11273  19CE  1003               	clrc
 11274  19CF  0DF0               	rlf	___bmul@multiplicand,f
 11275  19D0  1003               	clrc
 11276  19D1  0CF3               	rrf	___bmul@multiplier,f
 11277  19D2  0873               	movf	___bmul@multiplier,w
 11278  19D3  1D03               	btfss	3,2
 11279  19D4  29C8               	goto	l2957
 11280  19D5  0872               	movf	___bmul@product,w
 11281  19D6  0008               	return
 11282  19D7                     __end_of___bmul:	
 11283                           
 11284                           	psect	text36
 11285  1A94                     __ptext36:	
 11286 ;; *************** function _USARTWriteString *****************
 11287 ;; Defined at:
 11288 ;;		line 76 in file "usart_pic16.c"
 11289 ;; Parameters:    Size  Location     Type
 11290 ;;  str             2    1[COMMON] PTR const unsigned char 
 11291 ;;		 -> STR_62(13), STR_60(13), STR_43(45), STR_33(20), 
 11292 ;;		 -> STR_32(19), STR_31(6), STR_27(35), STR_26(8), 
 11293 ;;		 -> STR_23(35), STR_21(21), STR_20(1), STR_19(2), 
 11294 ;;		 -> STR_18(2), STR_17(29), STR_16(21), STR_15(1), 
 11295 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_9(21), 
 11296 ;;		 -> STR_8(1), STR_7(2), STR_6(2), STR_5(29), 
 11297 ;;		 -> STR_4(3), STR_3(3), STR_2(3), g_debug(32), 
 11298 ;;		 -> STR_1(3), 
 11299 ;; Auto vars:     Size  Location     Type
 11300 ;;		None
 11301 ;; Return value:  Size  Location     Type
 11302 ;;                  1    wreg      void 
 11303 ;; Registers used:
 11304 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 11305 ;; Tracked objects:
 11306 ;;		On entry : 0/0
 11307 ;;		On exit  : 0/0
 11308 ;;		Unchanged: 0/0
 11309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11310 ;;      Params:         2       0       0       0       0
 11311 ;;      Locals:         0       0       0       0       0
 11312 ;;      Temps:          0       0       0       0       0
 11313 ;;      Totals:         2       0       0       0       0
 11314 ;;Total ram usage:        2 bytes
 11315 ;; Hardware stack levels used:    1
 11316 ;; Hardware stack levels required when called:    1
 11317 ;; This function calls:
 11318 ;;		_USARTWriteChar
 11319 ;; This function is called by:
 11320 ;;		_debug_str
 11321 ;;		_debug_line
 11322 ;;		_debug_int1
 11323 ;;		_debug_int2
 11324 ;;		_debug_int3
 11325 ;;		_USARTWriteLine
 11326 ;; This function uses a non-reentrant model
 11327 ;;
 11328                           
 11329                           
 11330                           ;psect for function _USARTWriteString
 11331  1A94                     _USARTWriteString:	
 11332  1A94                     l2921:	
 11333                           ;usart_pic16.c: 77: while (*str != '\0') {
 11334                           
 11335                           ;incstack = 0
 11336                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 11337                           
 11338  1A94  0872               	movf	USARTWriteString@str+1,w
 11339  1A95  1283               	bcf	3,5	;RP0=0, select bank0
 11340  1A96  1303               	bcf	3,6	;RP1=0, select bank0
 11341  1A97  00FF               	movwf	127
 11342  1A98  0871               	movf	USARTWriteString@str,w
 11343  1A99  0084               	movwf	4
 11344  1A9A  120A  158A  2000  160A  158A  	fcall	stringtab
 11345  1A9F  3A00               	xorlw	0
 11346  1AA0  1903               	btfsc	3,2
 11347  1AA1  0008               	return
 11348                           
 11349                           ;usart_pic16.c: 78: USARTWriteChar(*str);
 11350  1AA2  0872               	movf	USARTWriteString@str+1,w
 11351  1AA3  1283               	bcf	3,5	;RP0=0, select bank0
 11352  1AA4  1303               	bcf	3,6	;RP1=0, select bank0
 11353  1AA5  00FF               	movwf	127
 11354  1AA6  0871               	movf	USARTWriteString@str,w
 11355  1AA7  0084               	movwf	4
 11356  1AA8  120A  158A  2000  160A  158A  	fcall	stringtab
 11357  1AAD  160A  158A  218F  160A  158A  	fcall	_USARTWriteChar
 11358                           
 11359                           ;usart_pic16.c: 79: str++;
 11360  1AB2  3001               	movlw	1
 11361  1AB3  07F1               	addwf	USARTWriteString@str,f
 11362  1AB4  1803               	skipnc
 11363  1AB5  0AF2               	incf	USARTWriteString@str+1,f
 11364  1AB6  2A94               	goto	l2921
 11365  1AB7                     __end_of_USARTWriteString:	
 11366                           
 11367                           	psect	text37
 11368  198F                     __ptext37:	
 11369 ;; *************** function _USARTWriteChar *****************
 11370 ;; Defined at:
 11371 ;;		line 70 in file "usart_pic16.c"
 11372 ;; Parameters:    Size  Location     Type
 11373 ;;  ch              1    wreg     unsigned char 
 11374 ;; Auto vars:     Size  Location     Type
 11375 ;;  ch              1    0[COMMON] unsigned char 
 11376 ;; Return value:  Size  Location     Type
 11377 ;;                  1    wreg      void 
 11378 ;; Registers used:
 11379 ;;		wreg
 11380 ;; Tracked objects:
 11381 ;;		On entry : 0/0
 11382 ;;		On exit  : 0/0
 11383 ;;		Unchanged: 0/0
 11384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11385 ;;      Params:         0       0       0       0       0
 11386 ;;      Locals:         1       0       0       0       0
 11387 ;;      Temps:          0       0       0       0       0
 11388 ;;      Totals:         1       0       0       0       0
 11389 ;;Total ram usage:        1 bytes
 11390 ;; Hardware stack levels used:    1
 11391 ;; This function calls:
 11392 ;;		Nothing
 11393 ;; This function is called by:
 11394 ;;		_USARTWriteString
 11395 ;;		_USARTWriteLine
 11396 ;;		_USARTWriteInt
 11397 ;;		_USARTGotoNewLine
 11398 ;; This function uses a non-reentrant model
 11399 ;;
 11400                           
 11401                           
 11402                           ;psect for function _USARTWriteChar
 11403  198F                     _USARTWriteChar:	
 11404                           
 11405                           ;incstack = 0
 11406                           ; Regs used in _USARTWriteChar: [wreg]
 11407                           ;USARTWriteChar@ch stored from wreg
 11408  198F  00F0               	movwf	USARTWriteChar@ch
 11409  1990                     l36:	
 11410                           ;usart_pic16.c: 71: while (!PIR1bits.TXIF);
 11411                           
 11412  1990  1283               	bcf	3,5	;RP0=0, select bank0
 11413  1991  1303               	bcf	3,6	;RP1=0, select bank0
 11414  1992  1E0C               	btfss	12,4	;volatile
 11415  1993  2990               	goto	l36
 11416                           
 11417                           ;usart_pic16.c: 73: TXREG = ch;
 11418  1994  0870               	movf	USARTWriteChar@ch,w
 11419  1995  0099               	movwf	25	;volatile
 11420  1996  0008               	return
 11421  1997                     __end_of_USARTWriteChar:	
 11422                           
 11423                           	psect	text38
 11424  1DFF                     __ptext38:	
 11425 ;; *************** function _clear *****************
 11426 ;; Defined at:
 11427 ;;		line 740 in file "teris_16f886.c"
 11428 ;; Parameters:    Size  Location     Type
 11429 ;;  x               1    wreg     char 
 11430 ;;  y               1    0[COMMON] char 
 11431 ;;  matrix44        2    1[COMMON] PTR const struct .
 11432 ;;		 -> NULL(0), g_matrix44(384), 
 11433 ;;  matrix88        1    3[COMMON] PTR struct .
 11434 ;;		 -> g_matrix88(64), 
 11435 ;; Auto vars:     Size  Location     Type
 11436 ;;  x               1    8[COMMON] char 
 11437 ;;  col             1   10[COMMON] unsigned char 
 11438 ;;  row             1    9[COMMON] unsigned char 
 11439 ;; Return value:  Size  Location     Type
 11440 ;;                  1    wreg      void 
 11441 ;; Registers used:
 11442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
 11443 ;; Tracked objects:
 11444 ;;		On entry : 0/0
 11445 ;;		On exit  : 0/0
 11446 ;;		Unchanged: 0/0
 11447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11448 ;;      Params:         4       0       0       0       0
 11449 ;;      Locals:         3       0       0       0       0
 11450 ;;      Temps:          4       0       0       0       0
 11451 ;;      Totals:        11       0       0       0       0
 11452 ;;Total ram usage:       11 bytes
 11453 ;; Hardware stack levels used:    2
 11454 ;; This function calls:
 11455 ;;		Nothing
 11456 ;; This function is called by:
 11457 ;;		_main
 11458 ;; This function uses a non-reentrant model
 11459 ;;
 11460                           
 11461                           
 11462                           ;psect for function _clear
 11463  1DFF                     _clear:	
 11464                           
 11465                           ;incstack = 0
 11466                           ; Regs used in _clear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
 11467                           ;clear@x stored from wreg
 11468  1DFF  00F8               	movwf	clear@x
 11469                           
 11470                           ;teris_16f886.c: 742: for(uint8_t row = 0; row < 4; row++)
 11471  1E00  01F9               	clrf	clear@row
 11472  1E01                     L37:	
 11473  1E01  3004               	movlw	4
 11474  1E02  0279               	subwf	clear@row,w
 11475  1E03  1803               	btfsc	3,0
 11476  1E04  0008               	return
 11477                           
 11478                           ;teris_16f886.c: 743: {
 11479                           ;teris_16f886.c: 744: for(uint8_t col = 0; col < 4; col++)
 11480  1E05  01FA               	clrf	clear@col
 11481  1E06  3004               	movlw	4
 11482  1E07  027A               	subwf	clear@col,w
 11483  1E08  1803               	btfsc	3,0
 11484  1E09  2E49               	goto	l4163
 11485  1E0A                     l4155:	
 11486                           
 11487                           ;teris_16f886.c: 745: {
 11488                           ;teris_16f886.c: 746: if(matrix44->data[row][col] == 1)
 11489  1E0A  0879               	movf	clear@row,w
 11490  1E0B  00F4               	movwf	??_clear
 11491  1E0C  01F5               	clrf	??_clear+1
 11492  1E0D  1003               	clrc
 11493  1E0E  0DF4               	rlf	??_clear,f
 11494  1E0F  0DF5               	rlf	??_clear+1,f
 11495  1E10  1003               	clrc
 11496  1E11  0DF4               	rlf	??_clear,f
 11497  1E12  0DF5               	rlf	??_clear+1,f
 11498  1E13  0874               	movf	??_clear,w
 11499  1E14  0771               	addwf	clear@matrix44,w
 11500  1E15  00F6               	movwf	??_clear+2
 11501  1E16  0875               	movf	??_clear+1,w
 11502  1E17  1803               	skipnc
 11503  1E18  0A75               	incf	??_clear+1,w
 11504  1E19  0772               	addwf	clear@matrix44+1,w
 11505  1E1A  00F7               	movwf	??_clear+3
 11506  1E1B  087A               	movf	clear@col,w
 11507  1E1C  0776               	addwf	??_clear+2,w
 11508  1E1D  0084               	movwf	4
 11509  1E1E  0877               	movf	??_clear+3,w
 11510  1E1F  1803               	skipnc
 11511  1E20  0A77               	incf	??_clear+3,w
 11512  1E21  1283               	bcf	3,5	;RP0=0, select bank0
 11513  1E22  1303               	bcf	3,6	;RP1=0, select bank0
 11514  1E23  00FF               	movwf	127
 11515  1E24  120A  158A  2000  160A  158A  	fcall	stringtab
 11516  1E29  3A01               	xorlw	1
 11517  1E2A  1D03               	skipz
 11518  1E2B  2E41               	goto	l4159
 11519                           
 11520                           ;teris_16f886.c: 747: {
 11521                           ;teris_16f886.c: 748: matrix88->data[y + row][x + col] = 0;
 11522  1E2C  087A               	movf	clear@col,w
 11523  1E2D  0778               	addwf	clear@x,w
 11524  1E2E  0773               	addwf	clear@matrix88,w
 11525  1E2F  00F4               	movwf	??_clear
 11526  1E30  0879               	movf	clear@row,w
 11527  1E31  0770               	addwf	clear@y,w
 11528  1E32  00F5               	movwf	??_clear+1
 11529  1E33  3002               	movlw	2
 11530  1E34                     u5715:	
 11531  1E34  1003               	clrc
 11532  1E35  0DF5               	rlf	??_clear+1,f
 11533  1E36  3EFF               	addlw	-1
 11534  1E37  1D03               	skipz
 11535  1E38  2E34               	goto	u5715
 11536  1E39  1003               	clrc
 11537  1E3A  0D75               	rlf	??_clear+1,w
 11538  1E3B  0774               	addwf	??_clear,w
 11539  1E3C  00F6               	movwf	??_clear+2
 11540  1E3D  0876               	movf	??_clear+2,w
 11541  1E3E  0084               	movwf	4
 11542  1E3F  1783               	bsf	3,7	;select IRP bank2
 11543  1E40  0180               	clrf	0
 11544  1E41                     l4159:	
 11545  1E41  3001               	movlw	1
 11546  1E42  00F4               	movwf	??_clear
 11547  1E43  0874               	movf	??_clear,w
 11548  1E44  07FA               	addwf	clear@col,f
 11549  1E45  3004               	movlw	4
 11550  1E46  027A               	subwf	clear@col,w
 11551  1E47  1C03               	skipc
 11552  1E48  2E0A               	goto	l4155
 11553  1E49                     l4163:	
 11554  1E49  3001               	movlw	1
 11555  1E4A  00F4               	movwf	??_clear
 11556  1E4B  0874               	movf	??_clear,w
 11557  1E4C  07F9               	addwf	clear@row,f
 11558  1E4D  2E01               	goto	L37
 11559  1E4E                     __end_of_clear:	
 11560                           
 11561                           	psect	text39
 11562  1A1F                     __ptext39:	
 11563 ;; *************** function _char_info_index_rand *****************
 11564 ;; Defined at:
 11565 ;;		line 817 in file "teris_16f886.c"
 11566 ;; Parameters:    Size  Location     Type
 11567 ;;		None
 11568 ;; Auto vars:     Size  Location     Type
 11569 ;;		None
 11570 ;; Return value:  Size  Location     Type
 11571 ;;                  1    wreg      unsigned char 
 11572 ;; Registers used:
 11573 ;;		wreg, status,2, status,0, pclath, cstack
 11574 ;; Tracked objects:
 11575 ;;		On entry : 0/0
 11576 ;;		On exit  : 0/0
 11577 ;;		Unchanged: 0/0
 11578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11579 ;;      Params:         0       0       0       0       0
 11580 ;;      Locals:         0       0       0       0       0
 11581 ;;      Temps:          0       0       0       0       0
 11582 ;;      Totals:         0       0       0       0       0
 11583 ;;Total ram usage:        0 bytes
 11584 ;; Hardware stack levels used:    1
 11585 ;; Hardware stack levels required when called:    2
 11586 ;; This function calls:
 11587 ;;		___awmod
 11588 ;;		_rand
 11589 ;; This function is called by:
 11590 ;;		_main
 11591 ;; This function uses a non-reentrant model
 11592 ;;
 11593                           
 11594                           
 11595                           ;psect for function _char_info_index_rand
 11596  1A1F                     _char_info_index_rand:	
 11597                           
 11598                           ;teris_16f886.c: 819: return (uint8_t)(rand()%9);
 11599                           
 11600                           ;incstack = 0
 11601                           ; Regs used in _char_info_index_rand: [wreg+status,2+status,0+pclath+cstack]
 11602  1A1F  3009               	movlw	9
 11603  1A20  1283               	bcf	3,5	;RP0=0, select bank0
 11604  1A21  1303               	bcf	3,6	;RP1=0, select bank0
 11605  1A22  00A7               	movwf	___awmod@divisor
 11606  1A23  3000               	movlw	0
 11607  1A24  00A8               	movwf	___awmod@divisor+1
 11608  1A25  160A  158A  26ED  160A  158A  	fcall	_rand
 11609  1A2A  1283               	bcf	3,5	;RP0=0, select bank0
 11610  1A2B  1303               	bcf	3,6	;RP1=0, select bank0
 11611  1A2C  0821               	movf	?_rand+1,w
 11612  1A2D  00AA               	movwf	___awmod@dividend+1
 11613  1A2E  0820               	movf	?_rand,w
 11614  1A2F  00A9               	movwf	___awmod@dividend
 11615  1A30  160A  158A  25B2   	fcall	___awmod
 11616  1A33  1283               	bcf	3,5	;RP0=0, select bank0
 11617  1A34  1303               	bcf	3,6	;RP1=0, select bank0
 11618  1A35  0827               	movf	?___awmod,w
 11619  1A36  0008               	return
 11620  1A37                     __end_of_char_info_index_rand:	
 11621                           
 11622                           	psect	text40
 11623  1EED                     __ptext40:	
 11624 ;; *************** function _rand *****************
 11625 ;; Defined at:
 11626 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
 11627 ;; Parameters:    Size  Location     Type
 11628 ;;		None
 11629 ;; Auto vars:     Size  Location     Type
 11630 ;;		None
 11631 ;; Return value:  Size  Location     Type
 11632 ;;                  2    0[BANK0 ] int 
 11633 ;; Registers used:
 11634 ;;		wreg, status,2, status,0, pclath, cstack
 11635 ;; Tracked objects:
 11636 ;;		On entry : 0/0
 11637 ;;		On exit  : 0/0
 11638 ;;		Unchanged: 0/0
 11639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11640 ;;      Params:         0       2       0       0       0
 11641 ;;      Locals:         0       0       0       0       0
 11642 ;;      Temps:          0       5       0       0       0
 11643 ;;      Totals:         0       7       0       0       0
 11644 ;;Total ram usage:        7 bytes
 11645 ;; Hardware stack levels used:    1
 11646 ;; Hardware stack levels required when called:    1
 11647 ;; This function calls:
 11648 ;;		___lmul
 11649 ;; This function is called by:
 11650 ;;		_char_info_index_rand
 11651 ;; This function uses a non-reentrant model
 11652 ;;
 11653                           
 11654                           
 11655                           ;psect for function _rand
 11656  1EED                     _rand:	
 11657                           
 11658                           ;incstack = 0
 11659                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 11660  1EED  1683               	bsf	3,5	;RP0=1, select bank3
 11661  1EEE  1703               	bsf	3,6	;RP1=1, select bank3
 11662  1EEF  0856               	movf	(_randx+3)^(0+384),w
 11663  1EF0  00F3               	movwf	___lmul@multiplier+3
 11664  1EF1  0855               	movf	(_randx+2)^(0+384),w
 11665  1EF2  00F2               	movwf	___lmul@multiplier+2
 11666  1EF3  0854               	movf	(_randx+1)^(0+384),w
 11667  1EF4  00F1               	movwf	___lmul@multiplier+1
 11668  1EF5  0853               	movf	_randx^(0+384),w
 11669  1EF6  00F0               	movwf	___lmul@multiplier
 11670  1EF7  3041               	movlw	65
 11671  1EF8  00F7               	movwf	___lmul@multiplicand+3
 11672  1EF9  30C6               	movlw	198
 11673  1EFA  00F6               	movwf	___lmul@multiplicand+2
 11674  1EFB  304E               	movlw	78
 11675  1EFC  00F5               	movwf	___lmul@multiplicand+1
 11676  1EFD  306D               	movlw	109
 11677  1EFE  00F4               	movwf	___lmul@multiplicand
 11678  1EFF  160A  158A  2454  160A  158A  	fcall	___lmul
 11679  1F04  0873               	movf	?___lmul+3,w
 11680  1F05  1683               	bsf	3,5	;RP0=1, select bank3
 11681  1F06  1703               	bsf	3,6	;RP1=1, select bank3
 11682  1F07  00D6               	movwf	(_randx+3)^(0+384)
 11683  1F08  0872               	movf	?___lmul+2,w
 11684  1F09  00D5               	movwf	(_randx+2)^(0+384)
 11685  1F0A  0871               	movf	?___lmul+1,w
 11686  1F0B  00D4               	movwf	(_randx+1)^(0+384)
 11687  1F0C  0870               	movf	?___lmul,w
 11688  1F0D  00D3               	movwf	_randx^(0+384)
 11689  1F0E  3039               	movlw	57
 11690  1F0F  07D3               	addwf	_randx^(0+384),f
 11691  1F10  3030               	movlw	48
 11692  1F11  1803               	skipnc
 11693  1F12  3031               	movlw	49
 11694  1F13  07D4               	addwf	(_randx+1)^(0+384),f
 11695  1F14  3000               	movlw	0
 11696  1F15  1803               	skipnc
 11697  1F16  3001               	movlw	1
 11698  1F17  07D5               	addwf	(_randx+2)^(0+384),f
 11699  1F18  3000               	movlw	0
 11700  1F19  1803               	skipnc
 11701  1F1A  3001               	movlw	1
 11702  1F1B  07D6               	addwf	(_randx+3)^(0+384),f
 11703  1F1C  0853               	movf	_randx^(0+384),w
 11704  1F1D  1283               	bcf	3,5	;RP0=0, select bank0
 11705  1F1E  1303               	bcf	3,6	;RP1=0, select bank0
 11706  1F1F  00A2               	movwf	??_rand
 11707  1F20  1683               	bsf	3,5	;RP0=1, select bank3
 11708  1F21  1703               	bsf	3,6	;RP1=1, select bank3
 11709  1F22  0854               	movf	(_randx+1)^(0+384),w
 11710  1F23  1283               	bcf	3,5	;RP0=0, select bank0
 11711  1F24  1303               	bcf	3,6	;RP1=0, select bank0
 11712  1F25  00A3               	movwf	??_rand+1
 11713  1F26  1683               	bsf	3,5	;RP0=1, select bank3
 11714  1F27  1703               	bsf	3,6	;RP1=1, select bank3
 11715  1F28  0855               	movf	(_randx+2)^(0+384),w
 11716  1F29  1283               	bcf	3,5	;RP0=0, select bank0
 11717  1F2A  1303               	bcf	3,6	;RP1=0, select bank0
 11718  1F2B  00A4               	movwf	??_rand+2
 11719  1F2C  1683               	bsf	3,5	;RP0=1, select bank3
 11720  1F2D  1703               	bsf	3,6	;RP1=1, select bank3
 11721  1F2E  0856               	movf	(_randx+3)^(0+384),w
 11722  1F2F  1283               	bcf	3,5	;RP0=0, select bank0
 11723  1F30  1303               	bcf	3,6	;RP1=0, select bank0
 11724  1F31  00A5               	movwf	??_rand+3
 11725  1F32  3010               	movlw	16
 11726  1F33  00A6               	movwf	??_rand+4
 11727  1F34                     u4985:	
 11728  1F34  0D25               	rlf	??_rand+3,w
 11729  1F35  0CA5               	rrf	??_rand+3,f
 11730  1F36  0CA4               	rrf	??_rand+2,f
 11731  1F37  0CA3               	rrf	??_rand+1,f
 11732  1F38  0CA2               	rrf	??_rand,f
 11733  1F39  0BA6               	decfsz	??_rand+4,f
 11734  1F3A  2F34               	goto	u4985
 11735  1F3B  30FF               	movlw	255
 11736  1F3C  0522               	andwf	??_rand,w
 11737  1F3D  00A0               	movwf	?_rand
 11738  1F3E  307F               	movlw	127
 11739  1F3F  0523               	andwf	??_rand+1,w
 11740  1F40  00A1               	movwf	?_rand+1
 11741  1F41  0008               	return
 11742  1F42                     __end_of_rand:	
 11743                           
 11744                           	psect	text41
 11745  1C54                     __ptext41:	
 11746 ;; *************** function ___lmul *****************
 11747 ;; Defined at:
 11748 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 11749 ;; Parameters:    Size  Location     Type
 11750 ;;  multiplier      4    0[COMMON] unsigned long 
 11751 ;;  multiplicand    4    4[COMMON] unsigned long 
 11752 ;; Auto vars:     Size  Location     Type
 11753 ;;  product         4    9[COMMON] unsigned long 
 11754 ;; Return value:  Size  Location     Type
 11755 ;;                  4    0[COMMON] unsigned long 
 11756 ;; Registers used:
 11757 ;;		wreg, status,2, status,0
 11758 ;; Tracked objects:
 11759 ;;		On entry : 0/0
 11760 ;;		On exit  : 0/0
 11761 ;;		Unchanged: 0/0
 11762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11763 ;;      Params:         8       0       0       0       0
 11764 ;;      Locals:         4       0       0       0       0
 11765 ;;      Temps:          1       0       0       0       0
 11766 ;;      Totals:        13       0       0       0       0
 11767 ;;Total ram usage:       13 bytes
 11768 ;; Hardware stack levels used:    1
 11769 ;; This function calls:
 11770 ;;		Nothing
 11771 ;; This function is called by:
 11772 ;;		_rand
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           
 11777                           ;psect for function ___lmul
 11778  1C54                     ___lmul:	
 11779                           
 11780                           ;incstack = 0
 11781                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11782  1C54  3000               	movlw	0
 11783  1C55  00FC               	movwf	___lmul@product+3
 11784  1C56  3000               	movlw	0
 11785  1C57  00FB               	movwf	___lmul@product+2
 11786  1C58  3000               	movlw	0
 11787  1C59  00FA               	movwf	___lmul@product+1
 11788  1C5A  3000               	movlw	0
 11789  1C5B  00F9               	movwf	___lmul@product
 11790  1C5C                     l3615:	
 11791  1C5C  1C70               	btfss	___lmul@multiplier,0
 11792  1C5D  2C72               	goto	l3619
 11793  1C5E  0874               	movf	___lmul@multiplicand,w
 11794  1C5F  07F9               	addwf	___lmul@product,f
 11795  1C60  0875               	movf	___lmul@multiplicand+1,w
 11796  1C61  1103               	clrz
 11797  1C62  1803               	skipnc
 11798  1C63  3E01               	addlw	1
 11799  1C64  1D03               	btfss	3,2
 11800  1C65  07FA               	addwf	___lmul@product+1,f
 11801  1C66  0876               	movf	___lmul@multiplicand+2,w
 11802  1C67  1103               	clrz
 11803  1C68  1803               	skipnc
 11804  1C69  3E01               	addlw	1
 11805  1C6A  1D03               	btfss	3,2
 11806  1C6B  07FB               	addwf	___lmul@product+2,f
 11807  1C6C  0877               	movf	___lmul@multiplicand+3,w
 11808  1C6D  1103               	clrz
 11809  1C6E  1803               	skipnc
 11810  1C6F  3E01               	addlw	1
 11811  1C70  1D03               	btfss	3,2
 11812  1C71  07FC               	addwf	___lmul@product+3,f
 11813  1C72                     l3619:	
 11814  1C72  3001               	movlw	1
 11815  1C73  00F8               	movwf	??___lmul
 11816  1C74                     u4555:	
 11817  1C74  1003               	clrc
 11818  1C75  0DF4               	rlf	___lmul@multiplicand,f
 11819  1C76  0DF5               	rlf	___lmul@multiplicand+1,f
 11820  1C77  0DF6               	rlf	___lmul@multiplicand+2,f
 11821  1C78  0DF7               	rlf	___lmul@multiplicand+3,f
 11822  1C79  0BF8               	decfsz	??___lmul,f
 11823  1C7A  2C74               	goto	u4555
 11824  1C7B  3001               	movlw	1
 11825  1C7C                     u4565:	
 11826  1C7C  1003               	clrc
 11827  1C7D  0CF3               	rrf	___lmul@multiplier+3,f
 11828  1C7E  0CF2               	rrf	___lmul@multiplier+2,f
 11829  1C7F  0CF1               	rrf	___lmul@multiplier+1,f
 11830  1C80  0CF0               	rrf	___lmul@multiplier,f
 11831  1C81  3EFF               	addlw	-1
 11832  1C82  1D03               	skipz
 11833  1C83  2C7C               	goto	u4565
 11834  1C84  0873               	movf	___lmul@multiplier+3,w
 11835  1C85  0472               	iorwf	___lmul@multiplier+2,w
 11836  1C86  0471               	iorwf	___lmul@multiplier+1,w
 11837  1C87  0470               	iorwf	___lmul@multiplier,w
 11838  1C88  1D03               	skipz
 11839  1C89  2C5C               	goto	l3615
 11840  1C8A  087C               	movf	___lmul@product+3,w
 11841  1C8B  00F3               	movwf	?___lmul+3
 11842  1C8C  087B               	movf	___lmul@product+2,w
 11843  1C8D  00F2               	movwf	?___lmul+2
 11844  1C8E  087A               	movf	___lmul@product+1,w
 11845  1C8F  00F1               	movwf	?___lmul+1
 11846  1C90  0879               	movf	___lmul@product,w
 11847  1C91  00F0               	movwf	?___lmul
 11848  1C92  0008               	return
 11849  1C93                     __end_of___lmul:	
 11850                           
 11851                           	psect	text42
 11852  1DB2                     __ptext42:	
 11853 ;; *************** function ___awmod *****************
 11854 ;; Defined at:
 11855 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 11856 ;; Parameters:    Size  Location     Type
 11857 ;;  divisor         2    7[BANK0 ] int 
 11858 ;;  dividend        2    9[BANK0 ] int 
 11859 ;; Auto vars:     Size  Location     Type
 11860 ;;  sign            1   12[BANK0 ] unsigned char 
 11861 ;;  counter         1   11[BANK0 ] unsigned char 
 11862 ;; Return value:  Size  Location     Type
 11863 ;;                  2    7[BANK0 ] int 
 11864 ;; Registers used:
 11865 ;;		wreg, status,2, status,0
 11866 ;; Tracked objects:
 11867 ;;		On entry : 0/0
 11868 ;;		On exit  : 0/0
 11869 ;;		Unchanged: 0/0
 11870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11871 ;;      Params:         0       4       0       0       0
 11872 ;;      Locals:         0       2       0       0       0
 11873 ;;      Temps:          1       0       0       0       0
 11874 ;;      Totals:         1       6       0       0       0
 11875 ;;Total ram usage:        7 bytes
 11876 ;; Hardware stack levels used:    1
 11877 ;; This function calls:
 11878 ;;		Nothing
 11879 ;; This function is called by:
 11880 ;;		_char_info_index_rand
 11881 ;;		_USARTWriteInt
 11882 ;; This function uses a non-reentrant model
 11883 ;;
 11884                           
 11885                           
 11886                           ;psect for function ___awmod
 11887  1DB2                     ___awmod:	
 11888                           
 11889                           ;incstack = 0
 11890                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 11891  1DB2  1283               	bcf	3,5	;RP0=0, select bank0
 11892  1DB3  1303               	bcf	3,6	;RP1=0, select bank0
 11893  1DB4  01AC               	clrf	___awmod@sign
 11894  1DB5  1FAA               	btfss	___awmod@dividend+1,7
 11895  1DB6  2DBE               	goto	l3985
 11896  1DB7  09A9               	comf	___awmod@dividend,f
 11897  1DB8  09AA               	comf	___awmod@dividend+1,f
 11898  1DB9  0AA9               	incf	___awmod@dividend,f
 11899  1DBA  1903               	skipnz
 11900  1DBB  0AAA               	incf	___awmod@dividend+1,f
 11901  1DBC  01AC               	clrf	___awmod@sign
 11902  1DBD  0AAC               	incf	___awmod@sign,f
 11903  1DBE                     l3985:	
 11904  1DBE  1FA8               	btfss	___awmod@divisor+1,7
 11905  1DBF  2DC5               	goto	l3989
 11906  1DC0  09A7               	comf	___awmod@divisor,f
 11907  1DC1  09A8               	comf	___awmod@divisor+1,f
 11908  1DC2  0AA7               	incf	___awmod@divisor,f
 11909  1DC3  1903               	skipnz
 11910  1DC4  0AA8               	incf	___awmod@divisor+1,f
 11911  1DC5                     l3989:	
 11912  1DC5  0827               	movf	___awmod@divisor,w
 11913  1DC6  0428               	iorwf	___awmod@divisor+1,w
 11914  1DC7  1903               	btfsc	3,2
 11915  1DC8  2DF2               	goto	l4007
 11916  1DC9  01AB               	clrf	___awmod@counter
 11917  1DCA  0AAB               	incf	___awmod@counter,f
 11918  1DCB                     l3997:	
 11919  1DCB  1BA8               	btfsc	___awmod@divisor+1,7
 11920  1DCC  2DD9               	goto	l3999
 11921  1DCD  3001               	movlw	1
 11922  1DCE                     u5475:	
 11923  1DCE  1003               	clrc
 11924  1DCF  0DA7               	rlf	___awmod@divisor,f
 11925  1DD0  0DA8               	rlf	___awmod@divisor+1,f
 11926  1DD1  3EFF               	addlw	-1
 11927  1DD2  1D03               	skipz
 11928  1DD3  2DCE               	goto	u5475
 11929  1DD4  3001               	movlw	1
 11930  1DD5  00FD               	movwf	??___awmod
 11931  1DD6  087D               	movf	??___awmod,w
 11932  1DD7  07AB               	addwf	___awmod@counter,f
 11933  1DD8  2DCB               	goto	l3997
 11934  1DD9                     l3999:	
 11935  1DD9  0828               	movf	___awmod@divisor+1,w
 11936  1DDA  022A               	subwf	___awmod@dividend+1,w
 11937  1DDB  1D03               	skipz
 11938  1DDC  2DDF               	goto	u5495
 11939  1DDD  0827               	movf	___awmod@divisor,w
 11940  1DDE  0229               	subwf	___awmod@dividend,w
 11941  1DDF                     u5495:	
 11942  1DDF  1C03               	skipc
 11943  1DE0  2DE7               	goto	l4003
 11944  1DE1  0827               	movf	___awmod@divisor,w
 11945  1DE2  02A9               	subwf	___awmod@dividend,f
 11946  1DE3  0828               	movf	___awmod@divisor+1,w
 11947  1DE4  1C03               	skipc
 11948  1DE5  03AA               	decf	___awmod@dividend+1,f
 11949  1DE6  02AA               	subwf	___awmod@dividend+1,f
 11950  1DE7                     l4003:	
 11951  1DE7  3001               	movlw	1
 11952  1DE8                     u5505:	
 11953  1DE8  1003               	clrc
 11954  1DE9  0CA8               	rrf	___awmod@divisor+1,f
 11955  1DEA  0CA7               	rrf	___awmod@divisor,f
 11956  1DEB  3EFF               	addlw	-1
 11957  1DEC  1D03               	skipz
 11958  1DED  2DE8               	goto	u5505
 11959  1DEE  3001               	movlw	1
 11960  1DEF  02AB               	subwf	___awmod@counter,f
 11961  1DF0  1D03               	btfss	3,2
 11962  1DF1  2DD9               	goto	l3999
 11963  1DF2                     l4007:	
 11964  1DF2  082C               	movf	___awmod@sign,w
 11965  1DF3  1903               	btfsc	3,2
 11966  1DF4  2DFA               	goto	l4011
 11967  1DF5  09A9               	comf	___awmod@dividend,f
 11968  1DF6  09AA               	comf	___awmod@dividend+1,f
 11969  1DF7  0AA9               	incf	___awmod@dividend,f
 11970  1DF8  1903               	skipnz
 11971  1DF9  0AAA               	incf	___awmod@dividend+1,f
 11972  1DFA                     l4011:	
 11973  1DFA  082A               	movf	___awmod@dividend+1,w
 11974  1DFB  00A8               	movwf	?___awmod+1
 11975  1DFC  0829               	movf	___awmod@dividend,w
 11976  1DFD  00A7               	movwf	?___awmod
 11977  1DFE  0008               	return
 11978  1DFF                     __end_of___awmod:	
 11979                           
 11980                           	psect	text43
 11981  1C93                     __ptext43:	
 11982 ;; *************** function _USARTInit *****************
 11983 ;; Defined at:
 11984 ;;		line 31 in file "usart_pic16.c"
 11985 ;; Parameters:    Size  Location     Type
 11986 ;;  baud_rate       2    0[COMMON] unsigned int 
 11987 ;; Auto vars:     Size  Location     Type
 11988 ;;		None
 11989 ;; Return value:  Size  Location     Type
 11990 ;;                  1    wreg      void 
 11991 ;; Registers used:
 11992 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11993 ;; Tracked objects:
 11994 ;;		On entry : 0/0
 11995 ;;		On exit  : 0/0
 11996 ;;		Unchanged: 0/0
 11997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11998 ;;      Params:         2       0       0       0       0
 11999 ;;      Locals:         0       0       0       0       0
 12000 ;;      Temps:          1       0       0       0       0
 12001 ;;      Totals:         3       0       0       0       0
 12002 ;;Total ram usage:        3 bytes
 12003 ;; Hardware stack levels used:    1
 12004 ;; This function calls:
 12005 ;;		Nothing
 12006 ;; This function is called by:
 12007 ;;		_main
 12008 ;; This function uses a non-reentrant model
 12009 ;;
 12010                           
 12011                           
 12012                           ;psect for function _USARTInit
 12013  1C93                     _USARTInit:	
 12014                           
 12015                           ;usart_pic16.c: 33: UQFront = UQEnd = -1;
 12016                           
 12017                           ;incstack = 0
 12018                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 12019  1C93  30FF               	movlw	255
 12020  1C94  1283               	bcf	3,5	;RP0=0, select bank0
 12021  1C95  1303               	bcf	3,6	;RP1=0, select bank0
 12022  1C96  00ED               	movwf	_UQEnd	;volatile
 12023  1C97  00F2               	movwf	??_USARTInit
 12024  1C98  0872               	movf	??_USARTInit,w
 12025  1C99  00EE               	movwf	_UQFront	;volatile
 12026                           
 12027                           ;usart_pic16.c: 36: switch (baud_rate) {
 12028  1C9A  2CA6               	goto	l4027
 12029  1C9B                     l4017:	
 12030                           ;usart_pic16.c: 37: case 9600:
 12031                           
 12032                           
 12033                           ;usart_pic16.c: 38: SPBRG = 129;
 12034  1C9B  3081               	movlw	129
 12035  1C9C  2CA2               	goto	L40
 12036  1C9D                     l4019:	
 12037                           ;usart_pic16.c: 40: case 19200:
 12038                           
 12039                           ;usart_pic16.c: 39: break;
 12040                           
 12041                           
 12042                           ;usart_pic16.c: 41: SPBRG = 64;
 12043  1C9D  3040               	movlw	64
 12044  1C9E  2CA2               	goto	L40
 12045  1C9F                     l4021:	
 12046                           ;usart_pic16.c: 43: case 28800:
 12047                           
 12048                           ;usart_pic16.c: 42: break;
 12049                           
 12050                           
 12051                           ;usart_pic16.c: 44: SPBRG = 42;
 12052  1C9F  302A               	movlw	42
 12053  1CA0  2CA2               	goto	L40
 12054  1CA1                     l4023:	
 12055                           ;usart_pic16.c: 46: case 33600:
 12056                           
 12057                           ;usart_pic16.c: 45: break;
 12058                           
 12059                           
 12060                           ;usart_pic16.c: 47: SPBRG = 36;
 12061  1CA1  3024               	movlw	36
 12062  1CA2                     L40:	
 12063  1CA2  1683               	bsf	3,5	;RP0=1, select bank1
 12064  1CA3  1303               	bcf	3,6	;RP1=0, select bank1
 12065  1CA4  0099               	movwf	25	;volatile
 12066                           
 12067                           ;usart_pic16.c: 49: }
 12068                           
 12069                           ;usart_pic16.c: 48: break;
 12070  1CA5  2CC8               	goto	l29
 12071  1CA6                     l4027:	
 12072                           
 12073                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 12074                           ; Switch size 1, requested type "space"
 12075                           ; Number of cases is 4, Range of values is 37 to 131
 12076                           ; switch strategies available:
 12077                           ; Name         Instructions Cycles
 12078                           ; simple_byte           13     7 (average)
 12079                           ; jumptable            263     9 (fixed)
 12080                           ;	Chosen strategy is simple_byte
 12081  1CA6  0871               	movf	USARTInit@baud_rate+1,w
 12082  1CA7  3A25               	xorlw	37	; case 37
 12083  1CA8  1903               	skipnz
 12084  1CA9  2CB4               	goto	l5145
 12085  1CAA  3A6E               	xorlw	110	; case 75
 12086  1CAB  1903               	skipnz
 12087  1CAC  2CB9               	goto	l5147
 12088  1CAD  3A3B               	xorlw	59	; case 112
 12089  1CAE  1903               	skipnz
 12090  1CAF  2CBE               	goto	l5149
 12091  1CB0  3AF3               	xorlw	243	; case 131
 12092  1CB1  1903               	skipnz
 12093  1CB2  2CC3               	goto	l5151
 12094  1CB3  2CC8               	goto	l29
 12095  1CB4                     l5145:	
 12096                           
 12097                           ; Switch size 1, requested type "space"
 12098                           ; Number of cases is 1, Range of values is 128 to 128
 12099                           ; switch strategies available:
 12100                           ; Name         Instructions Cycles
 12101                           ; simple_byte            4     3 (average)
 12102                           ; direct_byte           14    11 (fixed)
 12103                           ; jumptable            263     9 (fixed)
 12104                           ;	Chosen strategy is simple_byte
 12105  1CB4  0870               	movf	USARTInit@baud_rate,w
 12106  1CB5  3A80               	xorlw	128	; case 128
 12107  1CB6  1903               	skipnz
 12108  1CB7  2C9B               	goto	l4017
 12109  1CB8  2CC8               	goto	l29
 12110  1CB9                     l5147:	
 12111                           
 12112                           ; Switch size 1, requested type "space"
 12113                           ; Number of cases is 1, Range of values is 0 to 0
 12114                           ; switch strategies available:
 12115                           ; Name         Instructions Cycles
 12116                           ; simple_byte            4     3 (average)
 12117                           ; direct_byte           11     8 (fixed)
 12118                           ; jumptable            260     6 (fixed)
 12119                           ;	Chosen strategy is simple_byte
 12120  1CB9  0870               	movf	USARTInit@baud_rate,w
 12121  1CBA  3A00               	xorlw	0	; case 0
 12122  1CBB  1903               	skipnz
 12123  1CBC  2C9D               	goto	l4019
 12124  1CBD  2CC8               	goto	l29
 12125  1CBE                     l5149:	
 12126                           
 12127                           ; Switch size 1, requested type "space"
 12128                           ; Number of cases is 1, Range of values is 128 to 128
 12129                           ; switch strategies available:
 12130                           ; Name         Instructions Cycles
 12131                           ; simple_byte            4     3 (average)
 12132                           ; direct_byte           14    11 (fixed)
 12133                           ; jumptable            263     9 (fixed)
 12134                           ;	Chosen strategy is simple_byte
 12135  1CBE  0870               	movf	USARTInit@baud_rate,w
 12136  1CBF  3A80               	xorlw	128	; case 128
 12137  1CC0  1903               	skipnz
 12138  1CC1  2C9F               	goto	l4021
 12139  1CC2  2CC8               	goto	l29
 12140  1CC3                     l5151:	
 12141                           
 12142                           ; Switch size 1, requested type "space"
 12143                           ; Number of cases is 1, Range of values is 64 to 64
 12144                           ; switch strategies available:
 12145                           ; Name         Instructions Cycles
 12146                           ; simple_byte            4     3 (average)
 12147                           ; direct_byte           14    11 (fixed)
 12148                           ; jumptable            263     9 (fixed)
 12149                           ;	Chosen strategy is simple_byte
 12150  1CC3  0870               	movf	USARTInit@baud_rate,w
 12151  1CC4  3A40               	xorlw	64	; case 64
 12152  1CC5  1903               	skipnz
 12153  1CC6  2CA1               	goto	l4023
 12154  1CC7  2CC8               	goto	l29
 12155  1CC8                     l29:	
 12156                           
 12157                           ;usart_pic16.c: 52: TXSTAbits.TX9 = 0;
 12158  1CC8  1683               	bsf	3,5	;RP0=1, select bank1
 12159  1CC9  1303               	bcf	3,6	;RP1=0, select bank1
 12160  1CCA  1318               	bcf	24,6	;volatile
 12161                           
 12162                           ;usart_pic16.c: 53: TXSTAbits.TXEN = 1;
 12163  1CCB  1698               	bsf	24,5	;volatile
 12164                           
 12165                           ;usart_pic16.c: 54: TXSTAbits.SYNC = 0;
 12166  1CCC  1218               	bcf	24,4	;volatile
 12167                           
 12168                           ;usart_pic16.c: 55: TXSTAbits.BRGH = 1;
 12169  1CCD  1518               	bsf	24,2	;volatile
 12170                           
 12171                           ;usart_pic16.c: 58: RCSTAbits.SPEN = 1;
 12172  1CCE  1283               	bcf	3,5	;RP0=0, select bank0
 12173  1CCF  1303               	bcf	3,6	;RP1=0, select bank0
 12174  1CD0  1798               	bsf	24,7	;volatile
 12175                           
 12176                           ;usart_pic16.c: 59: RCSTAbits.RX9 = 0;
 12177  1CD1  1318               	bcf	24,6	;volatile
 12178                           
 12179                           ;usart_pic16.c: 60: RCSTAbits.CREN = 1;
 12180  1CD2  1618               	bsf	24,4	;volatile
 12181                           
 12182                           ;usart_pic16.c: 61: RCSTAbits.ADDEN = 0;
 12183  1CD3  1198               	bcf	24,3	;volatile
 12184                           
 12185                           ;usart_pic16.c: 64: RCIE = 1;
 12186  1CD4  1683               	bsf	3,5	;RP0=1, select bank1
 12187  1CD5  1303               	bcf	3,6	;RP1=0, select bank1
 12188  1CD6  168C               	bsf	12,5	;volatile
 12189                           
 12190                           ;usart_pic16.c: 65: PEIE = 1;
 12191  1CD7  170B               	bsf	11,6	;volatile
 12192                           
 12193                           ;usart_pic16.c: 67: (GIE = 1);
 12194  1CD8  178B               	bsf	11,7	;volatile
 12195  1CD9  0008               	return
 12196  1CDA                     __end_of_USARTInit:	
 12197                           
 12198                           	psect	text44
 12199  1A0B                     __ptext44:	
 12200 ;; *************** function _Clear_Matrix *****************
 12201 ;; Defined at:
 12202 ;;		line 537 in file "teris_16f886.c"
 12203 ;; Parameters:    Size  Location     Type
 12204 ;;		None
 12205 ;; Auto vars:     Size  Location     Type
 12206 ;;		None
 12207 ;; Return value:  Size  Location     Type
 12208 ;;                  1    wreg      void 
 12209 ;; Registers used:
 12210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12211 ;; Tracked objects:
 12212 ;;		On entry : 0/0
 12213 ;;		On exit  : 0/0
 12214 ;;		Unchanged: 0/0
 12215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12216 ;;      Params:         0       0       0       0       0
 12217 ;;      Locals:         0       0       0       0       0
 12218 ;;      Temps:          0       0       0       0       0
 12219 ;;      Totals:         0       0       0       0       0
 12220 ;;Total ram usage:        0 bytes
 12221 ;; Hardware stack levels used:    1
 12222 ;; Hardware stack levels required when called:    5
 12223 ;; This function calls:
 12224 ;;		_memset
 12225 ;;		_printf_Screen
 12226 ;; This function is called by:
 12227 ;;		_main
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           
 12232                           ;psect for function _Clear_Matrix
 12233  1A0B                     _Clear_Matrix:	
 12234                           
 12235                           ;teris_16f886.c: 539: memset(&g_matrix88, 0, sizeof(MATRIX88));
 12236                           
 12237                           ;incstack = 0
 12238                           ; Regs used in _Clear_Matrix: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12239  1A0B  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
 12240  1A0C  00F0               	movwf	memset@p1
 12241  1A0D  3001               	movlw	1
 12242  1A0E  00F1               	movwf	memset@p1+1
 12243  1A0F  3000               	movlw	0
 12244  1A10  00F2               	movwf	memset@c
 12245  1A11  00F3               	movwf	memset@c+1
 12246  1A12  3040               	movlw	64
 12247  1A13  00F4               	movwf	memset@n
 12248  1A14  3000               	movlw	0
 12249  1A15  00F5               	movwf	memset@n+1
 12250  1A16  160A  158A  2237  160A  158A  	fcall	_memset
 12251                           
 12252                           ;teris_16f886.c: 540: printf_Screen();
 12253  1A1B  160A  158A  218A   	fcall	_printf_Screen
 12254  1A1E  0008               	return
 12255  1A1F                     __end_of_Clear_Matrix:	
 12256                           
 12257                           	psect	text45
 12258  198A                     __ptext45:	
 12259 ;; *************** function _printf_Screen *****************
 12260 ;; Defined at:
 12261 ;;		line 528 in file "teris_16f886.c"
 12262 ;; Parameters:    Size  Location     Type
 12263 ;;		None
 12264 ;; Auto vars:     Size  Location     Type
 12265 ;;		None
 12266 ;; Return value:  Size  Location     Type
 12267 ;;                  1    wreg      void 
 12268 ;; Registers used:
 12269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12270 ;; Tracked objects:
 12271 ;;		On entry : 0/0
 12272 ;;		On exit  : 0/0
 12273 ;;		Unchanged: 0/0
 12274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12275 ;;      Params:         0       0       0       0       0
 12276 ;;      Locals:         0       0       0       0       0
 12277 ;;      Temps:          0       0       0       0       0
 12278 ;;      Totals:         0       0       0       0       0
 12279 ;;Total ram usage:        0 bytes
 12280 ;; Hardware stack levels used:    1
 12281 ;; Hardware stack levels required when called:    4
 12282 ;; This function calls:
 12283 ;;		_printf_MATRIX88
 12284 ;; This function is called by:
 12285 ;;		_Clear_Matrix
 12286 ;;		_main
 12287 ;; This function uses a non-reentrant model
 12288 ;;
 12289                           
 12290                           
 12291                           ;psect for function _printf_Screen
 12292  198A                     _printf_Screen:	
 12293                           
 12294                           ;teris_16f886.c: 530: printf_MATRIX88(&g_matrix88);
 12295                           
 12296                           ;incstack = 0
 12297                           ; Regs used in _printf_Screen: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12298  198A  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
 12299  198B  120A  158A  266E   	fcall	_printf_MATRIX88
 12300  198E  0008               	return
 12301  198F                     __end_of_printf_Screen:	
 12302                           
 12303                           	psect	text46
 12304  0E6E                     __ptext46:	
 12305 ;; *************** function _printf_MATRIX88 *****************
 12306 ;; Defined at:
 12307 ;;		line 522 in file "teris_16f886.c"
 12308 ;; Parameters:    Size  Location     Type
 12309 ;;  matrix88        1    wreg     PTR const struct .
 12310 ;;		 -> g_matrix88(64), 
 12311 ;; Auto vars:     Size  Location     Type
 12312 ;;  matrix88        1    0[BANK0 ] PTR const struct .
 12313 ;;		 -> g_matrix88(64), 
 12314 ;;  matrix7219      8    1[BANK0 ] struct .
 12315 ;; Return value:  Size  Location     Type
 12316 ;;                  1    wreg      void 
 12317 ;; Registers used:
 12318 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12319 ;; Tracked objects:
 12320 ;;		On entry : 0/0
 12321 ;;		On exit  : 0/0
 12322 ;;		Unchanged: 0/0
 12323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12324 ;;      Params:         0       0       0       0       0
 12325 ;;      Locals:         0       9       0       0       0
 12326 ;;      Temps:          1       0       0       0       0
 12327 ;;      Totals:         1       9       0       0       0
 12328 ;;Total ram usage:       10 bytes
 12329 ;; Hardware stack levels used:    1
 12330 ;; Hardware stack levels required when called:    3
 12331 ;; This function calls:
 12332 ;;		_MATRIX88_to_MATRIX7219
 12333 ;;		_printf_MATRIX7219
 12334 ;; This function is called by:
 12335 ;;		_printf_Screen
 12336 ;; This function uses a non-reentrant model
 12337 ;;
 12338                           
 12339                           
 12340                           ;psect for function _printf_MATRIX88
 12341  0E6E                     _printf_MATRIX88:	
 12342                           
 12343                           ;incstack = 0
 12344                           ; Regs used in _printf_MATRIX88: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12345                           ;printf_MATRIX88@matrix88 stored from wreg
 12346  0E6E  1283               	bcf	3,5	;RP0=0, select bank0
 12347  0E6F  1303               	bcf	3,6	;RP1=0, select bank0
 12348  0E70  00A0               	movwf	printf_MATRIX88@matrix88
 12349                           
 12350                           ;teris_16f886.c: 524: MATRIX7219 matrix7219;
 12351                           ;teris_16f886.c: 525: MATRIX88_to_MATRIX7219(matrix88, &matrix7219);
 12352  0E71  3021               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
 12353  0E72  00F8               	movwf	??_printf_MATRIX88
 12354  0E73  0878               	movf	??_printf_MATRIX88,w
 12355  0E74  00F0               	movwf	MATRIX88_to_MATRIX7219@matrix7219
 12356  0E75  0820               	movf	printf_MATRIX88@matrix88,w
 12357  0E76  160A  158A  24DA  120A  158A  	fcall	_MATRIX88_to_MATRIX7219
 12358                           
 12359                           ;teris_16f886.c: 526: printf_MATRIX7219(&matrix7219);
 12360  0E7B  3021               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
 12361  0E7C  160A  118A  2002   	fcall	_printf_MATRIX7219
 12362  0E7F  0008               	return
 12363  0E80                     __end_of_printf_MATRIX88:	
 12364                           
 12365                           	psect	text47
 12366  1002                     __ptext47:	
 12367 ;; *************** function _printf_MATRIX7219 *****************
 12368 ;; Defined at:
 12369 ;;		line 474 in file "teris_16f886.c"
 12370 ;; Parameters:    Size  Location     Type
 12371 ;;  matrix          1    wreg     PTR const struct .
 12372 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12373 ;; Auto vars:     Size  Location     Type
 12374 ;;  matrix          1    4[COMMON] PTR const struct .
 12375 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12376 ;;  col             1    5[COMMON] unsigned char 
 12377 ;; Return value:  Size  Location     Type
 12378 ;;                  1    wreg      void 
 12379 ;; Registers used:
 12380 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12381 ;; Tracked objects:
 12382 ;;		On entry : 0/0
 12383 ;;		On exit  : 0/0
 12384 ;;		Unchanged: 0/0
 12385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12386 ;;      Params:         0       0       0       0       0
 12387 ;;      Locals:         2       0       0       0       0
 12388 ;;      Temps:          2       0       0       0       0
 12389 ;;      Totals:         4       0       0       0       0
 12390 ;;Total ram usage:        4 bytes
 12391 ;; Hardware stack levels used:    1
 12392 ;; Hardware stack levels required when called:    2
 12393 ;; This function calls:
 12394 ;;		_Write_Byte
 12395 ;; This function is called by:
 12396 ;;		_printf_MATRIX88
 12397 ;; This function uses a non-reentrant model
 12398 ;;
 12399                           
 12400                           
 12401                           ;psect for function _printf_MATRIX7219
 12402  1002                     _printf_MATRIX7219:	
 12403                           
 12404                           ;incstack = 0
 12405                           ; Regs used in _printf_MATRIX7219: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12406                           ;printf_MATRIX7219@matrix stored from wreg
 12407  1002  00F4               	movwf	printf_MATRIX7219@matrix
 12408                           
 12409                           ;teris_16f886.c: 476: uint8_t col;
 12410                           ;teris_16f886.c: 478: for (col = 0; col < 8; col++)
 12411  1003  01F5               	clrf	printf_MATRIX7219@col
 12412  1004                     L41:	
 12413  1004  3008               	movlw	8
 12414  1005  0275               	subwf	printf_MATRIX7219@col,w
 12415  1006  1803               	btfsc	3,0
 12416  1007  0008               	return
 12417                           
 12418                           ;teris_16f886.c: 479: {
 12419                           ;teris_16f886.c: 480: Write_Byte(col + 1, matrix->col[col]);
 12420  1008  0875               	movf	printf_MATRIX7219@col,w
 12421  1009  0774               	addwf	printf_MATRIX7219@matrix,w
 12422  100A  00F2               	movwf	??_printf_MATRIX7219
 12423  100B  0872               	movf	??_printf_MATRIX7219,w
 12424  100C  0084               	movwf	4
 12425  100D  1383               	bcf	3,7	;select IRP bank0
 12426  100E  0800               	movf	0,w
 12427  100F  00F3               	movwf	??_printf_MATRIX7219+1
 12428  1010  0873               	movf	??_printf_MATRIX7219+1,w
 12429  1011  00F0               	movwf	Write_Byte@myValue
 12430  1012  0875               	movf	printf_MATRIX7219@col,w
 12431  1013  3E01               	addlw	1
 12432  1014  160A  158A  21F9  160A  118A  	fcall	_Write_Byte
 12433  1019  3001               	movlw	1
 12434  101A  00F2               	movwf	??_printf_MATRIX7219
 12435  101B  0872               	movf	??_printf_MATRIX7219,w
 12436  101C  07F5               	addwf	printf_MATRIX7219@col,f
 12437  101D  2804               	goto	L41
 12438  101E                     __end_of_printf_MATRIX7219:	
 12439                           
 12440                           	psect	text48
 12441  19F9                     __ptext48:	
 12442 ;; *************** function _Write_Byte *****************
 12443 ;; Defined at:
 12444 ;;		line 442 in file "teris_16f886.c"
 12445 ;; Parameters:    Size  Location     Type
 12446 ;;  myColumn        1    wreg     unsigned char 
 12447 ;;  myValue         1    0[COMMON] unsigned char 
 12448 ;; Auto vars:     Size  Location     Type
 12449 ;;  myColumn        1    1[COMMON] unsigned char 
 12450 ;; Return value:  Size  Location     Type
 12451 ;;                  1    wreg      void 
 12452 ;; Registers used:
 12453 ;;		wreg, status,2, status,0, pclath, cstack
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12459 ;;      Params:         1       0       0       0       0
 12460 ;;      Locals:         1       0       0       0       0
 12461 ;;      Temps:          0       0       0       0       0
 12462 ;;      Totals:         2       0       0       0       0
 12463 ;;Total ram usage:        2 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; Hardware stack levels required when called:    1
 12466 ;; This function calls:
 12467 ;;		_SPI1_write
 12468 ;; This function is called by:
 12469 ;;		_printf_MATRIX7219
 12470 ;; This function uses a non-reentrant model
 12471 ;;
 12472                           
 12473                           
 12474                           ;psect for function _Write_Byte
 12475  19F9                     _Write_Byte:	
 12476                           
 12477                           ;incstack = 0
 12478                           ; Regs used in _Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 12479                           ;Write_Byte@myColumn stored from wreg
 12480  19F9  00F1               	movwf	Write_Byte@myColumn
 12481                           
 12482                           ;teris_16f886.c: 443: RA2 = 0;
 12483  19FA  1283               	bcf	3,5	;RP0=0, select bank0
 12484  19FB  1303               	bcf	3,6	;RP1=0, select bank0
 12485  19FC  1105               	bcf	5,2	;volatile
 12486                           
 12487                           ;teris_16f886.c: 444: SPI1_write(myColumn);
 12488  19FD  0871               	movf	Write_Byte@myColumn,w
 12489  19FE  160A  158A  2188  160A  158A  	fcall	_SPI1_write
 12490                           
 12491                           ;teris_16f886.c: 445: SPI1_write(myValue);
 12492  1A03  0870               	movf	Write_Byte@myValue,w
 12493  1A04  160A  158A  2188   	fcall	_SPI1_write
 12494                           
 12495                           ;teris_16f886.c: 446: RA2 = 1;
 12496  1A07  1283               	bcf	3,5	;RP0=0, select bank0
 12497  1A08  1303               	bcf	3,6	;RP1=0, select bank0
 12498  1A09  1505               	bsf	5,2	;volatile
 12499  1A0A  0008               	return
 12500  1A0B                     __end_of_Write_Byte:	
 12501                           
 12502                           	psect	text49
 12503  1988                     __ptext49:	
 12504 ;; *************** function _SPI1_write *****************
 12505 ;; Defined at:
 12506 ;;		line 384 in file "teris_16f886.c"
 12507 ;; Parameters:    Size  Location     Type
 12508 ;;  data            1    wreg     unsigned char 
 12509 ;; Auto vars:     Size  Location     Type
 12510 ;;  data            1    0[COMMON] unsigned char 
 12511 ;; Return value:  Size  Location     Type
 12512 ;;                  1    wreg      void 
 12513 ;; Registers used:
 12514 ;;		wreg
 12515 ;; Tracked objects:
 12516 ;;		On entry : 0/0
 12517 ;;		On exit  : 0/0
 12518 ;;		Unchanged: 0/0
 12519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12520 ;;      Params:         0       0       0       0       0
 12521 ;;      Locals:         0       0       0       0       0
 12522 ;;      Temps:          0       0       0       0       0
 12523 ;;      Totals:         0       0       0       0       0
 12524 ;;Total ram usage:        0 bytes
 12525 ;; Hardware stack levels used:    1
 12526 ;; This function calls:
 12527 ;;		Nothing
 12528 ;; This function is called by:
 12529 ;;		_Write_Byte
 12530 ;;		_max7219_init1
 12531 ;; This function uses a non-reentrant model
 12532 ;;
 12533                           
 12534                           
 12535                           ;psect for function _SPI1_write
 12536  1988                     _SPI1_write:	
 12537                           
 12538                           ;incstack = 0
 12539                           ; Regs used in _SPI1_write: [wreg]
 12540  1988  0008               	return
 12541  1989                     __end_of_SPI1_write:	
 12542                           
 12543                           	psect	text50
 12544  1CDA                     __ptext50:	
 12545 ;; *************** function _MATRIX88_to_MATRIX7219 *****************
 12546 ;; Defined at:
 12547 ;;		line 483 in file "teris_16f886.c"
 12548 ;; Parameters:    Size  Location     Type
 12549 ;;  matrix88        1    wreg     PTR const struct .
 12550 ;;		 -> g_matrix88(64), 
 12551 ;;  matrix7219      1    0[COMMON] PTR struct .
 12552 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12553 ;; Auto vars:     Size  Location     Type
 12554 ;;  matrix88        1    4[COMMON] PTR const struct .
 12555 ;;		 -> g_matrix88(64), 
 12556 ;;  row             1    6[COMMON] unsigned char 
 12557 ;;  col             1    7[COMMON] unsigned char 
 12558 ;;  mask            1    5[COMMON] unsigned char 
 12559 ;; Return value:  Size  Location     Type
 12560 ;;                  1    wreg      void 
 12561 ;; Registers used:
 12562 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12563 ;; Tracked objects:
 12564 ;;		On entry : 0/0
 12565 ;;		On exit  : 0/0
 12566 ;;		Unchanged: 0/0
 12567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12568 ;;      Params:         1       0       0       0       0
 12569 ;;      Locals:         4       0       0       0       0
 12570 ;;      Temps:          3       0       0       0       0
 12571 ;;      Totals:         8       0       0       0       0
 12572 ;;Total ram usage:        8 bytes
 12573 ;; Hardware stack levels used:    1
 12574 ;; This function calls:
 12575 ;;		Nothing
 12576 ;; This function is called by:
 12577 ;;		_printf_MATRIX88
 12578 ;; This function uses a non-reentrant model
 12579 ;;
 12580                           
 12581                           
 12582                           ;psect for function _MATRIX88_to_MATRIX7219
 12583  1CDA                     _MATRIX88_to_MATRIX7219:	
 12584                           
 12585                           ;incstack = 0
 12586                           ; Regs used in _MATRIX88_to_MATRIX7219: [wreg-fsr0h+status,2+status,0]
 12587                           ;MATRIX88_to_MATRIX7219@matrix88 stored from wreg
 12588  1CDA  00F4               	movwf	MATRIX88_to_MATRIX7219@matrix88
 12589                           
 12590                           ;teris_16f886.c: 485: uint8_t mask = 0x80;
 12591  1CDB  3080               	movlw	128
 12592  1CDC  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12593  1CDD  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12594  1CDE  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
 12595                           
 12596                           ;teris_16f886.c: 487: for(uint8_t col = 0; col < 8; col++)
 12597  1CDF  01F7               	clrf	MATRIX88_to_MATRIX7219@col
 12598  1CE0                     L42:	
 12599  1CE0  3008               	movlw	8
 12600  1CE1  0277               	subwf	MATRIX88_to_MATRIX7219@col,w
 12601  1CE2  1803               	btfsc	3,0
 12602  1CE3  0008               	return
 12603                           
 12604                           ;teris_16f886.c: 488: {
 12605                           ;teris_16f886.c: 489: mask = 0x80;
 12606  1CE4  3080               	movlw	128
 12607  1CE5  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12608  1CE6  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12609  1CE7  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
 12610                           
 12611                           ;teris_16f886.c: 490: matrix7219->col[col] = 0;
 12612  1CE8  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 12613  1CE9  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
 12614  1CEA  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12615  1CEB  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12616  1CEC  0084               	movwf	4
 12617  1CED  1383               	bcf	3,7	;select IRP bank0
 12618  1CEE  0180               	clrf	0
 12619                           
 12620                           ;teris_16f886.c: 491: for(uint8_t row = 0; row < 8; row++)
 12621  1CEF  01F6               	clrf	MATRIX88_to_MATRIX7219@row
 12622  1CF0  3008               	movlw	8
 12623  1CF1  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
 12624  1CF2  1803               	btfsc	3,0
 12625  1CF3  2D1D               	goto	l3383
 12626  1CF4                     l3373:	
 12627                           
 12628                           ;teris_16f886.c: 492: {
 12629                           ;teris_16f886.c: 493: if(matrix88->data[row][col] == 1)
 12630  1CF4  0876               	movf	MATRIX88_to_MATRIX7219@row,w
 12631  1CF5  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12632  1CF6  3002               	movlw	2
 12633  1CF7                     u4035:	
 12634  1CF7  1003               	clrc
 12635  1CF8  0DF1               	rlf	??_MATRIX88_to_MATRIX7219,f
 12636  1CF9  3EFF               	addlw	-1
 12637  1CFA  1D03               	skipz
 12638  1CFB  2CF7               	goto	u4035
 12639  1CFC  1003               	clrc
 12640  1CFD  0D71               	rlf	??_MATRIX88_to_MATRIX7219,w
 12641  1CFE  0774               	addwf	MATRIX88_to_MATRIX7219@matrix88,w
 12642  1CFF  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
 12643  1D00  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 12644  1D01  0772               	addwf	??_MATRIX88_to_MATRIX7219+1,w
 12645  1D02  00F3               	movwf	??_MATRIX88_to_MATRIX7219+2
 12646  1D03  0873               	movf	??_MATRIX88_to_MATRIX7219+2,w
 12647  1D04  0084               	movwf	4
 12648  1D05  1783               	bsf	3,7	;select IRP bank2
 12649  1D06  0300               	decf	0,w
 12650  1D07  1D03               	btfss	3,2
 12651  1D08  2D13               	goto	l3377
 12652                           
 12653                           ;teris_16f886.c: 494: {
 12654                           ;teris_16f886.c: 495: matrix7219->col[col] |= mask;
 12655  1D09  0875               	movf	MATRIX88_to_MATRIX7219@mask,w
 12656  1D0A  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12657  1D0B  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 12658  1D0C  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
 12659  1D0D  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
 12660  1D0E  0872               	movf	??_MATRIX88_to_MATRIX7219+1,w
 12661  1D0F  0084               	movwf	4
 12662  1D10  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12663  1D11  1383               	bcf	3,7	;select IRP bank0
 12664  1D12  0480               	iorwf	0,f
 12665  1D13                     l3377:	
 12666                           
 12667                           ;teris_16f886.c: 496: }
 12668                           ;teris_16f886.c: 497: mask >>= 1;
 12669  1D13  1003               	clrc
 12670  1D14  0CF5               	rrf	MATRIX88_to_MATRIX7219@mask,f
 12671  1D15  3001               	movlw	1
 12672  1D16  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12673  1D17  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12674  1D18  07F6               	addwf	MATRIX88_to_MATRIX7219@row,f
 12675  1D19  3008               	movlw	8
 12676  1D1A  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
 12677  1D1B  1C03               	skipc
 12678  1D1C  2CF4               	goto	l3373
 12679  1D1D                     l3383:	
 12680  1D1D  3001               	movlw	1
 12681  1D1E  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12682  1D1F  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12683  1D20  07F7               	addwf	MATRIX88_to_MATRIX7219@col,f
 12684  1D21  2CE0               	goto	L42
 12685  1D22                     __end_of_MATRIX88_to_MATRIX7219:	
 12686                           
 12687                           	psect	text51
 12688  1A37                     __ptext51:	
 12689 ;; *************** function _memset *****************
 12690 ;; Defined at:
 12691 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
 12692 ;; Parameters:    Size  Location     Type
 12693 ;;  p1              2    0[COMMON] PTR void 
 12694 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
 12695 ;;  c               2    2[COMMON] int 
 12696 ;;  n               2    4[COMMON] unsigned int 
 12697 ;; Auto vars:     Size  Location     Type
 12698 ;;  p               2    6[COMMON] PTR unsigned char 
 12699 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
 12700 ;; Return value:  Size  Location     Type
 12701 ;;                  2    0[COMMON] PTR void 
 12702 ;; Registers used:
 12703 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12704 ;; Tracked objects:
 12705 ;;		On entry : 0/0
 12706 ;;		On exit  : 0/0
 12707 ;;		Unchanged: 0/0
 12708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12709 ;;      Params:         6       0       0       0       0
 12710 ;;      Locals:         2       0       0       0       0
 12711 ;;      Temps:          0       0       0       0       0
 12712 ;;      Totals:         8       0       0       0       0
 12713 ;;Total ram usage:        8 bytes
 12714 ;; Hardware stack levels used:    1
 12715 ;; This function calls:
 12716 ;;		Nothing
 12717 ;; This function is called by:
 12718 ;;		_Clear_Matrix
 12719 ;;		_delete_row
 12720 ;; This function uses a non-reentrant model
 12721 ;;
 12722                           
 12723                           
 12724                           ;psect for function _memset
 12725  1A37                     _memset:	
 12726                           
 12727                           ;incstack = 0
 12728                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
 12729  1A37  0870               	movf	memset@p1,w
 12730  1A38  00F6               	movwf	memset@p
 12731  1A39  0871               	movf	memset@p1+1,w
 12732  1A3A  00F7               	movwf	memset@p+1
 12733  1A3B                     l3393:	
 12734  1A3B  3001               	movlw	1
 12735  1A3C  02F4               	subwf	memset@n,f
 12736  1A3D  3000               	movlw	0
 12737  1A3E  1C03               	skipc
 12738  1A3F  03F5               	decf	memset@n+1,f
 12739  1A40  02F5               	subwf	memset@n+1,f
 12740  1A41  0A74               	incf	memset@n,w
 12741  1A42  1903               	btfsc	3,2
 12742  1A43  0A75               	incf	memset@n+1,w
 12743  1A44  1903               	btfsc	3,2
 12744  1A45  0008               	return
 12745  1A46  0876               	movf	memset@p,w
 12746  1A47  0084               	movwf	4
 12747  1A48  1383               	bcf	3,7
 12748  1A49  1877               	btfsc	memset@p+1,0
 12749  1A4A  1783               	bsf	3,7
 12750  1A4B  0872               	movf	memset@c,w
 12751  1A4C  0080               	movwf	0
 12752  1A4D  3001               	movlw	1
 12753  1A4E  07F6               	addwf	memset@p,f
 12754  1A4F  1803               	skipnc
 12755  1A50  0AF7               	incf	memset@p+1,f
 12756  1A51  2A3B               	goto	l3393
 12757  1A52                     __end_of_memset:	
 12758                           ;	Return value of _memset is never used
 12759                           
 12760  007E                     btemp	set	126	;btemp
 12761  007E                     wtemp	set	126
 12762  007E                     wtemp0	set	126
 12763  0080                     wtemp1	set	128
 12764  0082                     wtemp2	set	130
 12765  0084                     wtemp3	set	132
 12766  0086                     wtemp4	set	134
 12767  0088                     wtemp5	set	136
 12768  007F                     wtemp6	set	127
 12769  007E                     ttemp	set	126
 12770  007E                     ttemp0	set	126
 12771  0081                     ttemp1	set	129
 12772  0084                     ttemp2	set	132
 12773  0087                     ttemp3	set	135
 12774  007F                     ttemp4	set	127
 12775  007E                     ltemp	set	126
 12776  007E                     ltemp0	set	126
 12777  0082                     ltemp1	set	130
 12778  0086                     ltemp2	set	134
 12779  0080                     ltemp3	set	128


Data Sizes:
    Strings     1214
    Constant    414
    Data        38
    BSS         144
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     74      80
    BANK1            80     73      80
    BANK3            96      0      75
    BANK2            96      0      96

Pointer List with Targets:

    is_right_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_left_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    memset@p1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memset@p	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    sprintf$669	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_65(CODE[17]), STR_64(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_63(CODE[14]), STR_61(CODE[24]), STR_59(CODE[35]), STR_58(CODE[36]), 
		 -> STR_57(CODE[35]), STR_56(CODE[36]), STR_55(CODE[35]), STR_54(CODE[36]), 
		 -> STR_53(CODE[23]), STR_52(CODE[35]), STR_51(CODE[36]), STR_50(CODE[35]), 
		 -> STR_49(CODE[36]), STR_48(CODE[35]), STR_47(CODE[38]), STR_46(CODE[16]), 
		 -> STR_45(CODE[37]), STR_44(CODE[36]), STR_42(CODE[17]), STR_41(CODE[33]), 
		 -> STR_40(CODE[52]), STR_39(CODE[22]), STR_38(CODE[17]), STR_37(CODE[16]), 
		 -> STR_36(CODE[11]), STR_35(CODE[26]), STR_34(CODE[26]), STR_30(CODE[30]), 
		 -> STR_29(CODE[30]), STR_28(CODE[30]), STR_25(CODE[24]), STR_24(CODE[24]), 
		 -> STR_22(CODE[25]), STR_11(CODE[42]), STR_10(CODE[30]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 32
		 -> g_debug(BANK3[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    g_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    find_best_solution@temp_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_holes_after_merge@matrix	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    get_high_after_merge@matrix	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_high@matrix	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    left_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    left_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    evaluate@matrix	PTR const struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge1@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    merge1@matrix88_in	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge1@matrix88_out	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    clear@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    clear@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    fall_off@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    fall_off@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_right_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_left_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_valid@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_valid@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    hit_land@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    hit_land@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    is_row_empty@matrix	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    delete_matrix@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memcpy	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    delete_row@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    is_row_full@matrix	PTR const struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memset	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    printf_MATRIX88@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    printf_console_MATRIX88@matrix	PTR const struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    MATRIX88_to_MATRIX7219@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    MATRIX88_to_MATRIX7219@matrix7219	PTR struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    printf_MATRIX7219@matrix	PTR const struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    sp__get_MATRIX44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_console_cur_MATRIX44@matrix	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_console_MATRIX44@matrix	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    debug_int3@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_41(CODE[33]), STR_40(CODE[52]), 

    debug_int2@f	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_59(CODE[35]), STR_58(CODE[36]), STR_57(CODE[35]), STR_56(CODE[36]), 
		 -> STR_55(CODE[35]), STR_54(CODE[36]), STR_52(CODE[35]), STR_51(CODE[36]), 
		 -> STR_50(CODE[35]), STR_49(CODE[36]), STR_48(CODE[35]), STR_47(CODE[38]), 
		 -> STR_45(CODE[37]), STR_44(CODE[36]), STR_35(CODE[26]), STR_34(CODE[26]), 
		 -> STR_30(CODE[30]), STR_29(CODE[30]), STR_28(CODE[30]), STR_25(CODE[24]), 
		 -> STR_24(CODE[24]), STR_11(CODE[42]), 

    debug_int1@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_63(CODE[14]), STR_61(CODE[24]), STR_53(CODE[23]), STR_46(CODE[16]), 
		 -> STR_42(CODE[17]), STR_39(CODE[22]), STR_38(CODE[17]), STR_37(CODE[16]), 
		 -> STR_36(CODE[11]), STR_22(CODE[25]), STR_10(CODE[30]), 

    debug_line@str	PTR const unsigned char  size(2) Largest target is 45
		 -> STR_62(CODE[13]), STR_60(CODE[13]), STR_43(CODE[45]), STR_33(CODE[20]), 
		 -> STR_32(CODE[19]), STR_31(CODE[6]), STR_27(CODE[35]), STR_26(CODE[8]), 
		 -> STR_23(CODE[35]), STR_21(CODE[21]), STR_20(CODE[1]), STR_17(CODE[29]), 
		 -> STR_16(CODE[21]), STR_15(CODE[1]), STR_12(CODE[21]), STR_9(CODE[21]), 
		 -> STR_8(CODE[1]), STR_5(CODE[29]), 

    debug_str@str	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_19(CODE[2]), STR_18(CODE[2]), STR_14(CODE[2]), STR_13(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[2]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 45
		 -> STR_62(CODE[13]), STR_60(CODE[13]), STR_43(CODE[45]), STR_33(CODE[20]), 
		 -> STR_32(CODE[19]), STR_31(CODE[6]), STR_27(CODE[35]), STR_26(CODE[8]), 
		 -> STR_23(CODE[35]), STR_21(CODE[21]), STR_20(CODE[1]), STR_19(CODE[2]), 
		 -> STR_18(CODE[2]), STR_17(CODE[29]), STR_16(CODE[21]), STR_15(CODE[1]), 
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_9(CODE[21]), 
		 -> STR_8(CODE[1]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[29]), 
		 -> STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), g_debug(BANK3[32]), 
		 -> STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    _main->_printf_console_MATRIX88
    _find_best_solution->_printf_console_MATRIX88
    _is_right_boundary->_debug_line
    _printf_console_cur_MATRIX44->_printf_console_MATRIX44
    _printf_console_MATRIX44->_debug_line
    _printf_console_MATRIX44->_debug_str
    _printf_console_Screen->_printf_console_MATRIX88
    _printf_console_MATRIX88->_debug_line
    _printf_console_MATRIX88->_debug_str
    _debug_str->_USARTWriteString
    _merge1->_memcpy
    _is_left_boundary->_debug_line
    _debug_line->_USARTWriteString
    _delete_matrix->_delete_row
    _delete_row->_memcpy
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USARTWriteString->_USARTWriteChar
    _char_info_index_rand->___awmod
    _rand->___lmul
    _printf_Screen->_printf_MATRIX88
    _printf_MATRIX88->_MATRIX88_to_MATRIX7219
    _printf_MATRIX7219->_Write_Byte

Critical Paths under _main in BANK0

    _main->_find_best_solution
    _hit_land->_debug_int2
    _find_best_solution->_get_holes_after_merge
    _right_most->_debug_int1
    _printf_console_cur_MATRIX44->_printf_console_MATRIX44
    _left_most->_debug_int1
    _is_valid->_debug_int2
    _get_holes_after_merge->_debug_int3
    _get_high_after_merge->_debug_int3
    _debug_int3->_sprintf
    _get_high->_debug_int1
    _fall_off->_debug_int2
    _debug_int2->_sprintf
    _evaluate->_debug_int1
    _delete_matrix->_debug_int1
    _debug_int1->_sprintf
    _char_info_index_rand->___awmod
    ___awmod->_rand
    _printf_Screen->_printf_MATRIX88

Critical Paths under _main in BANK1

    _main->_find_best_solution

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    12      4  149943
                                             58 BANK0     16    12      4
                       _Clear_Matrix
                          _USARTInit
                             ___bmul
               _char_info_index_rand
                              _clear
                         _debug_int1
                         _debug_line
                      _delete_matrix
                 _find_best_solution
                           _hit_land
                              _merge
                      _printf_Screen
            _printf_console_MATRIX88
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _merge                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _hit_land                                            11     7      4   11266
                                             37 BANK0     11     7      4
                         _debug_int2
                         _debug_line
 ---------------------------------------------------------------------------------
 (1) _find_best_solution                                  80    80      0  115009
                                             51 BANK0      7     7      0
                                              0 BANK1     73    73      0
                             ___bmul
                         _debug_int1
                         _debug_int2
                         _debug_line
                      _delete_matrix
                           _evaluate
                           _fall_off
                           _get_high
               _get_high_after_merge
              _get_holes_after_merge
                           _is_valid
                          _left_most
                             _merge1
            _printf_console_MATRIX44
            _printf_console_MATRIX88
              _printf_console_Screen
        _printf_console_cur_MATRIX44
                         _right_most
 ---------------------------------------------------------------------------------
 (2) _right_most                                           6     3      3    8878
                                             35 BANK0      6     3      3
                         _debug_int1
                  _is_right_boundary
 ---------------------------------------------------------------------------------
 (3) _is_right_boundary                                   10     7      3    1881
                                              5 COMMON     7     4      3
                                              0 BANK0      3     3      0
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _printf_console_cur_MATRIX44                         13    12      1    3731
                                             11 COMMON     1     0      1
                                              9 BANK0     12    12      0
                             ___bmul
            _printf_console_MATRIX44
 ---------------------------------------------------------------------------------
 (3) _printf_console_MATRIX44                             15    12      3    3206
                                              5 COMMON     6     3      3
                                              0 BANK0      9     9      0
                         _debug_line
                          _debug_str
 ---------------------------------------------------------------------------------
 (2) _printf_console_Screen                                0     0      0    2841
            _printf_console_MATRIX88
 ---------------------------------------------------------------------------------
 (1) _printf_console_MATRIX88                              9     7      2    2841
                                              5 COMMON     9     7      2
                         _debug_line
                          _debug_str
 ---------------------------------------------------------------------------------
 (2) _debug_str                                            2     0      2     937
                                              3 COMMON     2     0      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _merge1                                              14     9      5    1128
                                              0 BANK0     14     9      5
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _left_most                                            5     2      3    8878
                                             35 BANK0      5     2      3
                         _debug_int1
                   _is_left_boundary
 ---------------------------------------------------------------------------------
 (3) _is_left_boundary                                    11     8      3    1881
                                              5 COMMON     8     5      3
                                              0 BANK0      3     3      0
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _is_valid                                            11     7      4   11398
                                             37 BANK0     11     7      4
                         _debug_int2
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _debug_line                                           2     0      2    1573
                                              3 COMMON     2     0      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _get_holes_after_merge                               12    12      0   14004
                                             39 BANK0     12    12      0
                         _debug_int1
                         _debug_int3
 ---------------------------------------------------------------------------------
 (2) _get_high_after_merge                                 9     7      2    6425
                                             39 BANK0      9     7      2
                         _debug_int3
 ---------------------------------------------------------------------------------
 (3) _debug_int3                                           8     0      8    6082
                                             31 BANK0      8     0      8
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _get_high                                             4     4      0    7133
                                             35 BANK0      4     4      0
                         _debug_int1
                       _is_row_empty
 ---------------------------------------------------------------------------------
 (3) _is_row_empty                                         6     5      1     192
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (2) _fall_off                                            11     7      4    9738
                                             37 BANK0     11     7      4
                         _debug_int2
 ---------------------------------------------------------------------------------
 (2) _debug_int2                                           6     0      6    9134
                                             31 BANK0      6     0      6
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _evaluate                                            12    10      2    7191
                                             35 BANK0     12    10      2
                         _debug_int1
 ---------------------------------------------------------------------------------
 (2) _delete_matrix                                        6     4      2    8502
                                             35 BANK0      6     4      2
                         _debug_int1
                         _delete_row
                        _is_row_full
 ---------------------------------------------------------------------------------
 (3) _is_row_full                                          9     6      3     193
                                              0 COMMON     9     6      3
 ---------------------------------------------------------------------------------
 (3) _delete_row                                          10     7      3    1232
                                             11 COMMON     3     0      3
                                              0 BANK0      7     7      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6     388
                                              0 COMMON    11     5      6
 ---------------------------------------------------------------------------------
 (3) _debug_int1                                           4     0      4    6780
                                             31 BANK0      4     0      4
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             35    27      8    4973
                                              0 BANK0     31    23      8
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     738
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     480
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     405
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     0      2     597
                                              1 COMMON     2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _clear                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _char_info_index_rand                                 0     0      0     706
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     198
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     508
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      75
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Clear_Matrix                                         0     0      0    1047
                             _memset
                      _printf_Screen
 ---------------------------------------------------------------------------------
 (1) _printf_Screen                                        0     0      0     683
                    _printf_MATRIX88
 ---------------------------------------------------------------------------------
 (2) _printf_MATRIX88                                     10    10      0     683
                                              8 COMMON     1     1      0
                                              0 BANK0      9     9      0
             _MATRIX88_to_MATRIX7219
                  _printf_MATRIX7219
 ---------------------------------------------------------------------------------
 (3) _printf_MATRIX7219                                    4     4      0     236
                                              2 COMMON     4     4      0
                         _Write_Byte
 ---------------------------------------------------------------------------------
 (4) _Write_Byte                                           2     1      1      97
                                              0 COMMON     2     1      1
                         _SPI1_write
 ---------------------------------------------------------------------------------
 (5) _SPI1_write                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _MATRIX88_to_MATRIX7219                               8     7      1     351
                                              0 COMMON     8     7      1
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     364
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Clear_Matrix
     _memset
     _printf_Screen
       _printf_MATRIX88
         _MATRIX88_to_MATRIX7219
         _printf_MATRIX7219
           _Write_Byte
             _SPI1_write
   _USARTInit
   ___bmul
   _char_info_index_rand
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _clear
   _debug_int1
     _USARTWriteString
       _USARTWriteChar
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _debug_line
     _USARTWriteString
       _USARTWriteChar
   _delete_matrix
     _debug_int1
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _delete_row
       _memcpy
       _memset
     _is_row_full
   _find_best_solution
     ___bmul
     _debug_int1
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_int2
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _delete_matrix
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _delete_row
         _memcpy
         _memset
       _is_row_full
     _evaluate
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _fall_off
       _debug_int2
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _get_high
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_row_empty
     _get_high_after_merge
       _debug_int3
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _get_holes_after_merge
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _debug_int3
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _is_valid
       _debug_int2
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _debug_line
         _USARTWriteString
           _USARTWriteChar
     _left_most
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_left_boundary
         _debug_line
           _USARTWriteString
             _USARTWriteChar
     _merge1
       _memcpy
     _printf_console_MATRIX44
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
     _printf_console_MATRIX88
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
     _printf_console_Screen
       _printf_console_MATRIX88
         _debug_line
           _USARTWriteString
             _USARTWriteChar
         _debug_str
           _USARTWriteString
             _USARTWriteChar
     _printf_console_cur_MATRIX44
       ___bmul
       _printf_console_MATRIX44
         _debug_line
           _USARTWriteString
             _USARTWriteChar
         _debug_str
           _USARTWriteString
             _USARTWriteChar
     _right_most
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_right_boundary
         _debug_line
           _USARTWriteString
             _USARTWriteChar
   _hit_land
     _debug_int2
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_line
       _USARTWriteString
         _USARTWriteChar
   _merge
   _printf_Screen
     _printf_MATRIX88
       _MATRIX88_to_MATRIX7219
       _printf_MATRIX7219
         _Write_Byte
           _SPI1_write
   _printf_console_MATRIX88
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _debug_str
       _USARTWriteString
         _USARTWriteChar
   _srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      4B       9       78.1%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      60      11      100.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     49      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4A      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     159      12        0.0%
ABS                  0      0     159       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Aug 27 02:56:54 2016

                          __CFG_CP$ON 0000                                     pc 0002  
                      ___bmul@product 0072         get_holes_after_merge@num_hole 004D  
                                  l36 1990                                    l29 1CC8  
                         __CFG_CPD$ON 0000                     merge1@matrix88_in 0023  
      __end_of_MATRIX88_to_MATRIX7219 1D22                                    fsr 0004  
                 ___wmul@multiplicand 0072                    USARTInit@baud_rate 0070  
               ?_char_info_index_rand 0070                           get_high@row 0046  
                         __CFG_LVP$ON 0000                                   l322 11CC  
                                 l404 0108                                   l511 02F6  
                                 l415 00FF                                   l513 02F8  
                                 l514 02FA                                   l515 02FC  
                                 l380 1BE5                                   l517 0317  
                                 l373 1B82                                   l534 03F4  
                                 l631 0798                                   l527 03BE  
                                 l720 1A5C                                   l609 06A3  
                                 l538 03F6                                   l539 03F7  
                                 l564 04F2                                   l573 0542  
                                 l593 0634                                   l569 051A  
                                 _GIE 005F                                   _RA1 0029  
                                 _RA2 002A                    merge1@matrix88_out 0024  
                                 fsr0 0004                                   indf 0000  
                        ___awmod@sign 002C                          __CFG_IESO$ON 0000  
                         _sprintf$662 002B                           _sprintf$663 002D  
                         _sprintf$669 002F                        is_row_full@col 0078  
                      is_row_full@row 0072                                  l3003 1BB6  
                                l3005 1BC4                                  l3013 1BDD  
                                l3009 1BD2                                  l3113 0466  
                                l3105 044C                                  l3041 0331  
                                l3033 0301                                  l4011 1DFA  
                                l4003 1DE7                                  l3123 0487  
                                l3115 0473                                  l4021 1C9F  
                                l3221 0603                                  l3213 05DE  
                                l3205 05C7                                  l3141 04DA  
                                l3109 045B                                  l3037 031D  
                                l3029 02F1                                  l4023 1CA1  
                                l4007 1DF2                                  l3207 05CB  
                                l3119 047E                                  l3127 048C  
                                l4111 1283                                  l4017 1C9B  
                                l3313 073D                                  l3305 06E5  
                                l3225 0622                                  l3145 04E6  
                                l3129 04B8                                  l3057 038E  
                                l3049 0370                                  l5001 17C1  
                                l4121 12CF                                  l4105 127D  
                                l4019 1C9D                                  l4027 1CA6  
                                l3331 07A5                                  l3307 0712  
                                l3323 0776                                  l3227 0626  
                                l3219 05FF                                  l3083 040E  
                                l3075 03F0                                  l3403 000B  
                                l5011 17FC                                  l3317 0750  
                                l3093 0422                                  l3077 03F9  
                                l3069 03BD                                  l3501 1B7D  
                                l4133 1307                                  l5021 0196  
                                l3327 0781                                  l3239 063D  
                                l3255 0667                                  l3263 067D  
                                l3183 056A                                  l3087 041D  
                                l5023 019B                                  l3273 0697  
                                l3249 0659                                  l3193 0592  
                                l3185 0579                                  l3097 042D  
                                l3089 041F                                  l3337 02C9  
                                l3425 0F17                                  l3601 106B  
                                l5009 17F5                                  l4129 12FC  
                                l4137 130D                                  l4163 1E49  
                                l4155 1E0A                                  l3283 06B0  
                                l3267 0682                                  l3099 043A  
                                l3339 07BD                                  l3531 1B05  
                                l3443 0FE4                                  l3419 0F11  
                                l5035 018D                                  l3373 1CF4  
                                l3189 0586                                  l3541 1B24  
                                l3701 13EF                                  l3437 0FD0  
                                l3605 1076                                  l5053 0281  
                                l3383 1D1D                                  l5151 1CC3  
                                l3615 1C5C                                  l4159 1E41  
                                l3199 05A6                                  l3551 1F4B  
                                l4183 1EE0                                  l5039 0210  
                                l3393 1A3B                                  l3377 1D13  
                                l5145 1CB4                                  l2921 1A94  
                                l3289 06BF                                  l3537 1B1C  
                                l3705 13F5                                  l3449 0FF8  
                                l3609 107C                                  l5147 1CB9  
                                l3619 1C72                                  l3299 06DB  
                                l3491 1B54                                  l3803 0ECC  
                                l3723 11D8                                  l3571 1F98  
                                l4187 1EE8                                  l4179 1EA8  
                                l5149 1CBE                                  l3813 0EEF  
                                l3733 1225                                  l3741 1253  
                                l3717 11D2                                  l3557 1F51  
                                l2943 1A54                                  l3663 132A  
                                l3567 1F8D                                  l3575 1F9E  
                                l3591 102D                                  l2961 19CE  
                                l2937 19C4                                  l3497 1B75  
                                l3809 0EE7                                  l3745 125E  
                                l3913 0046                                  l3905 003B  
                                l3585 1027                                  l3923 006B  
                                l3683 13A1                                  l3835 1BA9  
                                l2957 19C8                                  l2981 1C2E  
                                l3749 1264                                  l3861 1DA8  
                                l3853 1D73                                  l3933 0091  
                                l3669 1330                                  l4821 10A2  
                                l3845 1C11                                  l2991 1C4F  
                                l3951 00E2                                  l3943 00D7  
                                l3679 137A                                  l3793 0E98  
                                l3865 1DB0                                  l3881 10F4  
                                l3689 13B6                                  l3697 13E4  
                                l4825 10D8                                  l4745 1FB3  
                                l4761 1FF8                                  l2987 1C44  
                                l2979 1C20                                  l3787 0E8E  
                                l3971 0158                                  l4755 1FE7  
                                l4739 1FAE                                  l3797 0EAE  
                                l3893 114F                                  l4829 10E0  
                                l4749 1FD6                                  l3967 014D  
                                l4935 168E                                  l3985 1DBE  
                                l4777 11A4                                  l3889 1146  
                                l4953 16DB                                  l4873 15D3  
                                l4779 11C2                                  l4795 1D51  
                                l3997 1DCB                                  l3989 1DC5  
                                l4797 1D29                                  l4973 1722  
                                l3999 1DD9                                  l4799 1D58  
                                l4993 17B1                                  l4995 14D9  
                                l4997 17BA                                  l4999 144A  
                                STR_1 0E67                          __CFG_WDTE$ON 0000  
                                STR_2 0E67                                  STR_3 0E67  
                                STR_4 0E67                                  STR_5 0C82  
                                STR_6 0E6A                                  STR_7 0E6C  
                                STR_8 0E69                                  STR_9 0D93  
                         main@hit_res 0069                                  u3205 1A5D  
                                u3215 1A64                                  u3305 1C45  
                                u4035 1CF7                                  u4125 0F52  
                                u3335 1BB9                                  u3265 1C23  
                                u4145 0F8F                                  u3355 1BCA  
                                u4155 0FB7                                  u3285 1C2F  
                                u3365 1BD3                                  u3295 1C3B  
                                u5215 0072                                  u3625 053B  
                                u4265 1B57                                  u5305 00C2  
                                u4505 1060                                  u3475 0407  
                                u5235 008B                                  u5155 004C  
                                _PEIE 005E                                  u3725 05B7  
                                u3485 0414                                  u3655 0563  
                                u4375 1B08                                  u5175 0065  
                                u5505 1DE8                                  u5425 012B  
                                u5265 0094                                  u4705 13CD  
                                u4555 1C74                                  u3595 0513  
                                u4635 1358                                  _RCIE 0465  
                                u4565 1C7C                                  u3765 05F4  
                                u5365 00E5                                  u5285 00AD  
                                u3775 0612                                  u6425 1168  
                                u5475 1DCE                                  u5715 1E34  
                                u4915 0E9E                                  u5635 12B8  
                                u3965 07A3                                  u6445 1178  
                                u4925 0EB1                                  u4765 1200  
                                u4685 139F                                  u6605 1624  
                                u5645 12D9                                  u5495 1DDF  
                                u6455 1188                                  u6535 10CA  
                                u6375 1FB6                                  u6615 1634  
                                u6465 11A9                                  u4955 0ECF  
                                u4795 123A                                  u5775 1ED2  
                                u4985 1F34                                  u6695 1752  
                                u6767 026F                                  u6777 02B4  
                        __CFG_WRT$OFF 0000                __end_of_USARTWriteChar 1997  
                       __CFG_FCMEN$ON 0000                                  _main 016A  
                                _rand 1EED                                  btemp 007E  
                       __CFG_BOREN$ON 0000                                  ltemp 007E  
                                start 0000                                  ttemp 007E  
                                wtemp 007E                     ___bmul@multiplier 0073  
                       __CFG_MCLRE$ON 0000       find_best_solution@tem_sub_index 00E7  
           ??_printf_console_MATRIX44 0020             ??_printf_console_MATRIX88 0077  
                     is_row_empty@col 0075                       is_row_empty@row 0070  
          get_high_after_merge@matrix 0047                                 ?_main 005A  
                               ?_rand 0020                                 STR_10 0C0A  
                               STR_11 0A11                                 STR_20 0E69  
                               STR_12 0D7E                                 STR_21 0D93  
                               STR_22 0CF0                                 STR_30 0C64  
                               STR_31 0E61                                 STR_23 0BC6  
                               STR_32 0DBC                                 STR_24 0D21  
                               STR_40 09B0                                 STR_33 0DA8  
                               STR_25 0D39                                 STR_17 0C9F  
                               STR_41 0BE9                                 STR_18 0E6A  
                               STR_26 0E59                                 STR_42 0DF1  
                               STR_34 0CBC                                 STR_50 0B5D  
                               STR_19 0E6C                                 STR_35 0CD6  
                               STR_27 0BA3                                 STR_51 0AAA  
                               STR_43 09E4                                 STR_36 0E4E  
                               STR_60 0E41                                 STR_28 0C28  
                               STR_52 0B3A                                 STR_44 0B16  
                     __end_of___awmod 1DFF                                 STR_37 0E23  
                               STR_53 0D51                                 STR_61 0D09  
                               STR_29 0C46                                 STR_45 0A61  
                               STR_62 0E41                                 STR_46 0E13  
                               STR_38 0E02                                 STR_54 0AF2  
                               STR_55 0B5D                                 STR_63 0E33  
                               STR_39 0D68                                 STR_47 0A3B  
                               STR_56 0AAA                                 STR_64 0DCF  
                               STR_48 0B80                                 STR_57 0B3A  
                               STR_65 0DE0                                 STR_49 0ACE  
                               STR_58 0A86                                 STR_59 0B80  
                    USARTWriteChar@ch 0070                       __end_of___lwdiv 1C54  
                     __end_of___lwmod 1BE2                                 _RCREG 001A  
                               _SPBRG 0099                      _is_left_boundary 1F42  
                               _TXREG 0019                                 _UQEnd 006D  
                 ___lmul@multiplicand 0074                           ?_SPI1_write 0070  
                               _clear 1DFF                       __end_of_dpowers 0828  
                               _cur_x 00EE                                 _cur_y 006A  
                               _merge 1E9D                       __end_of_isdigit 19C6  
                               _randx 01D3                                 _srand 19AF  
                        ?_is_row_full 0070                       ??_printf_Screen 0079  
                               pclath 000A                                 ltemp0 007E  
                               ltemp1 0082                                 ltemp2 0086  
                               ltemp3 0080                    __size_of_USARTInit 0047  
                     ?_USARTWriteChar 0070                                 ttemp0 007E  
                               ttemp1 0081                                 ttemp2 0084  
                               ttemp3 0087                                 ttemp4 007F  
                               status 0003                           hit_land@col 004E  
                               wtemp0 007E                                 wtemp1 0080  
                               wtemp2 0082                                 wtemp3 0084  
                               wtemp4 0086                                 wtemp5 0088  
                               wtemp6 007F                       __end_of_sprintf 07C2  
     find_best_solution@temp_matrix88 00A5                           hit_land@row 004F  
                      get_high@matrix 0045                       __initialization 07C2  
                        __end_of_main 02C2                          __end_of_rand 1F42  
              ??_char_info_index_rand 007E                                ??_main 005E  
                              ??_rand 0022                           evaluate@col 004D  
                         evaluate@row 004E              find_best_solution@temp_x 00E8  
                              ?_clear 0070       __end_of_printf_console_MATRIX44 1000  
     __end_of_printf_console_MATRIX88 2000                                ?_merge 0070  
                              ?_srand 0070                 __size_of_Clear_Matrix 0014  
               __end_of_delete_matrix 1D6A                                _URBuff 0110  
                    __end_of_fall_off 1269                        __CFG_PWRTE$OFF 0000  
               get_high_after_merge@y 004D                      __end_of_get_high 1DB2  
                              ___bmul 19C6                   __size_of_SPI1_write 0001  
                              ___lmul 1C54                                ___wmul 1A52  
                           ??___awmod 007D                      __end_of_hit_land 1316  
                           ??___lwdiv 0074                      __end_of_evaluate 0F01  
                           ??___lwmod 007C                                _merge1 107E  
            __end_of_USARTWriteString 1AB7                                _memcpy 0003  
                              _memset 1A37          ?_printf_console_cur_MATRIX44 007B  
                    __end_of_is_valid 13FE                                clear@x 0078  
                              clear@y 0070                       ___awmod@divisor 0027  
                              _temp_y 006C              __size_of_printf_MATRIX88 0012  
                     ___awmod@counter 002B                     __end_of_USARTInit 1CDA  
                       ?_is_row_empty 0070           __size_of_find_best_solution 0402  
                              merge@x 0078                                merge@y 0070  
        printf_console_cur_MATRIX44@x 0034          printf_console_cur_MATRIX44@y 007B  
                           ??_isdigit 0070                           is_valid@col 004F  
                         is_valid@row 004E                          _Clear_Matrix 1A0B  
                              srand@x 0070                     _is_right_boundary 101E  
                           ??_sprintf 0028               ??_get_holes_after_merge 0047  
                  ?_is_right_boundary 0075                        evaluate@matrix 004C  
             __end_of__initialization 07FC                        merge1@matrix44 0021  
               _printf_console_Screen 199F                        _g_cur_matrix44 0195  
                 ??_is_right_boundary 0078                   ___bmul@multiplicand 0070  
                      __pcstackCOMMON 0070                          __pidataBANK0 1989  
                        __pidataBANK1 1000                          __pidataBANK3 1AB7  
                       __end_of_clear 1E4E                            _Write_Byte 19F9  
                       __end_of_merge 1EED                         __end_of_srand 19B8  
                  __size_of_debug_str 0008                        ??_is_row_empty 0071  
       ??_printf_console_cur_MATRIX44 0029             __end_of_is_right_boundary 107E  
       __size_of_get_high_after_merge 006F            get_holes_after_merge@start 004F  
                             ??_clear 0074                               ??_merge 0074  
                        sprintf@width 0039                               ??_srand 0072  
                        evaluate@full 004B                            __pbssBANK0 006A  
                          __pbssBANK1 00E9                            __pbssBANK2 0110  
                          __pbssBANK3 0190                          evaluate@risk 0049  
                  __size_of_left_most 0031                     is_row_full@matrix 0070  
                __size_of_is_row_full 0030                            _debug_int1 1A73  
                          _debug_int2 1ADA                            _debug_int3 1B26  
                          _debug_line 19D7     printf_console_cur_MATRIX44@matrix 0032  
                 delete_matrix@matrix 0043                      is_valid@matrix44 0046  
                    is_valid@matrix88 0048              __end_of_is_left_boundary 1FA0  
                          _g_matrix44 0830                            _delete_row 1154  
                          _g_matrix88 0130                            __pmaintext 016A  
                             ?___bmul 0070                               ?___lmul 0070  
                             ?___wmul 0070                               ?_merge1 0020  
                             ?_memcpy 0070                               ?_memset 0070  
                      ___lmul@product 0079             get_holes_after_merge@stop 004E  
                        ??_SPI1_write 0070                             ?_fall_off 0045  
                   ??_printf_MATRIX88 0078             printf_MATRIX88@matrix7219 0021  
                    ??_USARTWriteChar 0070                  is_right_boundary@col 0022  
                is_right_boundary@row 0021                             ?_get_high 0070  
                  USARTWriteInt@F1617 0190                            __stringtab 0800  
                           ?_hit_land 0045                     __end_of_debug_str 199F  
                             _UQFront 006E  __size_of_printf_console_cur_MATRIX44 004F  
                           ?_evaluate 0043                ?_printf_console_Screen 0070  
                           ?_is_valid 0045                         debug_line@str 0073  
 find_best_solution@temp_cur_matrix44 00E5                       __size_of___bmul 0011  
                     __size_of___lmul 003F                           ?_Write_Byte 0070  
                             ___awmod 1DB2                    __end_of_SPI1_write 1989  
                     __size_of___wmul 0021                               ___lwdiv 1C18  
                             ___lwmod 1BB0                           right_most@x 0048  
                             _g_debug 0198                       __size_of_merge1 0067  
                     __size_of_memcpy 002A                             _ANSELbits 0188  
                     __size_of_memset 001B                     __end_of_left_most 1BB0  
                             __ptext1 19AF                               __ptext2 1E9D  
                             __ptext3 1269                               __ptext4 13FE  
                             __ptext5 1BE2                               __ptext6 101E  
                             __ptext7 1E4E                               __ptext8 0F01  
                             __ptext9 199F                     __end_of_hexpowers 0830  
                    fall_off@matrix44 0046                      fall_off@matrix88 0048  
                             _dpowers 081E                               _isdigit 19B8  
                    ___awmod@dividend 0029            __size_of_is_right_boundary 0060  
                          ??_fall_off 0049                               _sprintf 02C2  
                          ??_get_high 0043                               clrloop0 19A8  
                end_of_initialization 07FC                     __end_of_octpowers 081E  
                   _printf_MATRIX7219 1002                            ??_hit_land 0049  
                             merge1@x 0029                               merge1@y 0020  
                          ??_evaluate 0045                               memcpy@d 0077  
                             memcpy@n 0074                               memcpy@s 0079  
               __end_of_printf_Screen 198F                               memset@c 0072  
                __end_of_is_row_empty 1B26                               memset@n 0074  
                             memset@p 0076                           ?_debug_int1 003F  
                         ?_debug_int2 003F                           ?_debug_int3 003F  
                          ??_is_valid 0049                           ?_debug_line 0073  
                  ?_printf_MATRIX7219 0070                        SPI1_write@data 0070  
                          _right_most 1BE2              ?_printf_console_MATRIX44 0075  
            ?_printf_console_MATRIX88 0075              ??_MATRIX88_to_MATRIX7219 0071  
                         ?_delete_row 007B                         clear@matrix44 0071  
                       clear@matrix88 0073            printf_console_MATRIX44@col 007A  
                           _RCSTAbits 0018            printf_console_MATRIX44@row 0079  
                   Write_Byte@myValue 0070                   ??_printf_MATRIX7219 0072  
          printf_console_MATRIX88@col 007D                            _temp_count 00EB  
          printf_console_MATRIX88@row 007C                            _temp_pre_x 01DA  
                        __pstringtext 0800                     ?_USARTWriteString 0071  
       __size_of_char_info_index_rand 0018                    ??_USARTWriteString 0073  
           is_right_boundary@matrix44 0075             is_right_boundary@matrix88 0077  
                           _USARTInit 1C93                             _TRISAbits 0085  
           __end_of_printf_MATRIX7219 101E                     _tem_pre_sub_index 01D9  
                 __size_of_Write_Byte 0012                    right_most@matrix44 0043  
                  right_most@matrix88 0045        __size_of_get_holes_after_merge 013D  
       __end_of_get_holes_after_merge 016A                 find_best_solution@res 00A4  
       printf_console_MATRIX44@matrix 0076                             _TXSTAbits 0098  
                      __end_of___bmul 19D7            __end_of_find_best_solution 1800  
                      __end_of___lmul 1C93                        __end_of___wmul 1A73  
       printf_console_MATRIX88@matrix 0075                        __end_of_merge1 10E5  
                      __end_of_memcpy 002D                        __end_of_memset 1A52  
    MATRIX88_to_MATRIX7219@matrix7219 0070                   __size_of_debug_int1 0021  
                 __size_of_debug_int2 0025                   __size_of_debug_int3 0029  
              __size_of_delete_matrix 0048                   __size_of_debug_line 0011  
                 start_initialization 07C2                            ?_USARTInit 0070  
                 __size_of_delete_row 0075                            left_most@x 0047  
                       delete_row@len 0024                         delete_row@row 007D  
            __CFG_FOSC$INTRC_NOCLKOUT 0000                    is_right_boundary@x 0020  
        __end_of_get_high_after_merge 1154                           ?_right_most 0043  
                      _temp_pre_count 0197                     ?_is_left_boundary 0075  
     __size_of_MATRIX88_to_MATRIX7219 0048           get_holes_after_merge@matrix 0050  
                            ??___bmul 0071                              ??___lmul 0078  
                  ??_is_left_boundary 0078                              ??___wmul 0074  
                          init_fetch0 19E8                    is_row_empty@matrix 0074  
                         __pdataBANK0 006F                           __pdataBANK1 00EE  
                         __pdataBANK3 01B8                     _g_char_info_index 006B  
                     _printf_MATRIX88 0E6E                              ??_merge1 0025  
                            ??_memcpy 0076                              ??_memset 0076  
                         _g_char_info 01B8     find_best_solution@left_most_index 00A2  
                           ___latbits 0002                         __pcstackBANK0 0020  
                       __pcstackBANK1 00A0            __size_of_printf_MATRIX7219 001C  
               __size_of_is_row_empty 0027               ??_printf_console_Screen 007E  
                       ??_is_row_full 0073                     __size_of_fall_off 00A0  
                   __size_of_get_high 0048                           sprintf@flag 003D  
                         sprintf@prec 0038                     __size_of_hit_land 00AD  
                       _delete_matrix 1D22                             __pnvBANK0 006D  
                   __size_of_evaluate 0081                             _debug_str 1997  
                  delete_matrix@count 0047                     __size_of_is_valid 00E8  
                    ___lwdiv@dividend 0072               printf_MATRIX7219@matrix 0074  
                    delete_matrix@row 0048                          ??_Write_Byte 0071  
                            ?___awmod 0027                              ?___lwdiv 0070  
                            ?___lwmod 0078   __end_of_printf_console_cur_MATRIX44 1E9D  
         _printf_console_cur_MATRIX44 1E4E                          _is_row_empty 1AFF  
                        debug_int2@i1 0041                          debug_int2@i2 0043  
                        debug_int3@i1 0041                          debug_int3@i2 0043  
                        debug_int3@i3 0045                              ?_isdigit 0070  
                   is_left_boundary@x 0020                           ??_USARTInit 0072  
              _MATRIX88_to_MATRIX7219 1CDA                             _left_most 1B7F  
                 __size_of_right_most 0036                             _hexpowers 0828  
                    ___lwdiv@quotient 0075                        __size_of_clear 004F  
                            ?_sprintf 0020                  printf_MATRIX7219@col 0075  
                      __size_of_merge 0050                        __size_of_srand 0009  
                        debug_str@str 0073                    __end_of_Write_Byte 1A0B  
                        ??_debug_int1 007E                          ??_debug_int2 007E  
                        ??_debug_int3 007E                          ??_debug_line 0075  
                      ?_delete_matrix 0043                        ___wmul@product 0074  
                           fall_off@x 004D                             fall_off@y 0045  
                    delete_row@matrix 007B                             clear_ram0 19A7  
                           _octpowers 0812                   __end_of_is_row_full 1B7F  
                          ?_debug_str 0073               __end_of_printf_MATRIX88 0E80  
                        ??_delete_row 0020                              _PIR1bits 000C  
                           _temp_high 00EC               _find_best_solution$1184 00A0  
                           _temp_hole 00ED                             _temp_risk 00E9  
                   left_most@matrix44 0043                     left_most@matrix88 0045  
                         __stringbase 0812                     ___wmul@multiplier 0070  
    __size_of_printf_console_MATRIX44 00FF      __size_of_printf_console_MATRIX88 0060  
                  __end_of_debug_int1 1A94                    __end_of_debug_int2 1AFF  
                  __end_of_debug_int3 1B4F                    __end_of_debug_line 19E8  
                       ?_Clear_Matrix 0070                  _get_high_after_merge 10E5  
                          ?_left_most 0043                    __end_of_g_matrix44 09B0  
                  __end_of_delete_row 11C9                     ___lmul@multiplier 0070  
                 is_left_boundary@col 0022                   is_left_boundary@row 0021  
                       merge@matrix44 0071                         merge@matrix88 0073  
           __size_of_USARTWriteString 0023                             hit_land@x 004D  
                           hit_land@y 0045          __end_of_char_info_index_rand 1A37  
             get_high_after_merge@col 004E                             merge1@col 002D  
                           merge1@len 002A               get_high_after_merge@row 004F  
                           merge1@row 002C               __size_of_USARTWriteChar 0008  
                       _temp_pre_high 00EF                         _temp_pre_hole 006F  
                       _temp_pre_risk 01D7                             is_valid@x 004D  
                           is_valid@y 0045                      __size_of___awmod 004D  
                    __size_of___lwdiv 003C                      __size_of___lwmod 0032  
                  __end_of__stringtab 0812                           _isdigit$855 0070  
              __size_of_printf_Screen 0005                            sprintf@idx 0031  
                          sprintf@len 0033                            sprintf@val 0036  
                      ??_Clear_Matrix 0079                 ?_get_high_after_merge 0047  
            is_left_boundary@matrix44 0075              is_left_boundary@matrix88 0077  
                    __size_of_isdigit 000E                              _fall_off 11C9  
                     ___lwdiv@divisor 0070                       ___lwdiv@counter 0077  
                  _find_best_solution 13FE                              __ptext10 1FA0  
                            __ptext11 1997                              __ptext20 1D6A  
                            __ptext12 107E                              __ptext21 1AFF  
                            __ptext13 1B7F                              __ptext30 02C2  
                            __ptext22 11C9                              __ptext14 1F42  
                            __ptext31 19B8                              __ptext23 1ADA  
                            __ptext15 1316                              __ptext40 1EED  
                            __ptext32 1A52                              __ptext24 0E80  
                            __ptext16 19D7                              __ptext41 1C54  
                            __ptext33 1BB0                              __ptext25 1D22  
                            __ptext17 002D                              __ptext50 1CDA  
                            __ptext42 1DB2                              __ptext34 1C18  
                            __ptext26 1B4F                              __ptext18 10E5  
                            __ptext51 1A37                              __ptext43 1C93  
                            __ptext35 19C6                              __ptext27 1154  
                            __ptext19 1B26                              __ptext44 1A0B  
                            __ptext36 1A94                              __ptext28 0003  
                            __ptext45 198A                              __ptext37 198F  
                            __ptext29 1A73                              __ptext46 0E6E  
                            __ptext38 1DFF                              __ptext47 1002  
                            __ptext39 1A1F                              __ptext48 19F9  
                            __ptext49 1988                     __CFG_BOR4V$BOR21V 0000  
                            _get_high 1D6A                           _is_row_full 1B4F  
      MATRIX88_to_MATRIX7219@matrix88 0074                      __size_of_sprintf 0500  
                     ??_delete_matrix 0045                           debug_int1@f 003F  
                         debug_int1@i 0041                           debug_int2@f 003F  
                         debug_int3@f 003F                              _hit_land 1269  
                            _evaluate 0E80                   ?_find_best_solution 0070  
                       __size_of_main 0158                              _is_valid 1316  
                       __size_of_rand 0055                      hit_land@matrix44 0046  
                    hit_land@matrix88 0048                              clear@col 007A  
                            clear@row 0079                          ??_right_most 0046  
               _get_holes_after_merge 002D                           ??_debug_str 0075  
                    ?_printf_MATRIX88 0070                              main@Seed 0067  
                            main@argc 005A                              main@argv 005C  
            get_holes_after_merge@col 0051              get_holes_after_merge@row 0052  
                ??_find_best_solution 0053                           fall_off@col 004E  
                         fall_off@row 004F             __size_of_is_left_boundary 005E  
                         delete_row@i 0026                           ??_left_most 0046  
                            memcpy@d1 0070                              memcpy@s1 0072  
                            merge@col 007A                              merge@row 0079  
                  __end_of_right_most 1C18                              init_ram0 19EC  
                            isdigit@c 0071                              memset@p1 0070  
                           sprintf@ap 0035                             sprintf@cp 0032  
      __size_of_printf_console_Screen 0008                             sprintf@sp 003C  
       __end_of_printf_console_Screen 19A7                      ___lwmod@dividend 007A  
                       _printf_Screen 198A              printf_console_MATRIX44@x 0078  
            printf_console_MATRIX44@y 0075                             stringcode 080A  
                  Write_Byte@myColumn 0071                   USARTWriteString@str 0071  
             printf_MATRIX88@matrix88 0020               _printf_console_MATRIX44 0F01  
             _printf_console_MATRIX88 1FA0                  _char_info_index_rand 1A1F  
             ?_MATRIX88_to_MATRIX7219 0070                ??_get_high_after_merge 0049  
                            sprintf@c 003B                              sprintf@f 0020  
  find_best_solution@right_most_index 00A3                       ___lwmod@divisor 0078  
                     ___lwmod@counter 007D                              stringtab 0800  
                          _SPI1_write 1988                      _USARTWriteString 1A94  
                      ?_printf_Screen 0070                ?_get_holes_after_merge 0070  
                      _USARTWriteChar 198F            MATRIX88_to_MATRIX7219@mask 0075  
           MATRIX88_to_MATRIX7219@col 0077                  __end_of_Clear_Matrix 1A1F  
           MATRIX88_to_MATRIX7219@row 0076  
