
_max7219_init1:

;Teris.c,231 :: 		void max7219_init1()
;Teris.c,233 :: 		Chip_Select = 0;       // SELECT MAX
	BCF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,234 :: 		SPI1_write(0x09);      // BCD mode for digit decoding
	MOVLW      9
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,235 :: 		SPI1_write(0x00);
	CLRF       FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,236 :: 		Chip_Select = 1;       // DESELECT MAX
	BSF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,238 :: 		Chip_Select = 0;       // SELECT MAX
	BCF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,239 :: 		SPI1_write(0x0A);
	MOVLW      10
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,240 :: 		SPI1_write(0x0F);      // Segment luminosity intensity
	MOVLW      15
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,241 :: 		Chip_Select = 1;       // DESELECT MAX
	BSF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,243 :: 		Chip_Select = 0;       // SELECT MAX
	BCF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,244 :: 		SPI1_write(0x0B);
	MOVLW      11
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,245 :: 		SPI1_write(0x07);      // Display refresh
	MOVLW      7
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,246 :: 		Chip_Select = 1;       // DESELECT MAX
	BSF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,248 :: 		Chip_Select = 0;       // SELECT MAX
	BCF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,249 :: 		SPI1_write(0x0C);
	MOVLW      12
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,250 :: 		SPI1_write(0x01);      // Turn on the display
	MOVLW      1
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,251 :: 		Chip_Select = 1;       // DESELECT MAX
	BSF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,253 :: 		Chip_Select = 0;       // SELECT MAX
	BCF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,254 :: 		SPI1_write(0x00);
	CLRF       FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,255 :: 		SPI1_write(0xFF);      // No test
	MOVLW      255
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,256 :: 		Chip_Select = 1;       // DESELECT MAX
	BSF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,257 :: 		}
L_end_max7219_init1:
	RETURN
; end of _max7219_init1

_Write_Byte:

;Teris.c,260 :: 		void Write_Byte(unsigned short myColumn, unsigned short myValue)
;Teris.c,262 :: 		Chip_Select = 0;       // select max7219.
	BCF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,263 :: 		SPI1_write(myColumn);  // send myColumn value to max7219 (digit place).
	MOVF       FARG_Write_Byte_myColumn+0, 0
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,264 :: 		SPI1_write(myValue);   // send myValue value to max7219 (digit place).
	MOVF       FARG_Write_Byte_myValue+0, 0
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,265 :: 		Chip_Select = 1;       // deselect max7219.
	BSF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,266 :: 		}
L_end_Write_Byte:
	RETURN
; end of _Write_Byte

_printf_MATRIX7219:

;Teris.c,340 :: 		void printf_MATRIX7219(MATRIX7219* matrix)
;Teris.c,344 :: 		for (col = 0; col < MATRIX88_COLUMN_MAX; col++)
	CLRF       printf_MATRIX7219_col_L0+0
L_printf_MATRIX72190:
	MOVLW      8
	SUBWF      printf_MATRIX7219_col_L0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_printf_MATRIX72191
;Teris.c,346 :: 		Write_Byte(col + 1, matrix->col[col]);
	INCF       printf_MATRIX7219_col_L0+0, 0
	MOVWF      FARG_Write_Byte_myColumn+0
	MOVF       printf_MATRIX7219_col_L0+0, 0
	ADDWF      FARG_printf_MATRIX7219_matrix+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	MOVWF      FARG_Write_Byte_myValue+0
	CALL       _Write_Byte+0
;Teris.c,344 :: 		for (col = 0; col < MATRIX88_COLUMN_MAX; col++)
	INCF       printf_MATRIX7219_col_L0+0, 1
;Teris.c,347 :: 		}
	GOTO       L_printf_MATRIX72190
L_printf_MATRIX72191:
;Teris.c,348 :: 		}
L_end_printf_MATRIX7219:
	RETURN
; end of _printf_MATRIX7219

_MATRIX88_to_MATRIX7219:

;Teris.c,350 :: 		void MATRIX88_to_MATRIX7219(MATRIX88* matrix88, MATRIX7219* matrix7219)
;Teris.c,368 :: 		}
L_end_MATRIX88_to_MATRIX7219:
	RETURN
; end of _MATRIX88_to_MATRIX7219

_printf_MATRIX88:

;Teris.c,392 :: 		void printf_MATRIX88(MATRIX88* matrix88)
;Teris.c,395 :: 		MATRIX88_to_MATRIX7219(matrix88, &matrix7219);
	MOVF       FARG_printf_MATRIX88_matrix88+0, 0
	MOVWF      FARG_MATRIX88_to_MATRIX7219_matrix88+0
	MOVLW      printf_MATRIX88_matrix7219_L0+0
	MOVWF      FARG_MATRIX88_to_MATRIX7219_matrix7219+0
	CALL       _MATRIX88_to_MATRIX7219+0
;Teris.c,396 :: 		printf_MATRIX7219(&matrix7219);
	MOVLW      printf_MATRIX88_matrix7219_L0+0
	MOVWF      FARG_printf_MATRIX7219_matrix+0
	CALL       _printf_MATRIX7219+0
;Teris.c,397 :: 		}
L_end_printf_MATRIX88:
	RETURN
; end of _printf_MATRIX88

_printf_Screen:

;Teris.c,399 :: 		void printf_Screen()
;Teris.c,401 :: 		printf_MATRIX88(&g_matrix88);
	MOVLW      _g_matrix88+0
	MOVWF      FARG_printf_MATRIX88_matrix88+0
	CALL       _printf_MATRIX88+0
;Teris.c,402 :: 		}
L_end_printf_Screen:
	RETURN
; end of _printf_Screen

_Clear_Matrix:

;Teris.c,404 :: 		void Clear_Matrix(void)
;Teris.c,406 :: 		memset(&g_matrix88, 0, sizeof(MATRIX88));
	MOVLW      _g_matrix88+0
	MOVWF      FARG_memset_p1+0
	CLRF       FARG_memset_character+0
	MOVLW      64
	MOVWF      FARG_memset_n+0
	MOVLW      0
	MOVWF      FARG_memset_n+1
	CALL       _memset+0
;Teris.c,407 :: 		printf_Screen();
	CALL       _printf_Screen+0
;Teris.c,408 :: 		}
L_end_Clear_Matrix:
	RETURN
; end of _Clear_Matrix

_is_row_full:

;Teris.c,432 :: 		unsigned short is_row_full(MATRIX88* matrix, unsigned short row)
;Teris.c,435 :: 		for(col = 0; col < MATRIX88_COLUMN_MAX; col++)
	CLRF       R2+0
L_is_row_full3:
	MOVLW      8
	SUBWF      R2+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_is_row_full4
;Teris.c,437 :: 		if(matrix->cell[row][col] == 0)
	MOVF       FARG_is_row_full_row+0, 0
	MOVWF      R0+0
	RLF        R0+0, 1
	BCF        R0+0, 0
	RLF        R0+0, 1
	BCF        R0+0, 0
	RLF        R0+0, 1
	BCF        R0+0, 0
	MOVF       FARG_is_row_full_matrix+0, 0
	ADDWF      R0+0, 1
	MOVF       R2+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      0
	BTFSS      STATUS+0, 2
	GOTO       L_is_row_full6
;Teris.c,439 :: 		return 0;
	CLRF       R0+0
	GOTO       L_end_is_row_full
;Teris.c,440 :: 		}
L_is_row_full6:
;Teris.c,435 :: 		for(col = 0; col < MATRIX88_COLUMN_MAX; col++)
	INCF       R2+0, 1
;Teris.c,441 :: 		}
	GOTO       L_is_row_full3
L_is_row_full4:
;Teris.c,442 :: 		return 1;
	MOVLW      1
	MOVWF      R0+0
;Teris.c,443 :: 		}
L_end_is_row_full:
	RETURN
; end of _is_row_full

_delete_row:

;Teris.c,444 :: 		void delete_row(MATRIX88* matrix, unsigned short row)
;Teris.c,447 :: 		for(i = MATRIX88_ROW_MAX - 1; i >= 0; i--)
	MOVLW      7
	MOVWF      delete_row_i_L0+0
L_delete_row7:
	MOVLW      128
	XORWF      delete_row_i_L0+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 0
	GOTO       L_delete_row8
;Teris.c,449 :: 		if(i <= row)
	MOVLW      128
	MOVWF      R0+0
	MOVLW      128
	BTFSC      delete_row_i_L0+0, 7
	MOVLW      127
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 2
	GOTO       L__delete_row180
	MOVF       delete_row_i_L0+0, 0
	SUBWF      FARG_delete_row_row+0, 0
L__delete_row180:
	BTFSS      STATUS+0, 0
	GOTO       L_delete_row10
;Teris.c,451 :: 		if(i > 0)
	MOVLW      128
	XORLW      0
	MOVWF      R0+0
	MOVLW      128
	XORWF      delete_row_i_L0+0, 0
	SUBWF      R0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_delete_row11
;Teris.c,459 :: 		memcpy(matrix->cell[i], matrix->cell[i - 1], len);
	MOVLW      3
	MOVWF      R1+0
	MOVF       delete_row_i_L0+0, 0
	MOVWF      R0+0
	MOVF       R1+0, 0
L__delete_row181:
	BTFSC      STATUS+0, 2
	GOTO       L__delete_row182
	RLF        R0+0, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__delete_row181
L__delete_row182:
	MOVF       R0+0, 0
	ADDWF      FARG_delete_row_matrix+0, 0
	MOVWF      FARG_memcpy_d1+0
	MOVLW      1
	SUBWF      delete_row_i_L0+0, 0
	MOVWF      R3+0
	CLRF       R3+1
	BTFSS      STATUS+0, 0
	DECF       R3+1, 1
	MOVLW      0
	BTFSC      delete_row_i_L0+0, 7
	MOVLW      255
	ADDWF      R3+1, 1
	MOVLW      3
	MOVWF      R2+0
	MOVF       R3+0, 0
	MOVWF      R0+0
	MOVF       R3+1, 0
	MOVWF      R0+1
	MOVF       R2+0, 0
L__delete_row183:
	BTFSC      STATUS+0, 2
	GOTO       L__delete_row184
	RLF        R0+0, 1
	RLF        R0+1, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__delete_row183
L__delete_row184:
	MOVF       R0+0, 0
	ADDWF      FARG_delete_row_matrix+0, 0
	MOVWF      FARG_memcpy_s1+0
	MOVLW      8
	MOVWF      FARG_memcpy_n+0
	MOVLW      0
	MOVWF      FARG_memcpy_n+1
	CALL       _memcpy+0
;Teris.c,460 :: 		}
	GOTO       L_delete_row12
L_delete_row11:
;Teris.c,463 :: 		memset(matrix->cell[i], 0, MATRIX88_COLUMN_MAX*sizeof(unsigned short));
	MOVLW      3
	MOVWF      R1+0
	MOVF       delete_row_i_L0+0, 0
	MOVWF      R0+0
	MOVF       R1+0, 0
L__delete_row185:
	BTFSC      STATUS+0, 2
	GOTO       L__delete_row186
	RLF        R0+0, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__delete_row185
L__delete_row186:
	MOVF       R0+0, 0
	ADDWF      FARG_delete_row_matrix+0, 0
	MOVWF      FARG_memset_p1+0
	CLRF       FARG_memset_character+0
	MOVLW      8
	MOVWF      FARG_memset_n+0
	MOVLW      0
	MOVWF      FARG_memset_n+1
	CALL       _memset+0
;Teris.c,464 :: 		}
L_delete_row12:
;Teris.c,465 :: 		}
L_delete_row10:
;Teris.c,447 :: 		for(i = MATRIX88_ROW_MAX - 1; i >= 0; i--)
	DECF       delete_row_i_L0+0, 1
;Teris.c,466 :: 		}
	GOTO       L_delete_row7
L_delete_row8:
;Teris.c,467 :: 		}
L_end_delete_row:
	RETURN
; end of _delete_row

_delete_matrix:

;Teris.c,468 :: 		unsigned short delete_matrix(MATRIX88* matrix)
;Teris.c,470 :: 		unsigned short count = 0;
	CLRF       delete_matrix_count_L0+0
	MOVLW      7
	MOVWF      delete_matrix_row_L0+0
;Teris.c,472 :: 		while(row >= 0)
L_delete_matrix13:
	MOVLW      128
	XORWF      delete_matrix_row_L0+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 0
	GOTO       L_delete_matrix14
;Teris.c,474 :: 		if(is_row_full(matrix, row))
	MOVF       FARG_delete_matrix_matrix+0, 0
	MOVWF      FARG_is_row_full_matrix+0
	MOVF       delete_matrix_row_L0+0, 0
	MOVWF      FARG_is_row_full_row+0
	CALL       _is_row_full+0
	MOVF       R0+0, 0
	BTFSC      STATUS+0, 2
	GOTO       L_delete_matrix15
;Teris.c,476 :: 		delete_row(matrix, row);
	MOVF       FARG_delete_matrix_matrix+0, 0
	MOVWF      FARG_delete_row_matrix+0
	MOVF       delete_matrix_row_L0+0, 0
	MOVWF      FARG_delete_row_row+0
	CALL       _delete_row+0
;Teris.c,477 :: 		count++;
	INCF       delete_matrix_count_L0+0, 1
;Teris.c,478 :: 		}
	GOTO       L_delete_matrix16
L_delete_matrix15:
;Teris.c,481 :: 		row--;
	DECF       delete_matrix_row_L0+0, 1
;Teris.c,482 :: 		}
L_delete_matrix16:
;Teris.c,483 :: 		}
	GOTO       L_delete_matrix13
L_delete_matrix14:
;Teris.c,488 :: 		return count;
	MOVF       delete_matrix_count_L0+0, 0
	MOVWF      R0+0
;Teris.c,489 :: 		}
L_end_delete_matrix:
	RETURN
; end of _delete_matrix

_is_row_empty:

;Teris.c,490 :: 		unsigned short is_row_empty(MATRIX88* matrix, unsigned short row)
;Teris.c,493 :: 		for(col = 0; col < MATRIX88_COLUMN_MAX; col++)
	CLRF       R2+0
L_is_row_empty17:
	MOVLW      8
	SUBWF      R2+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_is_row_empty18
;Teris.c,495 :: 		if(matrix->cell[row][col] == 1)
	MOVF       FARG_is_row_empty_row+0, 0
	MOVWF      R0+0
	RLF        R0+0, 1
	BCF        R0+0, 0
	RLF        R0+0, 1
	BCF        R0+0, 0
	RLF        R0+0, 1
	BCF        R0+0, 0
	MOVF       FARG_is_row_empty_matrix+0, 0
	ADDWF      R0+0, 1
	MOVF       R2+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_is_row_empty20
;Teris.c,497 :: 		return 0;
	CLRF       R0+0
	GOTO       L_end_is_row_empty
;Teris.c,498 :: 		}
L_is_row_empty20:
;Teris.c,493 :: 		for(col = 0; col < MATRIX88_COLUMN_MAX; col++)
	INCF       R2+0, 1
;Teris.c,499 :: 		}
	GOTO       L_is_row_empty17
L_is_row_empty18:
;Teris.c,500 :: 		return 1;
	MOVLW      1
	MOVWF      R0+0
;Teris.c,501 :: 		}
L_end_is_row_empty:
	RETURN
; end of _is_row_empty

_is_col_empty:

;Teris.c,502 :: 		unsigned short is_col_empty(MATRIX88* matrix, unsigned short col)
;Teris.c,505 :: 		for(row = 0; row < MATRIX88_ROW_MAX; row++)
	CLRF       R2+0
L_is_col_empty21:
	MOVLW      8
	SUBWF      R2+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_is_col_empty22
;Teris.c,507 :: 		if(matrix->cell[row][col] == 1)
	MOVF       R2+0, 0
	MOVWF      R0+0
	RLF        R0+0, 1
	BCF        R0+0, 0
	RLF        R0+0, 1
	BCF        R0+0, 0
	RLF        R0+0, 1
	BCF        R0+0, 0
	MOVF       FARG_is_col_empty_matrix+0, 0
	ADDWF      R0+0, 1
	MOVF       FARG_is_col_empty_col+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_is_col_empty24
;Teris.c,509 :: 		return 0;
	CLRF       R0+0
	GOTO       L_end_is_col_empty
;Teris.c,510 :: 		}
L_is_col_empty24:
;Teris.c,505 :: 		for(row = 0; row < MATRIX88_ROW_MAX; row++)
	INCF       R2+0, 1
;Teris.c,511 :: 		}
	GOTO       L_is_col_empty21
L_is_col_empty22:
;Teris.c,512 :: 		return 1;
	MOVLW      1
	MOVWF      R0+0
;Teris.c,513 :: 		}
L_end_is_col_empty:
	RETURN
; end of _is_col_empty

_hit_land1:

;Teris.c,514 :: 		unsigned short hit_land1(short x, short y, MATRIX44* matrix44, MATRIX88* matrix88)
;Teris.c,552 :: 		return 0;
	CLRF       R0+0
;Teris.c,553 :: 		}
L_end_hit_land1:
	RETURN
; end of _hit_land1

_is_valid:

;Teris.c,554 :: 		unsigned short is_valid(short x, short y, MATRIX44* matrix44, MATRIX88* matrix88)
;Teris.c,562 :: 		for(row = MATRIX44_ROW_MAX - 1; row >= 0; row--)
	MOVLW      3
	MOVWF      R5+0
L_is_valid25:
	MOVLW      128
	XORWF      R5+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 0
	GOTO       L_is_valid26
;Teris.c,564 :: 		for(col = 0; col < MATRIX44_COLUMN_MAX; col++)
	CLRF       R6+0
L_is_valid28:
	MOVLW      128
	XORWF      R6+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      4
	SUBWF      R0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_is_valid29
;Teris.c,566 :: 		if(matrix44->cell[row][col] == 1)
	MOVF       R5+0, 0
	MOVWF      R0+0
	RLF        R0+0, 1
	BCF        R0+0, 0
	RLF        R0+0, 1
	BCF        R0+0, 0
	MOVF       FARG_is_valid_matrix44+0, 0
	ADDWF      R0+0, 1
	MOVF       R6+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_is_valid31
;Teris.c,568 :: 		if(matrix88->cell[y + row][x + col] == 1)
	MOVF       R5+0, 0
	ADDWF      FARG_is_valid_y+0, 0
	MOVWF      R3+0
	MOVLW      0
	BTFSC      FARG_is_valid_y+0, 7
	MOVLW      255
	MOVWF      R3+1
	BTFSC      STATUS+0, 0
	INCF       R3+1, 1
	MOVLW      0
	BTFSC      R5+0, 7
	MOVLW      255
	ADDWF      R3+1, 1
	MOVLW      3
	MOVWF      R2+0
	MOVF       R3+0, 0
	MOVWF      R0+0
	MOVF       R3+1, 0
	MOVWF      R0+1
	MOVF       R2+0, 0
L__is_valid192:
	BTFSC      STATUS+0, 2
	GOTO       L__is_valid193
	RLF        R0+0, 1
	RLF        R0+1, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__is_valid192
L__is_valid193:
	MOVF       R0+0, 0
	ADDWF      FARG_is_valid_matrix88+0, 0
	MOVWF      R2+0
	MOVF       R6+0, 0
	ADDWF      FARG_is_valid_x+0, 0
	MOVWF      R0+0
	MOVLW      0
	BTFSC      FARG_is_valid_x+0, 7
	MOVLW      255
	MOVWF      R0+1
	BTFSC      STATUS+0, 0
	INCF       R0+1, 1
	MOVLW      0
	BTFSC      R6+0, 7
	MOVLW      255
	ADDWF      R0+1, 1
	MOVF       R0+0, 0
	ADDWF      R2+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_is_valid32
;Teris.c,574 :: 		return 0;
	CLRF       R0+0
	GOTO       L_end_is_valid
;Teris.c,575 :: 		}
L_is_valid32:
;Teris.c,577 :: 		if(( x + col < 0) || (x + col >= MATRIX88_COLUMN_MAX))
	MOVF       R6+0, 0
	ADDWF      FARG_is_valid_x+0, 0
	MOVWF      R1+0
	MOVLW      0
	BTFSC      FARG_is_valid_x+0, 7
	MOVLW      255
	MOVWF      R1+1
	BTFSC      STATUS+0, 0
	INCF       R1+1, 1
	MOVLW      0
	BTFSC      R6+0, 7
	MOVLW      255
	ADDWF      R1+1, 1
	MOVLW      128
	XORWF      R1+1, 0
	MOVWF      R0+0
	MOVLW      128
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 2
	GOTO       L__is_valid194
	MOVLW      0
	SUBWF      R1+0, 0
L__is_valid194:
	BTFSS      STATUS+0, 0
	GOTO       L__is_valid166
	MOVF       R6+0, 0
	ADDWF      FARG_is_valid_x+0, 0
	MOVWF      R1+0
	MOVLW      0
	BTFSC      FARG_is_valid_x+0, 7
	MOVLW      255
	MOVWF      R1+1
	BTFSC      STATUS+0, 0
	INCF       R1+1, 1
	MOVLW      0
	BTFSC      R6+0, 7
	MOVLW      255
	ADDWF      R1+1, 1
	MOVLW      128
	XORWF      R1+1, 0
	MOVWF      R0+0
	MOVLW      128
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 2
	GOTO       L__is_valid195
	MOVLW      8
	SUBWF      R1+0, 0
L__is_valid195:
	BTFSC      STATUS+0, 0
	GOTO       L__is_valid166
	GOTO       L_is_valid35
L__is_valid166:
;Teris.c,583 :: 		return 0;
	CLRF       R0+0
	GOTO       L_end_is_valid
;Teris.c,584 :: 		}
L_is_valid35:
;Teris.c,585 :: 		if((y + row) > (MATRIX88_ROW_MAX - 1))
	MOVF       R5+0, 0
	ADDWF      FARG_is_valid_y+0, 0
	MOVWF      R1+0
	MOVLW      0
	BTFSC      FARG_is_valid_y+0, 7
	MOVLW      255
	MOVWF      R1+1
	BTFSC      STATUS+0, 0
	INCF       R1+1, 1
	MOVLW      0
	BTFSC      R5+0, 7
	MOVLW      255
	ADDWF      R1+1, 1
	MOVLW      128
	MOVWF      R0+0
	MOVLW      128
	XORWF      R1+1, 0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 2
	GOTO       L__is_valid196
	MOVF       R1+0, 0
	SUBLW      7
L__is_valid196:
	BTFSC      STATUS+0, 0
	GOTO       L_is_valid36
;Teris.c,591 :: 		return 0;
	CLRF       R0+0
	GOTO       L_end_is_valid
;Teris.c,592 :: 		}
L_is_valid36:
;Teris.c,593 :: 		}
L_is_valid31:
;Teris.c,564 :: 		for(col = 0; col < MATRIX44_COLUMN_MAX; col++)
	INCF       R6+0, 1
;Teris.c,594 :: 		}
	GOTO       L_is_valid28
L_is_valid29:
;Teris.c,562 :: 		for(row = MATRIX44_ROW_MAX - 1; row >= 0; row--)
	DECF       R5+0, 1
;Teris.c,595 :: 		}
	GOTO       L_is_valid25
L_is_valid26:
;Teris.c,600 :: 		return 1;
	MOVLW      1
	MOVWF      R0+0
;Teris.c,601 :: 		}
L_end_is_valid:
	RETURN
; end of _is_valid

_is_left_boundary:

;Teris.c,602 :: 		unsigned short is_left_boundary(short x, MATRIX44* matrix44, MATRIX88* matrix88)
;Teris.c,606 :: 		for(row = MATRIX44_ROW_MAX - 1; row >= 0; row--)
	MOVLW      3
	MOVWF      R3+0
L_is_left_boundary37:
	MOVLW      128
	XORWF      R3+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 0
	GOTO       L_is_left_boundary38
;Teris.c,608 :: 		for(col = 0; col < MATRIX44_COLUMN_MAX; col++)
	CLRF       R4+0
L_is_left_boundary40:
	MOVLW      128
	XORWF      R4+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      4
	SUBWF      R0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_is_left_boundary41
;Teris.c,610 :: 		if(matrix44->cell[row][col] == 1)
	MOVF       R3+0, 0
	MOVWF      R0+0
	RLF        R0+0, 1
	BCF        R0+0, 0
	RLF        R0+0, 1
	BCF        R0+0, 0
	MOVF       FARG_is_left_boundary_matrix44+0, 0
	ADDWF      R0+0, 1
	MOVF       R4+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_is_left_boundary43
;Teris.c,612 :: 		if( x + col < 0)
	MOVF       R4+0, 0
	ADDWF      FARG_is_left_boundary_x+0, 0
	MOVWF      R1+0
	MOVLW      0
	BTFSC      FARG_is_left_boundary_x+0, 7
	MOVLW      255
	MOVWF      R1+1
	BTFSC      STATUS+0, 0
	INCF       R1+1, 1
	MOVLW      0
	BTFSC      R4+0, 7
	MOVLW      255
	ADDWF      R1+1, 1
	MOVLW      128
	XORWF      R1+1, 0
	MOVWF      R0+0
	MOVLW      128
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 2
	GOTO       L__is_left_boundary198
	MOVLW      0
	SUBWF      R1+0, 0
L__is_left_boundary198:
	BTFSC      STATUS+0, 0
	GOTO       L_is_left_boundary44
;Teris.c,618 :: 		return LEFT_OVER_BOUNDARY;
	MOVLW      2
	MOVWF      R0+0
	GOTO       L_end_is_left_boundary
;Teris.c,619 :: 		}
L_is_left_boundary44:
;Teris.c,620 :: 		}
L_is_left_boundary43:
;Teris.c,608 :: 		for(col = 0; col < MATRIX44_COLUMN_MAX; col++)
	INCF       R4+0, 1
;Teris.c,621 :: 		}
	GOTO       L_is_left_boundary40
L_is_left_boundary41:
;Teris.c,606 :: 		for(row = MATRIX44_ROW_MAX - 1; row >= 0; row--)
	DECF       R3+0, 1
;Teris.c,622 :: 		}
	GOTO       L_is_left_boundary37
L_is_left_boundary38:
;Teris.c,623 :: 		return OK;
	CLRF       R0+0
;Teris.c,624 :: 		}
L_end_is_left_boundary:
	RETURN
; end of _is_left_boundary

_is_right_boundary:

;Teris.c,625 :: 		unsigned short is_right_boundary(short x, MATRIX44* matrix44, MATRIX88* matrix88)
;Teris.c,629 :: 		for(row = MATRIX44_ROW_MAX - 1; row >= 0; row--)
	MOVLW      3
	MOVWF      R3+0
L_is_right_boundary45:
	MOVLW      128
	XORWF      R3+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 0
	GOTO       L_is_right_boundary46
;Teris.c,631 :: 		for(col = 0; col < MATRIX44_COLUMN_MAX; col++)
	CLRF       R4+0
L_is_right_boundary48:
	MOVLW      128
	XORWF      R4+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      4
	SUBWF      R0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_is_right_boundary49
;Teris.c,633 :: 		if(matrix44->cell[row][col] == 1)
	MOVF       R3+0, 0
	MOVWF      R0+0
	RLF        R0+0, 1
	BCF        R0+0, 0
	RLF        R0+0, 1
	BCF        R0+0, 0
	MOVF       FARG_is_right_boundary_matrix44+0, 0
	ADDWF      R0+0, 1
	MOVF       R4+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_is_right_boundary51
;Teris.c,635 :: 		if(x + col > MATRIX88_COLUMN_MAX - 1)
	MOVF       R4+0, 0
	ADDWF      FARG_is_right_boundary_x+0, 0
	MOVWF      R1+0
	MOVLW      0
	BTFSC      FARG_is_right_boundary_x+0, 7
	MOVLW      255
	MOVWF      R1+1
	BTFSC      STATUS+0, 0
	INCF       R1+1, 1
	MOVLW      0
	BTFSC      R4+0, 7
	MOVLW      255
	ADDWF      R1+1, 1
	MOVLW      128
	MOVWF      R0+0
	MOVLW      128
	XORWF      R1+1, 0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 2
	GOTO       L__is_right_boundary200
	MOVF       R1+0, 0
	SUBLW      7
L__is_right_boundary200:
	BTFSC      STATUS+0, 0
	GOTO       L_is_right_boundary52
;Teris.c,641 :: 		return RIGHT_OVER_BOUNDARY;
	MOVLW      3
	MOVWF      R0+0
	GOTO       L_end_is_right_boundary
;Teris.c,642 :: 		}
L_is_right_boundary52:
;Teris.c,643 :: 		}
L_is_right_boundary51:
;Teris.c,631 :: 		for(col = 0; col < MATRIX44_COLUMN_MAX; col++)
	INCF       R4+0, 1
;Teris.c,644 :: 		}
	GOTO       L_is_right_boundary48
L_is_right_boundary49:
;Teris.c,629 :: 		for(row = MATRIX44_ROW_MAX - 1; row >= 0; row--)
	DECF       R3+0, 1
;Teris.c,645 :: 		}
	GOTO       L_is_right_boundary45
L_is_right_boundary46:
;Teris.c,646 :: 		return OK;
	CLRF       R0+0
;Teris.c,647 :: 		}
L_end_is_right_boundary:
	RETURN
; end of _is_right_boundary

_fall_off:

;Teris.c,648 :: 		unsigned short fall_off(short x, short y, MATRIX44* matrix44, MATRIX88* matrix88)
;Teris.c,650 :: 		while(1)
L_fall_off53:
;Teris.c,654 :: 		for(row = MATRIX44_ROW_MAX - 1; row >= 0; row--)
	MOVLW      3
	MOVWF      R5+0
L_fall_off55:
	MOVLW      128
	XORWF      R5+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 0
	GOTO       L_fall_off56
;Teris.c,656 :: 		for(col = 0; col < MATRIX44_COLUMN_MAX; col++)
	CLRF       R6+0
L_fall_off58:
	MOVLW      128
	XORWF      R6+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      4
	SUBWF      R0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_fall_off59
;Teris.c,658 :: 		if(matrix44->cell[row][col] == 1)
	MOVF       R5+0, 0
	MOVWF      R0+0
	RLF        R0+0, 1
	BCF        R0+0, 0
	RLF        R0+0, 1
	BCF        R0+0, 0
	MOVF       FARG_fall_off_matrix44+0, 0
	ADDWF      R0+0, 1
	MOVF       R6+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_fall_off61
;Teris.c,660 :: 		if(matrix88->cell[y + row + 1][x + col] == 1)
	MOVF       R5+0, 0
	ADDWF      FARG_fall_off_y+0, 0
	MOVWF      R0+0
	MOVLW      0
	BTFSC      FARG_fall_off_y+0, 7
	MOVLW      255
	MOVWF      R0+1
	BTFSC      STATUS+0, 0
	INCF       R0+1, 1
	MOVLW      0
	BTFSC      R5+0, 7
	MOVLW      255
	ADDWF      R0+1, 1
	MOVF       R0+0, 0
	ADDLW      1
	MOVWF      R3+0
	MOVLW      0
	BTFSC      STATUS+0, 0
	ADDLW      1
	ADDWF      R0+1, 0
	MOVWF      R3+1
	MOVLW      3
	MOVWF      R2+0
	MOVF       R3+0, 0
	MOVWF      R0+0
	MOVF       R3+1, 0
	MOVWF      R0+1
	MOVF       R2+0, 0
L__fall_off202:
	BTFSC      STATUS+0, 2
	GOTO       L__fall_off203
	RLF        R0+0, 1
	RLF        R0+1, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__fall_off202
L__fall_off203:
	MOVF       R0+0, 0
	ADDWF      FARG_fall_off_matrix88+0, 0
	MOVWF      R2+0
	MOVF       R6+0, 0
	ADDWF      FARG_fall_off_x+0, 0
	MOVWF      R0+0
	MOVLW      0
	BTFSC      FARG_fall_off_x+0, 7
	MOVLW      255
	MOVWF      R0+1
	BTFSC      STATUS+0, 0
	INCF       R0+1, 1
	MOVLW      0
	BTFSC      R6+0, 7
	MOVLW      255
	ADDWF      R0+1, 1
	MOVF       R0+0, 0
	ADDWF      R2+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_fall_off62
;Teris.c,666 :: 		return y;
	MOVF       FARG_fall_off_y+0, 0
	MOVWF      R0+0
	GOTO       L_end_fall_off
;Teris.c,667 :: 		}
L_fall_off62:
;Teris.c,668 :: 		if((y + row) >= (MATRIX88_ROW_MAX - 1))
	MOVF       R5+0, 0
	ADDWF      FARG_fall_off_y+0, 0
	MOVWF      R1+0
	MOVLW      0
	BTFSC      FARG_fall_off_y+0, 7
	MOVLW      255
	MOVWF      R1+1
	BTFSC      STATUS+0, 0
	INCF       R1+1, 1
	MOVLW      0
	BTFSC      R5+0, 7
	MOVLW      255
	ADDWF      R1+1, 1
	MOVLW      128
	XORWF      R1+1, 0
	MOVWF      R0+0
	MOVLW      128
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 2
	GOTO       L__fall_off204
	MOVLW      7
	SUBWF      R1+0, 0
L__fall_off204:
	BTFSS      STATUS+0, 0
	GOTO       L_fall_off63
;Teris.c,674 :: 		return y;
	MOVF       FARG_fall_off_y+0, 0
	MOVWF      R0+0
	GOTO       L_end_fall_off
;Teris.c,675 :: 		}
L_fall_off63:
;Teris.c,676 :: 		}
L_fall_off61:
;Teris.c,656 :: 		for(col = 0; col < MATRIX44_COLUMN_MAX; col++)
	INCF       R6+0, 1
;Teris.c,677 :: 		}
	GOTO       L_fall_off58
L_fall_off59:
;Teris.c,654 :: 		for(row = MATRIX44_ROW_MAX - 1; row >= 0; row--)
	DECF       R5+0, 1
;Teris.c,678 :: 		}
	GOTO       L_fall_off55
L_fall_off56:
;Teris.c,679 :: 		y++;
	INCF       FARG_fall_off_y+0, 1
;Teris.c,680 :: 		}
	GOTO       L_fall_off53
;Teris.c,681 :: 		}
L_end_fall_off:
	RETURN
; end of _fall_off

_clear:

;Teris.c,682 :: 		void clear(short x, short y, MATRIX44* matrix44, MATRIX88* matrix88)
;Teris.c,686 :: 		for(row = 0; row < MATRIX44_ROW_MAX; row++)
	CLRF       R1+0
L_clear64:
	MOVLW      4
	SUBWF      R1+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_clear65
	INCF       R1+0, 1
;Teris.c,695 :: 		}
	GOTO       L_clear64
L_clear65:
;Teris.c,696 :: 		}
L_end_clear:
	RETURN
; end of _clear

_merge:

;Teris.c,697 :: 		void merge(short x, short y, MATRIX44* matrix44, MATRIX88* matrix88)
;Teris.c,701 :: 		for(row = 0; row < MATRIX44_ROW_MAX; row++)
	CLRF       R1+0
L_merge67:
	MOVLW      4
	SUBWF      R1+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_merge68
	INCF       R1+0, 1
;Teris.c,710 :: 		}
	GOTO       L_merge67
L_merge68:
;Teris.c,711 :: 		}
L_end_merge:
	RETURN
; end of _merge

_merge1:

;Teris.c,712 :: 		void merge1(short x, short y, MATRIX44* matrix44, MATRIX88* matrix88_in, MATRIX88* matrix88_out)
;Teris.c,723 :: 		memcpy(matrix88_out, matrix88_in, len);
	MOVF       FARG_merge1_matrix88_out+0, 0
	MOVWF      FARG_memcpy_d1+0
	MOVF       FARG_merge1_matrix88_in+0, 0
	MOVWF      FARG_memcpy_s1+0
	MOVLW      64
	MOVWF      FARG_memcpy_n+0
	MOVLW      0
	MOVWF      FARG_memcpy_n+1
	CALL       _memcpy+0
;Teris.c,725 :: 		for(row = 0; row < MATRIX44_ROW_MAX; row++)
	CLRF       merge1_row_L0+0
L_merge170:
	MOVLW      4
	SUBWF      merge1_row_L0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_merge171
;Teris.c,727 :: 		for(col = 0; col < MATRIX44_COLUMN_MAX; col++)
	CLRF       merge1_col_L0+0
L_merge173:
	MOVLW      4
	SUBWF      merge1_col_L0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_merge174
;Teris.c,729 :: 		if(matrix44->cell[row][col] == 1)
	MOVF       merge1_row_L0+0, 0
	MOVWF      R0+0
	RLF        R0+0, 1
	BCF        R0+0, 0
	RLF        R0+0, 1
	BCF        R0+0, 0
	MOVF       FARG_merge1_matrix44+0, 0
	ADDWF      R0+0, 1
	MOVF       merge1_col_L0+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_merge176
;Teris.c,731 :: 		matrix88_out->cell[y + row][x + col] = 1;
	MOVF       merge1_row_L0+0, 0
	ADDWF      FARG_merge1_y+0, 0
	MOVWF      R3+0
	MOVLW      0
	BTFSC      FARG_merge1_y+0, 7
	MOVLW      255
	MOVWF      R3+1
	BTFSC      STATUS+0, 0
	INCF       R3+1, 1
	MOVLW      3
	MOVWF      R2+0
	MOVF       R3+0, 0
	MOVWF      R0+0
	MOVF       R3+1, 0
	MOVWF      R0+1
	MOVF       R2+0, 0
L__merge1208:
	BTFSC      STATUS+0, 2
	GOTO       L__merge1209
	RLF        R0+0, 1
	RLF        R0+1, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__merge1208
L__merge1209:
	MOVF       R0+0, 0
	ADDWF      FARG_merge1_matrix88_out+0, 0
	MOVWF      R2+0
	MOVF       merge1_col_L0+0, 0
	ADDWF      FARG_merge1_x+0, 0
	MOVWF      R0+0
	MOVLW      0
	BTFSC      FARG_merge1_x+0, 7
	MOVLW      255
	MOVWF      R0+1
	BTFSC      STATUS+0, 0
	INCF       R0+1, 1
	MOVF       R0+0, 0
	ADDWF      R2+0, 0
	MOVWF      FSR
	MOVLW      1
	MOVWF      INDF+0
;Teris.c,732 :: 		}
L_merge176:
;Teris.c,727 :: 		for(col = 0; col < MATRIX44_COLUMN_MAX; col++)
	INCF       merge1_col_L0+0, 1
;Teris.c,733 :: 		}
	GOTO       L_merge173
L_merge174:
;Teris.c,725 :: 		for(row = 0; row < MATRIX44_ROW_MAX; row++)
	INCF       merge1_row_L0+0, 1
;Teris.c,734 :: 		}
	GOTO       L_merge170
L_merge171:
;Teris.c,735 :: 		}
L_end_merge1:
	RETURN
; end of _merge1

_evaluate:

;Teris.c,736 :: 		unsigned int evaluate(MATRIX88* matrix)
;Teris.c,738 :: 		unsigned int risk = 0;
	CLRF       evaluate_risk_L0+0
	CLRF       evaluate_risk_L0+1
	MOVLW      255
	MOVWF      evaluate_full_L0+0
;Teris.c,742 :: 		for(col = 0; col < MATRIX88_COLUMN_MAX; col++)
	CLRF       R2+0
L_evaluate77:
	MOVLW      8
	SUBWF      R2+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_evaluate78
;Teris.c,744 :: 		full = 0xFF;
	MOVLW      255
	MOVWF      evaluate_full_L0+0
;Teris.c,745 :: 		for(row = MATRIX88_ROW_MAX - 1; row >= 0; row--)
	MOVLW      7
	MOVWF      R3+0
L_evaluate80:
	MOVLW      128
	XORWF      R3+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 0
	GOTO       L_evaluate81
;Teris.c,747 :: 		if(full == 0xFF)
	MOVF       evaluate_full_L0+0, 0
	XORLW      255
	BTFSS      STATUS+0, 2
	GOTO       L_evaluate83
;Teris.c,749 :: 		full = matrix->cell[row][col];
	MOVLW      3
	MOVWF      R1+0
	MOVF       R3+0, 0
	MOVWF      R0+0
	MOVF       R1+0, 0
L__evaluate211:
	BTFSC      STATUS+0, 2
	GOTO       L__evaluate212
	RLF        R0+0, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__evaluate211
L__evaluate212:
	MOVF       FARG_evaluate_matrix+0, 0
	ADDWF      R0+0, 1
	MOVF       R2+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	MOVWF      evaluate_full_L0+0
;Teris.c,750 :: 		}
	GOTO       L_evaluate84
L_evaluate83:
;Teris.c,753 :: 		if(matrix->cell[row][col] == 1)
	MOVLW      3
	MOVWF      R1+0
	MOVF       R3+0, 0
	MOVWF      R0+0
	MOVF       R1+0, 0
L__evaluate213:
	BTFSC      STATUS+0, 2
	GOTO       L__evaluate214
	RLF        R0+0, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__evaluate213
L__evaluate214:
	MOVF       FARG_evaluate_matrix+0, 0
	ADDWF      R0+0, 1
	MOVF       R2+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_evaluate85
;Teris.c,755 :: 		if(full == 0)
	MOVF       evaluate_full_L0+0, 0
	XORLW      0
	BTFSS      STATUS+0, 2
	GOTO       L_evaluate86
;Teris.c,757 :: 		risk++;
	INCF       evaluate_risk_L0+0, 1
	BTFSC      STATUS+0, 2
	INCF       evaluate_risk_L0+1, 1
;Teris.c,758 :: 		}
L_evaluate86:
;Teris.c,759 :: 		}
L_evaluate85:
;Teris.c,760 :: 		full = matrix->cell[row][col];
	MOVLW      3
	MOVWF      R1+0
	MOVF       R3+0, 0
	MOVWF      R0+0
	MOVF       R1+0, 0
L__evaluate215:
	BTFSC      STATUS+0, 2
	GOTO       L__evaluate216
	RLF        R0+0, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__evaluate215
L__evaluate216:
	MOVF       FARG_evaluate_matrix+0, 0
	ADDWF      R0+0, 1
	MOVF       R2+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	MOVWF      evaluate_full_L0+0
;Teris.c,761 :: 		}
L_evaluate84:
;Teris.c,745 :: 		for(row = MATRIX88_ROW_MAX - 1; row >= 0; row--)
	DECF       R3+0, 1
;Teris.c,762 :: 		}
	GOTO       L_evaluate80
L_evaluate81:
;Teris.c,742 :: 		for(col = 0; col < MATRIX88_COLUMN_MAX; col++)
	INCF       R2+0, 1
;Teris.c,763 :: 		}
	GOTO       L_evaluate77
L_evaluate78:
;Teris.c,769 :: 		return risk;
	MOVF       evaluate_risk_L0+0, 0
	MOVWF      R0+0
	MOVF       evaluate_risk_L0+1, 0
	MOVWF      R0+1
;Teris.c,770 :: 		}
L_end_evaluate:
	RETURN
; end of _evaluate

_char_info_index_rand:

;Teris.c,771 :: 		unsigned short char_info_index_rand()
;Teris.c,773 :: 		return (unsigned short)(rand()%CHARACTER_MAX);
	CALL       _rand+0
	MOVLW      9
	MOVWF      R4+0
	MOVLW      0
	MOVWF      R4+1
	CALL       _Div_16x16_S+0
	MOVF       R8+0, 0
	MOVWF      R0+0
	MOVF       R8+1, 0
	MOVWF      R0+1
;Teris.c,774 :: 		}
L_end_char_info_index_rand:
	RETURN
; end of _char_info_index_rand

_left_most:

;Teris.c,775 :: 		short left_most(short x, MATRIX44* matrix44, MATRIX88* matrix88)
;Teris.c,777 :: 		while(1)
L_left_most87:
;Teris.c,779 :: 		if(is_left_boundary(x, matrix44, matrix88) == LEFT_OVER_BOUNDARY)
	MOVF       FARG_left_most_x+0, 0
	MOVWF      FARG_is_left_boundary_x+0
	MOVF       FARG_left_most_matrix44+0, 0
	MOVWF      FARG_is_left_boundary_matrix44+0
	MOVF       FARG_left_most_matrix88+0, 0
	MOVWF      FARG_is_left_boundary_matrix88+0
	CALL       _is_left_boundary+0
	MOVF       R0+0, 0
	XORLW      2
	BTFSS      STATUS+0, 2
	GOTO       L_left_most89
;Teris.c,785 :: 		return x + 1;
	INCF       FARG_left_most_x+0, 0
	MOVWF      R0+0
	GOTO       L_end_left_most
;Teris.c,786 :: 		}
L_left_most89:
;Teris.c,787 :: 		x--;
	DECF       FARG_left_most_x+0, 1
;Teris.c,788 :: 		}
	GOTO       L_left_most87
;Teris.c,789 :: 		}
L_end_left_most:
	RETURN
; end of _left_most

_right_most:

;Teris.c,790 :: 		short right_most(short x, MATRIX44* matrix44, MATRIX88* matrix88)
;Teris.c,792 :: 		while(1)
L_right_most90:
;Teris.c,794 :: 		if(is_right_boundary(x, matrix44, matrix88) == RIGHT_OVER_BOUNDARY)
	MOVF       FARG_right_most_x+0, 0
	MOVWF      FARG_is_right_boundary_x+0
	MOVF       FARG_right_most_matrix44+0, 0
	MOVWF      FARG_is_right_boundary_matrix44+0
	MOVF       FARG_right_most_matrix88+0, 0
	MOVWF      FARG_is_right_boundary_matrix88+0
	CALL       _is_right_boundary+0
	MOVF       R0+0, 0
	XORLW      3
	BTFSS      STATUS+0, 2
	GOTO       L_right_most92
;Teris.c,800 :: 		return x - 1;
	DECF       FARG_right_most_x+0, 0
	MOVWF      R0+0
	GOTO       L_end_right_most
;Teris.c,801 :: 		}
L_right_most92:
;Teris.c,802 :: 		x++;
	INCF       FARG_right_most_x+0, 1
;Teris.c,803 :: 		}
	GOTO       L_right_most90
;Teris.c,804 :: 		}
L_end_right_most:
	RETURN
; end of _right_most

_get_high:

;Teris.c,805 :: 		unsigned short get_high(MATRIX88* matrix)
;Teris.c,808 :: 		for(row = MATRIX88_ROW_MAX - 1; row >= 0; row--)
	MOVLW      7
	MOVWF      get_high_row_L0+0
L_get_high93:
	MOVLW      128
	XORWF      get_high_row_L0+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 0
	GOTO       L_get_high94
;Teris.c,810 :: 		if(is_row_empty(matrix, row) == 1)
	MOVF       FARG_get_high_matrix+0, 0
	MOVWF      FARG_is_row_empty_matrix+0
	MOVF       get_high_row_L0+0, 0
	MOVWF      FARG_is_row_empty_row+0
	CALL       _is_row_empty+0
	MOVF       R0+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_get_high96
;Teris.c,816 :: 		return (unsigned short)(MATRIX88_ROW_MAX - row - 1);
	MOVF       get_high_row_L0+0, 0
	SUBLW      8
	MOVWF      R0+0
	DECF       R0+0, 1
	GOTO       L_end_get_high
;Teris.c,817 :: 		}
L_get_high96:
;Teris.c,808 :: 		for(row = MATRIX88_ROW_MAX - 1; row >= 0; row--)
	DECF       get_high_row_L0+0, 1
;Teris.c,818 :: 		}
	GOTO       L_get_high93
L_get_high94:
;Teris.c,819 :: 		return MATRIX88_ROW_MAX;
	MOVLW      8
	MOVWF      R0+0
;Teris.c,820 :: 		}
L_end_get_high:
	RETURN
; end of _get_high

_get_high_after_merge:

;Teris.c,821 :: 		unsigned short get_high_after_merge(short y, MATRIX44* matrix)
;Teris.c,825 :: 		for(row = 0; row < MATRIX44_ROW_MAX; row++)
	CLRF       R2+0
L_get_high_after_merge97:
	MOVLW      128
	XORWF      R2+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      4
	SUBWF      R0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_get_high_after_merge98
;Teris.c,827 :: 		for(col = 0; col < MATRIX44_COLUMN_MAX; col++)
	CLRF       R3+0
L_get_high_after_merge100:
	MOVLW      128
	XORWF      R3+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      4
	SUBWF      R0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_get_high_after_merge101
;Teris.c,829 :: 		if(matrix->cell[row][col] == 1)
	MOVF       R2+0, 0
	MOVWF      R0+0
	RLF        R0+0, 1
	BCF        R0+0, 0
	RLF        R0+0, 1
	BCF        R0+0, 0
	MOVF       FARG_get_high_after_merge_matrix+0, 0
	ADDWF      R0+0, 1
	MOVF       R3+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_get_high_after_merge103
;Teris.c,835 :: 		return (unsigned short)(MATRIX88_ROW_MAX - y - row);
	MOVF       FARG_get_high_after_merge_y+0, 0
	SUBLW      8
	MOVWF      R0+0
	MOVF       R2+0, 0
	SUBWF      R0+0, 1
	GOTO       L_end_get_high_after_merge
;Teris.c,836 :: 		}
L_get_high_after_merge103:
;Teris.c,827 :: 		for(col = 0; col < MATRIX44_COLUMN_MAX; col++)
	INCF       R3+0, 1
;Teris.c,837 :: 		}
	GOTO       L_get_high_after_merge100
L_get_high_after_merge101:
;Teris.c,825 :: 		for(row = 0; row < MATRIX44_ROW_MAX; row++)
	INCF       R2+0, 1
;Teris.c,838 :: 		}
	GOTO       L_get_high_after_merge97
L_get_high_after_merge98:
;Teris.c,839 :: 		}
L_end_get_high_after_merge:
	RETURN
; end of _get_high_after_merge

_get_holes_after_merge:

;Teris.c,840 :: 		unsigned short get_holes_after_merge(MATRIX88* matrix)
;Teris.c,842 :: 		short start = -1;
	MOVLW      255
	MOVWF      get_holes_after_merge_start_L0+0
	MOVLW      255
	MOVWF      get_holes_after_merge_stop_L0+0
	CLRF       get_holes_after_merge_num_hole_L0+0
;Teris.c,847 :: 		for(col = 0; col < MATRIX88_COLUMN_MAX; col++)
	CLRF       R5+0
L_get_holes_after_merge104:
	MOVLW      128
	XORWF      R5+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      8
	SUBWF      R0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_get_holes_after_merge105
;Teris.c,849 :: 		start = stop = -1;
	MOVLW      255
	MOVWF      get_holes_after_merge_stop_L0+0
	MOVLW      255
	MOVWF      get_holes_after_merge_start_L0+0
;Teris.c,850 :: 		for(row = 0; row < MATRIX88_ROW_MAX; row++)
	CLRF       R6+0
L_get_holes_after_merge107:
	MOVLW      128
	XORWF      R6+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      8
	SUBWF      R0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_get_holes_after_merge108
;Teris.c,852 :: 		if(col == 0)
	MOVF       R5+0, 0
	XORLW      0
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge110
;Teris.c,854 :: 		if((matrix->cell[row][col] == 0) && (matrix->cell[row][col + 1] == 1))
	MOVLW      3
	MOVWF      R1+0
	MOVF       R6+0, 0
	MOVWF      R0+0
	MOVF       R1+0, 0
L__get_holes_after_merge223:
	BTFSC      STATUS+0, 2
	GOTO       L__get_holes_after_merge224
	RLF        R0+0, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__get_holes_after_merge223
L__get_holes_after_merge224:
	MOVF       FARG_get_holes_after_merge_matrix+0, 0
	ADDWF      R0+0, 1
	MOVF       R5+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      0
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge113
	MOVLW      3
	MOVWF      R1+0
	MOVF       R6+0, 0
	MOVWF      R0+0
	MOVF       R1+0, 0
L__get_holes_after_merge225:
	BTFSC      STATUS+0, 2
	GOTO       L__get_holes_after_merge226
	RLF        R0+0, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__get_holes_after_merge225
L__get_holes_after_merge226:
	MOVF       R0+0, 0
	ADDWF      FARG_get_holes_after_merge_matrix+0, 0
	MOVWF      R2+0
	MOVF       R5+0, 0
	ADDLW      1
	MOVWF      R0+0
	CLRF       R0+1
	BTFSC      STATUS+0, 0
	INCF       R0+1, 1
	MOVLW      0
	BTFSC      R5+0, 7
	MOVLW      255
	ADDWF      R0+1, 1
	MOVF       R0+0, 0
	ADDWF      R2+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge113
L__get_holes_after_merge170:
;Teris.c,856 :: 		if(start == -1)
	MOVF       get_holes_after_merge_start_L0+0, 0
	XORLW      255
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge114
;Teris.c,858 :: 		start = row;
	MOVF       R6+0, 0
	MOVWF      get_holes_after_merge_start_L0+0
;Teris.c,859 :: 		}
L_get_holes_after_merge114:
;Teris.c,860 :: 		}
L_get_holes_after_merge113:
;Teris.c,861 :: 		}
	GOTO       L_get_holes_after_merge115
L_get_holes_after_merge110:
;Teris.c,862 :: 		else if(col == MATRIX88_COLUMN_MAX - 1)
	MOVF       R5+0, 0
	XORLW      7
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge116
;Teris.c,864 :: 		if((matrix->cell[row][col] == 0) && (matrix->cell[row][col - 1] == 1))
	MOVLW      3
	MOVWF      R1+0
	MOVF       R6+0, 0
	MOVWF      R0+0
	MOVF       R1+0, 0
L__get_holes_after_merge227:
	BTFSC      STATUS+0, 2
	GOTO       L__get_holes_after_merge228
	RLF        R0+0, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__get_holes_after_merge227
L__get_holes_after_merge228:
	MOVF       FARG_get_holes_after_merge_matrix+0, 0
	ADDWF      R0+0, 1
	MOVF       R5+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      0
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge119
	MOVLW      3
	MOVWF      R1+0
	MOVF       R6+0, 0
	MOVWF      R0+0
	MOVF       R1+0, 0
L__get_holes_after_merge229:
	BTFSC      STATUS+0, 2
	GOTO       L__get_holes_after_merge230
	RLF        R0+0, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__get_holes_after_merge229
L__get_holes_after_merge230:
	MOVF       R0+0, 0
	ADDWF      FARG_get_holes_after_merge_matrix+0, 0
	MOVWF      R2+0
	MOVLW      1
	SUBWF      R5+0, 0
	MOVWF      R0+0
	CLRF       R0+1
	BTFSS      STATUS+0, 0
	DECF       R0+1, 1
	MOVLW      0
	BTFSC      R5+0, 7
	MOVLW      255
	ADDWF      R0+1, 1
	MOVF       R0+0, 0
	ADDWF      R2+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge119
L__get_holes_after_merge169:
;Teris.c,866 :: 		if(start == -1)
	MOVF       get_holes_after_merge_start_L0+0, 0
	XORLW      255
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge120
;Teris.c,868 :: 		start = row;
	MOVF       R6+0, 0
	MOVWF      get_holes_after_merge_start_L0+0
;Teris.c,869 :: 		}
L_get_holes_after_merge120:
;Teris.c,870 :: 		}
L_get_holes_after_merge119:
;Teris.c,871 :: 		}
	GOTO       L_get_holes_after_merge121
L_get_holes_after_merge116:
;Teris.c,874 :: 		if((matrix->cell[row][col] == 0) && (matrix->cell[row][col - 1] == 1) && (matrix->cell[row][col + 1] == 1))
	MOVLW      3
	MOVWF      R1+0
	MOVF       R6+0, 0
	MOVWF      R0+0
	MOVF       R1+0, 0
L__get_holes_after_merge231:
	BTFSC      STATUS+0, 2
	GOTO       L__get_holes_after_merge232
	RLF        R0+0, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__get_holes_after_merge231
L__get_holes_after_merge232:
	MOVF       FARG_get_holes_after_merge_matrix+0, 0
	ADDWF      R0+0, 1
	MOVF       R5+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      0
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge124
	MOVLW      3
	MOVWF      R1+0
	MOVF       R6+0, 0
	MOVWF      R0+0
	MOVF       R1+0, 0
L__get_holes_after_merge233:
	BTFSC      STATUS+0, 2
	GOTO       L__get_holes_after_merge234
	RLF        R0+0, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__get_holes_after_merge233
L__get_holes_after_merge234:
	MOVF       R0+0, 0
	ADDWF      FARG_get_holes_after_merge_matrix+0, 0
	MOVWF      R2+0
	MOVLW      1
	SUBWF      R5+0, 0
	MOVWF      R0+0
	CLRF       R0+1
	BTFSS      STATUS+0, 0
	DECF       R0+1, 1
	MOVLW      0
	BTFSC      R5+0, 7
	MOVLW      255
	ADDWF      R0+1, 1
	MOVF       R0+0, 0
	ADDWF      R2+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge124
	MOVLW      3
	MOVWF      R1+0
	MOVF       R6+0, 0
	MOVWF      R0+0
	MOVF       R1+0, 0
L__get_holes_after_merge235:
	BTFSC      STATUS+0, 2
	GOTO       L__get_holes_after_merge236
	RLF        R0+0, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__get_holes_after_merge235
L__get_holes_after_merge236:
	MOVF       R0+0, 0
	ADDWF      FARG_get_holes_after_merge_matrix+0, 0
	MOVWF      R2+0
	MOVF       R5+0, 0
	ADDLW      1
	MOVWF      R0+0
	CLRF       R0+1
	BTFSC      STATUS+0, 0
	INCF       R0+1, 1
	MOVLW      0
	BTFSC      R5+0, 7
	MOVLW      255
	ADDWF      R0+1, 1
	MOVF       R0+0, 0
	ADDWF      R2+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge124
L__get_holes_after_merge168:
;Teris.c,876 :: 		if(start == -1)
	MOVF       get_holes_after_merge_start_L0+0, 0
	XORLW      255
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge125
;Teris.c,878 :: 		start = row;
	MOVF       R6+0, 0
	MOVWF      get_holes_after_merge_start_L0+0
;Teris.c,879 :: 		}
L_get_holes_after_merge125:
;Teris.c,880 :: 		}
L_get_holes_after_merge124:
;Teris.c,881 :: 		}
L_get_holes_after_merge121:
L_get_holes_after_merge115:
;Teris.c,882 :: 		if(start >= 0)
	MOVLW      128
	XORWF      get_holes_after_merge_start_L0+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 0
	GOTO       L_get_holes_after_merge126
;Teris.c,884 :: 		if(row == MATRIX88_ROW_MAX - 1)
	MOVF       R6+0, 0
	XORLW      7
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge127
;Teris.c,886 :: 		if(stop == -1)
	MOVF       get_holes_after_merge_stop_L0+0, 0
	XORLW      255
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge128
;Teris.c,888 :: 		stop = MATRIX88_ROW_MAX;
	MOVLW      8
	MOVWF      get_holes_after_merge_stop_L0+0
;Teris.c,889 :: 		}
L_get_holes_after_merge128:
;Teris.c,890 :: 		}
	GOTO       L_get_holes_after_merge129
L_get_holes_after_merge127:
;Teris.c,891 :: 		else if(matrix->cell[row + 1][col] == 1)
	MOVF       R6+0, 0
	ADDLW      1
	MOVWF      R3+0
	CLRF       R3+1
	BTFSC      STATUS+0, 0
	INCF       R3+1, 1
	MOVLW      0
	BTFSC      R6+0, 7
	MOVLW      255
	ADDWF      R3+1, 1
	MOVLW      3
	MOVWF      R2+0
	MOVF       R3+0, 0
	MOVWF      R0+0
	MOVF       R3+1, 0
	MOVWF      R0+1
	MOVF       R2+0, 0
L__get_holes_after_merge237:
	BTFSC      STATUS+0, 2
	GOTO       L__get_holes_after_merge238
	RLF        R0+0, 1
	RLF        R0+1, 1
	BCF        R0+0, 0
	ADDLW      255
	GOTO       L__get_holes_after_merge237
L__get_holes_after_merge238:
	MOVF       FARG_get_holes_after_merge_matrix+0, 0
	ADDWF      R0+0, 1
	MOVF       R5+0, 0
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge130
;Teris.c,893 :: 		if(stop == -1)
	MOVF       get_holes_after_merge_stop_L0+0, 0
	XORLW      255
	BTFSS      STATUS+0, 2
	GOTO       L_get_holes_after_merge131
;Teris.c,895 :: 		stop = row + 1;
	INCF       R6+0, 0
	MOVWF      get_holes_after_merge_stop_L0+0
;Teris.c,896 :: 		}
L_get_holes_after_merge131:
;Teris.c,897 :: 		}
L_get_holes_after_merge130:
L_get_holes_after_merge129:
;Teris.c,898 :: 		}
L_get_holes_after_merge126:
;Teris.c,850 :: 		for(row = 0; row < MATRIX88_ROW_MAX; row++)
	INCF       R6+0, 1
;Teris.c,900 :: 		}
	GOTO       L_get_holes_after_merge107
L_get_holes_after_merge108:
;Teris.c,901 :: 		if((start >= 0) && (stop >= 0) && (stop - start >= 3))
	MOVLW      128
	XORWF      get_holes_after_merge_start_L0+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 0
	GOTO       L_get_holes_after_merge134
	MOVLW      128
	XORWF      get_holes_after_merge_stop_L0+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORLW      0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 0
	GOTO       L_get_holes_after_merge134
	MOVF       get_holes_after_merge_start_L0+0, 0
	SUBWF      get_holes_after_merge_stop_L0+0, 0
	MOVWF      R1+0
	CLRF       R1+1
	BTFSS      STATUS+0, 0
	DECF       R1+1, 1
	MOVLW      0
	BTFSC      get_holes_after_merge_stop_L0+0, 7
	MOVLW      255
	ADDWF      R1+1, 1
	MOVLW      1
	BTFSS      get_holes_after_merge_start_L0+0, 7
	MOVLW      0
	ADDWF      R1+1, 1
	MOVLW      128
	XORWF      R1+1, 0
	MOVWF      R0+0
	MOVLW      128
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 2
	GOTO       L__get_holes_after_merge239
	MOVLW      3
	SUBWF      R1+0, 0
L__get_holes_after_merge239:
	BTFSS      STATUS+0, 0
	GOTO       L_get_holes_after_merge134
L__get_holes_after_merge167:
;Teris.c,907 :: 		num_hole++;
	INCF       get_holes_after_merge_num_hole_L0+0, 1
;Teris.c,908 :: 		}
L_get_holes_after_merge134:
;Teris.c,847 :: 		for(col = 0; col < MATRIX88_COLUMN_MAX; col++)
	INCF       R5+0, 1
;Teris.c,909 :: 		}
	GOTO       L_get_holes_after_merge104
L_get_holes_after_merge105:
;Teris.c,914 :: 		return num_hole;
	MOVF       get_holes_after_merge_num_hole_L0+0, 0
	MOVWF      R0+0
;Teris.c,915 :: 		}
L_end_get_holes_after_merge:
	RETURN
; end of _get_holes_after_merge

_find_best_solution:

;Teris.c,916 :: 		unsigned short find_best_solution()
;Teris.c,922 :: 		short temp_pre_x = 0xFF, tem_pre_sub_index = 0xFF;
	MOVLW      255
	MOVWF      find_best_solution_temp_pre_x_L0+0
	MOVLW      255
	MOVWF      find_best_solution_tem_pre_sub_index_L0+0
	MOVLW      255
	MOVWF      find_best_solution_temp_pre_risk_L0+0
	MOVLW      255
	MOVWF      find_best_solution_temp_pre_risk_L0+1
	CLRF       find_best_solution_temp_pre_count_L0+0
	MOVLW      255
	MOVWF      find_best_solution_temp_pre_high_L0+0
	MOVLW      255
	MOVWF      find_best_solution_temp_pre_hole_L0+0
	CLRF       find_best_solution_res_L0+0
;Teris.c,939 :: 		for(tem_sub_index = 0; tem_sub_index < g_char_info[g_char_info_index].num; tem_sub_index++)
	CLRF       find_best_solution_tem_sub_index_L0+0
L_find_best_solution135:
	MOVLW      3
	MOVWF      R0+0
	MOVF       _g_char_info_index+0, 0
	MOVWF      R4+0
	CALL       _Mul_8X8_U+0
	MOVLW      _g_char_info+0
	ADDWF      R0+0, 1
	MOVLW      2
	ADDWF      R0+0, 0
	MOVWF      FSR
	MOVF       INDF+0, 0
	SUBWF      find_best_solution_tem_sub_index_L0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_find_best_solution136
;Teris.c,942 :: 		temp_cur_matrix44 = (MATRIX44*)&g_matrix44[0];
	MOVLW      _g_matrix44+0
	MOVWF      find_best_solution_temp_cur_matrix44_L0+0
;Teris.c,943 :: 		left_most_index = left_most(cur_x, temp_cur_matrix44, &g_matrix88);
	MOVF       _cur_x+0, 0
	MOVWF      FARG_left_most_x+0
	MOVF       find_best_solution_temp_cur_matrix44_L0+0, 0
	MOVWF      FARG_left_most_matrix44+0
	MOVLW      _g_matrix88+0
	MOVWF      FARG_left_most_matrix88+0
	CALL       _left_most+0
	MOVF       R0+0, 0
	MOVWF      find_best_solution_left_most_index_L0+0
;Teris.c,944 :: 		right_most_index = right_most(cur_x, temp_cur_matrix44, &g_matrix88);
	MOVF       _cur_x+0, 0
	MOVWF      FARG_right_most_x+0
	MOVF       find_best_solution_temp_cur_matrix44_L0+0, 0
	MOVWF      FARG_right_most_matrix44+0
	MOVLW      _g_matrix88+0
	MOVWF      FARG_right_most_matrix88+0
	CALL       _right_most+0
	MOVF       R0+0, 0
	MOVWF      find_best_solution_right_most_index_L0+0
;Teris.c,946 :: 		for(temp_x = left_most_index; temp_x <= right_most_index; temp_x++)
	MOVF       find_best_solution_left_most_index_L0+0, 0
	MOVWF      find_best_solution_temp_x_L1+0
L_find_best_solution138:
	MOVLW      128
	XORWF      find_best_solution_right_most_index_L0+0, 0
	MOVWF      R0+0
	MOVLW      128
	XORWF      find_best_solution_temp_x_L1+0, 0
	SUBWF      R0+0, 0
	BTFSS      STATUS+0, 0
	GOTO       L_find_best_solution139
;Teris.c,948 :: 		temp_y = fall_off(temp_x, cur_y, temp_cur_matrix44, &g_matrix88);
	MOVF       find_best_solution_temp_x_L1+0, 0
	MOVWF      FARG_fall_off_x+0
	MOVF       _cur_y+0, 0
	MOVWF      FARG_fall_off_y+0
	MOVF       find_best_solution_temp_cur_matrix44_L0+0, 0
	MOVWF      FARG_fall_off_matrix44+0
	MOVLW      _g_matrix88+0
	MOVWF      FARG_fall_off_matrix88+0
	CALL       _fall_off+0
	MOVF       R0+0, 0
	MOVWF      find_best_solution_temp_y_L0+0
;Teris.c,954 :: 		if(is_valid(temp_x, temp_y, temp_cur_matrix44, &g_matrix88) == 0)
	MOVF       find_best_solution_temp_x_L1+0, 0
	MOVWF      FARG_is_valid_x+0
	MOVF       R0+0, 0
	MOVWF      FARG_is_valid_y+0
	MOVF       find_best_solution_temp_cur_matrix44_L0+0, 0
	MOVWF      FARG_is_valid_matrix44+0
	MOVLW      _g_matrix88+0
	MOVWF      FARG_is_valid_matrix88+0
	CALL       _is_valid+0
	MOVF       R0+0, 0
	XORLW      0
	BTFSS      STATUS+0, 2
	GOTO       L_find_best_solution141
;Teris.c,956 :: 		continue;
	GOTO       L_find_best_solution140
;Teris.c,957 :: 		}
L_find_best_solution141:
;Teris.c,958 :: 		res = 1;
	MOVLW      1
	MOVWF      find_best_solution_res_L0+0
;Teris.c,959 :: 		merge1(temp_x, temp_y, temp_cur_matrix44, &g_matrix88, &temp_matrix88);
	MOVF       find_best_solution_temp_x_L1+0, 0
	MOVWF      FARG_merge1_x+0
	MOVF       find_best_solution_temp_y_L0+0, 0
	MOVWF      FARG_merge1_y+0
	MOVF       find_best_solution_temp_cur_matrix44_L0+0, 0
	MOVWF      FARG_merge1_matrix44+0
	MOVLW      _g_matrix88+0
	MOVWF      FARG_merge1_matrix88_in+0
	MOVLW      find_best_solution_temp_matrix88_L0+0
	MOVWF      FARG_merge1_matrix88_out+0
	CALL       _merge1+0
;Teris.c,960 :: 		temp_count = delete_matrix(&temp_matrix88);
	MOVLW      find_best_solution_temp_matrix88_L0+0
	MOVWF      FARG_delete_matrix_matrix+0
	CALL       _delete_matrix+0
	MOVF       R0+0, 0
	MOVWF      find_best_solution_temp_count_L0+0
;Teris.c,961 :: 		temp_risk = evaluate(&temp_matrix88);
	MOVLW      find_best_solution_temp_matrix88_L0+0
	MOVWF      FARG_evaluate_matrix+0
	CALL       _evaluate+0
	MOVF       R0+0, 0
	MOVWF      find_best_solution_temp_risk_L0+0
	MOVF       R0+1, 0
	MOVWF      find_best_solution_temp_risk_L0+1
;Teris.c,962 :: 		temp_high = get_high_after_merge(temp_y, temp_cur_matrix44);
	MOVF       find_best_solution_temp_y_L0+0, 0
	MOVWF      FARG_get_high_after_merge_y+0
	MOVF       find_best_solution_temp_cur_matrix44_L0+0, 0
	MOVWF      FARG_get_high_after_merge_matrix+0
	CALL       _get_high_after_merge+0
	MOVF       R0+0, 0
	MOVWF      find_best_solution_temp_high_L0+0
;Teris.c,963 :: 		temp_hole = get_holes_after_merge(&temp_matrix88);
	MOVLW      find_best_solution_temp_matrix88_L0+0
	MOVWF      FARG_get_holes_after_merge_matrix+0
	CALL       _get_holes_after_merge+0
	MOVF       R0+0, 0
	MOVWF      find_best_solution_temp_hole_L0+0
;Teris.c,968 :: 		if(temp_count > temp_pre_count)
	MOVF       find_best_solution_temp_count_L0+0, 0
	SUBWF      find_best_solution_temp_pre_count_L0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_find_best_solution142
;Teris.c,974 :: 		temp_pre_count = temp_count;
	MOVF       find_best_solution_temp_count_L0+0, 0
	MOVWF      find_best_solution_temp_pre_count_L0+0
;Teris.c,975 :: 		temp_pre_risk = temp_risk;
	MOVF       find_best_solution_temp_risk_L0+0, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+0
	MOVF       find_best_solution_temp_risk_L0+1, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+1
;Teris.c,976 :: 		temp_pre_high = temp_high;
	MOVF       find_best_solution_temp_high_L0+0, 0
	MOVWF      find_best_solution_temp_pre_high_L0+0
;Teris.c,977 :: 		temp_pre_hole = temp_hole;
	MOVF       find_best_solution_temp_hole_L0+0, 0
	MOVWF      find_best_solution_temp_pre_hole_L0+0
;Teris.c,978 :: 		tem_pre_sub_index = tem_sub_index;
	MOVF       find_best_solution_tem_sub_index_L0+0, 0
	MOVWF      find_best_solution_tem_pre_sub_index_L0+0
;Teris.c,979 :: 		temp_pre_x = temp_x;
	MOVF       find_best_solution_temp_x_L1+0, 0
	MOVWF      find_best_solution_temp_pre_x_L0+0
;Teris.c,980 :: 		}
	GOTO       L_find_best_solution143
L_find_best_solution142:
;Teris.c,981 :: 		else if(temp_count == temp_pre_count)
	MOVF       find_best_solution_temp_count_L0+0, 0
	XORWF      find_best_solution_temp_pre_count_L0+0, 0
	BTFSS      STATUS+0, 2
	GOTO       L_find_best_solution144
;Teris.c,983 :: 		if(get_high(&g_matrix88) <= MATRIX88_ROW_MAX/2 + 1)
	MOVLW      _g_matrix88+0
	MOVWF      FARG_get_high_matrix+0
	CALL       _get_high+0
	MOVF       R0+0, 0
	SUBLW      5
	BTFSS      STATUS+0, 0
	GOTO       L_find_best_solution145
;Teris.c,991 :: 		if(temp_risk < temp_pre_risk)
	MOVF       find_best_solution_temp_pre_risk_L0+1, 0
	SUBWF      find_best_solution_temp_risk_L0+1, 0
	BTFSS      STATUS+0, 2
	GOTO       L__find_best_solution241
	MOVF       find_best_solution_temp_pre_risk_L0+0, 0
	SUBWF      find_best_solution_temp_risk_L0+0, 0
L__find_best_solution241:
	BTFSC      STATUS+0, 0
	GOTO       L_find_best_solution146
;Teris.c,997 :: 		temp_pre_count = temp_count;
	MOVF       find_best_solution_temp_count_L0+0, 0
	MOVWF      find_best_solution_temp_pre_count_L0+0
;Teris.c,998 :: 		temp_pre_risk = temp_risk;
	MOVF       find_best_solution_temp_risk_L0+0, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+0
	MOVF       find_best_solution_temp_risk_L0+1, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+1
;Teris.c,999 :: 		temp_pre_high = temp_high;
	MOVF       find_best_solution_temp_high_L0+0, 0
	MOVWF      find_best_solution_temp_pre_high_L0+0
;Teris.c,1000 :: 		temp_pre_hole = temp_hole;
	MOVF       find_best_solution_temp_hole_L0+0, 0
	MOVWF      find_best_solution_temp_pre_hole_L0+0
;Teris.c,1001 :: 		tem_pre_sub_index = tem_sub_index;
	MOVF       find_best_solution_tem_sub_index_L0+0, 0
	MOVWF      find_best_solution_tem_pre_sub_index_L0+0
;Teris.c,1002 :: 		temp_pre_x = temp_x;
	MOVF       find_best_solution_temp_x_L1+0, 0
	MOVWF      find_best_solution_temp_pre_x_L0+0
;Teris.c,1003 :: 		}
	GOTO       L_find_best_solution147
L_find_best_solution146:
;Teris.c,1004 :: 		else if(temp_risk == temp_pre_risk)
	MOVF       find_best_solution_temp_risk_L0+1, 0
	XORWF      find_best_solution_temp_pre_risk_L0+1, 0
	BTFSS      STATUS+0, 2
	GOTO       L__find_best_solution242
	MOVF       find_best_solution_temp_pre_risk_L0+0, 0
	XORWF      find_best_solution_temp_risk_L0+0, 0
L__find_best_solution242:
	BTFSS      STATUS+0, 2
	GOTO       L_find_best_solution148
;Teris.c,1010 :: 		if(temp_high < temp_pre_high)
	MOVF       find_best_solution_temp_pre_high_L0+0, 0
	SUBWF      find_best_solution_temp_high_L0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_find_best_solution149
;Teris.c,1016 :: 		temp_pre_count = temp_count;
	MOVF       find_best_solution_temp_count_L0+0, 0
	MOVWF      find_best_solution_temp_pre_count_L0+0
;Teris.c,1017 :: 		temp_pre_risk = temp_risk;
	MOVF       find_best_solution_temp_risk_L0+0, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+0
	MOVF       find_best_solution_temp_risk_L0+1, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+1
;Teris.c,1018 :: 		temp_pre_high = temp_high;
	MOVF       find_best_solution_temp_high_L0+0, 0
	MOVWF      find_best_solution_temp_pre_high_L0+0
;Teris.c,1019 :: 		temp_pre_hole = temp_hole;
	MOVF       find_best_solution_temp_hole_L0+0, 0
	MOVWF      find_best_solution_temp_pre_hole_L0+0
;Teris.c,1020 :: 		tem_pre_sub_index = tem_sub_index;
	MOVF       find_best_solution_tem_sub_index_L0+0, 0
	MOVWF      find_best_solution_tem_pre_sub_index_L0+0
;Teris.c,1021 :: 		temp_pre_x = temp_x;
	MOVF       find_best_solution_temp_x_L1+0, 0
	MOVWF      find_best_solution_temp_pre_x_L0+0
;Teris.c,1022 :: 		}
	GOTO       L_find_best_solution150
L_find_best_solution149:
;Teris.c,1023 :: 		else if(temp_high == temp_pre_high)
	MOVF       find_best_solution_temp_high_L0+0, 0
	XORWF      find_best_solution_temp_pre_high_L0+0, 0
	BTFSS      STATUS+0, 2
	GOTO       L_find_best_solution151
;Teris.c,1029 :: 		if(temp_hole < temp_pre_hole)
	MOVF       find_best_solution_temp_pre_hole_L0+0, 0
	SUBWF      find_best_solution_temp_hole_L0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_find_best_solution152
;Teris.c,1035 :: 		temp_pre_count = temp_count;
	MOVF       find_best_solution_temp_count_L0+0, 0
	MOVWF      find_best_solution_temp_pre_count_L0+0
;Teris.c,1036 :: 		temp_pre_risk = temp_risk;
	MOVF       find_best_solution_temp_risk_L0+0, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+0
	MOVF       find_best_solution_temp_risk_L0+1, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+1
;Teris.c,1037 :: 		temp_pre_high = temp_high;
	MOVF       find_best_solution_temp_high_L0+0, 0
	MOVWF      find_best_solution_temp_pre_high_L0+0
;Teris.c,1038 :: 		temp_pre_hole = temp_hole;
	MOVF       find_best_solution_temp_hole_L0+0, 0
	MOVWF      find_best_solution_temp_pre_hole_L0+0
;Teris.c,1039 :: 		tem_pre_sub_index = tem_sub_index;
	MOVF       find_best_solution_tem_sub_index_L0+0, 0
	MOVWF      find_best_solution_tem_pre_sub_index_L0+0
;Teris.c,1040 :: 		temp_pre_x = temp_x;
	MOVF       find_best_solution_temp_x_L1+0, 0
	MOVWF      find_best_solution_temp_pre_x_L0+0
;Teris.c,1041 :: 		}
L_find_best_solution152:
;Teris.c,1043 :: 		}
L_find_best_solution151:
L_find_best_solution150:
;Teris.c,1045 :: 		}
L_find_best_solution148:
L_find_best_solution147:
;Teris.c,1046 :: 		}
	GOTO       L_find_best_solution153
L_find_best_solution145:
;Teris.c,1054 :: 		if(temp_high < temp_pre_high)
	MOVF       find_best_solution_temp_pre_high_L0+0, 0
	SUBWF      find_best_solution_temp_high_L0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_find_best_solution154
;Teris.c,1060 :: 		temp_pre_count = temp_count;
	MOVF       find_best_solution_temp_count_L0+0, 0
	MOVWF      find_best_solution_temp_pre_count_L0+0
;Teris.c,1061 :: 		temp_pre_risk = temp_risk;
	MOVF       find_best_solution_temp_risk_L0+0, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+0
	MOVF       find_best_solution_temp_risk_L0+1, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+1
;Teris.c,1062 :: 		temp_pre_high = temp_high;
	MOVF       find_best_solution_temp_high_L0+0, 0
	MOVWF      find_best_solution_temp_pre_high_L0+0
;Teris.c,1063 :: 		temp_pre_hole = temp_hole;
	MOVF       find_best_solution_temp_hole_L0+0, 0
	MOVWF      find_best_solution_temp_pre_hole_L0+0
;Teris.c,1064 :: 		tem_pre_sub_index = tem_sub_index;
	MOVF       find_best_solution_tem_sub_index_L0+0, 0
	MOVWF      find_best_solution_tem_pre_sub_index_L0+0
;Teris.c,1065 :: 		temp_pre_x = temp_x;
	MOVF       find_best_solution_temp_x_L1+0, 0
	MOVWF      find_best_solution_temp_pre_x_L0+0
;Teris.c,1066 :: 		}
	GOTO       L_find_best_solution155
L_find_best_solution154:
;Teris.c,1067 :: 		else if(temp_high == temp_pre_high)
	MOVF       find_best_solution_temp_high_L0+0, 0
	XORWF      find_best_solution_temp_pre_high_L0+0, 0
	BTFSS      STATUS+0, 2
	GOTO       L_find_best_solution156
;Teris.c,1073 :: 		if(temp_hole < temp_pre_hole)
	MOVF       find_best_solution_temp_pre_hole_L0+0, 0
	SUBWF      find_best_solution_temp_hole_L0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_find_best_solution157
;Teris.c,1079 :: 		temp_pre_count = temp_count;
	MOVF       find_best_solution_temp_count_L0+0, 0
	MOVWF      find_best_solution_temp_pre_count_L0+0
;Teris.c,1080 :: 		temp_pre_risk = temp_risk;
	MOVF       find_best_solution_temp_risk_L0+0, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+0
	MOVF       find_best_solution_temp_risk_L0+1, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+1
;Teris.c,1081 :: 		temp_pre_high = temp_high;
	MOVF       find_best_solution_temp_high_L0+0, 0
	MOVWF      find_best_solution_temp_pre_high_L0+0
;Teris.c,1082 :: 		temp_pre_hole = temp_hole;
	MOVF       find_best_solution_temp_hole_L0+0, 0
	MOVWF      find_best_solution_temp_pre_hole_L0+0
;Teris.c,1083 :: 		tem_pre_sub_index = tem_sub_index;
	MOVF       find_best_solution_tem_sub_index_L0+0, 0
	MOVWF      find_best_solution_tem_pre_sub_index_L0+0
;Teris.c,1084 :: 		temp_pre_x = temp_x;
	MOVF       find_best_solution_temp_x_L1+0, 0
	MOVWF      find_best_solution_temp_pre_x_L0+0
;Teris.c,1085 :: 		}
	GOTO       L_find_best_solution158
L_find_best_solution157:
;Teris.c,1086 :: 		else if(temp_hole == temp_pre_hole)
	MOVF       find_best_solution_temp_hole_L0+0, 0
	XORWF      find_best_solution_temp_pre_hole_L0+0, 0
	BTFSS      STATUS+0, 2
	GOTO       L_find_best_solution159
;Teris.c,1092 :: 		if(temp_risk < temp_pre_risk)
	MOVF       find_best_solution_temp_pre_risk_L0+1, 0
	SUBWF      find_best_solution_temp_risk_L0+1, 0
	BTFSS      STATUS+0, 2
	GOTO       L__find_best_solution243
	MOVF       find_best_solution_temp_pre_risk_L0+0, 0
	SUBWF      find_best_solution_temp_risk_L0+0, 0
L__find_best_solution243:
	BTFSC      STATUS+0, 0
	GOTO       L_find_best_solution160
;Teris.c,1098 :: 		temp_pre_count = temp_count;
	MOVF       find_best_solution_temp_count_L0+0, 0
	MOVWF      find_best_solution_temp_pre_count_L0+0
;Teris.c,1099 :: 		temp_pre_risk = temp_risk;
	MOVF       find_best_solution_temp_risk_L0+0, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+0
	MOVF       find_best_solution_temp_risk_L0+1, 0
	MOVWF      find_best_solution_temp_pre_risk_L0+1
;Teris.c,1100 :: 		temp_pre_high = temp_high;
	MOVF       find_best_solution_temp_high_L0+0, 0
	MOVWF      find_best_solution_temp_pre_high_L0+0
;Teris.c,1101 :: 		temp_pre_hole = temp_hole;
	MOVF       find_best_solution_temp_hole_L0+0, 0
	MOVWF      find_best_solution_temp_pre_hole_L0+0
;Teris.c,1102 :: 		tem_pre_sub_index = tem_sub_index;
	MOVF       find_best_solution_tem_sub_index_L0+0, 0
	MOVWF      find_best_solution_tem_pre_sub_index_L0+0
;Teris.c,1103 :: 		temp_pre_x = temp_x;
	MOVF       find_best_solution_temp_x_L1+0, 0
	MOVWF      find_best_solution_temp_pre_x_L0+0
;Teris.c,1104 :: 		}
L_find_best_solution160:
;Teris.c,1105 :: 		}
L_find_best_solution159:
L_find_best_solution158:
;Teris.c,1106 :: 		}
L_find_best_solution156:
L_find_best_solution155:
;Teris.c,1107 :: 		}
L_find_best_solution153:
;Teris.c,1108 :: 		}
L_find_best_solution144:
L_find_best_solution143:
;Teris.c,1115 :: 		}
L_find_best_solution140:
;Teris.c,946 :: 		for(temp_x = left_most_index; temp_x <= right_most_index; temp_x++)
	INCF       find_best_solution_temp_x_L1+0, 1
;Teris.c,1115 :: 		}
	GOTO       L_find_best_solution138
L_find_best_solution139:
;Teris.c,939 :: 		for(tem_sub_index = 0; tem_sub_index < g_char_info[g_char_info_index].num; tem_sub_index++)
	INCF       find_best_solution_tem_sub_index_L0+0, 1
;Teris.c,1116 :: 		}
	GOTO       L_find_best_solution135
L_find_best_solution136:
;Teris.c,1117 :: 		if(res == 1)
	MOVF       find_best_solution_res_L0+0, 0
	XORLW      1
	BTFSS      STATUS+0, 2
	GOTO       L_find_best_solution161
;Teris.c,1119 :: 		g_char_info[g_char_info_index].cur_index = tem_pre_sub_index;
	MOVLW      3
	MOVWF      R0+0
	MOVF       _g_char_info_index+0, 0
	MOVWF      R4+0
	CALL       _Mul_8X8_U+0
	MOVLW      _g_char_info+0
	ADDWF      R0+0, 1
	INCF       R0+0, 0
	MOVWF      FSR
	MOVF       find_best_solution_tem_pre_sub_index_L0+0, 0
	MOVWF      INDF+0
;Teris.c,1120 :: 		cur_x = temp_pre_x;
	MOVF       find_best_solution_temp_pre_x_L0+0, 0
	MOVWF      _cur_x+0
;Teris.c,1128 :: 		}
	GOTO       L_find_best_solution162
L_find_best_solution161:
;Teris.c,1135 :: 		}
L_find_best_solution162:
;Teris.c,1136 :: 		return res;
	MOVF       find_best_solution_res_L0+0, 0
	MOVWF      R0+0
;Teris.c,1137 :: 		}
L_end_find_best_solution:
	RETURN
; end of _find_best_solution

_main:

;Teris.c,1223 :: 		void main()
;Teris.c,1227 :: 		Chip_Select_Direction = 0;    // Set RA2 pin as output.
	BCF        TRISA2_bit+0, BitPos(TRISA2_bit+0)
;Teris.c,1228 :: 		SPI1_init();                  // Initialize SPI1 module.
	CALL       _SPI1_Init+0
;Teris.c,1230 :: 		max7219_init1();              // initialize  max7219.
	CALL       _max7219_init1+0
;Teris.c,1232 :: 		do                            // infinite loop.
L_main163:
;Teris.c,1263 :: 		}while(1);            // do forever.
	GOTO       L_main163
;Teris.c,1264 :: 		}
L_end_main:
	GOTO       $+0
; end of _main
