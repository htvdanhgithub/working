

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Aug 28 21:11:58 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	dabs	1,0x7E,2
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0009                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  000E                     	;# 
    83  000F                     	;# 
    84  0010                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0013                     	;# 
    88  0014                     	;# 
    89  0015                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001B                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  001D                     	;# 
   100  001E                     	;# 
   101  001F                     	;# 
   102  0081                     	;# 
   103  0085                     	;# 
   104  0086                     	;# 
   105  0087                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  008F                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  0105                     	;# 
   130  0107                     	;# 
   131  0108                     	;# 
   132  0109                     	;# 
   133  010C                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0185                     	;# 
   139  0187                     	;# 
   140  0188                     	;# 
   141  0189                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0009                     	;# 
   153  000A                     	;# 
   154  000B                     	;# 
   155  000C                     	;# 
   156  000D                     	;# 
   157  000E                     	;# 
   158  000E                     	;# 
   159  000F                     	;# 
   160  0010                     	;# 
   161  0011                     	;# 
   162  0012                     	;# 
   163  0013                     	;# 
   164  0014                     	;# 
   165  0015                     	;# 
   166  0015                     	;# 
   167  0016                     	;# 
   168  0017                     	;# 
   169  0018                     	;# 
   170  0019                     	;# 
   171  001A                     	;# 
   172  001B                     	;# 
   173  001B                     	;# 
   174  001C                     	;# 
   175  001D                     	;# 
   176  001E                     	;# 
   177  001F                     	;# 
   178  0081                     	;# 
   179  0085                     	;# 
   180  0086                     	;# 
   181  0087                     	;# 
   182  0089                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  008F                     	;# 
   187  0090                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0093                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0095                     	;# 
   195  0096                     	;# 
   196  0097                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  0105                     	;# 
   206  0107                     	;# 
   207  0108                     	;# 
   208  0109                     	;# 
   209  010C                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  010F                     	;# 
   214  0185                     	;# 
   215  0187                     	;# 
   216  0188                     	;# 
   217  0189                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220                           
   221                           	psect	idataBANK0
   222  170A                     __pidataBANK0:	
   223                           
   224                           ;initializer for _randx
   225  170A  3401               	retlw	1
   226  170B  3400               	retlw	0
   227  170C  3400               	retlw	0
   228  170D  3400               	retlw	0
   229                           
   230                           ;initializer for _cur_x
   231  170E  3402               	retlw	2
   232                           
   233                           	psect	idataBANK1
   234  175B                     __pidataBANK1:	
   235                           
   236                           ;initializer for _g_matrix16x8
   237  175B  3400               	retlw	0
   238  175C  3400               	retlw	0
   239  175D  3400               	retlw	0
   240  175E  3440               	retlw	64
   241  175F  3454               	retlw	84
   242  1760  3456               	retlw	86
   243  1761  3456               	retlw	86
   244  1762  347E               	retlw	126
   245  1763  347E               	retlw	126
   246  1764  347E               	retlw	126
   247  1765  347E               	retlw	126
   248  1766  347E               	retlw	126
   249  1767  347E               	retlw	126
   250  1768  347E               	retlw	126
   251  1769  347E               	retlw	126
   252  176A  347E               	retlw	126
   253                           
   254                           	psect	stringtext
   255  0800                     __pstringtext:	
   256  0800                     stringtab:	
   257  0800                     __stringtab:	
   258                           
   259                           ;	String table - string pointers are 2 bytes each
   260  0800  1BFF               	btfsc	btemp+1,7
   261  0801  280A               	ljmp	stringcode
   262  0802  1383               	bcf	3,7
   263  0803  187F               	btfsc	btemp+1,0
   264  0804  1783               	bsf	3,7
   265  0805  0800               	movf	0,w
   266  0806  0A84               	incf	4,f
   267  0807  1903               	skipnz
   268  0808  0AFF               	incf	btemp+1,f
   269  0809  0008               	return
   270  080A                     stringcode:	
   271  080A  087F               	movf	btemp+1,w
   272  080B  397F               	andlw	127
   273  080C  008A               	movwf	10
   274  080D  0804               	movf	4,w
   275  080E  0A84               	incf	4,f
   276  080F  1903               	skipnz
   277  0810  0AFF               	incf	btemp+1,f
   278  0811  0082               	movwf	2
   279  0812                     __stringbase:	
   280  0812                     __end_of__stringtab:	
   281  0812                     _g_char_info:	
   282  0812  3400               	retlw	0
   283  0813  3402               	retlw	2
   284  0814  3402               	retlw	2
   285  0815  3402               	retlw	2
   286  0816  3404               	retlw	4
   287  0817  3402               	retlw	2
   288  0818  3406               	retlw	6
   289  0819  3404               	retlw	4
   290  081A  340A               	retlw	10
   291  081B  3404               	retlw	4
   292  081C  340E               	retlw	14
   293  081D  3401               	retlw	1
   294  081E  340F               	retlw	15
   295  081F  3404               	retlw	4
   296  0820  3413               	retlw	19
   297  0821  3401               	retlw	1
   298  0822  3414               	retlw	20
   299  0823  3404               	retlw	4
   300  0824                     __end_of_g_char_info:	
   301  0824                     _octpowers:	
   302  0824  3401               	retlw	1
   303  0825  3400               	retlw	0
   304  0826  3408               	retlw	8
   305  0827  3400               	retlw	0
   306  0828  3440               	retlw	64
   307  0829  3400               	retlw	0
   308  082A  3400               	retlw	0
   309  082B  3402               	retlw	2
   310  082C  3400               	retlw	0
   311  082D  3410               	retlw	16
   312  082E  3400               	retlw	0
   313  082F  3480               	retlw	128
   314  0830                     __end_of_octpowers:	
   315  0830                     _dpowers:	
   316  0830  3401               	retlw	1
   317  0831  3400               	retlw	0
   318  0832  340A               	retlw	10
   319  0833  3400               	retlw	0
   320  0834  3464               	retlw	100
   321  0835  3400               	retlw	0
   322  0836  34E8               	retlw	232
   323  0837  3403               	retlw	3
   324  0838  3410               	retlw	16
   325  0839  3427               	retlw	39
   326  083A                     __end_of_dpowers:	
   327  083A                     _hexpowers:	
   328  083A  3401               	retlw	1
   329  083B  3400               	retlw	0
   330  083C  3410               	retlw	16
   331  083D  3400               	retlw	0
   332  083E  3400               	retlw	0
   333  083F  3401               	retlw	1
   334  0840  3400               	retlw	0
   335  0841  3410               	retlw	16
   336  0842                     __end_of_hexpowers:	
   337  0842                     _g_matrix4x4:	
   338  0842  3402               	retlw	2
   339  0843  3402               	retlw	2
   340  0844  3402               	retlw	2
   341  0845  3402               	retlw	2
   342  0846  3400               	retlw	0
   343  0847  340F               	retlw	15
   344  0848  3400               	retlw	0
   345  0849  3400               	retlw	0
   346  084A  3406               	retlw	6
   347  084B  3403               	retlw	3
   348  084C  3400               	retlw	0
   349  084D  3400               	retlw	0
   350  084E  3402               	retlw	2
   351  084F  3406               	retlw	6
   352  0850  3404               	retlw	4
   353  0851  3400               	retlw	0
   354  0852  3403               	retlw	3
   355  0853  3406               	retlw	6
   356  0854  3400               	retlw	0
   357  0855  3400               	retlw	0
   358  0856  3402               	retlw	2
   359  0857  3403               	retlw	3
   360  0858  3401               	retlw	1
   361  0859  3400               	retlw	0
   362  085A  3400               	retlw	0
   363  085B  3407               	retlw	7
   364  085C  3404               	retlw	4
   365  085D  3400               	retlw	0
   366  085E  3406               	retlw	6
   367  085F  3402               	retlw	2
   368  0860  3402               	retlw	2
   369  0861  3400               	retlw	0
   370  0862  3401               	retlw	1
   371  0863  3407               	retlw	7
   372  0864  3400               	retlw	0
   373  0865  3400               	retlw	0
   374  0866  3402               	retlw	2
   375  0867  3402               	retlw	2
   376  0868  3403               	retlw	3
   377  0869  3400               	retlw	0
   378  086A  3400               	retlw	0
   379  086B  3407               	retlw	7
   380  086C  3401               	retlw	1
   381  086D  3400               	retlw	0
   382  086E  3403               	retlw	3
   383  086F  3402               	retlw	2
   384  0870  3402               	retlw	2
   385  0871  3400               	retlw	0
   386  0872  3404               	retlw	4
   387  0873  3407               	retlw	7
   388  0874  3400               	retlw	0
   389  0875  3400               	retlw	0
   390  0876  3402               	retlw	2
   391  0877  3402               	retlw	2
   392  0878  3406               	retlw	6
   393  0879  3400               	retlw	0
   394  087A  3403               	retlw	3
   395  087B  3403               	retlw	3
   396  087C  3400               	retlw	0
   397  087D  3400               	retlw	0
   398  087E  3400               	retlw	0
   399  087F  3406               	retlw	6
   400  0880  3402               	retlw	2
   401  0881  3400               	retlw	0
   402  0882  3400               	retlw	0
   403  0883  3403               	retlw	3
   404  0884  3402               	retlw	2
   405  0885  3400               	retlw	0
   406  0886  3402               	retlw	2
   407  0887  3403               	retlw	3
   408  0888  3400               	retlw	0
   409  0889  3400               	retlw	0
   410  088A  3402               	retlw	2
   411  088B  3406               	retlw	6
   412  088C  3400               	retlw	0
   413  088D  3400               	retlw	0
   414  088E  3402               	retlw	2
   415  088F  3407               	retlw	7
   416  0890  3402               	retlw	2
   417  0891  3400               	retlw	0
   418  0892  3407               	retlw	7
   419  0893  3402               	retlw	2
   420  0894  3402               	retlw	2
   421  0895  3400               	retlw	0
   422  0896  3404               	retlw	4
   423  0897  3407               	retlw	7
   424  0898  3404               	retlw	4
   425  0899  3400               	retlw	0
   426  089A  3402               	retlw	2
   427  089B  3402               	retlw	2
   428  089C  3407               	retlw	7
   429  089D  3400               	retlw	0
   430  089E  3401               	retlw	1
   431  089F  3407               	retlw	7
   432  08A0  3401               	retlw	1
   433  08A1  3400               	retlw	0
   434  08A2                     __end_of_g_matrix4x4:	
   435  08A2                     STR_16:	
   436  08A2  343C               	retlw	60	;'<'
   437  08A3  343C               	retlw	60	;'<'
   438  08A4  343C               	retlw	60	;'<'
   439  08A5  343C               	retlw	60	;'<'
   440  08A6  343C               	retlw	60	;'<'
   441  08A7  343C               	retlw	60	;'<'
   442  08A8  343C               	retlw	60	;'<'
   443  08A9  343C               	retlw	60	;'<'
   444  08AA  343C               	retlw	60	;'<'
   445  08AB  343C               	retlw	60	;'<'
   446  08AC  343C               	retlw	60	;'<'
   447  08AD  343C               	retlw	60	;'<'
   448  08AE  343C               	retlw	60	;'<'
   449  08AF  343C               	retlw	60	;'<'
   450  08B0  343C               	retlw	60	;'<'
   451  08B1  343C               	retlw	60	;'<'
   452  08B2  343C               	retlw	60	;'<'
   453  08B3  343C               	retlw	60	;'<'
   454  08B4  343C               	retlw	60	;'<'
   455  08B5  343C               	retlw	60	;'<'
   456  08B6  344D               	retlw	77	;'M'
   457  08B7  3441               	retlw	65	;'A'
   458  08B8  3454               	retlw	84	;'T'
   459  08B9  3452               	retlw	82	;'R'
   460  08BA  3449               	retlw	73	;'I'
   461  08BB  3458               	retlw	88	;'X'
   462  08BC  3431               	retlw	49	;'1'
   463  08BD  3436               	retlw	54	;'6'
   464  08BE  3478               	retlw	120	;'x'
   465  08BF  3438               	retlw	56	;'8'
   466  08C0  3400               	retlw	0
   467  08C1                     STR_6:	
   468  08C1  343C               	retlw	60	;'<'
   469  08C2  343C               	retlw	60	;'<'
   470  08C3  343C               	retlw	60	;'<'
   471  08C4  343C               	retlw	60	;'<'
   472  08C5  343C               	retlw	60	;'<'
   473  08C6  343C               	retlw	60	;'<'
   474  08C7  343C               	retlw	60	;'<'
   475  08C8  343C               	retlw	60	;'<'
   476  08C9  343C               	retlw	60	;'<'
   477  08CA  343C               	retlw	60	;'<'
   478  08CB  343C               	retlw	60	;'<'
   479  08CC  343C               	retlw	60	;'<'
   480  08CD  343C               	retlw	60	;'<'
   481  08CE  343C               	retlw	60	;'<'
   482  08CF  343C               	retlw	60	;'<'
   483  08D0  343C               	retlw	60	;'<'
   484  08D1  343C               	retlw	60	;'<'
   485  08D2  343C               	retlw	60	;'<'
   486  08D3  343C               	retlw	60	;'<'
   487  08D4  343C               	retlw	60	;'<'
   488  08D5  344D               	retlw	77	;'M'
   489  08D6  3441               	retlw	65	;'A'
   490  08D7  3454               	retlw	84	;'T'
   491  08D8  3452               	retlw	82	;'R'
   492  08D9  3449               	retlw	73	;'I'
   493  08DA  3458               	retlw	88	;'X'
   494  08DB  3434               	retlw	52	;'4'
   495  08DC  3478               	retlw	120	;'x'
   496  08DD  3434               	retlw	52	;'4'
   497  08DE  3400               	retlw	0
   498  08DF                     STR_14:	
   499  08DF  3469               	retlw	105	;'i'
   500  08E0  346E               	retlw	110	;'n'
   501  08E1  3464               	retlw	100	;'d'
   502  08E2  3465               	retlw	101	;'e'
   503  08E3  3478               	retlw	120	;'x'
   504  08E4  3420               	retlw	32	;' '
   505  08E5  343D               	retlw	61	;'='
   506  08E6  3420               	retlw	32	;' '
   507  08E7  3425               	retlw	37	;'%'
   508  08E8  3464               	retlw	100	;'d'
   509  08E9  342C               	retlw	44	;','
   510  08EA  3420               	retlw	32	;' '
   511  08EB  3473               	retlw	115	;'s'
   512  08EC  3475               	retlw	117	;'u'
   513  08ED  3462               	retlw	98	;'b'
   514  08EE  345F               	retlw	95	;'_'
   515  08EF  3469               	retlw	105	;'i'
   516  08F0  346E               	retlw	110	;'n'
   517  08F1  3464               	retlw	100	;'d'
   518  08F2  3465               	retlw	101	;'e'
   519  08F3  3478               	retlw	120	;'x'
   520  08F4  3420               	retlw	32	;' '
   521  08F5  343D               	retlw	61	;'='
   522  08F6  3420               	retlw	32	;' '
   523  08F7  3425               	retlw	37	;'%'
   524  08F8  3464               	retlw	100	;'d'
   525  08F9  3400               	retlw	0
   526  08FA                     STR_12:	
   527  08FA  3470               	retlw	112	;'p'
   528  08FB  3472               	retlw	114	;'r'
   529  08FC  3469               	retlw	105	;'i'
   530  08FD  346E               	retlw	110	;'n'
   531  08FE  3474               	retlw	116	;'t'
   532  08FF  3466               	retlw	102	;'f'
   533  0900  345F               	retlw	95	;'_'
   534  0901  3461               	retlw	97	;'a'
   535  0902  346C               	retlw	108	;'l'
   536  0903  346C               	retlw	108	;'l'
   537  0904  345F               	retlw	95	;'_'
   538  0905  344D               	retlw	77	;'M'
   539  0906  3441               	retlw	65	;'A'
   540  0907  3454               	retlw	84	;'T'
   541  0908  3452               	retlw	82	;'R'
   542  0909  3449               	retlw	73	;'I'
   543  090A  3458               	retlw	88	;'X'
   544  090B  3434               	retlw	52	;'4'
   545  090C  3478               	retlw	120	;'x'
   546  090D  3434               	retlw	52	;'4'
   547  090E  3400               	retlw	0
   548  090F                     STR_10:	
   549  090F  343E               	retlw	62	;'>'
   550  0910  343E               	retlw	62	;'>'
   551  0911  343E               	retlw	62	;'>'
   552  0912  343E               	retlw	62	;'>'
   553  0913  343E               	retlw	62	;'>'
   554  0914  343E               	retlw	62	;'>'
   555  0915  343E               	retlw	62	;'>'
   556  0916  343E               	retlw	62	;'>'
   557  0917  343E               	retlw	62	;'>'
   558  0918  343E               	retlw	62	;'>'
   559  0919  343E               	retlw	62	;'>'
   560  091A  343E               	retlw	62	;'>'
   561  091B  343E               	retlw	62	;'>'
   562  091C  343E               	retlw	62	;'>'
   563  091D  343E               	retlw	62	;'>'
   564  091E  343E               	retlw	62	;'>'
   565  091F  343E               	retlw	62	;'>'
   566  0920  343E               	retlw	62	;'>'
   567  0921  343E               	retlw	62	;'>'
   568  0922  343E               	retlw	62	;'>'
   569  0923  3400               	retlw	0
   570  0924                     STR_24:	
   571  0924  3430               	retlw	48	;'0'
   572  0925  3431               	retlw	49	;'1'
   573  0926  3432               	retlw	50	;'2'
   574  0927  3433               	retlw	51	;'3'
   575  0928  3434               	retlw	52	;'4'
   576  0929  3435               	retlw	53	;'5'
   577  092A  3436               	retlw	54	;'6'
   578  092B  3437               	retlw	55	;'7'
   579  092C  3438               	retlw	56	;'8'
   580  092D  3439               	retlw	57	;'9'
   581  092E  3441               	retlw	65	;'A'
   582  092F  3442               	retlw	66	;'B'
   583  0930  3443               	retlw	67	;'C'
   584  0931  3444               	retlw	68	;'D'
   585  0932  3445               	retlw	69	;'E'
   586  0933  3446               	retlw	70	;'F'
   587  0934  3400               	retlw	0
   588  0935                     STR_25:	
   589  0935  3430               	retlw	48	;'0'
   590  0936  3431               	retlw	49	;'1'
   591  0937  3432               	retlw	50	;'2'
   592  0938  3433               	retlw	51	;'3'
   593  0939  3434               	retlw	52	;'4'
   594  093A  3435               	retlw	53	;'5'
   595  093B  3436               	retlw	54	;'6'
   596  093C  3437               	retlw	55	;'7'
   597  093D  3438               	retlw	56	;'8'
   598  093E  3439               	retlw	57	;'9'
   599  093F  3461               	retlw	97	;'a'
   600  0940  3462               	retlw	98	;'b'
   601  0941  3463               	retlw	99	;'c'
   602  0942  3464               	retlw	100	;'d'
   603  0943  3465               	retlw	101	;'e'
   604  0944  3466               	retlw	102	;'f'
   605  0945  3400               	retlw	0
   606  0946                     STR_22:	
   607  0946  344D               	retlw	77	;'M'
   608  0947  3441               	retlw	65	;'A'
   609  0948  3454               	retlw	84	;'T'
   610  0949  3452               	retlw	82	;'R'
   611  094A  3449               	retlw	73	;'I'
   612  094B  3458               	retlw	88	;'X'
   613  094C  3434               	retlw	52	;'4'
   614  094D  3478               	retlw	120	;'x'
   615  094E  3434               	retlw	52	;'4'
   616  094F  3420               	retlw	32	;' '
   617  0950  3463               	retlw	99	;'c'
   618  0951  3468               	retlw	104	;'h'
   619  0952  346F               	retlw	111	;'o'
   620  0953  3473               	retlw	115	;'s'
   621  0954  3465               	retlw	101	;'e'
   622  0955  346E               	retlw	110	;'n'
   623  0956  3400               	retlw	0
   624  0957                     STR_23:	
   625  0957  344D               	retlw	77	;'M'
   626  0958  3461               	retlw	97	;'a'
   627  0959  3469               	retlw	105	;'i'
   628  095A  346E               	retlw	110	;'n'
   629  095B  3420               	retlw	32	;' '
   630  095C  3473               	retlw	115	;'s'
   631  095D  3463               	retlw	99	;'c'
   632  095E  3472               	retlw	114	;'r'
   633  095F  3465               	retlw	101	;'e'
   634  0960  3465               	retlw	101	;'e'
   635  0961  346E               	retlw	110	;'n'
   636  0962  3400               	retlw	0
   637  0963                     STR_13:	
   638  0963  3473               	retlw	115	;'s'
   639  0964  3469               	retlw	105	;'i'
   640  0965  347A               	retlw	122	;'z'
   641  0966  3465               	retlw	101	;'e'
   642  0967  3420               	retlw	32	;' '
   643  0968  343D               	retlw	61	;'='
   644  0969  3420               	retlw	32	;' '
   645  096A  3425               	retlw	37	;'%'
   646  096B  3464               	retlw	100	;'d'
   647  096C  3400               	retlw	0
   648  096D                     STR_1:	
   649  096D  340D               	retlw	13
   650  096E  340A               	retlw	10
   651  096F  3400               	retlw	0
   652  0970                     STR_7:	
   653  0970  342A               	retlw	42	;'*'
   654  0971  3400               	retlw	0
   655  0972                     STR_5:	
   656  0972  343A               	retlw	58	;':'
   657  0973  3400               	retlw	0
   658  0974                     STR_8:	
   659  0974  345F               	retlw	95	;'_'
   660  0975  3400               	retlw	0
   661  096F                     
   662                           ; #config settings
   663  0000                     
   664                           	psect	nvBANK0
   665  006C                     __pnvBANK0:	
   666  006C                     _UQEnd:	
   667  006C                     	ds	1
   668  006D                     _UQFront:	
   669  006D                     	ds	1
   670  000C                     _PIR1bits	set	12
   671  001A                     _RCREG	set	26
   672  0018                     _RCSTAbits	set	24
   673  0019                     _TXREG	set	25
   674  005F                     _GIE	set	95
   675  005E                     _PEIE	set	94
   676  0029                     _RA1	set	41
   677  002A                     _RA2	set	42
   678  002B                     _RA3	set	43
   679  0099                     _SPBRG	set	153
   680  0085                     _TRISAbits	set	133
   681  0098                     _TXSTAbits	set	152
   682  0465                     _RCIE	set	1125
   683  0188                     _ANSELbits	set	392
   684                           
   685                           	psect	cinit
   686  07C9                     start_initialization:	
   687  07C9                     __initialization:	
   688                           
   689                           ; Clear objects allocated to BANK0
   690  07C9  1383               	bcf	3,7	;select IRP bank0
   691  07CA  305B               	movlw	low __pbssBANK0
   692  07CB  0084               	movwf	4
   693  07CC  3067               	movlw	low (__pbssBANK0+12)
   694  07CD  160A  118A  2727  120A  118A  	fcall	clear_ram0
   695                           
   696                           ; Clear objects allocated to BANK1
   697  07D2  30A0               	movlw	low __pbssBANK1
   698  07D3  0084               	movwf	4
   699  07D4  30D0               	movlw	low (__pbssBANK1+48)
   700  07D5  160A  118A  2727  120A  118A  	fcall	clear_ram0
   701                           
   702                           ; Clear objects allocated to BANK3
   703  07DA  1783               	bsf	3,7	;select IRP bank2
   704  07DB  3090               	movlw	low __pbssBANK3
   705  07DC  0084               	movwf	4
   706  07DD  30B0               	movlw	low (__pbssBANK3+32)
   707  07DE  160A  118A  2727  120A  118A  	fcall	clear_ram0
   708                           
   709                           ; Initialize objects allocated to BANK1
   710  07E3  1383               	bcf	3,7	;select IRP bank0
   711  07E4  30E0               	movlw	low (__pdataBANK1+16)
   712  07E5  00FD               	movwf	btemp+-1
   713  07E6  3017               	movlw	high __pidataBANK1
   714  07E7  00FE               	movwf	btemp
   715  07E8  305B               	movlw	low __pidataBANK1
   716  07E9  00FF               	movwf	btemp+1
   717  07EA  30D0               	movlw	low __pdataBANK1
   718  07EB  0084               	movwf	4
   719  07EC  160A  118A  2791  120A  118A  	fcall	init_ram0
   720                           
   721                           ; Initialize objects allocated to BANK0
   722  07F1  306C               	movlw	low (__pdataBANK0+5)
   723  07F2  00FD               	movwf	btemp+-1
   724  07F3  3017               	movlw	high __pidataBANK0
   725  07F4  00FE               	movwf	btemp
   726  07F5  300A               	movlw	low __pidataBANK0
   727  07F6  00FF               	movwf	btemp+1
   728  07F7  3067               	movlw	low __pdataBANK0
   729  07F8  0084               	movwf	4
   730  07F9  160A  118A  2791   	fcall	init_ram0
   731  07FC                     end_of_initialization:	
   732                           ;End of C runtime variable initialization code
   733                           
   734  07FC                     __end_of__initialization:	
   735  07FC  0183               	clrf	3
   736  07FD  120A  118A  2B92   	ljmp	_main	;jump to C main() function
   737                           
   738                           	psect	bssBANK0
   739  005B                     __pbssBANK0:	
   740  005B                     USARTWriteInt@F1617:	
   741  005B                     	ds	5
   742  0060                     _g_cur_matrix4x4:	
   743  0060                     	ds	2
   744  0062                     _temp_cur_matrix4x4:	
   745  0062                     	ds	2
   746  0064                     _cur_y:	
   747  0064                     	ds	1
   748  0065                     _g_char_info_index:	
   749  0065                     	ds	1
   750  0066                     _g_char_info_sub_index:	
   751  0066                     	ds	1
   752                           
   753                           	psect	dataBANK0
   754  0067                     __pdataBANK0:	
   755  0067                     _randx:	
   756  0067                     	ds	4
   757  006B                     _cur_x:	
   758  006B                     	ds	1
   759                           
   760                           	psect	bssBANK1
   761  00A0                     __pbssBANK1:	
   762  00A0                     _g_debug:	
   763  00A0                     	ds	32
   764  00C0                     _temp_matrix16x8:	
   765  00C0                     	ds	16
   766                           
   767                           	psect	dataBANK1
   768  00D0                     __pdataBANK1:	
   769  00D0                     _g_matrix16x8:	
   770  00D0                     	ds	16
   771                           
   772                           	psect	bssBANK3
   773  0190                     __pbssBANK3:	
   774  0190                     _URBuff:	
   775  0190                     	ds	32
   776                           
   777                           	psect	clrtext
   778  1727                     clear_ram0:	
   779                           ;	Called with FSR containing the base address, and
   780                           ;	W with the last address+1
   781                           
   782  1727  0064               	clrwdt	;clear the watchdog before getting into this loop
   783  1728                     clrloop0:	
   784  1728  0180               	clrf	0	;clear RAM location pointed to by FSR
   785  1729  0A84               	incf	4,f	;increment pointer
   786  172A  0604               	xorwf	4,w	;XOR with final address
   787  172B  1903               	btfsc	3,2	;have we reached the end yet?
   788  172C  3400               	retlw	0	;all done for this memory range, return
   789  172D  0604               	xorwf	4,w	;XOR again to restore value
   790  172E  2F28               	goto	clrloop0	;do the next byte
   791                           
   792                           	psect	inittext
   793  178D                     init_fetch0:	
   794                           ;	Called with low address in FSR and high address in W
   795                           
   796  178D  087E               	movf	126,w
   797  178E  008A               	movwf	10
   798  178F  087F               	movf	127,w
   799  1790  0082               	movwf	2
   800  1791                     init_ram0:	
   801                           ;Called with:
   802                           ;	high address of idata address in btemp 
   803                           ;	low address of idata address in btemp+1 
   804                           ;	low address of data in FSR
   805                           ;	high address + 1 of data in btemp-1
   806                           
   807  1791  278D  160A  118A   	fcall	init_fetch0
   808  1794  0080               	movwf	0
   809  1795  0A84               	incf	4,f
   810  1796  0804               	movf	4,w
   811  1797  067D               	xorwf	125,w
   812  1798  1903               	btfsc	3,2
   813  1799  3400               	retlw	0
   814  179A  0AFF               	incf	127,f
   815  179B  1903               	btfsc	3,2
   816  179C  0AFE               	incf	126,f
   817  179D  2F91               	goto	init_ram0
   818                           
   819                           	psect	cstackCOMMON
   820  0070                     __pcstackCOMMON:	
   821  0070                     ?_memset:	
   822  0070                     ?_memcpy:	
   823                           ; 1 bytes @ 0x0
   824                           
   825  0070                     ?_srand:	
   826                           ; 1 bytes @ 0x0
   827                           
   828  0070                     ?_USARTInit:	
   829                           ; 1 bytes @ 0x0
   830                           
   831  0070                     ?_USARTWriteChar:	
   832                           ; 1 bytes @ 0x0
   833                           
   834  0070                     ??_USARTWriteChar:	
   835                           ; 1 bytes @ 0x0
   836                           
   837  0070                     ?_setbit:	
   838                           ; 1 bytes @ 0x0
   839                           
   840  0070                     ?_getbit:	
   841                           ; 1 bytes @ 0x0
   842                           
   843  0070                     ?_SPI1_write:	
   844                           ; 1 bytes @ 0x0
   845                           
   846  0070                     ??_SPI1_write:	
   847                           ; 1 bytes @ 0x0
   848                           
   849  0070                     ?_max7219_init1:	
   850                           ; 1 bytes @ 0x0
   851                           
   852  0070                     ?_printf_MATRIX7219:	
   853                           ; 1 bytes @ 0x0
   854                           
   855  0070                     ?_printf_MATRIX16x8:	
   856                           ; 1 bytes @ 0x0
   857                           
   858  0070                     ?_printf_Screen:	
   859                           ; 1 bytes @ 0x0
   860                           
   861  0070                     ?_Clear_Matrix:	
   862                           ; 1 bytes @ 0x0
   863                           
   864  0070                     ?_is_row_full:	
   865                           ; 1 bytes @ 0x0
   866                           
   867  0070                     ?_delete_row:	
   868                           ; 1 bytes @ 0x0
   869                           
   870  0070                     ?_delete_matrix:	
   871                           ; 1 bytes @ 0x0
   872                           
   873  0070                     ?_get_num_removed_rows:	
   874                           ; 1 bytes @ 0x0
   875                           
   876  0070                     ?_is_row_empty:	
   877                           ; 1 bytes @ 0x0
   878                           
   879  0070                     ?_char_info_index_rand:	
   880                           ; 1 bytes @ 0x0
   881                           
   882  0070                     ?_get_high:	
   883                           ; 1 bytes @ 0x0
   884                           
   885  0070                     ?_get_holes_after_merge:	
   886                           ; 1 bytes @ 0x0
   887                           
   888  0070                     ?_find_best_solution:	
   889                           ; 1 bytes @ 0x0
   890                           
   891  0070                     ?___lmul:	
   892                           ; 1 bytes @ 0x0
   893                           
   894  0070                     USARTWriteChar@ch:	
   895                           ; 4 bytes @ 0x0
   896                           
   897  0070                     setbit@at:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0070                     is_row_full@row:	
   901                           ; 1 bytes @ 0x0
   902                           
   903  0070                     delete_row@row:	
   904                           ; 1 bytes @ 0x0
   905                           
   906  0070                     is_row_empty@row:	
   907                           ; 1 bytes @ 0x0
   908                           
   909  0070                     memcpy@s1:	
   910                           ; 1 bytes @ 0x0
   911                           
   912  0070                     USARTInit@baud_rate:	
   913                           ; 1 bytes @ 0x0
   914                           
   915  0070                     getbit@byte:	
   916                           ; 2 bytes @ 0x0
   917                           
   918  0070                     memset@c:	
   919                           ; 2 bytes @ 0x0
   920                           
   921  0070                     srand@x:	
   922                           ; 2 bytes @ 0x0
   923                           
   924  0070                     ___lmul@multiplier:	
   925                           ; 2 bytes @ 0x0
   926                           
   927                           
   928                           ; 4 bytes @ 0x0
   929  0070                     	ds	1
   930  0071                     ?_USARTWriteString:	
   931  0071                     ??_is_row_full:	
   932                           ; 1 bytes @ 0x1
   933                           
   934  0071                     ??_delete_row:	
   935                           ; 1 bytes @ 0x1
   936                           
   937  0071                     ??_is_row_empty:	
   938                           ; 1 bytes @ 0x1
   939                           
   940  0071                     setbit@value:	
   941                           ; 1 bytes @ 0x1
   942                           
   943  0071                     SPI1_write@data:	
   944                           ; 1 bytes @ 0x1
   945                           
   946  0071                     is_row_empty@matrix:	
   947                           ; 1 bytes @ 0x1
   948                           
   949  0071                     USARTWriteString@str:	
   950                           ; 1 bytes @ 0x1
   951                           
   952  0071                     memcpy@n:	
   953                           ; 2 bytes @ 0x1
   954                           
   955                           
   956                           ; 2 bytes @ 0x1
   957  0071                     	ds	1
   958  0072                     ??_srand:	
   959  0072                     ??_USARTInit:	
   960                           ; 1 bytes @ 0x2
   961                           
   962  0072                     ??_setbit:	
   963                           ; 1 bytes @ 0x2
   964                           
   965  0072                     ??_get_high:	
   966                           ; 1 bytes @ 0x2
   967                           
   968  0072                     getbit@at:	
   969                           ; 1 bytes @ 0x2
   970                           
   971  0072                     SPI1_write@mask:	
   972                           ; 1 bytes @ 0x2
   973                           
   974  0072                     is_row_full@matrix:	
   975                           ; 1 bytes @ 0x2
   976                           
   977  0072                     memset@n:	
   978                           ; 1 bytes @ 0x2
   979                           
   980                           
   981                           ; 2 bytes @ 0x2
   982  0072                     	ds	1
   983  0073                     ??_memcpy:	
   984  0073                     ??_USARTWriteString:	
   985                           ; 1 bytes @ 0x3
   986                           
   987  0073                     ?_debug_str:	
   988                           ; 1 bytes @ 0x3
   989                           
   990  0073                     ?_debug_line:	
   991                           ; 1 bytes @ 0x3
   992                           
   993  0073                     ??_getbit:	
   994                           ; 1 bytes @ 0x3
   995                           
   996  0073                     ??_get_num_removed_rows:	
   997                           ; 1 bytes @ 0x3
   998                           
   999  0073                     setbit@byte:	
  1000                           ; 1 bytes @ 0x3
  1001                           
  1002  0073                     SPI1_write@i:	
  1003                           ; 1 bytes @ 0x3
  1004                           
  1005  0073                     get_high@matrix:	
  1006                           ; 1 bytes @ 0x3
  1007                           
  1008  0073                     debug_str@str:	
  1009                           ; 1 bytes @ 0x3
  1010                           
  1011  0073                     debug_line@str:	
  1012                           ; 2 bytes @ 0x3
  1013                           
  1014                           
  1015                           ; 2 bytes @ 0x3
  1016  0073                     	ds	1
  1017  0074                     ??_memset:	
  1018  0074                     ?_Write_Word:	
  1019                           ; 1 bytes @ 0x4
  1020                           
  1021  0074                     setbit@temp:	
  1022                           ; 1 bytes @ 0x4
  1023                           
  1024  0074                     Write_Word@myValue1:	
  1025                           ; 1 bytes @ 0x4
  1026                           
  1027  0074                     delete_row@matrix:	
  1028                           ; 1 bytes @ 0x4
  1029                           
  1030  0074                     get_num_removed_rows@count:	
  1031                           ; 1 bytes @ 0x4
  1032                           
  1033  0074                     get_high@row:	
  1034                           ; 1 bytes @ 0x4
  1035                           
  1036  0074                     memcpy@d1:	
  1037                           ; 1 bytes @ 0x4
  1038                           
  1039  0074                     ___lmul@multiplicand:	
  1040                           ; 1 bytes @ 0x4
  1041                           
  1042                           
  1043                           ; 4 bytes @ 0x4
  1044  0074                     	ds	1
  1045  0075                     ??_debug_str:	
  1046  0075                     ??_debug_line:	
  1047                           ; 1 bytes @ 0x5
  1048                           
  1049  0075                     ?_set_matrix_bit:	
  1050                           ; 1 bytes @ 0x5
  1051                           
  1052  0075                     set_matrix_bit@row:	
  1053                           ; 1 bytes @ 0x5
  1054                           
  1055  0075                     Write_Word@myColumn2:	
  1056                           ; 1 bytes @ 0x5
  1057                           
  1058  0075                     delete_row@i:	
  1059                           ; 1 bytes @ 0x5
  1060                           
  1061  0075                     get_num_removed_rows@matrix:	
  1062                           ; 1 bytes @ 0x5
  1063                           
  1064  0075                     memcpy@d:	
  1065                           ; 1 bytes @ 0x5
  1066                           
  1067  0075                     memset@p1:	
  1068                           ; 1 bytes @ 0x5
  1069                           
  1070  0075                     getbit@temp:	
  1071                           ; 1 bytes @ 0x5
  1072                           
  1073                           
  1074                           ; 2 bytes @ 0x5
  1075  0075                     	ds	1
  1076  0076                     ??_delete_matrix:	
  1077  0076                     set_matrix_bit@col:	
  1078                           ; 1 bytes @ 0x6
  1079                           
  1080  0076                     Write_Word@myValue2:	
  1081                           ; 1 bytes @ 0x6
  1082                           
  1083  0076                     get_num_removed_rows@row:	
  1084                           ; 1 bytes @ 0x6
  1085                           
  1086  0076                     memcpy@s:	
  1087                           ; 1 bytes @ 0x6
  1088                           
  1089  0076                     memset@p:	
  1090                           ; 1 bytes @ 0x6
  1091                           
  1092                           
  1093                           ; 1 bytes @ 0x6
  1094  0076                     	ds	1
  1095  0077                     ?_get_matrix_bit:	
  1096  0077                     ??_Write_Word:	
  1097                           ; 1 bytes @ 0x7
  1098                           
  1099  0077                     set_matrix_bit@value:	
  1100                           ; 1 bytes @ 0x7
  1101                           
  1102  0077                     Write_Word@myColumn1:	
  1103                           ; 1 bytes @ 0x7
  1104                           
  1105  0077                     delete_matrix@count:	
  1106                           ; 1 bytes @ 0x7
  1107                           
  1108  0077                     get_matrix_bit@byte:	
  1109                           ; 1 bytes @ 0x7
  1110                           
  1111                           
  1112                           ; 2 bytes @ 0x7
  1113  0077                     	ds	1
  1114  0078                     ??_set_matrix_bit:	
  1115  0078                     ??_max7219_init1:	
  1116                           ; 1 bytes @ 0x8
  1117                           
  1118  0078                     ??_printf_MATRIX7219:	
  1119                           ; 1 bytes @ 0x8
  1120                           
  1121  0078                     ??___lmul:	
  1122                           ; 1 bytes @ 0x8
  1123                           
  1124  0078                     delete_matrix@matrix:	
  1125                           ; 1 bytes @ 0x8
  1126                           
  1127                           
  1128                           ; 1 bytes @ 0x8
  1129  0078                     	ds	1
  1130  0079                     get_matrix_bit@row:	
  1131  0079                     delete_matrix@row:	
  1132                           ; 1 bytes @ 0x9
  1133                           
  1134  0079                     ___lmul@product:	
  1135                           ; 1 bytes @ 0x9
  1136                           
  1137                           
  1138                           ; 4 bytes @ 0x9
  1139  0079                     	ds	1
  1140  007A                     set_matrix_bit@byte:	
  1141  007A                     get_matrix_bit@col:	
  1142                           ; 1 bytes @ 0xA
  1143                           
  1144                           
  1145                           ; 1 bytes @ 0xA
  1146  007A                     	ds	1
  1147  007B                     ??_get_matrix_bit:	
  1148                           
  1149                           ; 1 bytes @ 0xB
  1150  007B                     	ds	1
  1151  007C                     ?_MATRIX16x8_to_MATRIX7219:	
  1152  007C                     ??_printf_debug_MATRIX16x8:	
  1153                           ; 1 bytes @ 0xC
  1154                           
  1155  007C                     ??_hit_land:	
  1156                           ; 1 bytes @ 0xC
  1157                           
  1158  007C                     ??_is_valid:	
  1159                           ; 1 bytes @ 0xC
  1160                           
  1161  007C                     ??_is_right_boundary:	
  1162                           ; 1 bytes @ 0xC
  1163                           
  1164  007C                     ??_fall_off:	
  1165                           ; 1 bytes @ 0xC
  1166                           
  1167  007C                     ??_clear:	
  1168                           ; 1 bytes @ 0xC
  1169                           
  1170  007C                     ??_merge:	
  1171                           ; 1 bytes @ 0xC
  1172                           
  1173  007C                     ??_merge1:	
  1174                           ; 1 bytes @ 0xC
  1175                           
  1176  007C                     ??_left_most:	
  1177                           ; 1 bytes @ 0xC
  1178                           
  1179  007C                     ?_get_high_after_merge:	
  1180                           ; 1 bytes @ 0xC
  1181                           
  1182  007C                     ??___wmul:	
  1183                           ; 1 bytes @ 0xC
  1184                           
  1185  007C                     ?_get_num_of_orphan:	
  1186                           ; 1 bytes @ 0xC
  1187                           
  1188  007C                     ?_get_heavy:	
  1189                           ; 2 bytes @ 0xC
  1190                           
  1191  007C                     printf_debug_MATRIX4x4@row:	
  1192                           ; 2 bytes @ 0xC
  1193                           
  1194  007C                     MATRIX16x8_to_MATRIX7219@matrix7219:	
  1195                           ; 1 bytes @ 0xC
  1196                           
  1197  007C                     get_high_after_merge@matrix:	
  1198                           ; 1 bytes @ 0xC
  1199                           
  1200  007C                     ___wmul@product:	
  1201                           ; 2 bytes @ 0xC
  1202                           
  1203                           
  1204                           ; 2 bytes @ 0xC
  1205  007C                     	ds	1
  1206  007D                     ??_printf_MATRIX16x8:	
  1207  007D                     ??___awmod:	
  1208                           ; 1 bytes @ 0xD
  1209                           
  1210  007D                     printf_debug_MATRIX4x4@col:	
  1211                           ; 1 bytes @ 0xD
  1212                           
  1213  007D                     left_most@x:	
  1214                           ; 1 bytes @ 0xD
  1215                           
  1216                           
  1217                           ; 1 bytes @ 0xD
  1218  007D                     	ds	1
  1219  007E                     ??_printf_Screen:	
  1220  007E                     ??_Clear_Matrix:	
  1221                           ; 1 bytes @ 0xE
  1222                           
  1223  007E                     ??_char_info_index_rand:	
  1224                           ; 1 bytes @ 0xE
  1225                           
  1226                           
  1227                           	psect	cstackBANK0
  1228  0020                     __pcstackBANK0:	
  1229                           ; 1 bytes @ 0xE
  1230                           
  1231  0020                     ?_printf_debug_MATRIX4x4:	
  1232  0020                     ??_MATRIX16x8_to_MATRIX7219:	
  1233                           ; 1 bytes @ 0x0
  1234                           
  1235  0020                     ?_printf_debug_MATRIX16x8:	
  1236                           ; 1 bytes @ 0x0
  1237                           
  1238  0020                     ?_hit_land:	
  1239                           ; 1 bytes @ 0x0
  1240                           
  1241  0020                     ?_is_valid:	
  1242                           ; 1 bytes @ 0x0
  1243                           
  1244  0020                     ?_is_left_boundary:	
  1245                           ; 1 bytes @ 0x0
  1246                           
  1247  0020                     ?_is_right_boundary:	
  1248                           ; 1 bytes @ 0x0
  1249                           
  1250  0020                     ?_fall_off:	
  1251                           ; 1 bytes @ 0x0
  1252                           
  1253  0020                     ?_clear:	
  1254                           ; 1 bytes @ 0x0
  1255                           
  1256  0020                     ?_merge:	
  1257                           ; 1 bytes @ 0x0
  1258                           
  1259  0020                     ?_merge1:	
  1260                           ; 1 bytes @ 0x0
  1261                           
  1262  0020                     ??_get_num_of_orphan:	
  1263                           ; 1 bytes @ 0x0
  1264                           
  1265  0020                     ??_get_heavy:	
  1266                           ; 1 bytes @ 0x0
  1267                           
  1268  0020                     ??_get_high_after_merge:	
  1269                           ; 1 bytes @ 0x0
  1270                           
  1271  0020                     ??_get_holes_after_merge:	
  1272                           ; 1 bytes @ 0x0
  1273                           
  1274  0020                     ?_rand:	
  1275                           ; 1 bytes @ 0x0
  1276                           
  1277  0020                     printf_MATRIX7219@matrix:	
  1278                           ; 2 bytes @ 0x0
  1279                           
  1280  0020                     hit_land@y:	
  1281                           ; 1 bytes @ 0x0
  1282                           
  1283  0020                     is_valid@y:	
  1284                           ; 1 bytes @ 0x0
  1285                           
  1286  0020                     fall_off@y:	
  1287                           ; 1 bytes @ 0x0
  1288                           
  1289  0020                     clear@y:	
  1290                           ; 1 bytes @ 0x0
  1291                           
  1292  0020                     merge@y:	
  1293                           ; 1 bytes @ 0x0
  1294                           
  1295  0020                     merge1@y:	
  1296                           ; 1 bytes @ 0x0
  1297                           
  1298  0020                     printf_debug_MATRIX4x4@lable:	
  1299                           ; 1 bytes @ 0x0
  1300                           
  1301  0020                     printf_debug_MATRIX16x8@lable:	
  1302                           ; 2 bytes @ 0x0
  1303                           
  1304  0020                     is_left_boundary@matrix4x4:	
  1305                           ; 2 bytes @ 0x0
  1306                           
  1307  0020                     is_right_boundary@matrix4x4:	
  1308                           ; 2 bytes @ 0x0
  1309                           
  1310                           
  1311                           ; 2 bytes @ 0x0
  1312  0020                     	ds	1
  1313  0021                     printf_MATRIX7219@col:	
  1314  0021                     hit_land@matrix4x4:	
  1315                           ; 1 bytes @ 0x1
  1316                           
  1317  0021                     is_valid@matrix4x4:	
  1318                           ; 2 bytes @ 0x1
  1319                           
  1320  0021                     fall_off@matrix4x4:	
  1321                           ; 2 bytes @ 0x1
  1322                           
  1323  0021                     clear@matrix4x4:	
  1324                           ; 2 bytes @ 0x1
  1325                           
  1326  0021                     merge@matrix4x4:	
  1327                           ; 2 bytes @ 0x1
  1328                           
  1329  0021                     merge1@matrix4x4:	
  1330                           ; 2 bytes @ 0x1
  1331                           
  1332                           
  1333                           ; 2 bytes @ 0x1
  1334  0021                     	ds	1
  1335  0022                     ??_rand:	
  1336  0022                     printf_debug_MATRIX4x4@x:	
  1337                           ; 1 bytes @ 0x2
  1338                           
  1339  0022                     MATRIX16x8_to_MATRIX7219@matrix16x8:	
  1340                           ; 1 bytes @ 0x2
  1341                           
  1342  0022                     printf_debug_MATRIX16x8@matrix:	
  1343                           ; 1 bytes @ 0x2
  1344                           
  1345  0022                     is_left_boundary@matrix16x8:	
  1346                           ; 1 bytes @ 0x2
  1347                           
  1348  0022                     is_right_boundary@matrix16x8:	
  1349                           ; 1 bytes @ 0x2
  1350                           
  1351  0022                     get_high_after_merge@y:	
  1352                           ; 1 bytes @ 0x2
  1353                           
  1354                           
  1355                           ; 1 bytes @ 0x2
  1356  0022                     	ds	1
  1357  0023                     ??_is_left_boundary:	
  1358  0023                     printf_debug_MATRIX4x4@y:	
  1359                           ; 1 bytes @ 0x3
  1360                           
  1361  0023                     MATRIX16x8_to_MATRIX7219@mask:	
  1362                           ; 1 bytes @ 0x3
  1363                           
  1364  0023                     printf_debug_MATRIX16x8@row:	
  1365                           ; 1 bytes @ 0x3
  1366                           
  1367  0023                     hit_land@matrix16x8:	
  1368                           ; 1 bytes @ 0x3
  1369                           
  1370  0023                     is_valid@matrix16x8:	
  1371                           ; 1 bytes @ 0x3
  1372                           
  1373  0023                     is_right_boundary@x:	
  1374                           ; 1 bytes @ 0x3
  1375                           
  1376  0023                     fall_off@matrix16x8:	
  1377                           ; 1 bytes @ 0x3
  1378                           
  1379  0023                     clear@matrix16x8:	
  1380                           ; 1 bytes @ 0x3
  1381                           
  1382  0023                     merge@matrix16x8:	
  1383                           ; 1 bytes @ 0x3
  1384                           
  1385  0023                     merge1@matrix16x8_in:	
  1386                           ; 1 bytes @ 0x3
  1387                           
  1388  0023                     get_high_after_merge@col:	
  1389                           ; 1 bytes @ 0x3
  1390                           
  1391  0023                     get_num_of_orphan@risk:	
  1392                           ; 1 bytes @ 0x3
  1393                           
  1394  0023                     get_heavy@risk:	
  1395                           ; 2 bytes @ 0x3
  1396                           
  1397                           
  1398                           ; 2 bytes @ 0x3
  1399  0023                     	ds	1
  1400  0024                     MATRIX16x8_to_MATRIX7219@row:	
  1401  0024                     printf_debug_MATRIX16x8@col:	
  1402                           ; 1 bytes @ 0x4
  1403                           
  1404  0024                     hit_land@x:	
  1405                           ; 1 bytes @ 0x4
  1406                           
  1407  0024                     is_valid@x:	
  1408                           ; 1 bytes @ 0x4
  1409                           
  1410  0024                     is_right_boundary@row:	
  1411                           ; 1 bytes @ 0x4
  1412                           
  1413  0024                     fall_off@x:	
  1414                           ; 1 bytes @ 0x4
  1415                           
  1416  0024                     clear@x:	
  1417                           ; 1 bytes @ 0x4
  1418                           
  1419  0024                     merge@x:	
  1420                           ; 1 bytes @ 0x4
  1421                           
  1422  0024                     merge1@matrix16x8_out:	
  1423                           ; 1 bytes @ 0x4
  1424                           
  1425  0024                     get_high_after_merge@row:	
  1426                           ; 1 bytes @ 0x4
  1427                           
  1428  0024                     printf_debug_MATRIX4x4@matrix:	
  1429                           ; 1 bytes @ 0x4
  1430                           
  1431                           
  1432                           ; 2 bytes @ 0x4
  1433  0024                     	ds	1
  1434  0025                     MATRIX16x8_to_MATRIX7219@col:	
  1435  0025                     hit_land@col:	
  1436                           ; 1 bytes @ 0x5
  1437                           
  1438  0025                     is_valid@row:	
  1439                           ; 1 bytes @ 0x5
  1440                           
  1441  0025                     is_right_boundary@col:	
  1442                           ; 1 bytes @ 0x5
  1443                           
  1444  0025                     fall_off@col:	
  1445                           ; 1 bytes @ 0x5
  1446                           
  1447  0025                     clear@row:	
  1448                           ; 1 bytes @ 0x5
  1449                           
  1450  0025                     merge@row:	
  1451                           ; 1 bytes @ 0x5
  1452                           
  1453  0025                     get_num_of_orphan@full:	
  1454                           ; 1 bytes @ 0x5
  1455                           
  1456  0025                     get_heavy@start:	
  1457                           ; 1 bytes @ 0x5
  1458                           
  1459  0025                     merge1@len:	
  1460                           ; 1 bytes @ 0x5
  1461                           
  1462                           
  1463                           ; 2 bytes @ 0x5
  1464  0025                     	ds	1
  1465  0026                     ??_printf_debug_MATRIX4x4:	
  1466  0026                     ?_right_most:	
  1467                           ; 1 bytes @ 0x6
  1468                           
  1469  0026                     printf_MATRIX16x8@matrix16x8:	
  1470                           ; 1 bytes @ 0x6
  1471                           
  1472  0026                     hit_land@row:	
  1473                           ; 1 bytes @ 0x6
  1474                           
  1475  0026                     is_valid@col:	
  1476                           ; 1 bytes @ 0x6
  1477                           
  1478  0026                     fall_off@row:	
  1479                           ; 1 bytes @ 0x6
  1480                           
  1481  0026                     clear@col:	
  1482                           ; 1 bytes @ 0x6
  1483                           
  1484  0026                     merge@col:	
  1485                           ; 1 bytes @ 0x6
  1486                           
  1487  0026                     get_num_of_orphan@matrix:	
  1488                           ; 1 bytes @ 0x6
  1489                           
  1490  0026                     get_heavy@matrix:	
  1491                           ; 1 bytes @ 0x6
  1492                           
  1493  0026                     get_holes_after_merge@num_hole:	
  1494                           ; 1 bytes @ 0x6
  1495                           
  1496  0026                     right_most@matrix4x4:	
  1497                           ; 1 bytes @ 0x6
  1498                           
  1499                           
  1500                           ; 2 bytes @ 0x6
  1501  0026                     	ds	1
  1502  0027                     ?___awmod:	
  1503  0027                     merge1@x:	
  1504                           ; 2 bytes @ 0x7
  1505                           
  1506  0027                     get_num_of_orphan@col:	
  1507                           ; 1 bytes @ 0x7
  1508                           
  1509  0027                     get_heavy@pre:	
  1510                           ; 1 bytes @ 0x7
  1511                           
  1512  0027                     get_holes_after_merge@stop:	
  1513                           ; 1 bytes @ 0x7
  1514                           
  1515  0027                     ___awmod@divisor:	
  1516                           ; 1 bytes @ 0x7
  1517                           
  1518  0027                     printf_MATRIX16x8@matrix7219:	
  1519                           ; 2 bytes @ 0x7
  1520                           
  1521                           
  1522                           ; 16 bytes @ 0x7
  1523  0027                     	ds	1
  1524  0028                     is_left_boundary@x:	
  1525  0028                     merge1@row:	
  1526                           ; 1 bytes @ 0x8
  1527                           
  1528  0028                     get_num_of_orphan@row:	
  1529                           ; 1 bytes @ 0x8
  1530                           
  1531  0028                     get_heavy@col:	
  1532                           ; 1 bytes @ 0x8
  1533                           
  1534  0028                     right_most@matrix16x8:	
  1535                           ; 1 bytes @ 0x8
  1536                           
  1537  0028                     get_holes_after_merge@start:	
  1538                           ; 1 bytes @ 0x8
  1539                           
  1540                           
  1541                           ; 1 bytes @ 0x8
  1542  0028                     	ds	1
  1543  0029                     ??_right_most:	
  1544  0029                     is_left_boundary@row:	
  1545                           ; 1 bytes @ 0x9
  1546                           
  1547  0029                     merge1@col:	
  1548                           ; 1 bytes @ 0x9
  1549                           
  1550  0029                     get_heavy@row:	
  1551                           ; 1 bytes @ 0x9
  1552                           
  1553  0029                     get_holes_after_merge@matrix:	
  1554                           ; 1 bytes @ 0x9
  1555                           
  1556  0029                     ___awmod@dividend:	
  1557                           ; 1 bytes @ 0x9
  1558                           
  1559                           
  1560                           ; 2 bytes @ 0x9
  1561  0029                     	ds	1
  1562  002A                     is_left_boundary@col:	
  1563  002A                     right_most@x:	
  1564                           ; 1 bytes @ 0xA
  1565                           
  1566  002A                     get_holes_after_merge@col:	
  1567                           ; 1 bytes @ 0xA
  1568                           
  1569                           
  1570                           ; 1 bytes @ 0xA
  1571  002A                     	ds	1
  1572  002B                     ?_left_most:	
  1573  002B                     get_holes_after_merge@row:	
  1574                           ; 1 bytes @ 0xB
  1575                           
  1576  002B                     ___awmod@counter:	
  1577                           ; 1 bytes @ 0xB
  1578                           
  1579  002B                     left_most@matrix4x4:	
  1580                           ; 1 bytes @ 0xB
  1581                           
  1582                           
  1583                           ; 2 bytes @ 0xB
  1584  002B                     	ds	1
  1585  002C                     ?___wmul:	
  1586  002C                     ___awmod@sign:	
  1587                           ; 2 bytes @ 0xC
  1588                           
  1589  002C                     ___wmul@multiplier:	
  1590                           ; 1 bytes @ 0xC
  1591                           
  1592                           
  1593                           ; 2 bytes @ 0xC
  1594  002C                     	ds	1
  1595  002D                     left_most@matrix16x8:	
  1596                           
  1597                           ; 1 bytes @ 0xD
  1598  002D                     	ds	1
  1599  002E                     ___wmul@multiplicand:	
  1600                           
  1601                           ; 2 bytes @ 0xE
  1602  002E                     	ds	2
  1603  0030                     ??_find_best_solution:	
  1604                           
  1605                           ; 1 bytes @ 0x10
  1606  0030                     	ds	18
  1607  0042                     find_best_solution@temp_pre_risk:	
  1608                           
  1609                           ; 2 bytes @ 0x22
  1610  0042                     	ds	2
  1611  0044                     find_best_solution@left_most_index:	
  1612                           
  1613                           ; 1 bytes @ 0x24
  1614  0044                     	ds	1
  1615  0045                     find_best_solution@right_most_index:	
  1616                           
  1617                           ; 1 bytes @ 0x25
  1618  0045                     	ds	1
  1619  0046                     find_best_solution@temp_pre_x:	
  1620                           
  1621                           ; 1 bytes @ 0x26
  1622  0046                     	ds	1
  1623  0047                     find_best_solution@tem_pre_sub_index:	
  1624                           
  1625                           ; 1 bytes @ 0x27
  1626  0047                     	ds	1
  1627  0048                     find_best_solution@temp_risk:	
  1628                           
  1629                           ; 2 bytes @ 0x28
  1630  0048                     	ds	2
  1631  004A                     find_best_solution@res:	
  1632                           
  1633                           ; 1 bytes @ 0x2A
  1634  004A                     	ds	1
  1635  004B                     find_best_solution@temp_high:	
  1636                           
  1637                           ; 2 bytes @ 0x2B
  1638  004B                     	ds	2
  1639  004D                     find_best_solution@temp_y:	
  1640                           
  1641                           ; 1 bytes @ 0x2D
  1642  004D                     	ds	1
  1643  004E                     find_best_solution@tem_sub_index:	
  1644                           
  1645                           ; 1 bytes @ 0x2E
  1646  004E                     	ds	1
  1647  004F                     find_best_solution@temp_x:	
  1648                           
  1649                           ; 1 bytes @ 0x2F
  1650  004F                     	ds	1
  1651  0050                     ?_main:	
  1652  0050                     main@argc:	
  1653                           ; 2 bytes @ 0x30
  1654                           
  1655                           
  1656                           ; 2 bytes @ 0x30
  1657  0050                     	ds	2
  1658  0052                     main@argv:	
  1659                           
  1660                           ; 2 bytes @ 0x32
  1661  0052                     	ds	2
  1662  0054                     ??_main:	
  1663                           
  1664                           ; 1 bytes @ 0x34
  1665  0054                     	ds	4
  1666  0058                     main@Seed:	
  1667                           
  1668                           ; 2 bytes @ 0x38
  1669  0058                     	ds	2
  1670  005A                     main@hit_res:	
  1671                           
  1672                           ; 1 bytes @ 0x3A
  1673  005A                     	ds	1
  1674                           
  1675                           	psect	maintext
  1676  0392                     __pmaintext:	
  1677 ;;
  1678 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1679 ;;
  1680 ;; *************** function _main *****************
  1681 ;; Defined at:
  1682 ;;		line 1475 in file "teris_16f886.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;  argc            2   48[BANK0 ] int 
  1685 ;;  argv            2   50[BANK0 ] PTR PTR unsigned char 
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;  Seed            2   56[BANK0 ] unsigned int 
  1688 ;;  hit_res         1   58[BANK0 ] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  2   48[BANK0 ] int 
  1691 ;; Registers used:
  1692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : B00/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1698 ;;      Params:         0       4       0       0       0
  1699 ;;      Locals:         0       3       0       0       0
  1700 ;;      Temps:          0       4       0       0       0
  1701 ;;      Totals:         0      11       0       0       0
  1702 ;;Total ram usage:       11 bytes
  1703 ;; Hardware stack levels required when called:    7
  1704 ;; This function calls:
  1705 ;;		_Clear_Matrix
  1706 ;;		_USARTInit
  1707 ;;		_char_info_index_rand
  1708 ;;		_clear
  1709 ;;		_delete_matrix
  1710 ;;		_find_best_solution
  1711 ;;		_hit_land
  1712 ;;		_max7219_init1
  1713 ;;		_merge
  1714 ;;		_printf_Screen
  1715 ;;		_printf_debug_MATRIX16x8
  1716 ;;		_printf_debug_MATRIX4x4
  1717 ;;		_srand
  1718 ;; This function is called by:
  1719 ;;		Startup code after reset
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           
  1724                           ;psect for function _main
  1725  0392                     _main:	
  1726                           
  1727                           ;teris_16f886.c: 1477: uint8_t hit_res;
  1728                           ;teris_16f886.c: 1489: (TRISAbits.TRISA3 = 0);
  1729                           
  1730                           ;incstack = 0
  1731                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1732  0392  1683               	bsf	3,5	;RP0=1, select bank1
  1733  0393  1303               	bcf	3,6	;RP1=0, select bank1
  1734  0394  1185               	bcf	5,3	;volatile
  1735                           
  1736                           ;teris_16f886.c: 1491: (TRISAbits.TRISA2 = 0);
  1737  0395  1105               	bcf	5,2	;volatile
  1738                           
  1739                           ;teris_16f886.c: 1493: (TRISAbits.TRISA1 = 0);
  1740  0396  1085               	bcf	5,1	;volatile
  1741                           
  1742                           ;teris_16f886.c: 1495: ANSELbits.ANS1 = 0;
  1743  0397  1683               	bsf	3,5	;RP0=1, select bank3
  1744  0398  1703               	bsf	3,6	;RP1=1, select bank3
  1745  0399  1088               	bcf	8,1	;volatile
  1746                           
  1747                           ;teris_16f886.c: 1496: ANSELbits.ANS2 = 0;
  1748  039A  1108               	bcf	8,2	;volatile
  1749                           
  1750                           ;teris_16f886.c: 1497: ANSELbits.ANS3 = 0;
  1751  039B  1188               	bcf	8,3	;volatile
  1752                           
  1753                           ;teris_16f886.c: 1498: RA2 = 1;
  1754  039C  1283               	bcf	3,5	;RP0=0, select bank0
  1755  039D  1303               	bcf	3,6	;RP1=0, select bank0
  1756  039E  1505               	bsf	5,2	;volatile
  1757                           
  1758                           ;teris_16f886.c: 1499: RA1 = 0;
  1759  039F  1085               	bcf	5,1	;volatile
  1760                           
  1761                           ;teris_16f886.c: 1503: USARTInit(9600);
  1762  03A0  3080               	movlw	128
  1763  03A1  00F0               	movwf	USARTInit@baud_rate
  1764  03A2  3025               	movlw	37
  1765  03A3  00F1               	movwf	USARTInit@baud_rate+1
  1766  03A4  120A  158A  242E  120A  118A  	fcall	_USARTInit
  1767                           
  1768                           ;teris_16f886.c: 1506: max7219_init1();
  1769  03A9  120A  158A  24BC  120A  118A  	fcall	_max7219_init1
  1770                           
  1771                           ;teris_16f886.c: 1508: unsigned Seed;
  1772                           ;teris_16f886.c: 1509: srand(Seed);
  1773  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  1774  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  1775  03B0  0859               	movf	main@Seed+1,w
  1776  03B1  00F1               	movwf	srand@x+1
  1777  03B2  0858               	movf	main@Seed,w
  1778  03B3  00F0               	movwf	srand@x
  1779  03B4  120A  158A  2179  120A  118A  	fcall	_srand
  1780  03B9                     l4012:	
  1781                           ;teris_16f886.c: 1511: __start:
  1782                           
  1783                           ;teris_16f886.c: 1527: {
  1784                           ;teris_16f886.c: 1531: goto __start;
  1785                           
  1786                           
  1787                           ;teris_16f886.c: 1512: Clear_Matrix();
  1788  03B9  160A  118A  276B  120A  118A  	fcall	_Clear_Matrix
  1789  03BE                     l4014:	
  1790                           ;teris_16f886.c: 1516: while(1)
  1791                           
  1792                           
  1793                           ;teris_16f886.c: 1517: {
  1794                           ;teris_16f886.c: 1518: cur_y = 0;
  1795  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  1796  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  1797  03C0  01E4               	clrf	_cur_y
  1798                           
  1799                           ;teris_16f886.c: 1519: cur_x = 2, cur_y = 0;
  1800  03C1  3002               	movlw	2
  1801  03C2  00D4               	movwf	??_main
  1802  03C3  0854               	movf	??_main,w
  1803  03C4  00EB               	movwf	_cur_x
  1804  03C5  01E4               	clrf	_cur_y
  1805                           
  1806                           ;teris_16f886.c: 1520: g_char_info_index = char_info_index_rand();
  1807  03C6  160A  118A  27B0  120A  118A  	fcall	_char_info_index_rand
  1808  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  1809  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  1810  03CD  00D4               	movwf	??_main
  1811  03CE  0854               	movf	??_main,w
  1812  03CF  00E5               	movwf	_g_char_info_index
  1813                           
  1814                           ;teris_16f886.c: 1521: g_char_info_sub_index = 0;
  1815  03D0  01E6               	clrf	_g_char_info_sub_index
  1816                           
  1817                           ;teris_16f886.c: 1526: if(find_best_solution() == 0)
  1818  03D1  120A  118A  25AB  120A  118A  	fcall	_find_best_solution
  1819  03D6  3A00               	xorlw	0
  1820  03D7  1903               	btfsc	3,2
  1821  03D8  2BB9               	goto	l4012
  1822                           
  1823                           ;teris_16f886.c: 1532: }
  1824                           ;teris_16f886.c: 1533: g_cur_matrix4x4 = &g_matrix4x4[g_char_info[g_char_info_index].sta
      +                          rt_index + g_char_info_sub_index];
  1825  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  1826  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  1827  03DB  0865               	movf	_g_char_info_index,w
  1828  03DC  00D4               	movwf	??_main
  1829  03DD  0754               	addwf	??_main,w
  1830  03DE  3E12               	addlw	low (_g_char_info| (0+32768))
  1831  03DF  0084               	movwf	4
  1832  03E0  3088               	movlw	high (_g_char_info| (0+32768))
  1833  03E1  1803               	skipnc
  1834  03E2  3E01               	addlw	1
  1835  03E3  00FF               	movwf	127
  1836  03E4  120A  158A  2000  120A  118A  	fcall	stringtab
  1837  03E9  0766               	addwf	_g_char_info_sub_index,w
  1838  03EA  00D5               	movwf	??_main+1
  1839  03EB  3001               	movlw	1
  1840  03EC                     u4835:	
  1841  03EC  1003               	clrc
  1842  03ED  0DD5               	rlf	??_main+1,f
  1843  03EE  3EFF               	addlw	-1
  1844  03EF  1D03               	skipz
  1845  03F0  2BEC               	goto	u4835
  1846  03F1  1003               	clrc
  1847  03F2  0D55               	rlf	??_main+1,w
  1848  03F3  3E42               	addlw	low (_g_matrix4x4| (0+32768))
  1849  03F4  00D6               	movwf	??_main+2
  1850  03F5  3088               	movlw	high (_g_matrix4x4| (0+32768))
  1851  03F6  1803               	skipnc
  1852  03F7  3E01               	addlw	1
  1853  03F8  00D7               	movwf	??_main+3
  1854  03F9  0856               	movf	??_main+2,w
  1855  03FA  00E0               	movwf	_g_cur_matrix4x4
  1856  03FB  0857               	movf	??_main+3,w
  1857  03FC  00E1               	movwf	_g_cur_matrix4x4+1
  1858                           
  1859                           ;teris_16f886.c: 1535: printf_debug_MATRIX4x4("MATRIX4x4 chosen", cur_x, cur_y, g_cur_ma
      +                          trix4x4);
  1860  03FD  3046               	movlw	low (STR_22| (0+32768))
  1861  03FE  00A0               	movwf	printf_debug_MATRIX4x4@lable
  1862  03FF  3089               	movlw	high (STR_22| (0+32768))
  1863  0400  00A1               	movwf	printf_debug_MATRIX4x4@lable+1
  1864  0401  086B               	movf	_cur_x,w
  1865  0402  00D4               	movwf	??_main
  1866  0403  0854               	movf	??_main,w
  1867  0404  00A2               	movwf	printf_debug_MATRIX4x4@x
  1868  0405  0864               	movf	_cur_y,w
  1869  0406  00D5               	movwf	??_main+1
  1870  0407  0855               	movf	??_main+1,w
  1871  0408  00A3               	movwf	printf_debug_MATRIX4x4@y
  1872  0409  0860               	movf	_g_cur_matrix4x4,w
  1873  040A  00A4               	movwf	printf_debug_MATRIX4x4@matrix
  1874  040B  0861               	movf	_g_cur_matrix4x4+1,w
  1875  040C  00A5               	movwf	printf_debug_MATRIX4x4@matrix+1
  1876  040D  120A  118A  229D  120A  118A  	fcall	_printf_debug_MATRIX4x4
  1877  0412                     l4032:	
  1878                           ;teris_16f886.c: 1538: while(1)
  1879                           
  1880                           
  1881                           ;teris_16f886.c: 1539: {
  1882                           ;teris_16f886.c: 1540: hit_res = hit_land(cur_x, cur_y, g_cur_matrix4x4, &g_matrix16x8);
  1883  0412  1283               	bcf	3,5	;RP0=0, select bank0
  1884  0413  1303               	bcf	3,6	;RP1=0, select bank0
  1885  0414  0864               	movf	_cur_y,w
  1886  0415  00D4               	movwf	??_main
  1887  0416  0854               	movf	??_main,w
  1888  0417  00A0               	movwf	hit_land@y
  1889  0418  0860               	movf	_g_cur_matrix4x4,w
  1890  0419  00A1               	movwf	hit_land@matrix4x4
  1891  041A  0861               	movf	_g_cur_matrix4x4+1,w
  1892  041B  00A2               	movwf	hit_land@matrix4x4+1
  1893  041C  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  1894  041D  00D5               	movwf	??_main+1
  1895  041E  0855               	movf	??_main+1,w
  1896  041F  00A3               	movwf	hit_land@matrix16x8
  1897  0420  086B               	movf	_cur_x,w
  1898  0421  120A  158A  26B2  120A  118A  	fcall	_hit_land
  1899  0426  1283               	bcf	3,5	;RP0=0, select bank0
  1900  0427  1303               	bcf	3,6	;RP1=0, select bank0
  1901  0428  00D6               	movwf	??_main+2
  1902  0429  0856               	movf	??_main+2,w
  1903  042A  00DA               	movwf	main@hit_res
  1904                           
  1905                           ;teris_16f886.c: 1544: merge(cur_x, cur_y, g_cur_matrix4x4, &g_matrix16x8);
  1906  042B  0864               	movf	_cur_y,w
  1907  042C  00D4               	movwf	??_main
  1908  042D  0854               	movf	??_main,w
  1909  042E  00A0               	movwf	merge@y
  1910  042F  0860               	movf	_g_cur_matrix4x4,w
  1911  0430  00A1               	movwf	merge@matrix4x4
  1912  0431  0861               	movf	_g_cur_matrix4x4+1,w
  1913  0432  00A2               	movwf	merge@matrix4x4+1
  1914  0433  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  1915  0434  00D5               	movwf	??_main+1
  1916  0435  0855               	movf	??_main+1,w
  1917  0436  00A3               	movwf	merge@matrix16x8
  1918  0437  086B               	movf	_cur_x,w
  1919  0438  120A  158A  23EA  120A  118A  	fcall	_merge
  1920                           
  1921                           ;teris_16f886.c: 1545: if(hit_res == 1)
  1922  043D  1283               	bcf	3,5	;RP0=0, select bank0
  1923  043E  1303               	bcf	3,6	;RP1=0, select bank0
  1924  043F  035A               	decf	main@hit_res,w
  1925  0440  1D03               	btfss	3,2
  1926  0441  2C5C               	goto	l4044
  1927                           
  1928                           ;teris_16f886.c: 1546: {
  1929                           ;teris_16f886.c: 1547: printf_Screen();
  1930  0442  160A  118A  2705  120A  118A  	fcall	_printf_Screen
  1931                           
  1932                           ;teris_16f886.c: 1551: _delay((unsigned long)((100)*(20000000/4000.0)));
  1933  0447  3003               	movlw	3
  1934  0448  1283               	bcf	3,5	;RP0=0, select bank0
  1935  0449  1303               	bcf	3,6	;RP1=0, select bank0
  1936  044A  00D6               	movwf	??_main+2
  1937  044B  308A               	movlw	138
  1938  044C  00D5               	movwf	??_main+1
  1939  044D  3056               	movlw	86
  1940  044E  00D4               	movwf	??_main
  1941  044F                     u5777:	
  1942  044F  0BD4               	decfsz	??_main,f
  1943  0450  2C4F               	goto	u5777
  1944  0451  0BD5               	decfsz	??_main+1,f
  1945  0452  2C4F               	goto	u5777
  1946  0453  0BD6               	decfsz	??_main+2,f
  1947  0454  2C4F               	goto	u5777
  1948  0455  2C56               	nop2
  1949                           
  1950                           ;teris_16f886.c: 1553: delete_matrix(&g_matrix16x8);
  1951  0456  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  1952  0457  120A  158A  2274  120A  118A  	fcall	_delete_matrix
  1953  045C                     l4044:	
  1954                           
  1955                           ;teris_16f886.c: 1554: }
  1956                           ;teris_16f886.c: 1556: printf_debug_MATRIX16x8("Main screen", &g_matrix16x8);
  1957  045C  3057               	movlw	low (STR_23| (0+32768))
  1958  045D  1283               	bcf	3,5	;RP0=0, select bank0
  1959  045E  1303               	bcf	3,6	;RP1=0, select bank0
  1960  045F  00A0               	movwf	printf_debug_MATRIX16x8@lable
  1961  0460  3089               	movlw	high (STR_23| (0+32768))
  1962  0461  00A1               	movwf	printf_debug_MATRIX16x8@lable+1
  1963  0462  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  1964  0463  00D4               	movwf	??_main
  1965  0464  0854               	movf	??_main,w
  1966  0465  00A2               	movwf	printf_debug_MATRIX16x8@matrix
  1967  0466  120A  158A  278D  120A  118A  	fcall	_printf_debug_MATRIX16x8
  1968                           
  1969                           ;teris_16f886.c: 1558: printf_Screen();
  1970  046B  160A  118A  2705  120A  118A  	fcall	_printf_Screen
  1971                           
  1972                           ;teris_16f886.c: 1559: if(hit_res == 0)
  1973  0470  1283               	bcf	3,5	;RP0=0, select bank0
  1974  0471  1303               	bcf	3,6	;RP1=0, select bank0
  1975  0472  085A               	movf	main@hit_res,w
  1976  0473  1D03               	btfss	3,2
  1977  0474  2BBE               	goto	l4014
  1978                           
  1979                           ;teris_16f886.c: 1560: {
  1980                           ;teris_16f886.c: 1561: clear(cur_x, cur_y, g_cur_matrix4x4, &g_matrix16x8);
  1981  0475  0864               	movf	_cur_y,w
  1982  0476  00D4               	movwf	??_main
  1983  0477  0854               	movf	??_main,w
  1984  0478  00A0               	movwf	clear@y
  1985  0479  0860               	movf	_g_cur_matrix4x4,w
  1986  047A  00A1               	movwf	clear@matrix4x4
  1987  047B  0861               	movf	_g_cur_matrix4x4+1,w
  1988  047C  00A2               	movwf	clear@matrix4x4+1
  1989  047D  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  1990  047E  00D5               	movwf	??_main+1
  1991  047F  0855               	movf	??_main+1,w
  1992  0480  00A3               	movwf	clear@matrix16x8
  1993  0481  086B               	movf	_cur_x,w
  1994  0482  120A  158A  23A7  120A  118A  	fcall	_clear
  1995                           
  1996                           ;teris_16f886.c: 1566: }
  1997                           ;teris_16f886.c: 1570: _delay((unsigned long)((400)*(20000000/4000.0)));
  1998                           
  1999                           ;teris_16f886.c: 1563: else
  2000                           ;teris_16f886.c: 1564: {
  2001                           ;teris_16f886.c: 1565: break;
  2002                           
  2003                           ;teris_16f886.c: 1562: }
  2004  0487  300B               	movlw	11
  2005  0488  1283               	bcf	3,5	;RP0=0, select bank0
  2006  0489  1303               	bcf	3,6	;RP1=0, select bank0
  2007  048A  00D6               	movwf	??_main+2
  2008  048B  3026               	movlw	38
  2009  048C  00D5               	movwf	??_main+1
  2010  048D  3066               	movlw	102
  2011  048E  00D4               	movwf	??_main
  2012  048F                     u5787:	
  2013  048F  0BD4               	decfsz	??_main,f
  2014  0490  2C8F               	goto	u5787
  2015  0491  0BD5               	decfsz	??_main+1,f
  2016  0492  2C8F               	goto	u5787
  2017  0493  0BD6               	decfsz	??_main+2,f
  2018  0494  2C8F               	goto	u5787
  2019  0495  2C96               	nop2
  2020                           
  2021                           ;teris_16f886.c: 1572: cur_y++;
  2022  0496  3001               	movlw	1
  2023  0497  1283               	bcf	3,5	;RP0=0, select bank0
  2024  0498  1303               	bcf	3,6	;RP1=0, select bank0
  2025  0499  00D4               	movwf	??_main
  2026  049A  0854               	movf	??_main,w
  2027  049B  07E4               	addwf	_cur_y,f
  2028  049C  2C12               	goto	l4032
  2029  049D                     __end_of_main:	
  2030                           ;teris_16f886.c: 1582: return 0;
  2031                           ;	Return value of _main is never used
  2032                           
  2033                           ;teris_16f886.c: 1573: }
  2034                           ;teris_16f886.c: 1574: }
  2035                           ;teris_16f886.c: 1575: __exit:
  2036                           
  2037                           
  2038                           	psect	text1
  2039  0979                     __ptext1:	
  2040 ;; *************** function _srand *****************
  2041 ;; Defined at:
  2042 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  x               2    0[COMMON] unsigned int 
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;		None
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  1    wreg      void 
  2049 ;; Registers used:
  2050 ;;		wreg
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2056 ;;      Params:         2       0       0       0       0
  2057 ;;      Locals:         0       0       0       0       0
  2058 ;;      Temps:          0       0       0       0       0
  2059 ;;      Totals:         2       0       0       0       0
  2060 ;;Total ram usage:        2 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; This function calls:
  2063 ;;		Nothing
  2064 ;; This function is called by:
  2065 ;;		_main
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           
  2070                           ;psect for function _srand
  2071  0979                     _srand:	
  2072                           
  2073                           ;incstack = 0
  2074                           ; Regs used in _srand: [wreg]
  2075  0979  0870               	movf	srand@x,w
  2076  097A  1283               	bcf	3,5	;RP0=0, select bank0
  2077  097B  1303               	bcf	3,6	;RP1=0, select bank0
  2078  097C  00E7               	movwf	_randx
  2079  097D  0871               	movf	srand@x+1,w
  2080  097E  00E8               	movwf	_randx+1
  2081  097F  01E9               	clrf	_randx+2
  2082  0980  01EA               	clrf	_randx+3
  2083  0981  0008               	return
  2084  0982                     __end_of_srand:	
  2085                           
  2086                           	psect	text2
  2087  029D                     __ptext2:	
  2088 ;; *************** function _printf_debug_MATRIX4x4 *****************
  2089 ;; Defined at:
  2090 ;;		line 476 in file "teris_16f886.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;  lable           2    0[BANK0 ] PTR const unsigned char 
  2093 ;;		 -> STR_22(17), ROM(8192), 
  2094 ;;  x               1    2[BANK0 ] char 
  2095 ;;  y               1    3[BANK0 ] char 
  2096 ;;  matrix          2    4[BANK0 ] PTR const struct .
  2097 ;;		 -> NULL(0), g_matrix4x4(96), 
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;  col             1   13[COMMON] char 
  2100 ;;  row             1   12[COMMON] char 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2110 ;;      Params:         0       6       0       0       0
  2111 ;;      Locals:         2       0       0       0       0
  2112 ;;      Temps:          0       6       0       0       0
  2113 ;;      Totals:         2      12       0       0       0
  2114 ;;Total ram usage:       14 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    3
  2117 ;; This function calls:
  2118 ;;		_debug_line
  2119 ;;		_debug_str
  2120 ;;		_get_matrix_bit
  2121 ;; This function is called by:
  2122 ;;		_main
  2123 ;;		_printf_debug_cur_MATRIX4x4
  2124 ;;		_printf_debug_all_MATRIX4x4
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           
  2129                           ;psect for function _printf_debug_MATRIX4x4
  2130  029D                     _printf_debug_MATRIX4x4:	
  2131                           
  2132                           ;teris_16f886.c: 478: if(lable != (0))
  2133                           
  2134                           ;incstack = 0
  2135                           ; Regs used in _printf_debug_MATRIX4x4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  2136  029D  1283               	bcf	3,5	;RP0=0, select bank0
  2137  029E  1303               	bcf	3,6	;RP1=0, select bank0
  2138  029F  0820               	movf	printf_debug_MATRIX4x4@lable,w
  2139  02A0  0421               	iorwf	printf_debug_MATRIX4x4@lable+1,w
  2140  02A1  1903               	btfsc	3,2
  2141  02A2  2AB5               	goto	l208
  2142                           
  2143                           ;teris_16f886.c: 479: {
  2144                           ;teris_16f886.c: 480: debug_str(lable);
  2145  02A3  0820               	movf	printf_debug_MATRIX4x4@lable,w
  2146  02A4  00F3               	movwf	debug_str@str
  2147  02A5  0821               	movf	printf_debug_MATRIX4x4@lable+1,w
  2148  02A6  00F4               	movwf	debug_str@str+1
  2149  02A7  160A  118A  271F  120A  118A  	fcall	_debug_str
  2150                           
  2151                           ;teris_16f886.c: 481: debug_line(":");
  2152  02AC  3072               	movlw	low (STR_5| (0+32768))
  2153  02AD  00F3               	movwf	debug_line@str
  2154  02AE  3089               	movlw	high (STR_5| (0+32768))
  2155  02AF  00F4               	movwf	debug_line@str+1
  2156  02B0  160A  118A  277C  120A  118A  	fcall	_debug_line
  2157  02B5                     l208:	
  2158                           
  2159                           ;teris_16f886.c: 482: }
  2160                           ;teris_16f886.c: 483: debug_line("<<<<<<<<<<<<<<<<<<<<MATRIX4x4");
  2161  02B5  30C1               	movlw	low (STR_6| (0+32768))
  2162  02B6  00F3               	movwf	debug_line@str
  2163  02B7  3088               	movlw	high (STR_6| (0+32768))
  2164  02B8  00F4               	movwf	debug_line@str+1
  2165  02B9  160A  118A  277C  120A  118A  	fcall	_debug_line
  2166                           
  2167                           ;teris_16f886.c: 484: for(int8_t row = 0; row < 16; row++)
  2168  02BE  01FC               	clrf	printf_debug_MATRIX4x4@row
  2169  02BF  087C               	movf	printf_debug_MATRIX4x4@row,w
  2170  02C0  3A80               	xorlw	128
  2171  02C1  3E70               	addlw	-144
  2172  02C2  1803               	btfsc	3,0
  2173  02C3  2B8A               	goto	l3338
  2174  02C4                     l3308:	
  2175                           
  2176                           ;teris_16f886.c: 485: {
  2177                           ;teris_16f886.c: 486: for(int8_t col = 0; col < 8; col++)
  2178  02C4  01FD               	clrf	printf_debug_MATRIX4x4@col
  2179  02C5  087D               	movf	printf_debug_MATRIX4x4@col,w
  2180  02C6  3A80               	xorlw	128
  2181  02C7  3E78               	addlw	-136
  2182  02C8  1803               	btfsc	3,0
  2183  02C9  2B76               	goto	l3332
  2184  02CA                     l3314:	
  2185                           
  2186                           ;teris_16f886.c: 487: {
  2187                           ;teris_16f886.c: 488: if((row - y >= 0) && (row - y < 4)
  2188                           ;teris_16f886.c: 489: && (col - x >= 0) && (col - x < 4)
  2189                           ;teris_16f886.c: 490: && (get_matrix_bit(matrix->row, row - y, col - x) == 1))
  2190  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  2191  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  2192  02CC  0823               	movf	printf_debug_MATRIX4x4@y,w
  2193  02CD  00A6               	movwf	??_printf_debug_MATRIX4x4
  2194  02CE  01A7               	clrf	??_printf_debug_MATRIX4x4+1
  2195  02CF  1BA6               	btfsc	??_printf_debug_MATRIX4x4,7
  2196  02D0  03A7               	decf	??_printf_debug_MATRIX4x4+1,f
  2197  02D1  09A6               	comf	??_printf_debug_MATRIX4x4,f
  2198  02D2  09A7               	comf	??_printf_debug_MATRIX4x4+1,f
  2199  02D3  0AA6               	incf	??_printf_debug_MATRIX4x4,f
  2200  02D4  1903               	skipnz
  2201  02D5  0AA7               	incf	??_printf_debug_MATRIX4x4+1,f
  2202  02D6  087C               	movf	printf_debug_MATRIX4x4@row,w
  2203  02D7  00A8               	movwf	??_printf_debug_MATRIX4x4+2
  2204  02D8  01A9               	clrf	??_printf_debug_MATRIX4x4+3
  2205  02D9  1BA8               	btfsc	??_printf_debug_MATRIX4x4+2,7
  2206  02DA  03A9               	decf	??_printf_debug_MATRIX4x4+3,f
  2207  02DB  0826               	movf	??_printf_debug_MATRIX4x4,w
  2208  02DC  0728               	addwf	??_printf_debug_MATRIX4x4+2,w
  2209  02DD  00AA               	movwf	??_printf_debug_MATRIX4x4+4
  2210  02DE  0827               	movf	??_printf_debug_MATRIX4x4+1,w
  2211  02DF  1803               	skipnc
  2212  02E0  0A27               	incf	??_printf_debug_MATRIX4x4+1,w
  2213  02E1  0729               	addwf	??_printf_debug_MATRIX4x4+3,w
  2214  02E2  00AB               	movwf	??_printf_debug_MATRIX4x4+5
  2215  02E3  1BAB               	btfsc	??_printf_debug_MATRIX4x4+5,7
  2216  02E4  2B62               	goto	l3326
  2217  02E5  0823               	movf	printf_debug_MATRIX4x4@y,w
  2218  02E6  00A6               	movwf	??_printf_debug_MATRIX4x4
  2219  02E7  01A7               	clrf	??_printf_debug_MATRIX4x4+1
  2220  02E8  1BA6               	btfsc	??_printf_debug_MATRIX4x4,7
  2221  02E9  03A7               	decf	??_printf_debug_MATRIX4x4+1,f
  2222  02EA  09A6               	comf	??_printf_debug_MATRIX4x4,f
  2223  02EB  09A7               	comf	??_printf_debug_MATRIX4x4+1,f
  2224  02EC  0AA6               	incf	??_printf_debug_MATRIX4x4,f
  2225  02ED  1903               	skipnz
  2226  02EE  0AA7               	incf	??_printf_debug_MATRIX4x4+1,f
  2227  02EF  087C               	movf	printf_debug_MATRIX4x4@row,w
  2228  02F0  00A8               	movwf	??_printf_debug_MATRIX4x4+2
  2229  02F1  01A9               	clrf	??_printf_debug_MATRIX4x4+3
  2230  02F2  1BA8               	btfsc	??_printf_debug_MATRIX4x4+2,7
  2231  02F3  03A9               	decf	??_printf_debug_MATRIX4x4+3,f
  2232  02F4  0826               	movf	??_printf_debug_MATRIX4x4,w
  2233  02F5  0728               	addwf	??_printf_debug_MATRIX4x4+2,w
  2234  02F6  00AA               	movwf	??_printf_debug_MATRIX4x4+4
  2235  02F7  0827               	movf	??_printf_debug_MATRIX4x4+1,w
  2236  02F8  1803               	skipnc
  2237  02F9  0A27               	incf	??_printf_debug_MATRIX4x4+1,w
  2238  02FA  0729               	addwf	??_printf_debug_MATRIX4x4+3,w
  2239  02FB  00AB               	movwf	??_printf_debug_MATRIX4x4+5
  2240  02FC  082B               	movf	??_printf_debug_MATRIX4x4+5,w
  2241  02FD  3A80               	xorlw	128
  2242  02FE  00FF               	movwf	127
  2243  02FF  3080               	movlw	128
  2244  0300  027F               	subwf	127,w
  2245  0301  1D03               	skipz
  2246  0302  2B05               	goto	u3555
  2247  0303  3004               	movlw	4
  2248  0304  022A               	subwf	??_printf_debug_MATRIX4x4+4,w
  2249  0305                     u3555:	
  2250  0305  1803               	skipnc
  2251  0306  2B62               	goto	l3326
  2252  0307  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0308  1303               	bcf	3,6	;RP1=0, select bank0
  2254  0309  0822               	movf	printf_debug_MATRIX4x4@x,w
  2255  030A  00A6               	movwf	??_printf_debug_MATRIX4x4
  2256  030B  01A7               	clrf	??_printf_debug_MATRIX4x4+1
  2257  030C  1BA6               	btfsc	??_printf_debug_MATRIX4x4,7
  2258  030D  03A7               	decf	??_printf_debug_MATRIX4x4+1,f
  2259  030E  09A6               	comf	??_printf_debug_MATRIX4x4,f
  2260  030F  09A7               	comf	??_printf_debug_MATRIX4x4+1,f
  2261  0310  0AA6               	incf	??_printf_debug_MATRIX4x4,f
  2262  0311  1903               	skipnz
  2263  0312  0AA7               	incf	??_printf_debug_MATRIX4x4+1,f
  2264  0313  087D               	movf	printf_debug_MATRIX4x4@col,w
  2265  0314  00A8               	movwf	??_printf_debug_MATRIX4x4+2
  2266  0315  01A9               	clrf	??_printf_debug_MATRIX4x4+3
  2267  0316  1BA8               	btfsc	??_printf_debug_MATRIX4x4+2,7
  2268  0317  03A9               	decf	??_printf_debug_MATRIX4x4+3,f
  2269  0318  0826               	movf	??_printf_debug_MATRIX4x4,w
  2270  0319  0728               	addwf	??_printf_debug_MATRIX4x4+2,w
  2271  031A  00AA               	movwf	??_printf_debug_MATRIX4x4+4
  2272  031B  0827               	movf	??_printf_debug_MATRIX4x4+1,w
  2273  031C  1803               	skipnc
  2274  031D  0A27               	incf	??_printf_debug_MATRIX4x4+1,w
  2275  031E  0729               	addwf	??_printf_debug_MATRIX4x4+3,w
  2276  031F  00AB               	movwf	??_printf_debug_MATRIX4x4+5
  2277  0320  1BAB               	btfsc	??_printf_debug_MATRIX4x4+5,7
  2278  0321  2B62               	goto	l3326
  2279  0322  0822               	movf	printf_debug_MATRIX4x4@x,w
  2280  0323  00A6               	movwf	??_printf_debug_MATRIX4x4
  2281  0324  01A7               	clrf	??_printf_debug_MATRIX4x4+1
  2282  0325  1BA6               	btfsc	??_printf_debug_MATRIX4x4,7
  2283  0326  03A7               	decf	??_printf_debug_MATRIX4x4+1,f
  2284  0327  09A6               	comf	??_printf_debug_MATRIX4x4,f
  2285  0328  09A7               	comf	??_printf_debug_MATRIX4x4+1,f
  2286  0329  0AA6               	incf	??_printf_debug_MATRIX4x4,f
  2287  032A  1903               	skipnz
  2288  032B  0AA7               	incf	??_printf_debug_MATRIX4x4+1,f
  2289  032C  087D               	movf	printf_debug_MATRIX4x4@col,w
  2290  032D  00A8               	movwf	??_printf_debug_MATRIX4x4+2
  2291  032E  01A9               	clrf	??_printf_debug_MATRIX4x4+3
  2292  032F  1BA8               	btfsc	??_printf_debug_MATRIX4x4+2,7
  2293  0330  03A9               	decf	??_printf_debug_MATRIX4x4+3,f
  2294  0331  0826               	movf	??_printf_debug_MATRIX4x4,w
  2295  0332  0728               	addwf	??_printf_debug_MATRIX4x4+2,w
  2296  0333  00AA               	movwf	??_printf_debug_MATRIX4x4+4
  2297  0334  0827               	movf	??_printf_debug_MATRIX4x4+1,w
  2298  0335  1803               	skipnc
  2299  0336  0A27               	incf	??_printf_debug_MATRIX4x4+1,w
  2300  0337  0729               	addwf	??_printf_debug_MATRIX4x4+3,w
  2301  0338  00AB               	movwf	??_printf_debug_MATRIX4x4+5
  2302  0339  082B               	movf	??_printf_debug_MATRIX4x4+5,w
  2303  033A  3A80               	xorlw	128
  2304  033B  00FF               	movwf	127
  2305  033C  3080               	movlw	128
  2306  033D  027F               	subwf	127,w
  2307  033E  1D03               	skipz
  2308  033F  2B42               	goto	u3575
  2309  0340  3004               	movlw	4
  2310  0341  022A               	subwf	??_printf_debug_MATRIX4x4+4,w
  2311  0342                     u3575:	
  2312  0342  1803               	skipnc
  2313  0343  2B62               	goto	l3326
  2314  0344  1283               	bcf	3,5	;RP0=0, select bank0
  2315  0345  1303               	bcf	3,6	;RP1=0, select bank0
  2316  0346  0824               	movf	printf_debug_MATRIX4x4@matrix,w
  2317  0347  00F7               	movwf	get_matrix_bit@byte
  2318  0348  0825               	movf	printf_debug_MATRIX4x4@matrix+1,w
  2319  0349  00F8               	movwf	get_matrix_bit@byte+1
  2320  034A  0323               	decf	printf_debug_MATRIX4x4@y,w
  2321  034B  3AFF               	xorlw	255
  2322  034C  077C               	addwf	printf_debug_MATRIX4x4@row,w
  2323  034D  00A6               	movwf	??_printf_debug_MATRIX4x4
  2324  034E  0826               	movf	??_printf_debug_MATRIX4x4,w
  2325  034F  00F9               	movwf	get_matrix_bit@row
  2326  0350  0322               	decf	printf_debug_MATRIX4x4@x,w
  2327  0351  3AFF               	xorlw	255
  2328  0352  077D               	addwf	printf_debug_MATRIX4x4@col,w
  2329  0353  00A7               	movwf	??_printf_debug_MATRIX4x4+1
  2330  0354  0827               	movf	??_printf_debug_MATRIX4x4+1,w
  2331  0355  00FA               	movwf	get_matrix_bit@col
  2332  0356  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  2333  035B  3A01               	xorlw	1
  2334  035C  1D03               	skipz
  2335  035D  2B62               	goto	l3326
  2336                           
  2337                           ;teris_16f886.c: 491: {
  2338                           ;teris_16f886.c: 492: debug_str("*");
  2339  035E  3070               	movlw	low (STR_7| (0+32768))
  2340  035F  00F3               	movwf	debug_str@str
  2341  0360  3089               	movlw	high (STR_7| (0+32768))
  2342  0361  2B65               	goto	L1
  2343  0362                     l3326:	
  2344                           ;teris_16f886.c: 493: }
  2345                           
  2346                           
  2347                           ;teris_16f886.c: 494: else
  2348                           ;teris_16f886.c: 495: {
  2349                           ;teris_16f886.c: 496: debug_str("_");
  2350  0362  3074               	movlw	low (STR_8| (0+32768))
  2351  0363  00F3               	movwf	debug_str@str
  2352  0364  3089               	movlw	high (STR_8| (0+32768))
  2353  0365                     L1:	
  2354  0365  00F4               	movwf	debug_str@str+1
  2355  0366  160A  118A  271F  120A  118A  	fcall	_debug_str
  2356  036B  3001               	movlw	1
  2357  036C  1283               	bcf	3,5	;RP0=0, select bank0
  2358  036D  1303               	bcf	3,6	;RP1=0, select bank0
  2359  036E  00A6               	movwf	??_printf_debug_MATRIX4x4
  2360  036F  0826               	movf	??_printf_debug_MATRIX4x4,w
  2361  0370  07FD               	addwf	printf_debug_MATRIX4x4@col,f
  2362  0371  087D               	movf	printf_debug_MATRIX4x4@col,w
  2363  0372  3A80               	xorlw	128
  2364  0373  3E78               	addlw	-136
  2365  0374  1C03               	skipc
  2366  0375  2ACA               	goto	l3314
  2367  0376                     l3332:	
  2368                           
  2369                           ;teris_16f886.c: 497: }
  2370                           ;teris_16f886.c: 498: }
  2371                           ;teris_16f886.c: 499: debug_line("");
  2372  0376  306F               	movlw	low ((STR_1+2)| (0+32768))
  2373  0377  00F3               	movwf	debug_line@str
  2374  0378  3089               	movlw	high ((STR_1+2)| (0+32768))
  2375  0379  00F4               	movwf	debug_line@str+1
  2376  037A  160A  118A  277C  120A  118A  	fcall	_debug_line
  2377  037F  3001               	movlw	1
  2378  0380  1283               	bcf	3,5	;RP0=0, select bank0
  2379  0381  1303               	bcf	3,6	;RP1=0, select bank0
  2380  0382  00A6               	movwf	??_printf_debug_MATRIX4x4
  2381  0383  0826               	movf	??_printf_debug_MATRIX4x4,w
  2382  0384  07FC               	addwf	printf_debug_MATRIX4x4@row,f
  2383  0385  087C               	movf	printf_debug_MATRIX4x4@row,w
  2384  0386  3A80               	xorlw	128
  2385  0387  3E70               	addlw	-144
  2386  0388  1C03               	skipc
  2387  0389  2AC4               	goto	l3308
  2388  038A                     l3338:	
  2389                           
  2390                           ;teris_16f886.c: 500: }
  2391                           ;teris_16f886.c: 501: debug_line(">>>>>>>>>>>>>>>>>>>>");
  2392  038A  300F               	movlw	low (STR_10| (0+32768))
  2393  038B  00F3               	movwf	debug_line@str
  2394  038C  3089               	movlw	high (STR_10| (0+32768))
  2395  038D  00F4               	movwf	debug_line@str+1
  2396  038E  160A  118A  277C   	fcall	_debug_line
  2397  0391  0008               	return
  2398  0392                     __end_of_printf_debug_MATRIX4x4:	
  2399                           
  2400                           	psect	text3
  2401  0F8D                     __ptext3:	
  2402 ;; *************** function _printf_debug_MATRIX16x8 *****************
  2403 ;; Defined at:
  2404 ;;		line 613 in file "teris_16f886.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;  lable           2    0[BANK0 ] PTR const unsigned char 
  2407 ;;		 -> STR_23(12), ROM(8192), 
  2408 ;;  matrix          1    2[BANK0 ] PTR const struct .
  2409 ;;		 -> g_matrix16x8(16), 
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;  col             1    4[BANK0 ] unsigned char 
  2412 ;;  row             1    3[BANK0 ] unsigned char 
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  1    wreg      void 
  2415 ;; Registers used:
  2416 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2422 ;;      Params:         0       3       0       0       0
  2423 ;;      Locals:         0       2       0       0       0
  2424 ;;      Temps:          2       0       0       0       0
  2425 ;;      Totals:         2       5       0       0       0
  2426 ;;Total ram usage:        7 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; Hardware stack levels required when called:    3
  2429 ;; This function calls:
  2430 ;;		_debug_line
  2431 ;;		_debug_str
  2432 ;;		_get_matrix_bit
  2433 ;; This function is called by:
  2434 ;;		_main
  2435 ;;		_printf_debug_Screen
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           
  2440                           ;psect for function _printf_debug_MATRIX16x8
  2441  0F8D                     _printf_debug_MATRIX16x8:	
  2442                           
  2443                           ;teris_16f886.c: 615: if(lable != (0))
  2444                           
  2445                           ;incstack = 0
  2446                           ; Regs used in _printf_debug_MATRIX16x8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  2447  0F8D  1283               	bcf	3,5	;RP0=0, select bank0
  2448  0F8E  1303               	bcf	3,6	;RP1=0, select bank0
  2449  0F8F  0820               	movf	printf_debug_MATRIX16x8@lable,w
  2450  0F90  0421               	iorwf	printf_debug_MATRIX16x8@lable+1,w
  2451  0F91  1903               	btfsc	3,2
  2452  0F92  2FA5               	goto	l257
  2453                           
  2454                           ;teris_16f886.c: 616: {
  2455                           ;teris_16f886.c: 617: debug_str(lable);
  2456  0F93  0820               	movf	printf_debug_MATRIX16x8@lable,w
  2457  0F94  00F3               	movwf	debug_str@str
  2458  0F95  0821               	movf	printf_debug_MATRIX16x8@lable+1,w
  2459  0F96  00F4               	movwf	debug_str@str+1
  2460  0F97  160A  118A  271F  120A  158A  	fcall	_debug_str
  2461                           
  2462                           ;teris_16f886.c: 618: debug_line(":");
  2463  0F9C  3072               	movlw	low (STR_5| (0+32768))
  2464  0F9D  00F3               	movwf	debug_line@str
  2465  0F9E  3089               	movlw	high (STR_5| (0+32768))
  2466  0F9F  00F4               	movwf	debug_line@str+1
  2467  0FA0  160A  118A  277C  120A  158A  	fcall	_debug_line
  2468  0FA5                     l257:	
  2469                           
  2470                           ;teris_16f886.c: 619: }
  2471                           ;teris_16f886.c: 620: debug_line("<<<<<<<<<<<<<<<<<<<<MATRIX16x8");
  2472  0FA5  30A2               	movlw	low (STR_16| (0+32768))
  2473  0FA6  00F3               	movwf	debug_line@str
  2474  0FA7  3088               	movlw	high (STR_16| (0+32768))
  2475  0FA8  00F4               	movwf	debug_line@str+1
  2476  0FA9  160A  118A  277C  120A  158A  	fcall	_debug_line
  2477                           
  2478                           ;teris_16f886.c: 621: for(uint8_t row = 0; row < 16; row++)
  2479  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  2480  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  2481  0FB0  01A3               	clrf	printf_debug_MATRIX16x8@row
  2482  0FB1  3010               	movlw	16
  2483  0FB2  0223               	subwf	printf_debug_MATRIX16x8@row,w
  2484  0FB3  1803               	btfsc	3,0
  2485  0FB4  2FF8               	goto	l3378
  2486  0FB5                     l3356:	
  2487                           
  2488                           ;teris_16f886.c: 622: {
  2489                           ;teris_16f886.c: 623: for(uint8_t col = 0; col < 8; col++)
  2490  0FB5  01A4               	clrf	printf_debug_MATRIX16x8@col
  2491  0FB6  3008               	movlw	8
  2492  0FB7  0224               	subwf	printf_debug_MATRIX16x8@col,w
  2493  0FB8  1803               	btfsc	3,0
  2494  0FB9  2FE5               	goto	l3372
  2495  0FBA                     l3362:	
  2496                           
  2497                           ;teris_16f886.c: 624: {
  2498                           ;teris_16f886.c: 625: if(get_matrix_bit(matrix->row, row, col) == 1)
  2499  0FBA  0822               	movf	printf_debug_MATRIX16x8@matrix,w
  2500  0FBB  00F7               	movwf	get_matrix_bit@byte
  2501  0FBC  3000               	movlw	0
  2502  0FBD  00F8               	movwf	get_matrix_bit@byte+1
  2503  0FBE  0823               	movf	printf_debug_MATRIX16x8@row,w
  2504  0FBF  00FC               	movwf	??_printf_debug_MATRIX16x8
  2505  0FC0  087C               	movf	??_printf_debug_MATRIX16x8,w
  2506  0FC1  00F9               	movwf	get_matrix_bit@row
  2507  0FC2  0824               	movf	printf_debug_MATRIX16x8@col,w
  2508  0FC3  00FD               	movwf	??_printf_debug_MATRIX16x8+1
  2509  0FC4  087D               	movf	??_printf_debug_MATRIX16x8+1,w
  2510  0FC5  00FA               	movwf	get_matrix_bit@col
  2511  0FC6  160A  118A  273D  120A  158A  	fcall	_get_matrix_bit
  2512  0FCB  3A01               	xorlw	1
  2513  0FCC  1D03               	skipz
  2514  0FCD  2FD2               	goto	l3366
  2515                           
  2516                           ;teris_16f886.c: 626: {
  2517                           ;teris_16f886.c: 627: debug_str("*");
  2518  0FCE  3070               	movlw	low (STR_7| (0+32768))
  2519  0FCF  00F3               	movwf	debug_str@str
  2520  0FD0  3089               	movlw	high (STR_7| (0+32768))
  2521  0FD1  2FD5               	goto	L2
  2522  0FD2                     l3366:	
  2523                           ;teris_16f886.c: 628: }
  2524                           
  2525                           
  2526                           ;teris_16f886.c: 629: else
  2527                           ;teris_16f886.c: 630: {
  2528                           ;teris_16f886.c: 631: debug_str("_");
  2529  0FD2  3074               	movlw	low (STR_8| (0+32768))
  2530  0FD3  00F3               	movwf	debug_str@str
  2531  0FD4  3089               	movlw	high (STR_8| (0+32768))
  2532  0FD5                     L2:	
  2533  0FD5  00F4               	movwf	debug_str@str+1
  2534  0FD6  160A  118A  271F  120A  158A  	fcall	_debug_str
  2535  0FDB  3001               	movlw	1
  2536  0FDC  00FC               	movwf	??_printf_debug_MATRIX16x8
  2537  0FDD  087C               	movf	??_printf_debug_MATRIX16x8,w
  2538  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  2539  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  2540  0FE0  07A4               	addwf	printf_debug_MATRIX16x8@col,f
  2541  0FE1  3008               	movlw	8
  2542  0FE2  0224               	subwf	printf_debug_MATRIX16x8@col,w
  2543  0FE3  1C03               	skipc
  2544  0FE4  2FBA               	goto	l3362
  2545  0FE5                     l3372:	
  2546                           
  2547                           ;teris_16f886.c: 632: }
  2548                           ;teris_16f886.c: 633: }
  2549                           ;teris_16f886.c: 634: debug_line("");
  2550  0FE5  306F               	movlw	low ((STR_1+2)| (0+32768))
  2551  0FE6  00F3               	movwf	debug_line@str
  2552  0FE7  3089               	movlw	high ((STR_1+2)| (0+32768))
  2553  0FE8  00F4               	movwf	debug_line@str+1
  2554  0FE9  160A  118A  277C  120A  158A  	fcall	_debug_line
  2555  0FEE  3001               	movlw	1
  2556  0FEF  00FC               	movwf	??_printf_debug_MATRIX16x8
  2557  0FF0  087C               	movf	??_printf_debug_MATRIX16x8,w
  2558  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  2559  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  2560  0FF3  07A3               	addwf	printf_debug_MATRIX16x8@row,f
  2561  0FF4  3010               	movlw	16
  2562  0FF5  0223               	subwf	printf_debug_MATRIX16x8@row,w
  2563  0FF6  1C03               	skipc
  2564  0FF7  2FB5               	goto	l3356
  2565  0FF8                     l3378:	
  2566                           
  2567                           ;teris_16f886.c: 635: }
  2568                           ;teris_16f886.c: 636: debug_line(">>>>>>>>>>>>>>>>>>>>");
  2569  0FF8  300F               	movlw	low (STR_10| (0+32768))
  2570  0FF9  00F3               	movwf	debug_line@str
  2571  0FFA  3089               	movlw	high (STR_10| (0+32768))
  2572  0FFB  00F4               	movwf	debug_line@str+1
  2573  0FFC  160A  118A  277C   	fcall	_debug_line
  2574  0FFF  0008               	return
  2575  1000                     __end_of_printf_debug_MATRIX16x8:	
  2576                           
  2577                           	psect	text4
  2578  171F                     __ptext4:	
  2579 ;; *************** function _debug_str *****************
  2580 ;; Defined at:
  2581 ;;		line 338 in file "teris_16f886.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;  str             2    3[COMMON] PTR const unsigned char 
  2584 ;;		 -> STR_23(12), STR_22(17), STR_18(2), STR_17(2), 
  2585 ;;		 -> STR_8(2), STR_7(2), ROM(8192), 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;		None
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      void 
  2590 ;; Registers used:
  2591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2597 ;;      Params:         2       0       0       0       0
  2598 ;;      Locals:         0       0       0       0       0
  2599 ;;      Temps:          0       0       0       0       0
  2600 ;;      Totals:         2       0       0       0       0
  2601 ;;Total ram usage:        2 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:    2
  2604 ;; This function calls:
  2605 ;;		_USARTWriteString
  2606 ;; This function is called by:
  2607 ;;		_printf_debug_MATRIX4x4
  2608 ;;		_printf_debug_MATRIX16x8
  2609 ;;		_printf_debug_cur_MATRIX4x4
  2610 ;;		_printf_debug_Screen
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           
  2615                           ;psect for function _debug_str
  2616  171F                     _debug_str:	
  2617                           
  2618                           ;teris_16f886.c: 344: USARTWriteString(str);
  2619                           
  2620                           ;incstack = 0
  2621                           ; Regs used in _debug_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2622  171F  0873               	movf	debug_str@str,w
  2623  1720  00F1               	movwf	USARTWriteString@str
  2624  1721  0874               	movf	debug_str@str+1,w
  2625  1722  00F2               	movwf	USARTWriteString@str+1
  2626  1723  120A  158A  2229   	fcall	_USARTWriteString
  2627  1726  0008               	return
  2628  1727                     __end_of_debug_str:	
  2629                           
  2630                           	psect	text5
  2631  177C                     __ptext5:	
  2632 ;; *************** function _debug_line *****************
  2633 ;; Defined at:
  2634 ;;		line 348 in file "teris_16f886.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;  str             2    3[COMMON] PTR const unsigned char 
  2637 ;;		 -> STR_21(2), STR_20(21), STR_19(1), STR_16(31), 
  2638 ;;		 -> STR_15(2), STR_12(21), STR_11(2), STR_10(21), 
  2639 ;;		 -> STR_9(1), STR_6(30), STR_5(2), 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;		None
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      void 
  2644 ;; Registers used:
  2645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2651 ;;      Params:         2       0       0       0       0
  2652 ;;      Locals:         0       0       0       0       0
  2653 ;;      Temps:          0       0       0       0       0
  2654 ;;      Totals:         2       0       0       0       0
  2655 ;;Total ram usage:        2 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    2
  2658 ;; This function calls:
  2659 ;;		_USARTWriteString
  2660 ;; This function is called by:
  2661 ;;		_printf_debug_MATRIX4x4
  2662 ;;		_printf_debug_MATRIX16x8
  2663 ;;		_printf_debug_cur_MATRIX4x4
  2664 ;;		_printf_debug_all_MATRIX4x4
  2665 ;;		_printf_debug_Screen
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           
  2670                           ;psect for function _debug_line
  2671  177C                     _debug_line:	
  2672                           
  2673                           ;teris_16f886.c: 355: USARTWriteString(str);
  2674                           
  2675                           ;incstack = 0
  2676                           ; Regs used in _debug_line: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2677  177C  0873               	movf	debug_line@str,w
  2678  177D  00F1               	movwf	USARTWriteString@str
  2679  177E  0874               	movf	debug_line@str+1,w
  2680  177F  00F2               	movwf	USARTWriteString@str+1
  2681  1780  120A  158A  2229  160A  118A  	fcall	_USARTWriteString
  2682                           
  2683                           ;teris_16f886.c: 356: USARTWriteString("\r\n");
  2684  1785  306D               	movlw	low (STR_1| (0+32768))
  2685  1786  00F1               	movwf	USARTWriteString@str
  2686  1787  3089               	movlw	high (STR_1| (0+32768))
  2687  1788  00F2               	movwf	USARTWriteString@str+1
  2688  1789  120A  158A  2229   	fcall	_USARTWriteString
  2689  178C  0008               	return
  2690  178D                     __end_of_debug_line:	
  2691                           
  2692                           	psect	text6
  2693  0A29                     __ptext6:	
  2694 ;; *************** function _USARTWriteString *****************
  2695 ;; Defined at:
  2696 ;;		line 76 in file "usart_pic16.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;  str             2    1[COMMON] PTR const unsigned char 
  2699 ;;		 -> STR_23(12), STR_22(17), STR_21(2), STR_20(21), 
  2700 ;;		 -> STR_19(1), STR_18(2), STR_17(2), STR_16(31), 
  2701 ;;		 -> STR_15(2), STR_12(21), STR_11(2), STR_10(21), 
  2702 ;;		 -> STR_9(1), STR_8(2), STR_7(2), STR_6(30), 
  2703 ;;		 -> STR_5(2), ROM(8192), STR_4(3), STR_3(3), 
  2704 ;;		 -> STR_2(3), g_debug(32), STR_1(3), 
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;		None
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  1    wreg      void 
  2709 ;; Registers used:
  2710 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2716 ;;      Params:         2       0       0       0       0
  2717 ;;      Locals:         0       0       0       0       0
  2718 ;;      Temps:          0       0       0       0       0
  2719 ;;      Totals:         2       0       0       0       0
  2720 ;;Total ram usage:        2 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    1
  2723 ;; This function calls:
  2724 ;;		_USARTWriteChar
  2725 ;; This function is called by:
  2726 ;;		_debug_str
  2727 ;;		_debug_line
  2728 ;;		_USARTWriteLine
  2729 ;;		_debug_int1
  2730 ;;		_debug_int2
  2731 ;;		_debug_int3
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           
  2736                           ;psect for function _USARTWriteString
  2737  0A29                     _USARTWriteString:	
  2738  0A29                     l2656:	
  2739                           ;usart_pic16.c: 77: while (*str != '\0') {
  2740                           
  2741                           ;incstack = 0
  2742                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2743                           
  2744  0A29  0872               	movf	USARTWriteString@str+1,w
  2745  0A2A  1283               	bcf	3,5	;RP0=0, select bank0
  2746  0A2B  1303               	bcf	3,6	;RP1=0, select bank0
  2747  0A2C  00FF               	movwf	127
  2748  0A2D  0871               	movf	USARTWriteString@str,w
  2749  0A2E  0084               	movwf	4
  2750  0A2F  120A  158A  2000  120A  158A  	fcall	stringtab
  2751  0A34  3A00               	xorlw	0
  2752  0A35  1903               	btfsc	3,2
  2753  0A36  0008               	return
  2754                           
  2755                           ;usart_pic16.c: 78: USARTWriteChar(*str);
  2756  0A37  0872               	movf	USARTWriteString@str+1,w
  2757  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  2758  0A39  1303               	bcf	3,6	;RP1=0, select bank0
  2759  0A3A  00FF               	movwf	127
  2760  0A3B  0871               	movf	USARTWriteString@str,w
  2761  0A3C  0084               	movwf	4
  2762  0A3D  120A  158A  2000  120A  158A  	fcall	stringtab
  2763  0A42  160A  118A  2717  120A  158A  	fcall	_USARTWriteChar
  2764                           
  2765                           ;usart_pic16.c: 79: str++;
  2766  0A47  3001               	movlw	1
  2767  0A48  07F1               	addwf	USARTWriteString@str,f
  2768  0A49  1803               	skipnc
  2769  0A4A  0AF2               	incf	USARTWriteString@str+1,f
  2770  0A4B  3000               	movlw	0
  2771  0A4C  07F2               	addwf	USARTWriteString@str+1,f
  2772  0A4D  2A29               	goto	l2656
  2773  0A4E                     __end_of_USARTWriteString:	
  2774                           
  2775                           	psect	text7
  2776  1717                     __ptext7:	
  2777 ;; *************** function _USARTWriteChar *****************
  2778 ;; Defined at:
  2779 ;;		line 70 in file "usart_pic16.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  ch              1    wreg     unsigned char 
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;  ch              1    0[COMMON] unsigned char 
  2784 ;; Return value:  Size  Location     Type
  2785 ;;                  1    wreg      void 
  2786 ;; Registers used:
  2787 ;;		wreg
  2788 ;; Tracked objects:
  2789 ;;		On entry : 0/0
  2790 ;;		On exit  : 0/0
  2791 ;;		Unchanged: 0/0
  2792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2793 ;;      Params:         0       0       0       0       0
  2794 ;;      Locals:         1       0       0       0       0
  2795 ;;      Temps:          0       0       0       0       0
  2796 ;;      Totals:         1       0       0       0       0
  2797 ;;Total ram usage:        1 bytes
  2798 ;; Hardware stack levels used:    1
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_USARTWriteString
  2803 ;;		_USARTWriteLine
  2804 ;;		_USARTWriteInt
  2805 ;;		_USARTGotoNewLine
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           
  2810                           ;psect for function _USARTWriteChar
  2811  1717                     _USARTWriteChar:	
  2812                           
  2813                           ;incstack = 0
  2814                           ; Regs used in _USARTWriteChar: [wreg]
  2815                           ;USARTWriteChar@ch stored from wreg
  2816  1717  00F0               	movwf	USARTWriteChar@ch
  2817  1718                     l36:	
  2818                           ;usart_pic16.c: 71: while (!PIR1bits.TXIF);
  2819                           
  2820  1718  1283               	bcf	3,5	;RP0=0, select bank0
  2821  1719  1303               	bcf	3,6	;RP1=0, select bank0
  2822  171A  1E0C               	btfss	12,4	;volatile
  2823  171B  2F18               	goto	l36
  2824                           
  2825                           ;usart_pic16.c: 73: TXREG = ch;
  2826  171C  0870               	movf	USARTWriteChar@ch,w
  2827  171D  0099               	movwf	25	;volatile
  2828  171E  0008               	return
  2829  171F                     __end_of_USARTWriteChar:	
  2830                           
  2831                           	psect	text8
  2832  0BEA                     __ptext8:	
  2833 ;; *************** function _merge *****************
  2834 ;; Defined at:
  2835 ;;		line 998 in file "teris_16f886.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;  x               1    wreg     char 
  2838 ;;  y               1    0[BANK0 ] char 
  2839 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  2840 ;;		 -> NULL(0), g_matrix4x4(96), 
  2841 ;;  matrix16x8      1    3[BANK0 ] PTR struct .
  2842 ;;		 -> g_matrix16x8(16), 
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;  x               1    4[BANK0 ] char 
  2845 ;;  col             1    6[BANK0 ] unsigned char 
  2846 ;;  row             1    5[BANK0 ] unsigned char 
  2847 ;; Return value:  Size  Location     Type
  2848 ;;                  1    wreg      void 
  2849 ;; Registers used:
  2850 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2851 ;; Tracked objects:
  2852 ;;		On entry : 0/0
  2853 ;;		On exit  : 0/0
  2854 ;;		Unchanged: 0/0
  2855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2856 ;;      Params:         0       4       0       0       0
  2857 ;;      Locals:         0       3       0       0       0
  2858 ;;      Temps:          2       0       0       0       0
  2859 ;;      Totals:         2       7       0       0       0
  2860 ;;Total ram usage:        9 bytes
  2861 ;; Hardware stack levels used:    1
  2862 ;; Hardware stack levels required when called:    3
  2863 ;; This function calls:
  2864 ;;		_get_matrix_bit
  2865 ;;		_set_matrix_bit
  2866 ;; This function is called by:
  2867 ;;		_main
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           
  2872                           ;psect for function _merge
  2873  0BEA                     _merge:	
  2874                           
  2875                           ;incstack = 0
  2876                           ; Regs used in _merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2877                           ;merge@x stored from wreg
  2878  0BEA  1283               	bcf	3,5	;RP0=0, select bank0
  2879  0BEB  1303               	bcf	3,6	;RP1=0, select bank0
  2880  0BEC  00A4               	movwf	merge@x
  2881                           
  2882                           ;teris_16f886.c: 1005: for(uint8_t row = 0; row < 4; row++)
  2883  0BED  01A5               	clrf	merge@row
  2884  0BEE                     L3:	
  2885  0BEE  3004               	movlw	4
  2886  0BEF  0225               	subwf	merge@row,w
  2887  0BF0  1803               	btfsc	3,0
  2888  0BF1  0008               	return
  2889                           
  2890                           ;teris_16f886.c: 1006: {
  2891                           ;teris_16f886.c: 1007: for(uint8_t col = 0; col < 4; col++)
  2892  0BF2  01A6               	clrf	merge@col
  2893  0BF3  3004               	movlw	4
  2894  0BF4  0226               	subwf	merge@col,w
  2895  0BF5  1803               	btfsc	3,0
  2896  0BF6  2C29               	goto	l3480
  2897  0BF7                     l3472:	
  2898                           
  2899                           ;teris_16f886.c: 1008: {
  2900                           ;teris_16f886.c: 1009: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  2901  0BF7  0821               	movf	merge@matrix4x4,w
  2902  0BF8  00F7               	movwf	get_matrix_bit@byte
  2903  0BF9  0822               	movf	merge@matrix4x4+1,w
  2904  0BFA  00F8               	movwf	get_matrix_bit@byte+1
  2905  0BFB  0825               	movf	merge@row,w
  2906  0BFC  00FC               	movwf	??_merge
  2907  0BFD  087C               	movf	??_merge,w
  2908  0BFE  00F9               	movwf	get_matrix_bit@row
  2909  0BFF  0826               	movf	merge@col,w
  2910  0C00  00FD               	movwf	??_merge+1
  2911  0C01  087D               	movf	??_merge+1,w
  2912  0C02  00FA               	movwf	get_matrix_bit@col
  2913  0C03  160A  118A  273D  120A  158A  	fcall	_get_matrix_bit
  2914  0C08  3A01               	xorlw	1
  2915  0C09  1D03               	skipz
  2916  0C0A  2C1F               	goto	l3476
  2917                           
  2918                           ;teris_16f886.c: 1010: {
  2919                           ;teris_16f886.c: 1011: set_matrix_bit(matrix16x8->row, y + row, x + col, 1);
  2920  0C0B  1283               	bcf	3,5	;RP0=0, select bank0
  2921  0C0C  1303               	bcf	3,6	;RP1=0, select bank0
  2922  0C0D  0825               	movf	merge@row,w
  2923  0C0E  0720               	addwf	merge@y,w
  2924  0C0F  00FC               	movwf	??_merge
  2925  0C10  087C               	movf	??_merge,w
  2926  0C11  00F5               	movwf	set_matrix_bit@row
  2927  0C12  0826               	movf	merge@col,w
  2928  0C13  0724               	addwf	merge@x,w
  2929  0C14  00FD               	movwf	??_merge+1
  2930  0C15  087D               	movf	??_merge+1,w
  2931  0C16  00F6               	movwf	set_matrix_bit@col
  2932  0C17  01F7               	clrf	set_matrix_bit@value
  2933  0C18  0AF7               	incf	set_matrix_bit@value,f
  2934  0C19  0823               	movf	merge@matrix16x8,w
  2935  0C1A  160A  118A  274C  120A  158A  	fcall	_set_matrix_bit
  2936  0C1F                     l3476:	
  2937  0C1F  3001               	movlw	1
  2938  0C20  00FC               	movwf	??_merge
  2939  0C21  087C               	movf	??_merge,w
  2940  0C22  1283               	bcf	3,5	;RP0=0, select bank0
  2941  0C23  1303               	bcf	3,6	;RP1=0, select bank0
  2942  0C24  07A6               	addwf	merge@col,f
  2943  0C25  3004               	movlw	4
  2944  0C26  0226               	subwf	merge@col,w
  2945  0C27  1C03               	skipc
  2946  0C28  2BF7               	goto	l3472
  2947  0C29                     l3480:	
  2948  0C29  3001               	movlw	1
  2949  0C2A  00FC               	movwf	??_merge
  2950  0C2B  087C               	movf	??_merge,w
  2951  0C2C  07A5               	addwf	merge@row,f
  2952  0C2D  2BEE               	goto	L3
  2953  0C2E                     __end_of_merge:	
  2954                           
  2955                           	psect	text9
  2956  0CBC                     __ptext9:	
  2957 ;; *************** function _max7219_init1 *****************
  2958 ;; Defined at:
  2959 ;;		line 573 in file "teris_16f886.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;		None
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;		None
  2964 ;; Return value:  Size  Location     Type
  2965 ;;                  1    wreg      void 
  2966 ;; Registers used:
  2967 ;;		wreg, status,2, status,0, pclath, cstack
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2973 ;;      Params:         0       0       0       0       0
  2974 ;;      Locals:         0       0       0       0       0
  2975 ;;      Temps:          3       0       0       0       0
  2976 ;;      Totals:         3       0       0       0       0
  2977 ;;Total ram usage:        3 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    2
  2980 ;; This function calls:
  2981 ;;		_Write_Word
  2982 ;; This function is called by:
  2983 ;;		_main
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           
  2988                           ;psect for function _max7219_init1
  2989  0CBC                     _max7219_init1:	
  2990                           
  2991                           ;teris_16f886.c: 575: Write_Word(0x09, 0x00, 0x09, 0x00);
  2992                           
  2993                           ;incstack = 0
  2994                           ; Regs used in _max7219_init1: [wreg+status,2+status,0+pclath+cstack]
  2995  0CBC  01F4               	clrf	Write_Word@myValue1
  2996  0CBD  3009               	movlw	9
  2997  0CBE  00F8               	movwf	??_max7219_init1
  2998  0CBF  0878               	movf	??_max7219_init1,w
  2999  0CC0  00F5               	movwf	Write_Word@myColumn2
  3000  0CC1  01F6               	clrf	Write_Word@myValue2
  3001  0CC2  3009               	movlw	9
  3002  0CC3  120A  158A  2182  120A  158A  	fcall	_Write_Word
  3003                           
  3004                           ;teris_16f886.c: 576: Write_Word(0x0A, 0x0F, 0x0A, 0x0F);
  3005  0CC8  300F               	movlw	15
  3006  0CC9  00F8               	movwf	??_max7219_init1
  3007  0CCA  0878               	movf	??_max7219_init1,w
  3008  0CCB  00F4               	movwf	Write_Word@myValue1
  3009  0CCC  300A               	movlw	10
  3010  0CCD  00F9               	movwf	??_max7219_init1+1
  3011  0CCE  0879               	movf	??_max7219_init1+1,w
  3012  0CCF  00F5               	movwf	Write_Word@myColumn2
  3013  0CD0  300F               	movlw	15
  3014  0CD1  00FA               	movwf	??_max7219_init1+2
  3015  0CD2  087A               	movf	??_max7219_init1+2,w
  3016  0CD3  00F6               	movwf	Write_Word@myValue2
  3017  0CD4  300A               	movlw	10
  3018  0CD5  120A  158A  2182  120A  158A  	fcall	_Write_Word
  3019                           
  3020                           ;teris_16f886.c: 577: Write_Word(0x0B, 0x07, 0x0B, 0x07);
  3021  0CDA  3007               	movlw	7
  3022  0CDB  00F8               	movwf	??_max7219_init1
  3023  0CDC  0878               	movf	??_max7219_init1,w
  3024  0CDD  00F4               	movwf	Write_Word@myValue1
  3025  0CDE  300B               	movlw	11
  3026  0CDF  00F9               	movwf	??_max7219_init1+1
  3027  0CE0  0879               	movf	??_max7219_init1+1,w
  3028  0CE1  00F5               	movwf	Write_Word@myColumn2
  3029  0CE2  3007               	movlw	7
  3030  0CE3  00FA               	movwf	??_max7219_init1+2
  3031  0CE4  087A               	movf	??_max7219_init1+2,w
  3032  0CE5  00F6               	movwf	Write_Word@myValue2
  3033  0CE6  300B               	movlw	11
  3034  0CE7  120A  158A  2182  120A  158A  	fcall	_Write_Word
  3035                           
  3036                           ;teris_16f886.c: 578: Write_Word(0x0C, 0x01, 0x0C, 0x01);
  3037  0CEC  01F4               	clrf	Write_Word@myValue1
  3038  0CED  0AF4               	incf	Write_Word@myValue1,f
  3039  0CEE  300C               	movlw	12
  3040  0CEF  00F8               	movwf	??_max7219_init1
  3041  0CF0  0878               	movf	??_max7219_init1,w
  3042  0CF1  00F5               	movwf	Write_Word@myColumn2
  3043  0CF2  01F6               	clrf	Write_Word@myValue2
  3044  0CF3  0AF6               	incf	Write_Word@myValue2,f
  3045  0CF4  300C               	movlw	12
  3046  0CF5  120A  158A  2182  120A  158A  	fcall	_Write_Word
  3047                           
  3048                           ;teris_16f886.c: 579: Write_Word(0x00, 0xFF, 0x00, 0xFF);
  3049  0CFA  30FF               	movlw	255
  3050  0CFB  00F8               	movwf	??_max7219_init1
  3051  0CFC  0878               	movf	??_max7219_init1,w
  3052  0CFD  00F4               	movwf	Write_Word@myValue1
  3053  0CFE  01F5               	clrf	Write_Word@myColumn2
  3054  0CFF  30FF               	movlw	255
  3055  0D00  00F9               	movwf	??_max7219_init1+1
  3056  0D01  0879               	movf	??_max7219_init1+1,w
  3057  0D02  00F6               	movwf	Write_Word@myValue2
  3058  0D03  3000               	movlw	0
  3059  0D04  120A  158A  2182   	fcall	_Write_Word
  3060  0D07  0008               	return
  3061  0D08                     __end_of_max7219_init1:	
  3062                           
  3063                           	psect	text10
  3064  0EB2                     __ptext10:	
  3065 ;; *************** function _hit_land *****************
  3066 ;; Defined at:
  3067 ;;		line 834 in file "teris_16f886.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;  x               1    wreg     char 
  3070 ;;  y               1    0[BANK0 ] char 
  3071 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  3072 ;;		 -> NULL(0), g_matrix4x4(96), 
  3073 ;;  matrix16x8      1    3[BANK0 ] PTR const struct .
  3074 ;;		 -> g_matrix16x8(16), 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;  x               1    4[BANK0 ] char 
  3077 ;;  col             1    5[BANK0 ] char 
  3078 ;;  row             1    6[BANK0 ] char 
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  1    wreg      unsigned char 
  3081 ;; Registers used:
  3082 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3088 ;;      Params:         0       4       0       0       0
  3089 ;;      Locals:         0       3       0       0       0
  3090 ;;      Temps:          2       0       0       0       0
  3091 ;;      Totals:         2       7       0       0       0
  3092 ;;Total ram usage:        9 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:    3
  3095 ;; This function calls:
  3096 ;;		_get_matrix_bit
  3097 ;; This function is called by:
  3098 ;;		_main
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           
  3103                           ;psect for function _hit_land
  3104  0EB2                     _hit_land:	
  3105                           
  3106                           ;incstack = 0
  3107                           ; Regs used in _hit_land: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3108                           ;hit_land@x stored from wreg
  3109  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  3110  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
  3111  0EB4  00A4               	movwf	hit_land@x
  3112                           
  3113                           ;teris_16f886.c: 840: for(int8_t row = 4 - 1; row >= 0; row--)
  3114  0EB5  3003               	movlw	3
  3115  0EB6  00FC               	movwf	??_hit_land
  3116  0EB7  087C               	movf	??_hit_land,w
  3117  0EB8  00A6               	movwf	hit_land@row
  3118  0EB9  1BA6               	btfsc	hit_land@row,7
  3119  0EBA  2F1A               	goto	l3432
  3120  0EBB                     l3404:	
  3121                           
  3122                           ;teris_16f886.c: 841: {
  3123                           ;teris_16f886.c: 842: for(int8_t col = 0; col < 4; col++)
  3124  0EBB  01A5               	clrf	hit_land@col
  3125  0EBC  0825               	movf	hit_land@col,w
  3126  0EBD  3A80               	xorlw	128
  3127  0EBE  3E7C               	addlw	-132
  3128  0EBF  1803               	btfsc	3,0
  3129  0EC0  2F14               	goto	l3428
  3130  0EC1                     l3410:	
  3131                           
  3132                           ;teris_16f886.c: 843: {
  3133                           ;teris_16f886.c: 844: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  3134  0EC1  0821               	movf	hit_land@matrix4x4,w
  3135  0EC2  00F7               	movwf	get_matrix_bit@byte
  3136  0EC3  0822               	movf	hit_land@matrix4x4+1,w
  3137  0EC4  00F8               	movwf	get_matrix_bit@byte+1
  3138  0EC5  0826               	movf	hit_land@row,w
  3139  0EC6  00FC               	movwf	??_hit_land
  3140  0EC7  087C               	movf	??_hit_land,w
  3141  0EC8  00F9               	movwf	get_matrix_bit@row
  3142  0EC9  0825               	movf	hit_land@col,w
  3143  0ECA  00FD               	movwf	??_hit_land+1
  3144  0ECB  087D               	movf	??_hit_land+1,w
  3145  0ECC  00FA               	movwf	get_matrix_bit@col
  3146  0ECD  160A  118A  273D  120A  158A  	fcall	_get_matrix_bit
  3147  0ED2  3A01               	xorlw	1
  3148  0ED3  1D03               	skipz
  3149  0ED4  2F09               	goto	l3424
  3150                           
  3151                           ;teris_16f886.c: 845: {
  3152                           ;teris_16f886.c: 846: if((y + row) >= (16 - 1))
  3153  0ED5  1283               	bcf	3,5	;RP0=0, select bank0
  3154  0ED6  1303               	bcf	3,6	;RP1=0, select bank0
  3155  0ED7  0820               	movf	hit_land@y,w
  3156  0ED8  0726               	addwf	hit_land@row,w
  3157  0ED9  00FC               	movwf	??_hit_land
  3158  0EDA  01FD               	clrf	??_hit_land+1
  3159  0EDB  1803               	skipnc
  3160  0EDC  0AFD               	incf	??_hit_land+1,f
  3161  0EDD  1BA0               	btfsc	hit_land@y,7
  3162  0EDE  03FD               	decf	??_hit_land+1,f
  3163  0EDF  1BA6               	btfsc	hit_land@row,7
  3164  0EE0  03FD               	decf	??_hit_land+1,f
  3165  0EE1  087D               	movf	??_hit_land+1,w
  3166  0EE2  3A80               	xorlw	128
  3167  0EE3  00FF               	movwf	127
  3168  0EE4  3080               	movlw	128
  3169  0EE5  027F               	subwf	127,w
  3170  0EE6  1D03               	skipz
  3171  0EE7  2EEA               	goto	u3745
  3172  0EE8  300F               	movlw	15
  3173  0EE9  027C               	subwf	??_hit_land,w
  3174  0EEA                     u3745:	
  3175  0EEA  1C03               	skipc
  3176  0EEB  2EEE               	goto	l3418
  3177                           
  3178                           ;teris_16f886.c: 847: {
  3179                           ;teris_16f886.c: 851: return 1;
  3180  0EEC  3001               	movlw	1
  3181  0EED  0008               	return
  3182  0EEE                     l3418:	
  3183                           
  3184                           ;teris_16f886.c: 852: }
  3185                           ;teris_16f886.c: 854: if(get_matrix_bit(matrix16x8->row, y + row + 1, x + col) == 1)
  3186  0EEE  1283               	bcf	3,5	;RP0=0, select bank0
  3187  0EEF  1303               	bcf	3,6	;RP1=0, select bank0
  3188  0EF0  0823               	movf	hit_land@matrix16x8,w
  3189  0EF1  00F7               	movwf	get_matrix_bit@byte
  3190  0EF2  3000               	movlw	0
  3191  0EF3  00F8               	movwf	get_matrix_bit@byte+1
  3192  0EF4  0826               	movf	hit_land@row,w
  3193  0EF5  0720               	addwf	hit_land@y,w
  3194  0EF6  3E01               	addlw	1
  3195  0EF7  00FC               	movwf	??_hit_land
  3196  0EF8  087C               	movf	??_hit_land,w
  3197  0EF9  00F9               	movwf	get_matrix_bit@row
  3198  0EFA  0825               	movf	hit_land@col,w
  3199  0EFB  0724               	addwf	hit_land@x,w
  3200  0EFC  00FD               	movwf	??_hit_land+1
  3201  0EFD  087D               	movf	??_hit_land+1,w
  3202  0EFE  00FA               	movwf	get_matrix_bit@col
  3203  0EFF  160A  118A  273D  120A  158A  	fcall	_get_matrix_bit
  3204  0F04  3A01               	xorlw	1
  3205  0F05  1D03               	skipz
  3206  0F06  2F09               	goto	l3424
  3207                           
  3208                           ;teris_16f886.c: 855: {
  3209                           ;teris_16f886.c: 859: return 1;
  3210  0F07  3001               	movlw	1
  3211  0F08  0008               	return
  3212  0F09                     l3424:	
  3213  0F09  3001               	movlw	1
  3214  0F0A  00FC               	movwf	??_hit_land
  3215  0F0B  087C               	movf	??_hit_land,w
  3216  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  3218  0F0E  07A5               	addwf	hit_land@col,f
  3219  0F0F  0825               	movf	hit_land@col,w
  3220  0F10  3A80               	xorlw	128
  3221  0F11  3E7C               	addlw	-132
  3222  0F12  1C03               	skipc
  3223  0F13  2EC1               	goto	l3410
  3224  0F14                     l3428:	
  3225  0F14  30FF               	movlw	255
  3226  0F15  00FC               	movwf	??_hit_land
  3227  0F16  087C               	movf	??_hit_land,w
  3228  0F17  07A6               	addwf	hit_land@row,f
  3229  0F18  1FA6               	btfss	hit_land@row,7
  3230  0F19  2EBB               	goto	l3404
  3231  0F1A                     l3432:	
  3232                           
  3233                           ;teris_16f886.c: 860: }
  3234                           ;teris_16f886.c: 861: }
  3235                           ;teris_16f886.c: 862: }
  3236                           ;teris_16f886.c: 863: }
  3237                           ;teris_16f886.c: 867: return 0;
  3238  0F1A  3000               	movlw	0
  3239  0F1B  0008               	return
  3240  0F1C                     __end_of_hit_land:	
  3241                           
  3242                           	psect	text11
  3243  05AB                     __ptext11:	
  3244 ;; *************** function _find_best_solution *****************
  3245 ;; Defined at:
  3246 ;;		line 1259 in file "teris_16f886.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;		None
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;  temp_x          1   47[BANK0 ] char 
  3251 ;;  tem_sub_inde    1   46[BANK0 ] unsigned char 
  3252 ;;  temp_high       2   43[BANK0 ] unsigned int 
  3253 ;;  temp_risk       2   40[BANK0 ] int 
  3254 ;;  temp_pre_ris    2   34[BANK0 ] int 
  3255 ;;  temp_y          1   45[BANK0 ] char 
  3256 ;;  res             1   42[BANK0 ] unsigned char 
  3257 ;;  tem_pre_sub_    1   39[BANK0 ] char 
  3258 ;;  temp_pre_x      1   38[BANK0 ] char 
  3259 ;;  right_most_i    1   37[BANK0 ] char 
  3260 ;;  left_most_in    1   36[BANK0 ] char 
  3261 ;; Return value:  Size  Location     Type
  3262 ;;                  1    wreg      unsigned char 
  3263 ;; Registers used:
  3264 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3270 ;;      Params:         0       0       0       0       0
  3271 ;;      Locals:         0      14       0       0       0
  3272 ;;      Temps:          0      18       0       0       0
  3273 ;;      Totals:         0      32       0       0       0
  3274 ;;Total ram usage:       32 bytes
  3275 ;; Hardware stack levels used:    1
  3276 ;; Hardware stack levels required when called:    5
  3277 ;; This function calls:
  3278 ;;		___wmul
  3279 ;;		_fall_off
  3280 ;;		_get_heavy
  3281 ;;		_get_high
  3282 ;;		_get_high_after_merge
  3283 ;;		_get_holes_after_merge
  3284 ;;		_get_num_of_orphan
  3285 ;;		_get_num_removed_rows
  3286 ;;		_is_valid
  3287 ;;		_left_most
  3288 ;;		_merge1
  3289 ;;		_right_most
  3290 ;; This function is called by:
  3291 ;;		_main
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           
  3296                           ;psect for function _find_best_solution
  3297  05AB                     _find_best_solution:	
  3298                           
  3299                           ;teris_16f886.c: 1265: uint8_t res = 0;
  3300                           
  3301                           ;incstack = 0
  3302                           ; Regs used in _find_best_solution: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3303  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  3304  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  3305  05AD  01CA               	clrf	find_best_solution@res
  3306                           
  3307                           ;teris_16f886.c: 1266: int8_t left_most_index, right_most_index;
  3308                           ;teris_16f886.c: 1268: int8_t temp_pre_x = 0xF, tem_pre_sub_index = 0xF;
  3309  05AE  300F               	movlw	15
  3310  05AF  00B0               	movwf	??_find_best_solution
  3311  05B0  0830               	movf	??_find_best_solution,w
  3312  05B1  00C6               	movwf	find_best_solution@temp_pre_x
  3313  05B2  300F               	movlw	15
  3314  05B3  00B0               	movwf	??_find_best_solution
  3315  05B4  0830               	movf	??_find_best_solution,w
  3316  05B5  00C7               	movwf	find_best_solution@tem_pre_sub_index
  3317                           
  3318                           ;teris_16f886.c: 1269: int16_t temp_pre_risk = -30000;
  3319  05B6  30D0               	movlw	208
  3320  05B7  00C2               	movwf	find_best_solution@temp_pre_risk
  3321  05B8  308A               	movlw	138
  3322  05B9  00C3               	movwf	find_best_solution@temp_pre_risk+1
  3323                           
  3324                           ;teris_16f886.c: 1270: int8_t temp_y;
  3325                           ;teris_16f886.c: 1271: int16_t temp_risk;
  3326                           ;teris_16f886.c: 1272: uint16_t temp_high;
  3327                           ;teris_16f886.c: 1275: for(uint8_t tem_sub_index = 0; tem_sub_index < g_char_info[g_char
      +                          _info_index].num; tem_sub_index++)
  3328  05BA  01CE               	clrf	find_best_solution@tem_sub_index
  3329  05BB                     l3530:	
  3330  05BB  1403               	setc
  3331  05BC  0D65               	rlf	_g_char_info_index,w
  3332  05BD  3E12               	addlw	low (_g_char_info| (0+32768))
  3333  05BE  0084               	movwf	4
  3334  05BF  3088               	movlw	high (_g_char_info| (0+32768))
  3335  05C0  1803               	skipnc
  3336  05C1  3E01               	addlw	1
  3337  05C2  00FF               	movwf	127
  3338  05C3  120A  158A  2000  120A  118A  	fcall	stringtab
  3339  05C8  024E               	subwf	find_best_solution@tem_sub_index,w
  3340  05C9  1803               	btfsc	3,0
  3341  05CA  2FBC               	goto	l3532
  3342                           
  3343                           ;teris_16f886.c: 1276: {
  3344                           ;teris_16f886.c: 1277: temp_cur_matrix4x4 = &g_matrix4x4[g_char_info[g_char_info_index].
      +                          start_index + tem_sub_index];
  3345  05CB  0865               	movf	_g_char_info_index,w
  3346  05CC  00B0               	movwf	??_find_best_solution
  3347  05CD  0730               	addwf	??_find_best_solution,w
  3348  05CE  3E12               	addlw	low (_g_char_info| (0+32768))
  3349  05CF  0084               	movwf	4
  3350  05D0  3088               	movlw	high (_g_char_info| (0+32768))
  3351  05D1  1803               	skipnc
  3352  05D2  3E01               	addlw	1
  3353  05D3  00FF               	movwf	127
  3354  05D4  120A  158A  2000  120A  118A  	fcall	stringtab
  3355  05D9  074E               	addwf	find_best_solution@tem_sub_index,w
  3356  05DA  00B1               	movwf	??_find_best_solution+1
  3357  05DB  3001               	movlw	1
  3358  05DC                     u3885:	
  3359  05DC  1003               	clrc
  3360  05DD  0DB1               	rlf	??_find_best_solution+1,f
  3361  05DE  3EFF               	addlw	-1
  3362  05DF  1D03               	skipz
  3363  05E0  2DDC               	goto	u3885
  3364  05E1  1003               	clrc
  3365  05E2  0D31               	rlf	??_find_best_solution+1,w
  3366  05E3  3E42               	addlw	low (_g_matrix4x4| (0+32768))
  3367  05E4  00B2               	movwf	??_find_best_solution+2
  3368  05E5  3088               	movlw	high (_g_matrix4x4| (0+32768))
  3369  05E6  1803               	skipnc
  3370  05E7  3E01               	addlw	1
  3371  05E8  00B3               	movwf	??_find_best_solution+3
  3372  05E9  0832               	movf	??_find_best_solution+2,w
  3373  05EA  00E2               	movwf	_temp_cur_matrix4x4
  3374  05EB  0833               	movf	??_find_best_solution+3,w
  3375  05EC  00E3               	movwf	_temp_cur_matrix4x4+1
  3376                           
  3377                           ;teris_16f886.c: 1278: left_most_index = left_most(cur_x, temp_cur_matrix4x4, &g_matrix1
      +                          6x8);
  3378  05ED  0862               	movf	_temp_cur_matrix4x4,w
  3379  05EE  00AB               	movwf	left_most@matrix4x4
  3380  05EF  0863               	movf	_temp_cur_matrix4x4+1,w
  3381  05F0  00AC               	movwf	left_most@matrix4x4+1
  3382  05F1  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3383  05F2  00B0               	movwf	??_find_best_solution
  3384  05F3  0830               	movf	??_find_best_solution,w
  3385  05F4  00AD               	movwf	left_most@matrix16x8
  3386  05F5  086B               	movf	_cur_x,w
  3387  05F6  160A  118A  27E4  120A  118A  	fcall	_left_most
  3388  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  3389  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  3390  05FD  00B1               	movwf	??_find_best_solution+1
  3391  05FE  0831               	movf	??_find_best_solution+1,w
  3392  05FF  00C4               	movwf	find_best_solution@left_most_index
  3393                           
  3394                           ;teris_16f886.c: 1279: right_most_index = right_most(cur_x, temp_cur_matrix4x4, &g_matri
      +                          x16x8);
  3395  0600  0862               	movf	_temp_cur_matrix4x4,w
  3396  0601  00A6               	movwf	right_most@matrix4x4
  3397  0602  0863               	movf	_temp_cur_matrix4x4+1,w
  3398  0603  00A7               	movwf	right_most@matrix4x4+1
  3399  0604  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3400  0605  00B0               	movwf	??_find_best_solution
  3401  0606  0830               	movf	??_find_best_solution,w
  3402  0607  00A8               	movwf	right_most@matrix16x8
  3403  0608  086B               	movf	_cur_x,w
  3404  0609  120A  158A  21A0  120A  118A  	fcall	_right_most
  3405  060E  1283               	bcf	3,5	;RP0=0, select bank0
  3406  060F  1303               	bcf	3,6	;RP1=0, select bank0
  3407  0610  00B1               	movwf	??_find_best_solution+1
  3408  0611  0831               	movf	??_find_best_solution+1,w
  3409  0612  00C5               	movwf	find_best_solution@right_most_index
  3410                           
  3411                           ;teris_16f886.c: 1281: for(int8_t temp_x = left_most_index; temp_x <= right_most_index; 
      +                          temp_x++)
  3412  0613  0844               	movf	find_best_solution@left_most_index,w
  3413  0614  00B0               	movwf	??_find_best_solution
  3414  0615  0830               	movf	??_find_best_solution,w
  3415  0616  00CF               	movwf	find_best_solution@temp_x
  3416  0617                     l3526:	
  3417  0617  0845               	movf	find_best_solution@right_most_index,w
  3418  0618  3A80               	xorlw	128
  3419  0619  00B0               	movwf	??_find_best_solution
  3420  061A  084F               	movf	find_best_solution@temp_x,w
  3421  061B  3A80               	xorlw	128
  3422  061C  02B0               	subwf	??_find_best_solution,f
  3423  061D  1C03               	btfss	3,0
  3424  061E  2FB7               	goto	l3528
  3425                           
  3426                           ;teris_16f886.c: 1282: {
  3427                           ;teris_16f886.c: 1283: temp_y = fall_off(temp_x, cur_y, temp_cur_matrix4x4, &g_matrix16x
      +                          8);
  3428  061F  0864               	movf	_cur_y,w
  3429  0620  00B0               	movwf	??_find_best_solution
  3430  0621  0830               	movf	??_find_best_solution,w
  3431  0622  00A0               	movwf	fall_off@y
  3432  0623  0862               	movf	_temp_cur_matrix4x4,w
  3433  0624  00A1               	movwf	fall_off@matrix4x4
  3434  0625  0863               	movf	_temp_cur_matrix4x4+1,w
  3435  0626  00A2               	movwf	fall_off@matrix4x4+1
  3436  0627  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3437  0628  00B1               	movwf	??_find_best_solution+1
  3438  0629  0831               	movf	??_find_best_solution+1,w
  3439  062A  00A3               	movwf	fall_off@matrix16x8
  3440  062B  084F               	movf	find_best_solution@temp_x,w
  3441  062C  120A  158A  271C  120A  118A  	fcall	_fall_off
  3442  0631  1283               	bcf	3,5	;RP0=0, select bank0
  3443  0632  1303               	bcf	3,6	;RP1=0, select bank0
  3444  0633  00B2               	movwf	??_find_best_solution+2
  3445  0634  0832               	movf	??_find_best_solution+2,w
  3446  0635  00CD               	movwf	find_best_solution@temp_y
  3447                           
  3448                           ;teris_16f886.c: 1290: if(is_valid(temp_x, temp_y, temp_cur_matrix4x4, &g_matrix16x8) ==
      +                           0)
  3449  0636  084D               	movf	find_best_solution@temp_y,w
  3450  0637  00B0               	movwf	??_find_best_solution
  3451  0638  0830               	movf	??_find_best_solution,w
  3452  0639  00A0               	movwf	is_valid@y
  3453  063A  0862               	movf	_temp_cur_matrix4x4,w
  3454  063B  00A1               	movwf	is_valid@matrix4x4
  3455  063C  0863               	movf	_temp_cur_matrix4x4+1,w
  3456  063D  00A2               	movwf	is_valid@matrix4x4+1
  3457  063E  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3458  063F  00B1               	movwf	??_find_best_solution+1
  3459  0640  0831               	movf	??_find_best_solution+1,w
  3460  0641  00A3               	movwf	is_valid@matrix16x8
  3461  0642  084F               	movf	find_best_solution@temp_x,w
  3462  0643  120A  118A  217A  120A  118A  	fcall	_is_valid
  3463  0648  3A00               	xorlw	0
  3464  0649  1903               	btfsc	3,2
  3465  064A  2FB0               	goto	l3524
  3466                           
  3467                           ;teris_16f886.c: 1293: }
  3468                           ;teris_16f886.c: 1294: res = 1;
  3469                           
  3470                           ;teris_16f886.c: 1291: {
  3471                           ;teris_16f886.c: 1292: continue;
  3472  064B  1283               	bcf	3,5	;RP0=0, select bank0
  3473  064C  1303               	bcf	3,6	;RP1=0, select bank0
  3474  064D  01CA               	clrf	find_best_solution@res
  3475  064E  0ACA               	incf	find_best_solution@res,f
  3476                           
  3477                           ;teris_16f886.c: 1295: merge1(temp_x, temp_y, temp_cur_matrix4x4, &g_matrix16x8, &temp_m
      +                          atrix16x8);
  3478  064F  084D               	movf	find_best_solution@temp_y,w
  3479  0650  00B0               	movwf	??_find_best_solution
  3480  0651  0830               	movf	??_find_best_solution,w
  3481  0652  00A0               	movwf	merge1@y
  3482  0653  0862               	movf	_temp_cur_matrix4x4,w
  3483  0654  00A1               	movwf	merge1@matrix4x4
  3484  0655  0863               	movf	_temp_cur_matrix4x4+1,w
  3485  0656  00A2               	movwf	merge1@matrix4x4+1
  3486  0657  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3487  0658  00B1               	movwf	??_find_best_solution+1
  3488  0659  0831               	movf	??_find_best_solution+1,w
  3489  065A  00A3               	movwf	merge1@matrix16x8_in
  3490  065B  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3491  065C  00B2               	movwf	??_find_best_solution+2
  3492  065D  0832               	movf	??_find_best_solution+2,w
  3493  065E  00A4               	movwf	merge1@matrix16x8_out
  3494  065F  084F               	movf	find_best_solution@temp_x,w
  3495  0660  120A  158A  25F1  120A  118A  	fcall	_merge1
  3496                           
  3497                           ;teris_16f886.c: 1296: temp_high = get_high_after_merge(temp_y, temp_cur_matrix4x4);
  3498  0665  1283               	bcf	3,5	;RP0=0, select bank0
  3499  0666  1303               	bcf	3,6	;RP1=0, select bank0
  3500  0667  0862               	movf	_temp_cur_matrix4x4,w
  3501  0668  00FC               	movwf	get_high_after_merge@matrix
  3502  0669  0863               	movf	_temp_cur_matrix4x4+1,w
  3503  066A  00FD               	movwf	get_high_after_merge@matrix+1
  3504  066B  084D               	movf	find_best_solution@temp_y,w
  3505  066C  120A  158A  232D  120A  118A  	fcall	_get_high_after_merge
  3506  0671  1283               	bcf	3,5	;RP0=0, select bank0
  3507  0672  1303               	bcf	3,6	;RP1=0, select bank0
  3508  0673  00B0               	movwf	??_find_best_solution
  3509  0674  01B1               	clrf	??_find_best_solution+1
  3510  0675  0830               	movf	??_find_best_solution,w
  3511  0676  00CB               	movwf	find_best_solution@temp_high
  3512  0677  0831               	movf	??_find_best_solution+1,w
  3513  0678  00CC               	movwf	find_best_solution@temp_high+1
  3514                           
  3515                           ;teris_16f886.c: 1297: if((get_high(&g_matrix16x8) <= 16/2 + 1)
  3516                           ;teris_16f886.c: 1298: && (temp_high <= 16/2 + 1))
  3517  0679  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3518  067A  120A  158A  21C0  120A  118A  	fcall	_get_high
  3519  067F  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0680  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0681  00B0               	movwf	??_find_best_solution
  3522  0682  300A               	movlw	10
  3523  0683  0230               	subwf	??_find_best_solution,w
  3524  0684  1803               	skipnc
  3525  0685  2F0C               	goto	l3518
  3526  0686  3000               	movlw	0
  3527  0687  024C               	subwf	find_best_solution@temp_high+1,w
  3528  0688  300A               	movlw	10
  3529  0689  1903               	skipnz
  3530  068A  024B               	subwf	find_best_solution@temp_high,w
  3531  068B  1803               	skipnc
  3532  068C  2F0C               	goto	l3518
  3533                           
  3534                           ;teris_16f886.c: 1299: {
  3535                           ;teris_16f886.c: 1300: temp_risk = (((int16_t)get_num_removed_rows(&temp_matrix16x8)) <<
      +                           10)
  3536                           ;teris_16f886.c: 1301: - get_num_of_orphan(&temp_matrix16x8)*4
  3537                           ;teris_16f886.c: 1302: - temp_high*3
  3538                           ;teris_16f886.c: 1303: - get_holes_after_merge(&temp_matrix16x8)*2
  3539                           ;teris_16f886.c: 1304: - get_heavy(&temp_matrix16x8);
  3540  068D  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3541  068E  120A  118A  206A  120A  118A  	fcall	_get_heavy
  3542  0693  097C               	comf	?_get_heavy,w
  3543  0694  1283               	bcf	3,5	;RP0=0, select bank0
  3544  0695  1303               	bcf	3,6	;RP1=0, select bank0
  3545  0696  00B0               	movwf	??_find_best_solution
  3546  0697  097D               	comf	?_get_heavy+1,w
  3547  0698  00B1               	movwf	??_find_best_solution+1
  3548  0699  0AB0               	incf	??_find_best_solution,f
  3549  069A  1903               	skipnz
  3550  069B  0AB1               	incf	??_find_best_solution+1,f
  3551  069C  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3552  069D  120A  118A  249D  120A  118A  	fcall	_get_holes_after_merge
  3553  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  3554  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  3555  06A4  00B2               	movwf	??_find_best_solution+2
  3556  06A5  01B3               	clrf	??_find_best_solution+3
  3557  06A6  1003               	clrc
  3558  06A7  0DB2               	rlf	??_find_best_solution+2,f
  3559  06A8  0DB3               	rlf	??_find_best_solution+3,f
  3560  06A9  09B2               	comf	??_find_best_solution+2,f
  3561  06AA  09B3               	comf	??_find_best_solution+3,f
  3562  06AB  0AB2               	incf	??_find_best_solution+2,f
  3563  06AC  1903               	skipnz
  3564  06AD  0AB3               	incf	??_find_best_solution+3,f
  3565  06AE  084C               	movf	find_best_solution@temp_high+1,w
  3566  06AF  00AD               	movwf	___wmul@multiplier+1
  3567  06B0  084B               	movf	find_best_solution@temp_high,w
  3568  06B1  00AC               	movwf	___wmul@multiplier
  3569  06B2  3003               	movlw	3
  3570  06B3  00AE               	movwf	___wmul@multiplicand
  3571  06B4  3000               	movlw	0
  3572  06B5  00AF               	movwf	___wmul@multiplicand+1
  3573  06B6  120A  158A  21E2  120A  118A  	fcall	___wmul
  3574  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  3575  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  3576  06BD  092C               	comf	?___wmul,w
  3577  06BE  00B4               	movwf	??_find_best_solution+4
  3578  06BF  092D               	comf	?___wmul+1,w
  3579  06C0  00B5               	movwf	??_find_best_solution+5
  3580  06C1  0AB4               	incf	??_find_best_solution+4,f
  3581  06C2  1903               	skipnz
  3582  06C3  0AB5               	incf	??_find_best_solution+5,f
  3583  06C4  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3584  06C5  120A  118A  2005  120A  118A  	fcall	_get_num_of_orphan
  3585  06CA  087C               	movf	?_get_num_of_orphan,w
  3586  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  3587  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  3588  06CD  00B6               	movwf	??_find_best_solution+6
  3589  06CE  087D               	movf	?_get_num_of_orphan+1,w
  3590  06CF  00B7               	movwf	??_find_best_solution+7
  3591  06D0  1003               	clrc
  3592  06D1  0DB6               	rlf	??_find_best_solution+6,f
  3593  06D2  0DB7               	rlf	??_find_best_solution+7,f
  3594  06D3  1003               	clrc
  3595  06D4  0DB6               	rlf	??_find_best_solution+6,f
  3596  06D5  0DB7               	rlf	??_find_best_solution+7,f
  3597  06D6  09B6               	comf	??_find_best_solution+6,f
  3598  06D7  09B7               	comf	??_find_best_solution+7,f
  3599  06D8  0AB6               	incf	??_find_best_solution+6,f
  3600  06D9  1903               	skipnz
  3601  06DA  0AB7               	incf	??_find_best_solution+7,f
  3602  06DB  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3603  06DC  120A  158A  2205  120A  118A  	fcall	_get_num_removed_rows
  3604  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  3605  06E2  1303               	bcf	3,6	;RP1=0, select bank0
  3606  06E3  00B8               	movwf	??_find_best_solution+8
  3607  06E4  01B9               	clrf	??_find_best_solution+9
  3608  06E5  300A               	movlw	10
  3609  06E6  00FF               	movwf	127
  3610  06E7                     u3925:	
  3611  06E7  1003               	clrc
  3612  06E8  0DB8               	rlf	??_find_best_solution+8,f
  3613  06E9  0DB9               	rlf	??_find_best_solution+9,f
  3614  06EA  0BFF               	decfsz	127,f
  3615  06EB  2EE7               	goto	u3925
  3616  06EC  0836               	movf	??_find_best_solution+6,w
  3617  06ED  0738               	addwf	??_find_best_solution+8,w
  3618  06EE  00BA               	movwf	??_find_best_solution+10
  3619  06EF  0837               	movf	??_find_best_solution+7,w
  3620  06F0  1803               	skipnc
  3621  06F1  0A37               	incf	??_find_best_solution+7,w
  3622  06F2  0739               	addwf	??_find_best_solution+9,w
  3623  06F3  00BB               	movwf	??_find_best_solution+11
  3624  06F4  0834               	movf	??_find_best_solution+4,w
  3625  06F5  073A               	addwf	??_find_best_solution+10,w
  3626  06F6  00BC               	movwf	??_find_best_solution+12
  3627  06F7  0835               	movf	??_find_best_solution+5,w
  3628  06F8  1803               	skipnc
  3629  06F9  0A35               	incf	??_find_best_solution+5,w
  3630  06FA  073B               	addwf	??_find_best_solution+11,w
  3631  06FB  00BD               	movwf	??_find_best_solution+13
  3632  06FC  0832               	movf	??_find_best_solution+2,w
  3633  06FD  073C               	addwf	??_find_best_solution+12,w
  3634  06FE  00BE               	movwf	??_find_best_solution+14
  3635  06FF  0833               	movf	??_find_best_solution+3,w
  3636  0700  1803               	skipnc
  3637  0701  0A33               	incf	??_find_best_solution+3,w
  3638  0702  073D               	addwf	??_find_best_solution+13,w
  3639  0703  00BF               	movwf	??_find_best_solution+15
  3640  0704  0830               	movf	??_find_best_solution,w
  3641  0705  073E               	addwf	??_find_best_solution+14,w
  3642  0706  00C8               	movwf	find_best_solution@temp_risk
  3643  0707  0831               	movf	??_find_best_solution+1,w
  3644  0708  1803               	skipnc
  3645  0709  0A31               	incf	??_find_best_solution+1,w
  3646  070A  073F               	addwf	??_find_best_solution+15,w
  3647  070B  2F95               	goto	L4
  3648  070C                     l3518:	
  3649                           ;teris_16f886.c: 1305: }
  3650                           
  3651                           
  3652                           ;teris_16f886.c: 1306: else
  3653                           ;teris_16f886.c: 1307: {
  3654                           ;teris_16f886.c: 1308: temp_risk = (((int16_t)get_num_removed_rows(&temp_matrix16x8)) <<
      +                           10)
  3655                           ;teris_16f886.c: 1309: - get_num_of_orphan(&temp_matrix16x8)*2
  3656                           ;teris_16f886.c: 1310: - temp_high*5
  3657                           ;teris_16f886.c: 1311: - get_holes_after_merge(&temp_matrix16x8)*3
  3658                           ;teris_16f886.c: 1312: - get_heavy(&temp_matrix16x8);
  3659  070C  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3660  070D  120A  118A  206A  120A  118A  	fcall	_get_heavy
  3661  0712  097C               	comf	?_get_heavy,w
  3662  0713  1283               	bcf	3,5	;RP0=0, select bank0
  3663  0714  1303               	bcf	3,6	;RP1=0, select bank0
  3664  0715  00B0               	movwf	??_find_best_solution
  3665  0716  097D               	comf	?_get_heavy+1,w
  3666  0717  00B1               	movwf	??_find_best_solution+1
  3667  0718  0AB0               	incf	??_find_best_solution,f
  3668  0719  1903               	skipnz
  3669  071A  0AB1               	incf	??_find_best_solution+1,f
  3670  071B  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3671  071C  120A  118A  249D  120A  118A  	fcall	_get_holes_after_merge
  3672  0721  1283               	bcf	3,5	;RP0=0, select bank0
  3673  0722  1303               	bcf	3,6	;RP1=0, select bank0
  3674  0723  00B2               	movwf	??_find_best_solution+2
  3675  0724  01B3               	clrf	??_find_best_solution+3
  3676  0725  0832               	movf	??_find_best_solution+2,w
  3677  0726  00AC               	movwf	___wmul@multiplier
  3678  0727  0833               	movf	??_find_best_solution+3,w
  3679  0728  00AD               	movwf	___wmul@multiplier+1
  3680  0729  3003               	movlw	3
  3681  072A  00AE               	movwf	___wmul@multiplicand
  3682  072B  3000               	movlw	0
  3683  072C  00AF               	movwf	___wmul@multiplicand+1
  3684  072D  120A  158A  21E2  120A  118A  	fcall	___wmul
  3685  0732  1283               	bcf	3,5	;RP0=0, select bank0
  3686  0733  1303               	bcf	3,6	;RP1=0, select bank0
  3687  0734  092C               	comf	?___wmul,w
  3688  0735  00B4               	movwf	??_find_best_solution+4
  3689  0736  092D               	comf	?___wmul+1,w
  3690  0737  00B5               	movwf	??_find_best_solution+5
  3691  0738  0AB4               	incf	??_find_best_solution+4,f
  3692  0739  1903               	skipnz
  3693  073A  0AB5               	incf	??_find_best_solution+5,f
  3694  073B  084C               	movf	find_best_solution@temp_high+1,w
  3695  073C  00AD               	movwf	___wmul@multiplier+1
  3696  073D  084B               	movf	find_best_solution@temp_high,w
  3697  073E  00AC               	movwf	___wmul@multiplier
  3698  073F  3005               	movlw	5
  3699  0740  00AE               	movwf	___wmul@multiplicand
  3700  0741  3000               	movlw	0
  3701  0742  00AF               	movwf	___wmul@multiplicand+1
  3702  0743  120A  158A  21E2  120A  118A  	fcall	___wmul
  3703  0748  1283               	bcf	3,5	;RP0=0, select bank0
  3704  0749  1303               	bcf	3,6	;RP1=0, select bank0
  3705  074A  092C               	comf	?___wmul,w
  3706  074B  00B6               	movwf	??_find_best_solution+6
  3707  074C  092D               	comf	?___wmul+1,w
  3708  074D  00B7               	movwf	??_find_best_solution+7
  3709  074E  0AB6               	incf	??_find_best_solution+6,f
  3710  074F  1903               	skipnz
  3711  0750  0AB7               	incf	??_find_best_solution+7,f
  3712  0751  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3713  0752  120A  118A  2005  120A  118A  	fcall	_get_num_of_orphan
  3714  0757  087C               	movf	?_get_num_of_orphan,w
  3715  0758  1283               	bcf	3,5	;RP0=0, select bank0
  3716  0759  1303               	bcf	3,6	;RP1=0, select bank0
  3717  075A  00B8               	movwf	??_find_best_solution+8
  3718  075B  087D               	movf	?_get_num_of_orphan+1,w
  3719  075C  00B9               	movwf	??_find_best_solution+9
  3720  075D  1003               	clrc
  3721  075E  0DB8               	rlf	??_find_best_solution+8,f
  3722  075F  0DB9               	rlf	??_find_best_solution+9,f
  3723  0760  09B8               	comf	??_find_best_solution+8,f
  3724  0761  09B9               	comf	??_find_best_solution+9,f
  3725  0762  0AB8               	incf	??_find_best_solution+8,f
  3726  0763  1903               	skipnz
  3727  0764  0AB9               	incf	??_find_best_solution+9,f
  3728  0765  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3729  0766  120A  158A  2205  120A  118A  	fcall	_get_num_removed_rows
  3730  076B  1283               	bcf	3,5	;RP0=0, select bank0
  3731  076C  1303               	bcf	3,6	;RP1=0, select bank0
  3732  076D  00BA               	movwf	??_find_best_solution+10
  3733  076E  01BB               	clrf	??_find_best_solution+11
  3734  076F  300A               	movlw	10
  3735  0770  00FF               	movwf	127
  3736  0771                     u3935:	
  3737  0771  1003               	clrc
  3738  0772  0DBA               	rlf	??_find_best_solution+10,f
  3739  0773  0DBB               	rlf	??_find_best_solution+11,f
  3740  0774  0BFF               	decfsz	127,f
  3741  0775  2F71               	goto	u3935
  3742  0776  0838               	movf	??_find_best_solution+8,w
  3743  0777  073A               	addwf	??_find_best_solution+10,w
  3744  0778  00BC               	movwf	??_find_best_solution+12
  3745  0779  0839               	movf	??_find_best_solution+9,w
  3746  077A  1803               	skipnc
  3747  077B  0A39               	incf	??_find_best_solution+9,w
  3748  077C  073B               	addwf	??_find_best_solution+11,w
  3749  077D  00BD               	movwf	??_find_best_solution+13
  3750  077E  0836               	movf	??_find_best_solution+6,w
  3751  077F  073C               	addwf	??_find_best_solution+12,w
  3752  0780  00BE               	movwf	??_find_best_solution+14
  3753  0781  0837               	movf	??_find_best_solution+7,w
  3754  0782  1803               	skipnc
  3755  0783  0A37               	incf	??_find_best_solution+7,w
  3756  0784  073D               	addwf	??_find_best_solution+13,w
  3757  0785  00BF               	movwf	??_find_best_solution+15
  3758  0786  0834               	movf	??_find_best_solution+4,w
  3759  0787  073E               	addwf	??_find_best_solution+14,w
  3760  0788  00C0               	movwf	??_find_best_solution+16
  3761  0789  0835               	movf	??_find_best_solution+5,w
  3762  078A  1803               	skipnc
  3763  078B  0A35               	incf	??_find_best_solution+5,w
  3764  078C  073F               	addwf	??_find_best_solution+15,w
  3765  078D  00C1               	movwf	??_find_best_solution+17
  3766  078E  0830               	movf	??_find_best_solution,w
  3767  078F  0740               	addwf	??_find_best_solution+16,w
  3768  0790  00C8               	movwf	find_best_solution@temp_risk
  3769  0791  0831               	movf	??_find_best_solution+1,w
  3770  0792  1803               	skipnc
  3771  0793  0A31               	incf	??_find_best_solution+1,w
  3772  0794  0741               	addwf	??_find_best_solution+17,w
  3773  0795                     L4:	
  3774  0795  00C9               	movwf	find_best_solution@temp_risk+1
  3775                           
  3776                           ;teris_16f886.c: 1313: }
  3777                           ;teris_16f886.c: 1322: if(temp_risk > temp_pre_risk)
  3778  0796  0843               	movf	find_best_solution@temp_pre_risk+1,w
  3779  0797  3A80               	xorlw	128
  3780  0798  00B0               	movwf	??_find_best_solution
  3781  0799  0849               	movf	find_best_solution@temp_risk+1,w
  3782  079A  3A80               	xorlw	128
  3783  079B  0230               	subwf	??_find_best_solution,w
  3784  079C  1D03               	skipz
  3785  079D  2FA0               	goto	u3945
  3786  079E  0848               	movf	find_best_solution@temp_risk,w
  3787  079F  0242               	subwf	find_best_solution@temp_pre_risk,w
  3788  07A0                     u3945:	
  3789  07A0  1803               	skipnc
  3790  07A1  2FB0               	goto	l3524
  3791                           
  3792                           ;teris_16f886.c: 1323: {
  3793                           ;teris_16f886.c: 1327: temp_pre_risk = temp_risk;
  3794  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  3795  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  3796  07A4  0849               	movf	find_best_solution@temp_risk+1,w
  3797  07A5  00C3               	movwf	find_best_solution@temp_pre_risk+1
  3798  07A6  0848               	movf	find_best_solution@temp_risk,w
  3799  07A7  00C2               	movwf	find_best_solution@temp_pre_risk
  3800                           
  3801                           ;teris_16f886.c: 1328: tem_pre_sub_index = tem_sub_index;
  3802  07A8  084E               	movf	find_best_solution@tem_sub_index,w
  3803  07A9  00B0               	movwf	??_find_best_solution
  3804  07AA  0830               	movf	??_find_best_solution,w
  3805  07AB  00C7               	movwf	find_best_solution@tem_pre_sub_index
  3806                           
  3807                           ;teris_16f886.c: 1329: temp_pre_x = temp_x;
  3808  07AC  084F               	movf	find_best_solution@temp_x,w
  3809  07AD  00B0               	movwf	??_find_best_solution
  3810  07AE  0830               	movf	??_find_best_solution,w
  3811  07AF  00C6               	movwf	find_best_solution@temp_pre_x
  3812  07B0                     l3524:	
  3813  07B0  3001               	movlw	1
  3814  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  3815  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  3816  07B3  00B0               	movwf	??_find_best_solution
  3817  07B4  0830               	movf	??_find_best_solution,w
  3818  07B5  07CF               	addwf	find_best_solution@temp_x,f
  3819  07B6  2E17               	goto	l3526
  3820  07B7                     l3528:	
  3821  07B7  3001               	movlw	1
  3822  07B8  00B0               	movwf	??_find_best_solution
  3823  07B9  0830               	movf	??_find_best_solution,w
  3824  07BA  07CE               	addwf	find_best_solution@tem_sub_index,f
  3825  07BB  2DBB               	goto	l3530
  3826  07BC                     l3532:	
  3827                           
  3828                           ;teris_16f886.c: 1330: }
  3829                           ;teris_16f886.c: 1344: }
  3830                           ;teris_16f886.c: 1345: }
  3831                           ;teris_16f886.c: 1346: if(res == 1)
  3832  07BC  034A               	decf	find_best_solution@res,w
  3833  07BD  1D03               	btfss	3,2
  3834  07BE  2FC7               	goto	l3536
  3835                           
  3836                           ;teris_16f886.c: 1347: {
  3837                           ;teris_16f886.c: 1348: g_char_info_sub_index = tem_pre_sub_index;
  3838  07BF  0847               	movf	find_best_solution@tem_pre_sub_index,w
  3839  07C0  00B0               	movwf	??_find_best_solution
  3840  07C1  0830               	movf	??_find_best_solution,w
  3841  07C2  00E6               	movwf	_g_char_info_sub_index
  3842                           
  3843                           ;teris_16f886.c: 1349: cur_x = temp_pre_x;
  3844  07C3  0846               	movf	find_best_solution@temp_pre_x,w
  3845  07C4  00B0               	movwf	??_find_best_solution
  3846  07C5  0830               	movf	??_find_best_solution,w
  3847  07C6  00EB               	movwf	_cur_x
  3848  07C7                     l3536:	
  3849                           ;teris_16f886.c: 1364: else
  3850                           ;teris_16f886.c: 1365: {
  3851                           
  3852                           ;teris_16f886.c: 1363: }
  3853                           
  3854                           
  3855                           ;teris_16f886.c: 1369: }
  3856                           ;teris_16f886.c: 1370: return res;
  3857  07C7  084A               	movf	find_best_solution@res,w
  3858  07C8  0008               	return
  3859  07C9                     __end_of_find_best_solution:	
  3860                           
  3861                           	psect	text12
  3862  09A0                     __ptext12:	
  3863 ;; *************** function _right_most *****************
  3864 ;; Defined at:
  3865 ;;		line 1134 in file "teris_16f886.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  x               1    wreg     char 
  3868 ;;  matrix4x4       2    6[BANK0 ] PTR const struct .
  3869 ;;		 -> NULL(0), g_matrix4x4(96), 
  3870 ;;  matrix16x8      1    8[BANK0 ] PTR const struct .
  3871 ;;		 -> g_matrix16x8(16), 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  x               1   10[BANK0 ] char 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      char 
  3876 ;; Registers used:
  3877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3883 ;;      Params:         0       3       0       0       0
  3884 ;;      Locals:         0       1       0       0       0
  3885 ;;      Temps:          0       1       0       0       0
  3886 ;;      Totals:         0       5       0       0       0
  3887 ;;Total ram usage:        5 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    4
  3890 ;; This function calls:
  3891 ;;		_is_right_boundary
  3892 ;; This function is called by:
  3893 ;;		_find_best_solution
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function _right_most
  3899  09A0                     _right_most:	
  3900                           
  3901                           ;incstack = 0
  3902                           ; Regs used in _right_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3903                           ;right_most@x stored from wreg
  3904  09A0  1283               	bcf	3,5	;RP0=0, select bank0
  3905  09A1  1303               	bcf	3,6	;RP1=0, select bank0
  3906  09A2  00AA               	movwf	right_most@x
  3907  09A3                     l427:	
  3908                           ;teris_16f886.c: 1136: while(1)
  3909                           
  3910                           
  3911                           ;teris_16f886.c: 1137: {
  3912                           ;teris_16f886.c: 1138: if(is_right_boundary(x, matrix4x4, matrix16x8) == RIGHT_OVER_BOUN
      +                          DARY)
  3913  09A3  0826               	movf	right_most@matrix4x4,w
  3914  09A4  00A0               	movwf	is_right_boundary@matrix4x4
  3915  09A5  0827               	movf	right_most@matrix4x4+1,w
  3916  09A6  00A1               	movwf	is_right_boundary@matrix4x4+1
  3917  09A7  0828               	movf	right_most@matrix16x8,w
  3918  09A8  00A9               	movwf	??_right_most
  3919  09A9  0829               	movf	??_right_most,w
  3920  09AA  00A2               	movwf	is_right_boundary@matrix16x8
  3921  09AB  082A               	movf	right_most@x,w
  3922  09AC  120A  158A  25A2  120A  158A  	fcall	_is_right_boundary
  3923  09B1  3A03               	xorlw	3
  3924  09B2  1D03               	skipz
  3925  09B3  29B9               	goto	l3036
  3926                           
  3927                           ;teris_16f886.c: 1139: {
  3928                           ;teris_16f886.c: 1143: return x - 1;
  3929  09B4  1283               	bcf	3,5	;RP0=0, select bank0
  3930  09B5  1303               	bcf	3,6	;RP1=0, select bank0
  3931  09B6  082A               	movf	right_most@x,w
  3932  09B7  3EFF               	addlw	-1
  3933  09B8  0008               	return
  3934  09B9                     l3036:	
  3935                           
  3936                           ;teris_16f886.c: 1144: }
  3937                           ;teris_16f886.c: 1145: x++;
  3938  09B9  3001               	movlw	1
  3939  09BA  1283               	bcf	3,5	;RP0=0, select bank0
  3940  09BB  1303               	bcf	3,6	;RP1=0, select bank0
  3941  09BC  00A9               	movwf	??_right_most
  3942  09BD  0829               	movf	??_right_most,w
  3943  09BE  07AA               	addwf	right_most@x,f
  3944  09BF  29A3               	goto	l427
  3945  09C0                     __end_of_right_most:	
  3946                           
  3947                           	psect	text13
  3948  0DA2                     __ptext13:	
  3949 ;; *************** function _is_right_boundary *****************
  3950 ;; Defined at:
  3951 ;;		line 933 in file "teris_16f886.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;  x               1    wreg     char 
  3954 ;;  matrix4x4       2    0[BANK0 ] PTR const struct .
  3955 ;;		 -> NULL(0), g_matrix4x4(96), 
  3956 ;;  matrix16x8      1    2[BANK0 ] PTR const struct .
  3957 ;;		 -> g_matrix16x8(16), 
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;  x               1    3[BANK0 ] char 
  3960 ;;  col             1    5[BANK0 ] char 
  3961 ;;  row             1    4[BANK0 ] char 
  3962 ;; Return value:  Size  Location     Type
  3963 ;;                  1    wreg      unsigned char 
  3964 ;; Registers used:
  3965 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/0
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3971 ;;      Params:         0       3       0       0       0
  3972 ;;      Locals:         0       3       0       0       0
  3973 ;;      Temps:          2       0       0       0       0
  3974 ;;      Totals:         2       6       0       0       0
  3975 ;;Total ram usage:        8 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    3
  3978 ;; This function calls:
  3979 ;;		_get_matrix_bit
  3980 ;; This function is called by:
  3981 ;;		_right_most
  3982 ;; This function uses a non-reentrant model
  3983 ;;
  3984                           
  3985                           
  3986                           ;psect for function _is_right_boundary
  3987  0DA2                     _is_right_boundary:	
  3988                           
  3989                           ;incstack = 0
  3990                           ; Regs used in _is_right_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3991                           ;is_right_boundary@x stored from wreg
  3992  0DA2  1283               	bcf	3,5	;RP0=0, select bank0
  3993  0DA3  1303               	bcf	3,6	;RP1=0, select bank0
  3994  0DA4  00A3               	movwf	is_right_boundary@x
  3995                           
  3996                           ;teris_16f886.c: 935: for(int8_t row = 4 - 1; row >= 0; row--)
  3997  0DA5  3003               	movlw	3
  3998  0DA6  00FC               	movwf	??_is_right_boundary
  3999  0DA7  087C               	movf	??_is_right_boundary,w
  4000  0DA8  00A4               	movwf	is_right_boundary@row
  4001  0DA9  1BA4               	btfsc	is_right_boundary@row,7
  4002  0DAA  2DEF               	goto	l2744
  4003  0DAB                     l2722:	
  4004                           
  4005                           ;teris_16f886.c: 936: {
  4006                           ;teris_16f886.c: 937: for(int8_t col = 0; col < 4; col++)
  4007  0DAB  01A5               	clrf	is_right_boundary@col
  4008  0DAC  0825               	movf	is_right_boundary@col,w
  4009  0DAD  3A80               	xorlw	128
  4010  0DAE  3E7C               	addlw	-132
  4011  0DAF  1803               	btfsc	3,0
  4012  0DB0  2DE9               	goto	l2740
  4013  0DB1                     l2728:	
  4014                           
  4015                           ;teris_16f886.c: 938: {
  4016                           ;teris_16f886.c: 939: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  4017  0DB1  0820               	movf	is_right_boundary@matrix4x4,w
  4018  0DB2  00F7               	movwf	get_matrix_bit@byte
  4019  0DB3  0821               	movf	is_right_boundary@matrix4x4+1,w
  4020  0DB4  00F8               	movwf	get_matrix_bit@byte+1
  4021  0DB5  0824               	movf	is_right_boundary@row,w
  4022  0DB6  00FC               	movwf	??_is_right_boundary
  4023  0DB7  087C               	movf	??_is_right_boundary,w
  4024  0DB8  00F9               	movwf	get_matrix_bit@row
  4025  0DB9  0825               	movf	is_right_boundary@col,w
  4026  0DBA  00FD               	movwf	??_is_right_boundary+1
  4027  0DBB  087D               	movf	??_is_right_boundary+1,w
  4028  0DBC  00FA               	movwf	get_matrix_bit@col
  4029  0DBD  160A  118A  273D  120A  158A  	fcall	_get_matrix_bit
  4030  0DC2  3A01               	xorlw	1
  4031  0DC3  1D03               	skipz
  4032  0DC4  2DDE               	goto	l2736
  4033                           
  4034                           ;teris_16f886.c: 940: {
  4035                           ;teris_16f886.c: 941: if(x + col > 8 - 1)
  4036  0DC5  1283               	bcf	3,5	;RP0=0, select bank0
  4037  0DC6  1303               	bcf	3,6	;RP1=0, select bank0
  4038  0DC7  0823               	movf	is_right_boundary@x,w
  4039  0DC8  0725               	addwf	is_right_boundary@col,w
  4040  0DC9  00FC               	movwf	??_is_right_boundary
  4041  0DCA  01FD               	clrf	??_is_right_boundary+1
  4042  0DCB  1803               	skipnc
  4043  0DCC  0AFD               	incf	??_is_right_boundary+1,f
  4044  0DCD  1BA3               	btfsc	is_right_boundary@x,7
  4045  0DCE  03FD               	decf	??_is_right_boundary+1,f
  4046  0DCF  1BA5               	btfsc	is_right_boundary@col,7
  4047  0DD0  03FD               	decf	??_is_right_boundary+1,f
  4048  0DD1  087D               	movf	??_is_right_boundary+1,w
  4049  0DD2  3A80               	xorlw	128
  4050  0DD3  00FF               	movwf	127
  4051  0DD4  3080               	movlw	128
  4052  0DD5  027F               	subwf	127,w
  4053  0DD6  1D03               	skipz
  4054  0DD7  2DDA               	goto	u2405
  4055  0DD8  3008               	movlw	8
  4056  0DD9  027C               	subwf	??_is_right_boundary,w
  4057  0DDA                     u2405:	
  4058  0DDA  1C03               	skipc
  4059  0DDB  2DDE               	goto	l2736
  4060                           
  4061                           ;teris_16f886.c: 942: {
  4062                           ;teris_16f886.c: 946: return RIGHT_OVER_BOUNDARY;
  4063  0DDC  3003               	movlw	3
  4064  0DDD  0008               	return
  4065  0DDE                     l2736:	
  4066  0DDE  3001               	movlw	1
  4067  0DDF  00FC               	movwf	??_is_right_boundary
  4068  0DE0  087C               	movf	??_is_right_boundary,w
  4069  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  4070  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  4071  0DE3  07A5               	addwf	is_right_boundary@col,f
  4072  0DE4  0825               	movf	is_right_boundary@col,w
  4073  0DE5  3A80               	xorlw	128
  4074  0DE6  3E7C               	addlw	-132
  4075  0DE7  1C03               	skipc
  4076  0DE8  2DB1               	goto	l2728
  4077  0DE9                     l2740:	
  4078  0DE9  30FF               	movlw	255
  4079  0DEA  00FC               	movwf	??_is_right_boundary
  4080  0DEB  087C               	movf	??_is_right_boundary,w
  4081  0DEC  07A4               	addwf	is_right_boundary@row,f
  4082  0DED  1FA4               	btfss	is_right_boundary@row,7
  4083  0DEE  2DAB               	goto	l2722
  4084  0DEF                     l2744:	
  4085                           
  4086                           ;teris_16f886.c: 947: }
  4087                           ;teris_16f886.c: 948: }
  4088                           ;teris_16f886.c: 949: }
  4089                           ;teris_16f886.c: 950: }
  4090                           ;teris_16f886.c: 951: return OK;
  4091  0DEF  3000               	movlw	0
  4092  0DF0  0008               	return
  4093  0DF1                     __end_of_is_right_boundary:	
  4094                           
  4095                           	psect	text14
  4096  0DF1                     __ptext14:	
  4097 ;; *************** function _merge1 *****************
  4098 ;; Defined at:
  4099 ;;		line 1019 in file "teris_16f886.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;  x               1    wreg     char 
  4102 ;;  y               1    0[BANK0 ] char 
  4103 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  4104 ;;		 -> NULL(0), g_matrix4x4(96), 
  4105 ;;  matrix16x8_i    1    3[BANK0 ] PTR const struct .
  4106 ;;		 -> g_matrix16x8(16), 
  4107 ;;  matrix16x8_o    1    4[BANK0 ] PTR struct .
  4108 ;;		 -> temp_matrix16x8(16), 
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;  x               1    7[BANK0 ] char 
  4111 ;;  col             1    9[BANK0 ] unsigned char 
  4112 ;;  row             1    8[BANK0 ] unsigned char 
  4113 ;;  len             2    5[BANK0 ] unsigned int 
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  1    wreg      void 
  4116 ;; Registers used:
  4117 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4123 ;;      Params:         0       5       0       0       0
  4124 ;;      Locals:         0       5       0       0       0
  4125 ;;      Temps:          2       0       0       0       0
  4126 ;;      Totals:         2      10       0       0       0
  4127 ;;Total ram usage:       12 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    3
  4130 ;; This function calls:
  4131 ;;		_get_matrix_bit
  4132 ;;		_memcpy
  4133 ;;		_set_matrix_bit
  4134 ;; This function is called by:
  4135 ;;		_find_best_solution
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           
  4140                           ;psect for function _merge1
  4141  0DF1                     _merge1:	
  4142                           
  4143                           ;incstack = 0
  4144                           ; Regs used in _merge1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4145                           ;merge1@x stored from wreg
  4146  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  4147  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  4148  0DF3  00A7               	movwf	merge1@x
  4149                           
  4150                           ;teris_16f886.c: 1024: register size_t len;
  4151                           ;teris_16f886.c: 1026: len = sizeof(MATRIX16x8);
  4152  0DF4  3010               	movlw	16
  4153  0DF5  00A5               	movwf	merge1@len
  4154  0DF6  3000               	movlw	0
  4155  0DF7  00A6               	movwf	merge1@len+1
  4156                           
  4157                           ;teris_16f886.c: 1027: memcpy(matrix16x8_out, matrix16x8_in, len);
  4158  0DF8  0823               	movf	merge1@matrix16x8_in,w
  4159  0DF9  00FC               	movwf	??_merge1
  4160  0DFA  087C               	movf	??_merge1,w
  4161  0DFB  00F0               	movwf	memcpy@s1
  4162  0DFC  0826               	movf	merge1@len+1,w
  4163  0DFD  00F2               	movwf	memcpy@n+1
  4164  0DFE  0825               	movf	merge1@len,w
  4165  0DFF  00F1               	movwf	memcpy@n
  4166  0E00  0824               	movf	merge1@matrix16x8_out,w
  4167  0E01  120A  158A  224E  120A  158A  	fcall	_memcpy
  4168                           
  4169                           ;teris_16f886.c: 1029: for(uint8_t row = 0; row < 4; row++)
  4170  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  4171  0E07  1303               	bcf	3,6	;RP1=0, select bank0
  4172  0E08  01A8               	clrf	merge1@row
  4173  0E09                     L5:	
  4174  0E09  3004               	movlw	4
  4175  0E0A  0228               	subwf	merge1@row,w
  4176  0E0B  1803               	btfsc	3,0
  4177  0E0C  0008               	return
  4178                           
  4179                           ;teris_16f886.c: 1030: {
  4180                           ;teris_16f886.c: 1031: for(uint8_t col = 0; col < 4; col++)
  4181  0E0D  01A9               	clrf	merge1@col
  4182  0E0E  3004               	movlw	4
  4183  0E0F  0229               	subwf	merge1@col,w
  4184  0E10  1803               	btfsc	3,0
  4185  0E11  2E44               	goto	l2926
  4186  0E12                     l2918:	
  4187                           
  4188                           ;teris_16f886.c: 1032: {
  4189                           ;teris_16f886.c: 1033: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  4190  0E12  0821               	movf	merge1@matrix4x4,w
  4191  0E13  00F7               	movwf	get_matrix_bit@byte
  4192  0E14  0822               	movf	merge1@matrix4x4+1,w
  4193  0E15  00F8               	movwf	get_matrix_bit@byte+1
  4194  0E16  0828               	movf	merge1@row,w
  4195  0E17  00FC               	movwf	??_merge1
  4196  0E18  087C               	movf	??_merge1,w
  4197  0E19  00F9               	movwf	get_matrix_bit@row
  4198  0E1A  0829               	movf	merge1@col,w
  4199  0E1B  00FD               	movwf	??_merge1+1
  4200  0E1C  087D               	movf	??_merge1+1,w
  4201  0E1D  00FA               	movwf	get_matrix_bit@col
  4202  0E1E  160A  118A  273D  120A  158A  	fcall	_get_matrix_bit
  4203  0E23  3A01               	xorlw	1
  4204  0E24  1D03               	skipz
  4205  0E25  2E3A               	goto	l2922
  4206                           
  4207                           ;teris_16f886.c: 1034: {
  4208                           ;teris_16f886.c: 1035: set_matrix_bit(matrix16x8_out->row, y + row, x + col, 1);
  4209  0E26  1283               	bcf	3,5	;RP0=0, select bank0
  4210  0E27  1303               	bcf	3,6	;RP1=0, select bank0
  4211  0E28  0828               	movf	merge1@row,w
  4212  0E29  0720               	addwf	merge1@y,w
  4213  0E2A  00FC               	movwf	??_merge1
  4214  0E2B  087C               	movf	??_merge1,w
  4215  0E2C  00F5               	movwf	set_matrix_bit@row
  4216  0E2D  0829               	movf	merge1@col,w
  4217  0E2E  0727               	addwf	merge1@x,w
  4218  0E2F  00FD               	movwf	??_merge1+1
  4219  0E30  087D               	movf	??_merge1+1,w
  4220  0E31  00F6               	movwf	set_matrix_bit@col
  4221  0E32  01F7               	clrf	set_matrix_bit@value
  4222  0E33  0AF7               	incf	set_matrix_bit@value,f
  4223  0E34  0824               	movf	merge1@matrix16x8_out,w
  4224  0E35  160A  118A  274C  120A  158A  	fcall	_set_matrix_bit
  4225  0E3A                     l2922:	
  4226  0E3A  3001               	movlw	1
  4227  0E3B  00FC               	movwf	??_merge1
  4228  0E3C  087C               	movf	??_merge1,w
  4229  0E3D  1283               	bcf	3,5	;RP0=0, select bank0
  4230  0E3E  1303               	bcf	3,6	;RP1=0, select bank0
  4231  0E3F  07A9               	addwf	merge1@col,f
  4232  0E40  3004               	movlw	4
  4233  0E41  0229               	subwf	merge1@col,w
  4234  0E42  1C03               	skipc
  4235  0E43  2E12               	goto	l2918
  4236  0E44                     l2926:	
  4237  0E44  3001               	movlw	1
  4238  0E45  00FC               	movwf	??_merge1
  4239  0E46  087C               	movf	??_merge1,w
  4240  0E47  07A8               	addwf	merge1@row,f
  4241  0E48  2E09               	goto	L5
  4242  0E49                     __end_of_merge1:	
  4243                           
  4244                           	psect	text15
  4245  0A4E                     __ptext15:	
  4246 ;; *************** function _memcpy *****************
  4247 ;; Defined at:
  4248 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;  d1              1    wreg     PTR void 
  4251 ;;		 -> temp_matrix16x8(16), 
  4252 ;;  s1              1    0[COMMON] PTR const void 
  4253 ;;		 -> g_matrix16x8(16), 
  4254 ;;  n               2    1[COMMON] unsigned int 
  4255 ;; Auto vars:     Size  Location     Type
  4256 ;;  d1              1    4[COMMON] PTR void 
  4257 ;;		 -> temp_matrix16x8(16), 
  4258 ;;  s               1    6[COMMON] PTR const unsigned char 
  4259 ;;		 -> g_matrix16x8(16), 
  4260 ;;  d               1    5[COMMON] PTR unsigned char 
  4261 ;;		 -> temp_matrix16x8(16), 
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  1    wreg      PTR void 
  4264 ;; Registers used:
  4265 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4271 ;;      Params:         3       0       0       0       0
  4272 ;;      Locals:         3       0       0       0       0
  4273 ;;      Temps:          1       0       0       0       0
  4274 ;;      Totals:         7       0       0       0       0
  4275 ;;Total ram usage:        7 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_merge1
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           
  4285                           ;psect for function _memcpy
  4286  0A4E                     _memcpy:	
  4287                           
  4288                           ;incstack = 0
  4289                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  4290                           ;memcpy@d1 stored from wreg
  4291  0A4E  00F4               	movwf	memcpy@d1
  4292  0A4F  0870               	movf	memcpy@s1,w
  4293  0A50  00F3               	movwf	??_memcpy
  4294  0A51  0873               	movf	??_memcpy,w
  4295  0A52  00F6               	movwf	memcpy@s
  4296  0A53  0874               	movf	memcpy@d1,w
  4297  0A54  00F3               	movwf	??_memcpy
  4298  0A55  0873               	movf	??_memcpy,w
  4299  0A56  00F5               	movwf	memcpy@d
  4300  0A57                     l2756:	
  4301  0A57  3001               	movlw	1
  4302  0A58  02F1               	subwf	memcpy@n,f
  4303  0A59  3000               	movlw	0
  4304  0A5A  1C03               	skipc
  4305  0A5B  03F2               	decf	memcpy@n+1,f
  4306  0A5C  02F2               	subwf	memcpy@n+1,f
  4307  0A5D  0A71               	incf	memcpy@n,w
  4308  0A5E  1903               	btfsc	3,2
  4309  0A5F  0A72               	incf	memcpy@n+1,w
  4310  0A60  1903               	btfsc	3,2
  4311  0A61  0008               	return
  4312  0A62  0876               	movf	memcpy@s,w
  4313  0A63  0084               	movwf	4
  4314  0A64  1383               	bcf	3,7	;select IRP bank0
  4315  0A65  0800               	movf	0,w
  4316  0A66  00F3               	movwf	??_memcpy
  4317  0A67  0875               	movf	memcpy@d,w
  4318  0A68  0084               	movwf	4
  4319  0A69  0873               	movf	??_memcpy,w
  4320  0A6A  0080               	movwf	0
  4321  0A6B  3001               	movlw	1
  4322  0A6C  00F3               	movwf	??_memcpy
  4323  0A6D  0873               	movf	??_memcpy,w
  4324  0A6E  07F6               	addwf	memcpy@s,f
  4325  0A6F  3001               	movlw	1
  4326  0A70  00F3               	movwf	??_memcpy
  4327  0A71  0873               	movf	??_memcpy,w
  4328  0A72  07F5               	addwf	memcpy@d,f
  4329  0A73  2A57               	goto	l2756
  4330  0A74                     __end_of_memcpy:	
  4331                           ;	Return value of _memcpy is never used
  4332                           
  4333                           
  4334                           	psect	text16
  4335  17E4                     __ptext16:	
  4336 ;; *************** function _left_most *****************
  4337 ;; Defined at:
  4338 ;;		line 1120 in file "teris_16f886.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  x               1    wreg     char 
  4341 ;;  matrix4x4       2   11[BANK0 ] PTR const struct .
  4342 ;;		 -> NULL(0), g_matrix4x4(96), 
  4343 ;;  matrix16x8      1   13[BANK0 ] PTR const struct .
  4344 ;;		 -> g_matrix16x8(16), 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  x               1   13[COMMON] char 
  4347 ;; Return value:  Size  Location     Type
  4348 ;;                  1    wreg      char 
  4349 ;; Registers used:
  4350 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4356 ;;      Params:         0       3       0       0       0
  4357 ;;      Locals:         1       0       0       0       0
  4358 ;;      Temps:          1       0       0       0       0
  4359 ;;      Totals:         2       3       0       0       0
  4360 ;;Total ram usage:        5 bytes
  4361 ;; Hardware stack levels used:    1
  4362 ;; Hardware stack levels required when called:    4
  4363 ;; This function calls:
  4364 ;;		_is_left_boundary
  4365 ;; This function is called by:
  4366 ;;		_find_best_solution
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           
  4371                           ;psect for function _left_most
  4372  17E4                     _left_most:	
  4373                           
  4374                           ;incstack = 0
  4375                           ; Regs used in _left_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4376                           ;left_most@x stored from wreg
  4377  17E4  00FD               	movwf	left_most@x
  4378  17E5                     l420:	
  4379                           ;teris_16f886.c: 1122: while(1)
  4380                           
  4381                           
  4382                           ;teris_16f886.c: 1123: {
  4383                           ;teris_16f886.c: 1124: if(is_left_boundary(x, matrix4x4, matrix16x8) == LEFT_OVER_BOUNDA
      +                          RY)
  4384  17E5  1283               	bcf	3,5	;RP0=0, select bank0
  4385  17E6  1303               	bcf	3,6	;RP1=0, select bank0
  4386  17E7  082B               	movf	left_most@matrix4x4,w
  4387  17E8  00A0               	movwf	is_left_boundary@matrix4x4
  4388  17E9  082C               	movf	left_most@matrix4x4+1,w
  4389  17EA  00A1               	movwf	is_left_boundary@matrix4x4+1
  4390  17EB  082D               	movf	left_most@matrix16x8,w
  4391  17EC  00FC               	movwf	??_left_most
  4392  17ED  087C               	movf	??_left_most,w
  4393  17EE  00A2               	movwf	is_left_boundary@matrix16x8
  4394  17EF  087D               	movf	left_most@x,w
  4395  17F0  120A  158A  2555  160A  118A  	fcall	_is_left_boundary
  4396  17F5  3A02               	xorlw	2
  4397  17F6  1D03               	skipz
  4398  17F7  2FFB               	goto	l3028
  4399                           
  4400                           ;teris_16f886.c: 1125: {
  4401                           ;teris_16f886.c: 1129: return x + 1;
  4402  17F8  087D               	movf	left_most@x,w
  4403  17F9  3E01               	addlw	1
  4404  17FA  0008               	return
  4405  17FB                     l3028:	
  4406                           
  4407                           ;teris_16f886.c: 1130: }
  4408                           ;teris_16f886.c: 1131: x--;
  4409  17FB  30FF               	movlw	255
  4410  17FC  00FC               	movwf	??_left_most
  4411  17FD  087C               	movf	??_left_most,w
  4412  17FE  07FD               	addwf	left_most@x,f
  4413  17FF  2FE5               	goto	l420
  4414  1800                     __end_of_left_most:	
  4415                           
  4416                           	psect	text17
  4417  0D55                     __ptext17:	
  4418 ;; *************** function _is_left_boundary *****************
  4419 ;; Defined at:
  4420 ;;		line 913 in file "teris_16f886.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;  x               1    wreg     char 
  4423 ;;  matrix4x4       2    0[BANK0 ] PTR const struct .
  4424 ;;		 -> NULL(0), g_matrix4x4(96), 
  4425 ;;  matrix16x8      1    2[BANK0 ] PTR const struct .
  4426 ;;		 -> g_matrix16x8(16), 
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  x               1    8[BANK0 ] char 
  4429 ;;  col             1   10[BANK0 ] char 
  4430 ;;  row             1    9[BANK0 ] char 
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      unsigned char 
  4433 ;; Registers used:
  4434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4440 ;;      Params:         0       3       0       0       0
  4441 ;;      Locals:         0       3       0       0       0
  4442 ;;      Temps:          0       5       0       0       0
  4443 ;;      Totals:         0      11       0       0       0
  4444 ;;Total ram usage:       11 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; Hardware stack levels required when called:    3
  4447 ;; This function calls:
  4448 ;;		_get_matrix_bit
  4449 ;; This function is called by:
  4450 ;;		_left_most
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           
  4455                           ;psect for function _is_left_boundary
  4456  0D55                     _is_left_boundary:	
  4457                           
  4458                           ;incstack = 0
  4459                           ; Regs used in _is_left_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4460                           ;is_left_boundary@x stored from wreg
  4461  0D55  1283               	bcf	3,5	;RP0=0, select bank0
  4462  0D56  1303               	bcf	3,6	;RP1=0, select bank0
  4463  0D57  00A8               	movwf	is_left_boundary@x
  4464                           
  4465                           ;teris_16f886.c: 915: for(int8_t row = 4 - 1; row >= 0; row--)
  4466  0D58  3003               	movlw	3
  4467  0D59  00A3               	movwf	??_is_left_boundary
  4468  0D5A  0823               	movf	??_is_left_boundary,w
  4469  0D5B  00A9               	movwf	is_left_boundary@row
  4470  0D5C  1BA9               	btfsc	is_left_boundary@row,7
  4471  0D5D  2DA0               	goto	l2712
  4472  0D5E                     l2690:	
  4473                           
  4474                           ;teris_16f886.c: 916: {
  4475                           ;teris_16f886.c: 917: for(int8_t col = 0; col < 4; col++)
  4476  0D5E  01AA               	clrf	is_left_boundary@col
  4477  0D5F  082A               	movf	is_left_boundary@col,w
  4478  0D60  3A80               	xorlw	128
  4479  0D61  3E7C               	addlw	-132
  4480  0D62  1803               	btfsc	3,0
  4481  0D63  2D9A               	goto	l2708
  4482  0D64                     l2696:	
  4483                           
  4484                           ;teris_16f886.c: 918: {
  4485                           ;teris_16f886.c: 919: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  4486  0D64  0820               	movf	is_left_boundary@matrix4x4,w
  4487  0D65  00F7               	movwf	get_matrix_bit@byte
  4488  0D66  0821               	movf	is_left_boundary@matrix4x4+1,w
  4489  0D67  00F8               	movwf	get_matrix_bit@byte+1
  4490  0D68  0829               	movf	is_left_boundary@row,w
  4491  0D69  00A3               	movwf	??_is_left_boundary
  4492  0D6A  0823               	movf	??_is_left_boundary,w
  4493  0D6B  00F9               	movwf	get_matrix_bit@row
  4494  0D6C  082A               	movf	is_left_boundary@col,w
  4495  0D6D  00A4               	movwf	??_is_left_boundary+1
  4496  0D6E  0824               	movf	??_is_left_boundary+1,w
  4497  0D6F  00FA               	movwf	get_matrix_bit@col
  4498  0D70  160A  118A  273D  120A  158A  	fcall	_get_matrix_bit
  4499  0D75  3A01               	xorlw	1
  4500  0D76  1D03               	skipz
  4501  0D77  2D8F               	goto	l2704
  4502                           
  4503                           ;teris_16f886.c: 920: {
  4504                           ;teris_16f886.c: 921: if( x + col < 0)
  4505  0D78  1283               	bcf	3,5	;RP0=0, select bank0
  4506  0D79  1303               	bcf	3,6	;RP1=0, select bank0
  4507  0D7A  082A               	movf	is_left_boundary@col,w
  4508  0D7B  00A3               	movwf	??_is_left_boundary
  4509  0D7C  01A4               	clrf	??_is_left_boundary+1
  4510  0D7D  1BA3               	btfsc	??_is_left_boundary,7
  4511  0D7E  03A4               	decf	??_is_left_boundary+1,f
  4512  0D7F  0828               	movf	is_left_boundary@x,w
  4513  0D80  00A5               	movwf	??_is_left_boundary+2
  4514  0D81  01A6               	clrf	??_is_left_boundary+3
  4515  0D82  1BA5               	btfsc	??_is_left_boundary+2,7
  4516  0D83  03A6               	decf	??_is_left_boundary+3,f
  4517  0D84  0823               	movf	??_is_left_boundary,w
  4518  0D85  0725               	addwf	??_is_left_boundary+2,w
  4519  0D86  0826               	movf	??_is_left_boundary+3,w
  4520  0D87  1803               	skipnc
  4521  0D88  0A26               	incf	??_is_left_boundary+3,w
  4522  0D89  0724               	addwf	??_is_left_boundary+1,w
  4523  0D8A  00A7               	movwf	??_is_left_boundary+4
  4524  0D8B  1FA7               	btfss	??_is_left_boundary+4,7
  4525  0D8C  2D8F               	goto	l2704
  4526                           
  4527                           ;teris_16f886.c: 922: {
  4528                           ;teris_16f886.c: 926: return LEFT_OVER_BOUNDARY;
  4529  0D8D  3002               	movlw	2
  4530  0D8E  0008               	return
  4531  0D8F                     l2704:	
  4532  0D8F  3001               	movlw	1
  4533  0D90  1283               	bcf	3,5	;RP0=0, select bank0
  4534  0D91  1303               	bcf	3,6	;RP1=0, select bank0
  4535  0D92  00A3               	movwf	??_is_left_boundary
  4536  0D93  0823               	movf	??_is_left_boundary,w
  4537  0D94  07AA               	addwf	is_left_boundary@col,f
  4538  0D95  082A               	movf	is_left_boundary@col,w
  4539  0D96  3A80               	xorlw	128
  4540  0D97  3E7C               	addlw	-132
  4541  0D98  1C03               	skipc
  4542  0D99  2D64               	goto	l2696
  4543  0D9A                     l2708:	
  4544  0D9A  30FF               	movlw	255
  4545  0D9B  00A3               	movwf	??_is_left_boundary
  4546  0D9C  0823               	movf	??_is_left_boundary,w
  4547  0D9D  07A9               	addwf	is_left_boundary@row,f
  4548  0D9E  1FA9               	btfss	is_left_boundary@row,7
  4549  0D9F  2D5E               	goto	l2690
  4550  0DA0                     l2712:	
  4551                           
  4552                           ;teris_16f886.c: 927: }
  4553                           ;teris_16f886.c: 928: }
  4554                           ;teris_16f886.c: 929: }
  4555                           ;teris_16f886.c: 930: }
  4556                           ;teris_16f886.c: 931: return OK;
  4557  0DA0  3000               	movlw	0
  4558  0DA1  0008               	return
  4559  0DA2                     __end_of_is_left_boundary:	
  4560                           
  4561                           	psect	text18
  4562  017A                     __ptext18:	
  4563 ;; *************** function _is_valid *****************
  4564 ;; Defined at:
  4565 ;;		line 869 in file "teris_16f886.c"
  4566 ;; Parameters:    Size  Location     Type
  4567 ;;  x               1    wreg     char 
  4568 ;;  y               1    0[BANK0 ] char 
  4569 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  4570 ;;		 -> NULL(0), g_matrix4x4(96), 
  4571 ;;  matrix16x8      1    3[BANK0 ] PTR const struct .
  4572 ;;		 -> g_matrix16x8(16), 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;  x               1    4[BANK0 ] char 
  4575 ;;  col             1    6[BANK0 ] char 
  4576 ;;  row             1    5[BANK0 ] char 
  4577 ;; Return value:  Size  Location     Type
  4578 ;;                  1    wreg      unsigned char 
  4579 ;; Registers used:
  4580 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4581 ;; Tracked objects:
  4582 ;;		On entry : 0/0
  4583 ;;		On exit  : 0/0
  4584 ;;		Unchanged: 0/0
  4585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4586 ;;      Params:         0       4       0       0       0
  4587 ;;      Locals:         0       3       0       0       0
  4588 ;;      Temps:          2       0       0       0       0
  4589 ;;      Totals:         2       7       0       0       0
  4590 ;;Total ram usage:        9 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:    3
  4593 ;; This function calls:
  4594 ;;		_get_matrix_bit
  4595 ;; This function is called by:
  4596 ;;		_find_best_solution
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           
  4601                           ;psect for function _is_valid
  4602  017A                     _is_valid:	
  4603                           
  4604                           ;incstack = 0
  4605                           ; Regs used in _is_valid: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4606                           ;is_valid@x stored from wreg
  4607  017A  1283               	bcf	3,5	;RP0=0, select bank0
  4608  017B  1303               	bcf	3,6	;RP1=0, select bank0
  4609  017C  00A4               	movwf	is_valid@x
  4610                           
  4611                           ;teris_16f886.c: 874: for(int8_t row = 4 - 1; row >= 0; row--)
  4612  017D  3003               	movlw	3
  4613  017E  00FC               	movwf	??_is_valid
  4614  017F  087C               	movf	??_is_valid,w
  4615  0180  00A5               	movwf	is_valid@row
  4616  0181  1BA5               	btfsc	is_valid@row,7
  4617  0182  2A08               	goto	l2862
  4618  0183                     l2826:	
  4619                           
  4620                           ;teris_16f886.c: 875: {
  4621                           ;teris_16f886.c: 876: for(int8_t col = 0; col < 4; col++)
  4622  0183  01A6               	clrf	is_valid@col
  4623  0184  0826               	movf	is_valid@col,w
  4624  0185  3A80               	xorlw	128
  4625  0186  3E7C               	addlw	-132
  4626  0187  1803               	btfsc	3,0
  4627  0188  2A02               	goto	l2858
  4628  0189                     l2832:	
  4629                           
  4630                           ;teris_16f886.c: 877: {
  4631                           ;teris_16f886.c: 878: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  4632  0189  0821               	movf	is_valid@matrix4x4,w
  4633  018A  00F7               	movwf	get_matrix_bit@byte
  4634  018B  0822               	movf	is_valid@matrix4x4+1,w
  4635  018C  00F8               	movwf	get_matrix_bit@byte+1
  4636  018D  0825               	movf	is_valid@row,w
  4637  018E  00FC               	movwf	??_is_valid
  4638  018F  087C               	movf	??_is_valid,w
  4639  0190  00F9               	movwf	get_matrix_bit@row
  4640  0191  0826               	movf	is_valid@col,w
  4641  0192  00FD               	movwf	??_is_valid+1
  4642  0193  087D               	movf	??_is_valid+1,w
  4643  0194  00FA               	movwf	get_matrix_bit@col
  4644  0195  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  4645  019A  3A01               	xorlw	1
  4646  019B  1D03               	skipz
  4647  019C  29F7               	goto	l2854
  4648                           
  4649                           ;teris_16f886.c: 879: {
  4650                           ;teris_16f886.c: 880: if(get_matrix_bit(matrix16x8->row, y + row, x + col) == 1)
  4651  019D  1283               	bcf	3,5	;RP0=0, select bank0
  4652  019E  1303               	bcf	3,6	;RP1=0, select bank0
  4653  019F  0823               	movf	is_valid@matrix16x8,w
  4654  01A0  00F7               	movwf	get_matrix_bit@byte
  4655  01A1  3000               	movlw	0
  4656  01A2  00F8               	movwf	get_matrix_bit@byte+1
  4657  01A3  0825               	movf	is_valid@row,w
  4658  01A4  0720               	addwf	is_valid@y,w
  4659  01A5  00FC               	movwf	??_is_valid
  4660  01A6  087C               	movf	??_is_valid,w
  4661  01A7  00F9               	movwf	get_matrix_bit@row
  4662  01A8  0826               	movf	is_valid@col,w
  4663  01A9  0724               	addwf	is_valid@x,w
  4664  01AA  00FD               	movwf	??_is_valid+1
  4665  01AB  087D               	movf	??_is_valid+1,w
  4666  01AC  00FA               	movwf	get_matrix_bit@col
  4667  01AD  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  4668  01B2  3A01               	xorlw	1
  4669  01B3  1D03               	skipz
  4670  01B4  29B7               	goto	l2840
  4671                           
  4672                           ;teris_16f886.c: 881: {
  4673                           ;teris_16f886.c: 886: return 0;
  4674  01B5  3000               	movlw	0
  4675  01B6  0008               	return
  4676  01B7                     l2840:	
  4677                           
  4678                           ;teris_16f886.c: 887: }
  4679                           ;teris_16f886.c: 889: if(( x + col < 0) || (x + col >= 8))
  4680  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  4681  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  4682  01B9  0824               	movf	is_valid@x,w
  4683  01BA  0726               	addwf	is_valid@col,w
  4684  01BB  00FC               	movwf	??_is_valid
  4685  01BC  01FD               	clrf	??_is_valid+1
  4686  01BD  1803               	skipnc
  4687  01BE  0AFD               	incf	??_is_valid+1,f
  4688  01BF  1BA4               	btfsc	is_valid@x,7
  4689  01C0  03FD               	decf	??_is_valid+1,f
  4690  01C1  1BA6               	btfsc	is_valid@col,7
  4691  01C2  03FD               	decf	??_is_valid+1,f
  4692  01C3  1BFD               	btfsc	??_is_valid+1,7
  4693  01C4  29DC               	goto	l2844
  4694  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  4695  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  4696  01C7  0824               	movf	is_valid@x,w
  4697  01C8  0726               	addwf	is_valid@col,w
  4698  01C9  00FC               	movwf	??_is_valid
  4699  01CA  01FD               	clrf	??_is_valid+1
  4700  01CB  1803               	skipnc
  4701  01CC  0AFD               	incf	??_is_valid+1,f
  4702  01CD  1BA4               	btfsc	is_valid@x,7
  4703  01CE  03FD               	decf	??_is_valid+1,f
  4704  01CF  1BA6               	btfsc	is_valid@col,7
  4705  01D0  03FD               	decf	??_is_valid+1,f
  4706  01D1  087D               	movf	??_is_valid+1,w
  4707  01D2  3A80               	xorlw	128
  4708  01D3  00FF               	movwf	127
  4709  01D4  3080               	movlw	128
  4710  01D5  027F               	subwf	127,w
  4711  01D6  1D03               	skipz
  4712  01D7  29DA               	goto	u2645
  4713  01D8  3008               	movlw	8
  4714  01D9  027C               	subwf	??_is_valid,w
  4715  01DA                     u2645:	
  4716  01DA  1C03               	skipc
  4717  01DB  29DE               	goto	l2848
  4718  01DC                     l2844:	
  4719                           
  4720                           ;teris_16f886.c: 890: {
  4721                           ;teris_16f886.c: 895: return 0;
  4722  01DC  3000               	movlw	0
  4723  01DD  0008               	return
  4724  01DE                     l2848:	
  4725                           
  4726                           ;teris_16f886.c: 896: }
  4727                           ;teris_16f886.c: 897: if((y + row) > (16 - 1))
  4728  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  4729  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  4730  01E0  0820               	movf	is_valid@y,w
  4731  01E1  0725               	addwf	is_valid@row,w
  4732  01E2  00FC               	movwf	??_is_valid
  4733  01E3  01FD               	clrf	??_is_valid+1
  4734  01E4  1803               	skipnc
  4735  01E5  0AFD               	incf	??_is_valid+1,f
  4736  01E6  1BA0               	btfsc	is_valid@y,7
  4737  01E7  03FD               	decf	??_is_valid+1,f
  4738  01E8  1BA5               	btfsc	is_valid@row,7
  4739  01E9  03FD               	decf	??_is_valid+1,f
  4740  01EA  087D               	movf	??_is_valid+1,w
  4741  01EB  3A80               	xorlw	128
  4742  01EC  00FF               	movwf	127
  4743  01ED  3080               	movlw	128
  4744  01EE  027F               	subwf	127,w
  4745  01EF  1D03               	skipz
  4746  01F0  29F3               	goto	u2665
  4747  01F1  3010               	movlw	16
  4748  01F2  027C               	subwf	??_is_valid,w
  4749  01F3                     u2665:	
  4750  01F3  1C03               	skipc
  4751  01F4  29F7               	goto	l2854
  4752                           
  4753                           ;teris_16f886.c: 898: {
  4754                           ;teris_16f886.c: 903: return 0;
  4755  01F5  3000               	movlw	0
  4756  01F6  0008               	return
  4757  01F7                     l2854:	
  4758  01F7  3001               	movlw	1
  4759  01F8  00FC               	movwf	??_is_valid
  4760  01F9  087C               	movf	??_is_valid,w
  4761  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  4762  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  4763  01FC  07A6               	addwf	is_valid@col,f
  4764  01FD  0826               	movf	is_valid@col,w
  4765  01FE  3A80               	xorlw	128
  4766  01FF  3E7C               	addlw	-132
  4767  0200  1C03               	skipc
  4768  0201  2989               	goto	l2832
  4769  0202                     l2858:	
  4770  0202  30FF               	movlw	255
  4771  0203  00FC               	movwf	??_is_valid
  4772  0204  087C               	movf	??_is_valid,w
  4773  0205  07A5               	addwf	is_valid@row,f
  4774  0206  1FA5               	btfss	is_valid@row,7
  4775  0207  2983               	goto	l2826
  4776  0208                     l2862:	
  4777                           
  4778                           ;teris_16f886.c: 904: }
  4779                           ;teris_16f886.c: 905: }
  4780                           ;teris_16f886.c: 906: }
  4781                           ;teris_16f886.c: 907: }
  4782                           ;teris_16f886.c: 911: return 1;
  4783  0208  3001               	movlw	1
  4784  0209  0008               	return
  4785  020A                     __end_of_is_valid:	
  4786                           
  4787                           	psect	text19
  4788  0A05                     __ptext19:	
  4789 ;; *************** function _get_num_removed_rows *****************
  4790 ;; Defined at:
  4791 ;;		line 810 in file "teris_16f886.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;  matrix          1    wreg     PTR struct .
  4794 ;;		 -> temp_matrix16x8(16), 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;  matrix          1    5[COMMON] PTR struct .
  4797 ;;		 -> temp_matrix16x8(16), 
  4798 ;;  row             1    6[COMMON] char 
  4799 ;;  count           1    4[COMMON] unsigned char 
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  1    wreg      unsigned char 
  4802 ;; Registers used:
  4803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4809 ;;      Params:         0       0       0       0       0
  4810 ;;      Locals:         3       0       0       0       0
  4811 ;;      Temps:          1       0       0       0       0
  4812 ;;      Totals:         4       0       0       0       0
  4813 ;;Total ram usage:        4 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:    1
  4816 ;; This function calls:
  4817 ;;		_is_row_full
  4818 ;; This function is called by:
  4819 ;;		_find_best_solution
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           
  4824                           ;psect for function _get_num_removed_rows
  4825  0A05                     _get_num_removed_rows:	
  4826                           
  4827                           ;incstack = 0
  4828                           ; Regs used in _get_num_removed_rows: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4829                           ;get_num_removed_rows@matrix stored from wreg
  4830  0A05  00F5               	movwf	get_num_removed_rows@matrix
  4831                           
  4832                           ;teris_16f886.c: 812: uint8_t count = 0;
  4833  0A06  01F4               	clrf	get_num_removed_rows@count
  4834                           
  4835                           ;teris_16f886.c: 813: for(int8_t row = 0; row < 16; row++)
  4836  0A07  01F6               	clrf	get_num_removed_rows@row
  4837  0A08  0876               	movf	get_num_removed_rows@row,w
  4838  0A09  3A80               	xorlw	128
  4839  0A0A  3E70               	addlw	-144
  4840  0A0B  1803               	btfsc	3,0
  4841  0A0C  2A27               	goto	l2816
  4842  0A0D                     l2810:	
  4843                           
  4844                           ;teris_16f886.c: 814: {
  4845                           ;teris_16f886.c: 815: if(is_row_full(matrix, row) == 1)
  4846  0A0D  0876               	movf	get_num_removed_rows@row,w
  4847  0A0E  00F3               	movwf	??_get_num_removed_rows
  4848  0A0F  0873               	movf	??_get_num_removed_rows,w
  4849  0A10  00F0               	movwf	is_row_full@row
  4850  0A11  0875               	movf	get_num_removed_rows@matrix,w
  4851  0A12  160A  118A  272F  120A  158A  	fcall	_is_row_full
  4852  0A17  3A01               	xorlw	1
  4853  0A18  1D03               	skipz
  4854  0A19  2A1E               	goto	l307
  4855                           
  4856                           ;teris_16f886.c: 816: {
  4857                           ;teris_16f886.c: 817: count++;
  4858  0A1A  3001               	movlw	1
  4859  0A1B  00F3               	movwf	??_get_num_removed_rows
  4860  0A1C  0873               	movf	??_get_num_removed_rows,w
  4861  0A1D  07F4               	addwf	get_num_removed_rows@count,f
  4862  0A1E                     l307:	
  4863  0A1E  3001               	movlw	1
  4864  0A1F  00F3               	movwf	??_get_num_removed_rows
  4865  0A20  0873               	movf	??_get_num_removed_rows,w
  4866  0A21  07F6               	addwf	get_num_removed_rows@row,f
  4867  0A22  0876               	movf	get_num_removed_rows@row,w
  4868  0A23  3A80               	xorlw	128
  4869  0A24  3E70               	addlw	-144
  4870  0A25  1C03               	skipc
  4871  0A26  2A0D               	goto	l2810
  4872  0A27                     l2816:	
  4873                           
  4874                           ;teris_16f886.c: 818: }
  4875                           ;teris_16f886.c: 819: }
  4876                           ;teris_16f886.c: 823: return count;
  4877  0A27  0874               	movf	get_num_removed_rows@count,w
  4878  0A28  0008               	return
  4879  0A29                     __end_of_get_num_removed_rows:	
  4880                           
  4881                           	psect	text20
  4882  0005                     __ptext20:	
  4883 ;; *************** function _get_num_of_orphan *****************
  4884 ;; Defined at:
  4885 ;;		line 1041 in file "teris_16f886.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;  matrix          1    wreg     PTR const struct .
  4888 ;;		 -> temp_matrix16x8(16), 
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;  matrix          1    6[BANK0 ] PTR const struct .
  4891 ;;		 -> temp_matrix16x8(16), 
  4892 ;;  row             1    8[BANK0 ] char 
  4893 ;;  col             1    7[BANK0 ] unsigned char 
  4894 ;;  risk            2    3[BANK0 ] unsigned int 
  4895 ;;  full            1    5[BANK0 ] unsigned char 
  4896 ;; Return value:  Size  Location     Type
  4897 ;;                  2   12[COMMON] unsigned int 
  4898 ;; Registers used:
  4899 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4905 ;;      Params:         2       0       0       0       0
  4906 ;;      Locals:         0       6       0       0       0
  4907 ;;      Temps:          0       3       0       0       0
  4908 ;;      Totals:         2       9       0       0       0
  4909 ;;Total ram usage:       11 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    3
  4912 ;; This function calls:
  4913 ;;		_get_matrix_bit
  4914 ;; This function is called by:
  4915 ;;		_find_best_solution
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           
  4920                           ;psect for function _get_num_of_orphan
  4921  0005                     _get_num_of_orphan:	
  4922                           
  4923                           ;incstack = 0
  4924                           ; Regs used in _get_num_of_orphan: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4925                           ;get_num_of_orphan@matrix stored from wreg
  4926  0005  1283               	bcf	3,5	;RP0=0, select bank0
  4927  0006  1303               	bcf	3,6	;RP1=0, select bank0
  4928  0007  00A6               	movwf	get_num_of_orphan@matrix
  4929                           
  4930                           ;teris_16f886.c: 1043: uint16_t risk = 0;
  4931  0008  01A3               	clrf	get_num_of_orphan@risk
  4932  0009  01A4               	clrf	get_num_of_orphan@risk+1
  4933                           
  4934                           ;teris_16f886.c: 1044: uint8_t full = 0xFF;
  4935  000A  30FF               	movlw	255
  4936  000B  00A0               	movwf	??_get_num_of_orphan
  4937  000C  0820               	movf	??_get_num_of_orphan,w
  4938  000D  00A5               	movwf	get_num_of_orphan@full
  4939                           
  4940                           ;teris_16f886.c: 1045: for(uint8_t col = 0; col < 8; col++)
  4941  000E  01A7               	clrf	get_num_of_orphan@col
  4942  000F  3008               	movlw	8
  4943  0010  0227               	subwf	get_num_of_orphan@col,w
  4944  0011  1803               	btfsc	3,0
  4945  0012  2865               	goto	l2964
  4946  0013                     l2938:	
  4947                           
  4948                           ;teris_16f886.c: 1046: {
  4949                           ;teris_16f886.c: 1047: full = 0xFF;
  4950  0013  30FF               	movlw	255
  4951  0014  00A0               	movwf	??_get_num_of_orphan
  4952  0015  0820               	movf	??_get_num_of_orphan,w
  4953  0016  00A5               	movwf	get_num_of_orphan@full
  4954                           
  4955                           ;teris_16f886.c: 1048: for(int8_t row = 16 - 1; row >= 0; row--)
  4956  0017  300F               	movlw	15
  4957  0018  00A0               	movwf	??_get_num_of_orphan
  4958  0019  0820               	movf	??_get_num_of_orphan,w
  4959  001A  00A8               	movwf	get_num_of_orphan@row
  4960  001B  1BA8               	btfsc	get_num_of_orphan@row,7
  4961  001C  285D               	goto	l2960
  4962  001D                     l2944:	
  4963                           
  4964                           ;teris_16f886.c: 1049: {
  4965                           ;teris_16f886.c: 1050: if(full == 0xFF)
  4966  001D  0A25               	incf	get_num_of_orphan@full,w
  4967  001E  1903               	btfsc	3,2
  4968  001F  2841               	goto	L7
  4969                           
  4970                           ;teris_16f886.c: 1054: else
  4971                           ;teris_16f886.c: 1055: {
  4972                           ;teris_16f886.c: 1056: if(get_matrix_bit(matrix->row, row, col) == 1)
  4973                           
  4974                           ;teris_16f886.c: 1053: }
  4975                           
  4976                           ;teris_16f886.c: 1051: {
  4977                           ;teris_16f886.c: 1052: full = get_matrix_bit(matrix->row, row, col);
  4978  0020  0826               	movf	get_num_of_orphan@matrix,w
  4979  0021  00F7               	movwf	get_matrix_bit@byte
  4980  0022  3000               	movlw	0
  4981  0023  00F8               	movwf	get_matrix_bit@byte+1
  4982  0024  0828               	movf	get_num_of_orphan@row,w
  4983  0025  00A0               	movwf	??_get_num_of_orphan
  4984  0026  0820               	movf	??_get_num_of_orphan,w
  4985  0027  00F9               	movwf	get_matrix_bit@row
  4986  0028  0827               	movf	get_num_of_orphan@col,w
  4987  0029  00A1               	movwf	??_get_num_of_orphan+1
  4988  002A  0821               	movf	??_get_num_of_orphan+1,w
  4989  002B  00FA               	movwf	get_matrix_bit@col
  4990  002C  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  4991  0031  3A01               	xorlw	1
  4992  0032  1D03               	skipz
  4993  0033  283F               	goto	l2954
  4994                           
  4995                           ;teris_16f886.c: 1057: {
  4996                           ;teris_16f886.c: 1058: if(full == 0)
  4997  0034  1283               	bcf	3,5	;RP0=0, select bank0
  4998  0035  1303               	bcf	3,6	;RP1=0, select bank0
  4999  0036  0825               	movf	get_num_of_orphan@full,w
  5000  0037  1D03               	btfss	3,2
  5001  0038  283F               	goto	l2954
  5002                           
  5003                           ;teris_16f886.c: 1059: {
  5004                           ;teris_16f886.c: 1060: risk++;
  5005  0039  3001               	movlw	1
  5006  003A  07A3               	addwf	get_num_of_orphan@risk,f
  5007  003B  1803               	skipnc
  5008  003C  0AA4               	incf	get_num_of_orphan@risk+1,f
  5009  003D  3000               	movlw	0
  5010  003E  07A4               	addwf	get_num_of_orphan@risk+1,f
  5011  003F                     l2954:	
  5012                           
  5013                           ;teris_16f886.c: 1061: }
  5014                           ;teris_16f886.c: 1062: }
  5015                           ;teris_16f886.c: 1063: full = get_matrix_bit(matrix->row, row, col);
  5016  003F  1283               	bcf	3,5	;RP0=0, select bank0
  5017  0040  1303               	bcf	3,6	;RP1=0, select bank0
  5018  0041                     L7:	
  5019  0041  0826               	movf	get_num_of_orphan@matrix,w
  5020  0042  00F7               	movwf	get_matrix_bit@byte
  5021  0043  3000               	movlw	0
  5022  0044  00F8               	movwf	get_matrix_bit@byte+1
  5023  0045  0828               	movf	get_num_of_orphan@row,w
  5024  0046  00A0               	movwf	??_get_num_of_orphan
  5025  0047  0820               	movf	??_get_num_of_orphan,w
  5026  0048  00F9               	movwf	get_matrix_bit@row
  5027  0049  0827               	movf	get_num_of_orphan@col,w
  5028  004A  00A1               	movwf	??_get_num_of_orphan+1
  5029  004B  0821               	movf	??_get_num_of_orphan+1,w
  5030  004C  00FA               	movwf	get_matrix_bit@col
  5031  004D  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  5032  0052  1283               	bcf	3,5	;RP0=0, select bank0
  5033  0053  1303               	bcf	3,6	;RP1=0, select bank0
  5034  0054  00A2               	movwf	??_get_num_of_orphan+2
  5035  0055  0822               	movf	??_get_num_of_orphan+2,w
  5036  0056  00A5               	movwf	get_num_of_orphan@full
  5037  0057  30FF               	movlw	255
  5038  0058  00A0               	movwf	??_get_num_of_orphan
  5039  0059  0820               	movf	??_get_num_of_orphan,w
  5040  005A  07A8               	addwf	get_num_of_orphan@row,f
  5041  005B  1FA8               	btfss	get_num_of_orphan@row,7
  5042  005C  281D               	goto	l2944
  5043  005D                     l2960:	
  5044  005D  3001               	movlw	1
  5045  005E  00A0               	movwf	??_get_num_of_orphan
  5046  005F  0820               	movf	??_get_num_of_orphan,w
  5047  0060  07A7               	addwf	get_num_of_orphan@col,f
  5048  0061  3008               	movlw	8
  5049  0062  0227               	subwf	get_num_of_orphan@col,w
  5050  0063  1C03               	skipc
  5051  0064  2813               	goto	l2938
  5052  0065                     l2964:	
  5053                           
  5054                           ;teris_16f886.c: 1064: }
  5055                           ;teris_16f886.c: 1065: }
  5056                           ;teris_16f886.c: 1066: }
  5057                           ;teris_16f886.c: 1071: return risk;
  5058  0065  0824               	movf	get_num_of_orphan@risk+1,w
  5059  0066  00FD               	movwf	?_get_num_of_orphan+1
  5060  0067  0823               	movf	get_num_of_orphan@risk,w
  5061  0068  00FC               	movwf	?_get_num_of_orphan
  5062  0069  0008               	return
  5063  006A                     __end_of_get_num_of_orphan:	
  5064                           
  5065                           	psect	text21
  5066  049D                     __ptext21:	
  5067 ;; *************** function _get_holes_after_merge *****************
  5068 ;; Defined at:
  5069 ;;		line 1183 in file "teris_16f886.c"
  5070 ;; Parameters:    Size  Location     Type
  5071 ;;  matrix          1    wreg     PTR struct .
  5072 ;;		 -> temp_matrix16x8(16), 
  5073 ;; Auto vars:     Size  Location     Type
  5074 ;;  matrix          1    9[BANK0 ] PTR struct .
  5075 ;;		 -> temp_matrix16x8(16), 
  5076 ;;  row             1   11[BANK0 ] char 
  5077 ;;  col             1   10[BANK0 ] char 
  5078 ;;  start           1    8[BANK0 ] char 
  5079 ;;  stop            1    7[BANK0 ] char 
  5080 ;;  num_hole        1    6[BANK0 ] unsigned char 
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  1    wreg      unsigned char 
  5083 ;; Registers used:
  5084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5090 ;;      Params:         0       0       0       0       0
  5091 ;;      Locals:         0       6       0       0       0
  5092 ;;      Temps:          0       6       0       0       0
  5093 ;;      Totals:         0      12       0       0       0
  5094 ;;Total ram usage:       12 bytes
  5095 ;; Hardware stack levels used:    1
  5096 ;; Hardware stack levels required when called:    3
  5097 ;; This function calls:
  5098 ;;		_get_matrix_bit
  5099 ;; This function is called by:
  5100 ;;		_find_best_solution
  5101 ;; This function uses a non-reentrant model
  5102 ;;
  5103                           
  5104                           
  5105                           ;psect for function _get_holes_after_merge
  5106  049D                     _get_holes_after_merge:	
  5107                           
  5108                           ;incstack = 0
  5109                           ; Regs used in _get_holes_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  5110                           ;get_holes_after_merge@matrix stored from wreg
  5111  049D  1283               	bcf	3,5	;RP0=0, select bank0
  5112  049E  1303               	bcf	3,6	;RP1=0, select bank0
  5113  049F  00A9               	movwf	get_holes_after_merge@matrix
  5114                           
  5115                           ;teris_16f886.c: 1185: int8_t start = -1;
  5116  04A0  01A8               	clrf	get_holes_after_merge@start
  5117  04A1  03A8               	decf	get_holes_after_merge@start,f
  5118                           
  5119                           ;teris_16f886.c: 1186: int8_t stop = -1;
  5120  04A2  01A7               	clrf	get_holes_after_merge@stop
  5121  04A3  03A7               	decf	get_holes_after_merge@stop,f
  5122                           
  5123                           ;teris_16f886.c: 1187: uint8_t num_hole = 0;
  5124  04A4  01A6               	clrf	get_holes_after_merge@num_hole
  5125                           
  5126                           ;teris_16f886.c: 1188: for(int8_t col = 0; col < 8; col++)
  5127  04A5  01AA               	clrf	get_holes_after_merge@col
  5128  04A6  082A               	movf	get_holes_after_merge@col,w
  5129  04A7  3A80               	xorlw	128
  5130  04A8  3E78               	addlw	-136
  5131  04A9  1803               	btfsc	3,0
  5132  04AA  2DA9               	goto	l3154
  5133  04AB                     l3092:	
  5134                           
  5135                           ;teris_16f886.c: 1189: {
  5136                           ;teris_16f886.c: 1190: start = stop = -1;
  5137  04AB  30FF               	movlw	255
  5138  04AC  00A7               	movwf	get_holes_after_merge@stop
  5139  04AD  00A0               	movwf	??_get_holes_after_merge
  5140  04AE  0820               	movf	??_get_holes_after_merge,w
  5141  04AF  00A8               	movwf	get_holes_after_merge@start
  5142                           
  5143                           ;teris_16f886.c: 1191: for(int8_t row = 0; row < 16; row++)
  5144  04B0  01AB               	clrf	get_holes_after_merge@row
  5145  04B1  082B               	movf	get_holes_after_merge@row,w
  5146  04B2  3A80               	xorlw	128
  5147  04B3  3E70               	addlw	-144
  5148  04B4  1803               	btfsc	3,0
  5149  04B5  2D73               	goto	l451
  5150  04B6                     l3100:	
  5151                           
  5152                           ;teris_16f886.c: 1192: {
  5153                           ;teris_16f886.c: 1193: if(col == 0)
  5154  04B6  082A               	movf	get_holes_after_merge@col,w
  5155  04B7  1D03               	btfss	3,2
  5156  04B8  2CCC               	goto	l3110
  5157                           
  5158                           ;teris_16f886.c: 1194: {
  5159                           ;teris_16f886.c: 1195: if((get_matrix_bit(matrix->row, row, col) == 0) && (get_matrix_bi
      +                          t(matrix->row, row, col + 1) == 1))
  5160  04B9  0829               	movf	get_holes_after_merge@matrix,w
  5161  04BA  00F7               	movwf	get_matrix_bit@byte
  5162  04BB  3000               	movlw	0
  5163  04BC  00F8               	movwf	get_matrix_bit@byte+1
  5164  04BD  082B               	movf	get_holes_after_merge@row,w
  5165  04BE  00A0               	movwf	??_get_holes_after_merge
  5166  04BF  0820               	movf	??_get_holes_after_merge,w
  5167  04C0  00F9               	movwf	get_matrix_bit@row
  5168  04C1  082A               	movf	get_holes_after_merge@col,w
  5169  04C2  00A1               	movwf	??_get_holes_after_merge+1
  5170  04C3  0821               	movf	??_get_holes_after_merge+1,w
  5171  04C4  00FA               	movwf	get_matrix_bit@col
  5172  04C5  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  5173  04CA  3A00               	xorlw	0
  5174  04CB  2D1A               	goto	L9
  5175  04CC                     l3110:	
  5176                           ;teris_16f886.c: 1200: }
  5177                           ;teris_16f886.c: 1201: }
  5178                           ;teris_16f886.c: 1202: }
  5179                           
  5180                           ;teris_16f886.c: 1198: {
  5181                           ;teris_16f886.c: 1199: start = row;
  5182                           
  5183                           ;teris_16f886.c: 1196: {
  5184                           ;teris_16f886.c: 1197: if(start == -1)
  5185                           
  5186                           
  5187                           ;teris_16f886.c: 1203: else if(col == 8 - 1)
  5188  04CC  3007               	movlw	7
  5189  04CD  062A               	xorwf	get_holes_after_merge@col,w
  5190  04CE  1D03               	btfss	3,2
  5191  04CF  2CF1               	goto	l3120
  5192                           
  5193                           ;teris_16f886.c: 1204: {
  5194                           ;teris_16f886.c: 1205: if((get_matrix_bit(matrix->row, row, col) == 0) && (get_matrix_bi
      +                          t(matrix->row, row, col - 1) == 1))
  5195  04D0  0829               	movf	get_holes_after_merge@matrix,w
  5196  04D1  00F7               	movwf	get_matrix_bit@byte
  5197  04D2  3000               	movlw	0
  5198  04D3  00F8               	movwf	get_matrix_bit@byte+1
  5199  04D4  082B               	movf	get_holes_after_merge@row,w
  5200  04D5  00A0               	movwf	??_get_holes_after_merge
  5201  04D6  0820               	movf	??_get_holes_after_merge,w
  5202  04D7  00F9               	movwf	get_matrix_bit@row
  5203  04D8  082A               	movf	get_holes_after_merge@col,w
  5204  04D9  00A1               	movwf	??_get_holes_after_merge+1
  5205  04DA  0821               	movf	??_get_holes_after_merge+1,w
  5206  04DB  00FA               	movwf	get_matrix_bit@col
  5207  04DC  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  5208  04E1  3A00               	xorlw	0
  5209  04E2  1D03               	skipz
  5210  04E3  2D3C               	goto	l3130
  5211  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  5212  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  5213  04E6  0829               	movf	get_holes_after_merge@matrix,w
  5214  04E7  00F7               	movwf	get_matrix_bit@byte
  5215  04E8  3000               	movlw	0
  5216  04E9  00F8               	movwf	get_matrix_bit@byte+1
  5217  04EA  082B               	movf	get_holes_after_merge@row,w
  5218  04EB  00A0               	movwf	??_get_holes_after_merge
  5219  04EC  0820               	movf	??_get_holes_after_merge,w
  5220  04ED  00F9               	movwf	get_matrix_bit@row
  5221  04EE  082A               	movf	get_holes_after_merge@col,w
  5222  04EF  3EFF               	addlw	255
  5223  04F0  2D28               	goto	L10
  5224  04F1                     l3120:	
  5225                           ;teris_16f886.c: 1210: }
  5226                           ;teris_16f886.c: 1211: }
  5227                           ;teris_16f886.c: 1212: }
  5228                           
  5229                           ;teris_16f886.c: 1208: {
  5230                           ;teris_16f886.c: 1209: start = row;
  5231                           
  5232                           ;teris_16f886.c: 1206: {
  5233                           ;teris_16f886.c: 1207: if(start == -1)
  5234                           
  5235                           
  5236                           ;teris_16f886.c: 1213: else
  5237                           ;teris_16f886.c: 1214: {
  5238                           ;teris_16f886.c: 1215: if((get_matrix_bit(matrix->row, row, col) == 0) && (get_matrix_bi
      +                          t(matrix->row, row, col - 1) == 1) && (get_matrix_bit(matrix->row, row, col + 1) == 1))
  5239  04F1  0829               	movf	get_holes_after_merge@matrix,w
  5240  04F2  00F7               	movwf	get_matrix_bit@byte
  5241  04F3  3000               	movlw	0
  5242  04F4  00F8               	movwf	get_matrix_bit@byte+1
  5243  04F5  082B               	movf	get_holes_after_merge@row,w
  5244  04F6  00A0               	movwf	??_get_holes_after_merge
  5245  04F7  0820               	movf	??_get_holes_after_merge,w
  5246  04F8  00F9               	movwf	get_matrix_bit@row
  5247  04F9  082A               	movf	get_holes_after_merge@col,w
  5248  04FA  00A1               	movwf	??_get_holes_after_merge+1
  5249  04FB  0821               	movf	??_get_holes_after_merge+1,w
  5250  04FC  00FA               	movwf	get_matrix_bit@col
  5251  04FD  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  5252  0502  3A00               	xorlw	0
  5253  0503  1D03               	skipz
  5254  0504  2D3C               	goto	l3130
  5255  0505  1283               	bcf	3,5	;RP0=0, select bank0
  5256  0506  1303               	bcf	3,6	;RP1=0, select bank0
  5257  0507  0829               	movf	get_holes_after_merge@matrix,w
  5258  0508  00F7               	movwf	get_matrix_bit@byte
  5259  0509  3000               	movlw	0
  5260  050A  00F8               	movwf	get_matrix_bit@byte+1
  5261  050B  082B               	movf	get_holes_after_merge@row,w
  5262  050C  00A0               	movwf	??_get_holes_after_merge
  5263  050D  0820               	movf	??_get_holes_after_merge,w
  5264  050E  00F9               	movwf	get_matrix_bit@row
  5265  050F  082A               	movf	get_holes_after_merge@col,w
  5266  0510  3EFF               	addlw	255
  5267  0511  00A1               	movwf	??_get_holes_after_merge+1
  5268  0512  0821               	movf	??_get_holes_after_merge+1,w
  5269  0513  00FA               	movwf	get_matrix_bit@col
  5270  0514  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  5271  0519  3A01               	xorlw	1
  5272  051A                     L9:	
  5273  051A  1D03               	skipz
  5274  051B  2D3C               	goto	l3130
  5275  051C  1283               	bcf	3,5	;RP0=0, select bank0
  5276  051D  1303               	bcf	3,6	;RP1=0, select bank0
  5277  051E  0829               	movf	get_holes_after_merge@matrix,w
  5278  051F  00F7               	movwf	get_matrix_bit@byte
  5279  0520  3000               	movlw	0
  5280  0521  00F8               	movwf	get_matrix_bit@byte+1
  5281  0522  082B               	movf	get_holes_after_merge@row,w
  5282  0523  00A0               	movwf	??_get_holes_after_merge
  5283  0524  0820               	movf	??_get_holes_after_merge,w
  5284  0525  00F9               	movwf	get_matrix_bit@row
  5285  0526  082A               	movf	get_holes_after_merge@col,w
  5286  0527  3E01               	addlw	1
  5287  0528                     L10:	
  5288  0528  00A1               	movwf	??_get_holes_after_merge+1
  5289  0529  0821               	movf	??_get_holes_after_merge+1,w
  5290  052A  00FA               	movwf	get_matrix_bit@col
  5291  052B  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  5292  0530  3A01               	xorlw	1
  5293  0531  1D03               	skipz
  5294  0532  2D3C               	goto	l3130
  5295                           
  5296                           ;teris_16f886.c: 1216: {
  5297                           ;teris_16f886.c: 1217: if(start == -1)
  5298  0533  1283               	bcf	3,5	;RP0=0, select bank0
  5299  0534  1303               	bcf	3,6	;RP1=0, select bank0
  5300  0535  0A28               	incf	get_holes_after_merge@start,w
  5301  0536  1D03               	btfss	3,2
  5302  0537  2D3C               	goto	l3130
  5303                           
  5304                           ;teris_16f886.c: 1218: {
  5305                           ;teris_16f886.c: 1219: start = row;
  5306  0538  082B               	movf	get_holes_after_merge@row,w
  5307  0539  00A0               	movwf	??_get_holes_after_merge
  5308  053A  0820               	movf	??_get_holes_after_merge,w
  5309  053B  00A8               	movwf	get_holes_after_merge@start
  5310  053C                     l3130:	
  5311                           
  5312                           ;teris_16f886.c: 1220: }
  5313                           ;teris_16f886.c: 1221: }
  5314                           ;teris_16f886.c: 1222: }
  5315                           ;teris_16f886.c: 1223: if(start >= 0)
  5316  053C  1283               	bcf	3,5	;RP0=0, select bank0
  5317  053D  1303               	bcf	3,6	;RP1=0, select bank0
  5318  053E  1BA8               	btfsc	get_holes_after_merge@start,7
  5319  053F  2D68               	goto	l462
  5320                           
  5321                           ;teris_16f886.c: 1224: {
  5322                           ;teris_16f886.c: 1225: if(row == 16 - 1)
  5323  0540  300F               	movlw	15
  5324  0541  062B               	xorwf	get_holes_after_merge@row,w
  5325  0542  1D03               	btfss	3,2
  5326  0543  2D49               	goto	l3138
  5327                           
  5328                           ;teris_16f886.c: 1226: {
  5329                           ;teris_16f886.c: 1227: if(stop == -1)
  5330  0544  0A27               	incf	get_holes_after_merge@stop,w
  5331  0545  1D03               	btfss	3,2
  5332  0546  2D68               	goto	l462
  5333                           
  5334                           ;teris_16f886.c: 1228: {
  5335                           ;teris_16f886.c: 1229: stop = 16;
  5336  0547  3010               	movlw	16
  5337  0548  2D65               	goto	L8
  5338  0549                     l3138:	
  5339                           ;teris_16f886.c: 1230: }
  5340                           ;teris_16f886.c: 1231: }
  5341                           
  5342                           
  5343                           ;teris_16f886.c: 1232: else if(get_matrix_bit(matrix->row, row + 1, col) == 1)
  5344  0549  0829               	movf	get_holes_after_merge@matrix,w
  5345  054A  00F7               	movwf	get_matrix_bit@byte
  5346  054B  3000               	movlw	0
  5347  054C  00F8               	movwf	get_matrix_bit@byte+1
  5348  054D  082B               	movf	get_holes_after_merge@row,w
  5349  054E  3E01               	addlw	1
  5350  054F  00A0               	movwf	??_get_holes_after_merge
  5351  0550  0820               	movf	??_get_holes_after_merge,w
  5352  0551  00F9               	movwf	get_matrix_bit@row
  5353  0552  082A               	movf	get_holes_after_merge@col,w
  5354  0553  00A1               	movwf	??_get_holes_after_merge+1
  5355  0554  0821               	movf	??_get_holes_after_merge+1,w
  5356  0555  00FA               	movwf	get_matrix_bit@col
  5357  0556  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  5358  055B  3A01               	xorlw	1
  5359  055C  1D03               	skipz
  5360  055D  2D68               	goto	l462
  5361                           
  5362                           ;teris_16f886.c: 1233: {
  5363                           ;teris_16f886.c: 1234: if(stop == -1)
  5364  055E  1283               	bcf	3,5	;RP0=0, select bank0
  5365  055F  1303               	bcf	3,6	;RP1=0, select bank0
  5366  0560  0A27               	incf	get_holes_after_merge@stop,w
  5367  0561  1D03               	btfss	3,2
  5368  0562  2D68               	goto	l462
  5369                           
  5370                           ;teris_16f886.c: 1235: {
  5371                           ;teris_16f886.c: 1236: stop = row + 1;
  5372  0563  082B               	movf	get_holes_after_merge@row,w
  5373  0564  3E01               	addlw	1
  5374  0565                     L8:	
  5375  0565  00A0               	movwf	??_get_holes_after_merge
  5376  0566  0820               	movf	??_get_holes_after_merge,w
  5377  0567  00A7               	movwf	get_holes_after_merge@stop
  5378  0568                     l462:	
  5379  0568  3001               	movlw	1
  5380  0569  1283               	bcf	3,5	;RP0=0, select bank0
  5381  056A  1303               	bcf	3,6	;RP1=0, select bank0
  5382  056B  00A0               	movwf	??_get_holes_after_merge
  5383  056C  0820               	movf	??_get_holes_after_merge,w
  5384  056D  07AB               	addwf	get_holes_after_merge@row,f
  5385  056E  082B               	movf	get_holes_after_merge@row,w
  5386  056F  3A80               	xorlw	128
  5387  0570  3E70               	addlw	-144
  5388  0571  1C03               	skipc
  5389  0572  2CB6               	goto	l3100
  5390  0573                     l451:	
  5391                           
  5392                           ;teris_16f886.c: 1237: }
  5393                           ;teris_16f886.c: 1238: }
  5394                           ;teris_16f886.c: 1239: }
  5395                           ;teris_16f886.c: 1241: }
  5396                           ;teris_16f886.c: 1242: if((start >= 0) && (stop >= 0) && (stop - start >= 3))
  5397  0573  1FA8               	btfss	get_holes_after_merge@start,7
  5398  0574  1BA7               	btfsc	get_holes_after_merge@stop,7
  5399  0575  2D9E               	goto	l468
  5400  0576  0828               	movf	get_holes_after_merge@start,w
  5401  0577  00A0               	movwf	??_get_holes_after_merge
  5402  0578  01A1               	clrf	??_get_holes_after_merge+1
  5403  0579  1BA0               	btfsc	??_get_holes_after_merge,7
  5404  057A  03A1               	decf	??_get_holes_after_merge+1,f
  5405  057B  09A0               	comf	??_get_holes_after_merge,f
  5406  057C  09A1               	comf	??_get_holes_after_merge+1,f
  5407  057D  0AA0               	incf	??_get_holes_after_merge,f
  5408  057E  1903               	skipnz
  5409  057F  0AA1               	incf	??_get_holes_after_merge+1,f
  5410  0580  0827               	movf	get_holes_after_merge@stop,w
  5411  0581  00A2               	movwf	??_get_holes_after_merge+2
  5412  0582  01A3               	clrf	??_get_holes_after_merge+3
  5413  0583  1BA2               	btfsc	??_get_holes_after_merge+2,7
  5414  0584  03A3               	decf	??_get_holes_after_merge+3,f
  5415  0585  0820               	movf	??_get_holes_after_merge,w
  5416  0586  0722               	addwf	??_get_holes_after_merge+2,w
  5417  0587  00A4               	movwf	??_get_holes_after_merge+4
  5418  0588  0821               	movf	??_get_holes_after_merge+1,w
  5419  0589  1803               	skipnc
  5420  058A  0A21               	incf	??_get_holes_after_merge+1,w
  5421  058B  0723               	addwf	??_get_holes_after_merge+3,w
  5422  058C  00A5               	movwf	??_get_holes_after_merge+5
  5423  058D  0825               	movf	??_get_holes_after_merge+5,w
  5424  058E  3A80               	xorlw	128
  5425  058F  00FF               	movwf	127
  5426  0590  3080               	movlw	128
  5427  0591  027F               	subwf	127,w
  5428  0592  1D03               	skipz
  5429  0593  2D96               	goto	u3305
  5430  0594  3003               	movlw	3
  5431  0595  0224               	subwf	??_get_holes_after_merge+4,w
  5432  0596                     u3305:	
  5433  0596  1C03               	skipc
  5434  0597  2D9E               	goto	l468
  5435                           
  5436                           ;teris_16f886.c: 1243: {
  5437                           ;teris_16f886.c: 1249: num_hole++;
  5438  0598  3001               	movlw	1
  5439  0599  1283               	bcf	3,5	;RP0=0, select bank0
  5440  059A  1303               	bcf	3,6	;RP1=0, select bank0
  5441  059B  00A0               	movwf	??_get_holes_after_merge
  5442  059C  0820               	movf	??_get_holes_after_merge,w
  5443  059D  07A6               	addwf	get_holes_after_merge@num_hole,f
  5444  059E                     l468:	
  5445  059E  3001               	movlw	1
  5446  059F  1283               	bcf	3,5	;RP0=0, select bank0
  5447  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  5448  05A1  00A0               	movwf	??_get_holes_after_merge
  5449  05A2  0820               	movf	??_get_holes_after_merge,w
  5450  05A3  07AA               	addwf	get_holes_after_merge@col,f
  5451  05A4  082A               	movf	get_holes_after_merge@col,w
  5452  05A5  3A80               	xorlw	128
  5453  05A6  3E78               	addlw	-136
  5454  05A7  1C03               	skipc
  5455  05A8  2CAB               	goto	l3092
  5456  05A9                     l3154:	
  5457                           
  5458                           ;teris_16f886.c: 1250: }
  5459                           ;teris_16f886.c: 1251: }
  5460                           ;teris_16f886.c: 1255: return num_hole;
  5461  05A9  0826               	movf	get_holes_after_merge@num_hole,w
  5462  05AA  0008               	return
  5463  05AB                     __end_of_get_holes_after_merge:	
  5464                           
  5465                           	psect	text22
  5466  0B2D                     __ptext22:	
  5467 ;; *************** function _get_high_after_merge *****************
  5468 ;; Defined at:
  5469 ;;		line 1162 in file "teris_16f886.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;  y               1    wreg     char 
  5472 ;;  matrix          2   12[COMMON] PTR struct .
  5473 ;;		 -> NULL(0), g_matrix4x4(96), 
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;  y               1    2[BANK0 ] char 
  5476 ;;  col             1    3[BANK0 ] char 
  5477 ;;  row             1    4[BANK0 ] char 
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  1    wreg      unsigned char 
  5480 ;; Registers used:
  5481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5487 ;;      Params:         2       0       0       0       0
  5488 ;;      Locals:         0       3       0       0       0
  5489 ;;      Temps:          0       2       0       0       0
  5490 ;;      Totals:         2       5       0       0       0
  5491 ;;Total ram usage:        7 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; Hardware stack levels required when called:    3
  5494 ;; This function calls:
  5495 ;;		_get_matrix_bit
  5496 ;; This function is called by:
  5497 ;;		_find_best_solution
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           
  5502                           ;psect for function _get_high_after_merge
  5503  0B2D                     _get_high_after_merge:	
  5504                           
  5505                           ;incstack = 0
  5506                           ; Regs used in _get_high_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  5507                           ;get_high_after_merge@y stored from wreg
  5508  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  5509  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  5510  0B2F  00A2               	movwf	get_high_after_merge@y
  5511                           
  5512                           ;teris_16f886.c: 1167: for(int8_t row = 0; row < 4; row++)
  5513  0B30  01A4               	clrf	get_high_after_merge@row
  5514  0B31                     L11:	
  5515  0B31  0824               	movf	get_high_after_merge@row,w
  5516  0B32  3A80               	xorlw	128
  5517  0B33  3E7C               	addlw	-132
  5518  0B34  1803               	btfsc	3,0
  5519  0B35  0008               	return
  5520                           
  5521                           ;teris_16f886.c: 1168: {
  5522                           ;teris_16f886.c: 1169: for(int8_t col = 0; col < 4; col++)
  5523  0B36  01A3               	clrf	get_high_after_merge@col
  5524  0B37  0823               	movf	get_high_after_merge@col,w
  5525  0B38  3A80               	xorlw	128
  5526  0B39  3E7C               	addlw	-132
  5527  0B3A  1803               	btfsc	3,0
  5528  0B3B  2B63               	goto	l3080
  5529  0B3C                     l3070:	
  5530                           
  5531                           ;teris_16f886.c: 1170: {
  5532                           ;teris_16f886.c: 1171: if(get_matrix_bit(matrix->row, row, col) == 1)
  5533  0B3C  087C               	movf	get_high_after_merge@matrix,w
  5534  0B3D  00F7               	movwf	get_matrix_bit@byte
  5535  0B3E  087D               	movf	get_high_after_merge@matrix+1,w
  5536  0B3F  00F8               	movwf	get_matrix_bit@byte+1
  5537  0B40  0824               	movf	get_high_after_merge@row,w
  5538  0B41  00A0               	movwf	??_get_high_after_merge
  5539  0B42  0820               	movf	??_get_high_after_merge,w
  5540  0B43  00F9               	movwf	get_matrix_bit@row
  5541  0B44  0823               	movf	get_high_after_merge@col,w
  5542  0B45  00A1               	movwf	??_get_high_after_merge+1
  5543  0B46  0821               	movf	??_get_high_after_merge+1,w
  5544  0B47  00FA               	movwf	get_matrix_bit@col
  5545  0B48  160A  118A  273D  120A  158A  	fcall	_get_matrix_bit
  5546  0B4D  3A01               	xorlw	1
  5547  0B4E  1D03               	skipz
  5548  0B4F  2B58               	goto	l3076
  5549                           
  5550                           ;teris_16f886.c: 1172: {
  5551                           ;teris_16f886.c: 1178: return (uint8_t)(16 - y - row);
  5552  0B50  1283               	bcf	3,5	;RP0=0, select bank0
  5553  0B51  1303               	bcf	3,6	;RP1=0, select bank0
  5554  0B52  0824               	movf	get_high_after_merge@row,w
  5555  0B53  0722               	addwf	get_high_after_merge@y,w
  5556  0B54  3AFF               	xorlw	255
  5557  0B55  3E01               	addlw	1
  5558  0B56  3E10               	addlw	16
  5559  0B57  0008               	return
  5560  0B58                     l3076:	
  5561  0B58  3001               	movlw	1
  5562  0B59  1283               	bcf	3,5	;RP0=0, select bank0
  5563  0B5A  1303               	bcf	3,6	;RP1=0, select bank0
  5564  0B5B  00A0               	movwf	??_get_high_after_merge
  5565  0B5C  0820               	movf	??_get_high_after_merge,w
  5566  0B5D  07A3               	addwf	get_high_after_merge@col,f
  5567  0B5E  0823               	movf	get_high_after_merge@col,w
  5568  0B5F  3A80               	xorlw	128
  5569  0B60  3E7C               	addlw	-132
  5570  0B61  1C03               	skipc
  5571  0B62  2B3C               	goto	l3070
  5572  0B63                     l3080:	
  5573  0B63  3001               	movlw	1
  5574  0B64  00A0               	movwf	??_get_high_after_merge
  5575  0B65  0820               	movf	??_get_high_after_merge,w
  5576  0B66  07A4               	addwf	get_high_after_merge@row,f
  5577  0B67  2B31               	goto	L11
  5578  0B68                     __end_of_get_high_after_merge:	
  5579                           
  5580                           	psect	text23
  5581  09C0                     __ptext23:	
  5582 ;; *************** function _get_high *****************
  5583 ;; Defined at:
  5584 ;;		line 1148 in file "teris_16f886.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;  matrix          1    wreg     PTR struct .
  5587 ;;		 -> g_matrix16x8(16), 
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;  matrix          1    3[COMMON] PTR struct .
  5590 ;;		 -> g_matrix16x8(16), 
  5591 ;;  row             1    4[COMMON] char 
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  1    wreg      unsigned char 
  5594 ;; Registers used:
  5595 ;;		wreg, status,2, status,0, pclath, cstack
  5596 ;; Tracked objects:
  5597 ;;		On entry : 0/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5601 ;;      Params:         0       0       0       0       0
  5602 ;;      Locals:         2       0       0       0       0
  5603 ;;      Temps:          1       0       0       0       0
  5604 ;;      Totals:         3       0       0       0       0
  5605 ;;Total ram usage:        3 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; Hardware stack levels required when called:    1
  5608 ;; This function calls:
  5609 ;;		_is_row_empty
  5610 ;; This function is called by:
  5611 ;;		_find_best_solution
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           
  5616                           ;psect for function _get_high
  5617  09C0                     _get_high:	
  5618                           
  5619                           ;incstack = 0
  5620                           ; Regs used in _get_high: [wreg+status,2+status,0+pclath+cstack]
  5621                           ;get_high@matrix stored from wreg
  5622  09C0  00F3               	movwf	get_high@matrix
  5623                           
  5624                           ;teris_16f886.c: 1150: for(int8_t row = 16 - 1; row >= 0; row--)
  5625  09C1  300F               	movlw	15
  5626  09C2  00F2               	movwf	??_get_high
  5627  09C3  0872               	movf	??_get_high,w
  5628  09C4  00F4               	movwf	get_high@row
  5629  09C5  1BF4               	btfsc	get_high@row,7
  5630  09C6  29E0               	goto	l3054
  5631  09C7                     l3044:	
  5632                           
  5633                           ;teris_16f886.c: 1151: {
  5634                           ;teris_16f886.c: 1152: if(is_row_empty(matrix, row) == 1)
  5635  09C7  0874               	movf	get_high@row,w
  5636  09C8  00F2               	movwf	??_get_high
  5637  09C9  0872               	movf	??_get_high,w
  5638  09CA  00F0               	movwf	is_row_empty@row
  5639  09CB  0873               	movf	get_high@matrix,w
  5640  09CC  160A  118A  270F  120A  158A  	fcall	_is_row_empty
  5641  09D1  3A01               	xorlw	1
  5642  09D2  1D03               	skipz
  5643  09D3  29DA               	goto	l3050
  5644                           
  5645                           ;teris_16f886.c: 1153: {
  5646                           ;teris_16f886.c: 1157: return (uint8_t)(16 - row - 1);
  5647  09D4  0874               	movf	get_high@row,w
  5648  09D5  3E01               	addlw	1
  5649  09D6  3AFF               	xorlw	255
  5650  09D7  3E01               	addlw	1
  5651  09D8  3E10               	addlw	16
  5652  09D9  0008               	return
  5653  09DA                     l3050:	
  5654  09DA  30FF               	movlw	255
  5655  09DB  00F2               	movwf	??_get_high
  5656  09DC  0872               	movf	??_get_high,w
  5657  09DD  07F4               	addwf	get_high@row,f
  5658  09DE  1FF4               	btfss	get_high@row,7
  5659  09DF  29C7               	goto	l3044
  5660  09E0                     l3054:	
  5661                           
  5662                           ;teris_16f886.c: 1158: }
  5663                           ;teris_16f886.c: 1159: }
  5664                           ;teris_16f886.c: 1160: return 16;
  5665  09E0  3010               	movlw	16
  5666  09E1  0008               	return
  5667  09E2                     __end_of_get_high:	
  5668                           
  5669                           	psect	text24
  5670  170F                     __ptext24:	
  5671 ;; *************** function _is_row_empty *****************
  5672 ;; Defined at:
  5673 ;;		line 826 in file "teris_16f886.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;  matrix          1    wreg     PTR const struct .
  5676 ;;		 -> g_matrix16x8(16), 
  5677 ;;  row             1    0[COMMON] unsigned char 
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;  matrix          1    1[COMMON] PTR const struct .
  5680 ;;		 -> g_matrix16x8(16), 
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  1    wreg      unsigned char 
  5683 ;; Registers used:
  5684 ;;		wreg, status,2, status,0
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5690 ;;      Params:         1       0       0       0       0
  5691 ;;      Locals:         1       0       0       0       0
  5692 ;;      Temps:          0       0       0       0       0
  5693 ;;      Totals:         2       0       0       0       0
  5694 ;;Total ram usage:        2 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; This function calls:
  5697 ;;		Nothing
  5698 ;; This function is called by:
  5699 ;;		_get_high
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           
  5704                           ;psect for function _is_row_empty
  5705  170F                     _is_row_empty:	
  5706                           
  5707                           ;incstack = 0
  5708                           ; Regs used in _is_row_empty: [wreg+status,2+status,0]
  5709                           ;is_row_empty@matrix stored from wreg
  5710  170F  00F1               	movwf	is_row_empty@matrix
  5711                           
  5712                           ;teris_16f886.c: 828: if(matrix->row == 0x0)
  5713  1710  0871               	movf	is_row_empty@matrix,w
  5714  1711  1D03               	btfss	3,2
  5715  1712  2F15               	goto	l2680
  5716                           
  5717                           ;teris_16f886.c: 829: {
  5718                           ;teris_16f886.c: 830: return 1;
  5719  1713  3001               	movlw	1
  5720  1714  0008               	return
  5721  1715                     l2680:	
  5722                           
  5723                           ;teris_16f886.c: 831: }
  5724                           ;teris_16f886.c: 832: return 0;
  5725  1715  3000               	movlw	0
  5726  1716  0008               	return
  5727  1717                     __end_of_is_row_empty:	
  5728                           
  5729                           	psect	text25
  5730  006A                     __ptext25:	
  5731 ;; *************** function _get_heavy *****************
  5732 ;; Defined at:
  5733 ;;		line 1073 in file "teris_16f886.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;  matrix          1    wreg     PTR const struct .
  5736 ;;		 -> temp_matrix16x8(16), 
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;  matrix          1    6[BANK0 ] PTR const struct .
  5739 ;;		 -> temp_matrix16x8(16), 
  5740 ;;  row             1    9[BANK0 ] char 
  5741 ;;  col             1    8[BANK0 ] unsigned char 
  5742 ;;  risk            2    3[BANK0 ] unsigned int 
  5743 ;;  pre             1    7[BANK0 ] unsigned char 
  5744 ;;  start           1    5[BANK0 ] unsigned char 
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  2   12[COMMON] unsigned int 
  5747 ;; Registers used:
  5748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5754 ;;      Params:         2       0       0       0       0
  5755 ;;      Locals:         0       7       0       0       0
  5756 ;;      Temps:          0       3       0       0       0
  5757 ;;      Totals:         2      10       0       0       0
  5758 ;;Total ram usage:       12 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    3
  5761 ;; This function calls:
  5762 ;;		_get_matrix_bit
  5763 ;; This function is called by:
  5764 ;;		_find_best_solution
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           
  5769                           ;psect for function _get_heavy
  5770  006A                     _get_heavy:	
  5771                           
  5772                           ;incstack = 0
  5773                           ; Regs used in _get_heavy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5774                           ;get_heavy@matrix stored from wreg
  5775  006A  1283               	bcf	3,5	;RP0=0, select bank0
  5776  006B  1303               	bcf	3,6	;RP1=0, select bank0
  5777  006C  00A6               	movwf	get_heavy@matrix
  5778                           
  5779                           ;teris_16f886.c: 1075: uint8_t start;
  5780                           ;teris_16f886.c: 1076: uint16_t risk = 0;
  5781  006D  01A3               	clrf	get_heavy@risk
  5782  006E  01A4               	clrf	get_heavy@risk+1
  5783                           
  5784                           ;teris_16f886.c: 1077: uint8_t pre = 0xFF;
  5785  006F  30FF               	movlw	255
  5786  0070  00A0               	movwf	??_get_heavy
  5787  0071  0820               	movf	??_get_heavy,w
  5788  0072  00A7               	movwf	get_heavy@pre
  5789                           
  5790                           ;teris_16f886.c: 1078: for(uint8_t col = 0; col < 8; col++)
  5791  0073  01A8               	clrf	get_heavy@col
  5792  0074  3008               	movlw	8
  5793  0075  0228               	subwf	get_heavy@col,w
  5794  0076  1803               	btfsc	3,0
  5795  0077  28E7               	goto	l3010
  5796  0078                     l2976:	
  5797                           
  5798                           ;teris_16f886.c: 1079: {
  5799                           ;teris_16f886.c: 1080: pre = 0xFF;
  5800  0078  30FF               	movlw	255
  5801  0079  00A0               	movwf	??_get_heavy
  5802  007A  0820               	movf	??_get_heavy,w
  5803  007B  00A7               	movwf	get_heavy@pre
  5804                           
  5805                           ;teris_16f886.c: 1081: start = 0;
  5806  007C  01A5               	clrf	get_heavy@start
  5807                           
  5808                           ;teris_16f886.c: 1082: for(int8_t row = 16 - 1; row >= 0; row--)
  5809  007D  300F               	movlw	15
  5810  007E  00A0               	movwf	??_get_heavy
  5811  007F  0820               	movf	??_get_heavy,w
  5812  0080  00A9               	movwf	get_heavy@row
  5813  0081  1BA9               	btfsc	get_heavy@row,7
  5814  0082  28DF               	goto	l3006
  5815  0083                     l2986:	
  5816                           
  5817                           ;teris_16f886.c: 1083: {
  5818                           ;teris_16f886.c: 1084: if(pre == 0xFF)
  5819  0083  0A27               	incf	get_heavy@pre,w
  5820  0084  1D03               	btfss	3,2
  5821  0085  289D               	goto	l2990
  5822                           
  5823                           ;teris_16f886.c: 1085: {
  5824                           ;teris_16f886.c: 1086: pre = get_matrix_bit(matrix->row, row, col);
  5825  0086  0826               	movf	get_heavy@matrix,w
  5826  0087  00F7               	movwf	get_matrix_bit@byte
  5827  0088  3000               	movlw	0
  5828  0089  00F8               	movwf	get_matrix_bit@byte+1
  5829  008A  0829               	movf	get_heavy@row,w
  5830  008B  00A0               	movwf	??_get_heavy
  5831  008C  0820               	movf	??_get_heavy,w
  5832  008D  00F9               	movwf	get_matrix_bit@row
  5833  008E  0828               	movf	get_heavy@col,w
  5834  008F  00A1               	movwf	??_get_heavy+1
  5835  0090  0821               	movf	??_get_heavy+1,w
  5836  0091  00FA               	movwf	get_matrix_bit@col
  5837  0092  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  5838  0097  1283               	bcf	3,5	;RP0=0, select bank0
  5839  0098  1303               	bcf	3,6	;RP1=0, select bank0
  5840  0099  00A2               	movwf	??_get_heavy+2
  5841  009A  0822               	movf	??_get_heavy+2,w
  5842  009B  00A7               	movwf	get_heavy@pre
  5843                           
  5844                           ;teris_16f886.c: 1087: }
  5845  009C  28D9               	goto	l3002
  5846  009D                     l2990:	
  5847                           
  5848                           ;teris_16f886.c: 1088: else
  5849                           ;teris_16f886.c: 1089: {
  5850                           ;teris_16f886.c: 1090: if(pre != get_matrix_bit(matrix->row, row, col))
  5851  009D  0826               	movf	get_heavy@matrix,w
  5852  009E  00F7               	movwf	get_matrix_bit@byte
  5853  009F  3000               	movlw	0
  5854  00A0  00F8               	movwf	get_matrix_bit@byte+1
  5855  00A1  0829               	movf	get_heavy@row,w
  5856  00A2  00A0               	movwf	??_get_heavy
  5857  00A3  0820               	movf	??_get_heavy,w
  5858  00A4  00F9               	movwf	get_matrix_bit@row
  5859  00A5  0828               	movf	get_heavy@col,w
  5860  00A6  00A1               	movwf	??_get_heavy+1
  5861  00A7  0821               	movf	??_get_heavy+1,w
  5862  00A8  00FA               	movwf	get_matrix_bit@col
  5863  00A9  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  5864  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  5865  00AF  1303               	bcf	3,6	;RP1=0, select bank0
  5866  00B0  0627               	xorwf	get_heavy@pre,w
  5867  00B1  1903               	skipnz
  5868  00B2  28D0               	goto	l2998
  5869                           
  5870                           ;teris_16f886.c: 1091: {
  5871                           ;teris_16f886.c: 1092: pre = get_matrix_bit(matrix->row, row, col);
  5872  00B3  0826               	movf	get_heavy@matrix,w
  5873  00B4  00F7               	movwf	get_matrix_bit@byte
  5874  00B5  3000               	movlw	0
  5875  00B6  00F8               	movwf	get_matrix_bit@byte+1
  5876  00B7  0829               	movf	get_heavy@row,w
  5877  00B8  00A0               	movwf	??_get_heavy
  5878  00B9  0820               	movf	??_get_heavy,w
  5879  00BA  00F9               	movwf	get_matrix_bit@row
  5880  00BB  0828               	movf	get_heavy@col,w
  5881  00BC  00A1               	movwf	??_get_heavy+1
  5882  00BD  0821               	movf	??_get_heavy+1,w
  5883  00BE  00FA               	movwf	get_matrix_bit@col
  5884  00BF  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  5885  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  5886  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  5887  00C6  00A2               	movwf	??_get_heavy+2
  5888  00C7  0822               	movf	??_get_heavy+2,w
  5889  00C8  00A7               	movwf	get_heavy@pre
  5890                           
  5891                           ;teris_16f886.c: 1093: if(pre == 0)
  5892  00C9  0827               	movf	get_heavy@pre,w
  5893  00CA  1D03               	btfss	3,2
  5894  00CB  28CE               	goto	l411
  5895                           
  5896                           ;teris_16f886.c: 1094: {
  5897                           ;teris_16f886.c: 1095: start = 0;
  5898  00CC  01A5               	clrf	get_heavy@start
  5899                           
  5900                           ;teris_16f886.c: 1096: }
  5901  00CD  28D0               	goto	l2998
  5902  00CE                     l411:	
  5903                           
  5904                           ;teris_16f886.c: 1097: else
  5905                           ;teris_16f886.c: 1098: {
  5906                           ;teris_16f886.c: 1099: start = 1;
  5907  00CE  01A5               	clrf	get_heavy@start
  5908  00CF  0AA5               	incf	get_heavy@start,f
  5909  00D0                     l2998:	
  5910                           
  5911                           ;teris_16f886.c: 1100: }
  5912                           ;teris_16f886.c: 1101: }
  5913                           ;teris_16f886.c: 1102: if(start == 1)
  5914  00D0  0325               	decf	get_heavy@start,w
  5915  00D1  1D03               	btfss	3,2
  5916  00D2  28D9               	goto	l3002
  5917                           
  5918                           ;teris_16f886.c: 1103: {
  5919                           ;teris_16f886.c: 1104: risk++;
  5920  00D3  3001               	movlw	1
  5921  00D4  07A3               	addwf	get_heavy@risk,f
  5922  00D5  1803               	skipnc
  5923  00D6  0AA4               	incf	get_heavy@risk+1,f
  5924  00D7  3000               	movlw	0
  5925  00D8  07A4               	addwf	get_heavy@risk+1,f
  5926  00D9                     l3002:	
  5927  00D9  30FF               	movlw	255
  5928  00DA  00A0               	movwf	??_get_heavy
  5929  00DB  0820               	movf	??_get_heavy,w
  5930  00DC  07A9               	addwf	get_heavy@row,f
  5931  00DD  1FA9               	btfss	get_heavy@row,7
  5932  00DE  2883               	goto	l2986
  5933  00DF                     l3006:	
  5934  00DF  3001               	movlw	1
  5935  00E0  00A0               	movwf	??_get_heavy
  5936  00E1  0820               	movf	??_get_heavy,w
  5937  00E2  07A8               	addwf	get_heavy@col,f
  5938  00E3  3008               	movlw	8
  5939  00E4  0228               	subwf	get_heavy@col,w
  5940  00E5  1C03               	skipc
  5941  00E6  2878               	goto	l2976
  5942  00E7                     l3010:	
  5943                           
  5944                           ;teris_16f886.c: 1105: }
  5945                           ;teris_16f886.c: 1106: }
  5946                           ;teris_16f886.c: 1107: }
  5947                           ;teris_16f886.c: 1108: }
  5948                           ;teris_16f886.c: 1113: return risk;
  5949  00E7  0824               	movf	get_heavy@risk+1,w
  5950  00E8  00FD               	movwf	?_get_heavy+1
  5951  00E9  0823               	movf	get_heavy@risk,w
  5952  00EA  00FC               	movwf	?_get_heavy
  5953  00EB  0008               	return
  5954  00EC                     __end_of_get_heavy:	
  5955                           
  5956                           	psect	text26
  5957  0F1C                     __ptext26:	
  5958 ;; *************** function _fall_off *****************
  5959 ;; Defined at:
  5960 ;;		line 953 in file "teris_16f886.c"
  5961 ;; Parameters:    Size  Location     Type
  5962 ;;  x               1    wreg     char 
  5963 ;;  y               1    0[BANK0 ] char 
  5964 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  5965 ;;		 -> NULL(0), g_matrix4x4(96), 
  5966 ;;  matrix16x8      1    3[BANK0 ] PTR const struct .
  5967 ;;		 -> g_matrix16x8(16), 
  5968 ;; Auto vars:     Size  Location     Type
  5969 ;;  x               1    4[BANK0 ] char 
  5970 ;;  col             1    5[BANK0 ] char 
  5971 ;;  row             1    6[BANK0 ] char 
  5972 ;; Return value:  Size  Location     Type
  5973 ;;                  1    wreg      unsigned char 
  5974 ;; Registers used:
  5975 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5981 ;;      Params:         0       4       0       0       0
  5982 ;;      Locals:         0       3       0       0       0
  5983 ;;      Temps:          2       0       0       0       0
  5984 ;;      Totals:         2       7       0       0       0
  5985 ;;Total ram usage:        9 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    3
  5988 ;; This function calls:
  5989 ;;		_get_matrix_bit
  5990 ;; This function is called by:
  5991 ;;		_find_best_solution
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           
  5996                           ;psect for function _fall_off
  5997  0F1C                     _fall_off:	
  5998                           
  5999                           ;incstack = 0
  6000                           ; Regs used in _fall_off: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6001                           ;fall_off@x stored from wreg
  6002  0F1C  1283               	bcf	3,5	;RP0=0, select bank0
  6003  0F1D  1303               	bcf	3,6	;RP1=0, select bank0
  6004  0F1E  00A4               	movwf	fall_off@x
  6005  0F1F                     l356:	
  6006                           ;teris_16f886.c: 955: while(1)
  6007                           
  6008                           
  6009                           ;teris_16f886.c: 956: {
  6010                           ;teris_16f886.c: 957: for(int8_t row = 4 - 1; row >= 0; row--)
  6011  0F1F  3003               	movlw	3
  6012  0F20  00FC               	movwf	??_fall_off
  6013  0F21  087C               	movf	??_fall_off,w
  6014  0F22  00A6               	movwf	fall_off@row
  6015  0F23  1BA6               	btfsc	fall_off@row,7
  6016  0F24  2F88               	goto	l2900
  6017  0F25                     l2872:	
  6018                           
  6019                           ;teris_16f886.c: 958: {
  6020                           ;teris_16f886.c: 959: for(int8_t col = 0; col < 4; col++)
  6021  0F25  01A5               	clrf	fall_off@col
  6022  0F26  0825               	movf	fall_off@col,w
  6023  0F27  3A80               	xorlw	128
  6024  0F28  3E7C               	addlw	-132
  6025  0F29  1803               	btfsc	3,0
  6026  0F2A  2F82               	goto	l2896
  6027  0F2B                     l2878:	
  6028                           
  6029                           ;teris_16f886.c: 960: {
  6030                           ;teris_16f886.c: 961: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  6031  0F2B  0821               	movf	fall_off@matrix4x4,w
  6032  0F2C  00F7               	movwf	get_matrix_bit@byte
  6033  0F2D  0822               	movf	fall_off@matrix4x4+1,w
  6034  0F2E  00F8               	movwf	get_matrix_bit@byte+1
  6035  0F2F  0826               	movf	fall_off@row,w
  6036  0F30  00FC               	movwf	??_fall_off
  6037  0F31  087C               	movf	??_fall_off,w
  6038  0F32  00F9               	movwf	get_matrix_bit@row
  6039  0F33  0825               	movf	fall_off@col,w
  6040  0F34  00FD               	movwf	??_fall_off+1
  6041  0F35  087D               	movf	??_fall_off+1,w
  6042  0F36  00FA               	movwf	get_matrix_bit@col
  6043  0F37  160A  118A  273D  120A  158A  	fcall	_get_matrix_bit
  6044  0F3C  3A01               	xorlw	1
  6045  0F3D  1D03               	skipz
  6046  0F3E  2F77               	goto	l2892
  6047                           
  6048                           ;teris_16f886.c: 962: {
  6049                           ;teris_16f886.c: 963: if(get_matrix_bit(matrix16x8->row, y + row + 1, x + col) == 1)
  6050  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  6051  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  6052  0F41  0823               	movf	fall_off@matrix16x8,w
  6053  0F42  00F7               	movwf	get_matrix_bit@byte
  6054  0F43  3000               	movlw	0
  6055  0F44  00F8               	movwf	get_matrix_bit@byte+1
  6056  0F45  0826               	movf	fall_off@row,w
  6057  0F46  0720               	addwf	fall_off@y,w
  6058  0F47  3E01               	addlw	1
  6059  0F48  00FC               	movwf	??_fall_off
  6060  0F49  087C               	movf	??_fall_off,w
  6061  0F4A  00F9               	movwf	get_matrix_bit@row
  6062  0F4B  0825               	movf	fall_off@col,w
  6063  0F4C  0724               	addwf	fall_off@x,w
  6064  0F4D  00FD               	movwf	??_fall_off+1
  6065  0F4E  087D               	movf	??_fall_off+1,w
  6066  0F4F  00FA               	movwf	get_matrix_bit@col
  6067  0F50  160A  118A  273D  120A  158A  	fcall	_get_matrix_bit
  6068  0F55  3A01               	xorlw	1
  6069  0F56  1D03               	skipz
  6070  0F57  2F5C               	goto	l2886
  6071                           
  6072                           ;teris_16f886.c: 964: {
  6073                           ;teris_16f886.c: 969: return y;
  6074  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  6075  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  6076  0F5A  0820               	movf	fall_off@y,w
  6077  0F5B  0008               	return
  6078  0F5C                     l2886:	
  6079                           
  6080                           ;teris_16f886.c: 970: }
  6081                           ;teris_16f886.c: 971: if((y + row) >= (16 - 1))
  6082  0F5C  1283               	bcf	3,5	;RP0=0, select bank0
  6083  0F5D  1303               	bcf	3,6	;RP1=0, select bank0
  6084  0F5E  0820               	movf	fall_off@y,w
  6085  0F5F  0726               	addwf	fall_off@row,w
  6086  0F60  00FC               	movwf	??_fall_off
  6087  0F61  01FD               	clrf	??_fall_off+1
  6088  0F62  1803               	skipnc
  6089  0F63  0AFD               	incf	??_fall_off+1,f
  6090  0F64  1BA0               	btfsc	fall_off@y,7
  6091  0F65  03FD               	decf	??_fall_off+1,f
  6092  0F66  1BA6               	btfsc	fall_off@row,7
  6093  0F67  03FD               	decf	??_fall_off+1,f
  6094  0F68  087D               	movf	??_fall_off+1,w
  6095  0F69  3A80               	xorlw	128
  6096  0F6A  00FF               	movwf	127
  6097  0F6B  3080               	movlw	128
  6098  0F6C  027F               	subwf	127,w
  6099  0F6D  1D03               	skipz
  6100  0F6E  2F71               	goto	u2745
  6101  0F6F  300F               	movlw	15
  6102  0F70  027C               	subwf	??_fall_off,w
  6103  0F71                     u2745:	
  6104  0F71  1C03               	skipc
  6105  0F72  2F77               	goto	l2892
  6106                           
  6107                           ;teris_16f886.c: 972: {
  6108                           ;teris_16f886.c: 977: return y;
  6109  0F73  1283               	bcf	3,5	;RP0=0, select bank0
  6110  0F74  1303               	bcf	3,6	;RP1=0, select bank0
  6111  0F75  0820               	movf	fall_off@y,w
  6112  0F76  0008               	return
  6113  0F77                     l2892:	
  6114  0F77  3001               	movlw	1
  6115  0F78  00FC               	movwf	??_fall_off
  6116  0F79  087C               	movf	??_fall_off,w
  6117  0F7A  1283               	bcf	3,5	;RP0=0, select bank0
  6118  0F7B  1303               	bcf	3,6	;RP1=0, select bank0
  6119  0F7C  07A5               	addwf	fall_off@col,f
  6120  0F7D  0825               	movf	fall_off@col,w
  6121  0F7E  3A80               	xorlw	128
  6122  0F7F  3E7C               	addlw	-132
  6123  0F80  1C03               	skipc
  6124  0F81  2F2B               	goto	l2878
  6125  0F82                     l2896:	
  6126  0F82  30FF               	movlw	255
  6127  0F83  00FC               	movwf	??_fall_off
  6128  0F84  087C               	movf	??_fall_off,w
  6129  0F85  07A6               	addwf	fall_off@row,f
  6130  0F86  1FA6               	btfss	fall_off@row,7
  6131  0F87  2F25               	goto	l2872
  6132  0F88                     l2900:	
  6133                           
  6134                           ;teris_16f886.c: 978: }
  6135                           ;teris_16f886.c: 979: }
  6136                           ;teris_16f886.c: 980: }
  6137                           ;teris_16f886.c: 981: }
  6138                           ;teris_16f886.c: 982: y++;
  6139  0F88  3001               	movlw	1
  6140  0F89  00FC               	movwf	??_fall_off
  6141  0F8A  087C               	movf	??_fall_off,w
  6142  0F8B  07A0               	addwf	fall_off@y,f
  6143  0F8C  2F1F               	goto	l356
  6144  0F8D                     __end_of_fall_off:	
  6145                           
  6146                           	psect	text27
  6147  09E2                     __ptext27:	
  6148 ;; *************** function ___wmul *****************
  6149 ;; Defined at:
  6150 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;  multiplier      2   12[BANK0 ] unsigned int 
  6153 ;;  multiplicand    2   14[BANK0 ] unsigned int 
  6154 ;; Auto vars:     Size  Location     Type
  6155 ;;  product         2   12[COMMON] unsigned int 
  6156 ;; Return value:  Size  Location     Type
  6157 ;;                  2   12[BANK0 ] unsigned int 
  6158 ;; Registers used:
  6159 ;;		wreg, status,2, status,0
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6165 ;;      Params:         0       4       0       0       0
  6166 ;;      Locals:         2       0       0       0       0
  6167 ;;      Temps:          0       0       0       0       0
  6168 ;;      Totals:         2       4       0       0       0
  6169 ;;Total ram usage:        6 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; This function calls:
  6172 ;;		Nothing
  6173 ;; This function is called by:
  6174 ;;		_find_best_solution
  6175 ;;		_sprintf
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           
  6180                           ;psect for function ___wmul
  6181  09E2                     ___wmul:	
  6182                           
  6183                           ;incstack = 0
  6184                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6185  09E2  01FC               	clrf	___wmul@product
  6186  09E3  01FD               	clrf	___wmul@product+1
  6187  09E4                     l3160:	
  6188  09E4  1283               	bcf	3,5	;RP0=0, select bank0
  6189  09E5  1303               	bcf	3,6	;RP1=0, select bank0
  6190  09E6  1C2C               	btfss	___wmul@multiplier,0
  6191  09E7  29EE               	goto	l733
  6192  09E8  082E               	movf	___wmul@multiplicand,w
  6193  09E9  07FC               	addwf	___wmul@product,f
  6194  09EA  1803               	skipnc
  6195  09EB  0AFD               	incf	___wmul@product+1,f
  6196  09EC  082F               	movf	___wmul@multiplicand+1,w
  6197  09ED  07FD               	addwf	___wmul@product+1,f
  6198  09EE                     l733:	
  6199  09EE  3001               	movlw	1
  6200  09EF                     u3335:	
  6201  09EF  1003               	clrc
  6202  09F0  0DAE               	rlf	___wmul@multiplicand,f
  6203  09F1  0DAF               	rlf	___wmul@multiplicand+1,f
  6204  09F2  3EFF               	addlw	-1
  6205  09F3  1D03               	skipz
  6206  09F4  29EF               	goto	u3335
  6207  09F5  3001               	movlw	1
  6208  09F6                     u3345:	
  6209  09F6  1003               	clrc
  6210  09F7  0CAD               	rrf	___wmul@multiplier+1,f
  6211  09F8  0CAC               	rrf	___wmul@multiplier,f
  6212  09F9  3EFF               	addlw	-1
  6213  09FA  1D03               	skipz
  6214  09FB  29F6               	goto	u3345
  6215  09FC  082C               	movf	___wmul@multiplier,w
  6216  09FD  042D               	iorwf	___wmul@multiplier+1,w
  6217  09FE  1D03               	btfss	3,2
  6218  09FF  29E4               	goto	l3160
  6219  0A00  087D               	movf	___wmul@product+1,w
  6220  0A01  00AD               	movwf	?___wmul+1
  6221  0A02  087C               	movf	___wmul@product,w
  6222  0A03  00AC               	movwf	?___wmul
  6223  0A04  0008               	return
  6224  0A05                     __end_of___wmul:	
  6225                           
  6226                           	psect	text28
  6227  0A74                     __ptext28:	
  6228 ;; *************** function _delete_matrix *****************
  6229 ;; Defined at:
  6230 ;;		line 783 in file "teris_16f886.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;  matrix          1    wreg     PTR struct .
  6233 ;;		 -> g_matrix16x8(16), 
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;  matrix          1    8[COMMON] PTR struct .
  6236 ;;		 -> g_matrix16x8(16), 
  6237 ;;  row             1    9[COMMON] char 
  6238 ;;  count           1    7[COMMON] unsigned char 
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  1    wreg      unsigned char 
  6241 ;; Registers used:
  6242 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6248 ;;      Params:         0       0       0       0       0
  6249 ;;      Locals:         3       0       0       0       0
  6250 ;;      Temps:          1       0       0       0       0
  6251 ;;      Totals:         4       0       0       0       0
  6252 ;;Total ram usage:        4 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    1
  6255 ;; This function calls:
  6256 ;;		_delete_row
  6257 ;;		_is_row_full
  6258 ;; This function is called by:
  6259 ;;		_main
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263                           
  6264                           ;psect for function _delete_matrix
  6265  0A74                     _delete_matrix:	
  6266                           
  6267                           ;incstack = 0
  6268                           ; Regs used in _delete_matrix: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6269                           ;delete_matrix@matrix stored from wreg
  6270  0A74  00F8               	movwf	delete_matrix@matrix
  6271                           
  6272                           ;teris_16f886.c: 785: uint8_t count = 0;
  6273  0A75  01F7               	clrf	delete_matrix@count
  6274                           
  6275                           ;teris_16f886.c: 786: int8_t row = 16 - 1;
  6276  0A76  300F               	movlw	15
  6277  0A77  00F6               	movwf	??_delete_matrix
  6278  0A78  0876               	movf	??_delete_matrix,w
  6279  0A79  00F9               	movwf	delete_matrix@row
  6280  0A7A                     l3396:	
  6281                           ;teris_16f886.c: 787: while(row >= 0)
  6282                           
  6283  0A7A  1BF9               	btfsc	delete_matrix@row,7
  6284  0A7B  0008               	return
  6285                           
  6286                           ;teris_16f886.c: 788: {
  6287                           ;teris_16f886.c: 789: if(is_row_full(matrix, row) == 1)
  6288  0A7C  0879               	movf	delete_matrix@row,w
  6289  0A7D  00F6               	movwf	??_delete_matrix
  6290  0A7E  0876               	movf	??_delete_matrix,w
  6291  0A7F  00F0               	movwf	is_row_full@row
  6292  0A80  0878               	movf	delete_matrix@matrix,w
  6293  0A81  160A  118A  272F  120A  158A  	fcall	_is_row_full
  6294  0A86  3A01               	xorlw	1
  6295  0A87  1D03               	skipz
  6296  0A88  2A98               	goto	l3394
  6297                           
  6298                           ;teris_16f886.c: 790: {
  6299                           ;teris_16f886.c: 794: delete_row(matrix, row);
  6300  0A89  0879               	movf	delete_matrix@row,w
  6301  0A8A  00F6               	movwf	??_delete_matrix
  6302  0A8B  0876               	movf	??_delete_matrix,w
  6303  0A8C  00F0               	movwf	delete_row@row
  6304  0A8D  0878               	movf	delete_matrix@matrix,w
  6305  0A8E  120A  158A  22F6  120A  158A  	fcall	_delete_row
  6306                           
  6307                           ;teris_16f886.c: 798: count++;
  6308  0A93  3001               	movlw	1
  6309  0A94  00F6               	movwf	??_delete_matrix
  6310  0A95  0876               	movf	??_delete_matrix,w
  6311  0A96  07F7               	addwf	delete_matrix@count,f
  6312                           
  6313                           ;teris_16f886.c: 799: }
  6314  0A97  2A7A               	goto	l3396
  6315  0A98                     l3394:	
  6316                           
  6317                           ;teris_16f886.c: 800: else
  6318                           ;teris_16f886.c: 801: {
  6319                           ;teris_16f886.c: 802: row--;
  6320  0A98  30FF               	movlw	255
  6321  0A99  00F6               	movwf	??_delete_matrix
  6322  0A9A  0876               	movf	??_delete_matrix,w
  6323  0A9B  07F9               	addwf	delete_matrix@row,f
  6324  0A9C  2A7A               	goto	l3396
  6325  0A9D                     __end_of_delete_matrix:	
  6326                           ;teris_16f886.c: 803: }
  6327                           ;teris_16f886.c: 804: }
  6328                           ;teris_16f886.c: 808: return count;
  6329                           ;	Return value of _delete_matrix is never used
  6330                           
  6331                           
  6332                           	psect	text29
  6333  172F                     __ptext29:	
  6334 ;; *************** function _is_row_full *****************
  6335 ;; Defined at:
  6336 ;;		line 751 in file "teris_16f886.c"
  6337 ;; Parameters:    Size  Location     Type
  6338 ;;  matrix          1    wreg     PTR const struct .
  6339 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6340 ;;  row             1    0[COMMON] unsigned char 
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;  matrix          1    2[COMMON] PTR const struct .
  6343 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  1    wreg      unsigned char 
  6346 ;; Registers used:
  6347 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6353 ;;      Params:         1       0       0       0       0
  6354 ;;      Locals:         1       0       0       0       0
  6355 ;;      Temps:          1       0       0       0       0
  6356 ;;      Totals:         3       0       0       0       0
  6357 ;;Total ram usage:        3 bytes
  6358 ;; Hardware stack levels used:    1
  6359 ;; This function calls:
  6360 ;;		Nothing
  6361 ;; This function is called by:
  6362 ;;		_delete_matrix
  6363 ;;		_get_num_removed_rows
  6364 ;; This function uses a non-reentrant model
  6365 ;;
  6366                           
  6367                           
  6368                           ;psect for function _is_row_full
  6369  172F                     _is_row_full:	
  6370                           
  6371                           ;incstack = 0
  6372                           ; Regs used in _is_row_full: [wreg-fsr0h+status,2+status,0]
  6373                           ;is_row_full@matrix stored from wreg
  6374  172F  00F2               	movwf	is_row_full@matrix
  6375                           
  6376                           ;teris_16f886.c: 753: if(matrix->row[row] == 0xFF)
  6377  1730  0870               	movf	is_row_full@row,w
  6378  1731  0772               	addwf	is_row_full@matrix,w
  6379  1732  00F1               	movwf	??_is_row_full
  6380  1733  0871               	movf	??_is_row_full,w
  6381  1734  0084               	movwf	4
  6382  1735  1383               	bcf	3,7	;select IRP bank0
  6383  1736  0A00               	incf	0,w
  6384  1737  1D03               	btfss	3,2
  6385  1738  2F3B               	goto	l2670
  6386                           
  6387                           ;teris_16f886.c: 754: {
  6388                           ;teris_16f886.c: 762: return 1;
  6389  1739  3001               	movlw	1
  6390  173A  0008               	return
  6391  173B                     l2670:	
  6392                           
  6393                           ;teris_16f886.c: 763: }
  6394                           ;teris_16f886.c: 764: return 0;
  6395  173B  3000               	movlw	0
  6396  173C  0008               	return
  6397  173D                     __end_of_is_row_full:	
  6398                           
  6399                           	psect	text30
  6400  0AF6                     __ptext30:	
  6401 ;; *************** function _delete_row *****************
  6402 ;; Defined at:
  6403 ;;		line 766 in file "teris_16f886.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;  matrix          1    wreg     PTR struct .
  6406 ;;		 -> g_matrix16x8(16), 
  6407 ;;  row             1    0[COMMON] unsigned char 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  matrix          1    4[COMMON] PTR struct .
  6410 ;;		 -> g_matrix16x8(16), 
  6411 ;;  i               1    5[COMMON] char 
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  1    wreg      void 
  6414 ;; Registers used:
  6415 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6421 ;;      Params:         1       0       0       0       0
  6422 ;;      Locals:         2       0       0       0       0
  6423 ;;      Temps:          3       0       0       0       0
  6424 ;;      Totals:         6       0       0       0       0
  6425 ;;Total ram usage:        6 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; This function calls:
  6428 ;;		Nothing
  6429 ;; This function is called by:
  6430 ;;		_delete_matrix
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           
  6435                           ;psect for function _delete_row
  6436  0AF6                     _delete_row:	
  6437                           
  6438                           ;incstack = 0
  6439                           ; Regs used in _delete_row: [wreg-fsr0h+status,2+status,0]
  6440                           ;delete_row@matrix stored from wreg
  6441  0AF6  00F4               	movwf	delete_row@matrix
  6442                           
  6443                           ;teris_16f886.c: 768: for(int8_t i = 16 - 1; i >= 0; i--)
  6444  0AF7  300F               	movlw	15
  6445  0AF8  00F1               	movwf	??_delete_row
  6446  0AF9  0871               	movf	??_delete_row,w
  6447  0AFA  00F5               	movwf	delete_row@i
  6448  0AFB                     L12:	
  6449  0AFB  1BF5               	btfsc	delete_row@i,7
  6450  0AFC  0008               	return
  6451                           
  6452                           ;teris_16f886.c: 769: {
  6453                           ;teris_16f886.c: 770: if(i <= row)
  6454  0AFD  0875               	movf	delete_row@i,w
  6455  0AFE  00F1               	movwf	??_delete_row
  6456  0AFF  01F2               	clrf	??_delete_row+1
  6457  0B00  1BF1               	btfsc	??_delete_row,7
  6458  0B01  03F2               	decf	??_delete_row+1,f
  6459  0B02  0872               	movf	??_delete_row+1,w
  6460  0B03  3A80               	xorlw	128
  6461  0B04  3C80               	sublw	128
  6462  0B05  1D03               	skipz
  6463  0B06  2B09               	goto	u2515
  6464  0B07  0871               	movf	??_delete_row,w
  6465  0B08  0270               	subwf	delete_row@row,w
  6466  0B09                     u2515:	
  6467  0B09  1C03               	skipc
  6468  0B0A  2B28               	goto	l2800
  6469                           
  6470                           ;teris_16f886.c: 771: {
  6471                           ;teris_16f886.c: 772: if(i > 0)
  6472  0B0B  0875               	movf	delete_row@i,w
  6473  0B0C  3A80               	xorlw	128
  6474  0B0D  3E7F               	addlw	-129
  6475  0B0E  1C03               	skipc
  6476  0B0F  2B21               	goto	l2798
  6477                           
  6478                           ;teris_16f886.c: 773: {
  6479                           ;teris_16f886.c: 774: matrix->row[i] = matrix->row[i - 1];
  6480  0B10  0875               	movf	delete_row@i,w
  6481  0B11  3EFF               	addlw	255
  6482  0B12  0774               	addwf	delete_row@matrix,w
  6483  0B13  00F1               	movwf	??_delete_row
  6484  0B14  0871               	movf	??_delete_row,w
  6485  0B15  0084               	movwf	4
  6486  0B16  1383               	bcf	3,7	;select IRP bank0
  6487  0B17  0800               	movf	0,w
  6488  0B18  00F2               	movwf	??_delete_row+1
  6489  0B19  0875               	movf	delete_row@i,w
  6490  0B1A  0774               	addwf	delete_row@matrix,w
  6491  0B1B  00F3               	movwf	??_delete_row+2
  6492  0B1C  0873               	movf	??_delete_row+2,w
  6493  0B1D  0084               	movwf	4
  6494  0B1E  0872               	movf	??_delete_row+1,w
  6495  0B1F  0080               	movwf	0
  6496                           
  6497                           ;teris_16f886.c: 775: }
  6498  0B20  2B28               	goto	l2800
  6499  0B21                     l2798:	
  6500                           
  6501                           ;teris_16f886.c: 776: else
  6502                           ;teris_16f886.c: 777: {
  6503                           ;teris_16f886.c: 778: matrix->row[i] = 0x0;
  6504  0B21  0875               	movf	delete_row@i,w
  6505  0B22  0774               	addwf	delete_row@matrix,w
  6506  0B23  00F1               	movwf	??_delete_row
  6507  0B24  0871               	movf	??_delete_row,w
  6508  0B25  0084               	movwf	4
  6509  0B26  1383               	bcf	3,7	;select IRP bank0
  6510  0B27  0180               	clrf	0
  6511  0B28                     l2800:	
  6512  0B28  30FF               	movlw	255
  6513  0B29  00F1               	movwf	??_delete_row
  6514  0B2A  0871               	movf	??_delete_row,w
  6515  0B2B  07F5               	addwf	delete_row@i,f
  6516  0B2C  2AFB               	goto	L12
  6517  0B2D                     __end_of_delete_row:	
  6518                           
  6519                           	psect	text31
  6520  0BA7                     __ptext31:	
  6521 ;; *************** function _clear *****************
  6522 ;; Defined at:
  6523 ;;		line 985 in file "teris_16f886.c"
  6524 ;; Parameters:    Size  Location     Type
  6525 ;;  x               1    wreg     char 
  6526 ;;  y               1    0[BANK0 ] char 
  6527 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  6528 ;;		 -> NULL(0), g_matrix4x4(96), 
  6529 ;;  matrix16x8      1    3[BANK0 ] PTR struct .
  6530 ;;		 -> g_matrix16x8(16), 
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;  x               1    4[BANK0 ] char 
  6533 ;;  col             1    6[BANK0 ] unsigned char 
  6534 ;;  row             1    5[BANK0 ] unsigned char 
  6535 ;; Return value:  Size  Location     Type
  6536 ;;                  1    wreg      void 
  6537 ;; Registers used:
  6538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6544 ;;      Params:         0       4       0       0       0
  6545 ;;      Locals:         0       3       0       0       0
  6546 ;;      Temps:          2       0       0       0       0
  6547 ;;      Totals:         2       7       0       0       0
  6548 ;;Total ram usage:        9 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    3
  6551 ;; This function calls:
  6552 ;;		_get_matrix_bit
  6553 ;;		_set_matrix_bit
  6554 ;; This function is called by:
  6555 ;;		_main
  6556 ;; This function uses a non-reentrant model
  6557 ;;
  6558                           
  6559                           
  6560                           ;psect for function _clear
  6561  0BA7                     _clear:	
  6562                           
  6563                           ;incstack = 0
  6564                           ; Regs used in _clear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6565                           ;clear@x stored from wreg
  6566  0BA7  1283               	bcf	3,5	;RP0=0, select bank0
  6567  0BA8  1303               	bcf	3,6	;RP1=0, select bank0
  6568  0BA9  00A4               	movwf	clear@x
  6569                           
  6570                           ;teris_16f886.c: 987: for(uint8_t row = 0; row < 4; row++)
  6571  0BAA  01A5               	clrf	clear@row
  6572  0BAB                     L13:	
  6573  0BAB  3004               	movlw	4
  6574  0BAC  0225               	subwf	clear@row,w
  6575  0BAD  1803               	btfsc	3,0
  6576  0BAE  0008               	return
  6577                           
  6578                           ;teris_16f886.c: 988: {
  6579                           ;teris_16f886.c: 989: for(uint8_t col = 0; col < 4; col++)
  6580  0BAF  01A6               	clrf	clear@col
  6581  0BB0  3004               	movlw	4
  6582  0BB1  0226               	subwf	clear@col,w
  6583  0BB2  1803               	btfsc	3,0
  6584  0BB3  2BE5               	goto	l3456
  6585  0BB4                     l3448:	
  6586                           
  6587                           ;teris_16f886.c: 990: {
  6588                           ;teris_16f886.c: 991: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  6589  0BB4  0821               	movf	clear@matrix4x4,w
  6590  0BB5  00F7               	movwf	get_matrix_bit@byte
  6591  0BB6  0822               	movf	clear@matrix4x4+1,w
  6592  0BB7  00F8               	movwf	get_matrix_bit@byte+1
  6593  0BB8  0825               	movf	clear@row,w
  6594  0BB9  00FC               	movwf	??_clear
  6595  0BBA  087C               	movf	??_clear,w
  6596  0BBB  00F9               	movwf	get_matrix_bit@row
  6597  0BBC  0826               	movf	clear@col,w
  6598  0BBD  00FD               	movwf	??_clear+1
  6599  0BBE  087D               	movf	??_clear+1,w
  6600  0BBF  00FA               	movwf	get_matrix_bit@col
  6601  0BC0  160A  118A  273D  120A  158A  	fcall	_get_matrix_bit
  6602  0BC5  3A01               	xorlw	1
  6603  0BC6  1D03               	skipz
  6604  0BC7  2BDB               	goto	l3452
  6605                           
  6606                           ;teris_16f886.c: 992: {
  6607                           ;teris_16f886.c: 993: set_matrix_bit(matrix16x8->row, y + row, x + col, 0);
  6608  0BC8  1283               	bcf	3,5	;RP0=0, select bank0
  6609  0BC9  1303               	bcf	3,6	;RP1=0, select bank0
  6610  0BCA  0825               	movf	clear@row,w
  6611  0BCB  0720               	addwf	clear@y,w
  6612  0BCC  00FC               	movwf	??_clear
  6613  0BCD  087C               	movf	??_clear,w
  6614  0BCE  00F5               	movwf	set_matrix_bit@row
  6615  0BCF  0826               	movf	clear@col,w
  6616  0BD0  0724               	addwf	clear@x,w
  6617  0BD1  00FD               	movwf	??_clear+1
  6618  0BD2  087D               	movf	??_clear+1,w
  6619  0BD3  00F6               	movwf	set_matrix_bit@col
  6620  0BD4  01F7               	clrf	set_matrix_bit@value
  6621  0BD5  0823               	movf	clear@matrix16x8,w
  6622  0BD6  160A  118A  274C  120A  158A  	fcall	_set_matrix_bit
  6623  0BDB                     l3452:	
  6624  0BDB  3001               	movlw	1
  6625  0BDC  00FC               	movwf	??_clear
  6626  0BDD  087C               	movf	??_clear,w
  6627  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  6628  0BDF  1303               	bcf	3,6	;RP1=0, select bank0
  6629  0BE0  07A6               	addwf	clear@col,f
  6630  0BE1  3004               	movlw	4
  6631  0BE2  0226               	subwf	clear@col,w
  6632  0BE3  1C03               	skipc
  6633  0BE4  2BB4               	goto	l3448
  6634  0BE5                     l3456:	
  6635  0BE5  3001               	movlw	1
  6636  0BE6  00FC               	movwf	??_clear
  6637  0BE7  087C               	movf	??_clear,w
  6638  0BE8  07A5               	addwf	clear@row,f
  6639  0BE9  2BAB               	goto	L13
  6640  0BEA                     __end_of_clear:	
  6641                           
  6642                           	psect	text32
  6643  174C                     __ptext32:	
  6644 ;; *************** function _set_matrix_bit *****************
  6645 ;; Defined at:
  6646 ;;		line 463 in file "teris_16f886.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;  byte            1    wreg     PTR unsigned char 
  6649 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6650 ;;  row             1    5[COMMON] unsigned char 
  6651 ;;  col             1    6[COMMON] unsigned char 
  6652 ;;  value           1    7[COMMON] unsigned char 
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;  byte            1   10[COMMON] PTR unsigned char 
  6655 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6656 ;; Return value:  Size  Location     Type
  6657 ;;                  1    wreg      void 
  6658 ;; Registers used:
  6659 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6660 ;; Tracked objects:
  6661 ;;		On entry : 0/0
  6662 ;;		On exit  : 0/0
  6663 ;;		Unchanged: 0/0
  6664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6665 ;;      Params:         3       0       0       0       0
  6666 ;;      Locals:         1       0       0       0       0
  6667 ;;      Temps:          2       0       0       0       0
  6668 ;;      Totals:         6       0       0       0       0
  6669 ;;Total ram usage:        6 bytes
  6670 ;; Hardware stack levels used:    1
  6671 ;; Hardware stack levels required when called:    1
  6672 ;; This function calls:
  6673 ;;		_setbit
  6674 ;; This function is called by:
  6675 ;;		_clear
  6676 ;;		_merge
  6677 ;;		_merge1
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           
  6682                           ;psect for function _set_matrix_bit
  6683  174C                     _set_matrix_bit:	
  6684                           
  6685                           ;incstack = 0
  6686                           ; Regs used in _set_matrix_bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6687                           ;set_matrix_bit@byte stored from wreg
  6688  174C  00FA               	movwf	set_matrix_bit@byte
  6689                           
  6690                           ;teris_16f886.c: 465: setbit(&byte[row], col, value);
  6691  174D  0876               	movf	set_matrix_bit@col,w
  6692  174E  00F8               	movwf	??_set_matrix_bit
  6693  174F  0878               	movf	??_set_matrix_bit,w
  6694  1750  00F0               	movwf	setbit@at
  6695  1751  0877               	movf	set_matrix_bit@value,w
  6696  1752  00F9               	movwf	??_set_matrix_bit+1
  6697  1753  0879               	movf	??_set_matrix_bit+1,w
  6698  1754  00F1               	movwf	setbit@value
  6699  1755  0875               	movf	set_matrix_bit@row,w
  6700  1756  077A               	addwf	set_matrix_bit@byte,w
  6701  1757  120A  158A  2649   	fcall	_setbit
  6702  175A  0008               	return
  6703  175B                     __end_of_set_matrix_bit:	
  6704                           
  6705                           	psect	text33
  6706  0E49                     __ptext33:	
  6707 ;; *************** function _setbit *****************
  6708 ;; Defined at:
  6709 ;;		line 401 in file "teris_16f886.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;  byte            1    wreg     PTR unsigned char 
  6712 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6713 ;;  at              1    0[COMMON] unsigned char 
  6714 ;;  value           1    1[COMMON] unsigned char 
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;  byte            1    3[COMMON] PTR unsigned char 
  6717 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6718 ;;  temp            1    4[COMMON] PTR struct .
  6719 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6720 ;; Return value:  Size  Location     Type
  6721 ;;                  1    wreg      void 
  6722 ;; Registers used:
  6723 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6724 ;; Tracked objects:
  6725 ;;		On entry : 0/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6729 ;;      Params:         2       0       0       0       0
  6730 ;;      Locals:         2       0       0       0       0
  6731 ;;      Temps:          1       0       0       0       0
  6732 ;;      Totals:         5       0       0       0       0
  6733 ;;Total ram usage:        5 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; This function calls:
  6736 ;;		Nothing
  6737 ;; This function is called by:
  6738 ;;		_set_matrix_bit
  6739 ;; This function uses a non-reentrant model
  6740 ;;
  6741                           
  6742                           
  6743                           ;psect for function _setbit
  6744  0E49                     _setbit:	
  6745                           
  6746                           ;incstack = 0
  6747                           ; Regs used in _setbit: [wreg-fsr0h+status,2+status,0]
  6748                           ;setbit@byte stored from wreg
  6749  0E49  00F3               	movwf	setbit@byte
  6750                           
  6751                           ;teris_16f886.c: 403: t_byte *temp = (t_byte *)byte;
  6752  0E4A  0873               	movf	setbit@byte,w
  6753  0E4B  00F2               	movwf	??_setbit
  6754  0E4C  0872               	movf	??_setbit,w
  6755  0E4D  00F4               	movwf	setbit@temp
  6756                           
  6757                           ;teris_16f886.c: 404: switch(at)
  6758  0E4E  2E97               	goto	l2584
  6759  0E4F                     l2566:	
  6760                           ;teris_16f886.c: 405: {
  6761                           ;teris_16f886.c: 406: case 0:
  6762                           
  6763                           
  6764                           ;teris_16f886.c: 407: temp->b0 = value;
  6765  0E4F  0874               	movf	setbit@temp,w
  6766  0E50  0084               	movwf	4
  6767  0E51  0871               	movf	setbit@value,w
  6768  0E52  3901               	andlw	1
  6769  0E53  1383               	bcf	3,7	;select IRP bank0
  6770  0E54  1000               	bcf	0,0
  6771  0E55  1D03               	skipz
  6772  0E56  1400               	bsf	0,0
  6773                           
  6774                           ;teris_16f886.c: 408: break;
  6775  0E57  0008               	return
  6776  0E58                     l2568:	
  6777                           ;teris_16f886.c: 409: case 1:
  6778                           
  6779                           
  6780                           ;teris_16f886.c: 410: temp->b1 = value;
  6781  0E58  0874               	movf	setbit@temp,w
  6782  0E59  0084               	movwf	4
  6783  0E5A  0871               	movf	setbit@value,w
  6784  0E5B  3901               	andlw	1
  6785  0E5C  1383               	bcf	3,7	;select IRP bank0
  6786  0E5D  1080               	bcf	0,1
  6787  0E5E  1D03               	skipz
  6788  0E5F  1480               	bsf	0,1
  6789                           
  6790                           ;teris_16f886.c: 411: break;
  6791  0E60  0008               	return
  6792  0E61                     l2570:	
  6793                           ;teris_16f886.c: 412: case 2:
  6794                           
  6795                           
  6796                           ;teris_16f886.c: 413: temp->b2 = value;
  6797  0E61  0874               	movf	setbit@temp,w
  6798  0E62  0084               	movwf	4
  6799  0E63  0871               	movf	setbit@value,w
  6800  0E64  3901               	andlw	1
  6801  0E65  1383               	bcf	3,7	;select IRP bank0
  6802  0E66  1100               	bcf	0,2
  6803  0E67  1D03               	skipz
  6804  0E68  1500               	bsf	0,2
  6805                           
  6806                           ;teris_16f886.c: 414: break;
  6807  0E69  0008               	return
  6808  0E6A                     l2572:	
  6809                           ;teris_16f886.c: 415: case 3:
  6810                           
  6811                           
  6812                           ;teris_16f886.c: 416: temp->b3 = value;
  6813  0E6A  0874               	movf	setbit@temp,w
  6814  0E6B  0084               	movwf	4
  6815  0E6C  0871               	movf	setbit@value,w
  6816  0E6D  3901               	andlw	1
  6817  0E6E  1383               	bcf	3,7	;select IRP bank0
  6818  0E6F  1180               	bcf	0,3
  6819  0E70  1D03               	skipz
  6820  0E71  1580               	bsf	0,3
  6821                           
  6822                           ;teris_16f886.c: 417: break;
  6823  0E72  0008               	return
  6824  0E73                     l2574:	
  6825                           ;teris_16f886.c: 418: case 4:
  6826                           
  6827                           
  6828                           ;teris_16f886.c: 419: temp->b4 = value;
  6829  0E73  0874               	movf	setbit@temp,w
  6830  0E74  0084               	movwf	4
  6831  0E75  0871               	movf	setbit@value,w
  6832  0E76  3901               	andlw	1
  6833  0E77  1383               	bcf	3,7	;select IRP bank0
  6834  0E78  1200               	bcf	0,4
  6835  0E79  1D03               	skipz
  6836  0E7A  1600               	bsf	0,4
  6837                           
  6838                           ;teris_16f886.c: 420: break;
  6839  0E7B  0008               	return
  6840  0E7C                     l2576:	
  6841                           ;teris_16f886.c: 421: case 5:
  6842                           
  6843                           
  6844                           ;teris_16f886.c: 422: temp->b5 = value;
  6845  0E7C  0874               	movf	setbit@temp,w
  6846  0E7D  0084               	movwf	4
  6847  0E7E  0871               	movf	setbit@value,w
  6848  0E7F  3901               	andlw	1
  6849  0E80  1383               	bcf	3,7	;select IRP bank0
  6850  0E81  1280               	bcf	0,5
  6851  0E82  1D03               	skipz
  6852  0E83  1680               	bsf	0,5
  6853                           
  6854                           ;teris_16f886.c: 423: break;
  6855  0E84  0008               	return
  6856  0E85                     l2578:	
  6857                           ;teris_16f886.c: 424: case 6:
  6858                           
  6859                           
  6860                           ;teris_16f886.c: 425: temp->b6 = value;
  6861  0E85  0874               	movf	setbit@temp,w
  6862  0E86  0084               	movwf	4
  6863  0E87  0871               	movf	setbit@value,w
  6864  0E88  3901               	andlw	1
  6865  0E89  1383               	bcf	3,7	;select IRP bank0
  6866  0E8A  1300               	bcf	0,6
  6867  0E8B  1D03               	skipz
  6868  0E8C  1700               	bsf	0,6
  6869                           
  6870                           ;teris_16f886.c: 426: break;
  6871  0E8D  0008               	return
  6872  0E8E                     l2580:	
  6873                           ;teris_16f886.c: 427: case 7:
  6874                           
  6875                           
  6876                           ;teris_16f886.c: 428: temp->b7 = value;
  6877  0E8E  0874               	movf	setbit@temp,w
  6878  0E8F  0084               	movwf	4
  6879  0E90  0871               	movf	setbit@value,w
  6880  0E91  3901               	andlw	1
  6881  0E92  1383               	bcf	3,7	;select IRP bank0
  6882  0E93  1380               	bcf	0,7
  6883  0E94  1D03               	skipz
  6884  0E95  1780               	bsf	0,7
  6885                           
  6886                           ;teris_16f886.c: 430: }
  6887                           
  6888                           ;teris_16f886.c: 429: break;
  6889  0E96  0008               	return
  6890  0E97                     l2584:	
  6891  0E97  0870               	movf	setbit@at,w
  6892                           
  6893                           ; Switch size 1, requested type "space"
  6894                           ; Number of cases is 8, Range of values is 0 to 7
  6895                           ; switch strategies available:
  6896                           ; Name         Instructions Cycles
  6897                           ; simple_byte           25    13 (average)
  6898                           ; direct_byte           32     8 (fixed)
  6899                           ; jumptable            260     6 (fixed)
  6900                           ;	Chosen strategy is simple_byte
  6901  0E98  3A00               	xorlw	0	; case 0
  6902  0E99  1903               	skipnz
  6903  0E9A  2E4F               	goto	l2566
  6904  0E9B  3A01               	xorlw	1	; case 1
  6905  0E9C  1903               	skipnz
  6906  0E9D  2E58               	goto	l2568
  6907  0E9E  3A03               	xorlw	3	; case 2
  6908  0E9F  1903               	skipnz
  6909  0EA0  2E61               	goto	l2570
  6910  0EA1  3A01               	xorlw	1	; case 3
  6911  0EA2  1903               	skipnz
  6912  0EA3  2E6A               	goto	l2572
  6913  0EA4  3A07               	xorlw	7	; case 4
  6914  0EA5  1903               	skipnz
  6915  0EA6  2E73               	goto	l2574
  6916  0EA7  3A01               	xorlw	1	; case 5
  6917  0EA8  1903               	skipnz
  6918  0EA9  2E7C               	goto	l2576
  6919  0EAA  3A03               	xorlw	3	; case 6
  6920  0EAB  1903               	skipnz
  6921  0EAC  2E85               	goto	l2578
  6922  0EAD  3A01               	xorlw	1	; case 7
  6923  0EAE  1903               	skipnz
  6924  0EAF  2E8E               	goto	l2580
  6925  0EB0  2EB1               	goto	l186
  6926  0EB1                     l186:	
  6927  0EB1  0008               	return
  6928  0EB2                     __end_of_setbit:	
  6929                           
  6930                           	psect	text34
  6931  17B0                     __ptext34:	
  6932 ;; *************** function _char_info_index_rand *****************
  6933 ;; Defined at:
  6934 ;;		line 1116 in file "teris_16f886.c"
  6935 ;; Parameters:    Size  Location     Type
  6936 ;;		None
  6937 ;; Auto vars:     Size  Location     Type
  6938 ;;		None
  6939 ;; Return value:  Size  Location     Type
  6940 ;;                  1    wreg      unsigned char 
  6941 ;; Registers used:
  6942 ;;		wreg, status,2, status,0, pclath, cstack
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6948 ;;      Params:         0       0       0       0       0
  6949 ;;      Locals:         0       0       0       0       0
  6950 ;;      Temps:          0       0       0       0       0
  6951 ;;      Totals:         0       0       0       0       0
  6952 ;;Total ram usage:        0 bytes
  6953 ;; Hardware stack levels used:    1
  6954 ;; Hardware stack levels required when called:    2
  6955 ;; This function calls:
  6956 ;;		___awmod
  6957 ;;		_rand
  6958 ;; This function is called by:
  6959 ;;		_main
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           
  6964                           ;psect for function _char_info_index_rand
  6965  17B0                     _char_info_index_rand:	
  6966                           
  6967                           ;teris_16f886.c: 1118: return (uint8_t)(rand()%9);
  6968                           
  6969                           ;incstack = 0
  6970                           ; Regs used in _char_info_index_rand: [wreg+status,2+status,0+pclath+cstack]
  6971  17B0  3009               	movlw	9
  6972  17B1  1283               	bcf	3,5	;RP0=0, select bank0
  6973  17B2  1303               	bcf	3,6	;RP1=0, select bank0
  6974  17B3  00A7               	movwf	___awmod@divisor
  6975  17B4  3000               	movlw	0
  6976  17B5  00A8               	movwf	___awmod@divisor+1
  6977  17B6  120A  158A  2475  160A  118A  	fcall	_rand
  6978  17BB  1283               	bcf	3,5	;RP0=0, select bank0
  6979  17BC  1303               	bcf	3,6	;RP1=0, select bank0
  6980  17BD  0821               	movf	?_rand+1,w
  6981  17BE  00AA               	movwf	___awmod@dividend+1
  6982  17BF  0820               	movf	?_rand,w
  6983  17C0  00A9               	movwf	___awmod@dividend
  6984  17C1  120A  158A  2508   	fcall	___awmod
  6985  17C4  1283               	bcf	3,5	;RP0=0, select bank0
  6986  17C5  1303               	bcf	3,6	;RP1=0, select bank0
  6987  17C6  0827               	movf	?___awmod,w
  6988  17C7  0008               	return
  6989  17C8                     __end_of_char_info_index_rand:	
  6990                           
  6991                           	psect	text35
  6992  0C75                     __ptext35:	
  6993 ;; *************** function _rand *****************
  6994 ;; Defined at:
  6995 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;		None
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;		None
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  2    0[BANK0 ] int 
  7002 ;; Registers used:
  7003 ;;		wreg, status,2, status,0, pclath, cstack
  7004 ;; Tracked objects:
  7005 ;;		On entry : 0/0
  7006 ;;		On exit  : 0/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7009 ;;      Params:         0       2       0       0       0
  7010 ;;      Locals:         0       0       0       0       0
  7011 ;;      Temps:          0       5       0       0       0
  7012 ;;      Totals:         0       7       0       0       0
  7013 ;;Total ram usage:        7 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    1
  7016 ;; This function calls:
  7017 ;;		___lmul
  7018 ;; This function is called by:
  7019 ;;		_char_info_index_rand
  7020 ;; This function uses a non-reentrant model
  7021 ;;
  7022                           
  7023                           
  7024                           ;psect for function _rand
  7025  0C75                     _rand:	
  7026                           
  7027                           ;incstack = 0
  7028                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  7029  0C75  1283               	bcf	3,5	;RP0=0, select bank0
  7030  0C76  1303               	bcf	3,6	;RP1=0, select bank0
  7031  0C77  086A               	movf	_randx+3,w
  7032  0C78  00F3               	movwf	___lmul@multiplier+3
  7033  0C79  0869               	movf	_randx+2,w
  7034  0C7A  00F2               	movwf	___lmul@multiplier+2
  7035  0C7B  0868               	movf	_randx+1,w
  7036  0C7C  00F1               	movwf	___lmul@multiplier+1
  7037  0C7D  0867               	movf	_randx,w
  7038  0C7E  00F0               	movwf	___lmul@multiplier
  7039  0C7F  3041               	movlw	65
  7040  0C80  00F7               	movwf	___lmul@multiplicand+3
  7041  0C81  30C6               	movlw	198
  7042  0C82  00F6               	movwf	___lmul@multiplicand+2
  7043  0C83  304E               	movlw	78
  7044  0C84  00F5               	movwf	___lmul@multiplicand+1
  7045  0C85  306D               	movlw	109
  7046  0C86  00F4               	movwf	___lmul@multiplicand
  7047  0C87  120A  158A  2368  120A  158A  	fcall	___lmul
  7048  0C8C  0873               	movf	?___lmul+3,w
  7049  0C8D  1283               	bcf	3,5	;RP0=0, select bank0
  7050  0C8E  1303               	bcf	3,6	;RP1=0, select bank0
  7051  0C8F  00EA               	movwf	_randx+3
  7052  0C90  0872               	movf	?___lmul+2,w
  7053  0C91  00E9               	movwf	_randx+2
  7054  0C92  0871               	movf	?___lmul+1,w
  7055  0C93  00E8               	movwf	_randx+1
  7056  0C94  0870               	movf	?___lmul,w
  7057  0C95  00E7               	movwf	_randx
  7058  0C96  3039               	movlw	57
  7059  0C97  07E7               	addwf	_randx,f
  7060  0C98  3030               	movlw	48
  7061  0C99  1803               	skipnc
  7062  0C9A  3031               	movlw	49
  7063  0C9B  07E8               	addwf	_randx+1,f
  7064  0C9C  3000               	movlw	0
  7065  0C9D  1803               	skipnc
  7066  0C9E  3001               	movlw	1
  7067  0C9F  07E9               	addwf	_randx+2,f
  7068  0CA0  3000               	movlw	0
  7069  0CA1  1803               	skipnc
  7070  0CA2  3001               	movlw	1
  7071  0CA3  07EA               	addwf	_randx+3,f
  7072  0CA4  0867               	movf	_randx,w
  7073  0CA5  00A2               	movwf	??_rand
  7074  0CA6  0868               	movf	_randx+1,w
  7075  0CA7  00A3               	movwf	??_rand+1
  7076  0CA8  0869               	movf	_randx+2,w
  7077  0CA9  00A4               	movwf	??_rand+2
  7078  0CAA  086A               	movf	_randx+3,w
  7079  0CAB  00A5               	movwf	??_rand+3
  7080  0CAC  3010               	movlw	16
  7081  0CAD  00A6               	movwf	??_rand+4
  7082  0CAE                     u2975:	
  7083  0CAE  0D25               	rlf	??_rand+3,w
  7084  0CAF  0CA5               	rrf	??_rand+3,f
  7085  0CB0  0CA4               	rrf	??_rand+2,f
  7086  0CB1  0CA3               	rrf	??_rand+1,f
  7087  0CB2  0CA2               	rrf	??_rand,f
  7088  0CB3  0BA6               	decfsz	??_rand+4,f
  7089  0CB4  2CAE               	goto	u2975
  7090  0CB5  30FF               	movlw	255
  7091  0CB6  0522               	andwf	??_rand,w
  7092  0CB7  00A0               	movwf	?_rand
  7093  0CB8  307F               	movlw	127
  7094  0CB9  0523               	andwf	??_rand+1,w
  7095  0CBA  00A1               	movwf	?_rand+1
  7096  0CBB  0008               	return
  7097  0CBC                     __end_of_rand:	
  7098                           
  7099                           	psect	text36
  7100  0B68                     __ptext36:	
  7101 ;; *************** function ___lmul *****************
  7102 ;; Defined at:
  7103 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;  multiplier      4    0[COMMON] unsigned long 
  7106 ;;  multiplicand    4    4[COMMON] unsigned long 
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;  product         4    9[COMMON] unsigned long 
  7109 ;; Return value:  Size  Location     Type
  7110 ;;                  4    0[COMMON] unsigned long 
  7111 ;; Registers used:
  7112 ;;		wreg, status,2, status,0
  7113 ;; Tracked objects:
  7114 ;;		On entry : 0/0
  7115 ;;		On exit  : 0/0
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7118 ;;      Params:         8       0       0       0       0
  7119 ;;      Locals:         4       0       0       0       0
  7120 ;;      Temps:          1       0       0       0       0
  7121 ;;      Totals:        13       0       0       0       0
  7122 ;;Total ram usage:       13 bytes
  7123 ;; Hardware stack levels used:    1
  7124 ;; This function calls:
  7125 ;;		Nothing
  7126 ;; This function is called by:
  7127 ;;		_rand
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           
  7132                           ;psect for function ___lmul
  7133  0B68                     ___lmul:	
  7134                           
  7135                           ;incstack = 0
  7136                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7137  0B68  3000               	movlw	0
  7138  0B69  00FC               	movwf	___lmul@product+3
  7139  0B6A  3000               	movlw	0
  7140  0B6B  00FB               	movwf	___lmul@product+2
  7141  0B6C  3000               	movlw	0
  7142  0B6D  00FA               	movwf	___lmul@product+1
  7143  0B6E  3000               	movlw	0
  7144  0B6F  00F9               	movwf	___lmul@product
  7145  0B70                     l2760:	
  7146  0B70  1C70               	btfss	___lmul@multiplier,0
  7147  0B71  2B86               	goto	l2764
  7148  0B72  0874               	movf	___lmul@multiplicand,w
  7149  0B73  07F9               	addwf	___lmul@product,f
  7150  0B74  0875               	movf	___lmul@multiplicand+1,w
  7151  0B75  1103               	clrz
  7152  0B76  1803               	skipnc
  7153  0B77  3E01               	addlw	1
  7154  0B78  1D03               	btfss	3,2
  7155  0B79  07FA               	addwf	___lmul@product+1,f
  7156  0B7A  0876               	movf	___lmul@multiplicand+2,w
  7157  0B7B  1103               	clrz
  7158  0B7C  1803               	skipnc
  7159  0B7D  3E01               	addlw	1
  7160  0B7E  1D03               	btfss	3,2
  7161  0B7F  07FB               	addwf	___lmul@product+2,f
  7162  0B80  0877               	movf	___lmul@multiplicand+3,w
  7163  0B81  1103               	clrz
  7164  0B82  1803               	skipnc
  7165  0B83  3E01               	addlw	1
  7166  0B84  1D03               	btfss	3,2
  7167  0B85  07FC               	addwf	___lmul@product+3,f
  7168  0B86                     l2764:	
  7169  0B86  3001               	movlw	1
  7170  0B87  00F8               	movwf	??___lmul
  7171  0B88                     u2465:	
  7172  0B88  1003               	clrc
  7173  0B89  0DF4               	rlf	___lmul@multiplicand,f
  7174  0B8A  0DF5               	rlf	___lmul@multiplicand+1,f
  7175  0B8B  0DF6               	rlf	___lmul@multiplicand+2,f
  7176  0B8C  0DF7               	rlf	___lmul@multiplicand+3,f
  7177  0B8D  0BF8               	decfsz	??___lmul,f
  7178  0B8E  2B88               	goto	u2465
  7179  0B8F  3001               	movlw	1
  7180  0B90                     u2475:	
  7181  0B90  1003               	clrc
  7182  0B91  0CF3               	rrf	___lmul@multiplier+3,f
  7183  0B92  0CF2               	rrf	___lmul@multiplier+2,f
  7184  0B93  0CF1               	rrf	___lmul@multiplier+1,f
  7185  0B94  0CF0               	rrf	___lmul@multiplier,f
  7186  0B95  3EFF               	addlw	-1
  7187  0B96  1D03               	skipz
  7188  0B97  2B90               	goto	u2475
  7189  0B98  0873               	movf	___lmul@multiplier+3,w
  7190  0B99  0472               	iorwf	___lmul@multiplier+2,w
  7191  0B9A  0471               	iorwf	___lmul@multiplier+1,w
  7192  0B9B  0470               	iorwf	___lmul@multiplier,w
  7193  0B9C  1D03               	skipz
  7194  0B9D  2B70               	goto	l2760
  7195  0B9E  087C               	movf	___lmul@product+3,w
  7196  0B9F  00F3               	movwf	?___lmul+3
  7197  0BA0  087B               	movf	___lmul@product+2,w
  7198  0BA1  00F2               	movwf	?___lmul+2
  7199  0BA2  087A               	movf	___lmul@product+1,w
  7200  0BA3  00F1               	movwf	?___lmul+1
  7201  0BA4  0879               	movf	___lmul@product,w
  7202  0BA5  00F0               	movwf	?___lmul
  7203  0BA6  0008               	return
  7204  0BA7                     __end_of___lmul:	
  7205                           
  7206                           	psect	text37
  7207  0D08                     __ptext37:	
  7208 ;; *************** function ___awmod *****************
  7209 ;; Defined at:
  7210 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  divisor         2    7[BANK0 ] int 
  7213 ;;  dividend        2    9[BANK0 ] int 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;  sign            1   12[BANK0 ] unsigned char 
  7216 ;;  counter         1   11[BANK0 ] unsigned char 
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  2    7[BANK0 ] int 
  7219 ;; Registers used:
  7220 ;;		wreg, status,2, status,0
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7226 ;;      Params:         0       4       0       0       0
  7227 ;;      Locals:         0       2       0       0       0
  7228 ;;      Temps:          1       0       0       0       0
  7229 ;;      Totals:         1       6       0       0       0
  7230 ;;Total ram usage:        7 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; This function calls:
  7233 ;;		Nothing
  7234 ;; This function is called by:
  7235 ;;		_char_info_index_rand
  7236 ;;		_USARTWriteInt
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           
  7241                           ;psect for function ___awmod
  7242  0D08                     ___awmod:	
  7243                           
  7244                           ;incstack = 0
  7245                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7246  0D08  1283               	bcf	3,5	;RP0=0, select bank0
  7247  0D09  1303               	bcf	3,6	;RP1=0, select bank0
  7248  0D0A  01AC               	clrf	___awmod@sign
  7249  0D0B  1FAA               	btfss	___awmod@dividend+1,7
  7250  0D0C  2D14               	goto	l3180
  7251  0D0D  09A9               	comf	___awmod@dividend,f
  7252  0D0E  09AA               	comf	___awmod@dividend+1,f
  7253  0D0F  0AA9               	incf	___awmod@dividend,f
  7254  0D10  1903               	skipnz
  7255  0D11  0AAA               	incf	___awmod@dividend+1,f
  7256  0D12  01AC               	clrf	___awmod@sign
  7257  0D13  0AAC               	incf	___awmod@sign,f
  7258  0D14                     l3180:	
  7259  0D14  1FA8               	btfss	___awmod@divisor+1,7
  7260  0D15  2D1B               	goto	l3184
  7261  0D16  09A7               	comf	___awmod@divisor,f
  7262  0D17  09A8               	comf	___awmod@divisor+1,f
  7263  0D18  0AA7               	incf	___awmod@divisor,f
  7264  0D19  1903               	skipnz
  7265  0D1A  0AA8               	incf	___awmod@divisor+1,f
  7266  0D1B                     l3184:	
  7267  0D1B  0827               	movf	___awmod@divisor,w
  7268  0D1C  0428               	iorwf	___awmod@divisor+1,w
  7269  0D1D  1903               	btfsc	3,2
  7270  0D1E  2D48               	goto	l3202
  7271  0D1F  01AB               	clrf	___awmod@counter
  7272  0D20  0AAB               	incf	___awmod@counter,f
  7273  0D21                     l3192:	
  7274  0D21  1BA8               	btfsc	___awmod@divisor+1,7
  7275  0D22  2D2F               	goto	l3194
  7276  0D23  3001               	movlw	1
  7277  0D24                     u3395:	
  7278  0D24  1003               	clrc
  7279  0D25  0DA7               	rlf	___awmod@divisor,f
  7280  0D26  0DA8               	rlf	___awmod@divisor+1,f
  7281  0D27  3EFF               	addlw	-1
  7282  0D28  1D03               	skipz
  7283  0D29  2D24               	goto	u3395
  7284  0D2A  3001               	movlw	1
  7285  0D2B  00FD               	movwf	??___awmod
  7286  0D2C  087D               	movf	??___awmod,w
  7287  0D2D  07AB               	addwf	___awmod@counter,f
  7288  0D2E  2D21               	goto	l3192
  7289  0D2F                     l3194:	
  7290  0D2F  0828               	movf	___awmod@divisor+1,w
  7291  0D30  022A               	subwf	___awmod@dividend+1,w
  7292  0D31  1D03               	skipz
  7293  0D32  2D35               	goto	u3415
  7294  0D33  0827               	movf	___awmod@divisor,w
  7295  0D34  0229               	subwf	___awmod@dividend,w
  7296  0D35                     u3415:	
  7297  0D35  1C03               	skipc
  7298  0D36  2D3D               	goto	l3198
  7299  0D37  0827               	movf	___awmod@divisor,w
  7300  0D38  02A9               	subwf	___awmod@dividend,f
  7301  0D39  0828               	movf	___awmod@divisor+1,w
  7302  0D3A  1C03               	skipc
  7303  0D3B  03AA               	decf	___awmod@dividend+1,f
  7304  0D3C  02AA               	subwf	___awmod@dividend+1,f
  7305  0D3D                     l3198:	
  7306  0D3D  3001               	movlw	1
  7307  0D3E                     u3425:	
  7308  0D3E  1003               	clrc
  7309  0D3F  0CA8               	rrf	___awmod@divisor+1,f
  7310  0D40  0CA7               	rrf	___awmod@divisor,f
  7311  0D41  3EFF               	addlw	-1
  7312  0D42  1D03               	skipz
  7313  0D43  2D3E               	goto	u3425
  7314  0D44  3001               	movlw	1
  7315  0D45  02AB               	subwf	___awmod@counter,f
  7316  0D46  1D03               	btfss	3,2
  7317  0D47  2D2F               	goto	l3194
  7318  0D48                     l3202:	
  7319  0D48  082C               	movf	___awmod@sign,w
  7320  0D49  1903               	btfsc	3,2
  7321  0D4A  2D50               	goto	l3206
  7322  0D4B  09A9               	comf	___awmod@dividend,f
  7323  0D4C  09AA               	comf	___awmod@dividend+1,f
  7324  0D4D  0AA9               	incf	___awmod@dividend,f
  7325  0D4E  1903               	skipnz
  7326  0D4F  0AAA               	incf	___awmod@dividend+1,f
  7327  0D50                     l3206:	
  7328  0D50  082A               	movf	___awmod@dividend+1,w
  7329  0D51  00A8               	movwf	?___awmod+1
  7330  0D52  0829               	movf	___awmod@dividend,w
  7331  0D53  00A7               	movwf	?___awmod
  7332  0D54  0008               	return
  7333  0D55                     __end_of___awmod:	
  7334                           
  7335                           	psect	text38
  7336  0C2E                     __ptext38:	
  7337 ;; *************** function _USARTInit *****************
  7338 ;; Defined at:
  7339 ;;		line 31 in file "usart_pic16.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;  baud_rate       2    0[COMMON] unsigned int 
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;		None
  7344 ;; Return value:  Size  Location     Type
  7345 ;;                  1    wreg      void 
  7346 ;; Registers used:
  7347 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7353 ;;      Params:         2       0       0       0       0
  7354 ;;      Locals:         0       0       0       0       0
  7355 ;;      Temps:          1       0       0       0       0
  7356 ;;      Totals:         3       0       0       0       0
  7357 ;;Total ram usage:        3 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; This function calls:
  7360 ;;		Nothing
  7361 ;; This function is called by:
  7362 ;;		_main
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           
  7367                           ;psect for function _USARTInit
  7368  0C2E                     _USARTInit:	
  7369                           
  7370                           ;usart_pic16.c: 33: UQFront = UQEnd = -1;
  7371                           
  7372                           ;incstack = 0
  7373                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  7374  0C2E  30FF               	movlw	255
  7375  0C2F  1283               	bcf	3,5	;RP0=0, select bank0
  7376  0C30  1303               	bcf	3,6	;RP1=0, select bank0
  7377  0C31  00EC               	movwf	_UQEnd	;volatile
  7378  0C32  00F2               	movwf	??_USARTInit
  7379  0C33  0872               	movf	??_USARTInit,w
  7380  0C34  00ED               	movwf	_UQFront	;volatile
  7381                           
  7382                           ;usart_pic16.c: 36: switch (baud_rate) {
  7383  0C35  2C41               	goto	l3222
  7384  0C36                     l3212:	
  7385                           ;usart_pic16.c: 37: case 9600:
  7386                           
  7387                           
  7388                           ;usart_pic16.c: 38: SPBRG = 129;
  7389  0C36  3081               	movlw	129
  7390  0C37  2C3D               	goto	L16
  7391  0C38                     l3214:	
  7392                           ;usart_pic16.c: 40: case 19200:
  7393                           
  7394                           ;usart_pic16.c: 39: break;
  7395                           
  7396                           
  7397                           ;usart_pic16.c: 41: SPBRG = 64;
  7398  0C38  3040               	movlw	64
  7399  0C39  2C3D               	goto	L16
  7400  0C3A                     l3216:	
  7401                           ;usart_pic16.c: 43: case 28800:
  7402                           
  7403                           ;usart_pic16.c: 42: break;
  7404                           
  7405                           
  7406                           ;usart_pic16.c: 44: SPBRG = 42;
  7407  0C3A  302A               	movlw	42
  7408  0C3B  2C3D               	goto	L16
  7409  0C3C                     l3218:	
  7410                           ;usart_pic16.c: 46: case 33600:
  7411                           
  7412                           ;usart_pic16.c: 45: break;
  7413                           
  7414                           
  7415                           ;usart_pic16.c: 47: SPBRG = 36;
  7416  0C3C  3024               	movlw	36
  7417  0C3D                     L16:	
  7418  0C3D  1683               	bsf	3,5	;RP0=1, select bank1
  7419  0C3E  1303               	bcf	3,6	;RP1=0, select bank1
  7420  0C3F  0099               	movwf	25	;volatile
  7421                           
  7422                           ;usart_pic16.c: 49: }
  7423                           
  7424                           ;usart_pic16.c: 48: break;
  7425  0C40  2C63               	goto	l29
  7426  0C41                     l3222:	
  7427                           
  7428                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  7429                           ; Switch size 1, requested type "space"
  7430                           ; Number of cases is 4, Range of values is 37 to 131
  7431                           ; switch strategies available:
  7432                           ; Name         Instructions Cycles
  7433                           ; simple_byte           13     7 (average)
  7434                           ; jumptable            263     9 (fixed)
  7435                           ;	Chosen strategy is simple_byte
  7436  0C41  0871               	movf	USARTInit@baud_rate+1,w
  7437  0C42  3A25               	xorlw	37	; case 37
  7438  0C43  1903               	skipnz
  7439  0C44  2C4F               	goto	l4696
  7440  0C45  3A6E               	xorlw	110	; case 75
  7441  0C46  1903               	skipnz
  7442  0C47  2C54               	goto	l4698
  7443  0C48  3A3B               	xorlw	59	; case 112
  7444  0C49  1903               	skipnz
  7445  0C4A  2C59               	goto	l4700
  7446  0C4B  3AF3               	xorlw	243	; case 131
  7447  0C4C  1903               	skipnz
  7448  0C4D  2C5E               	goto	l4702
  7449  0C4E  2C63               	goto	l29
  7450  0C4F                     l4696:	
  7451                           
  7452                           ; Switch size 1, requested type "space"
  7453                           ; Number of cases is 1, Range of values is 128 to 128
  7454                           ; switch strategies available:
  7455                           ; Name         Instructions Cycles
  7456                           ; simple_byte            4     3 (average)
  7457                           ; direct_byte           14    11 (fixed)
  7458                           ; jumptable            263     9 (fixed)
  7459                           ;	Chosen strategy is simple_byte
  7460  0C4F  0870               	movf	USARTInit@baud_rate,w
  7461  0C50  3A80               	xorlw	128	; case 128
  7462  0C51  1903               	skipnz
  7463  0C52  2C36               	goto	l3212
  7464  0C53  2C63               	goto	l29
  7465  0C54                     l4698:	
  7466                           
  7467                           ; Switch size 1, requested type "space"
  7468                           ; Number of cases is 1, Range of values is 0 to 0
  7469                           ; switch strategies available:
  7470                           ; Name         Instructions Cycles
  7471                           ; simple_byte            4     3 (average)
  7472                           ; direct_byte           11     8 (fixed)
  7473                           ; jumptable            260     6 (fixed)
  7474                           ;	Chosen strategy is simple_byte
  7475  0C54  0870               	movf	USARTInit@baud_rate,w
  7476  0C55  3A00               	xorlw	0	; case 0
  7477  0C56  1903               	skipnz
  7478  0C57  2C38               	goto	l3214
  7479  0C58  2C63               	goto	l29
  7480  0C59                     l4700:	
  7481                           
  7482                           ; Switch size 1, requested type "space"
  7483                           ; Number of cases is 1, Range of values is 128 to 128
  7484                           ; switch strategies available:
  7485                           ; Name         Instructions Cycles
  7486                           ; simple_byte            4     3 (average)
  7487                           ; direct_byte           14    11 (fixed)
  7488                           ; jumptable            263     9 (fixed)
  7489                           ;	Chosen strategy is simple_byte
  7490  0C59  0870               	movf	USARTInit@baud_rate,w
  7491  0C5A  3A80               	xorlw	128	; case 128
  7492  0C5B  1903               	skipnz
  7493  0C5C  2C3A               	goto	l3216
  7494  0C5D  2C63               	goto	l29
  7495  0C5E                     l4702:	
  7496                           
  7497                           ; Switch size 1, requested type "space"
  7498                           ; Number of cases is 1, Range of values is 64 to 64
  7499                           ; switch strategies available:
  7500                           ; Name         Instructions Cycles
  7501                           ; simple_byte            4     3 (average)
  7502                           ; direct_byte           14    11 (fixed)
  7503                           ; jumptable            263     9 (fixed)
  7504                           ;	Chosen strategy is simple_byte
  7505  0C5E  0870               	movf	USARTInit@baud_rate,w
  7506  0C5F  3A40               	xorlw	64	; case 64
  7507  0C60  1903               	skipnz
  7508  0C61  2C3C               	goto	l3218
  7509  0C62  2C63               	goto	l29
  7510  0C63                     l29:	
  7511                           
  7512                           ;usart_pic16.c: 52: TXSTAbits.TX9 = 0;
  7513  0C63  1683               	bsf	3,5	;RP0=1, select bank1
  7514  0C64  1303               	bcf	3,6	;RP1=0, select bank1
  7515  0C65  1318               	bcf	24,6	;volatile
  7516                           
  7517                           ;usart_pic16.c: 53: TXSTAbits.TXEN = 1;
  7518  0C66  1698               	bsf	24,5	;volatile
  7519                           
  7520                           ;usart_pic16.c: 54: TXSTAbits.SYNC = 0;
  7521  0C67  1218               	bcf	24,4	;volatile
  7522                           
  7523                           ;usart_pic16.c: 55: TXSTAbits.BRGH = 1;
  7524  0C68  1518               	bsf	24,2	;volatile
  7525                           
  7526                           ;usart_pic16.c: 58: RCSTAbits.SPEN = 1;
  7527  0C69  1283               	bcf	3,5	;RP0=0, select bank0
  7528  0C6A  1303               	bcf	3,6	;RP1=0, select bank0
  7529  0C6B  1798               	bsf	24,7	;volatile
  7530                           
  7531                           ;usart_pic16.c: 59: RCSTAbits.RX9 = 0;
  7532  0C6C  1318               	bcf	24,6	;volatile
  7533                           
  7534                           ;usart_pic16.c: 60: RCSTAbits.CREN = 1;
  7535  0C6D  1618               	bsf	24,4	;volatile
  7536                           
  7537                           ;usart_pic16.c: 61: RCSTAbits.ADDEN = 0;
  7538  0C6E  1198               	bcf	24,3	;volatile
  7539                           
  7540                           ;usart_pic16.c: 64: RCIE = 1;
  7541  0C6F  1683               	bsf	3,5	;RP0=1, select bank1
  7542  0C70  1303               	bcf	3,6	;RP1=0, select bank1
  7543  0C71  168C               	bsf	12,5	;volatile
  7544                           
  7545                           ;usart_pic16.c: 65: PEIE = 1;
  7546  0C72  170B               	bsf	11,6	;volatile
  7547                           
  7548                           ;usart_pic16.c: 67: (GIE = 1);
  7549  0C73  178B               	bsf	11,7	;volatile
  7550  0C74  0008               	return
  7551  0C75                     __end_of_USARTInit:	
  7552                           
  7553                           	psect	text39
  7554  176B                     __ptext39:	
  7555 ;; *************** function _Clear_Matrix *****************
  7556 ;; Defined at:
  7557 ;;		line 745 in file "teris_16f886.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;		None
  7560 ;; Auto vars:     Size  Location     Type
  7561 ;;		None
  7562 ;; Return value:  Size  Location     Type
  7563 ;;                  1    wreg      void 
  7564 ;; Registers used:
  7565 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7566 ;; Tracked objects:
  7567 ;;		On entry : 0/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7571 ;;      Params:         0       0       0       0       0
  7572 ;;      Locals:         0       0       0       0       0
  7573 ;;      Temps:          0       0       0       0       0
  7574 ;;      Totals:         0       0       0       0       0
  7575 ;;Total ram usage:        0 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; Hardware stack levels required when called:    6
  7578 ;; This function calls:
  7579 ;;		_memset
  7580 ;;		_printf_Screen
  7581 ;; This function is called by:
  7582 ;;		_main
  7583 ;; This function uses a non-reentrant model
  7584 ;;
  7585                           
  7586                           
  7587                           ;psect for function _Clear_Matrix
  7588  176B                     _Clear_Matrix:	
  7589                           
  7590                           ;teris_16f886.c: 747: memset(&g_matrix16x8, 0, sizeof(MATRIX16x8));
  7591                           
  7592                           ;incstack = 0
  7593                           ; Regs used in _Clear_Matrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7594  176B  3000               	movlw	0
  7595  176C  00F0               	movwf	memset@c
  7596  176D  00F1               	movwf	memset@c+1
  7597  176E  3010               	movlw	16
  7598  176F  00F2               	movwf	memset@n
  7599  1770  3000               	movlw	0
  7600  1771  00F3               	movwf	memset@n+1
  7601  1772  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  7602  1773  160A  118A  27C8  160A  118A  	fcall	_memset
  7603                           
  7604                           ;teris_16f886.c: 748: printf_Screen();
  7605  1778  160A  118A  2705   	fcall	_printf_Screen
  7606  177B  0008               	return
  7607  177C                     __end_of_Clear_Matrix:	
  7608                           
  7609                           	psect	text40
  7610  1705                     __ptext40:	
  7611 ;; *************** function _printf_Screen *****************
  7612 ;; Defined at:
  7613 ;;		line 729 in file "teris_16f886.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;		None
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;		None
  7618 ;; Return value:  Size  Location     Type
  7619 ;;                  1    wreg      void 
  7620 ;; Registers used:
  7621 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7622 ;; Tracked objects:
  7623 ;;		On entry : 0/0
  7624 ;;		On exit  : 0/0
  7625 ;;		Unchanged: 0/0
  7626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7627 ;;      Params:         0       0       0       0       0
  7628 ;;      Locals:         0       0       0       0       0
  7629 ;;      Temps:          0       0       0       0       0
  7630 ;;      Totals:         0       0       0       0       0
  7631 ;;Total ram usage:        0 bytes
  7632 ;; Hardware stack levels used:    1
  7633 ;; Hardware stack levels required when called:    5
  7634 ;; This function calls:
  7635 ;;		_printf_MATRIX16x8
  7636 ;; This function is called by:
  7637 ;;		_Clear_Matrix
  7638 ;;		_main
  7639 ;; This function uses a non-reentrant model
  7640 ;;
  7641                           
  7642                           
  7643                           ;psect for function _printf_Screen
  7644  1705                     _printf_Screen:	
  7645                           
  7646                           ;teris_16f886.c: 731: printf_MATRIX16x8(&g_matrix16x8);
  7647                           
  7648                           ;incstack = 0
  7649                           ; Regs used in _printf_Screen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7650  1705  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  7651  1706  160A  118A  279E   	fcall	_printf_MATRIX16x8
  7652  1709  0008               	return
  7653  170A                     __end_of_printf_Screen:	
  7654                           
  7655                           	psect	text41
  7656  179E                     __ptext41:	
  7657 ;; *************** function _printf_MATRIX16x8 *****************
  7658 ;; Defined at:
  7659 ;;		line 702 in file "teris_16f886.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;  matrix16x8      1    wreg     PTR const struct .
  7662 ;;		 -> g_matrix16x8(16), 
  7663 ;; Auto vars:     Size  Location     Type
  7664 ;;  matrix16x8      1    6[BANK0 ] PTR const struct .
  7665 ;;		 -> g_matrix16x8(16), 
  7666 ;;  matrix7219     16    7[BANK0 ] struct .
  7667 ;; Return value:  Size  Location     Type
  7668 ;;                  1    wreg      void 
  7669 ;; Registers used:
  7670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7676 ;;      Params:         0       0       0       0       0
  7677 ;;      Locals:         0      17       0       0       0
  7678 ;;      Temps:          1       0       0       0       0
  7679 ;;      Totals:         1      17       0       0       0
  7680 ;;Total ram usage:       18 bytes
  7681 ;; Hardware stack levels used:    1
  7682 ;; Hardware stack levels required when called:    4
  7683 ;; This function calls:
  7684 ;;		_MATRIX16x8_to_MATRIX7219
  7685 ;;		_printf_MATRIX7219
  7686 ;; This function is called by:
  7687 ;;		_printf_Screen
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           
  7692                           ;psect for function _printf_MATRIX16x8
  7693  179E                     _printf_MATRIX16x8:	
  7694                           
  7695                           ;incstack = 0
  7696                           ; Regs used in _printf_MATRIX16x8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7697                           ;printf_MATRIX16x8@matrix16x8 stored from wreg
  7698  179E  1283               	bcf	3,5	;RP0=0, select bank0
  7699  179F  1303               	bcf	3,6	;RP1=0, select bank0
  7700  17A0  00A6               	movwf	printf_MATRIX16x8@matrix16x8
  7701                           
  7702                           ;teris_16f886.c: 724: MATRIX7219 matrix7219;
  7703                           ;teris_16f886.c: 725: MATRIX16x8_to_MATRIX7219(matrix16x8, &matrix7219);
  7704  17A1  3027               	movlw	(low (printf_MATRIX16x8@matrix7219| 0))& (0+255)
  7705  17A2  00FD               	movwf	??_printf_MATRIX16x8
  7706  17A3  087D               	movf	??_printf_MATRIX16x8,w
  7707  17A4  00FC               	movwf	MATRIX16x8_to_MATRIX7219@matrix7219
  7708  17A5  0826               	movf	printf_MATRIX16x8@matrix16x8,w
  7709  17A6  120A  118A  20EC  160A  118A  	fcall	_MATRIX16x8_to_MATRIX7219
  7710                           
  7711                           ;teris_16f886.c: 726: printf_MATRIX7219(&matrix7219);
  7712  17AB  3027               	movlw	(low (printf_MATRIX16x8@matrix7219| 0))& (0+255)
  7713  17AC  120A  158A  22C7   	fcall	_printf_MATRIX7219
  7714  17AF  0008               	return
  7715  17B0                     __end_of_printf_MATRIX16x8:	
  7716                           
  7717                           	psect	text42
  7718  0AC7                     __ptext42:	
  7719 ;; *************** function _printf_MATRIX7219 *****************
  7720 ;; Defined at:
  7721 ;;		line 689 in file "teris_16f886.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;  matrix          1    wreg     PTR const struct .
  7724 ;;		 -> printf_MATRIX16x8@matrix7219(16), 
  7725 ;; Auto vars:     Size  Location     Type
  7726 ;;  matrix          1    0[BANK0 ] PTR const struct .
  7727 ;;		 -> printf_MATRIX16x8@matrix7219(16), 
  7728 ;;  col             1    1[BANK0 ] unsigned char 
  7729 ;; Return value:  Size  Location     Type
  7730 ;;                  1    wreg      void 
  7731 ;; Registers used:
  7732 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7733 ;; Tracked objects:
  7734 ;;		On entry : 0/0
  7735 ;;		On exit  : 0/0
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7738 ;;      Params:         0       0       0       0       0
  7739 ;;      Locals:         0       2       0       0       0
  7740 ;;      Temps:          5       0       0       0       0
  7741 ;;      Totals:         5       2       0       0       0
  7742 ;;Total ram usage:        7 bytes
  7743 ;; Hardware stack levels used:    1
  7744 ;; Hardware stack levels required when called:    2
  7745 ;; This function calls:
  7746 ;;		_Write_Word
  7747 ;; This function is called by:
  7748 ;;		_printf_MATRIX16x8
  7749 ;; This function uses a non-reentrant model
  7750 ;;
  7751                           
  7752                           
  7753                           ;psect for function _printf_MATRIX7219
  7754  0AC7                     _printf_MATRIX7219:	
  7755                           
  7756                           ;incstack = 0
  7757                           ; Regs used in _printf_MATRIX7219: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7758                           ;printf_MATRIX7219@matrix stored from wreg
  7759  0AC7  1283               	bcf	3,5	;RP0=0, select bank0
  7760  0AC8  1303               	bcf	3,6	;RP1=0, select bank0
  7761  0AC9  00A0               	movwf	printf_MATRIX7219@matrix
  7762                           
  7763                           ;teris_16f886.c: 691: uint8_t col;
  7764                           ;teris_16f886.c: 693: for (col = 0; col < 8; col++)
  7765  0ACA  01A1               	clrf	printf_MATRIX7219@col
  7766  0ACB                     L17:	
  7767  0ACB  3008               	movlw	8
  7768  0ACC  0221               	subwf	printf_MATRIX7219@col,w
  7769  0ACD  1803               	btfsc	3,0
  7770  0ACE  0008               	return
  7771                           
  7772                           ;teris_16f886.c: 694: {
  7773                           ;teris_16f886.c: 695: Write_Word(col + 1, matrix->col1[col], col + 1, matrix->col2[col])
      +                          ;
  7774  0ACF  0821               	movf	printf_MATRIX7219@col,w
  7775  0AD0  0720               	addwf	printf_MATRIX7219@matrix,w
  7776  0AD1  00F8               	movwf	??_printf_MATRIX7219
  7777  0AD2  0878               	movf	??_printf_MATRIX7219,w
  7778  0AD3  0084               	movwf	4
  7779  0AD4  1383               	bcf	3,7	;select IRP bank0
  7780  0AD5  0800               	movf	0,w
  7781  0AD6  00F9               	movwf	??_printf_MATRIX7219+1
  7782  0AD7  0879               	movf	??_printf_MATRIX7219+1,w
  7783  0AD8  00F4               	movwf	Write_Word@myValue1
  7784  0AD9  0821               	movf	printf_MATRIX7219@col,w
  7785  0ADA  3E01               	addlw	1
  7786  0ADB  00FA               	movwf	??_printf_MATRIX7219+2
  7787  0ADC  087A               	movf	??_printf_MATRIX7219+2,w
  7788  0ADD  00F5               	movwf	Write_Word@myColumn2
  7789  0ADE  0821               	movf	printf_MATRIX7219@col,w
  7790  0ADF  3E08               	addlw	8
  7791  0AE0  0720               	addwf	printf_MATRIX7219@matrix,w
  7792  0AE1  00FB               	movwf	??_printf_MATRIX7219+3
  7793  0AE2  087B               	movf	??_printf_MATRIX7219+3,w
  7794  0AE3  0084               	movwf	4
  7795  0AE4  0800               	movf	0,w
  7796  0AE5  00FC               	movwf	??_printf_MATRIX7219+4
  7797  0AE6  087C               	movf	??_printf_MATRIX7219+4,w
  7798  0AE7  00F6               	movwf	Write_Word@myValue2
  7799  0AE8  0821               	movf	printf_MATRIX7219@col,w
  7800  0AE9  3E01               	addlw	1
  7801  0AEA  120A  158A  2182  120A  158A  	fcall	_Write_Word
  7802  0AEF  3001               	movlw	1
  7803  0AF0  00F8               	movwf	??_printf_MATRIX7219
  7804  0AF1  0878               	movf	??_printf_MATRIX7219,w
  7805  0AF2  1283               	bcf	3,5	;RP0=0, select bank0
  7806  0AF3  1303               	bcf	3,6	;RP1=0, select bank0
  7807  0AF4  07A1               	addwf	printf_MATRIX7219@col,f
  7808  0AF5  2ACB               	goto	L17
  7809  0AF6                     __end_of_printf_MATRIX7219:	
  7810                           
  7811                           	psect	text43
  7812  0982                     __ptext43:	
  7813 ;; *************** function _Write_Word *****************
  7814 ;; Defined at:
  7815 ;;		line 563 in file "teris_16f886.c"
  7816 ;; Parameters:    Size  Location     Type
  7817 ;;  myColumn1       1    wreg     unsigned char 
  7818 ;;  myValue1        1    4[COMMON] unsigned char 
  7819 ;;  myColumn2       1    5[COMMON] unsigned char 
  7820 ;;  myValue2        1    6[COMMON] unsigned char 
  7821 ;; Auto vars:     Size  Location     Type
  7822 ;;  myColumn1       1    7[COMMON] unsigned char 
  7823 ;; Return value:  Size  Location     Type
  7824 ;;                  1    wreg      void 
  7825 ;; Registers used:
  7826 ;;		wreg, status,2, status,0, pclath, cstack
  7827 ;; Tracked objects:
  7828 ;;		On entry : 0/0
  7829 ;;		On exit  : 0/0
  7830 ;;		Unchanged: 0/0
  7831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7832 ;;      Params:         3       0       0       0       0
  7833 ;;      Locals:         1       0       0       0       0
  7834 ;;      Temps:          0       0       0       0       0
  7835 ;;      Totals:         4       0       0       0       0
  7836 ;;Total ram usage:        4 bytes
  7837 ;; Hardware stack levels used:    1
  7838 ;; Hardware stack levels required when called:    1
  7839 ;; This function calls:
  7840 ;;		_SPI1_write
  7841 ;; This function is called by:
  7842 ;;		_max7219_init1
  7843 ;;		_printf_MATRIX7219
  7844 ;; This function uses a non-reentrant model
  7845 ;;
  7846                           
  7847                           
  7848                           ;psect for function _Write_Word
  7849  0982                     _Write_Word:	
  7850                           
  7851                           ;incstack = 0
  7852                           ; Regs used in _Write_Word: [wreg+status,2+status,0+pclath+cstack]
  7853                           ;Write_Word@myColumn1 stored from wreg
  7854  0982  00F7               	movwf	Write_Word@myColumn1
  7855                           
  7856                           ;teris_16f886.c: 565: RA2 = 0;
  7857  0983  1283               	bcf	3,5	;RP0=0, select bank0
  7858  0984  1303               	bcf	3,6	;RP1=0, select bank0
  7859  0985  1105               	bcf	5,2	;volatile
  7860                           
  7861                           ;teris_16f886.c: 566: SPI1_write(myColumn1);
  7862  0986  0877               	movf	Write_Word@myColumn1,w
  7863  0987  120A  158A  229D  120A  158A  	fcall	_SPI1_write
  7864                           
  7865                           ;teris_16f886.c: 567: SPI1_write(myValue1);
  7866  098C  0874               	movf	Write_Word@myValue1,w
  7867  098D  120A  158A  229D  120A  158A  	fcall	_SPI1_write
  7868                           
  7869                           ;teris_16f886.c: 568: SPI1_write(myColumn2);
  7870  0992  0875               	movf	Write_Word@myColumn2,w
  7871  0993  120A  158A  229D  120A  158A  	fcall	_SPI1_write
  7872                           
  7873                           ;teris_16f886.c: 569: SPI1_write(myValue2);
  7874  0998  0876               	movf	Write_Word@myValue2,w
  7875  0999  120A  158A  229D   	fcall	_SPI1_write
  7876                           
  7877                           ;teris_16f886.c: 570: RA2 = 1;
  7878  099C  1283               	bcf	3,5	;RP0=0, select bank0
  7879  099D  1303               	bcf	3,6	;RP1=0, select bank0
  7880  099E  1505               	bsf	5,2	;volatile
  7881  099F  0008               	return
  7882  09A0                     __end_of_Write_Word:	
  7883                           
  7884                           	psect	text44
  7885  0A9D                     __ptext44:	
  7886 ;; *************** function _SPI1_write *****************
  7887 ;; Defined at:
  7888 ;;		line 538 in file "teris_16f886.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;  data            1    wreg     unsigned char 
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;  data            1    1[COMMON] unsigned char 
  7893 ;;  i               1    3[COMMON] unsigned char 
  7894 ;;  mask            1    2[COMMON] unsigned char 
  7895 ;; Return value:  Size  Location     Type
  7896 ;;                  1    wreg      void 
  7897 ;; Registers used:
  7898 ;;		wreg, status,2, status,0
  7899 ;; Tracked objects:
  7900 ;;		On entry : 0/0
  7901 ;;		On exit  : 0/0
  7902 ;;		Unchanged: 0/0
  7903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7904 ;;      Params:         0       0       0       0       0
  7905 ;;      Locals:         3       0       0       0       0
  7906 ;;      Temps:          1       0       0       0       0
  7907 ;;      Totals:         4       0       0       0       0
  7908 ;;Total ram usage:        4 bytes
  7909 ;; Hardware stack levels used:    1
  7910 ;; This function calls:
  7911 ;;		Nothing
  7912 ;; This function is called by:
  7913 ;;		_Write_Word
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           
  7918                           ;psect for function _SPI1_write
  7919  0A9D                     _SPI1_write:	
  7920                           
  7921                           ;incstack = 0
  7922                           ; Regs used in _SPI1_write: [wreg+status,2+status,0]
  7923                           ;SPI1_write@data stored from wreg
  7924  0A9D  00F1               	movwf	SPI1_write@data
  7925                           
  7926                           ;teris_16f886.c: 540: uint8_t mask = 0b10000000;
  7927  0A9E  3080               	movlw	128
  7928  0A9F  00F0               	movwf	??_SPI1_write
  7929  0AA0  0870               	movf	??_SPI1_write,w
  7930  0AA1  00F2               	movwf	SPI1_write@mask
  7931                           
  7932                           ;teris_16f886.c: 541: for(uint8_t i = 0; i < 8; i++)
  7933  0AA2  01F3               	clrf	SPI1_write@i
  7934  0AA3                     L18:	
  7935  0AA3  3008               	movlw	8
  7936  0AA4  0273               	subwf	SPI1_write@i,w
  7937  0AA5  1803               	btfsc	3,0
  7938  0AA6  0008               	return
  7939                           
  7940                           ;teris_16f886.c: 542: {
  7941                           ;teris_16f886.c: 543: if((data & mask) > 0)
  7942  0AA7  0871               	movf	SPI1_write@data,w
  7943  0AA8  0572               	andwf	SPI1_write@mask,w
  7944  0AA9  1903               	btfsc	3,2
  7945  0AAA  2AAF               	goto	l235
  7946                           
  7947                           ;teris_16f886.c: 544: {
  7948                           ;teris_16f886.c: 545: RA3 = 1;
  7949  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  7950  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  7951  0AAD  1585               	bsf	5,3	;volatile
  7952                           
  7953                           ;teris_16f886.c: 547: }
  7954  0AAE  2AB2               	goto	l2540
  7955  0AAF                     l235:	
  7956                           
  7957                           ;teris_16f886.c: 548: else
  7958                           ;teris_16f886.c: 549: {
  7959                           ;teris_16f886.c: 550: RA3 = 0;
  7960  0AAF  1283               	bcf	3,5	;RP0=0, select bank0
  7961  0AB0  1303               	bcf	3,6	;RP1=0, select bank0
  7962  0AB1  1185               	bcf	5,3	;volatile
  7963  0AB2                     l2540:	
  7964                           
  7965                           ;teris_16f886.c: 552: }
  7966                           ;teris_16f886.c: 553: mask >>= 1;
  7967  0AB2  1003               	clrc
  7968  0AB3  0CF2               	rrf	SPI1_write@mask,f
  7969                           
  7970                           ;teris_16f886.c: 554: RA1 = 1;
  7971  0AB4  1485               	bsf	5,1	;volatile
  7972                           
  7973                           ;teris_16f886.c: 555: _delay((unsigned long)((10)*(20000000/4000000.0)));
  7974  0AB5  3010               	movlw	16
  7975  0AB6  00F0               	movwf	??_SPI1_write
  7976  0AB7                     u5797:	
  7977  0AB7  0BF0               	decfsz	??_SPI1_write,f
  7978  0AB8  2AB7               	goto	u5797
  7979  0AB9  0000               	nop
  7980                           
  7981                           ;teris_16f886.c: 556: RA1 = 0;
  7982  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  7983  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  7984  0ABC  1085               	bcf	5,1	;volatile
  7985                           
  7986                           ;teris_16f886.c: 557: _delay((unsigned long)((10)*(20000000/4000000.0)));
  7987  0ABD  3010               	movlw	16
  7988  0ABE  00F0               	movwf	??_SPI1_write
  7989  0ABF                     u5807:	
  7990  0ABF  0BF0               	decfsz	??_SPI1_write,f
  7991  0AC0  2ABF               	goto	u5807
  7992  0AC1  0000               	nop
  7993  0AC2  3001               	movlw	1
  7994  0AC3  00F0               	movwf	??_SPI1_write
  7995  0AC4  0870               	movf	??_SPI1_write,w
  7996  0AC5  07F3               	addwf	SPI1_write@i,f
  7997  0AC6  2AA3               	goto	L18
  7998  0AC7                     __end_of_SPI1_write:	
  7999                           
  8000                           	psect	text45
  8001  00EC                     __ptext45:	
  8002 ;; *************** function _MATRIX16x8_to_MATRIX7219 *****************
  8003 ;; Defined at:
  8004 ;;		line 583 in file "teris_16f886.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;  matrix16x8      1    wreg     PTR const struct .
  8007 ;;		 -> g_matrix16x8(16), 
  8008 ;;  matrix7219      1   12[COMMON] PTR struct .
  8009 ;;		 -> printf_MATRIX16x8@matrix7219(16), 
  8010 ;; Auto vars:     Size  Location     Type
  8011 ;;  matrix16x8      1    2[BANK0 ] PTR const struct .
  8012 ;;		 -> g_matrix16x8(16), 
  8013 ;;  col             1    5[BANK0 ] unsigned char 
  8014 ;;  row             1    4[BANK0 ] unsigned char 
  8015 ;;  mask            1    3[BANK0 ] unsigned char 
  8016 ;; Return value:  Size  Location     Type
  8017 ;;                  1    wreg      void 
  8018 ;; Registers used:
  8019 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8025 ;;      Params:         1       0       0       0       0
  8026 ;;      Locals:         0       4       0       0       0
  8027 ;;      Temps:          0       2       0       0       0
  8028 ;;      Totals:         1       6       0       0       0
  8029 ;;Total ram usage:        7 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; Hardware stack levels required when called:    3
  8032 ;; This function calls:
  8033 ;;		_get_matrix_bit
  8034 ;; This function is called by:
  8035 ;;		_printf_MATRIX16x8
  8036 ;; This function uses a non-reentrant model
  8037 ;;
  8038                           
  8039                           
  8040                           ;psect for function _MATRIX16x8_to_MATRIX7219
  8041  00EC                     _MATRIX16x8_to_MATRIX7219:	
  8042                           
  8043                           ;incstack = 0
  8044                           ; Regs used in _MATRIX16x8_to_MATRIX7219: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
  8045                           ;MATRIX16x8_to_MATRIX7219@matrix16x8 stored from wreg
  8046  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  8047  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  8048  00EE  00A2               	movwf	MATRIX16x8_to_MATRIX7219@matrix16x8
  8049                           
  8050                           ;teris_16f886.c: 585: uint8_t mask = 0x80;
  8051  00EF  3080               	movlw	128
  8052  00F0  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8053  00F1  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8054  00F2  00A3               	movwf	MATRIX16x8_to_MATRIX7219@mask
  8055                           
  8056                           ;teris_16f886.c: 586: uint8_t row;
  8057                           ;teris_16f886.c: 588: for(uint8_t col = 0; col < 8; col++)
  8058  00F3  01A5               	clrf	MATRIX16x8_to_MATRIX7219@col
  8059  00F4                     L19:	
  8060  00F4  3008               	movlw	8
  8061  00F5  0225               	subwf	MATRIX16x8_to_MATRIX7219@col,w
  8062  00F6  1803               	btfsc	3,0
  8063  00F7  0008               	return
  8064                           
  8065                           ;teris_16f886.c: 589: {
  8066                           ;teris_16f886.c: 590: mask = 0x80;
  8067  00F8  3080               	movlw	128
  8068  00F9  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8069  00FA  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8070  00FB  00A3               	movwf	MATRIX16x8_to_MATRIX7219@mask
  8071                           
  8072                           ;teris_16f886.c: 591: matrix7219->col1[col] = 0;
  8073  00FC  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
  8074  00FD  077C               	addwf	MATRIX16x8_to_MATRIX7219@matrix7219,w
  8075  00FE  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8076  00FF  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8077  0100  0084               	movwf	4
  8078  0101  1383               	bcf	3,7	;select IRP bank0
  8079  0102  0180               	clrf	0
  8080                           
  8081                           ;teris_16f886.c: 592: for(row = 0; row < 8; row++)
  8082  0103  01A4               	clrf	MATRIX16x8_to_MATRIX7219@row
  8083  0104  3008               	movlw	8
  8084  0105  0224               	subwf	MATRIX16x8_to_MATRIX7219@row,w
  8085  0106  1803               	btfsc	3,0
  8086  0107  2934               	goto	l2614
  8087  0108                     l2604:	
  8088                           
  8089                           ;teris_16f886.c: 593: {
  8090                           ;teris_16f886.c: 594: if(get_matrix_bit(matrix16x8->row, row, col) == 1)
  8091  0108  0822               	movf	MATRIX16x8_to_MATRIX7219@matrix16x8,w
  8092  0109  00F7               	movwf	get_matrix_bit@byte
  8093  010A  3000               	movlw	0
  8094  010B  00F8               	movwf	get_matrix_bit@byte+1
  8095  010C  0824               	movf	MATRIX16x8_to_MATRIX7219@row,w
  8096  010D  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8097  010E  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8098  010F  00F9               	movwf	get_matrix_bit@row
  8099  0110  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
  8100  0111  00A1               	movwf	??_MATRIX16x8_to_MATRIX7219+1
  8101  0112  0821               	movf	??_MATRIX16x8_to_MATRIX7219+1,w
  8102  0113  00FA               	movwf	get_matrix_bit@col
  8103  0114  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  8104  0119  3A01               	xorlw	1
  8105  011A  1D03               	skipz
  8106  011B  2928               	goto	l2608
  8107                           
  8108                           ;teris_16f886.c: 595: {
  8109                           ;teris_16f886.c: 596: matrix7219->col1[col] |= mask;
  8110  011C  1283               	bcf	3,5	;RP0=0, select bank0
  8111  011D  1303               	bcf	3,6	;RP1=0, select bank0
  8112  011E  0823               	movf	MATRIX16x8_to_MATRIX7219@mask,w
  8113  011F  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8114  0120  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
  8115  0121  077C               	addwf	MATRIX16x8_to_MATRIX7219@matrix7219,w
  8116  0122  00A1               	movwf	??_MATRIX16x8_to_MATRIX7219+1
  8117  0123  0821               	movf	??_MATRIX16x8_to_MATRIX7219+1,w
  8118  0124  0084               	movwf	4
  8119  0125  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8120  0126  1383               	bcf	3,7	;select IRP bank0
  8121  0127  0480               	iorwf	0,f
  8122  0128                     l2608:	
  8123                           
  8124                           ;teris_16f886.c: 597: }
  8125                           ;teris_16f886.c: 598: mask >>= 1;
  8126  0128  1003               	clrc
  8127  0129  1283               	bcf	3,5	;RP0=0, select bank0
  8128  012A  1303               	bcf	3,6	;RP1=0, select bank0
  8129  012B  0CA3               	rrf	MATRIX16x8_to_MATRIX7219@mask,f
  8130  012C  3001               	movlw	1
  8131  012D  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8132  012E  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8133  012F  07A4               	addwf	MATRIX16x8_to_MATRIX7219@row,f
  8134  0130  3008               	movlw	8
  8135  0131  0224               	subwf	MATRIX16x8_to_MATRIX7219@row,w
  8136  0132  1C03               	skipc
  8137  0133  2908               	goto	l2604
  8138  0134                     l2614:	
  8139                           
  8140                           ;teris_16f886.c: 599: }
  8141                           ;teris_16f886.c: 600: mask = 0x80;
  8142  0134  3080               	movlw	128
  8143  0135  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8144  0136  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8145  0137  00A3               	movwf	MATRIX16x8_to_MATRIX7219@mask
  8146                           
  8147                           ;teris_16f886.c: 601: matrix7219->col2[col] = 0;
  8148  0138  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
  8149  0139  3E08               	addlw	8
  8150  013A  077C               	addwf	MATRIX16x8_to_MATRIX7219@matrix7219,w
  8151  013B  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8152  013C  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8153  013D  0084               	movwf	4
  8154  013E  1383               	bcf	3,7	;select IRP bank0
  8155  013F  0180               	clrf	0
  8156                           
  8157                           ;teris_16f886.c: 602: for(row = 8; row < 16; row++)
  8158  0140  3008               	movlw	8
  8159  0141  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8160  0142  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8161  0143  00A4               	movwf	MATRIX16x8_to_MATRIX7219@row
  8162  0144  3010               	movlw	16
  8163  0145  0224               	subwf	MATRIX16x8_to_MATRIX7219@row,w
  8164  0146  1803               	btfsc	3,0
  8165  0147  2975               	goto	l2634
  8166  0148                     l2624:	
  8167                           
  8168                           ;teris_16f886.c: 603: {
  8169                           ;teris_16f886.c: 604: if(get_matrix_bit(matrix16x8->row, row, col) == 1)
  8170  0148  0822               	movf	MATRIX16x8_to_MATRIX7219@matrix16x8,w
  8171  0149  00F7               	movwf	get_matrix_bit@byte
  8172  014A  3000               	movlw	0
  8173  014B  00F8               	movwf	get_matrix_bit@byte+1
  8174  014C  0824               	movf	MATRIX16x8_to_MATRIX7219@row,w
  8175  014D  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8176  014E  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8177  014F  00F9               	movwf	get_matrix_bit@row
  8178  0150  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
  8179  0151  00A1               	movwf	??_MATRIX16x8_to_MATRIX7219+1
  8180  0152  0821               	movf	??_MATRIX16x8_to_MATRIX7219+1,w
  8181  0153  00FA               	movwf	get_matrix_bit@col
  8182  0154  160A  118A  273D  120A  118A  	fcall	_get_matrix_bit
  8183  0159  3A01               	xorlw	1
  8184  015A  1D03               	skipz
  8185  015B  2969               	goto	l2628
  8186                           
  8187                           ;teris_16f886.c: 605: {
  8188                           ;teris_16f886.c: 606: matrix7219->col2[col] |= mask;
  8189  015C  1283               	bcf	3,5	;RP0=0, select bank0
  8190  015D  1303               	bcf	3,6	;RP1=0, select bank0
  8191  015E  0823               	movf	MATRIX16x8_to_MATRIX7219@mask,w
  8192  015F  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8193  0160  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
  8194  0161  3E08               	addlw	8
  8195  0162  077C               	addwf	MATRIX16x8_to_MATRIX7219@matrix7219,w
  8196  0163  00A1               	movwf	??_MATRIX16x8_to_MATRIX7219+1
  8197  0164  0821               	movf	??_MATRIX16x8_to_MATRIX7219+1,w
  8198  0165  0084               	movwf	4
  8199  0166  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8200  0167  1383               	bcf	3,7	;select IRP bank0
  8201  0168  0480               	iorwf	0,f
  8202  0169                     l2628:	
  8203                           
  8204                           ;teris_16f886.c: 607: }
  8205                           ;teris_16f886.c: 608: mask >>= 1;
  8206  0169  1003               	clrc
  8207  016A  1283               	bcf	3,5	;RP0=0, select bank0
  8208  016B  1303               	bcf	3,6	;RP1=0, select bank0
  8209  016C  0CA3               	rrf	MATRIX16x8_to_MATRIX7219@mask,f
  8210  016D  3001               	movlw	1
  8211  016E  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8212  016F  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8213  0170  07A4               	addwf	MATRIX16x8_to_MATRIX7219@row,f
  8214  0171  3010               	movlw	16
  8215  0172  0224               	subwf	MATRIX16x8_to_MATRIX7219@row,w
  8216  0173  1C03               	skipc
  8217  0174  2948               	goto	l2624
  8218  0175                     l2634:	
  8219  0175  3001               	movlw	1
  8220  0176  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8221  0177  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8222  0178  07A5               	addwf	MATRIX16x8_to_MATRIX7219@col,f
  8223  0179  28F4               	goto	L19
  8224  017A                     __end_of_MATRIX16x8_to_MATRIX7219:	
  8225                           
  8226                           	psect	text46
  8227  173D                     __ptext46:	
  8228 ;; *************** function _get_matrix_bit *****************
  8229 ;; Defined at:
  8230 ;;		line 467 in file "teris_16f886.c"
  8231 ;; Parameters:    Size  Location     Type
  8232 ;;  byte            2    7[COMMON] PTR const unsigned char 
  8233 ;;		 -> temp_matrix16x8.row(16), NULL(0), temp_matrix16x8(16), g_matrix4x4.row(4), 
  8234 ;;		 -> g_matrix4x4(96), g_matrix16x8(16), 
  8235 ;;  row             1    9[COMMON] unsigned char 
  8236 ;;  col             1   10[COMMON] unsigned char 
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;		None
  8239 ;; Return value:  Size  Location     Type
  8240 ;;                  1    wreg      unsigned char 
  8241 ;; Registers used:
  8242 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8243 ;; Tracked objects:
  8244 ;;		On entry : 0/0
  8245 ;;		On exit  : 0/0
  8246 ;;		Unchanged: 0/0
  8247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8248 ;;      Params:         4       0       0       0       0
  8249 ;;      Locals:         0       0       0       0       0
  8250 ;;      Temps:          1       0       0       0       0
  8251 ;;      Totals:         5       0       0       0       0
  8252 ;;Total ram usage:        5 bytes
  8253 ;; Hardware stack levels used:    1
  8254 ;; Hardware stack levels required when called:    2
  8255 ;; This function calls:
  8256 ;;		_getbit
  8257 ;; This function is called by:
  8258 ;;		_printf_debug_MATRIX4x4
  8259 ;;		_MATRIX16x8_to_MATRIX7219
  8260 ;;		_printf_debug_MATRIX16x8
  8261 ;;		_hit_land
  8262 ;;		_is_valid
  8263 ;;		_is_left_boundary
  8264 ;;		_is_right_boundary
  8265 ;;		_fall_off
  8266 ;;		_clear
  8267 ;;		_merge
  8268 ;;		_merge1
  8269 ;;		_get_num_of_orphan
  8270 ;;		_get_heavy
  8271 ;;		_get_high_after_merge
  8272 ;;		_get_holes_after_merge
  8273 ;; This function uses a non-reentrant model
  8274 ;;
  8275                           
  8276                           
  8277                           ;psect for function _get_matrix_bit
  8278  173D                     _get_matrix_bit:	
  8279                           
  8280                           ;teris_16f886.c: 473: return getbit(&byte[row], col);
  8281                           
  8282                           ;incstack = 0
  8283                           ; Regs used in _get_matrix_bit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8284  173D  0879               	movf	get_matrix_bit@row,w
  8285  173E  0777               	addwf	get_matrix_bit@byte,w
  8286  173F  00F0               	movwf	getbit@byte
  8287  1740  0878               	movf	get_matrix_bit@byte+1,w
  8288  1741  1803               	skipnc
  8289  1742  3E01               	addlw	1
  8290  1743  00F1               	movwf	getbit@byte+1
  8291  1744  087A               	movf	get_matrix_bit@col,w
  8292  1745  00FB               	movwf	??_get_matrix_bit
  8293  1746  087B               	movf	??_get_matrix_bit,w
  8294  1747  00F2               	movwf	getbit@at
  8295  1748  120A  118A  220A   	fcall	_getbit
  8296  174B  0008               	return
  8297  174C                     __end_of_get_matrix_bit:	
  8298                           
  8299                           	psect	text47
  8300  020A                     __ptext47:	
  8301 ;; *************** function _getbit *****************
  8302 ;; Defined at:
  8303 ;;		line 432 in file "teris_16f886.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  byte            2    0[COMMON] PTR const unsigned char 
  8306 ;;		 -> temp_matrix16x8.row(16), NULL(0), temp_matrix16x8(16), g_matrix4x4.row(4), 
  8307 ;;		 -> g_matrix4x4(96), g_matrix16x8(16), 
  8308 ;;  at              1    2[COMMON] unsigned char 
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;  temp            2    5[COMMON] PTR struct .
  8311 ;;		 -> temp_matrix16x8.row(16), NULL(0), temp_matrix16x8(16), g_matrix4x4.row(4), 
  8312 ;;		 -> g_matrix4x4(96), g_matrix16x8(16), 
  8313 ;; Return value:  Size  Location     Type
  8314 ;;                  1    wreg      unsigned char 
  8315 ;; Registers used:
  8316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  8317 ;; Tracked objects:
  8318 ;;		On entry : 0/0
  8319 ;;		On exit  : 0/0
  8320 ;;		Unchanged: 0/0
  8321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8322 ;;      Params:         3       0       0       0       0
  8323 ;;      Locals:         2       0       0       0       0
  8324 ;;      Temps:          2       0       0       0       0
  8325 ;;      Totals:         7       0       0       0       0
  8326 ;;Total ram usage:        7 bytes
  8327 ;; Hardware stack levels used:    2
  8328 ;; This function calls:
  8329 ;;		Nothing
  8330 ;; This function is called by:
  8331 ;;		_get_matrix_bit
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           
  8336                           ;psect for function _getbit
  8337  020A                     _getbit:	
  8338                           
  8339                           ;teris_16f886.c: 434: t_byte *temp = (t_byte *)byte;
  8340                           
  8341                           ;incstack = 0
  8342                           ; Regs used in _getbit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  8343  020A  0870               	movf	getbit@byte,w
  8344  020B  00F5               	movwf	getbit@temp
  8345  020C  0871               	movf	getbit@byte+1,w
  8346  020D  00F6               	movwf	getbit@temp+1
  8347                           
  8348                           ;teris_16f886.c: 435: switch(at)
  8349  020E  2A82               	goto	l2526
  8350  020F                     l2476:	
  8351                           ;teris_16f886.c: 436: {
  8352                           ;teris_16f886.c: 437: case 0:
  8353                           
  8354                           
  8355                           ;teris_16f886.c: 438: return (uint8_t)temp->b0;
  8356  020F  0876               	movf	getbit@temp+1,w
  8357  0210  1283               	bcf	3,5	;RP0=0, select bank0
  8358  0211  1303               	bcf	3,6	;RP1=0, select bank0
  8359  0212  00FF               	movwf	127
  8360  0213  0875               	movf	getbit@temp,w
  8361  0214  0084               	movwf	4
  8362  0215  120A  158A  2000   	fcall	stringtab
  8363  0218  00F3               	movwf	??_getbit
  8364  0219  0873               	movf	??_getbit,w
  8365  021A  3901               	andlw	1
  8366                           
  8367                           ;teris_16f886.c: 439: break;
  8368  021B  0008               	return
  8369  021C                     l2482:	
  8370                           ;teris_16f886.c: 440: case 1:
  8371                           
  8372                           
  8373                           ;teris_16f886.c: 441: return (uint8_t)temp->b1;
  8374  021C  0876               	movf	getbit@temp+1,w
  8375  021D  1283               	bcf	3,5	;RP0=0, select bank0
  8376  021E  1303               	bcf	3,6	;RP1=0, select bank0
  8377  021F  00FF               	movwf	127
  8378  0220  0875               	movf	getbit@temp,w
  8379  0221  0084               	movwf	4
  8380  0222  120A  158A  2000   	fcall	stringtab
  8381  0225  00F3               	movwf	??_getbit
  8382  0226  0C73               	rrf	??_getbit,w
  8383  0227  3901               	andlw	1
  8384                           
  8385                           ;teris_16f886.c: 442: break;
  8386  0228  0008               	return
  8387  0229                     l2488:	
  8388                           ;teris_16f886.c: 443: case 2:
  8389                           
  8390                           
  8391                           ;teris_16f886.c: 444: return (uint8_t)temp->b2;
  8392  0229  0876               	movf	getbit@temp+1,w
  8393  022A  1283               	bcf	3,5	;RP0=0, select bank0
  8394  022B  1303               	bcf	3,6	;RP1=0, select bank0
  8395  022C  00FF               	movwf	127
  8396  022D  0875               	movf	getbit@temp,w
  8397  022E  0084               	movwf	4
  8398  022F  120A  158A  2000   	fcall	stringtab
  8399  0232  00F3               	movwf	??_getbit
  8400  0233  0C73               	rrf	??_getbit,w
  8401  0234  00F4               	movwf	??_getbit+1
  8402  0235  0C74               	rrf	??_getbit+1,w
  8403  0236  3901               	andlw	1
  8404                           
  8405                           ;teris_16f886.c: 445: break;
  8406  0237  0008               	return
  8407  0238                     l2494:	
  8408                           ;teris_16f886.c: 446: case 3:
  8409                           
  8410                           
  8411                           ;teris_16f886.c: 447: return (uint8_t)temp->b3;
  8412  0238  0876               	movf	getbit@temp+1,w
  8413  0239  1283               	bcf	3,5	;RP0=0, select bank0
  8414  023A  1303               	bcf	3,6	;RP1=0, select bank0
  8415  023B  00FF               	movwf	127
  8416  023C  0875               	movf	getbit@temp,w
  8417  023D  0084               	movwf	4
  8418  023E  120A  158A  2000   	fcall	stringtab
  8419  0241  00F3               	movwf	??_getbit
  8420  0242  0C73               	rrf	??_getbit,w
  8421  0243  00F4               	movwf	??_getbit+1
  8422  0244  0CF4               	rrf	??_getbit+1,f
  8423  0245  0C74               	rrf	??_getbit+1,w
  8424  0246  3901               	andlw	1
  8425                           
  8426                           ;teris_16f886.c: 448: break;
  8427  0247  0008               	return
  8428  0248                     l2500:	
  8429                           ;teris_16f886.c: 449: case 4:
  8430                           
  8431                           
  8432                           ;teris_16f886.c: 450: return (uint8_t)temp->b4;
  8433  0248  0876               	movf	getbit@temp+1,w
  8434  0249  1283               	bcf	3,5	;RP0=0, select bank0
  8435  024A  1303               	bcf	3,6	;RP1=0, select bank0
  8436  024B  00FF               	movwf	127
  8437  024C  0875               	movf	getbit@temp,w
  8438  024D  0084               	movwf	4
  8439  024E  120A  158A  2000   	fcall	stringtab
  8440  0251  00F3               	movwf	??_getbit
  8441  0252  0E73               	swapf	??_getbit,w
  8442  0253  3901               	andlw	1
  8443                           
  8444                           ;teris_16f886.c: 451: break;
  8445  0254  0008               	return
  8446  0255                     l2506:	
  8447                           ;teris_16f886.c: 452: case 5:
  8448                           
  8449                           
  8450                           ;teris_16f886.c: 453: return (uint8_t)temp->b5;
  8451  0255  0876               	movf	getbit@temp+1,w
  8452  0256  1283               	bcf	3,5	;RP0=0, select bank0
  8453  0257  1303               	bcf	3,6	;RP1=0, select bank0
  8454  0258  00FF               	movwf	127
  8455  0259  0875               	movf	getbit@temp,w
  8456  025A  0084               	movwf	4
  8457  025B  120A  158A  2000   	fcall	stringtab
  8458  025E  00F3               	movwf	??_getbit
  8459  025F  0E73               	swapf	??_getbit,w
  8460  0260  00F4               	movwf	??_getbit+1
  8461  0261  0C74               	rrf	??_getbit+1,w
  8462  0262  3901               	andlw	1
  8463                           
  8464                           ;teris_16f886.c: 454: break;
  8465  0263  0008               	return
  8466  0264                     l2512:	
  8467                           ;teris_16f886.c: 455: case 6:
  8468                           
  8469                           
  8470                           ;teris_16f886.c: 456: return (uint8_t)temp->b6;
  8471  0264  0876               	movf	getbit@temp+1,w
  8472  0265  1283               	bcf	3,5	;RP0=0, select bank0
  8473  0266  1303               	bcf	3,6	;RP1=0, select bank0
  8474  0267  00FF               	movwf	127
  8475  0268  0875               	movf	getbit@temp,w
  8476  0269  0084               	movwf	4
  8477  026A  120A  158A  2000   	fcall	stringtab
  8478  026D  00F3               	movwf	??_getbit
  8479  026E  0E73               	swapf	??_getbit,w
  8480  026F  00F4               	movwf	??_getbit+1
  8481  0270  0CF4               	rrf	??_getbit+1,f
  8482  0271  0C74               	rrf	??_getbit+1,w
  8483  0272  3901               	andlw	1
  8484                           
  8485                           ;teris_16f886.c: 457: break;
  8486  0273  0008               	return
  8487  0274                     l2518:	
  8488                           ;teris_16f886.c: 458: case 7:
  8489                           
  8490                           
  8491                           ;teris_16f886.c: 459: return (uint8_t)temp->b7;
  8492  0274  0876               	movf	getbit@temp+1,w
  8493  0275  1283               	bcf	3,5	;RP0=0, select bank0
  8494  0276  1303               	bcf	3,6	;RP1=0, select bank0
  8495  0277  00FF               	movwf	127
  8496  0278  0875               	movf	getbit@temp,w
  8497  0279  0084               	movwf	4
  8498  027A  120A  158A  2000   	fcall	stringtab
  8499  027D  00F3               	movwf	??_getbit
  8500  027E  0D73               	rlf	??_getbit,w
  8501  027F  0D73               	rlf	??_getbit,w
  8502  0280  3901               	andlw	1
  8503                           
  8504                           ;teris_16f886.c: 461: }
  8505                           
  8506                           ;teris_16f886.c: 460: break;
  8507  0281  0008               	return
  8508  0282                     l2526:	
  8509  0282  0872               	movf	getbit@at,w
  8510                           
  8511                           ; Switch size 1, requested type "space"
  8512                           ; Number of cases is 8, Range of values is 0 to 7
  8513                           ; switch strategies available:
  8514                           ; Name         Instructions Cycles
  8515                           ; simple_byte           25    13 (average)
  8516                           ; direct_byte           32     8 (fixed)
  8517                           ; jumptable            260     6 (fixed)
  8518                           ;	Chosen strategy is simple_byte
  8519  0283  3A00               	xorlw	0	; case 0
  8520  0284  1903               	skipnz
  8521  0285  2A0F               	goto	l2476
  8522  0286  3A01               	xorlw	1	; case 1
  8523  0287  1903               	skipnz
  8524  0288  2A1C               	goto	l2482
  8525  0289  3A03               	xorlw	3	; case 2
  8526  028A  1903               	skipnz
  8527  028B  2A29               	goto	l2488
  8528  028C  3A01               	xorlw	1	; case 3
  8529  028D  1903               	skipnz
  8530  028E  2A38               	goto	l2494
  8531  028F  3A07               	xorlw	7	; case 4
  8532  0290  1903               	skipnz
  8533  0291  2A48               	goto	l2500
  8534  0292  3A01               	xorlw	1	; case 5
  8535  0293  1903               	skipnz
  8536  0294  2A55               	goto	l2506
  8537  0295  3A03               	xorlw	3	; case 6
  8538  0296  1903               	skipnz
  8539  0297  2A64               	goto	l2512
  8540  0298  3A01               	xorlw	1	; case 7
  8541  0299  1903               	skipnz
  8542  029A  2A74               	goto	l2518
  8543  029B  2A9C               	goto	l191
  8544  029C                     l191:	
  8545  029C  0008               	return
  8546  029D                     __end_of_getbit:	
  8547                           
  8548                           	psect	text48
  8549  17C8                     __ptext48:	
  8550 ;; *************** function _memset *****************
  8551 ;; Defined at:
  8552 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  8553 ;; Parameters:    Size  Location     Type
  8554 ;;  p1              1    wreg     PTR void 
  8555 ;;		 -> g_matrix16x8(16), 
  8556 ;;  c               2    0[COMMON] int 
  8557 ;;  n               2    2[COMMON] unsigned int 
  8558 ;; Auto vars:     Size  Location     Type
  8559 ;;  p1              1    5[COMMON] PTR void 
  8560 ;;		 -> g_matrix16x8(16), 
  8561 ;;  p               1    6[COMMON] PTR unsigned char 
  8562 ;;		 -> g_matrix16x8(16), 
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  1    wreg      PTR void 
  8565 ;; Registers used:
  8566 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8572 ;;      Params:         4       0       0       0       0
  8573 ;;      Locals:         2       0       0       0       0
  8574 ;;      Temps:          1       0       0       0       0
  8575 ;;      Totals:         7       0       0       0       0
  8576 ;;Total ram usage:        7 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; This function calls:
  8579 ;;		Nothing
  8580 ;; This function is called by:
  8581 ;;		_Clear_Matrix
  8582 ;; This function uses a non-reentrant model
  8583 ;;
  8584                           
  8585                           
  8586                           ;psect for function _memset
  8587  17C8                     _memset:	
  8588                           
  8589                           ;incstack = 0
  8590                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  8591                           ;memset@p1 stored from wreg
  8592  17C8  00F5               	movwf	memset@p1
  8593  17C9  0875               	movf	memset@p1,w
  8594  17CA  00F4               	movwf	??_memset
  8595  17CB  0874               	movf	??_memset,w
  8596  17CC  00F6               	movwf	memset@p
  8597  17CD                     l2784:	
  8598  17CD  3001               	movlw	1
  8599  17CE  02F2               	subwf	memset@n,f
  8600  17CF  3000               	movlw	0
  8601  17D0  1C03               	skipc
  8602  17D1  03F3               	decf	memset@n+1,f
  8603  17D2  02F3               	subwf	memset@n+1,f
  8604  17D3  0A72               	incf	memset@n,w
  8605  17D4  1903               	btfsc	3,2
  8606  17D5  0A73               	incf	memset@n+1,w
  8607  17D6  1903               	btfsc	3,2
  8608  17D7  0008               	return
  8609  17D8  0870               	movf	memset@c,w
  8610  17D9  00F4               	movwf	??_memset
  8611  17DA  0876               	movf	memset@p,w
  8612  17DB  0084               	movwf	4
  8613  17DC  0874               	movf	??_memset,w
  8614  17DD  1383               	bcf	3,7	;select IRP bank0
  8615  17DE  0080               	movwf	0
  8616  17DF  3001               	movlw	1
  8617  17E0  00F4               	movwf	??_memset
  8618  17E1  0874               	movf	??_memset,w
  8619  17E2  07F6               	addwf	memset@p,f
  8620  17E3  2FCD               	goto	l2784
  8621  17E4                     __end_of_memset:	
  8622                           ;	Return value of _memset is never used
  8623                           
  8624  007E                     btemp	set	126	;btemp
  8625  007E                     wtemp	set	126
  8626  007E                     wtemp0	set	126
  8627  0080                     wtemp1	set	128
  8628  0082                     wtemp2	set	130
  8629  0084                     wtemp3	set	132
  8630  0086                     wtemp4	set	134
  8631  0088                     wtemp5	set	136
  8632  007F                     wtemp6	set	127
  8633  007E                     ttemp	set	126
  8634  007E                     ttemp0	set	126
  8635  0081                     ttemp1	set	129
  8636  0084                     ttemp2	set	132
  8637  0087                     ttemp3	set	135
  8638  007F                     ttemp4	set	127
  8639  007E                     ltemp	set	126
  8640  007E                     ltemp0	set	126
  8641  0082                     ltemp1	set	130
  8642  0086                     ltemp2	set	134
  8643  0080                     ltemp3	set	128


Data Sizes:
    Strings     212
    Constant    144
    Data        21
    BSS         92
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     59      78
    BANK1            80      0      64
    BANK3            96      0      32
    BANK2            96      0       0

Pointer List with Targets:

    is_right_boundary@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    is_left_boundary@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memset@p1	PTR void  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memset@p	PTR unsigned char  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memcpy@d1	PTR void  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    memcpy@s1	PTR const void  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    g_cur_matrix4x4	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    temp_cur_matrix4x4	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    get_holes_after_merge@matrix	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    get_high_after_merge@matrix	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    get_high@matrix	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    right_most@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    right_most@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    left_most@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    left_most@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    get_heavy@matrix	PTR const struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    get_num_of_orphan@matrix	PTR const struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    merge1@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    sp__memcpy	PTR void  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    merge1@matrix16x8_in	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    merge1@matrix16x8_out	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    merge@matrix16x8	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    merge@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    clear@matrix16x8	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    clear@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    fall_off@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    fall_off@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    is_right_boundary@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    is_left_boundary@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    is_valid@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    is_valid@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    hit_land@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    hit_land@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    is_row_empty@matrix	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    get_num_removed_rows@matrix	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    delete_matrix@matrix	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    delete_row@matrix	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    is_row_full@matrix	PTR const struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), g_matrix16x8(BANK1[16]), 

    sp__memset	PTR void  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    printf_MATRIX16x8@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    printf_MATRIX7219@matrix	PTR const struct . size(1) Largest target is 16
		 -> printf_MATRIX16x8@matrix7219(BANK0[16]), 

    printf_debug_MATRIX16x8@matrix	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    printf_debug_MATRIX16x8@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_23(CODE[12]), ROM(CODE[8192]), 

    MATRIX16x8_to_MATRIX7219@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    MATRIX16x8_to_MATRIX7219@matrix7219	PTR struct . size(1) Largest target is 16
		 -> printf_MATRIX16x8@matrix7219(BANK0[16]), 

    sp__get_MATRIX4x4	PTR struct . size(2) Largest target is 96
		 -> g_matrix4x4(CODE[96]), 

    printf_debug_MATRIX4x4@matrix	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    printf_debug_MATRIX4x4@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_22(CODE[17]), ROM(CODE[8192]), 

    get_matrix_bit@byte	PTR const unsigned char  size(2) Largest target is 96
		 -> temp_matrix16x8.row(BANK1[16]), NULL(NULL[0]), temp_matrix16x8(BANK1[16]), g_matrix4x4.row(CODE[4]), 
		 -> g_matrix4x4(CODE[96]), g_matrix16x8(BANK1[16]), 

    set_matrix_bit@byte	PTR unsigned char  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), g_matrix16x8(BANK1[16]), 

    getbit@byte	PTR const unsigned char  size(2) Largest target is 96
		 -> temp_matrix16x8.row(BANK1[16]), NULL(NULL[0]), temp_matrix16x8(BANK1[16]), g_matrix4x4.row(CODE[4]), 
		 -> g_matrix4x4(CODE[96]), g_matrix16x8(BANK1[16]), 

    getbit@temp	PTR struct . size(2) Largest target is 96
		 -> temp_matrix16x8.row(BANK1[16]), NULL(NULL[0]), temp_matrix16x8(BANK1[16]), g_matrix4x4.row(CODE[4]), 
		 -> g_matrix4x4(CODE[96]), g_matrix16x8(BANK1[16]), 

    setbit@byte	PTR unsigned char  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), g_matrix16x8(BANK1[16]), 

    setbit@temp	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), g_matrix16x8(BANK1[16]), 

    debug_line@str	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_21(CODE[2]), STR_20(CODE[21]), STR_19(CODE[1]), STR_16(CODE[31]), 
		 -> STR_15(CODE[2]), STR_12(CODE[21]), STR_11(CODE[2]), STR_10(CODE[21]), 
		 -> STR_9(CODE[1]), STR_6(CODE[30]), STR_5(CODE[2]), 

    debug_str@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_23(CODE[12]), STR_22(CODE[17]), STR_18(CODE[2]), STR_17(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), ROM(CODE[8192]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_23(CODE[12]), STR_22(CODE[17]), STR_21(CODE[2]), STR_20(CODE[21]), 
		 -> STR_19(CODE[1]), STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[31]), 
		 -> STR_15(CODE[2]), STR_12(CODE[21]), STR_11(CODE[2]), STR_10(CODE[21]), 
		 -> STR_9(CODE[1]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[30]), 
		 -> STR_5(CODE[2]), ROM(CODE[8192]), STR_4(CODE[3]), STR_3(CODE[3]), 
		 -> STR_2(CODE[3]), g_debug(BANK1[32]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    _main->_clear
    _main->_hit_land
    _main->_merge
    _main->_printf_debug_MATRIX16x8
    _main->_printf_debug_MATRIX4x4
    _printf_debug_MATRIX4x4->_get_matrix_bit
    _printf_debug_MATRIX16x8->_get_matrix_bit
    _debug_str->_USARTWriteString
    _debug_line->_USARTWriteString
    _USARTWriteString->_USARTWriteChar
    _merge->_get_matrix_bit
    _max7219_init1->_Write_Word
    _hit_land->_get_matrix_bit
    _find_best_solution->___wmul
    _find_best_solution->_fall_off
    _find_best_solution->_get_heavy
    _find_best_solution->_get_high_after_merge
    _find_best_solution->_get_num_of_orphan
    _find_best_solution->_is_valid
    _find_best_solution->_left_most
    _find_best_solution->_merge1
    _right_most->_is_right_boundary
    _is_right_boundary->_get_matrix_bit
    _merge1->_get_matrix_bit
    _is_left_boundary->_get_matrix_bit
    _is_valid->_get_matrix_bit
    _get_num_removed_rows->_is_row_full
    _get_num_of_orphan->_get_matrix_bit
    _get_holes_after_merge->_get_matrix_bit
    _get_high_after_merge->_get_matrix_bit
    _get_high->_is_row_empty
    _get_heavy->_get_matrix_bit
    _fall_off->_get_matrix_bit
    _delete_matrix->_delete_row
    _clear->_get_matrix_bit
    _set_matrix_bit->_setbit
    _char_info_index_rand->___awmod
    _rand->___lmul
    _printf_Screen->_printf_MATRIX16x8
    _printf_MATRIX16x8->_MATRIX16x8_to_MATRIX7219
    _printf_MATRIX16x8->_printf_MATRIX7219
    _printf_MATRIX7219->_Write_Word
    _Write_Word->_SPI1_write
    _MATRIX16x8_to_MATRIX7219->_get_matrix_bit
    _get_matrix_bit->_getbit

Critical Paths under _main in BANK0

    _main->_find_best_solution
    _find_best_solution->___wmul
    _right_most->_is_right_boundary
    _left_most->_is_left_boundary
    ___wmul->_get_holes_after_merge
    _char_info_index_rand->___awmod
    ___awmod->_rand
    _printf_Screen->_printf_MATRIX16x8
    _printf_MATRIX16x8->_MATRIX16x8_to_MATRIX7219

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11     7      4  107139
                                             48 BANK0     11     7      4
                       _Clear_Matrix
                          _USARTInit
               _char_info_index_rand
                              _clear
                      _delete_matrix
                 _find_best_solution
                           _hit_land
                      _max7219_init1
                              _merge
                      _printf_Screen
            _printf_debug_MATRIX16x8
             _printf_debug_MATRIX4x4
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _printf_debug_MATRIX4x4                              14     8      6    8466
                                             12 COMMON     2     2      0
                                              0 BANK0     12     6      6
                         _debug_line
                          _debug_str
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (1) _printf_debug_MATRIX16x8                              7     4      3    7822
                                             12 COMMON     2     2      0
                                              0 BANK0      5     2      3
                         _debug_line
                          _debug_str
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _debug_str                                            2     0      2    1043
                                              3 COMMON     2     0      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _debug_line                                           2     0      2    1202
                                              3 COMMON     2     0      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     0      2     597
                                              1 COMMON     2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _merge                                                9     5      4    6766
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (1) _max7219_init1                                        3     3      0    1134
                                              8 COMMON     3     3      0
                         _Write_Word
 ---------------------------------------------------------------------------------
 (1) _hit_land                                             9     5      4    5634
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (1) _find_best_solution                                  32    32      0   54368
                                             16 BANK0     32    32      0
                             ___wmul
                           _fall_off
                          _get_heavy
                           _get_high
               _get_high_after_merge
              _get_holes_after_merge
                  _get_num_of_orphan
               _get_num_removed_rows
                           _is_valid
                          _left_most
                             _merge1
                         _right_most
 ---------------------------------------------------------------------------------
 (2) _right_most                                           5     2      3    5666
                                              6 BANK0      5     2      3
                  _is_right_boundary
 ---------------------------------------------------------------------------------
 (3) _is_right_boundary                                    8     5      3    5471
                                             12 COMMON     2     2      0
                                              0 BANK0      6     3      3
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _merge1                                              12     7      5    7139
                                             12 COMMON     2     2      0
                                              0 BANK0     10     5      5
                     _get_matrix_bit
                             _memcpy
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               7     4      3     253
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (2) _left_most                                            5     2      3    5666
                                             12 COMMON     2     2      0
                                             11 BANK0      3     0      3
                   _is_left_boundary
 ---------------------------------------------------------------------------------
 (3) _is_left_boundary                                    11     8      3    5471
                                              0 BANK0     11     8      3
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _is_valid                                             9     5      4    5722
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_num_removed_rows                                 4     4      0     372
                                              3 COMMON     4     4      0
                        _is_row_full
 ---------------------------------------------------------------------------------
 (2) _get_num_of_orphan                                   11     9      2    5579
                                             12 COMMON     2     0      2
                                              0 BANK0      9     9      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_holes_after_merge                               12    12      0    6244
                                              0 BANK0     12    12      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_high_after_merge                                 7     5      2    5418
                                             12 COMMON     2     0      2
                                              0 BANK0      5     5      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_high                                             3     3      0     241
                                              2 COMMON     3     3      0
                       _is_row_empty
 ---------------------------------------------------------------------------------
 (3) _is_row_empty                                         2     1      1     102
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _get_heavy                                           12    10      2    5626
                                             12 COMMON     2     0      2
                                              0 BANK0     10    10      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _fall_off                                             9     5      4    5679
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     492
                                             12 COMMON     2     2      0
                                             12 BANK0      4     0      4
              _get_holes_after_merge (ARG)
 ---------------------------------------------------------------------------------
 (1) _delete_matrix                                        4     4      0     675
                                              6 COMMON     4     4      0
                         _delete_row
                        _is_row_full
 ---------------------------------------------------------------------------------
 (3) _is_row_full                                          3     2      1     204
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _delete_row                                           6     5      1     324
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (1) _clear                                                9     5      4    6766
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _set_matrix_bit                                       6     3      3    1176
                                              5 COMMON     6     3      3
                             _setbit
 ---------------------------------------------------------------------------------
 (3) _setbit                                               5     3      2     530
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _char_info_index_rand                                 0     0      0     706
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     198
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     508
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      75
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Clear_Matrix                                         0     0      0    7407
                             _memset
                      _printf_Screen
 ---------------------------------------------------------------------------------
 (1) _printf_Screen                                        0     0      0    7178
                  _printf_MATRIX16x8
 ---------------------------------------------------------------------------------
 (2) _printf_MATRIX16x8                                   18    18      0    7178
                                             13 COMMON     1     1      0
                                              6 BANK0     17    17      0
           _MATRIX16x8_to_MATRIX7219
                  _printf_MATRIX7219
 ---------------------------------------------------------------------------------
 (3) _printf_MATRIX7219                                    7     7      0    1339
                                              8 COMMON     5     5      0
                                              0 BANK0      2     2      0
                         _Write_Word
 ---------------------------------------------------------------------------------
 (4) _Write_Word                                           4     1      3    1134
                                              4 COMMON     4     1      3
                         _SPI1_write
 ---------------------------------------------------------------------------------
 (5) _SPI1_write                                           4     4      0      92
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MATRIX16x8_to_MATRIX7219                             7     6      1    5738
                                             12 COMMON     1     0      1
                                              0 BANK0      6     6      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_matrix_bit                                       5     1      4    5163
                                              7 COMMON     5     1      4
                             _getbit
 ---------------------------------------------------------------------------------
 (4) _getbit                                               7     4      3     327
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     229
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Clear_Matrix
     _memset
     _printf_Screen
       _printf_MATRIX16x8
         _MATRIX16x8_to_MATRIX7219
           _get_matrix_bit
             _getbit
         _printf_MATRIX7219
           _Write_Word
             _SPI1_write
   _USARTInit
   _char_info_index_rand
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _clear
     _get_matrix_bit
       _getbit
     _set_matrix_bit
       _setbit
   _delete_matrix
     _delete_row
     _is_row_full
   _find_best_solution
     ___wmul
       _get_holes_after_merge (ARG)
         _get_matrix_bit
           _getbit
     _fall_off
       _get_matrix_bit
         _getbit
     _get_heavy
       _get_matrix_bit
         _getbit
     _get_high
       _is_row_empty
     _get_high_after_merge
       _get_matrix_bit
         _getbit
     _get_holes_after_merge
       _get_matrix_bit
         _getbit
     _get_num_of_orphan
       _get_matrix_bit
         _getbit
     _get_num_removed_rows
       _is_row_full
     _is_valid
       _get_matrix_bit
         _getbit
     _left_most
       _is_left_boundary
         _get_matrix_bit
           _getbit
     _merge1
       _get_matrix_bit
         _getbit
       _memcpy
       _set_matrix_bit
         _setbit
     _right_most
       _is_right_boundary
         _get_matrix_bit
           _getbit
   _hit_land
     _get_matrix_bit
       _getbit
   _max7219_init1
     _Write_Word
       _SPI1_write
   _merge
     _get_matrix_bit
       _getbit
     _set_matrix_bit
       _setbit
   _printf_Screen
     _printf_MATRIX16x8
       _MATRIX16x8_to_MATRIX7219
         _get_matrix_bit
           _getbit
       _printf_MATRIX7219
         _Write_Word
           _SPI1_write
   _printf_debug_MATRIX16x8
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _debug_str
       _USARTWriteString
         _USARTWriteChar
     _get_matrix_bit
       _getbit
   _printf_debug_MATRIX4x4
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _debug_str
       _USARTWriteString
         _USARTWriteChar
     _get_matrix_bit
       _getbit
   _srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      20       9       33.3%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      40       7       80.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3B      4E       5       97.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      BC      12        0.0%
ABS                  0      0      BC       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Aug 28 21:11:58 2016

                         __CFG_CP$ON 0000                                    pc 0002  
           ?_printf_debug_MATRIX16x8 0020        get_holes_after_merge@num_hole 0026  
                                 l36 1718                                   l29 0C63  
                        __CFG_CPD$ON 0000                                   fsr 0004  
                ___wmul@multiplicand 002E                   USARTInit@baud_rate 0070  
              ?_char_info_index_rand 0070                          get_high@row 0074  
           ??_printf_debug_MATRIX4x4 0026                          __CFG_LVP$ON 0000  
                                l208 02B5                                  l235 0AAF  
                                l411 00CE                                  l307 0A1E  
                                l420 17E5                                  l191 029C  
                                l257 0FA5                                  l186 0EB1  
                                l451 0573                                  l427 09A3  
                                l356 0F1F                                  l462 0568  
                                l468 059E                                  l733 09EE  
                                _GIE 005F                                  _RA1 0029  
                                _RA2 002A                                  _RA3 002B  
                                fsr0 0004                                  indf 0000  
                       ___awmod@sign 002C                  right_most@matrix4x4 0026  
                       __CFG_IESO$ON 0000                         get_heavy@col 0028  
                       get_heavy@pre 0027                         get_heavy@row 0029  
              __end_of_max7219_init1 0D08                  merge1@matrix16x8_in 0023  
                     is_row_full@row 0070                                 l3002 00D9  
                               l3010 00E7                                 l3100 04B6  
                               l3006 00DF                                 l3110 04CC  
                               l3120 04F1                                 l3202 0D48  
                               l3050 09DA                                 l3130 053C  
                               l2500 0248                                 l3212 0C36  
                               l3044 09C7                                 l3028 17FB  
                               l3036 09B9                                 l4012 03B9  
                               l3214 0C38                                 l3222 0C41  
                               l3206 0D50                                 l3054 09E0  
                               l3070 0B3C                                 l4014 03BE  
                               l2512 0264                                 l3216 0C3A  
                               l3160 09E4                                 l3080 0B63  
                               l4032 0412                                 l2506 0255  
                               l3218 0C3C                                 l3138 0549  
                               l3154 05A9                                 l3410 0EC1  
                               l3314 02CA                                 l2604 0108  
                               l2540 0AB2                                 l3180 0D14  
                               l3076 0B58                                 l3092 04AB  
                               l3404 0EBB                                 l3332 0376  
                               l3308 02C4                                 l4044 045C  
                               l2518 0274                                 l2526 0282  
                               l2614 0134                                 l3326 0362  
                               l2624 0148                                 l2608 0128  
                               l3192 0D21                                 l3184 0D1B  
                               l2800 0B28                                 l2704 0D8F  
                               l2712 0DA0                                 l3424 0F09  
                               l3432 0F1A                                 l2482 021C  
                               l2634 0175                                 l3194 0D2F  
                               l2570 0E61                                 l2810 0A0D  
                               l2722 0DAB                                 l3530 05BB  
                               l3418 0EEE                                 l3362 0FBA  
                               l3338 038A                                 l2476 020F  
                               l2628 0169                                 l2580 0E8E  
                               l2572 0E6A                                 l3452 0BDB  
                               l2900 0F88                                 l2708 0D9A  
                               l2740 0DE9                                 l3532 07BC  
                               l3524 07B0                                 l3428 0F14  
                               l3372 0FE5                                 l3356 0FB5  
                               l2494 0238                                 l3198 0D3D  
                               l2574 0E73                                 l2566 0E4F  
                               l2670 173B                                 l3518 070C  
                               l3526 0617                                 l3366 0FD2  
                               l2488 0229                                 l2760 0B70  
                               l2576 0E7C                                 l2568 0E58  
                               l2584 0E97                                 l3456 0BE5  
                               l3448 0BB4                                 l2680 1715  
                               l2816 0A27                                 l2840 01B7  
                               l2832 0189                                 l2736 0DDE  
                               l2728 0DB1                                 l2744 0DEF  
                               l3536 07C7                                 l3528 07B7  
                               l3480 0C29                                 l3472 0BF7  
                               l2656 0A29                                 l2578 0E85  
                               l3394 0A98                                 l2826 0183  
                               l2690 0D5E                                 l2922 0E3A  
                               l3378 0FF8                                 l4700 0C59  
                               l2764 0B86                                 l3396 0A7A  
                               l2844 01DC                                 l2756 0A57  
                               l3476 0C1F                                 l4702 0C5E  
                               l2854 01F7                                 l2862 0208  
                               l2926 0E44                                 l2918 0E12  
                               l2784 17CD                                 l2872 0F25  
                               l2960 005D                                 l2944 001D  
                               l2848 01DE                                 l2696 0D64  
                               l2954 003F                                 l2938 0013  
                               l2858 0202                                 l2892 0F77  
                               l2964 0065                                 l2798 0B21  
                               l2886 0F5C                                 l2878 0F2B  
                               l2990 009D                                 l2896 0F82  
                               l2976 0078                                 l2986 0083  
                               l2998 00D0                                 l4696 0C4F  
                               l4698 0C54                                 STR_1 096D  
                       __CFG_WDTE$ON 0000                                 STR_5 0972  
                               STR_6 08C1                                 STR_7 0970  
                               STR_8 0974                                 STR_9 096F  
                        main@hit_res 005A                                 u2405 0DDA  
                               u3305 0596                                 u2515 0B09  
                               u3415 0D35                                 u3335 09EF  
                               u3425 0D3E                                 u2465 0B88  
                               u3345 09F6                                 u2475 0B90  
                               u2645 01DA                                 u2745 0F71  
                               u2665 01F3                                 u3395 0D24  
                               u3555 0305                                 _PEIE 005E  
                               u3575 0342                                 u3745 0EEA  
                               _RCIE 0465                                 u3925 06E7  
                               u2975 0CAE                                 u3935 0771  
                               u3945 07A0                                 u4835 03EC  
                               u3885 05DC                                 u5807 0ABF  
                               u5777 044F                                 u5787 048F  
                               u5797 0AB7                         __CFG_WRT$OFF 0000  
             __end_of_USARTWriteChar 171F                        __CFG_FCMEN$ON 0000  
                               _main 0392                                 _rand 0C75  
               right_most@matrix16x8 0028                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 ltemp 007E  
                               start 0000                                 ttemp 007E  
                               wtemp 007E                        __CFG_MCLRE$ON 0000  
    find_best_solution@tem_sub_index 004E         __end_of_get_num_removed_rows 0A29  
                      get_heavy@risk 0023                      is_row_empty@row 0070  
               merge1@matrix16x8_out 0024           get_high_after_merge@matrix 007C  
                              ?_main 0050                                ?_rand 0020  
                              STR_10 090F                                STR_20 090F  
                              STR_12 08FA                                STR_13 0963  
                              STR_22 0946                                STR_14 08DF  
                              STR_15 0972                                STR_23 0957  
                              STR_24 0924                                STR_16 08A2  
                              STR_17 0970                                STR_25 0935  
                              STR_18 0974                                STR_19 096F  
                    __end_of___awmod 0D55                     USARTWriteChar@ch 0070  
         is_left_boundary@matrix16x8 0022                                _RCREG 001A  
 MATRIX16x8_to_MATRIX7219@matrix7219 007C                                _SPBRG 0099  
                   _is_left_boundary 0D55   MATRIX16x8_to_MATRIX7219@matrix16x8 0022  
                              _TXREG 0019                                _UQEnd 006C  
                ___lmul@multiplicand 0074                          ?_SPI1_write 0070  
                              _clear 0BA7                      __end_of_dpowers 083A  
                              _cur_x 006B                                _cur_y 0064  
                              _merge 0BEA                                _randx 0067  
                              _srand 0979                         ?_is_row_full 0070  
                    ??_printf_Screen 007E                                pclath 000A  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                    merge@matrix16x8 0023                   __size_of_USARTInit 0047  
                    ?_USARTWriteChar 0070                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                          hit_land@col 0025  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                          hit_land@row 0026  
                     get_high@matrix 0073                      __initialization 07C9  
    find_best_solution@temp_pre_risk 0042                         __end_of_main 049D  
                    _temp_matrix16x8 00C0                         __end_of_rand 0CBC  
                     get_heavy@start 0025               ??_char_info_index_rand 007E  
                             ??_main 0054      __size_of_printf_debug_MATRIX4x4 00F5  
                  get_matrix_bit@col 007A                               ??_rand 0022  
                  set_matrix_bit@col 0076          is_right_boundary@matrix16x8 0022  
                  get_matrix_bit@row 0079                    set_matrix_bit@row 0075  
           find_best_solution@temp_x 004F             find_best_solution@temp_y 004D  
                             ?_clear 0020                               ?_merge 0020  
  __size_of_MATRIX16x8_to_MATRIX7219 008E                               ?_srand 0070  
          ?_MATRIX16x8_to_MATRIX7219 007C                __size_of_Clear_Matrix 0011  
            get_num_of_orphan@matrix 0026                __end_of_delete_matrix 0A9D  
                             _URBuff 0190                     __end_of_fall_off 0F8D  
                     __CFG_PWRTE$OFF 0000                get_high_after_merge@y 0022  
          get_num_removed_rows@count 0074                     __end_of_get_high 09E2  
                __size_of_SPI1_write 002A                               ___lmul 0B68  
                             ___wmul 09E2                            ??___awmod 007D  
                   __end_of_hit_land 0F1C                               _getbit 020A  
                             _merge1 0DF1             __end_of_USARTWriteString 0A4E  
                             _memcpy 0A4E                               _memset 17C8  
                   __end_of_is_valid 020A                               clear@x 0024  
                             clear@y 0020                      ___awmod@divisor 0027  
                             _setbit 0E49                      ___awmod@counter 002B  
                  __end_of_USARTInit 0C75                        ?_is_row_empty 0070  
        __size_of_find_best_solution 021E                               merge@x 0024  
                             merge@y 0020                          is_valid@col 0026  
                        is_valid@row 0025                         _Clear_Matrix 176B  
                             srand@x 0070                    _is_right_boundary 0DA2  
         printf_debug_MATRIX16x8@col 0024           printf_debug_MATRIX16x8@row 0023  
               _get_num_removed_rows 0A05                     ??_get_matrix_bit 007B  
            ??_get_holes_after_merge 0020                   ?_is_right_boundary 0020  
             _printf_debug_MATRIX4x4 029D              __end_of__initialization 07FC  
          is_left_boundary@matrix4x4 0020                  ??_is_right_boundary 007C  
                     __pcstackCOMMON 0070                         __pidataBANK0 170A  
                       __pidataBANK1 175B                        __end_of_clear 0BEA  
                         _Write_Word 0982                        __end_of_merge 0C2E  
                    get_heavy@matrix 0026                        __end_of_srand 0982  
                 __size_of_debug_str 0008                       ??_is_row_empty 0071  
            __size_of_set_matrix_bit 000F                get_num_of_orphan@full 0025  
          __end_of_is_right_boundary 0DF1                get_num_of_orphan@risk 0023  
      __size_of_get_high_after_merge 003B                   __size_of_get_heavy 0082  
   __size_of_printf_debug_MATRIX16x8 0073           get_holes_after_merge@start 0028  
                 is_valid@matrix16x8 0023                ?_get_num_removed_rows 0070  
                            ??_clear 007C                              ??_merge 007C  
                 get_matrix_bit@byte 0077                              ??_srand 0072  
                 set_matrix_bit@byte 007A                           __pbssBANK0 005B  
                         __pbssBANK1 00A0                           __pbssBANK3 0190  
                 __size_of_left_most 001C                    is_row_full@matrix 0072  
               __size_of_is_row_full 000E                           _debug_line 177C  
                delete_matrix@matrix 0078             __end_of_is_left_boundary 0DA2  
                       _g_matrix16x8 00D0                           _delete_row 0AF6  
                         __pmaintext 0392                              ?___lmul 0070  
                            ?___wmul 002C                              ?_getbit 0070  
                            ?_merge1 0020                              ?_memcpy 0070  
                            ?_memset 0070                       ___lmul@product 0079  
                            ?_setbit 0070            get_holes_after_merge@stop 0027  
                       ??_SPI1_write 0070                            ?_fall_off 0020  
                   ??_USARTWriteChar 0070                 is_right_boundary@col 0025  
               is_right_boundary@row 0024                            ?_get_high 0070  
                 USARTWriteInt@F1617 005B                           __stringtab 0800  
                  _get_num_of_orphan 0005                            ?_hit_land 0020  
                  __end_of_debug_str 1727                              _UQFront 006D  
                          ?_is_valid 0020                   ?_get_num_of_orphan 007C  
       MATRIX16x8_to_MATRIX7219@mask 0023          MATRIX16x8_to_MATRIX7219@col 0025  
        MATRIX16x8_to_MATRIX7219@row 0024                        debug_line@str 0073  
                  __end_of_get_heavy 00EC              get_num_removed_rows@row 0076  
                ??_get_num_of_orphan 0020                      __size_of___lmul 003F  
                            ___awmod 0D08                   __end_of_SPI1_write 0AC7  
                    __size_of___wmul 0023               __size_of_max7219_init1 004C  
                        ?_Write_Word 0074                          right_most@x 002A  
                    __size_of_getbit 0093                              _g_debug 00A0  
                    __size_of_merge1 0058                      __size_of_memcpy 0026  
                          _ANSELbits 0188                      __size_of_memset 001C  
   __end_of_MATRIX16x8_to_MATRIX7219 017A                    __end_of_left_most 1800  
                            __ptext1 0979                              __ptext2 029D  
                            __ptext3 0F8D                              __ptext4 171F  
                            __ptext5 177C                              __ptext6 0A29  
                            __ptext7 1717                              __ptext8 0BEA  
                            __ptext9 0CBC                      __size_of_setbit 0069  
find_best_solution@tem_pre_sub_index 0047                   hit_land@matrix16x8 0023  
                  __end_of_hexpowers 0842                              _dpowers 0830  
                   ___awmod@dividend 0029           __size_of_is_right_boundary 004F  
             ??_get_num_removed_rows 0073                          SPI1_write@i 0073  
                         ??_fall_off 007C                          setbit@value 0071  
          __end_of_get_num_of_orphan 006A                           ??_get_high 0072  
                            clrloop0 1728                 end_of_initialization 07FC  
                  __end_of_octpowers 0830                    _printf_MATRIX7219 0AC7  
                         ??_hit_land 007C                              merge1@x 0027  
                            merge1@y 0020                    _printf_MATRIX16x8 179E  
                            memcpy@d 0075                              memcpy@n 0071  
                            memcpy@s 0076                __end_of_printf_Screen 170A  
                            memset@c 0070                 __end_of_is_row_empty 1717  
                            memset@n 0072                              memset@p 0076  
                         ??_is_valid 007C                          ?_debug_line 0073  
                 ?_printf_MATRIX7219 0070                       SPI1_write@data 0071  
                 ?_printf_MATRIX16x8 0070                       SPI1_write@mask 0072  
                         _right_most 09A0                          ?_delete_row 0070  
                          _RCSTAbits 0018                  ??_printf_MATRIX7219 0078  
                ??_printf_MATRIX16x8 007D                         __pstringtext 0800  
                  ?_USARTWriteString 0071        __size_of_char_info_index_rand 0018  
                     _set_matrix_bit 174C                   ??_USARTWriteString 0073  
                          _USARTInit 0C2E              _printf_debug_MATRIX16x8 0F8D  
                          _TRISAbits 0085                   left_most@matrix4x4 002B  
                __end_of_g_char_info 0824                      merge1@matrix4x4 0021  
          __end_of_printf_MATRIX7219 0AF6              ?_printf_debug_MATRIX4x4 0020  
          __end_of_printf_MATRIX16x8 17B0                        _max7219_init1 0CBC  
                __size_of_Write_Word 001E                           getbit@byte 0070  
                         getbit@temp 0075       __size_of_get_holes_after_merge 010E  
      __end_of_get_holes_after_merge 05AB                find_best_solution@res 004A  
                          _TXSTAbits 0098                      _g_cur_matrix4x4 0060  
       printf_debug_MATRIX16x8@lable 0020           __end_of_find_best_solution 07C9  
                     __end_of___lmul 0BA7                       __end_of___wmul 0A05  
             __end_of_set_matrix_bit 175B                  __end_of_g_matrix4x4 08A2  
                     __end_of_getbit 029D                       __end_of_merge1 0E49  
                     __end_of_memcpy 0A74                       __end_of_memset 17E4  
                     __end_of_setbit 0EB2               __size_of_delete_matrix 0029  
                __size_of_debug_line 0011                       merge@matrix4x4 0021  
                start_initialization 07C9                           ?_USARTInit 0070  
            printf_debug_MATRIX4x4@x 0022              printf_debug_MATRIX4x4@y 0023  
           _MATRIX16x8_to_MATRIX7219 00EC       __end_of_printf_debug_MATRIX4x4 0392  
                __size_of_delete_row 0037                       ?_max7219_init1 0070  
        printf_debug_MATRIX4x4@lable 0020           __size_of_get_num_of_orphan 0065  
                         left_most@x 007D           is_right_boundary@matrix4x4 0020  
                      delete_row@row 0070             __CFG_FOSC$INTRC_NOCLKOUT 0000  
                 is_right_boundary@x 0023         __end_of_get_high_after_merge 0B68  
                        ?_right_most 0026                    ?_is_left_boundary 0020  
        get_holes_after_merge@matrix 0029                             ??___lmul 0078  
                 ??_is_left_boundary 0023                             ??___wmul 007C  
                         init_fetch0 178D                   is_row_empty@matrix 0071  
                           ??_getbit 0073                          __pdataBANK0 0067  
                        __pdataBANK1 00D0                    _g_char_info_index 0065  
                           ??_merge1 007C                             ??_memcpy 0073  
                           ??_memset 0074                      ?_set_matrix_bit 0075  
                           ??_setbit 0072                          _g_char_info 0812  
                set_matrix_bit@value 0077            ??_printf_debug_MATRIX16x8 007C  
       find_best_solution@temp_pre_x 0046    find_best_solution@left_most_index 0044  
                          ___latbits 0002                        __pcstackBANK0 0020  
         __size_of_printf_MATRIX7219 002F                __size_of_is_row_empty 0008  
         __size_of_printf_MATRIX16x8 0012                        ??_is_row_full 0071  
                  __size_of_fall_off 0071                 get_num_of_orphan@col 0027  
               get_num_of_orphan@row 0028                    __size_of_get_high 0022  
                  is_valid@matrix4x4 0021                    __size_of_hit_land 006A  
                      _delete_matrix 0A74                            __pnvBANK0 006C  
                          _debug_str 171F                   delete_matrix@count 0077  
                  __size_of_is_valid 0090              printf_MATRIX7219@matrix 0020  
                   delete_matrix@row 0079                          _g_matrix4x4 0842  
            __size_of_get_matrix_bit 000F                             ?___awmod 0027  
                       ??_Write_Word 0077        printf_debug_MATRIX16x8@matrix 0022  
                          _get_heavy 006A                         _is_row_empty 170F  
                  is_left_boundary@x 0028                      ??_max7219_init1 0078  
                        ??_USARTInit 0072                            _left_most 17E4  
                 fall_off@matrix16x8 0023                  __size_of_right_most 0020  
                          _hexpowers 083A                       __size_of_clear 0043  
               printf_MATRIX7219@col 0021                       __size_of_merge 0044  
                     __size_of_srand 0009                         debug_str@str 0073  
                  hit_land@matrix4x4 0021                           setbit@byte 0073  
                 __end_of_Write_Word 09A0                           setbit@temp 0074  
    __end_of_printf_debug_MATRIX16x8 1000                         ??_debug_line 0075  
                     ?_delete_matrix 0070                       ___wmul@product 007C  
                          fall_off@x 0024                            fall_off@y 0020  
                   delete_row@matrix 0074                            clear_ram0 1727  
                          _octpowers 0824                  __end_of_is_row_full 173D  
                         ?_debug_str 0073                         ??_delete_row 0071  
                           _PIR1bits 000C         printf_debug_MATRIX4x4@matrix 0024  
                         ?_get_heavy 007C                          __stringbase 0812  
                  ___wmul@multiplier 002C                   __end_of_debug_line 178D  
                      ?_Clear_Matrix 0070                 _get_high_after_merge 0B2D  
                         ?_left_most 002B        __size_of_get_num_removed_rows 0024  
                 __end_of_delete_row 0B2D                    ___lmul@multiplier 0070  
                is_left_boundary@col 002A                  is_left_boundary@row 0029  
          __size_of_USARTWriteString 0025                            hit_land@x 0024  
                          hit_land@y 0020         __end_of_char_info_index_rand 17C8  
            get_high_after_merge@col 0023                            merge1@col 0029  
                          merge1@len 0025              get_high_after_merge@row 0024  
                          merge1@row 0028              __size_of_USARTWriteChar 0008  
                          is_valid@x 0024                            is_valid@y 0020  
        find_best_solution@temp_high 004B           ??_MATRIX16x8_to_MATRIX7219 0020  
                   __size_of___awmod 004D          find_best_solution@temp_risk 0048  
                 __end_of__stringtab 0812               __size_of_printf_Screen 0005  
                     ??_Clear_Matrix 007E                ?_get_high_after_merge 007C  
                           _fall_off 0F1C                   _find_best_solution 05AB  
                           __ptext10 0EB2                             __ptext11 05AB  
                           __ptext20 0005                             __ptext12 09A0  
                           __ptext21 049D                             __ptext13 0DA2  
                           __ptext30 0AF6                             __ptext22 0B2D  
                           __ptext14 0DF1                             __ptext31 0BA7  
                           __ptext23 09C0                             __ptext15 0A4E  
                           __ptext40 1705                             __ptext32 174C  
                           __ptext24 170F                             __ptext16 17E4  
                           __ptext41 179E                             __ptext33 0E49  
                           __ptext25 006A                             __ptext17 0D55  
                           __ptext42 0AC7                             __ptext34 17B0  
                           __ptext26 0F1C                             __ptext18 017A  
                           __ptext43 0982                             __ptext35 0C75  
                           __ptext27 09E2                             __ptext19 0A05  
                           __ptext44 0A9D                             __ptext36 0B68  
                           __ptext28 0A74                             __ptext45 00EC  
                           __ptext37 0D08                             __ptext29 172F  
                           __ptext46 173D                             __ptext38 0C2E  
                           __ptext47 020A                             __ptext39 176B  
                           __ptext48 17C8                    __CFG_BOR4V$BOR21V 0000  
                           _get_high 09C0                _g_char_info_sub_index 0066  
                        _is_row_full 172F                      ??_delete_matrix 0076  
                           _hit_land 0EB2            printf_debug_MATRIX4x4@col 007D  
          printf_debug_MATRIX4x4@row 007C                    fall_off@matrix4x4 0021  
                ?_find_best_solution 0070                        __size_of_main 010B  
                           _is_valid 017A                        __size_of_rand 0047  
                           clear@col 0026          printf_MATRIX16x8@matrix7219 0027  
                           clear@row 0025                         ??_right_most 0029  
        printf_MATRIX16x8@matrix16x8 0026                _get_holes_after_merge 049D  
                        ??_debug_str 0075                       _get_matrix_bit 173D  
                   ??_set_matrix_bit 0078                      clear@matrix16x8 0023  
                           main@Seed 0058                             getbit@at 0072  
                           main@argc 0050                             main@argv 0052  
                        ??_get_heavy 0020             get_holes_after_merge@col 002A  
           get_holes_after_merge@row 002B                 ??_find_best_solution 0030  
                        fall_off@col 0025                          fall_off@row 0026  
          __size_of_is_left_boundary 004D                          delete_row@i 0075  
                        ??_left_most 007C                             memcpy@d1 0074  
                           memcpy@s1 0070                             merge@col 0026  
                           merge@row 0025                   __end_of_right_most 09C0  
                           init_ram0 1791                             memset@p1 0075  
                      _printf_Screen 1705               __end_of_get_matrix_bit 174C  
                          stringcode 080A                             setbit@at 0070  
                     clear@matrix4x4 0021                  USARTWriteString@str 0071  
                Write_Word@myColumn1 0077                  Write_Word@myColumn2 0075  
               _char_info_index_rand 17B0               ??_get_high_after_merge 0020  
 find_best_solution@right_most_index 0045                             stringtab 0800  
                         _SPI1_write 0A9D                     _USARTWriteString 0A29  
                 Write_Word@myValue1 0074                   Write_Word@myValue2 0076  
                 _temp_cur_matrix4x4 0062                       ?_printf_Screen 0070  
         get_num_removed_rows@matrix 0075               ?_get_holes_after_merge 0070  
                    ?_get_matrix_bit 0077                       _USARTWriteChar 1717  
               __end_of_Clear_Matrix 177C                  left_most@matrix16x8 002D  
