

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Aug 27 14:43:27 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	dabs	1,0x7E,2
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000E                     	;# 
    89  000F                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  001D                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0086                     	;# 
   111  0087                     	;# 
   112  0089                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  008F                     	;# 
   117  0090                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  0105                     	;# 
   136  0107                     	;# 
   137  0108                     	;# 
   138  0109                     	;# 
   139  010C                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  010F                     	;# 
   144  0185                     	;# 
   145  0187                     	;# 
   146  0188                     	;# 
   147  0189                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  0105                     	;# 
   212  0107                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  0185                     	;# 
   221  0187                     	;# 
   222  0188                     	;# 
   223  0189                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226                           
   227                           	psect	idataBANK0
   228  0DC4                     __pidataBANK0:	
   229                           
   230                           ;initializer for _temp_pre_risk
   231  0DC4  34FF               	retlw	255
   232  0DC5  34FF               	retlw	255
   233                           
   234                           ;initializer for _temp_pre_x
   235  0DC6  340F               	retlw	15
   236                           
   237                           	psect	idataBANK1
   238  1000                     __pidataBANK1:	
   239                           
   240                           ;initializer for _cur_x
   241  1000  3402               	retlw	2
   242                           
   243                           ;initializer for _temp_pre_high
   244  1001  34FF               	retlw	255
   245                           
   246                           ;initializer for _temp_pre_hole
   247  1002  34FF               	retlw	255
   248                           
   249                           	psect	idataBANK3
   250  190E                     __pidataBANK3:	
   251                           
   252                           ;initializer for _g_char_info
   253  190E  3400               	retlw	0
   254  190F  3400               	retlw	0
   255  1910  3402               	retlw	2
   256  1911  3402               	retlw	2
   257  1912  3400               	retlw	0
   258  1913  3402               	retlw	2
   259  1914  3404               	retlw	4
   260  1915  3400               	retlw	0
   261  1916  3402               	retlw	2
   262  1917  3406               	retlw	6
   263  1918  3400               	retlw	0
   264  1919  3404               	retlw	4
   265  191A  340A               	retlw	10
   266  191B  3400               	retlw	0
   267  191C  3404               	retlw	4
   268  191D  340E               	retlw	14
   269  191E  3400               	retlw	0
   270  191F  3401               	retlw	1
   271  1920  340F               	retlw	15
   272  1921  3400               	retlw	0
   273  1922  3404               	retlw	4
   274  1923  3413               	retlw	19
   275  1924  3400               	retlw	0
   276  1925  3401               	retlw	1
   277  1926  3414               	retlw	20
   278  1927  3400               	retlw	0
   279  1928  3404               	retlw	4
   280                           
   281                           ;initializer for _randx
   282  1929  3401               	retlw	1
   283  192A  3400               	retlw	0
   284  192B  3400               	retlw	0
   285  192C  3400               	retlw	0
   286                           
   287                           ;initializer for _tem_pre_sub_index
   288  192D  340F               	retlw	15
   289                           
   290                           	psect	stringtext
   291  0800                     __pstringtext:	
   292  0800                     stringtab:	
   293  0800                     __stringtab:	
   294                           
   295                           ;	String table - string pointers are 2 bytes each
   296  0800  1BFF               	btfsc	btemp+1,7
   297  0801  280A               	ljmp	stringcode
   298  0802  1383               	bcf	3,7
   299  0803  187F               	btfsc	btemp+1,0
   300  0804  1783               	bsf	3,7
   301  0805  0800               	movf	0,w
   302  0806  0A84               	incf	4,f
   303  0807  1903               	skipnz
   304  0808  0AFF               	incf	btemp+1,f
   305  0809  0008               	return
   306  080A                     stringcode:	
   307  080A  087F               	movf	btemp+1,w
   308  080B  397F               	andlw	127
   309  080C  008A               	movwf	10
   310  080D  0804               	movf	4,w
   311  080E  0A84               	incf	4,f
   312  080F  1903               	skipnz
   313  0810  0AFF               	incf	btemp+1,f
   314  0811  0082               	movwf	2
   315  0812                     __stringbase:	
   316  0812                     __end_of__stringtab:	
   317  0812                     _octpowers:	
   318  0812  3401               	retlw	1
   319  0813  3400               	retlw	0
   320  0814  3408               	retlw	8
   321  0815  3400               	retlw	0
   322  0816  3440               	retlw	64
   323  0817  3400               	retlw	0
   324  0818  3400               	retlw	0
   325  0819  3402               	retlw	2
   326  081A  3400               	retlw	0
   327  081B  3410               	retlw	16
   328  081C  3400               	retlw	0
   329  081D  3480               	retlw	128
   330  081E                     __end_of_octpowers:	
   331  081E                     _dpowers:	
   332  081E  3401               	retlw	1
   333  081F  3400               	retlw	0
   334  0820  340A               	retlw	10
   335  0821  3400               	retlw	0
   336  0822  3464               	retlw	100
   337  0823  3400               	retlw	0
   338  0824  34E8               	retlw	232
   339  0825  3403               	retlw	3
   340  0826  3410               	retlw	16
   341  0827  3427               	retlw	39
   342  0828                     __end_of_dpowers:	
   343  0828                     _hexpowers:	
   344  0828  3401               	retlw	1
   345  0829  3400               	retlw	0
   346  082A  3410               	retlw	16
   347  082B  3400               	retlw	0
   348  082C  3400               	retlw	0
   349  082D  3401               	retlw	1
   350  082E  3400               	retlw	0
   351  082F  3410               	retlw	16
   352  0830                     __end_of_hexpowers:	
   353  0830                     _g_matrix44:	
   354  0830  3400               	retlw	0
   355  0831  3401               	retlw	1
   356  0832  3400               	retlw	0
   357  0833  3400               	retlw	0
   358  0834  3400               	retlw	0
   359  0835  3401               	retlw	1
   360  0836  3400               	retlw	0
   361  0837  3400               	retlw	0
   362  0838  3400               	retlw	0
   363  0839  3401               	retlw	1
   364  083A  3400               	retlw	0
   365  083B  3400               	retlw	0
   366  083C  3400               	retlw	0
   367  083D  3401               	retlw	1
   368  083E  3400               	retlw	0
   369  083F  3400               	retlw	0
   370  0840  3400               	retlw	0
   371  0841  3400               	retlw	0
   372  0842  3400               	retlw	0
   373  0843  3400               	retlw	0
   374  0844  3401               	retlw	1
   375  0845  3401               	retlw	1
   376  0846  3401               	retlw	1
   377  0847  3401               	retlw	1
   378  0848  3400               	retlw	0
   379  0849  3400               	retlw	0
   380  084A  3400               	retlw	0
   381  084B  3400               	retlw	0
   382  084C  3400               	retlw	0
   383  084D  3400               	retlw	0
   384  084E  3400               	retlw	0
   385  084F  3400               	retlw	0
   386  0850  3400               	retlw	0
   387  0851  3401               	retlw	1
   388  0852  3401               	retlw	1
   389  0853  3400               	retlw	0
   390  0854  3401               	retlw	1
   391  0855  3401               	retlw	1
   392  0856  3400               	retlw	0
   393  0857  3400               	retlw	0
   394  0858  3400               	retlw	0
   395  0859  3400               	retlw	0
   396  085A  3400               	retlw	0
   397  085B  3400               	retlw	0
   398  085C  3400               	retlw	0
   399  085D  3400               	retlw	0
   400  085E  3400               	retlw	0
   401  085F  3400               	retlw	0
   402  0860  3400               	retlw	0
   403  0861  3401               	retlw	1
   404  0862  3400               	retlw	0
   405  0863  3400               	retlw	0
   406  0864  3400               	retlw	0
   407  0865  3401               	retlw	1
   408  0866  3401               	retlw	1
   409  0867  3400               	retlw	0
   410  0868  3400               	retlw	0
   411  0869  3400               	retlw	0
   412  086A  3401               	retlw	1
   413  086B  3400               	retlw	0
   414  086C  3400               	retlw	0
   415  086D  3400               	retlw	0
   416  086E  3400               	retlw	0
   417  086F  3400               	retlw	0
   418  0870  3401               	retlw	1
   419  0871  3401               	retlw	1
   420  0872  3400               	retlw	0
   421  0873  3400               	retlw	0
   422  0874  3400               	retlw	0
   423  0875  3401               	retlw	1
   424  0876  3401               	retlw	1
   425  0877  3400               	retlw	0
   426  0878  3400               	retlw	0
   427  0879  3400               	retlw	0
   428  087A  3400               	retlw	0
   429  087B  3400               	retlw	0
   430  087C  3400               	retlw	0
   431  087D  3400               	retlw	0
   432  087E  3400               	retlw	0
   433  087F  3400               	retlw	0
   434  0880  3400               	retlw	0
   435  0881  3401               	retlw	1
   436  0882  3400               	retlw	0
   437  0883  3400               	retlw	0
   438  0884  3401               	retlw	1
   439  0885  3401               	retlw	1
   440  0886  3400               	retlw	0
   441  0887  3400               	retlw	0
   442  0888  3401               	retlw	1
   443  0889  3400               	retlw	0
   444  088A  3400               	retlw	0
   445  088B  3400               	retlw	0
   446  088C  3400               	retlw	0
   447  088D  3400               	retlw	0
   448  088E  3400               	retlw	0
   449  088F  3400               	retlw	0
   450  0890  3400               	retlw	0
   451  0891  3400               	retlw	0
   452  0892  3400               	retlw	0
   453  0893  3400               	retlw	0
   454  0894  3401               	retlw	1
   455  0895  3401               	retlw	1
   456  0896  3401               	retlw	1
   457  0897  3400               	retlw	0
   458  0898  3400               	retlw	0
   459  0899  3400               	retlw	0
   460  089A  3401               	retlw	1
   461  089B  3400               	retlw	0
   462  089C  3400               	retlw	0
   463  089D  3400               	retlw	0
   464  089E  3400               	retlw	0
   465  089F  3400               	retlw	0
   466  08A0  3400               	retlw	0
   467  08A1  3401               	retlw	1
   468  08A2  3401               	retlw	1
   469  08A3  3400               	retlw	0
   470  08A4  3400               	retlw	0
   471  08A5  3401               	retlw	1
   472  08A6  3400               	retlw	0
   473  08A7  3400               	retlw	0
   474  08A8  3400               	retlw	0
   475  08A9  3401               	retlw	1
   476  08AA  3400               	retlw	0
   477  08AB  3400               	retlw	0
   478  08AC  3400               	retlw	0
   479  08AD  3400               	retlw	0
   480  08AE  3400               	retlw	0
   481  08AF  3400               	retlw	0
   482  08B0  3401               	retlw	1
   483  08B1  3400               	retlw	0
   484  08B2  3400               	retlw	0
   485  08B3  3400               	retlw	0
   486  08B4  3401               	retlw	1
   487  08B5  3401               	retlw	1
   488  08B6  3401               	retlw	1
   489  08B7  3400               	retlw	0
   490  08B8  3400               	retlw	0
   491  08B9  3400               	retlw	0
   492  08BA  3400               	retlw	0
   493  08BB  3400               	retlw	0
   494  08BC  3400               	retlw	0
   495  08BD  3400               	retlw	0
   496  08BE  3400               	retlw	0
   497  08BF  3400               	retlw	0
   498  08C0  3400               	retlw	0
   499  08C1  3401               	retlw	1
   500  08C2  3400               	retlw	0
   501  08C3  3400               	retlw	0
   502  08C4  3400               	retlw	0
   503  08C5  3401               	retlw	1
   504  08C6  3400               	retlw	0
   505  08C7  3400               	retlw	0
   506  08C8  3401               	retlw	1
   507  08C9  3401               	retlw	1
   508  08CA  3400               	retlw	0
   509  08CB  3400               	retlw	0
   510  08CC  3400               	retlw	0
   511  08CD  3400               	retlw	0
   512  08CE  3400               	retlw	0
   513  08CF  3400               	retlw	0
   514  08D0  3400               	retlw	0
   515  08D1  3400               	retlw	0
   516  08D2  3400               	retlw	0
   517  08D3  3400               	retlw	0
   518  08D4  3401               	retlw	1
   519  08D5  3401               	retlw	1
   520  08D6  3401               	retlw	1
   521  08D7  3400               	retlw	0
   522  08D8  3401               	retlw	1
   523  08D9  3400               	retlw	0
   524  08DA  3400               	retlw	0
   525  08DB  3400               	retlw	0
   526  08DC  3400               	retlw	0
   527  08DD  3400               	retlw	0
   528  08DE  3400               	retlw	0
   529  08DF  3400               	retlw	0
   530  08E0  3401               	retlw	1
   531  08E1  3401               	retlw	1
   532  08E2  3400               	retlw	0
   533  08E3  3400               	retlw	0
   534  08E4  3400               	retlw	0
   535  08E5  3401               	retlw	1
   536  08E6  3400               	retlw	0
   537  08E7  3400               	retlw	0
   538  08E8  3400               	retlw	0
   539  08E9  3401               	retlw	1
   540  08EA  3400               	retlw	0
   541  08EB  3400               	retlw	0
   542  08EC  3400               	retlw	0
   543  08ED  3400               	retlw	0
   544  08EE  3400               	retlw	0
   545  08EF  3400               	retlw	0
   546  08F0  3400               	retlw	0
   547  08F1  3400               	retlw	0
   548  08F2  3401               	retlw	1
   549  08F3  3400               	retlw	0
   550  08F4  3401               	retlw	1
   551  08F5  3401               	retlw	1
   552  08F6  3401               	retlw	1
   553  08F7  3400               	retlw	0
   554  08F8  3400               	retlw	0
   555  08F9  3400               	retlw	0
   556  08FA  3400               	retlw	0
   557  08FB  3400               	retlw	0
   558  08FC  3400               	retlw	0
   559  08FD  3400               	retlw	0
   560  08FE  3400               	retlw	0
   561  08FF  3400               	retlw	0
   562  0900  3400               	retlw	0
   563  0901  3401               	retlw	1
   564  0902  3400               	retlw	0
   565  0903  3400               	retlw	0
   566  0904  3400               	retlw	0
   567  0905  3401               	retlw	1
   568  0906  3400               	retlw	0
   569  0907  3400               	retlw	0
   570  0908  3400               	retlw	0
   571  0909  3401               	retlw	1
   572  090A  3401               	retlw	1
   573  090B  3400               	retlw	0
   574  090C  3400               	retlw	0
   575  090D  3400               	retlw	0
   576  090E  3400               	retlw	0
   577  090F  3400               	retlw	0
   578  0910  3400               	retlw	0
   579  0911  3401               	retlw	1
   580  0912  3401               	retlw	1
   581  0913  3400               	retlw	0
   582  0914  3400               	retlw	0
   583  0915  3401               	retlw	1
   584  0916  3401               	retlw	1
   585  0917  3400               	retlw	0
   586  0918  3400               	retlw	0
   587  0919  3400               	retlw	0
   588  091A  3400               	retlw	0
   589  091B  3400               	retlw	0
   590  091C  3400               	retlw	0
   591  091D  3400               	retlw	0
   592  091E  3400               	retlw	0
   593  091F  3400               	retlw	0
   594  0920  3400               	retlw	0
   595  0921  3400               	retlw	0
   596  0922  3400               	retlw	0
   597  0923  3400               	retlw	0
   598  0924  3400               	retlw	0
   599  0925  3401               	retlw	1
   600  0926  3401               	retlw	1
   601  0927  3400               	retlw	0
   602  0928  3400               	retlw	0
   603  0929  3401               	retlw	1
   604  092A  3400               	retlw	0
   605  092B  3400               	retlw	0
   606  092C  3400               	retlw	0
   607  092D  3400               	retlw	0
   608  092E  3400               	retlw	0
   609  092F  3400               	retlw	0
   610  0930  3400               	retlw	0
   611  0931  3400               	retlw	0
   612  0932  3400               	retlw	0
   613  0933  3400               	retlw	0
   614  0934  3401               	retlw	1
   615  0935  3401               	retlw	1
   616  0936  3400               	retlw	0
   617  0937  3400               	retlw	0
   618  0938  3400               	retlw	0
   619  0939  3401               	retlw	1
   620  093A  3400               	retlw	0
   621  093B  3400               	retlw	0
   622  093C  3400               	retlw	0
   623  093D  3400               	retlw	0
   624  093E  3400               	retlw	0
   625  093F  3400               	retlw	0
   626  0940  3400               	retlw	0
   627  0941  3401               	retlw	1
   628  0942  3400               	retlw	0
   629  0943  3400               	retlw	0
   630  0944  3401               	retlw	1
   631  0945  3401               	retlw	1
   632  0946  3400               	retlw	0
   633  0947  3400               	retlw	0
   634  0948  3400               	retlw	0
   635  0949  3400               	retlw	0
   636  094A  3400               	retlw	0
   637  094B  3400               	retlw	0
   638  094C  3400               	retlw	0
   639  094D  3400               	retlw	0
   640  094E  3400               	retlw	0
   641  094F  3400               	retlw	0
   642  0950  3400               	retlw	0
   643  0951  3401               	retlw	1
   644  0952  3400               	retlw	0
   645  0953  3400               	retlw	0
   646  0954  3400               	retlw	0
   647  0955  3401               	retlw	1
   648  0956  3401               	retlw	1
   649  0957  3400               	retlw	0
   650  0958  3400               	retlw	0
   651  0959  3400               	retlw	0
   652  095A  3400               	retlw	0
   653  095B  3400               	retlw	0
   654  095C  3400               	retlw	0
   655  095D  3400               	retlw	0
   656  095E  3400               	retlw	0
   657  095F  3400               	retlw	0
   658  0960  3400               	retlw	0
   659  0961  3401               	retlw	1
   660  0962  3400               	retlw	0
   661  0963  3400               	retlw	0
   662  0964  3401               	retlw	1
   663  0965  3401               	retlw	1
   664  0966  3401               	retlw	1
   665  0967  3400               	retlw	0
   666  0968  3400               	retlw	0
   667  0969  3401               	retlw	1
   668  096A  3400               	retlw	0
   669  096B  3400               	retlw	0
   670  096C  3400               	retlw	0
   671  096D  3400               	retlw	0
   672  096E  3400               	retlw	0
   673  096F  3400               	retlw	0
   674  0970  3401               	retlw	1
   675  0971  3401               	retlw	1
   676  0972  3401               	retlw	1
   677  0973  3400               	retlw	0
   678  0974  3400               	retlw	0
   679  0975  3401               	retlw	1
   680  0976  3400               	retlw	0
   681  0977  3400               	retlw	0
   682  0978  3400               	retlw	0
   683  0979  3401               	retlw	1
   684  097A  3400               	retlw	0
   685  097B  3400               	retlw	0
   686  097C  3400               	retlw	0
   687  097D  3400               	retlw	0
   688  097E  3400               	retlw	0
   689  097F  3400               	retlw	0
   690  0980  3400               	retlw	0
   691  0981  3400               	retlw	0
   692  0982  3401               	retlw	1
   693  0983  3400               	retlw	0
   694  0984  3401               	retlw	1
   695  0985  3401               	retlw	1
   696  0986  3401               	retlw	1
   697  0987  3400               	retlw	0
   698  0988  3400               	retlw	0
   699  0989  3400               	retlw	0
   700  098A  3401               	retlw	1
   701  098B  3400               	retlw	0
   702  098C  3400               	retlw	0
   703  098D  3400               	retlw	0
   704  098E  3400               	retlw	0
   705  098F  3400               	retlw	0
   706  0990  3400               	retlw	0
   707  0991  3401               	retlw	1
   708  0992  3400               	retlw	0
   709  0993  3400               	retlw	0
   710  0994  3400               	retlw	0
   711  0995  3401               	retlw	1
   712  0996  3400               	retlw	0
   713  0997  3400               	retlw	0
   714  0998  3401               	retlw	1
   715  0999  3401               	retlw	1
   716  099A  3401               	retlw	1
   717  099B  3400               	retlw	0
   718  099C  3400               	retlw	0
   719  099D  3400               	retlw	0
   720  099E  3400               	retlw	0
   721  099F  3400               	retlw	0
   722  09A0  3401               	retlw	1
   723  09A1  3400               	retlw	0
   724  09A2  3400               	retlw	0
   725  09A3  3400               	retlw	0
   726  09A4  3401               	retlw	1
   727  09A5  3401               	retlw	1
   728  09A6  3401               	retlw	1
   729  09A7  3400               	retlw	0
   730  09A8  3401               	retlw	1
   731  09A9  3400               	retlw	0
   732  09AA  3400               	retlw	0
   733  09AB  3400               	retlw	0
   734  09AC  3400               	retlw	0
   735  09AD  3400               	retlw	0
   736  09AE  3400               	retlw	0
   737  09AF  3400               	retlw	0
   738  09B0                     __end_of_g_matrix44:	
   739  09B0                     STR_59:	
   740  09B0  343D               	retlw	61	;'='
   741  09B1  343D               	retlw	61	;'='
   742  09B2  343D               	retlw	61	;'='
   743  09B3  343D               	retlw	61	;'='
   744  09B4  343D               	retlw	61	;'='
   745  09B5  343D               	retlw	61	;'='
   746  09B6  343D               	retlw	61	;'='
   747  09B7  343D               	retlw	61	;'='
   748  09B8  343D               	retlw	61	;'='
   749  09B9  343D               	retlw	61	;'='
   750  09BA  343D               	retlw	61	;'='
   751  09BB  343D               	retlw	61	;'='
   752  09BC  343D               	retlw	61	;'='
   753  09BD  343D               	retlw	61	;'='
   754  09BE  3466               	retlw	102	;'f'
   755  09BF  3469               	retlw	105	;'i'
   756  09C0  346E               	retlw	110	;'n'
   757  09C1  3464               	retlw	100	;'d'
   758  09C2  345F               	retlw	95	;'_'
   759  09C3  3462               	retlw	98	;'b'
   760  09C4  3465               	retlw	101	;'e'
   761  09C5  3473               	retlw	115	;'s'
   762  09C6  3474               	retlw	116	;'t'
   763  09C7  345F               	retlw	95	;'_'
   764  09C8  3473               	retlw	115	;'s'
   765  09C9  346F               	retlw	111	;'o'
   766  09CA  346C               	retlw	108	;'l'
   767  09CB  3475               	retlw	117	;'u'
   768  09CC  3474               	retlw	116	;'t'
   769  09CD  3469               	retlw	105	;'i'
   770  09CE  346F               	retlw	111	;'o'
   771  09CF  346E               	retlw	110	;'n'
   772  09D0  343D               	retlw	61	;'='
   773  09D1  343D               	retlw	61	;'='
   774  09D2  343D               	retlw	61	;'='
   775  09D3  343D               	retlw	61	;'='
   776  09D4  343D               	retlw	61	;'='
   777  09D5  343D               	retlw	61	;'='
   778  09D6  343D               	retlw	61	;'='
   779  09D7  343D               	retlw	61	;'='
   780  09D8  343D               	retlw	61	;'='
   781  09D9  343D               	retlw	61	;'='
   782  09DA  343D               	retlw	61	;'='
   783  09DB  343D               	retlw	61	;'='
   784  09DC  3400               	retlw	0
   785  09DD                     STR_33:	
   786  09DD  343D               	retlw	61	;'='
   787  09DE  343D               	retlw	61	;'='
   788  09DF  343D               	retlw	61	;'='
   789  09E0  343D               	retlw	61	;'='
   790  09E1  343D               	retlw	61	;'='
   791  09E2  343D               	retlw	61	;'='
   792  09E3  343D               	retlw	61	;'='
   793  09E4  343D               	retlw	61	;'='
   794  09E5  343D               	retlw	61	;'='
   795  09E6  343D               	retlw	61	;'='
   796  09E7  343D               	retlw	61	;'='
   797  09E8  343D               	retlw	61	;'='
   798  09E9  343D               	retlw	61	;'='
   799  09EA  343D               	retlw	61	;'='
   800  09EB  3469               	retlw	105	;'i'
   801  09EC  3473               	retlw	115	;'s'
   802  09ED  345F               	retlw	95	;'_'
   803  09EE  3476               	retlw	118	;'v'
   804  09EF  3461               	retlw	97	;'a'
   805  09F0  346C               	retlw	108	;'l'
   806  09F1  3469               	retlw	105	;'i'
   807  09F2  3464               	retlw	100	;'d'
   808  09F3  343D               	retlw	61	;'='
   809  09F4  343D               	retlw	61	;'='
   810  09F5  343D               	retlw	61	;'='
   811  09F6  343D               	retlw	61	;'='
   812  09F7  343D               	retlw	61	;'='
   813  09F8  343D               	retlw	61	;'='
   814  09F9  343D               	retlw	61	;'='
   815  09FA  343D               	retlw	61	;'='
   816  09FB  343D               	retlw	61	;'='
   817  09FC  343D               	retlw	61	;'='
   818  09FD  343D               	retlw	61	;'='
   819  09FE  343D               	retlw	61	;'='
   820  09FF  3400               	retlw	0
   821  0A00                     STR_29:	
   822  0A00  343D               	retlw	61	;'='
   823  0A01  343D               	retlw	61	;'='
   824  0A02  343D               	retlw	61	;'='
   825  0A03  343D               	retlw	61	;'='
   826  0A04  343D               	retlw	61	;'='
   827  0A05  343D               	retlw	61	;'='
   828  0A06  343D               	retlw	61	;'='
   829  0A07  343D               	retlw	61	;'='
   830  0A08  343D               	retlw	61	;'='
   831  0A09  343D               	retlw	61	;'='
   832  0A0A  343D               	retlw	61	;'='
   833  0A0B  343D               	retlw	61	;'='
   834  0A0C  343D               	retlw	61	;'='
   835  0A0D  343D               	retlw	61	;'='
   836  0A0E  3468               	retlw	104	;'h'
   837  0A0F  3469               	retlw	105	;'i'
   838  0A10  3474               	retlw	116	;'t'
   839  0A11  345F               	retlw	95	;'_'
   840  0A12  346C               	retlw	108	;'l'
   841  0A13  3461               	retlw	97	;'a'
   842  0A14  346E               	retlw	110	;'n'
   843  0A15  3464               	retlw	100	;'d'
   844  0A16  343D               	retlw	61	;'='
   845  0A17  343D               	retlw	61	;'='
   846  0A18  343D               	retlw	61	;'='
   847  0A19  343D               	retlw	61	;'='
   848  0A1A  343D               	retlw	61	;'='
   849  0A1B  343D               	retlw	61	;'='
   850  0A1C  343D               	retlw	61	;'='
   851  0A1D  343D               	retlw	61	;'='
   852  0A1E  343D               	retlw	61	;'='
   853  0A1F  343D               	retlw	61	;'='
   854  0A20  343D               	retlw	61	;'='
   855  0A21  343D               	retlw	61	;'='
   856  0A22  3400               	retlw	0
   857  0A23                     STR_6:	
   858  0A23  343C               	retlw	60	;'<'
   859  0A24  343C               	retlw	60	;'<'
   860  0A25  343C               	retlw	60	;'<'
   861  0A26  343C               	retlw	60	;'<'
   862  0A27  343C               	retlw	60	;'<'
   863  0A28  343C               	retlw	60	;'<'
   864  0A29  343C               	retlw	60	;'<'
   865  0A2A  343C               	retlw	60	;'<'
   866  0A2B  343C               	retlw	60	;'<'
   867  0A2C  343C               	retlw	60	;'<'
   868  0A2D  343C               	retlw	60	;'<'
   869  0A2E  343C               	retlw	60	;'<'
   870  0A2F  343C               	retlw	60	;'<'
   871  0A30  343C               	retlw	60	;'<'
   872  0A31  343C               	retlw	60	;'<'
   873  0A32  343C               	retlw	60	;'<'
   874  0A33  343C               	retlw	60	;'<'
   875  0A34  343C               	retlw	60	;'<'
   876  0A35  343C               	retlw	60	;'<'
   877  0A36  343C               	retlw	60	;'<'
   878  0A37  344D               	retlw	77	;'M'
   879  0A38  3441               	retlw	65	;'A'
   880  0A39  3454               	retlw	84	;'T'
   881  0A3A  3452               	retlw	82	;'R'
   882  0A3B  3449               	retlw	73	;'I'
   883  0A3C  3458               	retlw	88	;'X'
   884  0A3D  3434               	retlw	52	;'4'
   885  0A3E  3434               	retlw	52	;'4'
   886  0A3F  3400               	retlw	0
   887  0A40                     STR_22:	
   888  0A40  343C               	retlw	60	;'<'
   889  0A41  343C               	retlw	60	;'<'
   890  0A42  343C               	retlw	60	;'<'
   891  0A43  343C               	retlw	60	;'<'
   892  0A44  343C               	retlw	60	;'<'
   893  0A45  343C               	retlw	60	;'<'
   894  0A46  343C               	retlw	60	;'<'
   895  0A47  343C               	retlw	60	;'<'
   896  0A48  343C               	retlw	60	;'<'
   897  0A49  343C               	retlw	60	;'<'
   898  0A4A  343C               	retlw	60	;'<'
   899  0A4B  343C               	retlw	60	;'<'
   900  0A4C  343C               	retlw	60	;'<'
   901  0A4D  343C               	retlw	60	;'<'
   902  0A4E  343C               	retlw	60	;'<'
   903  0A4F  343C               	retlw	60	;'<'
   904  0A50  343C               	retlw	60	;'<'
   905  0A51  343C               	retlw	60	;'<'
   906  0A52  343C               	retlw	60	;'<'
   907  0A53  343C               	retlw	60	;'<'
   908  0A54  344D               	retlw	77	;'M'
   909  0A55  3441               	retlw	65	;'A'
   910  0A56  3454               	retlw	84	;'T'
   911  0A57  3452               	retlw	82	;'R'
   912  0A58  3449               	retlw	73	;'I'
   913  0A59  3458               	retlw	88	;'X'
   914  0A5A  3438               	retlw	56	;'8'
   915  0A5B  3438               	retlw	56	;'8'
   916  0A5C  3400               	retlw	0
   917  0A5D                     STR_14:	
   918  0A5D  3469               	retlw	105	;'i'
   919  0A5E  346E               	retlw	110	;'n'
   920  0A5F  3464               	retlw	100	;'d'
   921  0A60  3465               	retlw	101	;'e'
   922  0A61  3478               	retlw	120	;'x'
   923  0A62  3420               	retlw	32	;' '
   924  0A63  343D               	retlw	61	;'='
   925  0A64  3420               	retlw	32	;' '
   926  0A65  3425               	retlw	37	;'%'
   927  0A66  3464               	retlw	100	;'d'
   928  0A67  342C               	retlw	44	;','
   929  0A68  3420               	retlw	32	;' '
   930  0A69  3473               	retlw	115	;'s'
   931  0A6A  3475               	retlw	117	;'u'
   932  0A6B  3462               	retlw	98	;'b'
   933  0A6C  345F               	retlw	95	;'_'
   934  0A6D  3469               	retlw	105	;'i'
   935  0A6E  346E               	retlw	110	;'n'
   936  0A6F  3464               	retlw	100	;'d'
   937  0A70  3465               	retlw	101	;'e'
   938  0A71  3478               	retlw	120	;'x'
   939  0A72  3420               	retlw	32	;' '
   940  0A73  343D               	retlw	61	;'='
   941  0A74  3420               	retlw	32	;' '
   942  0A75  3425               	retlw	37	;'%'
   943  0A76  3464               	retlw	100	;'d'
   944  0A77  3400               	retlw	0
   945  0A78                     STR_28:	
   946  0A78  3464               	retlw	100	;'d'
   947  0A79  3465               	retlw	101	;'e'
   948  0A7A  346C               	retlw	108	;'l'
   949  0A7B  3465               	retlw	101	;'e'
   950  0A7C  3474               	retlw	116	;'t'
   951  0A7D  3465               	retlw	101	;'e'
   952  0A7E  345F               	retlw	95	;'_'
   953  0A7F  346D               	retlw	109	;'m'
   954  0A80  3461               	retlw	97	;'a'
   955  0A81  3474               	retlw	116	;'t'
   956  0A82  3472               	retlw	114	;'r'
   957  0A83  3469               	retlw	105	;'i'
   958  0A84  3478               	retlw	120	;'x'
   959  0A85  3420               	retlw	32	;' '
   960  0A86  3463               	retlw	99	;'c'
   961  0A87  346F               	retlw	111	;'o'
   962  0A88  3475               	retlw	117	;'u'
   963  0A89  346E               	retlw	110	;'n'
   964  0A8A  3474               	retlw	116	;'t'
   965  0A8B  3420               	retlw	32	;' '
   966  0A8C  343D               	retlw	61	;'='
   967  0A8D  3420               	retlw	32	;' '
   968  0A8E  3425               	retlw	37	;'%'
   969  0A8F  3464               	retlw	100	;'d'
   970  0A90  3400               	retlw	0
   971  0A91                     STR_30:	
   972  0A91  3468               	retlw	104	;'h'
   973  0A92  3469               	retlw	105	;'i'
   974  0A93  3474               	retlw	116	;'t'
   975  0A94  3431               	retlw	49	;'1'
   976  0A95  3420               	retlw	32	;' '
   977  0A96  3472               	retlw	114	;'r'
   978  0A97  346F               	retlw	111	;'o'
   979  0A98  3477               	retlw	119	;'w'
   980  0A99  3420               	retlw	32	;' '
   981  0A9A  343D               	retlw	61	;'='
   982  0A9B  3420               	retlw	32	;' '
   983  0A9C  3425               	retlw	37	;'%'
   984  0A9D  3464               	retlw	100	;'d'
   985  0A9E  342C               	retlw	44	;','
   986  0A9F  3420               	retlw	32	;' '
   987  0AA0  3463               	retlw	99	;'c'
   988  0AA1  346F               	retlw	111	;'o'
   989  0AA2  346C               	retlw	108	;'l'
   990  0AA3  3420               	retlw	32	;' '
   991  0AA4  343D               	retlw	61	;'='
   992  0AA5  3420               	retlw	32	;' '
   993  0AA6  3425               	retlw	37	;'%'
   994  0AA7  3464               	retlw	100	;'d'
   995  0AA8  3400               	retlw	0
   996  0AA9                     STR_31:	
   997  0AA9  3468               	retlw	104	;'h'
   998  0AAA  3469               	retlw	105	;'i'
   999  0AAB  3474               	retlw	116	;'t'
  1000  0AAC  3432               	retlw	50	;'2'
  1001  0AAD  3420               	retlw	32	;' '
  1002  0AAE  3472               	retlw	114	;'r'
  1003  0AAF  346F               	retlw	111	;'o'
  1004  0AB0  3477               	retlw	119	;'w'
  1005  0AB1  3420               	retlw	32	;' '
  1006  0AB2  343D               	retlw	61	;'='
  1007  0AB3  3420               	retlw	32	;' '
  1008  0AB4  3425               	retlw	37	;'%'
  1009  0AB5  3464               	retlw	100	;'d'
  1010  0AB6  342C               	retlw	44	;','
  1011  0AB7  3420               	retlw	32	;' '
  1012  0AB8  3463               	retlw	99	;'c'
  1013  0AB9  346F               	retlw	111	;'o'
  1014  0ABA  346C               	retlw	108	;'l'
  1015  0ABB  3420               	retlw	32	;' '
  1016  0ABC  343D               	retlw	61	;'='
  1017  0ABD  3420               	retlw	32	;' '
  1018  0ABE  3425               	retlw	37	;'%'
  1019  0ABF  3464               	retlw	100	;'d'
  1020  0AC0  3400               	retlw	0
  1021  0AC1                     STR_95:	
  1022  0AC1  3467               	retlw	103	;'g'
  1023  0AC2  345F               	retlw	95	;'_'
  1024  0AC3  3463               	retlw	99	;'c'
  1025  0AC4  3468               	retlw	104	;'h'
  1026  0AC5  3461               	retlw	97	;'a'
  1027  0AC6  3472               	retlw	114	;'r'
  1028  0AC7  345F               	retlw	95	;'_'
  1029  0AC8  3469               	retlw	105	;'i'
  1030  0AC9  346E               	retlw	110	;'n'
  1031  0ACA  3466               	retlw	102	;'f'
  1032  0ACB  346F               	retlw	111	;'o'
  1033  0ACC  345F               	retlw	95	;'_'
  1034  0ACD  3469               	retlw	105	;'i'
  1035  0ACE  346E               	retlw	110	;'n'
  1036  0ACF  3464               	retlw	100	;'d'
  1037  0AD0  3465               	retlw	101	;'e'
  1038  0AD1  3478               	retlw	120	;'x'
  1039  0AD2  3420               	retlw	32	;' '
  1040  0AD3  343D               	retlw	61	;'='
  1041  0AD4  3420               	retlw	32	;' '
  1042  0AD5  3425               	retlw	37	;'%'
  1043  0AD6  3464               	retlw	100	;'d'
  1044  0AD7  3400               	retlw	0
  1045  0AD8                     STR_72:	
  1046  0AD8  3457               	retlw	87	;'W'
  1047  0AD9  3441               	retlw	65	;'A'
  1048  0ADA  3452               	retlw	82	;'R'
  1049  0ADB  344E               	retlw	78	;'N'
  1050  0ADC  3449               	retlw	73	;'I'
  1051  0ADD  344E               	retlw	78	;'N'
  1052  0ADE  3447               	retlw	71	;'G'
  1053  0ADF  3420               	retlw	32	;' '
  1054  0AE0  3468               	retlw	104	;'h'
  1055  0AE1  3465               	retlw	101	;'e'
  1056  0AE2  3469               	retlw	105	;'i'
  1057  0AE3  3467               	retlw	103	;'g'
  1058  0AE4  3468               	retlw	104	;'h'
  1059  0AE5  3474               	retlw	116	;'t'
  1060  0AE6  3420               	retlw	32	;' '
  1061  0AE7  343E               	retlw	62	;'>'
  1062  0AE8  3420               	retlw	32	;' '
  1063  0AE9  3428               	retlw	40	;'('
  1064  0AEA  3425               	retlw	37	;'%'
  1065  0AEB  3464               	retlw	100	;'d'
  1066  0AEC  3429               	retlw	41	;')'
  1067  0AED  3400               	retlw	0
  1068  0AEE                     STR_16:	
  1069  0AEE  343C               	retlw	60	;'<'
  1070  0AEF  343C               	retlw	60	;'<'
  1071  0AF0  343C               	retlw	60	;'<'
  1072  0AF1  343C               	retlw	60	;'<'
  1073  0AF2  343C               	retlw	60	;'<'
  1074  0AF3  343C               	retlw	60	;'<'
  1075  0AF4  343C               	retlw	60	;'<'
  1076  0AF5  343C               	retlw	60	;'<'
  1077  0AF6  343C               	retlw	60	;'<'
  1078  0AF7  343C               	retlw	60	;'<'
  1079  0AF8  343C               	retlw	60	;'<'
  1080  0AF9  343C               	retlw	60	;'<'
  1081  0AFA  343C               	retlw	60	;'<'
  1082  0AFB  343C               	retlw	60	;'<'
  1083  0AFC  343C               	retlw	60	;'<'
  1084  0AFD  343C               	retlw	60	;'<'
  1085  0AFE  343C               	retlw	60	;'<'
  1086  0AFF  343C               	retlw	60	;'<'
  1087  0B00  343C               	retlw	60	;'<'
  1088  0B01  343C               	retlw	60	;'<'
  1089  0B02  3400               	retlw	0
  1090  0B03                     STR_10:	
  1091  0B03  343E               	retlw	62	;'>'
  1092  0B04  343E               	retlw	62	;'>'
  1093  0B05  343E               	retlw	62	;'>'
  1094  0B06  343E               	retlw	62	;'>'
  1095  0B07  343E               	retlw	62	;'>'
  1096  0B08  343E               	retlw	62	;'>'
  1097  0B09  343E               	retlw	62	;'>'
  1098  0B0A  343E               	retlw	62	;'>'
  1099  0B0B  343E               	retlw	62	;'>'
  1100  0B0C  343E               	retlw	62	;'>'
  1101  0B0D  343E               	retlw	62	;'>'
  1102  0B0E  343E               	retlw	62	;'>'
  1103  0B0F  343E               	retlw	62	;'>'
  1104  0B10  343E               	retlw	62	;'>'
  1105  0B11  343E               	retlw	62	;'>'
  1106  0B12  343E               	retlw	62	;'>'
  1107  0B13  343E               	retlw	62	;'>'
  1108  0B14  343E               	retlw	62	;'>'
  1109  0B15  343E               	retlw	62	;'>'
  1110  0B16  343E               	retlw	62	;'>'
  1111  0B17  3400               	retlw	0
  1112  0B18                     STR_50:	
  1113  0B18  3467               	retlw	103	;'g'
  1114  0B19  3465               	retlw	101	;'e'
  1115  0B1A  3474               	retlw	116	;'t'
  1116  0B1B  345F               	retlw	95	;'_'
  1117  0B1C  3468               	retlw	104	;'h'
  1118  0B1D  3469               	retlw	105	;'i'
  1119  0B1E  3467               	retlw	103	;'g'
  1120  0B1F  3468               	retlw	104	;'h'
  1121  0B20  3420               	retlw	32	;' '
  1122  0B21  3468               	retlw	104	;'h'
  1123  0B22  3465               	retlw	101	;'e'
  1124  0B23  3469               	retlw	105	;'i'
  1125  0B24  3467               	retlw	103	;'g'
  1126  0B25  3468               	retlw	104	;'h'
  1127  0B26  3474               	retlw	116	;'t'
  1128  0B27  3420               	retlw	32	;' '
  1129  0B28  343D               	retlw	61	;'='
  1130  0B29  3420               	retlw	32	;' '
  1131  0B2A  3425               	retlw	37	;'%'
  1132  0B2B  3464               	retlw	100	;'d'
  1133  0B2C  3400               	retlw	0
  1134  0B2D                     STR_51:	
  1135  0B2D  3467               	retlw	103	;'g'
  1136  0B2E  3465               	retlw	101	;'e'
  1137  0B2F  3474               	retlw	116	;'t'
  1138  0B30  345F               	retlw	95	;'_'
  1139  0B31  3468               	retlw	104	;'h'
  1140  0B32  3469               	retlw	105	;'i'
  1141  0B33  3467               	retlw	103	;'g'
  1142  0B34  3468               	retlw	104	;'h'
  1143  0B35  345F               	retlw	95	;'_'
  1144  0B36  3461               	retlw	97	;'a'
  1145  0B37  3466               	retlw	102	;'f'
  1146  0B38  3474               	retlw	116	;'t'
  1147  0B39  3465               	retlw	101	;'e'
  1148  0B3A  3472               	retlw	114	;'r'
  1149  0B3B  345F               	retlw	95	;'_'
  1150  0B3C  346D               	retlw	109	;'m'
  1151  0B3D  3465               	retlw	101	;'e'
  1152  0B3E  3472               	retlw	114	;'r'
  1153  0B3F  3467               	retlw	103	;'g'
  1154  0B40  3465               	retlw	101	;'e'
  1155  0B41  3400               	retlw	0
  1156  0B42                     STR_66:	
  1157  0B42  3463               	retlw	99	;'c'
  1158  0B43  346F               	retlw	111	;'o'
  1159  0B44  3475               	retlw	117	;'u'
  1160  0B45  346E               	retlw	110	;'n'
  1161  0B46  3474               	retlw	116	;'t'
  1162  0B47  343A               	retlw	58	;':'
  1163  0B48  3420               	retlw	32	;' '
  1164  0B49  3428               	retlw	40	;'('
  1165  0B4A  3425               	retlw	37	;'%'
  1166  0B4B  3464               	retlw	100	;'d'
  1167  0B4C  3429               	retlw	41	;')'
  1168  0B4D  3420               	retlw	32	;' '
  1169  0B4E  343D               	retlw	61	;'='
  1170  0B4F  343D               	retlw	61	;'='
  1171  0B50  3420               	retlw	32	;' '
  1172  0B51  3428               	retlw	40	;'('
  1173  0B52  3425               	retlw	37	;'%'
  1174  0B53  3464               	retlw	100	;'d'
  1175  0B54  3429               	retlw	41	;')'
  1176  0B55  3400               	retlw	0
  1177  0B56                     STR_12:	
  1178  0B56  3470               	retlw	112	;'p'
  1179  0B57  3472               	retlw	114	;'r'
  1180  0B58  3469               	retlw	105	;'i'
  1181  0B59  346E               	retlw	110	;'n'
  1182  0B5A  3474               	retlw	116	;'t'
  1183  0B5B  3466               	retlw	102	;'f'
  1184  0B5C  345F               	retlw	95	;'_'
  1185  0B5D  3461               	retlw	97	;'a'
  1186  0B5E  346C               	retlw	108	;'l'
  1187  0B5F  346C               	retlw	108	;'l'
  1188  0B60  345F               	retlw	95	;'_'
  1189  0B61  344D               	retlw	77	;'M'
  1190  0B62  3441               	retlw	65	;'A'
  1191  0B63  3454               	retlw	84	;'T'
  1192  0B64  3452               	retlw	82	;'R'
  1193  0B65  3449               	retlw	73	;'I'
  1194  0B66  3458               	retlw	88	;'X'
  1195  0B67  3434               	retlw	52	;'4'
  1196  0B68  3434               	retlw	52	;'4'
  1197  0B69  3400               	retlw	0
  1198  0B6A                     STR_42:	
  1199  0B6A  3452               	retlw	82	;'R'
  1200  0B6B  3449               	retlw	73	;'I'
  1201  0B6C  3447               	retlw	71	;'G'
  1202  0B6D  3448               	retlw	72	;'H'
  1203  0B6E  3454               	retlw	84	;'T'
  1204  0B6F  345F               	retlw	95	;'_'
  1205  0B70  344F               	retlw	79	;'O'
  1206  0B71  3456               	retlw	86	;'V'
  1207  0B72  3445               	retlw	69	;'E'
  1208  0B73  3452               	retlw	82	;'R'
  1209  0B74  345F               	retlw	95	;'_'
  1210  0B75  3442               	retlw	66	;'B'
  1211  0B76  344F               	retlw	79	;'O'
  1212  0B77  3455               	retlw	85	;'U'
  1213  0B78  344E               	retlw	78	;'N'
  1214  0B79  3444               	retlw	68	;'D'
  1215  0B7A  3441               	retlw	65	;'A'
  1216  0B7B  3452               	retlw	82	;'R'
  1217  0B7C  3459               	retlw	89	;'Y'
  1218  0B7D  3400               	retlw	0
  1219  0B7E                     STR_82:	
  1220  0B7E  3474               	retlw	116	;'t'
  1221  0B7F  3465               	retlw	101	;'e'
  1222  0B80  346D               	retlw	109	;'m'
  1223  0B81  3470               	retlw	112	;'p'
  1224  0B82  345F               	retlw	95	;'_'
  1225  0B83  3470               	retlw	112	;'p'
  1226  0B84  3472               	retlw	114	;'r'
  1227  0B85  3465               	retlw	101	;'e'
  1228  0B86  345F               	retlw	95	;'_'
  1229  0B87  3463               	retlw	99	;'c'
  1230  0B88  346F               	retlw	111	;'o'
  1231  0B89  3475               	retlw	117	;'u'
  1232  0B8A  346E               	retlw	110	;'n'
  1233  0B8B  3474               	retlw	116	;'t'
  1234  0B8C  3420               	retlw	32	;' '
  1235  0B8D  343D               	retlw	61	;'='
  1236  0B8E  3420               	retlw	32	;' '
  1237  0B8F  3425               	retlw	37	;'%'
  1238  0B90  3464               	retlw	100	;'d'
  1239  0B91  3400               	retlw	0
  1240  0B92                     STR_77:	
  1241  0B92  3468               	retlw	104	;'h'
  1242  0B93  346F               	retlw	111	;'o'
  1243  0B94  346C               	retlw	108	;'l'
  1244  0B95  3465               	retlw	101	;'e'
  1245  0B96  343A               	retlw	58	;':'
  1246  0B97  3420               	retlw	32	;' '
  1247  0B98  3428               	retlw	40	;'('
  1248  0B99  3425               	retlw	37	;'%'
  1249  0B9A  3464               	retlw	100	;'d'
  1250  0B9B  3429               	retlw	41	;')'
  1251  0B9C  3420               	retlw	32	;' '
  1252  0B9D  343D               	retlw	61	;'='
  1253  0B9E  343D               	retlw	61	;'='
  1254  0B9F  3420               	retlw	32	;' '
  1255  0BA0  3428               	retlw	40	;'('
  1256  0BA1  3425               	retlw	37	;'%'
  1257  0BA2  3464               	retlw	100	;'d'
  1258  0BA3  3429               	retlw	41	;')'
  1259  0BA4  3400               	retlw	0
  1260  0BA5                     STR_70:	
  1261  0BA5  3468               	retlw	104	;'h'
  1262  0BA6  3469               	retlw	105	;'i'
  1263  0BA7  3467               	retlw	103	;'g'
  1264  0BA8  3468               	retlw	104	;'h'
  1265  0BA9  343A               	retlw	58	;':'
  1266  0BAA  3420               	retlw	32	;' '
  1267  0BAB  3428               	retlw	40	;'('
  1268  0BAC  3425               	retlw	37	;'%'
  1269  0BAD  3464               	retlw	100	;'d'
  1270  0BAE  3429               	retlw	41	;')'
  1271  0BAF  3420               	retlw	32	;' '
  1272  0BB0  343D               	retlw	61	;'='
  1273  0BB1  343D               	retlw	61	;'='
  1274  0BB2  3420               	retlw	32	;' '
  1275  0BB3  3428               	retlw	40	;'('
  1276  0BB4  3425               	retlw	37	;'%'
  1277  0BB5  3464               	retlw	100	;'d'
  1278  0BB6  3429               	retlw	41	;')'
  1279  0BB7  3400               	retlw	0
  1280  0BB8                     STR_68:	
  1281  0BB8  3472               	retlw	114	;'r'
  1282  0BB9  3469               	retlw	105	;'i'
  1283  0BBA  3473               	retlw	115	;'s'
  1284  0BBB  346B               	retlw	107	;'k'
  1285  0BBC  343A               	retlw	58	;':'
  1286  0BBD  3420               	retlw	32	;' '
  1287  0BBE  3428               	retlw	40	;'('
  1288  0BBF  3425               	retlw	37	;'%'
  1289  0BC0  3464               	retlw	100	;'d'
  1290  0BC1  3429               	retlw	41	;')'
  1291  0BC2  3420               	retlw	32	;' '
  1292  0BC3  343D               	retlw	61	;'='
  1293  0BC4  343D               	retlw	61	;'='
  1294  0BC5  3420               	retlw	32	;' '
  1295  0BC6  3428               	retlw	40	;'('
  1296  0BC7  3425               	retlw	37	;'%'
  1297  0BC8  3464               	retlw	100	;'d'
  1298  0BC9  3429               	retlw	41	;')'
  1299  0BCA  3400               	retlw	0
  1300  0BCB                     STR_64:	
  1301  0BCB  3463               	retlw	99	;'c'
  1302  0BCC  346F               	retlw	111	;'o'
  1303  0BCD  3475               	retlw	117	;'u'
  1304  0BCE  346E               	retlw	110	;'n'
  1305  0BCF  3474               	retlw	116	;'t'
  1306  0BD0  343A               	retlw	58	;':'
  1307  0BD1  3420               	retlw	32	;' '
  1308  0BD2  3428               	retlw	40	;'('
  1309  0BD3  3425               	retlw	37	;'%'
  1310  0BD4  3464               	retlw	100	;'d'
  1311  0BD5  3429               	retlw	41	;')'
  1312  0BD6  3420               	retlw	32	;' '
  1313  0BD7  343E               	retlw	62	;'>'
  1314  0BD8  3420               	retlw	32	;' '
  1315  0BD9  3428               	retlw	40	;'('
  1316  0BDA  3425               	retlw	37	;'%'
  1317  0BDB  3464               	retlw	100	;'d'
  1318  0BDC  3429               	retlw	41	;')'
  1319  0BDD  3400               	retlw	0
  1320  0BDE                     STR_41:	
  1321  0BDE  344C               	retlw	76	;'L'
  1322  0BDF  3445               	retlw	69	;'E'
  1323  0BE0  3446               	retlw	70	;'F'
  1324  0BE1  3454               	retlw	84	;'T'
  1325  0BE2  345F               	retlw	95	;'_'
  1326  0BE3  344F               	retlw	79	;'O'
  1327  0BE4  3456               	retlw	86	;'V'
  1328  0BE5  3445               	retlw	69	;'E'
  1329  0BE6  3452               	retlw	82	;'R'
  1330  0BE7  345F               	retlw	95	;'_'
  1331  0BE8  3442               	retlw	66	;'B'
  1332  0BE9  344F               	retlw	79	;'O'
  1333  0BEA  3455               	retlw	85	;'U'
  1334  0BEB  344E               	retlw	78	;'N'
  1335  0BEC  3444               	retlw	68	;'D'
  1336  0BED  3441               	retlw	65	;'A'
  1337  0BEE  3452               	retlw	82	;'R'
  1338  0BEF  3459               	retlw	89	;'Y'
  1339  0BF0  3400               	retlw	0
  1340  0BF1                     STR_85:	
  1341  0BF1  3474               	retlw	116	;'t'
  1342  0BF2  3465               	retlw	101	;'e'
  1343  0BF3  346D               	retlw	109	;'m'
  1344  0BF4  3470               	retlw	112	;'p'
  1345  0BF5  345F               	retlw	95	;'_'
  1346  0BF6  3470               	retlw	112	;'p'
  1347  0BF7  3472               	retlw	114	;'r'
  1348  0BF8  3465               	retlw	101	;'e'
  1349  0BF9  345F               	retlw	95	;'_'
  1350  0BFA  3468               	retlw	104	;'h'
  1351  0BFB  346F               	retlw	111	;'o'
  1352  0BFC  346C               	retlw	108	;'l'
  1353  0BFD  3465               	retlw	101	;'e'
  1354  0BFE  3420               	retlw	32	;' '
  1355  0BFF  343D               	retlw	61	;'='
  1356  0C00  3420               	retlw	32	;' '
  1357  0C01  3425               	retlw	37	;'%'
  1358  0C02  3464               	retlw	100	;'d'
  1359  0C03  3400               	retlw	0
  1360  0C04                     STR_84:	
  1361  0C04  3474               	retlw	116	;'t'
  1362  0C05  3465               	retlw	101	;'e'
  1363  0C06  346D               	retlw	109	;'m'
  1364  0C07  3470               	retlw	112	;'p'
  1365  0C08  345F               	retlw	95	;'_'
  1366  0C09  3470               	retlw	112	;'p'
  1367  0C0A  3472               	retlw	114	;'r'
  1368  0C0B  3465               	retlw	101	;'e'
  1369  0C0C  345F               	retlw	95	;'_'
  1370  0C0D  3468               	retlw	104	;'h'
  1371  0C0E  3469               	retlw	105	;'i'
  1372  0C0F  3467               	retlw	103	;'g'
  1373  0C10  3468               	retlw	104	;'h'
  1374  0C11  3420               	retlw	32	;' '
  1375  0C12  343D               	retlw	61	;'='
  1376  0C13  3420               	retlw	32	;' '
  1377  0C14  3425               	retlw	37	;'%'
  1378  0C15  3464               	retlw	100	;'d'
  1379  0C16  3400               	retlw	0
  1380  0C17                     STR_83:	
  1381  0C17  3474               	retlw	116	;'t'
  1382  0C18  3465               	retlw	101	;'e'
  1383  0C19  346D               	retlw	109	;'m'
  1384  0C1A  3470               	retlw	112	;'p'
  1385  0C1B  345F               	retlw	95	;'_'
  1386  0C1C  3470               	retlw	112	;'p'
  1387  0C1D  3472               	retlw	114	;'r'
  1388  0C1E  3465               	retlw	101	;'e'
  1389  0C1F  345F               	retlw	95	;'_'
  1390  0C20  3472               	retlw	114	;'r'
  1391  0C21  3469               	retlw	105	;'i'
  1392  0C22  3473               	retlw	115	;'s'
  1393  0C23  346B               	retlw	107	;'k'
  1394  0C24  3420               	retlw	32	;' '
  1395  0C25  343D               	retlw	61	;'='
  1396  0C26  3420               	retlw	32	;' '
  1397  0C27  3425               	retlw	37	;'%'
  1398  0C28  3464               	retlw	100	;'d'
  1399  0C29  3400               	retlw	0
  1400  0C2A                     STR_71:	
  1401  0C2A  3468               	retlw	104	;'h'
  1402  0C2B  346F               	retlw	111	;'o'
  1403  0C2C  346C               	retlw	108	;'l'
  1404  0C2D  3465               	retlw	101	;'e'
  1405  0C2E  343A               	retlw	58	;':'
  1406  0C2F  3420               	retlw	32	;' '
  1407  0C30  3428               	retlw	40	;'('
  1408  0C31  3425               	retlw	37	;'%'
  1409  0C32  3464               	retlw	100	;'d'
  1410  0C33  3429               	retlw	41	;')'
  1411  0C34  3420               	retlw	32	;' '
  1412  0C35  343C               	retlw	60	;'<'
  1413  0C36  3420               	retlw	32	;' '
  1414  0C37  3428               	retlw	40	;'('
  1415  0C38  3425               	retlw	37	;'%'
  1416  0C39  3464               	retlw	100	;'d'
  1417  0C3A  3429               	retlw	41	;')'
  1418  0C3B  3400               	retlw	0
  1419  0C3C                     STR_69:	
  1420  0C3C  3468               	retlw	104	;'h'
  1421  0C3D  3469               	retlw	105	;'i'
  1422  0C3E  3467               	retlw	103	;'g'
  1423  0C3F  3468               	retlw	104	;'h'
  1424  0C40  343A               	retlw	58	;':'
  1425  0C41  3420               	retlw	32	;' '
  1426  0C42  3428               	retlw	40	;'('
  1427  0C43  3425               	retlw	37	;'%'
  1428  0C44  3464               	retlw	100	;'d'
  1429  0C45  3429               	retlw	41	;')'
  1430  0C46  3420               	retlw	32	;' '
  1431  0C47  343C               	retlw	60	;'<'
  1432  0C48  3420               	retlw	32	;' '
  1433  0C49  3428               	retlw	40	;'('
  1434  0C4A  3425               	retlw	37	;'%'
  1435  0C4B  3464               	retlw	100	;'d'
  1436  0C4C  3429               	retlw	41	;')'
  1437  0C4D  3400               	retlw	0
  1438  0C4E                     STR_67:	
  1439  0C4E  3472               	retlw	114	;'r'
  1440  0C4F  3469               	retlw	105	;'i'
  1441  0C50  3473               	retlw	115	;'s'
  1442  0C51  346B               	retlw	107	;'k'
  1443  0C52  343A               	retlw	58	;':'
  1444  0C53  3420               	retlw	32	;' '
  1445  0C54  3428               	retlw	40	;'('
  1446  0C55  3425               	retlw	37	;'%'
  1447  0C56  3464               	retlw	100	;'d'
  1448  0C57  3429               	retlw	41	;')'
  1449  0C58  3420               	retlw	32	;' '
  1450  0C59  343C               	retlw	60	;'<'
  1451  0C5A  3420               	retlw	32	;' '
  1452  0C5B  3428               	retlw	40	;'('
  1453  0C5C  3425               	retlw	37	;'%'
  1454  0C5D  3464               	retlw	100	;'d'
  1455  0C5E  3429               	retlw	41	;')'
  1456  0C5F  3400               	retlw	0
  1457  0C60                     STR_99:	
  1458  0C60  3430               	retlw	48	;'0'
  1459  0C61  3431               	retlw	49	;'1'
  1460  0C62  3432               	retlw	50	;'2'
  1461  0C63  3433               	retlw	51	;'3'
  1462  0C64  3434               	retlw	52	;'4'
  1463  0C65  3435               	retlw	53	;'5'
  1464  0C66  3436               	retlw	54	;'6'
  1465  0C67  3437               	retlw	55	;'7'
  1466  0C68  3438               	retlw	56	;'8'
  1467  0C69  3439               	retlw	57	;'9'
  1468  0C6A  3441               	retlw	65	;'A'
  1469  0C6B  3442               	retlw	66	;'B'
  1470  0C6C  3443               	retlw	67	;'C'
  1471  0C6D  3444               	retlw	68	;'D'
  1472  0C6E  3445               	retlw	69	;'E'
  1473  0C6F  3446               	retlw	70	;'F'
  1474  0C70  3400               	retlw	0
  1475  0C71                     STR_100:	
  1476  0C71  3430               	retlw	48	;'0'
  1477  0C72  3431               	retlw	49	;'1'
  1478  0C73  3432               	retlw	50	;'2'
  1479  0C74  3433               	retlw	51	;'3'
  1480  0C75  3434               	retlw	52	;'4'
  1481  0C76  3435               	retlw	53	;'5'
  1482  0C77  3436               	retlw	54	;'6'
  1483  0C78  3437               	retlw	55	;'7'
  1484  0C79  3438               	retlw	56	;'8'
  1485  0C7A  3439               	retlw	57	;'9'
  1486  0C7B  3461               	retlw	97	;'a'
  1487  0C7C  3462               	retlw	98	;'b'
  1488  0C7D  3463               	retlw	99	;'c'
  1489  0C7E  3464               	retlw	100	;'d'
  1490  0C7F  3465               	retlw	101	;'e'
  1491  0C80  3466               	retlw	102	;'f'
  1492  0C81  3400               	retlw	0
  1493  0C82                     STR_73:	
  1494  0C82  3468               	retlw	104	;'h'
  1495  0C83  3469               	retlw	105	;'i'
  1496  0C84  3467               	retlw	103	;'g'
  1497  0C85  3468               	retlw	104	;'h'
  1498  0C86  343A               	retlw	58	;':'
  1499  0C87  3420               	retlw	32	;' '
  1500  0C88  3428               	retlw	40	;'('
  1501  0C89  3425               	retlw	37	;'%'
  1502  0C8A  3464               	retlw	100	;'d'
  1503  0C8B  3429               	retlw	41	;')'
  1504  0C8C  342C               	retlw	44	;','
  1505  0C8D  3420               	retlw	32	;' '
  1506  0C8E  3428               	retlw	40	;'('
  1507  0C8F  3425               	retlw	37	;'%'
  1508  0C90  3464               	retlw	100	;'d'
  1509  0C91  3429               	retlw	41	;')'
  1510  0C92  3400               	retlw	0
  1511  0C93                     STR_63:	
  1512  0C93  3453               	retlw	83	;'S'
  1513  0C94  3474               	retlw	116	;'t'
  1514  0C95  3461               	retlw	97	;'a'
  1515  0C96  3472               	retlw	114	;'r'
  1516  0C97  3474               	retlw	116	;'t'
  1517  0C98  3420               	retlw	32	;' '
  1518  0C99  3465               	retlw	101	;'e'
  1519  0C9A  3476               	retlw	118	;'v'
  1520  0C9B  3461               	retlw	97	;'a'
  1521  0C9C  346C               	retlw	108	;'l'
  1522  0C9D  3475               	retlw	117	;'u'
  1523  0C9E  3461               	retlw	97	;'a'
  1524  0C9F  3474               	retlw	116	;'t'
  1525  0CA0  3469               	retlw	105	;'i'
  1526  0CA1  346F               	retlw	111	;'o'
  1527  0CA2  346E               	retlw	110	;'n'
  1528  0CA3  3400               	retlw	0
  1529  0CA4                     STR_49:	
  1530  0CA4  3472               	retlw	114	;'r'
  1531  0CA5  3469               	retlw	105	;'i'
  1532  0CA6  3467               	retlw	103	;'g'
  1533  0CA7  3468               	retlw	104	;'h'
  1534  0CA8  3474               	retlw	116	;'t'
  1535  0CA9  345F               	retlw	95	;'_'
  1536  0CAA  346D               	retlw	109	;'m'
  1537  0CAB  346F               	retlw	111	;'o'
  1538  0CAC  3473               	retlw	115	;'s'
  1539  0CAD  3474               	retlw	116	;'t'
  1540  0CAE  3420               	retlw	32	;' '
  1541  0CAF  343D               	retlw	61	;'='
  1542  0CB0  3420               	retlw	32	;' '
  1543  0CB1  3425               	retlw	37	;'%'
  1544  0CB2  3464               	retlw	100	;'d'
  1545  0CB3  3400               	retlw	0
  1546  0CB4                     STR_81:	
  1547  0CB4  3474               	retlw	116	;'t'
  1548  0CB5  3465               	retlw	101	;'e'
  1549  0CB6  346D               	retlw	109	;'m'
  1550  0CB7  3470               	retlw	112	;'p'
  1551  0CB8  345F               	retlw	95	;'_'
  1552  0CB9  3470               	retlw	112	;'p'
  1553  0CBA  3472               	retlw	114	;'r'
  1554  0CBB  3465               	retlw	101	;'e'
  1555  0CBC  345F               	retlw	95	;'_'
  1556  0CBD  3478               	retlw	120	;'x'
  1557  0CBE  3420               	retlw	32	;' '
  1558  0CBF  343D               	retlw	61	;'='
  1559  0CC0  3420               	retlw	32	;' '
  1560  0CC1  3425               	retlw	37	;'%'
  1561  0CC2  3464               	retlw	100	;'d'
  1562  0CC3  3400               	retlw	0
  1563  0CC4                     STR_65:	
  1564  0CC4  3468               	retlw	104	;'h'
  1565  0CC5  3465               	retlw	101	;'e'
  1566  0CC6  3469               	retlw	105	;'i'
  1567  0CC7  3467               	retlw	103	;'g'
  1568  0CC8  3468               	retlw	104	;'h'
  1569  0CC9  3474               	retlw	116	;'t'
  1570  0CCA  3420               	retlw	32	;' '
  1571  0CCB  343C               	retlw	60	;'<'
  1572  0CCC  343D               	retlw	61	;'='
  1573  0CCD  3420               	retlw	32	;' '
  1574  0CCE  3428               	retlw	40	;'('
  1575  0CCF  3425               	retlw	37	;'%'
  1576  0CD0  3464               	retlw	100	;'d'
  1577  0CD1  3429               	retlw	41	;')'
  1578  0CD2  3400               	retlw	0
  1579  0CD3                     STR_48:	
  1580  0CD3  346C               	retlw	108	;'l'
  1581  0CD4  3465               	retlw	101	;'e'
  1582  0CD5  3466               	retlw	102	;'f'
  1583  0CD6  3474               	retlw	116	;'t'
  1584  0CD7  345F               	retlw	95	;'_'
  1585  0CD8  346D               	retlw	109	;'m'
  1586  0CD9  346F               	retlw	111	;'o'
  1587  0CDA  3473               	retlw	115	;'s'
  1588  0CDB  3474               	retlw	116	;'t'
  1589  0CDC  3420               	retlw	32	;' '
  1590  0CDD  343D               	retlw	61	;'='
  1591  0CDE  3420               	retlw	32	;' '
  1592  0CDF  3425               	retlw	37	;'%'
  1593  0CE0  3464               	retlw	100	;'d'
  1594  0CE1  3400               	retlw	0
  1595  0CE2                     STR_44:	
  1596  0CE2  3478               	retlw	120	;'x'
  1597  0CE3  3420               	retlw	32	;' '
  1598  0CE4  343D               	retlw	61	;'='
  1599  0CE5  3420               	retlw	32	;' '
  1600  0CE6  3425               	retlw	37	;'%'
  1601  0CE7  3464               	retlw	100	;'d'
  1602  0CE8  342C               	retlw	44	;','
  1603  0CE9  3420               	retlw	32	;' '
  1604  0CEA  3479               	retlw	121	;'y'
  1605  0CEB  3420               	retlw	32	;' '
  1606  0CEC  343D               	retlw	61	;'='
  1607  0CED  3420               	retlw	32	;' '
  1608  0CEE  3425               	retlw	37	;'%'
  1609  0CEF  3464               	retlw	100	;'d'
  1610  0CF0  3400               	retlw	0
  1611  0CF1                     STR_62:	
  1612  0CF1  3456               	retlw	86	;'V'
  1613  0CF2  3461               	retlw	97	;'a'
  1614  0CF3  346C               	retlw	108	;'l'
  1615  0CF4  3469               	retlw	105	;'i'
  1616  0CF5  3464               	retlw	100	;'d'
  1617  0CF6  3420               	retlw	32	;' '
  1618  0CF7  3469               	retlw	105	;'i'
  1619  0CF8  346E               	retlw	110	;'n'
  1620  0CF9  3473               	retlw	115	;'s'
  1621  0CFA  3474               	retlw	116	;'t'
  1622  0CFB  3461               	retlw	97	;'a'
  1623  0CFC  346E               	retlw	110	;'n'
  1624  0CFD  3463               	retlw	99	;'c'
  1625  0CFE  3465               	retlw	101	;'e'
  1626  0CFF  3400               	retlw	0
  1627  0D00                     STR_60:	
  1628  0D00  3441               	retlw	65	;'A'
  1629  0D01  3466               	retlw	102	;'f'
  1630  0D02  3474               	retlw	116	;'t'
  1631  0D03  3465               	retlw	101	;'e'
  1632  0D04  3472               	retlw	114	;'r'
  1633  0D05  3420               	retlw	32	;' '
  1634  0D06  3466               	retlw	102	;'f'
  1635  0D07  3461               	retlw	97	;'a'
  1636  0D08  346C               	retlw	108	;'l'
  1637  0D09  346C               	retlw	108	;'l'
  1638  0D0A  3420               	retlw	32	;' '
  1639  0D0B  346F               	retlw	111	;'o'
  1640  0D0C  3466               	retlw	102	;'f'
  1641  0D0D  3466               	retlw	102	;'f'
  1642  0D0E  3400               	retlw	0
  1643  0D0F                     STR_58:	
  1644  0D0F  346E               	retlw	110	;'n'
  1645  0D10  3475               	retlw	117	;'u'
  1646  0D11  346D               	retlw	109	;'m'
  1647  0D12  345F               	retlw	95	;'_'
  1648  0D13  3468               	retlw	104	;'h'
  1649  0D14  346F               	retlw	111	;'o'
  1650  0D15  346C               	retlw	108	;'l'
  1651  0D16  3465               	retlw	101	;'e'
  1652  0D17  3420               	retlw	32	;' '
  1653  0D18  343D               	retlw	61	;'='
  1654  0D19  3420               	retlw	32	;' '
  1655  0D1A  3425               	retlw	37	;'%'
  1656  0D1B  3464               	retlw	100	;'d'
  1657  0D1C  3400               	retlw	0
  1658  0D1D                     STR_94:	
  1659  0D1D  3447               	retlw	71	;'G'
  1660  0D1E  3441               	retlw	65	;'A'
  1661  0D1F  344D               	retlw	77	;'M'
  1662  0D20  3445               	retlw	69	;'E'
  1663  0D21  3420               	retlw	32	;' '
  1664  0D22  344F               	retlw	79	;'O'
  1665  0D23  3456               	retlw	86	;'V'
  1666  0D24  3445               	retlw	69	;'E'
  1667  0D25  3452               	retlw	82	;'R'
  1668  0D26  3421               	retlw	33	;'!'
  1669  0D27  3421               	retlw	33	;'!'
  1670  0D28  3421               	retlw	33	;'!'
  1671  0D29  3400               	retlw	0
  1672  0D2A                     STR_97:	
  1673  0D2A  3468               	retlw	104	;'h'
  1674  0D2B  3469               	retlw	105	;'i'
  1675  0D2C  3474               	retlw	116	;'t'
  1676  0D2D  345F               	retlw	95	;'_'
  1677  0D2E  3472               	retlw	114	;'r'
  1678  0D2F  3465               	retlw	101	;'e'
  1679  0D30  3473               	retlw	115	;'s'
  1680  0D31  3420               	retlw	32	;' '
  1681  0D32  343D               	retlw	61	;'='
  1682  0D33  3420               	retlw	32	;' '
  1683  0D34  3425               	retlw	37	;'%'
  1684  0D35  3464               	retlw	100	;'d'
  1685  0D36  3400               	retlw	0
  1686  0D37                     STR_98:	
  1687  0D37  344D               	retlw	77	;'M'
  1688  0D38  3461               	retlw	97	;'a'
  1689  0D39  3469               	retlw	105	;'i'
  1690  0D3A  346E               	retlw	110	;'n'
  1691  0D3B  3420               	retlw	32	;' '
  1692  0D3C  3473               	retlw	115	;'s'
  1693  0D3D  3463               	retlw	99	;'c'
  1694  0D3E  3472               	retlw	114	;'r'
  1695  0D3F  3465               	retlw	101	;'e'
  1696  0D40  3465               	retlw	101	;'e'
  1697  0D41  346E               	retlw	110	;'n'
  1698  0D42  3400               	retlw	0
  1699  0D43                     STR_34:	
  1700  0D43  346E               	retlw	110	;'n'
  1701  0D44  346F               	retlw	111	;'o'
  1702  0D45  3474               	retlw	116	;'t'
  1703  0D46  3420               	retlw	32	;' '
  1704  0D47  3476               	retlw	118	;'v'
  1705  0D48  3461               	retlw	97	;'a'
  1706  0D49  346C               	retlw	108	;'l'
  1707  0D4A  3469               	retlw	105	;'i'
  1708  0D4B  3464               	retlw	100	;'d'
  1709  0D4C  3431               	retlw	49	;'1'
  1710  0D4D  3400               	retlw	0
  1711  0D4E                     STR_36:	
  1712  0D4E  346E               	retlw	110	;'n'
  1713  0D4F  346F               	retlw	111	;'o'
  1714  0D50  3474               	retlw	116	;'t'
  1715  0D51  3420               	retlw	32	;' '
  1716  0D52  3476               	retlw	118	;'v'
  1717  0D53  3461               	retlw	97	;'a'
  1718  0D54  346C               	retlw	108	;'l'
  1719  0D55  3469               	retlw	105	;'i'
  1720  0D56  3464               	retlw	100	;'d'
  1721  0D57  3432               	retlw	50	;'2'
  1722  0D58  3400               	retlw	0
  1723  0D59                     STR_38:	
  1724  0D59  346E               	retlw	110	;'n'
  1725  0D5A  346F               	retlw	111	;'o'
  1726  0D5B  3474               	retlw	116	;'t'
  1727  0D5C  3420               	retlw	32	;' '
  1728  0D5D  3476               	retlw	118	;'v'
  1729  0D5E  3461               	retlw	97	;'a'
  1730  0D5F  346C               	retlw	108	;'l'
  1731  0D60  3469               	retlw	105	;'i'
  1732  0D61  3464               	retlw	100	;'d'
  1733  0D62  3433               	retlw	51	;'3'
  1734  0D63  3400               	retlw	0
  1735  0D64                     STR_56:	
  1736  0D64  3473               	retlw	115	;'s'
  1737  0D65  3474               	retlw	116	;'t'
  1738  0D66  3461               	retlw	97	;'a'
  1739  0D67  3472               	retlw	114	;'r'
  1740  0D68  3474               	retlw	116	;'t'
  1741  0D69  3420               	retlw	32	;' '
  1742  0D6A  343D               	retlw	61	;'='
  1743  0D6B  3420               	retlw	32	;' '
  1744  0D6C  3425               	retlw	37	;'%'
  1745  0D6D  3464               	retlw	100	;'d'
  1746  0D6E  3400               	retlw	0
  1747  0D6F                     STR_43:	
  1748  0D6F  3466               	retlw	102	;'f'
  1749  0D70  3461               	retlw	97	;'a'
  1750  0D71  346C               	retlw	108	;'l'
  1751  0D72  346C               	retlw	108	;'l'
  1752  0D73  345F               	retlw	95	;'_'
  1753  0D74  346F               	retlw	111	;'o'
  1754  0D75  3466               	retlw	102	;'f'
  1755  0D76  3466               	retlw	102	;'f'
  1756  0D77  3431               	retlw	49	;'1'
  1757  0D78  3400               	retlw	0
  1758  0D79                     STR_45:	
  1759  0D79  3466               	retlw	102	;'f'
  1760  0D7A  3461               	retlw	97	;'a'
  1761  0D7B  346C               	retlw	108	;'l'
  1762  0D7C  346C               	retlw	108	;'l'
  1763  0D7D  345F               	retlw	95	;'_'
  1764  0D7E  346F               	retlw	111	;'o'
  1765  0D7F  3466               	retlw	102	;'f'
  1766  0D80  3466               	retlw	102	;'f'
  1767  0D81  3432               	retlw	50	;'2'
  1768  0D82  3400               	retlw	0
  1769  0D83                     STR_13:	
  1770  0D83  3473               	retlw	115	;'s'
  1771  0D84  3469               	retlw	105	;'i'
  1772  0D85  347A               	retlw	122	;'z'
  1773  0D86  3465               	retlw	101	;'e'
  1774  0D87  3420               	retlw	32	;' '
  1775  0D88  343D               	retlw	61	;'='
  1776  0D89  3420               	retlw	32	;' '
  1777  0D8A  3425               	retlw	37	;'%'
  1778  0D8B  3464               	retlw	100	;'d'
  1779  0D8C  3400               	retlw	0
  1780  0D8D                     STR_57:	
  1781  0D8D  3473               	retlw	115	;'s'
  1782  0D8E  3474               	retlw	116	;'t'
  1783  0D8F  346F               	retlw	111	;'o'
  1784  0D90  3470               	retlw	112	;'p'
  1785  0D91  3420               	retlw	32	;' '
  1786  0D92  343D               	retlw	61	;'='
  1787  0D93  3420               	retlw	32	;' '
  1788  0D94  3425               	retlw	37	;'%'
  1789  0D95  3464               	retlw	100	;'d'
  1790  0D96  3400               	retlw	0
  1791  0D97                     STR_53:	
  1792  0D97  3472               	retlw	114	;'r'
  1793  0D98  346F               	retlw	111	;'o'
  1794  0D99  3477               	retlw	119	;'w'
  1795  0D9A  3420               	retlw	32	;' '
  1796  0D9B  343D               	retlw	61	;'='
  1797  0D9C  3420               	retlw	32	;' '
  1798  0D9D  3425               	retlw	37	;'%'
  1799  0D9E  3464               	retlw	100	;'d'
  1800  0D9F  3400               	retlw	0
  1801  0DA0                     STR_32:	
  1802  0DA0  346E               	retlw	110	;'n'
  1803  0DA1  346F               	retlw	111	;'o'
  1804  0DA2  3474               	retlw	116	;'t'
  1805  0DA3  3420               	retlw	32	;' '
  1806  0DA4  3468               	retlw	104	;'h'
  1807  0DA5  3469               	retlw	105	;'i'
  1808  0DA6  3474               	retlw	116	;'t'
  1809  0DA7  3400               	retlw	0
  1810  0DA8                     STR_86:	
  1811  0DA8  3443               	retlw	67	;'C'
  1812  0DA9  3468               	retlw	104	;'h'
  1813  0DAA  346F               	retlw	111	;'o'
  1814  0DAB  3473               	retlw	115	;'s'
  1815  0DAC  3465               	retlw	101	;'e'
  1816  0DAD  346E               	retlw	110	;'n'
  1817  0DAE  3400               	retlw	0
  1818  0DAF                     STR_40:	
  1819  0DAF  3476               	retlw	118	;'v'
  1820  0DB0  3461               	retlw	97	;'a'
  1821  0DB1  346C               	retlw	108	;'l'
  1822  0DB2  3469               	retlw	105	;'i'
  1823  0DB3  3464               	retlw	100	;'d'
  1824  0DB4  3400               	retlw	0
  1825  0DB5                     STR_79:	
  1826  0DB5  344C               	retlw	76	;'L'
  1827  0DB6  346F               	retlw	111	;'o'
  1828  0DB7  346F               	retlw	111	;'o'
  1829  0DB8  3470               	retlw	112	;'p'
  1830  0DB9  3400               	retlw	0
  1831  0DBA                     STR_1:	
  1832  0DBA  340D               	retlw	13
  1833  0DBB  340A               	retlw	10
  1834  0DBC  3400               	retlw	0
  1835  0DBD                     STR_7:	
  1836  0DBD  342A               	retlw	42	;'*'
  1837  0DBE  3400               	retlw	0
  1838  0DBF                     STR_5:	
  1839  0DBF  343A               	retlw	58	;':'
  1840  0DC0  3400               	retlw	0
  1841  0DC1                     STR_8:	
  1842  0DC1  345F               	retlw	95	;'_'
  1843  0DC2  3400               	retlw	0
  1844  0DBC                     
  1845                           ; #config settings
  1846  0000                     
  1847                           	psect	nvBANK0
  1848  006E                     __pnvBANK0:	
  1849  006E                     _UQEnd:	
  1850  006E                     	ds	1
  1851  006F                     _UQFront:	
  1852  006F                     	ds	1
  1853  000C                     _PIR1bits	set	12
  1854  001A                     _RCREG	set	26
  1855  0018                     _RCSTAbits	set	24
  1856  0019                     _TXREG	set	25
  1857  005F                     _GIE	set	95
  1858  005E                     _PEIE	set	94
  1859  0029                     _RA1	set	41
  1860  002A                     _RA2	set	42
  1861  0099                     _SPBRG	set	153
  1862  0085                     _TRISAbits	set	133
  1863  0098                     _TXSTAbits	set	152
  1864  0465                     _RCIE	set	1125
  1865  0188                     _ANSELbits	set	392
  1866                           
  1867                           	psect	cinit
  1868  07BA                     start_initialization:	
  1869  07BA                     __initialization:	
  1870                           
  1871                           ; Clear objects allocated to BANK0
  1872  07BA  01E8               	clrf	__pbssBANK0& (0+127)
  1873  07BB  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  1874  07BC  01EA               	clrf	(__pbssBANK0+2)& (0+127)
  1875                           
  1876                           ; Clear objects allocated to BANK1
  1877  07BD  1683               	bsf	3,5	;RP0=1, select bank1
  1878  07BE  1303               	bcf	3,6	;RP1=0, select bank1
  1879  07BF  01E7               	clrf	__pbssBANK1& (0+127)
  1880  07C0  01E8               	clrf	(__pbssBANK1+1)& (0+127)
  1881  07C1  01E9               	clrf	(__pbssBANK1+2)& (0+127)
  1882  07C2  01EA               	clrf	(__pbssBANK1+3)& (0+127)
  1883  07C3  01EB               	clrf	(__pbssBANK1+4)& (0+127)
  1884  07C4  01EC               	clrf	(__pbssBANK1+5)& (0+127)
  1885                           
  1886                           ; Clear objects allocated to BANK3
  1887  07C5  1783               	bsf	3,7	;select IRP bank2
  1888  07C6  3090               	movlw	low __pbssBANK3
  1889  07C7  0084               	movwf	4
  1890  07C8  30B7               	movlw	low (__pbssBANK3+39)
  1891  07C9  160A  158A  2025  120A  118A  	fcall	clear_ram0
  1892                           
  1893                           ; Clear objects allocated to BANK2
  1894  07CE  3010               	movlw	low __pbssBANK2
  1895  07CF  0084               	movwf	4
  1896  07D0  3070               	movlw	low (__pbssBANK2+96)
  1897  07D1  160A  158A  2025  120A  118A  	fcall	clear_ram0
  1898                           
  1899                           ; Initialize objects allocated to BANK3
  1900  07D6  30D7               	movlw	low (__pdataBANK3+32)
  1901  07D7  00FD               	movwf	btemp+-1
  1902  07D8  3019               	movlw	high __pidataBANK3
  1903  07D9  00FE               	movwf	btemp
  1904  07DA  300E               	movlw	low __pidataBANK3
  1905  07DB  00FF               	movwf	btemp+1
  1906  07DC  30B7               	movlw	low __pdataBANK3
  1907  07DD  0084               	movwf	4
  1908  07DE  160A  158A  2065  120A  118A  	fcall	init_ram0
  1909                           
  1910                           ; Initialize objects allocated to BANK1
  1911  07E3  1383               	bcf	3,7	;select IRP bank0
  1912  07E4  30F0               	movlw	low (__pdataBANK1+3)
  1913  07E5  00FD               	movwf	btemp+-1
  1914  07E6  3010               	movlw	high __pidataBANK1
  1915  07E7  00FE               	movwf	btemp
  1916  07E8  3000               	movlw	low __pidataBANK1
  1917  07E9  00FF               	movwf	btemp+1
  1918  07EA  30ED               	movlw	low __pdataBANK1
  1919  07EB  0084               	movwf	4
  1920  07EC  160A  158A  2065  120A  118A  	fcall	init_ram0
  1921                           
  1922                           ; Initialize objects allocated to BANK0
  1923  07F1  306E               	movlw	low (__pdataBANK0+3)
  1924  07F2  00FD               	movwf	btemp+-1
  1925  07F3  300D               	movlw	high __pidataBANK0
  1926  07F4  00FE               	movwf	btemp
  1927  07F5  30C4               	movlw	low __pidataBANK0
  1928  07F6  00FF               	movwf	btemp+1
  1929  07F7  306B               	movlw	low __pdataBANK0
  1930  07F8  0084               	movwf	4
  1931  07F9  160A  158A  2065   	fcall	init_ram0
  1932  07FC                     end_of_initialization:	
  1933                           ;End of C runtime variable initialization code
  1934                           
  1935  07FC                     __end_of__initialization:	
  1936  07FC  0183               	clrf	3
  1937  07FD  120A  118A  294B   	ljmp	_main	;jump to C main() function
  1938                           
  1939                           	psect	bssBANK0
  1940  0068                     __pbssBANK0:	
  1941  0068                     _cur_y:	
  1942  0068                     	ds	1
  1943  0069                     _g_char_info_index:	
  1944  0069                     	ds	1
  1945  006A                     _temp_y:	
  1946  006A                     	ds	1
  1947                           
  1948                           	psect	dataBANK0
  1949  006B                     __pdataBANK0:	
  1950  006B                     _temp_pre_risk:	
  1951  006B                     	ds	2
  1952  006D                     _temp_pre_x:	
  1953  006D                     	ds	1
  1954                           
  1955                           	psect	bssBANK1
  1956  00E7                     __pbssBANK1:	
  1957  00E7                     _temp_risk:	
  1958  00E7                     	ds	2
  1959  00E9                     _temp_count:	
  1960  00E9                     	ds	1
  1961  00EA                     _temp_high:	
  1962  00EA                     	ds	1
  1963  00EB                     _temp_hole:	
  1964  00EB                     	ds	1
  1965  00EC                     _temp_pre_count:	
  1966  00EC                     	ds	1
  1967                           
  1968                           	psect	dataBANK1
  1969  00ED                     __pdataBANK1:	
  1970  00ED                     _cur_x:	
  1971  00ED                     	ds	1
  1972  00EE                     _temp_pre_high:	
  1973  00EE                     	ds	1
  1974  00EF                     _temp_pre_hole:	
  1975  00EF                     	ds	1
  1976                           
  1977                           	psect	bssBANK3
  1978  0190                     __pbssBANK3:	
  1979  0190                     USARTWriteInt@F1617:	
  1980  0190                     	ds	5
  1981  0195                     _g_cur_matrix44:	
  1982  0195                     	ds	2
  1983  0197                     _g_debug:	
  1984  0197                     	ds	32
  1985                           
  1986                           	psect	dataBANK3
  1987  01B7                     __pdataBANK3:	
  1988  01B7                     _g_char_info:	
  1989  01B7                     	ds	27
  1990  01D2                     _randx:	
  1991  01D2                     	ds	4
  1992  01D6                     _tem_pre_sub_index:	
  1993  01D6                     	ds	1
  1994                           
  1995                           	psect	bssBANK2
  1996  0110                     __pbssBANK2:	
  1997  0110                     _URBuff:	
  1998  0110                     	ds	32
  1999  0130                     _g_matrix88:	
  2000  0130                     	ds	64
  2001                           
  2002                           	psect	clrtext
  2003  1825                     clear_ram0:	
  2004                           ;	Called with FSR containing the base address, and
  2005                           ;	W with the last address+1
  2006                           
  2007  1825  0064               	clrwdt	;clear the watchdog before getting into this loop
  2008  1826                     clrloop0:	
  2009  1826  0180               	clrf	0	;clear RAM location pointed to by FSR
  2010  1827  0A84               	incf	4,f	;increment pointer
  2011  1828  0604               	xorwf	4,w	;XOR with final address
  2012  1829  1903               	btfsc	3,2	;have we reached the end yet?
  2013  182A  3400               	retlw	0	;all done for this memory range, return
  2014  182B  0604               	xorwf	4,w	;XOR again to restore value
  2015  182C  2826               	goto	clrloop0	;do the next byte
  2016                           
  2017                           	psect	inittext
  2018  1861                     init_fetch0:	
  2019                           ;	Called with low address in FSR and high address in W
  2020                           
  2021  1861  087E               	movf	126,w
  2022  1862  008A               	movwf	10
  2023  1863  087F               	movf	127,w
  2024  1864  0082               	movwf	2
  2025  1865                     init_ram0:	
  2026                           ;Called with:
  2027                           ;	high address of idata address in btemp 
  2028                           ;	low address of idata address in btemp+1 
  2029                           ;	low address of data in FSR
  2030                           ;	high address + 1 of data in btemp-1
  2031                           
  2032  1865  2061  160A  158A   	fcall	init_fetch0
  2033  1868  0080               	movwf	0
  2034  1869  0A84               	incf	4,f
  2035  186A  0804               	movf	4,w
  2036  186B  067D               	xorwf	125,w
  2037  186C  1903               	btfsc	3,2
  2038  186D  3400               	retlw	0
  2039  186E  0AFF               	incf	127,f
  2040  186F  1903               	btfsc	3,2
  2041  1870  0AFE               	incf	126,f
  2042  1871  2865               	goto	init_ram0
  2043                           
  2044                           	psect	cstackBANK1
  2045  00A0                     __pcstackBANK1:	
  2046  00A0                     find_best_solution@left_most_index:	
  2047                           
  2048                           ; 1 bytes @ 0x0
  2049  00A0                     	ds	1
  2050  00A1                     find_best_solution@right_most_index:	
  2051                           
  2052                           ; 1 bytes @ 0x1
  2053  00A1                     	ds	1
  2054  00A2                     find_best_solution@res:	
  2055                           
  2056                           ; 1 bytes @ 0x2
  2057  00A2                     	ds	1
  2058  00A3                     find_best_solution@temp_matrix88:	
  2059                           
  2060                           ; 64 bytes @ 0x3
  2061  00A3                     	ds	64
  2062  00E3                     find_best_solution@temp_cur_matrix44:	
  2063                           
  2064                           ; 2 bytes @ 0x43
  2065  00E3                     	ds	2
  2066  00E5                     find_best_solution@tem_sub_index:	
  2067                           
  2068                           ; 1 bytes @ 0x45
  2069  00E5                     	ds	1
  2070  00E6                     find_best_solution@temp_x:	
  2071                           
  2072                           ; 1 bytes @ 0x46
  2073  00E6                     	ds	1
  2074                           
  2075                           	psect	cstackCOMMON
  2076  0070                     __pcstackCOMMON:	
  2077  0070                     ?_isdigit:	
  2078  0070                     ?_srand:	
  2079                           ; 1 bit 
  2080                           
  2081  0070                     ??_isdigit:	
  2082                           ; 1 bytes @ 0x0
  2083                           
  2084  0070                     ?_USARTInit:	
  2085                           ; 1 bytes @ 0x0
  2086                           
  2087  0070                     ?_USARTWriteChar:	
  2088                           ; 1 bytes @ 0x0
  2089                           
  2090  0070                     ??_USARTWriteChar:	
  2091                           ; 1 bytes @ 0x0
  2092                           
  2093  0070                     ?_SPI1_write:	
  2094                           ; 1 bytes @ 0x0
  2095                           
  2096  0070                     ??_SPI1_write:	
  2097                           ; 1 bytes @ 0x0
  2098                           
  2099  0070                     ?_Write_Byte:	
  2100                           ; 1 bytes @ 0x0
  2101                           
  2102  0070                     ?_printf_MATRIX7219:	
  2103                           ; 1 bytes @ 0x0
  2104                           
  2105  0070                     ?_MATRIX88_to_MATRIX7219:	
  2106                           ; 1 bytes @ 0x0
  2107                           
  2108  0070                     ?_printf_MATRIX88:	
  2109                           ; 1 bytes @ 0x0
  2110                           
  2111  0070                     ?_printf_Screen:	
  2112                           ; 1 bytes @ 0x0
  2113                           
  2114  0070                     ?_Clear_Matrix:	
  2115                           ; 1 bytes @ 0x0
  2116                           
  2117  0070                     ?_is_row_full:	
  2118                           ; 1 bytes @ 0x0
  2119                           
  2120  0070                     ?_is_row_empty:	
  2121                           ; 1 bytes @ 0x0
  2122                           
  2123  0070                     ?_clear:	
  2124                           ; 1 bytes @ 0x0
  2125                           
  2126  0070                     ?_merge:	
  2127                           ; 1 bytes @ 0x0
  2128                           
  2129  0070                     ?_char_info_index_rand:	
  2130                           ; 1 bytes @ 0x0
  2131                           
  2132  0070                     ?_get_high:	
  2133                           ; 1 bytes @ 0x0
  2134                           
  2135  0070                     ?_get_holes_after_merge:	
  2136                           ; 1 bytes @ 0x0
  2137                           
  2138  0070                     ?_find_best_solution:	
  2139                           ; 1 bytes @ 0x0
  2140                           
  2141  0070                     ?___bmul:	
  2142                           ; 1 bytes @ 0x0
  2143                           
  2144  0070                     ?_memset:	
  2145                           ; 1 bytes @ 0x0
  2146                           
  2147  0070                     ?_memcpy:	
  2148                           ; 2 bytes @ 0x0
  2149                           
  2150  0070                     ?___wmul:	
  2151                           ; 2 bytes @ 0x0
  2152                           
  2153  0070                     ?___lwdiv:	
  2154                           ; 2 bytes @ 0x0
  2155                           
  2156  0070                     ?___lmul:	
  2157                           ; 2 bytes @ 0x0
  2158                           
  2159  0070                     USARTWriteChar@ch:	
  2160                           ; 4 bytes @ 0x0
  2161                           
  2162  0070                     SPI1_write@data:	
  2163                           ; 1 bytes @ 0x0
  2164                           
  2165  0070                     Write_Byte@myValue:	
  2166                           ; 1 bytes @ 0x0
  2167                           
  2168  0070                     MATRIX88_to_MATRIX7219@matrix7219:	
  2169                           ; 1 bytes @ 0x0
  2170                           
  2171  0070                     is_row_empty@row:	
  2172                           ; 1 bytes @ 0x0
  2173                           
  2174  0070                     clear@y:	
  2175                           ; 1 bytes @ 0x0
  2176                           
  2177  0070                     merge@y:	
  2178                           ; 1 bytes @ 0x0
  2179                           
  2180  0070                     ___bmul@multiplicand:	
  2181                           ; 1 bytes @ 0x0
  2182                           
  2183  0070                     _isdigit$906:	
  2184                           ; 1 bytes @ 0x0
  2185                           
  2186  0070                     USARTInit@baud_rate:	
  2187                           ; 1 bytes @ 0x0
  2188                           
  2189  0070                     is_row_full@matrix:	
  2190                           ; 2 bytes @ 0x0
  2191                           
  2192  0070                     ___wmul@multiplier:	
  2193                           ; 2 bytes @ 0x0
  2194                           
  2195  0070                     ___lwdiv@divisor:	
  2196                           ; 2 bytes @ 0x0
  2197                           
  2198  0070                     memcpy@d1:	
  2199                           ; 2 bytes @ 0x0
  2200                           
  2201  0070                     memset@p1:	
  2202                           ; 2 bytes @ 0x0
  2203                           
  2204  0070                     srand@x:	
  2205                           ; 2 bytes @ 0x0
  2206                           
  2207  0070                     ___lmul@multiplier:	
  2208                           ; 2 bytes @ 0x0
  2209                           
  2210                           
  2211                           ; 4 bytes @ 0x0
  2212  0070                     	ds	1
  2213  0071                     ?_USARTWriteString:	
  2214  0071                     ??_Write_Byte:	
  2215                           ; 1 bytes @ 0x1
  2216                           
  2217  0071                     ??_MATRIX88_to_MATRIX7219:	
  2218                           ; 1 bytes @ 0x1
  2219                           
  2220  0071                     ??_is_row_empty:	
  2221                           ; 1 bytes @ 0x1
  2222                           
  2223  0071                     ??___bmul:	
  2224                           ; 1 bytes @ 0x1
  2225                           
  2226  0071                     Write_Byte@myColumn:	
  2227                           ; 1 bytes @ 0x1
  2228                           
  2229  0071                     isdigit@c:	
  2230                           ; 1 bytes @ 0x1
  2231                           
  2232  0071                     USARTWriteString@str:	
  2233                           ; 1 bytes @ 0x1
  2234                           
  2235  0071                     clear@matrix44:	
  2236                           ; 2 bytes @ 0x1
  2237                           
  2238  0071                     merge@matrix44:	
  2239                           ; 2 bytes @ 0x1
  2240                           
  2241                           
  2242                           ; 2 bytes @ 0x1
  2243  0071                     	ds	1
  2244  0072                     ??_srand:	
  2245  0072                     ??_USARTInit:	
  2246                           ; 1 bytes @ 0x2
  2247                           
  2248  0072                     ??_printf_MATRIX7219:	
  2249                           ; 1 bytes @ 0x2
  2250                           
  2251  0072                     is_row_full@row:	
  2252                           ; 1 bytes @ 0x2
  2253                           
  2254  0072                     ___bmul@product:	
  2255                           ; 1 bytes @ 0x2
  2256                           
  2257  0072                     ___wmul@multiplicand:	
  2258                           ; 1 bytes @ 0x2
  2259                           
  2260  0072                     ___lwdiv@dividend:	
  2261                           ; 2 bytes @ 0x2
  2262                           
  2263  0072                     memcpy@s1:	
  2264                           ; 2 bytes @ 0x2
  2265                           
  2266  0072                     memset@c:	
  2267                           ; 2 bytes @ 0x2
  2268                           
  2269                           
  2270                           ; 2 bytes @ 0x2
  2271  0072                     	ds	1
  2272  0073                     ??_USARTWriteString:	
  2273  0073                     ?_debug_str:	
  2274                           ; 1 bytes @ 0x3
  2275                           
  2276  0073                     ?_debug_line:	
  2277                           ; 1 bytes @ 0x3
  2278                           
  2279  0073                     ??_is_row_full:	
  2280                           ; 1 bytes @ 0x3
  2281                           
  2282  0073                     clear@matrix88:	
  2283                           ; 1 bytes @ 0x3
  2284                           
  2285  0073                     merge@matrix88:	
  2286                           ; 1 bytes @ 0x3
  2287                           
  2288  0073                     ___bmul@multiplier:	
  2289                           ; 1 bytes @ 0x3
  2290                           
  2291  0073                     debug_str@str:	
  2292                           ; 1 bytes @ 0x3
  2293                           
  2294  0073                     debug_line@str:	
  2295                           ; 2 bytes @ 0x3
  2296                           
  2297                           
  2298                           ; 2 bytes @ 0x3
  2299  0073                     	ds	1
  2300  0074                     ??_clear:	
  2301  0074                     ??_merge:	
  2302                           ; 1 bytes @ 0x4
  2303                           
  2304  0074                     ??___wmul:	
  2305                           ; 1 bytes @ 0x4
  2306                           
  2307  0074                     ??___lwdiv:	
  2308                           ; 1 bytes @ 0x4
  2309                           
  2310  0074                     printf_MATRIX7219@matrix:	
  2311                           ; 1 bytes @ 0x4
  2312                           
  2313  0074                     MATRIX88_to_MATRIX7219@matrix88:	
  2314                           ; 1 bytes @ 0x4
  2315                           
  2316  0074                     is_row_empty@matrix:	
  2317                           ; 1 bytes @ 0x4
  2318                           
  2319  0074                     ___wmul@product:	
  2320                           ; 1 bytes @ 0x4
  2321                           
  2322  0074                     memcpy@n:	
  2323                           ; 2 bytes @ 0x4
  2324                           
  2325  0074                     memset@n:	
  2326                           ; 2 bytes @ 0x4
  2327                           
  2328  0074                     ___lmul@multiplicand:	
  2329                           ; 2 bytes @ 0x4
  2330                           
  2331                           
  2332                           ; 4 bytes @ 0x4
  2333  0074                     	ds	1
  2334  0075                     ??_debug_str:	
  2335  0075                     ??_debug_line:	
  2336                           ; 1 bytes @ 0x5
  2337                           
  2338  0075                     debug_str@enable:	
  2339                           ; 1 bytes @ 0x5
  2340                           
  2341  0075                     debug_line@enable:	
  2342                           ; 1 bytes @ 0x5
  2343                           
  2344  0075                     printf_MATRIX7219@col:	
  2345                           ; 1 bytes @ 0x5
  2346                           
  2347  0075                     MATRIX88_to_MATRIX7219@mask:	
  2348                           ; 1 bytes @ 0x5
  2349                           
  2350  0075                     is_row_empty@col:	
  2351                           ; 1 bytes @ 0x5
  2352                           
  2353  0075                     ___lwdiv@quotient:	
  2354                           ; 1 bytes @ 0x5
  2355                           
  2356                           
  2357                           ; 2 bytes @ 0x5
  2358  0075                     	ds	1
  2359  0076                     ??_memset:	
  2360  0076                     ??_memcpy:	
  2361                           ; 1 bytes @ 0x6
  2362                           
  2363  0076                     ?_printf_debug_MATRIX44:	
  2364                           ; 1 bytes @ 0x6
  2365                           
  2366  0076                     ?_printf_debug_MATRIX88:	
  2367                           ; 1 bytes @ 0x6
  2368                           
  2369  0076                     ?_is_left_boundary:	
  2370                           ; 1 bytes @ 0x6
  2371                           
  2372  0076                     ?_is_right_boundary:	
  2373                           ; 1 bytes @ 0x6
  2374                           
  2375  0076                     MATRIX88_to_MATRIX7219@row:	
  2376                           ; 1 bytes @ 0x6
  2377                           
  2378  0076                     printf_debug_MATRIX44@lable:	
  2379                           ; 1 bytes @ 0x6
  2380                           
  2381  0076                     printf_debug_MATRIX88@lable:	
  2382                           ; 2 bytes @ 0x6
  2383                           
  2384  0076                     is_left_boundary@matrix44:	
  2385                           ; 2 bytes @ 0x6
  2386                           
  2387  0076                     is_right_boundary@matrix44:	
  2388                           ; 2 bytes @ 0x6
  2389                           
  2390  0076                     memset@p:	
  2391                           ; 2 bytes @ 0x6
  2392                           
  2393                           
  2394                           ; 2 bytes @ 0x6
  2395  0076                     	ds	1
  2396  0077                     MATRIX88_to_MATRIX7219@col:	
  2397  0077                     ___lwdiv@counter:	
  2398                           ; 1 bytes @ 0x7
  2399                           
  2400  0077                     memcpy@d:	
  2401                           ; 1 bytes @ 0x7
  2402                           
  2403                           
  2404                           ; 2 bytes @ 0x7
  2405  0077                     	ds	1
  2406  0078                     ??_printf_MATRIX88:	
  2407  0078                     ??___lmul:	
  2408                           ; 1 bytes @ 0x8
  2409                           
  2410  0078                     ?___lwmod:	
  2411                           ; 1 bytes @ 0x8
  2412                           
  2413  0078                     printf_debug_MATRIX44@x:	
  2414                           ; 2 bytes @ 0x8
  2415                           
  2416  0078                     is_row_full@col:	
  2417                           ; 1 bytes @ 0x8
  2418                           
  2419  0078                     is_left_boundary@matrix88:	
  2420                           ; 1 bytes @ 0x8
  2421                           
  2422  0078                     is_right_boundary@matrix88:	
  2423                           ; 1 bytes @ 0x8
  2424                           
  2425  0078                     clear@x:	
  2426                           ; 1 bytes @ 0x8
  2427                           
  2428  0078                     merge@x:	
  2429                           ; 1 bytes @ 0x8
  2430                           
  2431  0078                     printf_debug_MATRIX88@matrix:	
  2432                           ; 1 bytes @ 0x8
  2433                           
  2434  0078                     ___lwmod@divisor:	
  2435                           ; 2 bytes @ 0x8
  2436                           
  2437                           
  2438                           ; 2 bytes @ 0x8
  2439  0078                     	ds	1
  2440  0079                     ??_printf_Screen:	
  2441  0079                     ??_Clear_Matrix:	
  2442                           ; 1 bytes @ 0x9
  2443                           
  2444  0079                     ??_is_left_boundary:	
  2445                           ; 1 bytes @ 0x9
  2446                           
  2447  0079                     ??_is_right_boundary:	
  2448                           ; 1 bytes @ 0x9
  2449                           
  2450  0079                     printf_debug_MATRIX44@y:	
  2451                           ; 1 bytes @ 0x9
  2452                           
  2453  0079                     clear@row:	
  2454                           ; 1 bytes @ 0x9
  2455                           
  2456  0079                     merge@row:	
  2457                           ; 1 bytes @ 0x9
  2458                           
  2459  0079                     memcpy@s:	
  2460                           ; 1 bytes @ 0x9
  2461                           
  2462  0079                     ___lmul@product:	
  2463                           ; 2 bytes @ 0x9
  2464                           
  2465                           
  2466                           ; 4 bytes @ 0x9
  2467  0079                     	ds	1
  2468  007A                     printf_debug_MATRIX88@enable:	
  2469  007A                     clear@col:	
  2470                           ; 1 bytes @ 0xA
  2471                           
  2472  007A                     merge@col:	
  2473                           ; 1 bytes @ 0xA
  2474                           
  2475  007A                     printf_debug_MATRIX44@matrix:	
  2476                           ; 1 bytes @ 0xA
  2477                           
  2478  007A                     ___lwmod@dividend:	
  2479                           ; 2 bytes @ 0xA
  2480                           
  2481                           
  2482                           ; 2 bytes @ 0xA
  2483  007A                     	ds	1
  2484  007B                     ?_delete_row:	
  2485  007B                     printf_debug_MATRIX88@row:	
  2486                           ; 1 bytes @ 0xB
  2487                           
  2488  007B                     delete_row@matrix:	
  2489                           ; 1 bytes @ 0xB
  2490                           
  2491                           
  2492                           ; 2 bytes @ 0xB
  2493  007B                     	ds	1
  2494  007C                     ??___lwmod:	
  2495  007C                     printf_debug_MATRIX88@col:	
  2496                           ; 1 bytes @ 0xC
  2497                           
  2498                           
  2499                           ; 1 bytes @ 0xC
  2500  007C                     	ds	1
  2501  007D                     ??_printf_debug_Screen:	
  2502  007D                     ??___awmod:	
  2503                           ; 1 bytes @ 0xD
  2504                           
  2505  007D                     printf_debug_Screen@enable:	
  2506                           ; 1 bytes @ 0xD
  2507                           
  2508  007D                     delete_row@row:	
  2509                           ; 1 bytes @ 0xD
  2510                           
  2511  007D                     ___lwmod@counter:	
  2512                           ; 1 bytes @ 0xD
  2513                           
  2514                           
  2515                           ; 1 bytes @ 0xD
  2516  007D                     	ds	1
  2517  007E                     ??_debug_int1:	
  2518  007E                     ??_debug_int2:	
  2519                           ; 1 bytes @ 0xE
  2520                           
  2521  007E                     ??_char_info_index_rand:	
  2522                           ; 1 bytes @ 0xE
  2523                           
  2524                           
  2525                           	psect	cstackBANK0
  2526  0020                     __pcstackBANK0:	
  2527                           ; 1 bytes @ 0xE
  2528                           
  2529  0020                     ??_printf_debug_MATRIX44:	
  2530  0020                     ??_printf_debug_MATRIX88:	
  2531                           ; 1 bytes @ 0x0
  2532                           
  2533  0020                     ??_delete_row:	
  2534                           ; 1 bytes @ 0x0
  2535                           
  2536  0020                     ?_merge1:	
  2537                           ; 1 bytes @ 0x0
  2538                           
  2539  0020                     ?_sprintf:	
  2540                           ; 1 bytes @ 0x0
  2541                           
  2542  0020                     ?_rand:	
  2543                           ; 2 bytes @ 0x0
  2544                           
  2545  0020                     printf_MATRIX88@matrix88:	
  2546                           ; 2 bytes @ 0x0
  2547                           
  2548  0020                     is_left_boundary@x:	
  2549                           ; 1 bytes @ 0x0
  2550                           
  2551  0020                     is_right_boundary@x:	
  2552                           ; 1 bytes @ 0x0
  2553                           
  2554  0020                     merge1@y:	
  2555                           ; 1 bytes @ 0x0
  2556                           
  2557  0020                     sprintf@f:	
  2558                           ; 1 bytes @ 0x0
  2559                           
  2560                           
  2561                           ; 2 bytes @ 0x0
  2562  0020                     	ds	1
  2563  0021                     is_left_boundary@row:	
  2564  0021                     is_right_boundary@row:	
  2565                           ; 1 bytes @ 0x1
  2566                           
  2567  0021                     merge1@matrix44:	
  2568                           ; 1 bytes @ 0x1
  2569                           
  2570  0021                     printf_MATRIX88@matrix7219:	
  2571                           ; 2 bytes @ 0x1
  2572                           
  2573                           
  2574                           ; 8 bytes @ 0x1
  2575  0021                     	ds	1
  2576  0022                     ??_rand:	
  2577  0022                     is_left_boundary@col:	
  2578                           ; 1 bytes @ 0x2
  2579                           
  2580  0022                     is_right_boundary@col:	
  2581                           ; 1 bytes @ 0x2
  2582                           
  2583                           
  2584                           ; 1 bytes @ 0x2
  2585  0022                     	ds	1
  2586  0023                     merge1@matrix88_in:	
  2587                           
  2588                           ; 1 bytes @ 0x3
  2589  0023                     	ds	1
  2590  0024                     merge1@matrix88_out:	
  2591  0024                     delete_row@len:	
  2592                           ; 1 bytes @ 0x4
  2593                           
  2594                           
  2595                           ; 2 bytes @ 0x4
  2596  0024                     	ds	1
  2597  0025                     ?_printf_debug_Screen:	
  2598  0025                     ??_merge1:	
  2599                           ; 1 bytes @ 0x5
  2600                           
  2601  0025                     printf_debug_Screen@lable:	
  2602                           ; 1 bytes @ 0x5
  2603                           
  2604                           
  2605                           ; 2 bytes @ 0x5
  2606  0025                     	ds	1
  2607  0026                     delete_row@i:	
  2608                           
  2609                           ; 1 bytes @ 0x6
  2610  0026                     	ds	1
  2611  0027                     ?___awmod:	
  2612  0027                     ___awmod@divisor:	
  2613                           ; 2 bytes @ 0x7
  2614                           
  2615                           
  2616                           ; 2 bytes @ 0x7
  2617  0027                     	ds	1
  2618  0028                     ??_sprintf:	
  2619                           
  2620                           ; 1 bytes @ 0x8
  2621  0028                     	ds	1
  2622  0029                     printf_debug_MATRIX44@enable:	
  2623  0029                     merge1@x:	
  2624                           ; 1 bytes @ 0x9
  2625                           
  2626  0029                     ___awmod@dividend:	
  2627                           ; 1 bytes @ 0x9
  2628                           
  2629                           
  2630                           ; 2 bytes @ 0x9
  2631  0029                     	ds	1
  2632  002A                     printf_debug_MATRIX44@row:	
  2633  002A                     merge1@len:	
  2634                           ; 1 bytes @ 0xA
  2635                           
  2636                           
  2637                           ; 2 bytes @ 0xA
  2638  002A                     	ds	1
  2639  002B                     printf_debug_MATRIX44@col:	
  2640  002B                     ___awmod@counter:	
  2641                           ; 1 bytes @ 0xB
  2642                           
  2643  002B                     _sprintf$713:	
  2644                           ; 1 bytes @ 0xB
  2645                           
  2646                           
  2647                           ; 2 bytes @ 0xB
  2648  002B                     	ds	1
  2649  002C                     ?_printf_debug_cur_MATRIX44:	
  2650  002C                     merge1@row:	
  2651                           ; 1 bytes @ 0xC
  2652                           
  2653  002C                     ___awmod@sign:	
  2654                           ; 1 bytes @ 0xC
  2655                           
  2656  002C                     printf_debug_cur_MATRIX44@lable:	
  2657                           ; 1 bytes @ 0xC
  2658                           
  2659                           
  2660                           ; 2 bytes @ 0xC
  2661  002C                     	ds	1
  2662  002D                     merge1@col:	
  2663  002D                     _sprintf$714:	
  2664                           ; 1 bytes @ 0xD
  2665                           
  2666                           
  2667                           ; 2 bytes @ 0xD
  2668  002D                     	ds	1
  2669  002E                     printf_debug_cur_MATRIX44@x:	
  2670                           
  2671                           ; 1 bytes @ 0xE
  2672  002E                     	ds	1
  2673  002F                     printf_debug_cur_MATRIX44@y:	
  2674  002F                     _sprintf$720:	
  2675                           ; 1 bytes @ 0xF
  2676                           
  2677                           
  2678                           ; 2 bytes @ 0xF
  2679  002F                     	ds	1
  2680  0030                     ??_printf_debug_cur_MATRIX44:	
  2681                           
  2682                           ; 1 bytes @ 0x10
  2683  0030                     	ds	1
  2684  0031                     sprintf@idx:	
  2685                           
  2686                           ; 1 bytes @ 0x11
  2687  0031                     	ds	1
  2688  0032                     sprintf@cp:	
  2689                           
  2690                           ; 1 bytes @ 0x12
  2691  0032                     	ds	1
  2692  0033                     sprintf@len:	
  2693                           
  2694                           ; 2 bytes @ 0x13
  2695  0033                     	ds	2
  2696  0035                     sprintf@ap:	
  2697                           
  2698                           ; 1 bytes @ 0x15
  2699  0035                     	ds	1
  2700  0036                     sprintf@val:	
  2701                           
  2702                           ; 2 bytes @ 0x16
  2703  0036                     	ds	2
  2704  0038                     sprintf@prec:	
  2705                           
  2706                           ; 1 bytes @ 0x18
  2707  0038                     	ds	1
  2708  0039                     printf_debug_cur_MATRIX44@enable:	
  2709  0039                     sprintf@width:	
  2710                           ; 1 bytes @ 0x19
  2711                           
  2712                           
  2713                           ; 2 bytes @ 0x19
  2714  0039                     	ds	1
  2715  003A                     printf_debug_cur_MATRIX44@matrix:	
  2716                           
  2717                           ; 2 bytes @ 0x1A
  2718  003A                     	ds	1
  2719  003B                     sprintf@c:	
  2720                           
  2721                           ; 1 bytes @ 0x1B
  2722  003B                     	ds	1
  2723  003C                     sprintf@sp:	
  2724                           
  2725                           ; 1 bytes @ 0x1C
  2726  003C                     	ds	1
  2727  003D                     sprintf@flag:	
  2728                           
  2729                           ; 2 bytes @ 0x1D
  2730  003D                     	ds	2
  2731  003F                     ?_debug_int1:	
  2732  003F                     ?_debug_int2:	
  2733                           ; 1 bytes @ 0x1F
  2734                           
  2735  003F                     debug_int1@f:	
  2736                           ; 1 bytes @ 0x1F
  2737                           
  2738  003F                     debug_int2@f:	
  2739                           ; 2 bytes @ 0x1F
  2740                           
  2741                           
  2742                           ; 2 bytes @ 0x1F
  2743  003F                     	ds	2
  2744  0041                     debug_int1@i:	
  2745  0041                     debug_int2@i1:	
  2746                           ; 2 bytes @ 0x21
  2747                           
  2748                           
  2749                           ; 2 bytes @ 0x21
  2750  0041                     	ds	2
  2751  0043                     debug_int1@enable:	
  2752  0043                     debug_int2@i2:	
  2753                           ; 1 bytes @ 0x23
  2754                           
  2755                           
  2756                           ; 2 bytes @ 0x23
  2757  0043                     	ds	1
  2758  0044                     ?_delete_matrix:	
  2759  0044                     ?_left_most:	
  2760                           ; 1 bytes @ 0x24
  2761                           
  2762  0044                     ?_right_most:	
  2763                           ; 1 bytes @ 0x24
  2764                           
  2765  0044                     ??_get_high:	
  2766                           ; 1 bytes @ 0x24
  2767                           
  2768  0044                     ?_get_high_after_merge:	
  2769                           ; 1 bytes @ 0x24
  2770                           
  2771  0044                     ??_get_holes_after_merge:	
  2772                           ; 1 bytes @ 0x24
  2773                           
  2774  0044                     ?_evaluate:	
  2775                           ; 1 bytes @ 0x24
  2776                           
  2777  0044                     delete_matrix@matrix:	
  2778                           ; 2 bytes @ 0x24
  2779                           
  2780  0044                     left_most@matrix44:	
  2781                           ; 2 bytes @ 0x24
  2782                           
  2783  0044                     right_most@matrix44:	
  2784                           ; 2 bytes @ 0x24
  2785                           
  2786  0044                     get_high_after_merge@matrix:	
  2787                           ; 2 bytes @ 0x24
  2788                           
  2789                           
  2790                           ; 2 bytes @ 0x24
  2791  0044                     	ds	1
  2792  0045                     debug_int2@enable:	
  2793                           
  2794                           ; 1 bytes @ 0x25
  2795  0045                     	ds	1
  2796  0046                     ??_delete_matrix:	
  2797  0046                     ?_hit_land:	
  2798                           ; 1 bytes @ 0x26
  2799                           
  2800  0046                     ?_is_valid:	
  2801                           ; 1 bytes @ 0x26
  2802                           
  2803  0046                     ?_fall_off:	
  2804                           ; 1 bytes @ 0x26
  2805                           
  2806  0046                     ??_evaluate:	
  2807                           ; 1 bytes @ 0x26
  2808                           
  2809  0046                     ??_get_high_after_merge:	
  2810                           ; 1 bytes @ 0x26
  2811                           
  2812  0046                     hit_land@y:	
  2813                           ; 1 bytes @ 0x26
  2814                           
  2815  0046                     is_valid@y:	
  2816                           ; 1 bytes @ 0x26
  2817                           
  2818  0046                     fall_off@y:	
  2819                           ; 1 bytes @ 0x26
  2820                           
  2821  0046                     left_most@matrix88:	
  2822                           ; 1 bytes @ 0x26
  2823                           
  2824  0046                     right_most@matrix88:	
  2825                           ; 1 bytes @ 0x26
  2826                           
  2827  0046                     get_high@matrix:	
  2828                           ; 1 bytes @ 0x26
  2829                           
  2830                           
  2831                           ; 1 bytes @ 0x26
  2832  0046                     	ds	1
  2833  0047                     ??_left_most:	
  2834  0047                     ??_right_most:	
  2835                           ; 1 bytes @ 0x27
  2836                           
  2837  0047                     get_high@row:	
  2838                           ; 1 bytes @ 0x27
  2839                           
  2840  0047                     hit_land@matrix44:	
  2841                           ; 1 bytes @ 0x27
  2842                           
  2843  0047                     is_valid@matrix44:	
  2844                           ; 2 bytes @ 0x27
  2845                           
  2846  0047                     fall_off@matrix44:	
  2847                           ; 2 bytes @ 0x27
  2848                           
  2849                           
  2850                           ; 2 bytes @ 0x27
  2851  0047                     	ds	1
  2852  0048                     delete_matrix@count:	
  2853  0048                     left_most@x:	
  2854                           ; 1 bytes @ 0x28
  2855                           
  2856                           
  2857                           ; 1 bytes @ 0x28
  2858  0048                     	ds	1
  2859  0049                     delete_matrix@row:	
  2860  0049                     hit_land@matrix88:	
  2861                           ; 1 bytes @ 0x29
  2862                           
  2863  0049                     is_valid@matrix88:	
  2864                           ; 1 bytes @ 0x29
  2865                           
  2866  0049                     fall_off@matrix88:	
  2867                           ; 1 bytes @ 0x29
  2868                           
  2869  0049                     right_most@x:	
  2870                           ; 1 bytes @ 0x29
  2871                           
  2872                           
  2873                           ; 1 bytes @ 0x29
  2874  0049                     	ds	1
  2875  004A                     ??_hit_land:	
  2876  004A                     ??_is_valid:	
  2877                           ; 1 bytes @ 0x2A
  2878                           
  2879  004A                     ??_fall_off:	
  2880                           ; 1 bytes @ 0x2A
  2881                           
  2882  004A                     get_high_after_merge@y:	
  2883                           ; 1 bytes @ 0x2A
  2884                           
  2885  004A                     get_holes_after_merge@num_hole:	
  2886                           ; 1 bytes @ 0x2A
  2887                           
  2888  004A                     evaluate@risk:	
  2889                           ; 1 bytes @ 0x2A
  2890                           
  2891                           
  2892                           ; 2 bytes @ 0x2A
  2893  004A                     	ds	1
  2894  004B                     get_high_after_merge@col:	
  2895  004B                     get_holes_after_merge@stop:	
  2896                           ; 1 bytes @ 0x2B
  2897                           
  2898                           
  2899                           ; 1 bytes @ 0x2B
  2900  004B                     	ds	1
  2901  004C                     evaluate@full:	
  2902  004C                     get_high_after_merge@row:	
  2903                           ; 1 bytes @ 0x2C
  2904                           
  2905  004C                     get_holes_after_merge@matrix:	
  2906                           ; 1 bytes @ 0x2C
  2907                           
  2908                           
  2909                           ; 1 bytes @ 0x2C
  2910  004C                     	ds	1
  2911  004D                     evaluate@matrix:	
  2912  004D                     get_holes_after_merge@start:	
  2913                           ; 1 bytes @ 0x2D
  2914                           
  2915                           
  2916                           ; 1 bytes @ 0x2D
  2917  004D                     	ds	1
  2918  004E                     hit_land@x:	
  2919  004E                     is_valid@x:	
  2920                           ; 1 bytes @ 0x2E
  2921                           
  2922  004E                     fall_off@x:	
  2923                           ; 1 bytes @ 0x2E
  2924                           
  2925  004E                     evaluate@col:	
  2926                           ; 1 bytes @ 0x2E
  2927                           
  2928  004E                     get_holes_after_merge@col:	
  2929                           ; 1 bytes @ 0x2E
  2930                           
  2931                           
  2932                           ; 1 bytes @ 0x2E
  2933  004E                     	ds	1
  2934  004F                     hit_land@col:	
  2935  004F                     is_valid@row:	
  2936                           ; 1 bytes @ 0x2F
  2937                           
  2938  004F                     fall_off@col:	
  2939                           ; 1 bytes @ 0x2F
  2940                           
  2941  004F                     evaluate@row:	
  2942                           ; 1 bytes @ 0x2F
  2943                           
  2944  004F                     get_holes_after_merge@row:	
  2945                           ; 1 bytes @ 0x2F
  2946                           
  2947                           
  2948                           ; 1 bytes @ 0x2F
  2949  004F                     	ds	1
  2950  0050                     hit_land@row:	
  2951  0050                     is_valid@col:	
  2952                           ; 1 bytes @ 0x30
  2953                           
  2954  0050                     fall_off@row:	
  2955                           ; 1 bytes @ 0x30
  2956                           
  2957                           
  2958                           ; 1 bytes @ 0x30
  2959  0050                     	ds	1
  2960  0051                     ??_find_best_solution:	
  2961                           
  2962                           ; 1 bytes @ 0x31
  2963  0051                     	ds	7
  2964  0058                     ?_main:	
  2965  0058                     main@argc:	
  2966                           ; 2 bytes @ 0x38
  2967                           
  2968                           
  2969                           ; 2 bytes @ 0x38
  2970  0058                     	ds	2
  2971  005A                     main@argv:	
  2972                           
  2973                           ; 2 bytes @ 0x3A
  2974  005A                     	ds	2
  2975  005C                     ??_main:	
  2976                           
  2977                           ; 1 bytes @ 0x3C
  2978  005C                     	ds	9
  2979  0065                     main@Seed:	
  2980                           
  2981                           ; 2 bytes @ 0x45
  2982  0065                     	ds	2
  2983  0067                     main@hit_res:	
  2984                           
  2985                           ; 1 bytes @ 0x47
  2986  0067                     	ds	1
  2987                           
  2988                           	psect	maintext
  2989  014B                     __pmaintext:	
  2990 ;;
  2991 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
  2992 ;;
  2993 ;; *************** function _main *****************
  2994 ;; Defined at:
  2995 ;;		line 1296 in file "teris_16f886.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  argc            2   56[BANK0 ] int 
  2998 ;;  argv            2   58[BANK0 ] PTR PTR unsigned char 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  Seed            2   69[BANK0 ] unsigned int 
  3001 ;;  hit_res         1   71[BANK0 ] unsigned char 
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  2   56[BANK0 ] int 
  3004 ;; Registers used:
  3005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : B00/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3011 ;;      Params:         0       4       0       0       0
  3012 ;;      Locals:         0       3       0       0       0
  3013 ;;      Temps:          0       9       0       0       0
  3014 ;;      Totals:         0      16       0       0       0
  3015 ;;Total ram usage:       16 bytes
  3016 ;; Hardware stack levels required when called:    6
  3017 ;; This function calls:
  3018 ;;		_Clear_Matrix
  3019 ;;		_USARTInit
  3020 ;;		___bmul
  3021 ;;		_char_info_index_rand
  3022 ;;		_clear
  3023 ;;		_debug_int1
  3024 ;;		_debug_line
  3025 ;;		_delete_matrix
  3026 ;;		_find_best_solution
  3027 ;;		_hit_land
  3028 ;;		_merge
  3029 ;;		_printf_Screen
  3030 ;;		_printf_debug_MATRIX88
  3031 ;;		_srand
  3032 ;; This function is called by:
  3033 ;;		Startup code after reset
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           
  3038                           ;psect for function _main
  3039  014B                     _main:	
  3040                           
  3041                           ;teris_16f886.c: 1298: uint8_t hit_res;
  3042                           ;teris_16f886.c: 1323: (TRISAbits.TRISA3 = 0);
  3043                           
  3044                           ;incstack = 0
  3045                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3046  014B  1683               	bsf	3,5	;RP0=1, select bank1
  3047  014C  1303               	bcf	3,6	;RP1=0, select bank1
  3048  014D  1185               	bcf	5,3	;volatile
  3049                           
  3050                           ;teris_16f886.c: 1325: (TRISAbits.TRISA2 = 0);
  3051  014E  1105               	bcf	5,2	;volatile
  3052                           
  3053                           ;teris_16f886.c: 1327: (TRISAbits.TRISA1 = 0);
  3054  014F  1085               	bcf	5,1	;volatile
  3055                           
  3056                           ;teris_16f886.c: 1329: ANSELbits.ANS1 = 0;
  3057  0150  1683               	bsf	3,5	;RP0=1, select bank3
  3058  0151  1703               	bsf	3,6	;RP1=1, select bank3
  3059  0152  1088               	bcf	8,1	;volatile
  3060                           
  3061                           ;teris_16f886.c: 1330: ANSELbits.ANS2 = 0;
  3062  0153  1108               	bcf	8,2	;volatile
  3063                           
  3064                           ;teris_16f886.c: 1331: ANSELbits.ANS3 = 0;
  3065  0154  1188               	bcf	8,3	;volatile
  3066                           
  3067                           ;teris_16f886.c: 1332: RA2 = 1;
  3068  0155  1283               	bcf	3,5	;RP0=0, select bank0
  3069  0156  1303               	bcf	3,6	;RP1=0, select bank0
  3070  0157  1505               	bsf	5,2	;volatile
  3071                           
  3072                           ;teris_16f886.c: 1333: RA1 = 0;
  3073  0158  1085               	bcf	5,1	;volatile
  3074                           
  3075                           ;teris_16f886.c: 1336: USARTInit(9600);
  3076  0159  3080               	movlw	128
  3077  015A  00F0               	movwf	USARTInit@baud_rate
  3078  015B  3025               	movlw	37
  3079  015C  00F1               	movwf	USARTInit@baud_rate+1
  3080  015D  160A  158A  230D  120A  118A  	fcall	_USARTInit
  3081                           
  3082                           ;teris_16f886.c: 1339: unsigned Seed;
  3083                           ;teris_16f886.c: 1340: srand(Seed);
  3084  0162  1283               	bcf	3,5	;RP0=0, select bank0
  3085  0163  1303               	bcf	3,6	;RP1=0, select bank0
  3086  0164  0866               	movf	main@Seed+1,w
  3087  0165  00F1               	movwf	srand@x+1
  3088  0166  0865               	movf	main@Seed,w
  3089  0167  00F0               	movwf	srand@x
  3090  0168  160A  158A  202D  120A  118A  	fcall	_srand
  3091  016D  2978               	goto	l5795
  3092  016E                     l5809:	
  3093                           
  3094                           ;teris_16f886.c: 1352: {
  3095                           ;teris_16f886.c: 1353: debug_line(1, "GAME OVER!!!");
  3096  016E  301D               	movlw	low (STR_94| (0+32768))
  3097  016F  00F3               	movwf	debug_line@str
  3098  0170  308D               	movlw	high (STR_94| (0+32768))
  3099  0171  00F4               	movwf	debug_line@str+1
  3100  0172  3001               	movlw	1
  3101  0173  160A  158A  20AA  120A  118A  	fcall	_debug_line
  3102  0178                     l5795:	
  3103                           ;teris_16f886.c: 1342: __start:
  3104                           
  3105                           ;teris_16f886.c: 1354: goto __start;
  3106                           
  3107                           
  3108                           ;teris_16f886.c: 1343: Clear_Matrix();
  3109  0178  160A  158A  2096  120A  118A  	fcall	_Clear_Matrix
  3110  017D                     l5797:	
  3111                           ;teris_16f886.c: 1344: while(1)
  3112                           
  3113                           
  3114                           ;teris_16f886.c: 1345: {
  3115                           ;teris_16f886.c: 1346: cur_y = 0;
  3116  017D  1283               	bcf	3,5	;RP0=0, select bank0
  3117  017E  1303               	bcf	3,6	;RP1=0, select bank0
  3118  017F  01E8               	clrf	_cur_y
  3119                           
  3120                           ;teris_16f886.c: 1347: cur_x = 2, cur_y = 0;
  3121  0180  3002               	movlw	2
  3122  0181  00DC               	movwf	??_main
  3123  0182  085C               	movf	??_main,w
  3124  0183  1683               	bsf	3,5	;RP0=1, select bank1
  3125  0184  1303               	bcf	3,6	;RP1=0, select bank1
  3126  0185  00ED               	movwf	_cur_x^(0+128)
  3127  0186  1283               	bcf	3,5	;RP0=0, select bank0
  3128  0187  1303               	bcf	3,6	;RP1=0, select bank0
  3129  0188  01E8               	clrf	_cur_y
  3130                           
  3131                           ;teris_16f886.c: 1348: g_char_info_index = char_info_index_rand();
  3132  0189  160A  158A  20BF  120A  118A  	fcall	_char_info_index_rand
  3133  018E  1283               	bcf	3,5	;RP0=0, select bank0
  3134  018F  1303               	bcf	3,6	;RP1=0, select bank0
  3135  0190  00DC               	movwf	??_main
  3136  0191  085C               	movf	??_main,w
  3137  0192  00E9               	movwf	_g_char_info_index
  3138                           
  3139                           ;teris_16f886.c: 1350: debug_int1(1, "g_char_info_index = %d", g_char_info_index);
  3140  0193  30C1               	movlw	low (STR_95| (0+32768))
  3141  0194  00BF               	movwf	debug_int1@f
  3142  0195  308A               	movlw	high (STR_95| (0+32768))
  3143  0196  00C0               	movwf	debug_int1@f+1
  3144  0197  0869               	movf	_g_char_info_index,w
  3145  0198  00DC               	movwf	??_main
  3146  0199  01DD               	clrf	??_main+1
  3147  019A  085C               	movf	??_main,w
  3148  019B  00C1               	movwf	debug_int1@i
  3149  019C  085D               	movf	??_main+1,w
  3150  019D  00C2               	movwf	debug_int1@i+1
  3151  019E  3001               	movlw	1
  3152  019F  160A  118A  2003  120A  118A  	fcall	_debug_int1
  3153                           
  3154                           ;teris_16f886.c: 1351: if(find_best_solution() == 0)
  3155  01A4  120A  118A  22AB  120A  118A  	fcall	_find_best_solution
  3156  01A9  3A00               	xorlw	0
  3157  01AA  1903               	btfsc	3,2
  3158  01AB  296E               	goto	l5809
  3159                           
  3160                           ;teris_16f886.c: 1355: }
  3161                           ;teris_16f886.c: 1356: g_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].start
      +                          _index + g_char_info[g_char_info_index].cur_index];
  3162  01AC  3003               	movlw	3
  3163  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  3164  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  3165  01AF  00DC               	movwf	??_main
  3166  01B0  085C               	movf	??_main,w
  3167  01B1  00F0               	movwf	___bmul@multiplicand
  3168  01B2  0869               	movf	_g_char_info_index,w
  3169  01B3  160A  158A  2050  120A  118A  	fcall	___bmul
  3170  01B8  3E01               	addlw	1
  3171  01B9  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3172  01BA  0084               	movwf	4
  3173  01BB  1783               	bsf	3,7	;select IRP bank3
  3174  01BC  0800               	movf	0,w
  3175  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  3176  01BE  1303               	bcf	3,6	;RP1=0, select bank0
  3177  01BF  00DD               	movwf	??_main+1
  3178  01C0  3003               	movlw	3
  3179  01C1  00DE               	movwf	??_main+2
  3180  01C2  085E               	movf	??_main+2,w
  3181  01C3  00F0               	movwf	___bmul@multiplicand
  3182  01C4  0869               	movf	_g_char_info_index,w
  3183  01C5  160A  158A  2050  120A  118A  	fcall	___bmul
  3184  01CA  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3185  01CB  0084               	movwf	4
  3186  01CC  1783               	bsf	3,7	;select IRP bank3
  3187  01CD  0800               	movf	0,w
  3188  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  3189  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  3190  01D0  075D               	addwf	??_main+1,w
  3191  01D1  00DF               	movwf	??_main+3
  3192  01D2  01E0               	clrf	??_main+4
  3193  01D3  0DE0               	rlf	??_main+4,f
  3194  01D4  0EDF               	swapf	??_main+3,f
  3195  01D5  0EE0               	swapf	??_main+4,f
  3196  01D6  30F0               	movlw	240
  3197  01D7  05E0               	andwf	??_main+4,f
  3198  01D8  085F               	movf	??_main+3,w
  3199  01D9  390F               	andlw	15
  3200  01DA  04E0               	iorwf	??_main+4,f
  3201  01DB  30F0               	movlw	240
  3202  01DC  05DF               	andwf	??_main+3,f
  3203  01DD  3030               	movlw	low (_g_matrix44| (0+32768))
  3204  01DE  00E1               	movwf	??_main+5
  3205  01DF  3088               	movlw	high (_g_matrix44| (0+32768))
  3206  01E0  00E2               	movwf	??_main+6
  3207  01E1  085F               	movf	??_main+3,w
  3208  01E2  0761               	addwf	??_main+5,w
  3209  01E3  00E3               	movwf	??_main+7
  3210  01E4  0860               	movf	??_main+4,w
  3211  01E5  1803               	skipnc
  3212  01E6  0A60               	incf	??_main+4,w
  3213  01E7  0762               	addwf	??_main+6,w
  3214  01E8  00E4               	movwf	??_main+8
  3215  01E9  0863               	movf	??_main+7,w
  3216  01EA  1683               	bsf	3,5	;RP0=1, select bank3
  3217  01EB  1703               	bsf	3,6	;RP1=1, select bank3
  3218  01EC  0095               	movwf	_g_cur_matrix44^(0+384)
  3219  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  3220  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  3221  01EF  0864               	movf	??_main+8,w
  3222  01F0  1683               	bsf	3,5	;RP0=1, select bank3
  3223  01F1  1703               	bsf	3,6	;RP1=1, select bank3
  3224  01F2  0096               	movwf	(_g_cur_matrix44+1)^(0+384)
  3225  01F3                     l5813:	
  3226                           ;teris_16f886.c: 1357: while(1)
  3227                           
  3228                           
  3229                           ;teris_16f886.c: 1358: {
  3230                           ;teris_16f886.c: 1359: hit_res = hit_land(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3231  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  3232  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  3233  01F5  0868               	movf	_cur_y,w
  3234  01F6  00DC               	movwf	??_main
  3235  01F7  085C               	movf	??_main,w
  3236  01F8  00C6               	movwf	hit_land@y
  3237  01F9  1683               	bsf	3,5	;RP0=1, select bank3
  3238  01FA  1703               	bsf	3,6	;RP1=1, select bank3
  3239  01FB  0815               	movf	_g_cur_matrix44^(0+384),w
  3240  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  3241  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  3242  01FE  00C7               	movwf	hit_land@matrix44
  3243  01FF  1683               	bsf	3,5	;RP0=1, select bank3
  3244  0200  1703               	bsf	3,6	;RP1=1, select bank3
  3245  0201  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3246  0202  1283               	bcf	3,5	;RP0=0, select bank0
  3247  0203  1303               	bcf	3,6	;RP1=0, select bank0
  3248  0204  00C8               	movwf	hit_land@matrix44+1
  3249  0205  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3250  0206  00DD               	movwf	??_main+1
  3251  0207  085D               	movf	??_main+1,w
  3252  0208  00C9               	movwf	hit_land@matrix88
  3253  0209  1683               	bsf	3,5	;RP0=1, select bank1
  3254  020A  1303               	bcf	3,6	;RP1=0, select bank1
  3255  020B  086D               	movf	_cur_x^(0+128),w
  3256  020C  160A  118A  2142  120A  118A  	fcall	_hit_land
  3257  0211  1283               	bcf	3,5	;RP0=0, select bank0
  3258  0212  1303               	bcf	3,6	;RP1=0, select bank0
  3259  0213  00DE               	movwf	??_main+2
  3260  0214  085E               	movf	??_main+2,w
  3261  0215  00E7               	movwf	main@hit_res
  3262                           
  3263                           ;teris_16f886.c: 1360: debug_int1(1, "hit_res = %d", hit_res);
  3264  0216  302A               	movlw	low (STR_97| (0+32768))
  3265  0217  00BF               	movwf	debug_int1@f
  3266  0218  308D               	movlw	high (STR_97| (0+32768))
  3267  0219  00C0               	movwf	debug_int1@f+1
  3268  021A  0867               	movf	main@hit_res,w
  3269  021B  00DC               	movwf	??_main
  3270  021C  01DD               	clrf	??_main+1
  3271  021D  085C               	movf	??_main,w
  3272  021E  00C1               	movwf	debug_int1@i
  3273  021F  085D               	movf	??_main+1,w
  3274  0220  00C2               	movwf	debug_int1@i+1
  3275  0221  3001               	movlw	1
  3276  0222  160A  118A  2003  120A  118A  	fcall	_debug_int1
  3277                           
  3278                           ;teris_16f886.c: 1361: merge(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3279  0227  1283               	bcf	3,5	;RP0=0, select bank0
  3280  0228  1303               	bcf	3,6	;RP1=0, select bank0
  3281  0229  0868               	movf	_cur_y,w
  3282  022A  00DC               	movwf	??_main
  3283  022B  085C               	movf	??_main,w
  3284  022C  00F0               	movwf	merge@y
  3285  022D  1683               	bsf	3,5	;RP0=1, select bank3
  3286  022E  1703               	bsf	3,6	;RP1=1, select bank3
  3287  022F  0815               	movf	_g_cur_matrix44^(0+384),w
  3288  0230  00F1               	movwf	merge@matrix44
  3289  0231  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3290  0232  00F2               	movwf	merge@matrix44+1
  3291  0233  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3292  0234  1283               	bcf	3,5	;RP0=0, select bank0
  3293  0235  1303               	bcf	3,6	;RP1=0, select bank0
  3294  0236  00DD               	movwf	??_main+1
  3295  0237  085D               	movf	??_main+1,w
  3296  0238  00F3               	movwf	merge@matrix88
  3297  0239  1683               	bsf	3,5	;RP0=1, select bank1
  3298  023A  1303               	bcf	3,6	;RP1=0, select bank1
  3299  023B  086D               	movf	_cur_x^(0+128),w
  3300  023C  160A  158A  24CA  120A  118A  	fcall	_merge
  3301                           
  3302                           ;teris_16f886.c: 1362: if(hit_res == 1)
  3303  0241  1283               	bcf	3,5	;RP0=0, select bank0
  3304  0242  1303               	bcf	3,6	;RP1=0, select bank0
  3305  0243  0367               	decf	main@hit_res,w
  3306  0244  1D03               	btfss	3,2
  3307  0245  2A65               	goto	l5827
  3308                           
  3309                           ;teris_16f886.c: 1363: {
  3310                           ;teris_16f886.c: 1364: printf_Screen();
  3311  0246  160A  158A  2018  120A  118A  	fcall	_printf_Screen
  3312                           
  3313                           ;teris_16f886.c: 1368: _delay((unsigned long)((100)*(20000000/4000.0)));
  3314  024B  3003               	movlw	3
  3315  024C  1283               	bcf	3,5	;RP0=0, select bank0
  3316  024D  1303               	bcf	3,6	;RP1=0, select bank0
  3317  024E  00DE               	movwf	??_main+2
  3318  024F  308A               	movlw	138
  3319  0250  00DD               	movwf	??_main+1
  3320  0251  3056               	movlw	86
  3321  0252  00DC               	movwf	??_main
  3322  0253                     u8517:	
  3323  0253  0BDC               	decfsz	??_main,f
  3324  0254  2A53               	goto	u8517
  3325  0255  0BDD               	decfsz	??_main+1,f
  3326  0256  2A53               	goto	u8517
  3327  0257  0BDE               	decfsz	??_main+2,f
  3328  0258  2A53               	goto	u8517
  3329  0259  2A5A               	nop2
  3330                           
  3331                           ;teris_16f886.c: 1370: delete_matrix(&g_matrix88);
  3332  025A  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3333  025B  1283               	bcf	3,5	;RP0=0, select bank0
  3334  025C  1303               	bcf	3,6	;RP1=0, select bank0
  3335  025D  00C4               	movwf	delete_matrix@matrix
  3336  025E  3001               	movlw	1
  3337  025F  00C5               	movwf	delete_matrix@matrix+1
  3338  0260  160A  158A  239C  120A  118A  	fcall	_delete_matrix
  3339  0265                     l5827:	
  3340                           
  3341                           ;teris_16f886.c: 1371: }
  3342                           ;teris_16f886.c: 1372: printf_debug_MATRIX88(1, "Main screen", &g_matrix88);
  3343  0265  3037               	movlw	low (STR_98| (0+32768))
  3344  0266  00F6               	movwf	printf_debug_MATRIX88@lable
  3345  0267  308D               	movlw	high (STR_98| (0+32768))
  3346  0268  00F7               	movwf	printf_debug_MATRIX88@lable+1
  3347  0269  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3348  026A  00F8               	movwf	printf_debug_MATRIX88@matrix
  3349  026B  3001               	movlw	1
  3350  026C  00F9               	movwf	printf_debug_MATRIX88@matrix+1
  3351  026D  3001               	movlw	1
  3352  026E  160A  118A  2028  120A  118A  	fcall	_printf_debug_MATRIX88
  3353                           
  3354                           ;teris_16f886.c: 1373: printf_Screen();
  3355  0273  160A  158A  2018  120A  118A  	fcall	_printf_Screen
  3356                           
  3357                           ;teris_16f886.c: 1374: if(hit_res == 0)
  3358  0278  1283               	bcf	3,5	;RP0=0, select bank0
  3359  0279  1303               	bcf	3,6	;RP1=0, select bank0
  3360  027A  0867               	movf	main@hit_res,w
  3361  027B  1D03               	btfss	3,2
  3362  027C  297D               	goto	l5797
  3363                           
  3364                           ;teris_16f886.c: 1375: {
  3365                           ;teris_16f886.c: 1376: clear(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3366  027D  0868               	movf	_cur_y,w
  3367  027E  00DC               	movwf	??_main
  3368  027F  085C               	movf	??_main,w
  3369  0280  00F0               	movwf	clear@y
  3370  0281  1683               	bsf	3,5	;RP0=1, select bank3
  3371  0282  1703               	bsf	3,6	;RP1=1, select bank3
  3372  0283  0815               	movf	_g_cur_matrix44^(0+384),w
  3373  0284  00F1               	movwf	clear@matrix44
  3374  0285  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3375  0286  00F2               	movwf	clear@matrix44+1
  3376  0287  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3377  0288  1283               	bcf	3,5	;RP0=0, select bank0
  3378  0289  1303               	bcf	3,6	;RP1=0, select bank0
  3379  028A  00DD               	movwf	??_main+1
  3380  028B  085D               	movf	??_main+1,w
  3381  028C  00F3               	movwf	clear@matrix88
  3382  028D  1683               	bsf	3,5	;RP0=1, select bank1
  3383  028E  1303               	bcf	3,6	;RP1=0, select bank1
  3384  028F  086D               	movf	_cur_x^(0+128),w
  3385  0290  160A  158A  247B  120A  118A  	fcall	_clear
  3386                           
  3387                           ;teris_16f886.c: 1381: }
  3388                           ;teris_16f886.c: 1385: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3389                           
  3390                           ;teris_16f886.c: 1378: else
  3391                           ;teris_16f886.c: 1379: {
  3392                           ;teris_16f886.c: 1380: break;
  3393                           
  3394                           ;teris_16f886.c: 1377: }
  3395  0295  301A               	movlw	26
  3396  0296  1283               	bcf	3,5	;RP0=0, select bank0
  3397  0297  1303               	bcf	3,6	;RP1=0, select bank0
  3398  0298  00DE               	movwf	??_main+2
  3399  0299  305E               	movlw	94
  3400  029A  00DD               	movwf	??_main+1
  3401  029B  3086               	movlw	134
  3402  029C  00DC               	movwf	??_main
  3403  029D                     u8527:	
  3404  029D  0BDC               	decfsz	??_main,f
  3405  029E  2A9D               	goto	u8527
  3406  029F  0BDD               	decfsz	??_main+1,f
  3407  02A0  2A9D               	goto	u8527
  3408  02A1  0BDE               	decfsz	??_main+2,f
  3409  02A2  2A9D               	goto	u8527
  3410  02A3  0000               	nop
  3411                           
  3412                           ;teris_16f886.c: 1387: cur_y++;
  3413  02A4  3001               	movlw	1
  3414  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  3415  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  3416  02A7  00DC               	movwf	??_main
  3417  02A8  085C               	movf	??_main,w
  3418  02A9  07E8               	addwf	_cur_y,f
  3419  02AA  29F3               	goto	l5813
  3420  02AB                     __end_of_main:	
  3421                           ;teris_16f886.c: 1397: return 0;
  3422                           ;	Return value of _main is never used
  3423                           
  3424                           ;teris_16f886.c: 1388: }
  3425                           ;teris_16f886.c: 1389: }
  3426                           ;teris_16f886.c: 1390: __exit:
  3427                           
  3428                           
  3429                           	psect	text1
  3430  182D                     __ptext1:	
  3431 ;; *************** function _srand *****************
  3432 ;; Defined at:
  3433 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;  x               2    0[COMMON] unsigned int 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;		None
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  1    wreg      void 
  3440 ;; Registers used:
  3441 ;;		wreg
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3447 ;;      Params:         2       0       0       0       0
  3448 ;;      Locals:         0       0       0       0       0
  3449 ;;      Temps:          0       0       0       0       0
  3450 ;;      Totals:         2       0       0       0       0
  3451 ;;Total ram usage:        2 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; This function calls:
  3454 ;;		Nothing
  3455 ;; This function is called by:
  3456 ;;		_main
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           
  3461                           ;psect for function _srand
  3462  182D                     _srand:	
  3463                           
  3464                           ;incstack = 0
  3465                           ; Regs used in _srand: [wreg]
  3466  182D  0870               	movf	srand@x,w
  3467  182E  1683               	bsf	3,5	;RP0=1, select bank3
  3468  182F  1703               	bsf	3,6	;RP1=1, select bank3
  3469  1830  00D2               	movwf	_randx^(0+384)
  3470  1831  0871               	movf	srand@x+1,w
  3471  1832  00D3               	movwf	(_randx^(0+384)+1)
  3472  1833  01D4               	clrf	(_randx^(0+384)+2)
  3473  1834  01D5               	clrf	(_randx^(0+384)+3)
  3474  1835  0008               	return
  3475  1836                     __end_of_srand:	
  3476                           
  3477                           	psect	text2
  3478  1CCA                     __ptext2:	
  3479 ;; *************** function _merge *****************
  3480 ;; Defined at:
  3481 ;;		line 822 in file "teris_16f886.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  x               1    wreg     char 
  3484 ;;  y               1    0[COMMON] char 
  3485 ;;  matrix44        2    1[COMMON] PTR const struct .
  3486 ;;		 -> NULL(0), g_matrix44(384), 
  3487 ;;  matrix88        1    3[COMMON] PTR struct .
  3488 ;;		 -> g_matrix88(64), 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  x               1    8[COMMON] char 
  3491 ;;  col             1   10[COMMON] unsigned char 
  3492 ;;  row             1    9[COMMON] unsigned char 
  3493 ;; Return value:  Size  Location     Type
  3494 ;;                  1    wreg      void 
  3495 ;; Registers used:
  3496 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3502 ;;      Params:         4       0       0       0       0
  3503 ;;      Locals:         3       0       0       0       0
  3504 ;;      Temps:          4       0       0       0       0
  3505 ;;      Totals:        11       0       0       0       0
  3506 ;;Total ram usage:       11 bytes
  3507 ;; Hardware stack levels used:    2
  3508 ;; This function calls:
  3509 ;;		Nothing
  3510 ;; This function is called by:
  3511 ;;		_main
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           
  3516                           ;psect for function _merge
  3517  1CCA                     _merge:	
  3518                           
  3519                           ;incstack = 0
  3520                           ; Regs used in _merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3521                           ;merge@x stored from wreg
  3522  1CCA  00F8               	movwf	merge@x
  3523                           
  3524                           ;teris_16f886.c: 824: for(uint8_t row = 0; row < 4; row++)
  3525  1CCB  01F9               	clrf	merge@row
  3526  1CCC                     L1:	
  3527  1CCC  3004               	movlw	4
  3528  1CCD  0279               	subwf	merge@row,w
  3529  1CCE  1803               	btfsc	3,0
  3530  1CCF  0008               	return
  3531                           
  3532                           ;teris_16f886.c: 825: {
  3533                           ;teris_16f886.c: 826: for(uint8_t col = 0; col < 4; col++)
  3534  1CD0  01FA               	clrf	merge@col
  3535  1CD1  3004               	movlw	4
  3536  1CD2  027A               	subwf	merge@col,w
  3537  1CD3  1803               	btfsc	3,0
  3538  1CD4  2D15               	goto	l4287
  3539  1CD5                     l4279:	
  3540                           
  3541                           ;teris_16f886.c: 827: {
  3542                           ;teris_16f886.c: 828: if(matrix44->data[row][col] == 1)
  3543  1CD5  0879               	movf	merge@row,w
  3544  1CD6  00F4               	movwf	??_merge
  3545  1CD7  01F5               	clrf	??_merge+1
  3546  1CD8  1003               	clrc
  3547  1CD9  0DF4               	rlf	??_merge,f
  3548  1CDA  0DF5               	rlf	??_merge+1,f
  3549  1CDB  1003               	clrc
  3550  1CDC  0DF4               	rlf	??_merge,f
  3551  1CDD  0DF5               	rlf	??_merge+1,f
  3552  1CDE  0874               	movf	??_merge,w
  3553  1CDF  0771               	addwf	merge@matrix44,w
  3554  1CE0  00F6               	movwf	??_merge+2
  3555  1CE1  0875               	movf	??_merge+1,w
  3556  1CE2  1803               	skipnc
  3557  1CE3  0A75               	incf	??_merge+1,w
  3558  1CE4  0772               	addwf	merge@matrix44+1,w
  3559  1CE5  00F7               	movwf	??_merge+3
  3560  1CE6  087A               	movf	merge@col,w
  3561  1CE7  0776               	addwf	??_merge+2,w
  3562  1CE8  0084               	movwf	4
  3563  1CE9  0877               	movf	??_merge+3,w
  3564  1CEA  1803               	skipnc
  3565  1CEB  0A77               	incf	??_merge+3,w
  3566  1CEC  1283               	bcf	3,5	;RP0=0, select bank0
  3567  1CED  1303               	bcf	3,6	;RP1=0, select bank0
  3568  1CEE  00FF               	movwf	127
  3569  1CEF  120A  158A  2000  160A  158A  	fcall	stringtab
  3570  1CF4  3A01               	xorlw	1
  3571  1CF5  1D03               	skipz
  3572  1CF6  2D0D               	goto	l4283
  3573                           
  3574                           ;teris_16f886.c: 829: {
  3575                           ;teris_16f886.c: 830: matrix88->data[y + row][x + col] = 1;
  3576  1CF7  087A               	movf	merge@col,w
  3577  1CF8  0778               	addwf	merge@x,w
  3578  1CF9  0773               	addwf	merge@matrix88,w
  3579  1CFA  00F4               	movwf	??_merge
  3580  1CFB  0879               	movf	merge@row,w
  3581  1CFC  0770               	addwf	merge@y,w
  3582  1CFD  00F5               	movwf	??_merge+1
  3583  1CFE  3002               	movlw	2
  3584  1CFF                     u6055:	
  3585  1CFF  1003               	clrc
  3586  1D00  0DF5               	rlf	??_merge+1,f
  3587  1D01  3EFF               	addlw	-1
  3588  1D02  1D03               	skipz
  3589  1D03  2CFF               	goto	u6055
  3590  1D04  1003               	clrc
  3591  1D05  0D75               	rlf	??_merge+1,w
  3592  1D06  0774               	addwf	??_merge,w
  3593  1D07  00F6               	movwf	??_merge+2
  3594  1D08  0876               	movf	??_merge+2,w
  3595  1D09  0084               	movwf	4
  3596  1D0A  1783               	bsf	3,7	;select IRP bank2
  3597  1D0B  0180               	clrf	0
  3598  1D0C  0A80               	incf	0,f
  3599  1D0D                     l4283:	
  3600  1D0D  3001               	movlw	1
  3601  1D0E  00F4               	movwf	??_merge
  3602  1D0F  0874               	movf	??_merge,w
  3603  1D10  07FA               	addwf	merge@col,f
  3604  1D11  3004               	movlw	4
  3605  1D12  027A               	subwf	merge@col,w
  3606  1D13  1C03               	skipc
  3607  1D14  2CD5               	goto	l4279
  3608  1D15                     l4287:	
  3609  1D15  3001               	movlw	1
  3610  1D16  00F4               	movwf	??_merge
  3611  1D17  0874               	movf	??_merge,w
  3612  1D18  07F9               	addwf	merge@row,f
  3613  1D19  2CCC               	goto	L1
  3614  1D1A                     __end_of_merge:	
  3615                           
  3616                           	psect	text3
  3617  1142                     __ptext3:	
  3618 ;; *************** function _hit_land *****************
  3619 ;; Defined at:
  3620 ;;		line 684 in file "teris_16f886.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  x               1    wreg     char 
  3623 ;;  y               1   38[BANK0 ] char 
  3624 ;;  matrix44        2   39[BANK0 ] PTR const struct .
  3625 ;;		 -> NULL(0), g_matrix44(384), 
  3626 ;;  matrix88        1   41[BANK0 ] PTR const struct .
  3627 ;;		 -> g_matrix88(64), 
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  x               1   46[BANK0 ] char 
  3630 ;;  col             1   47[BANK0 ] char 
  3631 ;;  row             1   48[BANK0 ] char 
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  1    wreg      unsigned char 
  3634 ;; Registers used:
  3635 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3641 ;;      Params:         0       4       0       0       0
  3642 ;;      Locals:         0       3       0       0       0
  3643 ;;      Temps:          0       4       0       0       0
  3644 ;;      Totals:         0      11       0       0       0
  3645 ;;Total ram usage:       11 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    3
  3648 ;; This function calls:
  3649 ;;		_debug_int2
  3650 ;;		_debug_line
  3651 ;; This function is called by:
  3652 ;;		_main
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           
  3657                           ;psect for function _hit_land
  3658  1142                     _hit_land:	
  3659                           
  3660                           ;incstack = 0
  3661                           ; Regs used in _hit_land: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3662                           ;hit_land@x stored from wreg
  3663  1142  1283               	bcf	3,5	;RP0=0, select bank0
  3664  1143  1303               	bcf	3,6	;RP1=0, select bank0
  3665  1144  00CE               	movwf	hit_land@x
  3666                           
  3667                           ;teris_16f886.c: 686: debug_line(0, "==============hit_land============");
  3668  1145  3000               	movlw	low (STR_29| (0+32768))
  3669  1146  00F3               	movwf	debug_line@str
  3670  1147  308A               	movlw	high (STR_29| (0+32768))
  3671  1148  00F4               	movwf	debug_line@str+1
  3672  1149  3000               	movlw	0
  3673  114A  160A  158A  20AA  160A  118A  	fcall	_debug_line
  3674                           
  3675                           ;teris_16f886.c: 688: for(int8_t row = 4 - 1; row >= 0; row--)
  3676  114F  3003               	movlw	3
  3677  1150  1283               	bcf	3,5	;RP0=0, select bank0
  3678  1151  1303               	bcf	3,6	;RP1=0, select bank0
  3679  1152  00CA               	movwf	??_hit_land
  3680  1153  084A               	movf	??_hit_land,w
  3681  1154  00D0               	movwf	hit_land@row
  3682  1155  1BD0               	btfsc	hit_land@row,7
  3683  1156  29E9               	goto	l5451
  3684  1157                     l5419:	
  3685                           
  3686                           ;teris_16f886.c: 689: {
  3687                           ;teris_16f886.c: 690: for(int8_t col = 0; col < 4; col++)
  3688  1157  01CF               	clrf	hit_land@col
  3689  1158  084F               	movf	hit_land@col,w
  3690  1159  3A80               	xorlw	128
  3691  115A  3E7C               	addlw	-132
  3692  115B  1803               	btfsc	3,0
  3693  115C  29E3               	goto	l5447
  3694  115D                     l5425:	
  3695                           
  3696                           ;teris_16f886.c: 691: {
  3697                           ;teris_16f886.c: 692: if(matrix44->data[row][col] == 1)
  3698  115D  0850               	movf	hit_land@row,w
  3699  115E  00CA               	movwf	??_hit_land
  3700  115F  01CB               	clrf	??_hit_land+1
  3701  1160  1003               	clrc
  3702  1161  0DCA               	rlf	??_hit_land,f
  3703  1162  0DCB               	rlf	??_hit_land+1,f
  3704  1163  1003               	clrc
  3705  1164  0DCA               	rlf	??_hit_land,f
  3706  1165  0DCB               	rlf	??_hit_land+1,f
  3707  1166  084A               	movf	??_hit_land,w
  3708  1167  0747               	addwf	hit_land@matrix44,w
  3709  1168  00CC               	movwf	??_hit_land+2
  3710  1169  084B               	movf	??_hit_land+1,w
  3711  116A  1803               	skipnc
  3712  116B  0A4B               	incf	??_hit_land+1,w
  3713  116C  0748               	addwf	hit_land@matrix44+1,w
  3714  116D  00CD               	movwf	??_hit_land+3
  3715  116E  084F               	movf	hit_land@col,w
  3716  116F  074C               	addwf	??_hit_land+2,w
  3717  1170  0084               	movwf	4
  3718  1171  084D               	movf	??_hit_land+3,w
  3719  1172  1803               	skipnc
  3720  1173  0A4D               	incf	??_hit_land+3,w
  3721  1174  00FF               	movwf	127
  3722  1175  120A  158A  2000  160A  118A  	fcall	stringtab
  3723  117A  3A01               	xorlw	1
  3724  117B  1D03               	skipz
  3725  117C  29D8               	goto	l5443
  3726                           
  3727                           ;teris_16f886.c: 693: {
  3728                           ;teris_16f886.c: 694: if((y + row) >= (8 - 1))
  3729  117D  0846               	movf	hit_land@y,w
  3730  117E  0750               	addwf	hit_land@row,w
  3731  117F  00CA               	movwf	??_hit_land
  3732  1180  01CB               	clrf	??_hit_land+1
  3733  1181  1803               	skipnc
  3734  1182  0ACB               	incf	??_hit_land+1,f
  3735  1183  1BC6               	btfsc	hit_land@y,7
  3736  1184  03CB               	decf	??_hit_land+1,f
  3737  1185  1BD0               	btfsc	hit_land@row,7
  3738  1186  03CB               	decf	??_hit_land+1,f
  3739  1187  1283               	bcf	3,5	;RP0=0, select bank0
  3740  1188  1303               	bcf	3,6	;RP1=0, select bank0
  3741  1189  084B               	movf	??_hit_land+1,w
  3742  118A  3A80               	xorlw	128
  3743  118B  00FF               	movwf	127
  3744  118C  3080               	movlw	128
  3745  118D  027F               	subwf	127,w
  3746  118E  1D03               	skipz
  3747  118F  2992               	goto	u8065
  3748  1190  3007               	movlw	7
  3749  1191  024A               	subwf	??_hit_land,w
  3750  1192                     u8065:	
  3751  1192  1C03               	skipc
  3752  1193  29AA               	goto	l5435
  3753                           
  3754                           ;teris_16f886.c: 695: {
  3755                           ;teris_16f886.c: 696: debug_int2(0, "hit1 row = %d, col = %d", row, col);
  3756  1194  3091               	movlw	low (STR_30| (0+32768))
  3757  1195  1283               	bcf	3,5	;RP0=0, select bank0
  3758  1196  1303               	bcf	3,6	;RP1=0, select bank0
  3759  1197  00BF               	movwf	debug_int2@f
  3760  1198  308A               	movlw	high (STR_30| (0+32768))
  3761  1199  00C0               	movwf	debug_int2@f+1
  3762  119A  0850               	movf	hit_land@row,w
  3763  119B  00C1               	movwf	debug_int2@i1
  3764  119C  01C2               	clrf	debug_int2@i1+1
  3765  119D  1BC1               	btfsc	debug_int2@i1,7
  3766  119E  03C2               	decf	debug_int2@i1+1,f
  3767  119F  084F               	movf	hit_land@col,w
  3768  11A0  00C3               	movwf	debug_int2@i2
  3769  11A1  01C4               	clrf	debug_int2@i2+1
  3770  11A2  1BC3               	btfsc	debug_int2@i2,7
  3771  11A3  03C4               	decf	debug_int2@i2+1,f
  3772  11A4  3000               	movlw	0
  3773  11A5  160A  158A  2174   	fcall	_debug_int2
  3774                           
  3775                           ;teris_16f886.c: 697: return 1;
  3776  11A8  3001               	movlw	1
  3777  11A9  0008               	return
  3778  11AA                     l5435:	
  3779                           
  3780                           ;teris_16f886.c: 698: }
  3781                           ;teris_16f886.c: 700: if(matrix88->data[y + row + 1][x + col] == 1)
  3782  11AA  1283               	bcf	3,5	;RP0=0, select bank0
  3783  11AB  1303               	bcf	3,6	;RP1=0, select bank0
  3784  11AC  084F               	movf	hit_land@col,w
  3785  11AD  074E               	addwf	hit_land@x,w
  3786  11AE  0749               	addwf	hit_land@matrix88,w
  3787  11AF  00CA               	movwf	??_hit_land
  3788  11B0  0850               	movf	hit_land@row,w
  3789  11B1  0746               	addwf	hit_land@y,w
  3790  11B2  00CB               	movwf	??_hit_land+1
  3791  11B3  3002               	movlw	2
  3792  11B4                     u8075:	
  3793  11B4  1003               	clrc
  3794  11B5  0DCB               	rlf	??_hit_land+1,f
  3795  11B6  3EFF               	addlw	-1
  3796  11B7  1D03               	skipz
  3797  11B8  29B4               	goto	u8075
  3798  11B9  1003               	clrc
  3799  11BA  0D4B               	rlf	??_hit_land+1,w
  3800  11BB  3E08               	addlw	8
  3801  11BC  074A               	addwf	??_hit_land,w
  3802  11BD  00CC               	movwf	??_hit_land+2
  3803  11BE  084C               	movf	??_hit_land+2,w
  3804  11BF  0084               	movwf	4
  3805  11C0  1783               	bsf	3,7	;select IRP bank2
  3806  11C1  0300               	decf	0,w
  3807  11C2  1D03               	btfss	3,2
  3808  11C3  29D8               	goto	l5443
  3809                           
  3810                           ;teris_16f886.c: 701: {
  3811                           ;teris_16f886.c: 702: debug_int2(0, "hit2 row = %d, col = %d", row, col);
  3812  11C4  30A9               	movlw	low (STR_31| (0+32768))
  3813  11C5  00BF               	movwf	debug_int2@f
  3814  11C6  308A               	movlw	high (STR_31| (0+32768))
  3815  11C7  00C0               	movwf	debug_int2@f+1
  3816  11C8  0850               	movf	hit_land@row,w
  3817  11C9  00C1               	movwf	debug_int2@i1
  3818  11CA  01C2               	clrf	debug_int2@i1+1
  3819  11CB  1BC1               	btfsc	debug_int2@i1,7
  3820  11CC  03C2               	decf	debug_int2@i1+1,f
  3821  11CD  084F               	movf	hit_land@col,w
  3822  11CE  00C3               	movwf	debug_int2@i2
  3823  11CF  01C4               	clrf	debug_int2@i2+1
  3824  11D0  1BC3               	btfsc	debug_int2@i2,7
  3825  11D1  03C4               	decf	debug_int2@i2+1,f
  3826  11D2  3000               	movlw	0
  3827  11D3  160A  158A  2174   	fcall	_debug_int2
  3828                           
  3829                           ;teris_16f886.c: 703: return 1;
  3830  11D6  3001               	movlw	1
  3831  11D7  0008               	return
  3832  11D8                     l5443:	
  3833  11D8  3001               	movlw	1
  3834  11D9  1283               	bcf	3,5	;RP0=0, select bank0
  3835  11DA  1303               	bcf	3,6	;RP1=0, select bank0
  3836  11DB  00CA               	movwf	??_hit_land
  3837  11DC  084A               	movf	??_hit_land,w
  3838  11DD  07CF               	addwf	hit_land@col,f
  3839  11DE  084F               	movf	hit_land@col,w
  3840  11DF  3A80               	xorlw	128
  3841  11E0  3E7C               	addlw	-132
  3842  11E1  1C03               	skipc
  3843  11E2  295D               	goto	l5425
  3844  11E3                     l5447:	
  3845  11E3  30FF               	movlw	255
  3846  11E4  00CA               	movwf	??_hit_land
  3847  11E5  084A               	movf	??_hit_land,w
  3848  11E6  07D0               	addwf	hit_land@row,f
  3849  11E7  1FD0               	btfss	hit_land@row,7
  3850  11E8  2957               	goto	l5419
  3851  11E9                     l5451:	
  3852                           
  3853                           ;teris_16f886.c: 704: }
  3854                           ;teris_16f886.c: 705: }
  3855                           ;teris_16f886.c: 706: }
  3856                           ;teris_16f886.c: 707: }
  3857                           ;teris_16f886.c: 708: debug_line(0, "not hit");
  3858  11E9  30A0               	movlw	low (STR_32| (0+32768))
  3859  11EA  00F3               	movwf	debug_line@str
  3860  11EB  308D               	movlw	high (STR_32| (0+32768))
  3861  11EC  00F4               	movwf	debug_line@str+1
  3862  11ED  3000               	movlw	0
  3863  11EE  160A  158A  20AA   	fcall	_debug_line
  3864                           
  3865                           ;teris_16f886.c: 709: return 0;
  3866  11F1  3000               	movlw	0
  3867  11F2  0008               	return
  3868  11F3                     __end_of_hit_land:	
  3869                           
  3870                           	psect	text4
  3871  02AB                     __ptext4:	
  3872 ;; *************** function _find_best_solution *****************
  3873 ;; Defined at:
  3874 ;;		line 1020 in file "teris_16f886.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;		None
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  temp_x          1   70[BANK1 ] char 
  3879 ;;  tem_sub_inde    1   69[BANK1 ] unsigned char 
  3880 ;;  temp_matrix8   64    3[BANK1 ] struct .
  3881 ;;  temp_cur_mat    2   67[BANK1 ] PTR struct .
  3882 ;;		 -> g_matrix44(384), 
  3883 ;;  res             1    2[BANK1 ] unsigned char 
  3884 ;;  right_most_i    1    1[BANK1 ] char 
  3885 ;;  left_most_in    1    0[BANK1 ] char 
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  1    wreg      unsigned char 
  3888 ;; Registers used:
  3889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3895 ;;      Params:         0       0       0       0       0
  3896 ;;      Locals:         0       0      71       0       0
  3897 ;;      Temps:          0       7       0       0       0
  3898 ;;      Totals:         0       7      71       0       0
  3899 ;;Total ram usage:       78 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; Hardware stack levels required when called:    5
  3902 ;; This function calls:
  3903 ;;		___bmul
  3904 ;;		_debug_int1
  3905 ;;		_debug_int2
  3906 ;;		_debug_line
  3907 ;;		_delete_matrix
  3908 ;;		_evaluate
  3909 ;;		_fall_off
  3910 ;;		_get_high
  3911 ;;		_get_high_after_merge
  3912 ;;		_get_holes_after_merge
  3913 ;;		_is_valid
  3914 ;;		_left_most
  3915 ;;		_merge1
  3916 ;;		_printf_debug_MATRIX44
  3917 ;;		_printf_debug_MATRIX88
  3918 ;;		_printf_debug_Screen
  3919 ;;		_printf_debug_cur_MATRIX44
  3920 ;;		_right_most
  3921 ;; This function is called by:
  3922 ;;		_main
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           
  3927                           ;psect for function _find_best_solution
  3928  02AB                     _find_best_solution:	
  3929                           
  3930                           ;teris_16f886.c: 1022: debug_line(0, "==============find_best_solution============");
  3931                           
  3932                           ;incstack = 0
  3933                           ; Regs used in _find_best_solution: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3934  02AB  30B0               	movlw	low (STR_59| (0+32768))
  3935  02AC  00F3               	movwf	debug_line@str
  3936  02AD  3089               	movlw	high (STR_59| (0+32768))
  3937  02AE  00F4               	movwf	debug_line@str+1
  3938  02AF  3000               	movlw	0
  3939  02B0  160A  158A  20AA  120A  118A  	fcall	_debug_line
  3940                           
  3941                           ;teris_16f886.c: 1029: MATRIX44* temp_cur_matrix44;
  3942                           ;teris_16f886.c: 1030: MATRIX88 temp_matrix88;
  3943                           ;teris_16f886.c: 1031: uint8_t res = 0;
  3944  02B5  1683               	bsf	3,5	;RP0=1, select bank1
  3945  02B6  1303               	bcf	3,6	;RP1=0, select bank1
  3946  02B7  01A2               	clrf	find_best_solution@res^(0+128)
  3947                           
  3948                           ;teris_16f886.c: 1032: int8_t left_most_index, right_most_index;
  3949                           ;teris_16f886.c: 1034: temp_pre_x = 0xF;
  3950  02B8  300F               	movlw	15
  3951  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  3952  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  3953  02BB  00D1               	movwf	??_find_best_solution
  3954  02BC  0851               	movf	??_find_best_solution,w
  3955  02BD  00ED               	movwf	_temp_pre_x
  3956                           
  3957                           ;teris_16f886.c: 1035: tem_pre_sub_index = 0xF;
  3958  02BE  300F               	movlw	15
  3959  02BF  00D1               	movwf	??_find_best_solution
  3960  02C0  0851               	movf	??_find_best_solution,w
  3961  02C1  1683               	bsf	3,5	;RP0=1, select bank3
  3962  02C2  1703               	bsf	3,6	;RP1=1, select bank3
  3963  02C3  00D6               	movwf	_tem_pre_sub_index^(0+384)
  3964                           
  3965                           ;teris_16f886.c: 1036: temp_pre_risk = 0xFFFF;
  3966  02C4  30FF               	movlw	255
  3967  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  3968  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  3969  02C7  00EB               	movwf	_temp_pre_risk
  3970  02C8  30FF               	movlw	255
  3971  02C9  00EC               	movwf	_temp_pre_risk+1
  3972                           
  3973                           ;teris_16f886.c: 1037: temp_pre_count = 0;
  3974  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  3975  02CB  1303               	bcf	3,6	;RP1=0, select bank1
  3976  02CC  01EC               	clrf	_temp_pre_count^(0+128)
  3977                           
  3978                           ;teris_16f886.c: 1038: temp_pre_high = 0xFF;
  3979  02CD  30FF               	movlw	255
  3980  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  3981  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  3982  02D0  00D1               	movwf	??_find_best_solution
  3983  02D1  0851               	movf	??_find_best_solution,w
  3984  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  3985  02D3  1303               	bcf	3,6	;RP1=0, select bank1
  3986  02D4  00EE               	movwf	_temp_pre_high^(0+128)
  3987                           
  3988                           ;teris_16f886.c: 1039: temp_pre_hole = 0xFF;
  3989  02D5  30FF               	movlw	255
  3990  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  3991  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  3992  02D8  00D1               	movwf	??_find_best_solution
  3993  02D9  0851               	movf	??_find_best_solution,w
  3994  02DA  1683               	bsf	3,5	;RP0=1, select bank1
  3995  02DB  1303               	bcf	3,6	;RP1=0, select bank1
  3996  02DC  00EF               	movwf	_temp_pre_hole^(0+128)
  3997                           
  3998                           ;teris_16f886.c: 1042: for(uint8_t tem_sub_index = 0; tem_sub_index < g_char_info[g_char
      +                          _info_index].num; tem_sub_index++)
  3999  02DD  01E5               	clrf	find_best_solution@tem_sub_index^(0+128)
  4000  02DE                     l5631:	
  4001  02DE  3003               	movlw	3
  4002  02DF  1283               	bcf	3,5	;RP0=0, select bank0
  4003  02E0  1303               	bcf	3,6	;RP1=0, select bank0
  4004  02E1  00D1               	movwf	??_find_best_solution
  4005  02E2  0851               	movf	??_find_best_solution,w
  4006  02E3  00F0               	movwf	___bmul@multiplicand
  4007  02E4  0869               	movf	_g_char_info_index,w
  4008  02E5  160A  158A  2050  120A  118A  	fcall	___bmul
  4009  02EA  3E02               	addlw	2
  4010  02EB  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4011  02EC  0084               	movwf	4
  4012  02ED  1783               	bsf	3,7	;select IRP bank3
  4013  02EE  0800               	movf	0,w
  4014  02EF  1683               	bsf	3,5	;RP0=1, select bank1
  4015  02F0  1303               	bcf	3,6	;RP1=0, select bank1
  4016  02F1  0265               	subwf	find_best_solution@tem_sub_index^(0+128),w
  4017  02F2  1803               	btfsc	3,0
  4018  02F3  2EEF               	goto	l5633
  4019                           
  4020                           ;teris_16f886.c: 1043: {
  4021                           ;teris_16f886.c: 1044: temp_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].st
      +                          art_index + tem_sub_index];
  4022  02F4  3003               	movlw	3
  4023  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  4024  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  4025  02F7  00D1               	movwf	??_find_best_solution
  4026  02F8  0851               	movf	??_find_best_solution,w
  4027  02F9  00F0               	movwf	___bmul@multiplicand
  4028  02FA  0869               	movf	_g_char_info_index,w
  4029  02FB  160A  158A  2050  120A  118A  	fcall	___bmul
  4030  0300  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4031  0301  0084               	movwf	4
  4032  0302  1783               	bsf	3,7	;select IRP bank3
  4033  0303  0800               	movf	0,w
  4034  0304  1683               	bsf	3,5	;RP0=1, select bank1
  4035  0305  1303               	bcf	3,6	;RP1=0, select bank1
  4036  0306  0765               	addwf	find_best_solution@tem_sub_index^(0+128),w
  4037  0307  1283               	bcf	3,5	;RP0=0, select bank0
  4038  0308  1303               	bcf	3,6	;RP1=0, select bank0
  4039  0309  00D2               	movwf	??_find_best_solution+1
  4040  030A  01D3               	clrf	??_find_best_solution+2
  4041  030B  0DD3               	rlf	??_find_best_solution+2,f
  4042  030C  0ED2               	swapf	??_find_best_solution+1,f
  4043  030D  0ED3               	swapf	??_find_best_solution+2,f
  4044  030E  30F0               	movlw	240
  4045  030F  05D3               	andwf	??_find_best_solution+2,f
  4046  0310  0852               	movf	??_find_best_solution+1,w
  4047  0311  390F               	andlw	15
  4048  0312  04D3               	iorwf	??_find_best_solution+2,f
  4049  0313  30F0               	movlw	240
  4050  0314  05D2               	andwf	??_find_best_solution+1,f
  4051  0315  3030               	movlw	low (_g_matrix44| (0+32768))
  4052  0316  00D4               	movwf	??_find_best_solution+3
  4053  0317  3088               	movlw	high (_g_matrix44| (0+32768))
  4054  0318  00D5               	movwf	??_find_best_solution+4
  4055  0319  0852               	movf	??_find_best_solution+1,w
  4056  031A  0754               	addwf	??_find_best_solution+3,w
  4057  031B  00D6               	movwf	??_find_best_solution+5
  4058  031C  0853               	movf	??_find_best_solution+2,w
  4059  031D  1803               	skipnc
  4060  031E  0A53               	incf	??_find_best_solution+2,w
  4061  031F  0755               	addwf	??_find_best_solution+4,w
  4062  0320  00D7               	movwf	??_find_best_solution+6
  4063  0321  0856               	movf	??_find_best_solution+5,w
  4064  0322  1683               	bsf	3,5	;RP0=1, select bank1
  4065  0323  1303               	bcf	3,6	;RP1=0, select bank1
  4066  0324  00E3               	movwf	find_best_solution@temp_cur_matrix44^(0+128)
  4067  0325  1283               	bcf	3,5	;RP0=0, select bank0
  4068  0326  1303               	bcf	3,6	;RP1=0, select bank0
  4069  0327  0857               	movf	??_find_best_solution+6,w
  4070  0328  1683               	bsf	3,5	;RP0=1, select bank1
  4071  0329  1303               	bcf	3,6	;RP1=0, select bank1
  4072  032A  00E4               	movwf	(find_best_solution@temp_cur_matrix44+1)^(0+128)
  4073                           
  4074                           ;teris_16f886.c: 1045: left_most_index = left_most(cur_x, temp_cur_matrix44, &g_matrix88
      +                          );
  4075  032B  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4076  032C  1283               	bcf	3,5	;RP0=0, select bank0
  4077  032D  1303               	bcf	3,6	;RP1=0, select bank0
  4078  032E  00C4               	movwf	left_most@matrix44
  4079  032F  1683               	bsf	3,5	;RP0=1, select bank1
  4080  0330  1303               	bcf	3,6	;RP1=0, select bank1
  4081  0331  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4082  0332  1283               	bcf	3,5	;RP0=0, select bank0
  4083  0333  1303               	bcf	3,6	;RP1=0, select bank0
  4084  0334  00C5               	movwf	left_most@matrix44+1
  4085  0335  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4086  0336  00D1               	movwf	??_find_best_solution
  4087  0337  0851               	movf	??_find_best_solution,w
  4088  0338  00C6               	movwf	left_most@matrix88
  4089  0339  1683               	bsf	3,5	;RP0=1, select bank1
  4090  033A  1303               	bcf	3,6	;RP1=0, select bank1
  4091  033B  086D               	movf	_cur_x^(0+128),w
  4092  033C  160A  158A  2229  120A  118A  	fcall	_left_most
  4093  0341  1283               	bcf	3,5	;RP0=0, select bank0
  4094  0342  1303               	bcf	3,6	;RP1=0, select bank0
  4095  0343  00D2               	movwf	??_find_best_solution+1
  4096  0344  0852               	movf	??_find_best_solution+1,w
  4097  0345  1683               	bsf	3,5	;RP0=1, select bank1
  4098  0346  1303               	bcf	3,6	;RP1=0, select bank1
  4099  0347  00A0               	movwf	find_best_solution@left_most_index^(0+128)
  4100                           
  4101                           ;teris_16f886.c: 1046: right_most_index = right_most(cur_x, temp_cur_matrix44, &g_matrix
      +                          88);
  4102  0348  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4103  0349  1283               	bcf	3,5	;RP0=0, select bank0
  4104  034A  1303               	bcf	3,6	;RP1=0, select bank0
  4105  034B  00C4               	movwf	right_most@matrix44
  4106  034C  1683               	bsf	3,5	;RP0=1, select bank1
  4107  034D  1303               	bcf	3,6	;RP1=0, select bank1
  4108  034E  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4109  034F  1283               	bcf	3,5	;RP0=0, select bank0
  4110  0350  1303               	bcf	3,6	;RP1=0, select bank0
  4111  0351  00C5               	movwf	right_most@matrix44+1
  4112  0352  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4113  0353  00D1               	movwf	??_find_best_solution
  4114  0354  0851               	movf	??_find_best_solution,w
  4115  0355  00C6               	movwf	right_most@matrix88
  4116  0356  1683               	bsf	3,5	;RP0=1, select bank1
  4117  0357  1303               	bcf	3,6	;RP1=0, select bank1
  4118  0358  086D               	movf	_cur_x^(0+128),w
  4119  0359  160A  158A  225B  120A  118A  	fcall	_right_most
  4120  035E  1283               	bcf	3,5	;RP0=0, select bank0
  4121  035F  1303               	bcf	3,6	;RP1=0, select bank0
  4122  0360  00D2               	movwf	??_find_best_solution+1
  4123  0361  0852               	movf	??_find_best_solution+1,w
  4124  0362  1683               	bsf	3,5	;RP0=1, select bank1
  4125  0363  1303               	bcf	3,6	;RP1=0, select bank1
  4126  0364  00A1               	movwf	find_best_solution@right_most_index^(0+128)
  4127                           
  4128                           ;teris_16f886.c: 1048: for(int8_t temp_x = left_most_index; temp_x <= right_most_index; 
      +                          temp_x++)
  4129  0365  0820               	movf	find_best_solution@left_most_index^(0+128),w
  4130  0366  1283               	bcf	3,5	;RP0=0, select bank0
  4131  0367  1303               	bcf	3,6	;RP1=0, select bank0
  4132  0368  00D1               	movwf	??_find_best_solution
  4133  0369  0851               	movf	??_find_best_solution,w
  4134  036A  1683               	bsf	3,5	;RP0=1, select bank1
  4135  036B  1303               	bcf	3,6	;RP1=0, select bank1
  4136  036C  00E6               	movwf	find_best_solution@temp_x^(0+128)
  4137  036D                     l5627:	
  4138  036D  0821               	movf	find_best_solution@right_most_index^(0+128),w
  4139  036E  3A80               	xorlw	128
  4140  036F  1283               	bcf	3,5	;RP0=0, select bank0
  4141  0370  1303               	bcf	3,6	;RP1=0, select bank0
  4142  0371  00D1               	movwf	??_find_best_solution
  4143  0372  1683               	bsf	3,5	;RP0=1, select bank1
  4144  0373  1303               	bcf	3,6	;RP1=0, select bank1
  4145  0374  0866               	movf	find_best_solution@temp_x^(0+128),w
  4146  0375  3A80               	xorlw	128
  4147  0376  1283               	bcf	3,5	;RP0=0, select bank0
  4148  0377  1303               	bcf	3,6	;RP1=0, select bank0
  4149  0378  02D1               	subwf	??_find_best_solution,f
  4150  0379  1C03               	btfss	3,0
  4151  037A  2EE8               	goto	l5629
  4152                           
  4153                           ;teris_16f886.c: 1049: {
  4154                           ;teris_16f886.c: 1050: temp_y = fall_off(temp_x, cur_y, temp_cur_matrix44, &g_matrix88);
  4155  037B  1283               	bcf	3,5	;RP0=0, select bank0
  4156  037C  0868               	movf	_cur_y,w
  4157  037D  00D1               	movwf	??_find_best_solution
  4158  037E  0851               	movf	??_find_best_solution,w
  4159  037F  00C6               	movwf	fall_off@y
  4160  0380  1683               	bsf	3,5	;RP0=1, select bank1
  4161  0381  1303               	bcf	3,6	;RP1=0, select bank1
  4162  0382  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4163  0383  1283               	bcf	3,5	;RP0=0, select bank0
  4164  0384  1303               	bcf	3,6	;RP1=0, select bank0
  4165  0385  00C7               	movwf	fall_off@matrix44
  4166  0386  1683               	bsf	3,5	;RP0=1, select bank1
  4167  0387  1303               	bcf	3,6	;RP1=0, select bank1
  4168  0388  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4169  0389  1283               	bcf	3,5	;RP0=0, select bank0
  4170  038A  1303               	bcf	3,6	;RP1=0, select bank0
  4171  038B  00C8               	movwf	fall_off@matrix44+1
  4172  038C  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4173  038D  00D2               	movwf	??_find_best_solution+1
  4174  038E  0852               	movf	??_find_best_solution+1,w
  4175  038F  00C9               	movwf	fall_off@matrix88
  4176  0390  1683               	bsf	3,5	;RP0=1, select bank1
  4177  0391  1303               	bcf	3,6	;RP1=0, select bank1
  4178  0392  0866               	movf	find_best_solution@temp_x^(0+128),w
  4179  0393  120A  158A  25F1  120A  118A  	fcall	_fall_off
  4180  0398  1283               	bcf	3,5	;RP0=0, select bank0
  4181  0399  1303               	bcf	3,6	;RP1=0, select bank0
  4182  039A  00D3               	movwf	??_find_best_solution+2
  4183  039B  0853               	movf	??_find_best_solution+2,w
  4184  039C  00EA               	movwf	_temp_y
  4185                           
  4186                           ;teris_16f886.c: 1052: printf_debug_MATRIX44(0, "After fall off", temp_x, temp_y, temp_c
      +                          ur_matrix44);
  4187  039D  3000               	movlw	low (STR_60| (0+32768))
  4188  039E  00F6               	movwf	printf_debug_MATRIX44@lable
  4189  039F  308D               	movlw	high (STR_60| (0+32768))
  4190  03A0  00F7               	movwf	printf_debug_MATRIX44@lable+1
  4191  03A1  1683               	bsf	3,5	;RP0=1, select bank1
  4192  03A2  1303               	bcf	3,6	;RP1=0, select bank1
  4193  03A3  0866               	movf	find_best_solution@temp_x^(0+128),w
  4194  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  4195  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  4196  03A6  00D1               	movwf	??_find_best_solution
  4197  03A7  0851               	movf	??_find_best_solution,w
  4198  03A8  00F8               	movwf	printf_debug_MATRIX44@x
  4199  03A9  086A               	movf	_temp_y,w
  4200  03AA  00D2               	movwf	??_find_best_solution+1
  4201  03AB  0852               	movf	??_find_best_solution+1,w
  4202  03AC  00F9               	movwf	printf_debug_MATRIX44@y
  4203  03AD  1683               	bsf	3,5	;RP0=1, select bank1
  4204  03AE  1303               	bcf	3,6	;RP1=0, select bank1
  4205  03AF  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4206  03B0  00FA               	movwf	printf_debug_MATRIX44@matrix
  4207  03B1  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4208  03B2  00FB               	movwf	printf_debug_MATRIX44@matrix+1
  4209  03B3  3000               	movlw	0
  4210  03B4  120A  118A  202B  120A  118A  	fcall	_printf_debug_MATRIX44
  4211                           
  4212                           ;teris_16f886.c: 1053: printf_debug_Screen(0, "After fall off");
  4213  03B9  3000               	movlw	low (STR_60| (0+32768))
  4214  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  4215  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  4216  03BC  00A5               	movwf	printf_debug_Screen@lable
  4217  03BD  308D               	movlw	high (STR_60| (0+32768))
  4218  03BE  00A6               	movwf	printf_debug_Screen@lable+1
  4219  03BF  3000               	movlw	0
  4220  03C0  120A  158A  25C7  120A  118A  	fcall	_printf_debug_Screen
  4221                           
  4222                           ;teris_16f886.c: 1055: if(is_valid(temp_x, temp_y, temp_cur_matrix44, &g_matrix88) == 0)
  4223  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  4224  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  4225  03C7  086A               	movf	_temp_y,w
  4226  03C8  00D1               	movwf	??_find_best_solution
  4227  03C9  0851               	movf	??_find_best_solution,w
  4228  03CA  00C6               	movwf	is_valid@y
  4229  03CB  1683               	bsf	3,5	;RP0=1, select bank1
  4230  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  4231  03CD  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4232  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  4233  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  4234  03D0  00C7               	movwf	is_valid@matrix44
  4235  03D1  1683               	bsf	3,5	;RP0=1, select bank1
  4236  03D2  1303               	bcf	3,6	;RP1=0, select bank1
  4237  03D3  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4238  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  4239  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  4240  03D6  00C8               	movwf	is_valid@matrix44+1
  4241  03D7  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4242  03D8  00D2               	movwf	??_find_best_solution+1
  4243  03D9  0852               	movf	??_find_best_solution+1,w
  4244  03DA  00C9               	movwf	is_valid@matrix88
  4245  03DB  1683               	bsf	3,5	;RP0=1, select bank1
  4246  03DC  1303               	bcf	3,6	;RP1=0, select bank1
  4247  03DD  0866               	movf	find_best_solution@temp_x^(0+128),w
  4248  03DE  160A  118A  21F3  120A  118A  	fcall	_is_valid
  4249  03E3  3A00               	xorlw	0
  4250  03E4  1903               	btfsc	3,2
  4251  03E5  2EDF               	goto	l5625
  4252                           
  4253                           ;teris_16f886.c: 1058: }
  4254                           ;teris_16f886.c: 1059: res = 1;
  4255                           
  4256                           ;teris_16f886.c: 1056: {
  4257                           ;teris_16f886.c: 1057: continue;
  4258  03E6  1683               	bsf	3,5	;RP0=1, select bank1
  4259  03E7  1303               	bcf	3,6	;RP1=0, select bank1
  4260  03E8  01A2               	clrf	find_best_solution@res^(0+128)
  4261  03E9  0AA2               	incf	find_best_solution@res^(0+128),f
  4262                           
  4263                           ;teris_16f886.c: 1060: merge1(temp_x, temp_y, temp_cur_matrix44, &g_matrix88, &temp_matr
      +                          ix88);
  4264  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  4265  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  4266  03EC  086A               	movf	_temp_y,w
  4267  03ED  00D1               	movwf	??_find_best_solution
  4268  03EE  0851               	movf	??_find_best_solution,w
  4269  03EF  00A0               	movwf	merge1@y
  4270  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  4271  03F1  1303               	bcf	3,6	;RP1=0, select bank1
  4272  03F2  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4273  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  4274  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  4275  03F5  00A1               	movwf	merge1@matrix44
  4276  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  4277  03F7  1303               	bcf	3,6	;RP1=0, select bank1
  4278  03F8  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4279  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  4280  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  4281  03FB  00A2               	movwf	merge1@matrix44+1
  4282  03FC  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4283  03FD  00D2               	movwf	??_find_best_solution+1
  4284  03FE  0852               	movf	??_find_best_solution+1,w
  4285  03FF  00A3               	movwf	merge1@matrix88_in
  4286  0400  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4287  0401  00D3               	movwf	??_find_best_solution+2
  4288  0402  0853               	movf	??_find_best_solution+2,w
  4289  0403  00A4               	movwf	merge1@matrix88_out
  4290  0404  1683               	bsf	3,5	;RP0=1, select bank1
  4291  0405  1303               	bcf	3,6	;RP1=0, select bank1
  4292  0406  0866               	movf	find_best_solution@temp_x^(0+128),w
  4293  0407  160A  158A  262F  120A  118A  	fcall	_merge1
  4294                           
  4295                           ;teris_16f886.c: 1061: temp_count = delete_matrix(&temp_matrix88);
  4296  040C  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4297  040D  1283               	bcf	3,5	;RP0=0, select bank0
  4298  040E  1303               	bcf	3,6	;RP1=0, select bank0
  4299  040F  00C4               	movwf	delete_matrix@matrix
  4300  0410  3000               	movlw	0
  4301  0411  00C5               	movwf	delete_matrix@matrix+1
  4302  0412  160A  158A  239C  120A  118A  	fcall	_delete_matrix
  4303  0417  1283               	bcf	3,5	;RP0=0, select bank0
  4304  0418  1303               	bcf	3,6	;RP1=0, select bank0
  4305  0419  00D1               	movwf	??_find_best_solution
  4306  041A  0851               	movf	??_find_best_solution,w
  4307  041B  1683               	bsf	3,5	;RP0=1, select bank1
  4308  041C  1303               	bcf	3,6	;RP1=0, select bank1
  4309  041D  00E9               	movwf	_temp_count^(0+128)
  4310                           
  4311                           ;teris_16f886.c: 1062: temp_risk = evaluate(&temp_matrix88);
  4312  041E  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4313  041F  160A  158A  277E  120A  118A  	fcall	_evaluate
  4314  0424  1283               	bcf	3,5	;RP0=0, select bank0
  4315  0425  1303               	bcf	3,6	;RP1=0, select bank0
  4316  0426  0845               	movf	?_evaluate+1,w
  4317  0427  1683               	bsf	3,5	;RP0=1, select bank1
  4318  0428  1303               	bcf	3,6	;RP1=0, select bank1
  4319  0429  00E8               	movwf	(_temp_risk+1)^(0+128)
  4320  042A  1283               	bcf	3,5	;RP0=0, select bank0
  4321  042B  1303               	bcf	3,6	;RP1=0, select bank0
  4322  042C  0844               	movf	?_evaluate,w
  4323  042D  1683               	bsf	3,5	;RP0=1, select bank1
  4324  042E  1303               	bcf	3,6	;RP1=0, select bank1
  4325  042F  00E7               	movwf	_temp_risk^(0+128)
  4326                           
  4327                           ;teris_16f886.c: 1063: temp_high = get_high_after_merge(temp_y, temp_cur_matrix44);
  4328  0430  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4329  0431  1283               	bcf	3,5	;RP0=0, select bank0
  4330  0432  1303               	bcf	3,6	;RP1=0, select bank0
  4331  0433  00C4               	movwf	get_high_after_merge@matrix
  4332  0434  1683               	bsf	3,5	;RP0=1, select bank1
  4333  0435  1303               	bcf	3,6	;RP1=0, select bank1
  4334  0436  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4335  0437  1283               	bcf	3,5	;RP0=0, select bank0
  4336  0438  1303               	bcf	3,6	;RP1=0, select bank0
  4337  0439  00C5               	movwf	get_high_after_merge@matrix+1
  4338  043A  086A               	movf	_temp_y,w
  4339  043B  160A  118A  20AE  120A  118A  	fcall	_get_high_after_merge
  4340  0440  1283               	bcf	3,5	;RP0=0, select bank0
  4341  0441  1303               	bcf	3,6	;RP1=0, select bank0
  4342  0442  00D1               	movwf	??_find_best_solution
  4343  0443  0851               	movf	??_find_best_solution,w
  4344  0444  1683               	bsf	3,5	;RP0=1, select bank1
  4345  0445  1303               	bcf	3,6	;RP1=0, select bank1
  4346  0446  00EA               	movwf	_temp_high^(0+128)
  4347                           
  4348                           ;teris_16f886.c: 1064: temp_hole = get_holes_after_merge(&temp_matrix88);
  4349  0447  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4350  0448  120A  158A  26A9  120A  118A  	fcall	_get_holes_after_merge
  4351  044D  1283               	bcf	3,5	;RP0=0, select bank0
  4352  044E  1303               	bcf	3,6	;RP1=0, select bank0
  4353  044F  00D1               	movwf	??_find_best_solution
  4354  0450  0851               	movf	??_find_best_solution,w
  4355  0451  1683               	bsf	3,5	;RP0=1, select bank1
  4356  0452  1303               	bcf	3,6	;RP1=0, select bank1
  4357  0453  00EB               	movwf	_temp_hole^(0+128)
  4358                           
  4359                           ;teris_16f886.c: 1066: printf_debug_MATRIX88(0, "Valid instance", &temp_matrix88);
  4360  0454  30F1               	movlw	low (STR_62| (0+32768))
  4361  0455  00F6               	movwf	printf_debug_MATRIX88@lable
  4362  0456  308C               	movlw	high (STR_62| (0+32768))
  4363  0457  00F7               	movwf	printf_debug_MATRIX88@lable+1
  4364  0458  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4365  0459  00F8               	movwf	printf_debug_MATRIX88@matrix
  4366  045A  3000               	movlw	0
  4367  045B  00F9               	movwf	printf_debug_MATRIX88@matrix+1
  4368  045C  3000               	movlw	0
  4369  045D  160A  118A  2028  120A  118A  	fcall	_printf_debug_MATRIX88
  4370                           
  4371                           ;teris_16f886.c: 1067: debug_line(0, "Start evaluation");
  4372  0462  3093               	movlw	low (STR_63| (0+32768))
  4373  0463  00F3               	movwf	debug_line@str
  4374  0464  308C               	movlw	high (STR_63| (0+32768))
  4375  0465  00F4               	movwf	debug_line@str+1
  4376  0466  3000               	movlw	0
  4377  0467  160A  158A  20AA  120A  118A  	fcall	_debug_line
  4378                           
  4379                           ;teris_16f886.c: 1069: if(temp_count > temp_pre_count)
  4380  046C  1683               	bsf	3,5	;RP0=1, select bank1
  4381  046D  1303               	bcf	3,6	;RP1=0, select bank1
  4382  046E  0869               	movf	_temp_count^(0+128),w
  4383  046F  026C               	subwf	_temp_pre_count^(0+128),w
  4384  0470  1803               	skipnc
  4385  0471  2C87               	goto	l5505
  4386                           
  4387                           ;teris_16f886.c: 1070: {
  4388                           ;teris_16f886.c: 1071: debug_int2(0, "count: (%d) > (%d)", temp_count, temp_pre_count);
  4389  0472  30CB               	movlw	low (STR_64| (0+32768))
  4390  0473  1283               	bcf	3,5	;RP0=0, select bank0
  4391  0474  1303               	bcf	3,6	;RP1=0, select bank0
  4392  0475  00BF               	movwf	debug_int2@f
  4393  0476  308B               	movlw	high (STR_64| (0+32768))
  4394  0477  00C0               	movwf	debug_int2@f+1
  4395  0478  1683               	bsf	3,5	;RP0=1, select bank1
  4396  0479  1303               	bcf	3,6	;RP1=0, select bank1
  4397  047A  0869               	movf	_temp_count^(0+128),w
  4398  047B  1283               	bcf	3,5	;RP0=0, select bank0
  4399  047C  1303               	bcf	3,6	;RP1=0, select bank0
  4400  047D  00D1               	movwf	??_find_best_solution
  4401  047E  01D2               	clrf	??_find_best_solution+1
  4402  047F  0851               	movf	??_find_best_solution,w
  4403  0480  00C1               	movwf	debug_int2@i1
  4404  0481  0852               	movf	??_find_best_solution+1,w
  4405  0482  00C2               	movwf	debug_int2@i1+1
  4406  0483  1683               	bsf	3,5	;RP0=1, select bank1
  4407  0484  1303               	bcf	3,6	;RP1=0, select bank1
  4408  0485  086C               	movf	_temp_pre_count^(0+128),w
  4409  0486  2DC7               	goto	L5
  4410  0487                     l5505:	
  4411                           ;teris_16f886.c: 1078: }
  4412                           
  4413                           ;teris_16f886.c: 1077: temp_pre_x = temp_x;
  4414                           
  4415                           ;teris_16f886.c: 1076: tem_pre_sub_index = tem_sub_index;
  4416                           
  4417                           ;teris_16f886.c: 1075: temp_pre_hole = temp_hole;
  4418                           
  4419                           ;teris_16f886.c: 1074: temp_pre_high = temp_high;
  4420                           
  4421                           ;teris_16f886.c: 1073: temp_pre_risk = temp_risk;
  4422                           
  4423                           ;teris_16f886.c: 1072: temp_pre_count = temp_count;
  4424                           
  4425                           
  4426                           ;teris_16f886.c: 1079: else if(temp_count == temp_pre_count)
  4427  0487  1683               	bsf	3,5	;RP0=1, select bank1
  4428  0488  1303               	bcf	3,6	;RP1=0, select bank1
  4429  0489  0869               	movf	_temp_count^(0+128),w
  4430  048A  066C               	xorwf	_temp_pre_count^(0+128),w
  4431  048B  1D03               	skipz
  4432  048C  2E5A               	goto	l470
  4433                           
  4434                           ;teris_16f886.c: 1080: {
  4435                           ;teris_16f886.c: 1081: if(get_high(&g_matrix88) <= 8/2 + 1)
  4436  048D  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4437  048E  160A  158A  23E5  120A  118A  	fcall	_get_high
  4438  0493  1283               	bcf	3,5	;RP0=0, select bank0
  4439  0494  1303               	bcf	3,6	;RP1=0, select bank0
  4440  0495  00D1               	movwf	??_find_best_solution
  4441  0496  3006               	movlw	6
  4442  0497  0251               	subwf	??_find_best_solution,w
  4443  0498  1803               	skipnc
  4444  0499  2D3A               	goto	l5567
  4445                           
  4446                           ;teris_16f886.c: 1082: {
  4447                           ;teris_16f886.c: 1083: debug_int1(0, "height <= (%d)", 8/2 + 1);
  4448  049A  30C4               	movlw	low (STR_65| (0+32768))
  4449  049B  00BF               	movwf	debug_int1@f
  4450  049C  308C               	movlw	high (STR_65| (0+32768))
  4451  049D  00C0               	movwf	debug_int1@f+1
  4452  049E  3005               	movlw	5
  4453  049F  00C1               	movwf	debug_int1@i
  4454  04A0  3000               	movlw	0
  4455  04A1  00C2               	movwf	debug_int1@i+1
  4456  04A2  3000               	movlw	0
  4457  04A3  160A  118A  2003  120A  118A  	fcall	_debug_int1
  4458                           
  4459                           ;teris_16f886.c: 1084: debug_int2(0, "count: (%d) == (%d)", temp_count, temp_pre_count);
  4460  04A8  3042               	movlw	low (STR_66| (0+32768))
  4461  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  4462  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  4463  04AB  00BF               	movwf	debug_int2@f
  4464  04AC  308B               	movlw	high (STR_66| (0+32768))
  4465  04AD  00C0               	movwf	debug_int2@f+1
  4466  04AE  1683               	bsf	3,5	;RP0=1, select bank1
  4467  04AF  1303               	bcf	3,6	;RP1=0, select bank1
  4468  04B0  0869               	movf	_temp_count^(0+128),w
  4469  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  4470  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  4471  04B3  00D1               	movwf	??_find_best_solution
  4472  04B4  01D2               	clrf	??_find_best_solution+1
  4473  04B5  0851               	movf	??_find_best_solution,w
  4474  04B6  00C1               	movwf	debug_int2@i1
  4475  04B7  0852               	movf	??_find_best_solution+1,w
  4476  04B8  00C2               	movwf	debug_int2@i1+1
  4477  04B9  1683               	bsf	3,5	;RP0=1, select bank1
  4478  04BA  1303               	bcf	3,6	;RP1=0, select bank1
  4479  04BB  086C               	movf	_temp_pre_count^(0+128),w
  4480  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  4481  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  4482  04BE  00D3               	movwf	??_find_best_solution+2
  4483  04BF  01D4               	clrf	??_find_best_solution+3
  4484  04C0  0853               	movf	??_find_best_solution+2,w
  4485  04C1  00C3               	movwf	debug_int2@i2
  4486  04C2  0854               	movf	??_find_best_solution+3,w
  4487  04C3  00C4               	movwf	debug_int2@i2+1
  4488  04C4  3000               	movlw	0
  4489  04C5  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4490                           
  4491                           ;teris_16f886.c: 1085: if(temp_risk < temp_pre_risk)
  4492  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  4493  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  4494  04CC  086C               	movf	_temp_pre_risk+1,w
  4495  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  4496  04CE  1303               	bcf	3,6	;RP1=0, select bank1
  4497  04CF  0268               	subwf	(_temp_risk+1)^(0+128),w
  4498  04D0  1D03               	skipz
  4499  04D1  2CD8               	goto	u8155
  4500  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  4501  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  4502  04D4  086B               	movf	_temp_pre_risk,w
  4503  04D5  1683               	bsf	3,5	;RP0=1, select bank1
  4504  04D6  1303               	bcf	3,6	;RP1=0, select bank1
  4505  04D7  0267               	subwf	_temp_risk^(0+128),w
  4506  04D8                     u8155:	
  4507  04D8  1C03               	btfss	3,0
  4508  04D9  2E08               	goto	L6
  4509                           
  4510                           ;teris_16f886.c: 1095: else if(temp_risk == temp_pre_risk)
  4511                           
  4512                           ;teris_16f886.c: 1094: }
  4513                           
  4514                           ;teris_16f886.c: 1093: temp_pre_x = temp_x;
  4515                           
  4516                           ;teris_16f886.c: 1092: tem_pre_sub_index = tem_sub_index;
  4517                           
  4518                           ;teris_16f886.c: 1091: temp_pre_hole = temp_hole;
  4519                           
  4520                           ;teris_16f886.c: 1090: temp_pre_high = temp_high;
  4521                           
  4522                           ;teris_16f886.c: 1089: temp_pre_risk = temp_risk;
  4523                           
  4524                           ;teris_16f886.c: 1088: temp_pre_count = temp_count;
  4525                           
  4526                           ;teris_16f886.c: 1086: {
  4527                           ;teris_16f886.c: 1087: debug_int2(0, "risk: (%d) < (%d)", temp_risk, temp_pre_risk);
  4528  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  4529  04DB  086C               	movf	_temp_pre_risk+1,w
  4530  04DC  1683               	bsf	3,5	;RP0=1, select bank1
  4531  04DD  1303               	bcf	3,6	;RP1=0, select bank1
  4532  04DE  0668               	xorwf	(_temp_risk+1)^(0+128),w
  4533  04DF  1D03               	skipz
  4534  04E0  2CE7               	goto	u8165
  4535  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  4536  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  4537  04E3  086B               	movf	_temp_pre_risk,w
  4538  04E4  1683               	bsf	3,5	;RP0=1, select bank1
  4539  04E5  1303               	bcf	3,6	;RP1=0, select bank1
  4540  04E6  0667               	xorwf	_temp_risk^(0+128),w
  4541  04E7                     u8165:	
  4542  04E7  1D03               	skipz
  4543  04E8  2E5A               	goto	l470
  4544                           
  4545                           ;teris_16f886.c: 1096: {
  4546                           ;teris_16f886.c: 1097: debug_int2(0, "risk: (%d) == (%d)", temp_risk, temp_pre_risk);
  4547  04E9  30B8               	movlw	low (STR_68| (0+32768))
  4548  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  4549  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  4550  04EC  00BF               	movwf	debug_int2@f
  4551  04ED  308B               	movlw	high (STR_68| (0+32768))
  4552  04EE  00C0               	movwf	debug_int2@f+1
  4553  04EF  1683               	bsf	3,5	;RP0=1, select bank1
  4554  04F0  1303               	bcf	3,6	;RP1=0, select bank1
  4555  04F1  0868               	movf	(_temp_risk+1)^(0+128),w
  4556  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  4557  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  4558  04F4  00C2               	movwf	debug_int2@i1+1
  4559  04F5  1683               	bsf	3,5	;RP0=1, select bank1
  4560  04F6  1303               	bcf	3,6	;RP1=0, select bank1
  4561  04F7  0867               	movf	_temp_risk^(0+128),w
  4562  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  4563  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  4564  04FA  00C1               	movwf	debug_int2@i1
  4565  04FB  086C               	movf	_temp_pre_risk+1,w
  4566  04FC  00C4               	movwf	debug_int2@i2+1
  4567  04FD  086B               	movf	_temp_pre_risk,w
  4568  04FE  00C3               	movwf	debug_int2@i2
  4569  04FF  3000               	movlw	0
  4570  0500  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4571                           
  4572                           ;teris_16f886.c: 1098: if(temp_high < temp_pre_high)
  4573  0505  1683               	bsf	3,5	;RP0=1, select bank1
  4574  0506  1303               	bcf	3,6	;RP1=0, select bank1
  4575  0507  086E               	movf	_temp_pre_high^(0+128),w
  4576  0508  026A               	subwf	_temp_high^(0+128),w
  4577  0509  1C03               	btfss	3,0
  4578  050A  2D70               	goto	L8
  4579                           
  4580                           ;teris_16f886.c: 1108: else if(temp_high == temp_pre_high)
  4581                           
  4582                           ;teris_16f886.c: 1107: }
  4583                           
  4584                           ;teris_16f886.c: 1106: temp_pre_x = temp_x;
  4585                           
  4586                           ;teris_16f886.c: 1105: tem_pre_sub_index = tem_sub_index;
  4587                           
  4588                           ;teris_16f886.c: 1104: temp_pre_hole = temp_hole;
  4589                           
  4590                           ;teris_16f886.c: 1103: temp_pre_high = temp_high;
  4591                           
  4592                           ;teris_16f886.c: 1102: temp_pre_risk = temp_risk;
  4593                           
  4594                           ;teris_16f886.c: 1101: temp_pre_count = temp_count;
  4595                           
  4596                           ;teris_16f886.c: 1099: {
  4597                           ;teris_16f886.c: 1100: debug_int2(0, "high: (%d) < (%d)", temp_high, temp_pre_high);
  4598  050B  1683               	bsf	3,5	;RP0=1, select bank1
  4599  050C  1303               	bcf	3,6	;RP1=0, select bank1
  4600  050D  086A               	movf	_temp_high^(0+128),w
  4601  050E  066E               	xorwf	_temp_pre_high^(0+128),w
  4602  050F  1D03               	skipz
  4603  0510  2E5A               	goto	l470
  4604                           
  4605                           ;teris_16f886.c: 1109: {
  4606                           ;teris_16f886.c: 1110: debug_int2(0, "high: (%d) == (%d)", temp_high, temp_pre_high);
  4607  0511  30A5               	movlw	low (STR_70| (0+32768))
  4608  0512  1283               	bcf	3,5	;RP0=0, select bank0
  4609  0513  1303               	bcf	3,6	;RP1=0, select bank0
  4610  0514  00BF               	movwf	debug_int2@f
  4611  0515  308B               	movlw	high (STR_70| (0+32768))
  4612  0516  00C0               	movwf	debug_int2@f+1
  4613  0517  1683               	bsf	3,5	;RP0=1, select bank1
  4614  0518  1303               	bcf	3,6	;RP1=0, select bank1
  4615  0519  086A               	movf	_temp_high^(0+128),w
  4616  051A  1283               	bcf	3,5	;RP0=0, select bank0
  4617  051B  1303               	bcf	3,6	;RP1=0, select bank0
  4618  051C  00D1               	movwf	??_find_best_solution
  4619  051D  01D2               	clrf	??_find_best_solution+1
  4620  051E  0851               	movf	??_find_best_solution,w
  4621  051F  00C1               	movwf	debug_int2@i1
  4622  0520  0852               	movf	??_find_best_solution+1,w
  4623  0521  00C2               	movwf	debug_int2@i1+1
  4624  0522  1683               	bsf	3,5	;RP0=1, select bank1
  4625  0523  1303               	bcf	3,6	;RP1=0, select bank1
  4626  0524  086E               	movf	_temp_pre_high^(0+128),w
  4627  0525  1283               	bcf	3,5	;RP0=0, select bank0
  4628  0526  1303               	bcf	3,6	;RP1=0, select bank0
  4629  0527  00D3               	movwf	??_find_best_solution+2
  4630  0528  01D4               	clrf	??_find_best_solution+3
  4631  0529  0853               	movf	??_find_best_solution+2,w
  4632  052A  00C3               	movwf	debug_int2@i2
  4633  052B  0854               	movf	??_find_best_solution+3,w
  4634  052C  00C4               	movwf	debug_int2@i2+1
  4635  052D  3000               	movlw	0
  4636  052E  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4637                           
  4638                           ;teris_16f886.c: 1111: if(temp_hole < temp_pre_hole)
  4639  0533  1683               	bsf	3,5	;RP0=1, select bank1
  4640  0534  1303               	bcf	3,6	;RP1=0, select bank1
  4641  0535  086F               	movf	_temp_pre_hole^(0+128),w
  4642  0536  026B               	subwf	_temp_hole^(0+128),w
  4643  0537  1803               	skipnc
  4644  0538  2E5A               	goto	l470
  4645  0539  2DB3               	goto	L7
  4646  053A                     l5567:	
  4647                           ;teris_16f886.c: 1120: }
  4648                           ;teris_16f886.c: 1122: }
  4649                           ;teris_16f886.c: 1124: }
  4650                           ;teris_16f886.c: 1125: }
  4651                           
  4652                           ;teris_16f886.c: 1119: temp_pre_x = temp_x;
  4653                           
  4654                           ;teris_16f886.c: 1118: tem_pre_sub_index = tem_sub_index;
  4655                           
  4656                           ;teris_16f886.c: 1117: temp_pre_hole = temp_hole;
  4657                           
  4658                           ;teris_16f886.c: 1116: temp_pre_high = temp_high;
  4659                           
  4660                           ;teris_16f886.c: 1115: temp_pre_risk = temp_risk;
  4661                           
  4662                           ;teris_16f886.c: 1114: temp_pre_count = temp_count;
  4663                           
  4664                           ;teris_16f886.c: 1112: {
  4665                           ;teris_16f886.c: 1113: debug_int2(0, "hole: (%d) < (%d)", temp_hole, temp_pre_hole);
  4666                           
  4667                           
  4668                           ;teris_16f886.c: 1126: else
  4669                           ;teris_16f886.c: 1127: {
  4670                           ;teris_16f886.c: 1128: debug_int1(0, "WARNING height > (%d)", 8/2 + 1);
  4671  053A  30D8               	movlw	low (STR_72| (0+32768))
  4672  053B  00BF               	movwf	debug_int1@f
  4673  053C  308A               	movlw	high (STR_72| (0+32768))
  4674  053D  00C0               	movwf	debug_int1@f+1
  4675  053E  3005               	movlw	5
  4676  053F  00C1               	movwf	debug_int1@i
  4677  0540  3000               	movlw	0
  4678  0541  00C2               	movwf	debug_int1@i+1
  4679  0542  3000               	movlw	0
  4680  0543  160A  118A  2003  120A  118A  	fcall	_debug_int1
  4681                           
  4682                           ;teris_16f886.c: 1129: debug_int2(0, "high: (%d), (%d)", temp_high, temp_pre_high);
  4683  0548  3082               	movlw	low (STR_73| (0+32768))
  4684  0549  1283               	bcf	3,5	;RP0=0, select bank0
  4685  054A  1303               	bcf	3,6	;RP1=0, select bank0
  4686  054B  00BF               	movwf	debug_int2@f
  4687  054C  308C               	movlw	high (STR_73| (0+32768))
  4688  054D  00C0               	movwf	debug_int2@f+1
  4689  054E  1683               	bsf	3,5	;RP0=1, select bank1
  4690  054F  1303               	bcf	3,6	;RP1=0, select bank1
  4691  0550  086A               	movf	_temp_high^(0+128),w
  4692  0551  1283               	bcf	3,5	;RP0=0, select bank0
  4693  0552  1303               	bcf	3,6	;RP1=0, select bank0
  4694  0553  00D1               	movwf	??_find_best_solution
  4695  0554  01D2               	clrf	??_find_best_solution+1
  4696  0555  0851               	movf	??_find_best_solution,w
  4697  0556  00C1               	movwf	debug_int2@i1
  4698  0557  0852               	movf	??_find_best_solution+1,w
  4699  0558  00C2               	movwf	debug_int2@i1+1
  4700  0559  1683               	bsf	3,5	;RP0=1, select bank1
  4701  055A  1303               	bcf	3,6	;RP1=0, select bank1
  4702  055B  086E               	movf	_temp_pre_high^(0+128),w
  4703  055C  1283               	bcf	3,5	;RP0=0, select bank0
  4704  055D  1303               	bcf	3,6	;RP1=0, select bank0
  4705  055E  00D3               	movwf	??_find_best_solution+2
  4706  055F  01D4               	clrf	??_find_best_solution+3
  4707  0560  0853               	movf	??_find_best_solution+2,w
  4708  0561  00C3               	movwf	debug_int2@i2
  4709  0562  0854               	movf	??_find_best_solution+3,w
  4710  0563  00C4               	movwf	debug_int2@i2+1
  4711  0564  3000               	movlw	0
  4712  0565  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4713                           
  4714                           ;teris_16f886.c: 1130: if(temp_high < temp_pre_high)
  4715  056A  1683               	bsf	3,5	;RP0=1, select bank1
  4716  056B  1303               	bcf	3,6	;RP1=0, select bank1
  4717  056C  086E               	movf	_temp_pre_high^(0+128),w
  4718  056D  026A               	subwf	_temp_high^(0+128),w
  4719  056E  1803               	skipnc
  4720  056F  2D85               	goto	l5585
  4721  0570                     L8:	
  4722                           
  4723                           ;teris_16f886.c: 1131: {
  4724                           ;teris_16f886.c: 1132: debug_int2(0, "high: (%d) < (%d)", temp_high, temp_pre_high);
  4725  0570  303C               	movlw	low (STR_69| (0+32768))
  4726  0571  1283               	bcf	3,5	;RP0=0, select bank0
  4727  0572  1303               	bcf	3,6	;RP1=0, select bank0
  4728  0573  00BF               	movwf	debug_int2@f
  4729  0574  308C               	movlw	high (STR_69| (0+32768))
  4730  0575  00C0               	movwf	debug_int2@f+1
  4731  0576  1683               	bsf	3,5	;RP0=1, select bank1
  4732  0577  1303               	bcf	3,6	;RP1=0, select bank1
  4733  0578  086A               	movf	_temp_high^(0+128),w
  4734  0579  1283               	bcf	3,5	;RP0=0, select bank0
  4735  057A  1303               	bcf	3,6	;RP1=0, select bank0
  4736  057B  00D1               	movwf	??_find_best_solution
  4737  057C  01D2               	clrf	??_find_best_solution+1
  4738  057D  0851               	movf	??_find_best_solution,w
  4739  057E  00C1               	movwf	debug_int2@i1
  4740  057F  0852               	movf	??_find_best_solution+1,w
  4741  0580  00C2               	movwf	debug_int2@i1+1
  4742  0581  1683               	bsf	3,5	;RP0=1, select bank1
  4743  0582  1303               	bcf	3,6	;RP1=0, select bank1
  4744  0583  086E               	movf	_temp_pre_high^(0+128),w
  4745  0584  2DC7               	goto	L5
  4746  0585                     l5585:	
  4747                           ;teris_16f886.c: 1139: }
  4748                           
  4749                           ;teris_16f886.c: 1138: temp_pre_x = temp_x;
  4750                           
  4751                           ;teris_16f886.c: 1137: tem_pre_sub_index = tem_sub_index;
  4752                           
  4753                           ;teris_16f886.c: 1136: temp_pre_hole = temp_hole;
  4754                           
  4755                           ;teris_16f886.c: 1135: temp_pre_high = temp_high;
  4756                           
  4757                           ;teris_16f886.c: 1134: temp_pre_risk = temp_risk;
  4758                           
  4759                           ;teris_16f886.c: 1133: temp_pre_count = temp_count;
  4760                           
  4761                           
  4762                           ;teris_16f886.c: 1140: else if(temp_high == temp_pre_high)
  4763  0585  1683               	bsf	3,5	;RP0=1, select bank1
  4764  0586  1303               	bcf	3,6	;RP1=0, select bank1
  4765  0587  086A               	movf	_temp_high^(0+128),w
  4766  0588  066E               	xorwf	_temp_pre_high^(0+128),w
  4767  0589  1D03               	skipz
  4768  058A  2E5A               	goto	l470
  4769                           
  4770                           ;teris_16f886.c: 1141: {
  4771                           ;teris_16f886.c: 1142: debug_int2(0, "high: (%d) == (%d)", temp_high, temp_pre_high);
  4772  058B  30A5               	movlw	low (STR_70| (0+32768))
  4773  058C  1283               	bcf	3,5	;RP0=0, select bank0
  4774  058D  1303               	bcf	3,6	;RP1=0, select bank0
  4775  058E  00BF               	movwf	debug_int2@f
  4776  058F  308B               	movlw	high (STR_70| (0+32768))
  4777  0590  00C0               	movwf	debug_int2@f+1
  4778  0591  1683               	bsf	3,5	;RP0=1, select bank1
  4779  0592  1303               	bcf	3,6	;RP1=0, select bank1
  4780  0593  086A               	movf	_temp_high^(0+128),w
  4781  0594  1283               	bcf	3,5	;RP0=0, select bank0
  4782  0595  1303               	bcf	3,6	;RP1=0, select bank0
  4783  0596  00D1               	movwf	??_find_best_solution
  4784  0597  01D2               	clrf	??_find_best_solution+1
  4785  0598  0851               	movf	??_find_best_solution,w
  4786  0599  00C1               	movwf	debug_int2@i1
  4787  059A  0852               	movf	??_find_best_solution+1,w
  4788  059B  00C2               	movwf	debug_int2@i1+1
  4789  059C  1683               	bsf	3,5	;RP0=1, select bank1
  4790  059D  1303               	bcf	3,6	;RP1=0, select bank1
  4791  059E  086E               	movf	_temp_pre_high^(0+128),w
  4792  059F  1283               	bcf	3,5	;RP0=0, select bank0
  4793  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  4794  05A1  00D3               	movwf	??_find_best_solution+2
  4795  05A2  01D4               	clrf	??_find_best_solution+3
  4796  05A3  0853               	movf	??_find_best_solution+2,w
  4797  05A4  00C3               	movwf	debug_int2@i2
  4798  05A5  0854               	movf	??_find_best_solution+3,w
  4799  05A6  00C4               	movwf	debug_int2@i2+1
  4800  05A7  3000               	movlw	0
  4801  05A8  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4802                           
  4803                           ;teris_16f886.c: 1143: if(temp_hole < temp_pre_hole)
  4804  05AD  1683               	bsf	3,5	;RP0=1, select bank1
  4805  05AE  1303               	bcf	3,6	;RP1=0, select bank1
  4806  05AF  086F               	movf	_temp_pre_hole^(0+128),w
  4807  05B0  026B               	subwf	_temp_hole^(0+128),w
  4808  05B1  1803               	skipnc
  4809  05B2  2DD0               	goto	l5605
  4810  05B3                     L7:	
  4811                           
  4812                           ;teris_16f886.c: 1144: {
  4813                           ;teris_16f886.c: 1145: debug_int2(0, "hole: (%d) < (%d)", temp_hole, temp_pre_hole);
  4814  05B3  302A               	movlw	low (STR_71| (0+32768))
  4815  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  4816  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  4817  05B6  00BF               	movwf	debug_int2@f
  4818  05B7  308C               	movlw	high (STR_71| (0+32768))
  4819  05B8  00C0               	movwf	debug_int2@f+1
  4820  05B9  1683               	bsf	3,5	;RP0=1, select bank1
  4821  05BA  1303               	bcf	3,6	;RP1=0, select bank1
  4822  05BB  086B               	movf	_temp_hole^(0+128),w
  4823  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  4824  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  4825  05BE  00D1               	movwf	??_find_best_solution
  4826  05BF  01D2               	clrf	??_find_best_solution+1
  4827  05C0  0851               	movf	??_find_best_solution,w
  4828  05C1  00C1               	movwf	debug_int2@i1
  4829  05C2  0852               	movf	??_find_best_solution+1,w
  4830  05C3  00C2               	movwf	debug_int2@i1+1
  4831  05C4  1683               	bsf	3,5	;RP0=1, select bank1
  4832  05C5  1303               	bcf	3,6	;RP1=0, select bank1
  4833  05C6  086F               	movf	_temp_pre_hole^(0+128),w
  4834  05C7                     L5:	
  4835  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  4836  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  4837  05C9  00D3               	movwf	??_find_best_solution+2
  4838  05CA  01D4               	clrf	??_find_best_solution+3
  4839  05CB  0853               	movf	??_find_best_solution+2,w
  4840  05CC  00C3               	movwf	debug_int2@i2
  4841  05CD  0854               	movf	??_find_best_solution+3,w
  4842  05CE  00C4               	movwf	debug_int2@i2+1
  4843  05CF  2E1E               	goto	L2
  4844  05D0                     l5605:	
  4845                           ;teris_16f886.c: 1152: }
  4846                           
  4847                           ;teris_16f886.c: 1151: temp_pre_x = temp_x;
  4848                           
  4849                           ;teris_16f886.c: 1150: tem_pre_sub_index = tem_sub_index;
  4850                           
  4851                           ;teris_16f886.c: 1149: temp_pre_hole = temp_hole;
  4852                           
  4853                           ;teris_16f886.c: 1148: temp_pre_high = temp_high;
  4854                           
  4855                           ;teris_16f886.c: 1147: temp_pre_risk = temp_risk;
  4856                           
  4857                           ;teris_16f886.c: 1146: temp_pre_count = temp_count;
  4858                           
  4859                           
  4860                           ;teris_16f886.c: 1153: else if(temp_hole == temp_pre_hole)
  4861  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  4862  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  4863  05D2  086B               	movf	_temp_hole^(0+128),w
  4864  05D3  066F               	xorwf	_temp_pre_hole^(0+128),w
  4865  05D4  1D03               	skipz
  4866  05D5  2E5A               	goto	l470
  4867                           
  4868                           ;teris_16f886.c: 1154: {
  4869                           ;teris_16f886.c: 1155: debug_int2(0, "hole: (%d) == (%d)", temp_hole, temp_pre_hole);
  4870  05D6  3092               	movlw	low (STR_77| (0+32768))
  4871  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  4872  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  4873  05D9  00BF               	movwf	debug_int2@f
  4874  05DA  308B               	movlw	high (STR_77| (0+32768))
  4875  05DB  00C0               	movwf	debug_int2@f+1
  4876  05DC  1683               	bsf	3,5	;RP0=1, select bank1
  4877  05DD  1303               	bcf	3,6	;RP1=0, select bank1
  4878  05DE  086B               	movf	_temp_hole^(0+128),w
  4879  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  4880  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  4881  05E1  00D1               	movwf	??_find_best_solution
  4882  05E2  01D2               	clrf	??_find_best_solution+1
  4883  05E3  0851               	movf	??_find_best_solution,w
  4884  05E4  00C1               	movwf	debug_int2@i1
  4885  05E5  0852               	movf	??_find_best_solution+1,w
  4886  05E6  00C2               	movwf	debug_int2@i1+1
  4887  05E7  1683               	bsf	3,5	;RP0=1, select bank1
  4888  05E8  1303               	bcf	3,6	;RP1=0, select bank1
  4889  05E9  086F               	movf	_temp_pre_hole^(0+128),w
  4890  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  4891  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  4892  05EC  00D3               	movwf	??_find_best_solution+2
  4893  05ED  01D4               	clrf	??_find_best_solution+3
  4894  05EE  0853               	movf	??_find_best_solution+2,w
  4895  05EF  00C3               	movwf	debug_int2@i2
  4896  05F0  0854               	movf	??_find_best_solution+3,w
  4897  05F1  00C4               	movwf	debug_int2@i2+1
  4898  05F2  3000               	movlw	0
  4899  05F3  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4900                           
  4901                           ;teris_16f886.c: 1156: if(temp_risk < temp_pre_risk)
  4902  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  4903  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  4904  05FA  086C               	movf	_temp_pre_risk+1,w
  4905  05FB  1683               	bsf	3,5	;RP0=1, select bank1
  4906  05FC  1303               	bcf	3,6	;RP1=0, select bank1
  4907  05FD  0268               	subwf	(_temp_risk+1)^(0+128),w
  4908  05FE  1D03               	skipz
  4909  05FF  2E06               	goto	u8245
  4910  0600  1283               	bcf	3,5	;RP0=0, select bank0
  4911  0601  1303               	bcf	3,6	;RP1=0, select bank0
  4912  0602  086B               	movf	_temp_pre_risk,w
  4913  0603  1683               	bsf	3,5	;RP0=1, select bank1
  4914  0604  1303               	bcf	3,6	;RP1=0, select bank1
  4915  0605  0267               	subwf	_temp_risk^(0+128),w
  4916  0606                     u8245:	
  4917  0606  1803               	skipnc
  4918  0607  2E5A               	goto	l470
  4919  0608                     L6:	
  4920                           
  4921                           ;teris_16f886.c: 1157: {
  4922                           ;teris_16f886.c: 1158: debug_int2(0, "risk: (%d) < (%d)", temp_risk, temp_pre_risk);
  4923  0608  304E               	movlw	low (STR_67| (0+32768))
  4924  0609  1283               	bcf	3,5	;RP0=0, select bank0
  4925  060A  1303               	bcf	3,6	;RP1=0, select bank0
  4926  060B  00BF               	movwf	debug_int2@f
  4927  060C  308C               	movlw	high (STR_67| (0+32768))
  4928  060D  00C0               	movwf	debug_int2@f+1
  4929  060E  1683               	bsf	3,5	;RP0=1, select bank1
  4930  060F  1303               	bcf	3,6	;RP1=0, select bank1
  4931  0610  0868               	movf	(_temp_risk+1)^(0+128),w
  4932  0611  1283               	bcf	3,5	;RP0=0, select bank0
  4933  0612  1303               	bcf	3,6	;RP1=0, select bank0
  4934  0613  00C2               	movwf	debug_int2@i1+1
  4935  0614  1683               	bsf	3,5	;RP0=1, select bank1
  4936  0615  1303               	bcf	3,6	;RP1=0, select bank1
  4937  0616  0867               	movf	_temp_risk^(0+128),w
  4938  0617  1283               	bcf	3,5	;RP0=0, select bank0
  4939  0618  1303               	bcf	3,6	;RP1=0, select bank0
  4940  0619  00C1               	movwf	debug_int2@i1
  4941  061A  086C               	movf	_temp_pre_risk+1,w
  4942  061B  00C4               	movwf	debug_int2@i2+1
  4943  061C  086B               	movf	_temp_pre_risk,w
  4944  061D  00C3               	movwf	debug_int2@i2
  4945  061E                     L2:	
  4946  061E  3000               	movlw	0
  4947  061F  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4948                           
  4949                           ;teris_16f886.c: 1159: temp_pre_count = temp_count;
  4950  0624  1683               	bsf	3,5	;RP0=1, select bank1
  4951  0625  1303               	bcf	3,6	;RP1=0, select bank1
  4952  0626  0869               	movf	_temp_count^(0+128),w
  4953  0627  1283               	bcf	3,5	;RP0=0, select bank0
  4954  0628  1303               	bcf	3,6	;RP1=0, select bank0
  4955  0629  00D1               	movwf	??_find_best_solution
  4956  062A  0851               	movf	??_find_best_solution,w
  4957  062B  1683               	bsf	3,5	;RP0=1, select bank1
  4958  062C  1303               	bcf	3,6	;RP1=0, select bank1
  4959  062D  00EC               	movwf	_temp_pre_count^(0+128)
  4960                           
  4961                           ;teris_16f886.c: 1160: temp_pre_risk = temp_risk;
  4962  062E  0868               	movf	(_temp_risk+1)^(0+128),w
  4963  062F  1283               	bcf	3,5	;RP0=0, select bank0
  4964  0630  1303               	bcf	3,6	;RP1=0, select bank0
  4965  0631  00EC               	movwf	_temp_pre_risk+1
  4966  0632  1683               	bsf	3,5	;RP0=1, select bank1
  4967  0633  1303               	bcf	3,6	;RP1=0, select bank1
  4968  0634  0867               	movf	_temp_risk^(0+128),w
  4969  0635  1283               	bcf	3,5	;RP0=0, select bank0
  4970  0636  1303               	bcf	3,6	;RP1=0, select bank0
  4971  0637  00EB               	movwf	_temp_pre_risk
  4972                           
  4973                           ;teris_16f886.c: 1161: temp_pre_high = temp_high;
  4974  0638  1683               	bsf	3,5	;RP0=1, select bank1
  4975  0639  1303               	bcf	3,6	;RP1=0, select bank1
  4976  063A  086A               	movf	_temp_high^(0+128),w
  4977  063B  1283               	bcf	3,5	;RP0=0, select bank0
  4978  063C  1303               	bcf	3,6	;RP1=0, select bank0
  4979  063D  00D1               	movwf	??_find_best_solution
  4980  063E  0851               	movf	??_find_best_solution,w
  4981  063F  1683               	bsf	3,5	;RP0=1, select bank1
  4982  0640  1303               	bcf	3,6	;RP1=0, select bank1
  4983  0641  00EE               	movwf	_temp_pre_high^(0+128)
  4984                           
  4985                           ;teris_16f886.c: 1162: temp_pre_hole = temp_hole;
  4986  0642  086B               	movf	_temp_hole^(0+128),w
  4987  0643  1283               	bcf	3,5	;RP0=0, select bank0
  4988  0644  1303               	bcf	3,6	;RP1=0, select bank0
  4989  0645  00D1               	movwf	??_find_best_solution
  4990  0646  0851               	movf	??_find_best_solution,w
  4991  0647  1683               	bsf	3,5	;RP0=1, select bank1
  4992  0648  1303               	bcf	3,6	;RP1=0, select bank1
  4993  0649  00EF               	movwf	_temp_pre_hole^(0+128)
  4994                           
  4995                           ;teris_16f886.c: 1163: tem_pre_sub_index = tem_sub_index;
  4996  064A  0865               	movf	find_best_solution@tem_sub_index^(0+128),w
  4997  064B  1283               	bcf	3,5	;RP0=0, select bank0
  4998  064C  1303               	bcf	3,6	;RP1=0, select bank0
  4999  064D  00D1               	movwf	??_find_best_solution
  5000  064E  0851               	movf	??_find_best_solution,w
  5001  064F  1683               	bsf	3,5	;RP0=1, select bank3
  5002  0650  1703               	bsf	3,6	;RP1=1, select bank3
  5003  0651  00D6               	movwf	_tem_pre_sub_index^(0+384)
  5004                           
  5005                           ;teris_16f886.c: 1164: temp_pre_x = temp_x;
  5006  0652  1683               	bsf	3,5	;RP0=1, select bank1
  5007  0653  1303               	bcf	3,6	;RP1=0, select bank1
  5008  0654  0866               	movf	find_best_solution@temp_x^(0+128),w
  5009  0655  1283               	bcf	3,5	;RP0=0, select bank0
  5010  0656  1303               	bcf	3,6	;RP1=0, select bank0
  5011  0657  00D1               	movwf	??_find_best_solution
  5012  0658  0851               	movf	??_find_best_solution,w
  5013  0659  00ED               	movwf	_temp_pre_x
  5014  065A                     l470:	
  5015                           
  5016                           ;teris_16f886.c: 1165: }
  5017                           ;teris_16f886.c: 1166: }
  5018                           ;teris_16f886.c: 1167: }
  5019                           ;teris_16f886.c: 1168: }
  5020                           ;teris_16f886.c: 1169: }
  5021                           ;teris_16f886.c: 1175: debug_line(0, "Loop");
  5022  065A  30B5               	movlw	low (STR_79| (0+32768))
  5023  065B  00F3               	movwf	debug_line@str
  5024  065C  308D               	movlw	high (STR_79| (0+32768))
  5025  065D  00F4               	movwf	debug_line@str+1
  5026  065E  3000               	movlw	0
  5027  065F  160A  158A  20AA  120A  118A  	fcall	_debug_line
  5028                           
  5029                           ;teris_16f886.c: 1176: debug_int1(0, "sub_index = %d", tem_pre_sub_index);
  5030  0664  3069               	movlw	low ((STR_14+12)| (0+32768))
  5031  0665  1283               	bcf	3,5	;RP0=0, select bank0
  5032  0666  1303               	bcf	3,6	;RP1=0, select bank0
  5033  0667  00BF               	movwf	debug_int1@f
  5034  0668  308A               	movlw	high ((STR_14+12)| (0+32768))
  5035  0669  00C0               	movwf	debug_int1@f+1
  5036  066A  1683               	bsf	3,5	;RP0=1, select bank3
  5037  066B  1703               	bsf	3,6	;RP1=1, select bank3
  5038  066C  0856               	movf	_tem_pre_sub_index^(0+384),w
  5039  066D  1283               	bcf	3,5	;RP0=0, select bank0
  5040  066E  1303               	bcf	3,6	;RP1=0, select bank0
  5041  066F  00C1               	movwf	debug_int1@i
  5042  0670  01C2               	clrf	debug_int1@i+1
  5043  0671  1BC1               	btfsc	debug_int1@i,7
  5044  0672  03C2               	decf	debug_int1@i+1,f
  5045  0673  3000               	movlw	0
  5046  0674  160A  118A  2003  120A  118A  	fcall	_debug_int1
  5047                           
  5048                           ;teris_16f886.c: 1177: debug_int1(0, "temp_pre_x = %d", temp_pre_x);
  5049  0679  30B4               	movlw	low (STR_81| (0+32768))
  5050  067A  1283               	bcf	3,5	;RP0=0, select bank0
  5051  067B  1303               	bcf	3,6	;RP1=0, select bank0
  5052  067C  00BF               	movwf	debug_int1@f
  5053  067D  308C               	movlw	high (STR_81| (0+32768))
  5054  067E  00C0               	movwf	debug_int1@f+1
  5055  067F  086D               	movf	_temp_pre_x,w
  5056  0680  00C1               	movwf	debug_int1@i
  5057  0681  01C2               	clrf	debug_int1@i+1
  5058  0682  1BC1               	btfsc	debug_int1@i,7
  5059  0683  03C2               	decf	debug_int1@i+1,f
  5060  0684  3000               	movlw	0
  5061  0685  160A  118A  2003  120A  118A  	fcall	_debug_int1
  5062                           
  5063                           ;teris_16f886.c: 1178: debug_int1(0, "temp_pre_count = %d", temp_pre_count);
  5064  068A  307E               	movlw	low (STR_82| (0+32768))
  5065  068B  1283               	bcf	3,5	;RP0=0, select bank0
  5066  068C  1303               	bcf	3,6	;RP1=0, select bank0
  5067  068D  00BF               	movwf	debug_int1@f
  5068  068E  308B               	movlw	high (STR_82| (0+32768))
  5069  068F  00C0               	movwf	debug_int1@f+1
  5070  0690  1683               	bsf	3,5	;RP0=1, select bank1
  5071  0691  1303               	bcf	3,6	;RP1=0, select bank1
  5072  0692  086C               	movf	_temp_pre_count^(0+128),w
  5073  0693  1283               	bcf	3,5	;RP0=0, select bank0
  5074  0694  1303               	bcf	3,6	;RP1=0, select bank0
  5075  0695  00D1               	movwf	??_find_best_solution
  5076  0696  01D2               	clrf	??_find_best_solution+1
  5077  0697  0851               	movf	??_find_best_solution,w
  5078  0698  00C1               	movwf	debug_int1@i
  5079  0699  0852               	movf	??_find_best_solution+1,w
  5080  069A  00C2               	movwf	debug_int1@i+1
  5081  069B  3000               	movlw	0
  5082  069C  160A  118A  2003  120A  118A  	fcall	_debug_int1
  5083                           
  5084                           ;teris_16f886.c: 1179: debug_int1(0, "temp_pre_risk = %d", temp_pre_risk);
  5085  06A1  3017               	movlw	low (STR_83| (0+32768))
  5086  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  5087  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  5088  06A4  00BF               	movwf	debug_int1@f
  5089  06A5  308C               	movlw	high (STR_83| (0+32768))
  5090  06A6  00C0               	movwf	debug_int1@f+1
  5091  06A7  086C               	movf	_temp_pre_risk+1,w
  5092  06A8  00C2               	movwf	debug_int1@i+1
  5093  06A9  086B               	movf	_temp_pre_risk,w
  5094  06AA  00C1               	movwf	debug_int1@i
  5095  06AB  3000               	movlw	0
  5096  06AC  160A  118A  2003  120A  118A  	fcall	_debug_int1
  5097                           
  5098                           ;teris_16f886.c: 1180: debug_int1(0, "temp_pre_high = %d", temp_pre_high);
  5099  06B1  3004               	movlw	low (STR_84| (0+32768))
  5100  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  5101  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  5102  06B4  00BF               	movwf	debug_int1@f
  5103  06B5  308C               	movlw	high (STR_84| (0+32768))
  5104  06B6  00C0               	movwf	debug_int1@f+1
  5105  06B7  1683               	bsf	3,5	;RP0=1, select bank1
  5106  06B8  1303               	bcf	3,6	;RP1=0, select bank1
  5107  06B9  086E               	movf	_temp_pre_high^(0+128),w
  5108  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  5109  06BB  1303               	bcf	3,6	;RP1=0, select bank0
  5110  06BC  00D1               	movwf	??_find_best_solution
  5111  06BD  01D2               	clrf	??_find_best_solution+1
  5112  06BE  0851               	movf	??_find_best_solution,w
  5113  06BF  00C1               	movwf	debug_int1@i
  5114  06C0  0852               	movf	??_find_best_solution+1,w
  5115  06C1  00C2               	movwf	debug_int1@i+1
  5116  06C2  3000               	movlw	0
  5117  06C3  160A  118A  2003  120A  118A  	fcall	_debug_int1
  5118                           
  5119                           ;teris_16f886.c: 1181: debug_int1(0, "temp_pre_hole = %d", temp_pre_hole);
  5120  06C8  30F1               	movlw	low (STR_85| (0+32768))
  5121  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  5122  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  5123  06CB  00BF               	movwf	debug_int1@f
  5124  06CC  308B               	movlw	high (STR_85| (0+32768))
  5125  06CD  00C0               	movwf	debug_int1@f+1
  5126  06CE  1683               	bsf	3,5	;RP0=1, select bank1
  5127  06CF  1303               	bcf	3,6	;RP1=0, select bank1
  5128  06D0  086F               	movf	_temp_pre_hole^(0+128),w
  5129  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  5130  06D2  1303               	bcf	3,6	;RP1=0, select bank0
  5131  06D3  00D1               	movwf	??_find_best_solution
  5132  06D4  01D2               	clrf	??_find_best_solution+1
  5133  06D5  0851               	movf	??_find_best_solution,w
  5134  06D6  00C1               	movwf	debug_int1@i
  5135  06D7  0852               	movf	??_find_best_solution+1,w
  5136  06D8  00C2               	movwf	debug_int1@i+1
  5137  06D9  3000               	movlw	0
  5138  06DA  160A  118A  2003  120A  118A  	fcall	_debug_int1
  5139  06DF                     l5625:	
  5140  06DF  3001               	movlw	1
  5141  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  5142  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  5143  06E2  00D1               	movwf	??_find_best_solution
  5144  06E3  0851               	movf	??_find_best_solution,w
  5145  06E4  1683               	bsf	3,5	;RP0=1, select bank1
  5146  06E5  1303               	bcf	3,6	;RP1=0, select bank1
  5147  06E6  07E6               	addwf	find_best_solution@temp_x^(0+128),f
  5148  06E7  2B6D               	goto	l5627
  5149  06E8                     l5629:	
  5150  06E8  3001               	movlw	1
  5151  06E9  00D1               	movwf	??_find_best_solution
  5152  06EA  0851               	movf	??_find_best_solution,w
  5153  06EB  1683               	bsf	3,5	;RP0=1, select bank1
  5154  06EC  1303               	bcf	3,6	;RP1=0, select bank1
  5155  06ED  07E5               	addwf	find_best_solution@tem_sub_index^(0+128),f
  5156  06EE  2ADE               	goto	l5631
  5157  06EF                     l5633:	
  5158                           
  5159                           ;teris_16f886.c: 1183: }
  5160                           ;teris_16f886.c: 1184: }
  5161                           ;teris_16f886.c: 1185: if(res == 1)
  5162  06EF  0322               	decf	find_best_solution@res^(0+128),w
  5163  06F0  1D03               	btfss	3,2
  5164  06F1  2FAE               	goto	l5655
  5165                           
  5166                           ;teris_16f886.c: 1186: {
  5167                           ;teris_16f886.c: 1187: g_char_info[g_char_info_index].cur_index = tem_pre_sub_index;
  5168  06F2  1683               	bsf	3,5	;RP0=1, select bank3
  5169  06F3  1703               	bsf	3,6	;RP1=1, select bank3
  5170  06F4  0856               	movf	_tem_pre_sub_index^(0+384),w
  5171  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  5172  06F6  1303               	bcf	3,6	;RP1=0, select bank0
  5173  06F7  00D1               	movwf	??_find_best_solution
  5174  06F8  3003               	movlw	3
  5175  06F9  00D2               	movwf	??_find_best_solution+1
  5176  06FA  0852               	movf	??_find_best_solution+1,w
  5177  06FB  00F0               	movwf	___bmul@multiplicand
  5178  06FC  0869               	movf	_g_char_info_index,w
  5179  06FD  160A  158A  2050  120A  118A  	fcall	___bmul
  5180  0702  3E01               	addlw	1
  5181  0703  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5182  0704  0084               	movwf	4
  5183  0705  1283               	bcf	3,5	;RP0=0, select bank0
  5184  0706  1303               	bcf	3,6	;RP1=0, select bank0
  5185  0707  0851               	movf	??_find_best_solution,w
  5186  0708  1783               	bsf	3,7	;select IRP bank3
  5187  0709  0080               	movwf	0
  5188                           
  5189                           ;teris_16f886.c: 1188: cur_x = temp_pre_x;
  5190  070A  086D               	movf	_temp_pre_x,w
  5191  070B  00D1               	movwf	??_find_best_solution
  5192  070C  0851               	movf	??_find_best_solution,w
  5193  070D  1683               	bsf	3,5	;RP0=1, select bank1
  5194  070E  1303               	bcf	3,6	;RP1=0, select bank1
  5195  070F  00ED               	movwf	_cur_x^(0+128)
  5196                           
  5197                           ;teris_16f886.c: 1189: printf_debug_cur_MATRIX44(0, "Chosen", cur_x, cur_y);
  5198  0710  30A8               	movlw	low (STR_86| (0+32768))
  5199  0711  1283               	bcf	3,5	;RP0=0, select bank0
  5200  0712  1303               	bcf	3,6	;RP1=0, select bank0
  5201  0713  00AC               	movwf	printf_debug_cur_MATRIX44@lable
  5202  0714  308D               	movlw	high (STR_86| (0+32768))
  5203  0715  00AD               	movwf	printf_debug_cur_MATRIX44@lable+1
  5204  0716  1683               	bsf	3,5	;RP0=1, select bank1
  5205  0717  1303               	bcf	3,6	;RP1=0, select bank1
  5206  0718  086D               	movf	_cur_x^(0+128),w
  5207  0719  1283               	bcf	3,5	;RP0=0, select bank0
  5208  071A  1303               	bcf	3,6	;RP1=0, select bank0
  5209  071B  00D1               	movwf	??_find_best_solution
  5210  071C  0851               	movf	??_find_best_solution,w
  5211  071D  00AE               	movwf	printf_debug_cur_MATRIX44@x
  5212  071E  0868               	movf	_cur_y,w
  5213  071F  00D2               	movwf	??_find_best_solution+1
  5214  0720  0852               	movf	??_find_best_solution+1,w
  5215  0721  00AF               	movwf	printf_debug_cur_MATRIX44@y
  5216  0722  3000               	movlw	0
  5217  0723  160A  158A  2696  120A  118A  	fcall	_printf_debug_cur_MATRIX44
  5218                           
  5219                           ;teris_16f886.c: 1195: debug_line(0, "Chosen");
  5220  0728  30A8               	movlw	low (STR_86| (0+32768))
  5221  0729  00F3               	movwf	debug_line@str
  5222  072A  308D               	movlw	high (STR_86| (0+32768))
  5223  072B  00F4               	movwf	debug_line@str+1
  5224  072C  3000               	movlw	0
  5225  072D  160A  158A  20AA  120A  118A  	fcall	_debug_line
  5226                           
  5227                           ;teris_16f886.c: 1196: debug_int1(0, "sub_index = %d", tem_pre_sub_index);
  5228  0732  3069               	movlw	low ((STR_14+12)| (0+32768))
  5229  0733  1283               	bcf	3,5	;RP0=0, select bank0
  5230  0734  1303               	bcf	3,6	;RP1=0, select bank0
  5231  0735  00BF               	movwf	debug_int1@f
  5232  0736  308A               	movlw	high ((STR_14+12)| (0+32768))
  5233  0737  00C0               	movwf	debug_int1@f+1
  5234  0738  1683               	bsf	3,5	;RP0=1, select bank3
  5235  0739  1703               	bsf	3,6	;RP1=1, select bank3
  5236  073A  0856               	movf	_tem_pre_sub_index^(0+384),w
  5237  073B  1283               	bcf	3,5	;RP0=0, select bank0
  5238  073C  1303               	bcf	3,6	;RP1=0, select bank0
  5239  073D  00C1               	movwf	debug_int1@i
  5240  073E  01C2               	clrf	debug_int1@i+1
  5241  073F  1BC1               	btfsc	debug_int1@i,7
  5242  0740  03C2               	decf	debug_int1@i+1,f
  5243  0741  3000               	movlw	0
  5244  0742  160A  118A  2003  120A  118A  	fcall	_debug_int1
  5245                           
  5246                           ;teris_16f886.c: 1197: debug_int1(0, "temp_pre_x = %d", temp_pre_x);
  5247  0747  30B4               	movlw	low (STR_81| (0+32768))
  5248  0748  1283               	bcf	3,5	;RP0=0, select bank0
  5249  0749  1303               	bcf	3,6	;RP1=0, select bank0
  5250  074A  00BF               	movwf	debug_int1@f
  5251  074B  308C               	movlw	high (STR_81| (0+32768))
  5252  074C  00C0               	movwf	debug_int1@f+1
  5253  074D  086D               	movf	_temp_pre_x,w
  5254  074E  00C1               	movwf	debug_int1@i
  5255  074F  01C2               	clrf	debug_int1@i+1
  5256  0750  1BC1               	btfsc	debug_int1@i,7
  5257  0751  03C2               	decf	debug_int1@i+1,f
  5258  0752  3000               	movlw	0
  5259  0753  160A  118A  2003  120A  118A  	fcall	_debug_int1
  5260                           
  5261                           ;teris_16f886.c: 1198: debug_int1(0, "temp_pre_count = %d", temp_pre_count);
  5262  0758  307E               	movlw	low (STR_82| (0+32768))
  5263  0759  1283               	bcf	3,5	;RP0=0, select bank0
  5264  075A  1303               	bcf	3,6	;RP1=0, select bank0
  5265  075B  00BF               	movwf	debug_int1@f
  5266  075C  308B               	movlw	high (STR_82| (0+32768))
  5267  075D  00C0               	movwf	debug_int1@f+1
  5268  075E  1683               	bsf	3,5	;RP0=1, select bank1
  5269  075F  1303               	bcf	3,6	;RP1=0, select bank1
  5270  0760  086C               	movf	_temp_pre_count^(0+128),w
  5271  0761  1283               	bcf	3,5	;RP0=0, select bank0
  5272  0762  1303               	bcf	3,6	;RP1=0, select bank0
  5273  0763  00D1               	movwf	??_find_best_solution
  5274  0764  01D2               	clrf	??_find_best_solution+1
  5275  0765  0851               	movf	??_find_best_solution,w
  5276  0766  00C1               	movwf	debug_int1@i
  5277  0767  0852               	movf	??_find_best_solution+1,w
  5278  0768  00C2               	movwf	debug_int1@i+1
  5279  0769  3000               	movlw	0
  5280  076A  160A  118A  2003  120A  118A  	fcall	_debug_int1
  5281                           
  5282                           ;teris_16f886.c: 1199: debug_int1(0, "temp_pre_risk = %d", temp_pre_risk);
  5283  076F  3017               	movlw	low (STR_83| (0+32768))
  5284  0770  1283               	bcf	3,5	;RP0=0, select bank0
  5285  0771  1303               	bcf	3,6	;RP1=0, select bank0
  5286  0772  00BF               	movwf	debug_int1@f
  5287  0773  308C               	movlw	high (STR_83| (0+32768))
  5288  0774  00C0               	movwf	debug_int1@f+1
  5289  0775  086C               	movf	_temp_pre_risk+1,w
  5290  0776  00C2               	movwf	debug_int1@i+1
  5291  0777  086B               	movf	_temp_pre_risk,w
  5292  0778  00C1               	movwf	debug_int1@i
  5293  0779  3000               	movlw	0
  5294  077A  160A  118A  2003  120A  118A  	fcall	_debug_int1
  5295                           
  5296                           ;teris_16f886.c: 1200: debug_int1(0, "temp_pre_high = %d", temp_pre_high);
  5297  077F  3004               	movlw	low (STR_84| (0+32768))
  5298  0780  1283               	bcf	3,5	;RP0=0, select bank0
  5299  0781  1303               	bcf	3,6	;RP1=0, select bank0
  5300  0782  00BF               	movwf	debug_int1@f
  5301  0783  308C               	movlw	high (STR_84| (0+32768))
  5302  0784  00C0               	movwf	debug_int1@f+1
  5303  0785  1683               	bsf	3,5	;RP0=1, select bank1
  5304  0786  1303               	bcf	3,6	;RP1=0, select bank1
  5305  0787  086E               	movf	_temp_pre_high^(0+128),w
  5306  0788  1283               	bcf	3,5	;RP0=0, select bank0
  5307  0789  1303               	bcf	3,6	;RP1=0, select bank0
  5308  078A  00D1               	movwf	??_find_best_solution
  5309  078B  01D2               	clrf	??_find_best_solution+1
  5310  078C  0851               	movf	??_find_best_solution,w
  5311  078D  00C1               	movwf	debug_int1@i
  5312  078E  0852               	movf	??_find_best_solution+1,w
  5313  078F  00C2               	movwf	debug_int1@i+1
  5314  0790  3000               	movlw	0
  5315  0791  160A  118A  2003  120A  118A  	fcall	_debug_int1
  5316                           
  5317                           ;teris_16f886.c: 1201: debug_int1(0, "temp_pre_hole = %d", temp_pre_hole);
  5318  0796  30F1               	movlw	low (STR_85| (0+32768))
  5319  0797  1283               	bcf	3,5	;RP0=0, select bank0
  5320  0798  1303               	bcf	3,6	;RP1=0, select bank0
  5321  0799  00BF               	movwf	debug_int1@f
  5322  079A  308B               	movlw	high (STR_85| (0+32768))
  5323  079B  00C0               	movwf	debug_int1@f+1
  5324  079C  1683               	bsf	3,5	;RP0=1, select bank1
  5325  079D  1303               	bcf	3,6	;RP1=0, select bank1
  5326  079E  086F               	movf	_temp_pre_hole^(0+128),w
  5327  079F  1283               	bcf	3,5	;RP0=0, select bank0
  5328  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  5329  07A1  00D1               	movwf	??_find_best_solution
  5330  07A2  01D2               	clrf	??_find_best_solution+1
  5331  07A3  0851               	movf	??_find_best_solution,w
  5332  07A4  00C1               	movwf	debug_int1@i
  5333  07A5  0852               	movf	??_find_best_solution+1,w
  5334  07A6  00C2               	movwf	debug_int1@i+1
  5335  07A7  3000               	movlw	0
  5336  07A8  160A  118A  2003  120A  118A  	fcall	_debug_int1
  5337                           
  5338                           ;teris_16f886.c: 1203: }
  5339  07AD  2FB6               	goto	l5657
  5340  07AE                     l5655:	
  5341                           
  5342                           ;teris_16f886.c: 1204: else
  5343                           ;teris_16f886.c: 1205: {
  5344                           ;teris_16f886.c: 1206: debug_line(0, "GAME OVER!!!");
  5345  07AE  301D               	movlw	low (STR_94| (0+32768))
  5346  07AF  00F3               	movwf	debug_line@str
  5347  07B0  308D               	movlw	high (STR_94| (0+32768))
  5348  07B1  00F4               	movwf	debug_line@str+1
  5349  07B2  3000               	movlw	0
  5350  07B3  160A  158A  20AA   	fcall	_debug_line
  5351  07B6                     l5657:	
  5352                           
  5353                           ;teris_16f886.c: 1207: }
  5354                           ;teris_16f886.c: 1208: return res;
  5355  07B6  1683               	bsf	3,5	;RP0=1, select bank1
  5356  07B7  1303               	bcf	3,6	;RP1=0, select bank1
  5357  07B8  0822               	movf	find_best_solution@res^(0+128),w
  5358  07B9  0008               	return
  5359  07BA                     __end_of_find_best_solution:	
  5360                           
  5361                           	psect	text5
  5362  1A5B                     __ptext5:	
  5363 ;; *************** function _right_most *****************
  5364 ;; Defined at:
  5365 ;;		line 902 in file "teris_16f886.c"
  5366 ;; Parameters:    Size  Location     Type
  5367 ;;  x               1    wreg     char 
  5368 ;;  matrix44        2   36[BANK0 ] PTR const struct .
  5369 ;;		 -> g_matrix44(384), 
  5370 ;;  matrix88        1   38[BANK0 ] PTR const struct .
  5371 ;;		 -> g_matrix88(64), 
  5372 ;; Auto vars:     Size  Location     Type
  5373 ;;  x               1   41[BANK0 ] char 
  5374 ;; Return value:  Size  Location     Type
  5375 ;;                  1    wreg      char 
  5376 ;; Registers used:
  5377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5378 ;; Tracked objects:
  5379 ;;		On entry : 0/0
  5380 ;;		On exit  : 0/0
  5381 ;;		Unchanged: 0/0
  5382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5383 ;;      Params:         0       3       0       0       0
  5384 ;;      Locals:         0       1       0       0       0
  5385 ;;      Temps:          0       2       0       0       0
  5386 ;;      Totals:         0       6       0       0       0
  5387 ;;Total ram usage:        6 bytes
  5388 ;; Hardware stack levels used:    1
  5389 ;; Hardware stack levels required when called:    4
  5390 ;; This function calls:
  5391 ;;		_debug_int1
  5392 ;;		_is_right_boundary
  5393 ;; This function is called by:
  5394 ;;		_find_best_solution
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           
  5399                           ;psect for function _right_most
  5400  1A5B                     _right_most:	
  5401                           
  5402                           ;incstack = 0
  5403                           ; Regs used in _right_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5404                           ;right_most@x stored from wreg
  5405  1A5B  1283               	bcf	3,5	;RP0=0, select bank0
  5406  1A5C  1303               	bcf	3,6	;RP1=0, select bank0
  5407  1A5D  00C9               	movwf	right_most@x
  5408  1A5E                     l396:	
  5409                           ;teris_16f886.c: 904: while(1)
  5410                           
  5411                           
  5412                           ;teris_16f886.c: 905: {
  5413                           ;teris_16f886.c: 906: if(is_right_boundary(x, matrix44, matrix88) == RIGHT_OVER_BOUNDARY
      +                          )
  5414  1A5E  0844               	movf	right_most@matrix44,w
  5415  1A5F  00F6               	movwf	is_right_boundary@matrix44
  5416  1A60  0845               	movf	right_most@matrix44+1,w
  5417  1A61  00F7               	movwf	is_right_boundary@matrix44+1
  5418  1A62  0846               	movf	right_most@matrix88,w
  5419  1A63  00C7               	movwf	??_right_most
  5420  1A64  0847               	movf	??_right_most,w
  5421  1A65  00F8               	movwf	is_right_boundary@matrix88
  5422  1A66  0849               	movf	right_most@x,w
  5423  1A67  160A  158A  25CE  160A  158A  	fcall	_is_right_boundary
  5424  1A6C  3A03               	xorlw	3
  5425  1A6D  1D03               	skipz
  5426  1A6E  2A8B               	goto	l5277
  5427                           
  5428                           ;teris_16f886.c: 907: {
  5429                           ;teris_16f886.c: 908: debug_int1(0, "right_most = %d", x - 1);
  5430  1A6F  30A4               	movlw	low (STR_49| (0+32768))
  5431  1A70  1283               	bcf	3,5	;RP0=0, select bank0
  5432  1A71  1303               	bcf	3,6	;RP1=0, select bank0
  5433  1A72  00BF               	movwf	debug_int1@f
  5434  1A73  308C               	movlw	high (STR_49| (0+32768))
  5435  1A74  00C0               	movwf	debug_int1@f+1
  5436  1A75  0849               	movf	right_most@x,w
  5437  1A76  00C7               	movwf	??_right_most
  5438  1A77  01C8               	clrf	??_right_most+1
  5439  1A78  1BC7               	btfsc	??_right_most,7
  5440  1A79  03C8               	decf	??_right_most+1,f
  5441  1A7A  0847               	movf	??_right_most,w
  5442  1A7B  3EFF               	addlw	255
  5443  1A7C  00C1               	movwf	debug_int1@i
  5444  1A7D  0848               	movf	??_right_most+1,w
  5445  1A7E  1803               	skipnc
  5446  1A7F  3E01               	addlw	1
  5447  1A80  3EFF               	addlw	255
  5448  1A81  00C2               	movwf	debug_int1@i+1
  5449  1A82  3000               	movlw	0
  5450  1A83  160A  118A  2003   	fcall	_debug_int1
  5451                           
  5452                           ;teris_16f886.c: 909: return x - 1;
  5453  1A86  1283               	bcf	3,5	;RP0=0, select bank0
  5454  1A87  1303               	bcf	3,6	;RP1=0, select bank0
  5455  1A88  0849               	movf	right_most@x,w
  5456  1A89  3EFF               	addlw	-1
  5457  1A8A  0008               	return
  5458  1A8B                     l5277:	
  5459                           
  5460                           ;teris_16f886.c: 910: }
  5461                           ;teris_16f886.c: 911: x++;
  5462  1A8B  3001               	movlw	1
  5463  1A8C  1283               	bcf	3,5	;RP0=0, select bank0
  5464  1A8D  1303               	bcf	3,6	;RP1=0, select bank0
  5465  1A8E  00C7               	movwf	??_right_most
  5466  1A8F  0847               	movf	??_right_most,w
  5467  1A90  07C9               	addwf	right_most@x,f
  5468  1A91  2A5E               	goto	l396
  5469  1A92                     __end_of_right_most:	
  5470                           
  5471                           	psect	text6
  5472  1DCE                     __ptext6:	
  5473 ;; *************** function _is_right_boundary *****************
  5474 ;; Defined at:
  5475 ;;		line 763 in file "teris_16f886.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  x               1    wreg     char 
  5478 ;;  matrix44        2    6[COMMON] PTR const struct .
  5479 ;;		 -> g_matrix44(384), 
  5480 ;;  matrix88        1    8[COMMON] PTR const struct .
  5481 ;;		 -> g_matrix88(64), 
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;  x               1    0[BANK0 ] char 
  5484 ;;  col             1    2[BANK0 ] char 
  5485 ;;  row             1    1[BANK0 ] char 
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      unsigned char 
  5488 ;; Registers used:
  5489 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5495 ;;      Params:         3       0       0       0       0
  5496 ;;      Locals:         0       3       0       0       0
  5497 ;;      Temps:          4       0       0       0       0
  5498 ;;      Totals:         7       3       0       0       0
  5499 ;;Total ram usage:       10 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    3
  5502 ;; This function calls:
  5503 ;;		_debug_line
  5504 ;; This function is called by:
  5505 ;;		_right_most
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           
  5510                           ;psect for function _is_right_boundary
  5511  1DCE                     _is_right_boundary:	
  5512                           
  5513                           ;incstack = 0
  5514                           ; Regs used in _is_right_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5515                           ;is_right_boundary@x stored from wreg
  5516  1DCE  1283               	bcf	3,5	;RP0=0, select bank0
  5517  1DCF  1303               	bcf	3,6	;RP1=0, select bank0
  5518  1DD0  00A0               	movwf	is_right_boundary@x
  5519                           
  5520                           ;teris_16f886.c: 765: for(int8_t row = 4 - 1; row >= 0; row--)
  5521  1DD1  3003               	movlw	3
  5522  1DD2  00F9               	movwf	??_is_right_boundary
  5523  1DD3  0879               	movf	??_is_right_boundary,w
  5524  1DD4  00A1               	movwf	is_right_boundary@row
  5525  1DD5  1BA1               	btfsc	is_right_boundary@row,7
  5526  1DD6  2E2D               	goto	l5055
  5527  1DD7                     l5031:	
  5528                           
  5529                           ;teris_16f886.c: 766: {
  5530                           ;teris_16f886.c: 767: for(int8_t col = 0; col < 4; col++)
  5531  1DD7  01A2               	clrf	is_right_boundary@col
  5532  1DD8  0822               	movf	is_right_boundary@col,w
  5533  1DD9  3A80               	xorlw	128
  5534  1DDA  3E7C               	addlw	-132
  5535  1DDB  1803               	btfsc	3,0
  5536  1DDC  2E27               	goto	l5051
  5537  1DDD                     l5037:	
  5538                           
  5539                           ;teris_16f886.c: 768: {
  5540                           ;teris_16f886.c: 769: if(matrix44->data[row][col] == 1)
  5541  1DDD  0821               	movf	is_right_boundary@row,w
  5542  1DDE  00F9               	movwf	??_is_right_boundary
  5543  1DDF  01FA               	clrf	??_is_right_boundary+1
  5544  1DE0  1003               	clrc
  5545  1DE1  0DF9               	rlf	??_is_right_boundary,f
  5546  1DE2  0DFA               	rlf	??_is_right_boundary+1,f
  5547  1DE3  1003               	clrc
  5548  1DE4  0DF9               	rlf	??_is_right_boundary,f
  5549  1DE5  0DFA               	rlf	??_is_right_boundary+1,f
  5550  1DE6  0879               	movf	??_is_right_boundary,w
  5551  1DE7  0776               	addwf	is_right_boundary@matrix44,w
  5552  1DE8  00FB               	movwf	??_is_right_boundary+2
  5553  1DE9  087A               	movf	??_is_right_boundary+1,w
  5554  1DEA  1803               	skipnc
  5555  1DEB  0A7A               	incf	??_is_right_boundary+1,w
  5556  1DEC  0777               	addwf	is_right_boundary@matrix44+1,w
  5557  1DED  00FC               	movwf	??_is_right_boundary+3
  5558  1DEE  0822               	movf	is_right_boundary@col,w
  5559  1DEF  077B               	addwf	??_is_right_boundary+2,w
  5560  1DF0  0084               	movwf	4
  5561  1DF1  087C               	movf	??_is_right_boundary+3,w
  5562  1DF2  1803               	skipnc
  5563  1DF3  0A7C               	incf	??_is_right_boundary+3,w
  5564  1DF4  00FF               	movwf	127
  5565  1DF5  120A  158A  2000  160A  158A  	fcall	stringtab
  5566  1DFA  3A01               	xorlw	1
  5567  1DFB  1D03               	skipz
  5568  1DFC  2E1C               	goto	l5047
  5569                           
  5570                           ;teris_16f886.c: 770: {
  5571                           ;teris_16f886.c: 771: if(x + col > 8 - 1)
  5572  1DFD  0820               	movf	is_right_boundary@x,w
  5573  1DFE  0722               	addwf	is_right_boundary@col,w
  5574  1DFF  00F9               	movwf	??_is_right_boundary
  5575  1E00  01FA               	clrf	??_is_right_boundary+1
  5576  1E01  1803               	skipnc
  5577  1E02  0AFA               	incf	??_is_right_boundary+1,f
  5578  1E03  1BA0               	btfsc	is_right_boundary@x,7
  5579  1E04  03FA               	decf	??_is_right_boundary+1,f
  5580  1E05  1BA2               	btfsc	is_right_boundary@col,7
  5581  1E06  03FA               	decf	??_is_right_boundary+1,f
  5582  1E07  087A               	movf	??_is_right_boundary+1,w
  5583  1E08  3A80               	xorlw	128
  5584  1E09  00FF               	movwf	127
  5585  1E0A  3080               	movlw	128
  5586  1E0B  027F               	subwf	127,w
  5587  1E0C  1D03               	skipz
  5588  1E0D  2E10               	goto	u7105
  5589  1E0E  3008               	movlw	8
  5590  1E0F  0279               	subwf	??_is_right_boundary,w
  5591  1E10                     u7105:	
  5592  1E10  1C03               	skipc
  5593  1E11  2E1C               	goto	l5047
  5594                           
  5595                           ;teris_16f886.c: 772: {
  5596                           ;teris_16f886.c: 773: debug_line(0, "RIGHT_OVER_BOUNDARY");
  5597  1E12  306A               	movlw	low (STR_42| (0+32768))
  5598  1E13  00F3               	movwf	debug_line@str
  5599  1E14  308B               	movlw	high (STR_42| (0+32768))
  5600  1E15  00F4               	movwf	debug_line@str+1
  5601  1E16  3000               	movlw	0
  5602  1E17  160A  158A  20AA   	fcall	_debug_line
  5603                           
  5604                           ;teris_16f886.c: 774: return RIGHT_OVER_BOUNDARY;
  5605  1E1A  3003               	movlw	3
  5606  1E1B  0008               	return
  5607  1E1C                     l5047:	
  5608  1E1C  3001               	movlw	1
  5609  1E1D  00F9               	movwf	??_is_right_boundary
  5610  1E1E  0879               	movf	??_is_right_boundary,w
  5611  1E1F  1283               	bcf	3,5	;RP0=0, select bank0
  5612  1E20  1303               	bcf	3,6	;RP1=0, select bank0
  5613  1E21  07A2               	addwf	is_right_boundary@col,f
  5614  1E22  0822               	movf	is_right_boundary@col,w
  5615  1E23  3A80               	xorlw	128
  5616  1E24  3E7C               	addlw	-132
  5617  1E25  1C03               	skipc
  5618  1E26  2DDD               	goto	l5037
  5619  1E27                     l5051:	
  5620  1E27  30FF               	movlw	255
  5621  1E28  00F9               	movwf	??_is_right_boundary
  5622  1E29  0879               	movf	??_is_right_boundary,w
  5623  1E2A  07A1               	addwf	is_right_boundary@row,f
  5624  1E2B  1FA1               	btfss	is_right_boundary@row,7
  5625  1E2C  2DD7               	goto	l5031
  5626  1E2D                     l5055:	
  5627                           
  5628                           ;teris_16f886.c: 775: }
  5629                           ;teris_16f886.c: 776: }
  5630                           ;teris_16f886.c: 777: }
  5631                           ;teris_16f886.c: 778: }
  5632                           ;teris_16f886.c: 779: return OK;
  5633  1E2D  3000               	movlw	0
  5634  1E2E  0008               	return
  5635  1E2F                     __end_of_is_right_boundary:	
  5636                           
  5637                           	psect	text7
  5638  1E96                     __ptext7:	
  5639 ;; *************** function _printf_debug_cur_MATRIX44 *****************
  5640 ;; Defined at:
  5641 ;;		line 386 in file "teris_16f886.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;  enable          1    wreg     unsigned char 
  5644 ;;  lable           2   12[BANK0 ] PTR const unsigned char 
  5645 ;;		 -> STR_86(7), 
  5646 ;;  x               1   14[BANK0 ] char 
  5647 ;;  y               1   15[BANK0 ] char 
  5648 ;; Auto vars:     Size  Location     Type
  5649 ;;  enable          1   25[BANK0 ] unsigned char 
  5650 ;;  matrix          2   26[BANK0 ] PTR struct .
  5651 ;;		 -> g_matrix44(384), 
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  1    wreg      void 
  5654 ;; Registers used:
  5655 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5656 ;; Tracked objects:
  5657 ;;		On entry : 0/0
  5658 ;;		On exit  : 0/0
  5659 ;;		Unchanged: 0/0
  5660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5661 ;;      Params:         0       4       0       0       0
  5662 ;;      Locals:         0       3       0       0       0
  5663 ;;      Temps:          0       9       0       0       0
  5664 ;;      Totals:         0      16       0       0       0
  5665 ;;Total ram usage:       16 bytes
  5666 ;; Hardware stack levels used:    1
  5667 ;; Hardware stack levels required when called:    4
  5668 ;; This function calls:
  5669 ;;		___bmul
  5670 ;;		_debug_line
  5671 ;;		_debug_str
  5672 ;;		_printf_debug_MATRIX44
  5673 ;; This function is called by:
  5674 ;;		_find_best_solution
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           
  5679                           ;psect for function _printf_debug_cur_MATRIX44
  5680  1E96                     _printf_debug_cur_MATRIX44:	
  5681                           
  5682                           ;incstack = 0
  5683                           ; Regs used in _printf_debug_cur_MATRIX44: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  5684                           ;printf_debug_cur_MATRIX44@enable stored from wreg
  5685  1E96  1283               	bcf	3,5	;RP0=0, select bank0
  5686  1E97  1303               	bcf	3,6	;RP1=0, select bank0
  5687  1E98  00B9               	movwf	printf_debug_cur_MATRIX44@enable
  5688                           
  5689                           ;teris_16f886.c: 388: if(enable == 1)
  5690  1E99  0339               	decf	printf_debug_cur_MATRIX44@enable,w
  5691  1E9A  1D03               	btfss	3,2
  5692  1E9B  0008               	return
  5693                           
  5694                           ;teris_16f886.c: 389: {
  5695                           ;teris_16f886.c: 390: if(lable != (0))
  5696  1E9C  082C               	movf	printf_debug_cur_MATRIX44@lable,w
  5697  1E9D  042D               	iorwf	printf_debug_cur_MATRIX44@lable+1,w
  5698  1E9E  1903               	btfsc	3,2
  5699  1E9F  2EB4               	goto	l5065
  5700                           
  5701                           ;teris_16f886.c: 391: {
  5702                           ;teris_16f886.c: 392: debug_str(1, lable);
  5703  1EA0  082C               	movf	printf_debug_cur_MATRIX44@lable,w
  5704  1EA1  00F3               	movwf	debug_str@str
  5705  1EA2  082D               	movf	printf_debug_cur_MATRIX44@lable+1,w
  5706  1EA3  00F4               	movwf	debug_str@str+1
  5707  1EA4  3001               	movlw	1
  5708  1EA5  160A  158A  2036  160A  158A  	fcall	_debug_str
  5709                           
  5710                           ;teris_16f886.c: 393: debug_line(1, ":");
  5711  1EAA  30BF               	movlw	low (STR_5| (0+32768))
  5712  1EAB  00F3               	movwf	debug_line@str
  5713  1EAC  308D               	movlw	high (STR_5| (0+32768))
  5714  1EAD  00F4               	movwf	debug_line@str+1
  5715  1EAE  3001               	movlw	1
  5716  1EAF  160A  158A  20AA  160A  158A  	fcall	_debug_line
  5717  1EB4                     l5065:	
  5718                           
  5719                           ;teris_16f886.c: 394: }
  5720                           ;teris_16f886.c: 395: MATRIX44* matrix = &g_matrix44[g_char_info[g_char_info_index].star
      +                          t_index + g_char_info[g_char_info_index].cur_index];
  5721  1EB4  3003               	movlw	3
  5722  1EB5  1283               	bcf	3,5	;RP0=0, select bank0
  5723  1EB6  1303               	bcf	3,6	;RP1=0, select bank0
  5724  1EB7  00B0               	movwf	??_printf_debug_cur_MATRIX44
  5725  1EB8  0830               	movf	??_printf_debug_cur_MATRIX44,w
  5726  1EB9  00F0               	movwf	___bmul@multiplicand
  5727  1EBA  0869               	movf	_g_char_info_index,w
  5728  1EBB  160A  158A  2050  160A  158A  	fcall	___bmul
  5729  1EC0  3E01               	addlw	1
  5730  1EC1  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5731  1EC2  0084               	movwf	4
  5732  1EC3  1783               	bsf	3,7	;select IRP bank3
  5733  1EC4  0800               	movf	0,w
  5734  1EC5  1283               	bcf	3,5	;RP0=0, select bank0
  5735  1EC6  1303               	bcf	3,6	;RP1=0, select bank0
  5736  1EC7  00B1               	movwf	??_printf_debug_cur_MATRIX44+1
  5737  1EC8  3003               	movlw	3
  5738  1EC9  00B2               	movwf	??_printf_debug_cur_MATRIX44+2
  5739  1ECA  0832               	movf	??_printf_debug_cur_MATRIX44+2,w
  5740  1ECB  00F0               	movwf	___bmul@multiplicand
  5741  1ECC  0869               	movf	_g_char_info_index,w
  5742  1ECD  160A  158A  2050  160A  158A  	fcall	___bmul
  5743  1ED2  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5744  1ED3  0084               	movwf	4
  5745  1ED4  1783               	bsf	3,7	;select IRP bank3
  5746  1ED5  0800               	movf	0,w
  5747  1ED6  1283               	bcf	3,5	;RP0=0, select bank0
  5748  1ED7  1303               	bcf	3,6	;RP1=0, select bank0
  5749  1ED8  0731               	addwf	??_printf_debug_cur_MATRIX44+1,w
  5750  1ED9  00B3               	movwf	??_printf_debug_cur_MATRIX44+3
  5751  1EDA  01B4               	clrf	??_printf_debug_cur_MATRIX44+4
  5752  1EDB  0DB4               	rlf	??_printf_debug_cur_MATRIX44+4,f
  5753  1EDC  0EB3               	swapf	??_printf_debug_cur_MATRIX44+3,f
  5754  1EDD  0EB4               	swapf	??_printf_debug_cur_MATRIX44+4,f
  5755  1EDE  30F0               	movlw	240
  5756  1EDF  05B4               	andwf	??_printf_debug_cur_MATRIX44+4,f
  5757  1EE0  0833               	movf	??_printf_debug_cur_MATRIX44+3,w
  5758  1EE1  390F               	andlw	15
  5759  1EE2  04B4               	iorwf	??_printf_debug_cur_MATRIX44+4,f
  5760  1EE3  30F0               	movlw	240
  5761  1EE4  05B3               	andwf	??_printf_debug_cur_MATRIX44+3,f
  5762  1EE5  3030               	movlw	low (_g_matrix44| (0+32768))
  5763  1EE6  00B5               	movwf	??_printf_debug_cur_MATRIX44+5
  5764  1EE7  3088               	movlw	high (_g_matrix44| (0+32768))
  5765  1EE8  00B6               	movwf	??_printf_debug_cur_MATRIX44+6
  5766  1EE9  0833               	movf	??_printf_debug_cur_MATRIX44+3,w
  5767  1EEA  0735               	addwf	??_printf_debug_cur_MATRIX44+5,w
  5768  1EEB  00B7               	movwf	??_printf_debug_cur_MATRIX44+7
  5769  1EEC  0834               	movf	??_printf_debug_cur_MATRIX44+4,w
  5770  1EED  1803               	skipnc
  5771  1EEE  0A34               	incf	??_printf_debug_cur_MATRIX44+4,w
  5772  1EEF  0736               	addwf	??_printf_debug_cur_MATRIX44+6,w
  5773  1EF0  00B8               	movwf	??_printf_debug_cur_MATRIX44+8
  5774  1EF1  0837               	movf	??_printf_debug_cur_MATRIX44+7,w
  5775  1EF2  00BA               	movwf	printf_debug_cur_MATRIX44@matrix
  5776  1EF3  0838               	movf	??_printf_debug_cur_MATRIX44+8,w
  5777  1EF4  00BB               	movwf	printf_debug_cur_MATRIX44@matrix+1
  5778                           
  5779                           ;teris_16f886.c: 396: printf_debug_MATRIX44(1, (0), x, y, matrix);
  5780  1EF5  3000               	movlw	0
  5781  1EF6  00F6               	movwf	printf_debug_MATRIX44@lable
  5782  1EF7  00F7               	movwf	printf_debug_MATRIX44@lable+1
  5783  1EF8  082E               	movf	printf_debug_cur_MATRIX44@x,w
  5784  1EF9  00B0               	movwf	??_printf_debug_cur_MATRIX44
  5785  1EFA  0830               	movf	??_printf_debug_cur_MATRIX44,w
  5786  1EFB  00F8               	movwf	printf_debug_MATRIX44@x
  5787  1EFC  082F               	movf	printf_debug_cur_MATRIX44@y,w
  5788  1EFD  00B1               	movwf	??_printf_debug_cur_MATRIX44+1
  5789  1EFE  0831               	movf	??_printf_debug_cur_MATRIX44+1,w
  5790  1EFF  00F9               	movwf	printf_debug_MATRIX44@y
  5791  1F00  083A               	movf	printf_debug_cur_MATRIX44@matrix,w
  5792  1F01  00FA               	movwf	printf_debug_MATRIX44@matrix
  5793  1F02  083B               	movf	printf_debug_cur_MATRIX44@matrix+1,w
  5794  1F03  00FB               	movwf	printf_debug_MATRIX44@matrix+1
  5795  1F04  3001               	movlw	1
  5796  1F05  120A  118A  202B   	fcall	_printf_debug_MATRIX44
  5797  1F08  0008               	return
  5798  1F09                     __end_of_printf_debug_cur_MATRIX44:	
  5799                           
  5800                           	psect	text8
  5801  002B                     __ptext8:	
  5802 ;; *************** function _printf_debug_MATRIX44 *****************
  5803 ;; Defined at:
  5804 ;;		line 356 in file "teris_16f886.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;  enable          1    wreg     unsigned char 
  5807 ;;  lable           2    6[COMMON] PTR const unsigned char 
  5808 ;;		 -> STR_60(15), ROM(8192), 
  5809 ;;  x               1    8[COMMON] char 
  5810 ;;  y               1    9[COMMON] char 
  5811 ;;  matrix          2   10[COMMON] PTR const struct .
  5812 ;;		 -> g_matrix44(384), 
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;  enable          1    9[BANK0 ] unsigned char 
  5815 ;;  col             1   11[BANK0 ] char 
  5816 ;;  row             1   10[BANK0 ] char 
  5817 ;; Return value:  Size  Location     Type
  5818 ;;                  1    wreg      void 
  5819 ;; Registers used:
  5820 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5821 ;; Tracked objects:
  5822 ;;		On entry : 0/0
  5823 ;;		On exit  : 0/0
  5824 ;;		Unchanged: 0/0
  5825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5826 ;;      Params:         6       0       0       0       0
  5827 ;;      Locals:         0       3       0       0       0
  5828 ;;      Temps:          0       9       0       0       0
  5829 ;;      Totals:         6      12       0       0       0
  5830 ;;Total ram usage:       18 bytes
  5831 ;; Hardware stack levels used:    1
  5832 ;; Hardware stack levels required when called:    3
  5833 ;; This function calls:
  5834 ;;		_debug_line
  5835 ;;		_debug_str
  5836 ;; This function is called by:
  5837 ;;		_printf_debug_cur_MATRIX44
  5838 ;;		_find_best_solution
  5839 ;;		_printf_debug_all_MATRIX44
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           
  5844                           ;psect for function _printf_debug_MATRIX44
  5845  002B                     _printf_debug_MATRIX44:	
  5846                           
  5847                           ;incstack = 0
  5848                           ; Regs used in _printf_debug_MATRIX44: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  5849                           ;printf_debug_MATRIX44@enable stored from wreg
  5850  002B  1283               	bcf	3,5	;RP0=0, select bank0
  5851  002C  1303               	bcf	3,6	;RP1=0, select bank0
  5852  002D  00A9               	movwf	printf_debug_MATRIX44@enable
  5853                           
  5854                           ;teris_16f886.c: 358: if(enable == 1)
  5855  002E  0329               	decf	printf_debug_MATRIX44@enable,w
  5856  002F  1D03               	btfss	3,2
  5857  0030  0008               	return
  5858                           
  5859                           ;teris_16f886.c: 359: {
  5860                           ;teris_16f886.c: 360: if(lable != (0))
  5861  0031  0876               	movf	printf_debug_MATRIX44@lable,w
  5862  0032  0477               	iorwf	printf_debug_MATRIX44@lable+1,w
  5863  0033  1903               	btfsc	3,2
  5864  0034  2849               	goto	l178
  5865                           
  5866                           ;teris_16f886.c: 361: {
  5867                           ;teris_16f886.c: 362: debug_str(1, lable);
  5868  0035  0876               	movf	printf_debug_MATRIX44@lable,w
  5869  0036  00F3               	movwf	debug_str@str
  5870  0037  0877               	movf	printf_debug_MATRIX44@lable+1,w
  5871  0038  00F4               	movwf	debug_str@str+1
  5872  0039  3001               	movlw	1
  5873  003A  160A  158A  2036  120A  118A  	fcall	_debug_str
  5874                           
  5875                           ;teris_16f886.c: 363: debug_line(1, ":");
  5876  003F  30BF               	movlw	low (STR_5| (0+32768))
  5877  0040  00F3               	movwf	debug_line@str
  5878  0041  308D               	movlw	high (STR_5| (0+32768))
  5879  0042  00F4               	movwf	debug_line@str+1
  5880  0043  3001               	movlw	1
  5881  0044  160A  158A  20AA  120A  118A  	fcall	_debug_line
  5882  0049                     l178:	
  5883                           
  5884                           ;teris_16f886.c: 364: }
  5885                           ;teris_16f886.c: 365: debug_line(1, "<<<<<<<<<<<<<<<<<<<<MATRIX44");
  5886  0049  3023               	movlw	low (STR_6| (0+32768))
  5887  004A  00F3               	movwf	debug_line@str
  5888  004B  308A               	movlw	high (STR_6| (0+32768))
  5889  004C  00F4               	movwf	debug_line@str+1
  5890  004D  3001               	movlw	1
  5891  004E  160A  158A  20AA  120A  118A  	fcall	_debug_line
  5892                           
  5893                           ;teris_16f886.c: 366: for(int8_t row = 0; row < 8; row++)
  5894  0053  1283               	bcf	3,5	;RP0=0, select bank0
  5895  0054  1303               	bcf	3,6	;RP1=0, select bank0
  5896  0055  01AA               	clrf	printf_debug_MATRIX44@row
  5897  0056  082A               	movf	printf_debug_MATRIX44@row,w
  5898  0057  3A80               	xorlw	128
  5899  0058  3E78               	addlw	-136
  5900  0059  1803               	btfsc	3,0
  5901  005A  2942               	goto	l4933
  5902  005B                     l4903:	
  5903                           
  5904                           ;teris_16f886.c: 367: {
  5905                           ;teris_16f886.c: 368: for(int8_t col = 0; col < 8; col++)
  5906  005B  01AB               	clrf	printf_debug_MATRIX44@col
  5907  005C  082B               	movf	printf_debug_MATRIX44@col,w
  5908  005D  3A80               	xorlw	128
  5909  005E  3E78               	addlw	-136
  5910  005F  1803               	btfsc	3,0
  5911  0060  292D               	goto	l4927
  5912  0061                     l4909:	
  5913                           
  5914                           ;teris_16f886.c: 369: {
  5915                           ;teris_16f886.c: 370: if((row - y >= 0) && (row - y < 4)
  5916                           ;teris_16f886.c: 371: && (col - x >= 0) && (col - x < 4)
  5917                           ;teris_16f886.c: 372: && (matrix->data[row - y][col - x] == 1))
  5918  0061  0879               	movf	printf_debug_MATRIX44@y,w
  5919  0062  00A0               	movwf	??_printf_debug_MATRIX44
  5920  0063  01A1               	clrf	??_printf_debug_MATRIX44+1
  5921  0064  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  5922  0065  03A1               	decf	??_printf_debug_MATRIX44+1,f
  5923  0066  09A0               	comf	??_printf_debug_MATRIX44,f
  5924  0067  09A1               	comf	??_printf_debug_MATRIX44+1,f
  5925  0068  0AA0               	incf	??_printf_debug_MATRIX44,f
  5926  0069  1903               	skipnz
  5927  006A  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  5928  006B  082A               	movf	printf_debug_MATRIX44@row,w
  5929  006C  00A2               	movwf	??_printf_debug_MATRIX44+2
  5930  006D  01A3               	clrf	??_printf_debug_MATRIX44+3
  5931  006E  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  5932  006F  03A3               	decf	??_printf_debug_MATRIX44+3,f
  5933  0070  0820               	movf	??_printf_debug_MATRIX44,w
  5934  0071  0722               	addwf	??_printf_debug_MATRIX44+2,w
  5935  0072  00A4               	movwf	??_printf_debug_MATRIX44+4
  5936  0073  0821               	movf	??_printf_debug_MATRIX44+1,w
  5937  0074  1803               	skipnc
  5938  0075  0A21               	incf	??_printf_debug_MATRIX44+1,w
  5939  0076  0723               	addwf	??_printf_debug_MATRIX44+3,w
  5940  0077  00A5               	movwf	??_printf_debug_MATRIX44+5
  5941  0078  1BA5               	btfsc	??_printf_debug_MATRIX44+5,7
  5942  0079  2918               	goto	l4921
  5943  007A  0879               	movf	printf_debug_MATRIX44@y,w
  5944  007B  00A0               	movwf	??_printf_debug_MATRIX44
  5945  007C  01A1               	clrf	??_printf_debug_MATRIX44+1
  5946  007D  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  5947  007E  03A1               	decf	??_printf_debug_MATRIX44+1,f
  5948  007F  09A0               	comf	??_printf_debug_MATRIX44,f
  5949  0080  09A1               	comf	??_printf_debug_MATRIX44+1,f
  5950  0081  0AA0               	incf	??_printf_debug_MATRIX44,f
  5951  0082  1903               	skipnz
  5952  0083  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  5953  0084  082A               	movf	printf_debug_MATRIX44@row,w
  5954  0085  00A2               	movwf	??_printf_debug_MATRIX44+2
  5955  0086  01A3               	clrf	??_printf_debug_MATRIX44+3
  5956  0087  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  5957  0088  03A3               	decf	??_printf_debug_MATRIX44+3,f
  5958  0089  0820               	movf	??_printf_debug_MATRIX44,w
  5959  008A  0722               	addwf	??_printf_debug_MATRIX44+2,w
  5960  008B  00A4               	movwf	??_printf_debug_MATRIX44+4
  5961  008C  0821               	movf	??_printf_debug_MATRIX44+1,w
  5962  008D  1803               	skipnc
  5963  008E  0A21               	incf	??_printf_debug_MATRIX44+1,w
  5964  008F  0723               	addwf	??_printf_debug_MATRIX44+3,w
  5965  0090  00A5               	movwf	??_printf_debug_MATRIX44+5
  5966  0091  0825               	movf	??_printf_debug_MATRIX44+5,w
  5967  0092  3A80               	xorlw	128
  5968  0093  00FF               	movwf	127
  5969  0094  3080               	movlw	128
  5970  0095  027F               	subwf	127,w
  5971  0096  1D03               	skipz
  5972  0097  289A               	goto	u6785
  5973  0098  3004               	movlw	4
  5974  0099  0224               	subwf	??_printf_debug_MATRIX44+4,w
  5975  009A                     u6785:	
  5976  009A  1803               	skipnc
  5977  009B  2918               	goto	l4921
  5978  009C  0878               	movf	printf_debug_MATRIX44@x,w
  5979  009D  1283               	bcf	3,5	;RP0=0, select bank0
  5980  009E  1303               	bcf	3,6	;RP1=0, select bank0
  5981  009F  00A0               	movwf	??_printf_debug_MATRIX44
  5982  00A0  01A1               	clrf	??_printf_debug_MATRIX44+1
  5983  00A1  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  5984  00A2  03A1               	decf	??_printf_debug_MATRIX44+1,f
  5985  00A3  09A0               	comf	??_printf_debug_MATRIX44,f
  5986  00A4  09A1               	comf	??_printf_debug_MATRIX44+1,f
  5987  00A5  0AA0               	incf	??_printf_debug_MATRIX44,f
  5988  00A6  1903               	skipnz
  5989  00A7  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  5990  00A8  082B               	movf	printf_debug_MATRIX44@col,w
  5991  00A9  00A2               	movwf	??_printf_debug_MATRIX44+2
  5992  00AA  01A3               	clrf	??_printf_debug_MATRIX44+3
  5993  00AB  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  5994  00AC  03A3               	decf	??_printf_debug_MATRIX44+3,f
  5995  00AD  0820               	movf	??_printf_debug_MATRIX44,w
  5996  00AE  0722               	addwf	??_printf_debug_MATRIX44+2,w
  5997  00AF  00A4               	movwf	??_printf_debug_MATRIX44+4
  5998  00B0  0821               	movf	??_printf_debug_MATRIX44+1,w
  5999  00B1  1803               	skipnc
  6000  00B2  0A21               	incf	??_printf_debug_MATRIX44+1,w
  6001  00B3  0723               	addwf	??_printf_debug_MATRIX44+3,w
  6002  00B4  00A5               	movwf	??_printf_debug_MATRIX44+5
  6003  00B5  1BA5               	btfsc	??_printf_debug_MATRIX44+5,7
  6004  00B6  2918               	goto	l4921
  6005  00B7  0878               	movf	printf_debug_MATRIX44@x,w
  6006  00B8  00A0               	movwf	??_printf_debug_MATRIX44
  6007  00B9  01A1               	clrf	??_printf_debug_MATRIX44+1
  6008  00BA  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  6009  00BB  03A1               	decf	??_printf_debug_MATRIX44+1,f
  6010  00BC  09A0               	comf	??_printf_debug_MATRIX44,f
  6011  00BD  09A1               	comf	??_printf_debug_MATRIX44+1,f
  6012  00BE  0AA0               	incf	??_printf_debug_MATRIX44,f
  6013  00BF  1903               	skipnz
  6014  00C0  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  6015  00C1  082B               	movf	printf_debug_MATRIX44@col,w
  6016  00C2  00A2               	movwf	??_printf_debug_MATRIX44+2
  6017  00C3  01A3               	clrf	??_printf_debug_MATRIX44+3
  6018  00C4  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  6019  00C5  03A3               	decf	??_printf_debug_MATRIX44+3,f
  6020  00C6  0820               	movf	??_printf_debug_MATRIX44,w
  6021  00C7  0722               	addwf	??_printf_debug_MATRIX44+2,w
  6022  00C8  00A4               	movwf	??_printf_debug_MATRIX44+4
  6023  00C9  0821               	movf	??_printf_debug_MATRIX44+1,w
  6024  00CA  1803               	skipnc
  6025  00CB  0A21               	incf	??_printf_debug_MATRIX44+1,w
  6026  00CC  0723               	addwf	??_printf_debug_MATRIX44+3,w
  6027  00CD  00A5               	movwf	??_printf_debug_MATRIX44+5
  6028  00CE  0825               	movf	??_printf_debug_MATRIX44+5,w
  6029  00CF  3A80               	xorlw	128
  6030  00D0  00FF               	movwf	127
  6031  00D1  3080               	movlw	128
  6032  00D2  027F               	subwf	127,w
  6033  00D3  1D03               	skipz
  6034  00D4  28D7               	goto	u6805
  6035  00D5  3004               	movlw	4
  6036  00D6  0224               	subwf	??_printf_debug_MATRIX44+4,w
  6037  00D7                     u6805:	
  6038  00D7  1803               	skipnc
  6039  00D8  2918               	goto	l4921
  6040  00D9  0878               	movf	printf_debug_MATRIX44@x,w
  6041  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  6042  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  6043  00DC  00A0               	movwf	??_printf_debug_MATRIX44
  6044  00DD  01A1               	clrf	??_printf_debug_MATRIX44+1
  6045  00DE  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  6046  00DF  03A1               	decf	??_printf_debug_MATRIX44+1,f
  6047  00E0  09A0               	comf	??_printf_debug_MATRIX44,f
  6048  00E1  09A1               	comf	??_printf_debug_MATRIX44+1,f
  6049  00E2  0AA0               	incf	??_printf_debug_MATRIX44,f
  6050  00E3  1903               	skipnz
  6051  00E4  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  6052  00E5  082B               	movf	printf_debug_MATRIX44@col,w
  6053  00E6  00A2               	movwf	??_printf_debug_MATRIX44+2
  6054  00E7  01A3               	clrf	??_printf_debug_MATRIX44+3
  6055  00E8  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  6056  00E9  03A3               	decf	??_printf_debug_MATRIX44+3,f
  6057  00EA  0820               	movf	??_printf_debug_MATRIX44,w
  6058  00EB  0722               	addwf	??_printf_debug_MATRIX44+2,w
  6059  00EC  00A4               	movwf	??_printf_debug_MATRIX44+4
  6060  00ED  0821               	movf	??_printf_debug_MATRIX44+1,w
  6061  00EE  1803               	skipnc
  6062  00EF  0A21               	incf	??_printf_debug_MATRIX44+1,w
  6063  00F0  0723               	addwf	??_printf_debug_MATRIX44+3,w
  6064  00F1  00A5               	movwf	??_printf_debug_MATRIX44+5
  6065  00F2  0824               	movf	??_printf_debug_MATRIX44+4,w
  6066  00F3  077A               	addwf	printf_debug_MATRIX44@matrix,w
  6067  00F4  00A6               	movwf	??_printf_debug_MATRIX44+6
  6068  00F5  0825               	movf	??_printf_debug_MATRIX44+5,w
  6069  00F6  1803               	skipnc
  6070  00F7  0A25               	incf	??_printf_debug_MATRIX44+5,w
  6071  00F8  077B               	addwf	printf_debug_MATRIX44@matrix+1,w
  6072  00F9  00A7               	movwf	??_printf_debug_MATRIX44+7
  6073  00FA  0379               	decf	printf_debug_MATRIX44@y,w
  6074  00FB  3AFF               	xorlw	255
  6075  00FC  072A               	addwf	printf_debug_MATRIX44@row,w
  6076  00FD  00A8               	movwf	??_printf_debug_MATRIX44+8
  6077  00FE  3001               	movlw	1
  6078  00FF                     u6815:	
  6079  00FF  1003               	clrc
  6080  0100  0DA8               	rlf	??_printf_debug_MATRIX44+8,f
  6081  0101  3EFF               	addlw	-1
  6082  0102  1D03               	skipz
  6083  0103  28FF               	goto	u6815
  6084  0104  1003               	clrc
  6085  0105  0D28               	rlf	??_printf_debug_MATRIX44+8,w
  6086  0106  0726               	addwf	??_printf_debug_MATRIX44+6,w
  6087  0107  0084               	movwf	4
  6088  0108  0827               	movf	??_printf_debug_MATRIX44+7,w
  6089  0109  1803               	skipnc
  6090  010A  0A27               	incf	??_printf_debug_MATRIX44+7,w
  6091  010B  00FF               	movwf	127
  6092  010C  120A  158A  2000  120A  118A  	fcall	stringtab
  6093  0111  3A01               	xorlw	1
  6094  0112  1D03               	skipz
  6095  0113  2918               	goto	l4921
  6096                           
  6097                           ;teris_16f886.c: 373: {
  6098                           ;teris_16f886.c: 374: debug_str(1, "*");
  6099  0114  30BD               	movlw	low (STR_7| (0+32768))
  6100  0115  00F3               	movwf	debug_str@str
  6101  0116  308D               	movlw	high (STR_7| (0+32768))
  6102  0117  291B               	goto	L9
  6103  0118                     l4921:	
  6104                           ;teris_16f886.c: 375: }
  6105                           
  6106                           
  6107                           ;teris_16f886.c: 376: else
  6108                           ;teris_16f886.c: 377: {
  6109                           ;teris_16f886.c: 378: debug_str(1, "_");
  6110  0118  30C1               	movlw	low (STR_8| (0+32768))
  6111  0119  00F3               	movwf	debug_str@str
  6112  011A  308D               	movlw	high (STR_8| (0+32768))
  6113  011B                     L9:	
  6114  011B  00F4               	movwf	debug_str@str+1
  6115  011C  3001               	movlw	1
  6116  011D  160A  158A  2036  120A  118A  	fcall	_debug_str
  6117  0122  3001               	movlw	1
  6118  0123  1283               	bcf	3,5	;RP0=0, select bank0
  6119  0124  1303               	bcf	3,6	;RP1=0, select bank0
  6120  0125  00A0               	movwf	??_printf_debug_MATRIX44
  6121  0126  0820               	movf	??_printf_debug_MATRIX44,w
  6122  0127  07AB               	addwf	printf_debug_MATRIX44@col,f
  6123  0128  082B               	movf	printf_debug_MATRIX44@col,w
  6124  0129  3A80               	xorlw	128
  6125  012A  3E78               	addlw	-136
  6126  012B  1C03               	skipc
  6127  012C  2861               	goto	l4909
  6128  012D                     l4927:	
  6129                           
  6130                           ;teris_16f886.c: 379: }
  6131                           ;teris_16f886.c: 380: }
  6132                           ;teris_16f886.c: 381: debug_line(1, "");
  6133  012D  30BC               	movlw	low ((STR_1+2)| (0+32768))
  6134  012E  00F3               	movwf	debug_line@str
  6135  012F  308D               	movlw	high ((STR_1+2)| (0+32768))
  6136  0130  00F4               	movwf	debug_line@str+1
  6137  0131  3001               	movlw	1
  6138  0132  160A  158A  20AA  120A  118A  	fcall	_debug_line
  6139  0137  3001               	movlw	1
  6140  0138  1283               	bcf	3,5	;RP0=0, select bank0
  6141  0139  1303               	bcf	3,6	;RP1=0, select bank0
  6142  013A  00A0               	movwf	??_printf_debug_MATRIX44
  6143  013B  0820               	movf	??_printf_debug_MATRIX44,w
  6144  013C  07AA               	addwf	printf_debug_MATRIX44@row,f
  6145  013D  082A               	movf	printf_debug_MATRIX44@row,w
  6146  013E  3A80               	xorlw	128
  6147  013F  3E78               	addlw	-136
  6148  0140  1C03               	skipc
  6149  0141  285B               	goto	l4903
  6150  0142                     l4933:	
  6151                           
  6152                           ;teris_16f886.c: 382: }
  6153                           ;teris_16f886.c: 383: debug_line(1, ">>>>>>>>>>>>>>>>>>>>");
  6154  0142  3003               	movlw	low (STR_10| (0+32768))
  6155  0143  00F3               	movwf	debug_line@str
  6156  0144  308B               	movlw	high (STR_10| (0+32768))
  6157  0145  00F4               	movwf	debug_line@str+1
  6158  0146  3001               	movlw	1
  6159  0147  160A  158A  20AA   	fcall	_debug_line
  6160  014A  0008               	return
  6161  014B                     __end_of_printf_debug_MATRIX44:	
  6162                           
  6163                           	psect	text9
  6164  0DC7                     __ptext9:	
  6165 ;; *************** function _printf_debug_Screen *****************
  6166 ;; Defined at:
  6167 ;;		line 588 in file "teris_16f886.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  enable          1    wreg     unsigned char 
  6170 ;;  lable           2    5[BANK0 ] PTR const unsigned char 
  6171 ;;		 -> STR_61(15), 
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  enable          1   13[COMMON] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  1    wreg      void 
  6176 ;; Registers used:
  6177 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6183 ;;      Params:         0       2       0       0       0
  6184 ;;      Locals:         1       0       0       0       0
  6185 ;;      Temps:          0       0       0       0       0
  6186 ;;      Totals:         1       2       0       0       0
  6187 ;;Total ram usage:        3 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; Hardware stack levels required when called:    4
  6190 ;; This function calls:
  6191 ;;		_debug_line
  6192 ;;		_debug_str
  6193 ;;		_printf_debug_MATRIX88
  6194 ;; This function is called by:
  6195 ;;		_find_best_solution
  6196 ;; This function uses a non-reentrant model
  6197 ;;
  6198                           
  6199                           
  6200                           ;psect for function _printf_debug_Screen
  6201  0DC7                     _printf_debug_Screen:	
  6202                           
  6203                           ;incstack = 0
  6204                           ; Regs used in _printf_debug_Screen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  6205                           ;printf_debug_Screen@enable stored from wreg
  6206  0DC7  00FD               	movwf	printf_debug_Screen@enable
  6207                           
  6208                           ;teris_16f886.c: 590: if(enable == 1)
  6209  0DC8  037D               	decf	printf_debug_Screen@enable,w
  6210  0DC9  1D03               	btfss	3,2
  6211  0DCA  0008               	return
  6212                           
  6213                           ;teris_16f886.c: 591: {
  6214                           ;teris_16f886.c: 592: if(lable != (0))
  6215  0DCB  1283               	bcf	3,5	;RP0=0, select bank0
  6216  0DCC  1303               	bcf	3,6	;RP1=0, select bank0
  6217  0DCD  0825               	movf	printf_debug_Screen@lable,w
  6218  0DCE  0426               	iorwf	printf_debug_Screen@lable+1,w
  6219  0DCF  1903               	btfsc	3,2
  6220  0DD0  2DE5               	goto	l256
  6221                           
  6222                           ;teris_16f886.c: 593: {
  6223                           ;teris_16f886.c: 594: debug_str(1, lable);
  6224  0DD1  0825               	movf	printf_debug_Screen@lable,w
  6225  0DD2  00F3               	movwf	debug_str@str
  6226  0DD3  0826               	movf	printf_debug_Screen@lable+1,w
  6227  0DD4  00F4               	movwf	debug_str@str+1
  6228  0DD5  3001               	movlw	1
  6229  0DD6  160A  158A  2036  120A  158A  	fcall	_debug_str
  6230                           
  6231                           ;teris_16f886.c: 595: debug_line(1, ":");
  6232  0DDB  30BF               	movlw	low (STR_5| (0+32768))
  6233  0DDC  00F3               	movwf	debug_line@str
  6234  0DDD  308D               	movlw	high (STR_5| (0+32768))
  6235  0DDE  00F4               	movwf	debug_line@str+1
  6236  0DDF  3001               	movlw	1
  6237  0DE0  160A  158A  20AA  120A  158A  	fcall	_debug_line
  6238  0DE5                     l256:	
  6239                           
  6240                           ;teris_16f886.c: 596: }
  6241                           ;teris_16f886.c: 597: printf_debug_MATRIX88(1, (0), &g_matrix88);
  6242  0DE5  3000               	movlw	0
  6243  0DE6  00F6               	movwf	printf_debug_MATRIX88@lable
  6244  0DE7  00F7               	movwf	printf_debug_MATRIX88@lable+1
  6245  0DE8  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  6246  0DE9  00F8               	movwf	printf_debug_MATRIX88@matrix
  6247  0DEA  3001               	movlw	1
  6248  0DEB  00F9               	movwf	printf_debug_MATRIX88@matrix+1
  6249  0DEC  3001               	movlw	1
  6250  0DED  160A  118A  2028   	fcall	_printf_debug_MATRIX88
  6251  0DF0  0008               	return
  6252  0DF1                     __end_of_printf_debug_Screen:	
  6253                           
  6254                           	psect	text10
  6255  1028                     __ptext10:	
  6256 ;; *************** function _printf_debug_MATRIX88 *****************
  6257 ;; Defined at:
  6258 ;;		line 550 in file "teris_16f886.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  enable          1    wreg     unsigned char 
  6261 ;;  lable           2    6[COMMON] PTR const unsigned char 
  6262 ;;		 -> STR_98(12), STR_62(15), ROM(8192), 
  6263 ;;  matrix          2    8[COMMON] PTR const struct .
  6264 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  6265 ;; Auto vars:     Size  Location     Type
  6266 ;;  enable          1   10[COMMON] unsigned char 
  6267 ;;  col             1   12[COMMON] unsigned char 
  6268 ;;  row             1   11[COMMON] unsigned char 
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  1    wreg      void 
  6271 ;; Registers used:
  6272 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6278 ;;      Params:         4       0       0       0       0
  6279 ;;      Locals:         3       0       0       0       0
  6280 ;;      Temps:          0       5       0       0       0
  6281 ;;      Totals:         7       5       0       0       0
  6282 ;;Total ram usage:       12 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    3
  6285 ;; This function calls:
  6286 ;;		_debug_line
  6287 ;;		_debug_str
  6288 ;; This function is called by:
  6289 ;;		_printf_debug_Screen
  6290 ;;		_find_best_solution
  6291 ;;		_main
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           
  6296                           ;psect for function _printf_debug_MATRIX88
  6297  1028                     _printf_debug_MATRIX88:	
  6298                           
  6299                           ;incstack = 0
  6300                           ; Regs used in _printf_debug_MATRIX88: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  6301                           ;printf_debug_MATRIX88@enable stored from wreg
  6302  1028  00FA               	movwf	printf_debug_MATRIX88@enable
  6303                           
  6304                           ;teris_16f886.c: 552: if(enable == 1)
  6305  1029  037A               	decf	printf_debug_MATRIX88@enable,w
  6306  102A  1D03               	btfss	3,2
  6307  102B  0008               	return
  6308                           
  6309                           ;teris_16f886.c: 553: {
  6310                           ;teris_16f886.c: 554: if(lable != (0))
  6311  102C  0876               	movf	printf_debug_MATRIX88@lable,w
  6312  102D  0477               	iorwf	printf_debug_MATRIX88@lable+1,w
  6313  102E  1903               	btfsc	3,2
  6314  102F  2844               	goto	l239
  6315                           
  6316                           ;teris_16f886.c: 555: {
  6317                           ;teris_16f886.c: 556: debug_str(1, lable);
  6318  1030  0876               	movf	printf_debug_MATRIX88@lable,w
  6319  1031  00F3               	movwf	debug_str@str
  6320  1032  0877               	movf	printf_debug_MATRIX88@lable+1,w
  6321  1033  00F4               	movwf	debug_str@str+1
  6322  1034  3001               	movlw	1
  6323  1035  160A  158A  2036  160A  118A  	fcall	_debug_str
  6324                           
  6325                           ;teris_16f886.c: 557: debug_line(1, ":");
  6326  103A  30BF               	movlw	low (STR_5| (0+32768))
  6327  103B  00F3               	movwf	debug_line@str
  6328  103C  308D               	movlw	high (STR_5| (0+32768))
  6329  103D  00F4               	movwf	debug_line@str+1
  6330  103E  3001               	movlw	1
  6331  103F  160A  158A  20AA  160A  118A  	fcall	_debug_line
  6332  1044                     l239:	
  6333                           
  6334                           ;teris_16f886.c: 558: }
  6335                           ;teris_16f886.c: 559: debug_line(1, "<<<<<<<<<<<<<<<<<<<<MATRIX88");
  6336  1044  3040               	movlw	low (STR_22| (0+32768))
  6337  1045  00F3               	movwf	debug_line@str
  6338  1046  308A               	movlw	high (STR_22| (0+32768))
  6339  1047  00F4               	movwf	debug_line@str+1
  6340  1048  3001               	movlw	1
  6341  1049  160A  158A  20AA  160A  118A  	fcall	_debug_line
  6342                           
  6343                           ;teris_16f886.c: 560: for(uint8_t row = 0; row < 8; row++)
  6344  104E  01FB               	clrf	printf_debug_MATRIX88@row
  6345  104F  3008               	movlw	8
  6346  1050  027B               	subwf	printf_debug_MATRIX88@row,w
  6347  1051  1803               	btfsc	3,0
  6348  1052  28A5               	goto	l4969
  6349  1053                     l4947:	
  6350                           
  6351                           ;teris_16f886.c: 561: {
  6352                           ;teris_16f886.c: 562: for(uint8_t col = 0; col < 8; col++)
  6353  1053  01FC               	clrf	printf_debug_MATRIX88@col
  6354  1054  3008               	movlw	8
  6355  1055  027C               	subwf	printf_debug_MATRIX88@col,w
  6356  1056  1803               	btfsc	3,0
  6357  1057  2891               	goto	l4963
  6358  1058                     l4953:	
  6359                           
  6360                           ;teris_16f886.c: 563: {
  6361                           ;teris_16f886.c: 564: if(matrix->data[row][col] == 1)
  6362  1058  087B               	movf	printf_debug_MATRIX88@row,w
  6363  1059  1283               	bcf	3,5	;RP0=0, select bank0
  6364  105A  1303               	bcf	3,6	;RP1=0, select bank0
  6365  105B  00A0               	movwf	??_printf_debug_MATRIX88
  6366  105C  3002               	movlw	2
  6367  105D                     u6895:	
  6368  105D  1003               	clrc
  6369  105E  0DA0               	rlf	??_printf_debug_MATRIX88,f
  6370  105F  3EFF               	addlw	-1
  6371  1060  1D03               	skipz
  6372  1061  285D               	goto	u6895
  6373  1062  1003               	clrc
  6374  1063  0D20               	rlf	??_printf_debug_MATRIX88,w
  6375  1064  0778               	addwf	printf_debug_MATRIX88@matrix,w
  6376  1065  00A1               	movwf	??_printf_debug_MATRIX88+1
  6377  1066  0879               	movf	printf_debug_MATRIX88@matrix+1,w
  6378  1067  1803               	skipnc
  6379  1068  3E01               	addlw	1
  6380  1069  00A2               	movwf	??_printf_debug_MATRIX88+2
  6381  106A  087C               	movf	printf_debug_MATRIX88@col,w
  6382  106B  0721               	addwf	??_printf_debug_MATRIX88+1,w
  6383  106C  00A3               	movwf	??_printf_debug_MATRIX88+3
  6384  106D  0822               	movf	??_printf_debug_MATRIX88+2,w
  6385  106E  1803               	skipnc
  6386  106F  3E01               	addlw	1
  6387  1070  00A4               	movwf	??_printf_debug_MATRIX88+4
  6388  1071  0823               	movf	??_printf_debug_MATRIX88+3,w
  6389  1072  0084               	movwf	4
  6390  1073  1783               	bsf	3,7
  6391  1074  1C24               	btfss	??_printf_debug_MATRIX88+4,0
  6392  1075  1383               	bcf	3,7
  6393  1076  0300               	decf	0,w
  6394  1077  1D03               	btfss	3,2
  6395  1078  287D               	goto	l4957
  6396                           
  6397                           ;teris_16f886.c: 565: {
  6398                           ;teris_16f886.c: 566: debug_str(1, "*");
  6399  1079  30BD               	movlw	low (STR_7| (0+32768))
  6400  107A  00F3               	movwf	debug_str@str
  6401  107B  308D               	movlw	high (STR_7| (0+32768))
  6402  107C  2880               	goto	L10
  6403  107D                     l4957:	
  6404                           ;teris_16f886.c: 567: }
  6405                           
  6406                           
  6407                           ;teris_16f886.c: 568: else
  6408                           ;teris_16f886.c: 569: {
  6409                           ;teris_16f886.c: 570: debug_str(1, "_");
  6410  107D  30C1               	movlw	low (STR_8| (0+32768))
  6411  107E  00F3               	movwf	debug_str@str
  6412  107F  308D               	movlw	high (STR_8| (0+32768))
  6413  1080                     L10:	
  6414  1080  00F4               	movwf	debug_str@str+1
  6415  1081  3001               	movlw	1
  6416  1082  160A  158A  2036  160A  118A  	fcall	_debug_str
  6417  1087  3001               	movlw	1
  6418  1088  1283               	bcf	3,5	;RP0=0, select bank0
  6419  1089  1303               	bcf	3,6	;RP1=0, select bank0
  6420  108A  00A0               	movwf	??_printf_debug_MATRIX88
  6421  108B  0820               	movf	??_printf_debug_MATRIX88,w
  6422  108C  07FC               	addwf	printf_debug_MATRIX88@col,f
  6423  108D  3008               	movlw	8
  6424  108E  027C               	subwf	printf_debug_MATRIX88@col,w
  6425  108F  1C03               	skipc
  6426  1090  2858               	goto	l4953
  6427  1091                     l4963:	
  6428                           
  6429                           ;teris_16f886.c: 571: }
  6430                           ;teris_16f886.c: 572: }
  6431                           ;teris_16f886.c: 573: debug_line(1, "");
  6432  1091  30BC               	movlw	low ((STR_1+2)| (0+32768))
  6433  1092  00F3               	movwf	debug_line@str
  6434  1093  308D               	movlw	high ((STR_1+2)| (0+32768))
  6435  1094  00F4               	movwf	debug_line@str+1
  6436  1095  3001               	movlw	1
  6437  1096  160A  158A  20AA  160A  118A  	fcall	_debug_line
  6438  109B  3001               	movlw	1
  6439  109C  1283               	bcf	3,5	;RP0=0, select bank0
  6440  109D  1303               	bcf	3,6	;RP1=0, select bank0
  6441  109E  00A0               	movwf	??_printf_debug_MATRIX88
  6442  109F  0820               	movf	??_printf_debug_MATRIX88,w
  6443  10A0  07FB               	addwf	printf_debug_MATRIX88@row,f
  6444  10A1  3008               	movlw	8
  6445  10A2  027B               	subwf	printf_debug_MATRIX88@row,w
  6446  10A3  1C03               	skipc
  6447  10A4  2853               	goto	l4947
  6448  10A5                     l4969:	
  6449                           
  6450                           ;teris_16f886.c: 574: }
  6451                           ;teris_16f886.c: 575: debug_line(1, ">>>>>>>>>>>>>>>>>>>>");
  6452  10A5  3003               	movlw	low (STR_10| (0+32768))
  6453  10A6  00F3               	movwf	debug_line@str
  6454  10A7  308B               	movlw	high (STR_10| (0+32768))
  6455  10A8  00F4               	movwf	debug_line@str+1
  6456  10A9  3001               	movlw	1
  6457  10AA  160A  158A  20AA   	fcall	_debug_line
  6458  10AD  0008               	return
  6459  10AE                     __end_of_printf_debug_MATRIX88:	
  6460                           
  6461                           	psect	text11
  6462  1836                     __ptext11:	
  6463 ;; *************** function _debug_str *****************
  6464 ;; Defined at:
  6465 ;;		line 288 in file "teris_16f886.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;  enable          1    wreg     unsigned char 
  6468 ;;  str             2    3[COMMON] PTR const unsigned char 
  6469 ;;		 -> STR_98(12), STR_86(7), STR_62(15), STR_61(15), 
  6470 ;;		 -> STR_60(15), STR_24(2), STR_23(2), STR_18(2), 
  6471 ;;		 -> STR_17(2), STR_8(2), STR_7(2), ROM(8192), 
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;  enable          1    5[COMMON] unsigned char 
  6474 ;; Return value:  Size  Location     Type
  6475 ;;                  1    wreg      void 
  6476 ;; Registers used:
  6477 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6483 ;;      Params:         2       0       0       0       0
  6484 ;;      Locals:         1       0       0       0       0
  6485 ;;      Temps:          0       0       0       0       0
  6486 ;;      Totals:         3       0       0       0       0
  6487 ;;Total ram usage:        3 bytes
  6488 ;; Hardware stack levels used:    1
  6489 ;; Hardware stack levels required when called:    2
  6490 ;; This function calls:
  6491 ;;		_USARTWriteString
  6492 ;; This function is called by:
  6493 ;;		_printf_debug_MATRIX44
  6494 ;;		_printf_debug_cur_MATRIX44
  6495 ;;		_printf_debug_MATRIX88
  6496 ;;		_printf_debug_Screen
  6497 ;;		_printf_debug_MATRIX7219
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           
  6502                           ;psect for function _debug_str
  6503  1836                     _debug_str:	
  6504                           
  6505                           ;incstack = 0
  6506                           ; Regs used in _debug_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6507                           ;debug_str@enable stored from wreg
  6508  1836  00F5               	movwf	debug_str@enable
  6509                           
  6510                           ;teris_16f886.c: 290: if(enable == 1)
  6511  1837  0375               	decf	debug_str@enable,w
  6512  1838  1D03               	btfss	3,2
  6513  1839  0008               	return
  6514                           
  6515                           ;teris_16f886.c: 291: {
  6516                           ;teris_16f886.c: 295: USARTWriteString(str);
  6517  183A  0873               	movf	debug_str@str,w
  6518  183B  00F1               	movwf	USARTWriteString@str
  6519  183C  0874               	movf	debug_str@str+1,w
  6520  183D  00F2               	movwf	USARTWriteString@str+1
  6521  183E  160A  158A  214F   	fcall	_USARTWriteString
  6522  1841  0008               	return
  6523  1842                     __end_of_debug_str:	
  6524                           
  6525                           	psect	text12
  6526  1E2F                     __ptext12:	
  6527 ;; *************** function _merge1 *****************
  6528 ;; Defined at:
  6529 ;;		line 835 in file "teris_16f886.c"
  6530 ;; Parameters:    Size  Location     Type
  6531 ;;  x               1    wreg     char 
  6532 ;;  y               1    0[BANK0 ] char 
  6533 ;;  matrix44        2    1[BANK0 ] PTR const struct .
  6534 ;;		 -> g_matrix44(384), 
  6535 ;;  matrix88_in     1    3[BANK0 ] PTR const struct .
  6536 ;;		 -> g_matrix88(64), 
  6537 ;;  matrix88_out    1    4[BANK0 ] PTR struct .
  6538 ;;		 -> find_best_solution@temp_matrix88(64), 
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  x               1    9[BANK0 ] char 
  6541 ;;  col             1   13[BANK0 ] unsigned char 
  6542 ;;  row             1   12[BANK0 ] unsigned char 
  6543 ;;  len             2   10[BANK0 ] unsigned int 
  6544 ;; Return value:  Size  Location     Type
  6545 ;;                  1    wreg      void 
  6546 ;; Registers used:
  6547 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6548 ;; Tracked objects:
  6549 ;;		On entry : 0/0
  6550 ;;		On exit  : 0/0
  6551 ;;		Unchanged: 0/0
  6552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6553 ;;      Params:         0       5       0       0       0
  6554 ;;      Locals:         0       5       0       0       0
  6555 ;;      Temps:          0       4       0       0       0
  6556 ;;      Totals:         0      14       0       0       0
  6557 ;;Total ram usage:       14 bytes
  6558 ;; Hardware stack levels used:    1
  6559 ;; Hardware stack levels required when called:    1
  6560 ;; This function calls:
  6561 ;;		_memcpy
  6562 ;; This function is called by:
  6563 ;;		_find_best_solution
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           
  6568                           ;psect for function _merge1
  6569  1E2F                     _merge1:	
  6570                           
  6571                           ;incstack = 0
  6572                           ; Regs used in _merge1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6573                           ;merge1@x stored from wreg
  6574  1E2F  1283               	bcf	3,5	;RP0=0, select bank0
  6575  1E30  1303               	bcf	3,6	;RP1=0, select bank0
  6576  1E31  00A9               	movwf	merge1@x
  6577                           
  6578                           ;teris_16f886.c: 840: register size_t len;
  6579                           ;teris_16f886.c: 842: len = sizeof(MATRIX88);
  6580  1E32  3040               	movlw	64
  6581  1E33  00AA               	movwf	merge1@len
  6582  1E34  3000               	movlw	0
  6583  1E35  00AB               	movwf	merge1@len+1
  6584                           
  6585                           ;teris_16f886.c: 843: memcpy(matrix88_out, matrix88_in, len);
  6586  1E36  0824               	movf	merge1@matrix88_out,w
  6587  1E37  00F0               	movwf	memcpy@d1
  6588  1E38  3000               	movlw	0
  6589  1E39  00F1               	movwf	memcpy@d1+1
  6590  1E3A  0823               	movf	merge1@matrix88_in,w
  6591  1E3B  00F2               	movwf	memcpy@s1
  6592  1E3C  3001               	movlw	1
  6593  1E3D  00F3               	movwf	memcpy@s1+1
  6594  1E3E  082B               	movf	merge1@len+1,w
  6595  1E3F  00F5               	movwf	memcpy@n+1
  6596  1E40  082A               	movf	merge1@len,w
  6597  1E41  00F4               	movwf	memcpy@n
  6598  1E42  160A  158A  219D  160A  158A  	fcall	_memcpy
  6599                           
  6600                           ;teris_16f886.c: 845: for(uint8_t row = 0; row < 4; row++)
  6601  1E47  1283               	bcf	3,5	;RP0=0, select bank0
  6602  1E48  1303               	bcf	3,6	;RP1=0, select bank0
  6603  1E49  01AC               	clrf	merge1@row
  6604  1E4A                     L11:	
  6605  1E4A  3004               	movlw	4
  6606  1E4B  022C               	subwf	merge1@row,w
  6607  1E4C  1803               	btfsc	3,0
  6608  1E4D  0008               	return
  6609                           
  6610                           ;teris_16f886.c: 846: {
  6611                           ;teris_16f886.c: 847: for(uint8_t col = 0; col < 4; col++)
  6612  1E4E  01AD               	clrf	merge1@col
  6613  1E4F  3004               	movlw	4
  6614  1E50  022D               	subwf	merge1@col,w
  6615  1E51  1803               	btfsc	3,0
  6616  1E52  2E91               	goto	l5215
  6617  1E53                     l5207:	
  6618                           
  6619                           ;teris_16f886.c: 848: {
  6620                           ;teris_16f886.c: 849: if(matrix44->data[row][col] == 1)
  6621  1E53  082C               	movf	merge1@row,w
  6622  1E54  00A5               	movwf	??_merge1
  6623  1E55  01A6               	clrf	??_merge1+1
  6624  1E56  1003               	clrc
  6625  1E57  0DA5               	rlf	??_merge1,f
  6626  1E58  0DA6               	rlf	??_merge1+1,f
  6627  1E59  1003               	clrc
  6628  1E5A  0DA5               	rlf	??_merge1,f
  6629  1E5B  0DA6               	rlf	??_merge1+1,f
  6630  1E5C  0825               	movf	??_merge1,w
  6631  1E5D  0721               	addwf	merge1@matrix44,w
  6632  1E5E  00A7               	movwf	??_merge1+2
  6633  1E5F  0826               	movf	??_merge1+1,w
  6634  1E60  1803               	skipnc
  6635  1E61  0A26               	incf	??_merge1+1,w
  6636  1E62  0722               	addwf	merge1@matrix44+1,w
  6637  1E63  00A8               	movwf	??_merge1+3
  6638  1E64  082D               	movf	merge1@col,w
  6639  1E65  0727               	addwf	??_merge1+2,w
  6640  1E66  0084               	movwf	4
  6641  1E67  0828               	movf	??_merge1+3,w
  6642  1E68  1803               	skipnc
  6643  1E69  0A28               	incf	??_merge1+3,w
  6644  1E6A  00FF               	movwf	127
  6645  1E6B  120A  158A  2000  160A  158A  	fcall	stringtab
  6646  1E70  3A01               	xorlw	1
  6647  1E71  1D03               	skipz
  6648  1E72  2E89               	goto	l5211
  6649                           
  6650                           ;teris_16f886.c: 850: {
  6651                           ;teris_16f886.c: 851: matrix88_out->data[y + row][x + col] = 1;
  6652  1E73  082D               	movf	merge1@col,w
  6653  1E74  0729               	addwf	merge1@x,w
  6654  1E75  0724               	addwf	merge1@matrix88_out,w
  6655  1E76  00A5               	movwf	??_merge1
  6656  1E77  082C               	movf	merge1@row,w
  6657  1E78  0720               	addwf	merge1@y,w
  6658  1E79  00A6               	movwf	??_merge1+1
  6659  1E7A  3002               	movlw	2
  6660  1E7B                     u7445:	
  6661  1E7B  1003               	clrc
  6662  1E7C  0DA6               	rlf	??_merge1+1,f
  6663  1E7D  3EFF               	addlw	-1
  6664  1E7E  1D03               	skipz
  6665  1E7F  2E7B               	goto	u7445
  6666  1E80  1003               	clrc
  6667  1E81  0D26               	rlf	??_merge1+1,w
  6668  1E82  0725               	addwf	??_merge1,w
  6669  1E83  00A7               	movwf	??_merge1+2
  6670  1E84  0827               	movf	??_merge1+2,w
  6671  1E85  0084               	movwf	4
  6672  1E86  1383               	bcf	3,7	;select IRP bank0
  6673  1E87  0180               	clrf	0
  6674  1E88  0A80               	incf	0,f
  6675  1E89                     l5211:	
  6676  1E89  3001               	movlw	1
  6677  1E8A  00A5               	movwf	??_merge1
  6678  1E8B  0825               	movf	??_merge1,w
  6679  1E8C  07AD               	addwf	merge1@col,f
  6680  1E8D  3004               	movlw	4
  6681  1E8E  022D               	subwf	merge1@col,w
  6682  1E8F  1C03               	skipc
  6683  1E90  2E53               	goto	l5207
  6684  1E91                     l5215:	
  6685  1E91  3001               	movlw	1
  6686  1E92  00A5               	movwf	??_merge1
  6687  1E93  0825               	movf	??_merge1,w
  6688  1E94  07AC               	addwf	merge1@row,f
  6689  1E95  2E4A               	goto	L11
  6690  1E96                     __end_of_merge1:	
  6691                           
  6692                           	psect	text13
  6693  1A29                     __ptext13:	
  6694 ;; *************** function _left_most *****************
  6695 ;; Defined at:
  6696 ;;		line 890 in file "teris_16f886.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  x               1    wreg     char 
  6699 ;;  matrix44        2   36[BANK0 ] PTR const struct .
  6700 ;;		 -> g_matrix44(384), 
  6701 ;;  matrix88        1   38[BANK0 ] PTR const struct .
  6702 ;;		 -> g_matrix88(64), 
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;  x               1   40[BANK0 ] char 
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  1    wreg      char 
  6707 ;; Registers used:
  6708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6714 ;;      Params:         0       3       0       0       0
  6715 ;;      Locals:         0       1       0       0       0
  6716 ;;      Temps:          0       1       0       0       0
  6717 ;;      Totals:         0       5       0       0       0
  6718 ;;Total ram usage:        5 bytes
  6719 ;; Hardware stack levels used:    1
  6720 ;; Hardware stack levels required when called:    4
  6721 ;; This function calls:
  6722 ;;		_debug_int1
  6723 ;;		_is_left_boundary
  6724 ;; This function is called by:
  6725 ;;		_find_best_solution
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           
  6730                           ;psect for function _left_most
  6731  1A29                     _left_most:	
  6732                           
  6733                           ;incstack = 0
  6734                           ; Regs used in _left_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6735                           ;left_most@x stored from wreg
  6736  1A29  1283               	bcf	3,5	;RP0=0, select bank0
  6737  1A2A  1303               	bcf	3,6	;RP1=0, select bank0
  6738  1A2B  00C8               	movwf	left_most@x
  6739  1A2C                     l389:	
  6740                           ;teris_16f886.c: 892: while(1)
  6741                           
  6742                           
  6743                           ;teris_16f886.c: 893: {
  6744                           ;teris_16f886.c: 894: if(is_left_boundary(x, matrix44, matrix88) == LEFT_OVER_BOUNDARY)
  6745  1A2C  0844               	movf	left_most@matrix44,w
  6746  1A2D  00F6               	movwf	is_left_boundary@matrix44
  6747  1A2E  0845               	movf	left_most@matrix44+1,w
  6748  1A2F  00F7               	movwf	is_left_boundary@matrix44+1
  6749  1A30  0846               	movf	left_most@matrix88,w
  6750  1A31  00C7               	movwf	??_left_most
  6751  1A32  0847               	movf	??_left_most,w
  6752  1A33  00F8               	movwf	is_left_boundary@matrix88
  6753  1A34  0848               	movf	left_most@x,w
  6754  1A35  160A  158A  256F  160A  158A  	fcall	_is_left_boundary
  6755  1A3A  3A02               	xorlw	2
  6756  1A3B  1D03               	skipz
  6757  1A3C  2A54               	goto	l5267
  6758                           
  6759                           ;teris_16f886.c: 895: {
  6760                           ;teris_16f886.c: 896: debug_int1(0, "left_most = %d", x + 1);
  6761  1A3D  30D3               	movlw	low (STR_48| (0+32768))
  6762  1A3E  1283               	bcf	3,5	;RP0=0, select bank0
  6763  1A3F  1303               	bcf	3,6	;RP1=0, select bank0
  6764  1A40  00BF               	movwf	debug_int1@f
  6765  1A41  308C               	movlw	high (STR_48| (0+32768))
  6766  1A42  00C0               	movwf	debug_int1@f+1
  6767  1A43  3001               	movlw	1
  6768  1A44  0748               	addwf	left_most@x,w
  6769  1A45  00C1               	movwf	debug_int1@i
  6770  1A46  01C2               	clrf	debug_int1@i+1
  6771  1A47  1803               	skipnc
  6772  1A48  0AC2               	incf	debug_int1@i+1,f
  6773  1A49  1BC8               	btfsc	left_most@x,7
  6774  1A4A  03C2               	decf	debug_int1@i+1,f
  6775  1A4B  3000               	movlw	0
  6776  1A4C  160A  118A  2003   	fcall	_debug_int1
  6777                           
  6778                           ;teris_16f886.c: 897: return x + 1;
  6779  1A4F  1283               	bcf	3,5	;RP0=0, select bank0
  6780  1A50  1303               	bcf	3,6	;RP1=0, select bank0
  6781  1A51  0848               	movf	left_most@x,w
  6782  1A52  3E01               	addlw	1
  6783  1A53  0008               	return
  6784  1A54                     l5267:	
  6785                           
  6786                           ;teris_16f886.c: 898: }
  6787                           ;teris_16f886.c: 899: x--;
  6788  1A54  30FF               	movlw	255
  6789  1A55  1283               	bcf	3,5	;RP0=0, select bank0
  6790  1A56  1303               	bcf	3,6	;RP1=0, select bank0
  6791  1A57  00C7               	movwf	??_left_most
  6792  1A58  0847               	movf	??_left_most,w
  6793  1A59  07C8               	addwf	left_most@x,f
  6794  1A5A  2A2C               	goto	l389
  6795  1A5B                     __end_of_left_most:	
  6796                           
  6797                           	psect	text14
  6798  1D6F                     __ptext14:	
  6799 ;; *************** function _is_left_boundary *****************
  6800 ;; Defined at:
  6801 ;;		line 745 in file "teris_16f886.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  x               1    wreg     char 
  6804 ;;  matrix44        2    6[COMMON] PTR const struct .
  6805 ;;		 -> g_matrix44(384), 
  6806 ;;  matrix88        1    8[COMMON] PTR const struct .
  6807 ;;		 -> g_matrix88(64), 
  6808 ;; Auto vars:     Size  Location     Type
  6809 ;;  x               1    0[BANK0 ] char 
  6810 ;;  col             1    2[BANK0 ] char 
  6811 ;;  row             1    1[BANK0 ] char 
  6812 ;; Return value:  Size  Location     Type
  6813 ;;                  1    wreg      unsigned char 
  6814 ;; Registers used:
  6815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6816 ;; Tracked objects:
  6817 ;;		On entry : 0/0
  6818 ;;		On exit  : 0/0
  6819 ;;		Unchanged: 0/0
  6820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6821 ;;      Params:         3       0       0       0       0
  6822 ;;      Locals:         0       3       0       0       0
  6823 ;;      Temps:          5       0       0       0       0
  6824 ;;      Totals:         8       3       0       0       0
  6825 ;;Total ram usage:       11 bytes
  6826 ;; Hardware stack levels used:    1
  6827 ;; Hardware stack levels required when called:    3
  6828 ;; This function calls:
  6829 ;;		_debug_line
  6830 ;; This function is called by:
  6831 ;;		_left_most
  6832 ;; This function uses a non-reentrant model
  6833 ;;
  6834                           
  6835                           
  6836                           ;psect for function _is_left_boundary
  6837  1D6F                     _is_left_boundary:	
  6838                           
  6839                           ;incstack = 0
  6840                           ; Regs used in _is_left_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6841                           ;is_left_boundary@x stored from wreg
  6842  1D6F  1283               	bcf	3,5	;RP0=0, select bank0
  6843  1D70  1303               	bcf	3,6	;RP1=0, select bank0
  6844  1D71  00A0               	movwf	is_left_boundary@x
  6845                           
  6846                           ;teris_16f886.c: 747: for(int8_t row = 4 - 1; row >= 0; row--)
  6847  1D72  3003               	movlw	3
  6848  1D73  00F9               	movwf	??_is_left_boundary
  6849  1D74  0879               	movf	??_is_left_boundary,w
  6850  1D75  00A1               	movwf	is_left_boundary@row
  6851  1D76  1BA1               	btfsc	is_left_boundary@row,7
  6852  1D77  2DCC               	goto	l5021
  6853  1D78                     l4997:	
  6854                           
  6855                           ;teris_16f886.c: 748: {
  6856                           ;teris_16f886.c: 749: for(int8_t col = 0; col < 4; col++)
  6857  1D78  01A2               	clrf	is_left_boundary@col
  6858  1D79  0822               	movf	is_left_boundary@col,w
  6859  1D7A  3A80               	xorlw	128
  6860  1D7B  3E7C               	addlw	-132
  6861  1D7C  1803               	btfsc	3,0
  6862  1D7D  2DC6               	goto	l5017
  6863  1D7E                     l5003:	
  6864                           
  6865                           ;teris_16f886.c: 750: {
  6866                           ;teris_16f886.c: 751: if(matrix44->data[row][col] == 1)
  6867  1D7E  0821               	movf	is_left_boundary@row,w
  6868  1D7F  00F9               	movwf	??_is_left_boundary
  6869  1D80  01FA               	clrf	??_is_left_boundary+1
  6870  1D81  1003               	clrc
  6871  1D82  0DF9               	rlf	??_is_left_boundary,f
  6872  1D83  0DFA               	rlf	??_is_left_boundary+1,f
  6873  1D84  1003               	clrc
  6874  1D85  0DF9               	rlf	??_is_left_boundary,f
  6875  1D86  0DFA               	rlf	??_is_left_boundary+1,f
  6876  1D87  0879               	movf	??_is_left_boundary,w
  6877  1D88  0776               	addwf	is_left_boundary@matrix44,w
  6878  1D89  00FB               	movwf	??_is_left_boundary+2
  6879  1D8A  087A               	movf	??_is_left_boundary+1,w
  6880  1D8B  1803               	skipnc
  6881  1D8C  0A7A               	incf	??_is_left_boundary+1,w
  6882  1D8D  0777               	addwf	is_left_boundary@matrix44+1,w
  6883  1D8E  00FC               	movwf	??_is_left_boundary+3
  6884  1D8F  0822               	movf	is_left_boundary@col,w
  6885  1D90  077B               	addwf	??_is_left_boundary+2,w
  6886  1D91  0084               	movwf	4
  6887  1D92  087C               	movf	??_is_left_boundary+3,w
  6888  1D93  1803               	skipnc
  6889  1D94  0A7C               	incf	??_is_left_boundary+3,w
  6890  1D95  00FF               	movwf	127
  6891  1D96  120A  158A  2000  160A  158A  	fcall	stringtab
  6892  1D9B  3A01               	xorlw	1
  6893  1D9C  1D03               	skipz
  6894  1D9D  2DBB               	goto	l5013
  6895                           
  6896                           ;teris_16f886.c: 752: {
  6897                           ;teris_16f886.c: 753: if( x + col < 0)
  6898  1D9E  0822               	movf	is_left_boundary@col,w
  6899  1D9F  00F9               	movwf	??_is_left_boundary
  6900  1DA0  01FA               	clrf	??_is_left_boundary+1
  6901  1DA1  1BF9               	btfsc	??_is_left_boundary,7
  6902  1DA2  03FA               	decf	??_is_left_boundary+1,f
  6903  1DA3  0820               	movf	is_left_boundary@x,w
  6904  1DA4  00FB               	movwf	??_is_left_boundary+2
  6905  1DA5  01FC               	clrf	??_is_left_boundary+3
  6906  1DA6  1BFB               	btfsc	??_is_left_boundary+2,7
  6907  1DA7  03FC               	decf	??_is_left_boundary+3,f
  6908  1DA8  0879               	movf	??_is_left_boundary,w
  6909  1DA9  077B               	addwf	??_is_left_boundary+2,w
  6910  1DAA  087C               	movf	??_is_left_boundary+3,w
  6911  1DAB  1803               	skipnc
  6912  1DAC  0A7C               	incf	??_is_left_boundary+3,w
  6913  1DAD  077A               	addwf	??_is_left_boundary+1,w
  6914  1DAE  00FD               	movwf	??_is_left_boundary+4
  6915  1DAF  1FFD               	btfss	??_is_left_boundary+4,7
  6916  1DB0  2DBB               	goto	l5013
  6917                           
  6918                           ;teris_16f886.c: 754: {
  6919                           ;teris_16f886.c: 755: debug_line(0, "LEFT_OVER_BOUNDARY");
  6920  1DB1  30DE               	movlw	low (STR_41| (0+32768))
  6921  1DB2  00F3               	movwf	debug_line@str
  6922  1DB3  308B               	movlw	high (STR_41| (0+32768))
  6923  1DB4  00F4               	movwf	debug_line@str+1
  6924  1DB5  3000               	movlw	0
  6925  1DB6  160A  158A  20AA   	fcall	_debug_line
  6926                           
  6927                           ;teris_16f886.c: 756: return LEFT_OVER_BOUNDARY;
  6928  1DB9  3002               	movlw	2
  6929  1DBA  0008               	return
  6930  1DBB                     l5013:	
  6931  1DBB  3001               	movlw	1
  6932  1DBC  00F9               	movwf	??_is_left_boundary
  6933  1DBD  0879               	movf	??_is_left_boundary,w
  6934  1DBE  1283               	bcf	3,5	;RP0=0, select bank0
  6935  1DBF  1303               	bcf	3,6	;RP1=0, select bank0
  6936  1DC0  07A2               	addwf	is_left_boundary@col,f
  6937  1DC1  0822               	movf	is_left_boundary@col,w
  6938  1DC2  3A80               	xorlw	128
  6939  1DC3  3E7C               	addlw	-132
  6940  1DC4  1C03               	skipc
  6941  1DC5  2D7E               	goto	l5003
  6942  1DC6                     l5017:	
  6943  1DC6  30FF               	movlw	255
  6944  1DC7  00F9               	movwf	??_is_left_boundary
  6945  1DC8  0879               	movf	??_is_left_boundary,w
  6946  1DC9  07A1               	addwf	is_left_boundary@row,f
  6947  1DCA  1FA1               	btfss	is_left_boundary@row,7
  6948  1DCB  2D78               	goto	l4997
  6949  1DCC                     l5021:	
  6950                           
  6951                           ;teris_16f886.c: 757: }
  6952                           ;teris_16f886.c: 758: }
  6953                           ;teris_16f886.c: 759: }
  6954                           ;teris_16f886.c: 760: }
  6955                           ;teris_16f886.c: 761: return OK;
  6956  1DCC  3000               	movlw	0
  6957  1DCD  0008               	return
  6958  1DCE                     __end_of_is_left_boundary:	
  6959                           
  6960                           	psect	text15
  6961  11F3                     __ptext15:	
  6962 ;; *************** function _is_valid *****************
  6963 ;; Defined at:
  6964 ;;		line 711 in file "teris_16f886.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;  x               1    wreg     char 
  6967 ;;  y               1   38[BANK0 ] char 
  6968 ;;  matrix44        2   39[BANK0 ] PTR const struct .
  6969 ;;		 -> g_matrix44(384), 
  6970 ;;  matrix88        1   41[BANK0 ] PTR const struct .
  6971 ;;		 -> g_matrix88(64), 
  6972 ;; Auto vars:     Size  Location     Type
  6973 ;;  x               1   46[BANK0 ] char 
  6974 ;;  col             1   48[BANK0 ] char 
  6975 ;;  row             1   47[BANK0 ] char 
  6976 ;; Return value:  Size  Location     Type
  6977 ;;                  1    wreg      unsigned char 
  6978 ;; Registers used:
  6979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6980 ;; Tracked objects:
  6981 ;;		On entry : 0/0
  6982 ;;		On exit  : 0/0
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6985 ;;      Params:         0       4       0       0       0
  6986 ;;      Locals:         0       3       0       0       0
  6987 ;;      Temps:          0       4       0       0       0
  6988 ;;      Totals:         0      11       0       0       0
  6989 ;;Total ram usage:       11 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:    3
  6992 ;; This function calls:
  6993 ;;		_debug_int2
  6994 ;;		_debug_line
  6995 ;; This function is called by:
  6996 ;;		_find_best_solution
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           
  7001                           ;psect for function _is_valid
  7002  11F3                     _is_valid:	
  7003                           
  7004                           ;incstack = 0
  7005                           ; Regs used in _is_valid: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7006                           ;is_valid@x stored from wreg
  7007  11F3  1283               	bcf	3,5	;RP0=0, select bank0
  7008  11F4  1303               	bcf	3,6	;RP1=0, select bank0
  7009  11F5  00CE               	movwf	is_valid@x
  7010                           
  7011                           ;teris_16f886.c: 713: debug_line(0, "==============is_valid============");
  7012  11F6  30DD               	movlw	low (STR_33| (0+32768))
  7013  11F7  00F3               	movwf	debug_line@str
  7014  11F8  3089               	movlw	high (STR_33| (0+32768))
  7015  11F9  00F4               	movwf	debug_line@str+1
  7016  11FA  3000               	movlw	0
  7017  11FB  160A  158A  20AA  160A  118A  	fcall	_debug_line
  7018                           
  7019                           ;teris_16f886.c: 714: for(int8_t row = 4 - 1; row >= 0; row--)
  7020  1200  3003               	movlw	3
  7021  1201  1283               	bcf	3,5	;RP0=0, select bank0
  7022  1202  1303               	bcf	3,6	;RP1=0, select bank0
  7023  1203  00CA               	movwf	??_is_valid
  7024  1204  084A               	movf	??_is_valid,w
  7025  1205  00CF               	movwf	is_valid@row
  7026  1206  1BCF               	btfsc	is_valid@row,7
  7027  1207  2AF6               	goto	l5145
  7028  1208                     l5103:	
  7029                           
  7030                           ;teris_16f886.c: 715: {
  7031                           ;teris_16f886.c: 716: for(int8_t col = 0; col < 4; col++)
  7032  1208  01D0               	clrf	is_valid@col
  7033  1209  0850               	movf	is_valid@col,w
  7034  120A  3A80               	xorlw	128
  7035  120B  3E7C               	addlw	-132
  7036  120C  1803               	btfsc	3,0
  7037  120D  2AF0               	goto	l5141
  7038  120E                     l5109:	
  7039                           
  7040                           ;teris_16f886.c: 717: {
  7041                           ;teris_16f886.c: 718: if(matrix44->data[row][col] == 1)
  7042  120E  084F               	movf	is_valid@row,w
  7043  120F  00CA               	movwf	??_is_valid
  7044  1210  01CB               	clrf	??_is_valid+1
  7045  1211  1003               	clrc
  7046  1212  0DCA               	rlf	??_is_valid,f
  7047  1213  0DCB               	rlf	??_is_valid+1,f
  7048  1214  1003               	clrc
  7049  1215  0DCA               	rlf	??_is_valid,f
  7050  1216  0DCB               	rlf	??_is_valid+1,f
  7051  1217  084A               	movf	??_is_valid,w
  7052  1218  0747               	addwf	is_valid@matrix44,w
  7053  1219  00CC               	movwf	??_is_valid+2
  7054  121A  084B               	movf	??_is_valid+1,w
  7055  121B  1803               	skipnc
  7056  121C  0A4B               	incf	??_is_valid+1,w
  7057  121D  0748               	addwf	is_valid@matrix44+1,w
  7058  121E  00CD               	movwf	??_is_valid+3
  7059  121F  0850               	movf	is_valid@col,w
  7060  1220  074C               	addwf	??_is_valid+2,w
  7061  1221  0084               	movwf	4
  7062  1222  084D               	movf	??_is_valid+3,w
  7063  1223  1803               	skipnc
  7064  1224  0A4D               	incf	??_is_valid+3,w
  7065  1225  00FF               	movwf	127
  7066  1226  120A  158A  2000  160A  118A  	fcall	stringtab
  7067  122B  3A01               	xorlw	1
  7068  122C  1D03               	skipz
  7069  122D  2AE5               	goto	l5137
  7070                           
  7071                           ;teris_16f886.c: 719: {
  7072                           ;teris_16f886.c: 720: if(matrix88->data[y + row][x + col] == 1)
  7073  122E  0850               	movf	is_valid@col,w
  7074  122F  074E               	addwf	is_valid@x,w
  7075  1230  0749               	addwf	is_valid@matrix88,w
  7076  1231  00CA               	movwf	??_is_valid
  7077  1232  084F               	movf	is_valid@row,w
  7078  1233  0746               	addwf	is_valid@y,w
  7079  1234  00CB               	movwf	??_is_valid+1
  7080  1235  3002               	movlw	2
  7081  1236                     u7225:	
  7082  1236  1003               	clrc
  7083  1237  0DCB               	rlf	??_is_valid+1,f
  7084  1238  3EFF               	addlw	-1
  7085  1239  1D03               	skipz
  7086  123A  2A36               	goto	u7225
  7087  123B  1003               	clrc
  7088  123C  0D4B               	rlf	??_is_valid+1,w
  7089  123D  074A               	addwf	??_is_valid,w
  7090  123E  00CC               	movwf	??_is_valid+2
  7091  123F  084C               	movf	??_is_valid+2,w
  7092  1240  0084               	movwf	4
  7093  1241  1783               	bsf	3,7	;select IRP bank2
  7094  1242  0300               	decf	0,w
  7095  1243  1D03               	btfss	3,2
  7096  1244  2A65               	goto	l5119
  7097                           
  7098                           ;teris_16f886.c: 721: {
  7099                           ;teris_16f886.c: 722: debug_line(0, "not valid1");
  7100  1245  3043               	movlw	low (STR_34| (0+32768))
  7101  1246  00F3               	movwf	debug_line@str
  7102  1247  308D               	movlw	high (STR_34| (0+32768))
  7103  1248  00F4               	movwf	debug_line@str+1
  7104  1249  3000               	movlw	0
  7105  124A  160A  158A  20AA  160A  118A  	fcall	_debug_line
  7106                           
  7107                           ;teris_16f886.c: 723: debug_int2(0, "row = %d, col = %d", row, col);
  7108  124F  3096               	movlw	low ((STR_30+5)| (0+32768))
  7109  1250  1283               	bcf	3,5	;RP0=0, select bank0
  7110  1251  1303               	bcf	3,6	;RP1=0, select bank0
  7111  1252  00BF               	movwf	debug_int2@f
  7112  1253  308A               	movlw	high ((STR_30+5)| (0+32768))
  7113  1254  00C0               	movwf	debug_int2@f+1
  7114  1255  084F               	movf	is_valid@row,w
  7115  1256  00C1               	movwf	debug_int2@i1
  7116  1257  01C2               	clrf	debug_int2@i1+1
  7117  1258  1BC1               	btfsc	debug_int2@i1,7
  7118  1259  03C2               	decf	debug_int2@i1+1,f
  7119  125A  0850               	movf	is_valid@col,w
  7120  125B  00C3               	movwf	debug_int2@i2
  7121  125C  01C4               	clrf	debug_int2@i2+1
  7122  125D  1BC3               	btfsc	debug_int2@i2,7
  7123  125E  03C4               	decf	debug_int2@i2+1,f
  7124  125F  3000               	movlw	0
  7125  1260  160A  158A  2174   	fcall	_debug_int2
  7126                           
  7127                           ;teris_16f886.c: 724: return 0;
  7128  1263  3000               	movlw	0
  7129  1264  0008               	return
  7130  1265                     l5119:	
  7131                           
  7132                           ;teris_16f886.c: 725: }
  7133                           ;teris_16f886.c: 727: if(( x + col < 0) || (x + col >= 8))
  7134  1265  1283               	bcf	3,5	;RP0=0, select bank0
  7135  1266  1303               	bcf	3,6	;RP1=0, select bank0
  7136  1267  084E               	movf	is_valid@x,w
  7137  1268  0750               	addwf	is_valid@col,w
  7138  1269  00CA               	movwf	??_is_valid
  7139  126A  01CB               	clrf	??_is_valid+1
  7140  126B  1803               	skipnc
  7141  126C  0ACB               	incf	??_is_valid+1,f
  7142  126D  1BCE               	btfsc	is_valid@x,7
  7143  126E  03CB               	decf	??_is_valid+1,f
  7144  126F  1BD0               	btfsc	is_valid@col,7
  7145  1270  03CB               	decf	??_is_valid+1,f
  7146  1271  1283               	bcf	3,5	;RP0=0, select bank0
  7147  1272  1303               	bcf	3,6	;RP1=0, select bank0
  7148  1273  1BCB               	btfsc	??_is_valid+1,7
  7149  1274  2A8C               	goto	l5123
  7150  1275  084E               	movf	is_valid@x,w
  7151  1276  0750               	addwf	is_valid@col,w
  7152  1277  00CA               	movwf	??_is_valid
  7153  1278  01CB               	clrf	??_is_valid+1
  7154  1279  1803               	skipnc
  7155  127A  0ACB               	incf	??_is_valid+1,f
  7156  127B  1BCE               	btfsc	is_valid@x,7
  7157  127C  03CB               	decf	??_is_valid+1,f
  7158  127D  1BD0               	btfsc	is_valid@col,7
  7159  127E  03CB               	decf	??_is_valid+1,f
  7160  127F  1283               	bcf	3,5	;RP0=0, select bank0
  7161  1280  1303               	bcf	3,6	;RP1=0, select bank0
  7162  1281  084B               	movf	??_is_valid+1,w
  7163  1282  3A80               	xorlw	128
  7164  1283  00FF               	movwf	127
  7165  1284  3080               	movlw	128
  7166  1285  027F               	subwf	127,w
  7167  1286  1D03               	skipz
  7168  1287  2A8A               	goto	u7275
  7169  1288  3008               	movlw	8
  7170  1289  024A               	subwf	??_is_valid,w
  7171  128A                     u7275:	
  7172  128A  1C03               	skipc
  7173  128B  2AAC               	goto	l5129
  7174  128C                     l5123:	
  7175                           
  7176                           ;teris_16f886.c: 728: {
  7177                           ;teris_16f886.c: 729: debug_line(0, "not valid2");
  7178  128C  304E               	movlw	low (STR_36| (0+32768))
  7179  128D  00F3               	movwf	debug_line@str
  7180  128E  308D               	movlw	high (STR_36| (0+32768))
  7181  128F  00F4               	movwf	debug_line@str+1
  7182  1290  3000               	movlw	0
  7183  1291  160A  158A  20AA  160A  118A  	fcall	_debug_line
  7184                           
  7185                           ;teris_16f886.c: 730: debug_int2(0, "row = %d, col = %d", row, col);
  7186  1296  3096               	movlw	low ((STR_30+5)| (0+32768))
  7187  1297  1283               	bcf	3,5	;RP0=0, select bank0
  7188  1298  1303               	bcf	3,6	;RP1=0, select bank0
  7189  1299  00BF               	movwf	debug_int2@f
  7190  129A  308A               	movlw	high ((STR_30+5)| (0+32768))
  7191  129B  00C0               	movwf	debug_int2@f+1
  7192  129C  084F               	movf	is_valid@row,w
  7193  129D  00C1               	movwf	debug_int2@i1
  7194  129E  01C2               	clrf	debug_int2@i1+1
  7195  129F  1BC1               	btfsc	debug_int2@i1,7
  7196  12A0  03C2               	decf	debug_int2@i1+1,f
  7197  12A1  0850               	movf	is_valid@col,w
  7198  12A2  00C3               	movwf	debug_int2@i2
  7199  12A3  01C4               	clrf	debug_int2@i2+1
  7200  12A4  1BC3               	btfsc	debug_int2@i2,7
  7201  12A5  03C4               	decf	debug_int2@i2+1,f
  7202  12A6  3000               	movlw	0
  7203  12A7  160A  158A  2174   	fcall	_debug_int2
  7204                           
  7205                           ;teris_16f886.c: 731: return 0;
  7206  12AA  3000               	movlw	0
  7207  12AB  0008               	return
  7208  12AC                     l5129:	
  7209                           
  7210                           ;teris_16f886.c: 732: }
  7211                           ;teris_16f886.c: 733: if((y + row) > (8 - 1))
  7212  12AC  1283               	bcf	3,5	;RP0=0, select bank0
  7213  12AD  1303               	bcf	3,6	;RP1=0, select bank0
  7214  12AE  0846               	movf	is_valid@y,w
  7215  12AF  074F               	addwf	is_valid@row,w
  7216  12B0  00CA               	movwf	??_is_valid
  7217  12B1  01CB               	clrf	??_is_valid+1
  7218  12B2  1803               	skipnc
  7219  12B3  0ACB               	incf	??_is_valid+1,f
  7220  12B4  1BC6               	btfsc	is_valid@y,7
  7221  12B5  03CB               	decf	??_is_valid+1,f
  7222  12B6  1BCF               	btfsc	is_valid@row,7
  7223  12B7  03CB               	decf	??_is_valid+1,f
  7224  12B8  1283               	bcf	3,5	;RP0=0, select bank0
  7225  12B9  1303               	bcf	3,6	;RP1=0, select bank0
  7226  12BA  084B               	movf	??_is_valid+1,w
  7227  12BB  3A80               	xorlw	128
  7228  12BC  00FF               	movwf	127
  7229  12BD  3080               	movlw	128
  7230  12BE  027F               	subwf	127,w
  7231  12BF  1D03               	skipz
  7232  12C0  2AC3               	goto	u7295
  7233  12C1  3008               	movlw	8
  7234  12C2  024A               	subwf	??_is_valid,w
  7235  12C3                     u7295:	
  7236  12C3  1C03               	skipc
  7237  12C4  2AE5               	goto	l5137
  7238                           
  7239                           ;teris_16f886.c: 734: {
  7240                           ;teris_16f886.c: 735: debug_line(0, "not valid3");
  7241  12C5  3059               	movlw	low (STR_38| (0+32768))
  7242  12C6  00F3               	movwf	debug_line@str
  7243  12C7  308D               	movlw	high (STR_38| (0+32768))
  7244  12C8  00F4               	movwf	debug_line@str+1
  7245  12C9  3000               	movlw	0
  7246  12CA  160A  158A  20AA  160A  118A  	fcall	_debug_line
  7247                           
  7248                           ;teris_16f886.c: 736: debug_int2(0, "row = %d, col = %d", row, col);
  7249  12CF  3096               	movlw	low ((STR_30+5)| (0+32768))
  7250  12D0  1283               	bcf	3,5	;RP0=0, select bank0
  7251  12D1  1303               	bcf	3,6	;RP1=0, select bank0
  7252  12D2  00BF               	movwf	debug_int2@f
  7253  12D3  308A               	movlw	high ((STR_30+5)| (0+32768))
  7254  12D4  00C0               	movwf	debug_int2@f+1
  7255  12D5  084F               	movf	is_valid@row,w
  7256  12D6  00C1               	movwf	debug_int2@i1
  7257  12D7  01C2               	clrf	debug_int2@i1+1
  7258  12D8  1BC1               	btfsc	debug_int2@i1,7
  7259  12D9  03C2               	decf	debug_int2@i1+1,f
  7260  12DA  0850               	movf	is_valid@col,w
  7261  12DB  00C3               	movwf	debug_int2@i2
  7262  12DC  01C4               	clrf	debug_int2@i2+1
  7263  12DD  1BC3               	btfsc	debug_int2@i2,7
  7264  12DE  03C4               	decf	debug_int2@i2+1,f
  7265  12DF  3000               	movlw	0
  7266  12E0  160A  158A  2174   	fcall	_debug_int2
  7267                           
  7268                           ;teris_16f886.c: 737: return 0;
  7269  12E3  3000               	movlw	0
  7270  12E4  0008               	return
  7271  12E5                     l5137:	
  7272  12E5  3001               	movlw	1
  7273  12E6  1283               	bcf	3,5	;RP0=0, select bank0
  7274  12E7  1303               	bcf	3,6	;RP1=0, select bank0
  7275  12E8  00CA               	movwf	??_is_valid
  7276  12E9  084A               	movf	??_is_valid,w
  7277  12EA  07D0               	addwf	is_valid@col,f
  7278  12EB  0850               	movf	is_valid@col,w
  7279  12EC  3A80               	xorlw	128
  7280  12ED  3E7C               	addlw	-132
  7281  12EE  1C03               	skipc
  7282  12EF  2A0E               	goto	l5109
  7283  12F0                     l5141:	
  7284  12F0  30FF               	movlw	255
  7285  12F1  00CA               	movwf	??_is_valid
  7286  12F2  084A               	movf	??_is_valid,w
  7287  12F3  07CF               	addwf	is_valid@row,f
  7288  12F4  1FCF               	btfss	is_valid@row,7
  7289  12F5  2A08               	goto	l5103
  7290  12F6                     l5145:	
  7291                           
  7292                           ;teris_16f886.c: 738: }
  7293                           ;teris_16f886.c: 739: }
  7294                           ;teris_16f886.c: 740: }
  7295                           ;teris_16f886.c: 741: }
  7296                           ;teris_16f886.c: 742: debug_line(0, "valid");
  7297  12F6  30AF               	movlw	low (STR_40| (0+32768))
  7298  12F7  00F3               	movwf	debug_line@str
  7299  12F8  308D               	movlw	high (STR_40| (0+32768))
  7300  12F9  00F4               	movwf	debug_line@str+1
  7301  12FA  3000               	movlw	0
  7302  12FB  160A  158A  20AA   	fcall	_debug_line
  7303                           
  7304                           ;teris_16f886.c: 743: return 1;
  7305  12FE  3001               	movlw	1
  7306  12FF  0008               	return
  7307  1300                     __end_of_is_valid:	
  7308                           
  7309                           	psect	text16
  7310  0EA9                     __ptext16:	
  7311 ;; *************** function _get_holes_after_merge *****************
  7312 ;; Defined at:
  7313 ;;		line 943 in file "teris_16f886.c"
  7314 ;; Parameters:    Size  Location     Type
  7315 ;;  matrix          1    wreg     PTR struct .
  7316 ;;		 -> find_best_solution@temp_matrix88(64), 
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;  matrix          1   44[BANK0 ] PTR struct .
  7319 ;;		 -> find_best_solution@temp_matrix88(64), 
  7320 ;;  row             1   47[BANK0 ] char 
  7321 ;;  col             1   46[BANK0 ] char 
  7322 ;;  start           1   45[BANK0 ] char 
  7323 ;;  stop            1   43[BANK0 ] char 
  7324 ;;  num_hole        1   42[BANK0 ] unsigned char 
  7325 ;; Return value:  Size  Location     Type
  7326 ;;                  1    wreg      unsigned char 
  7327 ;; Registers used:
  7328 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7329 ;; Tracked objects:
  7330 ;;		On entry : 0/0
  7331 ;;		On exit  : 0/0
  7332 ;;		Unchanged: 0/0
  7333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7334 ;;      Params:         0       0       0       0       0
  7335 ;;      Locals:         0       6       0       0       0
  7336 ;;      Temps:          0       6       0       0       0
  7337 ;;      Totals:         0      12       0       0       0
  7338 ;;Total ram usage:       12 bytes
  7339 ;; Hardware stack levels used:    1
  7340 ;; Hardware stack levels required when called:    3
  7341 ;; This function calls:
  7342 ;;		_debug_int1
  7343 ;; This function is called by:
  7344 ;;		_find_best_solution
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           
  7349                           ;psect for function _get_holes_after_merge
  7350  0EA9                     _get_holes_after_merge:	
  7351                           
  7352                           ;incstack = 0
  7353                           ; Regs used in _get_holes_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  7354                           ;get_holes_after_merge@matrix stored from wreg
  7355  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  7356  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  7357  0EAB  00CC               	movwf	get_holes_after_merge@matrix
  7358                           
  7359                           ;teris_16f886.c: 945: int8_t start = -1;
  7360  0EAC  01CD               	clrf	get_holes_after_merge@start
  7361  0EAD  03CD               	decf	get_holes_after_merge@start,f
  7362                           
  7363                           ;teris_16f886.c: 946: int8_t stop = -1;
  7364  0EAE  01CB               	clrf	get_holes_after_merge@stop
  7365  0EAF  03CB               	decf	get_holes_after_merge@stop,f
  7366                           
  7367                           ;teris_16f886.c: 947: uint8_t num_hole = 0;
  7368  0EB0  01CA               	clrf	get_holes_after_merge@num_hole
  7369                           
  7370                           ;teris_16f886.c: 948: for(int8_t col = 0; col < 8; col++)
  7371  0EB1  01CE               	clrf	get_holes_after_merge@col
  7372  0EB2  084E               	movf	get_holes_after_merge@col,w
  7373  0EB3  3A80               	xorlw	128
  7374  0EB4  3E78               	addlw	-136
  7375  0EB5  1803               	btfsc	3,0
  7376  0EB6  2FED               	goto	l5405
  7377  0EB7                     l5339:	
  7378                           
  7379                           ;teris_16f886.c: 949: {
  7380                           ;teris_16f886.c: 950: start = stop = -1;
  7381  0EB7  30FF               	movlw	255
  7382  0EB8  00CB               	movwf	get_holes_after_merge@stop
  7383  0EB9  00C4               	movwf	??_get_holes_after_merge
  7384  0EBA  0844               	movf	??_get_holes_after_merge,w
  7385  0EBB  00CD               	movwf	get_holes_after_merge@start
  7386                           
  7387                           ;teris_16f886.c: 951: for(int8_t row = 0; row < 8; row++)
  7388  0EBC  01CF               	clrf	get_holes_after_merge@row
  7389  0EBD  084F               	movf	get_holes_after_merge@row,w
  7390  0EBE  3A80               	xorlw	128
  7391  0EBF  3E78               	addlw	-136
  7392  0EC0  1803               	btfsc	3,0
  7393  0EC1  2F84               	goto	l420
  7394  0EC2                     l5347:	
  7395                           
  7396                           ;teris_16f886.c: 952: {
  7397                           ;teris_16f886.c: 953: if(col == 0)
  7398  0EC2  084E               	movf	get_holes_after_merge@col,w
  7399  0EC3  1D03               	btfss	3,2
  7400  0EC4  2EE7               	goto	l5357
  7401                           
  7402                           ;teris_16f886.c: 954: {
  7403                           ;teris_16f886.c: 955: if((matrix->data[row][col] == 0) && (matrix->data[row][col + 1] ==
      +                           1))
  7404  0EC5  084F               	movf	get_holes_after_merge@row,w
  7405  0EC6  00C4               	movwf	??_get_holes_after_merge
  7406  0EC7  3002               	movlw	2
  7407  0EC8                     u7735:	
  7408  0EC8  1003               	clrc
  7409  0EC9  0DC4               	rlf	??_get_holes_after_merge,f
  7410  0ECA  3EFF               	addlw	-1
  7411  0ECB  1D03               	skipz
  7412  0ECC  2EC8               	goto	u7735
  7413  0ECD  1003               	clrc
  7414  0ECE  0D44               	rlf	??_get_holes_after_merge,w
  7415  0ECF  074C               	addwf	get_holes_after_merge@matrix,w
  7416  0ED0  00C5               	movwf	??_get_holes_after_merge+1
  7417  0ED1  084E               	movf	get_holes_after_merge@col,w
  7418  0ED2  0745               	addwf	??_get_holes_after_merge+1,w
  7419  0ED3  00C6               	movwf	??_get_holes_after_merge+2
  7420  0ED4  0846               	movf	??_get_holes_after_merge+2,w
  7421  0ED5  0084               	movwf	4
  7422  0ED6  1383               	bcf	3,7	;select IRP bank0
  7423  0ED7  0800               	movf	0,w
  7424  0ED8  1D03               	btfss	3,2
  7425  0ED9  2F53               	goto	l5377
  7426  0EDA  084E               	movf	get_holes_after_merge@col,w
  7427  0EDB  3E01               	addlw	1
  7428  0EDC  074C               	addwf	get_holes_after_merge@matrix,w
  7429  0EDD  00C4               	movwf	??_get_holes_after_merge
  7430  0EDE  084F               	movf	get_holes_after_merge@row,w
  7431  0EDF  00C5               	movwf	??_get_holes_after_merge+1
  7432  0EE0  3002               	movlw	2
  7433  0EE1                     u7755:	
  7434  0EE1  1003               	clrc
  7435  0EE2  0DC5               	rlf	??_get_holes_after_merge+1,f
  7436  0EE3  3EFF               	addlw	-1
  7437  0EE4  1D03               	skipz
  7438  0EE5  2EE1               	goto	u7755
  7439  0EE6  2F43               	goto	L13
  7440  0EE7                     l5357:	
  7441                           ;teris_16f886.c: 960: }
  7442                           ;teris_16f886.c: 961: }
  7443                           ;teris_16f886.c: 962: }
  7444                           
  7445                           ;teris_16f886.c: 958: {
  7446                           ;teris_16f886.c: 959: start = row;
  7447                           
  7448                           ;teris_16f886.c: 956: {
  7449                           ;teris_16f886.c: 957: if(start == -1)
  7450                           
  7451                           
  7452                           ;teris_16f886.c: 963: else if(col == 8 - 1)
  7453  0EE7  3007               	movlw	7
  7454  0EE8  064E               	xorwf	get_holes_after_merge@col,w
  7455  0EE9  1D03               	btfss	3,2
  7456  0EEA  2F0D               	goto	l5367
  7457                           
  7458                           ;teris_16f886.c: 964: {
  7459                           ;teris_16f886.c: 965: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] ==
      +                           1))
  7460  0EEB  084F               	movf	get_holes_after_merge@row,w
  7461  0EEC  00C4               	movwf	??_get_holes_after_merge
  7462  0EED  3002               	movlw	2
  7463  0EEE                     u7795:	
  7464  0EEE  1003               	clrc
  7465  0EEF  0DC4               	rlf	??_get_holes_after_merge,f
  7466  0EF0  3EFF               	addlw	-1
  7467  0EF1  1D03               	skipz
  7468  0EF2  2EEE               	goto	u7795
  7469  0EF3  1003               	clrc
  7470  0EF4  0D44               	rlf	??_get_holes_after_merge,w
  7471  0EF5  074C               	addwf	get_holes_after_merge@matrix,w
  7472  0EF6  00C5               	movwf	??_get_holes_after_merge+1
  7473  0EF7  084E               	movf	get_holes_after_merge@col,w
  7474  0EF8  0745               	addwf	??_get_holes_after_merge+1,w
  7475  0EF9  00C6               	movwf	??_get_holes_after_merge+2
  7476  0EFA  0846               	movf	??_get_holes_after_merge+2,w
  7477  0EFB  0084               	movwf	4
  7478  0EFC  1383               	bcf	3,7	;select IRP bank0
  7479  0EFD  0800               	movf	0,w
  7480  0EFE  1D03               	btfss	3,2
  7481  0EFF  2F53               	goto	l5377
  7482  0F00  084E               	movf	get_holes_after_merge@col,w
  7483  0F01  3EFF               	addlw	255
  7484  0F02  074C               	addwf	get_holes_after_merge@matrix,w
  7485  0F03  00C4               	movwf	??_get_holes_after_merge
  7486  0F04  084F               	movf	get_holes_after_merge@row,w
  7487  0F05  00C5               	movwf	??_get_holes_after_merge+1
  7488  0F06  3002               	movlw	2
  7489  0F07                     u7815:	
  7490  0F07  1003               	clrc
  7491  0F08  0DC5               	rlf	??_get_holes_after_merge+1,f
  7492  0F09  3EFF               	addlw	-1
  7493  0F0A  1D03               	skipz
  7494  0F0B  2F07               	goto	u7815
  7495  0F0C  2F43               	goto	L13
  7496  0F0D                     l5367:	
  7497                           ;teris_16f886.c: 970: }
  7498                           ;teris_16f886.c: 971: }
  7499                           ;teris_16f886.c: 972: }
  7500                           
  7501                           ;teris_16f886.c: 968: {
  7502                           ;teris_16f886.c: 969: start = row;
  7503                           
  7504                           ;teris_16f886.c: 966: {
  7505                           ;teris_16f886.c: 967: if(start == -1)
  7506                           
  7507                           
  7508                           ;teris_16f886.c: 973: else
  7509                           ;teris_16f886.c: 974: {
  7510                           ;teris_16f886.c: 975: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] ==
      +                           1) && (matrix->data[row][col + 1] == 1))
  7511  0F0D  084F               	movf	get_holes_after_merge@row,w
  7512  0F0E  00C4               	movwf	??_get_holes_after_merge
  7513  0F0F  3002               	movlw	2
  7514  0F10                     u7845:	
  7515  0F10  1003               	clrc
  7516  0F11  0DC4               	rlf	??_get_holes_after_merge,f
  7517  0F12  3EFF               	addlw	-1
  7518  0F13  1D03               	skipz
  7519  0F14  2F10               	goto	u7845
  7520  0F15  1003               	clrc
  7521  0F16  0D44               	rlf	??_get_holes_after_merge,w
  7522  0F17  074C               	addwf	get_holes_after_merge@matrix,w
  7523  0F18  00C5               	movwf	??_get_holes_after_merge+1
  7524  0F19  084E               	movf	get_holes_after_merge@col,w
  7525  0F1A  0745               	addwf	??_get_holes_after_merge+1,w
  7526  0F1B  00C6               	movwf	??_get_holes_after_merge+2
  7527  0F1C  0846               	movf	??_get_holes_after_merge+2,w
  7528  0F1D  0084               	movwf	4
  7529  0F1E  1383               	bcf	3,7	;select IRP bank0
  7530  0F1F  0800               	movf	0,w
  7531  0F20  1D03               	btfss	3,2
  7532  0F21  2F53               	goto	l5377
  7533  0F22  084E               	movf	get_holes_after_merge@col,w
  7534  0F23  3EFF               	addlw	255
  7535  0F24  074C               	addwf	get_holes_after_merge@matrix,w
  7536  0F25  00C4               	movwf	??_get_holes_after_merge
  7537  0F26  084F               	movf	get_holes_after_merge@row,w
  7538  0F27  00C5               	movwf	??_get_holes_after_merge+1
  7539  0F28  3002               	movlw	2
  7540  0F29                     u7865:	
  7541  0F29  1003               	clrc
  7542  0F2A  0DC5               	rlf	??_get_holes_after_merge+1,f
  7543  0F2B  3EFF               	addlw	-1
  7544  0F2C  1D03               	skipz
  7545  0F2D  2F29               	goto	u7865
  7546  0F2E  1003               	clrc
  7547  0F2F  0D45               	rlf	??_get_holes_after_merge+1,w
  7548  0F30  0744               	addwf	??_get_holes_after_merge,w
  7549  0F31  00C6               	movwf	??_get_holes_after_merge+2
  7550  0F32  0846               	movf	??_get_holes_after_merge+2,w
  7551  0F33  0084               	movwf	4
  7552  0F34  0300               	decf	0,w
  7553  0F35  1D03               	btfss	3,2
  7554  0F36  2F53               	goto	l5377
  7555  0F37  084E               	movf	get_holes_after_merge@col,w
  7556  0F38  3E01               	addlw	1
  7557  0F39  074C               	addwf	get_holes_after_merge@matrix,w
  7558  0F3A  00C4               	movwf	??_get_holes_after_merge
  7559  0F3B  084F               	movf	get_holes_after_merge@row,w
  7560  0F3C  00C5               	movwf	??_get_holes_after_merge+1
  7561  0F3D  3002               	movlw	2
  7562  0F3E                     u7885:	
  7563  0F3E  1003               	clrc
  7564  0F3F  0DC5               	rlf	??_get_holes_after_merge+1,f
  7565  0F40  3EFF               	addlw	-1
  7566  0F41  1D03               	skipz
  7567  0F42  2F3E               	goto	u7885
  7568  0F43                     L13:	
  7569  0F43  1003               	clrc
  7570  0F44  0D45               	rlf	??_get_holes_after_merge+1,w
  7571  0F45  0744               	addwf	??_get_holes_after_merge,w
  7572  0F46  00C6               	movwf	??_get_holes_after_merge+2
  7573  0F47  0846               	movf	??_get_holes_after_merge+2,w
  7574  0F48  0084               	movwf	4
  7575  0F49  0300               	decf	0,w
  7576  0F4A  1D03               	btfss	3,2
  7577  0F4B  2F53               	goto	l5377
  7578                           
  7579                           ;teris_16f886.c: 976: {
  7580                           ;teris_16f886.c: 977: if(start == -1)
  7581  0F4C  0A4D               	incf	get_holes_after_merge@start,w
  7582  0F4D  1D03               	btfss	3,2
  7583  0F4E  2F53               	goto	l5377
  7584                           
  7585                           ;teris_16f886.c: 978: {
  7586                           ;teris_16f886.c: 979: start = row;
  7587  0F4F  084F               	movf	get_holes_after_merge@row,w
  7588  0F50  00C4               	movwf	??_get_holes_after_merge
  7589  0F51  0844               	movf	??_get_holes_after_merge,w
  7590  0F52  00CD               	movwf	get_holes_after_merge@start
  7591  0F53                     l5377:	
  7592                           
  7593                           ;teris_16f886.c: 980: }
  7594                           ;teris_16f886.c: 981: }
  7595                           ;teris_16f886.c: 982: }
  7596                           ;teris_16f886.c: 983: if(start >= 0)
  7597  0F53  1BCD               	btfsc	get_holes_after_merge@start,7
  7598  0F54  2F7B               	goto	l431
  7599                           
  7600                           ;teris_16f886.c: 984: {
  7601                           ;teris_16f886.c: 985: if(row == 8 - 1)
  7602  0F55  3007               	movlw	7
  7603  0F56  064F               	xorwf	get_holes_after_merge@row,w
  7604  0F57  1D03               	btfss	3,2
  7605  0F58  2F5E               	goto	l5385
  7606                           
  7607                           ;teris_16f886.c: 986: {
  7608                           ;teris_16f886.c: 987: if(stop == -1)
  7609  0F59  0A4B               	incf	get_holes_after_merge@stop,w
  7610  0F5A  1D03               	btfss	3,2
  7611  0F5B  2F7B               	goto	l431
  7612                           
  7613                           ;teris_16f886.c: 988: {
  7614                           ;teris_16f886.c: 989: stop = 8;
  7615  0F5C  3008               	movlw	8
  7616  0F5D  2F78               	goto	L12
  7617  0F5E                     l5385:	
  7618                           ;teris_16f886.c: 990: }
  7619                           ;teris_16f886.c: 991: }
  7620                           
  7621                           
  7622                           ;teris_16f886.c: 992: else if(matrix->data[row + 1][col] == 1)
  7623  0F5E  084F               	movf	get_holes_after_merge@row,w
  7624  0F5F  00C4               	movwf	??_get_holes_after_merge
  7625  0F60  3002               	movlw	2
  7626  0F61                     u7945:	
  7627  0F61  1003               	clrc
  7628  0F62  0DC4               	rlf	??_get_holes_after_merge,f
  7629  0F63  3EFF               	addlw	-1
  7630  0F64  1D03               	skipz
  7631  0F65  2F61               	goto	u7945
  7632  0F66  1003               	clrc
  7633  0F67  0D44               	rlf	??_get_holes_after_merge,w
  7634  0F68  3E08               	addlw	8
  7635  0F69  074C               	addwf	get_holes_after_merge@matrix,w
  7636  0F6A  00C5               	movwf	??_get_holes_after_merge+1
  7637  0F6B  084E               	movf	get_holes_after_merge@col,w
  7638  0F6C  0745               	addwf	??_get_holes_after_merge+1,w
  7639  0F6D  00C6               	movwf	??_get_holes_after_merge+2
  7640  0F6E  0846               	movf	??_get_holes_after_merge+2,w
  7641  0F6F  0084               	movwf	4
  7642  0F70  0300               	decf	0,w
  7643  0F71  1D03               	btfss	3,2
  7644  0F72  2F7B               	goto	l431
  7645                           
  7646                           ;teris_16f886.c: 993: {
  7647                           ;teris_16f886.c: 994: if(stop == -1)
  7648  0F73  0A4B               	incf	get_holes_after_merge@stop,w
  7649  0F74  1D03               	btfss	3,2
  7650  0F75  2F7B               	goto	l431
  7651                           
  7652                           ;teris_16f886.c: 995: {
  7653                           ;teris_16f886.c: 996: stop = row + 1;
  7654  0F76  084F               	movf	get_holes_after_merge@row,w
  7655  0F77  3E01               	addlw	1
  7656  0F78                     L12:	
  7657  0F78  00C4               	movwf	??_get_holes_after_merge
  7658  0F79  0844               	movf	??_get_holes_after_merge,w
  7659  0F7A  00CB               	movwf	get_holes_after_merge@stop
  7660  0F7B                     l431:	
  7661  0F7B  3001               	movlw	1
  7662  0F7C  00C4               	movwf	??_get_holes_after_merge
  7663  0F7D  0844               	movf	??_get_holes_after_merge,w
  7664  0F7E  07CF               	addwf	get_holes_after_merge@row,f
  7665  0F7F  084F               	movf	get_holes_after_merge@row,w
  7666  0F80  3A80               	xorlw	128
  7667  0F81  3E78               	addlw	-136
  7668  0F82  1C03               	skipc
  7669  0F83  2EC2               	goto	l5347
  7670  0F84                     l420:	
  7671                           
  7672                           ;teris_16f886.c: 997: }
  7673                           ;teris_16f886.c: 998: }
  7674                           ;teris_16f886.c: 999: }
  7675                           ;teris_16f886.c: 1001: }
  7676                           ;teris_16f886.c: 1002: if((start >= 0) && (stop >= 0) && (stop - start >= 3))
  7677  0F84  1FCD               	btfss	get_holes_after_merge@start,7
  7678  0F85  1BCB               	btfsc	get_holes_after_merge@stop,7
  7679  0F86  2FE2               	goto	l5401
  7680  0F87  084D               	movf	get_holes_after_merge@start,w
  7681  0F88  00C4               	movwf	??_get_holes_after_merge
  7682  0F89  01C5               	clrf	??_get_holes_after_merge+1
  7683  0F8A  1BC4               	btfsc	??_get_holes_after_merge,7
  7684  0F8B  03C5               	decf	??_get_holes_after_merge+1,f
  7685  0F8C  09C4               	comf	??_get_holes_after_merge,f
  7686  0F8D  09C5               	comf	??_get_holes_after_merge+1,f
  7687  0F8E  0AC4               	incf	??_get_holes_after_merge,f
  7688  0F8F  1903               	skipnz
  7689  0F90  0AC5               	incf	??_get_holes_after_merge+1,f
  7690  0F91  084B               	movf	get_holes_after_merge@stop,w
  7691  0F92  00C6               	movwf	??_get_holes_after_merge+2
  7692  0F93  01C7               	clrf	??_get_holes_after_merge+3
  7693  0F94  1BC6               	btfsc	??_get_holes_after_merge+2,7
  7694  0F95  03C7               	decf	??_get_holes_after_merge+3,f
  7695  0F96  0844               	movf	??_get_holes_after_merge,w
  7696  0F97  0746               	addwf	??_get_holes_after_merge+2,w
  7697  0F98  00C8               	movwf	??_get_holes_after_merge+4
  7698  0F99  0845               	movf	??_get_holes_after_merge+1,w
  7699  0F9A  1803               	skipnc
  7700  0F9B  0A45               	incf	??_get_holes_after_merge+1,w
  7701  0F9C  0747               	addwf	??_get_holes_after_merge+3,w
  7702  0F9D  00C9               	movwf	??_get_holes_after_merge+5
  7703  0F9E  0849               	movf	??_get_holes_after_merge+5,w
  7704  0F9F  3A80               	xorlw	128
  7705  0FA0  00FF               	movwf	127
  7706  0FA1  3080               	movlw	128
  7707  0FA2  027F               	subwf	127,w
  7708  0FA3  1D03               	skipz
  7709  0FA4  2FA7               	goto	u8005
  7710  0FA5  3003               	movlw	3
  7711  0FA6  0248               	subwf	??_get_holes_after_merge+4,w
  7712  0FA7                     u8005:	
  7713  0FA7  1C03               	skipc
  7714  0FA8  2FE2               	goto	l5401
  7715                           
  7716                           ;teris_16f886.c: 1003: {
  7717                           ;teris_16f886.c: 1004: debug_int1(0, "col = %d", col);
  7718  0FA9  30A0               	movlw	low ((STR_30+15)| (0+32768))
  7719  0FAA  1283               	bcf	3,5	;RP0=0, select bank0
  7720  0FAB  1303               	bcf	3,6	;RP1=0, select bank0
  7721  0FAC  00BF               	movwf	debug_int1@f
  7722  0FAD  308A               	movlw	high ((STR_30+15)| (0+32768))
  7723  0FAE  00C0               	movwf	debug_int1@f+1
  7724  0FAF  084E               	movf	get_holes_after_merge@col,w
  7725  0FB0  00C1               	movwf	debug_int1@i
  7726  0FB1  01C2               	clrf	debug_int1@i+1
  7727  0FB2  1BC1               	btfsc	debug_int1@i,7
  7728  0FB3  03C2               	decf	debug_int1@i+1,f
  7729  0FB4  3000               	movlw	0
  7730  0FB5  160A  118A  2003  120A  158A  	fcall	_debug_int1
  7731                           
  7732                           ;teris_16f886.c: 1005: debug_int1(0, "start = %d", start);
  7733  0FBA  3064               	movlw	low (STR_56| (0+32768))
  7734  0FBB  1283               	bcf	3,5	;RP0=0, select bank0
  7735  0FBC  1303               	bcf	3,6	;RP1=0, select bank0
  7736  0FBD  00BF               	movwf	debug_int1@f
  7737  0FBE  308D               	movlw	high (STR_56| (0+32768))
  7738  0FBF  00C0               	movwf	debug_int1@f+1
  7739  0FC0  084D               	movf	get_holes_after_merge@start,w
  7740  0FC1  00C1               	movwf	debug_int1@i
  7741  0FC2  01C2               	clrf	debug_int1@i+1
  7742  0FC3  1BC1               	btfsc	debug_int1@i,7
  7743  0FC4  03C2               	decf	debug_int1@i+1,f
  7744  0FC5  3000               	movlw	0
  7745  0FC6  160A  118A  2003  120A  158A  	fcall	_debug_int1
  7746                           
  7747                           ;teris_16f886.c: 1006: debug_int1(0, "stop = %d", stop);
  7748  0FCB  308D               	movlw	low (STR_57| (0+32768))
  7749  0FCC  1283               	bcf	3,5	;RP0=0, select bank0
  7750  0FCD  1303               	bcf	3,6	;RP1=0, select bank0
  7751  0FCE  00BF               	movwf	debug_int1@f
  7752  0FCF  308D               	movlw	high (STR_57| (0+32768))
  7753  0FD0  00C0               	movwf	debug_int1@f+1
  7754  0FD1  084B               	movf	get_holes_after_merge@stop,w
  7755  0FD2  00C1               	movwf	debug_int1@i
  7756  0FD3  01C2               	clrf	debug_int1@i+1
  7757  0FD4  1BC1               	btfsc	debug_int1@i,7
  7758  0FD5  03C2               	decf	debug_int1@i+1,f
  7759  0FD6  3000               	movlw	0
  7760  0FD7  160A  118A  2003  120A  158A  	fcall	_debug_int1
  7761                           
  7762                           ;teris_16f886.c: 1007: num_hole++;
  7763  0FDC  3001               	movlw	1
  7764  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  7765  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  7766  0FDF  00C4               	movwf	??_get_holes_after_merge
  7767  0FE0  0844               	movf	??_get_holes_after_merge,w
  7768  0FE1  07CA               	addwf	get_holes_after_merge@num_hole,f
  7769  0FE2                     l5401:	
  7770  0FE2  3001               	movlw	1
  7771  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  7772  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  7773  0FE5  00C4               	movwf	??_get_holes_after_merge
  7774  0FE6  0844               	movf	??_get_holes_after_merge,w
  7775  0FE7  07CE               	addwf	get_holes_after_merge@col,f
  7776  0FE8  084E               	movf	get_holes_after_merge@col,w
  7777  0FE9  3A80               	xorlw	128
  7778  0FEA  3E78               	addlw	-136
  7779  0FEB  1C03               	skipc
  7780  0FEC  2EB7               	goto	l5339
  7781  0FED                     l5405:	
  7782                           
  7783                           ;teris_16f886.c: 1008: }
  7784                           ;teris_16f886.c: 1009: }
  7785                           ;teris_16f886.c: 1010: debug_int1(0, "num_hole = %d", num_hole);
  7786  0FED  300F               	movlw	low (STR_58| (0+32768))
  7787  0FEE  00BF               	movwf	debug_int1@f
  7788  0FEF  308D               	movlw	high (STR_58| (0+32768))
  7789  0FF0  00C0               	movwf	debug_int1@f+1
  7790  0FF1  084A               	movf	get_holes_after_merge@num_hole,w
  7791  0FF2  00C4               	movwf	??_get_holes_after_merge
  7792  0FF3  01C5               	clrf	??_get_holes_after_merge+1
  7793  0FF4  0844               	movf	??_get_holes_after_merge,w
  7794  0FF5  00C1               	movwf	debug_int1@i
  7795  0FF6  0845               	movf	??_get_holes_after_merge+1,w
  7796  0FF7  00C2               	movwf	debug_int1@i+1
  7797  0FF8  3000               	movlw	0
  7798  0FF9  160A  118A  2003   	fcall	_debug_int1
  7799                           
  7800                           ;teris_16f886.c: 1011: return num_hole;
  7801  0FFC  1283               	bcf	3,5	;RP0=0, select bank0
  7802  0FFD  1303               	bcf	3,6	;RP1=0, select bank0
  7803  0FFE  084A               	movf	get_holes_after_merge@num_hole,w
  7804  0FFF  0008               	return
  7805  1000                     __end_of_get_holes_after_merge:	
  7806                           
  7807                           	psect	text17
  7808  10AE                     __ptext17:	
  7809 ;; *************** function _get_high_after_merge *****************
  7810 ;; Defined at:
  7811 ;;		line 926 in file "teris_16f886.c"
  7812 ;; Parameters:    Size  Location     Type
  7813 ;;  y               1    wreg     char 
  7814 ;;  matrix          2   36[BANK0 ] PTR struct .
  7815 ;;		 -> g_matrix44(384), 
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;  y               1   42[BANK0 ] char 
  7818 ;;  col             1   43[BANK0 ] char 
  7819 ;;  row             1   44[BANK0 ] char 
  7820 ;; Return value:  Size  Location     Type
  7821 ;;                  1    wreg      unsigned char 
  7822 ;; Registers used:
  7823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7824 ;; Tracked objects:
  7825 ;;		On entry : 0/0
  7826 ;;		On exit  : 0/0
  7827 ;;		Unchanged: 0/0
  7828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7829 ;;      Params:         0       2       0       0       0
  7830 ;;      Locals:         0       3       0       0       0
  7831 ;;      Temps:          0       4       0       0       0
  7832 ;;      Totals:         0       9       0       0       0
  7833 ;;Total ram usage:        9 bytes
  7834 ;; Hardware stack levels used:    1
  7835 ;; Hardware stack levels required when called:    3
  7836 ;; This function calls:
  7837 ;;		_debug_int1
  7838 ;;		_debug_line
  7839 ;; This function is called by:
  7840 ;;		_find_best_solution
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           
  7845                           ;psect for function _get_high_after_merge
  7846  10AE                     _get_high_after_merge:	
  7847                           
  7848                           ;incstack = 0
  7849                           ; Regs used in _get_high_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  7850                           ;get_high_after_merge@y stored from wreg
  7851  10AE  1283               	bcf	3,5	;RP0=0, select bank0
  7852  10AF  1303               	bcf	3,6	;RP1=0, select bank0
  7853  10B0  00CA               	movwf	get_high_after_merge@y
  7854                           
  7855                           ;teris_16f886.c: 928: debug_line(0, "get_high_after_merge");
  7856  10B1  302D               	movlw	low (STR_51| (0+32768))
  7857  10B2  00F3               	movwf	debug_line@str
  7858  10B3  308B               	movlw	high (STR_51| (0+32768))
  7859  10B4  00F4               	movwf	debug_line@str+1
  7860  10B5  3000               	movlw	0
  7861  10B6  160A  158A  20AA  160A  118A  	fcall	_debug_line
  7862                           
  7863                           ;teris_16f886.c: 929: for(int8_t row = 0; row < 4; row++)
  7864  10BB  1283               	bcf	3,5	;RP0=0, select bank0
  7865  10BC  1303               	bcf	3,6	;RP1=0, select bank0
  7866  10BD  01CC               	clrf	get_high_after_merge@row
  7867  10BE                     L14:	
  7868  10BE  084C               	movf	get_high_after_merge@row,w
  7869  10BF  3A80               	xorlw	128
  7870  10C0  3E7C               	addlw	-132
  7871  10C1  1803               	btfsc	3,0
  7872  10C2  0008               	return
  7873                           
  7874                           ;teris_16f886.c: 930: {
  7875                           ;teris_16f886.c: 931: for(int8_t col = 0; col < 4; col++)
  7876  10C3  01CB               	clrf	get_high_after_merge@col
  7877  10C4  084B               	movf	get_high_after_merge@col,w
  7878  10C5  3A80               	xorlw	128
  7879  10C6  3E7C               	addlw	-132
  7880  10C7  1803               	btfsc	3,0
  7881  10C8  293D               	goto	l5327
  7882  10C9                     l5315:	
  7883                           
  7884                           ;teris_16f886.c: 932: {
  7885                           ;teris_16f886.c: 933: if(matrix->data[row][col] == 1)
  7886  10C9  084C               	movf	get_high_after_merge@row,w
  7887  10CA  00C6               	movwf	??_get_high_after_merge
  7888  10CB  01C7               	clrf	??_get_high_after_merge+1
  7889  10CC  1003               	clrc
  7890  10CD  0DC6               	rlf	??_get_high_after_merge,f
  7891  10CE  0DC7               	rlf	??_get_high_after_merge+1,f
  7892  10CF  1003               	clrc
  7893  10D0  0DC6               	rlf	??_get_high_after_merge,f
  7894  10D1  0DC7               	rlf	??_get_high_after_merge+1,f
  7895  10D2  0846               	movf	??_get_high_after_merge,w
  7896  10D3  0744               	addwf	get_high_after_merge@matrix,w
  7897  10D4  00C8               	movwf	??_get_high_after_merge+2
  7898  10D5  0847               	movf	??_get_high_after_merge+1,w
  7899  10D6  1803               	skipnc
  7900  10D7  0A47               	incf	??_get_high_after_merge+1,w
  7901  10D8  0745               	addwf	get_high_after_merge@matrix+1,w
  7902  10D9  00C9               	movwf	??_get_high_after_merge+3
  7903  10DA  084B               	movf	get_high_after_merge@col,w
  7904  10DB  0748               	addwf	??_get_high_after_merge+2,w
  7905  10DC  0084               	movwf	4
  7906  10DD  0849               	movf	??_get_high_after_merge+3,w
  7907  10DE  1803               	skipnc
  7908  10DF  0A49               	incf	??_get_high_after_merge+3,w
  7909  10E0  00FF               	movwf	127
  7910  10E1  120A  158A  2000  160A  118A  	fcall	stringtab
  7911  10E6  3A01               	xorlw	1
  7912  10E7  1D03               	skipz
  7913  10E8  2934               	goto	l5323
  7914                           
  7915                           ;teris_16f886.c: 934: {
  7916                           ;teris_16f886.c: 935: debug_int1(0, "y = %d", y);
  7917  10E9  30EA               	movlw	low ((STR_44+8)| (0+32768))
  7918  10EA  00BF               	movwf	debug_int1@f
  7919  10EB  308C               	movlw	high ((STR_44+8)| (0+32768))
  7920  10EC  00C0               	movwf	debug_int1@f+1
  7921  10ED  084A               	movf	get_high_after_merge@y,w
  7922  10EE  00C1               	movwf	debug_int1@i
  7923  10EF  01C2               	clrf	debug_int1@i+1
  7924  10F0  1BC1               	btfsc	debug_int1@i,7
  7925  10F1  03C2               	decf	debug_int1@i+1,f
  7926  10F2  3000               	movlw	0
  7927  10F3  160A  118A  2003  160A  118A  	fcall	_debug_int1
  7928                           
  7929                           ;teris_16f886.c: 936: debug_int1(0, "row = %d", row);
  7930  10F8  3097               	movlw	low (STR_53| (0+32768))
  7931  10F9  1283               	bcf	3,5	;RP0=0, select bank0
  7932  10FA  1303               	bcf	3,6	;RP1=0, select bank0
  7933  10FB  00BF               	movwf	debug_int1@f
  7934  10FC  308D               	movlw	high (STR_53| (0+32768))
  7935  10FD  00C0               	movwf	debug_int1@f+1
  7936  10FE  084C               	movf	get_high_after_merge@row,w
  7937  10FF  00C1               	movwf	debug_int1@i
  7938  1100  01C2               	clrf	debug_int1@i+1
  7939  1101  1BC1               	btfsc	debug_int1@i,7
  7940  1102  03C2               	decf	debug_int1@i+1,f
  7941  1103  3000               	movlw	0
  7942  1104  160A  118A  2003  160A  118A  	fcall	_debug_int1
  7943                           
  7944                           ;teris_16f886.c: 937: debug_int1(0, "height = %d", 8 - y - row);
  7945  1109  3021               	movlw	low ((STR_50+9)| (0+32768))
  7946  110A  1283               	bcf	3,5	;RP0=0, select bank0
  7947  110B  1303               	bcf	3,6	;RP1=0, select bank0
  7948  110C  00BF               	movwf	debug_int1@f
  7949  110D  308B               	movlw	high ((STR_50+9)| (0+32768))
  7950  110E  00C0               	movwf	debug_int1@f+1
  7951  110F  084A               	movf	get_high_after_merge@y,w
  7952  1110  074C               	addwf	get_high_after_merge@row,w
  7953  1111  00C6               	movwf	??_get_high_after_merge
  7954  1112  01C7               	clrf	??_get_high_after_merge+1
  7955  1113  1803               	skipnc
  7956  1114  0AC7               	incf	??_get_high_after_merge+1,f
  7957  1115  1BCA               	btfsc	get_high_after_merge@y,7
  7958  1116  03C7               	decf	??_get_high_after_merge+1,f
  7959  1117  1BCC               	btfsc	get_high_after_merge@row,7
  7960  1118  03C7               	decf	??_get_high_after_merge+1,f
  7961  1119  1283               	bcf	3,5	;RP0=0, select bank0
  7962  111A  1303               	bcf	3,6	;RP1=0, select bank0
  7963  111B  09C6               	comf	??_get_high_after_merge,f
  7964  111C  09C7               	comf	??_get_high_after_merge+1,f
  7965  111D  0AC6               	incf	??_get_high_after_merge,f
  7966  111E  1903               	skipnz
  7967  111F  0AC7               	incf	??_get_high_after_merge+1,f
  7968  1120  0846               	movf	??_get_high_after_merge,w
  7969  1121  3E08               	addlw	8
  7970  1122  00C1               	movwf	debug_int1@i
  7971  1123  0847               	movf	??_get_high_after_merge+1,w
  7972  1124  1803               	skipnc
  7973  1125  3E01               	addlw	1
  7974  1126  3E00               	addlw	0
  7975  1127  00C2               	movwf	debug_int1@i+1
  7976  1128  3000               	movlw	0
  7977  1129  160A  118A  2003   	fcall	_debug_int1
  7978                           
  7979                           ;teris_16f886.c: 938: return (uint8_t)(8 - y - row);
  7980  112C  1283               	bcf	3,5	;RP0=0, select bank0
  7981  112D  1303               	bcf	3,6	;RP1=0, select bank0
  7982  112E  084C               	movf	get_high_after_merge@row,w
  7983  112F  074A               	addwf	get_high_after_merge@y,w
  7984  1130  3AFF               	xorlw	255
  7985  1131  3E01               	addlw	1
  7986  1132  3E08               	addlw	8
  7987  1133  0008               	return
  7988  1134                     l5323:	
  7989  1134  3001               	movlw	1
  7990  1135  00C6               	movwf	??_get_high_after_merge
  7991  1136  0846               	movf	??_get_high_after_merge,w
  7992  1137  07CB               	addwf	get_high_after_merge@col,f
  7993  1138  084B               	movf	get_high_after_merge@col,w
  7994  1139  3A80               	xorlw	128
  7995  113A  3E7C               	addlw	-132
  7996  113B  1C03               	skipc
  7997  113C  28C9               	goto	l5315
  7998  113D                     l5327:	
  7999  113D  3001               	movlw	1
  8000  113E  00C6               	movwf	??_get_high_after_merge
  8001  113F  0846               	movf	??_get_high_after_merge,w
  8002  1140  07CC               	addwf	get_high_after_merge@row,f
  8003  1141  28BE               	goto	L14
  8004  1142                     __end_of_get_high_after_merge:	
  8005                           
  8006                           	psect	text18
  8007  1BE5                     __ptext18:	
  8008 ;; *************** function _get_high *****************
  8009 ;; Defined at:
  8010 ;;		line 914 in file "teris_16f886.c"
  8011 ;; Parameters:    Size  Location     Type
  8012 ;;  matrix          1    wreg     PTR struct .
  8013 ;;		 -> g_matrix88(64), 
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;  matrix          1   38[BANK0 ] PTR struct .
  8016 ;;		 -> g_matrix88(64), 
  8017 ;;  row             1   39[BANK0 ] char 
  8018 ;; Return value:  Size  Location     Type
  8019 ;;                  1    wreg      unsigned char 
  8020 ;; Registers used:
  8021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8022 ;; Tracked objects:
  8023 ;;		On entry : 0/0
  8024 ;;		On exit  : 0/0
  8025 ;;		Unchanged: 0/0
  8026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8027 ;;      Params:         0       0       0       0       0
  8028 ;;      Locals:         0       2       0       0       0
  8029 ;;      Temps:          0       2       0       0       0
  8030 ;;      Totals:         0       4       0       0       0
  8031 ;;Total ram usage:        4 bytes
  8032 ;; Hardware stack levels used:    1
  8033 ;; Hardware stack levels required when called:    3
  8034 ;; This function calls:
  8035 ;;		_debug_int1
  8036 ;;		_is_row_empty
  8037 ;; This function is called by:
  8038 ;;		_find_best_solution
  8039 ;; This function uses a non-reentrant model
  8040 ;;
  8041                           
  8042                           
  8043                           ;psect for function _get_high
  8044  1BE5                     _get_high:	
  8045                           
  8046                           ;incstack = 0
  8047                           ; Regs used in _get_high: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8048                           ;get_high@matrix stored from wreg
  8049  1BE5  1283               	bcf	3,5	;RP0=0, select bank0
  8050  1BE6  1303               	bcf	3,6	;RP1=0, select bank0
  8051  1BE7  00C6               	movwf	get_high@matrix
  8052                           
  8053                           ;teris_16f886.c: 916: for(int8_t row = 8 - 1; row >= 0; row--)
  8054  1BE8  3007               	movlw	7
  8055  1BE9  00C4               	movwf	??_get_high
  8056  1BEA  0844               	movf	??_get_high,w
  8057  1BEB  00C7               	movwf	get_high@row
  8058  1BEC  1BC7               	btfsc	get_high@row,7
  8059  1BED  2C2C               	goto	l5297
  8060  1BEE                     l5285:	
  8061                           
  8062                           ;teris_16f886.c: 917: {
  8063                           ;teris_16f886.c: 918: if(is_row_empty(matrix, row) == 1)
  8064  1BEE  0847               	movf	get_high@row,w
  8065  1BEF  00C4               	movwf	??_get_high
  8066  1BF0  0844               	movf	??_get_high,w
  8067  1BF1  00F0               	movwf	is_row_empty@row
  8068  1BF2  0846               	movf	get_high@matrix,w
  8069  1BF3  120A  118A  2004  160A  158A  	fcall	_is_row_empty
  8070  1BF8  3A01               	xorlw	1
  8071  1BF9  1D03               	skipz
  8072  1BFA  2C24               	goto	l5293
  8073                           
  8074                           ;teris_16f886.c: 919: {
  8075                           ;teris_16f886.c: 920: debug_int1(0, "get_high height = %d", 8 - row - 1);
  8076  1BFB  3018               	movlw	low (STR_50| (0+32768))
  8077  1BFC  1283               	bcf	3,5	;RP0=0, select bank0
  8078  1BFD  1303               	bcf	3,6	;RP1=0, select bank0
  8079  1BFE  00BF               	movwf	debug_int1@f
  8080  1BFF  308B               	movlw	high (STR_50| (0+32768))
  8081  1C00  00C0               	movwf	debug_int1@f+1
  8082  1C01  3001               	movlw	1
  8083  1C02  0747               	addwf	get_high@row,w
  8084  1C03  00C4               	movwf	??_get_high
  8085  1C04  01C5               	clrf	??_get_high+1
  8086  1C05  1803               	skipnc
  8087  1C06  0AC5               	incf	??_get_high+1,f
  8088  1C07  1BC7               	btfsc	get_high@row,7
  8089  1C08  03C5               	decf	??_get_high+1,f
  8090  1C09  1283               	bcf	3,5	;RP0=0, select bank0
  8091  1C0A  1303               	bcf	3,6	;RP1=0, select bank0
  8092  1C0B  09C4               	comf	??_get_high,f
  8093  1C0C  09C5               	comf	??_get_high+1,f
  8094  1C0D  0AC4               	incf	??_get_high,f
  8095  1C0E  1903               	skipnz
  8096  1C0F  0AC5               	incf	??_get_high+1,f
  8097  1C10  0844               	movf	??_get_high,w
  8098  1C11  3E08               	addlw	8
  8099  1C12  00C1               	movwf	debug_int1@i
  8100  1C13  0845               	movf	??_get_high+1,w
  8101  1C14  1803               	skipnc
  8102  1C15  3E01               	addlw	1
  8103  1C16  3E00               	addlw	0
  8104  1C17  00C2               	movwf	debug_int1@i+1
  8105  1C18  3000               	movlw	0
  8106  1C19  160A  118A  2003   	fcall	_debug_int1
  8107                           
  8108                           ;teris_16f886.c: 921: return (uint8_t)(8 - row - 1);
  8109  1C1C  1283               	bcf	3,5	;RP0=0, select bank0
  8110  1C1D  1303               	bcf	3,6	;RP1=0, select bank0
  8111  1C1E  0847               	movf	get_high@row,w
  8112  1C1F  3E01               	addlw	1
  8113  1C20  3AFF               	xorlw	255
  8114  1C21  3E01               	addlw	1
  8115  1C22  3E08               	addlw	8
  8116  1C23  0008               	return
  8117  1C24                     l5293:	
  8118  1C24  30FF               	movlw	255
  8119  1C25  1283               	bcf	3,5	;RP0=0, select bank0
  8120  1C26  1303               	bcf	3,6	;RP1=0, select bank0
  8121  1C27  00C4               	movwf	??_get_high
  8122  1C28  0844               	movf	??_get_high,w
  8123  1C29  07C7               	addwf	get_high@row,f
  8124  1C2A  1FC7               	btfss	get_high@row,7
  8125  1C2B  2BEE               	goto	l5285
  8126  1C2C                     l5297:	
  8127                           
  8128                           ;teris_16f886.c: 922: }
  8129                           ;teris_16f886.c: 923: }
  8130                           ;teris_16f886.c: 924: return 8;
  8131  1C2C  3008               	movlw	8
  8132  1C2D  0008               	return
  8133  1C2E                     __end_of_get_high:	
  8134                           
  8135                           	psect	text19
  8136  0004                     __ptext19:	
  8137 ;; *************** function _is_row_empty *****************
  8138 ;; Defined at:
  8139 ;;		line 662 in file "teris_16f886.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;  matrix          1    wreg     PTR const struct .
  8142 ;;		 -> g_matrix88(64), 
  8143 ;;  row             1    0[COMMON] unsigned char 
  8144 ;; Auto vars:     Size  Location     Type
  8145 ;;  matrix          1    4[COMMON] PTR const struct .
  8146 ;;		 -> g_matrix88(64), 
  8147 ;;  col             1    5[COMMON] unsigned char 
  8148 ;; Return value:  Size  Location     Type
  8149 ;;                  1    wreg      unsigned char 
  8150 ;; Registers used:
  8151 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8152 ;; Tracked objects:
  8153 ;;		On entry : 0/0
  8154 ;;		On exit  : 0/0
  8155 ;;		Unchanged: 0/0
  8156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8157 ;;      Params:         1       0       0       0       0
  8158 ;;      Locals:         2       0       0       0       0
  8159 ;;      Temps:          3       0       0       0       0
  8160 ;;      Totals:         6       0       0       0       0
  8161 ;;Total ram usage:        6 bytes
  8162 ;; Hardware stack levels used:    1
  8163 ;; This function calls:
  8164 ;;		Nothing
  8165 ;; This function is called by:
  8166 ;;		_get_high
  8167 ;; This function uses a non-reentrant model
  8168 ;;
  8169                           
  8170                           
  8171                           ;psect for function _is_row_empty
  8172  0004                     _is_row_empty:	
  8173                           
  8174                           ;incstack = 0
  8175                           ; Regs used in _is_row_empty: [wreg-fsr0h+status,2+status,0]
  8176                           ;is_row_empty@matrix stored from wreg
  8177  0004  00F4               	movwf	is_row_empty@matrix
  8178                           
  8179                           ;teris_16f886.c: 664: for(uint8_t col = 0; col < 8; col++)
  8180  0005  01F5               	clrf	is_row_empty@col
  8181  0006  3008               	movlw	8
  8182  0007  0275               	subwf	is_row_empty@col,w
  8183  0008  1803               	btfsc	3,0
  8184  0009  2829               	goto	l3629
  8185  000A                     l3619:	
  8186                           
  8187                           ;teris_16f886.c: 665: {
  8188                           ;teris_16f886.c: 666: if(matrix->data[row][col] == 1)
  8189  000A  0870               	movf	is_row_empty@row,w
  8190  000B  00F1               	movwf	??_is_row_empty
  8191  000C  3002               	movlw	2
  8192  000D                     u4615:	
  8193  000D  1003               	clrc
  8194  000E  0DF1               	rlf	??_is_row_empty,f
  8195  000F  3EFF               	addlw	-1
  8196  0010  1D03               	skipz
  8197  0011  280D               	goto	u4615
  8198  0012  1003               	clrc
  8199  0013  0D71               	rlf	??_is_row_empty,w
  8200  0014  0774               	addwf	is_row_empty@matrix,w
  8201  0015  00F2               	movwf	??_is_row_empty+1
  8202  0016  0875               	movf	is_row_empty@col,w
  8203  0017  0772               	addwf	??_is_row_empty+1,w
  8204  0018  00F3               	movwf	??_is_row_empty+2
  8205  0019  0873               	movf	??_is_row_empty+2,w
  8206  001A  0084               	movwf	4
  8207  001B  1783               	bsf	3,7	;select IRP bank2
  8208  001C  0300               	decf	0,w
  8209  001D  1D03               	btfss	3,2
  8210  001E  2821               	goto	l3625
  8211                           
  8212                           ;teris_16f886.c: 667: {
  8213                           ;teris_16f886.c: 668: return 0;
  8214  001F  3000               	movlw	0
  8215  0020  0008               	return
  8216  0021                     l3625:	
  8217  0021  3001               	movlw	1
  8218  0022  00F1               	movwf	??_is_row_empty
  8219  0023  0871               	movf	??_is_row_empty,w
  8220  0024  07F5               	addwf	is_row_empty@col,f
  8221  0025  3008               	movlw	8
  8222  0026  0275               	subwf	is_row_empty@col,w
  8223  0027  1C03               	skipc
  8224  0028  280A               	goto	l3619
  8225  0029                     l3629:	
  8226                           
  8227                           ;teris_16f886.c: 669: }
  8228                           ;teris_16f886.c: 670: }
  8229                           ;teris_16f886.c: 671: return 1;
  8230  0029  3001               	movlw	1
  8231  002A  0008               	return
  8232  002B                     __end_of_is_row_empty:	
  8233                           
  8234                           	psect	text20
  8235  0DF1                     __ptext20:	
  8236 ;; *************** function _fall_off *****************
  8237 ;; Defined at:
  8238 ;;		line 781 in file "teris_16f886.c"
  8239 ;; Parameters:    Size  Location     Type
  8240 ;;  x               1    wreg     char 
  8241 ;;  y               1   38[BANK0 ] char 
  8242 ;;  matrix44        2   39[BANK0 ] PTR const struct .
  8243 ;;		 -> g_matrix44(384), 
  8244 ;;  matrix88        1   41[BANK0 ] PTR const struct .
  8245 ;;		 -> g_matrix88(64), 
  8246 ;; Auto vars:     Size  Location     Type
  8247 ;;  x               1   46[BANK0 ] char 
  8248 ;;  col             1   47[BANK0 ] char 
  8249 ;;  row             1   48[BANK0 ] char 
  8250 ;; Return value:  Size  Location     Type
  8251 ;;                  1    wreg      unsigned char 
  8252 ;; Registers used:
  8253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8254 ;; Tracked objects:
  8255 ;;		On entry : 0/0
  8256 ;;		On exit  : 0/0
  8257 ;;		Unchanged: 0/0
  8258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8259 ;;      Params:         0       4       0       0       0
  8260 ;;      Locals:         0       3       0       0       0
  8261 ;;      Temps:          0       4       0       0       0
  8262 ;;      Totals:         0      11       0       0       0
  8263 ;;Total ram usage:       11 bytes
  8264 ;; Hardware stack levels used:    1
  8265 ;; Hardware stack levels required when called:    3
  8266 ;; This function calls:
  8267 ;;		_debug_int2
  8268 ;;		_debug_line
  8269 ;; This function is called by:
  8270 ;;		_find_best_solution
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           
  8275                           ;psect for function _fall_off
  8276  0DF1                     _fall_off:	
  8277                           
  8278                           ;incstack = 0
  8279                           ; Regs used in _fall_off: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8280                           ;fall_off@x stored from wreg
  8281  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  8282  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  8283  0DF3  00CE               	movwf	fall_off@x
  8284  0DF4                     l338:	
  8285                           ;teris_16f886.c: 783: while(1)
  8286                           
  8287                           
  8288                           ;teris_16f886.c: 784: {
  8289                           ;teris_16f886.c: 785: for(int8_t row = 4 - 1; row >= 0; row--)
  8290  0DF4  3003               	movlw	3
  8291  0DF5  00CA               	movwf	??_fall_off
  8292  0DF6  084A               	movf	??_fall_off,w
  8293  0DF7  00D0               	movwf	fall_off@row
  8294  0DF8  1BD0               	btfsc	fall_off@row,7
  8295  0DF9  2EA4               	goto	l5189
  8296  0DFA                     l5157:	
  8297                           
  8298                           ;teris_16f886.c: 786: {
  8299                           ;teris_16f886.c: 787: for(int8_t col = 0; col < 4; col++)
  8300  0DFA  01CF               	clrf	fall_off@col
  8301  0DFB  084F               	movf	fall_off@col,w
  8302  0DFC  3A80               	xorlw	128
  8303  0DFD  3E7C               	addlw	-132
  8304  0DFE  1803               	btfsc	3,0
  8305  0DFF  2E9E               	goto	l5185
  8306  0E00                     l5163:	
  8307                           
  8308                           ;teris_16f886.c: 788: {
  8309                           ;teris_16f886.c: 789: if(matrix44->data[row][col] == 1)
  8310  0E00  0850               	movf	fall_off@row,w
  8311  0E01  00CA               	movwf	??_fall_off
  8312  0E02  01CB               	clrf	??_fall_off+1
  8313  0E03  1003               	clrc
  8314  0E04  0DCA               	rlf	??_fall_off,f
  8315  0E05  0DCB               	rlf	??_fall_off+1,f
  8316  0E06  1003               	clrc
  8317  0E07  0DCA               	rlf	??_fall_off,f
  8318  0E08  0DCB               	rlf	??_fall_off+1,f
  8319  0E09  084A               	movf	??_fall_off,w
  8320  0E0A  0747               	addwf	fall_off@matrix44,w
  8321  0E0B  00CC               	movwf	??_fall_off+2
  8322  0E0C  084B               	movf	??_fall_off+1,w
  8323  0E0D  1803               	skipnc
  8324  0E0E  0A4B               	incf	??_fall_off+1,w
  8325  0E0F  0748               	addwf	fall_off@matrix44+1,w
  8326  0E10  00CD               	movwf	??_fall_off+3
  8327  0E11  084F               	movf	fall_off@col,w
  8328  0E12  074C               	addwf	??_fall_off+2,w
  8329  0E13  0084               	movwf	4
  8330  0E14  084D               	movf	??_fall_off+3,w
  8331  0E15  1803               	skipnc
  8332  0E16  0A4D               	incf	??_fall_off+3,w
  8333  0E17  00FF               	movwf	127
  8334  0E18  120A  158A  2000  120A  158A  	fcall	stringtab
  8335  0E1D  3A01               	xorlw	1
  8336  0E1E  1D03               	skipz
  8337  0E1F  2E93               	goto	l5181
  8338                           
  8339                           ;teris_16f886.c: 790: {
  8340                           ;teris_16f886.c: 791: if(matrix88->data[y + row + 1][x + col] == 1)
  8341  0E20  084F               	movf	fall_off@col,w
  8342  0E21  074E               	addwf	fall_off@x,w
  8343  0E22  0749               	addwf	fall_off@matrix88,w
  8344  0E23  00CA               	movwf	??_fall_off
  8345  0E24  0850               	movf	fall_off@row,w
  8346  0E25  0746               	addwf	fall_off@y,w
  8347  0E26  00CB               	movwf	??_fall_off+1
  8348  0E27  3002               	movlw	2
  8349  0E28                     u7355:	
  8350  0E28  1003               	clrc
  8351  0E29  0DCB               	rlf	??_fall_off+1,f
  8352  0E2A  3EFF               	addlw	-1
  8353  0E2B  1D03               	skipz
  8354  0E2C  2E28               	goto	u7355
  8355  0E2D  1003               	clrc
  8356  0E2E  0D4B               	rlf	??_fall_off+1,w
  8357  0E2F  3E08               	addlw	8
  8358  0E30  074A               	addwf	??_fall_off,w
  8359  0E31  00CC               	movwf	??_fall_off+2
  8360  0E32  084C               	movf	??_fall_off+2,w
  8361  0E33  0084               	movwf	4
  8362  0E34  1783               	bsf	3,7	;select IRP bank2
  8363  0E35  0300               	decf	0,w
  8364  0E36  1D03               	btfss	3,2
  8365  0E37  2E5A               	goto	l5173
  8366                           
  8367                           ;teris_16f886.c: 792: {
  8368                           ;teris_16f886.c: 793: debug_line(0, "fall_off1");
  8369  0E38  306F               	movlw	low (STR_43| (0+32768))
  8370  0E39  00F3               	movwf	debug_line@str
  8371  0E3A  308D               	movlw	high (STR_43| (0+32768))
  8372  0E3B  00F4               	movwf	debug_line@str+1
  8373  0E3C  3000               	movlw	0
  8374  0E3D  160A  158A  20AA  120A  158A  	fcall	_debug_line
  8375                           
  8376                           ;teris_16f886.c: 794: debug_int2(0, "x = %d, y = %d", x, y);
  8377  0E42  30E2               	movlw	low (STR_44| (0+32768))
  8378  0E43  1283               	bcf	3,5	;RP0=0, select bank0
  8379  0E44  1303               	bcf	3,6	;RP1=0, select bank0
  8380  0E45  00BF               	movwf	debug_int2@f
  8381  0E46  308C               	movlw	high (STR_44| (0+32768))
  8382  0E47  00C0               	movwf	debug_int2@f+1
  8383  0E48  084E               	movf	fall_off@x,w
  8384  0E49  00C1               	movwf	debug_int2@i1
  8385  0E4A  01C2               	clrf	debug_int2@i1+1
  8386  0E4B  1BC1               	btfsc	debug_int2@i1,7
  8387  0E4C  03C2               	decf	debug_int2@i1+1,f
  8388  0E4D  0846               	movf	fall_off@y,w
  8389  0E4E  00C3               	movwf	debug_int2@i2
  8390  0E4F  01C4               	clrf	debug_int2@i2+1
  8391  0E50  1BC3               	btfsc	debug_int2@i2,7
  8392  0E51  03C4               	decf	debug_int2@i2+1,f
  8393  0E52  3000               	movlw	0
  8394  0E53  160A  158A  2174   	fcall	_debug_int2
  8395                           
  8396                           ;teris_16f886.c: 795: return y;
  8397  0E56  1283               	bcf	3,5	;RP0=0, select bank0
  8398  0E57  1303               	bcf	3,6	;RP1=0, select bank0
  8399  0E58  0846               	movf	fall_off@y,w
  8400  0E59  0008               	return
  8401  0E5A                     l5173:	
  8402                           
  8403                           ;teris_16f886.c: 796: }
  8404                           ;teris_16f886.c: 797: if((y + row) >= (8 - 1))
  8405  0E5A  0846               	movf	fall_off@y,w
  8406  0E5B  0750               	addwf	fall_off@row,w
  8407  0E5C  00CA               	movwf	??_fall_off
  8408  0E5D  01CB               	clrf	??_fall_off+1
  8409  0E5E  1803               	skipnc
  8410  0E5F  0ACB               	incf	??_fall_off+1,f
  8411  0E60  1BC6               	btfsc	fall_off@y,7
  8412  0E61  03CB               	decf	??_fall_off+1,f
  8413  0E62  1BD0               	btfsc	fall_off@row,7
  8414  0E63  03CB               	decf	??_fall_off+1,f
  8415  0E64  1283               	bcf	3,5	;RP0=0, select bank0
  8416  0E65  1303               	bcf	3,6	;RP1=0, select bank0
  8417  0E66  084B               	movf	??_fall_off+1,w
  8418  0E67  3A80               	xorlw	128
  8419  0E68  00FF               	movwf	127
  8420  0E69  3080               	movlw	128
  8421  0E6A  027F               	subwf	127,w
  8422  0E6B  1D03               	skipz
  8423  0E6C  2E6F               	goto	u7385
  8424  0E6D  3007               	movlw	7
  8425  0E6E  024A               	subwf	??_fall_off,w
  8426  0E6F                     u7385:	
  8427  0E6F  1C03               	skipc
  8428  0E70  2E93               	goto	l5181
  8429                           
  8430                           ;teris_16f886.c: 798: {
  8431                           ;teris_16f886.c: 799: debug_line(0, "fall_off2");
  8432  0E71  3079               	movlw	low (STR_45| (0+32768))
  8433  0E72  00F3               	movwf	debug_line@str
  8434  0E73  308D               	movlw	high (STR_45| (0+32768))
  8435  0E74  00F4               	movwf	debug_line@str+1
  8436  0E75  3000               	movlw	0
  8437  0E76  160A  158A  20AA  120A  158A  	fcall	_debug_line
  8438                           
  8439                           ;teris_16f886.c: 800: debug_int2(0, "x = %d, y = %d", x, y);
  8440  0E7B  30E2               	movlw	low (STR_44| (0+32768))
  8441  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  8442  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  8443  0E7E  00BF               	movwf	debug_int2@f
  8444  0E7F  308C               	movlw	high (STR_44| (0+32768))
  8445  0E80  00C0               	movwf	debug_int2@f+1
  8446  0E81  084E               	movf	fall_off@x,w
  8447  0E82  00C1               	movwf	debug_int2@i1
  8448  0E83  01C2               	clrf	debug_int2@i1+1
  8449  0E84  1BC1               	btfsc	debug_int2@i1,7
  8450  0E85  03C2               	decf	debug_int2@i1+1,f
  8451  0E86  0846               	movf	fall_off@y,w
  8452  0E87  00C3               	movwf	debug_int2@i2
  8453  0E88  01C4               	clrf	debug_int2@i2+1
  8454  0E89  1BC3               	btfsc	debug_int2@i2,7
  8455  0E8A  03C4               	decf	debug_int2@i2+1,f
  8456  0E8B  3000               	movlw	0
  8457  0E8C  160A  158A  2174   	fcall	_debug_int2
  8458                           
  8459                           ;teris_16f886.c: 801: return y;
  8460  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  8461  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  8462  0E91  0846               	movf	fall_off@y,w
  8463  0E92  0008               	return
  8464  0E93                     l5181:	
  8465  0E93  3001               	movlw	1
  8466  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  8467  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  8468  0E96  00CA               	movwf	??_fall_off
  8469  0E97  084A               	movf	??_fall_off,w
  8470  0E98  07CF               	addwf	fall_off@col,f
  8471  0E99  084F               	movf	fall_off@col,w
  8472  0E9A  3A80               	xorlw	128
  8473  0E9B  3E7C               	addlw	-132
  8474  0E9C  1C03               	skipc
  8475  0E9D  2E00               	goto	l5163
  8476  0E9E                     l5185:	
  8477  0E9E  30FF               	movlw	255
  8478  0E9F  00CA               	movwf	??_fall_off
  8479  0EA0  084A               	movf	??_fall_off,w
  8480  0EA1  07D0               	addwf	fall_off@row,f
  8481  0EA2  1FD0               	btfss	fall_off@row,7
  8482  0EA3  2DFA               	goto	l5157
  8483  0EA4                     l5189:	
  8484                           
  8485                           ;teris_16f886.c: 802: }
  8486                           ;teris_16f886.c: 803: }
  8487                           ;teris_16f886.c: 804: }
  8488                           ;teris_16f886.c: 805: }
  8489                           ;teris_16f886.c: 806: y++;
  8490  0EA4  3001               	movlw	1
  8491  0EA5  00CA               	movwf	??_fall_off
  8492  0EA6  084A               	movf	??_fall_off,w
  8493  0EA7  07C6               	addwf	fall_off@y,f
  8494  0EA8  2DF4               	goto	l338
  8495  0EA9                     __end_of_fall_off:	
  8496                           
  8497                           	psect	text21
  8498  18AA                     __ptext21:	
  8499 ;; *************** function _debug_line *****************
  8500 ;; Defined at:
  8501 ;;		line 300 in file "teris_16f886.c"
  8502 ;; Parameters:    Size  Location     Type
  8503 ;;  enable          1    wreg     unsigned char 
  8504 ;;  str             2    3[COMMON] PTR const unsigned char 
  8505 ;;		 -> STR_96(13), STR_94(13), STR_87(7), STR_79(5), 
  8506 ;;		 -> STR_63(17), STR_59(45), STR_51(21), STR_45(10), 
  8507 ;;		 -> STR_43(10), STR_42(20), STR_41(19), STR_40(6), 
  8508 ;;		 -> STR_38(11), STR_36(11), STR_34(11), STR_33(35), 
  8509 ;;		 -> STR_32(8), STR_29(35), STR_27(2), STR_26(21), 
  8510 ;;		 -> STR_25(1), STR_22(29), STR_21(2), STR_20(21), 
  8511 ;;		 -> STR_19(1), STR_16(21), STR_15(2), STR_12(20), 
  8512 ;;		 -> STR_11(2), STR_10(21), STR_9(1), STR_6(29), 
  8513 ;;		 -> STR_5(2), 
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;  enable          1    5[COMMON] unsigned char 
  8516 ;; Return value:  Size  Location     Type
  8517 ;;                  1    wreg      void 
  8518 ;; Registers used:
  8519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8520 ;; Tracked objects:
  8521 ;;		On entry : 0/0
  8522 ;;		On exit  : 0/0
  8523 ;;		Unchanged: 0/0
  8524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8525 ;;      Params:         2       0       0       0       0
  8526 ;;      Locals:         1       0       0       0       0
  8527 ;;      Temps:          0       0       0       0       0
  8528 ;;      Totals:         3       0       0       0       0
  8529 ;;Total ram usage:        3 bytes
  8530 ;; Hardware stack levels used:    1
  8531 ;; Hardware stack levels required when called:    2
  8532 ;; This function calls:
  8533 ;;		_USARTWriteString
  8534 ;; This function is called by:
  8535 ;;		_printf_debug_MATRIX44
  8536 ;;		_printf_debug_cur_MATRIX44
  8537 ;;		_printf_debug_MATRIX88
  8538 ;;		_printf_debug_Screen
  8539 ;;		_hit_land
  8540 ;;		_is_valid
  8541 ;;		_is_left_boundary
  8542 ;;		_is_right_boundary
  8543 ;;		_fall_off
  8544 ;;		_get_high_after_merge
  8545 ;;		_find_best_solution
  8546 ;;		_main
  8547 ;;		_printf_debug_all_MATRIX44
  8548 ;;		_printf_debug_MATRIX7219
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           
  8553                           ;psect for function _debug_line
  8554  18AA                     _debug_line:	
  8555                           
  8556                           ;incstack = 0
  8557                           ; Regs used in _debug_line: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8558                           ;debug_line@enable stored from wreg
  8559  18AA  00F5               	movwf	debug_line@enable
  8560                           
  8561                           ;teris_16f886.c: 302: if(enable == 1)
  8562  18AB  0375               	decf	debug_line@enable,w
  8563  18AC  1D03               	btfss	3,2
  8564  18AD  0008               	return
  8565                           
  8566                           ;teris_16f886.c: 303: {
  8567                           ;teris_16f886.c: 308: USARTWriteString(str);
  8568  18AE  0873               	movf	debug_line@str,w
  8569  18AF  00F1               	movwf	USARTWriteString@str
  8570  18B0  0874               	movf	debug_line@str+1,w
  8571  18B1  00F2               	movwf	USARTWriteString@str+1
  8572  18B2  160A  158A  214F  160A  158A  	fcall	_USARTWriteString
  8573                           
  8574                           ;teris_16f886.c: 309: USARTWriteString("\r\n");
  8575  18B7  30BA               	movlw	low (STR_1| (0+32768))
  8576  18B8  00F1               	movwf	USARTWriteString@str
  8577  18B9  308D               	movlw	high (STR_1| (0+32768))
  8578  18BA  00F2               	movwf	USARTWriteString@str+1
  8579  18BB  160A  158A  214F   	fcall	_USARTWriteString
  8580  18BE  0008               	return
  8581  18BF                     __end_of_debug_line:	
  8582                           
  8583                           	psect	text22
  8584  1974                     __ptext22:	
  8585 ;; *************** function _debug_int2 *****************
  8586 ;; Defined at:
  8587 ;;		line 328 in file "teris_16f886.c"
  8588 ;; Parameters:    Size  Location     Type
  8589 ;;  enable          1    wreg     unsigned char 
  8590 ;;  f               2   31[BANK0 ] PTR const unsigned char 
  8591 ;;		 -> STR_78(18), STR_77(19), STR_76(18), STR_75(19), 
  8592 ;;		 -> STR_74(18), STR_73(17), STR_71(18), STR_70(19), 
  8593 ;;		 -> STR_69(18), STR_68(19), STR_67(18), STR_66(20), 
  8594 ;;		 -> STR_64(19), STR_46(15), STR_44(15), STR_39(19), 
  8595 ;;		 -> STR_37(19), STR_35(19), STR_31(24), STR_30(24), 
  8596 ;;		 -> STR_14(27), 
  8597 ;;  i1              2   33[BANK0 ] int 
  8598 ;;  i2              2   35[BANK0 ] int 
  8599 ;; Auto vars:     Size  Location     Type
  8600 ;;  enable          1   37[BANK0 ] unsigned char 
  8601 ;; Return value:  Size  Location     Type
  8602 ;;                  1    wreg      void 
  8603 ;; Registers used:
  8604 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8605 ;; Tracked objects:
  8606 ;;		On entry : 0/0
  8607 ;;		On exit  : 0/0
  8608 ;;		Unchanged: 0/0
  8609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8610 ;;      Params:         0       6       0       0       0
  8611 ;;      Locals:         0       1       0       0       0
  8612 ;;      Temps:          0       0       0       0       0
  8613 ;;      Totals:         0       7       0       0       0
  8614 ;;Total ram usage:        7 bytes
  8615 ;; Hardware stack levels used:    1
  8616 ;; Hardware stack levels required when called:    2
  8617 ;; This function calls:
  8618 ;;		_USARTWriteString
  8619 ;;		_sprintf
  8620 ;; This function is called by:
  8621 ;;		_hit_land
  8622 ;;		_is_valid
  8623 ;;		_fall_off
  8624 ;;		_find_best_solution
  8625 ;;		_printf_debug_all_MATRIX44
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629                           
  8630                           ;psect for function _debug_int2
  8631  1974                     _debug_int2:	
  8632                           
  8633                           ;incstack = 0
  8634                           ; Regs used in _debug_int2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8635                           ;debug_int2@enable stored from wreg
  8636  1974  1283               	bcf	3,5	;RP0=0, select bank0
  8637  1975  1303               	bcf	3,6	;RP1=0, select bank0
  8638  1976  00C5               	movwf	debug_int2@enable
  8639                           
  8640                           ;teris_16f886.c: 330: if(enable == 1)
  8641  1977  0345               	decf	debug_int2@enable,w
  8642  1978  1D03               	btfss	3,2
  8643  1979  0008               	return
  8644                           
  8645                           ;teris_16f886.c: 331: {
  8646                           ;teris_16f886.c: 336: sprintf(g_debug, f, i1, i2);
  8647  197A  083F               	movf	debug_int2@f,w
  8648  197B  00A0               	movwf	sprintf@f
  8649  197C  0840               	movf	debug_int2@f+1,w
  8650  197D  00A1               	movwf	sprintf@f+1
  8651  197E  0842               	movf	debug_int2@i1+1,w
  8652  197F  00A3               	movwf	?_sprintf+3
  8653  1980  0841               	movf	debug_int2@i1,w
  8654  1981  00A2               	movwf	?_sprintf+2
  8655  1982  0844               	movf	debug_int2@i2+1,w
  8656  1983  00A5               	movwf	?_sprintf+5
  8657  1984  0843               	movf	debug_int2@i2,w
  8658  1985  00A4               	movwf	?_sprintf+4
  8659  1986  3097               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8660  1987  160A  118A  2300  160A  158A  	fcall	_sprintf
  8661                           
  8662                           ;teris_16f886.c: 337: USARTWriteString(g_debug);
  8663  198C  3097               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8664  198D  00F1               	movwf	USARTWriteString@str
  8665  198E  3001               	movlw	1
  8666  198F  00F2               	movwf	USARTWriteString@str+1
  8667  1990  160A  158A  214F  160A  158A  	fcall	_USARTWriteString
  8668                           
  8669                           ;teris_16f886.c: 338: USARTWriteString("\r\n");
  8670  1995  30BA               	movlw	low (STR_1| (0+32768))
  8671  1996  00F1               	movwf	USARTWriteString@str
  8672  1997  308D               	movlw	high (STR_1| (0+32768))
  8673  1998  00F2               	movwf	USARTWriteString@str+1
  8674  1999  160A  158A  214F   	fcall	_USARTWriteString
  8675  199C  0008               	return
  8676  199D                     __end_of_debug_int2:	
  8677                           
  8678                           	psect	text23
  8679  1F7E                     __ptext23:	
  8680 ;; *************** function _evaluate *****************
  8681 ;; Defined at:
  8682 ;;		line 856 in file "teris_16f886.c"
  8683 ;; Parameters:    Size  Location     Type
  8684 ;;  matrix          1    wreg     PTR const struct .
  8685 ;;		 -> find_best_solution@temp_matrix88(64), 
  8686 ;; Auto vars:     Size  Location     Type
  8687 ;;  matrix          1   45[BANK0 ] PTR const struct .
  8688 ;;		 -> find_best_solution@temp_matrix88(64), 
  8689 ;;  row             1   47[BANK0 ] char 
  8690 ;;  col             1   46[BANK0 ] unsigned char 
  8691 ;;  risk            2   42[BANK0 ] unsigned int 
  8692 ;;  full            1   44[BANK0 ] unsigned char 
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  2   36[BANK0 ] unsigned int 
  8695 ;; Registers used:
  8696 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8702 ;;      Params:         0       2       0       0       0
  8703 ;;      Locals:         0       6       0       0       0
  8704 ;;      Temps:          0       4       0       0       0
  8705 ;;      Totals:         0      12       0       0       0
  8706 ;;Total ram usage:       12 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; Hardware stack levels required when called:    3
  8709 ;; This function calls:
  8710 ;;		_debug_int1
  8711 ;; This function is called by:
  8712 ;;		_find_best_solution
  8713 ;; This function uses a non-reentrant model
  8714 ;;
  8715                           
  8716                           
  8717                           ;psect for function _evaluate
  8718  1F7E                     _evaluate:	
  8719                           
  8720                           ;incstack = 0
  8721                           ; Regs used in _evaluate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8722                           ;evaluate@matrix stored from wreg
  8723  1F7E  1283               	bcf	3,5	;RP0=0, select bank0
  8724  1F7F  1303               	bcf	3,6	;RP1=0, select bank0
  8725  1F80  00CD               	movwf	evaluate@matrix
  8726                           
  8727                           ;teris_16f886.c: 858: uint16_t risk = 0;
  8728  1F81  01CA               	clrf	evaluate@risk
  8729  1F82  01CB               	clrf	evaluate@risk+1
  8730                           
  8731                           ;teris_16f886.c: 859: uint8_t full = 0xFF;
  8732  1F83  30FF               	movlw	255
  8733  1F84  00C6               	movwf	??_evaluate
  8734  1F85  0846               	movf	??_evaluate,w
  8735  1F86  00CC               	movwf	evaluate@full
  8736                           
  8737                           ;teris_16f886.c: 860: for(uint8_t col = 0; col < 8; col++)
  8738  1F87  01CE               	clrf	evaluate@col
  8739  1F88  3008               	movlw	8
  8740  1F89  024E               	subwf	evaluate@col,w
  8741  1F8A  1803               	btfsc	3,0
  8742  1F8B  2FED               	goto	l5253
  8743  1F8C                     l5227:	
  8744                           
  8745                           ;teris_16f886.c: 861: {
  8746                           ;teris_16f886.c: 862: full = 0xFF;
  8747  1F8C  30FF               	movlw	255
  8748  1F8D  00C6               	movwf	??_evaluate
  8749  1F8E  0846               	movf	??_evaluate,w
  8750  1F8F  00CC               	movwf	evaluate@full
  8751                           
  8752                           ;teris_16f886.c: 863: for(int8_t row = 8 - 1; row >= 0; row--)
  8753  1F90  3007               	movlw	7
  8754  1F91  00C6               	movwf	??_evaluate
  8755  1F92  0846               	movf	??_evaluate,w
  8756  1F93  00CF               	movwf	evaluate@row
  8757  1F94  1BCF               	btfsc	evaluate@row,7
  8758  1F95  2FE5               	goto	l5249
  8759  1F96                     l5233:	
  8760                           
  8761                           ;teris_16f886.c: 864: {
  8762                           ;teris_16f886.c: 865: if(full == 0xFF)
  8763  1F96  0A4C               	incf	evaluate@full,w
  8764  1F97  1D03               	btfss	3,2
  8765  1F98  2FAC               	goto	l5237
  8766                           
  8767                           ;teris_16f886.c: 866: {
  8768                           ;teris_16f886.c: 867: full = matrix->data[row][col];
  8769  1F99  084F               	movf	evaluate@row,w
  8770  1F9A  00C6               	movwf	??_evaluate
  8771  1F9B  3002               	movlw	2
  8772  1F9C                     u7505:	
  8773  1F9C  1003               	clrc
  8774  1F9D  0DC6               	rlf	??_evaluate,f
  8775  1F9E  3EFF               	addlw	-1
  8776  1F9F  1D03               	skipz
  8777  1FA0  2F9C               	goto	u7505
  8778  1FA1  1003               	clrc
  8779  1FA2  0D46               	rlf	??_evaluate,w
  8780  1FA3  074D               	addwf	evaluate@matrix,w
  8781  1FA4  00C7               	movwf	??_evaluate+1
  8782  1FA5  084E               	movf	evaluate@col,w
  8783  1FA6  0747               	addwf	??_evaluate+1,w
  8784  1FA7  00C8               	movwf	??_evaluate+2
  8785  1FA8  0848               	movf	??_evaluate+2,w
  8786  1FA9  0084               	movwf	4
  8787  1FAA  1383               	bcf	3,7	;select IRP bank0
  8788  1FAB  2FDB               	goto	L15
  8789  1FAC                     l5237:	
  8790                           ;teris_16f886.c: 868: }
  8791                           
  8792                           
  8793                           ;teris_16f886.c: 869: else
  8794                           ;teris_16f886.c: 870: {
  8795                           ;teris_16f886.c: 871: if(matrix->data[row][col] == 1)
  8796  1FAC  084F               	movf	evaluate@row,w
  8797  1FAD  00C6               	movwf	??_evaluate
  8798  1FAE  3002               	movlw	2
  8799  1FAF                     u7515:	
  8800  1FAF  1003               	clrc
  8801  1FB0  0DC6               	rlf	??_evaluate,f
  8802  1FB1  3EFF               	addlw	-1
  8803  1FB2  1D03               	skipz
  8804  1FB3  2FAF               	goto	u7515
  8805  1FB4  1003               	clrc
  8806  1FB5  0D46               	rlf	??_evaluate,w
  8807  1FB6  074D               	addwf	evaluate@matrix,w
  8808  1FB7  00C7               	movwf	??_evaluate+1
  8809  1FB8  084E               	movf	evaluate@col,w
  8810  1FB9  0747               	addwf	??_evaluate+1,w
  8811  1FBA  00C8               	movwf	??_evaluate+2
  8812  1FBB  0848               	movf	??_evaluate+2,w
  8813  1FBC  0084               	movwf	4
  8814  1FBD  1383               	bcf	3,7	;select IRP bank0
  8815  1FBE  0300               	decf	0,w
  8816  1FBF  1D03               	btfss	3,2
  8817  1FC0  2FCA               	goto	l5243
  8818                           
  8819                           ;teris_16f886.c: 872: {
  8820                           ;teris_16f886.c: 873: if(full == 0)
  8821  1FC1  084C               	movf	evaluate@full,w
  8822  1FC2  1D03               	btfss	3,2
  8823  1FC3  2FCA               	goto	l5243
  8824                           
  8825                           ;teris_16f886.c: 874: {
  8826                           ;teris_16f886.c: 875: risk++;
  8827  1FC4  3001               	movlw	1
  8828  1FC5  07CA               	addwf	evaluate@risk,f
  8829  1FC6  1803               	skipnc
  8830  1FC7  0ACB               	incf	evaluate@risk+1,f
  8831  1FC8  3000               	movlw	0
  8832  1FC9  07CB               	addwf	evaluate@risk+1,f
  8833  1FCA                     l5243:	
  8834                           
  8835                           ;teris_16f886.c: 876: }
  8836                           ;teris_16f886.c: 877: }
  8837                           ;teris_16f886.c: 878: full = matrix->data[row][col];
  8838  1FCA  084F               	movf	evaluate@row,w
  8839  1FCB  00C6               	movwf	??_evaluate
  8840  1FCC  3002               	movlw	2
  8841  1FCD                     u7545:	
  8842  1FCD  1003               	clrc
  8843  1FCE  0DC6               	rlf	??_evaluate,f
  8844  1FCF  3EFF               	addlw	-1
  8845  1FD0  1D03               	skipz
  8846  1FD1  2FCD               	goto	u7545
  8847  1FD2  1003               	clrc
  8848  1FD3  0D46               	rlf	??_evaluate,w
  8849  1FD4  074D               	addwf	evaluate@matrix,w
  8850  1FD5  00C7               	movwf	??_evaluate+1
  8851  1FD6  084E               	movf	evaluate@col,w
  8852  1FD7  0747               	addwf	??_evaluate+1,w
  8853  1FD8  00C8               	movwf	??_evaluate+2
  8854  1FD9  0848               	movf	??_evaluate+2,w
  8855  1FDA  0084               	movwf	4
  8856  1FDB                     L15:	
  8857  1FDB  0800               	movf	0,w
  8858  1FDC  00C9               	movwf	??_evaluate+3
  8859  1FDD  0849               	movf	??_evaluate+3,w
  8860  1FDE  00CC               	movwf	evaluate@full
  8861  1FDF  30FF               	movlw	255
  8862  1FE0  00C6               	movwf	??_evaluate
  8863  1FE1  0846               	movf	??_evaluate,w
  8864  1FE2  07CF               	addwf	evaluate@row,f
  8865  1FE3  1FCF               	btfss	evaluate@row,7
  8866  1FE4  2F96               	goto	l5233
  8867  1FE5                     l5249:	
  8868  1FE5  3001               	movlw	1
  8869  1FE6  00C6               	movwf	??_evaluate
  8870  1FE7  0846               	movf	??_evaluate,w
  8871  1FE8  07CE               	addwf	evaluate@col,f
  8872  1FE9  3008               	movlw	8
  8873  1FEA  024E               	subwf	evaluate@col,w
  8874  1FEB  1C03               	skipc
  8875  1FEC  2F8C               	goto	l5227
  8876  1FED                     l5253:	
  8877                           
  8878                           ;teris_16f886.c: 879: }
  8879                           ;teris_16f886.c: 880: }
  8880                           ;teris_16f886.c: 881: }
  8881                           ;teris_16f886.c: 882: debug_int1(0, "risk = %d", risk);
  8882  1FED  3020               	movlw	low ((STR_83+9)| (0+32768))
  8883  1FEE  00BF               	movwf	debug_int1@f
  8884  1FEF  308C               	movlw	high ((STR_83+9)| (0+32768))
  8885  1FF0  00C0               	movwf	debug_int1@f+1
  8886  1FF1  084B               	movf	evaluate@risk+1,w
  8887  1FF2  00C2               	movwf	debug_int1@i+1
  8888  1FF3  084A               	movf	evaluate@risk,w
  8889  1FF4  00C1               	movwf	debug_int1@i
  8890  1FF5  3000               	movlw	0
  8891  1FF6  160A  118A  2003   	fcall	_debug_int1
  8892                           
  8893                           ;teris_16f886.c: 884: return risk;
  8894  1FF9  1283               	bcf	3,5	;RP0=0, select bank0
  8895  1FFA  1303               	bcf	3,6	;RP1=0, select bank0
  8896  1FFB  084B               	movf	evaluate@risk+1,w
  8897  1FFC  00C5               	movwf	?_evaluate+1
  8898  1FFD  084A               	movf	evaluate@risk,w
  8899  1FFE  00C4               	movwf	?_evaluate
  8900  1FFF  0008               	return
  8901  2000                     __end_of_evaluate:	
  8902                           
  8903                           	psect	text24
  8904  1B9C                     __ptext24:	
  8905 ;; *************** function _delete_matrix *****************
  8906 ;; Defined at:
  8907 ;;		line 641 in file "teris_16f886.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;  matrix          2   36[BANK0 ] PTR struct .
  8910 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;  row             1   41[BANK0 ] char 
  8913 ;;  count           1   40[BANK0 ] unsigned char 
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  1    wreg      unsigned char 
  8916 ;; Registers used:
  8917 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8923 ;;      Params:         0       2       0       0       0
  8924 ;;      Locals:         0       2       0       0       0
  8925 ;;      Temps:          0       2       0       0       0
  8926 ;;      Totals:         0       6       0       0       0
  8927 ;;Total ram usage:        6 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    3
  8930 ;; This function calls:
  8931 ;;		_debug_int1
  8932 ;;		_delete_row
  8933 ;;		_is_row_full
  8934 ;; This function is called by:
  8935 ;;		_find_best_solution
  8936 ;;		_main
  8937 ;; This function uses a non-reentrant model
  8938 ;;
  8939                           
  8940                           
  8941                           ;psect for function _delete_matrix
  8942  1B9C                     _delete_matrix:	
  8943                           
  8944                           ;teris_16f886.c: 643: uint8_t count = 0;
  8945                           
  8946                           ;incstack = 0
  8947                           ; Regs used in _delete_matrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8948  1B9C  1283               	bcf	3,5	;RP0=0, select bank0
  8949  1B9D  1303               	bcf	3,6	;RP1=0, select bank0
  8950  1B9E  01C8               	clrf	delete_matrix@count
  8951                           
  8952                           ;teris_16f886.c: 644: int8_t row = 8 - 1;
  8953  1B9F  3007               	movlw	7
  8954  1BA0  00C6               	movwf	??_delete_matrix
  8955  1BA1  0846               	movf	??_delete_matrix,w
  8956  1BA2  00C9               	movwf	delete_matrix@row
  8957  1BA3                     l5087:	
  8958                           ;teris_16f886.c: 645: while(row >= 0)
  8959                           
  8960  1BA3  1BC9               	btfsc	delete_matrix@row,7
  8961  1BA4  2BD2               	goto	l5089
  8962                           
  8963                           ;teris_16f886.c: 646: {
  8964                           ;teris_16f886.c: 647: if(is_row_full(matrix, row))
  8965  1BA5  0844               	movf	delete_matrix@matrix,w
  8966  1BA6  00F0               	movwf	is_row_full@matrix
  8967  1BA7  0845               	movf	delete_matrix@matrix+1,w
  8968  1BA8  00F1               	movwf	is_row_full@matrix+1
  8969  1BA9  0849               	movf	delete_matrix@row,w
  8970  1BAA  00C6               	movwf	??_delete_matrix
  8971  1BAB  0846               	movf	??_delete_matrix,w
  8972  1BAC  00F2               	movwf	is_row_full@row
  8973  1BAD  160A  158A  21C7  160A  158A  	fcall	_is_row_full
  8974  1BB2  3A00               	xorlw	0
  8975  1BB3  1903               	skipnz
  8976  1BB4  2BCB               	goto	l5085
  8977                           
  8978                           ;teris_16f886.c: 648: {
  8979                           ;teris_16f886.c: 649: delete_row(matrix, row);
  8980  1BB5  1283               	bcf	3,5	;RP0=0, select bank0
  8981  1BB6  1303               	bcf	3,6	;RP1=0, select bank0
  8982  1BB7  0844               	movf	delete_matrix@matrix,w
  8983  1BB8  00FB               	movwf	delete_row@matrix
  8984  1BB9  0845               	movf	delete_matrix@matrix+1,w
  8985  1BBA  00FC               	movwf	delete_row@matrix+1
  8986  1BBB  0849               	movf	delete_matrix@row,w
  8987  1BBC  00C6               	movwf	??_delete_matrix
  8988  1BBD  0846               	movf	??_delete_matrix,w
  8989  1BBE  00FD               	movwf	delete_row@row
  8990  1BBF  160A  158A  2709  160A  158A  	fcall	_delete_row
  8991                           
  8992                           ;teris_16f886.c: 650: count++;
  8993  1BC4  3001               	movlw	1
  8994  1BC5  1283               	bcf	3,5	;RP0=0, select bank0
  8995  1BC6  1303               	bcf	3,6	;RP1=0, select bank0
  8996  1BC7  00C6               	movwf	??_delete_matrix
  8997  1BC8  0846               	movf	??_delete_matrix,w
  8998  1BC9  07C8               	addwf	delete_matrix@count,f
  8999                           
  9000                           ;teris_16f886.c: 651: }
  9001  1BCA  2BA3               	goto	l5087
  9002  1BCB                     l5085:	
  9003                           
  9004                           ;teris_16f886.c: 652: else
  9005                           ;teris_16f886.c: 653: {
  9006                           ;teris_16f886.c: 654: row--;
  9007  1BCB  30FF               	movlw	255
  9008  1BCC  1283               	bcf	3,5	;RP0=0, select bank0
  9009  1BCD  1303               	bcf	3,6	;RP1=0, select bank0
  9010  1BCE  00C6               	movwf	??_delete_matrix
  9011  1BCF  0846               	movf	??_delete_matrix,w
  9012  1BD0  07C9               	addwf	delete_matrix@row,f
  9013  1BD1  2BA3               	goto	l5087
  9014  1BD2                     l5089:	
  9015                           
  9016                           ;teris_16f886.c: 655: }
  9017                           ;teris_16f886.c: 656: }
  9018                           ;teris_16f886.c: 657: debug_int1(0, "delete_matrix count = %d", count);
  9019  1BD2  3078               	movlw	low (STR_28| (0+32768))
  9020  1BD3  00BF               	movwf	debug_int1@f
  9021  1BD4  308A               	movlw	high (STR_28| (0+32768))
  9022  1BD5  00C0               	movwf	debug_int1@f+1
  9023  1BD6  0848               	movf	delete_matrix@count,w
  9024  1BD7  00C6               	movwf	??_delete_matrix
  9025  1BD8  01C7               	clrf	??_delete_matrix+1
  9026  1BD9  0846               	movf	??_delete_matrix,w
  9027  1BDA  00C1               	movwf	debug_int1@i
  9028  1BDB  0847               	movf	??_delete_matrix+1,w
  9029  1BDC  00C2               	movwf	debug_int1@i+1
  9030  1BDD  3000               	movlw	0
  9031  1BDE  160A  118A  2003   	fcall	_debug_int1
  9032                           
  9033                           ;teris_16f886.c: 659: return count;
  9034  1BE1  1283               	bcf	3,5	;RP0=0, select bank0
  9035  1BE2  1303               	bcf	3,6	;RP1=0, select bank0
  9036  1BE3  0848               	movf	delete_matrix@count,w
  9037  1BE4  0008               	return
  9038  1BE5                     __end_of_delete_matrix:	
  9039                           
  9040                           	psect	text25
  9041  19C7                     __ptext25:	
  9042 ;; *************** function _is_row_full *****************
  9043 ;; Defined at:
  9044 ;;		line 607 in file "teris_16f886.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;  matrix          2    0[COMMON] PTR const struct .
  9047 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  9048 ;;  row             1    2[COMMON] unsigned char 
  9049 ;; Auto vars:     Size  Location     Type
  9050 ;;  col             1    8[COMMON] unsigned char 
  9051 ;; Return value:  Size  Location     Type
  9052 ;;                  1    wreg      unsigned char 
  9053 ;; Registers used:
  9054 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9055 ;; Tracked objects:
  9056 ;;		On entry : 0/0
  9057 ;;		On exit  : 0/0
  9058 ;;		Unchanged: 0/0
  9059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9060 ;;      Params:         3       0       0       0       0
  9061 ;;      Locals:         1       0       0       0       0
  9062 ;;      Temps:          5       0       0       0       0
  9063 ;;      Totals:         9       0       0       0       0
  9064 ;;Total ram usage:        9 bytes
  9065 ;; Hardware stack levels used:    1
  9066 ;; This function calls:
  9067 ;;		Nothing
  9068 ;; This function is called by:
  9069 ;;		_delete_matrix
  9070 ;; This function uses a non-reentrant model
  9071 ;;
  9072                           
  9073                           
  9074                           ;psect for function _is_row_full
  9075  19C7                     _is_row_full:	
  9076                           
  9077                           ;teris_16f886.c: 609: for(uint8_t col = 0; col < 8; col++)
  9078                           
  9079                           ;incstack = 0
  9080                           ; Regs used in _is_row_full: [wreg-fsr0h+status,2+status,0]
  9081  19C7  01F8               	clrf	is_row_full@col
  9082  19C8  3008               	movlw	8
  9083  19C9  0278               	subwf	is_row_full@col,w
  9084  19CA  1803               	btfsc	3,0
  9085  19CB  29F5               	goto	l3589
  9086  19CC                     l3579:	
  9087                           
  9088                           ;teris_16f886.c: 610: {
  9089                           ;teris_16f886.c: 611: if(matrix->data[row][col] == 0)
  9090  19CC  0872               	movf	is_row_full@row,w
  9091  19CD  00F3               	movwf	??_is_row_full
  9092  19CE  3002               	movlw	2
  9093  19CF                     u4505:	
  9094  19CF  1003               	clrc
  9095  19D0  0DF3               	rlf	??_is_row_full,f
  9096  19D1  3EFF               	addlw	-1
  9097  19D2  1D03               	skipz
  9098  19D3  29CF               	goto	u4505
  9099  19D4  1003               	clrc
  9100  19D5  0D73               	rlf	??_is_row_full,w
  9101  19D6  0770               	addwf	is_row_full@matrix,w
  9102  19D7  00F4               	movwf	??_is_row_full+1
  9103  19D8  0871               	movf	is_row_full@matrix+1,w
  9104  19D9  1803               	skipnc
  9105  19DA  3E01               	addlw	1
  9106  19DB  00F5               	movwf	??_is_row_full+2
  9107  19DC  0878               	movf	is_row_full@col,w
  9108  19DD  0774               	addwf	??_is_row_full+1,w
  9109  19DE  00F6               	movwf	??_is_row_full+3
  9110  19DF  0875               	movf	??_is_row_full+2,w
  9111  19E0  1803               	skipnc
  9112  19E1  3E01               	addlw	1
  9113  19E2  00F7               	movwf	??_is_row_full+4
  9114  19E3  0876               	movf	??_is_row_full+3,w
  9115  19E4  0084               	movwf	4
  9116  19E5  1783               	bsf	3,7
  9117  19E6  1C77               	btfss	??_is_row_full+4,0
  9118  19E7  1383               	bcf	3,7
  9119  19E8  0800               	movf	0,w
  9120  19E9  1D03               	btfss	3,2
  9121  19EA  29ED               	goto	l3585
  9122                           
  9123                           ;teris_16f886.c: 612: {
  9124                           ;teris_16f886.c: 613: return 0;
  9125  19EB  3000               	movlw	0
  9126  19EC  0008               	return
  9127  19ED                     l3585:	
  9128  19ED  3001               	movlw	1
  9129  19EE  00F3               	movwf	??_is_row_full
  9130  19EF  0873               	movf	??_is_row_full,w
  9131  19F0  07F8               	addwf	is_row_full@col,f
  9132  19F1  3008               	movlw	8
  9133  19F2  0278               	subwf	is_row_full@col,w
  9134  19F3  1C03               	skipc
  9135  19F4  29CC               	goto	l3579
  9136  19F5                     l3589:	
  9137                           
  9138                           ;teris_16f886.c: 614: }
  9139                           ;teris_16f886.c: 615: }
  9140                           ;teris_16f886.c: 616: return 1;
  9141  19F5  3001               	movlw	1
  9142  19F6  0008               	return
  9143  19F7                     __end_of_is_row_full:	
  9144                           
  9145                           	psect	text26
  9146  1F09                     __ptext26:	
  9147 ;; *************** function _delete_row *****************
  9148 ;; Defined at:
  9149 ;;		line 618 in file "teris_16f886.c"
  9150 ;; Parameters:    Size  Location     Type
  9151 ;;  matrix          2   11[COMMON] PTR struct .
  9152 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  9153 ;;  row             1   13[COMMON] unsigned char 
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;  len             2    4[BANK0 ] unsigned int 
  9156 ;;  i               1    6[BANK0 ] char 
  9157 ;; Return value:  Size  Location     Type
  9158 ;;                  1    wreg      void 
  9159 ;; Registers used:
  9160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9161 ;; Tracked objects:
  9162 ;;		On entry : 0/0
  9163 ;;		On exit  : 0/0
  9164 ;;		Unchanged: 0/0
  9165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9166 ;;      Params:         3       0       0       0       0
  9167 ;;      Locals:         0       3       0       0       0
  9168 ;;      Temps:          0       4       0       0       0
  9169 ;;      Totals:         3       7       0       0       0
  9170 ;;Total ram usage:       10 bytes
  9171 ;; Hardware stack levels used:    1
  9172 ;; Hardware stack levels required when called:    1
  9173 ;; This function calls:
  9174 ;;		_memcpy
  9175 ;;		_memset
  9176 ;; This function is called by:
  9177 ;;		_delete_matrix
  9178 ;; This function uses a non-reentrant model
  9179 ;;
  9180                           
  9181                           
  9182                           ;psect for function _delete_row
  9183  1F09                     _delete_row:	
  9184                           
  9185                           ;teris_16f886.c: 620: for(int8_t i = 8 - 1; i >= 0; i--)
  9186                           
  9187                           ;incstack = 0
  9188                           ; Regs used in _delete_row: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9189  1F09  3007               	movlw	7
  9190  1F0A  1283               	bcf	3,5	;RP0=0, select bank0
  9191  1F0B  1303               	bcf	3,6	;RP1=0, select bank0
  9192  1F0C  00A0               	movwf	??_delete_row
  9193  1F0D  0820               	movf	??_delete_row,w
  9194  1F0E  00A6               	movwf	delete_row@i
  9195  1F0F                     L16:	
  9196  1F0F  1BA6               	btfsc	delete_row@i,7
  9197  1F10  0008               	return
  9198                           
  9199                           ;teris_16f886.c: 621: {
  9200                           ;teris_16f886.c: 622: if(i <= row)
  9201  1F11  0826               	movf	delete_row@i,w
  9202  1F12  00A0               	movwf	??_delete_row
  9203  1F13  01A1               	clrf	??_delete_row+1
  9204  1F14  1BA0               	btfsc	??_delete_row,7
  9205  1F15  03A1               	decf	??_delete_row+1,f
  9206  1F16  0821               	movf	??_delete_row+1,w
  9207  1F17  3A80               	xorlw	128
  9208  1F18  3C80               	sublw	128
  9209  1F19  1D03               	skipz
  9210  1F1A  2F1D               	goto	u6945
  9211  1F1B  0820               	movf	??_delete_row,w
  9212  1F1C  027D               	subwf	delete_row@row,w
  9213  1F1D                     u6945:	
  9214  1F1D  1C03               	skipc
  9215  1F1E  2F77               	goto	l4987
  9216                           
  9217                           ;teris_16f886.c: 623: {
  9218                           ;teris_16f886.c: 624: if(i > 0)
  9219  1F1F  1283               	bcf	3,5	;RP0=0, select bank0
  9220  1F20  1303               	bcf	3,6	;RP1=0, select bank0
  9221  1F21  0826               	movf	delete_row@i,w
  9222  1F22  3A80               	xorlw	128
  9223  1F23  3E7F               	addlw	-129
  9224  1F24  1C03               	skipc
  9225  1F25  2F59               	goto	l4985
  9226                           
  9227                           ;teris_16f886.c: 625: {
  9228                           ;teris_16f886.c: 629: register size_t len;
  9229                           ;teris_16f886.c: 631: len = 8*sizeof(uint8_t);
  9230  1F26  3008               	movlw	8
  9231  1F27  00A4               	movwf	delete_row@len
  9232  1F28  3000               	movlw	0
  9233  1F29  00A5               	movwf	delete_row@len+1
  9234                           
  9235                           ;teris_16f886.c: 632: memcpy(matrix->data[i], matrix->data[i - 1], len);
  9236  1F2A  0826               	movf	delete_row@i,w
  9237  1F2B  00A0               	movwf	??_delete_row
  9238  1F2C  3002               	movlw	2
  9239  1F2D                     u6965:	
  9240  1F2D  1003               	clrc
  9241  1F2E  0DA0               	rlf	??_delete_row,f
  9242  1F2F  3EFF               	addlw	-1
  9243  1F30  1D03               	skipz
  9244  1F31  2F2D               	goto	u6965
  9245  1F32  1003               	clrc
  9246  1F33  0D20               	rlf	??_delete_row,w
  9247  1F34  077B               	addwf	delete_row@matrix,w
  9248  1F35  00F0               	movwf	memcpy@d1
  9249  1F36  087C               	movf	delete_row@matrix+1,w
  9250  1F37  1803               	skipnc
  9251  1F38  3E01               	addlw	1
  9252  1F39  00F1               	movwf	memcpy@d1+1
  9253  1F3A  0826               	movf	delete_row@i,w
  9254  1F3B  00A1               	movwf	??_delete_row+1
  9255  1F3C  3002               	movlw	2
  9256  1F3D                     u6975:	
  9257  1F3D  1003               	clrc
  9258  1F3E  0DA1               	rlf	??_delete_row+1,f
  9259  1F3F  3EFF               	addlw	-1
  9260  1F40  1D03               	skipz
  9261  1F41  2F3D               	goto	u6975
  9262  1F42  1003               	clrc
  9263  1F43  0D21               	rlf	??_delete_row+1,w
  9264  1F44  3EF8               	addlw	248
  9265  1F45  077B               	addwf	delete_row@matrix,w
  9266  1F46  00A2               	movwf	??_delete_row+2
  9267  1F47  087C               	movf	delete_row@matrix+1,w
  9268  1F48  1803               	skipnc
  9269  1F49  3E01               	addlw	1
  9270  1F4A  00A3               	movwf	??_delete_row+3
  9271  1F4B  0822               	movf	??_delete_row+2,w
  9272  1F4C  00F2               	movwf	memcpy@s1
  9273  1F4D  0823               	movf	??_delete_row+3,w
  9274  1F4E  00F3               	movwf	memcpy@s1+1
  9275  1F4F  0825               	movf	delete_row@len+1,w
  9276  1F50  00F5               	movwf	memcpy@n+1
  9277  1F51  0824               	movf	delete_row@len,w
  9278  1F52  00F4               	movwf	memcpy@n
  9279  1F53  160A  158A  219D  160A  158A  	fcall	_memcpy
  9280                           
  9281                           ;teris_16f886.c: 633: }
  9282  1F58  2F77               	goto	l4987
  9283  1F59                     l4985:	
  9284                           
  9285                           ;teris_16f886.c: 634: else
  9286                           ;teris_16f886.c: 635: {
  9287                           ;teris_16f886.c: 636: memset(matrix->data[i], 0, 8*sizeof(uint8_t));
  9288  1F59  1283               	bcf	3,5	;RP0=0, select bank0
  9289  1F5A  1303               	bcf	3,6	;RP1=0, select bank0
  9290  1F5B  0826               	movf	delete_row@i,w
  9291  1F5C  00A0               	movwf	??_delete_row
  9292  1F5D  3002               	movlw	2
  9293  1F5E                     u6985:	
  9294  1F5E  1003               	clrc
  9295  1F5F  0DA0               	rlf	??_delete_row,f
  9296  1F60  3EFF               	addlw	-1
  9297  1F61  1D03               	skipz
  9298  1F62  2F5E               	goto	u6985
  9299  1F63  1003               	clrc
  9300  1F64  0D20               	rlf	??_delete_row,w
  9301  1F65  077B               	addwf	delete_row@matrix,w
  9302  1F66  00F0               	movwf	memset@p1
  9303  1F67  087C               	movf	delete_row@matrix+1,w
  9304  1F68  1803               	skipnc
  9305  1F69  3E01               	addlw	1
  9306  1F6A  00F1               	movwf	memset@p1+1
  9307  1F6B  3000               	movlw	0
  9308  1F6C  00F2               	movwf	memset@c
  9309  1F6D  00F3               	movwf	memset@c+1
  9310  1F6E  3008               	movlw	8
  9311  1F6F  00F4               	movwf	memset@n
  9312  1F70  3000               	movlw	0
  9313  1F71  00F5               	movwf	memset@n+1
  9314  1F72  160A  158A  20D7  160A  158A  	fcall	_memset
  9315  1F77                     l4987:	
  9316  1F77  30FF               	movlw	255
  9317  1F78  1283               	bcf	3,5	;RP0=0, select bank0
  9318  1F79  1303               	bcf	3,6	;RP1=0, select bank0
  9319  1F7A  00A0               	movwf	??_delete_row
  9320  1F7B  0820               	movf	??_delete_row,w
  9321  1F7C  07A6               	addwf	delete_row@i,f
  9322  1F7D  2F0F               	goto	L16
  9323  1F7E                     __end_of_delete_row:	
  9324                           
  9325                           	psect	text27
  9326  199D                     __ptext27:	
  9327 ;; *************** function _memcpy *****************
  9328 ;; Defined at:
  9329 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;  d1              2    0[COMMON] PTR void 
  9332 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9333 ;;  s1              2    2[COMMON] PTR const void 
  9334 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9335 ;;  n               2    4[COMMON] unsigned int 
  9336 ;; Auto vars:     Size  Location     Type
  9337 ;;  s               2    9[COMMON] PTR const unsigned char 
  9338 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9339 ;;  d               2    7[COMMON] PTR unsigned char 
  9340 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9341 ;; Return value:  Size  Location     Type
  9342 ;;                  2    0[COMMON] PTR void 
  9343 ;; Registers used:
  9344 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9345 ;; Tracked objects:
  9346 ;;		On entry : 0/0
  9347 ;;		On exit  : 0/0
  9348 ;;		Unchanged: 0/0
  9349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9350 ;;      Params:         6       0       0       0       0
  9351 ;;      Locals:         4       0       0       0       0
  9352 ;;      Temps:          1       0       0       0       0
  9353 ;;      Totals:        11       0       0       0       0
  9354 ;;Total ram usage:       11 bytes
  9355 ;; Hardware stack levels used:    1
  9356 ;; This function calls:
  9357 ;;		Nothing
  9358 ;; This function is called by:
  9359 ;;		_delete_row
  9360 ;;		_merge1
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           
  9365                           ;psect for function _memcpy
  9366  199D                     _memcpy:	
  9367                           
  9368                           ;incstack = 0
  9369                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  9370  199D  0872               	movf	memcpy@s1,w
  9371  199E  00F9               	movwf	memcpy@s
  9372  199F  0873               	movf	memcpy@s1+1,w
  9373  19A0  00FA               	movwf	memcpy@s+1
  9374  19A1  0870               	movf	memcpy@d1,w
  9375  19A2  00F7               	movwf	memcpy@d
  9376  19A3  0871               	movf	memcpy@d1+1,w
  9377  19A4  00F8               	movwf	memcpy@d+1
  9378  19A5                     l3481:	
  9379  19A5  3001               	movlw	1
  9380  19A6  02F4               	subwf	memcpy@n,f
  9381  19A7  3000               	movlw	0
  9382  19A8  1C03               	skipc
  9383  19A9  03F5               	decf	memcpy@n+1,f
  9384  19AA  02F5               	subwf	memcpy@n+1,f
  9385  19AB  0A74               	incf	memcpy@n,w
  9386  19AC  1903               	btfsc	3,2
  9387  19AD  0A75               	incf	memcpy@n+1,w
  9388  19AE  1903               	btfsc	3,2
  9389  19AF  0008               	return
  9390  19B0  0879               	movf	memcpy@s,w
  9391  19B1  0084               	movwf	4
  9392  19B2  1783               	bsf	3,7
  9393  19B3  1C7A               	btfss	memcpy@s+1,0
  9394  19B4  1383               	bcf	3,7
  9395  19B5  0800               	movf	0,w
  9396  19B6  00F6               	movwf	??_memcpy
  9397  19B7  0877               	movf	memcpy@d,w
  9398  19B8  0084               	movwf	4
  9399  19B9  1383               	bcf	3,7
  9400  19BA  1878               	btfsc	memcpy@d+1,0
  9401  19BB  1783               	bsf	3,7
  9402  19BC  0876               	movf	??_memcpy,w
  9403  19BD  0080               	movwf	0
  9404  19BE  3001               	movlw	1
  9405  19BF  07F9               	addwf	memcpy@s,f
  9406  19C0  1803               	skipnc
  9407  19C1  0AFA               	incf	memcpy@s+1,f
  9408  19C2  3001               	movlw	1
  9409  19C3  07F7               	addwf	memcpy@d,f
  9410  19C4  1803               	skipnc
  9411  19C5  0AF8               	incf	memcpy@d+1,f
  9412  19C6  29A5               	goto	l3481
  9413  19C7                     __end_of_memcpy:	
  9414                           ;	Return value of _memcpy is never used
  9415                           
  9416                           
  9417                           	psect	text28
  9418  1003                     __ptext28:	
  9419 ;; *************** function _debug_int1 *****************
  9420 ;; Defined at:
  9421 ;;		line 314 in file "teris_16f886.c"
  9422 ;; Parameters:    Size  Location     Type
  9423 ;;  enable          1    wreg     unsigned char 
  9424 ;;  f               2   31[BANK0 ] PTR const unsigned char 
  9425 ;;		 -> STR_97(13), STR_95(23), STR_93(19), STR_92(19), 
  9426 ;;		 -> STR_91(19), STR_90(20), STR_89(16), STR_88(15), 
  9427 ;;		 -> STR_85(19), STR_84(19), STR_83(19), STR_82(20), 
  9428 ;;		 -> STR_81(16), STR_80(15), STR_72(22), STR_65(15), 
  9429 ;;		 -> STR_58(14), STR_57(10), STR_56(11), STR_55(9), 
  9430 ;;		 -> STR_54(12), STR_53(9), STR_52(7), STR_50(21), 
  9431 ;;		 -> STR_49(16), STR_48(15), STR_47(10), STR_28(25), 
  9432 ;;		 -> STR_13(10), 
  9433 ;;  i               2   33[BANK0 ] int 
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;  enable          1   35[BANK0 ] unsigned char 
  9436 ;; Return value:  Size  Location     Type
  9437 ;;                  1    wreg      void 
  9438 ;; Registers used:
  9439 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9440 ;; Tracked objects:
  9441 ;;		On entry : 0/0
  9442 ;;		On exit  : 0/0
  9443 ;;		Unchanged: 0/0
  9444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9445 ;;      Params:         0       4       0       0       0
  9446 ;;      Locals:         0       1       0       0       0
  9447 ;;      Temps:          0       0       0       0       0
  9448 ;;      Totals:         0       5       0       0       0
  9449 ;;Total ram usage:        5 bytes
  9450 ;; Hardware stack levels used:    1
  9451 ;; Hardware stack levels required when called:    2
  9452 ;; This function calls:
  9453 ;;		_USARTWriteString
  9454 ;;		_sprintf
  9455 ;; This function is called by:
  9456 ;;		_delete_matrix
  9457 ;;		_evaluate
  9458 ;;		_left_most
  9459 ;;		_right_most
  9460 ;;		_get_high
  9461 ;;		_get_high_after_merge
  9462 ;;		_get_holes_after_merge
  9463 ;;		_find_best_solution
  9464 ;;		_main
  9465 ;;		_printf_debug_all_MATRIX44
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           
  9469                           
  9470                           ;psect for function _debug_int1
  9471  1003                     _debug_int1:	
  9472                           
  9473                           ;incstack = 0
  9474                           ; Regs used in _debug_int1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9475                           ;debug_int1@enable stored from wreg
  9476  1003  1283               	bcf	3,5	;RP0=0, select bank0
  9477  1004  1303               	bcf	3,6	;RP1=0, select bank0
  9478  1005  00C3               	movwf	debug_int1@enable
  9479                           
  9480                           ;teris_16f886.c: 316: if(enable == 1)
  9481  1006  0343               	decf	debug_int1@enable,w
  9482  1007  1D03               	btfss	3,2
  9483  1008  0008               	return
  9484                           
  9485                           ;teris_16f886.c: 317: {
  9486                           ;teris_16f886.c: 322: sprintf(g_debug, f, i);
  9487  1009  083F               	movf	debug_int1@f,w
  9488  100A  00A0               	movwf	sprintf@f
  9489  100B  0840               	movf	debug_int1@f+1,w
  9490  100C  00A1               	movwf	sprintf@f+1
  9491  100D  0842               	movf	debug_int1@i+1,w
  9492  100E  00A3               	movwf	?_sprintf+3
  9493  100F  0841               	movf	debug_int1@i,w
  9494  1010  00A2               	movwf	?_sprintf+2
  9495  1011  3097               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9496  1012  160A  118A  2300  160A  118A  	fcall	_sprintf
  9497                           
  9498                           ;teris_16f886.c: 323: USARTWriteString(g_debug);
  9499  1017  3097               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9500  1018  00F1               	movwf	USARTWriteString@str
  9501  1019  3001               	movlw	1
  9502  101A  00F2               	movwf	USARTWriteString@str+1
  9503  101B  160A  158A  214F  160A  118A  	fcall	_USARTWriteString
  9504                           
  9505                           ;teris_16f886.c: 324: USARTWriteString("\r\n");
  9506  1020  30BA               	movlw	low (STR_1| (0+32768))
  9507  1021  00F1               	movwf	USARTWriteString@str
  9508  1022  308D               	movlw	high (STR_1| (0+32768))
  9509  1023  00F2               	movwf	USARTWriteString@str+1
  9510  1024  160A  158A  214F   	fcall	_USARTWriteString
  9511  1027  0008               	return
  9512  1028                     __end_of_debug_int1:	
  9513                           
  9514                           	psect	text29
  9515  1300                     __ptext29:	
  9516 ;; *************** function _sprintf *****************
  9517 ;; Defined at:
  9518 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  9519 ;; Parameters:    Size  Location     Type
  9520 ;;  sp              1    wreg     PTR unsigned char 
  9521 ;;		 -> g_debug(32), 
  9522 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  9523 ;;		 -> STR_97(13), STR_95(23), STR_93(19), STR_92(19), 
  9524 ;;		 -> STR_91(19), STR_90(20), STR_89(16), STR_88(15), 
  9525 ;;		 -> STR_85(19), STR_84(19), STR_83(19), STR_82(20), 
  9526 ;;		 -> STR_81(16), STR_80(15), STR_78(18), STR_77(19), 
  9527 ;;		 -> STR_76(18), STR_75(19), STR_74(18), STR_73(17), 
  9528 ;;		 -> STR_72(22), STR_71(18), STR_70(19), STR_69(18), 
  9529 ;;		 -> STR_68(19), STR_67(18), STR_66(20), STR_65(15), 
  9530 ;;		 -> STR_64(19), STR_58(14), STR_57(10), STR_56(11), 
  9531 ;;		 -> STR_55(9), STR_54(12), STR_53(9), STR_52(7), 
  9532 ;;		 -> STR_50(21), STR_49(16), STR_48(15), STR_47(10), 
  9533 ;;		 -> STR_46(15), STR_44(15), STR_39(19), STR_37(19), 
  9534 ;;		 -> STR_35(19), STR_31(24), STR_30(24), STR_28(25), 
  9535 ;;		 -> STR_14(27), STR_13(10), 
  9536 ;; Auto vars:     Size  Location     Type
  9537 ;;  sp              1   28[BANK0 ] PTR unsigned char 
  9538 ;;		 -> g_debug(32), 
  9539 ;;  idx             1   17[BANK0 ] unsigned char 
  9540 ;;  tmpval          4    0        struct .
  9541 ;;  flag            2   29[BANK0 ] unsigned short 
  9542 ;;  width           2   25[BANK0 ] int 
  9543 ;;  val             2   22[BANK0 ] unsigned int 
  9544 ;;  len             2   19[BANK0 ] unsigned int 
  9545 ;;  c               1   27[BANK0 ] char 
  9546 ;;  prec            1   24[BANK0 ] char 
  9547 ;;  ap              1   21[BANK0 ] PTR void [1]
  9548 ;;		 -> ?_sprintf(2), 
  9549 ;;  cp              1   18[BANK0 ] PTR const unsigned char 
  9550 ;;		 -> sprintf@c(1), 
  9551 ;; Return value:  Size  Location     Type
  9552 ;;                  2    0[BANK0 ] int 
  9553 ;; Registers used:
  9554 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9555 ;; Tracked objects:
  9556 ;;		On entry : 0/0
  9557 ;;		On exit  : 0/0
  9558 ;;		Unchanged: 0/0
  9559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9560 ;;      Params:         0       8       0       0       0
  9561 ;;      Locals:         0      20       0       0       0
  9562 ;;      Temps:          0       3       0       0       0
  9563 ;;      Totals:         0      31       0       0       0
  9564 ;;Total ram usage:       31 bytes
  9565 ;; Hardware stack levels used:    1
  9566 ;; Hardware stack levels required when called:    1
  9567 ;; This function calls:
  9568 ;;		___bmul
  9569 ;;		___lwdiv
  9570 ;;		___lwmod
  9571 ;;		___wmul
  9572 ;;		_isdigit
  9573 ;; This function is called by:
  9574 ;;		_debug_int1
  9575 ;;		_debug_int2
  9576 ;;		_debug_int3
  9577 ;; This function uses a non-reentrant model
  9578 ;;
  9579                           
  9580                           
  9581                           ;psect for function _sprintf
  9582  1300                     _sprintf:	
  9583                           
  9584                           ;incstack = 0
  9585                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9586                           ;sprintf@sp stored from wreg
  9587  1300  1283               	bcf	3,5	;RP0=0, select bank0
  9588  1301  1303               	bcf	3,6	;RP1=0, select bank0
  9589  1302  00BC               	movwf	sprintf@sp
  9590                           
  9591                           ;doprnt.c: 494: va_list ap;
  9592                           ;doprnt.c: 499: signed char c;
  9593                           ;doprnt.c: 501: int width;
  9594                           ;doprnt.c: 506: signed char prec;
  9595                           ;doprnt.c: 508: unsigned short flag;
  9596                           ;doprnt.c: 523: union {
  9597                           ;doprnt.c: 524: unsigned long vd;
  9598                           ;doprnt.c: 525: double integ;
  9599                           ;doprnt.c: 526: } tmpval;
  9600                           ;doprnt.c: 528: unsigned int val;
  9601                           ;doprnt.c: 529: unsigned len;
  9602                           ;doprnt.c: 530: const char * cp;
  9603                           ;doprnt.c: 533: *ap = __va_start();
  9604  1303  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  9605  1304  00A8               	movwf	??_sprintf
  9606  1305  0828               	movf	??_sprintf,w
  9607  1306  00B5               	movwf	sprintf@ap
  9608  1307                     l3415:	
  9609                           ;doprnt.c: 536: while(c = *f++) {
  9610                           
  9611  1307  1283               	bcf	3,5	;RP0=0, select bank0
  9612  1308  1303               	bcf	3,6	;RP1=0, select bank0
  9613  1309  0821               	movf	sprintf@f+1,w
  9614  130A  00A9               	movwf	??_sprintf+1
  9615  130B  0820               	movf	sprintf@f,w
  9616  130C  00A8               	movwf	??_sprintf
  9617  130D  0AA0               	incf	sprintf@f,f
  9618  130E  1903               	skipnz
  9619  130F  0AA1               	incf	sprintf@f+1,f
  9620  1310  0829               	movf	??_sprintf+1,w
  9621  1311  00FF               	movwf	127
  9622  1312  0828               	movf	??_sprintf,w
  9623  1313  0084               	movwf	4
  9624  1314  120A  158A  2000  160A  118A  	fcall	stringtab
  9625  1319  00AA               	movwf	??_sprintf+2
  9626  131A  082A               	movf	??_sprintf+2,w
  9627  131B  00BB               	movwf	sprintf@c
  9628  131C  083B               	movf	sprintf@c,w
  9629  131D  1903               	btfsc	3,2
  9630  131E  2FFB               	goto	l3417
  9631                           
  9632                           ;doprnt.c: 538: if(c != '%')
  9633  131F  3025               	movlw	37
  9634  1320  063B               	xorwf	sprintf@c,w
  9635  1321  1903               	btfsc	3,2
  9636  1322  2B2F               	goto	l3107
  9637                           
  9638                           ;doprnt.c: 540: {
  9639                           ;doprnt.c: 541: ((*sp++ = (c)));
  9640  1323  083B               	movf	sprintf@c,w
  9641  1324  00A8               	movwf	??_sprintf
  9642  1325  083C               	movf	sprintf@sp,w
  9643  1326  0084               	movwf	4
  9644  1327  0828               	movf	??_sprintf,w
  9645  1328  1783               	bsf	3,7	;select IRP bank2
  9646  1329  0080               	movwf	0
  9647  132A  3001               	movlw	1
  9648  132B  00A8               	movwf	??_sprintf
  9649  132C  0828               	movf	??_sprintf,w
  9650  132D  07BC               	addwf	sprintf@sp,f
  9651                           
  9652                           ;doprnt.c: 542: continue;
  9653  132E  2B07               	goto	l3415
  9654  132F                     l3107:	
  9655                           
  9656                           ;doprnt.c: 543: }
  9657                           ;doprnt.c: 546: width = 0;
  9658  132F  01B9               	clrf	sprintf@width
  9659  1330  01BA               	clrf	sprintf@width+1
  9660                           
  9661                           ;doprnt.c: 548: flag = 0;
  9662  1331  01BD               	clrf	sprintf@flag
  9663  1332  01BE               	clrf	sprintf@flag+1
  9664                           
  9665                           ;doprnt.c: 551: switch(*f) {
  9666                           
  9667                           ;doprnt.c: 550: for(;;) {
  9668  1333  2B3F               	goto	l3111
  9669  1334                     l527:	
  9670                           ;doprnt.c: 553: case '-':
  9671                           
  9672                           
  9673                           ;doprnt.c: 554: flag |= 0x08;
  9674  1334  15BD               	bsf	sprintf@flag,3
  9675  1335  2B3B               	goto	L19
  9676  1336                     l529:	
  9677                           ;doprnt.c: 560: case ' ':
  9678                           
  9679                           ;doprnt.c: 556: continue;
  9680                           
  9681                           ;doprnt.c: 555: f++;
  9682                           
  9683                           
  9684                           ;doprnt.c: 561: flag |= 0x01;
  9685  1336  143D               	bsf	sprintf@flag,0
  9686  1337  2B3B               	goto	L19
  9687  1338                     l530:	
  9688                           ;doprnt.c: 573: case '#':
  9689                           
  9690                           ;doprnt.c: 563: continue;
  9691                           
  9692                           ;doprnt.c: 562: f++;
  9693                           
  9694                           
  9695                           ;doprnt.c: 574: flag |= 0x800;
  9696  1338  15BE               	bsf	sprintf@flag+1,3
  9697  1339  2B3B               	goto	L19
  9698  133A                     l531:	
  9699                           ;doprnt.c: 579: case '0':
  9700                           
  9701                           ;doprnt.c: 576: continue;
  9702                           
  9703                           ;doprnt.c: 575: f++;
  9704                           
  9705                           
  9706                           ;doprnt.c: 580: flag |= 0x04;
  9707  133A  153D               	bsf	sprintf@flag,2
  9708  133B                     L19:	
  9709                           
  9710                           ;doprnt.c: 581: f++;
  9711  133B  3001               	movlw	1
  9712  133C  07A0               	addwf	sprintf@f,f
  9713  133D  1803               	skipnc
  9714  133E  0AA1               	incf	sprintf@f+1,f
  9715  133F                     l3111:	
  9716                           ;doprnt.c: 584: }
  9717                           
  9718                           ;doprnt.c: 582: continue;
  9719                           
  9720  133F  0821               	movf	sprintf@f+1,w
  9721  1340  00FF               	movwf	127
  9722  1341  0820               	movf	sprintf@f,w
  9723  1342  0084               	movwf	4
  9724  1343  120A  158A  2000  160A  118A  	fcall	stringtab
  9725                           
  9726                           ; Switch size 1, requested type "space"
  9727                           ; Number of cases is 4, Range of values is 32 to 48
  9728                           ; switch strategies available:
  9729                           ; Name         Instructions Cycles
  9730                           ; simple_byte           13     7 (average)
  9731                           ; direct_byte           62    11 (fixed)
  9732                           ; jumptable            263     9 (fixed)
  9733                           ;	Chosen strategy is simple_byte
  9734  1348  3A20               	xorlw	32	; case 32
  9735  1349  1903               	skipnz
  9736  134A  2B36               	goto	l529
  9737  134B  3A03               	xorlw	3	; case 35
  9738  134C  1903               	skipnz
  9739  134D  2B38               	goto	l530
  9740  134E  3A0E               	xorlw	14	; case 45
  9741  134F  1903               	skipnz
  9742  1350  2B34               	goto	l527
  9743  1351  3A1D               	xorlw	29	; case 48
  9744  1352  1903               	skipnz
  9745  1353  2B3A               	goto	l531
  9746  1354  2B55               	goto	l533
  9747  1355                     l533:	
  9748                           ;doprnt.c: 586: }
  9749                           
  9750                           ;doprnt.c: 585: break;
  9751                           
  9752                           
  9753                           ;doprnt.c: 593: if(flag & 0x08)
  9754  1355  1DBD               	btfss	sprintf@flag,3
  9755  1356  2B5B               	goto	l3115
  9756                           
  9757                           ;doprnt.c: 594: flag &= ~0x04;
  9758  1357  30FB               	movlw	251
  9759  1358  05BD               	andwf	sprintf@flag,f
  9760  1359  30FF               	movlw	255
  9761  135A  05BE               	andwf	sprintf@flag+1,f
  9762  135B                     l3115:	
  9763                           
  9764                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9765  135B  0821               	movf	sprintf@f+1,w
  9766  135C  00FF               	movwf	127
  9767  135D  0820               	movf	sprintf@f,w
  9768  135E  0084               	movwf	4
  9769  135F  120A  158A  2000  160A  118A  	fcall	stringtab
  9770  1364  160A  158A  2042  160A  118A  	fcall	_isdigit
  9771  1369  1C03               	btfss	3,0
  9772  136A  2BAE               	goto	l3127
  9773                           
  9774                           ;doprnt.c: 598: width = 0;
  9775  136B  1283               	bcf	3,5	;RP0=0, select bank0
  9776  136C  1303               	bcf	3,6	;RP1=0, select bank0
  9777  136D  01B9               	clrf	sprintf@width
  9778  136E  01BA               	clrf	sprintf@width+1
  9779  136F                     l3119:	
  9780                           ;doprnt.c: 599: do {
  9781                           
  9782                           
  9783                           ;doprnt.c: 600: width *= 10;
  9784  136F  300A               	movlw	10
  9785  1370  00F0               	movwf	___wmul@multiplier
  9786  1371  3000               	movlw	0
  9787  1372  00F1               	movwf	___wmul@multiplier+1
  9788  1373  1283               	bcf	3,5	;RP0=0, select bank0
  9789  1374  1303               	bcf	3,6	;RP1=0, select bank0
  9790  1375  083A               	movf	sprintf@width+1,w
  9791  1376  00F3               	movwf	___wmul@multiplicand+1
  9792  1377  0839               	movf	sprintf@width,w
  9793  1378  00F2               	movwf	___wmul@multiplicand
  9794  1379  160A  158A  212E  160A  118A  	fcall	___wmul
  9795  137E  0871               	movf	?___wmul+1,w
  9796  137F  1283               	bcf	3,5	;RP0=0, select bank0
  9797  1380  1303               	bcf	3,6	;RP1=0, select bank0
  9798  1381  00BA               	movwf	sprintf@width+1
  9799  1382  0870               	movf	?___wmul,w
  9800  1383  00B9               	movwf	sprintf@width
  9801                           
  9802                           ;doprnt.c: 601: width += *f++ - '0';
  9803  1384  0821               	movf	sprintf@f+1,w
  9804  1385  00FF               	movwf	127
  9805  1386  0820               	movf	sprintf@f,w
  9806  1387  0084               	movwf	4
  9807  1388  120A  158A  2000  160A  118A  	fcall	stringtab
  9808  138D  3ED0               	addlw	208
  9809  138E  00A8               	movwf	??_sprintf
  9810  138F  30FF               	movlw	255
  9811  1390  1803               	skipnc
  9812  1391  3000               	movlw	0
  9813  1392  00A9               	movwf	??_sprintf+1
  9814  1393  0828               	movf	??_sprintf,w
  9815  1394  07B9               	addwf	sprintf@width,f
  9816  1395  1803               	skipnc
  9817  1396  0ABA               	incf	sprintf@width+1,f
  9818  1397  0829               	movf	??_sprintf+1,w
  9819  1398  07BA               	addwf	sprintf@width+1,f
  9820  1399  3001               	movlw	1
  9821  139A  07A0               	addwf	sprintf@f,f
  9822  139B  1803               	skipnc
  9823  139C  0AA1               	incf	sprintf@f+1,f
  9824                           
  9825                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9826  139D  0821               	movf	sprintf@f+1,w
  9827  139E  00FF               	movwf	127
  9828  139F  0820               	movf	sprintf@f,w
  9829  13A0  0084               	movwf	4
  9830  13A1  120A  158A  2000  160A  118A  	fcall	stringtab
  9831  13A6  160A  158A  2042  160A  118A  	fcall	_isdigit
  9832  13AB  1C03               	btfss	3,0
  9833  13AC  2BCC               	goto	l3135
  9834  13AD  2B6F               	goto	l3119
  9835  13AE                     l3127:	
  9836                           ;doprnt.c: 604: } else if(*f == '*') {
  9837                           
  9838  13AE  1283               	bcf	3,5	;RP0=0, select bank0
  9839  13AF  1303               	bcf	3,6	;RP1=0, select bank0
  9840  13B0  0821               	movf	sprintf@f+1,w
  9841  13B1  00FF               	movwf	127
  9842  13B2  0820               	movf	sprintf@f,w
  9843  13B3  0084               	movwf	4
  9844  13B4  120A  158A  2000  160A  118A  	fcall	stringtab
  9845  13B9  3A2A               	xorlw	42
  9846  13BA  1D03               	skipz
  9847  13BB  2BCC               	goto	l3135
  9848                           
  9849                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  9850  13BC  0835               	movf	sprintf@ap,w
  9851  13BD  0084               	movwf	4
  9852  13BE  1383               	bcf	3,7	;select IRP bank0
  9853  13BF  0800               	movf	0,w
  9854  13C0  00B9               	movwf	sprintf@width
  9855  13C1  0A84               	incf	4,f
  9856  13C2  0800               	movf	0,w
  9857  13C3  00BA               	movwf	sprintf@width+1
  9858  13C4  3002               	movlw	2
  9859  13C5  00A8               	movwf	??_sprintf
  9860  13C6  0828               	movf	??_sprintf,w
  9861  13C7  07B5               	addwf	sprintf@ap,f
  9862                           
  9863                           ;doprnt.c: 606: f++;
  9864  13C8  3001               	movlw	1
  9865  13C9  07A0               	addwf	sprintf@f,f
  9866  13CA  1803               	skipnc
  9867  13CB  0AA1               	incf	sprintf@f+1,f
  9868  13CC                     l3135:	
  9869                           
  9870                           ;doprnt.c: 608: }
  9871                           ;doprnt.c: 611: if(*f == '.') {
  9872  13CC  1283               	bcf	3,5	;RP0=0, select bank0
  9873  13CD  1303               	bcf	3,6	;RP1=0, select bank0
  9874  13CE  0821               	movf	sprintf@f+1,w
  9875  13CF  00FF               	movwf	127
  9876  13D0  0820               	movf	sprintf@f,w
  9877  13D1  0084               	movwf	4
  9878  13D2  120A  158A  2000  160A  118A  	fcall	stringtab
  9879  13D7  3A2E               	xorlw	46
  9880  13D8  1D03               	skipz
  9881  13D9  2C2E               	goto	l3153
  9882                           
  9883                           ;doprnt.c: 612: flag |= 0x4000;
  9884  13DA  173E               	bsf	sprintf@flag+1,6
  9885                           
  9886                           ;doprnt.c: 613: f++;
  9887  13DB  3001               	movlw	1
  9888  13DC  07A0               	addwf	sprintf@f,f
  9889  13DD  1803               	skipnc
  9890  13DE  0AA1               	incf	sprintf@f+1,f
  9891                           
  9892                           ;doprnt.c: 615: if(*f == '*') {
  9893  13DF  0821               	movf	sprintf@f+1,w
  9894  13E0  00FF               	movwf	127
  9895  13E1  0820               	movf	sprintf@f,w
  9896  13E2  0084               	movwf	4
  9897  13E3  120A  158A  2000  160A  118A  	fcall	stringtab
  9898  13E8  3A2A               	xorlw	42
  9899  13E9  1D03               	skipz
  9900  13EA  2BFB               	goto	l3147
  9901                           
  9902                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  9903  13EB  0835               	movf	sprintf@ap,w
  9904  13EC  0084               	movwf	4
  9905  13ED  1383               	bcf	3,7	;select IRP bank0
  9906  13EE  0800               	movf	0,w
  9907  13EF  00A8               	movwf	??_sprintf
  9908  13F0  0828               	movf	??_sprintf,w
  9909  13F1  00B8               	movwf	sprintf@prec
  9910  13F2  3002               	movlw	2
  9911  13F3  00A8               	movwf	??_sprintf
  9912  13F4  0828               	movf	??_sprintf,w
  9913  13F5  07B5               	addwf	sprintf@ap,f
  9914                           
  9915                           ;doprnt.c: 617: f++;
  9916  13F6  3001               	movlw	1
  9917  13F7  07A0               	addwf	sprintf@f,f
  9918  13F8  1803               	skipnc
  9919  13F9  0AA1               	incf	sprintf@f+1,f
  9920                           
  9921                           ;doprnt.c: 618: } else
  9922  13FA  2CCA               	goto	l3205
  9923  13FB                     l3147:	
  9924                           
  9925                           ;doprnt.c: 620: {
  9926                           ;doprnt.c: 621: prec = 0;
  9927  13FB  01B8               	clrf	sprintf@prec
  9928  13FC                     l543:	
  9929                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  9930                           
  9931  13FC  0821               	movf	sprintf@f+1,w
  9932  13FD  00FF               	movwf	127
  9933  13FE  0820               	movf	sprintf@f,w
  9934  13FF  0084               	movwf	4
  9935  1400  120A  158A  2000  160A  118A  	fcall	stringtab
  9936  1405  160A  158A  2042  160A  118A  	fcall	_isdigit
  9937  140A  1C03               	btfss	3,0
  9938  140B  2CCA               	goto	l3205
  9939                           
  9940                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  9941  140C  1283               	bcf	3,5	;RP0=0, select bank0
  9942  140D  1303               	bcf	3,6	;RP1=0, select bank0
  9943  140E  0821               	movf	sprintf@f+1,w
  9944  140F  00FF               	movwf	127
  9945  1410  0820               	movf	sprintf@f,w
  9946  1411  0084               	movwf	4
  9947  1412  120A  158A  2000  160A  118A  	fcall	stringtab
  9948  1417  00A8               	movwf	??_sprintf
  9949  1418  300A               	movlw	10
  9950  1419  00A9               	movwf	??_sprintf+1
  9951  141A  0829               	movf	??_sprintf+1,w
  9952  141B  00F0               	movwf	___bmul@multiplicand
  9953  141C  0838               	movf	sprintf@prec,w
  9954  141D  160A  158A  2050  160A  118A  	fcall	___bmul
  9955  1422  1283               	bcf	3,5	;RP0=0, select bank0
  9956  1423  1303               	bcf	3,6	;RP1=0, select bank0
  9957  1424  0728               	addwf	??_sprintf,w
  9958  1425  3ED0               	addlw	-48
  9959  1426  00AA               	movwf	??_sprintf+2
  9960  1427  082A               	movf	??_sprintf+2,w
  9961  1428  00B8               	movwf	sprintf@prec
  9962  1429  3001               	movlw	1
  9963  142A  07A0               	addwf	sprintf@f,f
  9964  142B  1803               	skipnc
  9965  142C  0AA1               	incf	sprintf@f+1,f
  9966  142D  2BFC               	goto	l543
  9967  142E                     l3153:	
  9968                           ;doprnt.c: 624: }
  9969                           ;doprnt.c: 625: } else {
  9970                           
  9971                           
  9972                           ;doprnt.c: 626: prec = 0;
  9973  142E  1283               	bcf	3,5	;RP0=0, select bank0
  9974  142F  1303               	bcf	3,6	;RP1=0, select bank0
  9975  1430  01B8               	clrf	sprintf@prec
  9976                           
  9977                           ;doprnt.c: 630: }
  9978                           ;doprnt.c: 635: switch(c = *f++) {
  9979  1431  2CCA               	goto	l3205
  9980  1432                     l550:	
  9981                           ;doprnt.c: 689: case 'o':
  9982                           
  9983                           ;doprnt.c: 638: goto alldone;
  9984                           
  9985                           ;doprnt.c: 637: case 0:
  9986                           
  9987                           
  9988                           ;doprnt.c: 691: flag |= 0x40;
  9989  1432  173D               	bsf	sprintf@flag,6
  9990                           
  9991                           ;doprnt.c: 698: case 'i':
  9992                           ;doprnt.c: 699: break;
  9993                           
  9994                           ;doprnt.c: 697: case 'd':
  9995                           
  9996                           ;doprnt.c: 693: break;
  9997  1433  2CF6               	goto	l3207
  9998  1434                     l554:	
  9999                           ;doprnt.c: 712: case 'X':
 10000                           
 10001                           
 10002                           ;doprnt.c: 714: flag |= 0x20;
 10003  1434  16BD               	bsf	sprintf@flag,5
 10004  1435                     l555:	
 10005                           ;doprnt.c: 718: case 'x':
 10006                           
 10007                           
 10008                           ;doprnt.c: 721: flag |= 0x80;
 10009  1435  17BD               	bsf	sprintf@flag,7
 10010                           
 10011                           ;doprnt.c: 723: break;
 10012  1436  2CF6               	goto	l3207
 10013  1437                     l3155:	
 10014                           ;doprnt.c: 750: dostring:
 10015                           
 10016                           
 10017                           ;doprnt.c: 753: if(prec && prec < len)
 10018  1437  0838               	movf	sprintf@prec,w
 10019  1438  1903               	btfsc	3,2
 10020  1439  2C4C               	goto	l3161
 10021  143A  0838               	movf	sprintf@prec,w
 10022  143B  00A8               	movwf	??_sprintf
 10023  143C  01A9               	clrf	??_sprintf+1
 10024  143D  1BA8               	btfsc	??_sprintf,7
 10025  143E  03A9               	decf	??_sprintf+1,f
 10026  143F  0834               	movf	sprintf@len+1,w
 10027  1440  0229               	subwf	??_sprintf+1,w
 10028  1441  1D03               	skipz
 10029  1442  2C45               	goto	u3655
 10030  1443  0833               	movf	sprintf@len,w
 10031  1444  0228               	subwf	??_sprintf,w
 10032  1445                     u3655:	
 10033  1445  1803               	skipnc
 10034  1446  2C4C               	goto	l3161
 10035                           
 10036                           ;doprnt.c: 754: len = prec;
 10037  1447  0838               	movf	sprintf@prec,w
 10038  1448  00B3               	movwf	sprintf@len
 10039  1449  01B4               	clrf	sprintf@len+1
 10040  144A  1BB3               	btfsc	sprintf@len,7
 10041  144B  03B4               	decf	sprintf@len+1,f
 10042  144C                     l3161:	
 10043                           
 10044                           ;doprnt.c: 757: if(width > len)
 10045  144C  083A               	movf	sprintf@width+1,w
 10046  144D  0234               	subwf	sprintf@len+1,w
 10047  144E  1D03               	skipz
 10048  144F  2C52               	goto	u3665
 10049  1450  0839               	movf	sprintf@width,w
 10050  1451  0233               	subwf	sprintf@len,w
 10051  1452                     u3665:	
 10052  1452  1803               	skipnc
 10053  1453  2C5B               	goto	l3165
 10054                           
 10055                           ;doprnt.c: 758: width -= len;
 10056  1454  0833               	movf	sprintf@len,w
 10057  1455  02B9               	subwf	sprintf@width,f
 10058  1456  0834               	movf	sprintf@len+1,w
 10059  1457  1C03               	skipc
 10060  1458  03BA               	decf	sprintf@width+1,f
 10061  1459  02BA               	subwf	sprintf@width+1,f
 10062  145A  2C5D               	goto	l3167
 10063  145B                     l3165:	
 10064                           
 10065                           ;doprnt.c: 759: else
 10066                           ;doprnt.c: 760: width = 0;
 10067  145B  01B9               	clrf	sprintf@width
 10068  145C  01BA               	clrf	sprintf@width+1
 10069  145D                     l3167:	
 10070                           
 10071                           ;doprnt.c: 762: if(!(flag & 0x08))
 10072  145D  1DBD               	btfss	sprintf@flag,3
 10073  145E  2C6B               	goto	l3175
 10074  145F  2C8A               	goto	l3183
 10075  1460                     l3171:	
 10076                           ;doprnt.c: 764: while(width--)
 10077                           
 10078                           
 10079                           ;doprnt.c: 765: ((*sp++ = (' ')));
 10080  1460  3020               	movlw	32
 10081  1461  00A8               	movwf	??_sprintf
 10082  1462  083C               	movf	sprintf@sp,w
 10083  1463  0084               	movwf	4
 10084  1464  0828               	movf	??_sprintf,w
 10085  1465  1783               	bsf	3,7	;select IRP bank2
 10086  1466  0080               	movwf	0
 10087  1467  3001               	movlw	1
 10088  1468  00A8               	movwf	??_sprintf
 10089  1469  0828               	movf	??_sprintf,w
 10090  146A  07BC               	addwf	sprintf@sp,f
 10091  146B                     l3175:	
 10092  146B  30FF               	movlw	255
 10093  146C  07B9               	addwf	sprintf@width,f
 10094  146D  1803               	skipnc
 10095  146E  0ABA               	incf	sprintf@width+1,f
 10096  146F  30FF               	movlw	255
 10097  1470  07BA               	addwf	sprintf@width+1,f
 10098  1471  0A39               	incf	sprintf@width,w
 10099  1472  1D03               	skipz
 10100  1473  2C60               	goto	l3171
 10101  1474  0A3A               	incf	sprintf@width+1,w
 10102  1475  1903               	btfsc	3,2
 10103  1476  2C8A               	goto	l3183
 10104  1477  2C60               	goto	l3171
 10105  1478                     l3177:	
 10106                           ;doprnt.c: 767: while(len--)
 10107                           
 10108                           
 10109                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 10110  1478  0832               	movf	sprintf@cp,w
 10111  1479  0084               	movwf	4
 10112  147A  1383               	bcf	3,7	;select IRP bank0
 10113  147B  0800               	movf	0,w
 10114  147C  00A8               	movwf	??_sprintf
 10115  147D  083C               	movf	sprintf@sp,w
 10116  147E  0084               	movwf	4
 10117  147F  0828               	movf	??_sprintf,w
 10118  1480  1783               	bsf	3,7	;select IRP bank2
 10119  1481  0080               	movwf	0
 10120  1482  3001               	movlw	1
 10121  1483  00A8               	movwf	??_sprintf
 10122  1484  0828               	movf	??_sprintf,w
 10123  1485  07B2               	addwf	sprintf@cp,f
 10124  1486  3001               	movlw	1
 10125  1487  00A8               	movwf	??_sprintf
 10126  1488  0828               	movf	??_sprintf,w
 10127  1489  07BC               	addwf	sprintf@sp,f
 10128  148A                     l3183:	
 10129  148A  3001               	movlw	1
 10130  148B  02B3               	subwf	sprintf@len,f
 10131  148C  3000               	movlw	0
 10132  148D  1C03               	skipc
 10133  148E  03B4               	decf	sprintf@len+1,f
 10134  148F  02B4               	subwf	sprintf@len+1,f
 10135  1490  0A33               	incf	sprintf@len,w
 10136  1491  1D03               	skipz
 10137  1492  2C78               	goto	l3177
 10138  1493  0A34               	incf	sprintf@len+1,w
 10139  1494  1D03               	btfss	3,2
 10140  1495  2C78               	goto	l3177
 10141                           
 10142                           ;doprnt.c: 770: if(flag & 0x08)
 10143  1496  19BD               	btfsc	sprintf@flag,3
 10144  1497  2CA4               	goto	l3191
 10145  1498  2B07               	goto	l3415
 10146  1499                     l3187:	
 10147                           ;doprnt.c: 771: while(width--)
 10148                           
 10149                           
 10150                           ;doprnt.c: 772: ((*sp++ = (' ')));
 10151  1499  3020               	movlw	32
 10152  149A  00A8               	movwf	??_sprintf
 10153  149B  083C               	movf	sprintf@sp,w
 10154  149C  0084               	movwf	4
 10155  149D  0828               	movf	??_sprintf,w
 10156  149E  1783               	bsf	3,7	;select IRP bank2
 10157  149F  0080               	movwf	0
 10158  14A0  3001               	movlw	1
 10159  14A1  00A8               	movwf	??_sprintf
 10160  14A2  0828               	movf	??_sprintf,w
 10161  14A3  07BC               	addwf	sprintf@sp,f
 10162  14A4                     l3191:	
 10163  14A4  30FF               	movlw	255
 10164  14A5  07B9               	addwf	sprintf@width,f
 10165  14A6  1803               	skipnc
 10166  14A7  0ABA               	incf	sprintf@width+1,f
 10167  14A8  30FF               	movlw	255
 10168  14A9  07BA               	addwf	sprintf@width+1,f
 10169  14AA  0A39               	incf	sprintf@width,w
 10170  14AB  1D03               	skipz
 10171  14AC  2C99               	goto	l3187
 10172  14AD  0A3A               	incf	sprintf@width+1,w
 10173  14AE  1903               	btfsc	3,2
 10174  14AF  2B07               	goto	l3415
 10175  14B0  2C99               	goto	l3187
 10176  14B1                     l3193:	
 10177                           ;doprnt.c: 784: case 'c':
 10178                           
 10179                           ;doprnt.c: 774: continue;
 10180                           
 10181                           
 10182                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 10183  14B1  0835               	movf	sprintf@ap,w
 10184  14B2  0084               	movwf	4
 10185  14B3  1383               	bcf	3,7	;select IRP bank0
 10186  14B4  0800               	movf	0,w
 10187  14B5  00A8               	movwf	??_sprintf
 10188  14B6  0828               	movf	??_sprintf,w
 10189  14B7  00BB               	movwf	sprintf@c
 10190  14B8  3002               	movlw	2
 10191  14B9  00A8               	movwf	??_sprintf
 10192  14BA  0828               	movf	??_sprintf,w
 10193  14BB  07B5               	addwf	sprintf@ap,f
 10194  14BC                     l3197:	
 10195                           ;doprnt.c: 802: default:
 10196                           
 10197                           
 10198                           ;doprnt.c: 805: cp = (char *)&c;
 10199  14BC  303B               	movlw	(low (sprintf@c| 0))& (0+255)
 10200  14BD  00A8               	movwf	??_sprintf
 10201  14BE  0828               	movf	??_sprintf,w
 10202  14BF  00B2               	movwf	sprintf@cp
 10203                           
 10204                           ;doprnt.c: 806: len = 1;
 10205  14C0  3001               	movlw	1
 10206  14C1  00B3               	movwf	sprintf@len
 10207  14C2  3000               	movlw	0
 10208  14C3  00B4               	movwf	sprintf@len+1
 10209                           
 10210                           ;doprnt.c: 807: goto dostring;
 10211  14C4  2C37               	goto	l3155
 10212  14C5                     l3201:	
 10213                           ;doprnt.c: 817: case 'u':
 10214                           
 10215                           
 10216                           ;doprnt.c: 818: flag |= 0xC0;
 10217  14C5  30C0               	movlw	192
 10218  14C6  04BD               	iorwf	sprintf@flag,f
 10219  14C7  3000               	movlw	0
 10220  14C8  04BE               	iorwf	sprintf@flag+1,f
 10221                           
 10222                           ;doprnt.c: 822: }
 10223                           
 10224                           ;doprnt.c: 819: break;
 10225  14C9  2CF6               	goto	l3207
 10226  14CA                     l3205:	
 10227  14CA  1283               	bcf	3,5	;RP0=0, select bank0
 10228  14CB  1303               	bcf	3,6	;RP1=0, select bank0
 10229  14CC  0821               	movf	sprintf@f+1,w
 10230  14CD  00A9               	movwf	??_sprintf+1
 10231  14CE  0820               	movf	sprintf@f,w
 10232  14CF  00A8               	movwf	??_sprintf
 10233  14D0  0AA0               	incf	sprintf@f,f
 10234  14D1  1903               	skipnz
 10235  14D2  0AA1               	incf	sprintf@f+1,f
 10236  14D3  0829               	movf	??_sprintf+1,w
 10237  14D4  00FF               	movwf	127
 10238  14D5  0828               	movf	??_sprintf,w
 10239  14D6  0084               	movwf	4
 10240  14D7  120A  158A  2000  160A  118A  	fcall	stringtab
 10241  14DC  00BB               	movwf	sprintf@c
 10242                           
 10243                           ; Switch size 1, requested type "space"
 10244                           ; Number of cases is 8, Range of values is 0 to 120
 10245                           ; switch strategies available:
 10246                           ; Name         Instructions Cycles
 10247                           ; simple_byte           25    13 (average)
 10248                           ; jumptable            260     6 (fixed)
 10249                           ;	Chosen strategy is simple_byte
 10250  14DD  3A00               	xorlw	0	; case 0
 10251  14DE  1903               	skipnz
 10252  14DF  2FFB               	goto	l3417
 10253  14E0  3A58               	xorlw	88	; case 88
 10254  14E1  1903               	skipnz
 10255  14E2  2C34               	goto	l554
 10256  14E3  3A3B               	xorlw	59	; case 99
 10257  14E4  1903               	skipnz
 10258  14E5  2CB1               	goto	l3193
 10259  14E6  3A07               	xorlw	7	; case 100
 10260  14E7  1903               	skipnz
 10261  14E8  2CF6               	goto	l3207
 10262  14E9  3A0D               	xorlw	13	; case 105
 10263  14EA  1903               	skipnz
 10264  14EB  2CF6               	goto	l3207
 10265  14EC  3A06               	xorlw	6	; case 111
 10266  14ED  1903               	skipnz
 10267  14EE  2C32               	goto	l550
 10268  14EF  3A1A               	xorlw	26	; case 117
 10269  14F0  1903               	skipnz
 10270  14F1  2CC5               	goto	l3201
 10271  14F2  3A0D               	xorlw	13	; case 120
 10272  14F3  1903               	skipnz
 10273  14F4  2C35               	goto	l555
 10274  14F5  2CBC               	goto	l3197
 10275  14F6                     l3207:	
 10276                           
 10277                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 10278  14F6  30C0               	movlw	192
 10279  14F7  053D               	andwf	sprintf@flag,w
 10280  14F8  00A8               	movwf	??_sprintf
 10281  14F9  3000               	movlw	0
 10282  14FA  053E               	andwf	sprintf@flag+1,w
 10283  14FB  00A9               	movwf	??_sprintf+1
 10284  14FC  0828               	movf	??_sprintf,w
 10285  14FD  0429               	iorwf	??_sprintf+1,w
 10286  14FE  1D03               	btfss	3,2
 10287  14FF  2D18               	goto	l3219
 10288                           
 10289                           ;doprnt.c: 1253: {
 10290                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10291  1500  0835               	movf	sprintf@ap,w
 10292  1501  0084               	movwf	4
 10293  1502  1383               	bcf	3,7	;select IRP bank0
 10294  1503  0800               	movf	0,w
 10295  1504  00B6               	movwf	sprintf@val
 10296  1505  0A84               	incf	4,f
 10297  1506  0800               	movf	0,w
 10298  1507  00B7               	movwf	sprintf@val+1
 10299  1508  3002               	movlw	2
 10300  1509  00A8               	movwf	??_sprintf
 10301  150A  0828               	movf	??_sprintf,w
 10302  150B  07B5               	addwf	sprintf@ap,f
 10303                           
 10304                           ;doprnt.c: 1261: if((int)val < 0) {
 10305  150C  1FB7               	btfss	sprintf@val+1,7
 10306  150D  2D24               	goto	l3223
 10307                           
 10308                           ;doprnt.c: 1262: flag |= 0x03;
 10309  150E  3003               	movlw	3
 10310  150F  04BD               	iorwf	sprintf@flag,f
 10311  1510  3000               	movlw	0
 10312  1511  04BE               	iorwf	sprintf@flag+1,f
 10313                           
 10314                           ;doprnt.c: 1263: val = -val;
 10315  1512  09B6               	comf	sprintf@val,f
 10316  1513  09B7               	comf	sprintf@val+1,f
 10317  1514  0AB6               	incf	sprintf@val,f
 10318  1515  1903               	skipnz
 10319  1516  0AB7               	incf	sprintf@val+1,f
 10320                           
 10321                           ;doprnt.c: 1264: }
 10322                           ;doprnt.c: 1266: }
 10323  1517  2D24               	goto	l3223
 10324  1518                     l3219:	
 10325                           
 10326                           ;doprnt.c: 1268: else
 10327                           ;doprnt.c: 1273: {
 10328                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10329  1518  0835               	movf	sprintf@ap,w
 10330  1519  0084               	movwf	4
 10331  151A  1383               	bcf	3,7	;select IRP bank0
 10332  151B  0800               	movf	0,w
 10333  151C  00B6               	movwf	sprintf@val
 10334  151D  0A84               	incf	4,f
 10335  151E  0800               	movf	0,w
 10336  151F  00B7               	movwf	sprintf@val+1
 10337  1520  3002               	movlw	2
 10338  1521  00A8               	movwf	??_sprintf
 10339  1522  0828               	movf	??_sprintf,w
 10340  1523  07B5               	addwf	sprintf@ap,f
 10341  1524                     l3223:	
 10342                           
 10343                           ;doprnt.c: 1287: }
 10344                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 10345  1524  0838               	movf	sprintf@prec,w
 10346  1525  1D03               	btfss	3,2
 10347  1526  2DA8               	goto	l3261
 10348  1527  0836               	movf	sprintf@val,w
 10349  1528  0437               	iorwf	sprintf@val+1,w
 10350  1529  1D03               	btfss	3,2
 10351  152A  2DA8               	goto	l3261
 10352                           
 10353                           ;doprnt.c: 1291: prec++;
 10354  152B  3001               	movlw	1
 10355  152C  00A8               	movwf	??_sprintf
 10356  152D  0828               	movf	??_sprintf,w
 10357  152E  07B8               	addwf	sprintf@prec,f
 10358                           
 10359                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 10360  152F  2DA8               	goto	l3261
 10361  1530                     l580:	
 10362                           ;doprnt.c: 1299: case 0x00:
 10363                           
 10364                           
 10365                           ;doprnt.c: 1302: case 0xC0:
 10366                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10367  1530  01BB               	clrf	sprintf@c
 10368  1531  0ABB               	incf	sprintf@c,f
 10369  1532                     L26:	
 10370  1532  3005               	movlw	5
 10371  1533  063B               	xorwf	sprintf@c,w
 10372  1534  1903               	btfsc	3,2
 10373  1535  2DB7               	goto	l3263
 10374                           
 10375                           ;doprnt.c: 1306: if(val < dpowers[c])
 10376  1536  083B               	movf	sprintf@c,w
 10377  1537  00A8               	movwf	??_sprintf
 10378  1538  0728               	addwf	??_sprintf,w
 10379  1539  3E1E               	addlw	low (_dpowers| (0+32768))
 10380  153A  0084               	movwf	4
 10381  153B  3088               	movlw	high (_dpowers| (0+32768))
 10382  153C  1803               	skipnc
 10383  153D  3E01               	addlw	1
 10384  153E  00FF               	movwf	127
 10385  153F  120A  158A  2000  160A  118A  	fcall	stringtab
 10386  1544  00A9               	movwf	??_sprintf+1
 10387  1545  120A  158A  2000  160A  118A  	fcall	stringtab
 10388  154A  00AA               	movwf	??_sprintf+2
 10389  154B  082A               	movf	??_sprintf+2,w
 10390  154C  0237               	subwf	sprintf@val+1,w
 10391  154D  1D03               	skipz
 10392  154E  2D51               	goto	u3775
 10393  154F  0829               	movf	??_sprintf+1,w
 10394  1550  0236               	subwf	sprintf@val,w
 10395  1551                     u3775:	
 10396  1551  1C03               	btfss	3,0
 10397  1552  2DB7               	goto	l3263
 10398                           
 10399                           ;doprnt.c: 1307: break;
 10400  1553  3001               	movlw	1
 10401  1554  00A8               	movwf	??_sprintf
 10402  1555  0828               	movf	??_sprintf,w
 10403  1556  07BB               	addwf	sprintf@c,f
 10404  1557  2D32               	goto	L26
 10405  1558                     l585:	
 10406                           ;doprnt.c: 1314: case 0x80:
 10407                           
 10408                           ;doprnt.c: 1309: break;
 10409                           
 10410                           
 10411                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10412  1558  01BB               	clrf	sprintf@c
 10413  1559  0ABB               	incf	sprintf@c,f
 10414  155A                     L27:	
 10415  155A  3004               	movlw	4
 10416  155B  063B               	xorwf	sprintf@c,w
 10417  155C  1903               	btfsc	3,2
 10418  155D  2DB7               	goto	l3263
 10419                           
 10420                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10421  155E  083B               	movf	sprintf@c,w
 10422  155F  00A8               	movwf	??_sprintf
 10423  1560  0728               	addwf	??_sprintf,w
 10424  1561  3E28               	addlw	low (_hexpowers| (0+32768))
 10425  1562  0084               	movwf	4
 10426  1563  3088               	movlw	high (_hexpowers| (0+32768))
 10427  1564  1803               	skipnc
 10428  1565  3E01               	addlw	1
 10429  1566  00FF               	movwf	127
 10430  1567  120A  158A  2000  160A  118A  	fcall	stringtab
 10431  156C  00A9               	movwf	??_sprintf+1
 10432  156D  120A  158A  2000  160A  118A  	fcall	stringtab
 10433  1572  00AA               	movwf	??_sprintf+2
 10434  1573  082A               	movf	??_sprintf+2,w
 10435  1574  0237               	subwf	sprintf@val+1,w
 10436  1575  1D03               	skipz
 10437  1576  2D79               	goto	u3805
 10438  1577  0829               	movf	??_sprintf+1,w
 10439  1578  0236               	subwf	sprintf@val,w
 10440  1579                     u3805:	
 10441  1579  1C03               	btfss	3,0
 10442  157A  2DB7               	goto	l3263
 10443                           
 10444                           ;doprnt.c: 1318: break;
 10445  157B  3001               	movlw	1
 10446  157C  00A8               	movwf	??_sprintf
 10447  157D  0828               	movf	??_sprintf,w
 10448  157E  07BB               	addwf	sprintf@c,f
 10449  157F  2D5A               	goto	L27
 10450  1580                     l589:	
 10451                           ;doprnt.c: 1326: case 0x40:
 10452                           
 10453                           ;doprnt.c: 1320: break;
 10454                           
 10455                           
 10456                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 10457  1580  01BB               	clrf	sprintf@c
 10458  1581  0ABB               	incf	sprintf@c,f
 10459  1582                     L28:	
 10460  1582  3006               	movlw	6
 10461  1583  063B               	xorwf	sprintf@c,w
 10462  1584  1903               	btfsc	3,2
 10463  1585  2DB7               	goto	l3263
 10464                           
 10465                           ;doprnt.c: 1329: if(val < octpowers[c])
 10466  1586  083B               	movf	sprintf@c,w
 10467  1587  00A8               	movwf	??_sprintf
 10468  1588  0728               	addwf	??_sprintf,w
 10469  1589  3E12               	addlw	low (_octpowers| (0+32768))
 10470  158A  0084               	movwf	4
 10471  158B  3088               	movlw	high (_octpowers| (0+32768))
 10472  158C  1803               	skipnc
 10473  158D  3E01               	addlw	1
 10474  158E  00FF               	movwf	127
 10475  158F  120A  158A  2000  160A  118A  	fcall	stringtab
 10476  1594  00A9               	movwf	??_sprintf+1
 10477  1595  120A  158A  2000  160A  118A  	fcall	stringtab
 10478  159A  00AA               	movwf	??_sprintf+2
 10479  159B  082A               	movf	??_sprintf+2,w
 10480  159C  0237               	subwf	sprintf@val+1,w
 10481  159D  1D03               	skipz
 10482  159E  2DA1               	goto	u3835
 10483  159F  0829               	movf	??_sprintf+1,w
 10484  15A0  0236               	subwf	sprintf@val,w
 10485  15A1                     u3835:	
 10486  15A1  1C03               	btfss	3,0
 10487  15A2  2DB7               	goto	l3263
 10488                           
 10489                           ;doprnt.c: 1330: break;
 10490  15A3  3001               	movlw	1
 10491  15A4  00A8               	movwf	??_sprintf
 10492  15A5  0828               	movf	??_sprintf,w
 10493  15A6  07BB               	addwf	sprintf@c,f
 10494  15A7  2D82               	goto	L28
 10495  15A8                     l3261:	
 10496                           ;doprnt.c: 1336: }
 10497                           
 10498                           ;doprnt.c: 1332: break;
 10499                           
 10500  15A8  083D               	movf	sprintf@flag,w
 10501  15A9  39C0               	andlw	192
 10502                           
 10503                           ; Switch size 1, requested type "space"
 10504                           ; Number of cases is 4, Range of values is 0 to 192
 10505                           ; switch strategies available:
 10506                           ; Name         Instructions Cycles
 10507                           ; simple_byte           13     7 (average)
 10508                           ; jumptable            260     6 (fixed)
 10509                           ;	Chosen strategy is simple_byte
 10510  15AA  3A00               	xorlw	0	; case 0
 10511  15AB  1903               	skipnz
 10512  15AC  2D30               	goto	l580
 10513  15AD  3A40               	xorlw	64	; case 64
 10514  15AE  1903               	skipnz
 10515  15AF  2D80               	goto	l589
 10516  15B0  3AC0               	xorlw	192	; case 128
 10517  15B1  1903               	skipnz
 10518  15B2  2D58               	goto	l585
 10519  15B3  3A40               	xorlw	64	; case 192
 10520  15B4  1903               	skipnz
 10521  15B5  2D30               	goto	l580
 10522  15B6  2DB7               	goto	l3263
 10523  15B7                     l3263:	
 10524                           
 10525                           ;doprnt.c: 1339: if(c < prec)
 10526  15B7  083B               	movf	sprintf@c,w
 10527  15B8  3A80               	xorlw	128
 10528  15B9  00A8               	movwf	??_sprintf
 10529  15BA  0838               	movf	sprintf@prec,w
 10530  15BB  3A80               	xorlw	128
 10531  15BC  02A8               	subwf	??_sprintf,f
 10532  15BD  1803               	skipnc
 10533  15BE  2DC4               	goto	l3267
 10534                           
 10535                           ;doprnt.c: 1340: c = prec;
 10536  15BF  0838               	movf	sprintf@prec,w
 10537  15C0  00A8               	movwf	??_sprintf
 10538  15C1  0828               	movf	??_sprintf,w
 10539  15C2  00BB               	movwf	sprintf@c
 10540  15C3  2DD0               	goto	l3271
 10541  15C4                     l3267:	
 10542                           
 10543                           ;doprnt.c: 1341: else if(prec < c)
 10544  15C4  0838               	movf	sprintf@prec,w
 10545  15C5  3A80               	xorlw	128
 10546  15C6  00A8               	movwf	??_sprintf
 10547  15C7  083B               	movf	sprintf@c,w
 10548  15C8  3A80               	xorlw	128
 10549  15C9  02A8               	subwf	??_sprintf,f
 10550  15CA  1803               	skipnc
 10551  15CB  2DD0               	goto	l3271
 10552                           
 10553                           ;doprnt.c: 1342: prec = c;
 10554  15CC  083B               	movf	sprintf@c,w
 10555  15CD  00A8               	movwf	??_sprintf
 10556  15CE  0828               	movf	??_sprintf,w
 10557  15CF  00B8               	movwf	sprintf@prec
 10558  15D0                     l3271:	
 10559                           
 10560                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10561  15D0  0839               	movf	sprintf@width,w
 10562  15D1  043A               	iorwf	sprintf@width+1,w
 10563  15D2  1903               	btfsc	3,2
 10564  15D3  2DE4               	goto	l3277
 10565  15D4  3003               	movlw	3
 10566  15D5  053D               	andwf	sprintf@flag,w
 10567  15D6  00A8               	movwf	??_sprintf
 10568  15D7  3000               	movlw	0
 10569  15D8  053E               	andwf	sprintf@flag+1,w
 10570  15D9  00A9               	movwf	??_sprintf+1
 10571  15DA  0828               	movf	??_sprintf,w
 10572  15DB  0429               	iorwf	??_sprintf+1,w
 10573  15DC  1903               	btfsc	3,2
 10574  15DD  2DE4               	goto	l3277
 10575                           
 10576                           ;doprnt.c: 1346: width--;
 10577  15DE  30FF               	movlw	255
 10578  15DF  07B9               	addwf	sprintf@width,f
 10579  15E0  1803               	skipnc
 10580  15E1  0ABA               	incf	sprintf@width+1,f
 10581  15E2  30FF               	movlw	255
 10582  15E3  07BA               	addwf	sprintf@width+1,f
 10583  15E4                     l3277:	
 10584                           
 10585                           ;doprnt.c: 1348: if(flag & 0x4000) {
 10586  15E4  1F3E               	btfss	sprintf@flag+1,6
 10587  15E5  2E09               	goto	l3285
 10588                           
 10589                           ;doprnt.c: 1349: if(width > prec)
 10590  15E6  0838               	movf	sprintf@prec,w
 10591  15E7  00A8               	movwf	??_sprintf
 10592  15E8  01A9               	clrf	??_sprintf+1
 10593  15E9  1BA8               	btfsc	??_sprintf,7
 10594  15EA  03A9               	decf	??_sprintf+1,f
 10595  15EB  0829               	movf	??_sprintf+1,w
 10596  15EC  3A80               	xorlw	128
 10597  15ED  00AA               	movwf	??_sprintf+2
 10598  15EE  083A               	movf	sprintf@width+1,w
 10599  15EF  3A80               	xorlw	128
 10600  15F0  022A               	subwf	??_sprintf+2,w
 10601  15F1  1D03               	skipz
 10602  15F2  2DF5               	goto	u3905
 10603  15F3  0839               	movf	sprintf@width,w
 10604  15F4  0228               	subwf	??_sprintf,w
 10605  15F5                     u3905:	
 10606  15F5  1803               	skipnc
 10607  15F6  2E05               	goto	l3283
 10608                           
 10609                           ;doprnt.c: 1350: width -= prec;
 10610  15F7  1283               	bcf	3,5	;RP0=0, select bank0
 10611  15F8  1303               	bcf	3,6	;RP1=0, select bank0
 10612  15F9  0838               	movf	sprintf@prec,w
 10613  15FA  00A8               	movwf	??_sprintf
 10614  15FB  01A9               	clrf	??_sprintf+1
 10615  15FC  1BA8               	btfsc	??_sprintf,7
 10616  15FD  03A9               	decf	??_sprintf+1,f
 10617  15FE  0828               	movf	??_sprintf,w
 10618  15FF  02B9               	subwf	sprintf@width,f
 10619  1600  0829               	movf	??_sprintf+1,w
 10620  1601  1C03               	skipc
 10621  1602  03BA               	decf	sprintf@width+1,f
 10622  1603  02BA               	subwf	sprintf@width+1,f
 10623  1604  2E09               	goto	l3285
 10624  1605                     l3283:	
 10625                           
 10626                           ;doprnt.c: 1351: else
 10627                           ;doprnt.c: 1352: width = 0;
 10628  1605  1283               	bcf	3,5	;RP0=0, select bank0
 10629  1606  1303               	bcf	3,6	;RP1=0, select bank0
 10630  1607  01B9               	clrf	sprintf@width
 10631  1608  01BA               	clrf	sprintf@width+1
 10632  1609                     l3285:	
 10633                           
 10634                           ;doprnt.c: 1353: }
 10635                           ;doprnt.c: 1357: if((flag & (
 10636                           ;doprnt.c: 1359: 0x04|
 10637                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
 10638  1609  30C4               	movlw	196
 10639  160A  053D               	andwf	sprintf@flag,w
 10640  160B  00A8               	movwf	??_sprintf
 10641  160C  3008               	movlw	8
 10642  160D  053E               	andwf	sprintf@flag+1,w
 10643  160E  00A9               	movwf	??_sprintf+1
 10644  160F  3040               	movlw	64
 10645  1610  0628               	xorwf	??_sprintf,w
 10646  1611  3008               	movlw	8
 10647  1612  1903               	skipnz
 10648  1613  0629               	xorwf	??_sprintf+1,w
 10649  1614  1D03               	btfss	3,2
 10650  1615  2E1C               	goto	l3291
 10651                           
 10652                           ;doprnt.c: 1362: if(width)
 10653  1616  0839               	movf	sprintf@width,w
 10654  1617  043A               	iorwf	sprintf@width+1,w
 10655  1618  1903               	btfsc	3,2
 10656  1619  2E41               	goto	l3299
 10657                           
 10658                           ;doprnt.c: 1363: width--;
 10659  161A  30FF               	movlw	255
 10660  161B  2E37               	goto	L20
 10661  161C                     l3291:	
 10662                           ;doprnt.c: 1364: } else
 10663                           
 10664                           
 10665                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10666  161C  30C0               	movlw	192
 10667  161D  053D               	andwf	sprintf@flag,w
 10668  161E  00A8               	movwf	??_sprintf
 10669  161F  3008               	movlw	8
 10670  1620  053E               	andwf	sprintf@flag+1,w
 10671  1621  00A9               	movwf	??_sprintf+1
 10672  1622  3080               	movlw	128
 10673  1623  0628               	xorwf	??_sprintf,w
 10674  1624  3008               	movlw	8
 10675  1625  1903               	skipnz
 10676  1626  0629               	xorwf	??_sprintf+1,w
 10677  1627  1D03               	btfss	3,2
 10678  1628  2E41               	goto	l3299
 10679                           
 10680                           ;doprnt.c: 1372: if(width > 2)
 10681  1629  083A               	movf	sprintf@width+1,w
 10682  162A  3A80               	xorlw	128
 10683  162B  00FF               	movwf	127
 10684  162C  3080               	movlw	128
 10685  162D  027F               	subwf	127,w
 10686  162E  1D03               	skipz
 10687  162F  2E32               	goto	u3945
 10688  1630  3003               	movlw	3
 10689  1631  0239               	subwf	sprintf@width,w
 10690  1632                     u3945:	
 10691  1632  1C03               	skipc
 10692  1633  2E3D               	goto	l3297
 10693                           
 10694                           ;doprnt.c: 1373: width -= 2;
 10695  1634  30FE               	movlw	254
 10696  1635  1283               	bcf	3,5	;RP0=0, select bank0
 10697  1636  1303               	bcf	3,6	;RP1=0, select bank0
 10698  1637                     L20:	
 10699  1637  07B9               	addwf	sprintf@width,f
 10700  1638  1803               	skipnc
 10701  1639  0ABA               	incf	sprintf@width+1,f
 10702  163A  30FF               	movlw	255
 10703  163B  07BA               	addwf	sprintf@width+1,f
 10704  163C  2E41               	goto	l3299
 10705  163D                     l3297:	
 10706                           
 10707                           ;doprnt.c: 1374: else
 10708                           ;doprnt.c: 1375: width = 0;
 10709  163D  1283               	bcf	3,5	;RP0=0, select bank0
 10710  163E  1303               	bcf	3,6	;RP1=0, select bank0
 10711  163F  01B9               	clrf	sprintf@width
 10712  1640  01BA               	clrf	sprintf@width+1
 10713  1641                     l3299:	
 10714                           
 10715                           ;doprnt.c: 1376: }
 10716                           ;doprnt.c: 1381: if(width > c)
 10717  1641  083B               	movf	sprintf@c,w
 10718  1642  00A8               	movwf	??_sprintf
 10719  1643  01A9               	clrf	??_sprintf+1
 10720  1644  1BA8               	btfsc	??_sprintf,7
 10721  1645  03A9               	decf	??_sprintf+1,f
 10722  1646  0829               	movf	??_sprintf+1,w
 10723  1647  3A80               	xorlw	128
 10724  1648  00AA               	movwf	??_sprintf+2
 10725  1649  083A               	movf	sprintf@width+1,w
 10726  164A  3A80               	xorlw	128
 10727  164B  022A               	subwf	??_sprintf+2,w
 10728  164C  1D03               	skipz
 10729  164D  2E50               	goto	u3955
 10730  164E  0839               	movf	sprintf@width,w
 10731  164F  0228               	subwf	??_sprintf,w
 10732  1650                     u3955:	
 10733  1650  1803               	skipnc
 10734  1651  2E60               	goto	l3303
 10735                           
 10736                           ;doprnt.c: 1382: width -= c;
 10737  1652  1283               	bcf	3,5	;RP0=0, select bank0
 10738  1653  1303               	bcf	3,6	;RP1=0, select bank0
 10739  1654  083B               	movf	sprintf@c,w
 10740  1655  00A8               	movwf	??_sprintf
 10741  1656  01A9               	clrf	??_sprintf+1
 10742  1657  1BA8               	btfsc	??_sprintf,7
 10743  1658  03A9               	decf	??_sprintf+1,f
 10744  1659  0828               	movf	??_sprintf,w
 10745  165A  02B9               	subwf	sprintf@width,f
 10746  165B  0829               	movf	??_sprintf+1,w
 10747  165C  1C03               	skipc
 10748  165D  03BA               	decf	sprintf@width+1,f
 10749  165E  02BA               	subwf	sprintf@width+1,f
 10750  165F  2E64               	goto	l3305
 10751  1660                     l3303:	
 10752                           
 10753                           ;doprnt.c: 1383: else
 10754                           ;doprnt.c: 1384: width = 0;
 10755  1660  1283               	bcf	3,5	;RP0=0, select bank0
 10756  1661  1303               	bcf	3,6	;RP1=0, select bank0
 10757  1662  01B9               	clrf	sprintf@width
 10758  1663  01BA               	clrf	sprintf@width+1
 10759  1664                     l3305:	
 10760                           
 10761                           ;doprnt.c: 1387: if(flag & 0x04) {
 10762  1664  1D3D               	btfss	sprintf@flag,2
 10763  1665  2EBB               	goto	l3341
 10764                           
 10765                           ;doprnt.c: 1392: if(flag & 0x03)
 10766  1666  3003               	movlw	3
 10767  1667  053D               	andwf	sprintf@flag,w
 10768  1668  00A8               	movwf	??_sprintf
 10769  1669  3000               	movlw	0
 10770  166A  053E               	andwf	sprintf@flag+1,w
 10771  166B  00A9               	movwf	??_sprintf+1
 10772  166C  0828               	movf	??_sprintf,w
 10773  166D  0429               	iorwf	??_sprintf+1,w
 10774  166E  1903               	btfsc	3,2
 10775  166F  2E72               	goto	l609
 10776                           
 10777                           ;doprnt.c: 1393: ((*sp++ = ('-')));
 10778  1670  302D               	movlw	45
 10779  1671  2E75               	goto	L33
 10780  1672                     l609:	
 10781                           
 10782                           ;doprnt.c: 1396: else
 10783                           ;doprnt.c: 1399: if(flag & 0x01)
 10784  1672  1C3D               	btfss	sprintf@flag,0
 10785  1673  2E7B               	goto	l3317
 10786                           
 10787                           ;doprnt.c: 1400: ((*sp++ = (' ')));
 10788  1674  3020               	movlw	32
 10789  1675                     L33:	
 10790  1675  00A8               	movwf	??_sprintf
 10791  1676  083C               	movf	sprintf@sp,w
 10792  1677  0084               	movwf	4
 10793  1678  0828               	movf	??_sprintf,w
 10794  1679  1783               	bsf	3,7	;select IRP bank2
 10795  167A  2EA0               	goto	L29
 10796  167B                     l3317:	
 10797                           
 10798                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10799  167B  30C0               	movlw	192
 10800  167C  053D               	andwf	sprintf@flag,w
 10801  167D  00A8               	movwf	??_sprintf
 10802  167E  3008               	movlw	8
 10803  167F  053E               	andwf	sprintf@flag+1,w
 10804  1680  00A9               	movwf	??_sprintf+1
 10805  1681  3080               	movlw	128
 10806  1682  0628               	xorwf	??_sprintf,w
 10807  1683  3008               	movlw	8
 10808  1684  1903               	skipnz
 10809  1685  0629               	xorwf	??_sprintf+1,w
 10810  1686  1D03               	btfss	3,2
 10811  1687  2EA5               	goto	l3333
 10812                           
 10813                           ;doprnt.c: 1404: ((*sp++ = ('0')));
 10814  1688  3030               	movlw	48
 10815  1689  00A8               	movwf	??_sprintf
 10816  168A  083C               	movf	sprintf@sp,w
 10817  168B  0084               	movwf	4
 10818  168C  0828               	movf	??_sprintf,w
 10819  168D  1783               	bsf	3,7	;select IRP bank2
 10820  168E  0080               	movwf	0
 10821  168F  3001               	movlw	1
 10822  1690  00A8               	movwf	??_sprintf
 10823  1691  0828               	movf	??_sprintf,w
 10824  1692  07BC               	addwf	sprintf@sp,f
 10825                           
 10826                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 10827  1693  1ABD               	btfsc	sprintf@flag,5
 10828  1694  2E97               	goto	l3327
 10829  1695  3078               	movlw	120
 10830  1696  2E98               	goto	L21
 10831  1697                     l3327:	
 10832  1697  3058               	movlw	88
 10833  1698                     L21:	
 10834  1698  00AB               	movwf	_sprintf$713
 10835  1699  3000               	movlw	0
 10836  169A  00AC               	movwf	_sprintf$713+1
 10837  169B  082B               	movf	_sprintf$713,w
 10838  169C  00A8               	movwf	??_sprintf
 10839  169D  083C               	movf	sprintf@sp,w
 10840  169E  0084               	movwf	4
 10841  169F  0828               	movf	??_sprintf,w
 10842  16A0                     L29:	
 10843  16A0  0080               	movwf	0
 10844  16A1  3001               	movlw	1
 10845  16A2  00A8               	movwf	??_sprintf
 10846  16A3  0828               	movf	??_sprintf,w
 10847  16A4  07BC               	addwf	sprintf@sp,f
 10848  16A5                     l3333:	
 10849                           
 10850                           ;doprnt.c: 1412: }
 10851                           ;doprnt.c: 1415: if(width)
 10852  16A5  0839               	movf	sprintf@width,w
 10853  16A6  043A               	iorwf	sprintf@width+1,w
 10854  16A7  1903               	btfsc	3,2
 10855  16A8  2FBF               	goto	l3405
 10856                           
 10857                           ;doprnt.c: 1417: ((*sp++ = ('0')));
 10858                           
 10859                           ;doprnt.c: 1416: do
 10860  16A9  3030               	movlw	48
 10861  16AA  00A8               	movwf	??_sprintf
 10862  16AB  083C               	movf	sprintf@sp,w
 10863  16AC  0084               	movwf	4
 10864  16AD  0828               	movf	??_sprintf,w
 10865  16AE  1783               	bsf	3,7	;select IRP bank2
 10866  16AF  0080               	movwf	0
 10867  16B0  3001               	movlw	1
 10868  16B1  00A8               	movwf	??_sprintf
 10869  16B2  0828               	movf	??_sprintf,w
 10870  16B3  07BC               	addwf	sprintf@sp,f
 10871                           
 10872                           ;doprnt.c: 1418: while(--width);
 10873  16B4  30FF               	movlw	255
 10874  16B5  07B9               	addwf	sprintf@width,f
 10875  16B6  1803               	skipnc
 10876  16B7  0ABA               	incf	sprintf@width+1,f
 10877  16B8  30FF               	movlw	255
 10878  16B9  07BA               	addwf	sprintf@width+1,f
 10879  16BA  2EA5               	goto	l3333
 10880  16BB                     l3341:	
 10881                           ;doprnt.c: 1420: } else
 10882                           
 10883                           
 10884                           ;doprnt.c: 1422: {
 10885                           ;doprnt.c: 1424: if(width
 10886                           ;doprnt.c: 1426: && !(flag & 0x08)
 10887                           ;doprnt.c: 1428: )
 10888  16BB  0839               	movf	sprintf@width,w
 10889  16BC  043A               	iorwf	sprintf@width+1,w
 10890  16BD  1D03               	btfss	3,2
 10891  16BE  19BD               	btfsc	sprintf@flag,3
 10892  16BF  2ED5               	goto	l3351
 10893  16C0                     l3345:	
 10894                           ;doprnt.c: 1429: do
 10895                           
 10896                           
 10897                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 10898  16C0  3020               	movlw	32
 10899  16C1  00A8               	movwf	??_sprintf
 10900  16C2  083C               	movf	sprintf@sp,w
 10901  16C3  0084               	movwf	4
 10902  16C4  0828               	movf	??_sprintf,w
 10903  16C5  1783               	bsf	3,7	;select IRP bank2
 10904  16C6  0080               	movwf	0
 10905  16C7  3001               	movlw	1
 10906  16C8  00A8               	movwf	??_sprintf
 10907  16C9  0828               	movf	??_sprintf,w
 10908  16CA  07BC               	addwf	sprintf@sp,f
 10909                           
 10910                           ;doprnt.c: 1431: while(--width);
 10911  16CB  30FF               	movlw	255
 10912  16CC  07B9               	addwf	sprintf@width,f
 10913  16CD  1803               	skipnc
 10914  16CE  0ABA               	incf	sprintf@width+1,f
 10915  16CF  30FF               	movlw	255
 10916  16D0  07BA               	addwf	sprintf@width+1,f
 10917  16D1  0839               	movf	sprintf@width,w
 10918  16D2  043A               	iorwf	sprintf@width+1,w
 10919  16D3  1D03               	btfss	3,2
 10920  16D4  2EC0               	goto	l3345
 10921  16D5                     l3351:	
 10922                           
 10923                           ;doprnt.c: 1438: if(flag & 0x03)
 10924  16D5  3003               	movlw	3
 10925  16D6  053D               	andwf	sprintf@flag,w
 10926  16D7  00A8               	movwf	??_sprintf
 10927  16D8  3000               	movlw	0
 10928  16D9  053E               	andwf	sprintf@flag+1,w
 10929  16DA  00A9               	movwf	??_sprintf+1
 10930  16DB  0828               	movf	??_sprintf,w
 10931  16DC  0429               	iorwf	??_sprintf+1,w
 10932  16DD  1903               	btfsc	3,2
 10933  16DE  2EE1               	goto	l625
 10934                           
 10935                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10936  16DF  302D               	movlw	45
 10937  16E0  2EE4               	goto	L30
 10938  16E1                     l625:	
 10939                           
 10940                           ;doprnt.c: 1443: else if(flag & 0x01)
 10941  16E1  1C3D               	btfss	sprintf@flag,0
 10942  16E2  2EEE               	goto	l3361
 10943                           
 10944                           ;doprnt.c: 1444: ((*sp++ = (' ')));
 10945  16E3  3020               	movlw	32
 10946  16E4                     L30:	
 10947  16E4  00A8               	movwf	??_sprintf
 10948  16E5  083C               	movf	sprintf@sp,w
 10949  16E6  0084               	movwf	4
 10950  16E7  0828               	movf	??_sprintf,w
 10951  16E8  1783               	bsf	3,7	;select IRP bank2
 10952  16E9  0080               	movwf	0
 10953  16EA  3001               	movlw	1
 10954  16EB  00A8               	movwf	??_sprintf
 10955  16EC  0828               	movf	??_sprintf,w
 10956  16ED  07BC               	addwf	sprintf@sp,f
 10957  16EE                     l3361:	
 10958                           
 10959                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 10960  16EE  30C0               	movlw	192
 10961  16EF  053D               	andwf	sprintf@flag,w
 10962  16F0  00A8               	movwf	??_sprintf
 10963  16F1  3008               	movlw	8
 10964  16F2  053E               	andwf	sprintf@flag+1,w
 10965  16F3  00A9               	movwf	??_sprintf+1
 10966  16F4  3040               	movlw	64
 10967  16F5  0628               	xorwf	??_sprintf,w
 10968  16F6  3008               	movlw	8
 10969  16F7  1903               	skipnz
 10970  16F8  0629               	xorwf	??_sprintf+1,w
 10971  16F9  1D03               	btfss	3,2
 10972  16FA  2EFD               	goto	l3367
 10973                           
 10974                           ;doprnt.c: 1449: ((*sp++ = ('0')));
 10975  16FB  3030               	movlw	48
 10976  16FC  2FB5               	goto	L34
 10977  16FD                     l3367:	
 10978                           
 10979                           ;doprnt.c: 1450: else
 10980                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10981  16FD  30C0               	movlw	192
 10982  16FE  053D               	andwf	sprintf@flag,w
 10983  16FF  00A8               	movwf	??_sprintf
 10984  1700  3008               	movlw	8
 10985  1701  053E               	andwf	sprintf@flag+1,w
 10986  1702  00A9               	movwf	??_sprintf+1
 10987  1703  3080               	movlw	128
 10988  1704  0628               	xorwf	??_sprintf,w
 10989  1705  3008               	movlw	8
 10990  1706  1903               	skipnz
 10991  1707  0629               	xorwf	??_sprintf+1,w
 10992  1708  1D03               	btfss	3,2
 10993  1709  2FBF               	goto	l3405
 10994                           
 10995                           ;doprnt.c: 1458: ((*sp++ = ('0')));
 10996  170A  3030               	movlw	48
 10997  170B  00A8               	movwf	??_sprintf
 10998  170C  083C               	movf	sprintf@sp,w
 10999  170D  0084               	movwf	4
 11000  170E  0828               	movf	??_sprintf,w
 11001  170F  1783               	bsf	3,7	;select IRP bank2
 11002  1710  0080               	movwf	0
 11003  1711  3001               	movlw	1
 11004  1712  00A8               	movwf	??_sprintf
 11005  1713  0828               	movf	??_sprintf,w
 11006  1714  07BC               	addwf	sprintf@sp,f
 11007                           
 11008                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 11009  1715  1ABD               	btfsc	sprintf@flag,5
 11010  1716  2F19               	goto	l3377
 11011  1717  3078               	movlw	120
 11012  1718  2F1A               	goto	L22
 11013  1719                     l3377:	
 11014  1719  3058               	movlw	88
 11015  171A                     L22:	
 11016  171A  00AD               	movwf	_sprintf$714
 11017  171B  3000               	movlw	0
 11018  171C  00AE               	movwf	_sprintf$714+1
 11019  171D  082D               	movf	_sprintf$714,w
 11020  171E  00A8               	movwf	??_sprintf
 11021  171F  083C               	movf	sprintf@sp,w
 11022  1720  0084               	movwf	4
 11023  1721  0828               	movf	??_sprintf,w
 11024  1722  2FBA               	goto	L31
 11025  1723                     l3383:	
 11026                           ;doprnt.c: 1478: {
 11027                           ;doprnt.c: 1483: case 0x00:
 11028                           
 11029                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
 11030                           
 11031                           ;doprnt.c: 1466: }
 11032                           ;doprnt.c: 1469: }
 11033                           ;doprnt.c: 1474: while(prec--) {
 11034                           
 11035                           
 11036                           ;doprnt.c: 1486: case 0xC0:
 11037                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11038  1723  300A               	movlw	10
 11039  1724  00F8               	movwf	___lwmod@divisor
 11040  1725  3000               	movlw	0
 11041  1726  00F9               	movwf	___lwmod@divisor+1
 11042  1727  0838               	movf	sprintf@prec,w
 11043  1728  00A8               	movwf	??_sprintf
 11044  1729  0728               	addwf	??_sprintf,w
 11045  172A  3E1E               	addlw	low (_dpowers| (0+32768))
 11046  172B  0084               	movwf	4
 11047  172C  3088               	movlw	high (_dpowers| (0+32768))
 11048  172D  1803               	skipnc
 11049  172E  3E01               	addlw	1
 11050  172F  00FF               	movwf	127
 11051  1730  120A  158A  2000  160A  118A  	fcall	stringtab
 11052  1735  00F0               	movwf	___lwdiv@divisor
 11053  1736  120A  158A  2000  160A  118A  	fcall	stringtab
 11054  173B  00F1               	movwf	___lwdiv@divisor+1
 11055  173C  0837               	movf	sprintf@val+1,w
 11056  173D  00F3               	movwf	___lwdiv@dividend+1
 11057  173E  0836               	movf	sprintf@val,w
 11058  173F  00F2               	movwf	___lwdiv@dividend
 11059  1740  160A  158A  2292  160A  118A  	fcall	___lwdiv
 11060  1745  0871               	movf	?___lwdiv+1,w
 11061  1746  00FB               	movwf	___lwmod@dividend+1
 11062  1747  0870               	movf	?___lwdiv,w
 11063  1748  00FA               	movwf	___lwmod@dividend
 11064  1749  160A  158A  21F7  160A  118A  	fcall	___lwmod
 11065  174E  0878               	movf	?___lwmod,w
 11066  174F  2FAE               	goto	L32
 11067  1750                     l3385:	
 11068                           ;doprnt.c: 1497: case 0x80:
 11069                           
 11070                           ;doprnt.c: 1491: break;
 11071                           
 11072                           
 11073                           ;doprnt.c: 1499: {
 11074                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11075  1750  0838               	movf	sprintf@prec,w
 11076  1751  00A8               	movwf	??_sprintf
 11077  1752  0728               	addwf	??_sprintf,w
 11078  1753  3E28               	addlw	low (_hexpowers| (0+32768))
 11079  1754  0084               	movwf	4
 11080  1755  3088               	movlw	high (_hexpowers| (0+32768))
 11081  1756  1803               	skipnc
 11082  1757  3E01               	addlw	1
 11083  1758  00FF               	movwf	127
 11084  1759  120A  158A  2000  160A  118A  	fcall	stringtab
 11085  175E  00F0               	movwf	___lwdiv@divisor
 11086  175F  120A  158A  2000  160A  118A  	fcall	stringtab
 11087  1764  00F1               	movwf	___lwdiv@divisor+1
 11088  1765  0837               	movf	sprintf@val+1,w
 11089  1766  00F3               	movwf	___lwdiv@dividend+1
 11090  1767  0836               	movf	sprintf@val,w
 11091  1768  00F2               	movwf	___lwdiv@dividend
 11092  1769  160A  158A  2292  160A  118A  	fcall	___lwdiv
 11093  176E  0870               	movf	?___lwdiv,w
 11094  176F  390F               	andlw	15
 11095  1770  1283               	bcf	3,5	;RP0=0, select bank0
 11096  1771  1303               	bcf	3,6	;RP1=0, select bank0
 11097  1772  00A9               	movwf	??_sprintf+1
 11098  1773  0829               	movf	??_sprintf+1,w
 11099  1774  00B1               	movwf	sprintf@idx
 11100                           
 11101                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 11102  1775  1ABD               	btfsc	sprintf@flag,5
 11103  1776  2F7B               	goto	l3391
 11104  1777  3071               	movlw	low (STR_100| (0+32768))
 11105  1778  00AF               	movwf	_sprintf$720
 11106  1779  308C               	movlw	high (STR_100| (0+32768))
 11107  177A  2F7E               	goto	L24
 11108  177B                     l3391:	
 11109  177B  3060               	movlw	low (STR_99| (0+32768))
 11110  177C  00AF               	movwf	_sprintf$720
 11111  177D  308C               	movlw	high (STR_99| (0+32768))
 11112  177E                     L24:	
 11113  177E  00B0               	movwf	_sprintf$720+1
 11114  177F  0831               	movf	sprintf@idx,w
 11115  1780  072F               	addwf	_sprintf$720,w
 11116  1781  0084               	movwf	4
 11117  1782  0830               	movf	_sprintf$720+1,w
 11118  1783  1803               	skipnc
 11119  1784  0A30               	incf	_sprintf$720+1,w
 11120  1785  00FF               	movwf	127
 11121  1786  120A  158A  2000  160A  118A  	fcall	stringtab
 11122  178B  00A8               	movwf	??_sprintf
 11123  178C  0828               	movf	??_sprintf,w
 11124  178D  2FB3               	goto	L25
 11125  178E                     l3395:	
 11126                           ;doprnt.c: 1516: case 0x40:
 11127                           
 11128                           ;doprnt.c: 1508: }
 11129                           ;doprnt.c: 1510: break;
 11130                           
 11131                           
 11132                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
 11133  178E  0838               	movf	sprintf@prec,w
 11134  178F  00A8               	movwf	??_sprintf
 11135  1790  0728               	addwf	??_sprintf,w
 11136  1791  3E12               	addlw	low (_octpowers| (0+32768))
 11137  1792  0084               	movwf	4
 11138  1793  3088               	movlw	high (_octpowers| (0+32768))
 11139  1794  1803               	skipnc
 11140  1795  3E01               	addlw	1
 11141  1796  00FF               	movwf	127
 11142  1797  120A  158A  2000  160A  118A  	fcall	stringtab
 11143  179C  00F0               	movwf	___lwdiv@divisor
 11144  179D  120A  158A  2000  160A  118A  	fcall	stringtab
 11145  17A2  00F1               	movwf	___lwdiv@divisor+1
 11146  17A3  0837               	movf	sprintf@val+1,w
 11147  17A4  00F3               	movwf	___lwdiv@dividend+1
 11148  17A5  0836               	movf	sprintf@val,w
 11149  17A6  00F2               	movwf	___lwdiv@dividend
 11150  17A7  160A  158A  2292  160A  118A  	fcall	___lwdiv
 11151  17AC  0870               	movf	?___lwdiv,w
 11152  17AD  3907               	andlw	7
 11153  17AE                     L32:	
 11154  17AE  3E30               	addlw	48
 11155  17AF  1283               	bcf	3,5	;RP0=0, select bank0
 11156  17B0  1303               	bcf	3,6	;RP1=0, select bank0
 11157  17B1  00A9               	movwf	??_sprintf+1
 11158  17B2  0829               	movf	??_sprintf+1,w
 11159  17B3                     L25:	
 11160  17B3  00BB               	movwf	sprintf@c
 11161  17B4                     l3401:	
 11162                           ;doprnt.c: 1523: }
 11163                           
 11164                           ;doprnt.c: 1520: break;
 11165                           
 11166                           
 11167                           ;doprnt.c: 1524: ((*sp++ = (c)));
 11168  17B4  083B               	movf	sprintf@c,w
 11169  17B5                     L34:	
 11170  17B5  00A8               	movwf	??_sprintf
 11171  17B6  083C               	movf	sprintf@sp,w
 11172  17B7  0084               	movwf	4
 11173  17B8  0828               	movf	??_sprintf,w
 11174  17B9  1783               	bsf	3,7	;select IRP bank2
 11175  17BA                     L31:	
 11176  17BA  0080               	movwf	0
 11177  17BB  3001               	movlw	1
 11178  17BC  00A8               	movwf	??_sprintf
 11179  17BD  0828               	movf	??_sprintf,w
 11180  17BE  07BC               	addwf	sprintf@sp,f
 11181  17BF                     l3405:	
 11182  17BF  30FF               	movlw	255
 11183  17C0  00A8               	movwf	??_sprintf
 11184  17C1  0828               	movf	??_sprintf,w
 11185  17C2  07B8               	addwf	sprintf@prec,f
 11186  17C3  0A38               	incf	sprintf@prec,w
 11187  17C4  1903               	btfsc	3,2
 11188  17C5  2FD6               	goto	l647
 11189  17C6  083D               	movf	sprintf@flag,w
 11190  17C7  39C0               	andlw	192
 11191                           
 11192                           ; Switch size 1, requested type "space"
 11193                           ; Number of cases is 4, Range of values is 0 to 192
 11194                           ; switch strategies available:
 11195                           ; Name         Instructions Cycles
 11196                           ; simple_byte           13     7 (average)
 11197                           ; jumptable            260     6 (fixed)
 11198                           ;	Chosen strategy is simple_byte
 11199  17C8  3A00               	xorlw	0	; case 0
 11200  17C9  1903               	skipnz
 11201  17CA  2F23               	goto	l3383
 11202  17CB  3A40               	xorlw	64	; case 64
 11203  17CC  1903               	skipnz
 11204  17CD  2F8E               	goto	l3395
 11205  17CE  3AC0               	xorlw	192	; case 128
 11206  17CF  1903               	skipnz
 11207  17D0  2F50               	goto	l3385
 11208  17D1  3A40               	xorlw	64	; case 192
 11209  17D2  1903               	skipnz
 11210  17D3  2F23               	goto	l3383
 11211  17D4  2FB4               	goto	l3401
 11212  17D5  2FB4               	goto	l3401
 11213  17D6                     l647:	
 11214                           
 11215                           ;doprnt.c: 1525: }
 11216                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
 11217  17D6  1DBD               	btfss	sprintf@flag,3
 11218  17D7  2B07               	goto	l3415
 11219  17D8  083A               	movf	sprintf@width+1,w
 11220  17D9  3A80               	xorlw	128
 11221  17DA  00FF               	movwf	127
 11222  17DB  3080               	movlw	128
 11223  17DC  027F               	subwf	127,w
 11224  17DD  1D03               	skipz
 11225  17DE  2FE1               	goto	u4145
 11226  17DF  3001               	movlw	1
 11227  17E0  0239               	subwf	sprintf@width,w
 11228  17E1                     u4145:	
 11229  17E1  1C03               	skipc
 11230  17E2  2B07               	goto	l3415
 11231  17E3                     l3409:	
 11232                           ;doprnt.c: 1529: do
 11233                           
 11234                           
 11235                           ;doprnt.c: 1530: ((*sp++ = (' ')));
 11236  17E3  3020               	movlw	32
 11237  17E4  1283               	bcf	3,5	;RP0=0, select bank0
 11238  17E5  1303               	bcf	3,6	;RP1=0, select bank0
 11239  17E6  00A8               	movwf	??_sprintf
 11240  17E7  083C               	movf	sprintf@sp,w
 11241  17E8  0084               	movwf	4
 11242  17E9  0828               	movf	??_sprintf,w
 11243  17EA  1783               	bsf	3,7	;select IRP bank2
 11244  17EB  0080               	movwf	0
 11245  17EC  3001               	movlw	1
 11246  17ED  00A8               	movwf	??_sprintf
 11247  17EE  0828               	movf	??_sprintf,w
 11248  17EF  07BC               	addwf	sprintf@sp,f
 11249                           
 11250                           ;doprnt.c: 1531: while(--width);
 11251  17F0  30FF               	movlw	255
 11252  17F1  07B9               	addwf	sprintf@width,f
 11253  17F2  1803               	skipnc
 11254  17F3  0ABA               	incf	sprintf@width+1,f
 11255  17F4  30FF               	movlw	255
 11256  17F5  07BA               	addwf	sprintf@width+1,f
 11257  17F6  0839               	movf	sprintf@width,w
 11258  17F7  043A               	iorwf	sprintf@width+1,w
 11259  17F8  1903               	btfsc	3,2
 11260  17F9  2B07               	goto	l3415
 11261  17FA  2FE3               	goto	l3409
 11262  17FB                     l3417:	
 11263                           ;doprnt.c: 1533: }
 11264                           ;doprnt.c: 1535: alldone:
 11265                           
 11266                           
 11267                           ;doprnt.c: 1538: *sp = 0;
 11268  17FB  083C               	movf	sprintf@sp,w
 11269  17FC  0084               	movwf	4
 11270  17FD  1783               	bsf	3,7	;select IRP bank2
 11271  17FE  0180               	clrf	0
 11272  17FF  0008               	return
 11273  1800                     __end_of_sprintf:	
 11274                           ;doprnt.c: 1540: return 0;
 11275                           ;	Return value of _sprintf is never used
 11276                           
 11277                           
 11278                           	psect	text30
 11279  1842                     __ptext30:	
 11280 ;; *************** function _isdigit *****************
 11281 ;; Defined at:
 11282 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;  c               1    wreg     unsigned char 
 11285 ;; Auto vars:     Size  Location     Type
 11286 ;;  c               1    1[COMMON] unsigned char 
 11287 ;; Return value:  Size  Location     Type
 11288 ;;		None               void
 11289 ;; Registers used:
 11290 ;;		wreg, status,2, status,0
 11291 ;; Tracked objects:
 11292 ;;		On entry : 0/0
 11293 ;;		On exit  : 0/0
 11294 ;;		Unchanged: 0/0
 11295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11296 ;;      Params:         0       0       0       0       0
 11297 ;;      Locals:         2       0       0       0       0
 11298 ;;      Temps:          0       0       0       0       0
 11299 ;;      Totals:         2       0       0       0       0
 11300 ;;Total ram usage:        2 bytes
 11301 ;; Hardware stack levels used:    1
 11302 ;; This function calls:
 11303 ;;		Nothing
 11304 ;; This function is called by:
 11305 ;;		_sprintf
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           
 11310                           ;psect for function _isdigit
 11311  1842                     _isdigit:	
 11312                           
 11313                           ;incstack = 0
 11314                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 11315                           ;isdigit@c stored from wreg
 11316  1842  00F1               	movwf	isdigit@c
 11317  1843  01F0               	clrf	_isdigit$906
 11318  1844  303A               	movlw	58
 11319  1845  0271               	subwf	isdigit@c,w
 11320  1846  1803               	skipnc
 11321  1847  284E               	goto	l3011
 11322  1848  3030               	movlw	48
 11323  1849  0271               	subwf	isdigit@c,w
 11324  184A  1C03               	skipc
 11325  184B  284E               	goto	l3011
 11326  184C  01F0               	clrf	_isdigit$906
 11327  184D  0AF0               	incf	_isdigit$906,f
 11328  184E                     l3011:	
 11329  184E  0C70               	rrf	_isdigit$906,w
 11330  184F  0008               	return
 11331  1850                     __end_of_isdigit:	
 11332                           
 11333                           	psect	text31
 11334  192E                     __ptext31:	
 11335 ;; *************** function ___wmul *****************
 11336 ;; Defined at:
 11337 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 11338 ;; Parameters:    Size  Location     Type
 11339 ;;  multiplier      2    0[COMMON] unsigned int 
 11340 ;;  multiplicand    2    2[COMMON] unsigned int 
 11341 ;; Auto vars:     Size  Location     Type
 11342 ;;  product         2    4[COMMON] unsigned int 
 11343 ;; Return value:  Size  Location     Type
 11344 ;;                  2    0[COMMON] unsigned int 
 11345 ;; Registers used:
 11346 ;;		wreg, status,2, status,0
 11347 ;; Tracked objects:
 11348 ;;		On entry : 0/0
 11349 ;;		On exit  : 0/0
 11350 ;;		Unchanged: 0/0
 11351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11352 ;;      Params:         4       0       0       0       0
 11353 ;;      Locals:         2       0       0       0       0
 11354 ;;      Temps:          0       0       0       0       0
 11355 ;;      Totals:         6       0       0       0       0
 11356 ;;Total ram usage:        6 bytes
 11357 ;; Hardware stack levels used:    1
 11358 ;; This function calls:
 11359 ;;		Nothing
 11360 ;; This function is called by:
 11361 ;;		_sprintf
 11362 ;; This function uses a non-reentrant model
 11363 ;;
 11364                           
 11365                           
 11366                           ;psect for function ___wmul
 11367  192E                     ___wmul:	
 11368                           
 11369                           ;incstack = 0
 11370                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11371  192E  01F4               	clrf	___wmul@product
 11372  192F  01F5               	clrf	___wmul@product+1
 11373  1930                     l3017:	
 11374  1930  1C70               	btfss	___wmul@multiplier,0
 11375  1931  2938               	goto	l736
 11376  1932  0872               	movf	___wmul@multiplicand,w
 11377  1933  07F4               	addwf	___wmul@product,f
 11378  1934  1803               	skipnc
 11379  1935  0AF5               	incf	___wmul@product+1,f
 11380  1936  0873               	movf	___wmul@multiplicand+1,w
 11381  1937  07F5               	addwf	___wmul@product+1,f
 11382  1938                     l736:	
 11383  1938  3001               	movlw	1
 11384  1939                     u3365:	
 11385  1939  1003               	clrc
 11386  193A  0DF2               	rlf	___wmul@multiplicand,f
 11387  193B  0DF3               	rlf	___wmul@multiplicand+1,f
 11388  193C  3EFF               	addlw	-1
 11389  193D  1D03               	skipz
 11390  193E  2939               	goto	u3365
 11391  193F  3001               	movlw	1
 11392  1940                     u3375:	
 11393  1940  1003               	clrc
 11394  1941  0CF1               	rrf	___wmul@multiplier+1,f
 11395  1942  0CF0               	rrf	___wmul@multiplier,f
 11396  1943  3EFF               	addlw	-1
 11397  1944  1D03               	skipz
 11398  1945  2940               	goto	u3375
 11399  1946  0870               	movf	___wmul@multiplier,w
 11400  1947  0471               	iorwf	___wmul@multiplier+1,w
 11401  1948  1D03               	btfss	3,2
 11402  1949  2930               	goto	l3017
 11403  194A  0875               	movf	___wmul@product+1,w
 11404  194B  00F1               	movwf	?___wmul+1
 11405  194C  0874               	movf	___wmul@product,w
 11406  194D  00F0               	movwf	?___wmul
 11407  194E  0008               	return
 11408  194F                     __end_of___wmul:	
 11409                           
 11410                           	psect	text32
 11411  19F7                     __ptext32:	
 11412 ;; *************** function ___lwmod *****************
 11413 ;; Defined at:
 11414 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 11415 ;; Parameters:    Size  Location     Type
 11416 ;;  divisor         2    8[COMMON] unsigned int 
 11417 ;;  dividend        2   10[COMMON] unsigned int 
 11418 ;; Auto vars:     Size  Location     Type
 11419 ;;  counter         1   13[COMMON] unsigned char 
 11420 ;; Return value:  Size  Location     Type
 11421 ;;                  2    8[COMMON] unsigned int 
 11422 ;; Registers used:
 11423 ;;		wreg, status,2, status,0
 11424 ;; Tracked objects:
 11425 ;;		On entry : 0/0
 11426 ;;		On exit  : 0/0
 11427 ;;		Unchanged: 0/0
 11428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11429 ;;      Params:         4       0       0       0       0
 11430 ;;      Locals:         1       0       0       0       0
 11431 ;;      Temps:          1       0       0       0       0
 11432 ;;      Totals:         6       0       0       0       0
 11433 ;;Total ram usage:        6 bytes
 11434 ;; Hardware stack levels used:    1
 11435 ;; This function calls:
 11436 ;;		Nothing
 11437 ;; This function is called by:
 11438 ;;		_sprintf
 11439 ;; This function uses a non-reentrant model
 11440 ;;
 11441                           
 11442                           
 11443                           ;psect for function ___lwmod
 11444  19F7                     ___lwmod:	
 11445                           
 11446                           ;incstack = 0
 11447                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11448  19F7  0878               	movf	___lwmod@divisor,w
 11449  19F8  0479               	iorwf	___lwmod@divisor+1,w
 11450  19F9  1903               	btfsc	3,2
 11451  19FA  2A24               	goto	l3087
 11452  19FB  01FD               	clrf	___lwmod@counter
 11453  19FC  0AFD               	incf	___lwmod@counter,f
 11454  19FD                     l3077:	
 11455  19FD  1BF9               	btfsc	___lwmod@divisor+1,7
 11456  19FE  2A0B               	goto	l3079
 11457  19FF  3001               	movlw	1
 11458  1A00                     u3495:	
 11459  1A00  1003               	clrc
 11460  1A01  0DF8               	rlf	___lwmod@divisor,f
 11461  1A02  0DF9               	rlf	___lwmod@divisor+1,f
 11462  1A03  3EFF               	addlw	-1
 11463  1A04  1D03               	skipz
 11464  1A05  2A00               	goto	u3495
 11465  1A06  3001               	movlw	1
 11466  1A07  00FC               	movwf	??___lwmod
 11467  1A08  087C               	movf	??___lwmod,w
 11468  1A09  07FD               	addwf	___lwmod@counter,f
 11469  1A0A  29FD               	goto	l3077
 11470  1A0B                     l3079:	
 11471  1A0B  0879               	movf	___lwmod@divisor+1,w
 11472  1A0C  027B               	subwf	___lwmod@dividend+1,w
 11473  1A0D  1D03               	skipz
 11474  1A0E  2A11               	goto	u3515
 11475  1A0F  0878               	movf	___lwmod@divisor,w
 11476  1A10  027A               	subwf	___lwmod@dividend,w
 11477  1A11                     u3515:	
 11478  1A11  1C03               	skipc
 11479  1A12  2A19               	goto	l3083
 11480  1A13  0878               	movf	___lwmod@divisor,w
 11481  1A14  02FA               	subwf	___lwmod@dividend,f
 11482  1A15  0879               	movf	___lwmod@divisor+1,w
 11483  1A16  1C03               	skipc
 11484  1A17  03FB               	decf	___lwmod@dividend+1,f
 11485  1A18  02FB               	subwf	___lwmod@dividend+1,f
 11486  1A19                     l3083:	
 11487  1A19  3001               	movlw	1
 11488  1A1A                     u3525:	
 11489  1A1A  1003               	clrc
 11490  1A1B  0CF9               	rrf	___lwmod@divisor+1,f
 11491  1A1C  0CF8               	rrf	___lwmod@divisor,f
 11492  1A1D  3EFF               	addlw	-1
 11493  1A1E  1D03               	skipz
 11494  1A1F  2A1A               	goto	u3525
 11495  1A20  3001               	movlw	1
 11496  1A21  02FD               	subwf	___lwmod@counter,f
 11497  1A22  1D03               	btfss	3,2
 11498  1A23  2A0B               	goto	l3079
 11499  1A24                     l3087:	
 11500  1A24  087B               	movf	___lwmod@dividend+1,w
 11501  1A25  00F9               	movwf	?___lwmod+1
 11502  1A26  087A               	movf	___lwmod@dividend,w
 11503  1A27  00F8               	movwf	?___lwmod
 11504  1A28  0008               	return
 11505  1A29                     __end_of___lwmod:	
 11506                           
 11507                           	psect	text33
 11508  1A92                     __ptext33:	
 11509 ;; *************** function ___lwdiv *****************
 11510 ;; Defined at:
 11511 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 11512 ;; Parameters:    Size  Location     Type
 11513 ;;  divisor         2    0[COMMON] unsigned int 
 11514 ;;  dividend        2    2[COMMON] unsigned int 
 11515 ;; Auto vars:     Size  Location     Type
 11516 ;;  quotient        2    5[COMMON] unsigned int 
 11517 ;;  counter         1    7[COMMON] unsigned char 
 11518 ;; Return value:  Size  Location     Type
 11519 ;;                  2    0[COMMON] unsigned int 
 11520 ;; Registers used:
 11521 ;;		wreg, status,2, status,0
 11522 ;; Tracked objects:
 11523 ;;		On entry : 0/0
 11524 ;;		On exit  : 0/0
 11525 ;;		Unchanged: 0/0
 11526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11527 ;;      Params:         4       0       0       0       0
 11528 ;;      Locals:         3       0       0       0       0
 11529 ;;      Temps:          1       0       0       0       0
 11530 ;;      Totals:         8       0       0       0       0
 11531 ;;Total ram usage:        8 bytes
 11532 ;; Hardware stack levels used:    1
 11533 ;; This function calls:
 11534 ;;		Nothing
 11535 ;; This function is called by:
 11536 ;;		_sprintf
 11537 ;; This function uses a non-reentrant model
 11538 ;;
 11539                           
 11540                           
 11541                           ;psect for function ___lwdiv
 11542  1A92                     ___lwdiv:	
 11543                           
 11544                           ;incstack = 0
 11545                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11546  1A92  01F5               	clrf	___lwdiv@quotient
 11547  1A93  01F6               	clrf	___lwdiv@quotient+1
 11548  1A94  0870               	movf	___lwdiv@divisor,w
 11549  1A95  0471               	iorwf	___lwdiv@divisor+1,w
 11550  1A96  1903               	btfsc	3,2
 11551  1A97  2AC9               	goto	l3065
 11552  1A98  01F7               	clrf	___lwdiv@counter
 11553  1A99  0AF7               	incf	___lwdiv@counter,f
 11554  1A9A                     l3053:	
 11555  1A9A  1BF1               	btfsc	___lwdiv@divisor+1,7
 11556  1A9B  2AA8               	goto	l3055
 11557  1A9C  3001               	movlw	1
 11558  1A9D                     u3425:	
 11559  1A9D  1003               	clrc
 11560  1A9E  0DF0               	rlf	___lwdiv@divisor,f
 11561  1A9F  0DF1               	rlf	___lwdiv@divisor+1,f
 11562  1AA0  3EFF               	addlw	-1
 11563  1AA1  1D03               	skipz
 11564  1AA2  2A9D               	goto	u3425
 11565  1AA3  3001               	movlw	1
 11566  1AA4  00F4               	movwf	??___lwdiv
 11567  1AA5  0874               	movf	??___lwdiv,w
 11568  1AA6  07F7               	addwf	___lwdiv@counter,f
 11569  1AA7  2A9A               	goto	l3053
 11570  1AA8                     l3055:	
 11571  1AA8  3001               	movlw	1
 11572  1AA9                     u3445:	
 11573  1AA9  1003               	clrc
 11574  1AAA  0DF5               	rlf	___lwdiv@quotient,f
 11575  1AAB  0DF6               	rlf	___lwdiv@quotient+1,f
 11576  1AAC  3EFF               	addlw	-1
 11577  1AAD  1D03               	skipz
 11578  1AAE  2AA9               	goto	u3445
 11579  1AAF  0871               	movf	___lwdiv@divisor+1,w
 11580  1AB0  0273               	subwf	___lwdiv@dividend+1,w
 11581  1AB1  1D03               	skipz
 11582  1AB2  2AB5               	goto	u3455
 11583  1AB3  0870               	movf	___lwdiv@divisor,w
 11584  1AB4  0272               	subwf	___lwdiv@dividend,w
 11585  1AB5                     u3455:	
 11586  1AB5  1C03               	skipc
 11587  1AB6  2ABE               	goto	l3061
 11588  1AB7  0870               	movf	___lwdiv@divisor,w
 11589  1AB8  02F2               	subwf	___lwdiv@dividend,f
 11590  1AB9  0871               	movf	___lwdiv@divisor+1,w
 11591  1ABA  1C03               	skipc
 11592  1ABB  03F3               	decf	___lwdiv@dividend+1,f
 11593  1ABC  02F3               	subwf	___lwdiv@dividend+1,f
 11594  1ABD  1475               	bsf	___lwdiv@quotient,0
 11595  1ABE                     l3061:	
 11596  1ABE  3001               	movlw	1
 11597  1ABF                     u3465:	
 11598  1ABF  1003               	clrc
 11599  1AC0  0CF1               	rrf	___lwdiv@divisor+1,f
 11600  1AC1  0CF0               	rrf	___lwdiv@divisor,f
 11601  1AC2  3EFF               	addlw	-1
 11602  1AC3  1D03               	skipz
 11603  1AC4  2ABF               	goto	u3465
 11604  1AC5  3001               	movlw	1
 11605  1AC6  02F7               	subwf	___lwdiv@counter,f
 11606  1AC7  1D03               	btfss	3,2
 11607  1AC8  2AA8               	goto	l3055
 11608  1AC9                     l3065:	
 11609  1AC9  0876               	movf	___lwdiv@quotient+1,w
 11610  1ACA  00F1               	movwf	?___lwdiv+1
 11611  1ACB  0875               	movf	___lwdiv@quotient,w
 11612  1ACC  00F0               	movwf	?___lwdiv
 11613  1ACD  0008               	return
 11614  1ACE                     __end_of___lwdiv:	
 11615                           
 11616                           	psect	text34
 11617  1850                     __ptext34:	
 11618 ;; *************** function ___bmul *****************
 11619 ;; Defined at:
 11620 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 11621 ;; Parameters:    Size  Location     Type
 11622 ;;  multiplier      1    wreg     unsigned char 
 11623 ;;  multiplicand    1    0[COMMON] unsigned char 
 11624 ;; Auto vars:     Size  Location     Type
 11625 ;;  multiplier      1    3[COMMON] unsigned char 
 11626 ;;  product         1    2[COMMON] unsigned char 
 11627 ;; Return value:  Size  Location     Type
 11628 ;;                  1    wreg      unsigned char 
 11629 ;; Registers used:
 11630 ;;		wreg, status,2, status,0
 11631 ;; Tracked objects:
 11632 ;;		On entry : 0/0
 11633 ;;		On exit  : 0/0
 11634 ;;		Unchanged: 0/0
 11635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11636 ;;      Params:         1       0       0       0       0
 11637 ;;      Locals:         2       0       0       0       0
 11638 ;;      Temps:          1       0       0       0       0
 11639 ;;      Totals:         4       0       0       0       0
 11640 ;;Total ram usage:        4 bytes
 11641 ;; Hardware stack levels used:    1
 11642 ;; This function calls:
 11643 ;;		Nothing
 11644 ;; This function is called by:
 11645 ;;		_printf_debug_cur_MATRIX44
 11646 ;;		_find_best_solution
 11647 ;;		_main
 11648 ;;		_sprintf
 11649 ;;		_get_MATRIX44
 11650 ;;		_printf_debug_all_MATRIX44
 11651 ;; This function uses a non-reentrant model
 11652 ;;
 11653                           
 11654                           
 11655                           ;psect for function ___bmul
 11656  1850                     ___bmul:	
 11657                           
 11658                           ;incstack = 0
 11659                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11660                           ;___bmul@multiplier stored from wreg
 11661  1850  00F3               	movwf	___bmul@multiplier
 11662  1851  01F2               	clrf	___bmul@product
 11663  1852                     l3031:	
 11664  1852  1C73               	btfss	___bmul@multiplier,0
 11665  1853  2858               	goto	l3035
 11666  1854  0870               	movf	___bmul@multiplicand,w
 11667  1855  00F1               	movwf	??___bmul
 11668  1856  0871               	movf	??___bmul,w
 11669  1857  07F2               	addwf	___bmul@product,f
 11670  1858                     l3035:	
 11671  1858  1003               	clrc
 11672  1859  0DF0               	rlf	___bmul@multiplicand,f
 11673  185A  1003               	clrc
 11674  185B  0CF3               	rrf	___bmul@multiplier,f
 11675  185C  0873               	movf	___bmul@multiplier,w
 11676  185D  1D03               	btfss	3,2
 11677  185E  2852               	goto	l3031
 11678  185F  0872               	movf	___bmul@product,w
 11679  1860  0008               	return
 11680  1861                     __end_of___bmul:	
 11681                           
 11682                           	psect	text35
 11683  194F                     __ptext35:	
 11684 ;; *************** function _USARTWriteString *****************
 11685 ;; Defined at:
 11686 ;;		line 76 in file "usart_pic16.c"
 11687 ;; Parameters:    Size  Location     Type
 11688 ;;  str             2    1[COMMON] PTR const unsigned char 
 11689 ;;		 -> STR_98(12), STR_96(13), STR_94(13), STR_87(7), 
 11690 ;;		 -> STR_86(7), STR_79(5), STR_63(17), STR_62(15), 
 11691 ;;		 -> STR_61(15), STR_60(15), STR_59(45), STR_51(21), 
 11692 ;;		 -> STR_45(10), STR_43(10), STR_42(20), STR_41(19), 
 11693 ;;		 -> STR_40(6), STR_38(11), STR_36(11), STR_34(11), 
 11694 ;;		 -> STR_33(35), STR_32(8), STR_29(35), STR_27(2), 
 11695 ;;		 -> STR_26(21), STR_25(1), STR_24(2), STR_23(2), 
 11696 ;;		 -> STR_22(29), STR_21(2), STR_20(21), STR_19(1), 
 11697 ;;		 -> STR_18(2), STR_17(2), STR_16(21), STR_15(2), 
 11698 ;;		 -> STR_12(20), STR_11(2), STR_10(21), STR_9(1), 
 11699 ;;		 -> STR_8(2), STR_7(2), STR_6(29), STR_5(2), 
 11700 ;;		 -> ROM(8192), STR_4(3), STR_3(3), STR_2(3), 
 11701 ;;		 -> g_debug(32), STR_1(3), 
 11702 ;; Auto vars:     Size  Location     Type
 11703 ;;		None
 11704 ;; Return value:  Size  Location     Type
 11705 ;;                  1    wreg      void 
 11706 ;; Registers used:
 11707 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 11708 ;; Tracked objects:
 11709 ;;		On entry : 0/0
 11710 ;;		On exit  : 0/0
 11711 ;;		Unchanged: 0/0
 11712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11713 ;;      Params:         2       0       0       0       0
 11714 ;;      Locals:         0       0       0       0       0
 11715 ;;      Temps:          0       0       0       0       0
 11716 ;;      Totals:         2       0       0       0       0
 11717 ;;Total ram usage:        2 bytes
 11718 ;; Hardware stack levels used:    1
 11719 ;; Hardware stack levels required when called:    1
 11720 ;; This function calls:
 11721 ;;		_USARTWriteChar
 11722 ;; This function is called by:
 11723 ;;		_debug_str
 11724 ;;		_debug_line
 11725 ;;		_debug_int1
 11726 ;;		_debug_int2
 11727 ;;		_USARTWriteLine
 11728 ;;		_debug_int3
 11729 ;; This function uses a non-reentrant model
 11730 ;;
 11731                           
 11732                           
 11733                           ;psect for function _USARTWriteString
 11734  194F                     _USARTWriteString:	
 11735  194F                     l4873:	
 11736                           ;usart_pic16.c: 77: while (*str != '\0') {
 11737                           
 11738                           ;incstack = 0
 11739                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 11740                           
 11741  194F  0872               	movf	USARTWriteString@str+1,w
 11742  1950  1283               	bcf	3,5	;RP0=0, select bank0
 11743  1951  1303               	bcf	3,6	;RP1=0, select bank0
 11744  1952  00FF               	movwf	127
 11745  1953  0871               	movf	USARTWriteString@str,w
 11746  1954  0084               	movwf	4
 11747  1955  120A  158A  2000  160A  158A  	fcall	stringtab
 11748  195A  3A00               	xorlw	0
 11749  195B  1903               	btfsc	3,2
 11750  195C  0008               	return
 11751                           
 11752                           ;usart_pic16.c: 78: USARTWriteChar(*str);
 11753  195D  0872               	movf	USARTWriteString@str+1,w
 11754  195E  1283               	bcf	3,5	;RP0=0, select bank0
 11755  195F  1303               	bcf	3,6	;RP1=0, select bank0
 11756  1960  00FF               	movwf	127
 11757  1961  0871               	movf	USARTWriteString@str,w
 11758  1962  0084               	movwf	4
 11759  1963  120A  158A  2000  160A  158A  	fcall	stringtab
 11760  1968  160A  158A  201D  160A  158A  	fcall	_USARTWriteChar
 11761                           
 11762                           ;usart_pic16.c: 79: str++;
 11763  196D  3001               	movlw	1
 11764  196E  07F1               	addwf	USARTWriteString@str,f
 11765  196F  1803               	skipnc
 11766  1970  0AF2               	incf	USARTWriteString@str+1,f
 11767  1971  3000               	movlw	0
 11768  1972  07F2               	addwf	USARTWriteString@str+1,f
 11769  1973  294F               	goto	l4873
 11770  1974                     __end_of_USARTWriteString:	
 11771                           
 11772                           	psect	text36
 11773  181D                     __ptext36:	
 11774 ;; *************** function _USARTWriteChar *****************
 11775 ;; Defined at:
 11776 ;;		line 70 in file "usart_pic16.c"
 11777 ;; Parameters:    Size  Location     Type
 11778 ;;  ch              1    wreg     unsigned char 
 11779 ;; Auto vars:     Size  Location     Type
 11780 ;;  ch              1    0[COMMON] unsigned char 
 11781 ;; Return value:  Size  Location     Type
 11782 ;;                  1    wreg      void 
 11783 ;; Registers used:
 11784 ;;		wreg
 11785 ;; Tracked objects:
 11786 ;;		On entry : 0/0
 11787 ;;		On exit  : 0/0
 11788 ;;		Unchanged: 0/0
 11789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11790 ;;      Params:         0       0       0       0       0
 11791 ;;      Locals:         1       0       0       0       0
 11792 ;;      Temps:          0       0       0       0       0
 11793 ;;      Totals:         1       0       0       0       0
 11794 ;;Total ram usage:        1 bytes
 11795 ;; Hardware stack levels used:    1
 11796 ;; This function calls:
 11797 ;;		Nothing
 11798 ;; This function is called by:
 11799 ;;		_USARTWriteString
 11800 ;;		_USARTWriteLine
 11801 ;;		_USARTWriteInt
 11802 ;;		_USARTGotoNewLine
 11803 ;; This function uses a non-reentrant model
 11804 ;;
 11805                           
 11806                           
 11807                           ;psect for function _USARTWriteChar
 11808  181D                     _USARTWriteChar:	
 11809                           
 11810                           ;incstack = 0
 11811                           ; Regs used in _USARTWriteChar: [wreg]
 11812                           ;USARTWriteChar@ch stored from wreg
 11813  181D  00F0               	movwf	USARTWriteChar@ch
 11814  181E                     l36:	
 11815                           ;usart_pic16.c: 71: while (!PIR1bits.TXIF);
 11816                           
 11817  181E  1283               	bcf	3,5	;RP0=0, select bank0
 11818  181F  1303               	bcf	3,6	;RP1=0, select bank0
 11819  1820  1E0C               	btfss	12,4	;volatile
 11820  1821  281E               	goto	l36
 11821                           
 11822                           ;usart_pic16.c: 73: TXREG = ch;
 11823  1822  0870               	movf	USARTWriteChar@ch,w
 11824  1823  0099               	movwf	25	;volatile
 11825  1824  0008               	return
 11826  1825                     __end_of_USARTWriteChar:	
 11827                           
 11828                           	psect	text37
 11829  1C7B                     __ptext37:	
 11830 ;; *************** function _clear *****************
 11831 ;; Defined at:
 11832 ;;		line 809 in file "teris_16f886.c"
 11833 ;; Parameters:    Size  Location     Type
 11834 ;;  x               1    wreg     char 
 11835 ;;  y               1    0[COMMON] char 
 11836 ;;  matrix44        2    1[COMMON] PTR const struct .
 11837 ;;		 -> NULL(0), g_matrix44(384), 
 11838 ;;  matrix88        1    3[COMMON] PTR struct .
 11839 ;;		 -> g_matrix88(64), 
 11840 ;; Auto vars:     Size  Location     Type
 11841 ;;  x               1    8[COMMON] char 
 11842 ;;  col             1   10[COMMON] unsigned char 
 11843 ;;  row             1    9[COMMON] unsigned char 
 11844 ;; Return value:  Size  Location     Type
 11845 ;;                  1    wreg      void 
 11846 ;; Registers used:
 11847 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
 11848 ;; Tracked objects:
 11849 ;;		On entry : 0/0
 11850 ;;		On exit  : 0/0
 11851 ;;		Unchanged: 0/0
 11852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11853 ;;      Params:         4       0       0       0       0
 11854 ;;      Locals:         3       0       0       0       0
 11855 ;;      Temps:          4       0       0       0       0
 11856 ;;      Totals:        11       0       0       0       0
 11857 ;;Total ram usage:       11 bytes
 11858 ;; Hardware stack levels used:    2
 11859 ;; This function calls:
 11860 ;;		Nothing
 11861 ;; This function is called by:
 11862 ;;		_main
 11863 ;; This function uses a non-reentrant model
 11864 ;;
 11865                           
 11866                           
 11867                           ;psect for function _clear
 11868  1C7B                     _clear:	
 11869                           
 11870                           ;incstack = 0
 11871                           ; Regs used in _clear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
 11872                           ;clear@x stored from wreg
 11873  1C7B  00F8               	movwf	clear@x
 11874                           
 11875                           ;teris_16f886.c: 811: for(uint8_t row = 0; row < 4; row++)
 11876  1C7C  01F9               	clrf	clear@row
 11877  1C7D                     L35:	
 11878  1C7D  3004               	movlw	4
 11879  1C7E  0279               	subwf	clear@row,w
 11880  1C7F  1803               	btfsc	3,0
 11881  1C80  0008               	return
 11882                           
 11883                           ;teris_16f886.c: 812: {
 11884                           ;teris_16f886.c: 813: for(uint8_t col = 0; col < 4; col++)
 11885  1C81  01FA               	clrf	clear@col
 11886  1C82  3004               	movlw	4
 11887  1C83  027A               	subwf	clear@col,w
 11888  1C84  1803               	btfsc	3,0
 11889  1C85  2CC5               	goto	l4263
 11890  1C86                     l4255:	
 11891                           
 11892                           ;teris_16f886.c: 814: {
 11893                           ;teris_16f886.c: 815: if(matrix44->data[row][col] == 1)
 11894  1C86  0879               	movf	clear@row,w
 11895  1C87  00F4               	movwf	??_clear
 11896  1C88  01F5               	clrf	??_clear+1
 11897  1C89  1003               	clrc
 11898  1C8A  0DF4               	rlf	??_clear,f
 11899  1C8B  0DF5               	rlf	??_clear+1,f
 11900  1C8C  1003               	clrc
 11901  1C8D  0DF4               	rlf	??_clear,f
 11902  1C8E  0DF5               	rlf	??_clear+1,f
 11903  1C8F  0874               	movf	??_clear,w
 11904  1C90  0771               	addwf	clear@matrix44,w
 11905  1C91  00F6               	movwf	??_clear+2
 11906  1C92  0875               	movf	??_clear+1,w
 11907  1C93  1803               	skipnc
 11908  1C94  0A75               	incf	??_clear+1,w
 11909  1C95  0772               	addwf	clear@matrix44+1,w
 11910  1C96  00F7               	movwf	??_clear+3
 11911  1C97  087A               	movf	clear@col,w
 11912  1C98  0776               	addwf	??_clear+2,w
 11913  1C99  0084               	movwf	4
 11914  1C9A  0877               	movf	??_clear+3,w
 11915  1C9B  1803               	skipnc
 11916  1C9C  0A77               	incf	??_clear+3,w
 11917  1C9D  1283               	bcf	3,5	;RP0=0, select bank0
 11918  1C9E  1303               	bcf	3,6	;RP1=0, select bank0
 11919  1C9F  00FF               	movwf	127
 11920  1CA0  120A  158A  2000  160A  158A  	fcall	stringtab
 11921  1CA5  3A01               	xorlw	1
 11922  1CA6  1D03               	skipz
 11923  1CA7  2CBD               	goto	l4259
 11924                           
 11925                           ;teris_16f886.c: 816: {
 11926                           ;teris_16f886.c: 817: matrix88->data[y + row][x + col] = 0;
 11927  1CA8  087A               	movf	clear@col,w
 11928  1CA9  0778               	addwf	clear@x,w
 11929  1CAA  0773               	addwf	clear@matrix88,w
 11930  1CAB  00F4               	movwf	??_clear
 11931  1CAC  0879               	movf	clear@row,w
 11932  1CAD  0770               	addwf	clear@y,w
 11933  1CAE  00F5               	movwf	??_clear+1
 11934  1CAF  3002               	movlw	2
 11935  1CB0                     u5995:	
 11936  1CB0  1003               	clrc
 11937  1CB1  0DF5               	rlf	??_clear+1,f
 11938  1CB2  3EFF               	addlw	-1
 11939  1CB3  1D03               	skipz
 11940  1CB4  2CB0               	goto	u5995
 11941  1CB5  1003               	clrc
 11942  1CB6  0D75               	rlf	??_clear+1,w
 11943  1CB7  0774               	addwf	??_clear,w
 11944  1CB8  00F6               	movwf	??_clear+2
 11945  1CB9  0876               	movf	??_clear+2,w
 11946  1CBA  0084               	movwf	4
 11947  1CBB  1783               	bsf	3,7	;select IRP bank2
 11948  1CBC  0180               	clrf	0
 11949  1CBD                     l4259:	
 11950  1CBD  3001               	movlw	1
 11951  1CBE  00F4               	movwf	??_clear
 11952  1CBF  0874               	movf	??_clear,w
 11953  1CC0  07FA               	addwf	clear@col,f
 11954  1CC1  3004               	movlw	4
 11955  1CC2  027A               	subwf	clear@col,w
 11956  1CC3  1C03               	skipc
 11957  1CC4  2C86               	goto	l4255
 11958  1CC5                     l4263:	
 11959  1CC5  3001               	movlw	1
 11960  1CC6  00F4               	movwf	??_clear
 11961  1CC7  0874               	movf	??_clear,w
 11962  1CC8  07F9               	addwf	clear@row,f
 11963  1CC9  2C7D               	goto	L35
 11964  1CCA                     __end_of_clear:	
 11965                           
 11966                           	psect	text38
 11967  18BF                     __ptext38:	
 11968 ;; *************** function _char_info_index_rand *****************
 11969 ;; Defined at:
 11970 ;;		line 886 in file "teris_16f886.c"
 11971 ;; Parameters:    Size  Location     Type
 11972 ;;		None
 11973 ;; Auto vars:     Size  Location     Type
 11974 ;;		None
 11975 ;; Return value:  Size  Location     Type
 11976 ;;                  1    wreg      unsigned char 
 11977 ;; Registers used:
 11978 ;;		wreg, status,2, status,0, pclath, cstack
 11979 ;; Tracked objects:
 11980 ;;		On entry : 0/0
 11981 ;;		On exit  : 0/0
 11982 ;;		Unchanged: 0/0
 11983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11984 ;;      Params:         0       0       0       0       0
 11985 ;;      Locals:         0       0       0       0       0
 11986 ;;      Temps:          0       0       0       0       0
 11987 ;;      Totals:         0       0       0       0       0
 11988 ;;Total ram usage:        0 bytes
 11989 ;; Hardware stack levels used:    1
 11990 ;; Hardware stack levels required when called:    2
 11991 ;; This function calls:
 11992 ;;		___awmod
 11993 ;;		_rand
 11994 ;; This function is called by:
 11995 ;;		_main
 11996 ;; This function uses a non-reentrant model
 11997 ;;
 11998                           
 11999                           
 12000                           ;psect for function _char_info_index_rand
 12001  18BF                     _char_info_index_rand:	
 12002                           
 12003                           ;teris_16f886.c: 888: return (uint8_t)(rand()%9);
 12004                           
 12005                           ;incstack = 0
 12006                           ; Regs used in _char_info_index_rand: [wreg+status,2+status,0+pclath+cstack]
 12007  18BF  3009               	movlw	9
 12008  18C0  1283               	bcf	3,5	;RP0=0, select bank0
 12009  18C1  1303               	bcf	3,6	;RP1=0, select bank0
 12010  18C2  00A7               	movwf	___awmod@divisor
 12011  18C3  3000               	movlw	0
 12012  18C4  00A8               	movwf	___awmod@divisor+1
 12013  18C5  160A  158A  251A  160A  158A  	fcall	_rand
 12014  18CA  1283               	bcf	3,5	;RP0=0, select bank0
 12015  18CB  1303               	bcf	3,6	;RP1=0, select bank0
 12016  18CC  0821               	movf	?_rand+1,w
 12017  18CD  00AA               	movwf	___awmod@dividend+1
 12018  18CE  0820               	movf	?_rand,w
 12019  18CF  00A9               	movwf	___awmod@dividend
 12020  18D0  160A  158A  242E   	fcall	___awmod
 12021  18D3  1283               	bcf	3,5	;RP0=0, select bank0
 12022  18D4  1303               	bcf	3,6	;RP1=0, select bank0
 12023  18D5  0827               	movf	?___awmod,w
 12024  18D6  0008               	return
 12025  18D7                     __end_of_char_info_index_rand:	
 12026                           
 12027                           	psect	text39
 12028  1D1A                     __ptext39:	
 12029 ;; *************** function _rand *****************
 12030 ;; Defined at:
 12031 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
 12032 ;; Parameters:    Size  Location     Type
 12033 ;;		None
 12034 ;; Auto vars:     Size  Location     Type
 12035 ;;		None
 12036 ;; Return value:  Size  Location     Type
 12037 ;;                  2    0[BANK0 ] int 
 12038 ;; Registers used:
 12039 ;;		wreg, status,2, status,0, pclath, cstack
 12040 ;; Tracked objects:
 12041 ;;		On entry : 0/0
 12042 ;;		On exit  : 0/0
 12043 ;;		Unchanged: 0/0
 12044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12045 ;;      Params:         0       2       0       0       0
 12046 ;;      Locals:         0       0       0       0       0
 12047 ;;      Temps:          0       5       0       0       0
 12048 ;;      Totals:         0       7       0       0       0
 12049 ;;Total ram usage:        7 bytes
 12050 ;; Hardware stack levels used:    1
 12051 ;; Hardware stack levels required when called:    1
 12052 ;; This function calls:
 12053 ;;		___lmul
 12054 ;; This function is called by:
 12055 ;;		_char_info_index_rand
 12056 ;; This function uses a non-reentrant model
 12057 ;;
 12058                           
 12059                           
 12060                           ;psect for function _rand
 12061  1D1A                     _rand:	
 12062                           
 12063                           ;incstack = 0
 12064                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 12065  1D1A  1683               	bsf	3,5	;RP0=1, select bank3
 12066  1D1B  1703               	bsf	3,6	;RP1=1, select bank3
 12067  1D1C  0855               	movf	(_randx+3)^(0+384),w
 12068  1D1D  00F3               	movwf	___lmul@multiplier+3
 12069  1D1E  0854               	movf	(_randx+2)^(0+384),w
 12070  1D1F  00F2               	movwf	___lmul@multiplier+2
 12071  1D20  0853               	movf	(_randx+1)^(0+384),w
 12072  1D21  00F1               	movwf	___lmul@multiplier+1
 12073  1D22  0852               	movf	_randx^(0+384),w
 12074  1D23  00F0               	movwf	___lmul@multiplier
 12075  1D24  3041               	movlw	65
 12076  1D25  00F7               	movwf	___lmul@multiplicand+3
 12077  1D26  30C6               	movlw	198
 12078  1D27  00F6               	movwf	___lmul@multiplicand+2
 12079  1D28  304E               	movlw	78
 12080  1D29  00F5               	movwf	___lmul@multiplicand+1
 12081  1D2A  306D               	movlw	109
 12082  1D2B  00F4               	movwf	___lmul@multiplicand
 12083  1D2C  160A  158A  22CE  160A  158A  	fcall	___lmul
 12084  1D31  0873               	movf	?___lmul+3,w
 12085  1D32  1683               	bsf	3,5	;RP0=1, select bank3
 12086  1D33  1703               	bsf	3,6	;RP1=1, select bank3
 12087  1D34  00D5               	movwf	(_randx+3)^(0+384)
 12088  1D35  0872               	movf	?___lmul+2,w
 12089  1D36  00D4               	movwf	(_randx+2)^(0+384)
 12090  1D37  0871               	movf	?___lmul+1,w
 12091  1D38  00D3               	movwf	(_randx+1)^(0+384)
 12092  1D39  0870               	movf	?___lmul,w
 12093  1D3A  00D2               	movwf	_randx^(0+384)
 12094  1D3B  3039               	movlw	57
 12095  1D3C  07D2               	addwf	_randx^(0+384),f
 12096  1D3D  3030               	movlw	48
 12097  1D3E  1803               	skipnc
 12098  1D3F  3031               	movlw	49
 12099  1D40  07D3               	addwf	(_randx+1)^(0+384),f
 12100  1D41  3000               	movlw	0
 12101  1D42  1803               	skipnc
 12102  1D43  3001               	movlw	1
 12103  1D44  07D4               	addwf	(_randx+2)^(0+384),f
 12104  1D45  3000               	movlw	0
 12105  1D46  1803               	skipnc
 12106  1D47  3001               	movlw	1
 12107  1D48  07D5               	addwf	(_randx+3)^(0+384),f
 12108  1D49  0852               	movf	_randx^(0+384),w
 12109  1D4A  1283               	bcf	3,5	;RP0=0, select bank0
 12110  1D4B  1303               	bcf	3,6	;RP1=0, select bank0
 12111  1D4C  00A2               	movwf	??_rand
 12112  1D4D  1683               	bsf	3,5	;RP0=1, select bank3
 12113  1D4E  1703               	bsf	3,6	;RP1=1, select bank3
 12114  1D4F  0853               	movf	(_randx+1)^(0+384),w
 12115  1D50  1283               	bcf	3,5	;RP0=0, select bank0
 12116  1D51  1303               	bcf	3,6	;RP1=0, select bank0
 12117  1D52  00A3               	movwf	??_rand+1
 12118  1D53  1683               	bsf	3,5	;RP0=1, select bank3
 12119  1D54  1703               	bsf	3,6	;RP1=1, select bank3
 12120  1D55  0854               	movf	(_randx+2)^(0+384),w
 12121  1D56  1283               	bcf	3,5	;RP0=0, select bank0
 12122  1D57  1303               	bcf	3,6	;RP1=0, select bank0
 12123  1D58  00A4               	movwf	??_rand+2
 12124  1D59  1683               	bsf	3,5	;RP0=1, select bank3
 12125  1D5A  1703               	bsf	3,6	;RP1=1, select bank3
 12126  1D5B  0855               	movf	(_randx+3)^(0+384),w
 12127  1D5C  1283               	bcf	3,5	;RP0=0, select bank0
 12128  1D5D  1303               	bcf	3,6	;RP1=0, select bank0
 12129  1D5E  00A5               	movwf	??_rand+3
 12130  1D5F  3010               	movlw	16
 12131  1D60  00A6               	movwf	??_rand+4
 12132  1D61                     u5265:	
 12133  1D61  0D25               	rlf	??_rand+3,w
 12134  1D62  0CA5               	rrf	??_rand+3,f
 12135  1D63  0CA4               	rrf	??_rand+2,f
 12136  1D64  0CA3               	rrf	??_rand+1,f
 12137  1D65  0CA2               	rrf	??_rand,f
 12138  1D66  0BA6               	decfsz	??_rand+4,f
 12139  1D67  2D61               	goto	u5265
 12140  1D68  30FF               	movlw	255
 12141  1D69  0522               	andwf	??_rand,w
 12142  1D6A  00A0               	movwf	?_rand
 12143  1D6B  307F               	movlw	127
 12144  1D6C  0523               	andwf	??_rand+1,w
 12145  1D6D  00A1               	movwf	?_rand+1
 12146  1D6E  0008               	return
 12147  1D6F                     __end_of_rand:	
 12148                           
 12149                           	psect	text40
 12150  1ACE                     __ptext40:	
 12151 ;; *************** function ___lmul *****************
 12152 ;; Defined at:
 12153 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 12154 ;; Parameters:    Size  Location     Type
 12155 ;;  multiplier      4    0[COMMON] unsigned long 
 12156 ;;  multiplicand    4    4[COMMON] unsigned long 
 12157 ;; Auto vars:     Size  Location     Type
 12158 ;;  product         4    9[COMMON] unsigned long 
 12159 ;; Return value:  Size  Location     Type
 12160 ;;                  4    0[COMMON] unsigned long 
 12161 ;; Registers used:
 12162 ;;		wreg, status,2, status,0
 12163 ;; Tracked objects:
 12164 ;;		On entry : 0/0
 12165 ;;		On exit  : 0/0
 12166 ;;		Unchanged: 0/0
 12167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12168 ;;      Params:         8       0       0       0       0
 12169 ;;      Locals:         4       0       0       0       0
 12170 ;;      Temps:          1       0       0       0       0
 12171 ;;      Totals:        13       0       0       0       0
 12172 ;;Total ram usage:       13 bytes
 12173 ;; Hardware stack levels used:    1
 12174 ;; This function calls:
 12175 ;;		Nothing
 12176 ;; This function is called by:
 12177 ;;		_rand
 12178 ;; This function uses a non-reentrant model
 12179 ;;
 12180                           
 12181                           
 12182                           ;psect for function ___lmul
 12183  1ACE                     ___lmul:	
 12184                           
 12185                           ;incstack = 0
 12186                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 12187  1ACE  3000               	movlw	0
 12188  1ACF  00FC               	movwf	___lmul@product+3
 12189  1AD0  3000               	movlw	0
 12190  1AD1  00FB               	movwf	___lmul@product+2
 12191  1AD2  3000               	movlw	0
 12192  1AD3  00FA               	movwf	___lmul@product+1
 12193  1AD4  3000               	movlw	0
 12194  1AD5  00F9               	movwf	___lmul@product
 12195  1AD6                     l3703:	
 12196  1AD6  1C70               	btfss	___lmul@multiplier,0
 12197  1AD7  2AEC               	goto	l3707
 12198  1AD8  0874               	movf	___lmul@multiplicand,w
 12199  1AD9  07F9               	addwf	___lmul@product,f
 12200  1ADA  0875               	movf	___lmul@multiplicand+1,w
 12201  1ADB  1103               	clrz
 12202  1ADC  1803               	skipnc
 12203  1ADD  3E01               	addlw	1
 12204  1ADE  1D03               	btfss	3,2
 12205  1ADF  07FA               	addwf	___lmul@product+1,f
 12206  1AE0  0876               	movf	___lmul@multiplicand+2,w
 12207  1AE1  1103               	clrz
 12208  1AE2  1803               	skipnc
 12209  1AE3  3E01               	addlw	1
 12210  1AE4  1D03               	btfss	3,2
 12211  1AE5  07FB               	addwf	___lmul@product+2,f
 12212  1AE6  0877               	movf	___lmul@multiplicand+3,w
 12213  1AE7  1103               	clrz
 12214  1AE8  1803               	skipnc
 12215  1AE9  3E01               	addlw	1
 12216  1AEA  1D03               	btfss	3,2
 12217  1AEB  07FC               	addwf	___lmul@product+3,f
 12218  1AEC                     l3707:	
 12219  1AEC  3001               	movlw	1
 12220  1AED  00F8               	movwf	??___lmul
 12221  1AEE                     u4795:	
 12222  1AEE  1003               	clrc
 12223  1AEF  0DF4               	rlf	___lmul@multiplicand,f
 12224  1AF0  0DF5               	rlf	___lmul@multiplicand+1,f
 12225  1AF1  0DF6               	rlf	___lmul@multiplicand+2,f
 12226  1AF2  0DF7               	rlf	___lmul@multiplicand+3,f
 12227  1AF3  0BF8               	decfsz	??___lmul,f
 12228  1AF4  2AEE               	goto	u4795
 12229  1AF5  3001               	movlw	1
 12230  1AF6                     u4805:	
 12231  1AF6  1003               	clrc
 12232  1AF7  0CF3               	rrf	___lmul@multiplier+3,f
 12233  1AF8  0CF2               	rrf	___lmul@multiplier+2,f
 12234  1AF9  0CF1               	rrf	___lmul@multiplier+1,f
 12235  1AFA  0CF0               	rrf	___lmul@multiplier,f
 12236  1AFB  3EFF               	addlw	-1
 12237  1AFC  1D03               	skipz
 12238  1AFD  2AF6               	goto	u4805
 12239  1AFE  0873               	movf	___lmul@multiplier+3,w
 12240  1AFF  0472               	iorwf	___lmul@multiplier+2,w
 12241  1B00  0471               	iorwf	___lmul@multiplier+1,w
 12242  1B01  0470               	iorwf	___lmul@multiplier,w
 12243  1B02  1D03               	skipz
 12244  1B03  2AD6               	goto	l3703
 12245  1B04  087C               	movf	___lmul@product+3,w
 12246  1B05  00F3               	movwf	?___lmul+3
 12247  1B06  087B               	movf	___lmul@product+2,w
 12248  1B07  00F2               	movwf	?___lmul+2
 12249  1B08  087A               	movf	___lmul@product+1,w
 12250  1B09  00F1               	movwf	?___lmul+1
 12251  1B0A  0879               	movf	___lmul@product,w
 12252  1B0B  00F0               	movwf	?___lmul
 12253  1B0C  0008               	return
 12254  1B0D                     __end_of___lmul:	
 12255                           
 12256                           	psect	text41
 12257  1C2E                     __ptext41:	
 12258 ;; *************** function ___awmod *****************
 12259 ;; Defined at:
 12260 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 12261 ;; Parameters:    Size  Location     Type
 12262 ;;  divisor         2    7[BANK0 ] int 
 12263 ;;  dividend        2    9[BANK0 ] int 
 12264 ;; Auto vars:     Size  Location     Type
 12265 ;;  sign            1   12[BANK0 ] unsigned char 
 12266 ;;  counter         1   11[BANK0 ] unsigned char 
 12267 ;; Return value:  Size  Location     Type
 12268 ;;                  2    7[BANK0 ] int 
 12269 ;; Registers used:
 12270 ;;		wreg, status,2, status,0
 12271 ;; Tracked objects:
 12272 ;;		On entry : 0/0
 12273 ;;		On exit  : 0/0
 12274 ;;		Unchanged: 0/0
 12275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12276 ;;      Params:         0       4       0       0       0
 12277 ;;      Locals:         0       2       0       0       0
 12278 ;;      Temps:          1       0       0       0       0
 12279 ;;      Totals:         1       6       0       0       0
 12280 ;;Total ram usage:        7 bytes
 12281 ;; Hardware stack levels used:    1
 12282 ;; This function calls:
 12283 ;;		Nothing
 12284 ;; This function is called by:
 12285 ;;		_char_info_index_rand
 12286 ;;		_USARTWriteInt
 12287 ;; This function uses a non-reentrant model
 12288 ;;
 12289                           
 12290                           
 12291                           ;psect for function ___awmod
 12292  1C2E                     ___awmod:	
 12293                           
 12294                           ;incstack = 0
 12295                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 12296  1C2E  1283               	bcf	3,5	;RP0=0, select bank0
 12297  1C2F  1303               	bcf	3,6	;RP1=0, select bank0
 12298  1C30  01AC               	clrf	___awmod@sign
 12299  1C31  1FAA               	btfss	___awmod@dividend+1,7
 12300  1C32  2C3A               	goto	l4085
 12301  1C33  09A9               	comf	___awmod@dividend,f
 12302  1C34  09AA               	comf	___awmod@dividend+1,f
 12303  1C35  0AA9               	incf	___awmod@dividend,f
 12304  1C36  1903               	skipnz
 12305  1C37  0AAA               	incf	___awmod@dividend+1,f
 12306  1C38  01AC               	clrf	___awmod@sign
 12307  1C39  0AAC               	incf	___awmod@sign,f
 12308  1C3A                     l4085:	
 12309  1C3A  1FA8               	btfss	___awmod@divisor+1,7
 12310  1C3B  2C41               	goto	l4089
 12311  1C3C  09A7               	comf	___awmod@divisor,f
 12312  1C3D  09A8               	comf	___awmod@divisor+1,f
 12313  1C3E  0AA7               	incf	___awmod@divisor,f
 12314  1C3F  1903               	skipnz
 12315  1C40  0AA8               	incf	___awmod@divisor+1,f
 12316  1C41                     l4089:	
 12317  1C41  0827               	movf	___awmod@divisor,w
 12318  1C42  0428               	iorwf	___awmod@divisor+1,w
 12319  1C43  1903               	btfsc	3,2
 12320  1C44  2C6E               	goto	l4107
 12321  1C45  01AB               	clrf	___awmod@counter
 12322  1C46  0AAB               	incf	___awmod@counter,f
 12323  1C47                     l4097:	
 12324  1C47  1BA8               	btfsc	___awmod@divisor+1,7
 12325  1C48  2C55               	goto	l4099
 12326  1C49  3001               	movlw	1
 12327  1C4A                     u5755:	
 12328  1C4A  1003               	clrc
 12329  1C4B  0DA7               	rlf	___awmod@divisor,f
 12330  1C4C  0DA8               	rlf	___awmod@divisor+1,f
 12331  1C4D  3EFF               	addlw	-1
 12332  1C4E  1D03               	skipz
 12333  1C4F  2C4A               	goto	u5755
 12334  1C50  3001               	movlw	1
 12335  1C51  00FD               	movwf	??___awmod
 12336  1C52  087D               	movf	??___awmod,w
 12337  1C53  07AB               	addwf	___awmod@counter,f
 12338  1C54  2C47               	goto	l4097
 12339  1C55                     l4099:	
 12340  1C55  0828               	movf	___awmod@divisor+1,w
 12341  1C56  022A               	subwf	___awmod@dividend+1,w
 12342  1C57  1D03               	skipz
 12343  1C58  2C5B               	goto	u5775
 12344  1C59  0827               	movf	___awmod@divisor,w
 12345  1C5A  0229               	subwf	___awmod@dividend,w
 12346  1C5B                     u5775:	
 12347  1C5B  1C03               	skipc
 12348  1C5C  2C63               	goto	l4103
 12349  1C5D  0827               	movf	___awmod@divisor,w
 12350  1C5E  02A9               	subwf	___awmod@dividend,f
 12351  1C5F  0828               	movf	___awmod@divisor+1,w
 12352  1C60  1C03               	skipc
 12353  1C61  03AA               	decf	___awmod@dividend+1,f
 12354  1C62  02AA               	subwf	___awmod@dividend+1,f
 12355  1C63                     l4103:	
 12356  1C63  3001               	movlw	1
 12357  1C64                     u5785:	
 12358  1C64  1003               	clrc
 12359  1C65  0CA8               	rrf	___awmod@divisor+1,f
 12360  1C66  0CA7               	rrf	___awmod@divisor,f
 12361  1C67  3EFF               	addlw	-1
 12362  1C68  1D03               	skipz
 12363  1C69  2C64               	goto	u5785
 12364  1C6A  3001               	movlw	1
 12365  1C6B  02AB               	subwf	___awmod@counter,f
 12366  1C6C  1D03               	btfss	3,2
 12367  1C6D  2C55               	goto	l4099
 12368  1C6E                     l4107:	
 12369  1C6E  082C               	movf	___awmod@sign,w
 12370  1C6F  1903               	btfsc	3,2
 12371  1C70  2C76               	goto	l4111
 12372  1C71  09A9               	comf	___awmod@dividend,f
 12373  1C72  09AA               	comf	___awmod@dividend+1,f
 12374  1C73  0AA9               	incf	___awmod@dividend,f
 12375  1C74  1903               	skipnz
 12376  1C75  0AAA               	incf	___awmod@dividend+1,f
 12377  1C76                     l4111:	
 12378  1C76  082A               	movf	___awmod@dividend+1,w
 12379  1C77  00A8               	movwf	?___awmod+1
 12380  1C78  0829               	movf	___awmod@dividend,w
 12381  1C79  00A7               	movwf	?___awmod
 12382  1C7A  0008               	return
 12383  1C7B                     __end_of___awmod:	
 12384                           
 12385                           	psect	text42
 12386  1B0D                     __ptext42:	
 12387 ;; *************** function _USARTInit *****************
 12388 ;; Defined at:
 12389 ;;		line 31 in file "usart_pic16.c"
 12390 ;; Parameters:    Size  Location     Type
 12391 ;;  baud_rate       2    0[COMMON] unsigned int 
 12392 ;; Auto vars:     Size  Location     Type
 12393 ;;		None
 12394 ;; Return value:  Size  Location     Type
 12395 ;;                  1    wreg      void 
 12396 ;; Registers used:
 12397 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12398 ;; Tracked objects:
 12399 ;;		On entry : 0/0
 12400 ;;		On exit  : 0/0
 12401 ;;		Unchanged: 0/0
 12402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12403 ;;      Params:         2       0       0       0       0
 12404 ;;      Locals:         0       0       0       0       0
 12405 ;;      Temps:          1       0       0       0       0
 12406 ;;      Totals:         3       0       0       0       0
 12407 ;;Total ram usage:        3 bytes
 12408 ;; Hardware stack levels used:    1
 12409 ;; This function calls:
 12410 ;;		Nothing
 12411 ;; This function is called by:
 12412 ;;		_main
 12413 ;; This function uses a non-reentrant model
 12414 ;;
 12415                           
 12416                           
 12417                           ;psect for function _USARTInit
 12418  1B0D                     _USARTInit:	
 12419                           
 12420                           ;usart_pic16.c: 33: UQFront = UQEnd = -1;
 12421                           
 12422                           ;incstack = 0
 12423                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 12424  1B0D  30FF               	movlw	255
 12425  1B0E  1283               	bcf	3,5	;RP0=0, select bank0
 12426  1B0F  1303               	bcf	3,6	;RP1=0, select bank0
 12427  1B10  00EE               	movwf	_UQEnd	;volatile
 12428  1B11  00F2               	movwf	??_USARTInit
 12429  1B12  0872               	movf	??_USARTInit,w
 12430  1B13  00EF               	movwf	_UQFront	;volatile
 12431                           
 12432                           ;usart_pic16.c: 36: switch (baud_rate) {
 12433  1B14  2B20               	goto	l4127
 12434  1B15                     l4117:	
 12435                           ;usart_pic16.c: 37: case 9600:
 12436                           
 12437                           
 12438                           ;usart_pic16.c: 38: SPBRG = 129;
 12439  1B15  3081               	movlw	129
 12440  1B16  2B1C               	goto	L38
 12441  1B17                     l4119:	
 12442                           ;usart_pic16.c: 40: case 19200:
 12443                           
 12444                           ;usart_pic16.c: 39: break;
 12445                           
 12446                           
 12447                           ;usart_pic16.c: 41: SPBRG = 64;
 12448  1B17  3040               	movlw	64
 12449  1B18  2B1C               	goto	L38
 12450  1B19                     l4121:	
 12451                           ;usart_pic16.c: 43: case 28800:
 12452                           
 12453                           ;usart_pic16.c: 42: break;
 12454                           
 12455                           
 12456                           ;usart_pic16.c: 44: SPBRG = 42;
 12457  1B19  302A               	movlw	42
 12458  1B1A  2B1C               	goto	L38
 12459  1B1B                     l4123:	
 12460                           ;usart_pic16.c: 46: case 33600:
 12461                           
 12462                           ;usart_pic16.c: 45: break;
 12463                           
 12464                           
 12465                           ;usart_pic16.c: 47: SPBRG = 36;
 12466  1B1B  3024               	movlw	36
 12467  1B1C                     L38:	
 12468  1B1C  1683               	bsf	3,5	;RP0=1, select bank1
 12469  1B1D  1303               	bcf	3,6	;RP1=0, select bank1
 12470  1B1E  0099               	movwf	25	;volatile
 12471                           
 12472                           ;usart_pic16.c: 49: }
 12473                           
 12474                           ;usart_pic16.c: 48: break;
 12475  1B1F  2B42               	goto	l29
 12476  1B20                     l4127:	
 12477                           
 12478                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 12479                           ; Switch size 1, requested type "space"
 12480                           ; Number of cases is 4, Range of values is 37 to 131
 12481                           ; switch strategies available:
 12482                           ; Name         Instructions Cycles
 12483                           ; simple_byte           13     7 (average)
 12484                           ; jumptable            263     9 (fixed)
 12485                           ;	Chosen strategy is simple_byte
 12486  1B20  0871               	movf	USARTInit@baud_rate+1,w
 12487  1B21  3A25               	xorlw	37	; case 37
 12488  1B22  1903               	skipnz
 12489  1B23  2B2E               	goto	l5919
 12490  1B24  3A6E               	xorlw	110	; case 75
 12491  1B25  1903               	skipnz
 12492  1B26  2B33               	goto	l5921
 12493  1B27  3A3B               	xorlw	59	; case 112
 12494  1B28  1903               	skipnz
 12495  1B29  2B38               	goto	l5923
 12496  1B2A  3AF3               	xorlw	243	; case 131
 12497  1B2B  1903               	skipnz
 12498  1B2C  2B3D               	goto	l5925
 12499  1B2D  2B42               	goto	l29
 12500  1B2E                     l5919:	
 12501                           
 12502                           ; Switch size 1, requested type "space"
 12503                           ; Number of cases is 1, Range of values is 128 to 128
 12504                           ; switch strategies available:
 12505                           ; Name         Instructions Cycles
 12506                           ; simple_byte            4     3 (average)
 12507                           ; direct_byte           14    11 (fixed)
 12508                           ; jumptable            263     9 (fixed)
 12509                           ;	Chosen strategy is simple_byte
 12510  1B2E  0870               	movf	USARTInit@baud_rate,w
 12511  1B2F  3A80               	xorlw	128	; case 128
 12512  1B30  1903               	skipnz
 12513  1B31  2B15               	goto	l4117
 12514  1B32  2B42               	goto	l29
 12515  1B33                     l5921:	
 12516                           
 12517                           ; Switch size 1, requested type "space"
 12518                           ; Number of cases is 1, Range of values is 0 to 0
 12519                           ; switch strategies available:
 12520                           ; Name         Instructions Cycles
 12521                           ; simple_byte            4     3 (average)
 12522                           ; direct_byte           11     8 (fixed)
 12523                           ; jumptable            260     6 (fixed)
 12524                           ;	Chosen strategy is simple_byte
 12525  1B33  0870               	movf	USARTInit@baud_rate,w
 12526  1B34  3A00               	xorlw	0	; case 0
 12527  1B35  1903               	skipnz
 12528  1B36  2B17               	goto	l4119
 12529  1B37  2B42               	goto	l29
 12530  1B38                     l5923:	
 12531                           
 12532                           ; Switch size 1, requested type "space"
 12533                           ; Number of cases is 1, Range of values is 128 to 128
 12534                           ; switch strategies available:
 12535                           ; Name         Instructions Cycles
 12536                           ; simple_byte            4     3 (average)
 12537                           ; direct_byte           14    11 (fixed)
 12538                           ; jumptable            263     9 (fixed)
 12539                           ;	Chosen strategy is simple_byte
 12540  1B38  0870               	movf	USARTInit@baud_rate,w
 12541  1B39  3A80               	xorlw	128	; case 128
 12542  1B3A  1903               	skipnz
 12543  1B3B  2B19               	goto	l4121
 12544  1B3C  2B42               	goto	l29
 12545  1B3D                     l5925:	
 12546                           
 12547                           ; Switch size 1, requested type "space"
 12548                           ; Number of cases is 1, Range of values is 64 to 64
 12549                           ; switch strategies available:
 12550                           ; Name         Instructions Cycles
 12551                           ; simple_byte            4     3 (average)
 12552                           ; direct_byte           14    11 (fixed)
 12553                           ; jumptable            263     9 (fixed)
 12554                           ;	Chosen strategy is simple_byte
 12555  1B3D  0870               	movf	USARTInit@baud_rate,w
 12556  1B3E  3A40               	xorlw	64	; case 64
 12557  1B3F  1903               	skipnz
 12558  1B40  2B1B               	goto	l4123
 12559  1B41  2B42               	goto	l29
 12560  1B42                     l29:	
 12561                           
 12562                           ;usart_pic16.c: 52: TXSTAbits.TX9 = 0;
 12563  1B42  1683               	bsf	3,5	;RP0=1, select bank1
 12564  1B43  1303               	bcf	3,6	;RP1=0, select bank1
 12565  1B44  1318               	bcf	24,6	;volatile
 12566                           
 12567                           ;usart_pic16.c: 53: TXSTAbits.TXEN = 1;
 12568  1B45  1698               	bsf	24,5	;volatile
 12569                           
 12570                           ;usart_pic16.c: 54: TXSTAbits.SYNC = 0;
 12571  1B46  1218               	bcf	24,4	;volatile
 12572                           
 12573                           ;usart_pic16.c: 55: TXSTAbits.BRGH = 1;
 12574  1B47  1518               	bsf	24,2	;volatile
 12575                           
 12576                           ;usart_pic16.c: 58: RCSTAbits.SPEN = 1;
 12577  1B48  1283               	bcf	3,5	;RP0=0, select bank0
 12578  1B49  1303               	bcf	3,6	;RP1=0, select bank0
 12579  1B4A  1798               	bsf	24,7	;volatile
 12580                           
 12581                           ;usart_pic16.c: 59: RCSTAbits.RX9 = 0;
 12582  1B4B  1318               	bcf	24,6	;volatile
 12583                           
 12584                           ;usart_pic16.c: 60: RCSTAbits.CREN = 1;
 12585  1B4C  1618               	bsf	24,4	;volatile
 12586                           
 12587                           ;usart_pic16.c: 61: RCSTAbits.ADDEN = 0;
 12588  1B4D  1198               	bcf	24,3	;volatile
 12589                           
 12590                           ;usart_pic16.c: 64: RCIE = 1;
 12591  1B4E  1683               	bsf	3,5	;RP0=1, select bank1
 12592  1B4F  1303               	bcf	3,6	;RP1=0, select bank1
 12593  1B50  168C               	bsf	12,5	;volatile
 12594                           
 12595                           ;usart_pic16.c: 65: PEIE = 1;
 12596  1B51  170B               	bsf	11,6	;volatile
 12597                           
 12598                           ;usart_pic16.c: 67: (GIE = 1);
 12599  1B52  178B               	bsf	11,7	;volatile
 12600  1B53  0008               	return
 12601  1B54                     __end_of_USARTInit:	
 12602                           
 12603                           	psect	text43
 12604  1896                     __ptext43:	
 12605 ;; *************** function _Clear_Matrix *****************
 12606 ;; Defined at:
 12607 ;;		line 601 in file "teris_16f886.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;		None
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;		None
 12612 ;; Return value:  Size  Location     Type
 12613 ;;                  1    wreg      void 
 12614 ;; Registers used:
 12615 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12616 ;; Tracked objects:
 12617 ;;		On entry : 0/0
 12618 ;;		On exit  : 0/0
 12619 ;;		Unchanged: 0/0
 12620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12621 ;;      Params:         0       0       0       0       0
 12622 ;;      Locals:         0       0       0       0       0
 12623 ;;      Temps:          0       0       0       0       0
 12624 ;;      Totals:         0       0       0       0       0
 12625 ;;Total ram usage:        0 bytes
 12626 ;; Hardware stack levels used:    1
 12627 ;; Hardware stack levels required when called:    5
 12628 ;; This function calls:
 12629 ;;		_memset
 12630 ;;		_printf_Screen
 12631 ;; This function is called by:
 12632 ;;		_main
 12633 ;; This function uses a non-reentrant model
 12634 ;;
 12635                           
 12636                           
 12637                           ;psect for function _Clear_Matrix
 12638  1896                     _Clear_Matrix:	
 12639                           
 12640                           ;teris_16f886.c: 603: memset(&g_matrix88, 0, sizeof(MATRIX88));
 12641                           
 12642                           ;incstack = 0
 12643                           ; Regs used in _Clear_Matrix: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12644  1896  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
 12645  1897  00F0               	movwf	memset@p1
 12646  1898  3001               	movlw	1
 12647  1899  00F1               	movwf	memset@p1+1
 12648  189A  3000               	movlw	0
 12649  189B  00F2               	movwf	memset@c
 12650  189C  00F3               	movwf	memset@c+1
 12651  189D  3040               	movlw	64
 12652  189E  00F4               	movwf	memset@n
 12653  189F  3000               	movlw	0
 12654  18A0  00F5               	movwf	memset@n+1
 12655  18A1  160A  158A  20D7  160A  158A  	fcall	_memset
 12656                           
 12657                           ;teris_16f886.c: 604: printf_Screen();
 12658  18A6  160A  158A  2018   	fcall	_printf_Screen
 12659  18A9  0008               	return
 12660  18AA                     __end_of_Clear_Matrix:	
 12661                           
 12662                           	psect	text44
 12663  1818                     __ptext44:	
 12664 ;; *************** function _printf_Screen *****************
 12665 ;; Defined at:
 12666 ;;		line 584 in file "teris_16f886.c"
 12667 ;; Parameters:    Size  Location     Type
 12668 ;;		None
 12669 ;; Auto vars:     Size  Location     Type
 12670 ;;		None
 12671 ;; Return value:  Size  Location     Type
 12672 ;;                  1    wreg      void 
 12673 ;; Registers used:
 12674 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12675 ;; Tracked objects:
 12676 ;;		On entry : 0/0
 12677 ;;		On exit  : 0/0
 12678 ;;		Unchanged: 0/0
 12679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12680 ;;      Params:         0       0       0       0       0
 12681 ;;      Locals:         0       0       0       0       0
 12682 ;;      Temps:          0       0       0       0       0
 12683 ;;      Totals:         0       0       0       0       0
 12684 ;;Total ram usage:        0 bytes
 12685 ;; Hardware stack levels used:    1
 12686 ;; Hardware stack levels required when called:    4
 12687 ;; This function calls:
 12688 ;;		_printf_MATRIX88
 12689 ;; This function is called by:
 12690 ;;		_Clear_Matrix
 12691 ;;		_main
 12692 ;; This function uses a non-reentrant model
 12693 ;;
 12694                           
 12695                           
 12696                           ;psect for function _printf_Screen
 12697  1818                     _printf_Screen:	
 12698                           
 12699                           ;teris_16f886.c: 586: printf_MATRIX88(&g_matrix88);
 12700                           
 12701                           ;incstack = 0
 12702                           ; Regs used in _printf_Screen: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12703  1818  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
 12704  1819  160A  158A  2084   	fcall	_printf_MATRIX88
 12705  181C  0008               	return
 12706  181D                     __end_of_printf_Screen:	
 12707                           
 12708                           	psect	text45
 12709  1884                     __ptext45:	
 12710 ;; *************** function _printf_MATRIX88 *****************
 12711 ;; Defined at:
 12712 ;;		line 578 in file "teris_16f886.c"
 12713 ;; Parameters:    Size  Location     Type
 12714 ;;  matrix88        1    wreg     PTR const struct .
 12715 ;;		 -> g_matrix88(64), 
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;  matrix88        1    0[BANK0 ] PTR const struct .
 12718 ;;		 -> g_matrix88(64), 
 12719 ;;  matrix7219      8    1[BANK0 ] struct .
 12720 ;; Return value:  Size  Location     Type
 12721 ;;                  1    wreg      void 
 12722 ;; Registers used:
 12723 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12724 ;; Tracked objects:
 12725 ;;		On entry : 0/0
 12726 ;;		On exit  : 0/0
 12727 ;;		Unchanged: 0/0
 12728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12729 ;;      Params:         0       0       0       0       0
 12730 ;;      Locals:         0       9       0       0       0
 12731 ;;      Temps:          1       0       0       0       0
 12732 ;;      Totals:         1       9       0       0       0
 12733 ;;Total ram usage:       10 bytes
 12734 ;; Hardware stack levels used:    1
 12735 ;; Hardware stack levels required when called:    3
 12736 ;; This function calls:
 12737 ;;		_MATRIX88_to_MATRIX7219
 12738 ;;		_printf_MATRIX7219
 12739 ;; This function is called by:
 12740 ;;		_printf_Screen
 12741 ;; This function uses a non-reentrant model
 12742 ;;
 12743                           
 12744                           
 12745                           ;psect for function _printf_MATRIX88
 12746  1884                     _printf_MATRIX88:	
 12747                           
 12748                           ;incstack = 0
 12749                           ; Regs used in _printf_MATRIX88: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12750                           ;printf_MATRIX88@matrix88 stored from wreg
 12751  1884  1283               	bcf	3,5	;RP0=0, select bank0
 12752  1885  1303               	bcf	3,6	;RP1=0, select bank0
 12753  1886  00A0               	movwf	printf_MATRIX88@matrix88
 12754                           
 12755                           ;teris_16f886.c: 580: MATRIX7219 matrix7219;
 12756                           ;teris_16f886.c: 581: MATRIX88_to_MATRIX7219(matrix88, &matrix7219);
 12757  1887  3021               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
 12758  1888  00F8               	movwf	??_printf_MATRIX88
 12759  1889  0878               	movf	??_printf_MATRIX88,w
 12760  188A  00F0               	movwf	MATRIX88_to_MATRIX7219@matrix7219
 12761  188B  0820               	movf	printf_MATRIX88@matrix88,w
 12762  188C  160A  158A  2354  160A  158A  	fcall	_MATRIX88_to_MATRIX7219
 12763                           
 12764                           ;teris_16f886.c: 582: printf_MATRIX7219(&matrix7219);
 12765  1891  3021               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
 12766  1892  160A  158A  20F2   	fcall	_printf_MATRIX7219
 12767  1895  0008               	return
 12768  1896                     __end_of_printf_MATRIX88:	
 12769                           
 12770                           	psect	text46
 12771  18F2                     __ptext46:	
 12772 ;; *************** function _printf_MATRIX7219 *****************
 12773 ;; Defined at:
 12774 ;;		line 522 in file "teris_16f886.c"
 12775 ;; Parameters:    Size  Location     Type
 12776 ;;  matrix          1    wreg     PTR const struct .
 12777 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12778 ;; Auto vars:     Size  Location     Type
 12779 ;;  matrix          1    4[COMMON] PTR const struct .
 12780 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12781 ;;  col             1    5[COMMON] unsigned char 
 12782 ;; Return value:  Size  Location     Type
 12783 ;;                  1    wreg      void 
 12784 ;; Registers used:
 12785 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12786 ;; Tracked objects:
 12787 ;;		On entry : 0/0
 12788 ;;		On exit  : 0/0
 12789 ;;		Unchanged: 0/0
 12790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12791 ;;      Params:         0       0       0       0       0
 12792 ;;      Locals:         2       0       0       0       0
 12793 ;;      Temps:          2       0       0       0       0
 12794 ;;      Totals:         4       0       0       0       0
 12795 ;;Total ram usage:        4 bytes
 12796 ;; Hardware stack levels used:    1
 12797 ;; Hardware stack levels required when called:    2
 12798 ;; This function calls:
 12799 ;;		_Write_Byte
 12800 ;; This function is called by:
 12801 ;;		_printf_MATRIX88
 12802 ;; This function uses a non-reentrant model
 12803 ;;
 12804                           
 12805                           
 12806                           ;psect for function _printf_MATRIX7219
 12807  18F2                     _printf_MATRIX7219:	
 12808                           
 12809                           ;incstack = 0
 12810                           ; Regs used in _printf_MATRIX7219: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12811                           ;printf_MATRIX7219@matrix stored from wreg
 12812  18F2  00F4               	movwf	printf_MATRIX7219@matrix
 12813                           
 12814                           ;teris_16f886.c: 524: uint8_t col;
 12815                           ;teris_16f886.c: 526: for (col = 0; col < 8; col++)
 12816  18F3  01F5               	clrf	printf_MATRIX7219@col
 12817  18F4                     L39:	
 12818  18F4  3008               	movlw	8
 12819  18F5  0275               	subwf	printf_MATRIX7219@col,w
 12820  18F6  1803               	btfsc	3,0
 12821  18F7  0008               	return
 12822                           
 12823                           ;teris_16f886.c: 527: {
 12824                           ;teris_16f886.c: 528: Write_Byte(col + 1, matrix->col[col]);
 12825  18F8  0875               	movf	printf_MATRIX7219@col,w
 12826  18F9  0774               	addwf	printf_MATRIX7219@matrix,w
 12827  18FA  00F2               	movwf	??_printf_MATRIX7219
 12828  18FB  0872               	movf	??_printf_MATRIX7219,w
 12829  18FC  0084               	movwf	4
 12830  18FD  1383               	bcf	3,7	;select IRP bank0
 12831  18FE  0800               	movf	0,w
 12832  18FF  00F3               	movwf	??_printf_MATRIX7219+1
 12833  1900  0873               	movf	??_printf_MATRIX7219+1,w
 12834  1901  00F0               	movwf	Write_Byte@myValue
 12835  1902  0875               	movf	printf_MATRIX7219@col,w
 12836  1903  3E01               	addlw	1
 12837  1904  160A  158A  2072  160A  158A  	fcall	_Write_Byte
 12838  1909  3001               	movlw	1
 12839  190A  00F2               	movwf	??_printf_MATRIX7219
 12840  190B  0872               	movf	??_printf_MATRIX7219,w
 12841  190C  07F5               	addwf	printf_MATRIX7219@col,f
 12842  190D  28F4               	goto	L39
 12843  190E                     __end_of_printf_MATRIX7219:	
 12844                           
 12845                           	psect	text47
 12846  1872                     __ptext47:	
 12847 ;; *************** function _Write_Byte *****************
 12848 ;; Defined at:
 12849 ;;		line 482 in file "teris_16f886.c"
 12850 ;; Parameters:    Size  Location     Type
 12851 ;;  myColumn        1    wreg     unsigned char 
 12852 ;;  myValue         1    0[COMMON] unsigned char 
 12853 ;; Auto vars:     Size  Location     Type
 12854 ;;  myColumn        1    1[COMMON] unsigned char 
 12855 ;; Return value:  Size  Location     Type
 12856 ;;                  1    wreg      void 
 12857 ;; Registers used:
 12858 ;;		wreg, status,2, status,0, pclath, cstack
 12859 ;; Tracked objects:
 12860 ;;		On entry : 0/0
 12861 ;;		On exit  : 0/0
 12862 ;;		Unchanged: 0/0
 12863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12864 ;;      Params:         1       0       0       0       0
 12865 ;;      Locals:         1       0       0       0       0
 12866 ;;      Temps:          0       0       0       0       0
 12867 ;;      Totals:         2       0       0       0       0
 12868 ;;Total ram usage:        2 bytes
 12869 ;; Hardware stack levels used:    1
 12870 ;; Hardware stack levels required when called:    1
 12871 ;; This function calls:
 12872 ;;		_SPI1_write
 12873 ;; This function is called by:
 12874 ;;		_printf_MATRIX7219
 12875 ;; This function uses a non-reentrant model
 12876 ;;
 12877                           
 12878                           
 12879                           ;psect for function _Write_Byte
 12880  1872                     _Write_Byte:	
 12881                           
 12882                           ;incstack = 0
 12883                           ; Regs used in _Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 12884                           ;Write_Byte@myColumn stored from wreg
 12885  1872  00F1               	movwf	Write_Byte@myColumn
 12886                           
 12887                           ;teris_16f886.c: 483: RA2 = 0;
 12888  1873  1283               	bcf	3,5	;RP0=0, select bank0
 12889  1874  1303               	bcf	3,6	;RP1=0, select bank0
 12890  1875  1105               	bcf	5,2	;volatile
 12891                           
 12892                           ;teris_16f886.c: 484: SPI1_write(myColumn);
 12893  1876  0871               	movf	Write_Byte@myColumn,w
 12894  1877  120A  118A  2003  160A  158A  	fcall	_SPI1_write
 12895                           
 12896                           ;teris_16f886.c: 485: SPI1_write(myValue);
 12897  187C  0870               	movf	Write_Byte@myValue,w
 12898  187D  120A  118A  2003   	fcall	_SPI1_write
 12899                           
 12900                           ;teris_16f886.c: 486: RA2 = 1;
 12901  1880  1283               	bcf	3,5	;RP0=0, select bank0
 12902  1881  1303               	bcf	3,6	;RP1=0, select bank0
 12903  1882  1505               	bsf	5,2	;volatile
 12904  1883  0008               	return
 12905  1884                     __end_of_Write_Byte:	
 12906                           
 12907                           	psect	text48
 12908  0003                     __ptext48:	
 12909 ;; *************** function _SPI1_write *****************
 12910 ;; Defined at:
 12911 ;;		line 424 in file "teris_16f886.c"
 12912 ;; Parameters:    Size  Location     Type
 12913 ;;  data            1    wreg     unsigned char 
 12914 ;; Auto vars:     Size  Location     Type
 12915 ;;  data            1    0[COMMON] unsigned char 
 12916 ;; Return value:  Size  Location     Type
 12917 ;;                  1    wreg      void 
 12918 ;; Registers used:
 12919 ;;		wreg
 12920 ;; Tracked objects:
 12921 ;;		On entry : 0/0
 12922 ;;		On exit  : 0/0
 12923 ;;		Unchanged: 0/0
 12924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12925 ;;      Params:         0       0       0       0       0
 12926 ;;      Locals:         0       0       0       0       0
 12927 ;;      Temps:          0       0       0       0       0
 12928 ;;      Totals:         0       0       0       0       0
 12929 ;;Total ram usage:        0 bytes
 12930 ;; Hardware stack levels used:    1
 12931 ;; This function calls:
 12932 ;;		Nothing
 12933 ;; This function is called by:
 12934 ;;		_Write_Byte
 12935 ;;		_max7219_init1
 12936 ;; This function uses a non-reentrant model
 12937 ;;
 12938                           
 12939                           
 12940                           ;psect for function _SPI1_write
 12941  0003                     _SPI1_write:	
 12942                           
 12943                           ;incstack = 0
 12944                           ; Regs used in _SPI1_write: [wreg]
 12945  0003  0008               	return
 12946  0004                     __end_of_SPI1_write:	
 12947                           
 12948                           	psect	text49
 12949  1B54                     __ptext49:	
 12950 ;; *************** function _MATRIX88_to_MATRIX7219 *****************
 12951 ;; Defined at:
 12952 ;;		line 531 in file "teris_16f886.c"
 12953 ;; Parameters:    Size  Location     Type
 12954 ;;  matrix88        1    wreg     PTR const struct .
 12955 ;;		 -> g_matrix88(64), 
 12956 ;;  matrix7219      1    0[COMMON] PTR struct .
 12957 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12958 ;; Auto vars:     Size  Location     Type
 12959 ;;  matrix88        1    4[COMMON] PTR const struct .
 12960 ;;		 -> g_matrix88(64), 
 12961 ;;  row             1    6[COMMON] unsigned char 
 12962 ;;  col             1    7[COMMON] unsigned char 
 12963 ;;  mask            1    5[COMMON] unsigned char 
 12964 ;; Return value:  Size  Location     Type
 12965 ;;                  1    wreg      void 
 12966 ;; Registers used:
 12967 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12968 ;; Tracked objects:
 12969 ;;		On entry : 0/0
 12970 ;;		On exit  : 0/0
 12971 ;;		Unchanged: 0/0
 12972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12973 ;;      Params:         1       0       0       0       0
 12974 ;;      Locals:         4       0       0       0       0
 12975 ;;      Temps:          3       0       0       0       0
 12976 ;;      Totals:         8       0       0       0       0
 12977 ;;Total ram usage:        8 bytes
 12978 ;; Hardware stack levels used:    1
 12979 ;; This function calls:
 12980 ;;		Nothing
 12981 ;; This function is called by:
 12982 ;;		_printf_MATRIX88
 12983 ;; This function uses a non-reentrant model
 12984 ;;
 12985                           
 12986                           
 12987                           ;psect for function _MATRIX88_to_MATRIX7219
 12988  1B54                     _MATRIX88_to_MATRIX7219:	
 12989                           
 12990                           ;incstack = 0
 12991                           ; Regs used in _MATRIX88_to_MATRIX7219: [wreg-fsr0h+status,2+status,0]
 12992                           ;MATRIX88_to_MATRIX7219@matrix88 stored from wreg
 12993  1B54  00F4               	movwf	MATRIX88_to_MATRIX7219@matrix88
 12994                           
 12995                           ;teris_16f886.c: 533: uint8_t mask = 0x80;
 12996  1B55  3080               	movlw	128
 12997  1B56  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12998  1B57  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12999  1B58  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
 13000                           
 13001                           ;teris_16f886.c: 535: for(uint8_t col = 0; col < 8; col++)
 13002  1B59  01F7               	clrf	MATRIX88_to_MATRIX7219@col
 13003  1B5A                     L40:	
 13004  1B5A  3008               	movlw	8
 13005  1B5B  0277               	subwf	MATRIX88_to_MATRIX7219@col,w
 13006  1B5C  1803               	btfsc	3,0
 13007  1B5D  0008               	return
 13008                           
 13009                           ;teris_16f886.c: 536: {
 13010                           ;teris_16f886.c: 537: mask = 0x80;
 13011  1B5E  3080               	movlw	128
 13012  1B5F  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13013  1B60  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13014  1B61  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
 13015                           
 13016                           ;teris_16f886.c: 538: matrix7219->col[col] = 0;
 13017  1B62  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 13018  1B63  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
 13019  1B64  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13020  1B65  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13021  1B66  0084               	movwf	4
 13022  1B67  1383               	bcf	3,7	;select IRP bank0
 13023  1B68  0180               	clrf	0
 13024                           
 13025                           ;teris_16f886.c: 539: for(uint8_t row = 0; row < 8; row++)
 13026  1B69  01F6               	clrf	MATRIX88_to_MATRIX7219@row
 13027  1B6A  3008               	movlw	8
 13028  1B6B  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
 13029  1B6C  1803               	btfsc	3,0
 13030  1B6D  2B97               	goto	l3461
 13031  1B6E                     l3451:	
 13032                           
 13033                           ;teris_16f886.c: 540: {
 13034                           ;teris_16f886.c: 541: if(matrix88->data[row][col] == 1)
 13035  1B6E  0876               	movf	MATRIX88_to_MATRIX7219@row,w
 13036  1B6F  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13037  1B70  3002               	movlw	2
 13038  1B71                     u4215:	
 13039  1B71  1003               	clrc
 13040  1B72  0DF1               	rlf	??_MATRIX88_to_MATRIX7219,f
 13041  1B73  3EFF               	addlw	-1
 13042  1B74  1D03               	skipz
 13043  1B75  2B71               	goto	u4215
 13044  1B76  1003               	clrc
 13045  1B77  0D71               	rlf	??_MATRIX88_to_MATRIX7219,w
 13046  1B78  0774               	addwf	MATRIX88_to_MATRIX7219@matrix88,w
 13047  1B79  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
 13048  1B7A  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 13049  1B7B  0772               	addwf	??_MATRIX88_to_MATRIX7219+1,w
 13050  1B7C  00F3               	movwf	??_MATRIX88_to_MATRIX7219+2
 13051  1B7D  0873               	movf	??_MATRIX88_to_MATRIX7219+2,w
 13052  1B7E  0084               	movwf	4
 13053  1B7F  1783               	bsf	3,7	;select IRP bank2
 13054  1B80  0300               	decf	0,w
 13055  1B81  1D03               	btfss	3,2
 13056  1B82  2B8D               	goto	l3455
 13057                           
 13058                           ;teris_16f886.c: 542: {
 13059                           ;teris_16f886.c: 543: matrix7219->col[col] |= mask;
 13060  1B83  0875               	movf	MATRIX88_to_MATRIX7219@mask,w
 13061  1B84  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13062  1B85  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 13063  1B86  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
 13064  1B87  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
 13065  1B88  0872               	movf	??_MATRIX88_to_MATRIX7219+1,w
 13066  1B89  0084               	movwf	4
 13067  1B8A  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13068  1B8B  1383               	bcf	3,7	;select IRP bank0
 13069  1B8C  0480               	iorwf	0,f
 13070  1B8D                     l3455:	
 13071                           
 13072                           ;teris_16f886.c: 544: }
 13073                           ;teris_16f886.c: 545: mask >>= 1;
 13074  1B8D  1003               	clrc
 13075  1B8E  0CF5               	rrf	MATRIX88_to_MATRIX7219@mask,f
 13076  1B8F  3001               	movlw	1
 13077  1B90  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13078  1B91  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13079  1B92  07F6               	addwf	MATRIX88_to_MATRIX7219@row,f
 13080  1B93  3008               	movlw	8
 13081  1B94  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
 13082  1B95  1C03               	skipc
 13083  1B96  2B6E               	goto	l3451
 13084  1B97                     l3461:	
 13085  1B97  3001               	movlw	1
 13086  1B98  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13087  1B99  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13088  1B9A  07F7               	addwf	MATRIX88_to_MATRIX7219@col,f
 13089  1B9B  2B5A               	goto	L40
 13090  1B9C                     __end_of_MATRIX88_to_MATRIX7219:	
 13091                           
 13092                           	psect	text50
 13093  18D7                     __ptext50:	
 13094 ;; *************** function _memset *****************
 13095 ;; Defined at:
 13096 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
 13097 ;; Parameters:    Size  Location     Type
 13098 ;;  p1              2    0[COMMON] PTR void 
 13099 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
 13100 ;;  c               2    2[COMMON] int 
 13101 ;;  n               2    4[COMMON] unsigned int 
 13102 ;; Auto vars:     Size  Location     Type
 13103 ;;  p               2    6[COMMON] PTR unsigned char 
 13104 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
 13105 ;; Return value:  Size  Location     Type
 13106 ;;                  2    0[COMMON] PTR void 
 13107 ;; Registers used:
 13108 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13109 ;; Tracked objects:
 13110 ;;		On entry : 0/0
 13111 ;;		On exit  : 0/0
 13112 ;;		Unchanged: 0/0
 13113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13114 ;;      Params:         6       0       0       0       0
 13115 ;;      Locals:         2       0       0       0       0
 13116 ;;      Temps:          0       0       0       0       0
 13117 ;;      Totals:         8       0       0       0       0
 13118 ;;Total ram usage:        8 bytes
 13119 ;; Hardware stack levels used:    1
 13120 ;; This function calls:
 13121 ;;		Nothing
 13122 ;; This function is called by:
 13123 ;;		_Clear_Matrix
 13124 ;;		_delete_row
 13125 ;; This function uses a non-reentrant model
 13126 ;;
 13127                           
 13128                           
 13129                           ;psect for function _memset
 13130  18D7                     _memset:	
 13131                           
 13132                           ;incstack = 0
 13133                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
 13134  18D7  0870               	movf	memset@p1,w
 13135  18D8  00F6               	movwf	memset@p
 13136  18D9  0871               	movf	memset@p1+1,w
 13137  18DA  00F7               	movwf	memset@p+1
 13138  18DB                     l3471:	
 13139  18DB  3001               	movlw	1
 13140  18DC  02F4               	subwf	memset@n,f
 13141  18DD  3000               	movlw	0
 13142  18DE  1C03               	skipc
 13143  18DF  03F5               	decf	memset@n+1,f
 13144  18E0  02F5               	subwf	memset@n+1,f
 13145  18E1  0A74               	incf	memset@n,w
 13146  18E2  1903               	btfsc	3,2
 13147  18E3  0A75               	incf	memset@n+1,w
 13148  18E4  1903               	btfsc	3,2
 13149  18E5  0008               	return
 13150  18E6  0876               	movf	memset@p,w
 13151  18E7  0084               	movwf	4
 13152  18E8  1383               	bcf	3,7
 13153  18E9  1877               	btfsc	memset@p+1,0
 13154  18EA  1783               	bsf	3,7
 13155  18EB  0872               	movf	memset@c,w
 13156  18EC  0080               	movwf	0
 13157  18ED  3001               	movlw	1
 13158  18EE  07F6               	addwf	memset@p,f
 13159  18EF  1803               	skipnc
 13160  18F0  0AF7               	incf	memset@p+1,f
 13161  18F1  28DB               	goto	l3471
 13162  18F2                     __end_of_memset:	
 13163                           ;	Return value of _memset is never used
 13164                           
 13165  007E                     btemp	set	126	;btemp
 13166  007E                     wtemp	set	126
 13167  007E                     wtemp0	set	126
 13168  0080                     wtemp1	set	128
 13169  0082                     wtemp2	set	130
 13170  0084                     wtemp3	set	132
 13171  0086                     wtemp4	set	134
 13172  0088                     wtemp5	set	136
 13173  007F                     wtemp6	set	127
 13174  007E                     ttemp	set	126
 13175  007E                     ttemp0	set	126
 13176  0081                     ttemp1	set	129
 13177  0084                     ttemp2	set	132
 13178  0087                     ttemp3	set	135
 13179  007F                     ttemp4	set	127
 13180  007E                     ltemp	set	126
 13181  007E                     ltemp0	set	126
 13182  0082                     ltemp1	set	130
 13183  0086                     ltemp2	set	134
 13184  0080                     ltemp3	set	128


Data Sizes:
    Strings     1043
    Constant    414
    Data        38
    BSS         144
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     72      80
    BANK1            80     71      80
    BANK3            96      0      71
    BANK2            96      0      96

Pointer List with Targets:

    is_right_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_left_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    memset@p1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memset@p	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    sprintf$720	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_100(CODE[17]), STR_99(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_97(CODE[13]), STR_95(CODE[23]), STR_93(CODE[19]), STR_92(CODE[19]), 
		 -> STR_91(CODE[19]), STR_90(CODE[20]), STR_89(CODE[16]), STR_88(CODE[15]), 
		 -> STR_85(CODE[19]), STR_84(CODE[19]), STR_83(CODE[19]), STR_82(CODE[20]), 
		 -> STR_81(CODE[16]), STR_80(CODE[15]), STR_78(CODE[18]), STR_77(CODE[19]), 
		 -> STR_76(CODE[18]), STR_75(CODE[19]), STR_74(CODE[18]), STR_73(CODE[17]), 
		 -> STR_72(CODE[22]), STR_71(CODE[18]), STR_70(CODE[19]), STR_69(CODE[18]), 
		 -> STR_68(CODE[19]), STR_67(CODE[18]), STR_66(CODE[20]), STR_65(CODE[15]), 
		 -> STR_64(CODE[19]), STR_58(CODE[14]), STR_57(CODE[10]), STR_56(CODE[11]), 
		 -> STR_55(CODE[9]), STR_54(CODE[12]), STR_53(CODE[9]), STR_52(CODE[7]), 
		 -> STR_50(CODE[21]), STR_49(CODE[16]), STR_48(CODE[15]), STR_47(CODE[10]), 
		 -> STR_46(CODE[15]), STR_44(CODE[15]), STR_39(CODE[19]), STR_37(CODE[19]), 
		 -> STR_35(CODE[19]), STR_31(CODE[24]), STR_30(CODE[24]), STR_28(CODE[25]), 
		 -> STR_14(CODE[27]), STR_13(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 32
		 -> g_debug(BANK3[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    g_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    find_best_solution@temp_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_holes_after_merge@matrix	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    get_high_after_merge@matrix	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_high@matrix	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    left_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    left_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    evaluate@matrix	PTR const struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge1@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    merge1@matrix88_in	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge1@matrix88_out	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    clear@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    clear@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    fall_off@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    fall_off@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_right_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_left_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_valid@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_valid@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    hit_land@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    hit_land@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    is_row_empty@matrix	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    delete_matrix@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memcpy	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    delete_row@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    is_row_full@matrix	PTR const struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memset	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    printf_debug_Screen@lable	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_61(CODE[15]), 

    printf_MATRIX88@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    printf_debug_MATRIX88@matrix	PTR const struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    printf_debug_MATRIX88@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_98(CODE[12]), STR_62(CODE[15]), ROM(CODE[8192]), 

    MATRIX88_to_MATRIX7219@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    MATRIX88_to_MATRIX7219@matrix7219	PTR struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    printf_MATRIX7219@matrix	PTR const struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    sp__get_MATRIX44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_debug_cur_MATRIX44@matrix	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_debug_cur_MATRIX44@lable	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_86(CODE[7]), 

    printf_debug_MATRIX44@matrix	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_debug_MATRIX44@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_60(CODE[15]), ROM(CODE[8192]), 

    debug_int2@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_78(CODE[18]), STR_77(CODE[19]), STR_76(CODE[18]), STR_75(CODE[19]), 
		 -> STR_74(CODE[18]), STR_73(CODE[17]), STR_71(CODE[18]), STR_70(CODE[19]), 
		 -> STR_69(CODE[18]), STR_68(CODE[19]), STR_67(CODE[18]), STR_66(CODE[20]), 
		 -> STR_64(CODE[19]), STR_46(CODE[15]), STR_44(CODE[15]), STR_39(CODE[19]), 
		 -> STR_37(CODE[19]), STR_35(CODE[19]), STR_31(CODE[24]), STR_30(CODE[24]), 
		 -> STR_14(CODE[27]), 

    debug_int1@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_97(CODE[13]), STR_95(CODE[23]), STR_93(CODE[19]), STR_92(CODE[19]), 
		 -> STR_91(CODE[19]), STR_90(CODE[20]), STR_89(CODE[16]), STR_88(CODE[15]), 
		 -> STR_85(CODE[19]), STR_84(CODE[19]), STR_83(CODE[19]), STR_82(CODE[20]), 
		 -> STR_81(CODE[16]), STR_80(CODE[15]), STR_72(CODE[22]), STR_65(CODE[15]), 
		 -> STR_58(CODE[14]), STR_57(CODE[10]), STR_56(CODE[11]), STR_55(CODE[9]), 
		 -> STR_54(CODE[12]), STR_53(CODE[9]), STR_52(CODE[7]), STR_50(CODE[21]), 
		 -> STR_49(CODE[16]), STR_48(CODE[15]), STR_47(CODE[10]), STR_28(CODE[25]), 
		 -> STR_13(CODE[10]), 

    debug_line@str	PTR const unsigned char  size(2) Largest target is 45
		 -> STR_96(CODE[13]), STR_94(CODE[13]), STR_87(CODE[7]), STR_79(CODE[5]), 
		 -> STR_63(CODE[17]), STR_59(CODE[45]), STR_51(CODE[21]), STR_45(CODE[10]), 
		 -> STR_43(CODE[10]), STR_42(CODE[20]), STR_41(CODE[19]), STR_40(CODE[6]), 
		 -> STR_38(CODE[11]), STR_36(CODE[11]), STR_34(CODE[11]), STR_33(CODE[35]), 
		 -> STR_32(CODE[8]), STR_29(CODE[35]), STR_27(CODE[2]), STR_26(CODE[21]), 
		 -> STR_25(CODE[1]), STR_22(CODE[29]), STR_21(CODE[2]), STR_20(CODE[21]), 
		 -> STR_19(CODE[1]), STR_16(CODE[21]), STR_15(CODE[2]), STR_12(CODE[20]), 
		 -> STR_11(CODE[2]), STR_10(CODE[21]), STR_9(CODE[1]), STR_6(CODE[29]), 
		 -> STR_5(CODE[2]), 

    debug_str@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_98(CODE[12]), STR_86(CODE[7]), STR_62(CODE[15]), STR_61(CODE[15]), 
		 -> STR_60(CODE[15]), STR_24(CODE[2]), STR_23(CODE[2]), STR_18(CODE[2]), 
		 -> STR_17(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), ROM(CODE[8192]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_98(CODE[12]), STR_96(CODE[13]), STR_94(CODE[13]), STR_87(CODE[7]), 
		 -> STR_86(CODE[7]), STR_79(CODE[5]), STR_63(CODE[17]), STR_62(CODE[15]), 
		 -> STR_61(CODE[15]), STR_60(CODE[15]), STR_59(CODE[45]), STR_51(CODE[21]), 
		 -> STR_45(CODE[10]), STR_43(CODE[10]), STR_42(CODE[20]), STR_41(CODE[19]), 
		 -> STR_40(CODE[6]), STR_38(CODE[11]), STR_36(CODE[11]), STR_34(CODE[11]), 
		 -> STR_33(CODE[35]), STR_32(CODE[8]), STR_29(CODE[35]), STR_27(CODE[2]), 
		 -> STR_26(CODE[21]), STR_25(CODE[1]), STR_24(CODE[2]), STR_23(CODE[2]), 
		 -> STR_22(CODE[29]), STR_21(CODE[2]), STR_20(CODE[21]), STR_19(CODE[1]), 
		 -> STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[21]), STR_15(CODE[2]), 
		 -> STR_12(CODE[20]), STR_11(CODE[2]), STR_10(CODE[21]), STR_9(CODE[1]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[29]), STR_5(CODE[2]), 
		 -> ROM(CODE[8192]), STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), 
		 -> g_debug(BANK3[32]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    _find_best_solution->_printf_debug_Screen
    _is_right_boundary->_debug_line
    _printf_debug_cur_MATRIX44->_printf_debug_MATRIX44
    _printf_debug_MATRIX44->_debug_line
    _printf_debug_MATRIX44->_debug_str
    _printf_debug_Screen->_printf_debug_MATRIX88
    _printf_debug_MATRIX88->_debug_line
    _printf_debug_MATRIX88->_debug_str
    _debug_str->_USARTWriteString
    _merge1->_memcpy
    _left_most->_is_left_boundary
    _is_left_boundary->_debug_line
    _debug_line->_USARTWriteString
    _delete_matrix->_delete_row
    _delete_row->_memcpy
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USARTWriteString->_USARTWriteChar
    _char_info_index_rand->___awmod
    _rand->___lmul
    _printf_Screen->_printf_MATRIX88
    _printf_MATRIX88->_MATRIX88_to_MATRIX7219
    _printf_MATRIX7219->_Write_Byte

Critical Paths under _main in BANK0

    _main->_find_best_solution
    _hit_land->_debug_int2
    _find_best_solution->_fall_off
    _find_best_solution->_is_valid
    _right_most->_debug_int1
    _printf_debug_cur_MATRIX44->_printf_debug_MATRIX44
    _printf_debug_Screen->_printf_debug_MATRIX88
    _left_most->_debug_int1
    _is_valid->_debug_int2
    _get_holes_after_merge->_debug_int1
    _get_high_after_merge->_debug_int1
    _get_high->_debug_int1
    _fall_off->_debug_int2
    _debug_int2->_sprintf
    _evaluate->_debug_int1
    _delete_matrix->_debug_int1
    _debug_int1->_sprintf
    _char_info_index_rand->___awmod
    ___awmod->_rand
    _printf_Screen->_printf_MATRIX88

Critical Paths under _main in BANK1

    _main->_find_best_solution

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    12      4  212445
                                             56 BANK0     16    12      4
                       _Clear_Matrix
                          _USARTInit
                             ___bmul
               _char_info_index_rand
                              _clear
                         _debug_int1
                         _debug_line
                      _delete_matrix
                 _find_best_solution
                           _hit_land
                              _merge
                      _printf_Screen
              _printf_debug_MATRIX88
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _merge                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _hit_land                                            11     7      4   13576
                                             38 BANK0     11     7      4
                         _debug_int2
                         _debug_line
 ---------------------------------------------------------------------------------
 (1) _find_best_solution                                  78    78      0  166056
                                             49 BANK0      7     7      0
                                              0 BANK1     71    71      0
                             ___bmul
                         _debug_int1
                         _debug_int2
                         _debug_line
                      _delete_matrix
                           _evaluate
                           _fall_off
                           _get_high
               _get_high_after_merge
              _get_holes_after_merge
                           _is_valid
                          _left_most
                             _merge1
              _printf_debug_MATRIX44
              _printf_debug_MATRIX88
                _printf_debug_Screen
          _printf_debug_cur_MATRIX44
                         _right_most
 ---------------------------------------------------------------------------------
 (2) _right_most                                           6     3      3   13164
                                             36 BANK0      6     3      3
                         _debug_int1
                  _is_right_boundary
 ---------------------------------------------------------------------------------
 (3) _is_right_boundary                                   10     7      3    3374
                                              6 COMMON     7     4      3
                                              0 BANK0      3     3      0
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _printf_debug_cur_MATRIX44                           16    12      4   11127
                                             12 BANK0     16    12      4
                             ___bmul
                         _debug_line
                          _debug_str
              _printf_debug_MATRIX44
 ---------------------------------------------------------------------------------
 (3) _printf_debug_MATRIX44                               18    12      6    5888
                                              6 COMMON     6     0      6
                                              0 BANK0     12    12      0
                         _debug_line
                          _debug_str
 ---------------------------------------------------------------------------------
 (2) _printf_debug_Screen                                  3     1      2    9822
                                             13 COMMON     1     1      0
                                              5 BANK0      2     0      2
                         _debug_line
                          _debug_str
              _printf_debug_MATRIX88
 ---------------------------------------------------------------------------------
 (1) _printf_debug_MATRIX88                               12     8      4    5188
                                              6 COMMON     7     3      4
                                              0 BANK0      5     5      0
                         _debug_line
                          _debug_str
 ---------------------------------------------------------------------------------
 (2) _debug_str                                            3     1      2    1523
                                              3 COMMON     3     1      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _merge1                                              14     9      5    1128
                                              0 BANK0     14     9      5
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _left_most                                            5     2      3   13164
                                             36 BANK0      5     2      3
                         _debug_int1
                   _is_left_boundary
 ---------------------------------------------------------------------------------
 (3) _is_left_boundary                                    11     8      3    3374
                                              6 COMMON     8     5      3
                                              0 BANK0      3     3      0
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _is_valid                                            11     7      4   13762
                                             38 BANK0     11     7      4
                         _debug_int2
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _get_holes_after_merge                               12    12      0   11127
                                             36 BANK0     12    12      0
                         _debug_int1
 ---------------------------------------------------------------------------------
 (2) _get_high_after_merge                                 9     7      2   12935
                                             36 BANK0      9     7      2
                         _debug_int1
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _get_high                                             4     4      0    9916
                                             36 BANK0      4     4      0
                         _debug_int1
                       _is_row_empty
 ---------------------------------------------------------------------------------
 (3) _is_row_empty                                         6     5      1     192
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (2) _fall_off                                            11     7      4   13641
                                             38 BANK0     11     7      4
                         _debug_int2
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _debug_line                                           3     1      2    2953
                                              3 COMMON     3     1      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _debug_int2                                           7     1      6    9858
                                             31 BANK0      7     1      6
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _evaluate                                            12    10      2   10089
                                             36 BANK0     12    10      2
                         _debug_int1
 ---------------------------------------------------------------------------------
 (2) _delete_matrix                                        6     4      2   11224
                                             36 BANK0      6     4      2
                         _debug_int1
                         _delete_row
                        _is_row_full
 ---------------------------------------------------------------------------------
 (3) _is_row_full                                          9     6      3     193
                                              0 COMMON     9     6      3
 ---------------------------------------------------------------------------------
 (3) _delete_row                                          10     7      3    1232
                                             11 COMMON     3     0      3
                                              0 BANK0      7     7      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6     388
                                              0 COMMON    11     5      6
 ---------------------------------------------------------------------------------
 (3) _debug_int1                                           5     1      4    9502
                                             31 BANK0      5     1      4
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             35    27      8    4893
                                              0 BANK0     31    23      8
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     684
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     480
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     379
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     0      2     746
                                              1 COMMON     2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _clear                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _char_info_index_rand                                 0     0      0     706
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     198
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     508
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      75
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Clear_Matrix                                         0     0      0    1047
                             _memset
                      _printf_Screen
 ---------------------------------------------------------------------------------
 (1) _printf_Screen                                        0     0      0     683
                    _printf_MATRIX88
 ---------------------------------------------------------------------------------
 (2) _printf_MATRIX88                                     10    10      0     683
                                              8 COMMON     1     1      0
                                              0 BANK0      9     9      0
             _MATRIX88_to_MATRIX7219
                  _printf_MATRIX7219
 ---------------------------------------------------------------------------------
 (3) _printf_MATRIX7219                                    4     4      0     236
                                              2 COMMON     4     4      0
                         _Write_Byte
 ---------------------------------------------------------------------------------
 (4) _Write_Byte                                           2     1      1      97
                                              0 COMMON     2     1      1
                         _SPI1_write
 ---------------------------------------------------------------------------------
 (5) _SPI1_write                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _MATRIX88_to_MATRIX7219                               8     7      1     351
                                              0 COMMON     8     7      1
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     364
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Clear_Matrix
     _memset
     _printf_Screen
       _printf_MATRIX88
         _MATRIX88_to_MATRIX7219
         _printf_MATRIX7219
           _Write_Byte
             _SPI1_write
   _USARTInit
   ___bmul
   _char_info_index_rand
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _clear
   _debug_int1
     _USARTWriteString
       _USARTWriteChar
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _debug_line
     _USARTWriteString
       _USARTWriteChar
   _delete_matrix
     _debug_int1
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _delete_row
       _memcpy
       _memset
     _is_row_full
   _find_best_solution
     ___bmul
     _debug_int1
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_int2
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _delete_matrix
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _delete_row
         _memcpy
         _memset
       _is_row_full
     _evaluate
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _fall_off
       _debug_int2
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _debug_line
         _USARTWriteString
           _USARTWriteChar
     _get_high
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_row_empty
     _get_high_after_merge
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _debug_line
         _USARTWriteString
           _USARTWriteChar
     _get_holes_after_merge
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _is_valid
       _debug_int2
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _debug_line
         _USARTWriteString
           _USARTWriteChar
     _left_most
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_left_boundary
         _debug_line
           _USARTWriteString
             _USARTWriteChar
     _merge1
       _memcpy
     _printf_debug_MATRIX44
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
     _printf_debug_MATRIX88
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
     _printf_debug_Screen
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
       _printf_debug_MATRIX88
         _debug_line
           _USARTWriteString
             _USARTWriteChar
         _debug_str
           _USARTWriteString
             _USARTWriteChar
     _printf_debug_cur_MATRIX44
       ___bmul
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
       _printf_debug_MATRIX44
         _debug_line
           _USARTWriteString
             _USARTWriteChar
         _debug_str
           _USARTWriteString
             _USARTWriteChar
     _right_most
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_right_boundary
         _debug_line
           _USARTWriteString
             _USARTWriteChar
   _hit_land
     _debug_int2
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_line
       _USARTWriteString
         _USARTWriteChar
   _merge
   _printf_Screen
     _printf_MATRIX88
       _MATRIX88_to_MATRIX7219
       _printf_MATRIX7219
         _Write_Byte
           _SPI1_write
   _printf_debug_MATRIX88
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _debug_str
       _USARTWriteString
         _USARTWriteChar
   _srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      47       9       74.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      60      11      100.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     47      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     48      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     155      12        0.0%
ABS                  0      0     155       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Aug 27 14:43:27 2016

                         __CFG_CP$ON 0000                                    pc 0002  
                     ___bmul@product 0072        get_holes_after_merge@num_hole 004A  
                                 l36 181E                                   l29 1B42  
                        __CFG_CPD$ON 0000                    merge1@matrix88_in 0023  
     __end_of_MATRIX88_to_MATRIX7219 1B9C                                   fsr 0004  
                ___wmul@multiplicand 0072                   USARTInit@baud_rate 0070  
              ?_char_info_index_rand 0070                          get_high@row 0047  
                        __CFG_LVP$ON 0000                                  l420 0F84  
                                l431 0F7B                                  l239 1044  
                                l256 0DE5                                  l530 1338  
                                l338 0DF4                                  l178 0049  
                                l531 133A                                  l533 1355  
                                l550 1432                                  l470 065A  
                                l543 13FC                                  l527 1334  
                                l625 16E1                                  l609 1672  
                                l529 1336                                  l554 1434  
                                l555 1435                                  l580 1530  
                                l396 1A5E                                  l389 1A2C  
                                l647 17D6                                  l736 1938  
                                l585 1558                                  l589 1580  
                                _GIE 005F                                  _RA1 0029  
                                _RA2 002A                   merge1@matrix88_out 0024  
                                fsr0 0004                                  indf 0000  
                       ___awmod@sign 002C                         __CFG_IESO$ON 0000  
                        _sprintf$720 002F                          _sprintf$713 002B  
                        _sprintf$714 002D                       is_row_full@col 0078  
                     is_row_full@row 0072                                 l3011 184E  
                               l3031 1852                                 l3111 133F  
                               l3017 1930                                 l3201 14C5  
                               l3035 1858                                 l3115 135B  
                               l3107 132F                                 l3061 1ABE  
                               l3053 1A9A                                 l3205 14CA  
                               l4111 1C76                                 l4103 1C63  
                               l3055 1AA8                                 l3303 1660  
                               l3223 1524                                 l3207 14F6  
                               l3135 13CC                                 l3119 136F  
                               l3127 13AE                                 l4121 1B19  
                               l3065 1AC9                                 l3401 17B4  
                               l3305 1664                                 l3161 144C  
                               l3153 142E                                 l4123 1B1B  
                               l4107 1C6E                                 l3083 1A19  
                               l3219 1518                                 l3171 1460  
                               l3155 1437                                 l3147 13FB  
                               l5003 1D7E                                 l4117 1B15  
                               l3077 19FD                                 l3405 17BF  
                               l3317 167B                                 l3333 16A5  
                               l3341 16BB                                 l3261 15A8  
                               l3165 145B                                 l5013 1DBB  
                               l5021 1DCC                                 l4119 1B17  
                               l4127 1B20                                 l3079 1A0B  
                               l3087 1A24                                 l3351 16D5  
                               l3327 1697                                 l3271 15D0  
                               l3263 15B7                                 l3191 14A4  
                               l3175 146B                                 l3183 148A  
                               l3167 145D                                 l3415 1307  
                               l5103 1208                                 l5031 1DD7  
                               l3409 17E3                                 l3361 16EE  
                               l3345 16C0                                 l3193 14B1  
                               l3177 1478                                 l3417 17FB  
                               l5017 1DC6                                 l3451 1B6E  
                               l3291 161C                                 l3283 1605  
                               l3267 15C4                                 l3187 1499  
                               l5123 128C                                 l5211 1E89  
                               l5051 1E27                                 l3461 1B97  
                               l4085 1C3A                                 l3285 1609  
                               l3277 15E4                                 l3197 14BC  
                               l5141 12F0                                 l5109 120E  
                               l5037 1DDD                                 l3471 18DB  
                               l3455 1B8D                                 l3703 1AD6  
                               l4263 1CC5                                 l4255 1C86  
                               l3391 177B                                 l3383 1723  
                               l3367 16FD                                 l5119 1265  
                               l5215 1E91                                 l5207 1E53  
                               l5047 1E1C                                 l5055 1E2D  
                               l4097 1C47                                 l4089 1C41  
                               l3385 1750                                 l3377 1719  
                               l3297 163D                                 l3481 19A5  
                               l5233 1F96                                 l3625 0021  
                               l5401 0FE2                                 l5129 12AC  
                               l5137 12E5                                 l5145 12F6  
                               l5065 1EB4                                 l4099 1C55  
                               l3707 1AEC                                 l4259 1CBD  
                               l3395 178E                                 l3299 1641  
                               l5243 1FCA                                 l5227 1F8C  
                               l5163 0E00                                 l3619 000A  
                               l5323 1134                                 l5315 10C9  
                               l4283 1D0D                                 l5085 1BCB  
                               l5237 1FAC                                 l5253 1FED  
                               l5173 0E5A                                 l5181 0E93  
                               l5157 0DFA                                 l3629 0029  
                               l5405 0FED                                 l5087 1BA3  
                               l5327 113D                                 l4287 1D15  
                               l4279 1CD5                                 l3585 19ED  
                               l5089 1BD2                                 l5249 1FE5  
                               l5185 0E9E                                 l5505 0487  
                               l5425 115D                                 l3579 19CC  
                               l5347 0EC2                                 l5339 0EB7  
                               l5267 1A54                                 l5435 11AA  
                               l5443 11D8                                 l5451 11E9  
                               l5419 1157                                 l3589 19F5  
                               l5189 0EA4                                 l5293 1C24  
                               l5285 1BEE                                 l5357 0EE7  
                               l5277 1A8B                                 l5605 05D0  
                               l5367 0F0D                                 l4903 005B  
                               l5631 02DE                                 l5447 11E3  
                               l5297 1C2C                                 l5385 0F5E  
                               l5377 0F53                                 l4921 0118  
                               l5633 06EF                                 l5625 06DF  
                               l5627 036D                                 l4909 0061  
                               l4933 0142                                 l5629 06E8  
                               l5813 01F3                                 l4927 012D  
                               l5655 07AE                                 l5567 053A  
                               l5921 1B33                                 l4873 194F  
                               l4953 1058                                 l5657 07B6  
                               l5585 0585                                 l5809 016E  
                               l5923 1B38                                 l4963 1091  
                               l4947 1053                                 l5827 0265  
                               l5925 1B3D                                 l4957 107D  
                               l5919 1B2E                                 l4985 1F59  
                               l4969 10A5                                 l4987 1F77  
                               l5795 0178                                 l4997 1D78  
                               l5797 017D                                 STR_1 0DBA  
                       __CFG_WDTE$ON 0000                                 STR_2 0DBA  
                               STR_3 0DBA                                 STR_5 0DBF  
                               STR_6 0A23                                 STR_7 0DBD  
                               STR_8 0DC1                                 STR_9 0DBC  
                        main@hit_res 0067                                 u4215 1B71  
                               u3425 1A9D                                 u4145 17E1  
                               u3515 1A11                                 u3445 1AA9  
                               u3525 1A1A                                 u3365 1939  
                               u3455 1AB5                                 u3375 1940  
                               u3465 1ABF                                 u4505 19CF  
                               _PEIE 005E                                 u3805 1579  
                               u3495 1A00                                 u3655 1445  
                               u4615 000D                                 u6055 1CFF  
                               u5265 1D61                                 u3905 15F5  
                               u3665 1452                                 u7105 1E10  
                               u3835 15A1                                 _RCIE 0465  
                               u4805 1AF6                                 u8005 0FA7  
                               u3775 1551                                 u3945 1632  
                               u7225 1236                                 u3955 1650  
                               u7505 1F9C                                 u8065 1192  
                               u5755 1C4A                                 u4795 1AEE  
                               u7515 1FAF                                 u7355 0E28  
                               u7275 128A                                 u8155 04D8  
                               u8075 11B4                                 u7445 1E7B  
                               u6805 00D7                                 u8245 0606  
                               u8165 04E7                                 u5775 1C5B  
                               u7295 12C3                                 u6815 00FF  
                               u5785 1C64                                 u7545 1FCD  
                               u7385 0E6F                                 u8517 0253  
                               u7815 0F07                                 u7735 0EC8  
                               u8527 029D                                 u6945 1F1D  
                               u6785 009A                                 u5995 1CB0  
                               u7755 0EE1                                 u6965 1F2D  
                               u7845 0F10                                 u6975 1F3D  
                               u6895 105D                                 u6985 1F5E  
                               u7945 0F61                                 u7865 0F29  
                               u7795 0EEE                                 u7885 0F3E  
                       __CFG_WRT$OFF 0000               __end_of_USARTWriteChar 1825  
                      __CFG_FCMEN$ON 0000                                 _main 014B  
                               _rand 1D1A                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 ltemp 007E  
                               start 0000                                 ttemp 007E  
                               wtemp 007E                    ___bmul@multiplier 0073  
                      __CFG_MCLRE$ON 0000      find_best_solution@tem_sub_index 00E5  
                    is_row_empty@col 0075                      is_row_empty@row 0070  
         get_high_after_merge@matrix 0044                                ?_main 0058  
                              ?_rand 0020                                STR_10 0B03  
                              STR_11 0DBF                                STR_12 0B56  
                              STR_21 0DBF                                STR_13 0D83  
                              STR_30 0A91                                STR_14 0A5D  
                              STR_22 0A40                                STR_23 0DBD  
                              STR_31 0AA9                                STR_24 0DC1  
                              STR_40 0DAF                                STR_32 0DA0  
                              STR_16 0AEE                                STR_25 0DBC  
                              STR_41 0BDE                                STR_33 09DD  
                              STR_26 0B03                                STR_34 0D43  
                              STR_42 0B6A                                STR_50 0B18  
                              STR_27 0DBF                                STR_35 0A96  
                              STR_43 0D6F                                STR_51 0B2D  
                              STR_52 0CEA                                STR_36 0D4E  
                              STR_60 0D00                                STR_44 0CE2  
                              STR_28 0A78                      __end_of___awmod 1C7B  
                              STR_37 0A96                                STR_61 0D00  
                              STR_53 0D97                                STR_45 0D79  
                              STR_29 0A00                                STR_54 0B21  
                              STR_46 0CE2                                STR_38 0D59  
                              STR_62 0CF1                                STR_70 0BA5  
                              STR_47 0C20                                STR_55 0AA0  
                              STR_39 0A96                                STR_63 0C93  
                              STR_71 0C2A                                STR_80 0A69  
                              STR_56 0D64                                STR_48 0CD3  
                              STR_64 0BCB                                STR_72 0AD8  
                              STR_57 0D8D                                STR_65 0CC4  
                              STR_81 0CB4                                STR_49 0CA4  
                              STR_73 0C82                                STR_74 0C3C  
                              STR_90 0B7E                                STR_58 0D0F  
                              STR_82 0B7E                                STR_66 0B42  
                              STR_75 0BA5                                STR_91 0C17  
                              STR_67 0C4E                                STR_83 0C17  
                              STR_59 09B0                                STR_76 0C2A  
                              STR_92 0C04                                STR_84 0C04  
                              STR_68 0BB8                                STR_93 0BF1  
                              STR_69 0C3C                                STR_85 0BF1  
                              STR_77 0B92                                STR_78 0C4E  
                              STR_86 0DA8                                STR_94 0D1D  
                              STR_87 0DA8                                STR_79 0DB5  
                              STR_95 0AC1                                STR_96 0D1D  
                              STR_88 0A69                                STR_89 0CB4  
                              STR_97 0D2A                                STR_98 0D37  
                              STR_99 0C60                     USARTWriteChar@ch 0070  
                    __end_of___lwdiv 1ACE                      __end_of___lwmod 1A29  
                              _RCREG 001A                                _SPBRG 0099  
                   _is_left_boundary 1D6F                                _TXREG 0019  
                              _UQEnd 006E                  ___lmul@multiplicand 0074  
                        ?_SPI1_write 0070                     debug_int1@enable 0043  
                              _clear 1C7B                     debug_int2@enable 0045  
                    __end_of_dpowers 0828                                _cur_x 00ED  
                              _cur_y 0068                                _merge 1CCA  
                    __end_of_isdigit 1850                                _randx 01D2  
                              _srand 182D                         ?_is_row_full 0070  
                    ??_printf_Screen 0079                                pclath 000A  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
           printf_debug_MATRIX44@col 002B             printf_debug_MATRIX44@row 002A  
                 __size_of_USARTInit 0047                      ?_USARTWriteChar 0070  
           printf_debug_MATRIX88@col 007C                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
           printf_debug_MATRIX88@row 007B                                status 0003  
                        hit_land@col 004F                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                    __end_of_sprintf 1800      find_best_solution@temp_matrix88 00A3  
                        hit_land@row 0050                _printf_debug_MATRIX44 002B  
              _printf_debug_MATRIX88 1028                       get_high@matrix 0046  
                    __initialization 07BA                         __end_of_main 02AB  
                       __end_of_rand 1D6F               ??_char_info_index_rand 007E  
                             ??_main 005C                               ??_rand 0022  
         ?_printf_debug_cur_MATRIX44 002C                          evaluate@col 004E  
                        evaluate@row 004F             find_best_solution@temp_x 00E6  
                             ?_clear 0070                               ?_merge 0070  
                             STR_100 0C71                               ?_srand 0070  
              __size_of_Clear_Matrix 0014                __end_of_delete_matrix 1BE5  
                             _URBuff 0110                     __end_of_fall_off 0EA9  
                     __CFG_PWRTE$OFF 0000                     debug_line@enable 0075  
              get_high_after_merge@y 004A                     __end_of_get_high 1C2E  
                             ___bmul 1850                  __size_of_SPI1_write 0001  
                             ___lmul 1ACE                               ___wmul 192E  
                          ??___awmod 007D                     __end_of_hit_land 11F3  
                          ??___lwdiv 0074                     __end_of_evaluate 2000  
                          ??___lwmod 007C                               _merge1 1E2F  
           __end_of_USARTWriteString 1974                               _memcpy 199D  
                             _memset 18D7                     __end_of_is_valid 1300  
                             clear@x 0078                               clear@y 0070  
                    ___awmod@divisor 0027                               _temp_y 006A  
           __size_of_printf_MATRIX88 0012                      ___awmod@counter 002B  
                  __end_of_USARTInit 1B54                        ?_is_row_empty 0070  
        __size_of_find_best_solution 050F                               merge@x 0078  
                             merge@y 0070                            ??_isdigit 0070  
                        is_valid@col 0050                          is_valid@row 004F  
         printf_debug_MATRIX44@lable 0076                         _Clear_Matrix 1896  
                             srand@x 0070                    _is_right_boundary 1DCE  
                          ??_sprintf 0028              ??_get_holes_after_merge 0044  
         printf_debug_MATRIX88@lable 0076                   ?_is_right_boundary 0076  
                     evaluate@matrix 004D              __end_of__initialization 07FC  
                     merge1@matrix44 0021               ?_printf_debug_MATRIX44 0076  
             ?_printf_debug_MATRIX88 0076                       _g_cur_matrix44 0195  
          printf_debug_Screen@enable 007D                  ??_is_right_boundary 0079  
                ___bmul@multiplicand 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 0DC4                         __pidataBANK1 1000  
                       __pidataBANK3 190E                        __end_of_clear 1CCA  
                         _Write_Byte 1872                        __end_of_merge 1D1A  
                      __end_of_srand 1836                   __size_of_debug_str 000C  
                     ??_is_row_empty 0071            __end_of_is_right_boundary 1E2F  
      __size_of_get_high_after_merge 0094           get_holes_after_merge@start 004D  
                            ??_clear 0074                              ??_merge 0074  
                       sprintf@width 0039                              ??_srand 0072  
                       evaluate@full 004C                           __pbssBANK0 0068  
                         __pbssBANK1 00E7                           __pbssBANK2 0110  
                         __pbssBANK3 0190                         evaluate@risk 004A  
       __size_of_printf_debug_Screen 002A                   __size_of_left_most 0032  
                  is_row_full@matrix 0070                 __size_of_is_row_full 0030  
                         _debug_int1 1003                           _debug_int2 1974  
                         _debug_line 18AA                  delete_matrix@matrix 0044  
                   is_valid@matrix44 0047                     is_valid@matrix88 0049  
           __end_of_is_left_boundary 1DCE                           _g_matrix44 0830  
                         _delete_row 1F09                           _g_matrix88 0130  
                         __pmaintext 014B             printf_debug_Screen@lable 0025  
                            ?___bmul 0070                              ?___lmul 0070  
                            ?___wmul 0070                              ?_merge1 0020  
                            ?_memcpy 0070                              ?_memset 0070  
                     ___lmul@product 0079            get_holes_after_merge@stop 004B  
                       ??_SPI1_write 0070                            ?_fall_off 0046  
                  ??_printf_MATRIX88 0078            printf_MATRIX88@matrix7219 0021  
                   ??_USARTWriteChar 0070                 is_right_boundary@col 0022  
               is_right_boundary@row 0021                            ?_get_high 0070  
                 USARTWriteInt@F1617 0190                           __stringtab 0800  
                          ?_hit_land 0046                    __end_of_debug_str 1842  
                            _UQFront 006F                            ?_evaluate 0044  
                          ?_is_valid 0046                        debug_line@str 0073  
find_best_solution@temp_cur_matrix44 00E3                      __size_of___bmul 0011  
                    __size_of___lmul 003F                          ?_Write_Byte 0070  
                            ___awmod 1C2E                   __end_of_SPI1_write 0004  
                    __size_of___wmul 0021                              ___lwdiv 1A92  
                            ___lwmod 19F7                          right_most@x 0049  
                            _g_debug 0197                      __size_of_merge1 0067  
                    __size_of_memcpy 002A                            _ANSELbits 0188  
                    __size_of_memset 001B                    __end_of_left_most 1A5B  
                            __ptext1 182D                              __ptext2 1CCA  
                            __ptext3 1142                              __ptext4 02AB  
                            __ptext5 1A5B                              __ptext6 1DCE  
                            __ptext7 1E96                              __ptext8 002B  
                            __ptext9 0DC7          ??_printf_debug_cur_MATRIX44 0030  
                  __end_of_hexpowers 0830                     fall_off@matrix44 0047  
                   fall_off@matrix88 0049                              _dpowers 081E  
                            _isdigit 1842                     ___awmod@dividend 0029  
         __size_of_is_right_boundary 0061                           ??_fall_off 004A  
                            _sprintf 1300                           ??_get_high 0044  
                            clrloop0 1826                 end_of_initialization 07FC  
                  __end_of_octpowers 081E                    _printf_MATRIX7219 18F2  
                         ??_hit_land 004A                              merge1@x 0029  
                            merge1@y 0020                           ??_evaluate 0046  
                            memcpy@d 0077                              memcpy@n 0074  
                            memcpy@s 0079                __end_of_printf_Screen 181D  
                            memset@c 0072                 __end_of_is_row_empty 002B  
                            memset@n 0074                              memset@p 0076  
                        ?_debug_int1 003F                          ?_debug_int2 003F  
                         ??_is_valid 004A                          ?_debug_line 0073  
                 ?_printf_MATRIX7219 0070                       SPI1_write@data 0070  
        printf_debug_MATRIX44@enable 0029                           _right_most 1A5B  
           ??_MATRIX88_to_MATRIX7219 0071          printf_debug_MATRIX44@matrix 007A  
                        ?_delete_row 007B                        clear@matrix44 0071  
                      clear@matrix88 0073                            _RCSTAbits 0018  
                  Write_Byte@myValue 0070                  ??_printf_MATRIX7219 0072  
                         _temp_count 00E9                           _temp_pre_x 006D  
                       __pstringtext 0800                    ?_USARTWriteString 0071  
      __size_of_char_info_index_rand 0018          printf_debug_MATRIX88@enable 007A  
        printf_debug_MATRIX88@matrix 0078                   ??_USARTWriteString 0073  
          is_right_boundary@matrix44 0076            is_right_boundary@matrix88 0078  
                          _USARTInit 1B0D                            _TRISAbits 0085  
          __end_of_printf_MATRIX7219 190E                    _tem_pre_sub_index 01D6  
            ??_printf_debug_MATRIX44 0020              ??_printf_debug_MATRIX88 0020  
                __size_of_Write_Byte 0012                   right_most@matrix44 0044  
                 right_most@matrix88 0046       __size_of_get_holes_after_merge 0157  
      __end_of_get_holes_after_merge 1000                find_best_solution@res 00A2  
          _printf_debug_cur_MATRIX44 1E96                            _TXSTAbits 0098  
                     __end_of___bmul 1861           __end_of_find_best_solution 07BA  
                     __end_of___lmul 1B0D                       __end_of___wmul 194F  
                _printf_debug_Screen 0DC7                       __end_of_merge1 1E96  
                     __end_of_memcpy 19C7                       __end_of_memset 18F2  
   MATRIX88_to_MATRIX7219@matrix7219 0070                  __size_of_debug_int1 0025  
                __size_of_debug_int2 0029               __size_of_delete_matrix 0049  
                __size_of_debug_line 0015                  start_initialization 07BA  
                         ?_USARTInit 0070                  __size_of_delete_row 0075  
                         left_most@x 0048                 ?_printf_debug_Screen 0025  
    printf_debug_cur_MATRIX44@enable 0039                        delete_row@len 0024  
    printf_debug_cur_MATRIX44@matrix 003A                        delete_row@row 007D  
           __CFG_FOSC$INTRC_NOCLKOUT 0000                   is_right_boundary@x 0020  
       __end_of_get_high_after_merge 1142                          ?_right_most 0044  
                     _temp_pre_count 00EC                    ?_is_left_boundary 0076  
    __size_of_MATRIX88_to_MATRIX7219 0048          get_holes_after_merge@matrix 004C  
                           ??___bmul 0071                             ??___lmul 0078  
                 ??_is_left_boundary 0079                             ??___wmul 0074  
                         init_fetch0 1861                   is_row_empty@matrix 0074  
                        __pdataBANK0 006B                          __pdataBANK1 00ED  
                        __pdataBANK3 01B7                    _g_char_info_index 0069  
                    _printf_MATRIX88 1884                             ??_merge1 0025  
                           ??_memcpy 0076                             ??_memset 0076  
                        _g_char_info 01B7    find_best_solution@left_most_index 00A0  
                          ___latbits 0002                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0           __size_of_printf_MATRIX7219 001C  
              __size_of_is_row_empty 0027                        ??_is_row_full 0073  
                  __size_of_fall_off 00B8                ??_printf_debug_Screen 007D  
                  __size_of_get_high 0049                          sprintf@flag 003D  
                        sprintf@prec 0038                    __size_of_hit_land 00B1  
                      _delete_matrix 1B9C                            __pnvBANK0 006E  
                  __size_of_evaluate 0082                            _debug_str 1836  
                 delete_matrix@count 0048                    __size_of_is_valid 010D  
                   ___lwdiv@dividend 0072              printf_MATRIX7219@matrix 0074  
                   delete_matrix@row 0049                         ??_Write_Byte 0071  
                           ?___awmod 0027                             ?___lwdiv 0070  
                           ?___lwmod 0078                         _is_row_empty 0004  
                       debug_int2@i1 0041                         debug_int2@i2 0043  
                    debug_str@enable 0075                             ?_isdigit 0070  
                  is_left_boundary@x 0020                          ??_USARTInit 0072  
             _MATRIX88_to_MATRIX7219 1B54                            _left_most 1A29  
                __size_of_right_most 0037                            _hexpowers 0828  
                   ___lwdiv@quotient 0075                       __size_of_clear 004F  
                           ?_sprintf 0020                 printf_MATRIX7219@col 0075  
                     __size_of_merge 0050                       __size_of_srand 0009  
                       debug_str@str 0073                   __end_of_Write_Byte 1884  
                       ??_debug_int1 007E                         ??_debug_int2 007E  
                       ??_debug_line 0075                       ?_delete_matrix 0044  
                     ___wmul@product 0074                            fall_off@x 004E  
                          fall_off@y 0046                     delete_row@matrix 007B  
                          clear_ram0 1825                            _octpowers 0812  
                __end_of_is_row_full 19F7                           ?_debug_str 0073  
            __end_of_printf_MATRIX88 1896                         ??_delete_row 0020  
                           _PIR1bits 000C                            _temp_high 00EA  
                          _temp_hole 00EB                            _temp_risk 00E7  
 __size_of_printf_debug_cur_MATRIX44 0073                    left_most@matrix44 0044  
                  left_most@matrix88 0046                          __stringbase 0812  
                  ___wmul@multiplier 0070                   __end_of_debug_int1 1028  
                 __end_of_debug_int2 199D                   __end_of_debug_line 18BF  
                      ?_Clear_Matrix 0070                 _get_high_after_merge 10AE  
                         ?_left_most 0044                   __end_of_g_matrix44 09B0  
                 __end_of_delete_row 1F7E                    ___lmul@multiplier 0070  
                is_left_boundary@col 0022                  is_left_boundary@row 0021  
             printf_debug_MATRIX44@x 0078               printf_debug_MATRIX44@y 0079  
                      merge@matrix44 0071                        merge@matrix88 0073  
          __size_of_USARTWriteString 0025                            hit_land@x 004E  
                          hit_land@y 0046       __size_of_printf_debug_MATRIX44 0120  
     __size_of_printf_debug_MATRIX88 0086         __end_of_char_info_index_rand 18D7  
      __end_of_printf_debug_MATRIX44 014B        __end_of_printf_debug_MATRIX88 10AE  
            get_high_after_merge@col 004B                            merge1@col 002D  
                          merge1@len 002A              get_high_after_merge@row 004C  
                          merge1@row 002C              __size_of_USARTWriteChar 0008  
                      _temp_pre_high 00EE                        _temp_pre_hole 00EF  
                      _temp_pre_risk 006B                            is_valid@x 004E  
                          is_valid@y 0046                     __size_of___awmod 004D  
                   __size_of___lwdiv 003C                     __size_of___lwmod 0032  
  __end_of_printf_debug_cur_MATRIX44 1F09                   __end_of__stringtab 0812  
                        _isdigit$906 0070               __size_of_printf_Screen 0005  
                         sprintf@idx 0031                           sprintf@len 0033  
                         sprintf@val 0036                       ??_Clear_Matrix 0079  
              ?_get_high_after_merge 0044             is_left_boundary@matrix44 0076  
           is_left_boundary@matrix88 0078                     __size_of_isdigit 000E  
                           _fall_off 0DF1                      ___lwdiv@divisor 0070  
                    ___lwdiv@counter 0077                   _find_best_solution 02AB  
                           __ptext10 1028                             __ptext11 1836  
                           __ptext20 0DF1                             __ptext12 1E2F  
                           __ptext21 18AA                             __ptext13 1A29  
                           __ptext30 1842                             __ptext22 1974  
                           __ptext14 1D6F                             __ptext31 192E  
                           __ptext23 1F7E                             __ptext15 11F3  
                           __ptext40 1ACE                             __ptext32 19F7  
                           __ptext24 1B9C                             __ptext16 0EA9  
                           __ptext41 1C2E                             __ptext33 1A92  
                           __ptext25 19C7                             __ptext17 10AE  
                           __ptext50 18D7                             __ptext42 1B0D  
                           __ptext34 1850                             __ptext26 1F09  
                           __ptext18 1BE5                             __ptext43 1896  
                           __ptext35 194F                             __ptext27 199D  
                           __ptext19 0004                             __ptext44 1818  
                           __ptext36 181D                             __ptext28 1003  
                           __ptext45 1884                             __ptext37 1C7B  
                           __ptext29 1300                             __ptext46 18F2  
                           __ptext38 18BF                             __ptext47 1872  
                           __ptext39 1D1A                             __ptext48 0003  
                           __ptext49 1B54                    __CFG_BOR4V$BOR21V 0000  
                           _get_high 1BE5                          _is_row_full 19C7  
     MATRIX88_to_MATRIX7219@matrix88 0074                     __size_of_sprintf 0500  
                    ??_delete_matrix 0046                          debug_int1@f 003F  
                        debug_int1@i 0041                          debug_int2@f 003F  
                           _hit_land 1142                             _evaluate 1F7E  
                ?_find_best_solution 0070                        __size_of_main 0160  
                           _is_valid 11F3                        __size_of_rand 0055  
                   hit_land@matrix44 0047                     hit_land@matrix88 0049  
                           clear@col 007A                             clear@row 0079  
                       ??_right_most 0047                _get_holes_after_merge 0EA9  
                        ??_debug_str 0075                     ?_printf_MATRIX88 0070  
                           main@Seed 0065                             main@argc 0058  
                           main@argv 005A             get_holes_after_merge@col 004E  
           get_holes_after_merge@row 004F                 ??_find_best_solution 0051  
                        fall_off@col 004F                          fall_off@row 0050  
          __size_of_is_left_boundary 005F                          delete_row@i 0026  
                        ??_left_most 0047                             memcpy@d1 0070  
                           memcpy@s1 0072                             merge@col 007A  
                           merge@row 0079                   __end_of_right_most 1A92  
                           init_ram0 1865                             isdigit@c 0071  
                           memset@p1 0070                            sprintf@ap 0035  
                          sprintf@cp 0032                            sprintf@sp 003C  
                   ___lwmod@dividend 007A                        _printf_Screen 1818  
                          stringcode 080A                   Write_Byte@myColumn 0071  
                USARTWriteString@str 0071              printf_MATRIX88@matrix88 0020  
               _char_info_index_rand 18BF              ?_MATRIX88_to_MATRIX7219 0070  
             ??_get_high_after_merge 0046                             sprintf@c 003B  
                           sprintf@f 0020   find_best_solution@right_most_index 00A1  
                    ___lwmod@divisor 0078                      ___lwmod@counter 007D  
        __end_of_printf_debug_Screen 0DF1                             stringtab 0800  
                         _SPI1_write 0003                     _USARTWriteString 194F  
                     ?_printf_Screen 0070               ?_get_holes_after_merge 0070  
                     _USARTWriteChar 181D           printf_debug_cur_MATRIX44@x 002E  
         printf_debug_cur_MATRIX44@y 002F           MATRIX88_to_MATRIX7219@mask 0075  
          MATRIX88_to_MATRIX7219@col 0077                 __end_of_Clear_Matrix 18AA  
          MATRIX88_to_MATRIX7219@row 0076       printf_debug_cur_MATRIX44@lable 002C  
