

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Aug 28 20:52:01 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,delta=2
    70                           	psect	text54,local,class=CODE,merge=1,delta=2
    71                           	dabs	1,0x7E,2
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000D                     	;# 
    85  000E                     	;# 
    86  000E                     	;# 
    87  000F                     	;# 
    88  0010                     	;# 
    89  0011                     	;# 
    90  0012                     	;# 
    91  0013                     	;# 
    92  0014                     	;# 
    93  0015                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0017                     	;# 
    97  0018                     	;# 
    98  0019                     	;# 
    99  001A                     	;# 
   100  001B                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  001D                     	;# 
   104  001E                     	;# 
   105  001F                     	;# 
   106  0081                     	;# 
   107  0085                     	;# 
   108  0086                     	;# 
   109  0087                     	;# 
   110  0089                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  008F                     	;# 
   115  0090                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0094                     	;# 
   122  0095                     	;# 
   123  0096                     	;# 
   124  0097                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009A                     	;# 
   128  009B                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  0105                     	;# 
   134  0107                     	;# 
   135  0108                     	;# 
   136  0109                     	;# 
   137  010C                     	;# 
   138  010C                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  010F                     	;# 
   142  0185                     	;# 
   143  0187                     	;# 
   144  0188                     	;# 
   145  0189                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  0007                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0014                     	;# 
   169  0015                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001D                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  0081                     	;# 
   183  0085                     	;# 
   184  0086                     	;# 
   185  0087                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  0105                     	;# 
   210  0107                     	;# 
   211  0108                     	;# 
   212  0109                     	;# 
   213  010C                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  0185                     	;# 
   219  0187                     	;# 
   220  0188                     	;# 
   221  0189                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224                           
   225                           	psect	idataBANK1
   226  10E2                     __pidataBANK1:	
   227                           
   228                           ;initializer for _randx
   229  10E2  3401               	retlw	1
   230  10E3  3400               	retlw	0
   231  10E4  3400               	retlw	0
   232  10E5  3400               	retlw	0
   233                           
   234                           ;initializer for _cur_x
   235  10E6  3402               	retlw	2
   236                           
   237                           ;initializer for _g_matrix16x8
   238  10E7  3400               	retlw	0
   239  10E8  3400               	retlw	0
   240  10E9  3400               	retlw	0
   241  10EA  3440               	retlw	64
   242  10EB  3454               	retlw	84
   243  10EC  3456               	retlw	86
   244  10ED  3456               	retlw	86
   245  10EE  347E               	retlw	126
   246  10EF  347E               	retlw	126
   247  10F0  347E               	retlw	126
   248  10F1  347E               	retlw	126
   249  10F2  347E               	retlw	126
   250  10F3  347E               	retlw	126
   251  10F4  347E               	retlw	126
   252  10F5  347E               	retlw	126
   253  10F6  347E               	retlw	126
   254                           
   255                           	psect	stringtext
   256  0800                     __pstringtext:	
   257  0800                     stringtab:	
   258  0800                     __stringtab:	
   259                           
   260                           ;	String table - string pointers are 2 bytes each
   261  0800  1BFF               	btfsc	btemp+1,7
   262  0801  280A               	ljmp	stringcode
   263  0802  1383               	bcf	3,7
   264  0803  187F               	btfsc	btemp+1,0
   265  0804  1783               	bsf	3,7
   266  0805  0800               	movf	0,w
   267  0806  0A84               	incf	4,f
   268  0807  1903               	skipnz
   269  0808  0AFF               	incf	btemp+1,f
   270  0809  0008               	return
   271  080A                     stringcode:	
   272  080A  087F               	movf	btemp+1,w
   273  080B  397F               	andlw	127
   274  080C  008A               	movwf	10
   275  080D  0804               	movf	4,w
   276  080E  0A84               	incf	4,f
   277  080F  1903               	skipnz
   278  0810  0AFF               	incf	btemp+1,f
   279  0811  0082               	movwf	2
   280  0812                     __stringbase:	
   281  0812                     __end_of__stringtab:	
   282  0812                     _g_char_info:	
   283  0812  3400               	retlw	0
   284  0813  3402               	retlw	2
   285  0814  3402               	retlw	2
   286  0815  3402               	retlw	2
   287  0816  3404               	retlw	4
   288  0817  3402               	retlw	2
   289  0818  3406               	retlw	6
   290  0819  3404               	retlw	4
   291  081A  340A               	retlw	10
   292  081B  3404               	retlw	4
   293  081C  340E               	retlw	14
   294  081D  3401               	retlw	1
   295  081E  340F               	retlw	15
   296  081F  3404               	retlw	4
   297  0820  3413               	retlw	19
   298  0821  3401               	retlw	1
   299  0822  3414               	retlw	20
   300  0823  3404               	retlw	4
   301  0824                     __end_of_g_char_info:	
   302  0824                     _octpowers:	
   303  0824  3401               	retlw	1
   304  0825  3400               	retlw	0
   305  0826  3408               	retlw	8
   306  0827  3400               	retlw	0
   307  0828  3440               	retlw	64
   308  0829  3400               	retlw	0
   309  082A  3400               	retlw	0
   310  082B  3402               	retlw	2
   311  082C  3400               	retlw	0
   312  082D  3410               	retlw	16
   313  082E  3400               	retlw	0
   314  082F  3480               	retlw	128
   315  0830                     __end_of_octpowers:	
   316  0830                     _dpowers:	
   317  0830  3401               	retlw	1
   318  0831  3400               	retlw	0
   319  0832  340A               	retlw	10
   320  0833  3400               	retlw	0
   321  0834  3464               	retlw	100
   322  0835  3400               	retlw	0
   323  0836  34E8               	retlw	232
   324  0837  3403               	retlw	3
   325  0838  3410               	retlw	16
   326  0839  3427               	retlw	39
   327  083A                     __end_of_dpowers:	
   328  083A                     _hexpowers:	
   329  083A  3401               	retlw	1
   330  083B  3400               	retlw	0
   331  083C  3410               	retlw	16
   332  083D  3400               	retlw	0
   333  083E  3400               	retlw	0
   334  083F  3401               	retlw	1
   335  0840  3400               	retlw	0
   336  0841  3410               	retlw	16
   337  0842                     __end_of_hexpowers:	
   338  0842                     _g_matrix4x4:	
   339  0842  3402               	retlw	2
   340  0843  3402               	retlw	2
   341  0844  3402               	retlw	2
   342  0845  3402               	retlw	2
   343  0846  3400               	retlw	0
   344  0847  340F               	retlw	15
   345  0848  3400               	retlw	0
   346  0849  3400               	retlw	0
   347  084A  3406               	retlw	6
   348  084B  3403               	retlw	3
   349  084C  3400               	retlw	0
   350  084D  3400               	retlw	0
   351  084E  3402               	retlw	2
   352  084F  3406               	retlw	6
   353  0850  3404               	retlw	4
   354  0851  3400               	retlw	0
   355  0852  3403               	retlw	3
   356  0853  3406               	retlw	6
   357  0854  3400               	retlw	0
   358  0855  3400               	retlw	0
   359  0856  3402               	retlw	2
   360  0857  3403               	retlw	3
   361  0858  3401               	retlw	1
   362  0859  3400               	retlw	0
   363  085A  3400               	retlw	0
   364  085B  3407               	retlw	7
   365  085C  3404               	retlw	4
   366  085D  3400               	retlw	0
   367  085E  3406               	retlw	6
   368  085F  3402               	retlw	2
   369  0860  3402               	retlw	2
   370  0861  3400               	retlw	0
   371  0862  3401               	retlw	1
   372  0863  3407               	retlw	7
   373  0864  3400               	retlw	0
   374  0865  3400               	retlw	0
   375  0866  3402               	retlw	2
   376  0867  3402               	retlw	2
   377  0868  3403               	retlw	3
   378  0869  3400               	retlw	0
   379  086A  3400               	retlw	0
   380  086B  3407               	retlw	7
   381  086C  3401               	retlw	1
   382  086D  3400               	retlw	0
   383  086E  3403               	retlw	3
   384  086F  3402               	retlw	2
   385  0870  3402               	retlw	2
   386  0871  3400               	retlw	0
   387  0872  3404               	retlw	4
   388  0873  3407               	retlw	7
   389  0874  3400               	retlw	0
   390  0875  3400               	retlw	0
   391  0876  3402               	retlw	2
   392  0877  3402               	retlw	2
   393  0878  3406               	retlw	6
   394  0879  3400               	retlw	0
   395  087A  3403               	retlw	3
   396  087B  3403               	retlw	3
   397  087C  3400               	retlw	0
   398  087D  3400               	retlw	0
   399  087E  3400               	retlw	0
   400  087F  3406               	retlw	6
   401  0880  3402               	retlw	2
   402  0881  3400               	retlw	0
   403  0882  3400               	retlw	0
   404  0883  3403               	retlw	3
   405  0884  3402               	retlw	2
   406  0885  3400               	retlw	0
   407  0886  3402               	retlw	2
   408  0887  3403               	retlw	3
   409  0888  3400               	retlw	0
   410  0889  3400               	retlw	0
   411  088A  3402               	retlw	2
   412  088B  3406               	retlw	6
   413  088C  3400               	retlw	0
   414  088D  3400               	retlw	0
   415  088E  3402               	retlw	2
   416  088F  3407               	retlw	7
   417  0890  3402               	retlw	2
   418  0891  3400               	retlw	0
   419  0892  3407               	retlw	7
   420  0893  3402               	retlw	2
   421  0894  3402               	retlw	2
   422  0895  3400               	retlw	0
   423  0896  3404               	retlw	4
   424  0897  3407               	retlw	7
   425  0898  3404               	retlw	4
   426  0899  3400               	retlw	0
   427  089A  3402               	retlw	2
   428  089B  3402               	retlw	2
   429  089C  3407               	retlw	7
   430  089D  3400               	retlw	0
   431  089E  3401               	retlw	1
   432  089F  3407               	retlw	7
   433  08A0  3401               	retlw	1
   434  08A1  3400               	retlw	0
   435  08A2                     __end_of_g_matrix4x4:	
   436  08A2                     STR_16:	
   437  08A2  343C               	retlw	60	;'<'
   438  08A3  343C               	retlw	60	;'<'
   439  08A4  343C               	retlw	60	;'<'
   440  08A5  343C               	retlw	60	;'<'
   441  08A6  343C               	retlw	60	;'<'
   442  08A7  343C               	retlw	60	;'<'
   443  08A8  343C               	retlw	60	;'<'
   444  08A9  343C               	retlw	60	;'<'
   445  08AA  343C               	retlw	60	;'<'
   446  08AB  343C               	retlw	60	;'<'
   447  08AC  343C               	retlw	60	;'<'
   448  08AD  343C               	retlw	60	;'<'
   449  08AE  343C               	retlw	60	;'<'
   450  08AF  343C               	retlw	60	;'<'
   451  08B0  343C               	retlw	60	;'<'
   452  08B1  343C               	retlw	60	;'<'
   453  08B2  343C               	retlw	60	;'<'
   454  08B3  343C               	retlw	60	;'<'
   455  08B4  343C               	retlw	60	;'<'
   456  08B5  343C               	retlw	60	;'<'
   457  08B6  344D               	retlw	77	;'M'
   458  08B7  3441               	retlw	65	;'A'
   459  08B8  3454               	retlw	84	;'T'
   460  08B9  3452               	retlw	82	;'R'
   461  08BA  3449               	retlw	73	;'I'
   462  08BB  3458               	retlw	88	;'X'
   463  08BC  3431               	retlw	49	;'1'
   464  08BD  3436               	retlw	54	;'6'
   465  08BE  3478               	retlw	120	;'x'
   466  08BF  3438               	retlw	56	;'8'
   467  08C0  3400               	retlw	0
   468  08C1                     STR_6:	
   469  08C1  343C               	retlw	60	;'<'
   470  08C2  343C               	retlw	60	;'<'
   471  08C3  343C               	retlw	60	;'<'
   472  08C4  343C               	retlw	60	;'<'
   473  08C5  343C               	retlw	60	;'<'
   474  08C6  343C               	retlw	60	;'<'
   475  08C7  343C               	retlw	60	;'<'
   476  08C8  343C               	retlw	60	;'<'
   477  08C9  343C               	retlw	60	;'<'
   478  08CA  343C               	retlw	60	;'<'
   479  08CB  343C               	retlw	60	;'<'
   480  08CC  343C               	retlw	60	;'<'
   481  08CD  343C               	retlw	60	;'<'
   482  08CE  343C               	retlw	60	;'<'
   483  08CF  343C               	retlw	60	;'<'
   484  08D0  343C               	retlw	60	;'<'
   485  08D1  343C               	retlw	60	;'<'
   486  08D2  343C               	retlw	60	;'<'
   487  08D3  343C               	retlw	60	;'<'
   488  08D4  343C               	retlw	60	;'<'
   489  08D5  344D               	retlw	77	;'M'
   490  08D6  3441               	retlw	65	;'A'
   491  08D7  3454               	retlw	84	;'T'
   492  08D8  3452               	retlw	82	;'R'
   493  08D9  3449               	retlw	73	;'I'
   494  08DA  3458               	retlw	88	;'X'
   495  08DB  3434               	retlw	52	;'4'
   496  08DC  3478               	retlw	120	;'x'
   497  08DD  3434               	retlw	52	;'4'
   498  08DE  3400               	retlw	0
   499  08DF                     STR_14:	
   500  08DF  3469               	retlw	105	;'i'
   501  08E0  346E               	retlw	110	;'n'
   502  08E1  3464               	retlw	100	;'d'
   503  08E2  3465               	retlw	101	;'e'
   504  08E3  3478               	retlw	120	;'x'
   505  08E4  3420               	retlw	32	;' '
   506  08E5  343D               	retlw	61	;'='
   507  08E6  3420               	retlw	32	;' '
   508  08E7  3425               	retlw	37	;'%'
   509  08E8  3464               	retlw	100	;'d'
   510  08E9  342C               	retlw	44	;','
   511  08EA  3420               	retlw	32	;' '
   512  08EB  3473               	retlw	115	;'s'
   513  08EC  3475               	retlw	117	;'u'
   514  08ED  3462               	retlw	98	;'b'
   515  08EE  345F               	retlw	95	;'_'
   516  08EF  3469               	retlw	105	;'i'
   517  08F0  346E               	retlw	110	;'n'
   518  08F1  3464               	retlw	100	;'d'
   519  08F2  3465               	retlw	101	;'e'
   520  08F3  3478               	retlw	120	;'x'
   521  08F4  3420               	retlw	32	;' '
   522  08F5  343D               	retlw	61	;'='
   523  08F6  3420               	retlw	32	;' '
   524  08F7  3425               	retlw	37	;'%'
   525  08F8  3464               	retlw	100	;'d'
   526  08F9  3400               	retlw	0
   527  08FA                     STR_12:	
   528  08FA  3470               	retlw	112	;'p'
   529  08FB  3472               	retlw	114	;'r'
   530  08FC  3469               	retlw	105	;'i'
   531  08FD  346E               	retlw	110	;'n'
   532  08FE  3474               	retlw	116	;'t'
   533  08FF  3466               	retlw	102	;'f'
   534  0900  345F               	retlw	95	;'_'
   535  0901  3461               	retlw	97	;'a'
   536  0902  346C               	retlw	108	;'l'
   537  0903  346C               	retlw	108	;'l'
   538  0904  345F               	retlw	95	;'_'
   539  0905  344D               	retlw	77	;'M'
   540  0906  3441               	retlw	65	;'A'
   541  0907  3454               	retlw	84	;'T'
   542  0908  3452               	retlw	82	;'R'
   543  0909  3449               	retlw	73	;'I'
   544  090A  3458               	retlw	88	;'X'
   545  090B  3434               	retlw	52	;'4'
   546  090C  3478               	retlw	120	;'x'
   547  090D  3434               	retlw	52	;'4'
   548  090E  3400               	retlw	0
   549  090F                     STR_10:	
   550  090F  343E               	retlw	62	;'>'
   551  0910  343E               	retlw	62	;'>'
   552  0911  343E               	retlw	62	;'>'
   553  0912  343E               	retlw	62	;'>'
   554  0913  343E               	retlw	62	;'>'
   555  0914  343E               	retlw	62	;'>'
   556  0915  343E               	retlw	62	;'>'
   557  0916  343E               	retlw	62	;'>'
   558  0917  343E               	retlw	62	;'>'
   559  0918  343E               	retlw	62	;'>'
   560  0919  343E               	retlw	62	;'>'
   561  091A  343E               	retlw	62	;'>'
   562  091B  343E               	retlw	62	;'>'
   563  091C  343E               	retlw	62	;'>'
   564  091D  343E               	retlw	62	;'>'
   565  091E  343E               	retlw	62	;'>'
   566  091F  343E               	retlw	62	;'>'
   567  0920  343E               	retlw	62	;'>'
   568  0921  343E               	retlw	62	;'>'
   569  0922  343E               	retlw	62	;'>'
   570  0923  3400               	retlw	0
   571  0924                     STR_22:	
   572  0924  346E               	retlw	110	;'n'
   573  0925  3475               	retlw	117	;'u'
   574  0926  346D               	retlw	109	;'m'
   575  0927  3420               	retlw	32	;' '
   576  0928  3466               	retlw	102	;'f'
   577  0929  3475               	retlw	117	;'u'
   578  092A  346C               	retlw	108	;'l'
   579  092B  346C               	retlw	108	;'l'
   580  092C  3420               	retlw	32	;' '
   581  092D  3472               	retlw	114	;'r'
   582  092E  346F               	retlw	111	;'o'
   583  092F  3477               	retlw	119	;'w'
   584  0930  3473               	retlw	115	;'s'
   585  0931  3420               	retlw	32	;' '
   586  0932  343D               	retlw	61	;'='
   587  0933  3420               	retlw	32	;' '
   588  0934  3425               	retlw	37	;'%'
   589  0935  3464               	retlw	100	;'d'
   590  0936  3400               	retlw	0
   591  0937                     STR_26:	
   592  0937  3430               	retlw	48	;'0'
   593  0938  3431               	retlw	49	;'1'
   594  0939  3432               	retlw	50	;'2'
   595  093A  3433               	retlw	51	;'3'
   596  093B  3434               	retlw	52	;'4'
   597  093C  3435               	retlw	53	;'5'
   598  093D  3436               	retlw	54	;'6'
   599  093E  3437               	retlw	55	;'7'
   600  093F  3438               	retlw	56	;'8'
   601  0940  3439               	retlw	57	;'9'
   602  0941  3441               	retlw	65	;'A'
   603  0942  3442               	retlw	66	;'B'
   604  0943  3443               	retlw	67	;'C'
   605  0944  3444               	retlw	68	;'D'
   606  0945  3445               	retlw	69	;'E'
   607  0946  3446               	retlw	70	;'F'
   608  0947  3400               	retlw	0
   609  0948                     STR_27:	
   610  0948  3430               	retlw	48	;'0'
   611  0949  3431               	retlw	49	;'1'
   612  094A  3432               	retlw	50	;'2'
   613  094B  3433               	retlw	51	;'3'
   614  094C  3434               	retlw	52	;'4'
   615  094D  3435               	retlw	53	;'5'
   616  094E  3436               	retlw	54	;'6'
   617  094F  3437               	retlw	55	;'7'
   618  0950  3438               	retlw	56	;'8'
   619  0951  3439               	retlw	57	;'9'
   620  0952  3461               	retlw	97	;'a'
   621  0953  3462               	retlw	98	;'b'
   622  0954  3463               	retlw	99	;'c'
   623  0955  3464               	retlw	100	;'d'
   624  0956  3465               	retlw	101	;'e'
   625  0957  3466               	retlw	102	;'f'
   626  0958  3400               	retlw	0
   627  0959                     STR_24:	
   628  0959  344D               	retlw	77	;'M'
   629  095A  3441               	retlw	65	;'A'
   630  095B  3454               	retlw	84	;'T'
   631  095C  3452               	retlw	82	;'R'
   632  095D  3449               	retlw	73	;'I'
   633  095E  3458               	retlw	88	;'X'
   634  095F  3434               	retlw	52	;'4'
   635  0960  3478               	retlw	120	;'x'
   636  0961  3434               	retlw	52	;'4'
   637  0962  3420               	retlw	32	;' '
   638  0963  3463               	retlw	99	;'c'
   639  0964  3468               	retlw	104	;'h'
   640  0965  346F               	retlw	111	;'o'
   641  0966  3473               	retlw	115	;'s'
   642  0967  3465               	retlw	101	;'e'
   643  0968  346E               	retlw	110	;'n'
   644  0969  3400               	retlw	0
   645  096A                     STR_23:	
   646  096A  3474               	retlw	116	;'t'
   647  096B  3465               	retlw	101	;'e'
   648  096C  346D               	retlw	109	;'m'
   649  096D  3470               	retlw	112	;'p'
   650  096E  345F               	retlw	95	;'_'
   651  096F  3472               	retlw	114	;'r'
   652  0970  3469               	retlw	105	;'i'
   653  0971  3473               	retlw	115	;'s'
   654  0972  346B               	retlw	107	;'k'
   655  0973  3420               	retlw	32	;' '
   656  0974  343D               	retlw	61	;'='
   657  0975  3420               	retlw	32	;' '
   658  0976  3425               	retlw	37	;'%'
   659  0977  3464               	retlw	100	;'d'
   660  0978  3400               	retlw	0
   661  0979                     STR_25:	
   662  0979  344D               	retlw	77	;'M'
   663  097A  3461               	retlw	97	;'a'
   664  097B  3469               	retlw	105	;'i'
   665  097C  346E               	retlw	110	;'n'
   666  097D  3420               	retlw	32	;' '
   667  097E  3473               	retlw	115	;'s'
   668  097F  3463               	retlw	99	;'c'
   669  0980  3472               	retlw	114	;'r'
   670  0981  3465               	retlw	101	;'e'
   671  0982  3465               	retlw	101	;'e'
   672  0983  346E               	retlw	110	;'n'
   673  0984  3400               	retlw	0
   674  0985                     STR_13:	
   675  0985  3473               	retlw	115	;'s'
   676  0986  3469               	retlw	105	;'i'
   677  0987  347A               	retlw	122	;'z'
   678  0988  3465               	retlw	101	;'e'
   679  0989  3420               	retlw	32	;' '
   680  098A  343D               	retlw	61	;'='
   681  098B  3420               	retlw	32	;' '
   682  098C  3425               	retlw	37	;'%'
   683  098D  3464               	retlw	100	;'d'
   684  098E  3400               	retlw	0
   685  098F                     STR_1:	
   686  098F  340D               	retlw	13
   687  0990  340A               	retlw	10
   688  0991  3400               	retlw	0
   689  0992                     STR_7:	
   690  0992  342A               	retlw	42	;'*'
   691  0993  3400               	retlw	0
   692  0994                     STR_5:	
   693  0994  343A               	retlw	58	;':'
   694  0995  3400               	retlw	0
   695  0996                     STR_8:	
   696  0996  345F               	retlw	95	;'_'
   697  0997  3400               	retlw	0
   698  0991                     
   699                           ; #config settings
   700  0000                     
   701                           	psect	nvBANK0
   702  006E                     __pnvBANK0:	
   703  006E                     _UQEnd:	
   704  006E                     	ds	1
   705  006F                     _UQFront:	
   706  006F                     	ds	1
   707  000C                     _PIR1bits	set	12
   708  001A                     _RCREG	set	26
   709  0018                     _RCSTAbits	set	24
   710  0019                     _TXREG	set	25
   711  005F                     _GIE	set	95
   712  005E                     _PEIE	set	94
   713  0029                     _RA1	set	41
   714  002A                     _RA2	set	42
   715  002B                     _RA3	set	43
   716  0099                     _SPBRG	set	153
   717  0085                     _TRISAbits	set	133
   718  0098                     _TXSTAbits	set	152
   719  0465                     _RCIE	set	1125
   720  0188                     _ANSELbits	set	392
   721                           
   722                           	psect	cinit
   723  07DE                     start_initialization:	
   724  07DE                     __initialization:	
   725                           
   726                           ; Clear objects allocated to BANK1
   727  07DE  1383               	bcf	3,7	;select IRP bank0
   728  07DF  30A0               	movlw	low __pbssBANK1
   729  07E0  0084               	movwf	4
   730  07E1  30BC               	movlw	low (__pbssBANK1+28)
   731  07E2  120A  118A  2003  120A  118A  	fcall	clear_ram0
   732                           
   733                           ; Clear objects allocated to BANK3
   734  07E7  1783               	bsf	3,7	;select IRP bank2
   735  07E8  3090               	movlw	low __pbssBANK3
   736  07E9  0084               	movwf	4
   737  07EA  30D0               	movlw	low (__pbssBANK3+64)
   738  07EB  120A  118A  2003  120A  118A  	fcall	clear_ram0
   739                           
   740                           ; Initialize objects allocated to BANK1
   741  07F0  1383               	bcf	3,7	;select IRP bank0
   742  07F1  30D1               	movlw	low (__pdataBANK1+21)
   743  07F2  00FD               	movwf	btemp+-1
   744  07F3  3010               	movlw	high __pidataBANK1
   745  07F4  00FE               	movwf	btemp
   746  07F5  30E2               	movlw	low __pidataBANK1
   747  07F6  00FF               	movwf	btemp+1
   748  07F7  30BC               	movlw	low __pdataBANK1
   749  07F8  0084               	movwf	4
   750  07F9  160A  118A  20C3   	fcall	init_ram0
   751  07FC                     end_of_initialization:	
   752                           ;End of C runtime variable initialization code
   753                           
   754  07FC                     __end_of__initialization:	
   755  07FC  0183               	clrf	3
   756  07FD  120A  158A  2EAB   	ljmp	_main	;jump to C main() function
   757                           
   758                           	psect	bssBANK1
   759  00A0                     __pbssBANK1:	
   760  00A0                     USARTWriteInt@F1617:	
   761  00A0                     	ds	5
   762  00A5                     _g_cur_matrix4x4:	
   763  00A5                     	ds	2
   764  00A7                     _temp_cur_matrix4x4:	
   765  00A7                     	ds	2
   766  00A9                     _cur_y:	
   767  00A9                     	ds	1
   768  00AA                     _g_char_info_index:	
   769  00AA                     	ds	1
   770  00AB                     _g_char_info_sub_index:	
   771  00AB                     	ds	1
   772  00AC                     _temp_matrix16x8:	
   773  00AC                     	ds	16
   774                           
   775                           	psect	dataBANK1
   776  00BC                     __pdataBANK1:	
   777  00BC                     _randx:	
   778  00BC                     	ds	4
   779  00C0                     _cur_x:	
   780  00C0                     	ds	1
   781  00C1                     _g_matrix16x8:	
   782  00C1                     	ds	16
   783                           
   784                           	psect	bssBANK3
   785  0190                     __pbssBANK3:	
   786  0190                     _URBuff:	
   787  0190                     	ds	32
   788  01B0                     _g_debug:	
   789  01B0                     	ds	32
   790                           
   791                           	psect	clrtext
   792  0003                     clear_ram0:	
   793                           ;	Called with FSR containing the base address, and
   794                           ;	W with the last address+1
   795                           
   796  0003  0064               	clrwdt	;clear the watchdog before getting into this loop
   797  0004                     clrloop0:	
   798  0004  0180               	clrf	0	;clear RAM location pointed to by FSR
   799  0005  0A84               	incf	4,f	;increment pointer
   800  0006  0604               	xorwf	4,w	;XOR with final address
   801  0007  1903               	btfsc	3,2	;have we reached the end yet?
   802  0008  3400               	retlw	0	;all done for this memory range, return
   803  0009  0604               	xorwf	4,w	;XOR again to restore value
   804  000A  2804               	goto	clrloop0	;do the next byte
   805                           
   806                           	psect	inittext
   807  10BF                     init_fetch0:	
   808                           ;	Called with low address in FSR and high address in W
   809                           
   810  10BF  087E               	movf	126,w
   811  10C0  008A               	movwf	10
   812  10C1  087F               	movf	127,w
   813  10C2  0082               	movwf	2
   814  10C3                     init_ram0:	
   815                           ;Called with:
   816                           ;	high address of idata address in btemp 
   817                           ;	low address of idata address in btemp+1 
   818                           ;	low address of data in FSR
   819                           ;	high address + 1 of data in btemp-1
   820                           
   821  10C3  20BF  160A  118A   	fcall	init_fetch0
   822  10C6  0080               	movwf	0
   823  10C7  0A84               	incf	4,f
   824  10C8  0804               	movf	4,w
   825  10C9  067D               	xorwf	125,w
   826  10CA  1903               	btfsc	3,2
   827  10CB  3400               	retlw	0
   828  10CC  0AFF               	incf	127,f
   829  10CD  1903               	btfsc	3,2
   830  10CE  0AFE               	incf	126,f
   831  10CF  28C3               	goto	init_ram0
   832                           
   833                           	psect	cstackBANK1
   834  00D1                     __pcstackBANK1:	
   835  00D1                     find_best_solution@temp_pre_risk:	
   836                           
   837                           ; 2 bytes @ 0x0
   838  00D1                     	ds	2
   839  00D3                     find_best_solution@left_most_index:	
   840                           
   841                           ; 1 bytes @ 0x2
   842  00D3                     	ds	1
   843  00D4                     find_best_solution@right_most_index:	
   844                           
   845                           ; 1 bytes @ 0x3
   846  00D4                     	ds	1
   847  00D5                     find_best_solution@temp_pre_x:	
   848                           
   849                           ; 1 bytes @ 0x4
   850  00D5                     	ds	1
   851  00D6                     find_best_solution@tem_pre_sub_index:	
   852                           
   853                           ; 1 bytes @ 0x5
   854  00D6                     	ds	1
   855  00D7                     find_best_solution@res:	
   856                           
   857                           ; 1 bytes @ 0x6
   858  00D7                     	ds	1
   859  00D8                     find_best_solution@temp_high:	
   860                           
   861                           ; 2 bytes @ 0x7
   862  00D8                     	ds	2
   863  00DA                     find_best_solution@temp_risk:	
   864                           
   865                           ; 2 bytes @ 0x9
   866  00DA                     	ds	2
   867  00DC                     find_best_solution@temp_y:	
   868                           
   869                           ; 1 bytes @ 0xB
   870  00DC                     	ds	1
   871  00DD                     find_best_solution@tem_sub_index:	
   872                           
   873                           ; 1 bytes @ 0xC
   874  00DD                     	ds	1
   875  00DE                     find_best_solution@temp_x:	
   876                           
   877                           ; 1 bytes @ 0xD
   878  00DE                     	ds	1
   879  00DF                     ??_main:	
   880                           
   881                           ; 1 bytes @ 0xE
   882  00DF                     	ds	4
   883  00E3                     main@Seed:	
   884                           
   885                           ; 2 bytes @ 0x12
   886  00E3                     	ds	2
   887  00E5                     main@hit_res:	
   888                           
   889                           ; 1 bytes @ 0x14
   890  00E5                     	ds	1
   891                           
   892                           	psect	cstackCOMMON
   893  0070                     __pcstackCOMMON:	
   894  0070                     ?_isdigit:	
   895  0070                     ?_memset:	
   896                           ; 1 bit 
   897                           
   898  0070                     ?_memcpy:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  0070                     ?_srand:	
   902                           ; 1 bytes @ 0x0
   903                           
   904  0070                     ??_isdigit:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ?_USARTInit:	
   908                           ; 1 bytes @ 0x0
   909                           
   910  0070                     ?_USARTWriteChar:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  0070                     ??_USARTWriteChar:	
   914                           ; 1 bytes @ 0x0
   915                           
   916  0070                     ?_setbit:	
   917                           ; 1 bytes @ 0x0
   918                           
   919  0070                     ?_getbit:	
   920                           ; 1 bytes @ 0x0
   921                           
   922  0070                     ?_SPI1_write:	
   923                           ; 1 bytes @ 0x0
   924                           
   925  0070                     ??_SPI1_write:	
   926                           ; 1 bytes @ 0x0
   927                           
   928  0070                     ?_max7219_init1:	
   929                           ; 1 bytes @ 0x0
   930                           
   931  0070                     ?_printf_MATRIX7219:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  0070                     ?_printf_MATRIX16x8:	
   935                           ; 1 bytes @ 0x0
   936                           
   937  0070                     ?_printf_Screen:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0070                     ?_Clear_Matrix:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0070                     ?_is_row_full:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0070                     ?_delete_row:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0070                     ?_delete_matrix:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0070                     ?_get_num_removed_rows:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0070                     ?_is_row_empty:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0070                     ?_char_info_index_rand:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0070                     ?_get_high:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0070                     ?_get_holes_after_merge:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_find_best_solution:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ?___bmul:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?___lwdiv:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ?___lmul:	
   977                           ; 2 bytes @ 0x0
   978                           
   979  0070                     USARTWriteChar@ch:	
   980                           ; 4 bytes @ 0x0
   981                           
   982  0070                     setbit@at:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0070                     is_row_full@row:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0070                     delete_row@row:	
   989                           ; 1 bytes @ 0x0
   990                           
   991  0070                     is_row_empty@row:	
   992                           ; 1 bytes @ 0x0
   993                           
   994  0070                     ___bmul@multiplicand:	
   995                           ; 1 bytes @ 0x0
   996                           
   997  0070                     _isdigit$868:	
   998                           ; 1 bytes @ 0x0
   999                           
  1000  0070                     memcpy@s1:	
  1001                           ; 1 bytes @ 0x0
  1002                           
  1003  0070                     USARTInit@baud_rate:	
  1004                           ; 1 bytes @ 0x0
  1005                           
  1006  0070                     getbit@byte:	
  1007                           ; 2 bytes @ 0x0
  1008                           
  1009  0070                     ___lwdiv@divisor:	
  1010                           ; 2 bytes @ 0x0
  1011                           
  1012  0070                     memset@c:	
  1013                           ; 2 bytes @ 0x0
  1014                           
  1015  0070                     srand@x:	
  1016                           ; 2 bytes @ 0x0
  1017                           
  1018  0070                     ___lmul@multiplier:	
  1019                           ; 2 bytes @ 0x0
  1020                           
  1021                           
  1022                           ; 4 bytes @ 0x0
  1023  0070                     	ds	1
  1024  0071                     ?_USARTWriteString:	
  1025  0071                     ??_is_row_full:	
  1026                           ; 1 bytes @ 0x1
  1027                           
  1028  0071                     ??_delete_row:	
  1029                           ; 1 bytes @ 0x1
  1030                           
  1031  0071                     ??_is_row_empty:	
  1032                           ; 1 bytes @ 0x1
  1033                           
  1034  0071                     ??___bmul:	
  1035                           ; 1 bytes @ 0x1
  1036                           
  1037  0071                     setbit@value:	
  1038                           ; 1 bytes @ 0x1
  1039                           
  1040  0071                     SPI1_write@data:	
  1041                           ; 1 bytes @ 0x1
  1042                           
  1043  0071                     is_row_empty@matrix:	
  1044                           ; 1 bytes @ 0x1
  1045                           
  1046  0071                     isdigit@c:	
  1047                           ; 1 bytes @ 0x1
  1048                           
  1049  0071                     USARTWriteString@str:	
  1050                           ; 1 bytes @ 0x1
  1051                           
  1052  0071                     memcpy@n:	
  1053                           ; 2 bytes @ 0x1
  1054                           
  1055                           
  1056                           ; 2 bytes @ 0x1
  1057  0071                     	ds	1
  1058  0072                     ??_srand:	
  1059  0072                     ??_USARTInit:	
  1060                           ; 1 bytes @ 0x2
  1061                           
  1062  0072                     ??_setbit:	
  1063                           ; 1 bytes @ 0x2
  1064                           
  1065  0072                     ??_get_high:	
  1066                           ; 1 bytes @ 0x2
  1067                           
  1068  0072                     getbit@at:	
  1069                           ; 1 bytes @ 0x2
  1070                           
  1071  0072                     SPI1_write@mask:	
  1072                           ; 1 bytes @ 0x2
  1073                           
  1074  0072                     is_row_full@matrix:	
  1075                           ; 1 bytes @ 0x2
  1076                           
  1077  0072                     ___bmul@product:	
  1078                           ; 1 bytes @ 0x2
  1079                           
  1080  0072                     ___lwdiv@dividend:	
  1081                           ; 1 bytes @ 0x2
  1082                           
  1083  0072                     memset@n:	
  1084                           ; 2 bytes @ 0x2
  1085                           
  1086                           
  1087                           ; 2 bytes @ 0x2
  1088  0072                     	ds	1
  1089  0073                     ??_memcpy:	
  1090  0073                     ??_USARTWriteString:	
  1091                           ; 1 bytes @ 0x3
  1092                           
  1093  0073                     ?_debug_str:	
  1094                           ; 1 bytes @ 0x3
  1095                           
  1096  0073                     ?_debug_line:	
  1097                           ; 1 bytes @ 0x3
  1098                           
  1099  0073                     ??_getbit:	
  1100                           ; 1 bytes @ 0x3
  1101                           
  1102  0073                     setbit@byte:	
  1103                           ; 1 bytes @ 0x3
  1104                           
  1105  0073                     SPI1_write@i:	
  1106                           ; 1 bytes @ 0x3
  1107                           
  1108  0073                     get_high@matrix:	
  1109                           ; 1 bytes @ 0x3
  1110                           
  1111  0073                     ___bmul@multiplier:	
  1112                           ; 1 bytes @ 0x3
  1113                           
  1114  0073                     debug_str@str:	
  1115                           ; 1 bytes @ 0x3
  1116                           
  1117  0073                     debug_line@str:	
  1118                           ; 2 bytes @ 0x3
  1119                           
  1120                           
  1121                           ; 2 bytes @ 0x3
  1122  0073                     	ds	1
  1123  0074                     ??_memset:	
  1124  0074                     ?_Write_Word:	
  1125                           ; 1 bytes @ 0x4
  1126                           
  1127  0074                     ??___lwdiv:	
  1128                           ; 1 bytes @ 0x4
  1129                           
  1130  0074                     setbit@temp:	
  1131                           ; 1 bytes @ 0x4
  1132                           
  1133  0074                     Write_Word@myValue1:	
  1134                           ; 1 bytes @ 0x4
  1135                           
  1136  0074                     delete_row@matrix:	
  1137                           ; 1 bytes @ 0x4
  1138                           
  1139  0074                     get_high@row:	
  1140                           ; 1 bytes @ 0x4
  1141                           
  1142  0074                     memcpy@d1:	
  1143                           ; 1 bytes @ 0x4
  1144                           
  1145  0074                     ___lmul@multiplicand:	
  1146                           ; 1 bytes @ 0x4
  1147                           
  1148                           
  1149                           ; 4 bytes @ 0x4
  1150  0074                     	ds	1
  1151  0075                     ??_debug_str:	
  1152  0075                     ??_debug_line:	
  1153                           ; 1 bytes @ 0x5
  1154                           
  1155  0075                     ?_set_matrix_bit:	
  1156                           ; 1 bytes @ 0x5
  1157                           
  1158  0075                     set_matrix_bit@row:	
  1159                           ; 1 bytes @ 0x5
  1160                           
  1161  0075                     Write_Word@myColumn2:	
  1162                           ; 1 bytes @ 0x5
  1163                           
  1164  0075                     delete_row@i:	
  1165                           ; 1 bytes @ 0x5
  1166                           
  1167  0075                     memcpy@d:	
  1168                           ; 1 bytes @ 0x5
  1169                           
  1170  0075                     memset@p1:	
  1171                           ; 1 bytes @ 0x5
  1172                           
  1173  0075                     getbit@temp:	
  1174                           ; 1 bytes @ 0x5
  1175                           
  1176  0075                     ___lwdiv@quotient:	
  1177                           ; 2 bytes @ 0x5
  1178                           
  1179                           
  1180                           ; 2 bytes @ 0x5
  1181  0075                     	ds	1
  1182  0076                     ??_delete_matrix:	
  1183  0076                     set_matrix_bit@col:	
  1184                           ; 1 bytes @ 0x6
  1185                           
  1186  0076                     Write_Word@myValue2:	
  1187                           ; 1 bytes @ 0x6
  1188                           
  1189  0076                     memcpy@s:	
  1190                           ; 1 bytes @ 0x6
  1191                           
  1192  0076                     memset@p:	
  1193                           ; 1 bytes @ 0x6
  1194                           
  1195                           
  1196                           ; 1 bytes @ 0x6
  1197  0076                     	ds	1
  1198  0077                     ?_get_matrix_bit:	
  1199  0077                     ??_Write_Word:	
  1200                           ; 1 bytes @ 0x7
  1201                           
  1202  0077                     set_matrix_bit@value:	
  1203                           ; 1 bytes @ 0x7
  1204                           
  1205  0077                     Write_Word@myColumn1:	
  1206                           ; 1 bytes @ 0x7
  1207                           
  1208  0077                     delete_matrix@count:	
  1209                           ; 1 bytes @ 0x7
  1210                           
  1211  0077                     ___lwdiv@counter:	
  1212                           ; 1 bytes @ 0x7
  1213                           
  1214  0077                     get_matrix_bit@byte:	
  1215                           ; 1 bytes @ 0x7
  1216                           
  1217                           
  1218                           ; 2 bytes @ 0x7
  1219  0077                     	ds	1
  1220  0078                     ??_set_matrix_bit:	
  1221  0078                     ??_max7219_init1:	
  1222                           ; 1 bytes @ 0x8
  1223                           
  1224  0078                     ??_printf_MATRIX7219:	
  1225                           ; 1 bytes @ 0x8
  1226                           
  1227  0078                     ??___lmul:	
  1228                           ; 1 bytes @ 0x8
  1229                           
  1230  0078                     ?___lwmod:	
  1231                           ; 1 bytes @ 0x8
  1232                           
  1233  0078                     delete_matrix@matrix:	
  1234                           ; 2 bytes @ 0x8
  1235                           
  1236  0078                     ___lwmod@divisor:	
  1237                           ; 1 bytes @ 0x8
  1238                           
  1239                           
  1240                           ; 2 bytes @ 0x8
  1241  0078                     	ds	1
  1242  0079                     get_matrix_bit@row:	
  1243  0079                     delete_matrix@row:	
  1244                           ; 1 bytes @ 0x9
  1245                           
  1246  0079                     ___lmul@product:	
  1247                           ; 1 bytes @ 0x9
  1248                           
  1249                           
  1250                           ; 4 bytes @ 0x9
  1251  0079                     	ds	1
  1252  007A                     set_matrix_bit@byte:	
  1253  007A                     get_matrix_bit@col:	
  1254                           ; 1 bytes @ 0xA
  1255                           
  1256  007A                     ___lwmod@dividend:	
  1257                           ; 1 bytes @ 0xA
  1258                           
  1259                           
  1260                           ; 2 bytes @ 0xA
  1261  007A                     	ds	1
  1262  007B                     ??_get_matrix_bit:	
  1263                           
  1264                           ; 1 bytes @ 0xB
  1265  007B                     	ds	1
  1266  007C                     ?_MATRIX16x8_to_MATRIX7219:	
  1267  007C                     ??_printf_debug_MATRIX16x8:	
  1268                           ; 1 bytes @ 0xC
  1269                           
  1270  007C                     ??_hit_land:	
  1271                           ; 1 bytes @ 0xC
  1272                           
  1273  007C                     ??_is_valid:	
  1274                           ; 1 bytes @ 0xC
  1275                           
  1276  007C                     ??_is_right_boundary:	
  1277                           ; 1 bytes @ 0xC
  1278                           
  1279  007C                     ??_fall_off:	
  1280                           ; 1 bytes @ 0xC
  1281                           
  1282  007C                     ??_clear:	
  1283                           ; 1 bytes @ 0xC
  1284                           
  1285  007C                     ??_merge:	
  1286                           ; 1 bytes @ 0xC
  1287                           
  1288  007C                     ??_merge1:	
  1289                           ; 1 bytes @ 0xC
  1290                           
  1291  007C                     ??_left_most:	
  1292                           ; 1 bytes @ 0xC
  1293                           
  1294  007C                     ?_get_high_after_merge:	
  1295                           ; 1 bytes @ 0xC
  1296                           
  1297  007C                     ??___wmul:	
  1298                           ; 1 bytes @ 0xC
  1299                           
  1300  007C                     ??___lwmod:	
  1301                           ; 1 bytes @ 0xC
  1302                           
  1303  007C                     ?_get_num_of_orphan:	
  1304                           ; 1 bytes @ 0xC
  1305                           
  1306  007C                     ?_get_heavy:	
  1307                           ; 2 bytes @ 0xC
  1308                           
  1309  007C                     printf_debug_MATRIX4x4@row:	
  1310                           ; 2 bytes @ 0xC
  1311                           
  1312  007C                     MATRIX16x8_to_MATRIX7219@matrix7219:	
  1313                           ; 1 bytes @ 0xC
  1314                           
  1315  007C                     get_high_after_merge@matrix:	
  1316                           ; 1 bytes @ 0xC
  1317                           
  1318  007C                     ___wmul@product:	
  1319                           ; 2 bytes @ 0xC
  1320                           
  1321                           
  1322                           ; 2 bytes @ 0xC
  1323  007C                     	ds	1
  1324  007D                     ??_printf_MATRIX16x8:	
  1325  007D                     ??___awmod:	
  1326                           ; 1 bytes @ 0xD
  1327                           
  1328  007D                     printf_debug_MATRIX4x4@col:	
  1329                           ; 1 bytes @ 0xD
  1330                           
  1331  007D                     left_most@x:	
  1332                           ; 1 bytes @ 0xD
  1333                           
  1334  007D                     ___lwmod@counter:	
  1335                           ; 1 bytes @ 0xD
  1336                           
  1337                           
  1338                           ; 1 bytes @ 0xD
  1339  007D                     	ds	1
  1340  007E                     ??_debug_int1:	
  1341  007E                     ??_printf_Screen:	
  1342                           ; 1 bytes @ 0xE
  1343                           
  1344  007E                     ??_Clear_Matrix:	
  1345                           ; 1 bytes @ 0xE
  1346                           
  1347  007E                     ??_char_info_index_rand:	
  1348                           ; 1 bytes @ 0xE
  1349                           
  1350                           
  1351                           	psect	cstackBANK0
  1352  0020                     __pcstackBANK0:	
  1353                           ; 1 bytes @ 0xE
  1354                           
  1355  0020                     ?_printf_debug_MATRIX4x4:	
  1356  0020                     ??_MATRIX16x8_to_MATRIX7219:	
  1357                           ; 1 bytes @ 0x0
  1358                           
  1359  0020                     ?_printf_debug_MATRIX16x8:	
  1360                           ; 1 bytes @ 0x0
  1361                           
  1362  0020                     ?_hit_land:	
  1363                           ; 1 bytes @ 0x0
  1364                           
  1365  0020                     ?_is_valid:	
  1366                           ; 1 bytes @ 0x0
  1367                           
  1368  0020                     ?_is_left_boundary:	
  1369                           ; 1 bytes @ 0x0
  1370                           
  1371  0020                     ?_is_right_boundary:	
  1372                           ; 1 bytes @ 0x0
  1373                           
  1374  0020                     ?_fall_off:	
  1375                           ; 1 bytes @ 0x0
  1376                           
  1377  0020                     ?_clear:	
  1378                           ; 1 bytes @ 0x0
  1379                           
  1380  0020                     ?_merge:	
  1381                           ; 1 bytes @ 0x0
  1382                           
  1383  0020                     ?_merge1:	
  1384                           ; 1 bytes @ 0x0
  1385                           
  1386  0020                     ??_get_num_of_orphan:	
  1387                           ; 1 bytes @ 0x0
  1388                           
  1389  0020                     ??_get_heavy:	
  1390                           ; 1 bytes @ 0x0
  1391                           
  1392  0020                     ??_get_high_after_merge:	
  1393                           ; 1 bytes @ 0x0
  1394                           
  1395  0020                     ??_get_holes_after_merge:	
  1396                           ; 1 bytes @ 0x0
  1397                           
  1398  0020                     ?_rand:	
  1399                           ; 1 bytes @ 0x0
  1400                           
  1401  0020                     printf_MATRIX7219@matrix:	
  1402                           ; 2 bytes @ 0x0
  1403                           
  1404  0020                     hit_land@y:	
  1405                           ; 1 bytes @ 0x0
  1406                           
  1407  0020                     is_valid@y:	
  1408                           ; 1 bytes @ 0x0
  1409                           
  1410  0020                     fall_off@y:	
  1411                           ; 1 bytes @ 0x0
  1412                           
  1413  0020                     clear@y:	
  1414                           ; 1 bytes @ 0x0
  1415                           
  1416  0020                     merge@y:	
  1417                           ; 1 bytes @ 0x0
  1418                           
  1419  0020                     merge1@y:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0020                     printf_debug_MATRIX4x4@lable:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425  0020                     printf_debug_MATRIX16x8@lable:	
  1426                           ; 2 bytes @ 0x0
  1427                           
  1428  0020                     is_left_boundary@matrix4x4:	
  1429                           ; 2 bytes @ 0x0
  1430                           
  1431  0020                     is_right_boundary@matrix4x4:	
  1432                           ; 2 bytes @ 0x0
  1433                           
  1434                           
  1435                           ; 2 bytes @ 0x0
  1436  0020                     	ds	1
  1437  0021                     printf_MATRIX7219@col:	
  1438  0021                     hit_land@matrix4x4:	
  1439                           ; 1 bytes @ 0x1
  1440                           
  1441  0021                     is_valid@matrix4x4:	
  1442                           ; 2 bytes @ 0x1
  1443                           
  1444  0021                     fall_off@matrix4x4:	
  1445                           ; 2 bytes @ 0x1
  1446                           
  1447  0021                     clear@matrix4x4:	
  1448                           ; 2 bytes @ 0x1
  1449                           
  1450  0021                     merge@matrix4x4:	
  1451                           ; 2 bytes @ 0x1
  1452                           
  1453  0021                     merge1@matrix4x4:	
  1454                           ; 2 bytes @ 0x1
  1455                           
  1456                           
  1457                           ; 2 bytes @ 0x1
  1458  0021                     	ds	1
  1459  0022                     ??_rand:	
  1460  0022                     printf_debug_MATRIX4x4@x:	
  1461                           ; 1 bytes @ 0x2
  1462                           
  1463  0022                     MATRIX16x8_to_MATRIX7219@matrix16x8:	
  1464                           ; 1 bytes @ 0x2
  1465                           
  1466  0022                     printf_debug_MATRIX16x8@matrix:	
  1467                           ; 1 bytes @ 0x2
  1468                           
  1469  0022                     is_left_boundary@matrix16x8:	
  1470                           ; 1 bytes @ 0x2
  1471                           
  1472  0022                     is_right_boundary@matrix16x8:	
  1473                           ; 1 bytes @ 0x2
  1474                           
  1475  0022                     get_high_after_merge@y:	
  1476                           ; 1 bytes @ 0x2
  1477                           
  1478                           
  1479                           ; 1 bytes @ 0x2
  1480  0022                     	ds	1
  1481  0023                     ??_is_left_boundary:	
  1482  0023                     printf_debug_MATRIX4x4@y:	
  1483                           ; 1 bytes @ 0x3
  1484                           
  1485  0023                     MATRIX16x8_to_MATRIX7219@mask:	
  1486                           ; 1 bytes @ 0x3
  1487                           
  1488  0023                     printf_debug_MATRIX16x8@row:	
  1489                           ; 1 bytes @ 0x3
  1490                           
  1491  0023                     hit_land@matrix16x8:	
  1492                           ; 1 bytes @ 0x3
  1493                           
  1494  0023                     is_valid@matrix16x8:	
  1495                           ; 1 bytes @ 0x3
  1496                           
  1497  0023                     is_right_boundary@x:	
  1498                           ; 1 bytes @ 0x3
  1499                           
  1500  0023                     fall_off@matrix16x8:	
  1501                           ; 1 bytes @ 0x3
  1502                           
  1503  0023                     clear@matrix16x8:	
  1504                           ; 1 bytes @ 0x3
  1505                           
  1506  0023                     merge@matrix16x8:	
  1507                           ; 1 bytes @ 0x3
  1508                           
  1509  0023                     merge1@matrix16x8_in:	
  1510                           ; 1 bytes @ 0x3
  1511                           
  1512  0023                     get_high_after_merge@col:	
  1513                           ; 1 bytes @ 0x3
  1514                           
  1515  0023                     get_num_of_orphan@risk:	
  1516                           ; 1 bytes @ 0x3
  1517                           
  1518  0023                     get_heavy@risk:	
  1519                           ; 2 bytes @ 0x3
  1520                           
  1521                           
  1522                           ; 2 bytes @ 0x3
  1523  0023                     	ds	1
  1524  0024                     MATRIX16x8_to_MATRIX7219@row:	
  1525  0024                     printf_debug_MATRIX16x8@col:	
  1526                           ; 1 bytes @ 0x4
  1527                           
  1528  0024                     hit_land@x:	
  1529                           ; 1 bytes @ 0x4
  1530                           
  1531  0024                     is_valid@x:	
  1532                           ; 1 bytes @ 0x4
  1533                           
  1534  0024                     is_right_boundary@row:	
  1535                           ; 1 bytes @ 0x4
  1536                           
  1537  0024                     fall_off@x:	
  1538                           ; 1 bytes @ 0x4
  1539                           
  1540  0024                     clear@x:	
  1541                           ; 1 bytes @ 0x4
  1542                           
  1543  0024                     merge@x:	
  1544                           ; 1 bytes @ 0x4
  1545                           
  1546  0024                     merge1@matrix16x8_out:	
  1547                           ; 1 bytes @ 0x4
  1548                           
  1549  0024                     get_high_after_merge@row:	
  1550                           ; 1 bytes @ 0x4
  1551                           
  1552  0024                     printf_debug_MATRIX4x4@matrix:	
  1553                           ; 1 bytes @ 0x4
  1554                           
  1555                           
  1556                           ; 2 bytes @ 0x4
  1557  0024                     	ds	1
  1558  0025                     MATRIX16x8_to_MATRIX7219@col:	
  1559  0025                     hit_land@col:	
  1560                           ; 1 bytes @ 0x5
  1561                           
  1562  0025                     is_valid@row:	
  1563                           ; 1 bytes @ 0x5
  1564                           
  1565  0025                     is_right_boundary@col:	
  1566                           ; 1 bytes @ 0x5
  1567                           
  1568  0025                     fall_off@col:	
  1569                           ; 1 bytes @ 0x5
  1570                           
  1571  0025                     clear@row:	
  1572                           ; 1 bytes @ 0x5
  1573                           
  1574  0025                     merge@row:	
  1575                           ; 1 bytes @ 0x5
  1576                           
  1577  0025                     get_num_of_orphan@full:	
  1578                           ; 1 bytes @ 0x5
  1579                           
  1580  0025                     get_heavy@start:	
  1581                           ; 1 bytes @ 0x5
  1582                           
  1583  0025                     merge1@len:	
  1584                           ; 1 bytes @ 0x5
  1585                           
  1586                           
  1587                           ; 2 bytes @ 0x5
  1588  0025                     	ds	1
  1589  0026                     ??_printf_debug_MATRIX4x4:	
  1590  0026                     ?_right_most:	
  1591                           ; 1 bytes @ 0x6
  1592                           
  1593  0026                     printf_MATRIX16x8@matrix16x8:	
  1594                           ; 1 bytes @ 0x6
  1595                           
  1596  0026                     hit_land@row:	
  1597                           ; 1 bytes @ 0x6
  1598                           
  1599  0026                     is_valid@col:	
  1600                           ; 1 bytes @ 0x6
  1601                           
  1602  0026                     fall_off@row:	
  1603                           ; 1 bytes @ 0x6
  1604                           
  1605  0026                     clear@col:	
  1606                           ; 1 bytes @ 0x6
  1607                           
  1608  0026                     merge@col:	
  1609                           ; 1 bytes @ 0x6
  1610                           
  1611  0026                     get_num_of_orphan@matrix:	
  1612                           ; 1 bytes @ 0x6
  1613                           
  1614  0026                     get_heavy@matrix:	
  1615                           ; 1 bytes @ 0x6
  1616                           
  1617  0026                     get_holes_after_merge@num_hole:	
  1618                           ; 1 bytes @ 0x6
  1619                           
  1620  0026                     right_most@matrix4x4:	
  1621                           ; 1 bytes @ 0x6
  1622                           
  1623                           
  1624                           ; 2 bytes @ 0x6
  1625  0026                     	ds	1
  1626  0027                     ?___awmod:	
  1627  0027                     merge1@x:	
  1628                           ; 2 bytes @ 0x7
  1629                           
  1630  0027                     get_num_of_orphan@col:	
  1631                           ; 1 bytes @ 0x7
  1632                           
  1633  0027                     get_heavy@pre:	
  1634                           ; 1 bytes @ 0x7
  1635                           
  1636  0027                     get_holes_after_merge@stop:	
  1637                           ; 1 bytes @ 0x7
  1638                           
  1639  0027                     ___awmod@divisor:	
  1640                           ; 1 bytes @ 0x7
  1641                           
  1642  0027                     printf_MATRIX16x8@matrix7219:	
  1643                           ; 2 bytes @ 0x7
  1644                           
  1645                           
  1646                           ; 16 bytes @ 0x7
  1647  0027                     	ds	1
  1648  0028                     is_left_boundary@x:	
  1649  0028                     merge1@row:	
  1650                           ; 1 bytes @ 0x8
  1651                           
  1652  0028                     get_num_of_orphan@row:	
  1653                           ; 1 bytes @ 0x8
  1654                           
  1655  0028                     get_heavy@col:	
  1656                           ; 1 bytes @ 0x8
  1657                           
  1658  0028                     right_most@matrix16x8:	
  1659                           ; 1 bytes @ 0x8
  1660                           
  1661  0028                     get_holes_after_merge@start:	
  1662                           ; 1 bytes @ 0x8
  1663                           
  1664                           
  1665                           ; 1 bytes @ 0x8
  1666  0028                     	ds	1
  1667  0029                     ??_right_most:	
  1668  0029                     is_left_boundary@row:	
  1669                           ; 1 bytes @ 0x9
  1670                           
  1671  0029                     merge1@col:	
  1672                           ; 1 bytes @ 0x9
  1673                           
  1674  0029                     get_heavy@row:	
  1675                           ; 1 bytes @ 0x9
  1676                           
  1677  0029                     get_holes_after_merge@matrix:	
  1678                           ; 1 bytes @ 0x9
  1679                           
  1680  0029                     ___awmod@dividend:	
  1681                           ; 1 bytes @ 0x9
  1682                           
  1683                           
  1684                           ; 2 bytes @ 0x9
  1685  0029                     	ds	1
  1686  002A                     is_left_boundary@col:	
  1687  002A                     right_most@x:	
  1688                           ; 1 bytes @ 0xA
  1689                           
  1690  002A                     get_holes_after_merge@col:	
  1691                           ; 1 bytes @ 0xA
  1692                           
  1693                           
  1694                           ; 1 bytes @ 0xA
  1695  002A                     	ds	1
  1696  002B                     ?_left_most:	
  1697  002B                     get_holes_after_merge@row:	
  1698                           ; 1 bytes @ 0xB
  1699                           
  1700  002B                     ___awmod@counter:	
  1701                           ; 1 bytes @ 0xB
  1702                           
  1703  002B                     left_most@matrix4x4:	
  1704                           ; 1 bytes @ 0xB
  1705                           
  1706                           
  1707                           ; 2 bytes @ 0xB
  1708  002B                     	ds	1
  1709  002C                     ?___wmul:	
  1710  002C                     ___awmod@sign:	
  1711                           ; 2 bytes @ 0xC
  1712                           
  1713  002C                     ___wmul@multiplier:	
  1714                           ; 1 bytes @ 0xC
  1715                           
  1716                           
  1717                           ; 2 bytes @ 0xC
  1718  002C                     	ds	1
  1719  002D                     left_most@matrix16x8:	
  1720                           
  1721                           ; 1 bytes @ 0xD
  1722  002D                     	ds	1
  1723  002E                     ___wmul@multiplicand:	
  1724                           
  1725                           ; 2 bytes @ 0xE
  1726  002E                     	ds	2
  1727  0030                     ?_sprintf:	
  1728  0030                     sprintf@f:	
  1729                           ; 2 bytes @ 0x10
  1730                           
  1731                           
  1732                           ; 2 bytes @ 0x10
  1733  0030                     	ds	8
  1734  0038                     ??_sprintf:	
  1735                           
  1736                           ; 1 bytes @ 0x18
  1737  0038                     	ds	3
  1738  003B                     _sprintf$675:	
  1739                           
  1740                           ; 2 bytes @ 0x1B
  1741  003B                     	ds	2
  1742  003D                     _sprintf$676:	
  1743                           
  1744                           ; 2 bytes @ 0x1D
  1745  003D                     	ds	2
  1746  003F                     _sprintf$682:	
  1747                           
  1748                           ; 2 bytes @ 0x1F
  1749  003F                     	ds	2
  1750  0041                     sprintf@idx:	
  1751                           
  1752                           ; 1 bytes @ 0x21
  1753  0041                     	ds	1
  1754  0042                     sprintf@cp:	
  1755                           
  1756                           ; 1 bytes @ 0x22
  1757  0042                     	ds	1
  1758  0043                     sprintf@len:	
  1759                           
  1760                           ; 2 bytes @ 0x23
  1761  0043                     	ds	2
  1762  0045                     sprintf@ap:	
  1763                           
  1764                           ; 1 bytes @ 0x25
  1765  0045                     	ds	1
  1766  0046                     sprintf@val:	
  1767                           
  1768                           ; 2 bytes @ 0x26
  1769  0046                     	ds	2
  1770  0048                     sprintf@prec:	
  1771                           
  1772                           ; 1 bytes @ 0x28
  1773  0048                     	ds	1
  1774  0049                     sprintf@width:	
  1775                           
  1776                           ; 2 bytes @ 0x29
  1777  0049                     	ds	2
  1778  004B                     sprintf@c:	
  1779                           
  1780                           ; 1 bytes @ 0x2B
  1781  004B                     	ds	1
  1782  004C                     sprintf@sp:	
  1783                           
  1784                           ; 1 bytes @ 0x2C
  1785  004C                     	ds	1
  1786  004D                     sprintf@flag:	
  1787                           
  1788                           ; 2 bytes @ 0x2D
  1789  004D                     	ds	2
  1790  004F                     ?_debug_int1:	
  1791  004F                     debug_int1@f:	
  1792                           ; 1 bytes @ 0x2F
  1793                           
  1794                           
  1795                           ; 2 bytes @ 0x2F
  1796  004F                     	ds	2
  1797  0051                     debug_int1@i:	
  1798                           
  1799                           ; 2 bytes @ 0x31
  1800  0051                     	ds	2
  1801  0053                     ??_get_num_removed_rows:	
  1802                           
  1803                           ; 1 bytes @ 0x33
  1804  0053                     	ds	2
  1805  0055                     get_num_removed_rows@matrix:	
  1806                           
  1807                           ; 1 bytes @ 0x35
  1808  0055                     	ds	1
  1809  0056                     get_num_removed_rows@count:	
  1810                           
  1811                           ; 1 bytes @ 0x36
  1812  0056                     	ds	1
  1813  0057                     get_num_removed_rows@row:	
  1814                           
  1815                           ; 1 bytes @ 0x37
  1816  0057                     	ds	1
  1817  0058                     ??_find_best_solution:	
  1818                           
  1819                           ; 1 bytes @ 0x38
  1820  0058                     	ds	18
  1821  006A                     ?_main:	
  1822  006A                     main@argc:	
  1823                           ; 2 bytes @ 0x4A
  1824                           
  1825                           
  1826                           ; 2 bytes @ 0x4A
  1827  006A                     	ds	2
  1828  006C                     main@argv:	
  1829                           
  1830                           ; 2 bytes @ 0x4C
  1831  006C                     	ds	2
  1832                           
  1833                           	psect	maintext
  1834  0EAB                     __pmaintext:	
  1835 ;;
  1836 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1837 ;;
  1838 ;; *************** function _main *****************
  1839 ;; Defined at:
  1840 ;;		line 1475 in file "teris_16f886.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;  argc            2   74[BANK0 ] int 
  1843 ;;  argv            2   76[BANK0 ] PTR PTR unsigned char 
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;  Seed            2   18[BANK1 ] unsigned int 
  1846 ;;  hit_res         1   20[BANK1 ] unsigned char 
  1847 ;; Return value:  Size  Location     Type
  1848 ;;                  2   74[BANK0 ] int 
  1849 ;; Registers used:
  1850 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1851 ;; Tracked objects:
  1852 ;;		On entry : B00/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1856 ;;      Params:         0       4       0       0       0
  1857 ;;      Locals:         0       0       3       0       0
  1858 ;;      Temps:          0       0       4       0       0
  1859 ;;      Totals:         0       4       7       0       0
  1860 ;;Total ram usage:       11 bytes
  1861 ;; Hardware stack levels required when called:    7
  1862 ;; This function calls:
  1863 ;;		_Clear_Matrix
  1864 ;;		_USARTInit
  1865 ;;		_char_info_index_rand
  1866 ;;		_clear
  1867 ;;		_delete_matrix
  1868 ;;		_find_best_solution
  1869 ;;		_hit_land
  1870 ;;		_max7219_init1
  1871 ;;		_merge
  1872 ;;		_printf_Screen
  1873 ;;		_printf_debug_MATRIX16x8
  1874 ;;		_printf_debug_MATRIX4x4
  1875 ;;		_srand
  1876 ;; This function is called by:
  1877 ;;		Startup code after reset
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           
  1882                           ;psect for function _main
  1883  0EAB                     _main:	
  1884                           
  1885                           ;teris_16f886.c: 1477: uint8_t hit_res;
  1886                           ;teris_16f886.c: 1489: (TRISAbits.TRISA3 = 0);
  1887                           
  1888                           ;incstack = 0
  1889                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1890  0EAB  1683               	bsf	3,5	;RP0=1, select bank1
  1891  0EAC  1303               	bcf	3,6	;RP1=0, select bank1
  1892  0EAD  1185               	bcf	5,3	;volatile
  1893                           
  1894                           ;teris_16f886.c: 1491: (TRISAbits.TRISA2 = 0);
  1895  0EAE  1105               	bcf	5,2	;volatile
  1896                           
  1897                           ;teris_16f886.c: 1493: (TRISAbits.TRISA1 = 0);
  1898  0EAF  1085               	bcf	5,1	;volatile
  1899                           
  1900                           ;teris_16f886.c: 1495: ANSELbits.ANS1 = 0;
  1901  0EB0  1683               	bsf	3,5	;RP0=1, select bank3
  1902  0EB1  1703               	bsf	3,6	;RP1=1, select bank3
  1903  0EB2  1088               	bcf	8,1	;volatile
  1904                           
  1905                           ;teris_16f886.c: 1496: ANSELbits.ANS2 = 0;
  1906  0EB3  1108               	bcf	8,2	;volatile
  1907                           
  1908                           ;teris_16f886.c: 1497: ANSELbits.ANS3 = 0;
  1909  0EB4  1188               	bcf	8,3	;volatile
  1910                           
  1911                           ;teris_16f886.c: 1498: RA2 = 1;
  1912  0EB5  1283               	bcf	3,5	;RP0=0, select bank0
  1913  0EB6  1303               	bcf	3,6	;RP1=0, select bank0
  1914  0EB7  1505               	bsf	5,2	;volatile
  1915                           
  1916                           ;teris_16f886.c: 1499: RA1 = 0;
  1917  0EB8  1085               	bcf	5,1	;volatile
  1918                           
  1919                           ;teris_16f886.c: 1503: USARTInit(9600);
  1920  0EB9  3080               	movlw	128
  1921  0EBA  00F0               	movwf	USARTInit@baud_rate
  1922  0EBB  3025               	movlw	37
  1923  0EBC  00F1               	movwf	USARTInit@baud_rate+1
  1924  0EBD  160A  118A  2498  120A  158A  	fcall	_USARTInit
  1925                           
  1926                           ;teris_16f886.c: 1506: max7219_init1();
  1927  0EC2  160A  118A  24DF  120A  158A  	fcall	_max7219_init1
  1928                           
  1929                           ;teris_16f886.c: 1508: unsigned Seed;
  1930                           ;teris_16f886.c: 1509: srand(Seed);
  1931  0EC7  1683               	bsf	3,5	;RP0=1, select bank1
  1932  0EC8  1303               	bcf	3,6	;RP1=0, select bank1
  1933  0EC9  0864               	movf	(main@Seed+1)^(0+128),w
  1934  0ECA  00F1               	movwf	srand@x+1
  1935  0ECB  0863               	movf	main@Seed^(0+128),w
  1936  0ECC  00F0               	movwf	srand@x
  1937  0ECD  160A  118A  2049  120A  158A  	fcall	_srand
  1938  0ED2                     l4450:	
  1939                           ;teris_16f886.c: 1511: __start:
  1940                           
  1941                           ;teris_16f886.c: 1527: {
  1942                           ;teris_16f886.c: 1531: goto __start;
  1943                           
  1944                           
  1945                           ;teris_16f886.c: 1512: Clear_Matrix();
  1946  0ED2  160A  118A  208C  120A  158A  	fcall	_Clear_Matrix
  1947  0ED7                     l4452:	
  1948                           ;teris_16f886.c: 1516: while(1)
  1949                           
  1950                           
  1951                           ;teris_16f886.c: 1517: {
  1952                           ;teris_16f886.c: 1518: cur_y = 0;
  1953  0ED7  1683               	bsf	3,5	;RP0=1, select bank1
  1954  0ED8  1303               	bcf	3,6	;RP1=0, select bank1
  1955  0ED9  01A9               	clrf	_cur_y^(0+128)
  1956                           
  1957                           ;teris_16f886.c: 1519: cur_x = 2, cur_y = 0;
  1958  0EDA  3002               	movlw	2
  1959  0EDB  00DF               	movwf	??_main^(0+128)
  1960  0EDC  085F               	movf	??_main^(0+128),w
  1961  0EDD  00C0               	movwf	_cur_x^(0+128)
  1962  0EDE  01A9               	clrf	_cur_y^(0+128)
  1963                           
  1964                           ;teris_16f886.c: 1520: g_char_info_index = char_info_index_rand();
  1965  0EDF  160A  118A  20F7  120A  158A  	fcall	_char_info_index_rand
  1966  0EE4  1683               	bsf	3,5	;RP0=1, select bank1
  1967  0EE5  1303               	bcf	3,6	;RP1=0, select bank1
  1968  0EE6  00DF               	movwf	??_main^(0+128)
  1969  0EE7  085F               	movf	??_main^(0+128),w
  1970  0EE8  00AA               	movwf	_g_char_info_index^(0+128)
  1971                           
  1972                           ;teris_16f886.c: 1521: g_char_info_sub_index = 0;
  1973  0EE9  01AB               	clrf	_g_char_info_sub_index^(0+128)
  1974                           
  1975                           ;teris_16f886.c: 1526: if(find_best_solution() == 0)
  1976  0EEA  120A  118A  200B  120A  158A  	fcall	_find_best_solution
  1977  0EEF  3A00               	xorlw	0
  1978  0EF0  1903               	btfsc	3,2
  1979  0EF1  2ED2               	goto	l4450
  1980                           
  1981                           ;teris_16f886.c: 1532: }
  1982                           ;teris_16f886.c: 1533: g_cur_matrix4x4 = &g_matrix4x4[g_char_info[g_char_info_index].sta
      +                          rt_index + g_char_info_sub_index];
  1983  0EF2  1683               	bsf	3,5	;RP0=1, select bank1
  1984  0EF3  1303               	bcf	3,6	;RP1=0, select bank1
  1985  0EF4  082A               	movf	_g_char_info_index^(0+128),w
  1986  0EF5  00DF               	movwf	??_main^(0+128)
  1987  0EF6  075F               	addwf	??_main^(0+128),w
  1988  0EF7  3E12               	addlw	low (_g_char_info| (0+32768))
  1989  0EF8  0084               	movwf	4
  1990  0EF9  3088               	movlw	high (_g_char_info| (0+32768))
  1991  0EFA  1803               	skipnc
  1992  0EFB  3E01               	addlw	1
  1993  0EFC  1283               	bcf	3,5	;RP0=0, select bank0
  1994  0EFD  1303               	bcf	3,6	;RP1=0, select bank0
  1995  0EFE  00FF               	movwf	127
  1996  0EFF  120A  158A  2000  120A  158A  	fcall	stringtab
  1997  0F04  1683               	bsf	3,5	;RP0=1, select bank1
  1998  0F05  1303               	bcf	3,6	;RP1=0, select bank1
  1999  0F06  072B               	addwf	_g_char_info_sub_index^(0+128),w
  2000  0F07  00E0               	movwf	(??_main+1)^(0+128)
  2001  0F08  3001               	movlw	1
  2002  0F09                     u5785:	
  2003  0F09  1003               	clrc
  2004  0F0A  0DE0               	rlf	(??_main+1)^(0+128),f
  2005  0F0B  3EFF               	addlw	-1
  2006  0F0C  1D03               	skipz
  2007  0F0D  2F09               	goto	u5785
  2008  0F0E  1003               	clrc
  2009  0F0F  0D60               	rlf	(??_main+1)^(0+128),w
  2010  0F10  3E42               	addlw	low (_g_matrix4x4| (0+32768))
  2011  0F11  00E1               	movwf	(??_main+2)^(0+128)
  2012  0F12  3088               	movlw	high (_g_matrix4x4| (0+32768))
  2013  0F13  1803               	skipnc
  2014  0F14  3E01               	addlw	1
  2015  0F15  00E2               	movwf	((??_main+2)^(0+128)+1)
  2016  0F16  0861               	movf	(??_main+2)^(0+128),w
  2017  0F17  00A5               	movwf	_g_cur_matrix4x4^(0+128)
  2018  0F18  0862               	movf	((??_main+2)^(0+128)+1),w
  2019  0F19  00A6               	movwf	(_g_cur_matrix4x4+1)^(0+128)
  2020                           
  2021                           ;teris_16f886.c: 1535: printf_debug_MATRIX4x4("MATRIX4x4 chosen", cur_x, cur_y, g_cur_ma
      +                          trix4x4);
  2022  0F1A  3059               	movlw	low (STR_24| (0+32768))
  2023  0F1B  1283               	bcf	3,5	;RP0=0, select bank0
  2024  0F1C  1303               	bcf	3,6	;RP1=0, select bank0
  2025  0F1D  00A0               	movwf	printf_debug_MATRIX4x4@lable
  2026  0F1E  3089               	movlw	high (STR_24| (0+32768))
  2027  0F1F  00A1               	movwf	printf_debug_MATRIX4x4@lable+1
  2028  0F20  1683               	bsf	3,5	;RP0=1, select bank1
  2029  0F21  1303               	bcf	3,6	;RP1=0, select bank1
  2030  0F22  0840               	movf	_cur_x^(0+128),w
  2031  0F23  00DF               	movwf	??_main^(0+128)
  2032  0F24  085F               	movf	??_main^(0+128),w
  2033  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  2034  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  2035  0F27  00A2               	movwf	printf_debug_MATRIX4x4@x
  2036  0F28  1683               	bsf	3,5	;RP0=1, select bank1
  2037  0F29  1303               	bcf	3,6	;RP1=0, select bank1
  2038  0F2A  0829               	movf	_cur_y^(0+128),w
  2039  0F2B  00E0               	movwf	(??_main+1)^(0+128)
  2040  0F2C  0860               	movf	(??_main+1)^(0+128),w
  2041  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  2042  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  2043  0F2F  00A3               	movwf	printf_debug_MATRIX4x4@y
  2044  0F30  1683               	bsf	3,5	;RP0=1, select bank1
  2045  0F31  1303               	bcf	3,6	;RP1=0, select bank1
  2046  0F32  0825               	movf	_g_cur_matrix4x4^(0+128),w
  2047  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  2048  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  2049  0F35  00A4               	movwf	printf_debug_MATRIX4x4@matrix
  2050  0F36  1683               	bsf	3,5	;RP0=1, select bank1
  2051  0F37  1303               	bcf	3,6	;RP1=0, select bank1
  2052  0F38  0826               	movf	(_g_cur_matrix4x4+1)^(0+128),w
  2053  0F39  1283               	bcf	3,5	;RP0=0, select bank0
  2054  0F3A  1303               	bcf	3,6	;RP1=0, select bank0
  2055  0F3B  00A5               	movwf	printf_debug_MATRIX4x4@matrix+1
  2056  0F3C  120A  158A  24A8  120A  158A  	fcall	_printf_debug_MATRIX4x4
  2057  0F41                     l4470:	
  2058                           ;teris_16f886.c: 1538: while(1)
  2059                           
  2060                           
  2061                           ;teris_16f886.c: 1539: {
  2062                           ;teris_16f886.c: 1540: hit_res = hit_land(cur_x, cur_y, g_cur_matrix4x4, &g_matrix16x8);
  2063  0F41  1683               	bsf	3,5	;RP0=1, select bank1
  2064  0F42  1303               	bcf	3,6	;RP1=0, select bank1
  2065  0F43  0829               	movf	_cur_y^(0+128),w
  2066  0F44  00DF               	movwf	??_main^(0+128)
  2067  0F45  085F               	movf	??_main^(0+128),w
  2068  0F46  1283               	bcf	3,5	;RP0=0, select bank0
  2069  0F47  1303               	bcf	3,6	;RP1=0, select bank0
  2070  0F48  00A0               	movwf	hit_land@y
  2071  0F49  1683               	bsf	3,5	;RP0=1, select bank1
  2072  0F4A  1303               	bcf	3,6	;RP1=0, select bank1
  2073  0F4B  0825               	movf	_g_cur_matrix4x4^(0+128),w
  2074  0F4C  1283               	bcf	3,5	;RP0=0, select bank0
  2075  0F4D  1303               	bcf	3,6	;RP1=0, select bank0
  2076  0F4E  00A1               	movwf	hit_land@matrix4x4
  2077  0F4F  1683               	bsf	3,5	;RP0=1, select bank1
  2078  0F50  1303               	bcf	3,6	;RP1=0, select bank1
  2079  0F51  0826               	movf	(_g_cur_matrix4x4+1)^(0+128),w
  2080  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  2081  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  2082  0F54  00A2               	movwf	hit_land@matrix4x4+1
  2083  0F55  30C1               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  2084  0F56  1683               	bsf	3,5	;RP0=1, select bank1
  2085  0F57  1303               	bcf	3,6	;RP1=0, select bank1
  2086  0F58  00E0               	movwf	(??_main+1)^(0+128)
  2087  0F59  0860               	movf	(??_main+1)^(0+128),w
  2088  0F5A  1283               	bcf	3,5	;RP0=0, select bank0
  2089  0F5B  1303               	bcf	3,6	;RP1=0, select bank0
  2090  0F5C  00A3               	movwf	hit_land@matrix16x8
  2091  0F5D  1683               	bsf	3,5	;RP0=1, select bank1
  2092  0F5E  1303               	bcf	3,6	;RP1=0, select bank1
  2093  0F5F  0840               	movf	_cur_x^(0+128),w
  2094  0F60  120A  158A  2198  120A  158A  	fcall	_hit_land
  2095  0F65  1683               	bsf	3,5	;RP0=1, select bank1
  2096  0F66  1303               	bcf	3,6	;RP1=0, select bank1
  2097  0F67  00E1               	movwf	(??_main+2)^(0+128)
  2098  0F68  0861               	movf	(??_main+2)^(0+128),w
  2099  0F69  00E5               	movwf	main@hit_res^(0+128)
  2100                           
  2101                           ;teris_16f886.c: 1544: merge(cur_x, cur_y, g_cur_matrix4x4, &g_matrix16x8);
  2102  0F6A  0829               	movf	_cur_y^(0+128),w
  2103  0F6B  00DF               	movwf	??_main^(0+128)
  2104  0F6C  085F               	movf	??_main^(0+128),w
  2105  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  2106  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
  2107  0F6F  00A0               	movwf	merge@y
  2108  0F70  1683               	bsf	3,5	;RP0=1, select bank1
  2109  0F71  1303               	bcf	3,6	;RP1=0, select bank1
  2110  0F72  0825               	movf	_g_cur_matrix4x4^(0+128),w
  2111  0F73  1283               	bcf	3,5	;RP0=0, select bank0
  2112  0F74  1303               	bcf	3,6	;RP1=0, select bank0
  2113  0F75  00A1               	movwf	merge@matrix4x4
  2114  0F76  1683               	bsf	3,5	;RP0=1, select bank1
  2115  0F77  1303               	bcf	3,6	;RP1=0, select bank1
  2116  0F78  0826               	movf	(_g_cur_matrix4x4+1)^(0+128),w
  2117  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  2118  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  2119  0F7B  00A2               	movwf	merge@matrix4x4+1
  2120  0F7C  30C1               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  2121  0F7D  1683               	bsf	3,5	;RP0=1, select bank1
  2122  0F7E  1303               	bcf	3,6	;RP1=0, select bank1
  2123  0F7F  00E0               	movwf	(??_main+1)^(0+128)
  2124  0F80  0860               	movf	(??_main+1)^(0+128),w
  2125  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  2126  0F82  1303               	bcf	3,6	;RP1=0, select bank0
  2127  0F83  00A3               	movwf	merge@matrix16x8
  2128  0F84  1683               	bsf	3,5	;RP0=1, select bank1
  2129  0F85  1303               	bcf	3,6	;RP1=0, select bank1
  2130  0F86  0840               	movf	_cur_x^(0+128),w
  2131  0F87  160A  118A  2454  120A  158A  	fcall	_merge
  2132                           
  2133                           ;teris_16f886.c: 1545: if(hit_res == 1)
  2134  0F8C  1683               	bsf	3,5	;RP0=1, select bank1
  2135  0F8D  1303               	bcf	3,6	;RP1=0, select bank1
  2136  0F8E  0365               	decf	main@hit_res^(0+128),w
  2137  0F8F  1D03               	btfss	3,2
  2138  0F90  2FAB               	goto	l4482
  2139                           
  2140                           ;teris_16f886.c: 1546: {
  2141                           ;teris_16f886.c: 1547: printf_Screen();
  2142  0F91  160A  118A  202C  120A  158A  	fcall	_printf_Screen
  2143                           
  2144                           ;teris_16f886.c: 1551: _delay((unsigned long)((100)*(20000000/4000.0)));
  2145  0F96  3003               	movlw	3
  2146  0F97  1683               	bsf	3,5	;RP0=1, select bank1
  2147  0F98  1303               	bcf	3,6	;RP1=0, select bank1
  2148  0F99  00E1               	movwf	(??_main^(0+128)+2)
  2149  0F9A  308A               	movlw	138
  2150  0F9B  00E0               	movwf	(??_main^(0+128)+1)
  2151  0F9C  3056               	movlw	86
  2152  0F9D  00DF               	movwf	??_main^(0+128)
  2153  0F9E                     u5917:	
  2154  0F9E  0BDF               	decfsz	??_main^(0+128),f
  2155  0F9F  2F9E               	goto	u5917
  2156  0FA0  0BE0               	decfsz	(??_main^(0+128)+1),f
  2157  0FA1  2F9E               	goto	u5917
  2158  0FA2  0BE1               	decfsz	(??_main^(0+128)+2),f
  2159  0FA3  2F9E               	goto	u5917
  2160  0FA4  2FA5               	nop2
  2161                           
  2162                           ;teris_16f886.c: 1553: delete_matrix(&g_matrix16x8);
  2163  0FA5  30C1               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  2164  0FA6  160A  118A  2236  120A  158A  	fcall	_delete_matrix
  2165  0FAB                     l4482:	
  2166                           
  2167                           ;teris_16f886.c: 1554: }
  2168                           ;teris_16f886.c: 1556: printf_debug_MATRIX16x8("Main screen", &g_matrix16x8);
  2169  0FAB  3079               	movlw	low (STR_25| (0+32768))
  2170  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  2171  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  2172  0FAE  00A0               	movwf	printf_debug_MATRIX16x8@lable
  2173  0FAF  3089               	movlw	high (STR_25| (0+32768))
  2174  0FB0  00A1               	movwf	printf_debug_MATRIX16x8@lable+1
  2175  0FB1  30C1               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  2176  0FB2  1683               	bsf	3,5	;RP0=1, select bank1
  2177  0FB3  1303               	bcf	3,6	;RP1=0, select bank1
  2178  0FB4  00DF               	movwf	??_main^(0+128)
  2179  0FB5  085F               	movf	??_main^(0+128),w
  2180  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  2181  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  2182  0FB8  00A2               	movwf	printf_debug_MATRIX16x8@matrix
  2183  0FB9  120A  158A  2202  120A  158A  	fcall	_printf_debug_MATRIX16x8
  2184                           
  2185                           ;teris_16f886.c: 1558: printf_Screen();
  2186  0FBE  160A  118A  202C  120A  158A  	fcall	_printf_Screen
  2187                           
  2188                           ;teris_16f886.c: 1559: if(hit_res == 0)
  2189  0FC3  1683               	bsf	3,5	;RP0=1, select bank1
  2190  0FC4  1303               	bcf	3,6	;RP1=0, select bank1
  2191  0FC5  0865               	movf	main@hit_res^(0+128),w
  2192  0FC6  1D03               	btfss	3,2
  2193  0FC7  2ED7               	goto	l4452
  2194                           
  2195                           ;teris_16f886.c: 1560: {
  2196                           ;teris_16f886.c: 1561: clear(cur_x, cur_y, g_cur_matrix4x4, &g_matrix16x8);
  2197  0FC8  0829               	movf	_cur_y^(0+128),w
  2198  0FC9  00DF               	movwf	??_main^(0+128)
  2199  0FCA  085F               	movf	??_main^(0+128),w
  2200  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  2201  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  2202  0FCD  00A0               	movwf	clear@y
  2203  0FCE  1683               	bsf	3,5	;RP0=1, select bank1
  2204  0FCF  1303               	bcf	3,6	;RP1=0, select bank1
  2205  0FD0  0825               	movf	_g_cur_matrix4x4^(0+128),w
  2206  0FD1  1283               	bcf	3,5	;RP0=0, select bank0
  2207  0FD2  1303               	bcf	3,6	;RP1=0, select bank0
  2208  0FD3  00A1               	movwf	clear@matrix4x4
  2209  0FD4  1683               	bsf	3,5	;RP0=1, select bank1
  2210  0FD5  1303               	bcf	3,6	;RP1=0, select bank1
  2211  0FD6  0826               	movf	(_g_cur_matrix4x4+1)^(0+128),w
  2212  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  2213  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  2214  0FD9  00A2               	movwf	clear@matrix4x4+1
  2215  0FDA  30C1               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  2216  0FDB  1683               	bsf	3,5	;RP0=1, select bank1
  2217  0FDC  1303               	bcf	3,6	;RP1=0, select bank1
  2218  0FDD  00E0               	movwf	(??_main+1)^(0+128)
  2219  0FDE  0860               	movf	(??_main+1)^(0+128),w
  2220  0FDF  1283               	bcf	3,5	;RP0=0, select bank0
  2221  0FE0  1303               	bcf	3,6	;RP1=0, select bank0
  2222  0FE1  00A3               	movwf	clear@matrix16x8
  2223  0FE2  1683               	bsf	3,5	;RP0=1, select bank1
  2224  0FE3  1303               	bcf	3,6	;RP1=0, select bank1
  2225  0FE4  0840               	movf	_cur_x^(0+128),w
  2226  0FE5  160A  118A  2411  120A  158A  	fcall	_clear
  2227                           
  2228                           ;teris_16f886.c: 1566: }
  2229                           ;teris_16f886.c: 1570: _delay((unsigned long)((400)*(20000000/4000.0)));
  2230                           
  2231                           ;teris_16f886.c: 1563: else
  2232                           ;teris_16f886.c: 1564: {
  2233                           ;teris_16f886.c: 1565: break;
  2234                           
  2235                           ;teris_16f886.c: 1562: }
  2236  0FEA  300B               	movlw	11
  2237  0FEB  1683               	bsf	3,5	;RP0=1, select bank1
  2238  0FEC  1303               	bcf	3,6	;RP1=0, select bank1
  2239  0FED  00E1               	movwf	(??_main^(0+128)+2)
  2240  0FEE  3026               	movlw	38
  2241  0FEF  00E0               	movwf	(??_main^(0+128)+1)
  2242  0FF0  3066               	movlw	102
  2243  0FF1  00DF               	movwf	??_main^(0+128)
  2244  0FF2                     u5927:	
  2245  0FF2  0BDF               	decfsz	??_main^(0+128),f
  2246  0FF3  2FF2               	goto	u5927
  2247  0FF4  0BE0               	decfsz	(??_main^(0+128)+1),f
  2248  0FF5  2FF2               	goto	u5927
  2249  0FF6  0BE1               	decfsz	(??_main^(0+128)+2),f
  2250  0FF7  2FF2               	goto	u5927
  2251  0FF8  2FF9               	nop2
  2252                           
  2253                           ;teris_16f886.c: 1572: cur_y++;
  2254  0FF9  3001               	movlw	1
  2255  0FFA  1683               	bsf	3,5	;RP0=1, select bank1
  2256  0FFB  1303               	bcf	3,6	;RP1=0, select bank1
  2257  0FFC  00DF               	movwf	??_main^(0+128)
  2258  0FFD  085F               	movf	??_main^(0+128),w
  2259  0FFE  07A9               	addwf	_cur_y^(0+128),f
  2260  0FFF  2F41               	goto	l4470
  2261  1000                     __end_of_main:	
  2262                           ;teris_16f886.c: 1582: return 0;
  2263                           ;	Return value of _main is never used
  2264                           
  2265                           ;teris_16f886.c: 1573: }
  2266                           ;teris_16f886.c: 1574: }
  2267                           ;teris_16f886.c: 1575: __exit:
  2268                           
  2269                           
  2270                           	psect	text1
  2271  1049                     __ptext1:	
  2272 ;; *************** function _srand *****************
  2273 ;; Defined at:
  2274 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;  x               2    0[COMMON] unsigned int 
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;		None
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  1    wreg      void 
  2281 ;; Registers used:
  2282 ;;		wreg
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2288 ;;      Params:         2       0       0       0       0
  2289 ;;      Locals:         0       0       0       0       0
  2290 ;;      Temps:          0       0       0       0       0
  2291 ;;      Totals:         2       0       0       0       0
  2292 ;;Total ram usage:        2 bytes
  2293 ;; Hardware stack levels used:    1
  2294 ;; This function calls:
  2295 ;;		Nothing
  2296 ;; This function is called by:
  2297 ;;		_main
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           
  2302                           ;psect for function _srand
  2303  1049                     _srand:	
  2304                           
  2305                           ;incstack = 0
  2306                           ; Regs used in _srand: [wreg]
  2307  1049  0870               	movf	srand@x,w
  2308  104A  1683               	bsf	3,5	;RP0=1, select bank1
  2309  104B  1303               	bcf	3,6	;RP1=0, select bank1
  2310  104C  00BC               	movwf	_randx^(0+128)
  2311  104D  0871               	movf	srand@x+1,w
  2312  104E  00BD               	movwf	(_randx^(0+128)+1)
  2313  104F  01BE               	clrf	(_randx^(0+128)+2)
  2314  1050  01BF               	clrf	(_randx^(0+128)+3)
  2315  1051  0008               	return
  2316  1052                     __end_of_srand:	
  2317                           
  2318                           	psect	text2
  2319  0CA8                     __ptext2:	
  2320 ;; *************** function _printf_debug_MATRIX4x4 *****************
  2321 ;; Defined at:
  2322 ;;		line 476 in file "teris_16f886.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  lable           2    0[BANK0 ] PTR const unsigned char 
  2325 ;;		 -> STR_24(17), ROM(8192), 
  2326 ;;  x               1    2[BANK0 ] char 
  2327 ;;  y               1    3[BANK0 ] char 
  2328 ;;  matrix          2    4[BANK0 ] PTR const struct .
  2329 ;;		 -> NULL(0), g_matrix4x4(96), 
  2330 ;; Auto vars:     Size  Location     Type
  2331 ;;  col             1   13[COMMON] char 
  2332 ;;  row             1   12[COMMON] char 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2342 ;;      Params:         0       6       0       0       0
  2343 ;;      Locals:         2       0       0       0       0
  2344 ;;      Temps:          0       6       0       0       0
  2345 ;;      Totals:         2      12       0       0       0
  2346 ;;Total ram usage:       14 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    3
  2349 ;; This function calls:
  2350 ;;		_debug_line
  2351 ;;		_debug_str
  2352 ;;		_get_matrix_bit
  2353 ;; This function is called by:
  2354 ;;		_main
  2355 ;;		_printf_debug_cur_MATRIX4x4
  2356 ;;		_printf_debug_all_MATRIX4x4
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           
  2361                           ;psect for function _printf_debug_MATRIX4x4
  2362  0CA8                     _printf_debug_MATRIX4x4:	
  2363                           
  2364                           ;teris_16f886.c: 478: if(lable != (0))
  2365                           
  2366                           ;incstack = 0
  2367                           ; Regs used in _printf_debug_MATRIX4x4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  2368  0CA8  1283               	bcf	3,5	;RP0=0, select bank0
  2369  0CA9  1303               	bcf	3,6	;RP1=0, select bank0
  2370  0CAA  0820               	movf	printf_debug_MATRIX4x4@lable,w
  2371  0CAB  0421               	iorwf	printf_debug_MATRIX4x4@lable+1,w
  2372  0CAC  1903               	btfsc	3,2
  2373  0CAD  2CC0               	goto	l208
  2374                           
  2375                           ;teris_16f886.c: 479: {
  2376                           ;teris_16f886.c: 480: debug_str(lable);
  2377  0CAE  0820               	movf	printf_debug_MATRIX4x4@lable,w
  2378  0CAF  00F3               	movwf	debug_str@str
  2379  0CB0  0821               	movf	printf_debug_MATRIX4x4@lable+1,w
  2380  0CB1  00F4               	movwf	debug_str@str+1
  2381  0CB2  160A  118A  2041  120A  158A  	fcall	_debug_str
  2382                           
  2383                           ;teris_16f886.c: 481: debug_line(":");
  2384  0CB7  3094               	movlw	low (STR_5| (0+32768))
  2385  0CB8  00F3               	movwf	debug_line@str
  2386  0CB9  3089               	movlw	high (STR_5| (0+32768))
  2387  0CBA  00F4               	movwf	debug_line@str+1
  2388  0CBB  160A  118A  20AE  120A  158A  	fcall	_debug_line
  2389  0CC0                     l208:	
  2390                           
  2391                           ;teris_16f886.c: 482: }
  2392                           ;teris_16f886.c: 483: debug_line("<<<<<<<<<<<<<<<<<<<<MATRIX4x4");
  2393  0CC0  30C1               	movlw	low (STR_6| (0+32768))
  2394  0CC1  00F3               	movwf	debug_line@str
  2395  0CC2  3088               	movlw	high (STR_6| (0+32768))
  2396  0CC3  00F4               	movwf	debug_line@str+1
  2397  0CC4  160A  118A  20AE  120A  158A  	fcall	_debug_line
  2398                           
  2399                           ;teris_16f886.c: 484: for(int8_t row = 0; row < 16; row++)
  2400  0CC9  01FC               	clrf	printf_debug_MATRIX4x4@row
  2401  0CCA  087C               	movf	printf_debug_MATRIX4x4@row,w
  2402  0CCB  3A80               	xorlw	128
  2403  0CCC  3E70               	addlw	-144
  2404  0CCD  1803               	btfsc	3,0
  2405  0CCE  2D95               	goto	l4108
  2406  0CCF                     l4078:	
  2407                           
  2408                           ;teris_16f886.c: 485: {
  2409                           ;teris_16f886.c: 486: for(int8_t col = 0; col < 8; col++)
  2410  0CCF  01FD               	clrf	printf_debug_MATRIX4x4@col
  2411  0CD0  087D               	movf	printf_debug_MATRIX4x4@col,w
  2412  0CD1  3A80               	xorlw	128
  2413  0CD2  3E78               	addlw	-136
  2414  0CD3  1803               	btfsc	3,0
  2415  0CD4  2D81               	goto	l4102
  2416  0CD5                     l4084:	
  2417                           
  2418                           ;teris_16f886.c: 487: {
  2419                           ;teris_16f886.c: 488: if((row - y >= 0) && (row - y < 4)
  2420                           ;teris_16f886.c: 489: && (col - x >= 0) && (col - x < 4)
  2421                           ;teris_16f886.c: 490: && (get_matrix_bit(matrix->row, row - y, col - x) == 1))
  2422  0CD5  1283               	bcf	3,5	;RP0=0, select bank0
  2423  0CD6  1303               	bcf	3,6	;RP1=0, select bank0
  2424  0CD7  0823               	movf	printf_debug_MATRIX4x4@y,w
  2425  0CD8  00A6               	movwf	??_printf_debug_MATRIX4x4
  2426  0CD9  01A7               	clrf	??_printf_debug_MATRIX4x4+1
  2427  0CDA  1BA6               	btfsc	??_printf_debug_MATRIX4x4,7
  2428  0CDB  03A7               	decf	??_printf_debug_MATRIX4x4+1,f
  2429  0CDC  09A6               	comf	??_printf_debug_MATRIX4x4,f
  2430  0CDD  09A7               	comf	??_printf_debug_MATRIX4x4+1,f
  2431  0CDE  0AA6               	incf	??_printf_debug_MATRIX4x4,f
  2432  0CDF  1903               	skipnz
  2433  0CE0  0AA7               	incf	??_printf_debug_MATRIX4x4+1,f
  2434  0CE1  087C               	movf	printf_debug_MATRIX4x4@row,w
  2435  0CE2  00A8               	movwf	??_printf_debug_MATRIX4x4+2
  2436  0CE3  01A9               	clrf	??_printf_debug_MATRIX4x4+3
  2437  0CE4  1BA8               	btfsc	??_printf_debug_MATRIX4x4+2,7
  2438  0CE5  03A9               	decf	??_printf_debug_MATRIX4x4+3,f
  2439  0CE6  0826               	movf	??_printf_debug_MATRIX4x4,w
  2440  0CE7  0728               	addwf	??_printf_debug_MATRIX4x4+2,w
  2441  0CE8  00AA               	movwf	??_printf_debug_MATRIX4x4+4
  2442  0CE9  0827               	movf	??_printf_debug_MATRIX4x4+1,w
  2443  0CEA  1803               	skipnc
  2444  0CEB  0A27               	incf	??_printf_debug_MATRIX4x4+1,w
  2445  0CEC  0729               	addwf	??_printf_debug_MATRIX4x4+3,w
  2446  0CED  00AB               	movwf	??_printf_debug_MATRIX4x4+5
  2447  0CEE  1BAB               	btfsc	??_printf_debug_MATRIX4x4+5,7
  2448  0CEF  2D6D               	goto	l4096
  2449  0CF0  0823               	movf	printf_debug_MATRIX4x4@y,w
  2450  0CF1  00A6               	movwf	??_printf_debug_MATRIX4x4
  2451  0CF2  01A7               	clrf	??_printf_debug_MATRIX4x4+1
  2452  0CF3  1BA6               	btfsc	??_printf_debug_MATRIX4x4,7
  2453  0CF4  03A7               	decf	??_printf_debug_MATRIX4x4+1,f
  2454  0CF5  09A6               	comf	??_printf_debug_MATRIX4x4,f
  2455  0CF6  09A7               	comf	??_printf_debug_MATRIX4x4+1,f
  2456  0CF7  0AA6               	incf	??_printf_debug_MATRIX4x4,f
  2457  0CF8  1903               	skipnz
  2458  0CF9  0AA7               	incf	??_printf_debug_MATRIX4x4+1,f
  2459  0CFA  087C               	movf	printf_debug_MATRIX4x4@row,w
  2460  0CFB  00A8               	movwf	??_printf_debug_MATRIX4x4+2
  2461  0CFC  01A9               	clrf	??_printf_debug_MATRIX4x4+3
  2462  0CFD  1BA8               	btfsc	??_printf_debug_MATRIX4x4+2,7
  2463  0CFE  03A9               	decf	??_printf_debug_MATRIX4x4+3,f
  2464  0CFF  0826               	movf	??_printf_debug_MATRIX4x4,w
  2465  0D00  0728               	addwf	??_printf_debug_MATRIX4x4+2,w
  2466  0D01  00AA               	movwf	??_printf_debug_MATRIX4x4+4
  2467  0D02  0827               	movf	??_printf_debug_MATRIX4x4+1,w
  2468  0D03  1803               	skipnc
  2469  0D04  0A27               	incf	??_printf_debug_MATRIX4x4+1,w
  2470  0D05  0729               	addwf	??_printf_debug_MATRIX4x4+3,w
  2471  0D06  00AB               	movwf	??_printf_debug_MATRIX4x4+5
  2472  0D07  082B               	movf	??_printf_debug_MATRIX4x4+5,w
  2473  0D08  3A80               	xorlw	128
  2474  0D09  00FF               	movwf	127
  2475  0D0A  3080               	movlw	128
  2476  0D0B  027F               	subwf	127,w
  2477  0D0C  1D03               	skipz
  2478  0D0D  2D10               	goto	u5115
  2479  0D0E  3004               	movlw	4
  2480  0D0F  022A               	subwf	??_printf_debug_MATRIX4x4+4,w
  2481  0D10                     u5115:	
  2482  0D10  1803               	skipnc
  2483  0D11  2D6D               	goto	l4096
  2484  0D12  1283               	bcf	3,5	;RP0=0, select bank0
  2485  0D13  1303               	bcf	3,6	;RP1=0, select bank0
  2486  0D14  0822               	movf	printf_debug_MATRIX4x4@x,w
  2487  0D15  00A6               	movwf	??_printf_debug_MATRIX4x4
  2488  0D16  01A7               	clrf	??_printf_debug_MATRIX4x4+1
  2489  0D17  1BA6               	btfsc	??_printf_debug_MATRIX4x4,7
  2490  0D18  03A7               	decf	??_printf_debug_MATRIX4x4+1,f
  2491  0D19  09A6               	comf	??_printf_debug_MATRIX4x4,f
  2492  0D1A  09A7               	comf	??_printf_debug_MATRIX4x4+1,f
  2493  0D1B  0AA6               	incf	??_printf_debug_MATRIX4x4,f
  2494  0D1C  1903               	skipnz
  2495  0D1D  0AA7               	incf	??_printf_debug_MATRIX4x4+1,f
  2496  0D1E  087D               	movf	printf_debug_MATRIX4x4@col,w
  2497  0D1F  00A8               	movwf	??_printf_debug_MATRIX4x4+2
  2498  0D20  01A9               	clrf	??_printf_debug_MATRIX4x4+3
  2499  0D21  1BA8               	btfsc	??_printf_debug_MATRIX4x4+2,7
  2500  0D22  03A9               	decf	??_printf_debug_MATRIX4x4+3,f
  2501  0D23  0826               	movf	??_printf_debug_MATRIX4x4,w
  2502  0D24  0728               	addwf	??_printf_debug_MATRIX4x4+2,w
  2503  0D25  00AA               	movwf	??_printf_debug_MATRIX4x4+4
  2504  0D26  0827               	movf	??_printf_debug_MATRIX4x4+1,w
  2505  0D27  1803               	skipnc
  2506  0D28  0A27               	incf	??_printf_debug_MATRIX4x4+1,w
  2507  0D29  0729               	addwf	??_printf_debug_MATRIX4x4+3,w
  2508  0D2A  00AB               	movwf	??_printf_debug_MATRIX4x4+5
  2509  0D2B  1BAB               	btfsc	??_printf_debug_MATRIX4x4+5,7
  2510  0D2C  2D6D               	goto	l4096
  2511  0D2D  0822               	movf	printf_debug_MATRIX4x4@x,w
  2512  0D2E  00A6               	movwf	??_printf_debug_MATRIX4x4
  2513  0D2F  01A7               	clrf	??_printf_debug_MATRIX4x4+1
  2514  0D30  1BA6               	btfsc	??_printf_debug_MATRIX4x4,7
  2515  0D31  03A7               	decf	??_printf_debug_MATRIX4x4+1,f
  2516  0D32  09A6               	comf	??_printf_debug_MATRIX4x4,f
  2517  0D33  09A7               	comf	??_printf_debug_MATRIX4x4+1,f
  2518  0D34  0AA6               	incf	??_printf_debug_MATRIX4x4,f
  2519  0D35  1903               	skipnz
  2520  0D36  0AA7               	incf	??_printf_debug_MATRIX4x4+1,f
  2521  0D37  087D               	movf	printf_debug_MATRIX4x4@col,w
  2522  0D38  00A8               	movwf	??_printf_debug_MATRIX4x4+2
  2523  0D39  01A9               	clrf	??_printf_debug_MATRIX4x4+3
  2524  0D3A  1BA8               	btfsc	??_printf_debug_MATRIX4x4+2,7
  2525  0D3B  03A9               	decf	??_printf_debug_MATRIX4x4+3,f
  2526  0D3C  0826               	movf	??_printf_debug_MATRIX4x4,w
  2527  0D3D  0728               	addwf	??_printf_debug_MATRIX4x4+2,w
  2528  0D3E  00AA               	movwf	??_printf_debug_MATRIX4x4+4
  2529  0D3F  0827               	movf	??_printf_debug_MATRIX4x4+1,w
  2530  0D40  1803               	skipnc
  2531  0D41  0A27               	incf	??_printf_debug_MATRIX4x4+1,w
  2532  0D42  0729               	addwf	??_printf_debug_MATRIX4x4+3,w
  2533  0D43  00AB               	movwf	??_printf_debug_MATRIX4x4+5
  2534  0D44  082B               	movf	??_printf_debug_MATRIX4x4+5,w
  2535  0D45  3A80               	xorlw	128
  2536  0D46  00FF               	movwf	127
  2537  0D47  3080               	movlw	128
  2538  0D48  027F               	subwf	127,w
  2539  0D49  1D03               	skipz
  2540  0D4A  2D4D               	goto	u5135
  2541  0D4B  3004               	movlw	4
  2542  0D4C  022A               	subwf	??_printf_debug_MATRIX4x4+4,w
  2543  0D4D                     u5135:	
  2544  0D4D  1803               	skipnc
  2545  0D4E  2D6D               	goto	l4096
  2546  0D4F  1283               	bcf	3,5	;RP0=0, select bank0
  2547  0D50  1303               	bcf	3,6	;RP1=0, select bank0
  2548  0D51  0824               	movf	printf_debug_MATRIX4x4@matrix,w
  2549  0D52  00F7               	movwf	get_matrix_bit@byte
  2550  0D53  0825               	movf	printf_debug_MATRIX4x4@matrix+1,w
  2551  0D54  00F8               	movwf	get_matrix_bit@byte+1
  2552  0D55  0323               	decf	printf_debug_MATRIX4x4@y,w
  2553  0D56  3AFF               	xorlw	255
  2554  0D57  077C               	addwf	printf_debug_MATRIX4x4@row,w
  2555  0D58  00A6               	movwf	??_printf_debug_MATRIX4x4
  2556  0D59  0826               	movf	??_printf_debug_MATRIX4x4,w
  2557  0D5A  00F9               	movwf	get_matrix_bit@row
  2558  0D5B  0322               	decf	printf_debug_MATRIX4x4@x,w
  2559  0D5C  3AFF               	xorlw	255
  2560  0D5D  077D               	addwf	printf_debug_MATRIX4x4@col,w
  2561  0D5E  00A7               	movwf	??_printf_debug_MATRIX4x4+1
  2562  0D5F  0827               	movf	??_printf_debug_MATRIX4x4+1,w
  2563  0D60  00FA               	movwf	get_matrix_bit@col
  2564  0D61  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  2565  0D66  3A01               	xorlw	1
  2566  0D67  1D03               	skipz
  2567  0D68  2D6D               	goto	l4096
  2568                           
  2569                           ;teris_16f886.c: 491: {
  2570                           ;teris_16f886.c: 492: debug_str("*");
  2571  0D69  3092               	movlw	low (STR_7| (0+32768))
  2572  0D6A  00F3               	movwf	debug_str@str
  2573  0D6B  3089               	movlw	high (STR_7| (0+32768))
  2574  0D6C  2D70               	goto	L1
  2575  0D6D                     l4096:	
  2576                           ;teris_16f886.c: 493: }
  2577                           
  2578                           
  2579                           ;teris_16f886.c: 494: else
  2580                           ;teris_16f886.c: 495: {
  2581                           ;teris_16f886.c: 496: debug_str("_");
  2582  0D6D  3096               	movlw	low (STR_8| (0+32768))
  2583  0D6E  00F3               	movwf	debug_str@str
  2584  0D6F  3089               	movlw	high (STR_8| (0+32768))
  2585  0D70                     L1:	
  2586  0D70  00F4               	movwf	debug_str@str+1
  2587  0D71  160A  118A  2041  120A  158A  	fcall	_debug_str
  2588  0D76  3001               	movlw	1
  2589  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  2590  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  2591  0D79  00A6               	movwf	??_printf_debug_MATRIX4x4
  2592  0D7A  0826               	movf	??_printf_debug_MATRIX4x4,w
  2593  0D7B  07FD               	addwf	printf_debug_MATRIX4x4@col,f
  2594  0D7C  087D               	movf	printf_debug_MATRIX4x4@col,w
  2595  0D7D  3A80               	xorlw	128
  2596  0D7E  3E78               	addlw	-136
  2597  0D7F  1C03               	skipc
  2598  0D80  2CD5               	goto	l4084
  2599  0D81                     l4102:	
  2600                           
  2601                           ;teris_16f886.c: 497: }
  2602                           ;teris_16f886.c: 498: }
  2603                           ;teris_16f886.c: 499: debug_line("");
  2604  0D81  3091               	movlw	low ((STR_1+2)| (0+32768))
  2605  0D82  00F3               	movwf	debug_line@str
  2606  0D83  3089               	movlw	high ((STR_1+2)| (0+32768))
  2607  0D84  00F4               	movwf	debug_line@str+1
  2608  0D85  160A  118A  20AE  120A  158A  	fcall	_debug_line
  2609  0D8A  3001               	movlw	1
  2610  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  2611  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  2612  0D8D  00A6               	movwf	??_printf_debug_MATRIX4x4
  2613  0D8E  0826               	movf	??_printf_debug_MATRIX4x4,w
  2614  0D8F  07FC               	addwf	printf_debug_MATRIX4x4@row,f
  2615  0D90  087C               	movf	printf_debug_MATRIX4x4@row,w
  2616  0D91  3A80               	xorlw	128
  2617  0D92  3E70               	addlw	-144
  2618  0D93  1C03               	skipc
  2619  0D94  2CCF               	goto	l4078
  2620  0D95                     l4108:	
  2621                           
  2622                           ;teris_16f886.c: 500: }
  2623                           ;teris_16f886.c: 501: debug_line(">>>>>>>>>>>>>>>>>>>>");
  2624  0D95  300F               	movlw	low (STR_10| (0+32768))
  2625  0D96  00F3               	movwf	debug_line@str
  2626  0D97  3089               	movlw	high (STR_10| (0+32768))
  2627  0D98  00F4               	movwf	debug_line@str+1
  2628  0D99  160A  118A  20AE   	fcall	_debug_line
  2629  0D9C  0008               	return
  2630  0D9D                     __end_of_printf_debug_MATRIX4x4:	
  2631                           
  2632                           	psect	text3
  2633  0A02                     __ptext3:	
  2634 ;; *************** function _printf_debug_MATRIX16x8 *****************
  2635 ;; Defined at:
  2636 ;;		line 613 in file "teris_16f886.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  lable           2    0[BANK0 ] PTR const unsigned char 
  2639 ;;		 -> STR_25(12), ROM(8192), 
  2640 ;;  matrix          1    2[BANK0 ] PTR const struct .
  2641 ;;		 -> g_matrix16x8(16), 
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  col             1    4[BANK0 ] unsigned char 
  2644 ;;  row             1    3[BANK0 ] unsigned char 
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  1    wreg      void 
  2647 ;; Registers used:
  2648 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2649 ;; Tracked objects:
  2650 ;;		On entry : 0/0
  2651 ;;		On exit  : 0/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2654 ;;      Params:         0       3       0       0       0
  2655 ;;      Locals:         0       2       0       0       0
  2656 ;;      Temps:          2       0       0       0       0
  2657 ;;      Totals:         2       5       0       0       0
  2658 ;;Total ram usage:        7 bytes
  2659 ;; Hardware stack levels used:    1
  2660 ;; Hardware stack levels required when called:    3
  2661 ;; This function calls:
  2662 ;;		_debug_line
  2663 ;;		_debug_str
  2664 ;;		_get_matrix_bit
  2665 ;; This function is called by:
  2666 ;;		_main
  2667 ;;		_printf_debug_Screen
  2668 ;; This function uses a non-reentrant model
  2669 ;;
  2670                           
  2671                           
  2672                           ;psect for function _printf_debug_MATRIX16x8
  2673  0A02                     _printf_debug_MATRIX16x8:	
  2674                           
  2675                           ;teris_16f886.c: 615: if(lable != (0))
  2676                           
  2677                           ;incstack = 0
  2678                           ; Regs used in _printf_debug_MATRIX16x8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  2679  0A02  1283               	bcf	3,5	;RP0=0, select bank0
  2680  0A03  1303               	bcf	3,6	;RP1=0, select bank0
  2681  0A04  0820               	movf	printf_debug_MATRIX16x8@lable,w
  2682  0A05  0421               	iorwf	printf_debug_MATRIX16x8@lable+1,w
  2683  0A06  1903               	btfsc	3,2
  2684  0A07  2A1A               	goto	l257
  2685                           
  2686                           ;teris_16f886.c: 616: {
  2687                           ;teris_16f886.c: 617: debug_str(lable);
  2688  0A08  0820               	movf	printf_debug_MATRIX16x8@lable,w
  2689  0A09  00F3               	movwf	debug_str@str
  2690  0A0A  0821               	movf	printf_debug_MATRIX16x8@lable+1,w
  2691  0A0B  00F4               	movwf	debug_str@str+1
  2692  0A0C  160A  118A  2041  120A  158A  	fcall	_debug_str
  2693                           
  2694                           ;teris_16f886.c: 618: debug_line(":");
  2695  0A11  3094               	movlw	low (STR_5| (0+32768))
  2696  0A12  00F3               	movwf	debug_line@str
  2697  0A13  3089               	movlw	high (STR_5| (0+32768))
  2698  0A14  00F4               	movwf	debug_line@str+1
  2699  0A15  160A  118A  20AE  120A  158A  	fcall	_debug_line
  2700  0A1A                     l257:	
  2701                           
  2702                           ;teris_16f886.c: 619: }
  2703                           ;teris_16f886.c: 620: debug_line("<<<<<<<<<<<<<<<<<<<<MATRIX16x8");
  2704  0A1A  30A2               	movlw	low (STR_16| (0+32768))
  2705  0A1B  00F3               	movwf	debug_line@str
  2706  0A1C  3088               	movlw	high (STR_16| (0+32768))
  2707  0A1D  00F4               	movwf	debug_line@str+1
  2708  0A1E  160A  118A  20AE  120A  158A  	fcall	_debug_line
  2709                           
  2710                           ;teris_16f886.c: 621: for(uint8_t row = 0; row < 16; row++)
  2711  0A23  1283               	bcf	3,5	;RP0=0, select bank0
  2712  0A24  1303               	bcf	3,6	;RP1=0, select bank0
  2713  0A25  01A3               	clrf	printf_debug_MATRIX16x8@row
  2714  0A26  3010               	movlw	16
  2715  0A27  0223               	subwf	printf_debug_MATRIX16x8@row,w
  2716  0A28  1803               	btfsc	3,0
  2717  0A29  2A6D               	goto	l4148
  2718  0A2A                     l4126:	
  2719                           
  2720                           ;teris_16f886.c: 622: {
  2721                           ;teris_16f886.c: 623: for(uint8_t col = 0; col < 8; col++)
  2722  0A2A  01A4               	clrf	printf_debug_MATRIX16x8@col
  2723  0A2B  3008               	movlw	8
  2724  0A2C  0224               	subwf	printf_debug_MATRIX16x8@col,w
  2725  0A2D  1803               	btfsc	3,0
  2726  0A2E  2A5A               	goto	l4142
  2727  0A2F                     l4132:	
  2728                           
  2729                           ;teris_16f886.c: 624: {
  2730                           ;teris_16f886.c: 625: if(get_matrix_bit(matrix->row, row, col) == 1)
  2731  0A2F  0822               	movf	printf_debug_MATRIX16x8@matrix,w
  2732  0A30  00F7               	movwf	get_matrix_bit@byte
  2733  0A31  3000               	movlw	0
  2734  0A32  00F8               	movwf	get_matrix_bit@byte+1
  2735  0A33  0823               	movf	printf_debug_MATRIX16x8@row,w
  2736  0A34  00FC               	movwf	??_printf_debug_MATRIX16x8
  2737  0A35  087C               	movf	??_printf_debug_MATRIX16x8,w
  2738  0A36  00F9               	movwf	get_matrix_bit@row
  2739  0A37  0824               	movf	printf_debug_MATRIX16x8@col,w
  2740  0A38  00FD               	movwf	??_printf_debug_MATRIX16x8+1
  2741  0A39  087D               	movf	??_printf_debug_MATRIX16x8+1,w
  2742  0A3A  00FA               	movwf	get_matrix_bit@col
  2743  0A3B  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  2744  0A40  3A01               	xorlw	1
  2745  0A41  1D03               	skipz
  2746  0A42  2A47               	goto	l4136
  2747                           
  2748                           ;teris_16f886.c: 626: {
  2749                           ;teris_16f886.c: 627: debug_str("*");
  2750  0A43  3092               	movlw	low (STR_7| (0+32768))
  2751  0A44  00F3               	movwf	debug_str@str
  2752  0A45  3089               	movlw	high (STR_7| (0+32768))
  2753  0A46  2A4A               	goto	L2
  2754  0A47                     l4136:	
  2755                           ;teris_16f886.c: 628: }
  2756                           
  2757                           
  2758                           ;teris_16f886.c: 629: else
  2759                           ;teris_16f886.c: 630: {
  2760                           ;teris_16f886.c: 631: debug_str("_");
  2761  0A47  3096               	movlw	low (STR_8| (0+32768))
  2762  0A48  00F3               	movwf	debug_str@str
  2763  0A49  3089               	movlw	high (STR_8| (0+32768))
  2764  0A4A                     L2:	
  2765  0A4A  00F4               	movwf	debug_str@str+1
  2766  0A4B  160A  118A  2041  120A  158A  	fcall	_debug_str
  2767  0A50  3001               	movlw	1
  2768  0A51  00FC               	movwf	??_printf_debug_MATRIX16x8
  2769  0A52  087C               	movf	??_printf_debug_MATRIX16x8,w
  2770  0A53  1283               	bcf	3,5	;RP0=0, select bank0
  2771  0A54  1303               	bcf	3,6	;RP1=0, select bank0
  2772  0A55  07A4               	addwf	printf_debug_MATRIX16x8@col,f
  2773  0A56  3008               	movlw	8
  2774  0A57  0224               	subwf	printf_debug_MATRIX16x8@col,w
  2775  0A58  1C03               	skipc
  2776  0A59  2A2F               	goto	l4132
  2777  0A5A                     l4142:	
  2778                           
  2779                           ;teris_16f886.c: 632: }
  2780                           ;teris_16f886.c: 633: }
  2781                           ;teris_16f886.c: 634: debug_line("");
  2782  0A5A  3091               	movlw	low ((STR_1+2)| (0+32768))
  2783  0A5B  00F3               	movwf	debug_line@str
  2784  0A5C  3089               	movlw	high ((STR_1+2)| (0+32768))
  2785  0A5D  00F4               	movwf	debug_line@str+1
  2786  0A5E  160A  118A  20AE  120A  158A  	fcall	_debug_line
  2787  0A63  3001               	movlw	1
  2788  0A64  00FC               	movwf	??_printf_debug_MATRIX16x8
  2789  0A65  087C               	movf	??_printf_debug_MATRIX16x8,w
  2790  0A66  1283               	bcf	3,5	;RP0=0, select bank0
  2791  0A67  1303               	bcf	3,6	;RP1=0, select bank0
  2792  0A68  07A3               	addwf	printf_debug_MATRIX16x8@row,f
  2793  0A69  3010               	movlw	16
  2794  0A6A  0223               	subwf	printf_debug_MATRIX16x8@row,w
  2795  0A6B  1C03               	skipc
  2796  0A6C  2A2A               	goto	l4126
  2797  0A6D                     l4148:	
  2798                           
  2799                           ;teris_16f886.c: 635: }
  2800                           ;teris_16f886.c: 636: debug_line(">>>>>>>>>>>>>>>>>>>>");
  2801  0A6D  300F               	movlw	low (STR_10| (0+32768))
  2802  0A6E  00F3               	movwf	debug_line@str
  2803  0A6F  3089               	movlw	high (STR_10| (0+32768))
  2804  0A70  00F4               	movwf	debug_line@str+1
  2805  0A71  160A  118A  20AE   	fcall	_debug_line
  2806  0A74  0008               	return
  2807  0A75                     __end_of_printf_debug_MATRIX16x8:	
  2808                           
  2809                           	psect	text4
  2810  1041                     __ptext4:	
  2811 ;; *************** function _debug_str *****************
  2812 ;; Defined at:
  2813 ;;		line 338 in file "teris_16f886.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;  str             2    3[COMMON] PTR const unsigned char 
  2816 ;;		 -> STR_25(12), STR_24(17), STR_18(2), STR_17(2), 
  2817 ;;		 -> STR_8(2), STR_7(2), ROM(8192), 
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;		None
  2820 ;; Return value:  Size  Location     Type
  2821 ;;                  1    wreg      void 
  2822 ;; Registers used:
  2823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2824 ;; Tracked objects:
  2825 ;;		On entry : 0/0
  2826 ;;		On exit  : 0/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2829 ;;      Params:         2       0       0       0       0
  2830 ;;      Locals:         0       0       0       0       0
  2831 ;;      Temps:          0       0       0       0       0
  2832 ;;      Totals:         2       0       0       0       0
  2833 ;;Total ram usage:        2 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:    2
  2836 ;; This function calls:
  2837 ;;		_USARTWriteString
  2838 ;; This function is called by:
  2839 ;;		_printf_debug_MATRIX4x4
  2840 ;;		_printf_debug_MATRIX16x8
  2841 ;;		_printf_debug_cur_MATRIX4x4
  2842 ;;		_printf_debug_Screen
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           
  2847                           ;psect for function _debug_str
  2848  1041                     _debug_str:	
  2849                           
  2850                           ;teris_16f886.c: 344: USARTWriteString(str);
  2851                           
  2852                           ;incstack = 0
  2853                           ; Regs used in _debug_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2854  1041  0873               	movf	debug_str@str,w
  2855  1042  00F1               	movwf	USARTWriteString@str
  2856  1043  0874               	movf	debug_str@str+1,w
  2857  1044  00F2               	movwf	USARTWriteString@str+1
  2858  1045  160A  118A  21EB   	fcall	_USARTWriteString
  2859  1048  0008               	return
  2860  1049                     __end_of_debug_str:	
  2861                           
  2862                           	psect	text5
  2863  10AE                     __ptext5:	
  2864 ;; *************** function _debug_line *****************
  2865 ;; Defined at:
  2866 ;;		line 348 in file "teris_16f886.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  str             2    3[COMMON] PTR const unsigned char 
  2869 ;;		 -> STR_21(2), STR_20(21), STR_19(1), STR_16(31), 
  2870 ;;		 -> STR_15(2), STR_12(21), STR_11(2), STR_10(21), 
  2871 ;;		 -> STR_9(1), STR_6(30), STR_5(2), 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;		None
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  1    wreg      void 
  2876 ;; Registers used:
  2877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2883 ;;      Params:         2       0       0       0       0
  2884 ;;      Locals:         0       0       0       0       0
  2885 ;;      Temps:          0       0       0       0       0
  2886 ;;      Totals:         2       0       0       0       0
  2887 ;;Total ram usage:        2 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    2
  2890 ;; This function calls:
  2891 ;;		_USARTWriteString
  2892 ;; This function is called by:
  2893 ;;		_printf_debug_MATRIX4x4
  2894 ;;		_printf_debug_MATRIX16x8
  2895 ;;		_printf_debug_cur_MATRIX4x4
  2896 ;;		_printf_debug_all_MATRIX4x4
  2897 ;;		_printf_debug_Screen
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           
  2902                           ;psect for function _debug_line
  2903  10AE                     _debug_line:	
  2904                           
  2905                           ;teris_16f886.c: 355: USARTWriteString(str);
  2906                           
  2907                           ;incstack = 0
  2908                           ; Regs used in _debug_line: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2909  10AE  0873               	movf	debug_line@str,w
  2910  10AF  00F1               	movwf	USARTWriteString@str
  2911  10B0  0874               	movf	debug_line@str+1,w
  2912  10B1  00F2               	movwf	USARTWriteString@str+1
  2913  10B2  160A  118A  21EB  160A  118A  	fcall	_USARTWriteString
  2914                           
  2915                           ;teris_16f886.c: 356: USARTWriteString("\r\n");
  2916  10B7  308F               	movlw	low (STR_1| (0+32768))
  2917  10B8  00F1               	movwf	USARTWriteString@str
  2918  10B9  3089               	movlw	high (STR_1| (0+32768))
  2919  10BA  00F2               	movwf	USARTWriteString@str+1
  2920  10BB  160A  118A  21EB   	fcall	_USARTWriteString
  2921  10BE  0008               	return
  2922  10BF                     __end_of_debug_line:	
  2923                           
  2924                           	psect	text6
  2925  1454                     __ptext6:	
  2926 ;; *************** function _merge *****************
  2927 ;; Defined at:
  2928 ;;		line 998 in file "teris_16f886.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;  x               1    wreg     char 
  2931 ;;  y               1    0[BANK0 ] char 
  2932 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  2933 ;;		 -> NULL(0), g_matrix4x4(96), 
  2934 ;;  matrix16x8      1    3[BANK0 ] PTR struct .
  2935 ;;		 -> g_matrix16x8(16), 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;  x               1    4[BANK0 ] char 
  2938 ;;  col             1    6[BANK0 ] unsigned char 
  2939 ;;  row             1    5[BANK0 ] unsigned char 
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2949 ;;      Params:         0       4       0       0       0
  2950 ;;      Locals:         0       3       0       0       0
  2951 ;;      Temps:          2       0       0       0       0
  2952 ;;      Totals:         2       7       0       0       0
  2953 ;;Total ram usage:        9 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    3
  2956 ;; This function calls:
  2957 ;;		_get_matrix_bit
  2958 ;;		_set_matrix_bit
  2959 ;; This function is called by:
  2960 ;;		_main
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           
  2965                           ;psect for function _merge
  2966  1454                     _merge:	
  2967                           
  2968                           ;incstack = 0
  2969                           ; Regs used in _merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2970                           ;merge@x stored from wreg
  2971  1454  1283               	bcf	3,5	;RP0=0, select bank0
  2972  1455  1303               	bcf	3,6	;RP1=0, select bank0
  2973  1456  00A4               	movwf	merge@x
  2974                           
  2975                           ;teris_16f886.c: 1005: for(uint8_t row = 0; row < 4; row++)
  2976  1457  01A5               	clrf	merge@row
  2977  1458                     L3:	
  2978  1458  3004               	movlw	4
  2979  1459  0225               	subwf	merge@row,w
  2980  145A  1803               	btfsc	3,0
  2981  145B  0008               	return
  2982                           
  2983                           ;teris_16f886.c: 1006: {
  2984                           ;teris_16f886.c: 1007: for(uint8_t col = 0; col < 4; col++)
  2985  145C  01A6               	clrf	merge@col
  2986  145D  3004               	movlw	4
  2987  145E  0226               	subwf	merge@col,w
  2988  145F  1803               	btfsc	3,0
  2989  1460  2C93               	goto	l4250
  2990  1461                     l4242:	
  2991                           
  2992                           ;teris_16f886.c: 1008: {
  2993                           ;teris_16f886.c: 1009: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  2994  1461  0821               	movf	merge@matrix4x4,w
  2995  1462  00F7               	movwf	get_matrix_bit@byte
  2996  1463  0822               	movf	merge@matrix4x4+1,w
  2997  1464  00F8               	movwf	get_matrix_bit@byte+1
  2998  1465  0825               	movf	merge@row,w
  2999  1466  00FC               	movwf	??_merge
  3000  1467  087C               	movf	??_merge,w
  3001  1468  00F9               	movwf	get_matrix_bit@row
  3002  1469  0826               	movf	merge@col,w
  3003  146A  00FD               	movwf	??_merge+1
  3004  146B  087D               	movf	??_merge+1,w
  3005  146C  00FA               	movwf	get_matrix_bit@col
  3006  146D  160A  118A  206E  160A  118A  	fcall	_get_matrix_bit
  3007  1472  3A01               	xorlw	1
  3008  1473  1D03               	skipz
  3009  1474  2C89               	goto	l4246
  3010                           
  3011                           ;teris_16f886.c: 1010: {
  3012                           ;teris_16f886.c: 1011: set_matrix_bit(matrix16x8->row, y + row, x + col, 1);
  3013  1475  1283               	bcf	3,5	;RP0=0, select bank0
  3014  1476  1303               	bcf	3,6	;RP1=0, select bank0
  3015  1477  0825               	movf	merge@row,w
  3016  1478  0720               	addwf	merge@y,w
  3017  1479  00FC               	movwf	??_merge
  3018  147A  087C               	movf	??_merge,w
  3019  147B  00F5               	movwf	set_matrix_bit@row
  3020  147C  0826               	movf	merge@col,w
  3021  147D  0724               	addwf	merge@x,w
  3022  147E  00FD               	movwf	??_merge+1
  3023  147F  087D               	movf	??_merge+1,w
  3024  1480  00F6               	movwf	set_matrix_bit@col
  3025  1481  01F7               	clrf	set_matrix_bit@value
  3026  1482  0AF7               	incf	set_matrix_bit@value,f
  3027  1483  0823               	movf	merge@matrix16x8,w
  3028  1484  160A  118A  207D  160A  118A  	fcall	_set_matrix_bit
  3029  1489                     l4246:	
  3030  1489  3001               	movlw	1
  3031  148A  00FC               	movwf	??_merge
  3032  148B  087C               	movf	??_merge,w
  3033  148C  1283               	bcf	3,5	;RP0=0, select bank0
  3034  148D  1303               	bcf	3,6	;RP1=0, select bank0
  3035  148E  07A6               	addwf	merge@col,f
  3036  148F  3004               	movlw	4
  3037  1490  0226               	subwf	merge@col,w
  3038  1491  1C03               	skipc
  3039  1492  2C61               	goto	l4242
  3040  1493                     l4250:	
  3041  1493  3001               	movlw	1
  3042  1494  00FC               	movwf	??_merge
  3043  1495  087C               	movf	??_merge,w
  3044  1496  07A5               	addwf	merge@row,f
  3045  1497  2C58               	goto	L3
  3046  1498                     __end_of_merge:	
  3047                           
  3048                           	psect	text7
  3049  14DF                     __ptext7:	
  3050 ;; *************** function _max7219_init1 *****************
  3051 ;; Defined at:
  3052 ;;		line 573 in file "teris_16f886.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;		None
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;		None
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  1    wreg      void 
  3059 ;; Registers used:
  3060 ;;		wreg, status,2, status,0, pclath, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3066 ;;      Params:         0       0       0       0       0
  3067 ;;      Locals:         0       0       0       0       0
  3068 ;;      Temps:          3       0       0       0       0
  3069 ;;      Totals:         3       0       0       0       0
  3070 ;;Total ram usage:        3 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    2
  3073 ;; This function calls:
  3074 ;;		_Write_Word
  3075 ;; This function is called by:
  3076 ;;		_main
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           
  3081                           ;psect for function _max7219_init1
  3082  14DF                     _max7219_init1:	
  3083                           
  3084                           ;teris_16f886.c: 575: Write_Word(0x09, 0x00, 0x09, 0x00);
  3085                           
  3086                           ;incstack = 0
  3087                           ; Regs used in _max7219_init1: [wreg+status,2+status,0+pclath+cstack]
  3088  14DF  01F4               	clrf	Write_Word@myValue1
  3089  14E0  3009               	movlw	9
  3090  14E1  00F8               	movwf	??_max7219_init1
  3091  14E2  0878               	movf	??_max7219_init1,w
  3092  14E3  00F5               	movwf	Write_Word@myColumn2
  3093  14E4  01F6               	clrf	Write_Word@myValue2
  3094  14E5  3009               	movlw	9
  3095  14E6  160A  118A  2147  160A  118A  	fcall	_Write_Word
  3096                           
  3097                           ;teris_16f886.c: 576: Write_Word(0x0A, 0x0F, 0x0A, 0x0F);
  3098  14EB  300F               	movlw	15
  3099  14EC  00F8               	movwf	??_max7219_init1
  3100  14ED  0878               	movf	??_max7219_init1,w
  3101  14EE  00F4               	movwf	Write_Word@myValue1
  3102  14EF  300A               	movlw	10
  3103  14F0  00F9               	movwf	??_max7219_init1+1
  3104  14F1  0879               	movf	??_max7219_init1+1,w
  3105  14F2  00F5               	movwf	Write_Word@myColumn2
  3106  14F3  300F               	movlw	15
  3107  14F4  00FA               	movwf	??_max7219_init1+2
  3108  14F5  087A               	movf	??_max7219_init1+2,w
  3109  14F6  00F6               	movwf	Write_Word@myValue2
  3110  14F7  300A               	movlw	10
  3111  14F8  160A  118A  2147  160A  118A  	fcall	_Write_Word
  3112                           
  3113                           ;teris_16f886.c: 577: Write_Word(0x0B, 0x07, 0x0B, 0x07);
  3114  14FD  3007               	movlw	7
  3115  14FE  00F8               	movwf	??_max7219_init1
  3116  14FF  0878               	movf	??_max7219_init1,w
  3117  1500  00F4               	movwf	Write_Word@myValue1
  3118  1501  300B               	movlw	11
  3119  1502  00F9               	movwf	??_max7219_init1+1
  3120  1503  0879               	movf	??_max7219_init1+1,w
  3121  1504  00F5               	movwf	Write_Word@myColumn2
  3122  1505  3007               	movlw	7
  3123  1506  00FA               	movwf	??_max7219_init1+2
  3124  1507  087A               	movf	??_max7219_init1+2,w
  3125  1508  00F6               	movwf	Write_Word@myValue2
  3126  1509  300B               	movlw	11
  3127  150A  160A  118A  2147  160A  118A  	fcall	_Write_Word
  3128                           
  3129                           ;teris_16f886.c: 578: Write_Word(0x0C, 0x01, 0x0C, 0x01);
  3130  150F  01F4               	clrf	Write_Word@myValue1
  3131  1510  0AF4               	incf	Write_Word@myValue1,f
  3132  1511  300C               	movlw	12
  3133  1512  00F8               	movwf	??_max7219_init1
  3134  1513  0878               	movf	??_max7219_init1,w
  3135  1514  00F5               	movwf	Write_Word@myColumn2
  3136  1515  01F6               	clrf	Write_Word@myValue2
  3137  1516  0AF6               	incf	Write_Word@myValue2,f
  3138  1517  300C               	movlw	12
  3139  1518  160A  118A  2147  160A  118A  	fcall	_Write_Word
  3140                           
  3141                           ;teris_16f886.c: 579: Write_Word(0x00, 0xFF, 0x00, 0xFF);
  3142  151D  30FF               	movlw	255
  3143  151E  00F8               	movwf	??_max7219_init1
  3144  151F  0878               	movf	??_max7219_init1,w
  3145  1520  00F4               	movwf	Write_Word@myValue1
  3146  1521  01F5               	clrf	Write_Word@myColumn2
  3147  1522  30FF               	movlw	255
  3148  1523  00F9               	movwf	??_max7219_init1+1
  3149  1524  0879               	movf	??_max7219_init1+1,w
  3150  1525  00F6               	movwf	Write_Word@myValue2
  3151  1526  3000               	movlw	0
  3152  1527  160A  118A  2147   	fcall	_Write_Word
  3153  152A  0008               	return
  3154  152B                     __end_of_max7219_init1:	
  3155                           
  3156                           	psect	text8
  3157  0998                     __ptext8:	
  3158 ;; *************** function _hit_land *****************
  3159 ;; Defined at:
  3160 ;;		line 834 in file "teris_16f886.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;  x               1    wreg     char 
  3163 ;;  y               1    0[BANK0 ] char 
  3164 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  3165 ;;		 -> NULL(0), g_matrix4x4(96), 
  3166 ;;  matrix16x8      1    3[BANK0 ] PTR const struct .
  3167 ;;		 -> g_matrix16x8(16), 
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  x               1    4[BANK0 ] char 
  3170 ;;  col             1    5[BANK0 ] char 
  3171 ;;  row             1    6[BANK0 ] char 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      unsigned char 
  3174 ;; Registers used:
  3175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3181 ;;      Params:         0       4       0       0       0
  3182 ;;      Locals:         0       3       0       0       0
  3183 ;;      Temps:          2       0       0       0       0
  3184 ;;      Totals:         2       7       0       0       0
  3185 ;;Total ram usage:        9 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    3
  3188 ;; This function calls:
  3189 ;;		_get_matrix_bit
  3190 ;; This function is called by:
  3191 ;;		_main
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           
  3196                           ;psect for function _hit_land
  3197  0998                     _hit_land:	
  3198                           
  3199                           ;incstack = 0
  3200                           ; Regs used in _hit_land: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3201                           ;hit_land@x stored from wreg
  3202  0998  1283               	bcf	3,5	;RP0=0, select bank0
  3203  0999  1303               	bcf	3,6	;RP1=0, select bank0
  3204  099A  00A4               	movwf	hit_land@x
  3205                           
  3206                           ;teris_16f886.c: 840: for(int8_t row = 4 - 1; row >= 0; row--)
  3207  099B  3003               	movlw	3
  3208  099C  00FC               	movwf	??_hit_land
  3209  099D  087C               	movf	??_hit_land,w
  3210  099E  00A6               	movwf	hit_land@row
  3211  099F  1BA6               	btfsc	hit_land@row,7
  3212  09A0  2A00               	goto	l4202
  3213  09A1                     l4174:	
  3214                           
  3215                           ;teris_16f886.c: 841: {
  3216                           ;teris_16f886.c: 842: for(int8_t col = 0; col < 4; col++)
  3217  09A1  01A5               	clrf	hit_land@col
  3218  09A2  0825               	movf	hit_land@col,w
  3219  09A3  3A80               	xorlw	128
  3220  09A4  3E7C               	addlw	-132
  3221  09A5  1803               	btfsc	3,0
  3222  09A6  29FA               	goto	l4198
  3223  09A7                     l4180:	
  3224                           
  3225                           ;teris_16f886.c: 843: {
  3226                           ;teris_16f886.c: 844: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  3227  09A7  0821               	movf	hit_land@matrix4x4,w
  3228  09A8  00F7               	movwf	get_matrix_bit@byte
  3229  09A9  0822               	movf	hit_land@matrix4x4+1,w
  3230  09AA  00F8               	movwf	get_matrix_bit@byte+1
  3231  09AB  0826               	movf	hit_land@row,w
  3232  09AC  00FC               	movwf	??_hit_land
  3233  09AD  087C               	movf	??_hit_land,w
  3234  09AE  00F9               	movwf	get_matrix_bit@row
  3235  09AF  0825               	movf	hit_land@col,w
  3236  09B0  00FD               	movwf	??_hit_land+1
  3237  09B1  087D               	movf	??_hit_land+1,w
  3238  09B2  00FA               	movwf	get_matrix_bit@col
  3239  09B3  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  3240  09B8  3A01               	xorlw	1
  3241  09B9  1D03               	skipz
  3242  09BA  29EF               	goto	l4194
  3243                           
  3244                           ;teris_16f886.c: 845: {
  3245                           ;teris_16f886.c: 846: if((y + row) >= (16 - 1))
  3246  09BB  1283               	bcf	3,5	;RP0=0, select bank0
  3247  09BC  1303               	bcf	3,6	;RP1=0, select bank0
  3248  09BD  0820               	movf	hit_land@y,w
  3249  09BE  0726               	addwf	hit_land@row,w
  3250  09BF  00FC               	movwf	??_hit_land
  3251  09C0  01FD               	clrf	??_hit_land+1
  3252  09C1  1803               	skipnc
  3253  09C2  0AFD               	incf	??_hit_land+1,f
  3254  09C3  1BA0               	btfsc	hit_land@y,7
  3255  09C4  03FD               	decf	??_hit_land+1,f
  3256  09C5  1BA6               	btfsc	hit_land@row,7
  3257  09C6  03FD               	decf	??_hit_land+1,f
  3258  09C7  087D               	movf	??_hit_land+1,w
  3259  09C8  3A80               	xorlw	128
  3260  09C9  00FF               	movwf	127
  3261  09CA  3080               	movlw	128
  3262  09CB  027F               	subwf	127,w
  3263  09CC  1D03               	skipz
  3264  09CD  29D0               	goto	u5305
  3265  09CE  300F               	movlw	15
  3266  09CF  027C               	subwf	??_hit_land,w
  3267  09D0                     u5305:	
  3268  09D0  1C03               	skipc
  3269  09D1  29D4               	goto	l4188
  3270                           
  3271                           ;teris_16f886.c: 847: {
  3272                           ;teris_16f886.c: 851: return 1;
  3273  09D2  3001               	movlw	1
  3274  09D3  0008               	return
  3275  09D4                     l4188:	
  3276                           
  3277                           ;teris_16f886.c: 852: }
  3278                           ;teris_16f886.c: 854: if(get_matrix_bit(matrix16x8->row, y + row + 1, x + col) == 1)
  3279  09D4  1283               	bcf	3,5	;RP0=0, select bank0
  3280  09D5  1303               	bcf	3,6	;RP1=0, select bank0
  3281  09D6  0823               	movf	hit_land@matrix16x8,w
  3282  09D7  00F7               	movwf	get_matrix_bit@byte
  3283  09D8  3000               	movlw	0
  3284  09D9  00F8               	movwf	get_matrix_bit@byte+1
  3285  09DA  0826               	movf	hit_land@row,w
  3286  09DB  0720               	addwf	hit_land@y,w
  3287  09DC  3E01               	addlw	1
  3288  09DD  00FC               	movwf	??_hit_land
  3289  09DE  087C               	movf	??_hit_land,w
  3290  09DF  00F9               	movwf	get_matrix_bit@row
  3291  09E0  0825               	movf	hit_land@col,w
  3292  09E1  0724               	addwf	hit_land@x,w
  3293  09E2  00FD               	movwf	??_hit_land+1
  3294  09E3  087D               	movf	??_hit_land+1,w
  3295  09E4  00FA               	movwf	get_matrix_bit@col
  3296  09E5  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  3297  09EA  3A01               	xorlw	1
  3298  09EB  1D03               	skipz
  3299  09EC  29EF               	goto	l4194
  3300                           
  3301                           ;teris_16f886.c: 855: {
  3302                           ;teris_16f886.c: 859: return 1;
  3303  09ED  3001               	movlw	1
  3304  09EE  0008               	return
  3305  09EF                     l4194:	
  3306  09EF  3001               	movlw	1
  3307  09F0  00FC               	movwf	??_hit_land
  3308  09F1  087C               	movf	??_hit_land,w
  3309  09F2  1283               	bcf	3,5	;RP0=0, select bank0
  3310  09F3  1303               	bcf	3,6	;RP1=0, select bank0
  3311  09F4  07A5               	addwf	hit_land@col,f
  3312  09F5  0825               	movf	hit_land@col,w
  3313  09F6  3A80               	xorlw	128
  3314  09F7  3E7C               	addlw	-132
  3315  09F8  1C03               	skipc
  3316  09F9  29A7               	goto	l4180
  3317  09FA                     l4198:	
  3318  09FA  30FF               	movlw	255
  3319  09FB  00FC               	movwf	??_hit_land
  3320  09FC  087C               	movf	??_hit_land,w
  3321  09FD  07A6               	addwf	hit_land@row,f
  3322  09FE  1FA6               	btfss	hit_land@row,7
  3323  09FF  29A1               	goto	l4174
  3324  0A00                     l4202:	
  3325                           
  3326                           ;teris_16f886.c: 860: }
  3327                           ;teris_16f886.c: 861: }
  3328                           ;teris_16f886.c: 862: }
  3329                           ;teris_16f886.c: 863: }
  3330                           ;teris_16f886.c: 867: return 0;
  3331  0A00  3000               	movlw	0
  3332  0A01  0008               	return
  3333  0A02                     __end_of_hit_land:	
  3334                           
  3335                           	psect	text9
  3336  000B                     __ptext9:	
  3337 ;; *************** function _find_best_solution *****************
  3338 ;; Defined at:
  3339 ;;		line 1259 in file "teris_16f886.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;		None
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;  temp_x          1   13[BANK1 ] char 
  3344 ;;  tem_sub_inde    1   12[BANK1 ] unsigned char 
  3345 ;;  temp_risk       2    9[BANK1 ] int 
  3346 ;;  temp_high       2    7[BANK1 ] unsigned int 
  3347 ;;  temp_pre_ris    2    0[BANK1 ] int 
  3348 ;;  temp_y          1   11[BANK1 ] char 
  3349 ;;  res             1    6[BANK1 ] unsigned char 
  3350 ;;  tem_pre_sub_    1    5[BANK1 ] char 
  3351 ;;  temp_pre_x      1    4[BANK1 ] char 
  3352 ;;  right_most_i    1    3[BANK1 ] char 
  3353 ;;  left_most_in    1    2[BANK1 ] char 
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      unsigned char 
  3356 ;; Registers used:
  3357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3363 ;;      Params:         0       0       0       0       0
  3364 ;;      Locals:         0       0      14       0       0
  3365 ;;      Temps:          0      18       0       0       0
  3366 ;;      Totals:         0      18      14       0       0
  3367 ;;Total ram usage:       32 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:    5
  3370 ;; This function calls:
  3371 ;;		___wmul
  3372 ;;		_debug_int1
  3373 ;;		_fall_off
  3374 ;;		_get_heavy
  3375 ;;		_get_high
  3376 ;;		_get_high_after_merge
  3377 ;;		_get_holes_after_merge
  3378 ;;		_get_num_of_orphan
  3379 ;;		_get_num_removed_rows
  3380 ;;		_is_valid
  3381 ;;		_left_most
  3382 ;;		_merge1
  3383 ;;		_right_most
  3384 ;; This function is called by:
  3385 ;;		_main
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           
  3390                           ;psect for function _find_best_solution
  3391  000B                     _find_best_solution:	
  3392                           
  3393                           ;teris_16f886.c: 1265: uint8_t res = 0;
  3394                           
  3395                           ;incstack = 0
  3396                           ; Regs used in _find_best_solution: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3397  000B  1683               	bsf	3,5	;RP0=1, select bank1
  3398  000C  1303               	bcf	3,6	;RP1=0, select bank1
  3399  000D  01D7               	clrf	find_best_solution@res^(0+128)
  3400                           
  3401                           ;teris_16f886.c: 1266: int8_t left_most_index, right_most_index;
  3402                           ;teris_16f886.c: 1268: int8_t temp_pre_x = 0xF, tem_pre_sub_index = 0xF;
  3403  000E  300F               	movlw	15
  3404  000F  1283               	bcf	3,5	;RP0=0, select bank0
  3405  0010  1303               	bcf	3,6	;RP1=0, select bank0
  3406  0011  00D8               	movwf	??_find_best_solution
  3407  0012  0858               	movf	??_find_best_solution,w
  3408  0013  1683               	bsf	3,5	;RP0=1, select bank1
  3409  0014  1303               	bcf	3,6	;RP1=0, select bank1
  3410  0015  00D5               	movwf	find_best_solution@temp_pre_x^(0+128)
  3411  0016  300F               	movlw	15
  3412  0017  1283               	bcf	3,5	;RP0=0, select bank0
  3413  0018  1303               	bcf	3,6	;RP1=0, select bank0
  3414  0019  00D8               	movwf	??_find_best_solution
  3415  001A  0858               	movf	??_find_best_solution,w
  3416  001B  1683               	bsf	3,5	;RP0=1, select bank1
  3417  001C  1303               	bcf	3,6	;RP1=0, select bank1
  3418  001D  00D6               	movwf	find_best_solution@tem_pre_sub_index^(0+128)
  3419                           
  3420                           ;teris_16f886.c: 1269: int16_t temp_pre_risk = -30000;
  3421  001E  30D0               	movlw	208
  3422  001F  00D1               	movwf	find_best_solution@temp_pre_risk^(0+128)
  3423  0020  308A               	movlw	138
  3424  0021  00D2               	movwf	(find_best_solution@temp_pre_risk^(0+128)+1)
  3425                           
  3426                           ;teris_16f886.c: 1270: int8_t temp_y;
  3427                           ;teris_16f886.c: 1271: int16_t temp_risk;
  3428                           ;teris_16f886.c: 1272: uint16_t temp_high;
  3429                           ;teris_16f886.c: 1275: for(uint8_t tem_sub_index = 0; tem_sub_index < g_char_info[g_char
      +                          _info_index].num; tem_sub_index++)
  3430  0022  01DD               	clrf	find_best_solution@tem_sub_index^(0+128)
  3431  0023                     l4300:	
  3432  0023  1403               	setc
  3433  0024  0D2A               	rlf	_g_char_info_index^(0+128),w
  3434  0025  3E12               	addlw	low (_g_char_info| (0+32768))
  3435  0026  0084               	movwf	4
  3436  0027  3088               	movlw	high (_g_char_info| (0+32768))
  3437  0028  1803               	skipnc
  3438  0029  3E01               	addlw	1
  3439  002A  1283               	bcf	3,5	;RP0=0, select bank0
  3440  002B  1303               	bcf	3,6	;RP1=0, select bank0
  3441  002C  00FF               	movwf	127
  3442  002D  120A  158A  2000  120A  118A  	fcall	stringtab
  3443  0032  1683               	bsf	3,5	;RP0=1, select bank1
  3444  0033  1303               	bcf	3,6	;RP1=0, select bank1
  3445  0034  025D               	subwf	find_best_solution@tem_sub_index^(0+128),w
  3446  0035  1803               	btfsc	3,0
  3447  0036  2AC9               	goto	l4302
  3448                           
  3449                           ;teris_16f886.c: 1276: {
  3450                           ;teris_16f886.c: 1277: temp_cur_matrix4x4 = &g_matrix4x4[g_char_info[g_char_info_index].
      +                          start_index + tem_sub_index];
  3451  0037  082A               	movf	_g_char_info_index^(0+128),w
  3452  0038  1283               	bcf	3,5	;RP0=0, select bank0
  3453  0039  1303               	bcf	3,6	;RP1=0, select bank0
  3454  003A  00D8               	movwf	??_find_best_solution
  3455  003B  0758               	addwf	??_find_best_solution,w
  3456  003C  3E12               	addlw	low (_g_char_info| (0+32768))
  3457  003D  0084               	movwf	4
  3458  003E  3088               	movlw	high (_g_char_info| (0+32768))
  3459  003F  1803               	skipnc
  3460  0040  3E01               	addlw	1
  3461  0041  00FF               	movwf	127
  3462  0042  120A  158A  2000  120A  118A  	fcall	stringtab
  3463  0047  1683               	bsf	3,5	;RP0=1, select bank1
  3464  0048  1303               	bcf	3,6	;RP1=0, select bank1
  3465  0049  075D               	addwf	find_best_solution@tem_sub_index^(0+128),w
  3466  004A  1283               	bcf	3,5	;RP0=0, select bank0
  3467  004B  1303               	bcf	3,6	;RP1=0, select bank0
  3468  004C  00D9               	movwf	??_find_best_solution+1
  3469  004D  3001               	movlw	1
  3470  004E                     u5445:	
  3471  004E  1003               	clrc
  3472  004F  0DD9               	rlf	??_find_best_solution+1,f
  3473  0050  3EFF               	addlw	-1
  3474  0051  1D03               	skipz
  3475  0052  284E               	goto	u5445
  3476  0053  1003               	clrc
  3477  0054  0D59               	rlf	??_find_best_solution+1,w
  3478  0055  3E42               	addlw	low (_g_matrix4x4| (0+32768))
  3479  0056  00DA               	movwf	??_find_best_solution+2
  3480  0057  3088               	movlw	high (_g_matrix4x4| (0+32768))
  3481  0058  1803               	skipnc
  3482  0059  3E01               	addlw	1
  3483  005A  00DB               	movwf	??_find_best_solution+3
  3484  005B  085A               	movf	??_find_best_solution+2,w
  3485  005C  1683               	bsf	3,5	;RP0=1, select bank1
  3486  005D  1303               	bcf	3,6	;RP1=0, select bank1
  3487  005E  00A7               	movwf	_temp_cur_matrix4x4^(0+128)
  3488  005F  1283               	bcf	3,5	;RP0=0, select bank0
  3489  0060  1303               	bcf	3,6	;RP1=0, select bank0
  3490  0061  085B               	movf	??_find_best_solution+3,w
  3491  0062  1683               	bsf	3,5	;RP0=1, select bank1
  3492  0063  1303               	bcf	3,6	;RP1=0, select bank1
  3493  0064  00A8               	movwf	(_temp_cur_matrix4x4+1)^(0+128)
  3494                           
  3495                           ;teris_16f886.c: 1278: left_most_index = left_most(cur_x, temp_cur_matrix4x4, &g_matrix1
      +                          6x8);
  3496  0065  0827               	movf	_temp_cur_matrix4x4^(0+128),w
  3497  0066  1283               	bcf	3,5	;RP0=0, select bank0
  3498  0067  1303               	bcf	3,6	;RP1=0, select bank0
  3499  0068  00AB               	movwf	left_most@matrix4x4
  3500  0069  1683               	bsf	3,5	;RP0=1, select bank1
  3501  006A  1303               	bcf	3,6	;RP1=0, select bank1
  3502  006B  0828               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  3503  006C  1283               	bcf	3,5	;RP0=0, select bank0
  3504  006D  1303               	bcf	3,6	;RP1=0, select bank0
  3505  006E  00AC               	movwf	left_most@matrix4x4+1
  3506  006F  30C1               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3507  0070  00D8               	movwf	??_find_best_solution
  3508  0071  0858               	movf	??_find_best_solution,w
  3509  0072  00AD               	movwf	left_most@matrix16x8
  3510  0073  1683               	bsf	3,5	;RP0=1, select bank1
  3511  0074  1303               	bcf	3,6	;RP1=0, select bank1
  3512  0075  0840               	movf	_cur_x^(0+128),w
  3513  0076  160A  118A  212B  120A  118A  	fcall	_left_most
  3514  007B  1283               	bcf	3,5	;RP0=0, select bank0
  3515  007C  1303               	bcf	3,6	;RP1=0, select bank0
  3516  007D  00D9               	movwf	??_find_best_solution+1
  3517  007E  0859               	movf	??_find_best_solution+1,w
  3518  007F  1683               	bsf	3,5	;RP0=1, select bank1
  3519  0080  1303               	bcf	3,6	;RP1=0, select bank1
  3520  0081  00D3               	movwf	find_best_solution@left_most_index^(0+128)
  3521                           
  3522                           ;teris_16f886.c: 1279: right_most_index = right_most(cur_x, temp_cur_matrix4x4, &g_matri
      +                          x16x8);
  3523  0082  0827               	movf	_temp_cur_matrix4x4^(0+128),w
  3524  0083  1283               	bcf	3,5	;RP0=0, select bank0
  3525  0084  1303               	bcf	3,6	;RP1=0, select bank0
  3526  0085  00A6               	movwf	right_most@matrix4x4
  3527  0086  1683               	bsf	3,5	;RP0=1, select bank1
  3528  0087  1303               	bcf	3,6	;RP1=0, select bank1
  3529  0088  0828               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  3530  0089  1283               	bcf	3,5	;RP0=0, select bank0
  3531  008A  1303               	bcf	3,6	;RP1=0, select bank0
  3532  008B  00A7               	movwf	right_most@matrix4x4+1
  3533  008C  30C1               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3534  008D  00D8               	movwf	??_find_best_solution
  3535  008E  0858               	movf	??_find_best_solution,w
  3536  008F  00A8               	movwf	right_most@matrix16x8
  3537  0090  1683               	bsf	3,5	;RP0=1, select bank1
  3538  0091  1303               	bcf	3,6	;RP1=0, select bank1
  3539  0092  0840               	movf	_cur_x^(0+128),w
  3540  0093  160A  118A  2165  120A  118A  	fcall	_right_most
  3541  0098  1283               	bcf	3,5	;RP0=0, select bank0
  3542  0099  1303               	bcf	3,6	;RP1=0, select bank0
  3543  009A  00D9               	movwf	??_find_best_solution+1
  3544  009B  0859               	movf	??_find_best_solution+1,w
  3545  009C  1683               	bsf	3,5	;RP0=1, select bank1
  3546  009D  1303               	bcf	3,6	;RP1=0, select bank1
  3547  009E  00D4               	movwf	find_best_solution@right_most_index^(0+128)
  3548                           
  3549                           ;teris_16f886.c: 1281: for(int8_t temp_x = left_most_index; temp_x <= right_most_index; 
      +                          temp_x++)
  3550  009F  0853               	movf	find_best_solution@left_most_index^(0+128),w
  3551  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  3552  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  3553  00A2  00D8               	movwf	??_find_best_solution
  3554  00A3  0858               	movf	??_find_best_solution,w
  3555  00A4  1683               	bsf	3,5	;RP0=1, select bank1
  3556  00A5  1303               	bcf	3,6	;RP1=0, select bank1
  3557  00A6  00DE               	movwf	find_best_solution@temp_x^(0+128)
  3558  00A7                     l4296:	
  3559  00A7  0854               	movf	find_best_solution@right_most_index^(0+128),w
  3560  00A8  3A80               	xorlw	128
  3561  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  3562  00AA  1303               	bcf	3,6	;RP1=0, select bank0
  3563  00AB  00D8               	movwf	??_find_best_solution
  3564  00AC  1683               	bsf	3,5	;RP0=1, select bank1
  3565  00AD  1303               	bcf	3,6	;RP1=0, select bank1
  3566  00AE  085E               	movf	find_best_solution@temp_x^(0+128),w
  3567  00AF  3A80               	xorlw	128
  3568  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  3569  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  3570  00B2  02D8               	subwf	??_find_best_solution,f
  3571  00B3  1C03               	btfss	3,0
  3572  00B4  2AC2               	goto	l4298
  3573                           
  3574                           ;teris_16f886.c: 1282: {
  3575                           ;teris_16f886.c: 1283: temp_y = fall_off(temp_x, cur_y, temp_cur_matrix4x4, &g_matrix16x
      +                          8);
  3576  00B5  1683               	bsf	3,5	;RP0=1, select bank1
  3577  00B6  1303               	bcf	3,6	;RP1=0, select bank1
  3578  00B7  0829               	movf	_cur_y^(0+128),w
  3579  00B8  1283               	bcf	3,5	;RP0=0, select bank0
  3580  00B9  1303               	bcf	3,6	;RP1=0, select bank0
  3581  00BA  00D8               	movwf	??_find_best_solution
  3582  00BB  0858               	movf	??_find_best_solution,w
  3583  00BC  00A0               	movwf	fall_off@y
  3584  00BD  1683               	bsf	3,5	;RP0=1, select bank1
  3585  00BE  1303               	bcf	3,6	;RP1=0, select bank1
  3586  00BF  0827               	movf	_temp_cur_matrix4x4^(0+128),w
  3587  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  3588  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  3589  00C2  00A1               	movwf	fall_off@matrix4x4
  3590  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  3591  00C4  1303               	bcf	3,6	;RP1=0, select bank1
  3592  00C5  0828               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  3593  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  3594  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  3595  00C8  00A2               	movwf	fall_off@matrix4x4+1
  3596  00C9  30C1               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3597  00CA  00D9               	movwf	??_find_best_solution+1
  3598  00CB  0859               	movf	??_find_best_solution+1,w
  3599  00CC  00A3               	movwf	fall_off@matrix16x8
  3600  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  3601  00CE  1303               	bcf	3,6	;RP1=0, select bank1
  3602  00CF  085E               	movf	find_best_solution@temp_x^(0+128),w
  3603  00D0  160A  118A  278F  120A  118A  	fcall	_fall_off
  3604  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  3605  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  3606  00D7  00DA               	movwf	??_find_best_solution+2
  3607  00D8  085A               	movf	??_find_best_solution+2,w
  3608  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  3609  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  3610  00DB  00DC               	movwf	find_best_solution@temp_y^(0+128)
  3611                           
  3612                           ;teris_16f886.c: 1290: if(is_valid(temp_x, temp_y, temp_cur_matrix4x4, &g_matrix16x8) ==
      +                           0)
  3613  00DC  085C               	movf	find_best_solution@temp_y^(0+128),w
  3614  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  3615  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  3616  00DF  00D8               	movwf	??_find_best_solution
  3617  00E0  0858               	movf	??_find_best_solution,w
  3618  00E1  00A0               	movwf	is_valid@y
  3619  00E2  1683               	bsf	3,5	;RP0=1, select bank1
  3620  00E3  1303               	bcf	3,6	;RP1=0, select bank1
  3621  00E4  0827               	movf	_temp_cur_matrix4x4^(0+128),w
  3622  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  3623  00E6  1303               	bcf	3,6	;RP1=0, select bank0
  3624  00E7  00A1               	movwf	is_valid@matrix4x4
  3625  00E8  1683               	bsf	3,5	;RP0=1, select bank1
  3626  00E9  1303               	bcf	3,6	;RP1=0, select bank1
  3627  00EA  0828               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  3628  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  3629  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  3630  00ED  00A2               	movwf	is_valid@matrix4x4+1
  3631  00EE  30C1               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3632  00EF  00D9               	movwf	??_find_best_solution+1
  3633  00F0  0859               	movf	??_find_best_solution+1,w
  3634  00F1  00A3               	movwf	is_valid@matrix16x8
  3635  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  3636  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  3637  00F4  085E               	movf	find_best_solution@temp_x^(0+128),w
  3638  00F5  120A  158A  2385  120A  118A  	fcall	_is_valid
  3639  00FA  3A00               	xorlw	0
  3640  00FB  1903               	btfsc	3,2
  3641  00FC  2AB9               	goto	l4294
  3642                           
  3643                           ;teris_16f886.c: 1293: }
  3644                           ;teris_16f886.c: 1294: res = 1;
  3645                           
  3646                           ;teris_16f886.c: 1291: {
  3647                           ;teris_16f886.c: 1292: continue;
  3648  00FD  1683               	bsf	3,5	;RP0=1, select bank1
  3649  00FE  1303               	bcf	3,6	;RP1=0, select bank1
  3650  00FF  01D7               	clrf	find_best_solution@res^(0+128)
  3651  0100  0AD7               	incf	find_best_solution@res^(0+128),f
  3652                           
  3653                           ;teris_16f886.c: 1295: merge1(temp_x, temp_y, temp_cur_matrix4x4, &g_matrix16x8, &temp_m
      +                          atrix16x8);
  3654  0101  085C               	movf	find_best_solution@temp_y^(0+128),w
  3655  0102  1283               	bcf	3,5	;RP0=0, select bank0
  3656  0103  1303               	bcf	3,6	;RP1=0, select bank0
  3657  0104  00D8               	movwf	??_find_best_solution
  3658  0105  0858               	movf	??_find_best_solution,w
  3659  0106  00A0               	movwf	merge1@y
  3660  0107  1683               	bsf	3,5	;RP0=1, select bank1
  3661  0108  1303               	bcf	3,6	;RP1=0, select bank1
  3662  0109  0827               	movf	_temp_cur_matrix4x4^(0+128),w
  3663  010A  1283               	bcf	3,5	;RP0=0, select bank0
  3664  010B  1303               	bcf	3,6	;RP1=0, select bank0
  3665  010C  00A1               	movwf	merge1@matrix4x4
  3666  010D  1683               	bsf	3,5	;RP0=1, select bank1
  3667  010E  1303               	bcf	3,6	;RP1=0, select bank1
  3668  010F  0828               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  3669  0110  1283               	bcf	3,5	;RP0=0, select bank0
  3670  0111  1303               	bcf	3,6	;RP1=0, select bank0
  3671  0112  00A2               	movwf	merge1@matrix4x4+1
  3672  0113  30C1               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3673  0114  00D9               	movwf	??_find_best_solution+1
  3674  0115  0859               	movf	??_find_best_solution+1,w
  3675  0116  00A3               	movwf	merge1@matrix16x8_in
  3676  0117  30AC               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3677  0118  00DA               	movwf	??_find_best_solution+2
  3678  0119  085A               	movf	??_find_best_solution+2,w
  3679  011A  00A4               	movwf	merge1@matrix16x8_out
  3680  011B  1683               	bsf	3,5	;RP0=1, select bank1
  3681  011C  1303               	bcf	3,6	;RP1=0, select bank1
  3682  011D  085E               	movf	find_best_solution@temp_x^(0+128),w
  3683  011E  160A  118A  2669  120A  118A  	fcall	_merge1
  3684                           
  3685                           ;teris_16f886.c: 1296: temp_high = get_high_after_merge(temp_y, temp_cur_matrix4x4);
  3686  0123  1683               	bsf	3,5	;RP0=1, select bank1
  3687  0124  1303               	bcf	3,6	;RP1=0, select bank1
  3688  0125  0827               	movf	_temp_cur_matrix4x4^(0+128),w
  3689  0126  00FC               	movwf	get_high_after_merge@matrix
  3690  0127  0828               	movf	(_temp_cur_matrix4x4+1)^(0+128),w
  3691  0128  00FD               	movwf	get_high_after_merge@matrix+1
  3692  0129  085C               	movf	find_best_solution@temp_y^(0+128),w
  3693  012A  160A  118A  235B  120A  118A  	fcall	_get_high_after_merge
  3694  012F  1283               	bcf	3,5	;RP0=0, select bank0
  3695  0130  1303               	bcf	3,6	;RP1=0, select bank0
  3696  0131  00D8               	movwf	??_find_best_solution
  3697  0132  01D9               	clrf	??_find_best_solution+1
  3698  0133  0858               	movf	??_find_best_solution,w
  3699  0134  1683               	bsf	3,5	;RP0=1, select bank1
  3700  0135  1303               	bcf	3,6	;RP1=0, select bank1
  3701  0136  00D8               	movwf	find_best_solution@temp_high^(0+128)
  3702  0137  1283               	bcf	3,5	;RP0=0, select bank0
  3703  0138  1303               	bcf	3,6	;RP1=0, select bank0
  3704  0139  0859               	movf	??_find_best_solution+1,w
  3705  013A  1683               	bsf	3,5	;RP0=1, select bank1
  3706  013B  1303               	bcf	3,6	;RP1=0, select bank1
  3707  013C  00D9               	movwf	(find_best_solution@temp_high+1)^(0+128)
  3708                           
  3709                           ;teris_16f886.c: 1297: if((get_high(&g_matrix16x8) <= 16/2 + 1)
  3710                           ;teris_16f886.c: 1298: && (temp_high <= 16/2 + 1))
  3711  013D  30C1               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3712  013E  160A  118A  21A6  120A  118A  	fcall	_get_high
  3713  0143  1283               	bcf	3,5	;RP0=0, select bank0
  3714  0144  1303               	bcf	3,6	;RP1=0, select bank0
  3715  0145  00D8               	movwf	??_find_best_solution
  3716  0146  300A               	movlw	10
  3717  0147  0258               	subwf	??_find_best_solution,w
  3718  0148  1803               	skipnc
  3719  0149  29DE               	goto	l4288
  3720  014A  3000               	movlw	0
  3721  014B  1683               	bsf	3,5	;RP0=1, select bank1
  3722  014C  1303               	bcf	3,6	;RP1=0, select bank1
  3723  014D  0259               	subwf	(find_best_solution@temp_high+1)^(0+128),w
  3724  014E  300A               	movlw	10
  3725  014F  1903               	skipnz
  3726  0150  0258               	subwf	find_best_solution@temp_high^(0+128),w
  3727  0151  1803               	skipnc
  3728  0152  29DE               	goto	l4288
  3729                           
  3730                           ;teris_16f886.c: 1299: {
  3731                           ;teris_16f886.c: 1300: temp_risk = (((int16_t)get_num_removed_rows(&temp_matrix16x8)) <<
      +                           10)
  3732                           ;teris_16f886.c: 1301: - get_num_of_orphan(&temp_matrix16x8)*4
  3733                           ;teris_16f886.c: 1302: - temp_high*3
  3734                           ;teris_16f886.c: 1303: - get_holes_after_merge(&temp_matrix16x8)*2
  3735                           ;teris_16f886.c: 1304: - get_heavy(&temp_matrix16x8);
  3736  0153  30AC               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3737  0154  120A  158A  2275  120A  118A  	fcall	_get_heavy
  3738  0159  097C               	comf	?_get_heavy,w
  3739  015A  1283               	bcf	3,5	;RP0=0, select bank0
  3740  015B  1303               	bcf	3,6	;RP1=0, select bank0
  3741  015C  00D8               	movwf	??_find_best_solution
  3742  015D  097D               	comf	?_get_heavy+1,w
  3743  015E  00D9               	movwf	??_find_best_solution+1
  3744  015F  0AD8               	incf	??_find_best_solution,f
  3745  0160  1903               	skipnz
  3746  0161  0AD9               	incf	??_find_best_solution+1,f
  3747  0162  30AC               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3748  0163  120A  158A  259D  120A  118A  	fcall	_get_holes_after_merge
  3749  0168  1283               	bcf	3,5	;RP0=0, select bank0
  3750  0169  1303               	bcf	3,6	;RP1=0, select bank0
  3751  016A  00DA               	movwf	??_find_best_solution+2
  3752  016B  01DB               	clrf	??_find_best_solution+3
  3753  016C  1003               	clrc
  3754  016D  0DDA               	rlf	??_find_best_solution+2,f
  3755  016E  0DDB               	rlf	??_find_best_solution+3,f
  3756  016F  09DA               	comf	??_find_best_solution+2,f
  3757  0170  09DB               	comf	??_find_best_solution+3,f
  3758  0171  0ADA               	incf	??_find_best_solution+2,f
  3759  0172  1903               	skipnz
  3760  0173  0ADB               	incf	??_find_best_solution+3,f
  3761  0174  1683               	bsf	3,5	;RP0=1, select bank1
  3762  0175  1303               	bcf	3,6	;RP1=0, select bank1
  3763  0176  0859               	movf	(find_best_solution@temp_high+1)^(0+128),w
  3764  0177  1283               	bcf	3,5	;RP0=0, select bank0
  3765  0178  1303               	bcf	3,6	;RP1=0, select bank0
  3766  0179  00AD               	movwf	___wmul@multiplier+1
  3767  017A  1683               	bsf	3,5	;RP0=1, select bank1
  3768  017B  1303               	bcf	3,6	;RP1=0, select bank1
  3769  017C  0858               	movf	find_best_solution@temp_high^(0+128),w
  3770  017D  1283               	bcf	3,5	;RP0=0, select bank0
  3771  017E  1303               	bcf	3,6	;RP1=0, select bank0
  3772  017F  00AC               	movwf	___wmul@multiplier
  3773  0180  3003               	movlw	3
  3774  0181  00AE               	movwf	___wmul@multiplicand
  3775  0182  3000               	movlw	0
  3776  0183  00AF               	movwf	___wmul@multiplicand+1
  3777  0184  160A  118A  21C8  120A  118A  	fcall	___wmul
  3778  0189  1283               	bcf	3,5	;RP0=0, select bank0
  3779  018A  1303               	bcf	3,6	;RP1=0, select bank0
  3780  018B  092C               	comf	?___wmul,w
  3781  018C  00DC               	movwf	??_find_best_solution+4
  3782  018D  092D               	comf	?___wmul+1,w
  3783  018E  00DD               	movwf	??_find_best_solution+5
  3784  018F  0ADC               	incf	??_find_best_solution+4,f
  3785  0190  1903               	skipnz
  3786  0191  0ADD               	incf	??_find_best_solution+5,f
  3787  0192  30AC               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3788  0193  160A  118A  26C1  120A  118A  	fcall	_get_num_of_orphan
  3789  0198  087C               	movf	?_get_num_of_orphan,w
  3790  0199  1283               	bcf	3,5	;RP0=0, select bank0
  3791  019A  1303               	bcf	3,6	;RP1=0, select bank0
  3792  019B  00DE               	movwf	??_find_best_solution+6
  3793  019C  087D               	movf	?_get_num_of_orphan+1,w
  3794  019D  00DF               	movwf	??_find_best_solution+7
  3795  019E  1003               	clrc
  3796  019F  0DDE               	rlf	??_find_best_solution+6,f
  3797  01A0  0DDF               	rlf	??_find_best_solution+7,f
  3798  01A1  1003               	clrc
  3799  01A2  0DDE               	rlf	??_find_best_solution+6,f
  3800  01A3  0DDF               	rlf	??_find_best_solution+7,f
  3801  01A4  09DE               	comf	??_find_best_solution+6,f
  3802  01A5  09DF               	comf	??_find_best_solution+7,f
  3803  01A6  0ADE               	incf	??_find_best_solution+6,f
  3804  01A7  1903               	skipnz
  3805  01A8  0ADF               	incf	??_find_best_solution+7,f
  3806  01A9  30AC               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3807  01AA  160A  118A  2321  120A  118A  	fcall	_get_num_removed_rows
  3808  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  3809  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  3810  01B1  00E0               	movwf	??_find_best_solution+8
  3811  01B2  01E1               	clrf	??_find_best_solution+9
  3812  01B3  300A               	movlw	10
  3813  01B4  00FF               	movwf	127
  3814  01B5                     u5485:	
  3815  01B5  1003               	clrc
  3816  01B6  0DE0               	rlf	??_find_best_solution+8,f
  3817  01B7  0DE1               	rlf	??_find_best_solution+9,f
  3818  01B8  0BFF               	decfsz	127,f
  3819  01B9  29B5               	goto	u5485
  3820  01BA  085E               	movf	??_find_best_solution+6,w
  3821  01BB  0760               	addwf	??_find_best_solution+8,w
  3822  01BC  00E2               	movwf	??_find_best_solution+10
  3823  01BD  085F               	movf	??_find_best_solution+7,w
  3824  01BE  1803               	skipnc
  3825  01BF  0A5F               	incf	??_find_best_solution+7,w
  3826  01C0  0761               	addwf	??_find_best_solution+9,w
  3827  01C1  00E3               	movwf	??_find_best_solution+11
  3828  01C2  085C               	movf	??_find_best_solution+4,w
  3829  01C3  0762               	addwf	??_find_best_solution+10,w
  3830  01C4  00E4               	movwf	??_find_best_solution+12
  3831  01C5  085D               	movf	??_find_best_solution+5,w
  3832  01C6  1803               	skipnc
  3833  01C7  0A5D               	incf	??_find_best_solution+5,w
  3834  01C8  0763               	addwf	??_find_best_solution+11,w
  3835  01C9  00E5               	movwf	??_find_best_solution+13
  3836  01CA  085A               	movf	??_find_best_solution+2,w
  3837  01CB  0764               	addwf	??_find_best_solution+12,w
  3838  01CC  00E6               	movwf	??_find_best_solution+14
  3839  01CD  085B               	movf	??_find_best_solution+3,w
  3840  01CE  1803               	skipnc
  3841  01CF  0A5B               	incf	??_find_best_solution+3,w
  3842  01D0  0765               	addwf	??_find_best_solution+13,w
  3843  01D1  00E7               	movwf	??_find_best_solution+15
  3844  01D2  0858               	movf	??_find_best_solution,w
  3845  01D3  0766               	addwf	??_find_best_solution+14,w
  3846  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  3847  01D5  1303               	bcf	3,6	;RP1=0, select bank1
  3848  01D6  00DA               	movwf	find_best_solution@temp_risk^(0+128)
  3849  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  3850  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  3851  01D9  0859               	movf	??_find_best_solution+1,w
  3852  01DA  1803               	skipnc
  3853  01DB  0A59               	incf	??_find_best_solution+1,w
  3854  01DC  0767               	addwf	??_find_best_solution+15,w
  3855  01DD  2A73               	goto	L4
  3856  01DE                     l4288:	
  3857                           ;teris_16f886.c: 1305: }
  3858                           
  3859                           
  3860                           ;teris_16f886.c: 1306: else
  3861                           ;teris_16f886.c: 1307: {
  3862                           ;teris_16f886.c: 1308: temp_risk = (((int16_t)get_num_removed_rows(&temp_matrix16x8)) <<
      +                           10)
  3863                           ;teris_16f886.c: 1309: - get_num_of_orphan(&temp_matrix16x8)*2
  3864                           ;teris_16f886.c: 1310: - temp_high*5
  3865                           ;teris_16f886.c: 1311: - get_holes_after_merge(&temp_matrix16x8)*3
  3866                           ;teris_16f886.c: 1312: - get_heavy(&temp_matrix16x8);
  3867  01DE  30AC               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3868  01DF  120A  158A  2275  120A  118A  	fcall	_get_heavy
  3869  01E4  097C               	comf	?_get_heavy,w
  3870  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  3871  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  3872  01E7  00D8               	movwf	??_find_best_solution
  3873  01E8  097D               	comf	?_get_heavy+1,w
  3874  01E9  00D9               	movwf	??_find_best_solution+1
  3875  01EA  0AD8               	incf	??_find_best_solution,f
  3876  01EB  1903               	skipnz
  3877  01EC  0AD9               	incf	??_find_best_solution+1,f
  3878  01ED  30AC               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3879  01EE  120A  158A  259D  120A  118A  	fcall	_get_holes_after_merge
  3880  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  3881  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  3882  01F5  00DA               	movwf	??_find_best_solution+2
  3883  01F6  01DB               	clrf	??_find_best_solution+3
  3884  01F7  085A               	movf	??_find_best_solution+2,w
  3885  01F8  00AC               	movwf	___wmul@multiplier
  3886  01F9  085B               	movf	??_find_best_solution+3,w
  3887  01FA  00AD               	movwf	___wmul@multiplier+1
  3888  01FB  3003               	movlw	3
  3889  01FC  00AE               	movwf	___wmul@multiplicand
  3890  01FD  3000               	movlw	0
  3891  01FE  00AF               	movwf	___wmul@multiplicand+1
  3892  01FF  160A  118A  21C8  120A  118A  	fcall	___wmul
  3893  0204  1283               	bcf	3,5	;RP0=0, select bank0
  3894  0205  1303               	bcf	3,6	;RP1=0, select bank0
  3895  0206  092C               	comf	?___wmul,w
  3896  0207  00DC               	movwf	??_find_best_solution+4
  3897  0208  092D               	comf	?___wmul+1,w
  3898  0209  00DD               	movwf	??_find_best_solution+5
  3899  020A  0ADC               	incf	??_find_best_solution+4,f
  3900  020B  1903               	skipnz
  3901  020C  0ADD               	incf	??_find_best_solution+5,f
  3902  020D  1683               	bsf	3,5	;RP0=1, select bank1
  3903  020E  1303               	bcf	3,6	;RP1=0, select bank1
  3904  020F  0859               	movf	(find_best_solution@temp_high+1)^(0+128),w
  3905  0210  1283               	bcf	3,5	;RP0=0, select bank0
  3906  0211  1303               	bcf	3,6	;RP1=0, select bank0
  3907  0212  00AD               	movwf	___wmul@multiplier+1
  3908  0213  1683               	bsf	3,5	;RP0=1, select bank1
  3909  0214  1303               	bcf	3,6	;RP1=0, select bank1
  3910  0215  0858               	movf	find_best_solution@temp_high^(0+128),w
  3911  0216  1283               	bcf	3,5	;RP0=0, select bank0
  3912  0217  1303               	bcf	3,6	;RP1=0, select bank0
  3913  0218  00AC               	movwf	___wmul@multiplier
  3914  0219  3005               	movlw	5
  3915  021A  00AE               	movwf	___wmul@multiplicand
  3916  021B  3000               	movlw	0
  3917  021C  00AF               	movwf	___wmul@multiplicand+1
  3918  021D  160A  118A  21C8  120A  118A  	fcall	___wmul
  3919  0222  1283               	bcf	3,5	;RP0=0, select bank0
  3920  0223  1303               	bcf	3,6	;RP1=0, select bank0
  3921  0224  092C               	comf	?___wmul,w
  3922  0225  00DE               	movwf	??_find_best_solution+6
  3923  0226  092D               	comf	?___wmul+1,w
  3924  0227  00DF               	movwf	??_find_best_solution+7
  3925  0228  0ADE               	incf	??_find_best_solution+6,f
  3926  0229  1903               	skipnz
  3927  022A  0ADF               	incf	??_find_best_solution+7,f
  3928  022B  30AC               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3929  022C  160A  118A  26C1  120A  118A  	fcall	_get_num_of_orphan
  3930  0231  087C               	movf	?_get_num_of_orphan,w
  3931  0232  1283               	bcf	3,5	;RP0=0, select bank0
  3932  0233  1303               	bcf	3,6	;RP1=0, select bank0
  3933  0234  00E0               	movwf	??_find_best_solution+8
  3934  0235  087D               	movf	?_get_num_of_orphan+1,w
  3935  0236  00E1               	movwf	??_find_best_solution+9
  3936  0237  1003               	clrc
  3937  0238  0DE0               	rlf	??_find_best_solution+8,f
  3938  0239  0DE1               	rlf	??_find_best_solution+9,f
  3939  023A  09E0               	comf	??_find_best_solution+8,f
  3940  023B  09E1               	comf	??_find_best_solution+9,f
  3941  023C  0AE0               	incf	??_find_best_solution+8,f
  3942  023D  1903               	skipnz
  3943  023E  0AE1               	incf	??_find_best_solution+9,f
  3944  023F  30AC               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3945  0240  160A  118A  2321  120A  118A  	fcall	_get_num_removed_rows
  3946  0245  1283               	bcf	3,5	;RP0=0, select bank0
  3947  0246  1303               	bcf	3,6	;RP1=0, select bank0
  3948  0247  00E2               	movwf	??_find_best_solution+10
  3949  0248  01E3               	clrf	??_find_best_solution+11
  3950  0249  300A               	movlw	10
  3951  024A  00FF               	movwf	127
  3952  024B                     u5495:	
  3953  024B  1003               	clrc
  3954  024C  0DE2               	rlf	??_find_best_solution+10,f
  3955  024D  0DE3               	rlf	??_find_best_solution+11,f
  3956  024E  0BFF               	decfsz	127,f
  3957  024F  2A4B               	goto	u5495
  3958  0250  0860               	movf	??_find_best_solution+8,w
  3959  0251  0762               	addwf	??_find_best_solution+10,w
  3960  0252  00E4               	movwf	??_find_best_solution+12
  3961  0253  0861               	movf	??_find_best_solution+9,w
  3962  0254  1803               	skipnc
  3963  0255  0A61               	incf	??_find_best_solution+9,w
  3964  0256  0763               	addwf	??_find_best_solution+11,w
  3965  0257  00E5               	movwf	??_find_best_solution+13
  3966  0258  085E               	movf	??_find_best_solution+6,w
  3967  0259  0764               	addwf	??_find_best_solution+12,w
  3968  025A  00E6               	movwf	??_find_best_solution+14
  3969  025B  085F               	movf	??_find_best_solution+7,w
  3970  025C  1803               	skipnc
  3971  025D  0A5F               	incf	??_find_best_solution+7,w
  3972  025E  0765               	addwf	??_find_best_solution+13,w
  3973  025F  00E7               	movwf	??_find_best_solution+15
  3974  0260  085C               	movf	??_find_best_solution+4,w
  3975  0261  0766               	addwf	??_find_best_solution+14,w
  3976  0262  00E8               	movwf	??_find_best_solution+16
  3977  0263  085D               	movf	??_find_best_solution+5,w
  3978  0264  1803               	skipnc
  3979  0265  0A5D               	incf	??_find_best_solution+5,w
  3980  0266  0767               	addwf	??_find_best_solution+15,w
  3981  0267  00E9               	movwf	??_find_best_solution+17
  3982  0268  0858               	movf	??_find_best_solution,w
  3983  0269  0768               	addwf	??_find_best_solution+16,w
  3984  026A  1683               	bsf	3,5	;RP0=1, select bank1
  3985  026B  1303               	bcf	3,6	;RP1=0, select bank1
  3986  026C  00DA               	movwf	find_best_solution@temp_risk^(0+128)
  3987  026D  1283               	bcf	3,5	;RP0=0, select bank0
  3988  026E  1303               	bcf	3,6	;RP1=0, select bank0
  3989  026F  0859               	movf	??_find_best_solution+1,w
  3990  0270  1803               	skipnc
  3991  0271  0A59               	incf	??_find_best_solution+1,w
  3992  0272  0769               	addwf	??_find_best_solution+17,w
  3993  0273                     L4:	
  3994  0273  1683               	bsf	3,5	;RP0=1, select bank1
  3995  0274  1303               	bcf	3,6	;RP1=0, select bank1
  3996  0275  00DB               	movwf	(find_best_solution@temp_risk+1)^(0+128)
  3997                           
  3998                           ;teris_16f886.c: 1313: }
  3999                           ;teris_16f886.c: 1320: debug_int1("temp_risk = %d", temp_risk);
  4000  0276  306A               	movlw	low (STR_23| (0+32768))
  4001  0277  1283               	bcf	3,5	;RP0=0, select bank0
  4002  0278  1303               	bcf	3,6	;RP1=0, select bank0
  4003  0279  00CF               	movwf	debug_int1@f
  4004  027A  3089               	movlw	high (STR_23| (0+32768))
  4005  027B  00D0               	movwf	debug_int1@f+1
  4006  027C  1683               	bsf	3,5	;RP0=1, select bank1
  4007  027D  1303               	bcf	3,6	;RP1=0, select bank1
  4008  027E  085B               	movf	(find_best_solution@temp_risk+1)^(0+128),w
  4009  027F  1283               	bcf	3,5	;RP0=0, select bank0
  4010  0280  1303               	bcf	3,6	;RP1=0, select bank0
  4011  0281  00D2               	movwf	debug_int1@i+1
  4012  0282  1683               	bsf	3,5	;RP0=1, select bank1
  4013  0283  1303               	bcf	3,6	;RP1=0, select bank1
  4014  0284  085A               	movf	find_best_solution@temp_risk^(0+128),w
  4015  0285  1283               	bcf	3,5	;RP0=0, select bank0
  4016  0286  1303               	bcf	3,6	;RP1=0, select bank0
  4017  0287  00D1               	movwf	debug_int1@i
  4018  0288  160A  118A  2185  120A  118A  	fcall	_debug_int1
  4019                           
  4020                           ;teris_16f886.c: 1322: if(temp_risk > temp_pre_risk)
  4021  028D  1683               	bsf	3,5	;RP0=1, select bank1
  4022  028E  1303               	bcf	3,6	;RP1=0, select bank1
  4023  028F  0852               	movf	(find_best_solution@temp_pre_risk+1)^(0+128),w
  4024  0290  3A80               	xorlw	128
  4025  0291  1283               	bcf	3,5	;RP0=0, select bank0
  4026  0292  1303               	bcf	3,6	;RP1=0, select bank0
  4027  0293  00D8               	movwf	??_find_best_solution
  4028  0294  1683               	bsf	3,5	;RP0=1, select bank1
  4029  0295  1303               	bcf	3,6	;RP1=0, select bank1
  4030  0296  085B               	movf	(find_best_solution@temp_risk+1)^(0+128),w
  4031  0297  3A80               	xorlw	128
  4032  0298  1283               	bcf	3,5	;RP0=0, select bank0
  4033  0299  1303               	bcf	3,6	;RP1=0, select bank0
  4034  029A  0258               	subwf	??_find_best_solution,w
  4035  029B  1D03               	skipz
  4036  029C  2AA1               	goto	u5505
  4037  029D  1683               	bsf	3,5	;RP0=1, select bank1
  4038  029E  1303               	bcf	3,6	;RP1=0, select bank1
  4039  029F  085A               	movf	find_best_solution@temp_risk^(0+128),w
  4040  02A0  0251               	subwf	find_best_solution@temp_pre_risk^(0+128),w
  4041  02A1                     u5505:	
  4042  02A1  1803               	skipnc
  4043  02A2  2AB9               	goto	l4294
  4044                           
  4045                           ;teris_16f886.c: 1323: {
  4046                           ;teris_16f886.c: 1327: temp_pre_risk = temp_risk;
  4047  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  4048  02A4  1303               	bcf	3,6	;RP1=0, select bank1
  4049  02A5  085B               	movf	(find_best_solution@temp_risk+1)^(0+128),w
  4050  02A6  00D2               	movwf	(find_best_solution@temp_pre_risk+1)^(0+128)
  4051  02A7  085A               	movf	find_best_solution@temp_risk^(0+128),w
  4052  02A8  00D1               	movwf	find_best_solution@temp_pre_risk^(0+128)
  4053                           
  4054                           ;teris_16f886.c: 1328: tem_pre_sub_index = tem_sub_index;
  4055  02A9  085D               	movf	find_best_solution@tem_sub_index^(0+128),w
  4056  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  4057  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  4058  02AC  00D8               	movwf	??_find_best_solution
  4059  02AD  0858               	movf	??_find_best_solution,w
  4060  02AE  1683               	bsf	3,5	;RP0=1, select bank1
  4061  02AF  1303               	bcf	3,6	;RP1=0, select bank1
  4062  02B0  00D6               	movwf	find_best_solution@tem_pre_sub_index^(0+128)
  4063                           
  4064                           ;teris_16f886.c: 1329: temp_pre_x = temp_x;
  4065  02B1  085E               	movf	find_best_solution@temp_x^(0+128),w
  4066  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  4067  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  4068  02B4  00D8               	movwf	??_find_best_solution
  4069  02B5  0858               	movf	??_find_best_solution,w
  4070  02B6  1683               	bsf	3,5	;RP0=1, select bank1
  4071  02B7  1303               	bcf	3,6	;RP1=0, select bank1
  4072  02B8  00D5               	movwf	find_best_solution@temp_pre_x^(0+128)
  4073  02B9                     l4294:	
  4074  02B9  3001               	movlw	1
  4075  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  4076  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  4077  02BC  00D8               	movwf	??_find_best_solution
  4078  02BD  0858               	movf	??_find_best_solution,w
  4079  02BE  1683               	bsf	3,5	;RP0=1, select bank1
  4080  02BF  1303               	bcf	3,6	;RP1=0, select bank1
  4081  02C0  07DE               	addwf	find_best_solution@temp_x^(0+128),f
  4082  02C1  28A7               	goto	l4296
  4083  02C2                     l4298:	
  4084  02C2  3001               	movlw	1
  4085  02C3  00D8               	movwf	??_find_best_solution
  4086  02C4  0858               	movf	??_find_best_solution,w
  4087  02C5  1683               	bsf	3,5	;RP0=1, select bank1
  4088  02C6  1303               	bcf	3,6	;RP1=0, select bank1
  4089  02C7  07DD               	addwf	find_best_solution@tem_sub_index^(0+128),f
  4090  02C8  2823               	goto	l4300
  4091  02C9                     l4302:	
  4092                           
  4093                           ;teris_16f886.c: 1330: }
  4094                           ;teris_16f886.c: 1344: }
  4095                           ;teris_16f886.c: 1345: }
  4096                           ;teris_16f886.c: 1346: if(res == 1)
  4097  02C9  0357               	decf	find_best_solution@res^(0+128),w
  4098  02CA  1D03               	btfss	3,2
  4099  02CB  2ADC               	goto	l4306
  4100                           
  4101                           ;teris_16f886.c: 1347: {
  4102                           ;teris_16f886.c: 1348: g_char_info_sub_index = tem_pre_sub_index;
  4103  02CC  0856               	movf	find_best_solution@tem_pre_sub_index^(0+128),w
  4104  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  4105  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  4106  02CF  00D8               	movwf	??_find_best_solution
  4107  02D0  0858               	movf	??_find_best_solution,w
  4108  02D1  1683               	bsf	3,5	;RP0=1, select bank1
  4109  02D2  1303               	bcf	3,6	;RP1=0, select bank1
  4110  02D3  00AB               	movwf	_g_char_info_sub_index^(0+128)
  4111                           
  4112                           ;teris_16f886.c: 1349: cur_x = temp_pre_x;
  4113  02D4  0855               	movf	find_best_solution@temp_pre_x^(0+128),w
  4114  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  4115  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  4116  02D7  00D8               	movwf	??_find_best_solution
  4117  02D8  0858               	movf	??_find_best_solution,w
  4118  02D9  1683               	bsf	3,5	;RP0=1, select bank1
  4119  02DA  1303               	bcf	3,6	;RP1=0, select bank1
  4120  02DB  00C0               	movwf	_cur_x^(0+128)
  4121  02DC                     l4306:	
  4122                           ;teris_16f886.c: 1364: else
  4123                           ;teris_16f886.c: 1365: {
  4124                           
  4125                           ;teris_16f886.c: 1363: }
  4126                           
  4127                           
  4128                           ;teris_16f886.c: 1369: }
  4129                           ;teris_16f886.c: 1370: return res;
  4130  02DC  0857               	movf	find_best_solution@res^(0+128),w
  4131  02DD  0008               	return
  4132  02DE                     __end_of_find_best_solution:	
  4133                           
  4134                           	psect	text10
  4135  1165                     __ptext10:	
  4136 ;; *************** function _right_most *****************
  4137 ;; Defined at:
  4138 ;;		line 1134 in file "teris_16f886.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;  x               1    wreg     char 
  4141 ;;  matrix4x4       2    6[BANK0 ] PTR const struct .
  4142 ;;		 -> NULL(0), g_matrix4x4(96), 
  4143 ;;  matrix16x8      1    8[BANK0 ] PTR const struct .
  4144 ;;		 -> g_matrix16x8(16), 
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;  x               1   10[BANK0 ] char 
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  1    wreg      char 
  4149 ;; Registers used:
  4150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4156 ;;      Params:         0       3       0       0       0
  4157 ;;      Locals:         0       1       0       0       0
  4158 ;;      Temps:          0       1       0       0       0
  4159 ;;      Totals:         0       5       0       0       0
  4160 ;;Total ram usage:        5 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    4
  4163 ;; This function calls:
  4164 ;;		_is_right_boundary
  4165 ;; This function is called by:
  4166 ;;		_find_best_solution
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           
  4171                           ;psect for function _right_most
  4172  1165                     _right_most:	
  4173                           
  4174                           ;incstack = 0
  4175                           ; Regs used in _right_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4176                           ;right_most@x stored from wreg
  4177  1165  1283               	bcf	3,5	;RP0=0, select bank0
  4178  1166  1303               	bcf	3,6	;RP1=0, select bank0
  4179  1167  00AA               	movwf	right_most@x
  4180  1168                     l427:	
  4181                           ;teris_16f886.c: 1136: while(1)
  4182                           
  4183                           
  4184                           ;teris_16f886.c: 1137: {
  4185                           ;teris_16f886.c: 1138: if(is_right_boundary(x, matrix4x4, matrix16x8) == RIGHT_OVER_BOUN
      +                          DARY)
  4186  1168  0826               	movf	right_most@matrix4x4,w
  4187  1169  00A0               	movwf	is_right_boundary@matrix4x4
  4188  116A  0827               	movf	right_most@matrix4x4+1,w
  4189  116B  00A1               	movwf	is_right_boundary@matrix4x4+1
  4190  116C  0828               	movf	right_most@matrix16x8,w
  4191  116D  00A9               	movwf	??_right_most
  4192  116E  0829               	movf	??_right_most,w
  4193  116F  00A2               	movwf	is_right_boundary@matrix16x8
  4194  1170  082A               	movf	right_most@x,w
  4195  1171  160A  118A  25C5  160A  118A  	fcall	_is_right_boundary
  4196  1176  3A03               	xorlw	3
  4197  1177  1D03               	skipz
  4198  1178  297E               	goto	l3830
  4199                           
  4200                           ;teris_16f886.c: 1139: {
  4201                           ;teris_16f886.c: 1143: return x - 1;
  4202  1179  1283               	bcf	3,5	;RP0=0, select bank0
  4203  117A  1303               	bcf	3,6	;RP1=0, select bank0
  4204  117B  082A               	movf	right_most@x,w
  4205  117C  3EFF               	addlw	-1
  4206  117D  0008               	return
  4207  117E                     l3830:	
  4208                           
  4209                           ;teris_16f886.c: 1144: }
  4210                           ;teris_16f886.c: 1145: x++;
  4211  117E  3001               	movlw	1
  4212  117F  1283               	bcf	3,5	;RP0=0, select bank0
  4213  1180  1303               	bcf	3,6	;RP1=0, select bank0
  4214  1181  00A9               	movwf	??_right_most
  4215  1182  0829               	movf	??_right_most,w
  4216  1183  07AA               	addwf	right_most@x,f
  4217  1184  2968               	goto	l427
  4218  1185                     __end_of_right_most:	
  4219                           
  4220                           	psect	text11
  4221  15C5                     __ptext11:	
  4222 ;; *************** function _is_right_boundary *****************
  4223 ;; Defined at:
  4224 ;;		line 933 in file "teris_16f886.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;  x               1    wreg     char 
  4227 ;;  matrix4x4       2    0[BANK0 ] PTR const struct .
  4228 ;;		 -> NULL(0), g_matrix4x4(96), 
  4229 ;;  matrix16x8      1    2[BANK0 ] PTR const struct .
  4230 ;;		 -> g_matrix16x8(16), 
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;  x               1    3[BANK0 ] char 
  4233 ;;  col             1    5[BANK0 ] char 
  4234 ;;  row             1    4[BANK0 ] char 
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  1    wreg      unsigned char 
  4237 ;; Registers used:
  4238 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4244 ;;      Params:         0       3       0       0       0
  4245 ;;      Locals:         0       3       0       0       0
  4246 ;;      Temps:          2       0       0       0       0
  4247 ;;      Totals:         2       6       0       0       0
  4248 ;;Total ram usage:        8 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    3
  4251 ;; This function calls:
  4252 ;;		_get_matrix_bit
  4253 ;; This function is called by:
  4254 ;;		_right_most
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           
  4259                           ;psect for function _is_right_boundary
  4260  15C5                     _is_right_boundary:	
  4261                           
  4262                           ;incstack = 0
  4263                           ; Regs used in _is_right_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4264                           ;is_right_boundary@x stored from wreg
  4265  15C5  1283               	bcf	3,5	;RP0=0, select bank0
  4266  15C6  1303               	bcf	3,6	;RP1=0, select bank0
  4267  15C7  00A3               	movwf	is_right_boundary@x
  4268                           
  4269                           ;teris_16f886.c: 935: for(int8_t row = 4 - 1; row >= 0; row--)
  4270  15C8  3003               	movlw	3
  4271  15C9  00FC               	movwf	??_is_right_boundary
  4272  15CA  087C               	movf	??_is_right_boundary,w
  4273  15CB  00A4               	movwf	is_right_boundary@row
  4274  15CC  1BA4               	btfsc	is_right_boundary@row,7
  4275  15CD  2E12               	goto	l3536
  4276  15CE                     l3514:	
  4277                           
  4278                           ;teris_16f886.c: 936: {
  4279                           ;teris_16f886.c: 937: for(int8_t col = 0; col < 4; col++)
  4280  15CE  01A5               	clrf	is_right_boundary@col
  4281  15CF  0825               	movf	is_right_boundary@col,w
  4282  15D0  3A80               	xorlw	128
  4283  15D1  3E7C               	addlw	-132
  4284  15D2  1803               	btfsc	3,0
  4285  15D3  2E0C               	goto	l3532
  4286  15D4                     l3520:	
  4287                           
  4288                           ;teris_16f886.c: 938: {
  4289                           ;teris_16f886.c: 939: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  4290  15D4  0820               	movf	is_right_boundary@matrix4x4,w
  4291  15D5  00F7               	movwf	get_matrix_bit@byte
  4292  15D6  0821               	movf	is_right_boundary@matrix4x4+1,w
  4293  15D7  00F8               	movwf	get_matrix_bit@byte+1
  4294  15D8  0824               	movf	is_right_boundary@row,w
  4295  15D9  00FC               	movwf	??_is_right_boundary
  4296  15DA  087C               	movf	??_is_right_boundary,w
  4297  15DB  00F9               	movwf	get_matrix_bit@row
  4298  15DC  0825               	movf	is_right_boundary@col,w
  4299  15DD  00FD               	movwf	??_is_right_boundary+1
  4300  15DE  087D               	movf	??_is_right_boundary+1,w
  4301  15DF  00FA               	movwf	get_matrix_bit@col
  4302  15E0  160A  118A  206E  160A  118A  	fcall	_get_matrix_bit
  4303  15E5  3A01               	xorlw	1
  4304  15E6  1D03               	skipz
  4305  15E7  2E01               	goto	l3528
  4306                           
  4307                           ;teris_16f886.c: 940: {
  4308                           ;teris_16f886.c: 941: if(x + col > 8 - 1)
  4309  15E8  1283               	bcf	3,5	;RP0=0, select bank0
  4310  15E9  1303               	bcf	3,6	;RP1=0, select bank0
  4311  15EA  0823               	movf	is_right_boundary@x,w
  4312  15EB  0725               	addwf	is_right_boundary@col,w
  4313  15EC  00FC               	movwf	??_is_right_boundary
  4314  15ED  01FD               	clrf	??_is_right_boundary+1
  4315  15EE  1803               	skipnc
  4316  15EF  0AFD               	incf	??_is_right_boundary+1,f
  4317  15F0  1BA3               	btfsc	is_right_boundary@x,7
  4318  15F1  03FD               	decf	??_is_right_boundary+1,f
  4319  15F2  1BA5               	btfsc	is_right_boundary@col,7
  4320  15F3  03FD               	decf	??_is_right_boundary+1,f
  4321  15F4  087D               	movf	??_is_right_boundary+1,w
  4322  15F5  3A80               	xorlw	128
  4323  15F6  00FF               	movwf	127
  4324  15F7  3080               	movlw	128
  4325  15F8  027F               	subwf	127,w
  4326  15F9  1D03               	skipz
  4327  15FA  2DFD               	goto	u4005
  4328  15FB  3008               	movlw	8
  4329  15FC  027C               	subwf	??_is_right_boundary,w
  4330  15FD                     u4005:	
  4331  15FD  1C03               	skipc
  4332  15FE  2E01               	goto	l3528
  4333                           
  4334                           ;teris_16f886.c: 942: {
  4335                           ;teris_16f886.c: 946: return RIGHT_OVER_BOUNDARY;
  4336  15FF  3003               	movlw	3
  4337  1600  0008               	return
  4338  1601                     l3528:	
  4339  1601  3001               	movlw	1
  4340  1602  00FC               	movwf	??_is_right_boundary
  4341  1603  087C               	movf	??_is_right_boundary,w
  4342  1604  1283               	bcf	3,5	;RP0=0, select bank0
  4343  1605  1303               	bcf	3,6	;RP1=0, select bank0
  4344  1606  07A5               	addwf	is_right_boundary@col,f
  4345  1607  0825               	movf	is_right_boundary@col,w
  4346  1608  3A80               	xorlw	128
  4347  1609  3E7C               	addlw	-132
  4348  160A  1C03               	skipc
  4349  160B  2DD4               	goto	l3520
  4350  160C                     l3532:	
  4351  160C  30FF               	movlw	255
  4352  160D  00FC               	movwf	??_is_right_boundary
  4353  160E  087C               	movf	??_is_right_boundary,w
  4354  160F  07A4               	addwf	is_right_boundary@row,f
  4355  1610  1FA4               	btfss	is_right_boundary@row,7
  4356  1611  2DCE               	goto	l3514
  4357  1612                     l3536:	
  4358                           
  4359                           ;teris_16f886.c: 947: }
  4360                           ;teris_16f886.c: 948: }
  4361                           ;teris_16f886.c: 949: }
  4362                           ;teris_16f886.c: 950: }
  4363                           ;teris_16f886.c: 951: return OK;
  4364  1612  3000               	movlw	0
  4365  1613  0008               	return
  4366  1614                     __end_of_is_right_boundary:	
  4367                           
  4368                           	psect	text12
  4369  1669                     __ptext12:	
  4370 ;; *************** function _merge1 *****************
  4371 ;; Defined at:
  4372 ;;		line 1019 in file "teris_16f886.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;  x               1    wreg     char 
  4375 ;;  y               1    0[BANK0 ] char 
  4376 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  4377 ;;		 -> NULL(0), g_matrix4x4(96), 
  4378 ;;  matrix16x8_i    1    3[BANK0 ] PTR const struct .
  4379 ;;		 -> g_matrix16x8(16), 
  4380 ;;  matrix16x8_o    1    4[BANK0 ] PTR struct .
  4381 ;;		 -> temp_matrix16x8(16), 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  x               1    7[BANK0 ] char 
  4384 ;;  col             1    9[BANK0 ] unsigned char 
  4385 ;;  row             1    8[BANK0 ] unsigned char 
  4386 ;;  len             2    5[BANK0 ] unsigned int 
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  1    wreg      void 
  4389 ;; Registers used:
  4390 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4396 ;;      Params:         0       5       0       0       0
  4397 ;;      Locals:         0       5       0       0       0
  4398 ;;      Temps:          2       0       0       0       0
  4399 ;;      Totals:         2      10       0       0       0
  4400 ;;Total ram usage:       12 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    3
  4403 ;; This function calls:
  4404 ;;		_get_matrix_bit
  4405 ;;		_memcpy
  4406 ;;		_set_matrix_bit
  4407 ;; This function is called by:
  4408 ;;		_find_best_solution
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           
  4413                           ;psect for function _merge1
  4414  1669                     _merge1:	
  4415                           
  4416                           ;incstack = 0
  4417                           ; Regs used in _merge1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4418                           ;merge1@x stored from wreg
  4419  1669  1283               	bcf	3,5	;RP0=0, select bank0
  4420  166A  1303               	bcf	3,6	;RP1=0, select bank0
  4421  166B  00A7               	movwf	merge1@x
  4422                           
  4423                           ;teris_16f886.c: 1024: register size_t len;
  4424                           ;teris_16f886.c: 1026: len = sizeof(MATRIX16x8);
  4425  166C  3010               	movlw	16
  4426  166D  00A5               	movwf	merge1@len
  4427  166E  3000               	movlw	0
  4428  166F  00A6               	movwf	merge1@len+1
  4429                           
  4430                           ;teris_16f886.c: 1027: memcpy(matrix16x8_out, matrix16x8_in, len);
  4431  1670  0823               	movf	merge1@matrix16x8_in,w
  4432  1671  00FC               	movwf	??_merge1
  4433  1672  087C               	movf	??_merge1,w
  4434  1673  00F0               	movwf	memcpy@s1
  4435  1674  0826               	movf	merge1@len+1,w
  4436  1675  00F2               	movwf	memcpy@n+1
  4437  1676  0825               	movf	merge1@len,w
  4438  1677  00F1               	movwf	memcpy@n
  4439  1678  0824               	movf	merge1@matrix16x8_out,w
  4440  1679  160A  118A  2210  160A  118A  	fcall	_memcpy
  4441                           
  4442                           ;teris_16f886.c: 1029: for(uint8_t row = 0; row < 4; row++)
  4443  167E  1283               	bcf	3,5	;RP0=0, select bank0
  4444  167F  1303               	bcf	3,6	;RP1=0, select bank0
  4445  1680  01A8               	clrf	merge1@row
  4446  1681                     L5:	
  4447  1681  3004               	movlw	4
  4448  1682  0228               	subwf	merge1@row,w
  4449  1683  1803               	btfsc	3,0
  4450  1684  0008               	return
  4451                           
  4452                           ;teris_16f886.c: 1030: {
  4453                           ;teris_16f886.c: 1031: for(uint8_t col = 0; col < 4; col++)
  4454  1685  01A9               	clrf	merge1@col
  4455  1686  3004               	movlw	4
  4456  1687  0229               	subwf	merge1@col,w
  4457  1688  1803               	btfsc	3,0
  4458  1689  2EBC               	goto	l3720
  4459  168A                     l3712:	
  4460                           
  4461                           ;teris_16f886.c: 1032: {
  4462                           ;teris_16f886.c: 1033: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  4463  168A  0821               	movf	merge1@matrix4x4,w
  4464  168B  00F7               	movwf	get_matrix_bit@byte
  4465  168C  0822               	movf	merge1@matrix4x4+1,w
  4466  168D  00F8               	movwf	get_matrix_bit@byte+1
  4467  168E  0828               	movf	merge1@row,w
  4468  168F  00FC               	movwf	??_merge1
  4469  1690  087C               	movf	??_merge1,w
  4470  1691  00F9               	movwf	get_matrix_bit@row
  4471  1692  0829               	movf	merge1@col,w
  4472  1693  00FD               	movwf	??_merge1+1
  4473  1694  087D               	movf	??_merge1+1,w
  4474  1695  00FA               	movwf	get_matrix_bit@col
  4475  1696  160A  118A  206E  160A  118A  	fcall	_get_matrix_bit
  4476  169B  3A01               	xorlw	1
  4477  169C  1D03               	skipz
  4478  169D  2EB2               	goto	l3716
  4479                           
  4480                           ;teris_16f886.c: 1034: {
  4481                           ;teris_16f886.c: 1035: set_matrix_bit(matrix16x8_out->row, y + row, x + col, 1);
  4482  169E  1283               	bcf	3,5	;RP0=0, select bank0
  4483  169F  1303               	bcf	3,6	;RP1=0, select bank0
  4484  16A0  0828               	movf	merge1@row,w
  4485  16A1  0720               	addwf	merge1@y,w
  4486  16A2  00FC               	movwf	??_merge1
  4487  16A3  087C               	movf	??_merge1,w
  4488  16A4  00F5               	movwf	set_matrix_bit@row
  4489  16A5  0829               	movf	merge1@col,w
  4490  16A6  0727               	addwf	merge1@x,w
  4491  16A7  00FD               	movwf	??_merge1+1
  4492  16A8  087D               	movf	??_merge1+1,w
  4493  16A9  00F6               	movwf	set_matrix_bit@col
  4494  16AA  01F7               	clrf	set_matrix_bit@value
  4495  16AB  0AF7               	incf	set_matrix_bit@value,f
  4496  16AC  0824               	movf	merge1@matrix16x8_out,w
  4497  16AD  160A  118A  207D  160A  118A  	fcall	_set_matrix_bit
  4498  16B2                     l3716:	
  4499  16B2  3001               	movlw	1
  4500  16B3  00FC               	movwf	??_merge1
  4501  16B4  087C               	movf	??_merge1,w
  4502  16B5  1283               	bcf	3,5	;RP0=0, select bank0
  4503  16B6  1303               	bcf	3,6	;RP1=0, select bank0
  4504  16B7  07A9               	addwf	merge1@col,f
  4505  16B8  3004               	movlw	4
  4506  16B9  0229               	subwf	merge1@col,w
  4507  16BA  1C03               	skipc
  4508  16BB  2E8A               	goto	l3712
  4509  16BC                     l3720:	
  4510  16BC  3001               	movlw	1
  4511  16BD  00FC               	movwf	??_merge1
  4512  16BE  087C               	movf	??_merge1,w
  4513  16BF  07A8               	addwf	merge1@row,f
  4514  16C0  2E81               	goto	L5
  4515  16C1                     __end_of_merge1:	
  4516                           
  4517                           	psect	text13
  4518  1210                     __ptext13:	
  4519 ;; *************** function _memcpy *****************
  4520 ;; Defined at:
  4521 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;  d1              1    wreg     PTR void 
  4524 ;;		 -> temp_matrix16x8(16), 
  4525 ;;  s1              1    0[COMMON] PTR const void 
  4526 ;;		 -> g_matrix16x8(16), 
  4527 ;;  n               2    1[COMMON] unsigned int 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  d1              1    4[COMMON] PTR void 
  4530 ;;		 -> temp_matrix16x8(16), 
  4531 ;;  s               1    6[COMMON] PTR const unsigned char 
  4532 ;;		 -> g_matrix16x8(16), 
  4533 ;;  d               1    5[COMMON] PTR unsigned char 
  4534 ;;		 -> temp_matrix16x8(16), 
  4535 ;; Return value:  Size  Location     Type
  4536 ;;                  1    wreg      PTR void 
  4537 ;; Registers used:
  4538 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4539 ;; Tracked objects:
  4540 ;;		On entry : 0/0
  4541 ;;		On exit  : 0/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4544 ;;      Params:         3       0       0       0       0
  4545 ;;      Locals:         3       0       0       0       0
  4546 ;;      Temps:          1       0       0       0       0
  4547 ;;      Totals:         7       0       0       0       0
  4548 ;;Total ram usage:        7 bytes
  4549 ;; Hardware stack levels used:    1
  4550 ;; This function calls:
  4551 ;;		Nothing
  4552 ;; This function is called by:
  4553 ;;		_merge1
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           
  4558                           ;psect for function _memcpy
  4559  1210                     _memcpy:	
  4560                           
  4561                           ;incstack = 0
  4562                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  4563                           ;memcpy@d1 stored from wreg
  4564  1210  00F4               	movwf	memcpy@d1
  4565  1211  0870               	movf	memcpy@s1,w
  4566  1212  00F3               	movwf	??_memcpy
  4567  1213  0873               	movf	??_memcpy,w
  4568  1214  00F6               	movwf	memcpy@s
  4569  1215  0874               	movf	memcpy@d1,w
  4570  1216  00F3               	movwf	??_memcpy
  4571  1217  0873               	movf	??_memcpy,w
  4572  1218  00F5               	movwf	memcpy@d
  4573  1219                     l3548:	
  4574  1219  3001               	movlw	1
  4575  121A  02F1               	subwf	memcpy@n,f
  4576  121B  3000               	movlw	0
  4577  121C  1C03               	skipc
  4578  121D  03F2               	decf	memcpy@n+1,f
  4579  121E  02F2               	subwf	memcpy@n+1,f
  4580  121F  0A71               	incf	memcpy@n,w
  4581  1220  1903               	btfsc	3,2
  4582  1221  0A72               	incf	memcpy@n+1,w
  4583  1222  1903               	btfsc	3,2
  4584  1223  0008               	return
  4585  1224  0876               	movf	memcpy@s,w
  4586  1225  0084               	movwf	4
  4587  1226  1383               	bcf	3,7	;select IRP bank0
  4588  1227  0800               	movf	0,w
  4589  1228  00F3               	movwf	??_memcpy
  4590  1229  0875               	movf	memcpy@d,w
  4591  122A  0084               	movwf	4
  4592  122B  0873               	movf	??_memcpy,w
  4593  122C  0080               	movwf	0
  4594  122D  3001               	movlw	1
  4595  122E  00F3               	movwf	??_memcpy
  4596  122F  0873               	movf	??_memcpy,w
  4597  1230  07F6               	addwf	memcpy@s,f
  4598  1231  3001               	movlw	1
  4599  1232  00F3               	movwf	??_memcpy
  4600  1233  0873               	movf	??_memcpy,w
  4601  1234  07F5               	addwf	memcpy@d,f
  4602  1235  2A19               	goto	l3548
  4603  1236                     __end_of_memcpy:	
  4604                           ;	Return value of _memcpy is never used
  4605                           
  4606                           
  4607                           	psect	text14
  4608  112B                     __ptext14:	
  4609 ;; *************** function _left_most *****************
  4610 ;; Defined at:
  4611 ;;		line 1120 in file "teris_16f886.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;  x               1    wreg     char 
  4614 ;;  matrix4x4       2   11[BANK0 ] PTR const struct .
  4615 ;;		 -> NULL(0), g_matrix4x4(96), 
  4616 ;;  matrix16x8      1   13[BANK0 ] PTR const struct .
  4617 ;;		 -> g_matrix16x8(16), 
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;  x               1   13[COMMON] char 
  4620 ;; Return value:  Size  Location     Type
  4621 ;;                  1    wreg      char 
  4622 ;; Registers used:
  4623 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4624 ;; Tracked objects:
  4625 ;;		On entry : 0/0
  4626 ;;		On exit  : 0/0
  4627 ;;		Unchanged: 0/0
  4628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4629 ;;      Params:         0       3       0       0       0
  4630 ;;      Locals:         1       0       0       0       0
  4631 ;;      Temps:          1       0       0       0       0
  4632 ;;      Totals:         2       3       0       0       0
  4633 ;;Total ram usage:        5 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; Hardware stack levels required when called:    4
  4636 ;; This function calls:
  4637 ;;		_is_left_boundary
  4638 ;; This function is called by:
  4639 ;;		_find_best_solution
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           
  4644                           ;psect for function _left_most
  4645  112B                     _left_most:	
  4646                           
  4647                           ;incstack = 0
  4648                           ; Regs used in _left_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4649                           ;left_most@x stored from wreg
  4650  112B  00FD               	movwf	left_most@x
  4651  112C                     l420:	
  4652                           ;teris_16f886.c: 1122: while(1)
  4653                           
  4654                           
  4655                           ;teris_16f886.c: 1123: {
  4656                           ;teris_16f886.c: 1124: if(is_left_boundary(x, matrix4x4, matrix16x8) == LEFT_OVER_BOUNDA
      +                          RY)
  4657  112C  1283               	bcf	3,5	;RP0=0, select bank0
  4658  112D  1303               	bcf	3,6	;RP1=0, select bank0
  4659  112E  082B               	movf	left_most@matrix4x4,w
  4660  112F  00A0               	movwf	is_left_boundary@matrix4x4
  4661  1130  082C               	movf	left_most@matrix4x4+1,w
  4662  1131  00A1               	movwf	is_left_boundary@matrix4x4+1
  4663  1132  082D               	movf	left_most@matrix16x8,w
  4664  1133  00FC               	movwf	??_left_most
  4665  1134  087C               	movf	??_left_most,w
  4666  1135  00A2               	movwf	is_left_boundary@matrix16x8
  4667  1136  087D               	movf	left_most@x,w
  4668  1137  160A  118A  2578  160A  118A  	fcall	_is_left_boundary
  4669  113C  3A02               	xorlw	2
  4670  113D  1D03               	skipz
  4671  113E  2942               	goto	l3822
  4672                           
  4673                           ;teris_16f886.c: 1125: {
  4674                           ;teris_16f886.c: 1129: return x + 1;
  4675  113F  087D               	movf	left_most@x,w
  4676  1140  3E01               	addlw	1
  4677  1141  0008               	return
  4678  1142                     l3822:	
  4679                           
  4680                           ;teris_16f886.c: 1130: }
  4681                           ;teris_16f886.c: 1131: x--;
  4682  1142  30FF               	movlw	255
  4683  1143  00FC               	movwf	??_left_most
  4684  1144  087C               	movf	??_left_most,w
  4685  1145  07FD               	addwf	left_most@x,f
  4686  1146  292C               	goto	l420
  4687  1147                     __end_of_left_most:	
  4688                           
  4689                           	psect	text15
  4690  1578                     __ptext15:	
  4691 ;; *************** function _is_left_boundary *****************
  4692 ;; Defined at:
  4693 ;;		line 913 in file "teris_16f886.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;  x               1    wreg     char 
  4696 ;;  matrix4x4       2    0[BANK0 ] PTR const struct .
  4697 ;;		 -> NULL(0), g_matrix4x4(96), 
  4698 ;;  matrix16x8      1    2[BANK0 ] PTR const struct .
  4699 ;;		 -> g_matrix16x8(16), 
  4700 ;; Auto vars:     Size  Location     Type
  4701 ;;  x               1    8[BANK0 ] char 
  4702 ;;  col             1   10[BANK0 ] char 
  4703 ;;  row             1    9[BANK0 ] char 
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  1    wreg      unsigned char 
  4706 ;; Registers used:
  4707 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4713 ;;      Params:         0       3       0       0       0
  4714 ;;      Locals:         0       3       0       0       0
  4715 ;;      Temps:          0       5       0       0       0
  4716 ;;      Totals:         0      11       0       0       0
  4717 ;;Total ram usage:       11 bytes
  4718 ;; Hardware stack levels used:    1
  4719 ;; Hardware stack levels required when called:    3
  4720 ;; This function calls:
  4721 ;;		_get_matrix_bit
  4722 ;; This function is called by:
  4723 ;;		_left_most
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           
  4728                           ;psect for function _is_left_boundary
  4729  1578                     _is_left_boundary:	
  4730                           
  4731                           ;incstack = 0
  4732                           ; Regs used in _is_left_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4733                           ;is_left_boundary@x stored from wreg
  4734  1578  1283               	bcf	3,5	;RP0=0, select bank0
  4735  1579  1303               	bcf	3,6	;RP1=0, select bank0
  4736  157A  00A8               	movwf	is_left_boundary@x
  4737                           
  4738                           ;teris_16f886.c: 915: for(int8_t row = 4 - 1; row >= 0; row--)
  4739  157B  3003               	movlw	3
  4740  157C  00A3               	movwf	??_is_left_boundary
  4741  157D  0823               	movf	??_is_left_boundary,w
  4742  157E  00A9               	movwf	is_left_boundary@row
  4743  157F  1BA9               	btfsc	is_left_boundary@row,7
  4744  1580  2DC3               	goto	l3504
  4745  1581                     l3482:	
  4746                           
  4747                           ;teris_16f886.c: 916: {
  4748                           ;teris_16f886.c: 917: for(int8_t col = 0; col < 4; col++)
  4749  1581  01AA               	clrf	is_left_boundary@col
  4750  1582  082A               	movf	is_left_boundary@col,w
  4751  1583  3A80               	xorlw	128
  4752  1584  3E7C               	addlw	-132
  4753  1585  1803               	btfsc	3,0
  4754  1586  2DBD               	goto	l3500
  4755  1587                     l3488:	
  4756                           
  4757                           ;teris_16f886.c: 918: {
  4758                           ;teris_16f886.c: 919: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  4759  1587  0820               	movf	is_left_boundary@matrix4x4,w
  4760  1588  00F7               	movwf	get_matrix_bit@byte
  4761  1589  0821               	movf	is_left_boundary@matrix4x4+1,w
  4762  158A  00F8               	movwf	get_matrix_bit@byte+1
  4763  158B  0829               	movf	is_left_boundary@row,w
  4764  158C  00A3               	movwf	??_is_left_boundary
  4765  158D  0823               	movf	??_is_left_boundary,w
  4766  158E  00F9               	movwf	get_matrix_bit@row
  4767  158F  082A               	movf	is_left_boundary@col,w
  4768  1590  00A4               	movwf	??_is_left_boundary+1
  4769  1591  0824               	movf	??_is_left_boundary+1,w
  4770  1592  00FA               	movwf	get_matrix_bit@col
  4771  1593  160A  118A  206E  160A  118A  	fcall	_get_matrix_bit
  4772  1598  3A01               	xorlw	1
  4773  1599  1D03               	skipz
  4774  159A  2DB2               	goto	l3496
  4775                           
  4776                           ;teris_16f886.c: 920: {
  4777                           ;teris_16f886.c: 921: if( x + col < 0)
  4778  159B  1283               	bcf	3,5	;RP0=0, select bank0
  4779  159C  1303               	bcf	3,6	;RP1=0, select bank0
  4780  159D  082A               	movf	is_left_boundary@col,w
  4781  159E  00A3               	movwf	??_is_left_boundary
  4782  159F  01A4               	clrf	??_is_left_boundary+1
  4783  15A0  1BA3               	btfsc	??_is_left_boundary,7
  4784  15A1  03A4               	decf	??_is_left_boundary+1,f
  4785  15A2  0828               	movf	is_left_boundary@x,w
  4786  15A3  00A5               	movwf	??_is_left_boundary+2
  4787  15A4  01A6               	clrf	??_is_left_boundary+3
  4788  15A5  1BA5               	btfsc	??_is_left_boundary+2,7
  4789  15A6  03A6               	decf	??_is_left_boundary+3,f
  4790  15A7  0823               	movf	??_is_left_boundary,w
  4791  15A8  0725               	addwf	??_is_left_boundary+2,w
  4792  15A9  0826               	movf	??_is_left_boundary+3,w
  4793  15AA  1803               	skipnc
  4794  15AB  0A26               	incf	??_is_left_boundary+3,w
  4795  15AC  0724               	addwf	??_is_left_boundary+1,w
  4796  15AD  00A7               	movwf	??_is_left_boundary+4
  4797  15AE  1FA7               	btfss	??_is_left_boundary+4,7
  4798  15AF  2DB2               	goto	l3496
  4799                           
  4800                           ;teris_16f886.c: 922: {
  4801                           ;teris_16f886.c: 926: return LEFT_OVER_BOUNDARY;
  4802  15B0  3002               	movlw	2
  4803  15B1  0008               	return
  4804  15B2                     l3496:	
  4805  15B2  3001               	movlw	1
  4806  15B3  1283               	bcf	3,5	;RP0=0, select bank0
  4807  15B4  1303               	bcf	3,6	;RP1=0, select bank0
  4808  15B5  00A3               	movwf	??_is_left_boundary
  4809  15B6  0823               	movf	??_is_left_boundary,w
  4810  15B7  07AA               	addwf	is_left_boundary@col,f
  4811  15B8  082A               	movf	is_left_boundary@col,w
  4812  15B9  3A80               	xorlw	128
  4813  15BA  3E7C               	addlw	-132
  4814  15BB  1C03               	skipc
  4815  15BC  2D87               	goto	l3488
  4816  15BD                     l3500:	
  4817  15BD  30FF               	movlw	255
  4818  15BE  00A3               	movwf	??_is_left_boundary
  4819  15BF  0823               	movf	??_is_left_boundary,w
  4820  15C0  07A9               	addwf	is_left_boundary@row,f
  4821  15C1  1FA9               	btfss	is_left_boundary@row,7
  4822  15C2  2D81               	goto	l3482
  4823  15C3                     l3504:	
  4824                           
  4825                           ;teris_16f886.c: 927: }
  4826                           ;teris_16f886.c: 928: }
  4827                           ;teris_16f886.c: 929: }
  4828                           ;teris_16f886.c: 930: }
  4829                           ;teris_16f886.c: 931: return OK;
  4830  15C3  3000               	movlw	0
  4831  15C4  0008               	return
  4832  15C5                     __end_of_is_left_boundary:	
  4833                           
  4834                           	psect	text16
  4835  0B85                     __ptext16:	
  4836 ;; *************** function _is_valid *****************
  4837 ;; Defined at:
  4838 ;;		line 869 in file "teris_16f886.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;  x               1    wreg     char 
  4841 ;;  y               1    0[BANK0 ] char 
  4842 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  4843 ;;		 -> NULL(0), g_matrix4x4(96), 
  4844 ;;  matrix16x8      1    3[BANK0 ] PTR const struct .
  4845 ;;		 -> g_matrix16x8(16), 
  4846 ;; Auto vars:     Size  Location     Type
  4847 ;;  x               1    4[BANK0 ] char 
  4848 ;;  col             1    6[BANK0 ] char 
  4849 ;;  row             1    5[BANK0 ] char 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      unsigned char 
  4852 ;; Registers used:
  4853 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4859 ;;      Params:         0       4       0       0       0
  4860 ;;      Locals:         0       3       0       0       0
  4861 ;;      Temps:          2       0       0       0       0
  4862 ;;      Totals:         2       7       0       0       0
  4863 ;;Total ram usage:        9 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    3
  4866 ;; This function calls:
  4867 ;;		_get_matrix_bit
  4868 ;; This function is called by:
  4869 ;;		_find_best_solution
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           
  4874                           ;psect for function _is_valid
  4875  0B85                     _is_valid:	
  4876                           
  4877                           ;incstack = 0
  4878                           ; Regs used in _is_valid: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4879                           ;is_valid@x stored from wreg
  4880  0B85  1283               	bcf	3,5	;RP0=0, select bank0
  4881  0B86  1303               	bcf	3,6	;RP1=0, select bank0
  4882  0B87  00A4               	movwf	is_valid@x
  4883                           
  4884                           ;teris_16f886.c: 874: for(int8_t row = 4 - 1; row >= 0; row--)
  4885  0B88  3003               	movlw	3
  4886  0B89  00FC               	movwf	??_is_valid
  4887  0B8A  087C               	movf	??_is_valid,w
  4888  0B8B  00A5               	movwf	is_valid@row
  4889  0B8C  1BA5               	btfsc	is_valid@row,7
  4890  0B8D  2C13               	goto	l3656
  4891  0B8E                     l3620:	
  4892                           
  4893                           ;teris_16f886.c: 875: {
  4894                           ;teris_16f886.c: 876: for(int8_t col = 0; col < 4; col++)
  4895  0B8E  01A6               	clrf	is_valid@col
  4896  0B8F  0826               	movf	is_valid@col,w
  4897  0B90  3A80               	xorlw	128
  4898  0B91  3E7C               	addlw	-132
  4899  0B92  1803               	btfsc	3,0
  4900  0B93  2C0D               	goto	l3652
  4901  0B94                     l3626:	
  4902                           
  4903                           ;teris_16f886.c: 877: {
  4904                           ;teris_16f886.c: 878: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  4905  0B94  0821               	movf	is_valid@matrix4x4,w
  4906  0B95  00F7               	movwf	get_matrix_bit@byte
  4907  0B96  0822               	movf	is_valid@matrix4x4+1,w
  4908  0B97  00F8               	movwf	get_matrix_bit@byte+1
  4909  0B98  0825               	movf	is_valid@row,w
  4910  0B99  00FC               	movwf	??_is_valid
  4911  0B9A  087C               	movf	??_is_valid,w
  4912  0B9B  00F9               	movwf	get_matrix_bit@row
  4913  0B9C  0826               	movf	is_valid@col,w
  4914  0B9D  00FD               	movwf	??_is_valid+1
  4915  0B9E  087D               	movf	??_is_valid+1,w
  4916  0B9F  00FA               	movwf	get_matrix_bit@col
  4917  0BA0  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  4918  0BA5  3A01               	xorlw	1
  4919  0BA6  1D03               	skipz
  4920  0BA7  2C02               	goto	l3648
  4921                           
  4922                           ;teris_16f886.c: 879: {
  4923                           ;teris_16f886.c: 880: if(get_matrix_bit(matrix16x8->row, y + row, x + col) == 1)
  4924  0BA8  1283               	bcf	3,5	;RP0=0, select bank0
  4925  0BA9  1303               	bcf	3,6	;RP1=0, select bank0
  4926  0BAA  0823               	movf	is_valid@matrix16x8,w
  4927  0BAB  00F7               	movwf	get_matrix_bit@byte
  4928  0BAC  3000               	movlw	0
  4929  0BAD  00F8               	movwf	get_matrix_bit@byte+1
  4930  0BAE  0825               	movf	is_valid@row,w
  4931  0BAF  0720               	addwf	is_valid@y,w
  4932  0BB0  00FC               	movwf	??_is_valid
  4933  0BB1  087C               	movf	??_is_valid,w
  4934  0BB2  00F9               	movwf	get_matrix_bit@row
  4935  0BB3  0826               	movf	is_valid@col,w
  4936  0BB4  0724               	addwf	is_valid@x,w
  4937  0BB5  00FD               	movwf	??_is_valid+1
  4938  0BB6  087D               	movf	??_is_valid+1,w
  4939  0BB7  00FA               	movwf	get_matrix_bit@col
  4940  0BB8  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  4941  0BBD  3A01               	xorlw	1
  4942  0BBE  1D03               	skipz
  4943  0BBF  2BC2               	goto	l3634
  4944                           
  4945                           ;teris_16f886.c: 881: {
  4946                           ;teris_16f886.c: 886: return 0;
  4947  0BC0  3000               	movlw	0
  4948  0BC1  0008               	return
  4949  0BC2                     l3634:	
  4950                           
  4951                           ;teris_16f886.c: 887: }
  4952                           ;teris_16f886.c: 889: if(( x + col < 0) || (x + col >= 8))
  4953  0BC2  1283               	bcf	3,5	;RP0=0, select bank0
  4954  0BC3  1303               	bcf	3,6	;RP1=0, select bank0
  4955  0BC4  0824               	movf	is_valid@x,w
  4956  0BC5  0726               	addwf	is_valid@col,w
  4957  0BC6  00FC               	movwf	??_is_valid
  4958  0BC7  01FD               	clrf	??_is_valid+1
  4959  0BC8  1803               	skipnc
  4960  0BC9  0AFD               	incf	??_is_valid+1,f
  4961  0BCA  1BA4               	btfsc	is_valid@x,7
  4962  0BCB  03FD               	decf	??_is_valid+1,f
  4963  0BCC  1BA6               	btfsc	is_valid@col,7
  4964  0BCD  03FD               	decf	??_is_valid+1,f
  4965  0BCE  1BFD               	btfsc	??_is_valid+1,7
  4966  0BCF  2BE7               	goto	l3638
  4967  0BD0  1283               	bcf	3,5	;RP0=0, select bank0
  4968  0BD1  1303               	bcf	3,6	;RP1=0, select bank0
  4969  0BD2  0824               	movf	is_valid@x,w
  4970  0BD3  0726               	addwf	is_valid@col,w
  4971  0BD4  00FC               	movwf	??_is_valid
  4972  0BD5  01FD               	clrf	??_is_valid+1
  4973  0BD6  1803               	skipnc
  4974  0BD7  0AFD               	incf	??_is_valid+1,f
  4975  0BD8  1BA4               	btfsc	is_valid@x,7
  4976  0BD9  03FD               	decf	??_is_valid+1,f
  4977  0BDA  1BA6               	btfsc	is_valid@col,7
  4978  0BDB  03FD               	decf	??_is_valid+1,f
  4979  0BDC  087D               	movf	??_is_valid+1,w
  4980  0BDD  3A80               	xorlw	128
  4981  0BDE  00FF               	movwf	127
  4982  0BDF  3080               	movlw	128
  4983  0BE0  027F               	subwf	127,w
  4984  0BE1  1D03               	skipz
  4985  0BE2  2BE5               	goto	u4245
  4986  0BE3  3008               	movlw	8
  4987  0BE4  027C               	subwf	??_is_valid,w
  4988  0BE5                     u4245:	
  4989  0BE5  1C03               	skipc
  4990  0BE6  2BE9               	goto	l3642
  4991  0BE7                     l3638:	
  4992                           
  4993                           ;teris_16f886.c: 890: {
  4994                           ;teris_16f886.c: 895: return 0;
  4995  0BE7  3000               	movlw	0
  4996  0BE8  0008               	return
  4997  0BE9                     l3642:	
  4998                           
  4999                           ;teris_16f886.c: 896: }
  5000                           ;teris_16f886.c: 897: if((y + row) > (16 - 1))
  5001  0BE9  1283               	bcf	3,5	;RP0=0, select bank0
  5002  0BEA  1303               	bcf	3,6	;RP1=0, select bank0
  5003  0BEB  0820               	movf	is_valid@y,w
  5004  0BEC  0725               	addwf	is_valid@row,w
  5005  0BED  00FC               	movwf	??_is_valid
  5006  0BEE  01FD               	clrf	??_is_valid+1
  5007  0BEF  1803               	skipnc
  5008  0BF0  0AFD               	incf	??_is_valid+1,f
  5009  0BF1  1BA0               	btfsc	is_valid@y,7
  5010  0BF2  03FD               	decf	??_is_valid+1,f
  5011  0BF3  1BA5               	btfsc	is_valid@row,7
  5012  0BF4  03FD               	decf	??_is_valid+1,f
  5013  0BF5  087D               	movf	??_is_valid+1,w
  5014  0BF6  3A80               	xorlw	128
  5015  0BF7  00FF               	movwf	127
  5016  0BF8  3080               	movlw	128
  5017  0BF9  027F               	subwf	127,w
  5018  0BFA  1D03               	skipz
  5019  0BFB  2BFE               	goto	u4265
  5020  0BFC  3010               	movlw	16
  5021  0BFD  027C               	subwf	??_is_valid,w
  5022  0BFE                     u4265:	
  5023  0BFE  1C03               	skipc
  5024  0BFF  2C02               	goto	l3648
  5025                           
  5026                           ;teris_16f886.c: 898: {
  5027                           ;teris_16f886.c: 903: return 0;
  5028  0C00  3000               	movlw	0
  5029  0C01  0008               	return
  5030  0C02                     l3648:	
  5031  0C02  3001               	movlw	1
  5032  0C03  00FC               	movwf	??_is_valid
  5033  0C04  087C               	movf	??_is_valid,w
  5034  0C05  1283               	bcf	3,5	;RP0=0, select bank0
  5035  0C06  1303               	bcf	3,6	;RP1=0, select bank0
  5036  0C07  07A6               	addwf	is_valid@col,f
  5037  0C08  0826               	movf	is_valid@col,w
  5038  0C09  3A80               	xorlw	128
  5039  0C0A  3E7C               	addlw	-132
  5040  0C0B  1C03               	skipc
  5041  0C0C  2B94               	goto	l3626
  5042  0C0D                     l3652:	
  5043  0C0D  30FF               	movlw	255
  5044  0C0E  00FC               	movwf	??_is_valid
  5045  0C0F  087C               	movf	??_is_valid,w
  5046  0C10  07A5               	addwf	is_valid@row,f
  5047  0C11  1FA5               	btfss	is_valid@row,7
  5048  0C12  2B8E               	goto	l3620
  5049  0C13                     l3656:	
  5050                           
  5051                           ;teris_16f886.c: 904: }
  5052                           ;teris_16f886.c: 905: }
  5053                           ;teris_16f886.c: 906: }
  5054                           ;teris_16f886.c: 907: }
  5055                           ;teris_16f886.c: 911: return 1;
  5056  0C13  3001               	movlw	1
  5057  0C14  0008               	return
  5058  0C15                     __end_of_is_valid:	
  5059                           
  5060                           	psect	text17
  5061  1321                     __ptext17:	
  5062 ;; *************** function _get_num_removed_rows *****************
  5063 ;; Defined at:
  5064 ;;		line 810 in file "teris_16f886.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  matrix          1    wreg     PTR struct .
  5067 ;;		 -> temp_matrix16x8(16), 
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;  matrix          1   53[BANK0 ] PTR struct .
  5070 ;;		 -> temp_matrix16x8(16), 
  5071 ;;  row             1   55[BANK0 ] char 
  5072 ;;  count           1   54[BANK0 ] unsigned char 
  5073 ;; Return value:  Size  Location     Type
  5074 ;;                  1    wreg      unsigned char 
  5075 ;; Registers used:
  5076 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5077 ;; Tracked objects:
  5078 ;;		On entry : 0/0
  5079 ;;		On exit  : 0/0
  5080 ;;		Unchanged: 0/0
  5081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5082 ;;      Params:         0       0       0       0       0
  5083 ;;      Locals:         0       3       0       0       0
  5084 ;;      Temps:          0       2       0       0       0
  5085 ;;      Totals:         0       5       0       0       0
  5086 ;;Total ram usage:        5 bytes
  5087 ;; Hardware stack levels used:    1
  5088 ;; Hardware stack levels required when called:    3
  5089 ;; This function calls:
  5090 ;;		_debug_int1
  5091 ;;		_is_row_full
  5092 ;; This function is called by:
  5093 ;;		_find_best_solution
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           
  5098                           ;psect for function _get_num_removed_rows
  5099  1321                     _get_num_removed_rows:	
  5100                           
  5101                           ;incstack = 0
  5102                           ; Regs used in _get_num_removed_rows: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  5103                           ;get_num_removed_rows@matrix stored from wreg
  5104  1321  1283               	bcf	3,5	;RP0=0, select bank0
  5105  1322  1303               	bcf	3,6	;RP1=0, select bank0
  5106  1323  00D5               	movwf	get_num_removed_rows@matrix
  5107                           
  5108                           ;teris_16f886.c: 812: uint8_t count = 0;
  5109  1324  01D6               	clrf	get_num_removed_rows@count
  5110                           
  5111                           ;teris_16f886.c: 813: for(int8_t row = 0; row < 16; row++)
  5112  1325  01D7               	clrf	get_num_removed_rows@row
  5113  1326  0857               	movf	get_num_removed_rows@row,w
  5114  1327  3A80               	xorlw	128
  5115  1328  3E70               	addlw	-144
  5116  1329  1803               	btfsc	3,0
  5117  132A  2B49               	goto	l3608
  5118  132B                     l3602:	
  5119                           
  5120                           ;teris_16f886.c: 814: {
  5121                           ;teris_16f886.c: 815: if(is_row_full(matrix, row) == 1)
  5122  132B  0857               	movf	get_num_removed_rows@row,w
  5123  132C  00D3               	movwf	??_get_num_removed_rows
  5124  132D  0853               	movf	??_get_num_removed_rows,w
  5125  132E  00F0               	movwf	is_row_full@row
  5126  132F  0855               	movf	get_num_removed_rows@matrix,w
  5127  1330  160A  118A  2052  160A  118A  	fcall	_is_row_full
  5128  1335  3A01               	xorlw	1
  5129  1336  1D03               	skipz
  5130  1337  2B3E               	goto	l307
  5131                           
  5132                           ;teris_16f886.c: 816: {
  5133                           ;teris_16f886.c: 817: count++;
  5134  1338  3001               	movlw	1
  5135  1339  1283               	bcf	3,5	;RP0=0, select bank0
  5136  133A  1303               	bcf	3,6	;RP1=0, select bank0
  5137  133B  00D3               	movwf	??_get_num_removed_rows
  5138  133C  0853               	movf	??_get_num_removed_rows,w
  5139  133D  07D6               	addwf	get_num_removed_rows@count,f
  5140  133E                     l307:	
  5141  133E  3001               	movlw	1
  5142  133F  1283               	bcf	3,5	;RP0=0, select bank0
  5143  1340  1303               	bcf	3,6	;RP1=0, select bank0
  5144  1341  00D3               	movwf	??_get_num_removed_rows
  5145  1342  0853               	movf	??_get_num_removed_rows,w
  5146  1343  07D7               	addwf	get_num_removed_rows@row,f
  5147  1344  0857               	movf	get_num_removed_rows@row,w
  5148  1345  3A80               	xorlw	128
  5149  1346  3E70               	addlw	-144
  5150  1347  1C03               	skipc
  5151  1348  2B2B               	goto	l3602
  5152  1349                     l3608:	
  5153                           
  5154                           ;teris_16f886.c: 818: }
  5155                           ;teris_16f886.c: 819: }
  5156                           ;teris_16f886.c: 821: debug_int1("num full rows = %d", count);
  5157  1349  3024               	movlw	low (STR_22| (0+32768))
  5158  134A  00CF               	movwf	debug_int1@f
  5159  134B  3089               	movlw	high (STR_22| (0+32768))
  5160  134C  00D0               	movwf	debug_int1@f+1
  5161  134D  0856               	movf	get_num_removed_rows@count,w
  5162  134E  00D3               	movwf	??_get_num_removed_rows
  5163  134F  01D4               	clrf	??_get_num_removed_rows+1
  5164  1350  0853               	movf	??_get_num_removed_rows,w
  5165  1351  00D1               	movwf	debug_int1@i
  5166  1352  0854               	movf	??_get_num_removed_rows+1,w
  5167  1353  00D2               	movwf	debug_int1@i+1
  5168  1354  160A  118A  2185   	fcall	_debug_int1
  5169                           
  5170                           ;teris_16f886.c: 823: return count;
  5171  1357  1283               	bcf	3,5	;RP0=0, select bank0
  5172  1358  1303               	bcf	3,6	;RP1=0, select bank0
  5173  1359  0856               	movf	get_num_removed_rows@count,w
  5174  135A  0008               	return
  5175  135B                     __end_of_get_num_removed_rows:	
  5176                           
  5177                           	psect	text18
  5178  1185                     __ptext18:	
  5179 ;; *************** function _debug_int1 *****************
  5180 ;; Defined at:
  5181 ;;		line 361 in file "teris_16f886.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;  f               2   47[BANK0 ] PTR const unsigned char 
  5184 ;;		 -> STR_23(15), STR_22(19), STR_13(10), 
  5185 ;;  i               2   49[BANK0 ] int 
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;		None
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  1    wreg      void 
  5190 ;; Registers used:
  5191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5197 ;;      Params:         0       4       0       0       0
  5198 ;;      Locals:         0       0       0       0       0
  5199 ;;      Temps:          0       0       0       0       0
  5200 ;;      Totals:         0       4       0       0       0
  5201 ;;Total ram usage:        4 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:    2
  5204 ;; This function calls:
  5205 ;;		_USARTWriteString
  5206 ;;		_sprintf
  5207 ;; This function is called by:
  5208 ;;		_get_num_removed_rows
  5209 ;;		_find_best_solution
  5210 ;;		_printf_debug_all_MATRIX4x4
  5211 ;; This function uses a non-reentrant model
  5212 ;;
  5213                           
  5214                           
  5215                           ;psect for function _debug_int1
  5216  1185                     _debug_int1:	
  5217                           
  5218                           ;teris_16f886.c: 368: sprintf(g_debug, f, i);
  5219                           
  5220                           ;incstack = 0
  5221                           ; Regs used in _debug_int1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5222  1185  1283               	bcf	3,5	;RP0=0, select bank0
  5223  1186  1303               	bcf	3,6	;RP1=0, select bank0
  5224  1187  084F               	movf	debug_int1@f,w
  5225  1188  00B0               	movwf	sprintf@f
  5226  1189  0850               	movf	debug_int1@f+1,w
  5227  118A  00B1               	movwf	sprintf@f+1
  5228  118B  0852               	movf	debug_int1@i+1,w
  5229  118C  00B3               	movwf	?_sprintf+3
  5230  118D  0851               	movf	debug_int1@i,w
  5231  118E  00B2               	movwf	?_sprintf+2
  5232  118F  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  5233  1190  120A  118A  22DE  160A  118A  	fcall	_sprintf
  5234                           
  5235                           ;teris_16f886.c: 369: USARTWriteString(g_debug);
  5236  1195  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  5237  1196  00F1               	movwf	USARTWriteString@str
  5238  1197  3001               	movlw	1
  5239  1198  00F2               	movwf	USARTWriteString@str+1
  5240  1199  160A  118A  21EB  160A  118A  	fcall	_USARTWriteString
  5241                           
  5242                           ;teris_16f886.c: 370: USARTWriteString("\r\n");
  5243  119E  308F               	movlw	low (STR_1| (0+32768))
  5244  119F  00F1               	movwf	USARTWriteString@str
  5245  11A0  3089               	movlw	high (STR_1| (0+32768))
  5246  11A1  00F2               	movwf	USARTWriteString@str+1
  5247  11A2  160A  118A  21EB   	fcall	_USARTWriteString
  5248  11A5  0008               	return
  5249  11A6                     __end_of_debug_int1:	
  5250                           
  5251                           	psect	text19
  5252  02DE                     __ptext19:	
  5253 ;; *************** function _sprintf *****************
  5254 ;; Defined at:
  5255 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  sp              1    wreg     PTR unsigned char 
  5258 ;;		 -> g_debug(32), 
  5259 ;;  f               2   16[BANK0 ] PTR const unsigned char 
  5260 ;;		 -> STR_23(15), STR_22(19), STR_14(27), STR_13(10), 
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;  sp              1   44[BANK0 ] PTR unsigned char 
  5263 ;;		 -> g_debug(32), 
  5264 ;;  idx             1   33[BANK0 ] unsigned char 
  5265 ;;  tmpval          4    0        struct .
  5266 ;;  flag            2   45[BANK0 ] unsigned short 
  5267 ;;  width           2   41[BANK0 ] int 
  5268 ;;  val             2   38[BANK0 ] unsigned int 
  5269 ;;  len             2   35[BANK0 ] unsigned int 
  5270 ;;  c               1   43[BANK0 ] char 
  5271 ;;  prec            1   40[BANK0 ] char 
  5272 ;;  ap              1   37[BANK0 ] PTR void [1]
  5273 ;;		 -> ?_sprintf(2), 
  5274 ;;  cp              1   34[BANK0 ] PTR const unsigned char 
  5275 ;;		 -> sprintf@c(1), 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;                  2   16[BANK0 ] int 
  5278 ;; Registers used:
  5279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5285 ;;      Params:         0       8       0       0       0
  5286 ;;      Locals:         0      20       0       0       0
  5287 ;;      Temps:          0       3       0       0       0
  5288 ;;      Totals:         0      31       0       0       0
  5289 ;;Total ram usage:       31 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    1
  5292 ;; This function calls:
  5293 ;;		___bmul
  5294 ;;		___lwdiv
  5295 ;;		___lwmod
  5296 ;;		___wmul
  5297 ;;		_isdigit
  5298 ;; This function is called by:
  5299 ;;		_debug_int1
  5300 ;;		_debug_int2
  5301 ;;		_debug_int3
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           
  5306                           ;psect for function _sprintf
  5307  02DE                     _sprintf:	
  5308                           
  5309                           ;incstack = 0
  5310                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5311                           ;sprintf@sp stored from wreg
  5312  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  5313  02DF  1303               	bcf	3,6	;RP1=0, select bank0
  5314  02E0  00CC               	movwf	sprintf@sp
  5315                           
  5316                           ;doprnt.c: 494: va_list ap;
  5317                           ;doprnt.c: 499: signed char c;
  5318                           ;doprnt.c: 501: int width;
  5319                           ;doprnt.c: 506: signed char prec;
  5320                           ;doprnt.c: 508: unsigned short flag;
  5321                           ;doprnt.c: 523: union {
  5322                           ;doprnt.c: 524: unsigned long vd;
  5323                           ;doprnt.c: 525: double integ;
  5324                           ;doprnt.c: 526: } tmpval;
  5325                           ;doprnt.c: 528: unsigned int val;
  5326                           ;doprnt.c: 529: unsigned len;
  5327                           ;doprnt.c: 530: const char * cp;
  5328                           ;doprnt.c: 533: *ap = __va_start();
  5329  02E1  3032               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5330  02E2  00B8               	movwf	??_sprintf
  5331  02E3  0838               	movf	??_sprintf,w
  5332  02E4  00C5               	movwf	sprintf@ap
  5333  02E5                     l3356:	
  5334                           ;doprnt.c: 536: while(c = *f++) {
  5335                           
  5336  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  5337  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  5338  02E7  0831               	movf	sprintf@f+1,w
  5339  02E8  00B9               	movwf	??_sprintf+1
  5340  02E9  0830               	movf	sprintf@f,w
  5341  02EA  00B8               	movwf	??_sprintf
  5342  02EB  0AB0               	incf	sprintf@f,f
  5343  02EC  1903               	skipnz
  5344  02ED  0AB1               	incf	sprintf@f+1,f
  5345  02EE  0839               	movf	??_sprintf+1,w
  5346  02EF  00FF               	movwf	127
  5347  02F0  0838               	movf	??_sprintf,w
  5348  02F1  0084               	movwf	4
  5349  02F2  120A  158A  2000  120A  118A  	fcall	stringtab
  5350  02F7  00BA               	movwf	??_sprintf+2
  5351  02F8  083A               	movf	??_sprintf+2,w
  5352  02F9  00CB               	movwf	sprintf@c
  5353  02FA  084B               	movf	sprintf@c,w
  5354  02FB  1903               	btfsc	3,2
  5355  02FC  2FD9               	goto	l3358
  5356                           
  5357                           ;doprnt.c: 538: if(c != '%')
  5358  02FD  3025               	movlw	37
  5359  02FE  064B               	xorwf	sprintf@c,w
  5360  02FF  1903               	btfsc	3,2
  5361  0300  2B0D               	goto	l3048
  5362                           
  5363                           ;doprnt.c: 540: {
  5364                           ;doprnt.c: 541: ((*sp++ = (c)));
  5365  0301  084B               	movf	sprintf@c,w
  5366  0302  00B8               	movwf	??_sprintf
  5367  0303  084C               	movf	sprintf@sp,w
  5368  0304  0084               	movwf	4
  5369  0305  0838               	movf	??_sprintf,w
  5370  0306  1783               	bsf	3,7	;select IRP bank2
  5371  0307  0080               	movwf	0
  5372  0308  3001               	movlw	1
  5373  0309  00B8               	movwf	??_sprintf
  5374  030A  0838               	movf	??_sprintf,w
  5375  030B  07CC               	addwf	sprintf@sp,f
  5376                           
  5377                           ;doprnt.c: 542: continue;
  5378  030C  2AE5               	goto	l3356
  5379  030D                     l3048:	
  5380                           
  5381                           ;doprnt.c: 543: }
  5382                           ;doprnt.c: 546: width = 0;
  5383  030D  01C9               	clrf	sprintf@width
  5384  030E  01CA               	clrf	sprintf@width+1
  5385                           
  5386                           ;doprnt.c: 548: flag = 0;
  5387  030F  01CD               	clrf	sprintf@flag
  5388  0310  01CE               	clrf	sprintf@flag+1
  5389                           
  5390                           ;doprnt.c: 551: switch(*f) {
  5391                           
  5392                           ;doprnt.c: 550: for(;;) {
  5393  0311  2B1D               	goto	l3052
  5394  0312                     l524:	
  5395                           ;doprnt.c: 553: case '-':
  5396                           
  5397                           
  5398                           ;doprnt.c: 554: flag |= 0x08;
  5399  0312  15CD               	bsf	sprintf@flag,3
  5400  0313  2B19               	goto	L8
  5401  0314                     l526:	
  5402                           ;doprnt.c: 560: case ' ':
  5403                           
  5404                           ;doprnt.c: 556: continue;
  5405                           
  5406                           ;doprnt.c: 555: f++;
  5407                           
  5408                           
  5409                           ;doprnt.c: 561: flag |= 0x01;
  5410  0314  144D               	bsf	sprintf@flag,0
  5411  0315  2B19               	goto	L8
  5412  0316                     l527:	
  5413                           ;doprnt.c: 573: case '#':
  5414                           
  5415                           ;doprnt.c: 563: continue;
  5416                           
  5417                           ;doprnt.c: 562: f++;
  5418                           
  5419                           
  5420                           ;doprnt.c: 574: flag |= 0x800;
  5421  0316  15CE               	bsf	sprintf@flag+1,3
  5422  0317  2B19               	goto	L8
  5423  0318                     l528:	
  5424                           ;doprnt.c: 579: case '0':
  5425                           
  5426                           ;doprnt.c: 576: continue;
  5427                           
  5428                           ;doprnt.c: 575: f++;
  5429                           
  5430                           
  5431                           ;doprnt.c: 580: flag |= 0x04;
  5432  0318  154D               	bsf	sprintf@flag,2
  5433  0319                     L8:	
  5434                           
  5435                           ;doprnt.c: 581: f++;
  5436  0319  3001               	movlw	1
  5437  031A  07B0               	addwf	sprintf@f,f
  5438  031B  1803               	skipnc
  5439  031C  0AB1               	incf	sprintf@f+1,f
  5440  031D                     l3052:	
  5441                           ;doprnt.c: 584: }
  5442                           
  5443                           ;doprnt.c: 582: continue;
  5444                           
  5445  031D  0831               	movf	sprintf@f+1,w
  5446  031E  00FF               	movwf	127
  5447  031F  0830               	movf	sprintf@f,w
  5448  0320  0084               	movwf	4
  5449  0321  120A  158A  2000  120A  118A  	fcall	stringtab
  5450                           
  5451                           ; Switch size 1, requested type "space"
  5452                           ; Number of cases is 4, Range of values is 32 to 48
  5453                           ; switch strategies available:
  5454                           ; Name         Instructions Cycles
  5455                           ; simple_byte           13     7 (average)
  5456                           ; direct_byte           62    11 (fixed)
  5457                           ; jumptable            263     9 (fixed)
  5458                           ;	Chosen strategy is simple_byte
  5459  0326  3A20               	xorlw	32	; case 32
  5460  0327  1903               	skipnz
  5461  0328  2B14               	goto	l526
  5462  0329  3A03               	xorlw	3	; case 35
  5463  032A  1903               	skipnz
  5464  032B  2B16               	goto	l527
  5465  032C  3A0E               	xorlw	14	; case 45
  5466  032D  1903               	skipnz
  5467  032E  2B12               	goto	l524
  5468  032F  3A1D               	xorlw	29	; case 48
  5469  0330  1903               	skipnz
  5470  0331  2B18               	goto	l528
  5471  0332  2B33               	goto	l530
  5472  0333                     l530:	
  5473                           ;doprnt.c: 586: }
  5474                           
  5475                           ;doprnt.c: 585: break;
  5476                           
  5477                           
  5478                           ;doprnt.c: 593: if(flag & 0x08)
  5479  0333  1DCD               	btfss	sprintf@flag,3
  5480  0334  2B39               	goto	l3056
  5481                           
  5482                           ;doprnt.c: 594: flag &= ~0x04;
  5483  0335  30FB               	movlw	251
  5484  0336  05CD               	andwf	sprintf@flag,f
  5485  0337  30FF               	movlw	255
  5486  0338  05CE               	andwf	sprintf@flag+1,f
  5487  0339                     l3056:	
  5488                           
  5489                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5490  0339  0831               	movf	sprintf@f+1,w
  5491  033A  00FF               	movwf	127
  5492  033B  0830               	movf	sprintf@f,w
  5493  033C  0084               	movwf	4
  5494  033D  120A  158A  2000  120A  118A  	fcall	stringtab
  5495  0342  160A  118A  2060  120A  118A  	fcall	_isdigit
  5496  0347  1C03               	btfss	3,0
  5497  0348  2B8C               	goto	l3068
  5498                           
  5499                           ;doprnt.c: 598: width = 0;
  5500  0349  1283               	bcf	3,5	;RP0=0, select bank0
  5501  034A  1303               	bcf	3,6	;RP1=0, select bank0
  5502  034B  01C9               	clrf	sprintf@width
  5503  034C  01CA               	clrf	sprintf@width+1
  5504  034D                     l3060:	
  5505                           ;doprnt.c: 599: do {
  5506                           
  5507                           
  5508                           ;doprnt.c: 600: width *= 10;
  5509  034D  300A               	movlw	10
  5510  034E  1283               	bcf	3,5	;RP0=0, select bank0
  5511  034F  1303               	bcf	3,6	;RP1=0, select bank0
  5512  0350  00AC               	movwf	___wmul@multiplier
  5513  0351  3000               	movlw	0
  5514  0352  00AD               	movwf	___wmul@multiplier+1
  5515  0353  084A               	movf	sprintf@width+1,w
  5516  0354  00AF               	movwf	___wmul@multiplicand+1
  5517  0355  0849               	movf	sprintf@width,w
  5518  0356  00AE               	movwf	___wmul@multiplicand
  5519  0357  160A  118A  21C8  120A  118A  	fcall	___wmul
  5520  035C  1283               	bcf	3,5	;RP0=0, select bank0
  5521  035D  1303               	bcf	3,6	;RP1=0, select bank0
  5522  035E  082D               	movf	?___wmul+1,w
  5523  035F  00CA               	movwf	sprintf@width+1
  5524  0360  082C               	movf	?___wmul,w
  5525  0361  00C9               	movwf	sprintf@width
  5526                           
  5527                           ;doprnt.c: 601: width += *f++ - '0';
  5528  0362  0831               	movf	sprintf@f+1,w
  5529  0363  00FF               	movwf	127
  5530  0364  0830               	movf	sprintf@f,w
  5531  0365  0084               	movwf	4
  5532  0366  120A  158A  2000  120A  118A  	fcall	stringtab
  5533  036B  3ED0               	addlw	208
  5534  036C  00B8               	movwf	??_sprintf
  5535  036D  30FF               	movlw	255
  5536  036E  1803               	skipnc
  5537  036F  3000               	movlw	0
  5538  0370  00B9               	movwf	??_sprintf+1
  5539  0371  0838               	movf	??_sprintf,w
  5540  0372  07C9               	addwf	sprintf@width,f
  5541  0373  1803               	skipnc
  5542  0374  0ACA               	incf	sprintf@width+1,f
  5543  0375  0839               	movf	??_sprintf+1,w
  5544  0376  07CA               	addwf	sprintf@width+1,f
  5545  0377  3001               	movlw	1
  5546  0378  07B0               	addwf	sprintf@f,f
  5547  0379  1803               	skipnc
  5548  037A  0AB1               	incf	sprintf@f+1,f
  5549                           
  5550                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5551  037B  0831               	movf	sprintf@f+1,w
  5552  037C  00FF               	movwf	127
  5553  037D  0830               	movf	sprintf@f,w
  5554  037E  0084               	movwf	4
  5555  037F  120A  158A  2000  120A  118A  	fcall	stringtab
  5556  0384  160A  118A  2060  120A  118A  	fcall	_isdigit
  5557  0389  1C03               	btfss	3,0
  5558  038A  2BAA               	goto	l3076
  5559  038B  2B4D               	goto	l3060
  5560  038C                     l3068:	
  5561                           ;doprnt.c: 604: } else if(*f == '*') {
  5562                           
  5563  038C  1283               	bcf	3,5	;RP0=0, select bank0
  5564  038D  1303               	bcf	3,6	;RP1=0, select bank0
  5565  038E  0831               	movf	sprintf@f+1,w
  5566  038F  00FF               	movwf	127
  5567  0390  0830               	movf	sprintf@f,w
  5568  0391  0084               	movwf	4
  5569  0392  120A  158A  2000  120A  118A  	fcall	stringtab
  5570  0397  3A2A               	xorlw	42
  5571  0398  1D03               	skipz
  5572  0399  2BAA               	goto	l3076
  5573                           
  5574                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  5575  039A  0845               	movf	sprintf@ap,w
  5576  039B  0084               	movwf	4
  5577  039C  1383               	bcf	3,7	;select IRP bank0
  5578  039D  0800               	movf	0,w
  5579  039E  00C9               	movwf	sprintf@width
  5580  039F  0A84               	incf	4,f
  5581  03A0  0800               	movf	0,w
  5582  03A1  00CA               	movwf	sprintf@width+1
  5583  03A2  3002               	movlw	2
  5584  03A3  00B8               	movwf	??_sprintf
  5585  03A4  0838               	movf	??_sprintf,w
  5586  03A5  07C5               	addwf	sprintf@ap,f
  5587                           
  5588                           ;doprnt.c: 606: f++;
  5589  03A6  3001               	movlw	1
  5590  03A7  07B0               	addwf	sprintf@f,f
  5591  03A8  1803               	skipnc
  5592  03A9  0AB1               	incf	sprintf@f+1,f
  5593  03AA                     l3076:	
  5594                           
  5595                           ;doprnt.c: 608: }
  5596                           ;doprnt.c: 611: if(*f == '.') {
  5597  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  5598  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  5599  03AC  0831               	movf	sprintf@f+1,w
  5600  03AD  00FF               	movwf	127
  5601  03AE  0830               	movf	sprintf@f,w
  5602  03AF  0084               	movwf	4
  5603  03B0  120A  158A  2000  120A  118A  	fcall	stringtab
  5604  03B5  3A2E               	xorlw	46
  5605  03B6  1D03               	skipz
  5606  03B7  2C0C               	goto	l3094
  5607                           
  5608                           ;doprnt.c: 612: flag |= 0x4000;
  5609  03B8  174E               	bsf	sprintf@flag+1,6
  5610                           
  5611                           ;doprnt.c: 613: f++;
  5612  03B9  3001               	movlw	1
  5613  03BA  07B0               	addwf	sprintf@f,f
  5614  03BB  1803               	skipnc
  5615  03BC  0AB1               	incf	sprintf@f+1,f
  5616                           
  5617                           ;doprnt.c: 615: if(*f == '*') {
  5618  03BD  0831               	movf	sprintf@f+1,w
  5619  03BE  00FF               	movwf	127
  5620  03BF  0830               	movf	sprintf@f,w
  5621  03C0  0084               	movwf	4
  5622  03C1  120A  158A  2000  120A  118A  	fcall	stringtab
  5623  03C6  3A2A               	xorlw	42
  5624  03C7  1D03               	skipz
  5625  03C8  2BD9               	goto	l3088
  5626                           
  5627                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  5628  03C9  0845               	movf	sprintf@ap,w
  5629  03CA  0084               	movwf	4
  5630  03CB  1383               	bcf	3,7	;select IRP bank0
  5631  03CC  0800               	movf	0,w
  5632  03CD  00B8               	movwf	??_sprintf
  5633  03CE  0838               	movf	??_sprintf,w
  5634  03CF  00C8               	movwf	sprintf@prec
  5635  03D0  3002               	movlw	2
  5636  03D1  00B8               	movwf	??_sprintf
  5637  03D2  0838               	movf	??_sprintf,w
  5638  03D3  07C5               	addwf	sprintf@ap,f
  5639                           
  5640                           ;doprnt.c: 617: f++;
  5641  03D4  3001               	movlw	1
  5642  03D5  07B0               	addwf	sprintf@f,f
  5643  03D6  1803               	skipnc
  5644  03D7  0AB1               	incf	sprintf@f+1,f
  5645                           
  5646                           ;doprnt.c: 618: } else
  5647  03D8  2CA8               	goto	l3146
  5648  03D9                     l3088:	
  5649                           
  5650                           ;doprnt.c: 620: {
  5651                           ;doprnt.c: 621: prec = 0;
  5652  03D9  01C8               	clrf	sprintf@prec
  5653  03DA                     l540:	
  5654                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5655                           
  5656  03DA  0831               	movf	sprintf@f+1,w
  5657  03DB  00FF               	movwf	127
  5658  03DC  0830               	movf	sprintf@f,w
  5659  03DD  0084               	movwf	4
  5660  03DE  120A  158A  2000  120A  118A  	fcall	stringtab
  5661  03E3  160A  118A  2060  120A  118A  	fcall	_isdigit
  5662  03E8  1C03               	btfss	3,0
  5663  03E9  2CA8               	goto	l3146
  5664                           
  5665                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5666  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  5667  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  5668  03EC  0831               	movf	sprintf@f+1,w
  5669  03ED  00FF               	movwf	127
  5670  03EE  0830               	movf	sprintf@f,w
  5671  03EF  0084               	movwf	4
  5672  03F0  120A  158A  2000  120A  118A  	fcall	stringtab
  5673  03F5  00B8               	movwf	??_sprintf
  5674  03F6  300A               	movlw	10
  5675  03F7  00B9               	movwf	??_sprintf+1
  5676  03F8  0839               	movf	??_sprintf+1,w
  5677  03F9  00F0               	movwf	___bmul@multiplicand
  5678  03FA  0848               	movf	sprintf@prec,w
  5679  03FB  160A  118A  209D  120A  118A  	fcall	___bmul
  5680  0400  1283               	bcf	3,5	;RP0=0, select bank0
  5681  0401  1303               	bcf	3,6	;RP1=0, select bank0
  5682  0402  0738               	addwf	??_sprintf,w
  5683  0403  3ED0               	addlw	-48
  5684  0404  00BA               	movwf	??_sprintf+2
  5685  0405  083A               	movf	??_sprintf+2,w
  5686  0406  00C8               	movwf	sprintf@prec
  5687  0407  3001               	movlw	1
  5688  0408  07B0               	addwf	sprintf@f,f
  5689  0409  1803               	skipnc
  5690  040A  0AB1               	incf	sprintf@f+1,f
  5691  040B  2BDA               	goto	l540
  5692  040C                     l3094:	
  5693                           ;doprnt.c: 624: }
  5694                           ;doprnt.c: 625: } else {
  5695                           
  5696                           
  5697                           ;doprnt.c: 626: prec = 0;
  5698  040C  1283               	bcf	3,5	;RP0=0, select bank0
  5699  040D  1303               	bcf	3,6	;RP1=0, select bank0
  5700  040E  01C8               	clrf	sprintf@prec
  5701                           
  5702                           ;doprnt.c: 630: }
  5703                           ;doprnt.c: 635: switch(c = *f++) {
  5704  040F  2CA8               	goto	l3146
  5705  0410                     l547:	
  5706                           ;doprnt.c: 689: case 'o':
  5707                           
  5708                           ;doprnt.c: 638: goto alldone;
  5709                           
  5710                           ;doprnt.c: 637: case 0:
  5711                           
  5712                           
  5713                           ;doprnt.c: 691: flag |= 0x40;
  5714  0410  174D               	bsf	sprintf@flag,6
  5715                           
  5716                           ;doprnt.c: 698: case 'i':
  5717                           ;doprnt.c: 699: break;
  5718                           
  5719                           ;doprnt.c: 697: case 'd':
  5720                           
  5721                           ;doprnt.c: 693: break;
  5722  0411  2CD4               	goto	l3148
  5723  0412                     l551:	
  5724                           ;doprnt.c: 712: case 'X':
  5725                           
  5726                           
  5727                           ;doprnt.c: 714: flag |= 0x20;
  5728  0412  16CD               	bsf	sprintf@flag,5
  5729  0413                     l552:	
  5730                           ;doprnt.c: 718: case 'x':
  5731                           
  5732                           
  5733                           ;doprnt.c: 721: flag |= 0x80;
  5734  0413  17CD               	bsf	sprintf@flag,7
  5735                           
  5736                           ;doprnt.c: 723: break;
  5737  0414  2CD4               	goto	l3148
  5738  0415                     l3096:	
  5739                           ;doprnt.c: 750: dostring:
  5740                           
  5741                           
  5742                           ;doprnt.c: 753: if(prec && prec < len)
  5743  0415  0848               	movf	sprintf@prec,w
  5744  0416  1903               	btfsc	3,2
  5745  0417  2C2A               	goto	l3102
  5746  0418  0848               	movf	sprintf@prec,w
  5747  0419  00B8               	movwf	??_sprintf
  5748  041A  01B9               	clrf	??_sprintf+1
  5749  041B  1BB8               	btfsc	??_sprintf,7
  5750  041C  03B9               	decf	??_sprintf+1,f
  5751  041D  0844               	movf	sprintf@len+1,w
  5752  041E  0239               	subwf	??_sprintf+1,w
  5753  041F  1D03               	skipz
  5754  0420  2C23               	goto	u3265
  5755  0421  0843               	movf	sprintf@len,w
  5756  0422  0238               	subwf	??_sprintf,w
  5757  0423                     u3265:	
  5758  0423  1803               	skipnc
  5759  0424  2C2A               	goto	l3102
  5760                           
  5761                           ;doprnt.c: 754: len = prec;
  5762  0425  0848               	movf	sprintf@prec,w
  5763  0426  00C3               	movwf	sprintf@len
  5764  0427  01C4               	clrf	sprintf@len+1
  5765  0428  1BC3               	btfsc	sprintf@len,7
  5766  0429  03C4               	decf	sprintf@len+1,f
  5767  042A                     l3102:	
  5768                           
  5769                           ;doprnt.c: 757: if(width > len)
  5770  042A  084A               	movf	sprintf@width+1,w
  5771  042B  0244               	subwf	sprintf@len+1,w
  5772  042C  1D03               	skipz
  5773  042D  2C30               	goto	u3275
  5774  042E  0849               	movf	sprintf@width,w
  5775  042F  0243               	subwf	sprintf@len,w
  5776  0430                     u3275:	
  5777  0430  1803               	skipnc
  5778  0431  2C39               	goto	l3106
  5779                           
  5780                           ;doprnt.c: 758: width -= len;
  5781  0432  0843               	movf	sprintf@len,w
  5782  0433  02C9               	subwf	sprintf@width,f
  5783  0434  0844               	movf	sprintf@len+1,w
  5784  0435  1C03               	skipc
  5785  0436  03CA               	decf	sprintf@width+1,f
  5786  0437  02CA               	subwf	sprintf@width+1,f
  5787  0438  2C3B               	goto	l3108
  5788  0439                     l3106:	
  5789                           
  5790                           ;doprnt.c: 759: else
  5791                           ;doprnt.c: 760: width = 0;
  5792  0439  01C9               	clrf	sprintf@width
  5793  043A  01CA               	clrf	sprintf@width+1
  5794  043B                     l3108:	
  5795                           
  5796                           ;doprnt.c: 762: if(!(flag & 0x08))
  5797  043B  1DCD               	btfss	sprintf@flag,3
  5798  043C  2C49               	goto	l3116
  5799  043D  2C68               	goto	l3124
  5800  043E                     l3112:	
  5801                           ;doprnt.c: 764: while(width--)
  5802                           
  5803                           
  5804                           ;doprnt.c: 765: ((*sp++ = (' ')));
  5805  043E  3020               	movlw	32
  5806  043F  00B8               	movwf	??_sprintf
  5807  0440  084C               	movf	sprintf@sp,w
  5808  0441  0084               	movwf	4
  5809  0442  0838               	movf	??_sprintf,w
  5810  0443  1783               	bsf	3,7	;select IRP bank2
  5811  0444  0080               	movwf	0
  5812  0445  3001               	movlw	1
  5813  0446  00B8               	movwf	??_sprintf
  5814  0447  0838               	movf	??_sprintf,w
  5815  0448  07CC               	addwf	sprintf@sp,f
  5816  0449                     l3116:	
  5817  0449  30FF               	movlw	255
  5818  044A  07C9               	addwf	sprintf@width,f
  5819  044B  1803               	skipnc
  5820  044C  0ACA               	incf	sprintf@width+1,f
  5821  044D  30FF               	movlw	255
  5822  044E  07CA               	addwf	sprintf@width+1,f
  5823  044F  0A49               	incf	sprintf@width,w
  5824  0450  1D03               	skipz
  5825  0451  2C3E               	goto	l3112
  5826  0452  0A4A               	incf	sprintf@width+1,w
  5827  0453  1903               	btfsc	3,2
  5828  0454  2C68               	goto	l3124
  5829  0455  2C3E               	goto	l3112
  5830  0456                     l3118:	
  5831                           ;doprnt.c: 767: while(len--)
  5832                           
  5833                           
  5834                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  5835  0456  0842               	movf	sprintf@cp,w
  5836  0457  0084               	movwf	4
  5837  0458  1383               	bcf	3,7	;select IRP bank0
  5838  0459  0800               	movf	0,w
  5839  045A  00B8               	movwf	??_sprintf
  5840  045B  084C               	movf	sprintf@sp,w
  5841  045C  0084               	movwf	4
  5842  045D  0838               	movf	??_sprintf,w
  5843  045E  1783               	bsf	3,7	;select IRP bank2
  5844  045F  0080               	movwf	0
  5845  0460  3001               	movlw	1
  5846  0461  00B8               	movwf	??_sprintf
  5847  0462  0838               	movf	??_sprintf,w
  5848  0463  07C2               	addwf	sprintf@cp,f
  5849  0464  3001               	movlw	1
  5850  0465  00B8               	movwf	??_sprintf
  5851  0466  0838               	movf	??_sprintf,w
  5852  0467  07CC               	addwf	sprintf@sp,f
  5853  0468                     l3124:	
  5854  0468  3001               	movlw	1
  5855  0469  02C3               	subwf	sprintf@len,f
  5856  046A  3000               	movlw	0
  5857  046B  1C03               	skipc
  5858  046C  03C4               	decf	sprintf@len+1,f
  5859  046D  02C4               	subwf	sprintf@len+1,f
  5860  046E  0A43               	incf	sprintf@len,w
  5861  046F  1D03               	skipz
  5862  0470  2C56               	goto	l3118
  5863  0471  0A44               	incf	sprintf@len+1,w
  5864  0472  1D03               	btfss	3,2
  5865  0473  2C56               	goto	l3118
  5866                           
  5867                           ;doprnt.c: 770: if(flag & 0x08)
  5868  0474  19CD               	btfsc	sprintf@flag,3
  5869  0475  2C82               	goto	l3132
  5870  0476  2AE5               	goto	l3356
  5871  0477                     l3128:	
  5872                           ;doprnt.c: 771: while(width--)
  5873                           
  5874                           
  5875                           ;doprnt.c: 772: ((*sp++ = (' ')));
  5876  0477  3020               	movlw	32
  5877  0478  00B8               	movwf	??_sprintf
  5878  0479  084C               	movf	sprintf@sp,w
  5879  047A  0084               	movwf	4
  5880  047B  0838               	movf	??_sprintf,w
  5881  047C  1783               	bsf	3,7	;select IRP bank2
  5882  047D  0080               	movwf	0
  5883  047E  3001               	movlw	1
  5884  047F  00B8               	movwf	??_sprintf
  5885  0480  0838               	movf	??_sprintf,w
  5886  0481  07CC               	addwf	sprintf@sp,f
  5887  0482                     l3132:	
  5888  0482  30FF               	movlw	255
  5889  0483  07C9               	addwf	sprintf@width,f
  5890  0484  1803               	skipnc
  5891  0485  0ACA               	incf	sprintf@width+1,f
  5892  0486  30FF               	movlw	255
  5893  0487  07CA               	addwf	sprintf@width+1,f
  5894  0488  0A49               	incf	sprintf@width,w
  5895  0489  1D03               	skipz
  5896  048A  2C77               	goto	l3128
  5897  048B  0A4A               	incf	sprintf@width+1,w
  5898  048C  1903               	btfsc	3,2
  5899  048D  2AE5               	goto	l3356
  5900  048E  2C77               	goto	l3128
  5901  048F                     l3134:	
  5902                           ;doprnt.c: 784: case 'c':
  5903                           
  5904                           ;doprnt.c: 774: continue;
  5905                           
  5906                           
  5907                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5908  048F  0845               	movf	sprintf@ap,w
  5909  0490  0084               	movwf	4
  5910  0491  1383               	bcf	3,7	;select IRP bank0
  5911  0492  0800               	movf	0,w
  5912  0493  00B8               	movwf	??_sprintf
  5913  0494  0838               	movf	??_sprintf,w
  5914  0495  00CB               	movwf	sprintf@c
  5915  0496  3002               	movlw	2
  5916  0497  00B8               	movwf	??_sprintf
  5917  0498  0838               	movf	??_sprintf,w
  5918  0499  07C5               	addwf	sprintf@ap,f
  5919  049A                     l3138:	
  5920                           ;doprnt.c: 802: default:
  5921                           
  5922                           
  5923                           ;doprnt.c: 805: cp = (char *)&c;
  5924  049A  304B               	movlw	(low (sprintf@c| 0))& (0+255)
  5925  049B  00B8               	movwf	??_sprintf
  5926  049C  0838               	movf	??_sprintf,w
  5927  049D  00C2               	movwf	sprintf@cp
  5928                           
  5929                           ;doprnt.c: 806: len = 1;
  5930  049E  3001               	movlw	1
  5931  049F  00C3               	movwf	sprintf@len
  5932  04A0  3000               	movlw	0
  5933  04A1  00C4               	movwf	sprintf@len+1
  5934                           
  5935                           ;doprnt.c: 807: goto dostring;
  5936  04A2  2C15               	goto	l3096
  5937  04A3                     l3142:	
  5938                           ;doprnt.c: 817: case 'u':
  5939                           
  5940                           
  5941                           ;doprnt.c: 818: flag |= 0xC0;
  5942  04A3  30C0               	movlw	192
  5943  04A4  04CD               	iorwf	sprintf@flag,f
  5944  04A5  3000               	movlw	0
  5945  04A6  04CE               	iorwf	sprintf@flag+1,f
  5946                           
  5947                           ;doprnt.c: 822: }
  5948                           
  5949                           ;doprnt.c: 819: break;
  5950  04A7  2CD4               	goto	l3148
  5951  04A8                     l3146:	
  5952  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  5953  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  5954  04AA  0831               	movf	sprintf@f+1,w
  5955  04AB  00B9               	movwf	??_sprintf+1
  5956  04AC  0830               	movf	sprintf@f,w
  5957  04AD  00B8               	movwf	??_sprintf
  5958  04AE  0AB0               	incf	sprintf@f,f
  5959  04AF  1903               	skipnz
  5960  04B0  0AB1               	incf	sprintf@f+1,f
  5961  04B1  0839               	movf	??_sprintf+1,w
  5962  04B2  00FF               	movwf	127
  5963  04B3  0838               	movf	??_sprintf,w
  5964  04B4  0084               	movwf	4
  5965  04B5  120A  158A  2000  120A  118A  	fcall	stringtab
  5966  04BA  00CB               	movwf	sprintf@c
  5967                           
  5968                           ; Switch size 1, requested type "space"
  5969                           ; Number of cases is 8, Range of values is 0 to 120
  5970                           ; switch strategies available:
  5971                           ; Name         Instructions Cycles
  5972                           ; simple_byte           25    13 (average)
  5973                           ; jumptable            260     6 (fixed)
  5974                           ;	Chosen strategy is simple_byte
  5975  04BB  3A00               	xorlw	0	; case 0
  5976  04BC  1903               	skipnz
  5977  04BD  2FD9               	goto	l3358
  5978  04BE  3A58               	xorlw	88	; case 88
  5979  04BF  1903               	skipnz
  5980  04C0  2C12               	goto	l551
  5981  04C1  3A3B               	xorlw	59	; case 99
  5982  04C2  1903               	skipnz
  5983  04C3  2C8F               	goto	l3134
  5984  04C4  3A07               	xorlw	7	; case 100
  5985  04C5  1903               	skipnz
  5986  04C6  2CD4               	goto	l3148
  5987  04C7  3A0D               	xorlw	13	; case 105
  5988  04C8  1903               	skipnz
  5989  04C9  2CD4               	goto	l3148
  5990  04CA  3A06               	xorlw	6	; case 111
  5991  04CB  1903               	skipnz
  5992  04CC  2C10               	goto	l547
  5993  04CD  3A1A               	xorlw	26	; case 117
  5994  04CE  1903               	skipnz
  5995  04CF  2CA3               	goto	l3142
  5996  04D0  3A0D               	xorlw	13	; case 120
  5997  04D1  1903               	skipnz
  5998  04D2  2C13               	goto	l552
  5999  04D3  2C9A               	goto	l3138
  6000  04D4                     l3148:	
  6001                           
  6002                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  6003  04D4  30C0               	movlw	192
  6004  04D5  054D               	andwf	sprintf@flag,w
  6005  04D6  00B8               	movwf	??_sprintf
  6006  04D7  3000               	movlw	0
  6007  04D8  054E               	andwf	sprintf@flag+1,w
  6008  04D9  00B9               	movwf	??_sprintf+1
  6009  04DA  0838               	movf	??_sprintf,w
  6010  04DB  0439               	iorwf	??_sprintf+1,w
  6011  04DC  1D03               	btfss	3,2
  6012  04DD  2CF6               	goto	l3160
  6013                           
  6014                           ;doprnt.c: 1253: {
  6015                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6016  04DE  0845               	movf	sprintf@ap,w
  6017  04DF  0084               	movwf	4
  6018  04E0  1383               	bcf	3,7	;select IRP bank0
  6019  04E1  0800               	movf	0,w
  6020  04E2  00C6               	movwf	sprintf@val
  6021  04E3  0A84               	incf	4,f
  6022  04E4  0800               	movf	0,w
  6023  04E5  00C7               	movwf	sprintf@val+1
  6024  04E6  3002               	movlw	2
  6025  04E7  00B8               	movwf	??_sprintf
  6026  04E8  0838               	movf	??_sprintf,w
  6027  04E9  07C5               	addwf	sprintf@ap,f
  6028                           
  6029                           ;doprnt.c: 1261: if((int)val < 0) {
  6030  04EA  1FC7               	btfss	sprintf@val+1,7
  6031  04EB  2D02               	goto	l3164
  6032                           
  6033                           ;doprnt.c: 1262: flag |= 0x03;
  6034  04EC  3003               	movlw	3
  6035  04ED  04CD               	iorwf	sprintf@flag,f
  6036  04EE  3000               	movlw	0
  6037  04EF  04CE               	iorwf	sprintf@flag+1,f
  6038                           
  6039                           ;doprnt.c: 1263: val = -val;
  6040  04F0  09C6               	comf	sprintf@val,f
  6041  04F1  09C7               	comf	sprintf@val+1,f
  6042  04F2  0AC6               	incf	sprintf@val,f
  6043  04F3  1903               	skipnz
  6044  04F4  0AC7               	incf	sprintf@val+1,f
  6045                           
  6046                           ;doprnt.c: 1264: }
  6047                           ;doprnt.c: 1266: }
  6048  04F5  2D02               	goto	l3164
  6049  04F6                     l3160:	
  6050                           
  6051                           ;doprnt.c: 1268: else
  6052                           ;doprnt.c: 1273: {
  6053                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6054  04F6  0845               	movf	sprintf@ap,w
  6055  04F7  0084               	movwf	4
  6056  04F8  1383               	bcf	3,7	;select IRP bank0
  6057  04F9  0800               	movf	0,w
  6058  04FA  00C6               	movwf	sprintf@val
  6059  04FB  0A84               	incf	4,f
  6060  04FC  0800               	movf	0,w
  6061  04FD  00C7               	movwf	sprintf@val+1
  6062  04FE  3002               	movlw	2
  6063  04FF  00B8               	movwf	??_sprintf
  6064  0500  0838               	movf	??_sprintf,w
  6065  0501  07C5               	addwf	sprintf@ap,f
  6066  0502                     l3164:	
  6067                           
  6068                           ;doprnt.c: 1287: }
  6069                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  6070  0502  0848               	movf	sprintf@prec,w
  6071  0503  1D03               	btfss	3,2
  6072  0504  2D86               	goto	l3202
  6073  0505  0846               	movf	sprintf@val,w
  6074  0506  0447               	iorwf	sprintf@val+1,w
  6075  0507  1D03               	btfss	3,2
  6076  0508  2D86               	goto	l3202
  6077                           
  6078                           ;doprnt.c: 1291: prec++;
  6079  0509  3001               	movlw	1
  6080  050A  00B8               	movwf	??_sprintf
  6081  050B  0838               	movf	??_sprintf,w
  6082  050C  07C8               	addwf	sprintf@prec,f
  6083                           
  6084                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  6085  050D  2D86               	goto	l3202
  6086  050E                     l577:	
  6087                           ;doprnt.c: 1299: case 0x00:
  6088                           
  6089                           
  6090                           ;doprnt.c: 1302: case 0xC0:
  6091                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6092  050E  01CB               	clrf	sprintf@c
  6093  050F  0ACB               	incf	sprintf@c,f
  6094  0510                     L15:	
  6095  0510  3005               	movlw	5
  6096  0511  064B               	xorwf	sprintf@c,w
  6097  0512  1903               	btfsc	3,2
  6098  0513  2D95               	goto	l3204
  6099                           
  6100                           ;doprnt.c: 1306: if(val < dpowers[c])
  6101  0514  084B               	movf	sprintf@c,w
  6102  0515  00B8               	movwf	??_sprintf
  6103  0516  0738               	addwf	??_sprintf,w
  6104  0517  3E30               	addlw	low (_dpowers| (0+32768))
  6105  0518  0084               	movwf	4
  6106  0519  3088               	movlw	high (_dpowers| (0+32768))
  6107  051A  1803               	skipnc
  6108  051B  3E01               	addlw	1
  6109  051C  00FF               	movwf	127
  6110  051D  120A  158A  2000  120A  118A  	fcall	stringtab
  6111  0522  00B9               	movwf	??_sprintf+1
  6112  0523  120A  158A  2000  120A  118A  	fcall	stringtab
  6113  0528  00BA               	movwf	??_sprintf+2
  6114  0529  083A               	movf	??_sprintf+2,w
  6115  052A  0247               	subwf	sprintf@val+1,w
  6116  052B  1D03               	skipz
  6117  052C  2D2F               	goto	u3385
  6118  052D  0839               	movf	??_sprintf+1,w
  6119  052E  0246               	subwf	sprintf@val,w
  6120  052F                     u3385:	
  6121  052F  1C03               	btfss	3,0
  6122  0530  2D95               	goto	l3204
  6123                           
  6124                           ;doprnt.c: 1307: break;
  6125  0531  3001               	movlw	1
  6126  0532  00B8               	movwf	??_sprintf
  6127  0533  0838               	movf	??_sprintf,w
  6128  0534  07CB               	addwf	sprintf@c,f
  6129  0535  2D10               	goto	L15
  6130  0536                     l582:	
  6131                           ;doprnt.c: 1314: case 0x80:
  6132                           
  6133                           ;doprnt.c: 1309: break;
  6134                           
  6135                           
  6136                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6137  0536  01CB               	clrf	sprintf@c
  6138  0537  0ACB               	incf	sprintf@c,f
  6139  0538                     L16:	
  6140  0538  3004               	movlw	4
  6141  0539  064B               	xorwf	sprintf@c,w
  6142  053A  1903               	btfsc	3,2
  6143  053B  2D95               	goto	l3204
  6144                           
  6145                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6146  053C  084B               	movf	sprintf@c,w
  6147  053D  00B8               	movwf	??_sprintf
  6148  053E  0738               	addwf	??_sprintf,w
  6149  053F  3E3A               	addlw	low (_hexpowers| (0+32768))
  6150  0540  0084               	movwf	4
  6151  0541  3088               	movlw	high (_hexpowers| (0+32768))
  6152  0542  1803               	skipnc
  6153  0543  3E01               	addlw	1
  6154  0544  00FF               	movwf	127
  6155  0545  120A  158A  2000  120A  118A  	fcall	stringtab
  6156  054A  00B9               	movwf	??_sprintf+1
  6157  054B  120A  158A  2000  120A  118A  	fcall	stringtab
  6158  0550  00BA               	movwf	??_sprintf+2
  6159  0551  083A               	movf	??_sprintf+2,w
  6160  0552  0247               	subwf	sprintf@val+1,w
  6161  0553  1D03               	skipz
  6162  0554  2D57               	goto	u3415
  6163  0555  0839               	movf	??_sprintf+1,w
  6164  0556  0246               	subwf	sprintf@val,w
  6165  0557                     u3415:	
  6166  0557  1C03               	btfss	3,0
  6167  0558  2D95               	goto	l3204
  6168                           
  6169                           ;doprnt.c: 1318: break;
  6170  0559  3001               	movlw	1
  6171  055A  00B8               	movwf	??_sprintf
  6172  055B  0838               	movf	??_sprintf,w
  6173  055C  07CB               	addwf	sprintf@c,f
  6174  055D  2D38               	goto	L16
  6175  055E                     l586:	
  6176                           ;doprnt.c: 1326: case 0x40:
  6177                           
  6178                           ;doprnt.c: 1320: break;
  6179                           
  6180                           
  6181                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  6182  055E  01CB               	clrf	sprintf@c
  6183  055F  0ACB               	incf	sprintf@c,f
  6184  0560                     L17:	
  6185  0560  3006               	movlw	6
  6186  0561  064B               	xorwf	sprintf@c,w
  6187  0562  1903               	btfsc	3,2
  6188  0563  2D95               	goto	l3204
  6189                           
  6190                           ;doprnt.c: 1329: if(val < octpowers[c])
  6191  0564  084B               	movf	sprintf@c,w
  6192  0565  00B8               	movwf	??_sprintf
  6193  0566  0738               	addwf	??_sprintf,w
  6194  0567  3E24               	addlw	low (_octpowers| (0+32768))
  6195  0568  0084               	movwf	4
  6196  0569  3088               	movlw	high (_octpowers| (0+32768))
  6197  056A  1803               	skipnc
  6198  056B  3E01               	addlw	1
  6199  056C  00FF               	movwf	127
  6200  056D  120A  158A  2000  120A  118A  	fcall	stringtab
  6201  0572  00B9               	movwf	??_sprintf+1
  6202  0573  120A  158A  2000  120A  118A  	fcall	stringtab
  6203  0578  00BA               	movwf	??_sprintf+2
  6204  0579  083A               	movf	??_sprintf+2,w
  6205  057A  0247               	subwf	sprintf@val+1,w
  6206  057B  1D03               	skipz
  6207  057C  2D7F               	goto	u3445
  6208  057D  0839               	movf	??_sprintf+1,w
  6209  057E  0246               	subwf	sprintf@val,w
  6210  057F                     u3445:	
  6211  057F  1C03               	btfss	3,0
  6212  0580  2D95               	goto	l3204
  6213                           
  6214                           ;doprnt.c: 1330: break;
  6215  0581  3001               	movlw	1
  6216  0582  00B8               	movwf	??_sprintf
  6217  0583  0838               	movf	??_sprintf,w
  6218  0584  07CB               	addwf	sprintf@c,f
  6219  0585  2D60               	goto	L17
  6220  0586                     l3202:	
  6221                           ;doprnt.c: 1336: }
  6222                           
  6223                           ;doprnt.c: 1332: break;
  6224                           
  6225  0586  084D               	movf	sprintf@flag,w
  6226  0587  39C0               	andlw	192
  6227                           
  6228                           ; Switch size 1, requested type "space"
  6229                           ; Number of cases is 4, Range of values is 0 to 192
  6230                           ; switch strategies available:
  6231                           ; Name         Instructions Cycles
  6232                           ; simple_byte           13     7 (average)
  6233                           ; jumptable            260     6 (fixed)
  6234                           ;	Chosen strategy is simple_byte
  6235  0588  3A00               	xorlw	0	; case 0
  6236  0589  1903               	skipnz
  6237  058A  2D0E               	goto	l577
  6238  058B  3A40               	xorlw	64	; case 64
  6239  058C  1903               	skipnz
  6240  058D  2D5E               	goto	l586
  6241  058E  3AC0               	xorlw	192	; case 128
  6242  058F  1903               	skipnz
  6243  0590  2D36               	goto	l582
  6244  0591  3A40               	xorlw	64	; case 192
  6245  0592  1903               	skipnz
  6246  0593  2D0E               	goto	l577
  6247  0594  2D95               	goto	l3204
  6248  0595                     l3204:	
  6249                           
  6250                           ;doprnt.c: 1339: if(c < prec)
  6251  0595  084B               	movf	sprintf@c,w
  6252  0596  3A80               	xorlw	128
  6253  0597  00B8               	movwf	??_sprintf
  6254  0598  0848               	movf	sprintf@prec,w
  6255  0599  3A80               	xorlw	128
  6256  059A  02B8               	subwf	??_sprintf,f
  6257  059B  1803               	skipnc
  6258  059C  2DA2               	goto	l3208
  6259                           
  6260                           ;doprnt.c: 1340: c = prec;
  6261  059D  0848               	movf	sprintf@prec,w
  6262  059E  00B8               	movwf	??_sprintf
  6263  059F  0838               	movf	??_sprintf,w
  6264  05A0  00CB               	movwf	sprintf@c
  6265  05A1  2DAE               	goto	l3212
  6266  05A2                     l3208:	
  6267                           
  6268                           ;doprnt.c: 1341: else if(prec < c)
  6269  05A2  0848               	movf	sprintf@prec,w
  6270  05A3  3A80               	xorlw	128
  6271  05A4  00B8               	movwf	??_sprintf
  6272  05A5  084B               	movf	sprintf@c,w
  6273  05A6  3A80               	xorlw	128
  6274  05A7  02B8               	subwf	??_sprintf,f
  6275  05A8  1803               	skipnc
  6276  05A9  2DAE               	goto	l3212
  6277                           
  6278                           ;doprnt.c: 1342: prec = c;
  6279  05AA  084B               	movf	sprintf@c,w
  6280  05AB  00B8               	movwf	??_sprintf
  6281  05AC  0838               	movf	??_sprintf,w
  6282  05AD  00C8               	movwf	sprintf@prec
  6283  05AE                     l3212:	
  6284                           
  6285                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6286  05AE  0849               	movf	sprintf@width,w
  6287  05AF  044A               	iorwf	sprintf@width+1,w
  6288  05B0  1903               	btfsc	3,2
  6289  05B1  2DC2               	goto	l3218
  6290  05B2  3003               	movlw	3
  6291  05B3  054D               	andwf	sprintf@flag,w
  6292  05B4  00B8               	movwf	??_sprintf
  6293  05B5  3000               	movlw	0
  6294  05B6  054E               	andwf	sprintf@flag+1,w
  6295  05B7  00B9               	movwf	??_sprintf+1
  6296  05B8  0838               	movf	??_sprintf,w
  6297  05B9  0439               	iorwf	??_sprintf+1,w
  6298  05BA  1903               	btfsc	3,2
  6299  05BB  2DC2               	goto	l3218
  6300                           
  6301                           ;doprnt.c: 1346: width--;
  6302  05BC  30FF               	movlw	255
  6303  05BD  07C9               	addwf	sprintf@width,f
  6304  05BE  1803               	skipnc
  6305  05BF  0ACA               	incf	sprintf@width+1,f
  6306  05C0  30FF               	movlw	255
  6307  05C1  07CA               	addwf	sprintf@width+1,f
  6308  05C2                     l3218:	
  6309                           
  6310                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6311  05C2  1F4E               	btfss	sprintf@flag+1,6
  6312  05C3  2DE7               	goto	l3226
  6313                           
  6314                           ;doprnt.c: 1349: if(width > prec)
  6315  05C4  0848               	movf	sprintf@prec,w
  6316  05C5  00B8               	movwf	??_sprintf
  6317  05C6  01B9               	clrf	??_sprintf+1
  6318  05C7  1BB8               	btfsc	??_sprintf,7
  6319  05C8  03B9               	decf	??_sprintf+1,f
  6320  05C9  0839               	movf	??_sprintf+1,w
  6321  05CA  3A80               	xorlw	128
  6322  05CB  00BA               	movwf	??_sprintf+2
  6323  05CC  084A               	movf	sprintf@width+1,w
  6324  05CD  3A80               	xorlw	128
  6325  05CE  023A               	subwf	??_sprintf+2,w
  6326  05CF  1D03               	skipz
  6327  05D0  2DD3               	goto	u3515
  6328  05D1  0849               	movf	sprintf@width,w
  6329  05D2  0238               	subwf	??_sprintf,w
  6330  05D3                     u3515:	
  6331  05D3  1803               	skipnc
  6332  05D4  2DE3               	goto	l3224
  6333                           
  6334                           ;doprnt.c: 1350: width -= prec;
  6335  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  6336  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  6337  05D7  0848               	movf	sprintf@prec,w
  6338  05D8  00B8               	movwf	??_sprintf
  6339  05D9  01B9               	clrf	??_sprintf+1
  6340  05DA  1BB8               	btfsc	??_sprintf,7
  6341  05DB  03B9               	decf	??_sprintf+1,f
  6342  05DC  0838               	movf	??_sprintf,w
  6343  05DD  02C9               	subwf	sprintf@width,f
  6344  05DE  0839               	movf	??_sprintf+1,w
  6345  05DF  1C03               	skipc
  6346  05E0  03CA               	decf	sprintf@width+1,f
  6347  05E1  02CA               	subwf	sprintf@width+1,f
  6348  05E2  2DE7               	goto	l3226
  6349  05E3                     l3224:	
  6350                           
  6351                           ;doprnt.c: 1351: else
  6352                           ;doprnt.c: 1352: width = 0;
  6353  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  6354  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  6355  05E5  01C9               	clrf	sprintf@width
  6356  05E6  01CA               	clrf	sprintf@width+1
  6357  05E7                     l3226:	
  6358                           
  6359                           ;doprnt.c: 1353: }
  6360                           ;doprnt.c: 1357: if((flag & (
  6361                           ;doprnt.c: 1359: 0x04|
  6362                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  6363  05E7  30C4               	movlw	196
  6364  05E8  054D               	andwf	sprintf@flag,w
  6365  05E9  00B8               	movwf	??_sprintf
  6366  05EA  3008               	movlw	8
  6367  05EB  054E               	andwf	sprintf@flag+1,w
  6368  05EC  00B9               	movwf	??_sprintf+1
  6369  05ED  3040               	movlw	64
  6370  05EE  0638               	xorwf	??_sprintf,w
  6371  05EF  3008               	movlw	8
  6372  05F0  1903               	skipnz
  6373  05F1  0639               	xorwf	??_sprintf+1,w
  6374  05F2  1D03               	btfss	3,2
  6375  05F3  2DFA               	goto	l3232
  6376                           
  6377                           ;doprnt.c: 1362: if(width)
  6378  05F4  0849               	movf	sprintf@width,w
  6379  05F5  044A               	iorwf	sprintf@width+1,w
  6380  05F6  1903               	btfsc	3,2
  6381  05F7  2E1F               	goto	l3240
  6382                           
  6383                           ;doprnt.c: 1363: width--;
  6384  05F8  30FF               	movlw	255
  6385  05F9  2E15               	goto	L9
  6386  05FA                     l3232:	
  6387                           ;doprnt.c: 1364: } else
  6388                           
  6389                           
  6390                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6391  05FA  30C0               	movlw	192
  6392  05FB  054D               	andwf	sprintf@flag,w
  6393  05FC  00B8               	movwf	??_sprintf
  6394  05FD  3008               	movlw	8
  6395  05FE  054E               	andwf	sprintf@flag+1,w
  6396  05FF  00B9               	movwf	??_sprintf+1
  6397  0600  3080               	movlw	128
  6398  0601  0638               	xorwf	??_sprintf,w
  6399  0602  3008               	movlw	8
  6400  0603  1903               	skipnz
  6401  0604  0639               	xorwf	??_sprintf+1,w
  6402  0605  1D03               	btfss	3,2
  6403  0606  2E1F               	goto	l3240
  6404                           
  6405                           ;doprnt.c: 1372: if(width > 2)
  6406  0607  084A               	movf	sprintf@width+1,w
  6407  0608  3A80               	xorlw	128
  6408  0609  00FF               	movwf	127
  6409  060A  3080               	movlw	128
  6410  060B  027F               	subwf	127,w
  6411  060C  1D03               	skipz
  6412  060D  2E10               	goto	u3555
  6413  060E  3003               	movlw	3
  6414  060F  0249               	subwf	sprintf@width,w
  6415  0610                     u3555:	
  6416  0610  1C03               	skipc
  6417  0611  2E1B               	goto	l3238
  6418                           
  6419                           ;doprnt.c: 1373: width -= 2;
  6420  0612  30FE               	movlw	254
  6421  0613  1283               	bcf	3,5	;RP0=0, select bank0
  6422  0614  1303               	bcf	3,6	;RP1=0, select bank0
  6423  0615                     L9:	
  6424  0615  07C9               	addwf	sprintf@width,f
  6425  0616  1803               	skipnc
  6426  0617  0ACA               	incf	sprintf@width+1,f
  6427  0618  30FF               	movlw	255
  6428  0619  07CA               	addwf	sprintf@width+1,f
  6429  061A  2E1F               	goto	l3240
  6430  061B                     l3238:	
  6431                           
  6432                           ;doprnt.c: 1374: else
  6433                           ;doprnt.c: 1375: width = 0;
  6434  061B  1283               	bcf	3,5	;RP0=0, select bank0
  6435  061C  1303               	bcf	3,6	;RP1=0, select bank0
  6436  061D  01C9               	clrf	sprintf@width
  6437  061E  01CA               	clrf	sprintf@width+1
  6438  061F                     l3240:	
  6439                           
  6440                           ;doprnt.c: 1376: }
  6441                           ;doprnt.c: 1381: if(width > c)
  6442  061F  084B               	movf	sprintf@c,w
  6443  0620  00B8               	movwf	??_sprintf
  6444  0621  01B9               	clrf	??_sprintf+1
  6445  0622  1BB8               	btfsc	??_sprintf,7
  6446  0623  03B9               	decf	??_sprintf+1,f
  6447  0624  0839               	movf	??_sprintf+1,w
  6448  0625  3A80               	xorlw	128
  6449  0626  00BA               	movwf	??_sprintf+2
  6450  0627  084A               	movf	sprintf@width+1,w
  6451  0628  3A80               	xorlw	128
  6452  0629  023A               	subwf	??_sprintf+2,w
  6453  062A  1D03               	skipz
  6454  062B  2E2E               	goto	u3565
  6455  062C  0849               	movf	sprintf@width,w
  6456  062D  0238               	subwf	??_sprintf,w
  6457  062E                     u3565:	
  6458  062E  1803               	skipnc
  6459  062F  2E3E               	goto	l3244
  6460                           
  6461                           ;doprnt.c: 1382: width -= c;
  6462  0630  1283               	bcf	3,5	;RP0=0, select bank0
  6463  0631  1303               	bcf	3,6	;RP1=0, select bank0
  6464  0632  084B               	movf	sprintf@c,w
  6465  0633  00B8               	movwf	??_sprintf
  6466  0634  01B9               	clrf	??_sprintf+1
  6467  0635  1BB8               	btfsc	??_sprintf,7
  6468  0636  03B9               	decf	??_sprintf+1,f
  6469  0637  0838               	movf	??_sprintf,w
  6470  0638  02C9               	subwf	sprintf@width,f
  6471  0639  0839               	movf	??_sprintf+1,w
  6472  063A  1C03               	skipc
  6473  063B  03CA               	decf	sprintf@width+1,f
  6474  063C  02CA               	subwf	sprintf@width+1,f
  6475  063D  2E42               	goto	l3246
  6476  063E                     l3244:	
  6477                           
  6478                           ;doprnt.c: 1383: else
  6479                           ;doprnt.c: 1384: width = 0;
  6480  063E  1283               	bcf	3,5	;RP0=0, select bank0
  6481  063F  1303               	bcf	3,6	;RP1=0, select bank0
  6482  0640  01C9               	clrf	sprintf@width
  6483  0641  01CA               	clrf	sprintf@width+1
  6484  0642                     l3246:	
  6485                           
  6486                           ;doprnt.c: 1387: if(flag & 0x04) {
  6487  0642  1D4D               	btfss	sprintf@flag,2
  6488  0643  2E99               	goto	l3282
  6489                           
  6490                           ;doprnt.c: 1392: if(flag & 0x03)
  6491  0644  3003               	movlw	3
  6492  0645  054D               	andwf	sprintf@flag,w
  6493  0646  00B8               	movwf	??_sprintf
  6494  0647  3000               	movlw	0
  6495  0648  054E               	andwf	sprintf@flag+1,w
  6496  0649  00B9               	movwf	??_sprintf+1
  6497  064A  0838               	movf	??_sprintf,w
  6498  064B  0439               	iorwf	??_sprintf+1,w
  6499  064C  1903               	btfsc	3,2
  6500  064D  2E50               	goto	l606
  6501                           
  6502                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  6503  064E  302D               	movlw	45
  6504  064F  2E53               	goto	L22
  6505  0650                     l606:	
  6506                           
  6507                           ;doprnt.c: 1396: else
  6508                           ;doprnt.c: 1399: if(flag & 0x01)
  6509  0650  1C4D               	btfss	sprintf@flag,0
  6510  0651  2E59               	goto	l3258
  6511                           
  6512                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  6513  0652  3020               	movlw	32
  6514  0653                     L22:	
  6515  0653  00B8               	movwf	??_sprintf
  6516  0654  084C               	movf	sprintf@sp,w
  6517  0655  0084               	movwf	4
  6518  0656  0838               	movf	??_sprintf,w
  6519  0657  1783               	bsf	3,7	;select IRP bank2
  6520  0658  2E7E               	goto	L18
  6521  0659                     l3258:	
  6522                           
  6523                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6524  0659  30C0               	movlw	192
  6525  065A  054D               	andwf	sprintf@flag,w
  6526  065B  00B8               	movwf	??_sprintf
  6527  065C  3008               	movlw	8
  6528  065D  054E               	andwf	sprintf@flag+1,w
  6529  065E  00B9               	movwf	??_sprintf+1
  6530  065F  3080               	movlw	128
  6531  0660  0638               	xorwf	??_sprintf,w
  6532  0661  3008               	movlw	8
  6533  0662  1903               	skipnz
  6534  0663  0639               	xorwf	??_sprintf+1,w
  6535  0664  1D03               	btfss	3,2
  6536  0665  2E83               	goto	l3274
  6537                           
  6538                           ;doprnt.c: 1404: ((*sp++ = ('0')));
  6539  0666  3030               	movlw	48
  6540  0667  00B8               	movwf	??_sprintf
  6541  0668  084C               	movf	sprintf@sp,w
  6542  0669  0084               	movwf	4
  6543  066A  0838               	movf	??_sprintf,w
  6544  066B  1783               	bsf	3,7	;select IRP bank2
  6545  066C  0080               	movwf	0
  6546  066D  3001               	movlw	1
  6547  066E  00B8               	movwf	??_sprintf
  6548  066F  0838               	movf	??_sprintf,w
  6549  0670  07CC               	addwf	sprintf@sp,f
  6550                           
  6551                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  6552  0671  1ACD               	btfsc	sprintf@flag,5
  6553  0672  2E75               	goto	l3268
  6554  0673  3078               	movlw	120
  6555  0674  2E76               	goto	L10
  6556  0675                     l3268:	
  6557  0675  3058               	movlw	88
  6558  0676                     L10:	
  6559  0676  00BB               	movwf	_sprintf$675
  6560  0677  3000               	movlw	0
  6561  0678  00BC               	movwf	_sprintf$675+1
  6562  0679  083B               	movf	_sprintf$675,w
  6563  067A  00B8               	movwf	??_sprintf
  6564  067B  084C               	movf	sprintf@sp,w
  6565  067C  0084               	movwf	4
  6566  067D  0838               	movf	??_sprintf,w
  6567  067E                     L18:	
  6568  067E  0080               	movwf	0
  6569  067F  3001               	movlw	1
  6570  0680  00B8               	movwf	??_sprintf
  6571  0681  0838               	movf	??_sprintf,w
  6572  0682  07CC               	addwf	sprintf@sp,f
  6573  0683                     l3274:	
  6574                           
  6575                           ;doprnt.c: 1412: }
  6576                           ;doprnt.c: 1415: if(width)
  6577  0683  0849               	movf	sprintf@width,w
  6578  0684  044A               	iorwf	sprintf@width+1,w
  6579  0685  1903               	btfsc	3,2
  6580  0686  2F9D               	goto	l3346
  6581                           
  6582                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  6583                           
  6584                           ;doprnt.c: 1416: do
  6585  0687  3030               	movlw	48
  6586  0688  00B8               	movwf	??_sprintf
  6587  0689  084C               	movf	sprintf@sp,w
  6588  068A  0084               	movwf	4
  6589  068B  0838               	movf	??_sprintf,w
  6590  068C  1783               	bsf	3,7	;select IRP bank2
  6591  068D  0080               	movwf	0
  6592  068E  3001               	movlw	1
  6593  068F  00B8               	movwf	??_sprintf
  6594  0690  0838               	movf	??_sprintf,w
  6595  0691  07CC               	addwf	sprintf@sp,f
  6596                           
  6597                           ;doprnt.c: 1418: while(--width);
  6598  0692  30FF               	movlw	255
  6599  0693  07C9               	addwf	sprintf@width,f
  6600  0694  1803               	skipnc
  6601  0695  0ACA               	incf	sprintf@width+1,f
  6602  0696  30FF               	movlw	255
  6603  0697  07CA               	addwf	sprintf@width+1,f
  6604  0698  2E83               	goto	l3274
  6605  0699                     l3282:	
  6606                           ;doprnt.c: 1420: } else
  6607                           
  6608                           
  6609                           ;doprnt.c: 1422: {
  6610                           ;doprnt.c: 1424: if(width
  6611                           ;doprnt.c: 1426: && !(flag & 0x08)
  6612                           ;doprnt.c: 1428: )
  6613  0699  0849               	movf	sprintf@width,w
  6614  069A  044A               	iorwf	sprintf@width+1,w
  6615  069B  1D03               	btfss	3,2
  6616  069C  19CD               	btfsc	sprintf@flag,3
  6617  069D  2EB3               	goto	l3292
  6618  069E                     l3286:	
  6619                           ;doprnt.c: 1429: do
  6620                           
  6621                           
  6622                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  6623  069E  3020               	movlw	32
  6624  069F  00B8               	movwf	??_sprintf
  6625  06A0  084C               	movf	sprintf@sp,w
  6626  06A1  0084               	movwf	4
  6627  06A2  0838               	movf	??_sprintf,w
  6628  06A3  1783               	bsf	3,7	;select IRP bank2
  6629  06A4  0080               	movwf	0
  6630  06A5  3001               	movlw	1
  6631  06A6  00B8               	movwf	??_sprintf
  6632  06A7  0838               	movf	??_sprintf,w
  6633  06A8  07CC               	addwf	sprintf@sp,f
  6634                           
  6635                           ;doprnt.c: 1431: while(--width);
  6636  06A9  30FF               	movlw	255
  6637  06AA  07C9               	addwf	sprintf@width,f
  6638  06AB  1803               	skipnc
  6639  06AC  0ACA               	incf	sprintf@width+1,f
  6640  06AD  30FF               	movlw	255
  6641  06AE  07CA               	addwf	sprintf@width+1,f
  6642  06AF  0849               	movf	sprintf@width,w
  6643  06B0  044A               	iorwf	sprintf@width+1,w
  6644  06B1  1D03               	btfss	3,2
  6645  06B2  2E9E               	goto	l3286
  6646  06B3                     l3292:	
  6647                           
  6648                           ;doprnt.c: 1438: if(flag & 0x03)
  6649  06B3  3003               	movlw	3
  6650  06B4  054D               	andwf	sprintf@flag,w
  6651  06B5  00B8               	movwf	??_sprintf
  6652  06B6  3000               	movlw	0
  6653  06B7  054E               	andwf	sprintf@flag+1,w
  6654  06B8  00B9               	movwf	??_sprintf+1
  6655  06B9  0838               	movf	??_sprintf,w
  6656  06BA  0439               	iorwf	??_sprintf+1,w
  6657  06BB  1903               	btfsc	3,2
  6658  06BC  2EBF               	goto	l622
  6659                           
  6660                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  6661  06BD  302D               	movlw	45
  6662  06BE  2EC2               	goto	L19
  6663  06BF                     l622:	
  6664                           
  6665                           ;doprnt.c: 1443: else if(flag & 0x01)
  6666  06BF  1C4D               	btfss	sprintf@flag,0
  6667  06C0  2ECC               	goto	l3302
  6668                           
  6669                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  6670  06C1  3020               	movlw	32
  6671  06C2                     L19:	
  6672  06C2  00B8               	movwf	??_sprintf
  6673  06C3  084C               	movf	sprintf@sp,w
  6674  06C4  0084               	movwf	4
  6675  06C5  0838               	movf	??_sprintf,w
  6676  06C6  1783               	bsf	3,7	;select IRP bank2
  6677  06C7  0080               	movwf	0
  6678  06C8  3001               	movlw	1
  6679  06C9  00B8               	movwf	??_sprintf
  6680  06CA  0838               	movf	??_sprintf,w
  6681  06CB  07CC               	addwf	sprintf@sp,f
  6682  06CC                     l3302:	
  6683                           
  6684                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  6685  06CC  30C0               	movlw	192
  6686  06CD  054D               	andwf	sprintf@flag,w
  6687  06CE  00B8               	movwf	??_sprintf
  6688  06CF  3008               	movlw	8
  6689  06D0  054E               	andwf	sprintf@flag+1,w
  6690  06D1  00B9               	movwf	??_sprintf+1
  6691  06D2  3040               	movlw	64
  6692  06D3  0638               	xorwf	??_sprintf,w
  6693  06D4  3008               	movlw	8
  6694  06D5  1903               	skipnz
  6695  06D6  0639               	xorwf	??_sprintf+1,w
  6696  06D7  1D03               	btfss	3,2
  6697  06D8  2EDB               	goto	l3308
  6698                           
  6699                           ;doprnt.c: 1449: ((*sp++ = ('0')));
  6700  06D9  3030               	movlw	48
  6701  06DA  2F93               	goto	L23
  6702  06DB                     l3308:	
  6703                           
  6704                           ;doprnt.c: 1450: else
  6705                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  6706  06DB  30C0               	movlw	192
  6707  06DC  054D               	andwf	sprintf@flag,w
  6708  06DD  00B8               	movwf	??_sprintf
  6709  06DE  3008               	movlw	8
  6710  06DF  054E               	andwf	sprintf@flag+1,w
  6711  06E0  00B9               	movwf	??_sprintf+1
  6712  06E1  3080               	movlw	128
  6713  06E2  0638               	xorwf	??_sprintf,w
  6714  06E3  3008               	movlw	8
  6715  06E4  1903               	skipnz
  6716  06E5  0639               	xorwf	??_sprintf+1,w
  6717  06E6  1D03               	btfss	3,2
  6718  06E7  2F9D               	goto	l3346
  6719                           
  6720                           ;doprnt.c: 1458: ((*sp++ = ('0')));
  6721  06E8  3030               	movlw	48
  6722  06E9  00B8               	movwf	??_sprintf
  6723  06EA  084C               	movf	sprintf@sp,w
  6724  06EB  0084               	movwf	4
  6725  06EC  0838               	movf	??_sprintf,w
  6726  06ED  1783               	bsf	3,7	;select IRP bank2
  6727  06EE  0080               	movwf	0
  6728  06EF  3001               	movlw	1
  6729  06F0  00B8               	movwf	??_sprintf
  6730  06F1  0838               	movf	??_sprintf,w
  6731  06F2  07CC               	addwf	sprintf@sp,f
  6732                           
  6733                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  6734  06F3  1ACD               	btfsc	sprintf@flag,5
  6735  06F4  2EF7               	goto	l3318
  6736  06F5  3078               	movlw	120
  6737  06F6  2EF8               	goto	L11
  6738  06F7                     l3318:	
  6739  06F7  3058               	movlw	88
  6740  06F8                     L11:	
  6741  06F8  00BD               	movwf	_sprintf$676
  6742  06F9  3000               	movlw	0
  6743  06FA  00BE               	movwf	_sprintf$676+1
  6744  06FB  083D               	movf	_sprintf$676,w
  6745  06FC  00B8               	movwf	??_sprintf
  6746  06FD  084C               	movf	sprintf@sp,w
  6747  06FE  0084               	movwf	4
  6748  06FF  0838               	movf	??_sprintf,w
  6749  0700  2F98               	goto	L20
  6750  0701                     l3324:	
  6751                           ;doprnt.c: 1478: {
  6752                           ;doprnt.c: 1483: case 0x00:
  6753                           
  6754                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
  6755                           
  6756                           ;doprnt.c: 1466: }
  6757                           ;doprnt.c: 1469: }
  6758                           ;doprnt.c: 1474: while(prec--) {
  6759                           
  6760                           
  6761                           ;doprnt.c: 1486: case 0xC0:
  6762                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6763  0701  300A               	movlw	10
  6764  0702  00F8               	movwf	___lwmod@divisor
  6765  0703  3000               	movlw	0
  6766  0704  00F9               	movwf	___lwmod@divisor+1
  6767  0705  0848               	movf	sprintf@prec,w
  6768  0706  00B8               	movwf	??_sprintf
  6769  0707  0738               	addwf	??_sprintf,w
  6770  0708  3E30               	addlw	low (_dpowers| (0+32768))
  6771  0709  0084               	movwf	4
  6772  070A  3088               	movlw	high (_dpowers| (0+32768))
  6773  070B  1803               	skipnc
  6774  070C  3E01               	addlw	1
  6775  070D  00FF               	movwf	127
  6776  070E  120A  158A  2000  120A  118A  	fcall	stringtab
  6777  0713  00F0               	movwf	___lwdiv@divisor
  6778  0714  120A  158A  2000  120A  118A  	fcall	stringtab
  6779  0719  00F1               	movwf	___lwdiv@divisor+1
  6780  071A  0847               	movf	sprintf@val+1,w
  6781  071B  00F3               	movwf	___lwdiv@dividend+1
  6782  071C  0846               	movf	sprintf@val,w
  6783  071D  00F2               	movwf	___lwdiv@dividend
  6784  071E  160A  118A  2396  120A  118A  	fcall	___lwdiv
  6785  0723  0871               	movf	?___lwdiv+1,w
  6786  0724  00FB               	movwf	___lwmod@dividend+1
  6787  0725  0870               	movf	?___lwdiv,w
  6788  0726  00FA               	movwf	___lwmod@dividend
  6789  0727  160A  118A  22B8  120A  118A  	fcall	___lwmod
  6790  072C  0878               	movf	?___lwmod,w
  6791  072D  2F8C               	goto	L21
  6792  072E                     l3326:	
  6793                           ;doprnt.c: 1497: case 0x80:
  6794                           
  6795                           ;doprnt.c: 1491: break;
  6796                           
  6797                           
  6798                           ;doprnt.c: 1499: {
  6799                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6800  072E  0848               	movf	sprintf@prec,w
  6801  072F  00B8               	movwf	??_sprintf
  6802  0730  0738               	addwf	??_sprintf,w
  6803  0731  3E3A               	addlw	low (_hexpowers| (0+32768))
  6804  0732  0084               	movwf	4
  6805  0733  3088               	movlw	high (_hexpowers| (0+32768))
  6806  0734  1803               	skipnc
  6807  0735  3E01               	addlw	1
  6808  0736  00FF               	movwf	127
  6809  0737  120A  158A  2000  120A  118A  	fcall	stringtab
  6810  073C  00F0               	movwf	___lwdiv@divisor
  6811  073D  120A  158A  2000  120A  118A  	fcall	stringtab
  6812  0742  00F1               	movwf	___lwdiv@divisor+1
  6813  0743  0847               	movf	sprintf@val+1,w
  6814  0744  00F3               	movwf	___lwdiv@dividend+1
  6815  0745  0846               	movf	sprintf@val,w
  6816  0746  00F2               	movwf	___lwdiv@dividend
  6817  0747  160A  118A  2396  120A  118A  	fcall	___lwdiv
  6818  074C  0870               	movf	?___lwdiv,w
  6819  074D  390F               	andlw	15
  6820  074E  1283               	bcf	3,5	;RP0=0, select bank0
  6821  074F  1303               	bcf	3,6	;RP1=0, select bank0
  6822  0750  00B9               	movwf	??_sprintf+1
  6823  0751  0839               	movf	??_sprintf+1,w
  6824  0752  00C1               	movwf	sprintf@idx
  6825                           
  6826                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  6827  0753  1ACD               	btfsc	sprintf@flag,5
  6828  0754  2F59               	goto	l3332
  6829  0755  3048               	movlw	low (STR_27| (0+32768))
  6830  0756  00BF               	movwf	_sprintf$682
  6831  0757  3089               	movlw	high (STR_27| (0+32768))
  6832  0758  2F5C               	goto	L13
  6833  0759                     l3332:	
  6834  0759  3037               	movlw	low (STR_26| (0+32768))
  6835  075A  00BF               	movwf	_sprintf$682
  6836  075B  3089               	movlw	high (STR_26| (0+32768))
  6837  075C                     L13:	
  6838  075C  00C0               	movwf	_sprintf$682+1
  6839  075D  0841               	movf	sprintf@idx,w
  6840  075E  073F               	addwf	_sprintf$682,w
  6841  075F  0084               	movwf	4
  6842  0760  0840               	movf	_sprintf$682+1,w
  6843  0761  1803               	skipnc
  6844  0762  0A40               	incf	_sprintf$682+1,w
  6845  0763  00FF               	movwf	127
  6846  0764  120A  158A  2000  120A  118A  	fcall	stringtab
  6847  0769  00B8               	movwf	??_sprintf
  6848  076A  0838               	movf	??_sprintf,w
  6849  076B  2F91               	goto	L14
  6850  076C                     l3336:	
  6851                           ;doprnt.c: 1516: case 0x40:
  6852                           
  6853                           ;doprnt.c: 1508: }
  6854                           ;doprnt.c: 1510: break;
  6855                           
  6856                           
  6857                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  6858  076C  0848               	movf	sprintf@prec,w
  6859  076D  00B8               	movwf	??_sprintf
  6860  076E  0738               	addwf	??_sprintf,w
  6861  076F  3E24               	addlw	low (_octpowers| (0+32768))
  6862  0770  0084               	movwf	4
  6863  0771  3088               	movlw	high (_octpowers| (0+32768))
  6864  0772  1803               	skipnc
  6865  0773  3E01               	addlw	1
  6866  0774  00FF               	movwf	127
  6867  0775  120A  158A  2000  120A  118A  	fcall	stringtab
  6868  077A  00F0               	movwf	___lwdiv@divisor
  6869  077B  120A  158A  2000  120A  118A  	fcall	stringtab
  6870  0780  00F1               	movwf	___lwdiv@divisor+1
  6871  0781  0847               	movf	sprintf@val+1,w
  6872  0782  00F3               	movwf	___lwdiv@dividend+1
  6873  0783  0846               	movf	sprintf@val,w
  6874  0784  00F2               	movwf	___lwdiv@dividend
  6875  0785  160A  118A  2396  120A  118A  	fcall	___lwdiv
  6876  078A  0870               	movf	?___lwdiv,w
  6877  078B  3907               	andlw	7
  6878  078C                     L21:	
  6879  078C  3E30               	addlw	48
  6880  078D  1283               	bcf	3,5	;RP0=0, select bank0
  6881  078E  1303               	bcf	3,6	;RP1=0, select bank0
  6882  078F  00B9               	movwf	??_sprintf+1
  6883  0790  0839               	movf	??_sprintf+1,w
  6884  0791                     L14:	
  6885  0791  00CB               	movwf	sprintf@c
  6886  0792                     l3342:	
  6887                           ;doprnt.c: 1523: }
  6888                           
  6889                           ;doprnt.c: 1520: break;
  6890                           
  6891                           
  6892                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6893  0792  084B               	movf	sprintf@c,w
  6894  0793                     L23:	
  6895  0793  00B8               	movwf	??_sprintf
  6896  0794  084C               	movf	sprintf@sp,w
  6897  0795  0084               	movwf	4
  6898  0796  0838               	movf	??_sprintf,w
  6899  0797  1783               	bsf	3,7	;select IRP bank2
  6900  0798                     L20:	
  6901  0798  0080               	movwf	0
  6902  0799  3001               	movlw	1
  6903  079A  00B8               	movwf	??_sprintf
  6904  079B  0838               	movf	??_sprintf,w
  6905  079C  07CC               	addwf	sprintf@sp,f
  6906  079D                     l3346:	
  6907  079D  30FF               	movlw	255
  6908  079E  00B8               	movwf	??_sprintf
  6909  079F  0838               	movf	??_sprintf,w
  6910  07A0  07C8               	addwf	sprintf@prec,f
  6911  07A1  0A48               	incf	sprintf@prec,w
  6912  07A2  1903               	btfsc	3,2
  6913  07A3  2FB4               	goto	l644
  6914  07A4  084D               	movf	sprintf@flag,w
  6915  07A5  39C0               	andlw	192
  6916                           
  6917                           ; Switch size 1, requested type "space"
  6918                           ; Number of cases is 4, Range of values is 0 to 192
  6919                           ; switch strategies available:
  6920                           ; Name         Instructions Cycles
  6921                           ; simple_byte           13     7 (average)
  6922                           ; jumptable            260     6 (fixed)
  6923                           ;	Chosen strategy is simple_byte
  6924  07A6  3A00               	xorlw	0	; case 0
  6925  07A7  1903               	skipnz
  6926  07A8  2F01               	goto	l3324
  6927  07A9  3A40               	xorlw	64	; case 64
  6928  07AA  1903               	skipnz
  6929  07AB  2F6C               	goto	l3336
  6930  07AC  3AC0               	xorlw	192	; case 128
  6931  07AD  1903               	skipnz
  6932  07AE  2F2E               	goto	l3326
  6933  07AF  3A40               	xorlw	64	; case 192
  6934  07B0  1903               	skipnz
  6935  07B1  2F01               	goto	l3324
  6936  07B2  2F92               	goto	l3342
  6937  07B3  2F92               	goto	l3342
  6938  07B4                     l644:	
  6939                           
  6940                           ;doprnt.c: 1525: }
  6941                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  6942  07B4  1DCD               	btfss	sprintf@flag,3
  6943  07B5  2AE5               	goto	l3356
  6944  07B6  084A               	movf	sprintf@width+1,w
  6945  07B7  3A80               	xorlw	128
  6946  07B8  00FF               	movwf	127
  6947  07B9  3080               	movlw	128
  6948  07BA  027F               	subwf	127,w
  6949  07BB  1D03               	skipz
  6950  07BC  2FBF               	goto	u3755
  6951  07BD  3001               	movlw	1
  6952  07BE  0249               	subwf	sprintf@width,w
  6953  07BF                     u3755:	
  6954  07BF  1C03               	skipc
  6955  07C0  2AE5               	goto	l3356
  6956  07C1                     l3350:	
  6957                           ;doprnt.c: 1529: do
  6958                           
  6959                           
  6960                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  6961  07C1  3020               	movlw	32
  6962  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  6963  07C3  1303               	bcf	3,6	;RP1=0, select bank0
  6964  07C4  00B8               	movwf	??_sprintf
  6965  07C5  084C               	movf	sprintf@sp,w
  6966  07C6  0084               	movwf	4
  6967  07C7  0838               	movf	??_sprintf,w
  6968  07C8  1783               	bsf	3,7	;select IRP bank2
  6969  07C9  0080               	movwf	0
  6970  07CA  3001               	movlw	1
  6971  07CB  00B8               	movwf	??_sprintf
  6972  07CC  0838               	movf	??_sprintf,w
  6973  07CD  07CC               	addwf	sprintf@sp,f
  6974                           
  6975                           ;doprnt.c: 1531: while(--width);
  6976  07CE  30FF               	movlw	255
  6977  07CF  07C9               	addwf	sprintf@width,f
  6978  07D0  1803               	skipnc
  6979  07D1  0ACA               	incf	sprintf@width+1,f
  6980  07D2  30FF               	movlw	255
  6981  07D3  07CA               	addwf	sprintf@width+1,f
  6982  07D4  0849               	movf	sprintf@width,w
  6983  07D5  044A               	iorwf	sprintf@width+1,w
  6984  07D6  1903               	btfsc	3,2
  6985  07D7  2AE5               	goto	l3356
  6986  07D8  2FC1               	goto	l3350
  6987  07D9                     l3358:	
  6988                           ;doprnt.c: 1533: }
  6989                           ;doprnt.c: 1535: alldone:
  6990                           
  6991                           
  6992                           ;doprnt.c: 1538: *sp = 0;
  6993  07D9  084C               	movf	sprintf@sp,w
  6994  07DA  0084               	movwf	4
  6995  07DB  1783               	bsf	3,7	;select IRP bank2
  6996  07DC  0180               	clrf	0
  6997  07DD  0008               	return
  6998  07DE                     __end_of_sprintf:	
  6999                           ;doprnt.c: 1540: return 0;
  7000                           ;	Return value of _sprintf is never used
  7001                           
  7002                           
  7003                           	psect	text20
  7004  1060                     __ptext20:	
  7005 ;; *************** function _isdigit *****************
  7006 ;; Defined at:
  7007 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
  7008 ;; Parameters:    Size  Location     Type
  7009 ;;  c               1    wreg     unsigned char 
  7010 ;; Auto vars:     Size  Location     Type
  7011 ;;  c               1    1[COMMON] unsigned char 
  7012 ;; Return value:  Size  Location     Type
  7013 ;;		None               void
  7014 ;; Registers used:
  7015 ;;		wreg, status,2, status,0
  7016 ;; Tracked objects:
  7017 ;;		On entry : 0/0
  7018 ;;		On exit  : 0/0
  7019 ;;		Unchanged: 0/0
  7020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7021 ;;      Params:         0       0       0       0       0
  7022 ;;      Locals:         2       0       0       0       0
  7023 ;;      Temps:          0       0       0       0       0
  7024 ;;      Totals:         2       0       0       0       0
  7025 ;;Total ram usage:        2 bytes
  7026 ;; Hardware stack levels used:    1
  7027 ;; This function calls:
  7028 ;;		Nothing
  7029 ;; This function is called by:
  7030 ;;		_sprintf
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           
  7035                           ;psect for function _isdigit
  7036  1060                     _isdigit:	
  7037                           
  7038                           ;incstack = 0
  7039                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7040                           ;isdigit@c stored from wreg
  7041  1060  00F1               	movwf	isdigit@c
  7042  1061  01F0               	clrf	_isdigit$868
  7043  1062  303A               	movlw	58
  7044  1063  0271               	subwf	isdigit@c,w
  7045  1064  1803               	skipnc
  7046  1065  286C               	goto	l2952
  7047  1066  3030               	movlw	48
  7048  1067  0271               	subwf	isdigit@c,w
  7049  1068  1C03               	skipc
  7050  1069  286C               	goto	l2952
  7051  106A  01F0               	clrf	_isdigit$868
  7052  106B  0AF0               	incf	_isdigit$868,f
  7053  106C                     l2952:	
  7054  106C  0C70               	rrf	_isdigit$868,w
  7055  106D  0008               	return
  7056  106E                     __end_of_isdigit:	
  7057                           
  7058                           	psect	text21
  7059  11C8                     __ptext21:	
  7060 ;; *************** function ___wmul *****************
  7061 ;; Defined at:
  7062 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  7063 ;; Parameters:    Size  Location     Type
  7064 ;;  multiplier      2   12[BANK0 ] unsigned int 
  7065 ;;  multiplicand    2   14[BANK0 ] unsigned int 
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;  product         2   12[COMMON] unsigned int 
  7068 ;; Return value:  Size  Location     Type
  7069 ;;                  2   12[BANK0 ] unsigned int 
  7070 ;; Registers used:
  7071 ;;		wreg, status,2, status,0
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7077 ;;      Params:         0       4       0       0       0
  7078 ;;      Locals:         2       0       0       0       0
  7079 ;;      Temps:          0       0       0       0       0
  7080 ;;      Totals:         2       4       0       0       0
  7081 ;;Total ram usage:        6 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; This function calls:
  7084 ;;		Nothing
  7085 ;; This function is called by:
  7086 ;;		_find_best_solution
  7087 ;;		_sprintf
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           
  7092                           ;psect for function ___wmul
  7093  11C8                     ___wmul:	
  7094                           
  7095                           ;incstack = 0
  7096                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7097  11C8  01FC               	clrf	___wmul@product
  7098  11C9  01FD               	clrf	___wmul@product+1
  7099  11CA                     l2958:	
  7100  11CA  1283               	bcf	3,5	;RP0=0, select bank0
  7101  11CB  1303               	bcf	3,6	;RP1=0, select bank0
  7102  11CC  1C2C               	btfss	___wmul@multiplier,0
  7103  11CD  29D4               	goto	l733
  7104  11CE  082E               	movf	___wmul@multiplicand,w
  7105  11CF  07FC               	addwf	___wmul@product,f
  7106  11D0  1803               	skipnc
  7107  11D1  0AFD               	incf	___wmul@product+1,f
  7108  11D2  082F               	movf	___wmul@multiplicand+1,w
  7109  11D3  07FD               	addwf	___wmul@product+1,f
  7110  11D4                     l733:	
  7111  11D4  3001               	movlw	1
  7112  11D5                     u2985:	
  7113  11D5  1003               	clrc
  7114  11D6  0DAE               	rlf	___wmul@multiplicand,f
  7115  11D7  0DAF               	rlf	___wmul@multiplicand+1,f
  7116  11D8  3EFF               	addlw	-1
  7117  11D9  1D03               	skipz
  7118  11DA  29D5               	goto	u2985
  7119  11DB  3001               	movlw	1
  7120  11DC                     u2995:	
  7121  11DC  1003               	clrc
  7122  11DD  0CAD               	rrf	___wmul@multiplier+1,f
  7123  11DE  0CAC               	rrf	___wmul@multiplier,f
  7124  11DF  3EFF               	addlw	-1
  7125  11E0  1D03               	skipz
  7126  11E1  29DC               	goto	u2995
  7127  11E2  082C               	movf	___wmul@multiplier,w
  7128  11E3  042D               	iorwf	___wmul@multiplier+1,w
  7129  11E4  1D03               	btfss	3,2
  7130  11E5  29CA               	goto	l2958
  7131  11E6  087D               	movf	___wmul@product+1,w
  7132  11E7  00AD               	movwf	?___wmul+1
  7133  11E8  087C               	movf	___wmul@product,w
  7134  11E9  00AC               	movwf	?___wmul
  7135  11EA  0008               	return
  7136  11EB                     __end_of___wmul:	
  7137                           
  7138                           	psect	text22
  7139  12B8                     __ptext22:	
  7140 ;; *************** function ___lwmod *****************
  7141 ;; Defined at:
  7142 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  7143 ;; Parameters:    Size  Location     Type
  7144 ;;  divisor         2    8[COMMON] unsigned int 
  7145 ;;  dividend        2   10[COMMON] unsigned int 
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;  counter         1   13[COMMON] unsigned char 
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  2    8[COMMON] unsigned int 
  7150 ;; Registers used:
  7151 ;;		wreg, status,2, status,0
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7157 ;;      Params:         4       0       0       0       0
  7158 ;;      Locals:         1       0       0       0       0
  7159 ;;      Temps:          1       0       0       0       0
  7160 ;;      Totals:         6       0       0       0       0
  7161 ;;Total ram usage:        6 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; This function calls:
  7164 ;;		Nothing
  7165 ;; This function is called by:
  7166 ;;		_sprintf
  7167 ;; This function uses a non-reentrant model
  7168 ;;
  7169                           
  7170                           
  7171                           ;psect for function ___lwmod
  7172  12B8                     ___lwmod:	
  7173                           
  7174                           ;incstack = 0
  7175                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7176  12B8  0878               	movf	___lwmod@divisor,w
  7177  12B9  0479               	iorwf	___lwmod@divisor+1,w
  7178  12BA  1903               	btfsc	3,2
  7179  12BB  2AE5               	goto	l3028
  7180  12BC  01FD               	clrf	___lwmod@counter
  7181  12BD  0AFD               	incf	___lwmod@counter,f
  7182  12BE                     l3018:	
  7183  12BE  1BF9               	btfsc	___lwmod@divisor+1,7
  7184  12BF  2ACC               	goto	l3020
  7185  12C0  3001               	movlw	1
  7186  12C1                     u3115:	
  7187  12C1  1003               	clrc
  7188  12C2  0DF8               	rlf	___lwmod@divisor,f
  7189  12C3  0DF9               	rlf	___lwmod@divisor+1,f
  7190  12C4  3EFF               	addlw	-1
  7191  12C5  1D03               	skipz
  7192  12C6  2AC1               	goto	u3115
  7193  12C7  3001               	movlw	1
  7194  12C8  00FC               	movwf	??___lwmod
  7195  12C9  087C               	movf	??___lwmod,w
  7196  12CA  07FD               	addwf	___lwmod@counter,f
  7197  12CB  2ABE               	goto	l3018
  7198  12CC                     l3020:	
  7199  12CC  0879               	movf	___lwmod@divisor+1,w
  7200  12CD  027B               	subwf	___lwmod@dividend+1,w
  7201  12CE  1D03               	skipz
  7202  12CF  2AD2               	goto	u3135
  7203  12D0  0878               	movf	___lwmod@divisor,w
  7204  12D1  027A               	subwf	___lwmod@dividend,w
  7205  12D2                     u3135:	
  7206  12D2  1C03               	skipc
  7207  12D3  2ADA               	goto	l3024
  7208  12D4  0878               	movf	___lwmod@divisor,w
  7209  12D5  02FA               	subwf	___lwmod@dividend,f
  7210  12D6  0879               	movf	___lwmod@divisor+1,w
  7211  12D7  1C03               	skipc
  7212  12D8  03FB               	decf	___lwmod@dividend+1,f
  7213  12D9  02FB               	subwf	___lwmod@dividend+1,f
  7214  12DA                     l3024:	
  7215  12DA  3001               	movlw	1
  7216  12DB                     u3145:	
  7217  12DB  1003               	clrc
  7218  12DC  0CF9               	rrf	___lwmod@divisor+1,f
  7219  12DD  0CF8               	rrf	___lwmod@divisor,f
  7220  12DE  3EFF               	addlw	-1
  7221  12DF  1D03               	skipz
  7222  12E0  2ADB               	goto	u3145
  7223  12E1  3001               	movlw	1
  7224  12E2  02FD               	subwf	___lwmod@counter,f
  7225  12E3  1D03               	btfss	3,2
  7226  12E4  2ACC               	goto	l3020
  7227  12E5                     l3028:	
  7228  12E5  087B               	movf	___lwmod@dividend+1,w
  7229  12E6  00F9               	movwf	?___lwmod+1
  7230  12E7  087A               	movf	___lwmod@dividend,w
  7231  12E8  00F8               	movwf	?___lwmod
  7232  12E9  0008               	return
  7233  12EA                     __end_of___lwmod:	
  7234                           
  7235                           	psect	text23
  7236  1396                     __ptext23:	
  7237 ;; *************** function ___lwdiv *****************
  7238 ;; Defined at:
  7239 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;  divisor         2    0[COMMON] unsigned int 
  7242 ;;  dividend        2    2[COMMON] unsigned int 
  7243 ;; Auto vars:     Size  Location     Type
  7244 ;;  quotient        2    5[COMMON] unsigned int 
  7245 ;;  counter         1    7[COMMON] unsigned char 
  7246 ;; Return value:  Size  Location     Type
  7247 ;;                  2    0[COMMON] unsigned int 
  7248 ;; Registers used:
  7249 ;;		wreg, status,2, status,0
  7250 ;; Tracked objects:
  7251 ;;		On entry : 0/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7255 ;;      Params:         4       0       0       0       0
  7256 ;;      Locals:         3       0       0       0       0
  7257 ;;      Temps:          1       0       0       0       0
  7258 ;;      Totals:         8       0       0       0       0
  7259 ;;Total ram usage:        8 bytes
  7260 ;; Hardware stack levels used:    1
  7261 ;; This function calls:
  7262 ;;		Nothing
  7263 ;; This function is called by:
  7264 ;;		_sprintf
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           
  7269                           ;psect for function ___lwdiv
  7270  1396                     ___lwdiv:	
  7271                           
  7272                           ;incstack = 0
  7273                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7274  1396  01F5               	clrf	___lwdiv@quotient
  7275  1397  01F6               	clrf	___lwdiv@quotient+1
  7276  1398  0870               	movf	___lwdiv@divisor,w
  7277  1399  0471               	iorwf	___lwdiv@divisor+1,w
  7278  139A  1903               	btfsc	3,2
  7279  139B  2BCD               	goto	l3006
  7280  139C  01F7               	clrf	___lwdiv@counter
  7281  139D  0AF7               	incf	___lwdiv@counter,f
  7282  139E                     l2994:	
  7283  139E  1BF1               	btfsc	___lwdiv@divisor+1,7
  7284  139F  2BAC               	goto	l2996
  7285  13A0  3001               	movlw	1
  7286  13A1                     u3045:	
  7287  13A1  1003               	clrc
  7288  13A2  0DF0               	rlf	___lwdiv@divisor,f
  7289  13A3  0DF1               	rlf	___lwdiv@divisor+1,f
  7290  13A4  3EFF               	addlw	-1
  7291  13A5  1D03               	skipz
  7292  13A6  2BA1               	goto	u3045
  7293  13A7  3001               	movlw	1
  7294  13A8  00F4               	movwf	??___lwdiv
  7295  13A9  0874               	movf	??___lwdiv,w
  7296  13AA  07F7               	addwf	___lwdiv@counter,f
  7297  13AB  2B9E               	goto	l2994
  7298  13AC                     l2996:	
  7299  13AC  3001               	movlw	1
  7300  13AD                     u3065:	
  7301  13AD  1003               	clrc
  7302  13AE  0DF5               	rlf	___lwdiv@quotient,f
  7303  13AF  0DF6               	rlf	___lwdiv@quotient+1,f
  7304  13B0  3EFF               	addlw	-1
  7305  13B1  1D03               	skipz
  7306  13B2  2BAD               	goto	u3065
  7307  13B3  0871               	movf	___lwdiv@divisor+1,w
  7308  13B4  0273               	subwf	___lwdiv@dividend+1,w
  7309  13B5  1D03               	skipz
  7310  13B6  2BB9               	goto	u3075
  7311  13B7  0870               	movf	___lwdiv@divisor,w
  7312  13B8  0272               	subwf	___lwdiv@dividend,w
  7313  13B9                     u3075:	
  7314  13B9  1C03               	skipc
  7315  13BA  2BC2               	goto	l3002
  7316  13BB  0870               	movf	___lwdiv@divisor,w
  7317  13BC  02F2               	subwf	___lwdiv@dividend,f
  7318  13BD  0871               	movf	___lwdiv@divisor+1,w
  7319  13BE  1C03               	skipc
  7320  13BF  03F3               	decf	___lwdiv@dividend+1,f
  7321  13C0  02F3               	subwf	___lwdiv@dividend+1,f
  7322  13C1  1475               	bsf	___lwdiv@quotient,0
  7323  13C2                     l3002:	
  7324  13C2  3001               	movlw	1
  7325  13C3                     u3085:	
  7326  13C3  1003               	clrc
  7327  13C4  0CF1               	rrf	___lwdiv@divisor+1,f
  7328  13C5  0CF0               	rrf	___lwdiv@divisor,f
  7329  13C6  3EFF               	addlw	-1
  7330  13C7  1D03               	skipz
  7331  13C8  2BC3               	goto	u3085
  7332  13C9  3001               	movlw	1
  7333  13CA  02F7               	subwf	___lwdiv@counter,f
  7334  13CB  1D03               	btfss	3,2
  7335  13CC  2BAC               	goto	l2996
  7336  13CD                     l3006:	
  7337  13CD  0876               	movf	___lwdiv@quotient+1,w
  7338  13CE  00F1               	movwf	?___lwdiv+1
  7339  13CF  0875               	movf	___lwdiv@quotient,w
  7340  13D0  00F0               	movwf	?___lwdiv
  7341  13D1  0008               	return
  7342  13D2                     __end_of___lwdiv:	
  7343                           
  7344                           	psect	text24
  7345  109D                     __ptext24:	
  7346 ;; *************** function ___bmul *****************
  7347 ;; Defined at:
  7348 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  multiplier      1    wreg     unsigned char 
  7351 ;;  multiplicand    1    0[COMMON] unsigned char 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  multiplier      1    3[COMMON] unsigned char 
  7354 ;;  product         1    2[COMMON] unsigned char 
  7355 ;; Return value:  Size  Location     Type
  7356 ;;                  1    wreg      unsigned char 
  7357 ;; Registers used:
  7358 ;;		wreg, status,2, status,0
  7359 ;; Tracked objects:
  7360 ;;		On entry : 0/0
  7361 ;;		On exit  : 0/0
  7362 ;;		Unchanged: 0/0
  7363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7364 ;;      Params:         1       0       0       0       0
  7365 ;;      Locals:         2       0       0       0       0
  7366 ;;      Temps:          1       0       0       0       0
  7367 ;;      Totals:         4       0       0       0       0
  7368 ;;Total ram usage:        4 bytes
  7369 ;; Hardware stack levels used:    1
  7370 ;; This function calls:
  7371 ;;		Nothing
  7372 ;; This function is called by:
  7373 ;;		_sprintf
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           
  7378                           ;psect for function ___bmul
  7379  109D                     ___bmul:	
  7380                           
  7381                           ;incstack = 0
  7382                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7383                           ;___bmul@multiplier stored from wreg
  7384  109D  00F3               	movwf	___bmul@multiplier
  7385  109E  01F2               	clrf	___bmul@product
  7386  109F                     l2972:	
  7387  109F  1C73               	btfss	___bmul@multiplier,0
  7388  10A0  28A5               	goto	l2976
  7389  10A1  0870               	movf	___bmul@multiplicand,w
  7390  10A2  00F1               	movwf	??___bmul
  7391  10A3  0871               	movf	??___bmul,w
  7392  10A4  07F2               	addwf	___bmul@product,f
  7393  10A5                     l2976:	
  7394  10A5  1003               	clrc
  7395  10A6  0DF0               	rlf	___bmul@multiplicand,f
  7396  10A7  1003               	clrc
  7397  10A8  0CF3               	rrf	___bmul@multiplier,f
  7398  10A9  0873               	movf	___bmul@multiplier,w
  7399  10AA  1D03               	btfss	3,2
  7400  10AB  289F               	goto	l2972
  7401  10AC  0872               	movf	___bmul@product,w
  7402  10AD  0008               	return
  7403  10AE                     __end_of___bmul:	
  7404                           
  7405                           	psect	text25
  7406  11EB                     __ptext25:	
  7407 ;; *************** function _USARTWriteString *****************
  7408 ;; Defined at:
  7409 ;;		line 76 in file "usart_pic16.c"
  7410 ;; Parameters:    Size  Location     Type
  7411 ;;  str             2    1[COMMON] PTR const unsigned char 
  7412 ;;		 -> STR_25(12), STR_24(17), STR_21(2), STR_20(21), 
  7413 ;;		 -> STR_19(1), STR_18(2), STR_17(2), STR_16(31), 
  7414 ;;		 -> STR_15(2), STR_12(21), STR_11(2), STR_10(21), 
  7415 ;;		 -> STR_9(1), STR_8(2), STR_7(2), STR_6(30), 
  7416 ;;		 -> STR_5(2), ROM(8192), STR_4(3), STR_3(3), 
  7417 ;;		 -> STR_2(3), g_debug(32), STR_1(3), 
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;		None
  7420 ;; Return value:  Size  Location     Type
  7421 ;;                  1    wreg      void 
  7422 ;; Registers used:
  7423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7429 ;;      Params:         2       0       0       0       0
  7430 ;;      Locals:         0       0       0       0       0
  7431 ;;      Temps:          0       0       0       0       0
  7432 ;;      Totals:         2       0       0       0       0
  7433 ;;Total ram usage:        2 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; Hardware stack levels required when called:    1
  7436 ;; This function calls:
  7437 ;;		_USARTWriteChar
  7438 ;; This function is called by:
  7439 ;;		_debug_str
  7440 ;;		_debug_line
  7441 ;;		_debug_int1
  7442 ;;		_USARTWriteLine
  7443 ;;		_debug_int2
  7444 ;;		_debug_int3
  7445 ;; This function uses a non-reentrant model
  7446 ;;
  7447                           
  7448                           
  7449                           ;psect for function _USARTWriteString
  7450  11EB                     _USARTWriteString:	
  7451  11EB                     l3038:	
  7452                           ;usart_pic16.c: 77: while (*str != '\0') {
  7453                           
  7454                           ;incstack = 0
  7455                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7456                           
  7457  11EB  0872               	movf	USARTWriteString@str+1,w
  7458  11EC  1283               	bcf	3,5	;RP0=0, select bank0
  7459  11ED  1303               	bcf	3,6	;RP1=0, select bank0
  7460  11EE  00FF               	movwf	127
  7461  11EF  0871               	movf	USARTWriteString@str,w
  7462  11F0  0084               	movwf	4
  7463  11F1  120A  158A  2000  160A  118A  	fcall	stringtab
  7464  11F6  3A00               	xorlw	0
  7465  11F7  1903               	btfsc	3,2
  7466  11F8  0008               	return
  7467                           
  7468                           ;usart_pic16.c: 78: USARTWriteChar(*str);
  7469  11F9  0872               	movf	USARTWriteString@str+1,w
  7470  11FA  1283               	bcf	3,5	;RP0=0, select bank0
  7471  11FB  1303               	bcf	3,6	;RP1=0, select bank0
  7472  11FC  00FF               	movwf	127
  7473  11FD  0871               	movf	USARTWriteString@str,w
  7474  11FE  0084               	movwf	4
  7475  11FF  120A  158A  2000  160A  118A  	fcall	stringtab
  7476  1204  160A  118A  2039  160A  118A  	fcall	_USARTWriteChar
  7477                           
  7478                           ;usart_pic16.c: 79: str++;
  7479  1209  3001               	movlw	1
  7480  120A  07F1               	addwf	USARTWriteString@str,f
  7481  120B  1803               	skipnc
  7482  120C  0AF2               	incf	USARTWriteString@str+1,f
  7483  120D  3000               	movlw	0
  7484  120E  07F2               	addwf	USARTWriteString@str+1,f
  7485  120F  29EB               	goto	l3038
  7486  1210                     __end_of_USARTWriteString:	
  7487                           
  7488                           	psect	text26
  7489  1039                     __ptext26:	
  7490 ;; *************** function _USARTWriteChar *****************
  7491 ;; Defined at:
  7492 ;;		line 70 in file "usart_pic16.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;  ch              1    wreg     unsigned char 
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;  ch              1    0[COMMON] unsigned char 
  7497 ;; Return value:  Size  Location     Type
  7498 ;;                  1    wreg      void 
  7499 ;; Registers used:
  7500 ;;		wreg
  7501 ;; Tracked objects:
  7502 ;;		On entry : 0/0
  7503 ;;		On exit  : 0/0
  7504 ;;		Unchanged: 0/0
  7505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7506 ;;      Params:         0       0       0       0       0
  7507 ;;      Locals:         1       0       0       0       0
  7508 ;;      Temps:          0       0       0       0       0
  7509 ;;      Totals:         1       0       0       0       0
  7510 ;;Total ram usage:        1 bytes
  7511 ;; Hardware stack levels used:    1
  7512 ;; This function calls:
  7513 ;;		Nothing
  7514 ;; This function is called by:
  7515 ;;		_USARTWriteString
  7516 ;;		_USARTWriteLine
  7517 ;;		_USARTWriteInt
  7518 ;;		_USARTGotoNewLine
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           
  7523                           ;psect for function _USARTWriteChar
  7524  1039                     _USARTWriteChar:	
  7525                           
  7526                           ;incstack = 0
  7527                           ; Regs used in _USARTWriteChar: [wreg]
  7528                           ;USARTWriteChar@ch stored from wreg
  7529  1039  00F0               	movwf	USARTWriteChar@ch
  7530  103A                     l36:	
  7531                           ;usart_pic16.c: 71: while (!PIR1bits.TXIF);
  7532                           
  7533  103A  1283               	bcf	3,5	;RP0=0, select bank0
  7534  103B  1303               	bcf	3,6	;RP1=0, select bank0
  7535  103C  1E0C               	btfss	12,4	;volatile
  7536  103D  283A               	goto	l36
  7537                           
  7538                           ;usart_pic16.c: 73: TXREG = ch;
  7539  103E  0870               	movf	USARTWriteChar@ch,w
  7540  103F  0099               	movwf	25	;volatile
  7541  1040  0008               	return
  7542  1041                     __end_of_USARTWriteChar:	
  7543                           
  7544                           	psect	text27
  7545  16C1                     __ptext27:	
  7546 ;; *************** function _get_num_of_orphan *****************
  7547 ;; Defined at:
  7548 ;;		line 1041 in file "teris_16f886.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;  matrix          1    wreg     PTR const struct .
  7551 ;;		 -> temp_matrix16x8(16), 
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;  matrix          1    6[BANK0 ] PTR const struct .
  7554 ;;		 -> temp_matrix16x8(16), 
  7555 ;;  row             1    8[BANK0 ] char 
  7556 ;;  col             1    7[BANK0 ] unsigned char 
  7557 ;;  risk            2    3[BANK0 ] unsigned int 
  7558 ;;  full            1    5[BANK0 ] unsigned char 
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  2   12[COMMON] unsigned int 
  7561 ;; Registers used:
  7562 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7568 ;;      Params:         2       0       0       0       0
  7569 ;;      Locals:         0       6       0       0       0
  7570 ;;      Temps:          0       3       0       0       0
  7571 ;;      Totals:         2       9       0       0       0
  7572 ;;Total ram usage:       11 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    3
  7575 ;; This function calls:
  7576 ;;		_get_matrix_bit
  7577 ;; This function is called by:
  7578 ;;		_find_best_solution
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function _get_num_of_orphan
  7584  16C1                     _get_num_of_orphan:	
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in _get_num_of_orphan: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7588                           ;get_num_of_orphan@matrix stored from wreg
  7589  16C1  1283               	bcf	3,5	;RP0=0, select bank0
  7590  16C2  1303               	bcf	3,6	;RP1=0, select bank0
  7591  16C3  00A6               	movwf	get_num_of_orphan@matrix
  7592                           
  7593                           ;teris_16f886.c: 1043: uint16_t risk = 0;
  7594  16C4  01A3               	clrf	get_num_of_orphan@risk
  7595  16C5  01A4               	clrf	get_num_of_orphan@risk+1
  7596                           
  7597                           ;teris_16f886.c: 1044: uint8_t full = 0xFF;
  7598  16C6  30FF               	movlw	255
  7599  16C7  00A0               	movwf	??_get_num_of_orphan
  7600  16C8  0820               	movf	??_get_num_of_orphan,w
  7601  16C9  00A5               	movwf	get_num_of_orphan@full
  7602                           
  7603                           ;teris_16f886.c: 1045: for(uint8_t col = 0; col < 8; col++)
  7604  16CA  01A7               	clrf	get_num_of_orphan@col
  7605  16CB  3008               	movlw	8
  7606  16CC  0227               	subwf	get_num_of_orphan@col,w
  7607  16CD  1803               	btfsc	3,0
  7608  16CE  2F21               	goto	l3758
  7609  16CF                     l3732:	
  7610                           
  7611                           ;teris_16f886.c: 1046: {
  7612                           ;teris_16f886.c: 1047: full = 0xFF;
  7613  16CF  30FF               	movlw	255
  7614  16D0  00A0               	movwf	??_get_num_of_orphan
  7615  16D1  0820               	movf	??_get_num_of_orphan,w
  7616  16D2  00A5               	movwf	get_num_of_orphan@full
  7617                           
  7618                           ;teris_16f886.c: 1048: for(int8_t row = 16 - 1; row >= 0; row--)
  7619  16D3  300F               	movlw	15
  7620  16D4  00A0               	movwf	??_get_num_of_orphan
  7621  16D5  0820               	movf	??_get_num_of_orphan,w
  7622  16D6  00A8               	movwf	get_num_of_orphan@row
  7623  16D7  1BA8               	btfsc	get_num_of_orphan@row,7
  7624  16D8  2F19               	goto	l3754
  7625  16D9                     l3738:	
  7626                           
  7627                           ;teris_16f886.c: 1049: {
  7628                           ;teris_16f886.c: 1050: if(full == 0xFF)
  7629  16D9  0A25               	incf	get_num_of_orphan@full,w
  7630  16DA  1903               	btfsc	3,2
  7631  16DB  2EFD               	goto	L25
  7632                           
  7633                           ;teris_16f886.c: 1054: else
  7634                           ;teris_16f886.c: 1055: {
  7635                           ;teris_16f886.c: 1056: if(get_matrix_bit(matrix->row, row, col) == 1)
  7636                           
  7637                           ;teris_16f886.c: 1053: }
  7638                           
  7639                           ;teris_16f886.c: 1051: {
  7640                           ;teris_16f886.c: 1052: full = get_matrix_bit(matrix->row, row, col);
  7641  16DC  0826               	movf	get_num_of_orphan@matrix,w
  7642  16DD  00F7               	movwf	get_matrix_bit@byte
  7643  16DE  3000               	movlw	0
  7644  16DF  00F8               	movwf	get_matrix_bit@byte+1
  7645  16E0  0828               	movf	get_num_of_orphan@row,w
  7646  16E1  00A0               	movwf	??_get_num_of_orphan
  7647  16E2  0820               	movf	??_get_num_of_orphan,w
  7648  16E3  00F9               	movwf	get_matrix_bit@row
  7649  16E4  0827               	movf	get_num_of_orphan@col,w
  7650  16E5  00A1               	movwf	??_get_num_of_orphan+1
  7651  16E6  0821               	movf	??_get_num_of_orphan+1,w
  7652  16E7  00FA               	movwf	get_matrix_bit@col
  7653  16E8  160A  118A  206E  160A  118A  	fcall	_get_matrix_bit
  7654  16ED  3A01               	xorlw	1
  7655  16EE  1D03               	skipz
  7656  16EF  2EFB               	goto	l3748
  7657                           
  7658                           ;teris_16f886.c: 1057: {
  7659                           ;teris_16f886.c: 1058: if(full == 0)
  7660  16F0  1283               	bcf	3,5	;RP0=0, select bank0
  7661  16F1  1303               	bcf	3,6	;RP1=0, select bank0
  7662  16F2  0825               	movf	get_num_of_orphan@full,w
  7663  16F3  1D03               	btfss	3,2
  7664  16F4  2EFB               	goto	l3748
  7665                           
  7666                           ;teris_16f886.c: 1059: {
  7667                           ;teris_16f886.c: 1060: risk++;
  7668  16F5  3001               	movlw	1
  7669  16F6  07A3               	addwf	get_num_of_orphan@risk,f
  7670  16F7  1803               	skipnc
  7671  16F8  0AA4               	incf	get_num_of_orphan@risk+1,f
  7672  16F9  3000               	movlw	0
  7673  16FA  07A4               	addwf	get_num_of_orphan@risk+1,f
  7674  16FB                     l3748:	
  7675                           
  7676                           ;teris_16f886.c: 1061: }
  7677                           ;teris_16f886.c: 1062: }
  7678                           ;teris_16f886.c: 1063: full = get_matrix_bit(matrix->row, row, col);
  7679  16FB  1283               	bcf	3,5	;RP0=0, select bank0
  7680  16FC  1303               	bcf	3,6	;RP1=0, select bank0
  7681  16FD                     L25:	
  7682  16FD  0826               	movf	get_num_of_orphan@matrix,w
  7683  16FE  00F7               	movwf	get_matrix_bit@byte
  7684  16FF  3000               	movlw	0
  7685  1700  00F8               	movwf	get_matrix_bit@byte+1
  7686  1701  0828               	movf	get_num_of_orphan@row,w
  7687  1702  00A0               	movwf	??_get_num_of_orphan
  7688  1703  0820               	movf	??_get_num_of_orphan,w
  7689  1704  00F9               	movwf	get_matrix_bit@row
  7690  1705  0827               	movf	get_num_of_orphan@col,w
  7691  1706  00A1               	movwf	??_get_num_of_orphan+1
  7692  1707  0821               	movf	??_get_num_of_orphan+1,w
  7693  1708  00FA               	movwf	get_matrix_bit@col
  7694  1709  160A  118A  206E  160A  118A  	fcall	_get_matrix_bit
  7695  170E  1283               	bcf	3,5	;RP0=0, select bank0
  7696  170F  1303               	bcf	3,6	;RP1=0, select bank0
  7697  1710  00A2               	movwf	??_get_num_of_orphan+2
  7698  1711  0822               	movf	??_get_num_of_orphan+2,w
  7699  1712  00A5               	movwf	get_num_of_orphan@full
  7700  1713  30FF               	movlw	255
  7701  1714  00A0               	movwf	??_get_num_of_orphan
  7702  1715  0820               	movf	??_get_num_of_orphan,w
  7703  1716  07A8               	addwf	get_num_of_orphan@row,f
  7704  1717  1FA8               	btfss	get_num_of_orphan@row,7
  7705  1718  2ED9               	goto	l3738
  7706  1719                     l3754:	
  7707  1719  3001               	movlw	1
  7708  171A  00A0               	movwf	??_get_num_of_orphan
  7709  171B  0820               	movf	??_get_num_of_orphan,w
  7710  171C  07A7               	addwf	get_num_of_orphan@col,f
  7711  171D  3008               	movlw	8
  7712  171E  0227               	subwf	get_num_of_orphan@col,w
  7713  171F  1C03               	skipc
  7714  1720  2ECF               	goto	l3732
  7715  1721                     l3758:	
  7716                           
  7717                           ;teris_16f886.c: 1064: }
  7718                           ;teris_16f886.c: 1065: }
  7719                           ;teris_16f886.c: 1066: }
  7720                           ;teris_16f886.c: 1071: return risk;
  7721  1721  0824               	movf	get_num_of_orphan@risk+1,w
  7722  1722  00FD               	movwf	?_get_num_of_orphan+1
  7723  1723  0823               	movf	get_num_of_orphan@risk,w
  7724  1724  00FC               	movwf	?_get_num_of_orphan
  7725  1725  0008               	return
  7726  1726                     __end_of_get_num_of_orphan:	
  7727                           
  7728                           	psect	text28
  7729  0D9D                     __ptext28:	
  7730 ;; *************** function _get_holes_after_merge *****************
  7731 ;; Defined at:
  7732 ;;		line 1183 in file "teris_16f886.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;  matrix          1    wreg     PTR struct .
  7735 ;;		 -> temp_matrix16x8(16), 
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;  matrix          1    9[BANK0 ] PTR struct .
  7738 ;;		 -> temp_matrix16x8(16), 
  7739 ;;  row             1   11[BANK0 ] char 
  7740 ;;  col             1   10[BANK0 ] char 
  7741 ;;  start           1    8[BANK0 ] char 
  7742 ;;  stop            1    7[BANK0 ] char 
  7743 ;;  num_hole        1    6[BANK0 ] unsigned char 
  7744 ;; Return value:  Size  Location     Type
  7745 ;;                  1    wreg      unsigned char 
  7746 ;; Registers used:
  7747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7753 ;;      Params:         0       0       0       0       0
  7754 ;;      Locals:         0       6       0       0       0
  7755 ;;      Temps:          0       6       0       0       0
  7756 ;;      Totals:         0      12       0       0       0
  7757 ;;Total ram usage:       12 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    3
  7760 ;; This function calls:
  7761 ;;		_get_matrix_bit
  7762 ;; This function is called by:
  7763 ;;		_find_best_solution
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           
  7768                           ;psect for function _get_holes_after_merge
  7769  0D9D                     _get_holes_after_merge:	
  7770                           
  7771                           ;incstack = 0
  7772                           ; Regs used in _get_holes_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  7773                           ;get_holes_after_merge@matrix stored from wreg
  7774  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  7775  0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  7776  0D9F  00A9               	movwf	get_holes_after_merge@matrix
  7777                           
  7778                           ;teris_16f886.c: 1185: int8_t start = -1;
  7779  0DA0  01A8               	clrf	get_holes_after_merge@start
  7780  0DA1  03A8               	decf	get_holes_after_merge@start,f
  7781                           
  7782                           ;teris_16f886.c: 1186: int8_t stop = -1;
  7783  0DA2  01A7               	clrf	get_holes_after_merge@stop
  7784  0DA3  03A7               	decf	get_holes_after_merge@stop,f
  7785                           
  7786                           ;teris_16f886.c: 1187: uint8_t num_hole = 0;
  7787  0DA4  01A6               	clrf	get_holes_after_merge@num_hole
  7788                           
  7789                           ;teris_16f886.c: 1188: for(int8_t col = 0; col < 8; col++)
  7790  0DA5  01AA               	clrf	get_holes_after_merge@col
  7791  0DA6  082A               	movf	get_holes_after_merge@col,w
  7792  0DA7  3A80               	xorlw	128
  7793  0DA8  3E78               	addlw	-136
  7794  0DA9  1803               	btfsc	3,0
  7795  0DAA  2EA9               	goto	l3948
  7796  0DAB                     l3886:	
  7797                           
  7798                           ;teris_16f886.c: 1189: {
  7799                           ;teris_16f886.c: 1190: start = stop = -1;
  7800  0DAB  30FF               	movlw	255
  7801  0DAC  00A7               	movwf	get_holes_after_merge@stop
  7802  0DAD  00A0               	movwf	??_get_holes_after_merge
  7803  0DAE  0820               	movf	??_get_holes_after_merge,w
  7804  0DAF  00A8               	movwf	get_holes_after_merge@start
  7805                           
  7806                           ;teris_16f886.c: 1191: for(int8_t row = 0; row < 16; row++)
  7807  0DB0  01AB               	clrf	get_holes_after_merge@row
  7808  0DB1  082B               	movf	get_holes_after_merge@row,w
  7809  0DB2  3A80               	xorlw	128
  7810  0DB3  3E70               	addlw	-144
  7811  0DB4  1803               	btfsc	3,0
  7812  0DB5  2E73               	goto	l451
  7813  0DB6                     l3894:	
  7814                           
  7815                           ;teris_16f886.c: 1192: {
  7816                           ;teris_16f886.c: 1193: if(col == 0)
  7817  0DB6  082A               	movf	get_holes_after_merge@col,w
  7818  0DB7  1D03               	btfss	3,2
  7819  0DB8  2DCC               	goto	l3904
  7820                           
  7821                           ;teris_16f886.c: 1194: {
  7822                           ;teris_16f886.c: 1195: if((get_matrix_bit(matrix->row, row, col) == 0) && (get_matrix_bi
      +                          t(matrix->row, row, col + 1) == 1))
  7823  0DB9  0829               	movf	get_holes_after_merge@matrix,w
  7824  0DBA  00F7               	movwf	get_matrix_bit@byte
  7825  0DBB  3000               	movlw	0
  7826  0DBC  00F8               	movwf	get_matrix_bit@byte+1
  7827  0DBD  082B               	movf	get_holes_after_merge@row,w
  7828  0DBE  00A0               	movwf	??_get_holes_after_merge
  7829  0DBF  0820               	movf	??_get_holes_after_merge,w
  7830  0DC0  00F9               	movwf	get_matrix_bit@row
  7831  0DC1  082A               	movf	get_holes_after_merge@col,w
  7832  0DC2  00A1               	movwf	??_get_holes_after_merge+1
  7833  0DC3  0821               	movf	??_get_holes_after_merge+1,w
  7834  0DC4  00FA               	movwf	get_matrix_bit@col
  7835  0DC5  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  7836  0DCA  3A00               	xorlw	0
  7837  0DCB  2E1A               	goto	L27
  7838  0DCC                     l3904:	
  7839                           ;teris_16f886.c: 1200: }
  7840                           ;teris_16f886.c: 1201: }
  7841                           ;teris_16f886.c: 1202: }
  7842                           
  7843                           ;teris_16f886.c: 1198: {
  7844                           ;teris_16f886.c: 1199: start = row;
  7845                           
  7846                           ;teris_16f886.c: 1196: {
  7847                           ;teris_16f886.c: 1197: if(start == -1)
  7848                           
  7849                           
  7850                           ;teris_16f886.c: 1203: else if(col == 8 - 1)
  7851  0DCC  3007               	movlw	7
  7852  0DCD  062A               	xorwf	get_holes_after_merge@col,w
  7853  0DCE  1D03               	btfss	3,2
  7854  0DCF  2DF1               	goto	l3914
  7855                           
  7856                           ;teris_16f886.c: 1204: {
  7857                           ;teris_16f886.c: 1205: if((get_matrix_bit(matrix->row, row, col) == 0) && (get_matrix_bi
      +                          t(matrix->row, row, col - 1) == 1))
  7858  0DD0  0829               	movf	get_holes_after_merge@matrix,w
  7859  0DD1  00F7               	movwf	get_matrix_bit@byte
  7860  0DD2  3000               	movlw	0
  7861  0DD3  00F8               	movwf	get_matrix_bit@byte+1
  7862  0DD4  082B               	movf	get_holes_after_merge@row,w
  7863  0DD5  00A0               	movwf	??_get_holes_after_merge
  7864  0DD6  0820               	movf	??_get_holes_after_merge,w
  7865  0DD7  00F9               	movwf	get_matrix_bit@row
  7866  0DD8  082A               	movf	get_holes_after_merge@col,w
  7867  0DD9  00A1               	movwf	??_get_holes_after_merge+1
  7868  0DDA  0821               	movf	??_get_holes_after_merge+1,w
  7869  0DDB  00FA               	movwf	get_matrix_bit@col
  7870  0DDC  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  7871  0DE1  3A00               	xorlw	0
  7872  0DE2  1D03               	skipz
  7873  0DE3  2E3C               	goto	l3924
  7874  0DE4  1283               	bcf	3,5	;RP0=0, select bank0
  7875  0DE5  1303               	bcf	3,6	;RP1=0, select bank0
  7876  0DE6  0829               	movf	get_holes_after_merge@matrix,w
  7877  0DE7  00F7               	movwf	get_matrix_bit@byte
  7878  0DE8  3000               	movlw	0
  7879  0DE9  00F8               	movwf	get_matrix_bit@byte+1
  7880  0DEA  082B               	movf	get_holes_after_merge@row,w
  7881  0DEB  00A0               	movwf	??_get_holes_after_merge
  7882  0DEC  0820               	movf	??_get_holes_after_merge,w
  7883  0DED  00F9               	movwf	get_matrix_bit@row
  7884  0DEE  082A               	movf	get_holes_after_merge@col,w
  7885  0DEF  3EFF               	addlw	255
  7886  0DF0  2E28               	goto	L28
  7887  0DF1                     l3914:	
  7888                           ;teris_16f886.c: 1210: }
  7889                           ;teris_16f886.c: 1211: }
  7890                           ;teris_16f886.c: 1212: }
  7891                           
  7892                           ;teris_16f886.c: 1208: {
  7893                           ;teris_16f886.c: 1209: start = row;
  7894                           
  7895                           ;teris_16f886.c: 1206: {
  7896                           ;teris_16f886.c: 1207: if(start == -1)
  7897                           
  7898                           
  7899                           ;teris_16f886.c: 1213: else
  7900                           ;teris_16f886.c: 1214: {
  7901                           ;teris_16f886.c: 1215: if((get_matrix_bit(matrix->row, row, col) == 0) && (get_matrix_bi
      +                          t(matrix->row, row, col - 1) == 1) && (get_matrix_bit(matrix->row, row, col + 1) == 1))
  7902  0DF1  0829               	movf	get_holes_after_merge@matrix,w
  7903  0DF2  00F7               	movwf	get_matrix_bit@byte
  7904  0DF3  3000               	movlw	0
  7905  0DF4  00F8               	movwf	get_matrix_bit@byte+1
  7906  0DF5  082B               	movf	get_holes_after_merge@row,w
  7907  0DF6  00A0               	movwf	??_get_holes_after_merge
  7908  0DF7  0820               	movf	??_get_holes_after_merge,w
  7909  0DF8  00F9               	movwf	get_matrix_bit@row
  7910  0DF9  082A               	movf	get_holes_after_merge@col,w
  7911  0DFA  00A1               	movwf	??_get_holes_after_merge+1
  7912  0DFB  0821               	movf	??_get_holes_after_merge+1,w
  7913  0DFC  00FA               	movwf	get_matrix_bit@col
  7914  0DFD  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  7915  0E02  3A00               	xorlw	0
  7916  0E03  1D03               	skipz
  7917  0E04  2E3C               	goto	l3924
  7918  0E05  1283               	bcf	3,5	;RP0=0, select bank0
  7919  0E06  1303               	bcf	3,6	;RP1=0, select bank0
  7920  0E07  0829               	movf	get_holes_after_merge@matrix,w
  7921  0E08  00F7               	movwf	get_matrix_bit@byte
  7922  0E09  3000               	movlw	0
  7923  0E0A  00F8               	movwf	get_matrix_bit@byte+1
  7924  0E0B  082B               	movf	get_holes_after_merge@row,w
  7925  0E0C  00A0               	movwf	??_get_holes_after_merge
  7926  0E0D  0820               	movf	??_get_holes_after_merge,w
  7927  0E0E  00F9               	movwf	get_matrix_bit@row
  7928  0E0F  082A               	movf	get_holes_after_merge@col,w
  7929  0E10  3EFF               	addlw	255
  7930  0E11  00A1               	movwf	??_get_holes_after_merge+1
  7931  0E12  0821               	movf	??_get_holes_after_merge+1,w
  7932  0E13  00FA               	movwf	get_matrix_bit@col
  7933  0E14  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  7934  0E19  3A01               	xorlw	1
  7935  0E1A                     L27:	
  7936  0E1A  1D03               	skipz
  7937  0E1B  2E3C               	goto	l3924
  7938  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  7939  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
  7940  0E1E  0829               	movf	get_holes_after_merge@matrix,w
  7941  0E1F  00F7               	movwf	get_matrix_bit@byte
  7942  0E20  3000               	movlw	0
  7943  0E21  00F8               	movwf	get_matrix_bit@byte+1
  7944  0E22  082B               	movf	get_holes_after_merge@row,w
  7945  0E23  00A0               	movwf	??_get_holes_after_merge
  7946  0E24  0820               	movf	??_get_holes_after_merge,w
  7947  0E25  00F9               	movwf	get_matrix_bit@row
  7948  0E26  082A               	movf	get_holes_after_merge@col,w
  7949  0E27  3E01               	addlw	1
  7950  0E28                     L28:	
  7951  0E28  00A1               	movwf	??_get_holes_after_merge+1
  7952  0E29  0821               	movf	??_get_holes_after_merge+1,w
  7953  0E2A  00FA               	movwf	get_matrix_bit@col
  7954  0E2B  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  7955  0E30  3A01               	xorlw	1
  7956  0E31  1D03               	skipz
  7957  0E32  2E3C               	goto	l3924
  7958                           
  7959                           ;teris_16f886.c: 1216: {
  7960                           ;teris_16f886.c: 1217: if(start == -1)
  7961  0E33  1283               	bcf	3,5	;RP0=0, select bank0
  7962  0E34  1303               	bcf	3,6	;RP1=0, select bank0
  7963  0E35  0A28               	incf	get_holes_after_merge@start,w
  7964  0E36  1D03               	btfss	3,2
  7965  0E37  2E3C               	goto	l3924
  7966                           
  7967                           ;teris_16f886.c: 1218: {
  7968                           ;teris_16f886.c: 1219: start = row;
  7969  0E38  082B               	movf	get_holes_after_merge@row,w
  7970  0E39  00A0               	movwf	??_get_holes_after_merge
  7971  0E3A  0820               	movf	??_get_holes_after_merge,w
  7972  0E3B  00A8               	movwf	get_holes_after_merge@start
  7973  0E3C                     l3924:	
  7974                           
  7975                           ;teris_16f886.c: 1220: }
  7976                           ;teris_16f886.c: 1221: }
  7977                           ;teris_16f886.c: 1222: }
  7978                           ;teris_16f886.c: 1223: if(start >= 0)
  7979  0E3C  1283               	bcf	3,5	;RP0=0, select bank0
  7980  0E3D  1303               	bcf	3,6	;RP1=0, select bank0
  7981  0E3E  1BA8               	btfsc	get_holes_after_merge@start,7
  7982  0E3F  2E68               	goto	l462
  7983                           
  7984                           ;teris_16f886.c: 1224: {
  7985                           ;teris_16f886.c: 1225: if(row == 16 - 1)
  7986  0E40  300F               	movlw	15
  7987  0E41  062B               	xorwf	get_holes_after_merge@row,w
  7988  0E42  1D03               	btfss	3,2
  7989  0E43  2E49               	goto	l3932
  7990                           
  7991                           ;teris_16f886.c: 1226: {
  7992                           ;teris_16f886.c: 1227: if(stop == -1)
  7993  0E44  0A27               	incf	get_holes_after_merge@stop,w
  7994  0E45  1D03               	btfss	3,2
  7995  0E46  2E68               	goto	l462
  7996                           
  7997                           ;teris_16f886.c: 1228: {
  7998                           ;teris_16f886.c: 1229: stop = 16;
  7999  0E47  3010               	movlw	16
  8000  0E48  2E65               	goto	L26
  8001  0E49                     l3932:	
  8002                           ;teris_16f886.c: 1230: }
  8003                           ;teris_16f886.c: 1231: }
  8004                           
  8005                           
  8006                           ;teris_16f886.c: 1232: else if(get_matrix_bit(matrix->row, row + 1, col) == 1)
  8007  0E49  0829               	movf	get_holes_after_merge@matrix,w
  8008  0E4A  00F7               	movwf	get_matrix_bit@byte
  8009  0E4B  3000               	movlw	0
  8010  0E4C  00F8               	movwf	get_matrix_bit@byte+1
  8011  0E4D  082B               	movf	get_holes_after_merge@row,w
  8012  0E4E  3E01               	addlw	1
  8013  0E4F  00A0               	movwf	??_get_holes_after_merge
  8014  0E50  0820               	movf	??_get_holes_after_merge,w
  8015  0E51  00F9               	movwf	get_matrix_bit@row
  8016  0E52  082A               	movf	get_holes_after_merge@col,w
  8017  0E53  00A1               	movwf	??_get_holes_after_merge+1
  8018  0E54  0821               	movf	??_get_holes_after_merge+1,w
  8019  0E55  00FA               	movwf	get_matrix_bit@col
  8020  0E56  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  8021  0E5B  3A01               	xorlw	1
  8022  0E5C  1D03               	skipz
  8023  0E5D  2E68               	goto	l462
  8024                           
  8025                           ;teris_16f886.c: 1233: {
  8026                           ;teris_16f886.c: 1234: if(stop == -1)
  8027  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
  8028  0E5F  1303               	bcf	3,6	;RP1=0, select bank0
  8029  0E60  0A27               	incf	get_holes_after_merge@stop,w
  8030  0E61  1D03               	btfss	3,2
  8031  0E62  2E68               	goto	l462
  8032                           
  8033                           ;teris_16f886.c: 1235: {
  8034                           ;teris_16f886.c: 1236: stop = row + 1;
  8035  0E63  082B               	movf	get_holes_after_merge@row,w
  8036  0E64  3E01               	addlw	1
  8037  0E65                     L26:	
  8038  0E65  00A0               	movwf	??_get_holes_after_merge
  8039  0E66  0820               	movf	??_get_holes_after_merge,w
  8040  0E67  00A7               	movwf	get_holes_after_merge@stop
  8041  0E68                     l462:	
  8042  0E68  3001               	movlw	1
  8043  0E69  1283               	bcf	3,5	;RP0=0, select bank0
  8044  0E6A  1303               	bcf	3,6	;RP1=0, select bank0
  8045  0E6B  00A0               	movwf	??_get_holes_after_merge
  8046  0E6C  0820               	movf	??_get_holes_after_merge,w
  8047  0E6D  07AB               	addwf	get_holes_after_merge@row,f
  8048  0E6E  082B               	movf	get_holes_after_merge@row,w
  8049  0E6F  3A80               	xorlw	128
  8050  0E70  3E70               	addlw	-144
  8051  0E71  1C03               	skipc
  8052  0E72  2DB6               	goto	l3894
  8053  0E73                     l451:	
  8054                           
  8055                           ;teris_16f886.c: 1237: }
  8056                           ;teris_16f886.c: 1238: }
  8057                           ;teris_16f886.c: 1239: }
  8058                           ;teris_16f886.c: 1241: }
  8059                           ;teris_16f886.c: 1242: if((start >= 0) && (stop >= 0) && (stop - start >= 3))
  8060  0E73  1FA8               	btfss	get_holes_after_merge@start,7
  8061  0E74  1BA7               	btfsc	get_holes_after_merge@stop,7
  8062  0E75  2E9E               	goto	l468
  8063  0E76  0828               	movf	get_holes_after_merge@start,w
  8064  0E77  00A0               	movwf	??_get_holes_after_merge
  8065  0E78  01A1               	clrf	??_get_holes_after_merge+1
  8066  0E79  1BA0               	btfsc	??_get_holes_after_merge,7
  8067  0E7A  03A1               	decf	??_get_holes_after_merge+1,f
  8068  0E7B  09A0               	comf	??_get_holes_after_merge,f
  8069  0E7C  09A1               	comf	??_get_holes_after_merge+1,f
  8070  0E7D  0AA0               	incf	??_get_holes_after_merge,f
  8071  0E7E  1903               	skipnz
  8072  0E7F  0AA1               	incf	??_get_holes_after_merge+1,f
  8073  0E80  0827               	movf	get_holes_after_merge@stop,w
  8074  0E81  00A2               	movwf	??_get_holes_after_merge+2
  8075  0E82  01A3               	clrf	??_get_holes_after_merge+3
  8076  0E83  1BA2               	btfsc	??_get_holes_after_merge+2,7
  8077  0E84  03A3               	decf	??_get_holes_after_merge+3,f
  8078  0E85  0820               	movf	??_get_holes_after_merge,w
  8079  0E86  0722               	addwf	??_get_holes_after_merge+2,w
  8080  0E87  00A4               	movwf	??_get_holes_after_merge+4
  8081  0E88  0821               	movf	??_get_holes_after_merge+1,w
  8082  0E89  1803               	skipnc
  8083  0E8A  0A21               	incf	??_get_holes_after_merge+1,w
  8084  0E8B  0723               	addwf	??_get_holes_after_merge+3,w
  8085  0E8C  00A5               	movwf	??_get_holes_after_merge+5
  8086  0E8D  0825               	movf	??_get_holes_after_merge+5,w
  8087  0E8E  3A80               	xorlw	128
  8088  0E8F  00FF               	movwf	127
  8089  0E90  3080               	movlw	128
  8090  0E91  027F               	subwf	127,w
  8091  0E92  1D03               	skipz
  8092  0E93  2E96               	goto	u4905
  8093  0E94  3003               	movlw	3
  8094  0E95  0224               	subwf	??_get_holes_after_merge+4,w
  8095  0E96                     u4905:	
  8096  0E96  1C03               	skipc
  8097  0E97  2E9E               	goto	l468
  8098                           
  8099                           ;teris_16f886.c: 1243: {
  8100                           ;teris_16f886.c: 1249: num_hole++;
  8101  0E98  3001               	movlw	1
  8102  0E99  1283               	bcf	3,5	;RP0=0, select bank0
  8103  0E9A  1303               	bcf	3,6	;RP1=0, select bank0
  8104  0E9B  00A0               	movwf	??_get_holes_after_merge
  8105  0E9C  0820               	movf	??_get_holes_after_merge,w
  8106  0E9D  07A6               	addwf	get_holes_after_merge@num_hole,f
  8107  0E9E                     l468:	
  8108  0E9E  3001               	movlw	1
  8109  0E9F  1283               	bcf	3,5	;RP0=0, select bank0
  8110  0EA0  1303               	bcf	3,6	;RP1=0, select bank0
  8111  0EA1  00A0               	movwf	??_get_holes_after_merge
  8112  0EA2  0820               	movf	??_get_holes_after_merge,w
  8113  0EA3  07AA               	addwf	get_holes_after_merge@col,f
  8114  0EA4  082A               	movf	get_holes_after_merge@col,w
  8115  0EA5  3A80               	xorlw	128
  8116  0EA6  3E78               	addlw	-136
  8117  0EA7  1C03               	skipc
  8118  0EA8  2DAB               	goto	l3886
  8119  0EA9                     l3948:	
  8120                           
  8121                           ;teris_16f886.c: 1250: }
  8122                           ;teris_16f886.c: 1251: }
  8123                           ;teris_16f886.c: 1255: return num_hole;
  8124  0EA9  0826               	movf	get_holes_after_merge@num_hole,w
  8125  0EAA  0008               	return
  8126  0EAB                     __end_of_get_holes_after_merge:	
  8127                           
  8128                           	psect	text29
  8129  135B                     __ptext29:	
  8130 ;; *************** function _get_high_after_merge *****************
  8131 ;; Defined at:
  8132 ;;		line 1162 in file "teris_16f886.c"
  8133 ;; Parameters:    Size  Location     Type
  8134 ;;  y               1    wreg     char 
  8135 ;;  matrix          2   12[COMMON] PTR struct .
  8136 ;;		 -> NULL(0), g_matrix4x4(96), 
  8137 ;; Auto vars:     Size  Location     Type
  8138 ;;  y               1    2[BANK0 ] char 
  8139 ;;  col             1    3[BANK0 ] char 
  8140 ;;  row             1    4[BANK0 ] char 
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  1    wreg      unsigned char 
  8143 ;; Registers used:
  8144 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8150 ;;      Params:         2       0       0       0       0
  8151 ;;      Locals:         0       3       0       0       0
  8152 ;;      Temps:          0       2       0       0       0
  8153 ;;      Totals:         2       5       0       0       0
  8154 ;;Total ram usage:        7 bytes
  8155 ;; Hardware stack levels used:    1
  8156 ;; Hardware stack levels required when called:    3
  8157 ;; This function calls:
  8158 ;;		_get_matrix_bit
  8159 ;; This function is called by:
  8160 ;;		_find_best_solution
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164                           
  8165                           ;psect for function _get_high_after_merge
  8166  135B                     _get_high_after_merge:	
  8167                           
  8168                           ;incstack = 0
  8169                           ; Regs used in _get_high_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  8170                           ;get_high_after_merge@y stored from wreg
  8171  135B  1283               	bcf	3,5	;RP0=0, select bank0
  8172  135C  1303               	bcf	3,6	;RP1=0, select bank0
  8173  135D  00A2               	movwf	get_high_after_merge@y
  8174                           
  8175                           ;teris_16f886.c: 1167: for(int8_t row = 0; row < 4; row++)
  8176  135E  01A4               	clrf	get_high_after_merge@row
  8177  135F                     L29:	
  8178  135F  0824               	movf	get_high_after_merge@row,w
  8179  1360  3A80               	xorlw	128
  8180  1361  3E7C               	addlw	-132
  8181  1362  1803               	btfsc	3,0
  8182  1363  0008               	return
  8183                           
  8184                           ;teris_16f886.c: 1168: {
  8185                           ;teris_16f886.c: 1169: for(int8_t col = 0; col < 4; col++)
  8186  1364  01A3               	clrf	get_high_after_merge@col
  8187  1365  0823               	movf	get_high_after_merge@col,w
  8188  1366  3A80               	xorlw	128
  8189  1367  3E7C               	addlw	-132
  8190  1368  1803               	btfsc	3,0
  8191  1369  2B91               	goto	l3874
  8192  136A                     l3864:	
  8193                           
  8194                           ;teris_16f886.c: 1170: {
  8195                           ;teris_16f886.c: 1171: if(get_matrix_bit(matrix->row, row, col) == 1)
  8196  136A  087C               	movf	get_high_after_merge@matrix,w
  8197  136B  00F7               	movwf	get_matrix_bit@byte
  8198  136C  087D               	movf	get_high_after_merge@matrix+1,w
  8199  136D  00F8               	movwf	get_matrix_bit@byte+1
  8200  136E  0824               	movf	get_high_after_merge@row,w
  8201  136F  00A0               	movwf	??_get_high_after_merge
  8202  1370  0820               	movf	??_get_high_after_merge,w
  8203  1371  00F9               	movwf	get_matrix_bit@row
  8204  1372  0823               	movf	get_high_after_merge@col,w
  8205  1373  00A1               	movwf	??_get_high_after_merge+1
  8206  1374  0821               	movf	??_get_high_after_merge+1,w
  8207  1375  00FA               	movwf	get_matrix_bit@col
  8208  1376  160A  118A  206E  160A  118A  	fcall	_get_matrix_bit
  8209  137B  3A01               	xorlw	1
  8210  137C  1D03               	skipz
  8211  137D  2B86               	goto	l3870
  8212                           
  8213                           ;teris_16f886.c: 1172: {
  8214                           ;teris_16f886.c: 1178: return (uint8_t)(16 - y - row);
  8215  137E  1283               	bcf	3,5	;RP0=0, select bank0
  8216  137F  1303               	bcf	3,6	;RP1=0, select bank0
  8217  1380  0824               	movf	get_high_after_merge@row,w
  8218  1381  0722               	addwf	get_high_after_merge@y,w
  8219  1382  3AFF               	xorlw	255
  8220  1383  3E01               	addlw	1
  8221  1384  3E10               	addlw	16
  8222  1385  0008               	return
  8223  1386                     l3870:	
  8224  1386  3001               	movlw	1
  8225  1387  1283               	bcf	3,5	;RP0=0, select bank0
  8226  1388  1303               	bcf	3,6	;RP1=0, select bank0
  8227  1389  00A0               	movwf	??_get_high_after_merge
  8228  138A  0820               	movf	??_get_high_after_merge,w
  8229  138B  07A3               	addwf	get_high_after_merge@col,f
  8230  138C  0823               	movf	get_high_after_merge@col,w
  8231  138D  3A80               	xorlw	128
  8232  138E  3E7C               	addlw	-132
  8233  138F  1C03               	skipc
  8234  1390  2B6A               	goto	l3864
  8235  1391                     l3874:	
  8236  1391  3001               	movlw	1
  8237  1392  00A0               	movwf	??_get_high_after_merge
  8238  1393  0820               	movf	??_get_high_after_merge,w
  8239  1394  07A4               	addwf	get_high_after_merge@row,f
  8240  1395  2B5F               	goto	L29
  8241  1396                     __end_of_get_high_after_merge:	
  8242                           
  8243                           	psect	text30
  8244  11A6                     __ptext30:	
  8245 ;; *************** function _get_high *****************
  8246 ;; Defined at:
  8247 ;;		line 1148 in file "teris_16f886.c"
  8248 ;; Parameters:    Size  Location     Type
  8249 ;;  matrix          1    wreg     PTR struct .
  8250 ;;		 -> g_matrix16x8(16), 
  8251 ;; Auto vars:     Size  Location     Type
  8252 ;;  matrix          1    3[COMMON] PTR struct .
  8253 ;;		 -> g_matrix16x8(16), 
  8254 ;;  row             1    4[COMMON] char 
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  1    wreg      unsigned char 
  8257 ;; Registers used:
  8258 ;;		wreg, status,2, status,0, pclath, cstack
  8259 ;; Tracked objects:
  8260 ;;		On entry : 0/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8264 ;;      Params:         0       0       0       0       0
  8265 ;;      Locals:         2       0       0       0       0
  8266 ;;      Temps:          1       0       0       0       0
  8267 ;;      Totals:         3       0       0       0       0
  8268 ;;Total ram usage:        3 bytes
  8269 ;; Hardware stack levels used:    1
  8270 ;; Hardware stack levels required when called:    1
  8271 ;; This function calls:
  8272 ;;		_is_row_empty
  8273 ;; This function is called by:
  8274 ;;		_find_best_solution
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           
  8279                           ;psect for function _get_high
  8280  11A6                     _get_high:	
  8281                           
  8282                           ;incstack = 0
  8283                           ; Regs used in _get_high: [wreg+status,2+status,0+pclath+cstack]
  8284                           ;get_high@matrix stored from wreg
  8285  11A6  00F3               	movwf	get_high@matrix
  8286                           
  8287                           ;teris_16f886.c: 1150: for(int8_t row = 16 - 1; row >= 0; row--)
  8288  11A7  300F               	movlw	15
  8289  11A8  00F2               	movwf	??_get_high
  8290  11A9  0872               	movf	??_get_high,w
  8291  11AA  00F4               	movwf	get_high@row
  8292  11AB  1BF4               	btfsc	get_high@row,7
  8293  11AC  29C6               	goto	l3848
  8294  11AD                     l3838:	
  8295                           
  8296                           ;teris_16f886.c: 1151: {
  8297                           ;teris_16f886.c: 1152: if(is_row_empty(matrix, row) == 1)
  8298  11AD  0874               	movf	get_high@row,w
  8299  11AE  00F2               	movwf	??_get_high
  8300  11AF  0872               	movf	??_get_high,w
  8301  11B0  00F0               	movwf	is_row_empty@row
  8302  11B1  0873               	movf	get_high@matrix,w
  8303  11B2  160A  118A  2031  160A  118A  	fcall	_is_row_empty
  8304  11B7  3A01               	xorlw	1
  8305  11B8  1D03               	skipz
  8306  11B9  29C0               	goto	l3844
  8307                           
  8308                           ;teris_16f886.c: 1153: {
  8309                           ;teris_16f886.c: 1157: return (uint8_t)(16 - row - 1);
  8310  11BA  0874               	movf	get_high@row,w
  8311  11BB  3E01               	addlw	1
  8312  11BC  3AFF               	xorlw	255
  8313  11BD  3E01               	addlw	1
  8314  11BE  3E10               	addlw	16
  8315  11BF  0008               	return
  8316  11C0                     l3844:	
  8317  11C0  30FF               	movlw	255
  8318  11C1  00F2               	movwf	??_get_high
  8319  11C2  0872               	movf	??_get_high,w
  8320  11C3  07F4               	addwf	get_high@row,f
  8321  11C4  1FF4               	btfss	get_high@row,7
  8322  11C5  29AD               	goto	l3838
  8323  11C6                     l3848:	
  8324                           
  8325                           ;teris_16f886.c: 1158: }
  8326                           ;teris_16f886.c: 1159: }
  8327                           ;teris_16f886.c: 1160: return 16;
  8328  11C6  3010               	movlw	16
  8329  11C7  0008               	return
  8330  11C8                     __end_of_get_high:	
  8331                           
  8332                           	psect	text31
  8333  1031                     __ptext31:	
  8334 ;; *************** function _is_row_empty *****************
  8335 ;; Defined at:
  8336 ;;		line 826 in file "teris_16f886.c"
  8337 ;; Parameters:    Size  Location     Type
  8338 ;;  matrix          1    wreg     PTR const struct .
  8339 ;;		 -> g_matrix16x8(16), 
  8340 ;;  row             1    0[COMMON] unsigned char 
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;  matrix          1    1[COMMON] PTR const struct .
  8343 ;;		 -> g_matrix16x8(16), 
  8344 ;; Return value:  Size  Location     Type
  8345 ;;                  1    wreg      unsigned char 
  8346 ;; Registers used:
  8347 ;;		wreg, status,2, status,0
  8348 ;; Tracked objects:
  8349 ;;		On entry : 0/0
  8350 ;;		On exit  : 0/0
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8353 ;;      Params:         1       0       0       0       0
  8354 ;;      Locals:         1       0       0       0       0
  8355 ;;      Temps:          0       0       0       0       0
  8356 ;;      Totals:         2       0       0       0       0
  8357 ;;Total ram usage:        2 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; This function calls:
  8360 ;;		Nothing
  8361 ;; This function is called by:
  8362 ;;		_get_high
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           
  8367                           ;psect for function _is_row_empty
  8368  1031                     _is_row_empty:	
  8369                           
  8370                           ;incstack = 0
  8371                           ; Regs used in _is_row_empty: [wreg+status,2+status,0]
  8372                           ;is_row_empty@matrix stored from wreg
  8373  1031  00F1               	movwf	is_row_empty@matrix
  8374                           
  8375                           ;teris_16f886.c: 828: if(matrix->row == 0x0)
  8376  1032  0871               	movf	is_row_empty@matrix,w
  8377  1033  1D03               	btfss	3,2
  8378  1034  2837               	goto	l3472
  8379                           
  8380                           ;teris_16f886.c: 829: {
  8381                           ;teris_16f886.c: 830: return 1;
  8382  1035  3001               	movlw	1
  8383  1036  0008               	return
  8384  1037                     l3472:	
  8385                           
  8386                           ;teris_16f886.c: 831: }
  8387                           ;teris_16f886.c: 832: return 0;
  8388  1037  3000               	movlw	0
  8389  1038  0008               	return
  8390  1039                     __end_of_is_row_empty:	
  8391                           
  8392                           	psect	text32
  8393  0A75                     __ptext32:	
  8394 ;; *************** function _get_heavy *****************
  8395 ;; Defined at:
  8396 ;;		line 1073 in file "teris_16f886.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;  matrix          1    wreg     PTR const struct .
  8399 ;;		 -> temp_matrix16x8(16), 
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;  matrix          1    6[BANK0 ] PTR const struct .
  8402 ;;		 -> temp_matrix16x8(16), 
  8403 ;;  row             1    9[BANK0 ] char 
  8404 ;;  col             1    8[BANK0 ] unsigned char 
  8405 ;;  risk            2    3[BANK0 ] unsigned int 
  8406 ;;  pre             1    7[BANK0 ] unsigned char 
  8407 ;;  start           1    5[BANK0 ] unsigned char 
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  2   12[COMMON] unsigned int 
  8410 ;; Registers used:
  8411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8417 ;;      Params:         2       0       0       0       0
  8418 ;;      Locals:         0       7       0       0       0
  8419 ;;      Temps:          0       3       0       0       0
  8420 ;;      Totals:         2      10       0       0       0
  8421 ;;Total ram usage:       12 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    3
  8424 ;; This function calls:
  8425 ;;		_get_matrix_bit
  8426 ;; This function is called by:
  8427 ;;		_find_best_solution
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           
  8432                           ;psect for function _get_heavy
  8433  0A75                     _get_heavy:	
  8434                           
  8435                           ;incstack = 0
  8436                           ; Regs used in _get_heavy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8437                           ;get_heavy@matrix stored from wreg
  8438  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  8439  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  8440  0A77  00A6               	movwf	get_heavy@matrix
  8441                           
  8442                           ;teris_16f886.c: 1075: uint8_t start;
  8443                           ;teris_16f886.c: 1076: uint16_t risk = 0;
  8444  0A78  01A3               	clrf	get_heavy@risk
  8445  0A79  01A4               	clrf	get_heavy@risk+1
  8446                           
  8447                           ;teris_16f886.c: 1077: uint8_t pre = 0xFF;
  8448  0A7A  30FF               	movlw	255
  8449  0A7B  00A0               	movwf	??_get_heavy
  8450  0A7C  0820               	movf	??_get_heavy,w
  8451  0A7D  00A7               	movwf	get_heavy@pre
  8452                           
  8453                           ;teris_16f886.c: 1078: for(uint8_t col = 0; col < 8; col++)
  8454  0A7E  01A8               	clrf	get_heavy@col
  8455  0A7F  3008               	movlw	8
  8456  0A80  0228               	subwf	get_heavy@col,w
  8457  0A81  1803               	btfsc	3,0
  8458  0A82  2AF2               	goto	l3804
  8459  0A83                     l3770:	
  8460                           
  8461                           ;teris_16f886.c: 1079: {
  8462                           ;teris_16f886.c: 1080: pre = 0xFF;
  8463  0A83  30FF               	movlw	255
  8464  0A84  00A0               	movwf	??_get_heavy
  8465  0A85  0820               	movf	??_get_heavy,w
  8466  0A86  00A7               	movwf	get_heavy@pre
  8467                           
  8468                           ;teris_16f886.c: 1081: start = 0;
  8469  0A87  01A5               	clrf	get_heavy@start
  8470                           
  8471                           ;teris_16f886.c: 1082: for(int8_t row = 16 - 1; row >= 0; row--)
  8472  0A88  300F               	movlw	15
  8473  0A89  00A0               	movwf	??_get_heavy
  8474  0A8A  0820               	movf	??_get_heavy,w
  8475  0A8B  00A9               	movwf	get_heavy@row
  8476  0A8C  1BA9               	btfsc	get_heavy@row,7
  8477  0A8D  2AEA               	goto	l3800
  8478  0A8E                     l3780:	
  8479                           
  8480                           ;teris_16f886.c: 1083: {
  8481                           ;teris_16f886.c: 1084: if(pre == 0xFF)
  8482  0A8E  0A27               	incf	get_heavy@pre,w
  8483  0A8F  1D03               	btfss	3,2
  8484  0A90  2AA8               	goto	l3784
  8485                           
  8486                           ;teris_16f886.c: 1085: {
  8487                           ;teris_16f886.c: 1086: pre = get_matrix_bit(matrix->row, row, col);
  8488  0A91  0826               	movf	get_heavy@matrix,w
  8489  0A92  00F7               	movwf	get_matrix_bit@byte
  8490  0A93  3000               	movlw	0
  8491  0A94  00F8               	movwf	get_matrix_bit@byte+1
  8492  0A95  0829               	movf	get_heavy@row,w
  8493  0A96  00A0               	movwf	??_get_heavy
  8494  0A97  0820               	movf	??_get_heavy,w
  8495  0A98  00F9               	movwf	get_matrix_bit@row
  8496  0A99  0828               	movf	get_heavy@col,w
  8497  0A9A  00A1               	movwf	??_get_heavy+1
  8498  0A9B  0821               	movf	??_get_heavy+1,w
  8499  0A9C  00FA               	movwf	get_matrix_bit@col
  8500  0A9D  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  8501  0AA2  1283               	bcf	3,5	;RP0=0, select bank0
  8502  0AA3  1303               	bcf	3,6	;RP1=0, select bank0
  8503  0AA4  00A2               	movwf	??_get_heavy+2
  8504  0AA5  0822               	movf	??_get_heavy+2,w
  8505  0AA6  00A7               	movwf	get_heavy@pre
  8506                           
  8507                           ;teris_16f886.c: 1087: }
  8508  0AA7  2AE4               	goto	l3796
  8509  0AA8                     l3784:	
  8510                           
  8511                           ;teris_16f886.c: 1088: else
  8512                           ;teris_16f886.c: 1089: {
  8513                           ;teris_16f886.c: 1090: if(pre != get_matrix_bit(matrix->row, row, col))
  8514  0AA8  0826               	movf	get_heavy@matrix,w
  8515  0AA9  00F7               	movwf	get_matrix_bit@byte
  8516  0AAA  3000               	movlw	0
  8517  0AAB  00F8               	movwf	get_matrix_bit@byte+1
  8518  0AAC  0829               	movf	get_heavy@row,w
  8519  0AAD  00A0               	movwf	??_get_heavy
  8520  0AAE  0820               	movf	??_get_heavy,w
  8521  0AAF  00F9               	movwf	get_matrix_bit@row
  8522  0AB0  0828               	movf	get_heavy@col,w
  8523  0AB1  00A1               	movwf	??_get_heavy+1
  8524  0AB2  0821               	movf	??_get_heavy+1,w
  8525  0AB3  00FA               	movwf	get_matrix_bit@col
  8526  0AB4  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  8527  0AB9  1283               	bcf	3,5	;RP0=0, select bank0
  8528  0ABA  1303               	bcf	3,6	;RP1=0, select bank0
  8529  0ABB  0627               	xorwf	get_heavy@pre,w
  8530  0ABC  1903               	skipnz
  8531  0ABD  2ADB               	goto	l3792
  8532                           
  8533                           ;teris_16f886.c: 1091: {
  8534                           ;teris_16f886.c: 1092: pre = get_matrix_bit(matrix->row, row, col);
  8535  0ABE  0826               	movf	get_heavy@matrix,w
  8536  0ABF  00F7               	movwf	get_matrix_bit@byte
  8537  0AC0  3000               	movlw	0
  8538  0AC1  00F8               	movwf	get_matrix_bit@byte+1
  8539  0AC2  0829               	movf	get_heavy@row,w
  8540  0AC3  00A0               	movwf	??_get_heavy
  8541  0AC4  0820               	movf	??_get_heavy,w
  8542  0AC5  00F9               	movwf	get_matrix_bit@row
  8543  0AC6  0828               	movf	get_heavy@col,w
  8544  0AC7  00A1               	movwf	??_get_heavy+1
  8545  0AC8  0821               	movf	??_get_heavy+1,w
  8546  0AC9  00FA               	movwf	get_matrix_bit@col
  8547  0ACA  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
  8548  0ACF  1283               	bcf	3,5	;RP0=0, select bank0
  8549  0AD0  1303               	bcf	3,6	;RP1=0, select bank0
  8550  0AD1  00A2               	movwf	??_get_heavy+2
  8551  0AD2  0822               	movf	??_get_heavy+2,w
  8552  0AD3  00A7               	movwf	get_heavy@pre
  8553                           
  8554                           ;teris_16f886.c: 1093: if(pre == 0)
  8555  0AD4  0827               	movf	get_heavy@pre,w
  8556  0AD5  1D03               	btfss	3,2
  8557  0AD6  2AD9               	goto	l411
  8558                           
  8559                           ;teris_16f886.c: 1094: {
  8560                           ;teris_16f886.c: 1095: start = 0;
  8561  0AD7  01A5               	clrf	get_heavy@start
  8562                           
  8563                           ;teris_16f886.c: 1096: }
  8564  0AD8  2ADB               	goto	l3792
  8565  0AD9                     l411:	
  8566                           
  8567                           ;teris_16f886.c: 1097: else
  8568                           ;teris_16f886.c: 1098: {
  8569                           ;teris_16f886.c: 1099: start = 1;
  8570  0AD9  01A5               	clrf	get_heavy@start
  8571  0ADA  0AA5               	incf	get_heavy@start,f
  8572  0ADB                     l3792:	
  8573                           
  8574                           ;teris_16f886.c: 1100: }
  8575                           ;teris_16f886.c: 1101: }
  8576                           ;teris_16f886.c: 1102: if(start == 1)
  8577  0ADB  0325               	decf	get_heavy@start,w
  8578  0ADC  1D03               	btfss	3,2
  8579  0ADD  2AE4               	goto	l3796
  8580                           
  8581                           ;teris_16f886.c: 1103: {
  8582                           ;teris_16f886.c: 1104: risk++;
  8583  0ADE  3001               	movlw	1
  8584  0ADF  07A3               	addwf	get_heavy@risk,f
  8585  0AE0  1803               	skipnc
  8586  0AE1  0AA4               	incf	get_heavy@risk+1,f
  8587  0AE2  3000               	movlw	0
  8588  0AE3  07A4               	addwf	get_heavy@risk+1,f
  8589  0AE4                     l3796:	
  8590  0AE4  30FF               	movlw	255
  8591  0AE5  00A0               	movwf	??_get_heavy
  8592  0AE6  0820               	movf	??_get_heavy,w
  8593  0AE7  07A9               	addwf	get_heavy@row,f
  8594  0AE8  1FA9               	btfss	get_heavy@row,7
  8595  0AE9  2A8E               	goto	l3780
  8596  0AEA                     l3800:	
  8597  0AEA  3001               	movlw	1
  8598  0AEB  00A0               	movwf	??_get_heavy
  8599  0AEC  0820               	movf	??_get_heavy,w
  8600  0AED  07A8               	addwf	get_heavy@col,f
  8601  0AEE  3008               	movlw	8
  8602  0AEF  0228               	subwf	get_heavy@col,w
  8603  0AF0  1C03               	skipc
  8604  0AF1  2A83               	goto	l3770
  8605  0AF2                     l3804:	
  8606                           
  8607                           ;teris_16f886.c: 1105: }
  8608                           ;teris_16f886.c: 1106: }
  8609                           ;teris_16f886.c: 1107: }
  8610                           ;teris_16f886.c: 1108: }
  8611                           ;teris_16f886.c: 1113: return risk;
  8612  0AF2  0824               	movf	get_heavy@risk+1,w
  8613  0AF3  00FD               	movwf	?_get_heavy+1
  8614  0AF4  0823               	movf	get_heavy@risk,w
  8615  0AF5  00FC               	movwf	?_get_heavy
  8616  0AF6  0008               	return
  8617  0AF7                     __end_of_get_heavy:	
  8618                           
  8619                           	psect	text33
  8620  178F                     __ptext33:	
  8621 ;; *************** function _fall_off *****************
  8622 ;; Defined at:
  8623 ;;		line 953 in file "teris_16f886.c"
  8624 ;; Parameters:    Size  Location     Type
  8625 ;;  x               1    wreg     char 
  8626 ;;  y               1    0[BANK0 ] char 
  8627 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  8628 ;;		 -> NULL(0), g_matrix4x4(96), 
  8629 ;;  matrix16x8      1    3[BANK0 ] PTR const struct .
  8630 ;;		 -> g_matrix16x8(16), 
  8631 ;; Auto vars:     Size  Location     Type
  8632 ;;  x               1    4[BANK0 ] char 
  8633 ;;  col             1    5[BANK0 ] char 
  8634 ;;  row             1    6[BANK0 ] char 
  8635 ;; Return value:  Size  Location     Type
  8636 ;;                  1    wreg      unsigned char 
  8637 ;; Registers used:
  8638 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8639 ;; Tracked objects:
  8640 ;;		On entry : 0/0
  8641 ;;		On exit  : 0/0
  8642 ;;		Unchanged: 0/0
  8643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8644 ;;      Params:         0       4       0       0       0
  8645 ;;      Locals:         0       3       0       0       0
  8646 ;;      Temps:          2       0       0       0       0
  8647 ;;      Totals:         2       7       0       0       0
  8648 ;;Total ram usage:        9 bytes
  8649 ;; Hardware stack levels used:    1
  8650 ;; Hardware stack levels required when called:    3
  8651 ;; This function calls:
  8652 ;;		_get_matrix_bit
  8653 ;; This function is called by:
  8654 ;;		_find_best_solution
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           
  8659                           ;psect for function _fall_off
  8660  178F                     _fall_off:	
  8661                           
  8662                           ;incstack = 0
  8663                           ; Regs used in _fall_off: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8664                           ;fall_off@x stored from wreg
  8665  178F  1283               	bcf	3,5	;RP0=0, select bank0
  8666  1790  1303               	bcf	3,6	;RP1=0, select bank0
  8667  1791  00A4               	movwf	fall_off@x
  8668  1792                     l356:	
  8669                           ;teris_16f886.c: 955: while(1)
  8670                           
  8671                           
  8672                           ;teris_16f886.c: 956: {
  8673                           ;teris_16f886.c: 957: for(int8_t row = 4 - 1; row >= 0; row--)
  8674  1792  3003               	movlw	3
  8675  1793  00FC               	movwf	??_fall_off
  8676  1794  087C               	movf	??_fall_off,w
  8677  1795  00A6               	movwf	fall_off@row
  8678  1796  1BA6               	btfsc	fall_off@row,7
  8679  1797  2FFB               	goto	l3694
  8680  1798                     l3666:	
  8681                           
  8682                           ;teris_16f886.c: 958: {
  8683                           ;teris_16f886.c: 959: for(int8_t col = 0; col < 4; col++)
  8684  1798  01A5               	clrf	fall_off@col
  8685  1799  0825               	movf	fall_off@col,w
  8686  179A  3A80               	xorlw	128
  8687  179B  3E7C               	addlw	-132
  8688  179C  1803               	btfsc	3,0
  8689  179D  2FF5               	goto	l3690
  8690  179E                     l3672:	
  8691                           
  8692                           ;teris_16f886.c: 960: {
  8693                           ;teris_16f886.c: 961: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  8694  179E  0821               	movf	fall_off@matrix4x4,w
  8695  179F  00F7               	movwf	get_matrix_bit@byte
  8696  17A0  0822               	movf	fall_off@matrix4x4+1,w
  8697  17A1  00F8               	movwf	get_matrix_bit@byte+1
  8698  17A2  0826               	movf	fall_off@row,w
  8699  17A3  00FC               	movwf	??_fall_off
  8700  17A4  087C               	movf	??_fall_off,w
  8701  17A5  00F9               	movwf	get_matrix_bit@row
  8702  17A6  0825               	movf	fall_off@col,w
  8703  17A7  00FD               	movwf	??_fall_off+1
  8704  17A8  087D               	movf	??_fall_off+1,w
  8705  17A9  00FA               	movwf	get_matrix_bit@col
  8706  17AA  160A  118A  206E  160A  118A  	fcall	_get_matrix_bit
  8707  17AF  3A01               	xorlw	1
  8708  17B0  1D03               	skipz
  8709  17B1  2FEA               	goto	l3686
  8710                           
  8711                           ;teris_16f886.c: 962: {
  8712                           ;teris_16f886.c: 963: if(get_matrix_bit(matrix16x8->row, y + row + 1, x + col) == 1)
  8713  17B2  1283               	bcf	3,5	;RP0=0, select bank0
  8714  17B3  1303               	bcf	3,6	;RP1=0, select bank0
  8715  17B4  0823               	movf	fall_off@matrix16x8,w
  8716  17B5  00F7               	movwf	get_matrix_bit@byte
  8717  17B6  3000               	movlw	0
  8718  17B7  00F8               	movwf	get_matrix_bit@byte+1
  8719  17B8  0826               	movf	fall_off@row,w
  8720  17B9  0720               	addwf	fall_off@y,w
  8721  17BA  3E01               	addlw	1
  8722  17BB  00FC               	movwf	??_fall_off
  8723  17BC  087C               	movf	??_fall_off,w
  8724  17BD  00F9               	movwf	get_matrix_bit@row
  8725  17BE  0825               	movf	fall_off@col,w
  8726  17BF  0724               	addwf	fall_off@x,w
  8727  17C0  00FD               	movwf	??_fall_off+1
  8728  17C1  087D               	movf	??_fall_off+1,w
  8729  17C2  00FA               	movwf	get_matrix_bit@col
  8730  17C3  160A  118A  206E  160A  118A  	fcall	_get_matrix_bit
  8731  17C8  3A01               	xorlw	1
  8732  17C9  1D03               	skipz
  8733  17CA  2FCF               	goto	l3680
  8734                           
  8735                           ;teris_16f886.c: 964: {
  8736                           ;teris_16f886.c: 969: return y;
  8737  17CB  1283               	bcf	3,5	;RP0=0, select bank0
  8738  17CC  1303               	bcf	3,6	;RP1=0, select bank0
  8739  17CD  0820               	movf	fall_off@y,w
  8740  17CE  0008               	return
  8741  17CF                     l3680:	
  8742                           
  8743                           ;teris_16f886.c: 970: }
  8744                           ;teris_16f886.c: 971: if((y + row) >= (16 - 1))
  8745  17CF  1283               	bcf	3,5	;RP0=0, select bank0
  8746  17D0  1303               	bcf	3,6	;RP1=0, select bank0
  8747  17D1  0820               	movf	fall_off@y,w
  8748  17D2  0726               	addwf	fall_off@row,w
  8749  17D3  00FC               	movwf	??_fall_off
  8750  17D4  01FD               	clrf	??_fall_off+1
  8751  17D5  1803               	skipnc
  8752  17D6  0AFD               	incf	??_fall_off+1,f
  8753  17D7  1BA0               	btfsc	fall_off@y,7
  8754  17D8  03FD               	decf	??_fall_off+1,f
  8755  17D9  1BA6               	btfsc	fall_off@row,7
  8756  17DA  03FD               	decf	??_fall_off+1,f
  8757  17DB  087D               	movf	??_fall_off+1,w
  8758  17DC  3A80               	xorlw	128
  8759  17DD  00FF               	movwf	127
  8760  17DE  3080               	movlw	128
  8761  17DF  027F               	subwf	127,w
  8762  17E0  1D03               	skipz
  8763  17E1  2FE4               	goto	u4345
  8764  17E2  300F               	movlw	15
  8765  17E3  027C               	subwf	??_fall_off,w
  8766  17E4                     u4345:	
  8767  17E4  1C03               	skipc
  8768  17E5  2FEA               	goto	l3686
  8769                           
  8770                           ;teris_16f886.c: 972: {
  8771                           ;teris_16f886.c: 977: return y;
  8772  17E6  1283               	bcf	3,5	;RP0=0, select bank0
  8773  17E7  1303               	bcf	3,6	;RP1=0, select bank0
  8774  17E8  0820               	movf	fall_off@y,w
  8775  17E9  0008               	return
  8776  17EA                     l3686:	
  8777  17EA  3001               	movlw	1
  8778  17EB  00FC               	movwf	??_fall_off
  8779  17EC  087C               	movf	??_fall_off,w
  8780  17ED  1283               	bcf	3,5	;RP0=0, select bank0
  8781  17EE  1303               	bcf	3,6	;RP1=0, select bank0
  8782  17EF  07A5               	addwf	fall_off@col,f
  8783  17F0  0825               	movf	fall_off@col,w
  8784  17F1  3A80               	xorlw	128
  8785  17F2  3E7C               	addlw	-132
  8786  17F3  1C03               	skipc
  8787  17F4  2F9E               	goto	l3672
  8788  17F5                     l3690:	
  8789  17F5  30FF               	movlw	255
  8790  17F6  00FC               	movwf	??_fall_off
  8791  17F7  087C               	movf	??_fall_off,w
  8792  17F8  07A6               	addwf	fall_off@row,f
  8793  17F9  1FA6               	btfss	fall_off@row,7
  8794  17FA  2F98               	goto	l3666
  8795  17FB                     l3694:	
  8796                           
  8797                           ;teris_16f886.c: 978: }
  8798                           ;teris_16f886.c: 979: }
  8799                           ;teris_16f886.c: 980: }
  8800                           ;teris_16f886.c: 981: }
  8801                           ;teris_16f886.c: 982: y++;
  8802  17FB  3001               	movlw	1
  8803  17FC  00FC               	movwf	??_fall_off
  8804  17FD  087C               	movf	??_fall_off,w
  8805  17FE  07A0               	addwf	fall_off@y,f
  8806  17FF  2F92               	goto	l356
  8807  1800                     __end_of_fall_off:	
  8808                           
  8809                           	psect	text34
  8810  1236                     __ptext34:	
  8811 ;; *************** function _delete_matrix *****************
  8812 ;; Defined at:
  8813 ;;		line 783 in file "teris_16f886.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;  matrix          1    wreg     PTR struct .
  8816 ;;		 -> g_matrix16x8(16), 
  8817 ;; Auto vars:     Size  Location     Type
  8818 ;;  matrix          1    8[COMMON] PTR struct .
  8819 ;;		 -> g_matrix16x8(16), 
  8820 ;;  row             1    9[COMMON] char 
  8821 ;;  count           1    7[COMMON] unsigned char 
  8822 ;; Return value:  Size  Location     Type
  8823 ;;                  1    wreg      unsigned char 
  8824 ;; Registers used:
  8825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8826 ;; Tracked objects:
  8827 ;;		On entry : 0/0
  8828 ;;		On exit  : 0/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8831 ;;      Params:         0       0       0       0       0
  8832 ;;      Locals:         3       0       0       0       0
  8833 ;;      Temps:          1       0       0       0       0
  8834 ;;      Totals:         4       0       0       0       0
  8835 ;;Total ram usage:        4 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    1
  8838 ;; This function calls:
  8839 ;;		_delete_row
  8840 ;;		_is_row_full
  8841 ;; This function is called by:
  8842 ;;		_main
  8843 ;; This function uses a non-reentrant model
  8844 ;;
  8845                           
  8846                           
  8847                           ;psect for function _delete_matrix
  8848  1236                     _delete_matrix:	
  8849                           
  8850                           ;incstack = 0
  8851                           ; Regs used in _delete_matrix: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8852                           ;delete_matrix@matrix stored from wreg
  8853  1236  00F8               	movwf	delete_matrix@matrix
  8854                           
  8855                           ;teris_16f886.c: 785: uint8_t count = 0;
  8856  1237  01F7               	clrf	delete_matrix@count
  8857                           
  8858                           ;teris_16f886.c: 786: int8_t row = 16 - 1;
  8859  1238  300F               	movlw	15
  8860  1239  00F6               	movwf	??_delete_matrix
  8861  123A  0876               	movf	??_delete_matrix,w
  8862  123B  00F9               	movwf	delete_matrix@row
  8863  123C                     l4166:	
  8864                           ;teris_16f886.c: 787: while(row >= 0)
  8865                           
  8866  123C  1BF9               	btfsc	delete_matrix@row,7
  8867  123D  0008               	return
  8868                           
  8869                           ;teris_16f886.c: 788: {
  8870                           ;teris_16f886.c: 789: if(is_row_full(matrix, row) == 1)
  8871  123E  0879               	movf	delete_matrix@row,w
  8872  123F  00F6               	movwf	??_delete_matrix
  8873  1240  0876               	movf	??_delete_matrix,w
  8874  1241  00F0               	movwf	is_row_full@row
  8875  1242  0878               	movf	delete_matrix@matrix,w
  8876  1243  160A  118A  2052  160A  118A  	fcall	_is_row_full
  8877  1248  3A01               	xorlw	1
  8878  1249  1D03               	skipz
  8879  124A  2A5A               	goto	l4164
  8880                           
  8881                           ;teris_16f886.c: 790: {
  8882                           ;teris_16f886.c: 794: delete_row(matrix, row);
  8883  124B  0879               	movf	delete_matrix@row,w
  8884  124C  00F6               	movwf	??_delete_matrix
  8885  124D  0876               	movf	??_delete_matrix,w
  8886  124E  00F0               	movwf	delete_row@row
  8887  124F  0878               	movf	delete_matrix@matrix,w
  8888  1250  160A  118A  22EA  160A  118A  	fcall	_delete_row
  8889                           
  8890                           ;teris_16f886.c: 798: count++;
  8891  1255  3001               	movlw	1
  8892  1256  00F6               	movwf	??_delete_matrix
  8893  1257  0876               	movf	??_delete_matrix,w
  8894  1258  07F7               	addwf	delete_matrix@count,f
  8895                           
  8896                           ;teris_16f886.c: 799: }
  8897  1259  2A3C               	goto	l4166
  8898  125A                     l4164:	
  8899                           
  8900                           ;teris_16f886.c: 800: else
  8901                           ;teris_16f886.c: 801: {
  8902                           ;teris_16f886.c: 802: row--;
  8903  125A  30FF               	movlw	255
  8904  125B  00F6               	movwf	??_delete_matrix
  8905  125C  0876               	movf	??_delete_matrix,w
  8906  125D  07F9               	addwf	delete_matrix@row,f
  8907  125E  2A3C               	goto	l4166
  8908  125F                     __end_of_delete_matrix:	
  8909                           ;teris_16f886.c: 803: }
  8910                           ;teris_16f886.c: 804: }
  8911                           ;teris_16f886.c: 808: return count;
  8912                           ;	Return value of _delete_matrix is never used
  8913                           
  8914                           
  8915                           	psect	text35
  8916  1052                     __ptext35:	
  8917 ;; *************** function _is_row_full *****************
  8918 ;; Defined at:
  8919 ;;		line 751 in file "teris_16f886.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;  matrix          1    wreg     PTR const struct .
  8922 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  8923 ;;  row             1    0[COMMON] unsigned char 
  8924 ;; Auto vars:     Size  Location     Type
  8925 ;;  matrix          1    2[COMMON] PTR const struct .
  8926 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  8927 ;; Return value:  Size  Location     Type
  8928 ;;                  1    wreg      unsigned char 
  8929 ;; Registers used:
  8930 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8936 ;;      Params:         1       0       0       0       0
  8937 ;;      Locals:         1       0       0       0       0
  8938 ;;      Temps:          1       0       0       0       0
  8939 ;;      Totals:         3       0       0       0       0
  8940 ;;Total ram usage:        3 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; This function calls:
  8943 ;;		Nothing
  8944 ;; This function is called by:
  8945 ;;		_delete_matrix
  8946 ;;		_get_num_removed_rows
  8947 ;; This function uses a non-reentrant model
  8948 ;;
  8949                           
  8950                           
  8951                           ;psect for function _is_row_full
  8952  1052                     _is_row_full:	
  8953                           
  8954                           ;incstack = 0
  8955                           ; Regs used in _is_row_full: [wreg-fsr0h+status,2+status,0]
  8956                           ;is_row_full@matrix stored from wreg
  8957  1052  00F2               	movwf	is_row_full@matrix
  8958                           
  8959                           ;teris_16f886.c: 753: if(matrix->row[row] == 0xFF)
  8960  1053  0870               	movf	is_row_full@row,w
  8961  1054  0772               	addwf	is_row_full@matrix,w
  8962  1055  00F1               	movwf	??_is_row_full
  8963  1056  0871               	movf	??_is_row_full,w
  8964  1057  0084               	movwf	4
  8965  1058  1383               	bcf	3,7	;select IRP bank0
  8966  1059  0A00               	incf	0,w
  8967  105A  1D03               	btfss	3,2
  8968  105B  285E               	goto	l3462
  8969                           
  8970                           ;teris_16f886.c: 754: {
  8971                           ;teris_16f886.c: 762: return 1;
  8972  105C  3001               	movlw	1
  8973  105D  0008               	return
  8974  105E                     l3462:	
  8975                           
  8976                           ;teris_16f886.c: 763: }
  8977                           ;teris_16f886.c: 764: return 0;
  8978  105E  3000               	movlw	0
  8979  105F  0008               	return
  8980  1060                     __end_of_is_row_full:	
  8981                           
  8982                           	psect	text36
  8983  12EA                     __ptext36:	
  8984 ;; *************** function _delete_row *****************
  8985 ;; Defined at:
  8986 ;;		line 766 in file "teris_16f886.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;  matrix          1    wreg     PTR struct .
  8989 ;;		 -> g_matrix16x8(16), 
  8990 ;;  row             1    0[COMMON] unsigned char 
  8991 ;; Auto vars:     Size  Location     Type
  8992 ;;  matrix          1    4[COMMON] PTR struct .
  8993 ;;		 -> g_matrix16x8(16), 
  8994 ;;  i               1    5[COMMON] char 
  8995 ;; Return value:  Size  Location     Type
  8996 ;;                  1    wreg      void 
  8997 ;; Registers used:
  8998 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8999 ;; Tracked objects:
  9000 ;;		On entry : 0/0
  9001 ;;		On exit  : 0/0
  9002 ;;		Unchanged: 0/0
  9003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9004 ;;      Params:         1       0       0       0       0
  9005 ;;      Locals:         2       0       0       0       0
  9006 ;;      Temps:          3       0       0       0       0
  9007 ;;      Totals:         6       0       0       0       0
  9008 ;;Total ram usage:        6 bytes
  9009 ;; Hardware stack levels used:    1
  9010 ;; This function calls:
  9011 ;;		Nothing
  9012 ;; This function is called by:
  9013 ;;		_delete_matrix
  9014 ;; This function uses a non-reentrant model
  9015 ;;
  9016                           
  9017                           
  9018                           ;psect for function _delete_row
  9019  12EA                     _delete_row:	
  9020                           
  9021                           ;incstack = 0
  9022                           ; Regs used in _delete_row: [wreg-fsr0h+status,2+status,0]
  9023                           ;delete_row@matrix stored from wreg
  9024  12EA  00F4               	movwf	delete_row@matrix
  9025                           
  9026                           ;teris_16f886.c: 768: for(int8_t i = 16 - 1; i >= 0; i--)
  9027  12EB  300F               	movlw	15
  9028  12EC  00F1               	movwf	??_delete_row
  9029  12ED  0871               	movf	??_delete_row,w
  9030  12EE  00F5               	movwf	delete_row@i
  9031  12EF                     L30:	
  9032  12EF  1BF5               	btfsc	delete_row@i,7
  9033  12F0  0008               	return
  9034                           
  9035                           ;teris_16f886.c: 769: {
  9036                           ;teris_16f886.c: 770: if(i <= row)
  9037  12F1  0875               	movf	delete_row@i,w
  9038  12F2  00F1               	movwf	??_delete_row
  9039  12F3  01F2               	clrf	??_delete_row+1
  9040  12F4  1BF1               	btfsc	??_delete_row,7
  9041  12F5  03F2               	decf	??_delete_row+1,f
  9042  12F6  0872               	movf	??_delete_row+1,w
  9043  12F7  3A80               	xorlw	128
  9044  12F8  3C80               	sublw	128
  9045  12F9  1D03               	skipz
  9046  12FA  2AFD               	goto	u4115
  9047  12FB  0871               	movf	??_delete_row,w
  9048  12FC  0270               	subwf	delete_row@row,w
  9049  12FD                     u4115:	
  9050  12FD  1C03               	skipc
  9051  12FE  2B1C               	goto	l3592
  9052                           
  9053                           ;teris_16f886.c: 771: {
  9054                           ;teris_16f886.c: 772: if(i > 0)
  9055  12FF  0875               	movf	delete_row@i,w
  9056  1300  3A80               	xorlw	128
  9057  1301  3E7F               	addlw	-129
  9058  1302  1C03               	skipc
  9059  1303  2B15               	goto	l3590
  9060                           
  9061                           ;teris_16f886.c: 773: {
  9062                           ;teris_16f886.c: 774: matrix->row[i] = matrix->row[i - 1];
  9063  1304  0875               	movf	delete_row@i,w
  9064  1305  3EFF               	addlw	255
  9065  1306  0774               	addwf	delete_row@matrix,w
  9066  1307  00F1               	movwf	??_delete_row
  9067  1308  0871               	movf	??_delete_row,w
  9068  1309  0084               	movwf	4
  9069  130A  1383               	bcf	3,7	;select IRP bank0
  9070  130B  0800               	movf	0,w
  9071  130C  00F2               	movwf	??_delete_row+1
  9072  130D  0875               	movf	delete_row@i,w
  9073  130E  0774               	addwf	delete_row@matrix,w
  9074  130F  00F3               	movwf	??_delete_row+2
  9075  1310  0873               	movf	??_delete_row+2,w
  9076  1311  0084               	movwf	4
  9077  1312  0872               	movf	??_delete_row+1,w
  9078  1313  0080               	movwf	0
  9079                           
  9080                           ;teris_16f886.c: 775: }
  9081  1314  2B1C               	goto	l3592
  9082  1315                     l3590:	
  9083                           
  9084                           ;teris_16f886.c: 776: else
  9085                           ;teris_16f886.c: 777: {
  9086                           ;teris_16f886.c: 778: matrix->row[i] = 0x0;
  9087  1315  0875               	movf	delete_row@i,w
  9088  1316  0774               	addwf	delete_row@matrix,w
  9089  1317  00F1               	movwf	??_delete_row
  9090  1318  0871               	movf	??_delete_row,w
  9091  1319  0084               	movwf	4
  9092  131A  1383               	bcf	3,7	;select IRP bank0
  9093  131B  0180               	clrf	0
  9094  131C                     l3592:	
  9095  131C  30FF               	movlw	255
  9096  131D  00F1               	movwf	??_delete_row
  9097  131E  0871               	movf	??_delete_row,w
  9098  131F  07F5               	addwf	delete_row@i,f
  9099  1320  2AEF               	goto	L30
  9100  1321                     __end_of_delete_row:	
  9101                           
  9102                           	psect	text37
  9103  1411                     __ptext37:	
  9104 ;; *************** function _clear *****************
  9105 ;; Defined at:
  9106 ;;		line 985 in file "teris_16f886.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;  x               1    wreg     char 
  9109 ;;  y               1    0[BANK0 ] char 
  9110 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  9111 ;;		 -> NULL(0), g_matrix4x4(96), 
  9112 ;;  matrix16x8      1    3[BANK0 ] PTR struct .
  9113 ;;		 -> g_matrix16x8(16), 
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;  x               1    4[BANK0 ] char 
  9116 ;;  col             1    6[BANK0 ] unsigned char 
  9117 ;;  row             1    5[BANK0 ] unsigned char 
  9118 ;; Return value:  Size  Location     Type
  9119 ;;                  1    wreg      void 
  9120 ;; Registers used:
  9121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9127 ;;      Params:         0       4       0       0       0
  9128 ;;      Locals:         0       3       0       0       0
  9129 ;;      Temps:          2       0       0       0       0
  9130 ;;      Totals:         2       7       0       0       0
  9131 ;;Total ram usage:        9 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:    3
  9134 ;; This function calls:
  9135 ;;		_get_matrix_bit
  9136 ;;		_set_matrix_bit
  9137 ;; This function is called by:
  9138 ;;		_main
  9139 ;; This function uses a non-reentrant model
  9140 ;;
  9141                           
  9142                           
  9143                           ;psect for function _clear
  9144  1411                     _clear:	
  9145                           
  9146                           ;incstack = 0
  9147                           ; Regs used in _clear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9148                           ;clear@x stored from wreg
  9149  1411  1283               	bcf	3,5	;RP0=0, select bank0
  9150  1412  1303               	bcf	3,6	;RP1=0, select bank0
  9151  1413  00A4               	movwf	clear@x
  9152                           
  9153                           ;teris_16f886.c: 987: for(uint8_t row = 0; row < 4; row++)
  9154  1414  01A5               	clrf	clear@row
  9155  1415                     L31:	
  9156  1415  3004               	movlw	4
  9157  1416  0225               	subwf	clear@row,w
  9158  1417  1803               	btfsc	3,0
  9159  1418  0008               	return
  9160                           
  9161                           ;teris_16f886.c: 988: {
  9162                           ;teris_16f886.c: 989: for(uint8_t col = 0; col < 4; col++)
  9163  1419  01A6               	clrf	clear@col
  9164  141A  3004               	movlw	4
  9165  141B  0226               	subwf	clear@col,w
  9166  141C  1803               	btfsc	3,0
  9167  141D  2C4F               	goto	l4226
  9168  141E                     l4218:	
  9169                           
  9170                           ;teris_16f886.c: 990: {
  9171                           ;teris_16f886.c: 991: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  9172  141E  0821               	movf	clear@matrix4x4,w
  9173  141F  00F7               	movwf	get_matrix_bit@byte
  9174  1420  0822               	movf	clear@matrix4x4+1,w
  9175  1421  00F8               	movwf	get_matrix_bit@byte+1
  9176  1422  0825               	movf	clear@row,w
  9177  1423  00FC               	movwf	??_clear
  9178  1424  087C               	movf	??_clear,w
  9179  1425  00F9               	movwf	get_matrix_bit@row
  9180  1426  0826               	movf	clear@col,w
  9181  1427  00FD               	movwf	??_clear+1
  9182  1428  087D               	movf	??_clear+1,w
  9183  1429  00FA               	movwf	get_matrix_bit@col
  9184  142A  160A  118A  206E  160A  118A  	fcall	_get_matrix_bit
  9185  142F  3A01               	xorlw	1
  9186  1430  1D03               	skipz
  9187  1431  2C45               	goto	l4222
  9188                           
  9189                           ;teris_16f886.c: 992: {
  9190                           ;teris_16f886.c: 993: set_matrix_bit(matrix16x8->row, y + row, x + col, 0);
  9191  1432  1283               	bcf	3,5	;RP0=0, select bank0
  9192  1433  1303               	bcf	3,6	;RP1=0, select bank0
  9193  1434  0825               	movf	clear@row,w
  9194  1435  0720               	addwf	clear@y,w
  9195  1436  00FC               	movwf	??_clear
  9196  1437  087C               	movf	??_clear,w
  9197  1438  00F5               	movwf	set_matrix_bit@row
  9198  1439  0826               	movf	clear@col,w
  9199  143A  0724               	addwf	clear@x,w
  9200  143B  00FD               	movwf	??_clear+1
  9201  143C  087D               	movf	??_clear+1,w
  9202  143D  00F6               	movwf	set_matrix_bit@col
  9203  143E  01F7               	clrf	set_matrix_bit@value
  9204  143F  0823               	movf	clear@matrix16x8,w
  9205  1440  160A  118A  207D  160A  118A  	fcall	_set_matrix_bit
  9206  1445                     l4222:	
  9207  1445  3001               	movlw	1
  9208  1446  00FC               	movwf	??_clear
  9209  1447  087C               	movf	??_clear,w
  9210  1448  1283               	bcf	3,5	;RP0=0, select bank0
  9211  1449  1303               	bcf	3,6	;RP1=0, select bank0
  9212  144A  07A6               	addwf	clear@col,f
  9213  144B  3004               	movlw	4
  9214  144C  0226               	subwf	clear@col,w
  9215  144D  1C03               	skipc
  9216  144E  2C1E               	goto	l4218
  9217  144F                     l4226:	
  9218  144F  3001               	movlw	1
  9219  1450  00FC               	movwf	??_clear
  9220  1451  087C               	movf	??_clear,w
  9221  1452  07A5               	addwf	clear@row,f
  9222  1453  2C15               	goto	L31
  9223  1454                     __end_of_clear:	
  9224                           
  9225                           	psect	text38
  9226  107D                     __ptext38:	
  9227 ;; *************** function _set_matrix_bit *****************
  9228 ;; Defined at:
  9229 ;;		line 463 in file "teris_16f886.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;  byte            1    wreg     PTR unsigned char 
  9232 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  9233 ;;  row             1    5[COMMON] unsigned char 
  9234 ;;  col             1    6[COMMON] unsigned char 
  9235 ;;  value           1    7[COMMON] unsigned char 
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;  byte            1   10[COMMON] PTR unsigned char 
  9238 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  9239 ;; Return value:  Size  Location     Type
  9240 ;;                  1    wreg      void 
  9241 ;; Registers used:
  9242 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9243 ;; Tracked objects:
  9244 ;;		On entry : 0/0
  9245 ;;		On exit  : 0/0
  9246 ;;		Unchanged: 0/0
  9247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9248 ;;      Params:         3       0       0       0       0
  9249 ;;      Locals:         1       0       0       0       0
  9250 ;;      Temps:          2       0       0       0       0
  9251 ;;      Totals:         6       0       0       0       0
  9252 ;;Total ram usage:        6 bytes
  9253 ;; Hardware stack levels used:    1
  9254 ;; Hardware stack levels required when called:    1
  9255 ;; This function calls:
  9256 ;;		_setbit
  9257 ;; This function is called by:
  9258 ;;		_clear
  9259 ;;		_merge
  9260 ;;		_merge1
  9261 ;; This function uses a non-reentrant model
  9262 ;;
  9263                           
  9264                           
  9265                           ;psect for function _set_matrix_bit
  9266  107D                     _set_matrix_bit:	
  9267                           
  9268                           ;incstack = 0
  9269                           ; Regs used in _set_matrix_bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9270                           ;set_matrix_bit@byte stored from wreg
  9271  107D  00FA               	movwf	set_matrix_bit@byte
  9272                           
  9273                           ;teris_16f886.c: 465: setbit(&byte[row], col, value);
  9274  107E  0876               	movf	set_matrix_bit@col,w
  9275  107F  00F8               	movwf	??_set_matrix_bit
  9276  1080  0878               	movf	??_set_matrix_bit,w
  9277  1081  00F0               	movwf	setbit@at
  9278  1082  0877               	movf	set_matrix_bit@value,w
  9279  1083  00F9               	movwf	??_set_matrix_bit+1
  9280  1084  0879               	movf	??_set_matrix_bit+1,w
  9281  1085  00F1               	movwf	setbit@value
  9282  1086  0875               	movf	set_matrix_bit@row,w
  9283  1087  077A               	addwf	set_matrix_bit@byte,w
  9284  1088  160A  118A  2726   	fcall	_setbit
  9285  108B  0008               	return
  9286  108C                     __end_of_set_matrix_bit:	
  9287                           
  9288                           	psect	text39
  9289  1726                     __ptext39:	
  9290 ;; *************** function _setbit *****************
  9291 ;; Defined at:
  9292 ;;		line 401 in file "teris_16f886.c"
  9293 ;; Parameters:    Size  Location     Type
  9294 ;;  byte            1    wreg     PTR unsigned char 
  9295 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  9296 ;;  at              1    0[COMMON] unsigned char 
  9297 ;;  value           1    1[COMMON] unsigned char 
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;  byte            1    3[COMMON] PTR unsigned char 
  9300 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  9301 ;;  temp            1    4[COMMON] PTR struct .
  9302 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  9303 ;; Return value:  Size  Location     Type
  9304 ;;                  1    wreg      void 
  9305 ;; Registers used:
  9306 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9307 ;; Tracked objects:
  9308 ;;		On entry : 0/0
  9309 ;;		On exit  : 0/0
  9310 ;;		Unchanged: 0/0
  9311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9312 ;;      Params:         2       0       0       0       0
  9313 ;;      Locals:         2       0       0       0       0
  9314 ;;      Temps:          1       0       0       0       0
  9315 ;;      Totals:         5       0       0       0       0
  9316 ;;Total ram usage:        5 bytes
  9317 ;; Hardware stack levels used:    1
  9318 ;; This function calls:
  9319 ;;		Nothing
  9320 ;; This function is called by:
  9321 ;;		_set_matrix_bit
  9322 ;; This function uses a non-reentrant model
  9323 ;;
  9324                           
  9325                           
  9326                           ;psect for function _setbit
  9327  1726                     _setbit:	
  9328                           
  9329                           ;incstack = 0
  9330                           ; Regs used in _setbit: [wreg-fsr0h+status,2+status,0]
  9331                           ;setbit@byte stored from wreg
  9332  1726  00F3               	movwf	setbit@byte
  9333                           
  9334                           ;teris_16f886.c: 403: t_byte *temp = (t_byte *)byte;
  9335  1727  0873               	movf	setbit@byte,w
  9336  1728  00F2               	movwf	??_setbit
  9337  1729  0872               	movf	??_setbit,w
  9338  172A  00F4               	movwf	setbit@temp
  9339                           
  9340                           ;teris_16f886.c: 404: switch(at)
  9341  172B  2F74               	goto	l3382
  9342  172C                     l3364:	
  9343                           ;teris_16f886.c: 405: {
  9344                           ;teris_16f886.c: 406: case 0:
  9345                           
  9346                           
  9347                           ;teris_16f886.c: 407: temp->b0 = value;
  9348  172C  0874               	movf	setbit@temp,w
  9349  172D  0084               	movwf	4
  9350  172E  0871               	movf	setbit@value,w
  9351  172F  3901               	andlw	1
  9352  1730  1383               	bcf	3,7	;select IRP bank0
  9353  1731  1000               	bcf	0,0
  9354  1732  1D03               	skipz
  9355  1733  1400               	bsf	0,0
  9356                           
  9357                           ;teris_16f886.c: 408: break;
  9358  1734  0008               	return
  9359  1735                     l3366:	
  9360                           ;teris_16f886.c: 409: case 1:
  9361                           
  9362                           
  9363                           ;teris_16f886.c: 410: temp->b1 = value;
  9364  1735  0874               	movf	setbit@temp,w
  9365  1736  0084               	movwf	4
  9366  1737  0871               	movf	setbit@value,w
  9367  1738  3901               	andlw	1
  9368  1739  1383               	bcf	3,7	;select IRP bank0
  9369  173A  1080               	bcf	0,1
  9370  173B  1D03               	skipz
  9371  173C  1480               	bsf	0,1
  9372                           
  9373                           ;teris_16f886.c: 411: break;
  9374  173D  0008               	return
  9375  173E                     l3368:	
  9376                           ;teris_16f886.c: 412: case 2:
  9377                           
  9378                           
  9379                           ;teris_16f886.c: 413: temp->b2 = value;
  9380  173E  0874               	movf	setbit@temp,w
  9381  173F  0084               	movwf	4
  9382  1740  0871               	movf	setbit@value,w
  9383  1741  3901               	andlw	1
  9384  1742  1383               	bcf	3,7	;select IRP bank0
  9385  1743  1100               	bcf	0,2
  9386  1744  1D03               	skipz
  9387  1745  1500               	bsf	0,2
  9388                           
  9389                           ;teris_16f886.c: 414: break;
  9390  1746  0008               	return
  9391  1747                     l3370:	
  9392                           ;teris_16f886.c: 415: case 3:
  9393                           
  9394                           
  9395                           ;teris_16f886.c: 416: temp->b3 = value;
  9396  1747  0874               	movf	setbit@temp,w
  9397  1748  0084               	movwf	4
  9398  1749  0871               	movf	setbit@value,w
  9399  174A  3901               	andlw	1
  9400  174B  1383               	bcf	3,7	;select IRP bank0
  9401  174C  1180               	bcf	0,3
  9402  174D  1D03               	skipz
  9403  174E  1580               	bsf	0,3
  9404                           
  9405                           ;teris_16f886.c: 417: break;
  9406  174F  0008               	return
  9407  1750                     l3372:	
  9408                           ;teris_16f886.c: 418: case 4:
  9409                           
  9410                           
  9411                           ;teris_16f886.c: 419: temp->b4 = value;
  9412  1750  0874               	movf	setbit@temp,w
  9413  1751  0084               	movwf	4
  9414  1752  0871               	movf	setbit@value,w
  9415  1753  3901               	andlw	1
  9416  1754  1383               	bcf	3,7	;select IRP bank0
  9417  1755  1200               	bcf	0,4
  9418  1756  1D03               	skipz
  9419  1757  1600               	bsf	0,4
  9420                           
  9421                           ;teris_16f886.c: 420: break;
  9422  1758  0008               	return
  9423  1759                     l3374:	
  9424                           ;teris_16f886.c: 421: case 5:
  9425                           
  9426                           
  9427                           ;teris_16f886.c: 422: temp->b5 = value;
  9428  1759  0874               	movf	setbit@temp,w
  9429  175A  0084               	movwf	4
  9430  175B  0871               	movf	setbit@value,w
  9431  175C  3901               	andlw	1
  9432  175D  1383               	bcf	3,7	;select IRP bank0
  9433  175E  1280               	bcf	0,5
  9434  175F  1D03               	skipz
  9435  1760  1680               	bsf	0,5
  9436                           
  9437                           ;teris_16f886.c: 423: break;
  9438  1761  0008               	return
  9439  1762                     l3376:	
  9440                           ;teris_16f886.c: 424: case 6:
  9441                           
  9442                           
  9443                           ;teris_16f886.c: 425: temp->b6 = value;
  9444  1762  0874               	movf	setbit@temp,w
  9445  1763  0084               	movwf	4
  9446  1764  0871               	movf	setbit@value,w
  9447  1765  3901               	andlw	1
  9448  1766  1383               	bcf	3,7	;select IRP bank0
  9449  1767  1300               	bcf	0,6
  9450  1768  1D03               	skipz
  9451  1769  1700               	bsf	0,6
  9452                           
  9453                           ;teris_16f886.c: 426: break;
  9454  176A  0008               	return
  9455  176B                     l3378:	
  9456                           ;teris_16f886.c: 427: case 7:
  9457                           
  9458                           
  9459                           ;teris_16f886.c: 428: temp->b7 = value;
  9460  176B  0874               	movf	setbit@temp,w
  9461  176C  0084               	movwf	4
  9462  176D  0871               	movf	setbit@value,w
  9463  176E  3901               	andlw	1
  9464  176F  1383               	bcf	3,7	;select IRP bank0
  9465  1770  1380               	bcf	0,7
  9466  1771  1D03               	skipz
  9467  1772  1780               	bsf	0,7
  9468                           
  9469                           ;teris_16f886.c: 430: }
  9470                           
  9471                           ;teris_16f886.c: 429: break;
  9472  1773  0008               	return
  9473  1774                     l3382:	
  9474  1774  0870               	movf	setbit@at,w
  9475                           
  9476                           ; Switch size 1, requested type "space"
  9477                           ; Number of cases is 8, Range of values is 0 to 7
  9478                           ; switch strategies available:
  9479                           ; Name         Instructions Cycles
  9480                           ; simple_byte           25    13 (average)
  9481                           ; direct_byte           32     8 (fixed)
  9482                           ; jumptable            260     6 (fixed)
  9483                           ;	Chosen strategy is simple_byte
  9484  1775  3A00               	xorlw	0	; case 0
  9485  1776  1903               	skipnz
  9486  1777  2F2C               	goto	l3364
  9487  1778  3A01               	xorlw	1	; case 1
  9488  1779  1903               	skipnz
  9489  177A  2F35               	goto	l3366
  9490  177B  3A03               	xorlw	3	; case 2
  9491  177C  1903               	skipnz
  9492  177D  2F3E               	goto	l3368
  9493  177E  3A01               	xorlw	1	; case 3
  9494  177F  1903               	skipnz
  9495  1780  2F47               	goto	l3370
  9496  1781  3A07               	xorlw	7	; case 4
  9497  1782  1903               	skipnz
  9498  1783  2F50               	goto	l3372
  9499  1784  3A01               	xorlw	1	; case 5
  9500  1785  1903               	skipnz
  9501  1786  2F59               	goto	l3374
  9502  1787  3A03               	xorlw	3	; case 6
  9503  1788  1903               	skipnz
  9504  1789  2F62               	goto	l3376
  9505  178A  3A01               	xorlw	1	; case 7
  9506  178B  1903               	skipnz
  9507  178C  2F6B               	goto	l3378
  9508  178D  2F8E               	goto	l186
  9509  178E                     l186:	
  9510  178E  0008               	return
  9511  178F                     __end_of_setbit:	
  9512                           
  9513                           	psect	text40
  9514  10F7                     __ptext40:	
  9515 ;; *************** function _char_info_index_rand *****************
  9516 ;; Defined at:
  9517 ;;		line 1116 in file "teris_16f886.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;		None
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;		None
  9522 ;; Return value:  Size  Location     Type
  9523 ;;                  1    wreg      unsigned char 
  9524 ;; Registers used:
  9525 ;;		wreg, status,2, status,0, pclath, cstack
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9531 ;;      Params:         0       0       0       0       0
  9532 ;;      Locals:         0       0       0       0       0
  9533 ;;      Temps:          0       0       0       0       0
  9534 ;;      Totals:         0       0       0       0       0
  9535 ;;Total ram usage:        0 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    2
  9538 ;; This function calls:
  9539 ;;		___awmod
  9540 ;;		_rand
  9541 ;; This function is called by:
  9542 ;;		_main
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           
  9547                           ;psect for function _char_info_index_rand
  9548  10F7                     _char_info_index_rand:	
  9549                           
  9550                           ;teris_16f886.c: 1118: return (uint8_t)(rand()%9);
  9551                           
  9552                           ;incstack = 0
  9553                           ; Regs used in _char_info_index_rand: [wreg+status,2+status,0+pclath+cstack]
  9554  10F7  3009               	movlw	9
  9555  10F8  1283               	bcf	3,5	;RP0=0, select bank0
  9556  10F9  1303               	bcf	3,6	;RP1=0, select bank0
  9557  10FA  00A7               	movwf	___awmod@divisor
  9558  10FB  3000               	movlw	0
  9559  10FC  00A8               	movwf	___awmod@divisor+1
  9560  10FD  160A  118A  2614  160A  118A  	fcall	_rand
  9561  1102  1283               	bcf	3,5	;RP0=0, select bank0
  9562  1103  1303               	bcf	3,6	;RP1=0, select bank0
  9563  1104  0821               	movf	?_rand+1,w
  9564  1105  00AA               	movwf	___awmod@dividend+1
  9565  1106  0820               	movf	?_rand,w
  9566  1107  00A9               	movwf	___awmod@dividend
  9567  1108  160A  118A  252B   	fcall	___awmod
  9568  110B  1283               	bcf	3,5	;RP0=0, select bank0
  9569  110C  1303               	bcf	3,6	;RP1=0, select bank0
  9570  110D  0827               	movf	?___awmod,w
  9571  110E  0008               	return
  9572  110F                     __end_of_char_info_index_rand:	
  9573                           
  9574                           	psect	text41
  9575  1614                     __ptext41:	
  9576 ;; *************** function _rand *****************
  9577 ;; Defined at:
  9578 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  9579 ;; Parameters:    Size  Location     Type
  9580 ;;		None
  9581 ;; Auto vars:     Size  Location     Type
  9582 ;;		None
  9583 ;; Return value:  Size  Location     Type
  9584 ;;                  2    0[BANK0 ] int 
  9585 ;; Registers used:
  9586 ;;		wreg, status,2, status,0, pclath, cstack
  9587 ;; Tracked objects:
  9588 ;;		On entry : 0/0
  9589 ;;		On exit  : 0/0
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9592 ;;      Params:         0       2       0       0       0
  9593 ;;      Locals:         0       0       0       0       0
  9594 ;;      Temps:          0       5       0       0       0
  9595 ;;      Totals:         0       7       0       0       0
  9596 ;;Total ram usage:        7 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; Hardware stack levels required when called:    1
  9599 ;; This function calls:
  9600 ;;		___lmul
  9601 ;; This function is called by:
  9602 ;;		_char_info_index_rand
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           
  9607                           ;psect for function _rand
  9608  1614                     _rand:	
  9609                           
  9610                           ;incstack = 0
  9611                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  9612  1614  1683               	bsf	3,5	;RP0=1, select bank1
  9613  1615  1303               	bcf	3,6	;RP1=0, select bank1
  9614  1616  083F               	movf	(_randx+3)^(0+128),w
  9615  1617  00F3               	movwf	___lmul@multiplier+3
  9616  1618  083E               	movf	(_randx+2)^(0+128),w
  9617  1619  00F2               	movwf	___lmul@multiplier+2
  9618  161A  083D               	movf	(_randx+1)^(0+128),w
  9619  161B  00F1               	movwf	___lmul@multiplier+1
  9620  161C  083C               	movf	_randx^(0+128),w
  9621  161D  00F0               	movwf	___lmul@multiplier
  9622  161E  3041               	movlw	65
  9623  161F  00F7               	movwf	___lmul@multiplicand+3
  9624  1620  30C6               	movlw	198
  9625  1621  00F6               	movwf	___lmul@multiplicand+2
  9626  1622  304E               	movlw	78
  9627  1623  00F5               	movwf	___lmul@multiplicand+1
  9628  1624  306D               	movlw	109
  9629  1625  00F4               	movwf	___lmul@multiplicand
  9630  1626  160A  118A  23D2  160A  118A  	fcall	___lmul
  9631  162B  0873               	movf	?___lmul+3,w
  9632  162C  1683               	bsf	3,5	;RP0=1, select bank1
  9633  162D  1303               	bcf	3,6	;RP1=0, select bank1
  9634  162E  00BF               	movwf	(_randx+3)^(0+128)
  9635  162F  0872               	movf	?___lmul+2,w
  9636  1630  00BE               	movwf	(_randx+2)^(0+128)
  9637  1631  0871               	movf	?___lmul+1,w
  9638  1632  00BD               	movwf	(_randx+1)^(0+128)
  9639  1633  0870               	movf	?___lmul,w
  9640  1634  00BC               	movwf	_randx^(0+128)
  9641  1635  3039               	movlw	57
  9642  1636  07BC               	addwf	_randx^(0+128),f
  9643  1637  3030               	movlw	48
  9644  1638  1803               	skipnc
  9645  1639  3031               	movlw	49
  9646  163A  07BD               	addwf	(_randx+1)^(0+128),f
  9647  163B  3000               	movlw	0
  9648  163C  1803               	skipnc
  9649  163D  3001               	movlw	1
  9650  163E  07BE               	addwf	(_randx+2)^(0+128),f
  9651  163F  3000               	movlw	0
  9652  1640  1803               	skipnc
  9653  1641  3001               	movlw	1
  9654  1642  07BF               	addwf	(_randx+3)^(0+128),f
  9655  1643  083C               	movf	_randx^(0+128),w
  9656  1644  1283               	bcf	3,5	;RP0=0, select bank0
  9657  1645  1303               	bcf	3,6	;RP1=0, select bank0
  9658  1646  00A2               	movwf	??_rand
  9659  1647  1683               	bsf	3,5	;RP0=1, select bank1
  9660  1648  1303               	bcf	3,6	;RP1=0, select bank1
  9661  1649  083D               	movf	(_randx+1)^(0+128),w
  9662  164A  1283               	bcf	3,5	;RP0=0, select bank0
  9663  164B  1303               	bcf	3,6	;RP1=0, select bank0
  9664  164C  00A3               	movwf	??_rand+1
  9665  164D  1683               	bsf	3,5	;RP0=1, select bank1
  9666  164E  1303               	bcf	3,6	;RP1=0, select bank1
  9667  164F  083E               	movf	(_randx+2)^(0+128),w
  9668  1650  1283               	bcf	3,5	;RP0=0, select bank0
  9669  1651  1303               	bcf	3,6	;RP1=0, select bank0
  9670  1652  00A4               	movwf	??_rand+2
  9671  1653  1683               	bsf	3,5	;RP0=1, select bank1
  9672  1654  1303               	bcf	3,6	;RP1=0, select bank1
  9673  1655  083F               	movf	(_randx+3)^(0+128),w
  9674  1656  1283               	bcf	3,5	;RP0=0, select bank0
  9675  1657  1303               	bcf	3,6	;RP1=0, select bank0
  9676  1658  00A5               	movwf	??_rand+3
  9677  1659  3010               	movlw	16
  9678  165A  00A6               	movwf	??_rand+4
  9679  165B                     u4575:	
  9680  165B  0D25               	rlf	??_rand+3,w
  9681  165C  0CA5               	rrf	??_rand+3,f
  9682  165D  0CA4               	rrf	??_rand+2,f
  9683  165E  0CA3               	rrf	??_rand+1,f
  9684  165F  0CA2               	rrf	??_rand,f
  9685  1660  0BA6               	decfsz	??_rand+4,f
  9686  1661  2E5B               	goto	u4575
  9687  1662  30FF               	movlw	255
  9688  1663  0522               	andwf	??_rand,w
  9689  1664  00A0               	movwf	?_rand
  9690  1665  307F               	movlw	127
  9691  1666  0523               	andwf	??_rand+1,w
  9692  1667  00A1               	movwf	?_rand+1
  9693  1668  0008               	return
  9694  1669                     __end_of_rand:	
  9695                           
  9696                           	psect	text42
  9697  13D2                     __ptext42:	
  9698 ;; *************** function ___lmul *****************
  9699 ;; Defined at:
  9700 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  9701 ;; Parameters:    Size  Location     Type
  9702 ;;  multiplier      4    0[COMMON] unsigned long 
  9703 ;;  multiplicand    4    4[COMMON] unsigned long 
  9704 ;; Auto vars:     Size  Location     Type
  9705 ;;  product         4    9[COMMON] unsigned long 
  9706 ;; Return value:  Size  Location     Type
  9707 ;;                  4    0[COMMON] unsigned long 
  9708 ;; Registers used:
  9709 ;;		wreg, status,2, status,0
  9710 ;; Tracked objects:
  9711 ;;		On entry : 0/0
  9712 ;;		On exit  : 0/0
  9713 ;;		Unchanged: 0/0
  9714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9715 ;;      Params:         8       0       0       0       0
  9716 ;;      Locals:         4       0       0       0       0
  9717 ;;      Temps:          1       0       0       0       0
  9718 ;;      Totals:        13       0       0       0       0
  9719 ;;Total ram usage:       13 bytes
  9720 ;; Hardware stack levels used:    1
  9721 ;; This function calls:
  9722 ;;		Nothing
  9723 ;; This function is called by:
  9724 ;;		_rand
  9725 ;; This function uses a non-reentrant model
  9726 ;;
  9727                           
  9728                           
  9729                           ;psect for function ___lmul
  9730  13D2                     ___lmul:	
  9731                           
  9732                           ;incstack = 0
  9733                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9734  13D2  3000               	movlw	0
  9735  13D3  00FC               	movwf	___lmul@product+3
  9736  13D4  3000               	movlw	0
  9737  13D5  00FB               	movwf	___lmul@product+2
  9738  13D6  3000               	movlw	0
  9739  13D7  00FA               	movwf	___lmul@product+1
  9740  13D8  3000               	movlw	0
  9741  13D9  00F9               	movwf	___lmul@product
  9742  13DA                     l3552:	
  9743  13DA  1C70               	btfss	___lmul@multiplier,0
  9744  13DB  2BF0               	goto	l3556
  9745  13DC  0874               	movf	___lmul@multiplicand,w
  9746  13DD  07F9               	addwf	___lmul@product,f
  9747  13DE  0875               	movf	___lmul@multiplicand+1,w
  9748  13DF  1103               	clrz
  9749  13E0  1803               	skipnc
  9750  13E1  3E01               	addlw	1
  9751  13E2  1D03               	btfss	3,2
  9752  13E3  07FA               	addwf	___lmul@product+1,f
  9753  13E4  0876               	movf	___lmul@multiplicand+2,w
  9754  13E5  1103               	clrz
  9755  13E6  1803               	skipnc
  9756  13E7  3E01               	addlw	1
  9757  13E8  1D03               	btfss	3,2
  9758  13E9  07FB               	addwf	___lmul@product+2,f
  9759  13EA  0877               	movf	___lmul@multiplicand+3,w
  9760  13EB  1103               	clrz
  9761  13EC  1803               	skipnc
  9762  13ED  3E01               	addlw	1
  9763  13EE  1D03               	btfss	3,2
  9764  13EF  07FC               	addwf	___lmul@product+3,f
  9765  13F0                     l3556:	
  9766  13F0  3001               	movlw	1
  9767  13F1  00F8               	movwf	??___lmul
  9768  13F2                     u4065:	
  9769  13F2  1003               	clrc
  9770  13F3  0DF4               	rlf	___lmul@multiplicand,f
  9771  13F4  0DF5               	rlf	___lmul@multiplicand+1,f
  9772  13F5  0DF6               	rlf	___lmul@multiplicand+2,f
  9773  13F6  0DF7               	rlf	___lmul@multiplicand+3,f
  9774  13F7  0BF8               	decfsz	??___lmul,f
  9775  13F8  2BF2               	goto	u4065
  9776  13F9  3001               	movlw	1
  9777  13FA                     u4075:	
  9778  13FA  1003               	clrc
  9779  13FB  0CF3               	rrf	___lmul@multiplier+3,f
  9780  13FC  0CF2               	rrf	___lmul@multiplier+2,f
  9781  13FD  0CF1               	rrf	___lmul@multiplier+1,f
  9782  13FE  0CF0               	rrf	___lmul@multiplier,f
  9783  13FF  3EFF               	addlw	-1
  9784  1400  1D03               	skipz
  9785  1401  2BFA               	goto	u4075
  9786  1402  0873               	movf	___lmul@multiplier+3,w
  9787  1403  0472               	iorwf	___lmul@multiplier+2,w
  9788  1404  0471               	iorwf	___lmul@multiplier+1,w
  9789  1405  0470               	iorwf	___lmul@multiplier,w
  9790  1406  1D03               	skipz
  9791  1407  2BDA               	goto	l3552
  9792  1408  087C               	movf	___lmul@product+3,w
  9793  1409  00F3               	movwf	?___lmul+3
  9794  140A  087B               	movf	___lmul@product+2,w
  9795  140B  00F2               	movwf	?___lmul+2
  9796  140C  087A               	movf	___lmul@product+1,w
  9797  140D  00F1               	movwf	?___lmul+1
  9798  140E  0879               	movf	___lmul@product,w
  9799  140F  00F0               	movwf	?___lmul
  9800  1410  0008               	return
  9801  1411                     __end_of___lmul:	
  9802                           
  9803                           	psect	text43
  9804  152B                     __ptext43:	
  9805 ;; *************** function ___awmod *****************
  9806 ;; Defined at:
  9807 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  9808 ;; Parameters:    Size  Location     Type
  9809 ;;  divisor         2    7[BANK0 ] int 
  9810 ;;  dividend        2    9[BANK0 ] int 
  9811 ;; Auto vars:     Size  Location     Type
  9812 ;;  sign            1   12[BANK0 ] unsigned char 
  9813 ;;  counter         1   11[BANK0 ] unsigned char 
  9814 ;; Return value:  Size  Location     Type
  9815 ;;                  2    7[BANK0 ] int 
  9816 ;; Registers used:
  9817 ;;		wreg, status,2, status,0
  9818 ;; Tracked objects:
  9819 ;;		On entry : 0/0
  9820 ;;		On exit  : 0/0
  9821 ;;		Unchanged: 0/0
  9822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9823 ;;      Params:         0       4       0       0       0
  9824 ;;      Locals:         0       2       0       0       0
  9825 ;;      Temps:          1       0       0       0       0
  9826 ;;      Totals:         1       6       0       0       0
  9827 ;;Total ram usage:        7 bytes
  9828 ;; Hardware stack levels used:    1
  9829 ;; This function calls:
  9830 ;;		Nothing
  9831 ;; This function is called by:
  9832 ;;		_char_info_index_rand
  9833 ;;		_USARTWriteInt
  9834 ;; This function uses a non-reentrant model
  9835 ;;
  9836                           
  9837                           
  9838                           ;psect for function ___awmod
  9839  152B                     ___awmod:	
  9840                           
  9841                           ;incstack = 0
  9842                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  9843  152B  1283               	bcf	3,5	;RP0=0, select bank0
  9844  152C  1303               	bcf	3,6	;RP1=0, select bank0
  9845  152D  01AC               	clrf	___awmod@sign
  9846  152E  1FAA               	btfss	___awmod@dividend+1,7
  9847  152F  2D37               	goto	l3960
  9848  1530  09A9               	comf	___awmod@dividend,f
  9849  1531  09AA               	comf	___awmod@dividend+1,f
  9850  1532  0AA9               	incf	___awmod@dividend,f
  9851  1533  1903               	skipnz
  9852  1534  0AAA               	incf	___awmod@dividend+1,f
  9853  1535  01AC               	clrf	___awmod@sign
  9854  1536  0AAC               	incf	___awmod@sign,f
  9855  1537                     l3960:	
  9856  1537  1FA8               	btfss	___awmod@divisor+1,7
  9857  1538  2D3E               	goto	l3964
  9858  1539  09A7               	comf	___awmod@divisor,f
  9859  153A  09A8               	comf	___awmod@divisor+1,f
  9860  153B  0AA7               	incf	___awmod@divisor,f
  9861  153C  1903               	skipnz
  9862  153D  0AA8               	incf	___awmod@divisor+1,f
  9863  153E                     l3964:	
  9864  153E  0827               	movf	___awmod@divisor,w
  9865  153F  0428               	iorwf	___awmod@divisor+1,w
  9866  1540  1903               	btfsc	3,2
  9867  1541  2D6B               	goto	l3982
  9868  1542  01AB               	clrf	___awmod@counter
  9869  1543  0AAB               	incf	___awmod@counter,f
  9870  1544                     l3972:	
  9871  1544  1BA8               	btfsc	___awmod@divisor+1,7
  9872  1545  2D52               	goto	l3974
  9873  1546  3001               	movlw	1
  9874  1547                     u4955:	
  9875  1547  1003               	clrc
  9876  1548  0DA7               	rlf	___awmod@divisor,f
  9877  1549  0DA8               	rlf	___awmod@divisor+1,f
  9878  154A  3EFF               	addlw	-1
  9879  154B  1D03               	skipz
  9880  154C  2D47               	goto	u4955
  9881  154D  3001               	movlw	1
  9882  154E  00FD               	movwf	??___awmod
  9883  154F  087D               	movf	??___awmod,w
  9884  1550  07AB               	addwf	___awmod@counter,f
  9885  1551  2D44               	goto	l3972
  9886  1552                     l3974:	
  9887  1552  0828               	movf	___awmod@divisor+1,w
  9888  1553  022A               	subwf	___awmod@dividend+1,w
  9889  1554  1D03               	skipz
  9890  1555  2D58               	goto	u4975
  9891  1556  0827               	movf	___awmod@divisor,w
  9892  1557  0229               	subwf	___awmod@dividend,w
  9893  1558                     u4975:	
  9894  1558  1C03               	skipc
  9895  1559  2D60               	goto	l3978
  9896  155A  0827               	movf	___awmod@divisor,w
  9897  155B  02A9               	subwf	___awmod@dividend,f
  9898  155C  0828               	movf	___awmod@divisor+1,w
  9899  155D  1C03               	skipc
  9900  155E  03AA               	decf	___awmod@dividend+1,f
  9901  155F  02AA               	subwf	___awmod@dividend+1,f
  9902  1560                     l3978:	
  9903  1560  3001               	movlw	1
  9904  1561                     u4985:	
  9905  1561  1003               	clrc
  9906  1562  0CA8               	rrf	___awmod@divisor+1,f
  9907  1563  0CA7               	rrf	___awmod@divisor,f
  9908  1564  3EFF               	addlw	-1
  9909  1565  1D03               	skipz
  9910  1566  2D61               	goto	u4985
  9911  1567  3001               	movlw	1
  9912  1568  02AB               	subwf	___awmod@counter,f
  9913  1569  1D03               	btfss	3,2
  9914  156A  2D52               	goto	l3974
  9915  156B                     l3982:	
  9916  156B  082C               	movf	___awmod@sign,w
  9917  156C  1903               	btfsc	3,2
  9918  156D  2D73               	goto	l3986
  9919  156E  09A9               	comf	___awmod@dividend,f
  9920  156F  09AA               	comf	___awmod@dividend+1,f
  9921  1570  0AA9               	incf	___awmod@dividend,f
  9922  1571  1903               	skipnz
  9923  1572  0AAA               	incf	___awmod@dividend+1,f
  9924  1573                     l3986:	
  9925  1573  082A               	movf	___awmod@dividend+1,w
  9926  1574  00A8               	movwf	?___awmod+1
  9927  1575  0829               	movf	___awmod@dividend,w
  9928  1576  00A7               	movwf	?___awmod
  9929  1577  0008               	return
  9930  1578                     __end_of___awmod:	
  9931                           
  9932                           	psect	text44
  9933  1498                     __ptext44:	
  9934 ;; *************** function _USARTInit *****************
  9935 ;; Defined at:
  9936 ;;		line 31 in file "usart_pic16.c"
  9937 ;; Parameters:    Size  Location     Type
  9938 ;;  baud_rate       2    0[COMMON] unsigned int 
  9939 ;; Auto vars:     Size  Location     Type
  9940 ;;		None
  9941 ;; Return value:  Size  Location     Type
  9942 ;;                  1    wreg      void 
  9943 ;; Registers used:
  9944 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9945 ;; Tracked objects:
  9946 ;;		On entry : 0/0
  9947 ;;		On exit  : 0/0
  9948 ;;		Unchanged: 0/0
  9949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9950 ;;      Params:         2       0       0       0       0
  9951 ;;      Locals:         0       0       0       0       0
  9952 ;;      Temps:          1       0       0       0       0
  9953 ;;      Totals:         3       0       0       0       0
  9954 ;;Total ram usage:        3 bytes
  9955 ;; Hardware stack levels used:    1
  9956 ;; This function calls:
  9957 ;;		Nothing
  9958 ;; This function is called by:
  9959 ;;		_main
  9960 ;; This function uses a non-reentrant model
  9961 ;;
  9962                           
  9963                           
  9964                           ;psect for function _USARTInit
  9965  1498                     _USARTInit:	
  9966                           
  9967                           ;usart_pic16.c: 33: UQFront = UQEnd = -1;
  9968                           
  9969                           ;incstack = 0
  9970                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  9971  1498  30FF               	movlw	255
  9972  1499  1283               	bcf	3,5	;RP0=0, select bank0
  9973  149A  1303               	bcf	3,6	;RP1=0, select bank0
  9974  149B  00EE               	movwf	_UQEnd	;volatile
  9975  149C  00F2               	movwf	??_USARTInit
  9976  149D  0872               	movf	??_USARTInit,w
  9977  149E  00EF               	movwf	_UQFront	;volatile
  9978                           
  9979                           ;usart_pic16.c: 36: switch (baud_rate) {
  9980  149F  2CAB               	goto	l4002
  9981  14A0                     l3992:	
  9982                           ;usart_pic16.c: 37: case 9600:
  9983                           
  9984                           
  9985                           ;usart_pic16.c: 38: SPBRG = 129;
  9986  14A0  3081               	movlw	129
  9987  14A1  2CA7               	goto	L34
  9988  14A2                     l3994:	
  9989                           ;usart_pic16.c: 40: case 19200:
  9990                           
  9991                           ;usart_pic16.c: 39: break;
  9992                           
  9993                           
  9994                           ;usart_pic16.c: 41: SPBRG = 64;
  9995  14A2  3040               	movlw	64
  9996  14A3  2CA7               	goto	L34
  9997  14A4                     l3996:	
  9998                           ;usart_pic16.c: 43: case 28800:
  9999                           
 10000                           ;usart_pic16.c: 42: break;
 10001                           
 10002                           
 10003                           ;usart_pic16.c: 44: SPBRG = 42;
 10004  14A4  302A               	movlw	42
 10005  14A5  2CA7               	goto	L34
 10006  14A6                     l3998:	
 10007                           ;usart_pic16.c: 46: case 33600:
 10008                           
 10009                           ;usart_pic16.c: 45: break;
 10010                           
 10011                           
 10012                           ;usart_pic16.c: 47: SPBRG = 36;
 10013  14A6  3024               	movlw	36
 10014  14A7                     L34:	
 10015  14A7  1683               	bsf	3,5	;RP0=1, select bank1
 10016  14A8  1303               	bcf	3,6	;RP1=0, select bank1
 10017  14A9  0099               	movwf	25	;volatile
 10018                           
 10019                           ;usart_pic16.c: 49: }
 10020                           
 10021                           ;usart_pic16.c: 48: break;
 10022  14AA  2CCD               	goto	l29
 10023  14AB                     l4002:	
 10024                           
 10025                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 10026                           ; Switch size 1, requested type "space"
 10027                           ; Number of cases is 4, Range of values is 37 to 131
 10028                           ; switch strategies available:
 10029                           ; Name         Instructions Cycles
 10030                           ; simple_byte           13     7 (average)
 10031                           ; jumptable            263     9 (fixed)
 10032                           ;	Chosen strategy is simple_byte
 10033  14AB  0871               	movf	USARTInit@baud_rate+1,w
 10034  14AC  3A25               	xorlw	37	; case 37
 10035  14AD  1903               	skipnz
 10036  14AE  2CB9               	goto	l4618
 10037  14AF  3A6E               	xorlw	110	; case 75
 10038  14B0  1903               	skipnz
 10039  14B1  2CBE               	goto	l4620
 10040  14B2  3A3B               	xorlw	59	; case 112
 10041  14B3  1903               	skipnz
 10042  14B4  2CC3               	goto	l4622
 10043  14B5  3AF3               	xorlw	243	; case 131
 10044  14B6  1903               	skipnz
 10045  14B7  2CC8               	goto	l4624
 10046  14B8  2CCD               	goto	l29
 10047  14B9                     l4618:	
 10048                           
 10049                           ; Switch size 1, requested type "space"
 10050                           ; Number of cases is 1, Range of values is 128 to 128
 10051                           ; switch strategies available:
 10052                           ; Name         Instructions Cycles
 10053                           ; simple_byte            4     3 (average)
 10054                           ; direct_byte           14    11 (fixed)
 10055                           ; jumptable            263     9 (fixed)
 10056                           ;	Chosen strategy is simple_byte
 10057  14B9  0870               	movf	USARTInit@baud_rate,w
 10058  14BA  3A80               	xorlw	128	; case 128
 10059  14BB  1903               	skipnz
 10060  14BC  2CA0               	goto	l3992
 10061  14BD  2CCD               	goto	l29
 10062  14BE                     l4620:	
 10063                           
 10064                           ; Switch size 1, requested type "space"
 10065                           ; Number of cases is 1, Range of values is 0 to 0
 10066                           ; switch strategies available:
 10067                           ; Name         Instructions Cycles
 10068                           ; simple_byte            4     3 (average)
 10069                           ; direct_byte           11     8 (fixed)
 10070                           ; jumptable            260     6 (fixed)
 10071                           ;	Chosen strategy is simple_byte
 10072  14BE  0870               	movf	USARTInit@baud_rate,w
 10073  14BF  3A00               	xorlw	0	; case 0
 10074  14C0  1903               	skipnz
 10075  14C1  2CA2               	goto	l3994
 10076  14C2  2CCD               	goto	l29
 10077  14C3                     l4622:	
 10078                           
 10079                           ; Switch size 1, requested type "space"
 10080                           ; Number of cases is 1, Range of values is 128 to 128
 10081                           ; switch strategies available:
 10082                           ; Name         Instructions Cycles
 10083                           ; simple_byte            4     3 (average)
 10084                           ; direct_byte           14    11 (fixed)
 10085                           ; jumptable            263     9 (fixed)
 10086                           ;	Chosen strategy is simple_byte
 10087  14C3  0870               	movf	USARTInit@baud_rate,w
 10088  14C4  3A80               	xorlw	128	; case 128
 10089  14C5  1903               	skipnz
 10090  14C6  2CA4               	goto	l3996
 10091  14C7  2CCD               	goto	l29
 10092  14C8                     l4624:	
 10093                           
 10094                           ; Switch size 1, requested type "space"
 10095                           ; Number of cases is 1, Range of values is 64 to 64
 10096                           ; switch strategies available:
 10097                           ; Name         Instructions Cycles
 10098                           ; simple_byte            4     3 (average)
 10099                           ; direct_byte           14    11 (fixed)
 10100                           ; jumptable            263     9 (fixed)
 10101                           ;	Chosen strategy is simple_byte
 10102  14C8  0870               	movf	USARTInit@baud_rate,w
 10103  14C9  3A40               	xorlw	64	; case 64
 10104  14CA  1903               	skipnz
 10105  14CB  2CA6               	goto	l3998
 10106  14CC  2CCD               	goto	l29
 10107  14CD                     l29:	
 10108                           
 10109                           ;usart_pic16.c: 52: TXSTAbits.TX9 = 0;
 10110  14CD  1683               	bsf	3,5	;RP0=1, select bank1
 10111  14CE  1303               	bcf	3,6	;RP1=0, select bank1
 10112  14CF  1318               	bcf	24,6	;volatile
 10113                           
 10114                           ;usart_pic16.c: 53: TXSTAbits.TXEN = 1;
 10115  14D0  1698               	bsf	24,5	;volatile
 10116                           
 10117                           ;usart_pic16.c: 54: TXSTAbits.SYNC = 0;
 10118  14D1  1218               	bcf	24,4	;volatile
 10119                           
 10120                           ;usart_pic16.c: 55: TXSTAbits.BRGH = 1;
 10121  14D2  1518               	bsf	24,2	;volatile
 10122                           
 10123                           ;usart_pic16.c: 58: RCSTAbits.SPEN = 1;
 10124  14D3  1283               	bcf	3,5	;RP0=0, select bank0
 10125  14D4  1303               	bcf	3,6	;RP1=0, select bank0
 10126  14D5  1798               	bsf	24,7	;volatile
 10127                           
 10128                           ;usart_pic16.c: 59: RCSTAbits.RX9 = 0;
 10129  14D6  1318               	bcf	24,6	;volatile
 10130                           
 10131                           ;usart_pic16.c: 60: RCSTAbits.CREN = 1;
 10132  14D7  1618               	bsf	24,4	;volatile
 10133                           
 10134                           ;usart_pic16.c: 61: RCSTAbits.ADDEN = 0;
 10135  14D8  1198               	bcf	24,3	;volatile
 10136                           
 10137                           ;usart_pic16.c: 64: RCIE = 1;
 10138  14D9  1683               	bsf	3,5	;RP0=1, select bank1
 10139  14DA  1303               	bcf	3,6	;RP1=0, select bank1
 10140  14DB  168C               	bsf	12,5	;volatile
 10141                           
 10142                           ;usart_pic16.c: 65: PEIE = 1;
 10143  14DC  170B               	bsf	11,6	;volatile
 10144                           
 10145                           ;usart_pic16.c: 67: (GIE = 1);
 10146  14DD  178B               	bsf	11,7	;volatile
 10147  14DE  0008               	return
 10148  14DF                     __end_of_USARTInit:	
 10149                           
 10150                           	psect	text45
 10151  108C                     __ptext45:	
 10152 ;; *************** function _Clear_Matrix *****************
 10153 ;; Defined at:
 10154 ;;		line 745 in file "teris_16f886.c"
 10155 ;; Parameters:    Size  Location     Type
 10156 ;;		None
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;		None
 10159 ;; Return value:  Size  Location     Type
 10160 ;;                  1    wreg      void 
 10161 ;; Registers used:
 10162 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10163 ;; Tracked objects:
 10164 ;;		On entry : 0/0
 10165 ;;		On exit  : 0/0
 10166 ;;		Unchanged: 0/0
 10167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10168 ;;      Params:         0       0       0       0       0
 10169 ;;      Locals:         0       0       0       0       0
 10170 ;;      Temps:          0       0       0       0       0
 10171 ;;      Totals:         0       0       0       0       0
 10172 ;;Total ram usage:        0 bytes
 10173 ;; Hardware stack levels used:    1
 10174 ;; Hardware stack levels required when called:    6
 10175 ;; This function calls:
 10176 ;;		_memset
 10177 ;;		_printf_Screen
 10178 ;; This function is called by:
 10179 ;;		_main
 10180 ;; This function uses a non-reentrant model
 10181 ;;
 10182                           
 10183                           
 10184                           ;psect for function _Clear_Matrix
 10185  108C                     _Clear_Matrix:	
 10186                           
 10187                           ;teris_16f886.c: 747: memset(&g_matrix16x8, 0, sizeof(MATRIX16x8));
 10188                           
 10189                           ;incstack = 0
 10190                           ; Regs used in _Clear_Matrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10191  108C  3000               	movlw	0
 10192  108D  00F0               	movwf	memset@c
 10193  108E  00F1               	movwf	memset@c+1
 10194  108F  3010               	movlw	16
 10195  1090  00F2               	movwf	memset@n
 10196  1091  3000               	movlw	0
 10197  1092  00F3               	movwf	memset@n+1
 10198  1093  30C1               	movlw	(low (_g_matrix16x8| 0))& (0+255)
 10199  1094  160A  118A  210F  160A  118A  	fcall	_memset
 10200                           
 10201                           ;teris_16f886.c: 748: printf_Screen();
 10202  1099  160A  118A  202C   	fcall	_printf_Screen
 10203  109C  0008               	return
 10204  109D                     __end_of_Clear_Matrix:	
 10205                           
 10206                           	psect	text46
 10207  102C                     __ptext46:	
 10208 ;; *************** function _printf_Screen *****************
 10209 ;; Defined at:
 10210 ;;		line 729 in file "teris_16f886.c"
 10211 ;; Parameters:    Size  Location     Type
 10212 ;;		None
 10213 ;; Auto vars:     Size  Location     Type
 10214 ;;		None
 10215 ;; Return value:  Size  Location     Type
 10216 ;;                  1    wreg      void 
 10217 ;; Registers used:
 10218 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10219 ;; Tracked objects:
 10220 ;;		On entry : 0/0
 10221 ;;		On exit  : 0/0
 10222 ;;		Unchanged: 0/0
 10223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10224 ;;      Params:         0       0       0       0       0
 10225 ;;      Locals:         0       0       0       0       0
 10226 ;;      Temps:          0       0       0       0       0
 10227 ;;      Totals:         0       0       0       0       0
 10228 ;;Total ram usage:        0 bytes
 10229 ;; Hardware stack levels used:    1
 10230 ;; Hardware stack levels required when called:    5
 10231 ;; This function calls:
 10232 ;;		_printf_MATRIX16x8
 10233 ;; This function is called by:
 10234 ;;		_Clear_Matrix
 10235 ;;		_main
 10236 ;; This function uses a non-reentrant model
 10237 ;;
 10238                           
 10239                           
 10240                           ;psect for function _printf_Screen
 10241  102C                     _printf_Screen:	
 10242                           
 10243                           ;teris_16f886.c: 731: printf_MATRIX16x8(&g_matrix16x8);
 10244                           
 10245                           ;incstack = 0
 10246                           ; Regs used in _printf_Screen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10247  102C  30C1               	movlw	(low (_g_matrix16x8| 0))& (0+255)
 10248  102D  160A  118A  20D0   	fcall	_printf_MATRIX16x8
 10249  1030  0008               	return
 10250  1031                     __end_of_printf_Screen:	
 10251                           
 10252                           	psect	text47
 10253  10D0                     __ptext47:	
 10254 ;; *************** function _printf_MATRIX16x8 *****************
 10255 ;; Defined at:
 10256 ;;		line 702 in file "teris_16f886.c"
 10257 ;; Parameters:    Size  Location     Type
 10258 ;;  matrix16x8      1    wreg     PTR const struct .
 10259 ;;		 -> g_matrix16x8(16), 
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;  matrix16x8      1    6[BANK0 ] PTR const struct .
 10262 ;;		 -> g_matrix16x8(16), 
 10263 ;;  matrix7219     16    7[BANK0 ] struct .
 10264 ;; Return value:  Size  Location     Type
 10265 ;;                  1    wreg      void 
 10266 ;; Registers used:
 10267 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10268 ;; Tracked objects:
 10269 ;;		On entry : 0/0
 10270 ;;		On exit  : 0/0
 10271 ;;		Unchanged: 0/0
 10272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10273 ;;      Params:         0       0       0       0       0
 10274 ;;      Locals:         0      17       0       0       0
 10275 ;;      Temps:          1       0       0       0       0
 10276 ;;      Totals:         1      17       0       0       0
 10277 ;;Total ram usage:       18 bytes
 10278 ;; Hardware stack levels used:    1
 10279 ;; Hardware stack levels required when called:    4
 10280 ;; This function calls:
 10281 ;;		_MATRIX16x8_to_MATRIX7219
 10282 ;;		_printf_MATRIX7219
 10283 ;; This function is called by:
 10284 ;;		_printf_Screen
 10285 ;; This function uses a non-reentrant model
 10286 ;;
 10287                           
 10288                           
 10289                           ;psect for function _printf_MATRIX16x8
 10290  10D0                     _printf_MATRIX16x8:	
 10291                           
 10292                           ;incstack = 0
 10293                           ; Regs used in _printf_MATRIX16x8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10294                           ;printf_MATRIX16x8@matrix16x8 stored from wreg
 10295  10D0  1283               	bcf	3,5	;RP0=0, select bank0
 10296  10D1  1303               	bcf	3,6	;RP1=0, select bank0
 10297  10D2  00A6               	movwf	printf_MATRIX16x8@matrix16x8
 10298                           
 10299                           ;teris_16f886.c: 724: MATRIX7219 matrix7219;
 10300                           ;teris_16f886.c: 725: MATRIX16x8_to_MATRIX7219(matrix16x8, &matrix7219);
 10301  10D3  3027               	movlw	(low (printf_MATRIX16x8@matrix7219| 0))& (0+255)
 10302  10D4  00FD               	movwf	??_printf_MATRIX16x8
 10303  10D5  087D               	movf	??_printf_MATRIX16x8,w
 10304  10D6  00FC               	movwf	MATRIX16x8_to_MATRIX7219@matrix7219
 10305  10D7  0826               	movf	printf_MATRIX16x8@matrix16x8,w
 10306  10D8  120A  158A  22F7  160A  118A  	fcall	_MATRIX16x8_to_MATRIX7219
 10307                           
 10308                           ;teris_16f886.c: 726: printf_MATRIX7219(&matrix7219);
 10309  10DD  3027               	movlw	(low (printf_MATRIX16x8@matrix7219| 0))& (0+255)
 10310  10DE  160A  118A  2289   	fcall	_printf_MATRIX7219
 10311  10E1  0008               	return
 10312  10E2                     __end_of_printf_MATRIX16x8:	
 10313                           
 10314                           	psect	text48
 10315  1289                     __ptext48:	
 10316 ;; *************** function _printf_MATRIX7219 *****************
 10317 ;; Defined at:
 10318 ;;		line 689 in file "teris_16f886.c"
 10319 ;; Parameters:    Size  Location     Type
 10320 ;;  matrix          1    wreg     PTR const struct .
 10321 ;;		 -> printf_MATRIX16x8@matrix7219(16), 
 10322 ;; Auto vars:     Size  Location     Type
 10323 ;;  matrix          1    0[BANK0 ] PTR const struct .
 10324 ;;		 -> printf_MATRIX16x8@matrix7219(16), 
 10325 ;;  col             1    1[BANK0 ] unsigned char 
 10326 ;; Return value:  Size  Location     Type
 10327 ;;                  1    wreg      void 
 10328 ;; Registers used:
 10329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10330 ;; Tracked objects:
 10331 ;;		On entry : 0/0
 10332 ;;		On exit  : 0/0
 10333 ;;		Unchanged: 0/0
 10334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10335 ;;      Params:         0       0       0       0       0
 10336 ;;      Locals:         0       2       0       0       0
 10337 ;;      Temps:          5       0       0       0       0
 10338 ;;      Totals:         5       2       0       0       0
 10339 ;;Total ram usage:        7 bytes
 10340 ;; Hardware stack levels used:    1
 10341 ;; Hardware stack levels required when called:    2
 10342 ;; This function calls:
 10343 ;;		_Write_Word
 10344 ;; This function is called by:
 10345 ;;		_printf_MATRIX16x8
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349                           
 10350                           ;psect for function _printf_MATRIX7219
 10351  1289                     _printf_MATRIX7219:	
 10352                           
 10353                           ;incstack = 0
 10354                           ; Regs used in _printf_MATRIX7219: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10355                           ;printf_MATRIX7219@matrix stored from wreg
 10356  1289  1283               	bcf	3,5	;RP0=0, select bank0
 10357  128A  1303               	bcf	3,6	;RP1=0, select bank0
 10358  128B  00A0               	movwf	printf_MATRIX7219@matrix
 10359                           
 10360                           ;teris_16f886.c: 691: uint8_t col;
 10361                           ;teris_16f886.c: 693: for (col = 0; col < 8; col++)
 10362  128C  01A1               	clrf	printf_MATRIX7219@col
 10363  128D                     L35:	
 10364  128D  3008               	movlw	8
 10365  128E  0221               	subwf	printf_MATRIX7219@col,w
 10366  128F  1803               	btfsc	3,0
 10367  1290  0008               	return
 10368                           
 10369                           ;teris_16f886.c: 694: {
 10370                           ;teris_16f886.c: 695: Write_Word(col + 1, matrix->col1[col], col + 1, matrix->col2[col])
      +                          ;
 10371  1291  0821               	movf	printf_MATRIX7219@col,w
 10372  1292  0720               	addwf	printf_MATRIX7219@matrix,w
 10373  1293  00F8               	movwf	??_printf_MATRIX7219
 10374  1294  0878               	movf	??_printf_MATRIX7219,w
 10375  1295  0084               	movwf	4
 10376  1296  1383               	bcf	3,7	;select IRP bank0
 10377  1297  0800               	movf	0,w
 10378  1298  00F9               	movwf	??_printf_MATRIX7219+1
 10379  1299  0879               	movf	??_printf_MATRIX7219+1,w
 10380  129A  00F4               	movwf	Write_Word@myValue1
 10381  129B  0821               	movf	printf_MATRIX7219@col,w
 10382  129C  3E01               	addlw	1
 10383  129D  00FA               	movwf	??_printf_MATRIX7219+2
 10384  129E  087A               	movf	??_printf_MATRIX7219+2,w
 10385  129F  00F5               	movwf	Write_Word@myColumn2
 10386  12A0  0821               	movf	printf_MATRIX7219@col,w
 10387  12A1  3E08               	addlw	8
 10388  12A2  0720               	addwf	printf_MATRIX7219@matrix,w
 10389  12A3  00FB               	movwf	??_printf_MATRIX7219+3
 10390  12A4  087B               	movf	??_printf_MATRIX7219+3,w
 10391  12A5  0084               	movwf	4
 10392  12A6  0800               	movf	0,w
 10393  12A7  00FC               	movwf	??_printf_MATRIX7219+4
 10394  12A8  087C               	movf	??_printf_MATRIX7219+4,w
 10395  12A9  00F6               	movwf	Write_Word@myValue2
 10396  12AA  0821               	movf	printf_MATRIX7219@col,w
 10397  12AB  3E01               	addlw	1
 10398  12AC  160A  118A  2147  160A  118A  	fcall	_Write_Word
 10399  12B1  3001               	movlw	1
 10400  12B2  00F8               	movwf	??_printf_MATRIX7219
 10401  12B3  0878               	movf	??_printf_MATRIX7219,w
 10402  12B4  1283               	bcf	3,5	;RP0=0, select bank0
 10403  12B5  1303               	bcf	3,6	;RP1=0, select bank0
 10404  12B6  07A1               	addwf	printf_MATRIX7219@col,f
 10405  12B7  2A8D               	goto	L35
 10406  12B8                     __end_of_printf_MATRIX7219:	
 10407                           
 10408                           	psect	text49
 10409  1147                     __ptext49:	
 10410 ;; *************** function _Write_Word *****************
 10411 ;; Defined at:
 10412 ;;		line 563 in file "teris_16f886.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;  myColumn1       1    wreg     unsigned char 
 10415 ;;  myValue1        1    4[COMMON] unsigned char 
 10416 ;;  myColumn2       1    5[COMMON] unsigned char 
 10417 ;;  myValue2        1    6[COMMON] unsigned char 
 10418 ;; Auto vars:     Size  Location     Type
 10419 ;;  myColumn1       1    7[COMMON] unsigned char 
 10420 ;; Return value:  Size  Location     Type
 10421 ;;                  1    wreg      void 
 10422 ;; Registers used:
 10423 ;;		wreg, status,2, status,0, pclath, cstack
 10424 ;; Tracked objects:
 10425 ;;		On entry : 0/0
 10426 ;;		On exit  : 0/0
 10427 ;;		Unchanged: 0/0
 10428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10429 ;;      Params:         3       0       0       0       0
 10430 ;;      Locals:         1       0       0       0       0
 10431 ;;      Temps:          0       0       0       0       0
 10432 ;;      Totals:         4       0       0       0       0
 10433 ;;Total ram usage:        4 bytes
 10434 ;; Hardware stack levels used:    1
 10435 ;; Hardware stack levels required when called:    1
 10436 ;; This function calls:
 10437 ;;		_SPI1_write
 10438 ;; This function is called by:
 10439 ;;		_max7219_init1
 10440 ;;		_printf_MATRIX7219
 10441 ;; This function uses a non-reentrant model
 10442 ;;
 10443                           
 10444                           
 10445                           ;psect for function _Write_Word
 10446  1147                     _Write_Word:	
 10447                           
 10448                           ;incstack = 0
 10449                           ; Regs used in _Write_Word: [wreg+status,2+status,0+pclath+cstack]
 10450                           ;Write_Word@myColumn1 stored from wreg
 10451  1147  00F7               	movwf	Write_Word@myColumn1
 10452                           
 10453                           ;teris_16f886.c: 565: RA2 = 0;
 10454  1148  1283               	bcf	3,5	;RP0=0, select bank0
 10455  1149  1303               	bcf	3,6	;RP1=0, select bank0
 10456  114A  1105               	bcf	5,2	;volatile
 10457                           
 10458                           ;teris_16f886.c: 566: SPI1_write(myColumn1);
 10459  114B  0877               	movf	Write_Word@myColumn1,w
 10460  114C  160A  118A  225F  160A  118A  	fcall	_SPI1_write
 10461                           
 10462                           ;teris_16f886.c: 567: SPI1_write(myValue1);
 10463  1151  0874               	movf	Write_Word@myValue1,w
 10464  1152  160A  118A  225F  160A  118A  	fcall	_SPI1_write
 10465                           
 10466                           ;teris_16f886.c: 568: SPI1_write(myColumn2);
 10467  1157  0875               	movf	Write_Word@myColumn2,w
 10468  1158  160A  118A  225F  160A  118A  	fcall	_SPI1_write
 10469                           
 10470                           ;teris_16f886.c: 569: SPI1_write(myValue2);
 10471  115D  0876               	movf	Write_Word@myValue2,w
 10472  115E  160A  118A  225F   	fcall	_SPI1_write
 10473                           
 10474                           ;teris_16f886.c: 570: RA2 = 1;
 10475  1161  1283               	bcf	3,5	;RP0=0, select bank0
 10476  1162  1303               	bcf	3,6	;RP1=0, select bank0
 10477  1163  1505               	bsf	5,2	;volatile
 10478  1164  0008               	return
 10479  1165                     __end_of_Write_Word:	
 10480                           
 10481                           	psect	text50
 10482  125F                     __ptext50:	
 10483 ;; *************** function _SPI1_write *****************
 10484 ;; Defined at:
 10485 ;;		line 538 in file "teris_16f886.c"
 10486 ;; Parameters:    Size  Location     Type
 10487 ;;  data            1    wreg     unsigned char 
 10488 ;; Auto vars:     Size  Location     Type
 10489 ;;  data            1    1[COMMON] unsigned char 
 10490 ;;  i               1    3[COMMON] unsigned char 
 10491 ;;  mask            1    2[COMMON] unsigned char 
 10492 ;; Return value:  Size  Location     Type
 10493 ;;                  1    wreg      void 
 10494 ;; Registers used:
 10495 ;;		wreg, status,2, status,0
 10496 ;; Tracked objects:
 10497 ;;		On entry : 0/0
 10498 ;;		On exit  : 0/0
 10499 ;;		Unchanged: 0/0
 10500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10501 ;;      Params:         0       0       0       0       0
 10502 ;;      Locals:         3       0       0       0       0
 10503 ;;      Temps:          1       0       0       0       0
 10504 ;;      Totals:         4       0       0       0       0
 10505 ;;Total ram usage:        4 bytes
 10506 ;; Hardware stack levels used:    1
 10507 ;; This function calls:
 10508 ;;		Nothing
 10509 ;; This function is called by:
 10510 ;;		_Write_Word
 10511 ;; This function uses a non-reentrant model
 10512 ;;
 10513                           
 10514                           
 10515                           ;psect for function _SPI1_write
 10516  125F                     _SPI1_write:	
 10517                           
 10518                           ;incstack = 0
 10519                           ; Regs used in _SPI1_write: [wreg+status,2+status,0]
 10520                           ;SPI1_write@data stored from wreg
 10521  125F  00F1               	movwf	SPI1_write@data
 10522                           
 10523                           ;teris_16f886.c: 540: uint8_t mask = 0b10000000;
 10524  1260  3080               	movlw	128
 10525  1261  00F0               	movwf	??_SPI1_write
 10526  1262  0870               	movf	??_SPI1_write,w
 10527  1263  00F2               	movwf	SPI1_write@mask
 10528                           
 10529                           ;teris_16f886.c: 541: for(uint8_t i = 0; i < 8; i++)
 10530  1264  01F3               	clrf	SPI1_write@i
 10531  1265                     L36:	
 10532  1265  3008               	movlw	8
 10533  1266  0273               	subwf	SPI1_write@i,w
 10534  1267  1803               	btfsc	3,0
 10535  1268  0008               	return
 10536                           
 10537                           ;teris_16f886.c: 542: {
 10538                           ;teris_16f886.c: 543: if((data & mask) > 0)
 10539  1269  0871               	movf	SPI1_write@data,w
 10540  126A  0572               	andwf	SPI1_write@mask,w
 10541  126B  1903               	btfsc	3,2
 10542  126C  2A71               	goto	l235
 10543                           
 10544                           ;teris_16f886.c: 544: {
 10545                           ;teris_16f886.c: 545: RA3 = 1;
 10546  126D  1283               	bcf	3,5	;RP0=0, select bank0
 10547  126E  1303               	bcf	3,6	;RP1=0, select bank0
 10548  126F  1585               	bsf	5,3	;volatile
 10549                           
 10550                           ;teris_16f886.c: 547: }
 10551  1270  2A74               	goto	l2920
 10552  1271                     l235:	
 10553                           
 10554                           ;teris_16f886.c: 548: else
 10555                           ;teris_16f886.c: 549: {
 10556                           ;teris_16f886.c: 550: RA3 = 0;
 10557  1271  1283               	bcf	3,5	;RP0=0, select bank0
 10558  1272  1303               	bcf	3,6	;RP1=0, select bank0
 10559  1273  1185               	bcf	5,3	;volatile
 10560  1274                     l2920:	
 10561                           
 10562                           ;teris_16f886.c: 552: }
 10563                           ;teris_16f886.c: 553: mask >>= 1;
 10564  1274  1003               	clrc
 10565  1275  0CF2               	rrf	SPI1_write@mask,f
 10566                           
 10567                           ;teris_16f886.c: 554: RA1 = 1;
 10568  1276  1485               	bsf	5,1	;volatile
 10569                           
 10570                           ;teris_16f886.c: 555: _delay((unsigned long)((10)*(20000000/4000000.0)));
 10571  1277  3010               	movlw	16
 10572  1278  00F0               	movwf	??_SPI1_write
 10573  1279                     u5937:	
 10574  1279  0BF0               	decfsz	??_SPI1_write,f
 10575  127A  2A79               	goto	u5937
 10576  127B  0000               	nop
 10577                           
 10578                           ;teris_16f886.c: 556: RA1 = 0;
 10579  127C  1283               	bcf	3,5	;RP0=0, select bank0
 10580  127D  1303               	bcf	3,6	;RP1=0, select bank0
 10581  127E  1085               	bcf	5,1	;volatile
 10582                           
 10583                           ;teris_16f886.c: 557: _delay((unsigned long)((10)*(20000000/4000000.0)));
 10584  127F  3010               	movlw	16
 10585  1280  00F0               	movwf	??_SPI1_write
 10586  1281                     u5947:	
 10587  1281  0BF0               	decfsz	??_SPI1_write,f
 10588  1282  2A81               	goto	u5947
 10589  1283  0000               	nop
 10590  1284  3001               	movlw	1
 10591  1285  00F0               	movwf	??_SPI1_write
 10592  1286  0870               	movf	??_SPI1_write,w
 10593  1287  07F3               	addwf	SPI1_write@i,f
 10594  1288  2A65               	goto	L36
 10595  1289                     __end_of_SPI1_write:	
 10596                           
 10597                           	psect	text51
 10598  0AF7                     __ptext51:	
 10599 ;; *************** function _MATRIX16x8_to_MATRIX7219 *****************
 10600 ;; Defined at:
 10601 ;;		line 583 in file "teris_16f886.c"
 10602 ;; Parameters:    Size  Location     Type
 10603 ;;  matrix16x8      1    wreg     PTR const struct .
 10604 ;;		 -> g_matrix16x8(16), 
 10605 ;;  matrix7219      1   12[COMMON] PTR struct .
 10606 ;;		 -> printf_MATRIX16x8@matrix7219(16), 
 10607 ;; Auto vars:     Size  Location     Type
 10608 ;;  matrix16x8      1    2[BANK0 ] PTR const struct .
 10609 ;;		 -> g_matrix16x8(16), 
 10610 ;;  col             1    5[BANK0 ] unsigned char 
 10611 ;;  row             1    4[BANK0 ] unsigned char 
 10612 ;;  mask            1    3[BANK0 ] unsigned char 
 10613 ;; Return value:  Size  Location     Type
 10614 ;;                  1    wreg      void 
 10615 ;; Registers used:
 10616 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10617 ;; Tracked objects:
 10618 ;;		On entry : 0/0
 10619 ;;		On exit  : 0/0
 10620 ;;		Unchanged: 0/0
 10621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10622 ;;      Params:         1       0       0       0       0
 10623 ;;      Locals:         0       4       0       0       0
 10624 ;;      Temps:          0       2       0       0       0
 10625 ;;      Totals:         1       6       0       0       0
 10626 ;;Total ram usage:        7 bytes
 10627 ;; Hardware stack levels used:    1
 10628 ;; Hardware stack levels required when called:    3
 10629 ;; This function calls:
 10630 ;;		_get_matrix_bit
 10631 ;; This function is called by:
 10632 ;;		_printf_MATRIX16x8
 10633 ;; This function uses a non-reentrant model
 10634 ;;
 10635                           
 10636                           
 10637                           ;psect for function _MATRIX16x8_to_MATRIX7219
 10638  0AF7                     _MATRIX16x8_to_MATRIX7219:	
 10639                           
 10640                           ;incstack = 0
 10641                           ; Regs used in _MATRIX16x8_to_MATRIX7219: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
 10642                           ;MATRIX16x8_to_MATRIX7219@matrix16x8 stored from wreg
 10643  0AF7  1283               	bcf	3,5	;RP0=0, select bank0
 10644  0AF8  1303               	bcf	3,6	;RP1=0, select bank0
 10645  0AF9  00A2               	movwf	MATRIX16x8_to_MATRIX7219@matrix16x8
 10646                           
 10647                           ;teris_16f886.c: 585: uint8_t mask = 0x80;
 10648  0AFA  3080               	movlw	128
 10649  0AFB  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
 10650  0AFC  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
 10651  0AFD  00A3               	movwf	MATRIX16x8_to_MATRIX7219@mask
 10652                           
 10653                           ;teris_16f886.c: 586: uint8_t row;
 10654                           ;teris_16f886.c: 588: for(uint8_t col = 0; col < 8; col++)
 10655  0AFE  01A5               	clrf	MATRIX16x8_to_MATRIX7219@col
 10656  0AFF                     L37:	
 10657  0AFF  3008               	movlw	8
 10658  0B00  0225               	subwf	MATRIX16x8_to_MATRIX7219@col,w
 10659  0B01  1803               	btfsc	3,0
 10660  0B02  0008               	return
 10661                           
 10662                           ;teris_16f886.c: 589: {
 10663                           ;teris_16f886.c: 590: mask = 0x80;
 10664  0B03  3080               	movlw	128
 10665  0B04  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
 10666  0B05  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
 10667  0B06  00A3               	movwf	MATRIX16x8_to_MATRIX7219@mask
 10668                           
 10669                           ;teris_16f886.c: 591: matrix7219->col1[col] = 0;
 10670  0B07  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
 10671  0B08  077C               	addwf	MATRIX16x8_to_MATRIX7219@matrix7219,w
 10672  0B09  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
 10673  0B0A  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
 10674  0B0B  0084               	movwf	4
 10675  0B0C  1383               	bcf	3,7	;select IRP bank0
 10676  0B0D  0180               	clrf	0
 10677                           
 10678                           ;teris_16f886.c: 592: for(row = 0; row < 8; row++)
 10679  0B0E  01A4               	clrf	MATRIX16x8_to_MATRIX7219@row
 10680  0B0F  3008               	movlw	8
 10681  0B10  0224               	subwf	MATRIX16x8_to_MATRIX7219@row,w
 10682  0B11  1803               	btfsc	3,0
 10683  0B12  2B3F               	goto	l3412
 10684  0B13                     l3402:	
 10685                           
 10686                           ;teris_16f886.c: 593: {
 10687                           ;teris_16f886.c: 594: if(get_matrix_bit(matrix16x8->row, row, col) == 1)
 10688  0B13  0822               	movf	MATRIX16x8_to_MATRIX7219@matrix16x8,w
 10689  0B14  00F7               	movwf	get_matrix_bit@byte
 10690  0B15  3000               	movlw	0
 10691  0B16  00F8               	movwf	get_matrix_bit@byte+1
 10692  0B17  0824               	movf	MATRIX16x8_to_MATRIX7219@row,w
 10693  0B18  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
 10694  0B19  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
 10695  0B1A  00F9               	movwf	get_matrix_bit@row
 10696  0B1B  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
 10697  0B1C  00A1               	movwf	??_MATRIX16x8_to_MATRIX7219+1
 10698  0B1D  0821               	movf	??_MATRIX16x8_to_MATRIX7219+1,w
 10699  0B1E  00FA               	movwf	get_matrix_bit@col
 10700  0B1F  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
 10701  0B24  3A01               	xorlw	1
 10702  0B25  1D03               	skipz
 10703  0B26  2B33               	goto	l3406
 10704                           
 10705                           ;teris_16f886.c: 595: {
 10706                           ;teris_16f886.c: 596: matrix7219->col1[col] |= mask;
 10707  0B27  1283               	bcf	3,5	;RP0=0, select bank0
 10708  0B28  1303               	bcf	3,6	;RP1=0, select bank0
 10709  0B29  0823               	movf	MATRIX16x8_to_MATRIX7219@mask,w
 10710  0B2A  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
 10711  0B2B  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
 10712  0B2C  077C               	addwf	MATRIX16x8_to_MATRIX7219@matrix7219,w
 10713  0B2D  00A1               	movwf	??_MATRIX16x8_to_MATRIX7219+1
 10714  0B2E  0821               	movf	??_MATRIX16x8_to_MATRIX7219+1,w
 10715  0B2F  0084               	movwf	4
 10716  0B30  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
 10717  0B31  1383               	bcf	3,7	;select IRP bank0
 10718  0B32  0480               	iorwf	0,f
 10719  0B33                     l3406:	
 10720                           
 10721                           ;teris_16f886.c: 597: }
 10722                           ;teris_16f886.c: 598: mask >>= 1;
 10723  0B33  1003               	clrc
 10724  0B34  1283               	bcf	3,5	;RP0=0, select bank0
 10725  0B35  1303               	bcf	3,6	;RP1=0, select bank0
 10726  0B36  0CA3               	rrf	MATRIX16x8_to_MATRIX7219@mask,f
 10727  0B37  3001               	movlw	1
 10728  0B38  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
 10729  0B39  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
 10730  0B3A  07A4               	addwf	MATRIX16x8_to_MATRIX7219@row,f
 10731  0B3B  3008               	movlw	8
 10732  0B3C  0224               	subwf	MATRIX16x8_to_MATRIX7219@row,w
 10733  0B3D  1C03               	skipc
 10734  0B3E  2B13               	goto	l3402
 10735  0B3F                     l3412:	
 10736                           
 10737                           ;teris_16f886.c: 599: }
 10738                           ;teris_16f886.c: 600: mask = 0x80;
 10739  0B3F  3080               	movlw	128
 10740  0B40  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
 10741  0B41  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
 10742  0B42  00A3               	movwf	MATRIX16x8_to_MATRIX7219@mask
 10743                           
 10744                           ;teris_16f886.c: 601: matrix7219->col2[col] = 0;
 10745  0B43  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
 10746  0B44  3E08               	addlw	8
 10747  0B45  077C               	addwf	MATRIX16x8_to_MATRIX7219@matrix7219,w
 10748  0B46  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
 10749  0B47  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
 10750  0B48  0084               	movwf	4
 10751  0B49  1383               	bcf	3,7	;select IRP bank0
 10752  0B4A  0180               	clrf	0
 10753                           
 10754                           ;teris_16f886.c: 602: for(row = 8; row < 16; row++)
 10755  0B4B  3008               	movlw	8
 10756  0B4C  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
 10757  0B4D  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
 10758  0B4E  00A4               	movwf	MATRIX16x8_to_MATRIX7219@row
 10759  0B4F  3010               	movlw	16
 10760  0B50  0224               	subwf	MATRIX16x8_to_MATRIX7219@row,w
 10761  0B51  1803               	btfsc	3,0
 10762  0B52  2B80               	goto	l3432
 10763  0B53                     l3422:	
 10764                           
 10765                           ;teris_16f886.c: 603: {
 10766                           ;teris_16f886.c: 604: if(get_matrix_bit(matrix16x8->row, row, col) == 1)
 10767  0B53  0822               	movf	MATRIX16x8_to_MATRIX7219@matrix16x8,w
 10768  0B54  00F7               	movwf	get_matrix_bit@byte
 10769  0B55  3000               	movlw	0
 10770  0B56  00F8               	movwf	get_matrix_bit@byte+1
 10771  0B57  0824               	movf	MATRIX16x8_to_MATRIX7219@row,w
 10772  0B58  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
 10773  0B59  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
 10774  0B5A  00F9               	movwf	get_matrix_bit@row
 10775  0B5B  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
 10776  0B5C  00A1               	movwf	??_MATRIX16x8_to_MATRIX7219+1
 10777  0B5D  0821               	movf	??_MATRIX16x8_to_MATRIX7219+1,w
 10778  0B5E  00FA               	movwf	get_matrix_bit@col
 10779  0B5F  160A  118A  206E  120A  158A  	fcall	_get_matrix_bit
 10780  0B64  3A01               	xorlw	1
 10781  0B65  1D03               	skipz
 10782  0B66  2B74               	goto	l3426
 10783                           
 10784                           ;teris_16f886.c: 605: {
 10785                           ;teris_16f886.c: 606: matrix7219->col2[col] |= mask;
 10786  0B67  1283               	bcf	3,5	;RP0=0, select bank0
 10787  0B68  1303               	bcf	3,6	;RP1=0, select bank0
 10788  0B69  0823               	movf	MATRIX16x8_to_MATRIX7219@mask,w
 10789  0B6A  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
 10790  0B6B  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
 10791  0B6C  3E08               	addlw	8
 10792  0B6D  077C               	addwf	MATRIX16x8_to_MATRIX7219@matrix7219,w
 10793  0B6E  00A1               	movwf	??_MATRIX16x8_to_MATRIX7219+1
 10794  0B6F  0821               	movf	??_MATRIX16x8_to_MATRIX7219+1,w
 10795  0B70  0084               	movwf	4
 10796  0B71  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
 10797  0B72  1383               	bcf	3,7	;select IRP bank0
 10798  0B73  0480               	iorwf	0,f
 10799  0B74                     l3426:	
 10800                           
 10801                           ;teris_16f886.c: 607: }
 10802                           ;teris_16f886.c: 608: mask >>= 1;
 10803  0B74  1003               	clrc
 10804  0B75  1283               	bcf	3,5	;RP0=0, select bank0
 10805  0B76  1303               	bcf	3,6	;RP1=0, select bank0
 10806  0B77  0CA3               	rrf	MATRIX16x8_to_MATRIX7219@mask,f
 10807  0B78  3001               	movlw	1
 10808  0B79  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
 10809  0B7A  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
 10810  0B7B  07A4               	addwf	MATRIX16x8_to_MATRIX7219@row,f
 10811  0B7C  3010               	movlw	16
 10812  0B7D  0224               	subwf	MATRIX16x8_to_MATRIX7219@row,w
 10813  0B7E  1C03               	skipc
 10814  0B7F  2B53               	goto	l3422
 10815  0B80                     l3432:	
 10816  0B80  3001               	movlw	1
 10817  0B81  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
 10818  0B82  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
 10819  0B83  07A5               	addwf	MATRIX16x8_to_MATRIX7219@col,f
 10820  0B84  2AFF               	goto	L37
 10821  0B85                     __end_of_MATRIX16x8_to_MATRIX7219:	
 10822                           
 10823                           	psect	text52
 10824  106E                     __ptext52:	
 10825 ;; *************** function _get_matrix_bit *****************
 10826 ;; Defined at:
 10827 ;;		line 467 in file "teris_16f886.c"
 10828 ;; Parameters:    Size  Location     Type
 10829 ;;  byte            2    7[COMMON] PTR const unsigned char 
 10830 ;;		 -> temp_matrix16x8.row(16), NULL(0), temp_matrix16x8(16), g_matrix4x4.row(4), 
 10831 ;;		 -> g_matrix4x4(96), g_matrix16x8(16), 
 10832 ;;  row             1    9[COMMON] unsigned char 
 10833 ;;  col             1   10[COMMON] unsigned char 
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;		None
 10836 ;; Return value:  Size  Location     Type
 10837 ;;                  1    wreg      unsigned char 
 10838 ;; Registers used:
 10839 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10840 ;; Tracked objects:
 10841 ;;		On entry : 0/0
 10842 ;;		On exit  : 0/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10845 ;;      Params:         4       0       0       0       0
 10846 ;;      Locals:         0       0       0       0       0
 10847 ;;      Temps:          1       0       0       0       0
 10848 ;;      Totals:         5       0       0       0       0
 10849 ;;Total ram usage:        5 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; Hardware stack levels required when called:    2
 10852 ;; This function calls:
 10853 ;;		_getbit
 10854 ;; This function is called by:
 10855 ;;		_printf_debug_MATRIX4x4
 10856 ;;		_MATRIX16x8_to_MATRIX7219
 10857 ;;		_printf_debug_MATRIX16x8
 10858 ;;		_hit_land
 10859 ;;		_is_valid
 10860 ;;		_is_left_boundary
 10861 ;;		_is_right_boundary
 10862 ;;		_fall_off
 10863 ;;		_clear
 10864 ;;		_merge
 10865 ;;		_merge1
 10866 ;;		_get_num_of_orphan
 10867 ;;		_get_heavy
 10868 ;;		_get_high_after_merge
 10869 ;;		_get_holes_after_merge
 10870 ;; This function uses a non-reentrant model
 10871 ;;
 10872                           
 10873                           
 10874                           ;psect for function _get_matrix_bit
 10875  106E                     _get_matrix_bit:	
 10876                           
 10877                           ;teris_16f886.c: 473: return getbit(&byte[row], col);
 10878                           
 10879                           ;incstack = 0
 10880                           ; Regs used in _get_matrix_bit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10881  106E  0879               	movf	get_matrix_bit@row,w
 10882  106F  0777               	addwf	get_matrix_bit@byte,w
 10883  1070  00F0               	movwf	getbit@byte
 10884  1071  0878               	movf	get_matrix_bit@byte+1,w
 10885  1072  1803               	skipnc
 10886  1073  3E01               	addlw	1
 10887  1074  00F1               	movwf	getbit@byte+1
 10888  1075  087A               	movf	get_matrix_bit@col,w
 10889  1076  00FB               	movwf	??_get_matrix_bit
 10890  1077  087B               	movf	??_get_matrix_bit,w
 10891  1078  00F2               	movwf	getbit@at
 10892  1079  120A  158A  2415   	fcall	_getbit
 10893  107C  0008               	return
 10894  107D                     __end_of_get_matrix_bit:	
 10895                           
 10896                           	psect	text53
 10897  0C15                     __ptext53:	
 10898 ;; *************** function _getbit *****************
 10899 ;; Defined at:
 10900 ;;		line 432 in file "teris_16f886.c"
 10901 ;; Parameters:    Size  Location     Type
 10902 ;;  byte            2    0[COMMON] PTR const unsigned char 
 10903 ;;		 -> temp_matrix16x8.row(16), NULL(0), temp_matrix16x8(16), g_matrix4x4.row(4), 
 10904 ;;		 -> g_matrix4x4(96), g_matrix16x8(16), 
 10905 ;;  at              1    2[COMMON] unsigned char 
 10906 ;; Auto vars:     Size  Location     Type
 10907 ;;  temp            2    5[COMMON] PTR struct .
 10908 ;;		 -> temp_matrix16x8.row(16), NULL(0), temp_matrix16x8(16), g_matrix4x4.row(4), 
 10909 ;;		 -> g_matrix4x4(96), g_matrix16x8(16), 
 10910 ;; Return value:  Size  Location     Type
 10911 ;;                  1    wreg      unsigned char 
 10912 ;; Registers used:
 10913 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
 10914 ;; Tracked objects:
 10915 ;;		On entry : 0/0
 10916 ;;		On exit  : 0/0
 10917 ;;		Unchanged: 0/0
 10918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10919 ;;      Params:         3       0       0       0       0
 10920 ;;      Locals:         2       0       0       0       0
 10921 ;;      Temps:          2       0       0       0       0
 10922 ;;      Totals:         7       0       0       0       0
 10923 ;;Total ram usage:        7 bytes
 10924 ;; Hardware stack levels used:    2
 10925 ;; This function calls:
 10926 ;;		Nothing
 10927 ;; This function is called by:
 10928 ;;		_get_matrix_bit
 10929 ;; This function uses a non-reentrant model
 10930 ;;
 10931                           
 10932                           
 10933                           ;psect for function _getbit
 10934  0C15                     _getbit:	
 10935                           
 10936                           ;teris_16f886.c: 434: t_byte *temp = (t_byte *)byte;
 10937                           
 10938                           ;incstack = 0
 10939                           ; Regs used in _getbit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
 10940  0C15  0870               	movf	getbit@byte,w
 10941  0C16  00F5               	movwf	getbit@temp
 10942  0C17  0871               	movf	getbit@byte+1,w
 10943  0C18  00F6               	movwf	getbit@temp+1
 10944                           
 10945                           ;teris_16f886.c: 435: switch(at)
 10946  0C19  2C8D               	goto	l2906
 10947  0C1A                     l2856:	
 10948                           ;teris_16f886.c: 436: {
 10949                           ;teris_16f886.c: 437: case 0:
 10950                           
 10951                           
 10952                           ;teris_16f886.c: 438: return (uint8_t)temp->b0;
 10953  0C1A  0876               	movf	getbit@temp+1,w
 10954  0C1B  1283               	bcf	3,5	;RP0=0, select bank0
 10955  0C1C  1303               	bcf	3,6	;RP1=0, select bank0
 10956  0C1D  00FF               	movwf	127
 10957  0C1E  0875               	movf	getbit@temp,w
 10958  0C1F  0084               	movwf	4
 10959  0C20  120A  158A  2000   	fcall	stringtab
 10960  0C23  00F3               	movwf	??_getbit
 10961  0C24  0873               	movf	??_getbit,w
 10962  0C25  3901               	andlw	1
 10963                           
 10964                           ;teris_16f886.c: 439: break;
 10965  0C26  0008               	return
 10966  0C27                     l2862:	
 10967                           ;teris_16f886.c: 440: case 1:
 10968                           
 10969                           
 10970                           ;teris_16f886.c: 441: return (uint8_t)temp->b1;
 10971  0C27  0876               	movf	getbit@temp+1,w
 10972  0C28  1283               	bcf	3,5	;RP0=0, select bank0
 10973  0C29  1303               	bcf	3,6	;RP1=0, select bank0
 10974  0C2A  00FF               	movwf	127
 10975  0C2B  0875               	movf	getbit@temp,w
 10976  0C2C  0084               	movwf	4
 10977  0C2D  120A  158A  2000   	fcall	stringtab
 10978  0C30  00F3               	movwf	??_getbit
 10979  0C31  0C73               	rrf	??_getbit,w
 10980  0C32  3901               	andlw	1
 10981                           
 10982                           ;teris_16f886.c: 442: break;
 10983  0C33  0008               	return
 10984  0C34                     l2868:	
 10985                           ;teris_16f886.c: 443: case 2:
 10986                           
 10987                           
 10988                           ;teris_16f886.c: 444: return (uint8_t)temp->b2;
 10989  0C34  0876               	movf	getbit@temp+1,w
 10990  0C35  1283               	bcf	3,5	;RP0=0, select bank0
 10991  0C36  1303               	bcf	3,6	;RP1=0, select bank0
 10992  0C37  00FF               	movwf	127
 10993  0C38  0875               	movf	getbit@temp,w
 10994  0C39  0084               	movwf	4
 10995  0C3A  120A  158A  2000   	fcall	stringtab
 10996  0C3D  00F3               	movwf	??_getbit
 10997  0C3E  0C73               	rrf	??_getbit,w
 10998  0C3F  00F4               	movwf	??_getbit+1
 10999  0C40  0C74               	rrf	??_getbit+1,w
 11000  0C41  3901               	andlw	1
 11001                           
 11002                           ;teris_16f886.c: 445: break;
 11003  0C42  0008               	return
 11004  0C43                     l2874:	
 11005                           ;teris_16f886.c: 446: case 3:
 11006                           
 11007                           
 11008                           ;teris_16f886.c: 447: return (uint8_t)temp->b3;
 11009  0C43  0876               	movf	getbit@temp+1,w
 11010  0C44  1283               	bcf	3,5	;RP0=0, select bank0
 11011  0C45  1303               	bcf	3,6	;RP1=0, select bank0
 11012  0C46  00FF               	movwf	127
 11013  0C47  0875               	movf	getbit@temp,w
 11014  0C48  0084               	movwf	4
 11015  0C49  120A  158A  2000   	fcall	stringtab
 11016  0C4C  00F3               	movwf	??_getbit
 11017  0C4D  0C73               	rrf	??_getbit,w
 11018  0C4E  00F4               	movwf	??_getbit+1
 11019  0C4F  0CF4               	rrf	??_getbit+1,f
 11020  0C50  0C74               	rrf	??_getbit+1,w
 11021  0C51  3901               	andlw	1
 11022                           
 11023                           ;teris_16f886.c: 448: break;
 11024  0C52  0008               	return
 11025  0C53                     l2880:	
 11026                           ;teris_16f886.c: 449: case 4:
 11027                           
 11028                           
 11029                           ;teris_16f886.c: 450: return (uint8_t)temp->b4;
 11030  0C53  0876               	movf	getbit@temp+1,w
 11031  0C54  1283               	bcf	3,5	;RP0=0, select bank0
 11032  0C55  1303               	bcf	3,6	;RP1=0, select bank0
 11033  0C56  00FF               	movwf	127
 11034  0C57  0875               	movf	getbit@temp,w
 11035  0C58  0084               	movwf	4
 11036  0C59  120A  158A  2000   	fcall	stringtab
 11037  0C5C  00F3               	movwf	??_getbit
 11038  0C5D  0E73               	swapf	??_getbit,w
 11039  0C5E  3901               	andlw	1
 11040                           
 11041                           ;teris_16f886.c: 451: break;
 11042  0C5F  0008               	return
 11043  0C60                     l2886:	
 11044                           ;teris_16f886.c: 452: case 5:
 11045                           
 11046                           
 11047                           ;teris_16f886.c: 453: return (uint8_t)temp->b5;
 11048  0C60  0876               	movf	getbit@temp+1,w
 11049  0C61  1283               	bcf	3,5	;RP0=0, select bank0
 11050  0C62  1303               	bcf	3,6	;RP1=0, select bank0
 11051  0C63  00FF               	movwf	127
 11052  0C64  0875               	movf	getbit@temp,w
 11053  0C65  0084               	movwf	4
 11054  0C66  120A  158A  2000   	fcall	stringtab
 11055  0C69  00F3               	movwf	??_getbit
 11056  0C6A  0E73               	swapf	??_getbit,w
 11057  0C6B  00F4               	movwf	??_getbit+1
 11058  0C6C  0C74               	rrf	??_getbit+1,w
 11059  0C6D  3901               	andlw	1
 11060                           
 11061                           ;teris_16f886.c: 454: break;
 11062  0C6E  0008               	return
 11063  0C6F                     l2892:	
 11064                           ;teris_16f886.c: 455: case 6:
 11065                           
 11066                           
 11067                           ;teris_16f886.c: 456: return (uint8_t)temp->b6;
 11068  0C6F  0876               	movf	getbit@temp+1,w
 11069  0C70  1283               	bcf	3,5	;RP0=0, select bank0
 11070  0C71  1303               	bcf	3,6	;RP1=0, select bank0
 11071  0C72  00FF               	movwf	127
 11072  0C73  0875               	movf	getbit@temp,w
 11073  0C74  0084               	movwf	4
 11074  0C75  120A  158A  2000   	fcall	stringtab
 11075  0C78  00F3               	movwf	??_getbit
 11076  0C79  0E73               	swapf	??_getbit,w
 11077  0C7A  00F4               	movwf	??_getbit+1
 11078  0C7B  0CF4               	rrf	??_getbit+1,f
 11079  0C7C  0C74               	rrf	??_getbit+1,w
 11080  0C7D  3901               	andlw	1
 11081                           
 11082                           ;teris_16f886.c: 457: break;
 11083  0C7E  0008               	return
 11084  0C7F                     l2898:	
 11085                           ;teris_16f886.c: 458: case 7:
 11086                           
 11087                           
 11088                           ;teris_16f886.c: 459: return (uint8_t)temp->b7;
 11089  0C7F  0876               	movf	getbit@temp+1,w
 11090  0C80  1283               	bcf	3,5	;RP0=0, select bank0
 11091  0C81  1303               	bcf	3,6	;RP1=0, select bank0
 11092  0C82  00FF               	movwf	127
 11093  0C83  0875               	movf	getbit@temp,w
 11094  0C84  0084               	movwf	4
 11095  0C85  120A  158A  2000   	fcall	stringtab
 11096  0C88  00F3               	movwf	??_getbit
 11097  0C89  0D73               	rlf	??_getbit,w
 11098  0C8A  0D73               	rlf	??_getbit,w
 11099  0C8B  3901               	andlw	1
 11100                           
 11101                           ;teris_16f886.c: 461: }
 11102                           
 11103                           ;teris_16f886.c: 460: break;
 11104  0C8C  0008               	return
 11105  0C8D                     l2906:	
 11106  0C8D  0872               	movf	getbit@at,w
 11107                           
 11108                           ; Switch size 1, requested type "space"
 11109                           ; Number of cases is 8, Range of values is 0 to 7
 11110                           ; switch strategies available:
 11111                           ; Name         Instructions Cycles
 11112                           ; simple_byte           25    13 (average)
 11113                           ; direct_byte           32     8 (fixed)
 11114                           ; jumptable            260     6 (fixed)
 11115                           ;	Chosen strategy is simple_byte
 11116  0C8E  3A00               	xorlw	0	; case 0
 11117  0C8F  1903               	skipnz
 11118  0C90  2C1A               	goto	l2856
 11119  0C91  3A01               	xorlw	1	; case 1
 11120  0C92  1903               	skipnz
 11121  0C93  2C27               	goto	l2862
 11122  0C94  3A03               	xorlw	3	; case 2
 11123  0C95  1903               	skipnz
 11124  0C96  2C34               	goto	l2868
 11125  0C97  3A01               	xorlw	1	; case 3
 11126  0C98  1903               	skipnz
 11127  0C99  2C43               	goto	l2874
 11128  0C9A  3A07               	xorlw	7	; case 4
 11129  0C9B  1903               	skipnz
 11130  0C9C  2C53               	goto	l2880
 11131  0C9D  3A01               	xorlw	1	; case 5
 11132  0C9E  1903               	skipnz
 11133  0C9F  2C60               	goto	l2886
 11134  0CA0  3A03               	xorlw	3	; case 6
 11135  0CA1  1903               	skipnz
 11136  0CA2  2C6F               	goto	l2892
 11137  0CA3  3A01               	xorlw	1	; case 7
 11138  0CA4  1903               	skipnz
 11139  0CA5  2C7F               	goto	l2898
 11140  0CA6  2CA7               	goto	l191
 11141  0CA7                     l191:	
 11142  0CA7  0008               	return
 11143  0CA8                     __end_of_getbit:	
 11144                           
 11145                           	psect	text54
 11146  110F                     __ptext54:	
 11147 ;; *************** function _memset *****************
 11148 ;; Defined at:
 11149 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
 11150 ;; Parameters:    Size  Location     Type
 11151 ;;  p1              1    wreg     PTR void 
 11152 ;;		 -> g_matrix16x8(16), 
 11153 ;;  c               2    0[COMMON] int 
 11154 ;;  n               2    2[COMMON] unsigned int 
 11155 ;; Auto vars:     Size  Location     Type
 11156 ;;  p1              1    5[COMMON] PTR void 
 11157 ;;		 -> g_matrix16x8(16), 
 11158 ;;  p               1    6[COMMON] PTR unsigned char 
 11159 ;;		 -> g_matrix16x8(16), 
 11160 ;; Return value:  Size  Location     Type
 11161 ;;                  1    wreg      PTR void 
 11162 ;; Registers used:
 11163 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11164 ;; Tracked objects:
 11165 ;;		On entry : 0/0
 11166 ;;		On exit  : 0/0
 11167 ;;		Unchanged: 0/0
 11168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11169 ;;      Params:         4       0       0       0       0
 11170 ;;      Locals:         2       0       0       0       0
 11171 ;;      Temps:          1       0       0       0       0
 11172 ;;      Totals:         7       0       0       0       0
 11173 ;;Total ram usage:        7 bytes
 11174 ;; Hardware stack levels used:    1
 11175 ;; This function calls:
 11176 ;;		Nothing
 11177 ;; This function is called by:
 11178 ;;		_Clear_Matrix
 11179 ;; This function uses a non-reentrant model
 11180 ;;
 11181                           
 11182                           
 11183                           ;psect for function _memset
 11184  110F                     _memset:	
 11185                           
 11186                           ;incstack = 0
 11187                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
 11188                           ;memset@p1 stored from wreg
 11189  110F  00F5               	movwf	memset@p1
 11190  1110  0875               	movf	memset@p1,w
 11191  1111  00F4               	movwf	??_memset
 11192  1112  0874               	movf	??_memset,w
 11193  1113  00F6               	movwf	memset@p
 11194  1114                     l3576:	
 11195  1114  3001               	movlw	1
 11196  1115  02F2               	subwf	memset@n,f
 11197  1116  3000               	movlw	0
 11198  1117  1C03               	skipc
 11199  1118  03F3               	decf	memset@n+1,f
 11200  1119  02F3               	subwf	memset@n+1,f
 11201  111A  0A72               	incf	memset@n,w
 11202  111B  1903               	btfsc	3,2
 11203  111C  0A73               	incf	memset@n+1,w
 11204  111D  1903               	btfsc	3,2
 11205  111E  0008               	return
 11206  111F  0870               	movf	memset@c,w
 11207  1120  00F4               	movwf	??_memset
 11208  1121  0876               	movf	memset@p,w
 11209  1122  0084               	movwf	4
 11210  1123  0874               	movf	??_memset,w
 11211  1124  1383               	bcf	3,7	;select IRP bank0
 11212  1125  0080               	movwf	0
 11213  1126  3001               	movlw	1
 11214  1127  00F4               	movwf	??_memset
 11215  1128  0874               	movf	??_memset,w
 11216  1129  07F6               	addwf	memset@p,f
 11217  112A  2914               	goto	l3576
 11218  112B                     __end_of_memset:	
 11219                           ;	Return value of _memset is never used
 11220                           
 11221  007E                     btemp	set	126	;btemp
 11222  007E                     wtemp	set	126
 11223  007E                     wtemp0	set	126
 11224  0080                     wtemp1	set	128
 11225  0082                     wtemp2	set	130
 11226  0084                     wtemp3	set	132
 11227  0086                     wtemp4	set	134
 11228  0088                     wtemp5	set	136
 11229  007F                     wtemp6	set	127
 11230  007E                     ttemp	set	126
 11231  007E                     ttemp0	set	126
 11232  0081                     ttemp1	set	129
 11233  0084                     ttemp2	set	132
 11234  0087                     ttemp3	set	135
 11235  007F                     ttemp4	set	127
 11236  007E                     ltemp	set	126
 11237  007E                     ltemp0	set	126
 11238  0082                     ltemp1	set	130
 11239  0086                     ltemp2	set	134
 11240  0080                     ltemp3	set	128


Data Sizes:
    Strings     246
    Constant    144
    Data        21
    BSS         92
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      80
    BANK1            80     21      70
    BANK3            96      0      64
    BANK2            96      0       0

Pointer List with Targets:

    is_right_boundary@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    is_left_boundary@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memset@p1	PTR void  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memset@p	PTR unsigned char  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memcpy@d1	PTR void  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    memcpy@s1	PTR const void  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    sprintf$682	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_27(CODE[17]), STR_26(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_23(CODE[15]), STR_22(CODE[19]), STR_14(CODE[27]), STR_13(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 32
		 -> g_debug(BANK3[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    g_cur_matrix4x4	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    temp_cur_matrix4x4	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    get_holes_after_merge@matrix	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    get_high_after_merge@matrix	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    get_high@matrix	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    right_most@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    right_most@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    left_most@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    left_most@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    get_heavy@matrix	PTR const struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    get_num_of_orphan@matrix	PTR const struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    merge1@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    sp__memcpy	PTR void  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    merge1@matrix16x8_in	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    merge1@matrix16x8_out	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    merge@matrix16x8	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    merge@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    clear@matrix16x8	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    clear@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    fall_off@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    fall_off@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    is_right_boundary@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    is_left_boundary@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    is_valid@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    is_valid@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    hit_land@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    hit_land@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    is_row_empty@matrix	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    get_num_removed_rows@matrix	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    delete_matrix@matrix	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    delete_row@matrix	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    is_row_full@matrix	PTR const struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), g_matrix16x8(BANK1[16]), 

    sp__memset	PTR void  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    printf_MATRIX16x8@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    printf_MATRIX7219@matrix	PTR const struct . size(1) Largest target is 16
		 -> printf_MATRIX16x8@matrix7219(BANK0[16]), 

    printf_debug_MATRIX16x8@matrix	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    printf_debug_MATRIX16x8@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_25(CODE[12]), ROM(CODE[8192]), 

    MATRIX16x8_to_MATRIX7219@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    MATRIX16x8_to_MATRIX7219@matrix7219	PTR struct . size(1) Largest target is 16
		 -> printf_MATRIX16x8@matrix7219(BANK0[16]), 

    sp__get_MATRIX4x4	PTR struct . size(2) Largest target is 96
		 -> g_matrix4x4(CODE[96]), 

    printf_debug_MATRIX4x4@matrix	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    printf_debug_MATRIX4x4@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_24(CODE[17]), ROM(CODE[8192]), 

    get_matrix_bit@byte	PTR const unsigned char  size(2) Largest target is 96
		 -> temp_matrix16x8.row(BANK1[16]), NULL(NULL[0]), temp_matrix16x8(BANK1[16]), g_matrix4x4.row(CODE[4]), 
		 -> g_matrix4x4(CODE[96]), g_matrix16x8(BANK1[16]), 

    set_matrix_bit@byte	PTR unsigned char  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), g_matrix16x8(BANK1[16]), 

    getbit@byte	PTR const unsigned char  size(2) Largest target is 96
		 -> temp_matrix16x8.row(BANK1[16]), NULL(NULL[0]), temp_matrix16x8(BANK1[16]), g_matrix4x4.row(CODE[4]), 
		 -> g_matrix4x4(CODE[96]), g_matrix16x8(BANK1[16]), 

    getbit@temp	PTR struct . size(2) Largest target is 96
		 -> temp_matrix16x8.row(BANK1[16]), NULL(NULL[0]), temp_matrix16x8(BANK1[16]), g_matrix4x4.row(CODE[4]), 
		 -> g_matrix4x4(CODE[96]), g_matrix16x8(BANK1[16]), 

    setbit@byte	PTR unsigned char  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), g_matrix16x8(BANK1[16]), 

    setbit@temp	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), g_matrix16x8(BANK1[16]), 

    debug_int1@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_23(CODE[15]), STR_22(CODE[19]), STR_13(CODE[10]), 

    debug_line@str	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_21(CODE[2]), STR_20(CODE[21]), STR_19(CODE[1]), STR_16(CODE[31]), 
		 -> STR_15(CODE[2]), STR_12(CODE[21]), STR_11(CODE[2]), STR_10(CODE[21]), 
		 -> STR_9(CODE[1]), STR_6(CODE[30]), STR_5(CODE[2]), 

    debug_str@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_25(CODE[12]), STR_24(CODE[17]), STR_18(CODE[2]), STR_17(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), ROM(CODE[8192]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_25(CODE[12]), STR_24(CODE[17]), STR_21(CODE[2]), STR_20(CODE[21]), 
		 -> STR_19(CODE[1]), STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[31]), 
		 -> STR_15(CODE[2]), STR_12(CODE[21]), STR_11(CODE[2]), STR_10(CODE[21]), 
		 -> STR_9(CODE[1]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[30]), 
		 -> STR_5(CODE[2]), ROM(CODE[8192]), STR_4(CODE[3]), STR_3(CODE[3]), 
		 -> STR_2(CODE[3]), g_debug(BANK3[32]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    _main->_clear
    _main->_hit_land
    _main->_merge
    _main->_printf_debug_MATRIX16x8
    _main->_printf_debug_MATRIX4x4
    _printf_debug_MATRIX4x4->_get_matrix_bit
    _printf_debug_MATRIX16x8->_get_matrix_bit
    _debug_str->_USARTWriteString
    _debug_line->_USARTWriteString
    _merge->_get_matrix_bit
    _max7219_init1->_Write_Word
    _hit_land->_get_matrix_bit
    _find_best_solution->___wmul
    _find_best_solution->_fall_off
    _find_best_solution->_get_heavy
    _find_best_solution->_get_high_after_merge
    _find_best_solution->_get_num_of_orphan
    _find_best_solution->_is_valid
    _find_best_solution->_left_most
    _find_best_solution->_merge1
    _right_most->_is_right_boundary
    _is_right_boundary->_get_matrix_bit
    _merge1->_get_matrix_bit
    _is_left_boundary->_get_matrix_bit
    _is_valid->_get_matrix_bit
    _sprintf->___lwmod
    _sprintf->___wmul
    ___lwmod->___lwdiv
    _USARTWriteString->_USARTWriteChar
    _get_num_of_orphan->_get_matrix_bit
    _get_holes_after_merge->_get_matrix_bit
    _get_high_after_merge->_get_matrix_bit
    _get_high->_is_row_empty
    _get_heavy->_get_matrix_bit
    _fall_off->_get_matrix_bit
    _delete_matrix->_delete_row
    _clear->_get_matrix_bit
    _set_matrix_bit->_setbit
    _char_info_index_rand->___awmod
    _rand->___lmul
    _printf_Screen->_printf_MATRIX16x8
    _printf_MATRIX16x8->_MATRIX16x8_to_MATRIX7219
    _printf_MATRIX16x8->_printf_MATRIX7219
    _printf_MATRIX7219->_Write_Word
    _Write_Word->_SPI1_write
    _MATRIX16x8_to_MATRIX7219->_get_matrix_bit
    _get_matrix_bit->_getbit

Critical Paths under _main in BANK0

    _main->_find_best_solution
    _find_best_solution->_get_num_removed_rows
    _right_most->_is_right_boundary
    _left_most->_is_left_boundary
    _get_num_removed_rows->_debug_int1
    _debug_int1->_sprintf
    _sprintf->___wmul
    ___wmul->_get_holes_after_merge
    _char_info_index_rand->___awmod
    ___awmod->_rand
    _printf_Screen->_printf_MATRIX16x8
    _printf_MATRIX16x8->_MATRIX16x8_to_MATRIX7219

Critical Paths under _main in BANK1

    _main->_find_best_solution

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11     7      4  118107
                                             74 BANK0      4     0      4
                                             14 BANK1      7     7      0
                       _Clear_Matrix
                          _USARTInit
               _char_info_index_rand
                              _clear
                      _delete_matrix
                 _find_best_solution
                           _hit_land
                      _max7219_init1
                              _merge
                      _printf_Screen
            _printf_debug_MATRIX16x8
             _printf_debug_MATRIX4x4
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _printf_debug_MATRIX4x4                              14     8      6    8466
                                             12 COMMON     2     2      0
                                              0 BANK0     12     6      6
                         _debug_line
                          _debug_str
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (1) _printf_debug_MATRIX16x8                              7     4      3    7822
                                             12 COMMON     2     2      0
                                              0 BANK0      5     2      3
                         _debug_line
                          _debug_str
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _debug_str                                            2     0      2    1043
                                              3 COMMON     2     0      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _debug_line                                           2     0      2    1202
                                              3 COMMON     2     0      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (1) _merge                                                9     5      4    6766
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (1) _max7219_init1                                        3     3      0    1134
                                              8 COMMON     3     3      0
                         _Write_Word
 ---------------------------------------------------------------------------------
 (1) _hit_land                                             9     5      4    5634
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (1) _find_best_solution                                  32    32      0   65336
                                             56 BANK0     18    18      0
                                              0 BANK1     14    14      0
                             ___wmul
                         _debug_int1
                           _fall_off
                          _get_heavy
                           _get_high
               _get_high_after_merge
              _get_holes_after_merge
                  _get_num_of_orphan
               _get_num_removed_rows
                           _is_valid
                          _left_most
                             _merge1
                         _right_most
 ---------------------------------------------------------------------------------
 (2) _right_most                                           5     2      3    5666
                                              6 BANK0      5     2      3
                  _is_right_boundary
 ---------------------------------------------------------------------------------
 (3) _is_right_boundary                                    8     5      3    5471
                                             12 COMMON     2     2      0
                                              0 BANK0      6     3      3
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _merge1                                              12     7      5    7139
                                             12 COMMON     2     2      0
                                              0 BANK0     10     5      5
                     _get_matrix_bit
                             _memcpy
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               7     4      3     253
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (2) _left_most                                            5     2      3    5666
                                             12 COMMON     2     2      0
                                             11 BANK0      3     0      3
                   _is_left_boundary
 ---------------------------------------------------------------------------------
 (3) _is_left_boundary                                    11     8      3    5471
                                              0 BANK0     11     8      3
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _is_valid                                             9     5      4    5722
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_num_removed_rows                                 5     5      0    5844
                                             51 BANK0      5     5      0
                         _debug_int1
                        _is_row_full
 ---------------------------------------------------------------------------------
 (3) _debug_int1                                           4     0      4    5450
                                             47 BANK0      4     0      4
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             35    27      8    4491
                                             16 BANK0     31    23      8
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     516
                                             12 COMMON     2     2      0
                                             12 BANK0      4     0      4
              _get_holes_after_merge (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     480
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     145
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     0      2     597
                                              1 COMMON     2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _get_num_of_orphan                                   11     9      2    5579
                                             12 COMMON     2     0      2
                                              0 BANK0      9     9      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_holes_after_merge                               12    12      0    6244
                                              0 BANK0     12    12      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_high_after_merge                                 7     5      2    5418
                                             12 COMMON     2     0      2
                                              0 BANK0      5     5      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_high                                             3     3      0     241
                                              2 COMMON     3     3      0
                       _is_row_empty
 ---------------------------------------------------------------------------------
 (3) _is_row_empty                                         2     1      1     102
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _get_heavy                                           12    10      2    5626
                                             12 COMMON     2     0      2
                                              0 BANK0     10    10      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _fall_off                                             9     5      4    5679
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (1) _delete_matrix                                        4     4      0     675
                                              6 COMMON     4     4      0
                         _delete_row
                        _is_row_full
 ---------------------------------------------------------------------------------
 (3) _is_row_full                                          3     2      1     204
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _delete_row                                           6     5      1     324
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (1) _clear                                                9     5      4    6766
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _set_matrix_bit                                       6     3      3    1176
                                              5 COMMON     6     3      3
                             _setbit
 ---------------------------------------------------------------------------------
 (3) _setbit                                               5     3      2     530
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _char_info_index_rand                                 0     0      0     706
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     198
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     508
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      75
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Clear_Matrix                                         0     0      0    7407
                             _memset
                      _printf_Screen
 ---------------------------------------------------------------------------------
 (1) _printf_Screen                                        0     0      0    7178
                  _printf_MATRIX16x8
 ---------------------------------------------------------------------------------
 (2) _printf_MATRIX16x8                                   18    18      0    7178
                                             13 COMMON     1     1      0
                                              6 BANK0     17    17      0
           _MATRIX16x8_to_MATRIX7219
                  _printf_MATRIX7219
 ---------------------------------------------------------------------------------
 (3) _printf_MATRIX7219                                    7     7      0    1339
                                              8 COMMON     5     5      0
                                              0 BANK0      2     2      0
                         _Write_Word
 ---------------------------------------------------------------------------------
 (4) _Write_Word                                           4     1      3    1134
                                              4 COMMON     4     1      3
                         _SPI1_write
 ---------------------------------------------------------------------------------
 (5) _SPI1_write                                           4     4      0      92
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MATRIX16x8_to_MATRIX7219                             7     6      1    5738
                                             12 COMMON     1     0      1
                                              0 BANK0      6     6      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_matrix_bit                                       5     1      4    5163
                                              7 COMMON     5     1      4
                             _getbit
 ---------------------------------------------------------------------------------
 (4) _getbit                                               7     4      3     327
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     229
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Clear_Matrix
     _memset
     _printf_Screen
       _printf_MATRIX16x8
         _MATRIX16x8_to_MATRIX7219
           _get_matrix_bit
             _getbit
         _printf_MATRIX7219
           _Write_Word
             _SPI1_write
   _USARTInit
   _char_info_index_rand
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _clear
     _get_matrix_bit
       _getbit
     _set_matrix_bit
       _setbit
   _delete_matrix
     _delete_row
     _is_row_full
   _find_best_solution
     ___wmul
       _get_holes_after_merge (ARG)
         _get_matrix_bit
           _getbit
     _debug_int1
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
           _get_holes_after_merge (ARG)
             _get_matrix_bit
               _getbit
         _isdigit
     _fall_off
       _get_matrix_bit
         _getbit
     _get_heavy
       _get_matrix_bit
         _getbit
     _get_high
       _is_row_empty
     _get_high_after_merge
       _get_matrix_bit
         _getbit
     _get_holes_after_merge
       _get_matrix_bit
         _getbit
     _get_num_of_orphan
       _get_matrix_bit
         _getbit
     _get_num_removed_rows
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
             _get_holes_after_merge (ARG)
               _get_matrix_bit
                 _getbit
           _isdigit
       _is_row_full
     _is_valid
       _get_matrix_bit
         _getbit
     _left_most
       _is_left_boundary
         _get_matrix_bit
           _getbit
     _merge1
       _get_matrix_bit
         _getbit
       _memcpy
       _set_matrix_bit
         _setbit
     _right_most
       _is_right_boundary
         _get_matrix_bit
           _getbit
   _hit_land
     _get_matrix_bit
       _getbit
   _max7219_init1
     _Write_Word
       _SPI1_write
   _merge
     _get_matrix_bit
       _getbit
     _set_matrix_bit
       _setbit
   _printf_Screen
     _printf_MATRIX16x8
       _MATRIX16x8_to_MATRIX7219
         _get_matrix_bit
           _getbit
       _printf_MATRIX7219
         _Write_Word
           _SPI1_write
   _printf_debug_MATRIX16x8
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _debug_str
       _USARTWriteString
         _USARTWriteChar
     _get_matrix_bit
       _getbit
   _printf_debug_MATRIX4x4
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _debug_str
       _USARTWriteString
         _USARTWriteChar
     _get_matrix_bit
       _getbit
   _srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      40       9       66.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     15      46       7       87.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4E      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      E4      12        0.0%
ABS                  0      0      E4       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Aug 28 20:52:01 2016

                         __CFG_CP$ON 0000                                    pc 0002  
                     ___bmul@product 0072             ?_printf_debug_MATRIX16x8 0020  
      get_holes_after_merge@num_hole 0026                                   l36 103A  
                                 l29 14CD                          __CFG_CPD$ON 0000  
                                 fsr 0004                  ___wmul@multiplicand 002E  
                 USARTInit@baud_rate 0070                ?_char_info_index_rand 0070  
                        get_high@row 0074             ??_printf_debug_MATRIX4x4 0026  
                        __CFG_LVP$ON 0000                                  l208 0CC0  
                                l235 1271                                  l411 0AD9  
                                l307 133E                                  l420 112C  
                                l191 0CA7                                  l257 0A1A  
                                l186 178E                                  l530 0333  
                                l451 0E73                                  l427 1168  
                                l356 1792                                  l540 03DA  
                                l524 0312                                  l462 0E68  
                                l622 06BF                                  l606 0650  
                                l526 0314                                  l551 0412  
                                l527 0316                                  l552 0413  
                                l528 0318                                  l547 0410  
                                l468 0E9E                                  l644 07B4  
                                l733 11D4                                  l582 0536  
                                l577 050E                                  l586 055E  
                                _GIE 005F                                  _RA1 0029  
                                _RA2 002A                                  _RA3 002B  
                                fsr0 0004                                  indf 0000  
                       ___awmod@sign 002C                  right_most@matrix4x4 0026  
                       __CFG_IESO$ON 0000                          _sprintf$682 003F  
                        _sprintf$675 003B                          _sprintf$676 003D  
                       get_heavy@col 0028                         get_heavy@pre 0027  
                       get_heavy@row 0029                __end_of_max7219_init1 152B  
                merge1@matrix16x8_in 0023                       is_row_full@row 0070  
                               l3002 13C2                                 l3020 12CC  
                               l3006 13CD                                 l3102 042A  
                               l3024 12DA                                 l3112 043E  
                               l4002 14AB                                 l3018 12BE  
                               l3202 0586                                 l3106 0439  
                               l3028 12E5                                 l3212 05AE  
                               l3204 0595                                 l3132 0482  
                               l3116 0449                                 l3124 0468  
                               l3108 043B                                 l3060 034D  
                               l3052 031D                                 l3038 11EB  
                               l3302 06CC                                 l3142 04A3  
                               l3134 048F                                 l3118 0456  
                               l4102 0D81                                 l3240 061F  
                               l3232 05FA                                 l3224 05E3  
                               l3208 05A2                                 l3160 04F6  
                               l3128 0477                                 l3056 0339  
                               l3048 030D                                 l3402 0B13  
                               l3226 05E7                                 l3218 05C2  
                               l3138 049A                                 l3146 04A8  
                               l4202 0A00                                 l3412 0B3F  
                               l3332 0759                                 l3324 0701  
                               l3308 06DB                                 l3244 063E  
                               l3164 0502                                 l3148 04D4  
                               l3076 03AA                                 l3068 038C  
                               l3500 15BD                                 l4300 0023  
                               l4132 0A2F                                 l4108 0D95  
                               l3422 0B53                                 l3406 0B33  
                               l4222 1445                                 l3350 07C1  
                               l3326 072E                                 l3342 0792  
                               l3318 06F7                                 l3246 0642  
                               l3238 061B                                 l3094 040C  
                               l4302 02C9                                 l4142 0A5A  
                               l4126 0A2A                                 l3432 0B80  
                               l3336 076C                                 l3096 0415  
                               l3088 03D9                                 l3504 15C3  
                               l3520 15D4                                 l4136 0A47  
                               l3426 0B74                                 l3370 1747  
                               l4226 144F                                 l4218 141E  
                               l3346 079D                                 l3258 0659  
                               l3274 0683                                 l3282 0699  
                               l3602 132B                                 l3514 15CE  
                               l4306 02DC                                 l4250 1493  
                               l4242 1461                                 l3372 1750  
                               l3364 172C                                 l4164 125A  
                               l3292 06B3                                 l3268 0675  
                               l3356 02E5                                 l3620 0B8E  
                               l3532 160C                                 l4180 09A7  
                               l4148 0A6D                                 l4084 0CD5  
                               l3374 1759                                 l3366 1735  
                               l3382 1774                                 l3462 105E  
                               l4166 123C                                 l3286 069E  
                               l3358 07D9                                 l4174 09A1  
                               l4246 1489                                 l4078 0CCF  
                               l2920 1274                                 l3552 13DA  
                               l3376 1762                                 l3368 173E  
                               l3800 0AEA                                 l3472 1037  
                               l3608 1349                                 l3720 16BC  
                               l3712 168A                                 l3528 1601  
                               l3536 1612                                 l4096 0D6D  
                               l2906 0C8D                                 l3378 176B  
                               l3642 0BE9                                 l3634 0BC2  
                               l3626 0B94                                 l3482 1581  
                               l4194 09EF                                 l4450 0ED2  
                               l4620 14BE                                 l3556 13F0  
                               l3804 0AF2                                 l3732 16CF  
                               l3652 0C0D                                 l3548 1219  
                               l3716 16B2                                 l4188 09D4  
                               l4452 0ED7                                 l2862 0C27  
                               l4622 14C3                                 l3590 1315  
                               l3638 0BE7                                 l3822 1142  
                               l3830 117E                                 l4294 02B9  
                               l4198 09FA                                 l4470 0F41  
                               l3576 1114                                 l2880 0C53  
                               l2856 0C1A                                 l4624 14C8  
                               l3592 131C                                 l3680 17CF  
                               l3672 179E                                 l3904 0DCC  
                               l2952 106C                                 l3648 0C02  
                               l3656 0C13                                 l3496 15B2  
                               l3488 1587                                 l4288 01DE  
                               l4296 00A7                                 l2874 0C43  
                               l4618 14B9                                 l3690 17F5  
                               l3666 1798                                 l3770 0A83  
                               l3914 0DF1                                 l3754 1719  
                               l3738 16D9                                 l4298 02C2  
                               l4482 0FAB                                 l2892 0C6F  
                               l2868 0C34                                 l3780 0A8E  
                               l3844 11C0                                 l3932 0E49  
                               l3924 0E3C                                 l3748 16FB  
                               l2972 109F                                 l2886 0C60  
                               l3686 17EA                                 l3694 17FB  
                               l3838 11AD                                 l3870 1386  
                               l3758 1721                                 l2958 11CA  
                               l3960 1537                                 l3792 0ADB  
                               l3784 0AA8                                 l3848 11C6  
                               l3864 136A                                 l2976 10A5  
                               l2898 0C7F                                 l3874 1391  
                               l2994 139E                                 l3972 1544  
                               l3964 153E                                 l3796 0AE4  
                               l3948 0EA9                                 l2996 13AC  
                               l3974 1552                                 l3982 156B  
                               l3894 0DB6                                 l3886 0DAB  
                               l3992 14A0                                 l3994 14A2  
                               l3986 1573                                 l3978 1560  
                               l3996 14A4                                 l3998 14A6  
                               STR_1 098F                         __CFG_WDTE$ON 0000  
                               STR_2 098F                                 STR_5 0994  
                               STR_6 08C1                                 STR_7 0992  
                               STR_8 0996                                 STR_9 0991  
                        main@hit_res 00E5                                 u3115 12C1  
                               u3045 13A1                                 u4005 15FD  
                               u3135 12D2                                 u3065 13AD  
                               u3145 12DB                                 u4115 12FD  
                               u3075 13B9                                 u3085 13C3  
                               u3415 0557                                 u4065 13F2  
                               u3265 0423                                 u4075 13FA  
                               u3515 05D3                                 u3275 0430  
                               u5115 0D10                                 u3445 057F  
                               u4245 0BE5                                 u5135 0D4D  
                               u4345 17E4                                 u3385 052F  
                               u4265 0BFE                                 u5305 09D0  
                               u3555 0610                                 _PEIE 005E  
                               u3565 062E                                 u5505 02A1  
                               u3755 07BF                                 _RCIE 0465  
                               u5445 004E                                 u4575 165B  
                               u4905 0E96                                 u2985 11D5  
                               u2995 11DC                                 u5485 01B5  
                               u5495 024B                                 u4955 1547  
                               u5917 0F9E                                 u4975 1558  
                               u5927 0FF2                                 u5937 1279  
                               u4985 1561                                 u5785 0F09  
                               u5947 1281                         __CFG_WRT$OFF 0000  
             __end_of_USARTWriteChar 1041                        __CFG_FCMEN$ON 0000  
                               _main 0EAB                                 _rand 1614  
               right_most@matrix16x8 0028                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 ltemp 007E  
                               start 0000                                 ttemp 007E  
                               wtemp 007E                    ___bmul@multiplier 0073  
                      __CFG_MCLRE$ON 0000      find_best_solution@tem_sub_index 00DD  
       __end_of_get_num_removed_rows 135B                        get_heavy@risk 0023  
                    is_row_empty@row 0070                 merge1@matrix16x8_out 0024  
         get_high_after_merge@matrix 007C                                ?_main 006A  
                              ?_rand 0020                                STR_10 090F  
                              STR_20 090F                                STR_12 08FA  
                              STR_13 0985                                STR_22 0924  
                              STR_14 08DF                                STR_15 0994  
                              STR_23 096A                                STR_24 0959  
                              STR_16 08A2                                STR_17 0992  
                              STR_25 0979                                STR_18 0996  
                              STR_26 0937                                STR_19 0991  
                              STR_27 0948                      __end_of___awmod 1578  
                   USARTWriteChar@ch 0070           is_left_boundary@matrix16x8 0022  
                    __end_of___lwdiv 13D2                      __end_of___lwmod 12EA  
                              _RCREG 001A   MATRIX16x8_to_MATRIX7219@matrix7219 007C  
                              _SPBRG 0099                     _is_left_boundary 1578  
 MATRIX16x8_to_MATRIX7219@matrix16x8 0022                                _TXREG 0019  
                              _UQEnd 006E                  ___lmul@multiplicand 0074  
                        ?_SPI1_write 0070                                _clear 1411  
                    __end_of_dpowers 083A                                _cur_x 00C0  
                              _cur_y 00A9                                _merge 1454  
                    __end_of_isdigit 106E                                _randx 00BC  
                              _srand 1049                         ?_is_row_full 0070  
                    ??_printf_Screen 007E                                pclath 000A  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                    merge@matrix16x8 0023                   __size_of_USARTInit 0047  
                    ?_USARTWriteChar 0070                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                          hit_land@col 0025  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                      __end_of_sprintf 07DE  
                        hit_land@row 0026                       get_high@matrix 0073  
                    __initialization 07DE      find_best_solution@temp_pre_risk 00D1  
                       __end_of_main 1000                      _temp_matrix16x8 00AC  
                       __end_of_rand 1669                       get_heavy@start 0025  
             ??_char_info_index_rand 007E                               ??_main 00DF  
    __size_of_printf_debug_MATRIX4x4 00F5                    get_matrix_bit@col 007A  
                             ??_rand 0022                    set_matrix_bit@col 0076  
        is_right_boundary@matrix16x8 0022                    get_matrix_bit@row 0079  
                  set_matrix_bit@row 0075             find_best_solution@temp_x 00DE  
           find_best_solution@temp_y 00DC                               ?_clear 0020  
                             ?_merge 0020    __size_of_MATRIX16x8_to_MATRIX7219 008E  
                             ?_srand 0070            ?_MATRIX16x8_to_MATRIX7219 007C  
              __size_of_Clear_Matrix 0011              get_num_of_orphan@matrix 0026  
              __end_of_delete_matrix 125F                               _URBuff 0190  
                   __end_of_fall_off 1800                       __CFG_PWRTE$OFF 0000  
              get_high_after_merge@y 0022            get_num_removed_rows@count 0056  
                   __end_of_get_high 11C8                               ___bmul 109D  
                __size_of_SPI1_write 002A                               ___lmul 13D2  
                             ___wmul 11C8                            ??___awmod 007D  
                   __end_of_hit_land 0A02                            ??___lwdiv 0074  
                          ??___lwmod 007C                               _getbit 0C15  
                             _merge1 1669             __end_of_USARTWriteString 1210  
                             _memcpy 1210                               _memset 110F  
                   __end_of_is_valid 0C15                               clear@x 0024  
                             clear@y 0020                      ___awmod@divisor 0027  
                             _setbit 1726                      ___awmod@counter 002B  
                  __end_of_USARTInit 14DF                        ?_is_row_empty 0070  
        __size_of_find_best_solution 02D3                               merge@x 0024  
                             merge@y 0020                            ??_isdigit 0070  
                        is_valid@col 0026                          is_valid@row 0025  
                       _Clear_Matrix 108C                               srand@x 0070  
                  _is_right_boundary 15C5           printf_debug_MATRIX16x8@col 0024  
         printf_debug_MATRIX16x8@row 0023                 _get_num_removed_rows 1321  
                          ??_sprintf 0038                     ??_get_matrix_bit 007B  
            ??_get_holes_after_merge 0020                   ?_is_right_boundary 0020  
             _printf_debug_MATRIX4x4 0CA8              __end_of__initialization 07FC  
          is_left_boundary@matrix4x4 0020                  ??_is_right_boundary 007C  
                ___bmul@multiplicand 0070                       __pcstackCOMMON 0070  
                       __pidataBANK1 10E2                        __end_of_clear 1454  
                         _Write_Word 1147                        __end_of_merge 1498  
                    get_heavy@matrix 0026                        __end_of_srand 1052  
                 __size_of_debug_str 0008                       ??_is_row_empty 0071  
            __size_of_set_matrix_bit 000F                get_num_of_orphan@full 0025  
          __end_of_is_right_boundary 1614                get_num_of_orphan@risk 0023  
      __size_of_get_high_after_merge 003B                   __size_of_get_heavy 0082  
   __size_of_printf_debug_MATRIX16x8 0073           get_holes_after_merge@start 0028  
                 is_valid@matrix16x8 0023                ?_get_num_removed_rows 0070  
                            ??_clear 007C                              ??_merge 007C  
                 get_matrix_bit@byte 0077                         sprintf@width 0049  
                            ??_srand 0072                   set_matrix_bit@byte 007A  
                         __pbssBANK1 00A0                           __pbssBANK3 0190  
                 __size_of_left_most 001C                    is_row_full@matrix 0072  
               __size_of_is_row_full 000E                           _debug_int1 1185  
                         _debug_line 10AE                  delete_matrix@matrix 0078  
           __end_of_is_left_boundary 15C5                         _g_matrix16x8 00C1  
                         _delete_row 12EA                           __pmaintext 0EAB  
                            ?___bmul 0070                              ?___lmul 0070  
                            ?___wmul 002C                              ?_getbit 0070  
                            ?_merge1 0020                              ?_memcpy 0070  
                            ?_memset 0070                       ___lmul@product 0079  
                            ?_setbit 0070            get_holes_after_merge@stop 0027  
                       ??_SPI1_write 0070                            ?_fall_off 0020  
                   ??_USARTWriteChar 0070                 is_right_boundary@col 0025  
               is_right_boundary@row 0024                            ?_get_high 0070  
                 USARTWriteInt@F1617 00A0                           __stringtab 0800  
                  _get_num_of_orphan 16C1                            ?_hit_land 0020  
                  __end_of_debug_str 1049                              _UQFront 006F  
                          ?_is_valid 0020                   ?_get_num_of_orphan 007C  
       MATRIX16x8_to_MATRIX7219@mask 0023          MATRIX16x8_to_MATRIX7219@col 0025  
        MATRIX16x8_to_MATRIX7219@row 0024                        debug_line@str 0073  
                  __end_of_get_heavy 0AF7              get_num_removed_rows@row 0057  
                ??_get_num_of_orphan 0020                      __size_of___bmul 0011  
                    __size_of___lmul 003F                              ___awmod 152B  
                 __end_of_SPI1_write 1289                      __size_of___wmul 0023  
             __size_of_max7219_init1 004C                          ?_Write_Word 0074  
                            ___lwdiv 1396                              ___lwmod 12B8  
                        right_most@x 002A                      __size_of_getbit 0093  
                            _g_debug 01B0                      __size_of_merge1 0058  
                    __size_of_memcpy 0026                            _ANSELbits 0188  
                    __size_of_memset 001C     __end_of_MATRIX16x8_to_MATRIX7219 0B85  
                  __end_of_left_most 1147                              __ptext1 1049  
                            __ptext2 0CA8                              __ptext3 0A02  
                            __ptext4 1041                              __ptext5 10AE  
                            __ptext6 1454                              __ptext7 14DF  
                            __ptext8 0998                              __ptext9 000B  
                    __size_of_setbit 0069  find_best_solution@tem_pre_sub_index 00D6  
                 hit_land@matrix16x8 0023                    __end_of_hexpowers 0842  
                            _dpowers 0830                              _isdigit 1060  
                   ___awmod@dividend 0029           __size_of_is_right_boundary 004F  
             ??_get_num_removed_rows 0053                          SPI1_write@i 0073  
                         ??_fall_off 007C                          setbit@value 0071  
          __end_of_get_num_of_orphan 1726                              _sprintf 02DE  
                         ??_get_high 0072                              clrloop0 0004  
               end_of_initialization 07FC                    __end_of_octpowers 0830  
                  _printf_MATRIX7219 1289                           ??_hit_land 007C  
                            merge1@x 0027                              merge1@y 0020  
                  _printf_MATRIX16x8 10D0                              memcpy@d 0075  
                            memcpy@n 0071                              memcpy@s 0076  
              __end_of_printf_Screen 1031                              memset@c 0070  
               __end_of_is_row_empty 1039                              memset@n 0072  
                            memset@p 0076                          ?_debug_int1 004F  
                         ??_is_valid 007C                          ?_debug_line 0073  
                 ?_printf_MATRIX7219 0070                       SPI1_write@data 0071  
                 ?_printf_MATRIX16x8 0070                       SPI1_write@mask 0072  
                         _right_most 1165                          ?_delete_row 0070  
                          _RCSTAbits 0018                  ??_printf_MATRIX7219 0078  
                ??_printf_MATRIX16x8 007D                         __pstringtext 0800  
                  ?_USARTWriteString 0071        __size_of_char_info_index_rand 0018  
                     _set_matrix_bit 107D                   ??_USARTWriteString 0073  
                          _USARTInit 1498              _printf_debug_MATRIX16x8 0A02  
                          _TRISAbits 0085                   left_most@matrix4x4 002B  
                __end_of_g_char_info 0824                      merge1@matrix4x4 0021  
          __end_of_printf_MATRIX7219 12B8              ?_printf_debug_MATRIX4x4 0020  
          __end_of_printf_MATRIX16x8 10E2                        _max7219_init1 14DF  
                __size_of_Write_Word 001E                           getbit@byte 0070  
                         getbit@temp 0075       __size_of_get_holes_after_merge 010E  
      __end_of_get_holes_after_merge 0EAB                find_best_solution@res 00D7  
                          _TXSTAbits 0098                      _g_cur_matrix4x4 00A5  
       printf_debug_MATRIX16x8@lable 0020                       __end_of___bmul 10AE  
         __end_of_find_best_solution 02DE                       __end_of___lmul 1411  
                     __end_of___wmul 11EB               __end_of_set_matrix_bit 108C  
                __end_of_g_matrix4x4 08A2                       __end_of_getbit 0CA8  
                     __end_of_merge1 16C1                       __end_of_memcpy 1236  
                     __end_of_memset 112B                       __end_of_setbit 178F  
                __size_of_debug_int1 0021               __size_of_delete_matrix 0029  
                __size_of_debug_line 0011                       merge@matrix4x4 0021  
                start_initialization 07DE                           ?_USARTInit 0070  
            printf_debug_MATRIX4x4@x 0022              printf_debug_MATRIX4x4@y 0023  
           _MATRIX16x8_to_MATRIX7219 0AF7       __end_of_printf_debug_MATRIX4x4 0D9D  
                __size_of_delete_row 0037                       ?_max7219_init1 0070  
        printf_debug_MATRIX4x4@lable 0020           __size_of_get_num_of_orphan 0065  
                         left_most@x 007D           is_right_boundary@matrix4x4 0020  
                      delete_row@row 0070             __CFG_FOSC$INTRC_NOCLKOUT 0000  
                 is_right_boundary@x 0023         __end_of_get_high_after_merge 1396  
                        ?_right_most 0026                    ?_is_left_boundary 0020  
        get_holes_after_merge@matrix 0029                             ??___bmul 0071  
                           ??___lmul 0078                   ??_is_left_boundary 0023  
                           ??___wmul 007C                           init_fetch0 10BF  
                 is_row_empty@matrix 0071                             ??_getbit 0073  
                        __pdataBANK1 00BC                    _g_char_info_index 00AA  
                           ??_merge1 007C                             ??_memcpy 0073  
                           ??_memset 0074                      ?_set_matrix_bit 0075  
                           ??_setbit 0072                          _g_char_info 0812  
                set_matrix_bit@value 0077            ??_printf_debug_MATRIX16x8 007C  
       find_best_solution@temp_pre_x 00D5    find_best_solution@left_most_index 00D3  
                          ___latbits 0002                        __pcstackBANK0 0020  
                      __pcstackBANK1 00D1           __size_of_printf_MATRIX7219 002F  
              __size_of_is_row_empty 0008           __size_of_printf_MATRIX16x8 0012  
                      ??_is_row_full 0071                    __size_of_fall_off 0071  
               get_num_of_orphan@col 0027                 get_num_of_orphan@row 0028  
                  __size_of_get_high 0022                          sprintf@flag 004D  
                  is_valid@matrix4x4 0021                          sprintf@prec 0048  
                  __size_of_hit_land 006A                        _delete_matrix 1236  
                          __pnvBANK0 006E                            _debug_str 1041  
                 delete_matrix@count 0077                    __size_of_is_valid 0090  
                   ___lwdiv@dividend 0072              printf_MATRIX7219@matrix 0020  
                   delete_matrix@row 0079                          _g_matrix4x4 0842  
            __size_of_get_matrix_bit 000F                             ?___awmod 0027  
                       ??_Write_Word 0077                             ?___lwdiv 0070  
                           ?___lwmod 0078        printf_debug_MATRIX16x8@matrix 0022  
                          _get_heavy 0A75                         _is_row_empty 1031  
                           ?_isdigit 0070                    is_left_boundary@x 0028  
                    ??_max7219_init1 0078                          ??_USARTInit 0072  
                          _left_most 112B                   fall_off@matrix16x8 0023  
                __size_of_right_most 0020                            _hexpowers 083A  
                   ___lwdiv@quotient 0075                       __size_of_clear 0043  
                           ?_sprintf 0030                 printf_MATRIX7219@col 0021  
                     __size_of_merge 0044                       __size_of_srand 0009  
                       debug_str@str 0073                    hit_land@matrix4x4 0021  
                         setbit@byte 0073                   __end_of_Write_Word 1165  
                         setbit@temp 0074                         ??_debug_int1 007E  
    __end_of_printf_debug_MATRIX16x8 0A75                         ??_debug_line 0075  
                     ?_delete_matrix 0070                       ___wmul@product 007C  
                          fall_off@x 0024                            fall_off@y 0020  
                   delete_row@matrix 0074                            clear_ram0 0003  
                          _octpowers 0824                  __end_of_is_row_full 1060  
                         ?_debug_str 0073                         ??_delete_row 0071  
                           _PIR1bits 000C         printf_debug_MATRIX4x4@matrix 0024  
                         ?_get_heavy 007C                          __stringbase 0812  
                  ___wmul@multiplier 002C                   __end_of_debug_int1 11A6  
                 __end_of_debug_line 10BF                        ?_Clear_Matrix 0070  
               _get_high_after_merge 135B                           ?_left_most 002B  
      __size_of_get_num_removed_rows 003A                   __end_of_delete_row 1321  
                  ___lmul@multiplier 0070                  is_left_boundary@col 002A  
                is_left_boundary@row 0029            __size_of_USARTWriteString 0025  
                          hit_land@x 0024                            hit_land@y 0020  
       __end_of_char_info_index_rand 110F              get_high_after_merge@col 0023  
                          merge1@col 0029                            merge1@len 0025  
            get_high_after_merge@row 0024                            merge1@row 0028  
            __size_of_USARTWriteChar 0008                            is_valid@x 0024  
                          is_valid@y 0020          find_best_solution@temp_high 00D8  
         ??_MATRIX16x8_to_MATRIX7219 0020                     __size_of___awmod 004D  
        find_best_solution@temp_risk 00DA                     __size_of___lwdiv 003C  
                   __size_of___lwmod 0032                   __end_of__stringtab 0812  
                        _isdigit$868 0070               __size_of_printf_Screen 0005  
                         sprintf@idx 0041                           sprintf@len 0043  
                         sprintf@val 0046                       ??_Clear_Matrix 007E  
              ?_get_high_after_merge 007C                     __size_of_isdigit 000E  
                           _fall_off 178F                      ___lwdiv@divisor 0070  
                    ___lwdiv@counter 0077                   _find_best_solution 000B  
                           __ptext10 1165                             __ptext11 15C5  
                           __ptext20 1060                             __ptext12 1669  
                           __ptext21 11C8                             __ptext13 1210  
                           __ptext30 11A6                             __ptext22 12B8  
                           __ptext14 112B                             __ptext31 1031  
                           __ptext23 1396                             __ptext15 1578  
                           __ptext40 10F7                             __ptext32 0A75  
                           __ptext24 109D                             __ptext16 0B85  
                           __ptext41 1614                             __ptext33 178F  
                           __ptext25 11EB                             __ptext17 1321  
                           __ptext50 125F                             __ptext42 13D2  
                           __ptext34 1236                             __ptext26 1039  
                           __ptext18 1185                             __ptext51 0AF7  
                           __ptext43 152B                             __ptext35 1052  
                           __ptext27 16C1                             __ptext19 02DE  
                           __ptext52 106E                             __ptext44 1498  
                           __ptext36 12EA                             __ptext28 0D9D  
                           __ptext53 0C15                             __ptext45 108C  
                           __ptext37 1411                             __ptext29 135B  
                           __ptext54 110F                             __ptext46 102C  
                           __ptext38 107D                             __ptext47 10D0  
                           __ptext39 1726                             __ptext48 1289  
                           __ptext49 1147                    __CFG_BOR4V$BOR21V 0000  
                           _get_high 11A6                _g_char_info_sub_index 00AB  
                        _is_row_full 1052                     __size_of_sprintf 0500  
                    ??_delete_matrix 0076                          debug_int1@f 004F  
                        debug_int1@i 0051                             _hit_land 0998  
          printf_debug_MATRIX4x4@col 007D            printf_debug_MATRIX4x4@row 007C  
                  fall_off@matrix4x4 0021                  ?_find_best_solution 0070  
                      __size_of_main 0155                             _is_valid 0B85  
                      __size_of_rand 0055                             clear@col 0026  
        printf_MATRIX16x8@matrix7219 0027                             clear@row 0025  
                       ??_right_most 0029          printf_MATRIX16x8@matrix16x8 0026  
              _get_holes_after_merge 0D9D                          ??_debug_str 0075  
                     _get_matrix_bit 106E                     ??_set_matrix_bit 0078  
                    clear@matrix16x8 0023                             main@Seed 00E3  
                           getbit@at 0072                             main@argc 006A  
                           main@argv 006C                          ??_get_heavy 0020  
           get_holes_after_merge@col 002A             get_holes_after_merge@row 002B  
               ??_find_best_solution 0058                          fall_off@col 0025  
                        fall_off@row 0026            __size_of_is_left_boundary 004D  
                        delete_row@i 0075                          ??_left_most 007C  
                           memcpy@d1 0074                             memcpy@s1 0070  
                           merge@col 0026                             merge@row 0025  
                 __end_of_right_most 1185                             init_ram0 10C3  
                           isdigit@c 0071                             memset@p1 0075  
                          sprintf@ap 0045                            sprintf@cp 0042  
                          sprintf@sp 004C                     ___lwmod@dividend 007A  
                      _printf_Screen 102C               __end_of_get_matrix_bit 107D  
                          stringcode 080A                             setbit@at 0070  
                     clear@matrix4x4 0021                  USARTWriteString@str 0071  
                Write_Word@myColumn1 0077                  Write_Word@myColumn2 0075  
               _char_info_index_rand 10F7               ??_get_high_after_merge 0020  
                           sprintf@c 004B                             sprintf@f 0030  
 find_best_solution@right_most_index 00D4                      ___lwmod@divisor 0078  
                    ___lwmod@counter 007D                             stringtab 0800  
                         _SPI1_write 125F                     _USARTWriteString 11EB  
                 Write_Word@myValue1 0074                   Write_Word@myValue2 0076  
                 _temp_cur_matrix4x4 00A7                       ?_printf_Screen 0070  
         get_num_removed_rows@matrix 0055               ?_get_holes_after_merge 0070  
                    ?_get_matrix_bit 0077                       _USARTWriteChar 1039  
               __end_of_Clear_Matrix 109D                  left_most@matrix16x8 002D  
