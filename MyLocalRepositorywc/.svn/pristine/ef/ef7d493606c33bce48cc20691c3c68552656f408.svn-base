

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Aug 27 14:38:32 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	dabs	1,0x7E,2
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000E                     	;# 
    89  000F                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  001D                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0086                     	;# 
   111  0087                     	;# 
   112  0089                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  008F                     	;# 
   117  0090                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  0105                     	;# 
   136  0107                     	;# 
   137  0108                     	;# 
   138  0109                     	;# 
   139  010C                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  010F                     	;# 
   144  0185                     	;# 
   145  0187                     	;# 
   146  0188                     	;# 
   147  0189                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  0105                     	;# 
   212  0107                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  0185                     	;# 
   221  0187                     	;# 
   222  0188                     	;# 
   223  0189                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226                           
   227                           	psect	idataBANK0
   228  0DC4                     __pidataBANK0:	
   229                           
   230                           ;initializer for _temp_pre_risk
   231  0DC4  34FF               	retlw	255
   232  0DC5  34FF               	retlw	255
   233                           
   234                           ;initializer for _temp_pre_x
   235  0DC6  340F               	retlw	15
   236                           
   237                           	psect	idataBANK1
   238  1808                     __pidataBANK1:	
   239                           
   240                           ;initializer for _cur_x
   241  1808  3402               	retlw	2
   242                           
   243                           ;initializer for _temp_pre_high
   244  1809  34FF               	retlw	255
   245                           
   246                           ;initializer for _temp_pre_hole
   247  180A  34FF               	retlw	255
   248                           
   249                           	psect	idataBANK3
   250  18E9                     __pidataBANK3:	
   251                           
   252                           ;initializer for _g_char_info
   253  18E9  3400               	retlw	0
   254  18EA  3400               	retlw	0
   255  18EB  3402               	retlw	2
   256  18EC  3402               	retlw	2
   257  18ED  3400               	retlw	0
   258  18EE  3402               	retlw	2
   259  18EF  3404               	retlw	4
   260  18F0  3400               	retlw	0
   261  18F1  3402               	retlw	2
   262  18F2  3406               	retlw	6
   263  18F3  3400               	retlw	0
   264  18F4  3404               	retlw	4
   265  18F5  340A               	retlw	10
   266  18F6  3400               	retlw	0
   267  18F7  3404               	retlw	4
   268  18F8  340E               	retlw	14
   269  18F9  3400               	retlw	0
   270  18FA  3401               	retlw	1
   271  18FB  340F               	retlw	15
   272  18FC  3400               	retlw	0
   273  18FD  3404               	retlw	4
   274  18FE  3413               	retlw	19
   275  18FF  3400               	retlw	0
   276  1900  3401               	retlw	1
   277  1901  3414               	retlw	20
   278  1902  3400               	retlw	0
   279  1903  3404               	retlw	4
   280                           
   281                           ;initializer for _randx
   282  1904  3401               	retlw	1
   283  1905  3400               	retlw	0
   284  1906  3400               	retlw	0
   285  1907  3400               	retlw	0
   286                           
   287                           ;initializer for _tem_pre_sub_index
   288  1908  340F               	retlw	15
   289                           
   290                           	psect	stringtext
   291  0800                     __pstringtext:	
   292  0800                     stringtab:	
   293  0800                     __stringtab:	
   294                           
   295                           ;	String table - string pointers are 2 bytes each
   296  0800  1BFF               	btfsc	btemp+1,7
   297  0801  280A               	ljmp	stringcode
   298  0802  1383               	bcf	3,7
   299  0803  187F               	btfsc	btemp+1,0
   300  0804  1783               	bsf	3,7
   301  0805  0800               	movf	0,w
   302  0806  0A84               	incf	4,f
   303  0807  1903               	skipnz
   304  0808  0AFF               	incf	btemp+1,f
   305  0809  0008               	return
   306  080A                     stringcode:	
   307  080A  087F               	movf	btemp+1,w
   308  080B  397F               	andlw	127
   309  080C  008A               	movwf	10
   310  080D  0804               	movf	4,w
   311  080E  0A84               	incf	4,f
   312  080F  1903               	skipnz
   313  0810  0AFF               	incf	btemp+1,f
   314  0811  0082               	movwf	2
   315  0812                     __stringbase:	
   316  0812                     __end_of__stringtab:	
   317  0812                     _octpowers:	
   318  0812  3401               	retlw	1
   319  0813  3400               	retlw	0
   320  0814  3408               	retlw	8
   321  0815  3400               	retlw	0
   322  0816  3440               	retlw	64
   323  0817  3400               	retlw	0
   324  0818  3400               	retlw	0
   325  0819  3402               	retlw	2
   326  081A  3400               	retlw	0
   327  081B  3410               	retlw	16
   328  081C  3400               	retlw	0
   329  081D  3480               	retlw	128
   330  081E                     __end_of_octpowers:	
   331  081E                     _dpowers:	
   332  081E  3401               	retlw	1
   333  081F  3400               	retlw	0
   334  0820  340A               	retlw	10
   335  0821  3400               	retlw	0
   336  0822  3464               	retlw	100
   337  0823  3400               	retlw	0
   338  0824  34E8               	retlw	232
   339  0825  3403               	retlw	3
   340  0826  3410               	retlw	16
   341  0827  3427               	retlw	39
   342  0828                     __end_of_dpowers:	
   343  0828                     _hexpowers:	
   344  0828  3401               	retlw	1
   345  0829  3400               	retlw	0
   346  082A  3410               	retlw	16
   347  082B  3400               	retlw	0
   348  082C  3400               	retlw	0
   349  082D  3401               	retlw	1
   350  082E  3400               	retlw	0
   351  082F  3410               	retlw	16
   352  0830                     __end_of_hexpowers:	
   353  0830                     _g_matrix44:	
   354  0830  3400               	retlw	0
   355  0831  3401               	retlw	1
   356  0832  3400               	retlw	0
   357  0833  3400               	retlw	0
   358  0834  3400               	retlw	0
   359  0835  3401               	retlw	1
   360  0836  3400               	retlw	0
   361  0837  3400               	retlw	0
   362  0838  3400               	retlw	0
   363  0839  3401               	retlw	1
   364  083A  3400               	retlw	0
   365  083B  3400               	retlw	0
   366  083C  3400               	retlw	0
   367  083D  3401               	retlw	1
   368  083E  3400               	retlw	0
   369  083F  3400               	retlw	0
   370  0840  3400               	retlw	0
   371  0841  3400               	retlw	0
   372  0842  3400               	retlw	0
   373  0843  3400               	retlw	0
   374  0844  3401               	retlw	1
   375  0845  3401               	retlw	1
   376  0846  3401               	retlw	1
   377  0847  3401               	retlw	1
   378  0848  3400               	retlw	0
   379  0849  3400               	retlw	0
   380  084A  3400               	retlw	0
   381  084B  3400               	retlw	0
   382  084C  3400               	retlw	0
   383  084D  3400               	retlw	0
   384  084E  3400               	retlw	0
   385  084F  3400               	retlw	0
   386  0850  3400               	retlw	0
   387  0851  3401               	retlw	1
   388  0852  3401               	retlw	1
   389  0853  3400               	retlw	0
   390  0854  3401               	retlw	1
   391  0855  3401               	retlw	1
   392  0856  3400               	retlw	0
   393  0857  3400               	retlw	0
   394  0858  3400               	retlw	0
   395  0859  3400               	retlw	0
   396  085A  3400               	retlw	0
   397  085B  3400               	retlw	0
   398  085C  3400               	retlw	0
   399  085D  3400               	retlw	0
   400  085E  3400               	retlw	0
   401  085F  3400               	retlw	0
   402  0860  3400               	retlw	0
   403  0861  3401               	retlw	1
   404  0862  3400               	retlw	0
   405  0863  3400               	retlw	0
   406  0864  3400               	retlw	0
   407  0865  3401               	retlw	1
   408  0866  3401               	retlw	1
   409  0867  3400               	retlw	0
   410  0868  3400               	retlw	0
   411  0869  3400               	retlw	0
   412  086A  3401               	retlw	1
   413  086B  3400               	retlw	0
   414  086C  3400               	retlw	0
   415  086D  3400               	retlw	0
   416  086E  3400               	retlw	0
   417  086F  3400               	retlw	0
   418  0870  3401               	retlw	1
   419  0871  3401               	retlw	1
   420  0872  3400               	retlw	0
   421  0873  3400               	retlw	0
   422  0874  3400               	retlw	0
   423  0875  3401               	retlw	1
   424  0876  3401               	retlw	1
   425  0877  3400               	retlw	0
   426  0878  3400               	retlw	0
   427  0879  3400               	retlw	0
   428  087A  3400               	retlw	0
   429  087B  3400               	retlw	0
   430  087C  3400               	retlw	0
   431  087D  3400               	retlw	0
   432  087E  3400               	retlw	0
   433  087F  3400               	retlw	0
   434  0880  3400               	retlw	0
   435  0881  3401               	retlw	1
   436  0882  3400               	retlw	0
   437  0883  3400               	retlw	0
   438  0884  3401               	retlw	1
   439  0885  3401               	retlw	1
   440  0886  3400               	retlw	0
   441  0887  3400               	retlw	0
   442  0888  3401               	retlw	1
   443  0889  3400               	retlw	0
   444  088A  3400               	retlw	0
   445  088B  3400               	retlw	0
   446  088C  3400               	retlw	0
   447  088D  3400               	retlw	0
   448  088E  3400               	retlw	0
   449  088F  3400               	retlw	0
   450  0890  3400               	retlw	0
   451  0891  3400               	retlw	0
   452  0892  3400               	retlw	0
   453  0893  3400               	retlw	0
   454  0894  3401               	retlw	1
   455  0895  3401               	retlw	1
   456  0896  3401               	retlw	1
   457  0897  3400               	retlw	0
   458  0898  3400               	retlw	0
   459  0899  3400               	retlw	0
   460  089A  3401               	retlw	1
   461  089B  3400               	retlw	0
   462  089C  3400               	retlw	0
   463  089D  3400               	retlw	0
   464  089E  3400               	retlw	0
   465  089F  3400               	retlw	0
   466  08A0  3400               	retlw	0
   467  08A1  3401               	retlw	1
   468  08A2  3401               	retlw	1
   469  08A3  3400               	retlw	0
   470  08A4  3400               	retlw	0
   471  08A5  3401               	retlw	1
   472  08A6  3400               	retlw	0
   473  08A7  3400               	retlw	0
   474  08A8  3400               	retlw	0
   475  08A9  3401               	retlw	1
   476  08AA  3400               	retlw	0
   477  08AB  3400               	retlw	0
   478  08AC  3400               	retlw	0
   479  08AD  3400               	retlw	0
   480  08AE  3400               	retlw	0
   481  08AF  3400               	retlw	0
   482  08B0  3401               	retlw	1
   483  08B1  3400               	retlw	0
   484  08B2  3400               	retlw	0
   485  08B3  3400               	retlw	0
   486  08B4  3401               	retlw	1
   487  08B5  3401               	retlw	1
   488  08B6  3401               	retlw	1
   489  08B7  3400               	retlw	0
   490  08B8  3400               	retlw	0
   491  08B9  3400               	retlw	0
   492  08BA  3400               	retlw	0
   493  08BB  3400               	retlw	0
   494  08BC  3400               	retlw	0
   495  08BD  3400               	retlw	0
   496  08BE  3400               	retlw	0
   497  08BF  3400               	retlw	0
   498  08C0  3400               	retlw	0
   499  08C1  3401               	retlw	1
   500  08C2  3400               	retlw	0
   501  08C3  3400               	retlw	0
   502  08C4  3400               	retlw	0
   503  08C5  3401               	retlw	1
   504  08C6  3400               	retlw	0
   505  08C7  3400               	retlw	0
   506  08C8  3401               	retlw	1
   507  08C9  3401               	retlw	1
   508  08CA  3400               	retlw	0
   509  08CB  3400               	retlw	0
   510  08CC  3400               	retlw	0
   511  08CD  3400               	retlw	0
   512  08CE  3400               	retlw	0
   513  08CF  3400               	retlw	0
   514  08D0  3400               	retlw	0
   515  08D1  3400               	retlw	0
   516  08D2  3400               	retlw	0
   517  08D3  3400               	retlw	0
   518  08D4  3401               	retlw	1
   519  08D5  3401               	retlw	1
   520  08D6  3401               	retlw	1
   521  08D7  3400               	retlw	0
   522  08D8  3401               	retlw	1
   523  08D9  3400               	retlw	0
   524  08DA  3400               	retlw	0
   525  08DB  3400               	retlw	0
   526  08DC  3400               	retlw	0
   527  08DD  3400               	retlw	0
   528  08DE  3400               	retlw	0
   529  08DF  3400               	retlw	0
   530  08E0  3401               	retlw	1
   531  08E1  3401               	retlw	1
   532  08E2  3400               	retlw	0
   533  08E3  3400               	retlw	0
   534  08E4  3400               	retlw	0
   535  08E5  3401               	retlw	1
   536  08E6  3400               	retlw	0
   537  08E7  3400               	retlw	0
   538  08E8  3400               	retlw	0
   539  08E9  3401               	retlw	1
   540  08EA  3400               	retlw	0
   541  08EB  3400               	retlw	0
   542  08EC  3400               	retlw	0
   543  08ED  3400               	retlw	0
   544  08EE  3400               	retlw	0
   545  08EF  3400               	retlw	0
   546  08F0  3400               	retlw	0
   547  08F1  3400               	retlw	0
   548  08F2  3401               	retlw	1
   549  08F3  3400               	retlw	0
   550  08F4  3401               	retlw	1
   551  08F5  3401               	retlw	1
   552  08F6  3401               	retlw	1
   553  08F7  3400               	retlw	0
   554  08F8  3400               	retlw	0
   555  08F9  3400               	retlw	0
   556  08FA  3400               	retlw	0
   557  08FB  3400               	retlw	0
   558  08FC  3400               	retlw	0
   559  08FD  3400               	retlw	0
   560  08FE  3400               	retlw	0
   561  08FF  3400               	retlw	0
   562  0900  3400               	retlw	0
   563  0901  3401               	retlw	1
   564  0902  3400               	retlw	0
   565  0903  3400               	retlw	0
   566  0904  3400               	retlw	0
   567  0905  3401               	retlw	1
   568  0906  3400               	retlw	0
   569  0907  3400               	retlw	0
   570  0908  3400               	retlw	0
   571  0909  3401               	retlw	1
   572  090A  3401               	retlw	1
   573  090B  3400               	retlw	0
   574  090C  3400               	retlw	0
   575  090D  3400               	retlw	0
   576  090E  3400               	retlw	0
   577  090F  3400               	retlw	0
   578  0910  3400               	retlw	0
   579  0911  3401               	retlw	1
   580  0912  3401               	retlw	1
   581  0913  3400               	retlw	0
   582  0914  3400               	retlw	0
   583  0915  3401               	retlw	1
   584  0916  3401               	retlw	1
   585  0917  3400               	retlw	0
   586  0918  3400               	retlw	0
   587  0919  3400               	retlw	0
   588  091A  3400               	retlw	0
   589  091B  3400               	retlw	0
   590  091C  3400               	retlw	0
   591  091D  3400               	retlw	0
   592  091E  3400               	retlw	0
   593  091F  3400               	retlw	0
   594  0920  3400               	retlw	0
   595  0921  3400               	retlw	0
   596  0922  3400               	retlw	0
   597  0923  3400               	retlw	0
   598  0924  3400               	retlw	0
   599  0925  3401               	retlw	1
   600  0926  3401               	retlw	1
   601  0927  3400               	retlw	0
   602  0928  3400               	retlw	0
   603  0929  3401               	retlw	1
   604  092A  3400               	retlw	0
   605  092B  3400               	retlw	0
   606  092C  3400               	retlw	0
   607  092D  3400               	retlw	0
   608  092E  3400               	retlw	0
   609  092F  3400               	retlw	0
   610  0930  3400               	retlw	0
   611  0931  3400               	retlw	0
   612  0932  3400               	retlw	0
   613  0933  3400               	retlw	0
   614  0934  3401               	retlw	1
   615  0935  3401               	retlw	1
   616  0936  3400               	retlw	0
   617  0937  3400               	retlw	0
   618  0938  3400               	retlw	0
   619  0939  3401               	retlw	1
   620  093A  3400               	retlw	0
   621  093B  3400               	retlw	0
   622  093C  3400               	retlw	0
   623  093D  3400               	retlw	0
   624  093E  3400               	retlw	0
   625  093F  3400               	retlw	0
   626  0940  3400               	retlw	0
   627  0941  3401               	retlw	1
   628  0942  3400               	retlw	0
   629  0943  3400               	retlw	0
   630  0944  3401               	retlw	1
   631  0945  3401               	retlw	1
   632  0946  3400               	retlw	0
   633  0947  3400               	retlw	0
   634  0948  3400               	retlw	0
   635  0949  3400               	retlw	0
   636  094A  3400               	retlw	0
   637  094B  3400               	retlw	0
   638  094C  3400               	retlw	0
   639  094D  3400               	retlw	0
   640  094E  3400               	retlw	0
   641  094F  3400               	retlw	0
   642  0950  3400               	retlw	0
   643  0951  3401               	retlw	1
   644  0952  3400               	retlw	0
   645  0953  3400               	retlw	0
   646  0954  3400               	retlw	0
   647  0955  3401               	retlw	1
   648  0956  3401               	retlw	1
   649  0957  3400               	retlw	0
   650  0958  3400               	retlw	0
   651  0959  3400               	retlw	0
   652  095A  3400               	retlw	0
   653  095B  3400               	retlw	0
   654  095C  3400               	retlw	0
   655  095D  3400               	retlw	0
   656  095E  3400               	retlw	0
   657  095F  3400               	retlw	0
   658  0960  3400               	retlw	0
   659  0961  3401               	retlw	1
   660  0962  3400               	retlw	0
   661  0963  3400               	retlw	0
   662  0964  3401               	retlw	1
   663  0965  3401               	retlw	1
   664  0966  3401               	retlw	1
   665  0967  3400               	retlw	0
   666  0968  3400               	retlw	0
   667  0969  3401               	retlw	1
   668  096A  3400               	retlw	0
   669  096B  3400               	retlw	0
   670  096C  3400               	retlw	0
   671  096D  3400               	retlw	0
   672  096E  3400               	retlw	0
   673  096F  3400               	retlw	0
   674  0970  3401               	retlw	1
   675  0971  3401               	retlw	1
   676  0972  3401               	retlw	1
   677  0973  3400               	retlw	0
   678  0974  3400               	retlw	0
   679  0975  3401               	retlw	1
   680  0976  3400               	retlw	0
   681  0977  3400               	retlw	0
   682  0978  3400               	retlw	0
   683  0979  3401               	retlw	1
   684  097A  3400               	retlw	0
   685  097B  3400               	retlw	0
   686  097C  3400               	retlw	0
   687  097D  3400               	retlw	0
   688  097E  3400               	retlw	0
   689  097F  3400               	retlw	0
   690  0980  3400               	retlw	0
   691  0981  3400               	retlw	0
   692  0982  3401               	retlw	1
   693  0983  3400               	retlw	0
   694  0984  3401               	retlw	1
   695  0985  3401               	retlw	1
   696  0986  3401               	retlw	1
   697  0987  3400               	retlw	0
   698  0988  3400               	retlw	0
   699  0989  3400               	retlw	0
   700  098A  3401               	retlw	1
   701  098B  3400               	retlw	0
   702  098C  3400               	retlw	0
   703  098D  3400               	retlw	0
   704  098E  3400               	retlw	0
   705  098F  3400               	retlw	0
   706  0990  3400               	retlw	0
   707  0991  3401               	retlw	1
   708  0992  3400               	retlw	0
   709  0993  3400               	retlw	0
   710  0994  3400               	retlw	0
   711  0995  3401               	retlw	1
   712  0996  3400               	retlw	0
   713  0997  3400               	retlw	0
   714  0998  3401               	retlw	1
   715  0999  3401               	retlw	1
   716  099A  3401               	retlw	1
   717  099B  3400               	retlw	0
   718  099C  3400               	retlw	0
   719  099D  3400               	retlw	0
   720  099E  3400               	retlw	0
   721  099F  3400               	retlw	0
   722  09A0  3401               	retlw	1
   723  09A1  3400               	retlw	0
   724  09A2  3400               	retlw	0
   725  09A3  3400               	retlw	0
   726  09A4  3401               	retlw	1
   727  09A5  3401               	retlw	1
   728  09A6  3401               	retlw	1
   729  09A7  3400               	retlw	0
   730  09A8  3401               	retlw	1
   731  09A9  3400               	retlw	0
   732  09AA  3400               	retlw	0
   733  09AB  3400               	retlw	0
   734  09AC  3400               	retlw	0
   735  09AD  3400               	retlw	0
   736  09AE  3400               	retlw	0
   737  09AF  3400               	retlw	0
   738  09B0                     __end_of_g_matrix44:	
   739  09B0                     STR_59:	
   740  09B0  343D               	retlw	61	;'='
   741  09B1  343D               	retlw	61	;'='
   742  09B2  343D               	retlw	61	;'='
   743  09B3  343D               	retlw	61	;'='
   744  09B4  343D               	retlw	61	;'='
   745  09B5  343D               	retlw	61	;'='
   746  09B6  343D               	retlw	61	;'='
   747  09B7  343D               	retlw	61	;'='
   748  09B8  343D               	retlw	61	;'='
   749  09B9  343D               	retlw	61	;'='
   750  09BA  343D               	retlw	61	;'='
   751  09BB  343D               	retlw	61	;'='
   752  09BC  343D               	retlw	61	;'='
   753  09BD  343D               	retlw	61	;'='
   754  09BE  3466               	retlw	102	;'f'
   755  09BF  3469               	retlw	105	;'i'
   756  09C0  346E               	retlw	110	;'n'
   757  09C1  3464               	retlw	100	;'d'
   758  09C2  345F               	retlw	95	;'_'
   759  09C3  3462               	retlw	98	;'b'
   760  09C4  3465               	retlw	101	;'e'
   761  09C5  3473               	retlw	115	;'s'
   762  09C6  3474               	retlw	116	;'t'
   763  09C7  345F               	retlw	95	;'_'
   764  09C8  3473               	retlw	115	;'s'
   765  09C9  346F               	retlw	111	;'o'
   766  09CA  346C               	retlw	108	;'l'
   767  09CB  3475               	retlw	117	;'u'
   768  09CC  3474               	retlw	116	;'t'
   769  09CD  3469               	retlw	105	;'i'
   770  09CE  346F               	retlw	111	;'o'
   771  09CF  346E               	retlw	110	;'n'
   772  09D0  343D               	retlw	61	;'='
   773  09D1  343D               	retlw	61	;'='
   774  09D2  343D               	retlw	61	;'='
   775  09D3  343D               	retlw	61	;'='
   776  09D4  343D               	retlw	61	;'='
   777  09D5  343D               	retlw	61	;'='
   778  09D6  343D               	retlw	61	;'='
   779  09D7  343D               	retlw	61	;'='
   780  09D8  343D               	retlw	61	;'='
   781  09D9  343D               	retlw	61	;'='
   782  09DA  343D               	retlw	61	;'='
   783  09DB  343D               	retlw	61	;'='
   784  09DC  3400               	retlw	0
   785  09DD                     STR_33:	
   786  09DD  343D               	retlw	61	;'='
   787  09DE  343D               	retlw	61	;'='
   788  09DF  343D               	retlw	61	;'='
   789  09E0  343D               	retlw	61	;'='
   790  09E1  343D               	retlw	61	;'='
   791  09E2  343D               	retlw	61	;'='
   792  09E3  343D               	retlw	61	;'='
   793  09E4  343D               	retlw	61	;'='
   794  09E5  343D               	retlw	61	;'='
   795  09E6  343D               	retlw	61	;'='
   796  09E7  343D               	retlw	61	;'='
   797  09E8  343D               	retlw	61	;'='
   798  09E9  343D               	retlw	61	;'='
   799  09EA  343D               	retlw	61	;'='
   800  09EB  3469               	retlw	105	;'i'
   801  09EC  3473               	retlw	115	;'s'
   802  09ED  345F               	retlw	95	;'_'
   803  09EE  3476               	retlw	118	;'v'
   804  09EF  3461               	retlw	97	;'a'
   805  09F0  346C               	retlw	108	;'l'
   806  09F1  3469               	retlw	105	;'i'
   807  09F2  3464               	retlw	100	;'d'
   808  09F3  343D               	retlw	61	;'='
   809  09F4  343D               	retlw	61	;'='
   810  09F5  343D               	retlw	61	;'='
   811  09F6  343D               	retlw	61	;'='
   812  09F7  343D               	retlw	61	;'='
   813  09F8  343D               	retlw	61	;'='
   814  09F9  343D               	retlw	61	;'='
   815  09FA  343D               	retlw	61	;'='
   816  09FB  343D               	retlw	61	;'='
   817  09FC  343D               	retlw	61	;'='
   818  09FD  343D               	retlw	61	;'='
   819  09FE  343D               	retlw	61	;'='
   820  09FF  3400               	retlw	0
   821  0A00                     STR_29:	
   822  0A00  343D               	retlw	61	;'='
   823  0A01  343D               	retlw	61	;'='
   824  0A02  343D               	retlw	61	;'='
   825  0A03  343D               	retlw	61	;'='
   826  0A04  343D               	retlw	61	;'='
   827  0A05  343D               	retlw	61	;'='
   828  0A06  343D               	retlw	61	;'='
   829  0A07  343D               	retlw	61	;'='
   830  0A08  343D               	retlw	61	;'='
   831  0A09  343D               	retlw	61	;'='
   832  0A0A  343D               	retlw	61	;'='
   833  0A0B  343D               	retlw	61	;'='
   834  0A0C  343D               	retlw	61	;'='
   835  0A0D  343D               	retlw	61	;'='
   836  0A0E  3468               	retlw	104	;'h'
   837  0A0F  3469               	retlw	105	;'i'
   838  0A10  3474               	retlw	116	;'t'
   839  0A11  345F               	retlw	95	;'_'
   840  0A12  346C               	retlw	108	;'l'
   841  0A13  3461               	retlw	97	;'a'
   842  0A14  346E               	retlw	110	;'n'
   843  0A15  3464               	retlw	100	;'d'
   844  0A16  343D               	retlw	61	;'='
   845  0A17  343D               	retlw	61	;'='
   846  0A18  343D               	retlw	61	;'='
   847  0A19  343D               	retlw	61	;'='
   848  0A1A  343D               	retlw	61	;'='
   849  0A1B  343D               	retlw	61	;'='
   850  0A1C  343D               	retlw	61	;'='
   851  0A1D  343D               	retlw	61	;'='
   852  0A1E  343D               	retlw	61	;'='
   853  0A1F  343D               	retlw	61	;'='
   854  0A20  343D               	retlw	61	;'='
   855  0A21  343D               	retlw	61	;'='
   856  0A22  3400               	retlw	0
   857  0A23                     STR_6:	
   858  0A23  343C               	retlw	60	;'<'
   859  0A24  343C               	retlw	60	;'<'
   860  0A25  343C               	retlw	60	;'<'
   861  0A26  343C               	retlw	60	;'<'
   862  0A27  343C               	retlw	60	;'<'
   863  0A28  343C               	retlw	60	;'<'
   864  0A29  343C               	retlw	60	;'<'
   865  0A2A  343C               	retlw	60	;'<'
   866  0A2B  343C               	retlw	60	;'<'
   867  0A2C  343C               	retlw	60	;'<'
   868  0A2D  343C               	retlw	60	;'<'
   869  0A2E  343C               	retlw	60	;'<'
   870  0A2F  343C               	retlw	60	;'<'
   871  0A30  343C               	retlw	60	;'<'
   872  0A31  343C               	retlw	60	;'<'
   873  0A32  343C               	retlw	60	;'<'
   874  0A33  343C               	retlw	60	;'<'
   875  0A34  343C               	retlw	60	;'<'
   876  0A35  343C               	retlw	60	;'<'
   877  0A36  343C               	retlw	60	;'<'
   878  0A37  344D               	retlw	77	;'M'
   879  0A38  3441               	retlw	65	;'A'
   880  0A39  3454               	retlw	84	;'T'
   881  0A3A  3452               	retlw	82	;'R'
   882  0A3B  3449               	retlw	73	;'I'
   883  0A3C  3458               	retlw	88	;'X'
   884  0A3D  3434               	retlw	52	;'4'
   885  0A3E  3434               	retlw	52	;'4'
   886  0A3F  3400               	retlw	0
   887  0A40                     STR_22:	
   888  0A40  343C               	retlw	60	;'<'
   889  0A41  343C               	retlw	60	;'<'
   890  0A42  343C               	retlw	60	;'<'
   891  0A43  343C               	retlw	60	;'<'
   892  0A44  343C               	retlw	60	;'<'
   893  0A45  343C               	retlw	60	;'<'
   894  0A46  343C               	retlw	60	;'<'
   895  0A47  343C               	retlw	60	;'<'
   896  0A48  343C               	retlw	60	;'<'
   897  0A49  343C               	retlw	60	;'<'
   898  0A4A  343C               	retlw	60	;'<'
   899  0A4B  343C               	retlw	60	;'<'
   900  0A4C  343C               	retlw	60	;'<'
   901  0A4D  343C               	retlw	60	;'<'
   902  0A4E  343C               	retlw	60	;'<'
   903  0A4F  343C               	retlw	60	;'<'
   904  0A50  343C               	retlw	60	;'<'
   905  0A51  343C               	retlw	60	;'<'
   906  0A52  343C               	retlw	60	;'<'
   907  0A53  343C               	retlw	60	;'<'
   908  0A54  344D               	retlw	77	;'M'
   909  0A55  3441               	retlw	65	;'A'
   910  0A56  3454               	retlw	84	;'T'
   911  0A57  3452               	retlw	82	;'R'
   912  0A58  3449               	retlw	73	;'I'
   913  0A59  3458               	retlw	88	;'X'
   914  0A5A  3438               	retlw	56	;'8'
   915  0A5B  3438               	retlw	56	;'8'
   916  0A5C  3400               	retlw	0
   917  0A5D                     STR_14:	
   918  0A5D  3469               	retlw	105	;'i'
   919  0A5E  346E               	retlw	110	;'n'
   920  0A5F  3464               	retlw	100	;'d'
   921  0A60  3465               	retlw	101	;'e'
   922  0A61  3478               	retlw	120	;'x'
   923  0A62  3420               	retlw	32	;' '
   924  0A63  343D               	retlw	61	;'='
   925  0A64  3420               	retlw	32	;' '
   926  0A65  3425               	retlw	37	;'%'
   927  0A66  3464               	retlw	100	;'d'
   928  0A67  342C               	retlw	44	;','
   929  0A68  3420               	retlw	32	;' '
   930  0A69  3473               	retlw	115	;'s'
   931  0A6A  3475               	retlw	117	;'u'
   932  0A6B  3462               	retlw	98	;'b'
   933  0A6C  345F               	retlw	95	;'_'
   934  0A6D  3469               	retlw	105	;'i'
   935  0A6E  346E               	retlw	110	;'n'
   936  0A6F  3464               	retlw	100	;'d'
   937  0A70  3465               	retlw	101	;'e'
   938  0A71  3478               	retlw	120	;'x'
   939  0A72  3420               	retlw	32	;' '
   940  0A73  343D               	retlw	61	;'='
   941  0A74  3420               	retlw	32	;' '
   942  0A75  3425               	retlw	37	;'%'
   943  0A76  3464               	retlw	100	;'d'
   944  0A77  3400               	retlw	0
   945  0A78                     STR_28:	
   946  0A78  3464               	retlw	100	;'d'
   947  0A79  3465               	retlw	101	;'e'
   948  0A7A  346C               	retlw	108	;'l'
   949  0A7B  3465               	retlw	101	;'e'
   950  0A7C  3474               	retlw	116	;'t'
   951  0A7D  3465               	retlw	101	;'e'
   952  0A7E  345F               	retlw	95	;'_'
   953  0A7F  346D               	retlw	109	;'m'
   954  0A80  3461               	retlw	97	;'a'
   955  0A81  3474               	retlw	116	;'t'
   956  0A82  3472               	retlw	114	;'r'
   957  0A83  3469               	retlw	105	;'i'
   958  0A84  3478               	retlw	120	;'x'
   959  0A85  3420               	retlw	32	;' '
   960  0A86  3463               	retlw	99	;'c'
   961  0A87  346F               	retlw	111	;'o'
   962  0A88  3475               	retlw	117	;'u'
   963  0A89  346E               	retlw	110	;'n'
   964  0A8A  3474               	retlw	116	;'t'
   965  0A8B  3420               	retlw	32	;' '
   966  0A8C  343D               	retlw	61	;'='
   967  0A8D  3420               	retlw	32	;' '
   968  0A8E  3425               	retlw	37	;'%'
   969  0A8F  3464               	retlw	100	;'d'
   970  0A90  3400               	retlw	0
   971  0A91                     STR_30:	
   972  0A91  3468               	retlw	104	;'h'
   973  0A92  3469               	retlw	105	;'i'
   974  0A93  3474               	retlw	116	;'t'
   975  0A94  3431               	retlw	49	;'1'
   976  0A95  3420               	retlw	32	;' '
   977  0A96  3472               	retlw	114	;'r'
   978  0A97  346F               	retlw	111	;'o'
   979  0A98  3477               	retlw	119	;'w'
   980  0A99  3420               	retlw	32	;' '
   981  0A9A  343D               	retlw	61	;'='
   982  0A9B  3420               	retlw	32	;' '
   983  0A9C  3425               	retlw	37	;'%'
   984  0A9D  3464               	retlw	100	;'d'
   985  0A9E  342C               	retlw	44	;','
   986  0A9F  3420               	retlw	32	;' '
   987  0AA0  3463               	retlw	99	;'c'
   988  0AA1  346F               	retlw	111	;'o'
   989  0AA2  346C               	retlw	108	;'l'
   990  0AA3  3420               	retlw	32	;' '
   991  0AA4  343D               	retlw	61	;'='
   992  0AA5  3420               	retlw	32	;' '
   993  0AA6  3425               	retlw	37	;'%'
   994  0AA7  3464               	retlw	100	;'d'
   995  0AA8  3400               	retlw	0
   996  0AA9                     STR_31:	
   997  0AA9  3468               	retlw	104	;'h'
   998  0AAA  3469               	retlw	105	;'i'
   999  0AAB  3474               	retlw	116	;'t'
  1000  0AAC  3432               	retlw	50	;'2'
  1001  0AAD  3420               	retlw	32	;' '
  1002  0AAE  3472               	retlw	114	;'r'
  1003  0AAF  346F               	retlw	111	;'o'
  1004  0AB0  3477               	retlw	119	;'w'
  1005  0AB1  3420               	retlw	32	;' '
  1006  0AB2  343D               	retlw	61	;'='
  1007  0AB3  3420               	retlw	32	;' '
  1008  0AB4  3425               	retlw	37	;'%'
  1009  0AB5  3464               	retlw	100	;'d'
  1010  0AB6  342C               	retlw	44	;','
  1011  0AB7  3420               	retlw	32	;' '
  1012  0AB8  3463               	retlw	99	;'c'
  1013  0AB9  346F               	retlw	111	;'o'
  1014  0ABA  346C               	retlw	108	;'l'
  1015  0ABB  3420               	retlw	32	;' '
  1016  0ABC  343D               	retlw	61	;'='
  1017  0ABD  3420               	retlw	32	;' '
  1018  0ABE  3425               	retlw	37	;'%'
  1019  0ABF  3464               	retlw	100	;'d'
  1020  0AC0  3400               	retlw	0
  1021  0AC1                     STR_95:	
  1022  0AC1  3467               	retlw	103	;'g'
  1023  0AC2  345F               	retlw	95	;'_'
  1024  0AC3  3463               	retlw	99	;'c'
  1025  0AC4  3468               	retlw	104	;'h'
  1026  0AC5  3461               	retlw	97	;'a'
  1027  0AC6  3472               	retlw	114	;'r'
  1028  0AC7  345F               	retlw	95	;'_'
  1029  0AC8  3469               	retlw	105	;'i'
  1030  0AC9  346E               	retlw	110	;'n'
  1031  0ACA  3466               	retlw	102	;'f'
  1032  0ACB  346F               	retlw	111	;'o'
  1033  0ACC  345F               	retlw	95	;'_'
  1034  0ACD  3469               	retlw	105	;'i'
  1035  0ACE  346E               	retlw	110	;'n'
  1036  0ACF  3464               	retlw	100	;'d'
  1037  0AD0  3465               	retlw	101	;'e'
  1038  0AD1  3478               	retlw	120	;'x'
  1039  0AD2  3420               	retlw	32	;' '
  1040  0AD3  343D               	retlw	61	;'='
  1041  0AD4  3420               	retlw	32	;' '
  1042  0AD5  3425               	retlw	37	;'%'
  1043  0AD6  3464               	retlw	100	;'d'
  1044  0AD7  3400               	retlw	0
  1045  0AD8                     STR_72:	
  1046  0AD8  3457               	retlw	87	;'W'
  1047  0AD9  3441               	retlw	65	;'A'
  1048  0ADA  3452               	retlw	82	;'R'
  1049  0ADB  344E               	retlw	78	;'N'
  1050  0ADC  3449               	retlw	73	;'I'
  1051  0ADD  344E               	retlw	78	;'N'
  1052  0ADE  3447               	retlw	71	;'G'
  1053  0ADF  3420               	retlw	32	;' '
  1054  0AE0  3468               	retlw	104	;'h'
  1055  0AE1  3465               	retlw	101	;'e'
  1056  0AE2  3469               	retlw	105	;'i'
  1057  0AE3  3467               	retlw	103	;'g'
  1058  0AE4  3468               	retlw	104	;'h'
  1059  0AE5  3474               	retlw	116	;'t'
  1060  0AE6  3420               	retlw	32	;' '
  1061  0AE7  343E               	retlw	62	;'>'
  1062  0AE8  3420               	retlw	32	;' '
  1063  0AE9  3428               	retlw	40	;'('
  1064  0AEA  3425               	retlw	37	;'%'
  1065  0AEB  3464               	retlw	100	;'d'
  1066  0AEC  3429               	retlw	41	;')'
  1067  0AED  3400               	retlw	0
  1068  0AEE                     STR_16:	
  1069  0AEE  343C               	retlw	60	;'<'
  1070  0AEF  343C               	retlw	60	;'<'
  1071  0AF0  343C               	retlw	60	;'<'
  1072  0AF1  343C               	retlw	60	;'<'
  1073  0AF2  343C               	retlw	60	;'<'
  1074  0AF3  343C               	retlw	60	;'<'
  1075  0AF4  343C               	retlw	60	;'<'
  1076  0AF5  343C               	retlw	60	;'<'
  1077  0AF6  343C               	retlw	60	;'<'
  1078  0AF7  343C               	retlw	60	;'<'
  1079  0AF8  343C               	retlw	60	;'<'
  1080  0AF9  343C               	retlw	60	;'<'
  1081  0AFA  343C               	retlw	60	;'<'
  1082  0AFB  343C               	retlw	60	;'<'
  1083  0AFC  343C               	retlw	60	;'<'
  1084  0AFD  343C               	retlw	60	;'<'
  1085  0AFE  343C               	retlw	60	;'<'
  1086  0AFF  343C               	retlw	60	;'<'
  1087  0B00  343C               	retlw	60	;'<'
  1088  0B01  343C               	retlw	60	;'<'
  1089  0B02  3400               	retlw	0
  1090  0B03                     STR_10:	
  1091  0B03  343E               	retlw	62	;'>'
  1092  0B04  343E               	retlw	62	;'>'
  1093  0B05  343E               	retlw	62	;'>'
  1094  0B06  343E               	retlw	62	;'>'
  1095  0B07  343E               	retlw	62	;'>'
  1096  0B08  343E               	retlw	62	;'>'
  1097  0B09  343E               	retlw	62	;'>'
  1098  0B0A  343E               	retlw	62	;'>'
  1099  0B0B  343E               	retlw	62	;'>'
  1100  0B0C  343E               	retlw	62	;'>'
  1101  0B0D  343E               	retlw	62	;'>'
  1102  0B0E  343E               	retlw	62	;'>'
  1103  0B0F  343E               	retlw	62	;'>'
  1104  0B10  343E               	retlw	62	;'>'
  1105  0B11  343E               	retlw	62	;'>'
  1106  0B12  343E               	retlw	62	;'>'
  1107  0B13  343E               	retlw	62	;'>'
  1108  0B14  343E               	retlw	62	;'>'
  1109  0B15  343E               	retlw	62	;'>'
  1110  0B16  343E               	retlw	62	;'>'
  1111  0B17  3400               	retlw	0
  1112  0B18                     STR_50:	
  1113  0B18  3467               	retlw	103	;'g'
  1114  0B19  3465               	retlw	101	;'e'
  1115  0B1A  3474               	retlw	116	;'t'
  1116  0B1B  345F               	retlw	95	;'_'
  1117  0B1C  3468               	retlw	104	;'h'
  1118  0B1D  3469               	retlw	105	;'i'
  1119  0B1E  3467               	retlw	103	;'g'
  1120  0B1F  3468               	retlw	104	;'h'
  1121  0B20  3420               	retlw	32	;' '
  1122  0B21  3468               	retlw	104	;'h'
  1123  0B22  3465               	retlw	101	;'e'
  1124  0B23  3469               	retlw	105	;'i'
  1125  0B24  3467               	retlw	103	;'g'
  1126  0B25  3468               	retlw	104	;'h'
  1127  0B26  3474               	retlw	116	;'t'
  1128  0B27  3420               	retlw	32	;' '
  1129  0B28  343D               	retlw	61	;'='
  1130  0B29  3420               	retlw	32	;' '
  1131  0B2A  3425               	retlw	37	;'%'
  1132  0B2B  3464               	retlw	100	;'d'
  1133  0B2C  3400               	retlw	0
  1134  0B2D                     STR_51:	
  1135  0B2D  3467               	retlw	103	;'g'
  1136  0B2E  3465               	retlw	101	;'e'
  1137  0B2F  3474               	retlw	116	;'t'
  1138  0B30  345F               	retlw	95	;'_'
  1139  0B31  3468               	retlw	104	;'h'
  1140  0B32  3469               	retlw	105	;'i'
  1141  0B33  3467               	retlw	103	;'g'
  1142  0B34  3468               	retlw	104	;'h'
  1143  0B35  345F               	retlw	95	;'_'
  1144  0B36  3461               	retlw	97	;'a'
  1145  0B37  3466               	retlw	102	;'f'
  1146  0B38  3474               	retlw	116	;'t'
  1147  0B39  3465               	retlw	101	;'e'
  1148  0B3A  3472               	retlw	114	;'r'
  1149  0B3B  345F               	retlw	95	;'_'
  1150  0B3C  346D               	retlw	109	;'m'
  1151  0B3D  3465               	retlw	101	;'e'
  1152  0B3E  3472               	retlw	114	;'r'
  1153  0B3F  3467               	retlw	103	;'g'
  1154  0B40  3465               	retlw	101	;'e'
  1155  0B41  3400               	retlw	0
  1156  0B42                     STR_66:	
  1157  0B42  3463               	retlw	99	;'c'
  1158  0B43  346F               	retlw	111	;'o'
  1159  0B44  3475               	retlw	117	;'u'
  1160  0B45  346E               	retlw	110	;'n'
  1161  0B46  3474               	retlw	116	;'t'
  1162  0B47  343A               	retlw	58	;':'
  1163  0B48  3420               	retlw	32	;' '
  1164  0B49  3428               	retlw	40	;'('
  1165  0B4A  3425               	retlw	37	;'%'
  1166  0B4B  3464               	retlw	100	;'d'
  1167  0B4C  3429               	retlw	41	;')'
  1168  0B4D  3420               	retlw	32	;' '
  1169  0B4E  343D               	retlw	61	;'='
  1170  0B4F  343D               	retlw	61	;'='
  1171  0B50  3420               	retlw	32	;' '
  1172  0B51  3428               	retlw	40	;'('
  1173  0B52  3425               	retlw	37	;'%'
  1174  0B53  3464               	retlw	100	;'d'
  1175  0B54  3429               	retlw	41	;')'
  1176  0B55  3400               	retlw	0
  1177  0B56                     STR_12:	
  1178  0B56  3470               	retlw	112	;'p'
  1179  0B57  3472               	retlw	114	;'r'
  1180  0B58  3469               	retlw	105	;'i'
  1181  0B59  346E               	retlw	110	;'n'
  1182  0B5A  3474               	retlw	116	;'t'
  1183  0B5B  3466               	retlw	102	;'f'
  1184  0B5C  345F               	retlw	95	;'_'
  1185  0B5D  3461               	retlw	97	;'a'
  1186  0B5E  346C               	retlw	108	;'l'
  1187  0B5F  346C               	retlw	108	;'l'
  1188  0B60  345F               	retlw	95	;'_'
  1189  0B61  344D               	retlw	77	;'M'
  1190  0B62  3441               	retlw	65	;'A'
  1191  0B63  3454               	retlw	84	;'T'
  1192  0B64  3452               	retlw	82	;'R'
  1193  0B65  3449               	retlw	73	;'I'
  1194  0B66  3458               	retlw	88	;'X'
  1195  0B67  3434               	retlw	52	;'4'
  1196  0B68  3434               	retlw	52	;'4'
  1197  0B69  3400               	retlw	0
  1198  0B6A                     STR_42:	
  1199  0B6A  3452               	retlw	82	;'R'
  1200  0B6B  3449               	retlw	73	;'I'
  1201  0B6C  3447               	retlw	71	;'G'
  1202  0B6D  3448               	retlw	72	;'H'
  1203  0B6E  3454               	retlw	84	;'T'
  1204  0B6F  345F               	retlw	95	;'_'
  1205  0B70  344F               	retlw	79	;'O'
  1206  0B71  3456               	retlw	86	;'V'
  1207  0B72  3445               	retlw	69	;'E'
  1208  0B73  3452               	retlw	82	;'R'
  1209  0B74  345F               	retlw	95	;'_'
  1210  0B75  3442               	retlw	66	;'B'
  1211  0B76  344F               	retlw	79	;'O'
  1212  0B77  3455               	retlw	85	;'U'
  1213  0B78  344E               	retlw	78	;'N'
  1214  0B79  3444               	retlw	68	;'D'
  1215  0B7A  3441               	retlw	65	;'A'
  1216  0B7B  3452               	retlw	82	;'R'
  1217  0B7C  3459               	retlw	89	;'Y'
  1218  0B7D  3400               	retlw	0
  1219  0B7E                     STR_82:	
  1220  0B7E  3474               	retlw	116	;'t'
  1221  0B7F  3465               	retlw	101	;'e'
  1222  0B80  346D               	retlw	109	;'m'
  1223  0B81  3470               	retlw	112	;'p'
  1224  0B82  345F               	retlw	95	;'_'
  1225  0B83  3470               	retlw	112	;'p'
  1226  0B84  3472               	retlw	114	;'r'
  1227  0B85  3465               	retlw	101	;'e'
  1228  0B86  345F               	retlw	95	;'_'
  1229  0B87  3463               	retlw	99	;'c'
  1230  0B88  346F               	retlw	111	;'o'
  1231  0B89  3475               	retlw	117	;'u'
  1232  0B8A  346E               	retlw	110	;'n'
  1233  0B8B  3474               	retlw	116	;'t'
  1234  0B8C  3420               	retlw	32	;' '
  1235  0B8D  343D               	retlw	61	;'='
  1236  0B8E  3420               	retlw	32	;' '
  1237  0B8F  3425               	retlw	37	;'%'
  1238  0B90  3464               	retlw	100	;'d'
  1239  0B91  3400               	retlw	0
  1240  0B92                     STR_77:	
  1241  0B92  3468               	retlw	104	;'h'
  1242  0B93  346F               	retlw	111	;'o'
  1243  0B94  346C               	retlw	108	;'l'
  1244  0B95  3465               	retlw	101	;'e'
  1245  0B96  343A               	retlw	58	;':'
  1246  0B97  3420               	retlw	32	;' '
  1247  0B98  3428               	retlw	40	;'('
  1248  0B99  3425               	retlw	37	;'%'
  1249  0B9A  3464               	retlw	100	;'d'
  1250  0B9B  3429               	retlw	41	;')'
  1251  0B9C  3420               	retlw	32	;' '
  1252  0B9D  343D               	retlw	61	;'='
  1253  0B9E  343D               	retlw	61	;'='
  1254  0B9F  3420               	retlw	32	;' '
  1255  0BA0  3428               	retlw	40	;'('
  1256  0BA1  3425               	retlw	37	;'%'
  1257  0BA2  3464               	retlw	100	;'d'
  1258  0BA3  3429               	retlw	41	;')'
  1259  0BA4  3400               	retlw	0
  1260  0BA5                     STR_70:	
  1261  0BA5  3468               	retlw	104	;'h'
  1262  0BA6  3469               	retlw	105	;'i'
  1263  0BA7  3467               	retlw	103	;'g'
  1264  0BA8  3468               	retlw	104	;'h'
  1265  0BA9  343A               	retlw	58	;':'
  1266  0BAA  3420               	retlw	32	;' '
  1267  0BAB  3428               	retlw	40	;'('
  1268  0BAC  3425               	retlw	37	;'%'
  1269  0BAD  3464               	retlw	100	;'d'
  1270  0BAE  3429               	retlw	41	;')'
  1271  0BAF  3420               	retlw	32	;' '
  1272  0BB0  343D               	retlw	61	;'='
  1273  0BB1  343D               	retlw	61	;'='
  1274  0BB2  3420               	retlw	32	;' '
  1275  0BB3  3428               	retlw	40	;'('
  1276  0BB4  3425               	retlw	37	;'%'
  1277  0BB5  3464               	retlw	100	;'d'
  1278  0BB6  3429               	retlw	41	;')'
  1279  0BB7  3400               	retlw	0
  1280  0BB8                     STR_68:	
  1281  0BB8  3472               	retlw	114	;'r'
  1282  0BB9  3469               	retlw	105	;'i'
  1283  0BBA  3473               	retlw	115	;'s'
  1284  0BBB  346B               	retlw	107	;'k'
  1285  0BBC  343A               	retlw	58	;':'
  1286  0BBD  3420               	retlw	32	;' '
  1287  0BBE  3428               	retlw	40	;'('
  1288  0BBF  3425               	retlw	37	;'%'
  1289  0BC0  3464               	retlw	100	;'d'
  1290  0BC1  3429               	retlw	41	;')'
  1291  0BC2  3420               	retlw	32	;' '
  1292  0BC3  343D               	retlw	61	;'='
  1293  0BC4  343D               	retlw	61	;'='
  1294  0BC5  3420               	retlw	32	;' '
  1295  0BC6  3428               	retlw	40	;'('
  1296  0BC7  3425               	retlw	37	;'%'
  1297  0BC8  3464               	retlw	100	;'d'
  1298  0BC9  3429               	retlw	41	;')'
  1299  0BCA  3400               	retlw	0
  1300  0BCB                     STR_64:	
  1301  0BCB  3463               	retlw	99	;'c'
  1302  0BCC  346F               	retlw	111	;'o'
  1303  0BCD  3475               	retlw	117	;'u'
  1304  0BCE  346E               	retlw	110	;'n'
  1305  0BCF  3474               	retlw	116	;'t'
  1306  0BD0  343A               	retlw	58	;':'
  1307  0BD1  3420               	retlw	32	;' '
  1308  0BD2  3428               	retlw	40	;'('
  1309  0BD3  3425               	retlw	37	;'%'
  1310  0BD4  3464               	retlw	100	;'d'
  1311  0BD5  3429               	retlw	41	;')'
  1312  0BD6  3420               	retlw	32	;' '
  1313  0BD7  343E               	retlw	62	;'>'
  1314  0BD8  3420               	retlw	32	;' '
  1315  0BD9  3428               	retlw	40	;'('
  1316  0BDA  3425               	retlw	37	;'%'
  1317  0BDB  3464               	retlw	100	;'d'
  1318  0BDC  3429               	retlw	41	;')'
  1319  0BDD  3400               	retlw	0
  1320  0BDE                     STR_41:	
  1321  0BDE  344C               	retlw	76	;'L'
  1322  0BDF  3445               	retlw	69	;'E'
  1323  0BE0  3446               	retlw	70	;'F'
  1324  0BE1  3454               	retlw	84	;'T'
  1325  0BE2  345F               	retlw	95	;'_'
  1326  0BE3  344F               	retlw	79	;'O'
  1327  0BE4  3456               	retlw	86	;'V'
  1328  0BE5  3445               	retlw	69	;'E'
  1329  0BE6  3452               	retlw	82	;'R'
  1330  0BE7  345F               	retlw	95	;'_'
  1331  0BE8  3442               	retlw	66	;'B'
  1332  0BE9  344F               	retlw	79	;'O'
  1333  0BEA  3455               	retlw	85	;'U'
  1334  0BEB  344E               	retlw	78	;'N'
  1335  0BEC  3444               	retlw	68	;'D'
  1336  0BED  3441               	retlw	65	;'A'
  1337  0BEE  3452               	retlw	82	;'R'
  1338  0BEF  3459               	retlw	89	;'Y'
  1339  0BF0  3400               	retlw	0
  1340  0BF1                     STR_85:	
  1341  0BF1  3474               	retlw	116	;'t'
  1342  0BF2  3465               	retlw	101	;'e'
  1343  0BF3  346D               	retlw	109	;'m'
  1344  0BF4  3470               	retlw	112	;'p'
  1345  0BF5  345F               	retlw	95	;'_'
  1346  0BF6  3470               	retlw	112	;'p'
  1347  0BF7  3472               	retlw	114	;'r'
  1348  0BF8  3465               	retlw	101	;'e'
  1349  0BF9  345F               	retlw	95	;'_'
  1350  0BFA  3468               	retlw	104	;'h'
  1351  0BFB  346F               	retlw	111	;'o'
  1352  0BFC  346C               	retlw	108	;'l'
  1353  0BFD  3465               	retlw	101	;'e'
  1354  0BFE  3420               	retlw	32	;' '
  1355  0BFF  343D               	retlw	61	;'='
  1356  0C00  3420               	retlw	32	;' '
  1357  0C01  3425               	retlw	37	;'%'
  1358  0C02  3464               	retlw	100	;'d'
  1359  0C03  3400               	retlw	0
  1360  0C04                     STR_84:	
  1361  0C04  3474               	retlw	116	;'t'
  1362  0C05  3465               	retlw	101	;'e'
  1363  0C06  346D               	retlw	109	;'m'
  1364  0C07  3470               	retlw	112	;'p'
  1365  0C08  345F               	retlw	95	;'_'
  1366  0C09  3470               	retlw	112	;'p'
  1367  0C0A  3472               	retlw	114	;'r'
  1368  0C0B  3465               	retlw	101	;'e'
  1369  0C0C  345F               	retlw	95	;'_'
  1370  0C0D  3468               	retlw	104	;'h'
  1371  0C0E  3469               	retlw	105	;'i'
  1372  0C0F  3467               	retlw	103	;'g'
  1373  0C10  3468               	retlw	104	;'h'
  1374  0C11  3420               	retlw	32	;' '
  1375  0C12  343D               	retlw	61	;'='
  1376  0C13  3420               	retlw	32	;' '
  1377  0C14  3425               	retlw	37	;'%'
  1378  0C15  3464               	retlw	100	;'d'
  1379  0C16  3400               	retlw	0
  1380  0C17                     STR_83:	
  1381  0C17  3474               	retlw	116	;'t'
  1382  0C18  3465               	retlw	101	;'e'
  1383  0C19  346D               	retlw	109	;'m'
  1384  0C1A  3470               	retlw	112	;'p'
  1385  0C1B  345F               	retlw	95	;'_'
  1386  0C1C  3470               	retlw	112	;'p'
  1387  0C1D  3472               	retlw	114	;'r'
  1388  0C1E  3465               	retlw	101	;'e'
  1389  0C1F  345F               	retlw	95	;'_'
  1390  0C20  3472               	retlw	114	;'r'
  1391  0C21  3469               	retlw	105	;'i'
  1392  0C22  3473               	retlw	115	;'s'
  1393  0C23  346B               	retlw	107	;'k'
  1394  0C24  3420               	retlw	32	;' '
  1395  0C25  343D               	retlw	61	;'='
  1396  0C26  3420               	retlw	32	;' '
  1397  0C27  3425               	retlw	37	;'%'
  1398  0C28  3464               	retlw	100	;'d'
  1399  0C29  3400               	retlw	0
  1400  0C2A                     STR_71:	
  1401  0C2A  3468               	retlw	104	;'h'
  1402  0C2B  346F               	retlw	111	;'o'
  1403  0C2C  346C               	retlw	108	;'l'
  1404  0C2D  3465               	retlw	101	;'e'
  1405  0C2E  343A               	retlw	58	;':'
  1406  0C2F  3420               	retlw	32	;' '
  1407  0C30  3428               	retlw	40	;'('
  1408  0C31  3425               	retlw	37	;'%'
  1409  0C32  3464               	retlw	100	;'d'
  1410  0C33  3429               	retlw	41	;')'
  1411  0C34  3420               	retlw	32	;' '
  1412  0C35  343C               	retlw	60	;'<'
  1413  0C36  3420               	retlw	32	;' '
  1414  0C37  3428               	retlw	40	;'('
  1415  0C38  3425               	retlw	37	;'%'
  1416  0C39  3464               	retlw	100	;'d'
  1417  0C3A  3429               	retlw	41	;')'
  1418  0C3B  3400               	retlw	0
  1419  0C3C                     STR_69:	
  1420  0C3C  3468               	retlw	104	;'h'
  1421  0C3D  3469               	retlw	105	;'i'
  1422  0C3E  3467               	retlw	103	;'g'
  1423  0C3F  3468               	retlw	104	;'h'
  1424  0C40  343A               	retlw	58	;':'
  1425  0C41  3420               	retlw	32	;' '
  1426  0C42  3428               	retlw	40	;'('
  1427  0C43  3425               	retlw	37	;'%'
  1428  0C44  3464               	retlw	100	;'d'
  1429  0C45  3429               	retlw	41	;')'
  1430  0C46  3420               	retlw	32	;' '
  1431  0C47  343C               	retlw	60	;'<'
  1432  0C48  3420               	retlw	32	;' '
  1433  0C49  3428               	retlw	40	;'('
  1434  0C4A  3425               	retlw	37	;'%'
  1435  0C4B  3464               	retlw	100	;'d'
  1436  0C4C  3429               	retlw	41	;')'
  1437  0C4D  3400               	retlw	0
  1438  0C4E                     STR_67:	
  1439  0C4E  3472               	retlw	114	;'r'
  1440  0C4F  3469               	retlw	105	;'i'
  1441  0C50  3473               	retlw	115	;'s'
  1442  0C51  346B               	retlw	107	;'k'
  1443  0C52  343A               	retlw	58	;':'
  1444  0C53  3420               	retlw	32	;' '
  1445  0C54  3428               	retlw	40	;'('
  1446  0C55  3425               	retlw	37	;'%'
  1447  0C56  3464               	retlw	100	;'d'
  1448  0C57  3429               	retlw	41	;')'
  1449  0C58  3420               	retlw	32	;' '
  1450  0C59  343C               	retlw	60	;'<'
  1451  0C5A  3420               	retlw	32	;' '
  1452  0C5B  3428               	retlw	40	;'('
  1453  0C5C  3425               	retlw	37	;'%'
  1454  0C5D  3464               	retlw	100	;'d'
  1455  0C5E  3429               	retlw	41	;')'
  1456  0C5F  3400               	retlw	0
  1457  0C60                     STR_99:	
  1458  0C60  3430               	retlw	48	;'0'
  1459  0C61  3431               	retlw	49	;'1'
  1460  0C62  3432               	retlw	50	;'2'
  1461  0C63  3433               	retlw	51	;'3'
  1462  0C64  3434               	retlw	52	;'4'
  1463  0C65  3435               	retlw	53	;'5'
  1464  0C66  3436               	retlw	54	;'6'
  1465  0C67  3437               	retlw	55	;'7'
  1466  0C68  3438               	retlw	56	;'8'
  1467  0C69  3439               	retlw	57	;'9'
  1468  0C6A  3441               	retlw	65	;'A'
  1469  0C6B  3442               	retlw	66	;'B'
  1470  0C6C  3443               	retlw	67	;'C'
  1471  0C6D  3444               	retlw	68	;'D'
  1472  0C6E  3445               	retlw	69	;'E'
  1473  0C6F  3446               	retlw	70	;'F'
  1474  0C70  3400               	retlw	0
  1475  0C71                     STR_100:	
  1476  0C71  3430               	retlw	48	;'0'
  1477  0C72  3431               	retlw	49	;'1'
  1478  0C73  3432               	retlw	50	;'2'
  1479  0C74  3433               	retlw	51	;'3'
  1480  0C75  3434               	retlw	52	;'4'
  1481  0C76  3435               	retlw	53	;'5'
  1482  0C77  3436               	retlw	54	;'6'
  1483  0C78  3437               	retlw	55	;'7'
  1484  0C79  3438               	retlw	56	;'8'
  1485  0C7A  3439               	retlw	57	;'9'
  1486  0C7B  3461               	retlw	97	;'a'
  1487  0C7C  3462               	retlw	98	;'b'
  1488  0C7D  3463               	retlw	99	;'c'
  1489  0C7E  3464               	retlw	100	;'d'
  1490  0C7F  3465               	retlw	101	;'e'
  1491  0C80  3466               	retlw	102	;'f'
  1492  0C81  3400               	retlw	0
  1493  0C82                     STR_73:	
  1494  0C82  3468               	retlw	104	;'h'
  1495  0C83  3469               	retlw	105	;'i'
  1496  0C84  3467               	retlw	103	;'g'
  1497  0C85  3468               	retlw	104	;'h'
  1498  0C86  343A               	retlw	58	;':'
  1499  0C87  3420               	retlw	32	;' '
  1500  0C88  3428               	retlw	40	;'('
  1501  0C89  3425               	retlw	37	;'%'
  1502  0C8A  3464               	retlw	100	;'d'
  1503  0C8B  3429               	retlw	41	;')'
  1504  0C8C  342C               	retlw	44	;','
  1505  0C8D  3420               	retlw	32	;' '
  1506  0C8E  3428               	retlw	40	;'('
  1507  0C8F  3425               	retlw	37	;'%'
  1508  0C90  3464               	retlw	100	;'d'
  1509  0C91  3429               	retlw	41	;')'
  1510  0C92  3400               	retlw	0
  1511  0C93                     STR_63:	
  1512  0C93  3453               	retlw	83	;'S'
  1513  0C94  3474               	retlw	116	;'t'
  1514  0C95  3461               	retlw	97	;'a'
  1515  0C96  3472               	retlw	114	;'r'
  1516  0C97  3474               	retlw	116	;'t'
  1517  0C98  3420               	retlw	32	;' '
  1518  0C99  3465               	retlw	101	;'e'
  1519  0C9A  3476               	retlw	118	;'v'
  1520  0C9B  3461               	retlw	97	;'a'
  1521  0C9C  346C               	retlw	108	;'l'
  1522  0C9D  3475               	retlw	117	;'u'
  1523  0C9E  3461               	retlw	97	;'a'
  1524  0C9F  3474               	retlw	116	;'t'
  1525  0CA0  3469               	retlw	105	;'i'
  1526  0CA1  346F               	retlw	111	;'o'
  1527  0CA2  346E               	retlw	110	;'n'
  1528  0CA3  3400               	retlw	0
  1529  0CA4                     STR_49:	
  1530  0CA4  3472               	retlw	114	;'r'
  1531  0CA5  3469               	retlw	105	;'i'
  1532  0CA6  3467               	retlw	103	;'g'
  1533  0CA7  3468               	retlw	104	;'h'
  1534  0CA8  3474               	retlw	116	;'t'
  1535  0CA9  345F               	retlw	95	;'_'
  1536  0CAA  346D               	retlw	109	;'m'
  1537  0CAB  346F               	retlw	111	;'o'
  1538  0CAC  3473               	retlw	115	;'s'
  1539  0CAD  3474               	retlw	116	;'t'
  1540  0CAE  3420               	retlw	32	;' '
  1541  0CAF  343D               	retlw	61	;'='
  1542  0CB0  3420               	retlw	32	;' '
  1543  0CB1  3425               	retlw	37	;'%'
  1544  0CB2  3464               	retlw	100	;'d'
  1545  0CB3  3400               	retlw	0
  1546  0CB4                     STR_81:	
  1547  0CB4  3474               	retlw	116	;'t'
  1548  0CB5  3465               	retlw	101	;'e'
  1549  0CB6  346D               	retlw	109	;'m'
  1550  0CB7  3470               	retlw	112	;'p'
  1551  0CB8  345F               	retlw	95	;'_'
  1552  0CB9  3470               	retlw	112	;'p'
  1553  0CBA  3472               	retlw	114	;'r'
  1554  0CBB  3465               	retlw	101	;'e'
  1555  0CBC  345F               	retlw	95	;'_'
  1556  0CBD  3478               	retlw	120	;'x'
  1557  0CBE  3420               	retlw	32	;' '
  1558  0CBF  343D               	retlw	61	;'='
  1559  0CC0  3420               	retlw	32	;' '
  1560  0CC1  3425               	retlw	37	;'%'
  1561  0CC2  3464               	retlw	100	;'d'
  1562  0CC3  3400               	retlw	0
  1563  0CC4                     STR_65:	
  1564  0CC4  3468               	retlw	104	;'h'
  1565  0CC5  3465               	retlw	101	;'e'
  1566  0CC6  3469               	retlw	105	;'i'
  1567  0CC7  3467               	retlw	103	;'g'
  1568  0CC8  3468               	retlw	104	;'h'
  1569  0CC9  3474               	retlw	116	;'t'
  1570  0CCA  3420               	retlw	32	;' '
  1571  0CCB  343C               	retlw	60	;'<'
  1572  0CCC  343D               	retlw	61	;'='
  1573  0CCD  3420               	retlw	32	;' '
  1574  0CCE  3428               	retlw	40	;'('
  1575  0CCF  3425               	retlw	37	;'%'
  1576  0CD0  3464               	retlw	100	;'d'
  1577  0CD1  3429               	retlw	41	;')'
  1578  0CD2  3400               	retlw	0
  1579  0CD3                     STR_48:	
  1580  0CD3  346C               	retlw	108	;'l'
  1581  0CD4  3465               	retlw	101	;'e'
  1582  0CD5  3466               	retlw	102	;'f'
  1583  0CD6  3474               	retlw	116	;'t'
  1584  0CD7  345F               	retlw	95	;'_'
  1585  0CD8  346D               	retlw	109	;'m'
  1586  0CD9  346F               	retlw	111	;'o'
  1587  0CDA  3473               	retlw	115	;'s'
  1588  0CDB  3474               	retlw	116	;'t'
  1589  0CDC  3420               	retlw	32	;' '
  1590  0CDD  343D               	retlw	61	;'='
  1591  0CDE  3420               	retlw	32	;' '
  1592  0CDF  3425               	retlw	37	;'%'
  1593  0CE0  3464               	retlw	100	;'d'
  1594  0CE1  3400               	retlw	0
  1595  0CE2                     STR_44:	
  1596  0CE2  3478               	retlw	120	;'x'
  1597  0CE3  3420               	retlw	32	;' '
  1598  0CE4  343D               	retlw	61	;'='
  1599  0CE5  3420               	retlw	32	;' '
  1600  0CE6  3425               	retlw	37	;'%'
  1601  0CE7  3464               	retlw	100	;'d'
  1602  0CE8  342C               	retlw	44	;','
  1603  0CE9  3420               	retlw	32	;' '
  1604  0CEA  3479               	retlw	121	;'y'
  1605  0CEB  3420               	retlw	32	;' '
  1606  0CEC  343D               	retlw	61	;'='
  1607  0CED  3420               	retlw	32	;' '
  1608  0CEE  3425               	retlw	37	;'%'
  1609  0CEF  3464               	retlw	100	;'d'
  1610  0CF0  3400               	retlw	0
  1611  0CF1                     STR_62:	
  1612  0CF1  3456               	retlw	86	;'V'
  1613  0CF2  3461               	retlw	97	;'a'
  1614  0CF3  346C               	retlw	108	;'l'
  1615  0CF4  3469               	retlw	105	;'i'
  1616  0CF5  3464               	retlw	100	;'d'
  1617  0CF6  3420               	retlw	32	;' '
  1618  0CF7  3469               	retlw	105	;'i'
  1619  0CF8  346E               	retlw	110	;'n'
  1620  0CF9  3473               	retlw	115	;'s'
  1621  0CFA  3474               	retlw	116	;'t'
  1622  0CFB  3461               	retlw	97	;'a'
  1623  0CFC  346E               	retlw	110	;'n'
  1624  0CFD  3463               	retlw	99	;'c'
  1625  0CFE  3465               	retlw	101	;'e'
  1626  0CFF  3400               	retlw	0
  1627  0D00                     STR_60:	
  1628  0D00  3441               	retlw	65	;'A'
  1629  0D01  3466               	retlw	102	;'f'
  1630  0D02  3474               	retlw	116	;'t'
  1631  0D03  3465               	retlw	101	;'e'
  1632  0D04  3472               	retlw	114	;'r'
  1633  0D05  3420               	retlw	32	;' '
  1634  0D06  3466               	retlw	102	;'f'
  1635  0D07  3461               	retlw	97	;'a'
  1636  0D08  346C               	retlw	108	;'l'
  1637  0D09  346C               	retlw	108	;'l'
  1638  0D0A  3420               	retlw	32	;' '
  1639  0D0B  346F               	retlw	111	;'o'
  1640  0D0C  3466               	retlw	102	;'f'
  1641  0D0D  3466               	retlw	102	;'f'
  1642  0D0E  3400               	retlw	0
  1643  0D0F                     STR_58:	
  1644  0D0F  346E               	retlw	110	;'n'
  1645  0D10  3475               	retlw	117	;'u'
  1646  0D11  346D               	retlw	109	;'m'
  1647  0D12  345F               	retlw	95	;'_'
  1648  0D13  3468               	retlw	104	;'h'
  1649  0D14  346F               	retlw	111	;'o'
  1650  0D15  346C               	retlw	108	;'l'
  1651  0D16  3465               	retlw	101	;'e'
  1652  0D17  3420               	retlw	32	;' '
  1653  0D18  343D               	retlw	61	;'='
  1654  0D19  3420               	retlw	32	;' '
  1655  0D1A  3425               	retlw	37	;'%'
  1656  0D1B  3464               	retlw	100	;'d'
  1657  0D1C  3400               	retlw	0
  1658  0D1D                     STR_94:	
  1659  0D1D  3447               	retlw	71	;'G'
  1660  0D1E  3441               	retlw	65	;'A'
  1661  0D1F  344D               	retlw	77	;'M'
  1662  0D20  3445               	retlw	69	;'E'
  1663  0D21  3420               	retlw	32	;' '
  1664  0D22  344F               	retlw	79	;'O'
  1665  0D23  3456               	retlw	86	;'V'
  1666  0D24  3445               	retlw	69	;'E'
  1667  0D25  3452               	retlw	82	;'R'
  1668  0D26  3421               	retlw	33	;'!'
  1669  0D27  3421               	retlw	33	;'!'
  1670  0D28  3421               	retlw	33	;'!'
  1671  0D29  3400               	retlw	0
  1672  0D2A                     STR_97:	
  1673  0D2A  3468               	retlw	104	;'h'
  1674  0D2B  3469               	retlw	105	;'i'
  1675  0D2C  3474               	retlw	116	;'t'
  1676  0D2D  345F               	retlw	95	;'_'
  1677  0D2E  3472               	retlw	114	;'r'
  1678  0D2F  3465               	retlw	101	;'e'
  1679  0D30  3473               	retlw	115	;'s'
  1680  0D31  3420               	retlw	32	;' '
  1681  0D32  343D               	retlw	61	;'='
  1682  0D33  3420               	retlw	32	;' '
  1683  0D34  3425               	retlw	37	;'%'
  1684  0D35  3464               	retlw	100	;'d'
  1685  0D36  3400               	retlw	0
  1686  0D37                     STR_98:	
  1687  0D37  344D               	retlw	77	;'M'
  1688  0D38  3461               	retlw	97	;'a'
  1689  0D39  3469               	retlw	105	;'i'
  1690  0D3A  346E               	retlw	110	;'n'
  1691  0D3B  3420               	retlw	32	;' '
  1692  0D3C  3473               	retlw	115	;'s'
  1693  0D3D  3463               	retlw	99	;'c'
  1694  0D3E  3472               	retlw	114	;'r'
  1695  0D3F  3465               	retlw	101	;'e'
  1696  0D40  3465               	retlw	101	;'e'
  1697  0D41  346E               	retlw	110	;'n'
  1698  0D42  3400               	retlw	0
  1699  0D43                     STR_34:	
  1700  0D43  346E               	retlw	110	;'n'
  1701  0D44  346F               	retlw	111	;'o'
  1702  0D45  3474               	retlw	116	;'t'
  1703  0D46  3420               	retlw	32	;' '
  1704  0D47  3476               	retlw	118	;'v'
  1705  0D48  3461               	retlw	97	;'a'
  1706  0D49  346C               	retlw	108	;'l'
  1707  0D4A  3469               	retlw	105	;'i'
  1708  0D4B  3464               	retlw	100	;'d'
  1709  0D4C  3431               	retlw	49	;'1'
  1710  0D4D  3400               	retlw	0
  1711  0D4E                     STR_36:	
  1712  0D4E  346E               	retlw	110	;'n'
  1713  0D4F  346F               	retlw	111	;'o'
  1714  0D50  3474               	retlw	116	;'t'
  1715  0D51  3420               	retlw	32	;' '
  1716  0D52  3476               	retlw	118	;'v'
  1717  0D53  3461               	retlw	97	;'a'
  1718  0D54  346C               	retlw	108	;'l'
  1719  0D55  3469               	retlw	105	;'i'
  1720  0D56  3464               	retlw	100	;'d'
  1721  0D57  3432               	retlw	50	;'2'
  1722  0D58  3400               	retlw	0
  1723  0D59                     STR_38:	
  1724  0D59  346E               	retlw	110	;'n'
  1725  0D5A  346F               	retlw	111	;'o'
  1726  0D5B  3474               	retlw	116	;'t'
  1727  0D5C  3420               	retlw	32	;' '
  1728  0D5D  3476               	retlw	118	;'v'
  1729  0D5E  3461               	retlw	97	;'a'
  1730  0D5F  346C               	retlw	108	;'l'
  1731  0D60  3469               	retlw	105	;'i'
  1732  0D61  3464               	retlw	100	;'d'
  1733  0D62  3433               	retlw	51	;'3'
  1734  0D63  3400               	retlw	0
  1735  0D64                     STR_56:	
  1736  0D64  3473               	retlw	115	;'s'
  1737  0D65  3474               	retlw	116	;'t'
  1738  0D66  3461               	retlw	97	;'a'
  1739  0D67  3472               	retlw	114	;'r'
  1740  0D68  3474               	retlw	116	;'t'
  1741  0D69  3420               	retlw	32	;' '
  1742  0D6A  343D               	retlw	61	;'='
  1743  0D6B  3420               	retlw	32	;' '
  1744  0D6C  3425               	retlw	37	;'%'
  1745  0D6D  3464               	retlw	100	;'d'
  1746  0D6E  3400               	retlw	0
  1747  0D6F                     STR_43:	
  1748  0D6F  3466               	retlw	102	;'f'
  1749  0D70  3461               	retlw	97	;'a'
  1750  0D71  346C               	retlw	108	;'l'
  1751  0D72  346C               	retlw	108	;'l'
  1752  0D73  345F               	retlw	95	;'_'
  1753  0D74  346F               	retlw	111	;'o'
  1754  0D75  3466               	retlw	102	;'f'
  1755  0D76  3466               	retlw	102	;'f'
  1756  0D77  3431               	retlw	49	;'1'
  1757  0D78  3400               	retlw	0
  1758  0D79                     STR_45:	
  1759  0D79  3466               	retlw	102	;'f'
  1760  0D7A  3461               	retlw	97	;'a'
  1761  0D7B  346C               	retlw	108	;'l'
  1762  0D7C  346C               	retlw	108	;'l'
  1763  0D7D  345F               	retlw	95	;'_'
  1764  0D7E  346F               	retlw	111	;'o'
  1765  0D7F  3466               	retlw	102	;'f'
  1766  0D80  3466               	retlw	102	;'f'
  1767  0D81  3432               	retlw	50	;'2'
  1768  0D82  3400               	retlw	0
  1769  0D83                     STR_13:	
  1770  0D83  3473               	retlw	115	;'s'
  1771  0D84  3469               	retlw	105	;'i'
  1772  0D85  347A               	retlw	122	;'z'
  1773  0D86  3465               	retlw	101	;'e'
  1774  0D87  3420               	retlw	32	;' '
  1775  0D88  343D               	retlw	61	;'='
  1776  0D89  3420               	retlw	32	;' '
  1777  0D8A  3425               	retlw	37	;'%'
  1778  0D8B  3464               	retlw	100	;'d'
  1779  0D8C  3400               	retlw	0
  1780  0D8D                     STR_57:	
  1781  0D8D  3473               	retlw	115	;'s'
  1782  0D8E  3474               	retlw	116	;'t'
  1783  0D8F  346F               	retlw	111	;'o'
  1784  0D90  3470               	retlw	112	;'p'
  1785  0D91  3420               	retlw	32	;' '
  1786  0D92  343D               	retlw	61	;'='
  1787  0D93  3420               	retlw	32	;' '
  1788  0D94  3425               	retlw	37	;'%'
  1789  0D95  3464               	retlw	100	;'d'
  1790  0D96  3400               	retlw	0
  1791  0D97                     STR_53:	
  1792  0D97  3472               	retlw	114	;'r'
  1793  0D98  346F               	retlw	111	;'o'
  1794  0D99  3477               	retlw	119	;'w'
  1795  0D9A  3420               	retlw	32	;' '
  1796  0D9B  343D               	retlw	61	;'='
  1797  0D9C  3420               	retlw	32	;' '
  1798  0D9D  3425               	retlw	37	;'%'
  1799  0D9E  3464               	retlw	100	;'d'
  1800  0D9F  3400               	retlw	0
  1801  0DA0                     STR_32:	
  1802  0DA0  346E               	retlw	110	;'n'
  1803  0DA1  346F               	retlw	111	;'o'
  1804  0DA2  3474               	retlw	116	;'t'
  1805  0DA3  3420               	retlw	32	;' '
  1806  0DA4  3468               	retlw	104	;'h'
  1807  0DA5  3469               	retlw	105	;'i'
  1808  0DA6  3474               	retlw	116	;'t'
  1809  0DA7  3400               	retlw	0
  1810  0DA8                     STR_86:	
  1811  0DA8  3443               	retlw	67	;'C'
  1812  0DA9  3468               	retlw	104	;'h'
  1813  0DAA  346F               	retlw	111	;'o'
  1814  0DAB  3473               	retlw	115	;'s'
  1815  0DAC  3465               	retlw	101	;'e'
  1816  0DAD  346E               	retlw	110	;'n'
  1817  0DAE  3400               	retlw	0
  1818  0DAF                     STR_40:	
  1819  0DAF  3476               	retlw	118	;'v'
  1820  0DB0  3461               	retlw	97	;'a'
  1821  0DB1  346C               	retlw	108	;'l'
  1822  0DB2  3469               	retlw	105	;'i'
  1823  0DB3  3464               	retlw	100	;'d'
  1824  0DB4  3400               	retlw	0
  1825  0DB5                     STR_79:	
  1826  0DB5  344C               	retlw	76	;'L'
  1827  0DB6  346F               	retlw	111	;'o'
  1828  0DB7  346F               	retlw	111	;'o'
  1829  0DB8  3470               	retlw	112	;'p'
  1830  0DB9  3400               	retlw	0
  1831  0DBA                     STR_1:	
  1832  0DBA  340D               	retlw	13
  1833  0DBB  340A               	retlw	10
  1834  0DBC  3400               	retlw	0
  1835  0DBD                     STR_7:	
  1836  0DBD  342A               	retlw	42	;'*'
  1837  0DBE  3400               	retlw	0
  1838  0DBF                     STR_5:	
  1839  0DBF  343A               	retlw	58	;':'
  1840  0DC0  3400               	retlw	0
  1841  0DC1                     STR_8:	
  1842  0DC1  345F               	retlw	95	;'_'
  1843  0DC2  3400               	retlw	0
  1844  0DBC                     
  1845                           ; #config settings
  1846  0000                     
  1847                           	psect	nvBANK0
  1848  006E                     __pnvBANK0:	
  1849  006E                     _UQEnd:	
  1850  006E                     	ds	1
  1851  006F                     _UQFront:	
  1852  006F                     	ds	1
  1853  000C                     _PIR1bits	set	12
  1854  001A                     _RCREG	set	26
  1855  0018                     _RCSTAbits	set	24
  1856  0019                     _TXREG	set	25
  1857  005F                     _GIE	set	95
  1858  005E                     _PEIE	set	94
  1859  0029                     _RA1	set	41
  1860  002A                     _RA2	set	42
  1861  0099                     _SPBRG	set	153
  1862  0085                     _TRISAbits	set	133
  1863  0098                     _TXSTAbits	set	152
  1864  0465                     _RCIE	set	1125
  1865  0188                     _ANSELbits	set	392
  1866                           
  1867                           	psect	cinit
  1868  07BA                     start_initialization:	
  1869  07BA                     __initialization:	
  1870                           
  1871                           ; Clear objects allocated to BANK0
  1872  07BA  01E8               	clrf	__pbssBANK0& (0+127)
  1873  07BB  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  1874  07BC  01EA               	clrf	(__pbssBANK0+2)& (0+127)
  1875                           
  1876                           ; Clear objects allocated to BANK1
  1877  07BD  1683               	bsf	3,5	;RP0=1, select bank1
  1878  07BE  1303               	bcf	3,6	;RP1=0, select bank1
  1879  07BF  01E7               	clrf	__pbssBANK1& (0+127)
  1880  07C0  01E8               	clrf	(__pbssBANK1+1)& (0+127)
  1881  07C1  01E9               	clrf	(__pbssBANK1+2)& (0+127)
  1882  07C2  01EA               	clrf	(__pbssBANK1+3)& (0+127)
  1883  07C3  01EB               	clrf	(__pbssBANK1+4)& (0+127)
  1884  07C4  01EC               	clrf	(__pbssBANK1+5)& (0+127)
  1885                           
  1886                           ; Clear objects allocated to BANK3
  1887  07C5  1783               	bsf	3,7	;select IRP bank2
  1888  07C6  3090               	movlw	low __pbssBANK3
  1889  07C7  0084               	movwf	4
  1890  07C8  30B7               	movlw	low (__pbssBANK3+39)
  1891  07C9  160A  158A  2018  120A  118A  	fcall	clear_ram0
  1892                           
  1893                           ; Clear objects allocated to BANK2
  1894  07CE  3010               	movlw	low __pbssBANK2
  1895  07CF  0084               	movwf	4
  1896  07D0  3070               	movlw	low (__pbssBANK2+96)
  1897  07D1  160A  158A  2018  120A  118A  	fcall	clear_ram0
  1898                           
  1899                           ; Initialize objects allocated to BANK3
  1900  07D6  30D7               	movlw	low (__pdataBANK3+32)
  1901  07D7  00FD               	movwf	btemp+-1
  1902  07D8  3018               	movlw	high __pidataBANK3
  1903  07D9  00FE               	movwf	btemp
  1904  07DA  30E9               	movlw	low __pidataBANK3
  1905  07DB  00FF               	movwf	btemp+1
  1906  07DC  30B7               	movlw	low __pdataBANK3
  1907  07DD  0084               	movwf	4
  1908  07DE  160A  158A  2058  120A  118A  	fcall	init_ram0
  1909                           
  1910                           ; Initialize objects allocated to BANK1
  1911  07E3  1383               	bcf	3,7	;select IRP bank0
  1912  07E4  30F0               	movlw	low (__pdataBANK1+3)
  1913  07E5  00FD               	movwf	btemp+-1
  1914  07E6  3018               	movlw	high __pidataBANK1
  1915  07E7  00FE               	movwf	btemp
  1916  07E8  3008               	movlw	low __pidataBANK1
  1917  07E9  00FF               	movwf	btemp+1
  1918  07EA  30ED               	movlw	low __pdataBANK1
  1919  07EB  0084               	movwf	4
  1920  07EC  160A  158A  2058  120A  118A  	fcall	init_ram0
  1921                           
  1922                           ; Initialize objects allocated to BANK0
  1923  07F1  306E               	movlw	low (__pdataBANK0+3)
  1924  07F2  00FD               	movwf	btemp+-1
  1925  07F3  300D               	movlw	high __pidataBANK0
  1926  07F4  00FE               	movwf	btemp
  1927  07F5  30C4               	movlw	low __pidataBANK0
  1928  07F6  00FF               	movwf	btemp+1
  1929  07F7  306B               	movlw	low __pdataBANK0
  1930  07F8  0084               	movwf	4
  1931  07F9  160A  158A  2058   	fcall	init_ram0
  1932  07FC                     end_of_initialization:	
  1933                           ;End of C runtime variable initialization code
  1934                           
  1935  07FC                     __end_of__initialization:	
  1936  07FC  0183               	clrf	3
  1937  07FD  120A  118A  293C   	ljmp	_main	;jump to C main() function
  1938                           
  1939                           	psect	bssBANK0
  1940  0068                     __pbssBANK0:	
  1941  0068                     _cur_y:	
  1942  0068                     	ds	1
  1943  0069                     _g_char_info_index:	
  1944  0069                     	ds	1
  1945  006A                     _temp_y:	
  1946  006A                     	ds	1
  1947                           
  1948                           	psect	dataBANK0
  1949  006B                     __pdataBANK0:	
  1950  006B                     _temp_pre_risk:	
  1951  006B                     	ds	2
  1952  006D                     _temp_pre_x:	
  1953  006D                     	ds	1
  1954                           
  1955                           	psect	bssBANK1
  1956  00E7                     __pbssBANK1:	
  1957  00E7                     _temp_risk:	
  1958  00E7                     	ds	2
  1959  00E9                     _temp_count:	
  1960  00E9                     	ds	1
  1961  00EA                     _temp_high:	
  1962  00EA                     	ds	1
  1963  00EB                     _temp_hole:	
  1964  00EB                     	ds	1
  1965  00EC                     _temp_pre_count:	
  1966  00EC                     	ds	1
  1967                           
  1968                           	psect	dataBANK1
  1969  00ED                     __pdataBANK1:	
  1970  00ED                     _cur_x:	
  1971  00ED                     	ds	1
  1972  00EE                     _temp_pre_high:	
  1973  00EE                     	ds	1
  1974  00EF                     _temp_pre_hole:	
  1975  00EF                     	ds	1
  1976                           
  1977                           	psect	bssBANK3
  1978  0190                     __pbssBANK3:	
  1979  0190                     USARTWriteInt@F1617:	
  1980  0190                     	ds	5
  1981  0195                     _g_cur_matrix44:	
  1982  0195                     	ds	2
  1983  0197                     _g_debug:	
  1984  0197                     	ds	32
  1985                           
  1986                           	psect	dataBANK3
  1987  01B7                     __pdataBANK3:	
  1988  01B7                     _g_char_info:	
  1989  01B7                     	ds	27
  1990  01D2                     _randx:	
  1991  01D2                     	ds	4
  1992  01D6                     _tem_pre_sub_index:	
  1993  01D6                     	ds	1
  1994                           
  1995                           	psect	bssBANK2
  1996  0110                     __pbssBANK2:	
  1997  0110                     _URBuff:	
  1998  0110                     	ds	32
  1999  0130                     _g_matrix88:	
  2000  0130                     	ds	64
  2001                           
  2002                           	psect	clrtext
  2003  1818                     clear_ram0:	
  2004                           ;	Called with FSR containing the base address, and
  2005                           ;	W with the last address+1
  2006                           
  2007  1818  0064               	clrwdt	;clear the watchdog before getting into this loop
  2008  1819                     clrloop0:	
  2009  1819  0180               	clrf	0	;clear RAM location pointed to by FSR
  2010  181A  0A84               	incf	4,f	;increment pointer
  2011  181B  0604               	xorwf	4,w	;XOR with final address
  2012  181C  1903               	btfsc	3,2	;have we reached the end yet?
  2013  181D  3400               	retlw	0	;all done for this memory range, return
  2014  181E  0604               	xorwf	4,w	;XOR again to restore value
  2015  181F  2819               	goto	clrloop0	;do the next byte
  2016                           
  2017                           	psect	inittext
  2018  1854                     init_fetch0:	
  2019                           ;	Called with low address in FSR and high address in W
  2020                           
  2021  1854  087E               	movf	126,w
  2022  1855  008A               	movwf	10
  2023  1856  087F               	movf	127,w
  2024  1857  0082               	movwf	2
  2025  1858                     init_ram0:	
  2026                           ;Called with:
  2027                           ;	high address of idata address in btemp 
  2028                           ;	low address of idata address in btemp+1 
  2029                           ;	low address of data in FSR
  2030                           ;	high address + 1 of data in btemp-1
  2031                           
  2032  1858  2054  160A  158A   	fcall	init_fetch0
  2033  185B  0080               	movwf	0
  2034  185C  0A84               	incf	4,f
  2035  185D  0804               	movf	4,w
  2036  185E  067D               	xorwf	125,w
  2037  185F  1903               	btfsc	3,2
  2038  1860  3400               	retlw	0
  2039  1861  0AFF               	incf	127,f
  2040  1862  1903               	btfsc	3,2
  2041  1863  0AFE               	incf	126,f
  2042  1864  2858               	goto	init_ram0
  2043                           
  2044                           	psect	cstackBANK1
  2045  00A0                     __pcstackBANK1:	
  2046  00A0                     find_best_solution@left_most_index:	
  2047                           
  2048                           ; 1 bytes @ 0x0
  2049  00A0                     	ds	1
  2050  00A1                     find_best_solution@right_most_index:	
  2051                           
  2052                           ; 1 bytes @ 0x1
  2053  00A1                     	ds	1
  2054  00A2                     find_best_solution@res:	
  2055                           
  2056                           ; 1 bytes @ 0x2
  2057  00A2                     	ds	1
  2058  00A3                     find_best_solution@temp_matrix88:	
  2059                           
  2060                           ; 64 bytes @ 0x3
  2061  00A3                     	ds	64
  2062  00E3                     find_best_solution@temp_cur_matrix44:	
  2063                           
  2064                           ; 2 bytes @ 0x43
  2065  00E3                     	ds	2
  2066  00E5                     find_best_solution@tem_sub_index:	
  2067                           
  2068                           ; 1 bytes @ 0x45
  2069  00E5                     	ds	1
  2070  00E6                     find_best_solution@temp_x:	
  2071                           
  2072                           ; 1 bytes @ 0x46
  2073  00E6                     	ds	1
  2074                           
  2075                           	psect	cstackCOMMON
  2076  0070                     __pcstackCOMMON:	
  2077  0070                     ?_isdigit:	
  2078  0070                     ?_srand:	
  2079                           ; 1 bit 
  2080                           
  2081  0070                     ??_isdigit:	
  2082                           ; 1 bytes @ 0x0
  2083                           
  2084  0070                     ?_USARTInit:	
  2085                           ; 1 bytes @ 0x0
  2086                           
  2087  0070                     ?_USARTWriteChar:	
  2088                           ; 1 bytes @ 0x0
  2089                           
  2090  0070                     ??_USARTWriteChar:	
  2091                           ; 1 bytes @ 0x0
  2092                           
  2093  0070                     ?_SPI1_write:	
  2094                           ; 1 bytes @ 0x0
  2095                           
  2096  0070                     ??_SPI1_write:	
  2097                           ; 1 bytes @ 0x0
  2098                           
  2099  0070                     ?_Write_Byte:	
  2100                           ; 1 bytes @ 0x0
  2101                           
  2102  0070                     ?_printf_MATRIX7219:	
  2103                           ; 1 bytes @ 0x0
  2104                           
  2105  0070                     ?_MATRIX88_to_MATRIX7219:	
  2106                           ; 1 bytes @ 0x0
  2107                           
  2108  0070                     ?_printf_MATRIX88:	
  2109                           ; 1 bytes @ 0x0
  2110                           
  2111  0070                     ?_printf_Screen:	
  2112                           ; 1 bytes @ 0x0
  2113                           
  2114  0070                     ?_Clear_Matrix:	
  2115                           ; 1 bytes @ 0x0
  2116                           
  2117  0070                     ?_is_row_full:	
  2118                           ; 1 bytes @ 0x0
  2119                           
  2120  0070                     ?_is_row_empty:	
  2121                           ; 1 bytes @ 0x0
  2122                           
  2123  0070                     ?_clear:	
  2124                           ; 1 bytes @ 0x0
  2125                           
  2126  0070                     ?_merge:	
  2127                           ; 1 bytes @ 0x0
  2128                           
  2129  0070                     ?_char_info_index_rand:	
  2130                           ; 1 bytes @ 0x0
  2131                           
  2132  0070                     ?_get_high:	
  2133                           ; 1 bytes @ 0x0
  2134                           
  2135  0070                     ?_get_holes_after_merge:	
  2136                           ; 1 bytes @ 0x0
  2137                           
  2138  0070                     ?_find_best_solution:	
  2139                           ; 1 bytes @ 0x0
  2140                           
  2141  0070                     ?___bmul:	
  2142                           ; 1 bytes @ 0x0
  2143                           
  2144  0070                     ?_memset:	
  2145                           ; 1 bytes @ 0x0
  2146                           
  2147  0070                     ?_memcpy:	
  2148                           ; 2 bytes @ 0x0
  2149                           
  2150  0070                     ?___wmul:	
  2151                           ; 2 bytes @ 0x0
  2152                           
  2153  0070                     ?___lwdiv:	
  2154                           ; 2 bytes @ 0x0
  2155                           
  2156  0070                     ?___lmul:	
  2157                           ; 2 bytes @ 0x0
  2158                           
  2159  0070                     USARTWriteChar@ch:	
  2160                           ; 4 bytes @ 0x0
  2161                           
  2162  0070                     SPI1_write@data:	
  2163                           ; 1 bytes @ 0x0
  2164                           
  2165  0070                     Write_Byte@myValue:	
  2166                           ; 1 bytes @ 0x0
  2167                           
  2168  0070                     MATRIX88_to_MATRIX7219@matrix7219:	
  2169                           ; 1 bytes @ 0x0
  2170                           
  2171  0070                     is_row_empty@row:	
  2172                           ; 1 bytes @ 0x0
  2173                           
  2174  0070                     clear@y:	
  2175                           ; 1 bytes @ 0x0
  2176                           
  2177  0070                     merge@y:	
  2178                           ; 1 bytes @ 0x0
  2179                           
  2180  0070                     ___bmul@multiplicand:	
  2181                           ; 1 bytes @ 0x0
  2182                           
  2183  0070                     _isdigit$906:	
  2184                           ; 1 bytes @ 0x0
  2185                           
  2186  0070                     USARTInit@baud_rate:	
  2187                           ; 1 bytes @ 0x0
  2188                           
  2189  0070                     is_row_full@matrix:	
  2190                           ; 2 bytes @ 0x0
  2191                           
  2192  0070                     ___wmul@multiplier:	
  2193                           ; 2 bytes @ 0x0
  2194                           
  2195  0070                     ___lwdiv@divisor:	
  2196                           ; 2 bytes @ 0x0
  2197                           
  2198  0070                     memcpy@d1:	
  2199                           ; 2 bytes @ 0x0
  2200                           
  2201  0070                     memset@p1:	
  2202                           ; 2 bytes @ 0x0
  2203                           
  2204  0070                     srand@x:	
  2205                           ; 2 bytes @ 0x0
  2206                           
  2207  0070                     ___lmul@multiplier:	
  2208                           ; 2 bytes @ 0x0
  2209                           
  2210                           
  2211                           ; 4 bytes @ 0x0
  2212  0070                     	ds	1
  2213  0071                     ?_USARTWriteString:	
  2214  0071                     ??_Write_Byte:	
  2215                           ; 1 bytes @ 0x1
  2216                           
  2217  0071                     ??_MATRIX88_to_MATRIX7219:	
  2218                           ; 1 bytes @ 0x1
  2219                           
  2220  0071                     ??_is_row_empty:	
  2221                           ; 1 bytes @ 0x1
  2222                           
  2223  0071                     ??___bmul:	
  2224                           ; 1 bytes @ 0x1
  2225                           
  2226  0071                     Write_Byte@myColumn:	
  2227                           ; 1 bytes @ 0x1
  2228                           
  2229  0071                     isdigit@c:	
  2230                           ; 1 bytes @ 0x1
  2231                           
  2232  0071                     USARTWriteString@str:	
  2233                           ; 1 bytes @ 0x1
  2234                           
  2235  0071                     clear@matrix44:	
  2236                           ; 2 bytes @ 0x1
  2237                           
  2238  0071                     merge@matrix44:	
  2239                           ; 2 bytes @ 0x1
  2240                           
  2241                           
  2242                           ; 2 bytes @ 0x1
  2243  0071                     	ds	1
  2244  0072                     ??_srand:	
  2245  0072                     ??_USARTInit:	
  2246                           ; 1 bytes @ 0x2
  2247                           
  2248  0072                     ??_printf_MATRIX7219:	
  2249                           ; 1 bytes @ 0x2
  2250                           
  2251  0072                     is_row_full@row:	
  2252                           ; 1 bytes @ 0x2
  2253                           
  2254  0072                     ___bmul@product:	
  2255                           ; 1 bytes @ 0x2
  2256                           
  2257  0072                     ___wmul@multiplicand:	
  2258                           ; 1 bytes @ 0x2
  2259                           
  2260  0072                     ___lwdiv@dividend:	
  2261                           ; 2 bytes @ 0x2
  2262                           
  2263  0072                     memcpy@s1:	
  2264                           ; 2 bytes @ 0x2
  2265                           
  2266  0072                     memset@c:	
  2267                           ; 2 bytes @ 0x2
  2268                           
  2269                           
  2270                           ; 2 bytes @ 0x2
  2271  0072                     	ds	1
  2272  0073                     ??_USARTWriteString:	
  2273  0073                     ?_debug_str:	
  2274                           ; 1 bytes @ 0x3
  2275                           
  2276  0073                     ?_debug_line:	
  2277                           ; 1 bytes @ 0x3
  2278                           
  2279  0073                     ??_is_row_full:	
  2280                           ; 1 bytes @ 0x3
  2281                           
  2282  0073                     clear@matrix88:	
  2283                           ; 1 bytes @ 0x3
  2284                           
  2285  0073                     merge@matrix88:	
  2286                           ; 1 bytes @ 0x3
  2287                           
  2288  0073                     ___bmul@multiplier:	
  2289                           ; 1 bytes @ 0x3
  2290                           
  2291  0073                     debug_str@str:	
  2292                           ; 1 bytes @ 0x3
  2293                           
  2294  0073                     debug_line@str:	
  2295                           ; 2 bytes @ 0x3
  2296                           
  2297                           
  2298                           ; 2 bytes @ 0x3
  2299  0073                     	ds	1
  2300  0074                     ??_clear:	
  2301  0074                     ??_merge:	
  2302                           ; 1 bytes @ 0x4
  2303                           
  2304  0074                     ??___wmul:	
  2305                           ; 1 bytes @ 0x4
  2306                           
  2307  0074                     ??___lwdiv:	
  2308                           ; 1 bytes @ 0x4
  2309                           
  2310  0074                     printf_MATRIX7219@matrix:	
  2311                           ; 1 bytes @ 0x4
  2312                           
  2313  0074                     MATRIX88_to_MATRIX7219@matrix88:	
  2314                           ; 1 bytes @ 0x4
  2315                           
  2316  0074                     is_row_empty@matrix:	
  2317                           ; 1 bytes @ 0x4
  2318                           
  2319  0074                     ___wmul@product:	
  2320                           ; 1 bytes @ 0x4
  2321                           
  2322  0074                     memcpy@n:	
  2323                           ; 2 bytes @ 0x4
  2324                           
  2325  0074                     memset@n:	
  2326                           ; 2 bytes @ 0x4
  2327                           
  2328  0074                     ___lmul@multiplicand:	
  2329                           ; 2 bytes @ 0x4
  2330                           
  2331                           
  2332                           ; 4 bytes @ 0x4
  2333  0074                     	ds	1
  2334  0075                     ??_debug_str:	
  2335  0075                     ??_debug_line:	
  2336                           ; 1 bytes @ 0x5
  2337                           
  2338  0075                     debug_str@enable:	
  2339                           ; 1 bytes @ 0x5
  2340                           
  2341  0075                     debug_line@enable:	
  2342                           ; 1 bytes @ 0x5
  2343                           
  2344  0075                     printf_MATRIX7219@col:	
  2345                           ; 1 bytes @ 0x5
  2346                           
  2347  0075                     MATRIX88_to_MATRIX7219@mask:	
  2348                           ; 1 bytes @ 0x5
  2349                           
  2350  0075                     is_row_empty@col:	
  2351                           ; 1 bytes @ 0x5
  2352                           
  2353  0075                     ___lwdiv@quotient:	
  2354                           ; 1 bytes @ 0x5
  2355                           
  2356                           
  2357                           ; 2 bytes @ 0x5
  2358  0075                     	ds	1
  2359  0076                     ??_memset:	
  2360  0076                     ??_memcpy:	
  2361                           ; 1 bytes @ 0x6
  2362                           
  2363  0076                     ?_printf_debug_MATRIX44:	
  2364                           ; 1 bytes @ 0x6
  2365                           
  2366  0076                     ?_printf_debug_MATRIX88:	
  2367                           ; 1 bytes @ 0x6
  2368                           
  2369  0076                     ?_is_left_boundary:	
  2370                           ; 1 bytes @ 0x6
  2371                           
  2372  0076                     ?_is_right_boundary:	
  2373                           ; 1 bytes @ 0x6
  2374                           
  2375  0076                     MATRIX88_to_MATRIX7219@row:	
  2376                           ; 1 bytes @ 0x6
  2377                           
  2378  0076                     printf_debug_MATRIX44@lable:	
  2379                           ; 1 bytes @ 0x6
  2380                           
  2381  0076                     printf_debug_MATRIX88@lable:	
  2382                           ; 2 bytes @ 0x6
  2383                           
  2384  0076                     is_left_boundary@matrix44:	
  2385                           ; 2 bytes @ 0x6
  2386                           
  2387  0076                     is_right_boundary@matrix44:	
  2388                           ; 2 bytes @ 0x6
  2389                           
  2390  0076                     memset@p:	
  2391                           ; 2 bytes @ 0x6
  2392                           
  2393                           
  2394                           ; 2 bytes @ 0x6
  2395  0076                     	ds	1
  2396  0077                     MATRIX88_to_MATRIX7219@col:	
  2397  0077                     ___lwdiv@counter:	
  2398                           ; 1 bytes @ 0x7
  2399                           
  2400  0077                     memcpy@d:	
  2401                           ; 1 bytes @ 0x7
  2402                           
  2403                           
  2404                           ; 2 bytes @ 0x7
  2405  0077                     	ds	1
  2406  0078                     ??_printf_MATRIX88:	
  2407  0078                     ??___lmul:	
  2408                           ; 1 bytes @ 0x8
  2409                           
  2410  0078                     ?___lwmod:	
  2411                           ; 1 bytes @ 0x8
  2412                           
  2413  0078                     printf_debug_MATRIX44@x:	
  2414                           ; 2 bytes @ 0x8
  2415                           
  2416  0078                     is_row_full@col:	
  2417                           ; 1 bytes @ 0x8
  2418                           
  2419  0078                     is_left_boundary@matrix88:	
  2420                           ; 1 bytes @ 0x8
  2421                           
  2422  0078                     is_right_boundary@matrix88:	
  2423                           ; 1 bytes @ 0x8
  2424                           
  2425  0078                     clear@x:	
  2426                           ; 1 bytes @ 0x8
  2427                           
  2428  0078                     merge@x:	
  2429                           ; 1 bytes @ 0x8
  2430                           
  2431  0078                     printf_debug_MATRIX88@matrix:	
  2432                           ; 1 bytes @ 0x8
  2433                           
  2434  0078                     ___lwmod@divisor:	
  2435                           ; 2 bytes @ 0x8
  2436                           
  2437                           
  2438                           ; 2 bytes @ 0x8
  2439  0078                     	ds	1
  2440  0079                     ??_printf_Screen:	
  2441  0079                     ??_Clear_Matrix:	
  2442                           ; 1 bytes @ 0x9
  2443                           
  2444  0079                     ??_is_left_boundary:	
  2445                           ; 1 bytes @ 0x9
  2446                           
  2447  0079                     ??_is_right_boundary:	
  2448                           ; 1 bytes @ 0x9
  2449                           
  2450  0079                     printf_debug_MATRIX44@y:	
  2451                           ; 1 bytes @ 0x9
  2452                           
  2453  0079                     clear@row:	
  2454                           ; 1 bytes @ 0x9
  2455                           
  2456  0079                     merge@row:	
  2457                           ; 1 bytes @ 0x9
  2458                           
  2459  0079                     memcpy@s:	
  2460                           ; 1 bytes @ 0x9
  2461                           
  2462  0079                     ___lmul@product:	
  2463                           ; 2 bytes @ 0x9
  2464                           
  2465                           
  2466                           ; 4 bytes @ 0x9
  2467  0079                     	ds	1
  2468  007A                     printf_debug_MATRIX88@enable:	
  2469  007A                     clear@col:	
  2470                           ; 1 bytes @ 0xA
  2471                           
  2472  007A                     merge@col:	
  2473                           ; 1 bytes @ 0xA
  2474                           
  2475  007A                     printf_debug_MATRIX44@matrix:	
  2476                           ; 1 bytes @ 0xA
  2477                           
  2478  007A                     ___lwmod@dividend:	
  2479                           ; 2 bytes @ 0xA
  2480                           
  2481                           
  2482                           ; 2 bytes @ 0xA
  2483  007A                     	ds	1
  2484  007B                     ?_delete_row:	
  2485  007B                     printf_debug_MATRIX88@row:	
  2486                           ; 1 bytes @ 0xB
  2487                           
  2488  007B                     delete_row@matrix:	
  2489                           ; 1 bytes @ 0xB
  2490                           
  2491                           
  2492                           ; 2 bytes @ 0xB
  2493  007B                     	ds	1
  2494  007C                     ??___lwmod:	
  2495  007C                     printf_debug_MATRIX88@col:	
  2496                           ; 1 bytes @ 0xC
  2497                           
  2498                           
  2499                           ; 1 bytes @ 0xC
  2500  007C                     	ds	1
  2501  007D                     ??_printf_debug_Screen:	
  2502  007D                     ??___awmod:	
  2503                           ; 1 bytes @ 0xD
  2504                           
  2505  007D                     printf_debug_Screen@enable:	
  2506                           ; 1 bytes @ 0xD
  2507                           
  2508  007D                     delete_row@row:	
  2509                           ; 1 bytes @ 0xD
  2510                           
  2511  007D                     ___lwmod@counter:	
  2512                           ; 1 bytes @ 0xD
  2513                           
  2514                           
  2515                           ; 1 bytes @ 0xD
  2516  007D                     	ds	1
  2517  007E                     ??_debug_int1:	
  2518  007E                     ??_debug_int2:	
  2519                           ; 1 bytes @ 0xE
  2520                           
  2521  007E                     ??_char_info_index_rand:	
  2522                           ; 1 bytes @ 0xE
  2523                           
  2524                           
  2525                           	psect	cstackBANK0
  2526  0020                     __pcstackBANK0:	
  2527                           ; 1 bytes @ 0xE
  2528                           
  2529  0020                     ??_printf_debug_MATRIX44:	
  2530  0020                     ??_printf_debug_MATRIX88:	
  2531                           ; 1 bytes @ 0x0
  2532                           
  2533  0020                     ??_delete_row:	
  2534                           ; 1 bytes @ 0x0
  2535                           
  2536  0020                     ?_merge1:	
  2537                           ; 1 bytes @ 0x0
  2538                           
  2539  0020                     ?_sprintf:	
  2540                           ; 1 bytes @ 0x0
  2541                           
  2542  0020                     ?_rand:	
  2543                           ; 2 bytes @ 0x0
  2544                           
  2545  0020                     printf_MATRIX88@matrix88:	
  2546                           ; 2 bytes @ 0x0
  2547                           
  2548  0020                     is_left_boundary@x:	
  2549                           ; 1 bytes @ 0x0
  2550                           
  2551  0020                     is_right_boundary@x:	
  2552                           ; 1 bytes @ 0x0
  2553                           
  2554  0020                     merge1@y:	
  2555                           ; 1 bytes @ 0x0
  2556                           
  2557  0020                     sprintf@f:	
  2558                           ; 1 bytes @ 0x0
  2559                           
  2560                           
  2561                           ; 2 bytes @ 0x0
  2562  0020                     	ds	1
  2563  0021                     is_left_boundary@row:	
  2564  0021                     is_right_boundary@row:	
  2565                           ; 1 bytes @ 0x1
  2566                           
  2567  0021                     merge1@matrix44:	
  2568                           ; 1 bytes @ 0x1
  2569                           
  2570  0021                     printf_MATRIX88@matrix7219:	
  2571                           ; 2 bytes @ 0x1
  2572                           
  2573                           
  2574                           ; 8 bytes @ 0x1
  2575  0021                     	ds	1
  2576  0022                     ??_rand:	
  2577  0022                     is_left_boundary@col:	
  2578                           ; 1 bytes @ 0x2
  2579                           
  2580  0022                     is_right_boundary@col:	
  2581                           ; 1 bytes @ 0x2
  2582                           
  2583                           
  2584                           ; 1 bytes @ 0x2
  2585  0022                     	ds	1
  2586  0023                     merge1@matrix88_in:	
  2587                           
  2588                           ; 1 bytes @ 0x3
  2589  0023                     	ds	1
  2590  0024                     merge1@matrix88_out:	
  2591  0024                     delete_row@len:	
  2592                           ; 1 bytes @ 0x4
  2593                           
  2594                           
  2595                           ; 2 bytes @ 0x4
  2596  0024                     	ds	1
  2597  0025                     ?_printf_debug_Screen:	
  2598  0025                     ??_merge1:	
  2599                           ; 1 bytes @ 0x5
  2600                           
  2601  0025                     printf_debug_Screen@lable:	
  2602                           ; 1 bytes @ 0x5
  2603                           
  2604                           
  2605                           ; 2 bytes @ 0x5
  2606  0025                     	ds	1
  2607  0026                     delete_row@i:	
  2608                           
  2609                           ; 1 bytes @ 0x6
  2610  0026                     	ds	1
  2611  0027                     ?___awmod:	
  2612  0027                     ___awmod@divisor:	
  2613                           ; 2 bytes @ 0x7
  2614                           
  2615                           
  2616                           ; 2 bytes @ 0x7
  2617  0027                     	ds	1
  2618  0028                     ??_sprintf:	
  2619                           
  2620                           ; 1 bytes @ 0x8
  2621  0028                     	ds	1
  2622  0029                     printf_debug_MATRIX44@enable:	
  2623  0029                     merge1@x:	
  2624                           ; 1 bytes @ 0x9
  2625                           
  2626  0029                     ___awmod@dividend:	
  2627                           ; 1 bytes @ 0x9
  2628                           
  2629                           
  2630                           ; 2 bytes @ 0x9
  2631  0029                     	ds	1
  2632  002A                     printf_debug_MATRIX44@row:	
  2633  002A                     merge1@len:	
  2634                           ; 1 bytes @ 0xA
  2635                           
  2636                           
  2637                           ; 2 bytes @ 0xA
  2638  002A                     	ds	1
  2639  002B                     printf_debug_MATRIX44@col:	
  2640  002B                     ___awmod@counter:	
  2641                           ; 1 bytes @ 0xB
  2642                           
  2643  002B                     _sprintf$713:	
  2644                           ; 1 bytes @ 0xB
  2645                           
  2646                           
  2647                           ; 2 bytes @ 0xB
  2648  002B                     	ds	1
  2649  002C                     ?_printf_debug_cur_MATRIX44:	
  2650  002C                     merge1@row:	
  2651                           ; 1 bytes @ 0xC
  2652                           
  2653  002C                     ___awmod@sign:	
  2654                           ; 1 bytes @ 0xC
  2655                           
  2656  002C                     printf_debug_cur_MATRIX44@lable:	
  2657                           ; 1 bytes @ 0xC
  2658                           
  2659                           
  2660                           ; 2 bytes @ 0xC
  2661  002C                     	ds	1
  2662  002D                     merge1@col:	
  2663  002D                     _sprintf$714:	
  2664                           ; 1 bytes @ 0xD
  2665                           
  2666                           
  2667                           ; 2 bytes @ 0xD
  2668  002D                     	ds	1
  2669  002E                     printf_debug_cur_MATRIX44@x:	
  2670                           
  2671                           ; 1 bytes @ 0xE
  2672  002E                     	ds	1
  2673  002F                     printf_debug_cur_MATRIX44@y:	
  2674  002F                     _sprintf$720:	
  2675                           ; 1 bytes @ 0xF
  2676                           
  2677                           
  2678                           ; 2 bytes @ 0xF
  2679  002F                     	ds	1
  2680  0030                     ??_printf_debug_cur_MATRIX44:	
  2681                           
  2682                           ; 1 bytes @ 0x10
  2683  0030                     	ds	1
  2684  0031                     sprintf@idx:	
  2685                           
  2686                           ; 1 bytes @ 0x11
  2687  0031                     	ds	1
  2688  0032                     sprintf@cp:	
  2689                           
  2690                           ; 1 bytes @ 0x12
  2691  0032                     	ds	1
  2692  0033                     sprintf@len:	
  2693                           
  2694                           ; 2 bytes @ 0x13
  2695  0033                     	ds	2
  2696  0035                     sprintf@ap:	
  2697                           
  2698                           ; 1 bytes @ 0x15
  2699  0035                     	ds	1
  2700  0036                     sprintf@val:	
  2701                           
  2702                           ; 2 bytes @ 0x16
  2703  0036                     	ds	2
  2704  0038                     sprintf@prec:	
  2705                           
  2706                           ; 1 bytes @ 0x18
  2707  0038                     	ds	1
  2708  0039                     printf_debug_cur_MATRIX44@enable:	
  2709  0039                     sprintf@width:	
  2710                           ; 1 bytes @ 0x19
  2711                           
  2712                           
  2713                           ; 2 bytes @ 0x19
  2714  0039                     	ds	1
  2715  003A                     printf_debug_cur_MATRIX44@matrix:	
  2716                           
  2717                           ; 2 bytes @ 0x1A
  2718  003A                     	ds	1
  2719  003B                     sprintf@c:	
  2720                           
  2721                           ; 1 bytes @ 0x1B
  2722  003B                     	ds	1
  2723  003C                     sprintf@sp:	
  2724                           
  2725                           ; 1 bytes @ 0x1C
  2726  003C                     	ds	1
  2727  003D                     sprintf@flag:	
  2728                           
  2729                           ; 2 bytes @ 0x1D
  2730  003D                     	ds	2
  2731  003F                     ?_debug_int1:	
  2732  003F                     ?_debug_int2:	
  2733                           ; 1 bytes @ 0x1F
  2734                           
  2735  003F                     debug_int1@f:	
  2736                           ; 1 bytes @ 0x1F
  2737                           
  2738  003F                     debug_int2@f:	
  2739                           ; 2 bytes @ 0x1F
  2740                           
  2741                           
  2742                           ; 2 bytes @ 0x1F
  2743  003F                     	ds	2
  2744  0041                     debug_int1@i:	
  2745  0041                     debug_int2@i1:	
  2746                           ; 2 bytes @ 0x21
  2747                           
  2748                           
  2749                           ; 2 bytes @ 0x21
  2750  0041                     	ds	2
  2751  0043                     debug_int1@enable:	
  2752  0043                     debug_int2@i2:	
  2753                           ; 1 bytes @ 0x23
  2754                           
  2755                           
  2756                           ; 2 bytes @ 0x23
  2757  0043                     	ds	1
  2758  0044                     ?_delete_matrix:	
  2759  0044                     ?_left_most:	
  2760                           ; 1 bytes @ 0x24
  2761                           
  2762  0044                     ?_right_most:	
  2763                           ; 1 bytes @ 0x24
  2764                           
  2765  0044                     ??_get_high:	
  2766                           ; 1 bytes @ 0x24
  2767                           
  2768  0044                     ?_get_high_after_merge:	
  2769                           ; 1 bytes @ 0x24
  2770                           
  2771  0044                     ??_get_holes_after_merge:	
  2772                           ; 1 bytes @ 0x24
  2773                           
  2774  0044                     ?_evaluate:	
  2775                           ; 1 bytes @ 0x24
  2776                           
  2777  0044                     delete_matrix@matrix:	
  2778                           ; 2 bytes @ 0x24
  2779                           
  2780  0044                     left_most@matrix44:	
  2781                           ; 2 bytes @ 0x24
  2782                           
  2783  0044                     right_most@matrix44:	
  2784                           ; 2 bytes @ 0x24
  2785                           
  2786  0044                     get_high_after_merge@matrix:	
  2787                           ; 2 bytes @ 0x24
  2788                           
  2789                           
  2790                           ; 2 bytes @ 0x24
  2791  0044                     	ds	1
  2792  0045                     debug_int2@enable:	
  2793                           
  2794                           ; 1 bytes @ 0x25
  2795  0045                     	ds	1
  2796  0046                     ??_delete_matrix:	
  2797  0046                     ?_hit_land:	
  2798                           ; 1 bytes @ 0x26
  2799                           
  2800  0046                     ?_is_valid:	
  2801                           ; 1 bytes @ 0x26
  2802                           
  2803  0046                     ?_fall_off:	
  2804                           ; 1 bytes @ 0x26
  2805                           
  2806  0046                     ??_evaluate:	
  2807                           ; 1 bytes @ 0x26
  2808                           
  2809  0046                     ??_get_high_after_merge:	
  2810                           ; 1 bytes @ 0x26
  2811                           
  2812  0046                     hit_land@y:	
  2813                           ; 1 bytes @ 0x26
  2814                           
  2815  0046                     is_valid@y:	
  2816                           ; 1 bytes @ 0x26
  2817                           
  2818  0046                     fall_off@y:	
  2819                           ; 1 bytes @ 0x26
  2820                           
  2821  0046                     left_most@matrix88:	
  2822                           ; 1 bytes @ 0x26
  2823                           
  2824  0046                     right_most@matrix88:	
  2825                           ; 1 bytes @ 0x26
  2826                           
  2827  0046                     get_high@matrix:	
  2828                           ; 1 bytes @ 0x26
  2829                           
  2830                           
  2831                           ; 1 bytes @ 0x26
  2832  0046                     	ds	1
  2833  0047                     ??_left_most:	
  2834  0047                     ??_right_most:	
  2835                           ; 1 bytes @ 0x27
  2836                           
  2837  0047                     get_high@row:	
  2838                           ; 1 bytes @ 0x27
  2839                           
  2840  0047                     hit_land@matrix44:	
  2841                           ; 1 bytes @ 0x27
  2842                           
  2843  0047                     is_valid@matrix44:	
  2844                           ; 2 bytes @ 0x27
  2845                           
  2846  0047                     fall_off@matrix44:	
  2847                           ; 2 bytes @ 0x27
  2848                           
  2849                           
  2850                           ; 2 bytes @ 0x27
  2851  0047                     	ds	1
  2852  0048                     delete_matrix@count:	
  2853  0048                     left_most@x:	
  2854                           ; 1 bytes @ 0x28
  2855                           
  2856                           
  2857                           ; 1 bytes @ 0x28
  2858  0048                     	ds	1
  2859  0049                     delete_matrix@row:	
  2860  0049                     hit_land@matrix88:	
  2861                           ; 1 bytes @ 0x29
  2862                           
  2863  0049                     is_valid@matrix88:	
  2864                           ; 1 bytes @ 0x29
  2865                           
  2866  0049                     fall_off@matrix88:	
  2867                           ; 1 bytes @ 0x29
  2868                           
  2869  0049                     right_most@x:	
  2870                           ; 1 bytes @ 0x29
  2871                           
  2872                           
  2873                           ; 1 bytes @ 0x29
  2874  0049                     	ds	1
  2875  004A                     ??_hit_land:	
  2876  004A                     ??_is_valid:	
  2877                           ; 1 bytes @ 0x2A
  2878                           
  2879  004A                     ??_fall_off:	
  2880                           ; 1 bytes @ 0x2A
  2881                           
  2882  004A                     get_high_after_merge@y:	
  2883                           ; 1 bytes @ 0x2A
  2884                           
  2885  004A                     get_holes_after_merge@num_hole:	
  2886                           ; 1 bytes @ 0x2A
  2887                           
  2888  004A                     evaluate@risk:	
  2889                           ; 1 bytes @ 0x2A
  2890                           
  2891                           
  2892                           ; 2 bytes @ 0x2A
  2893  004A                     	ds	1
  2894  004B                     get_high_after_merge@col:	
  2895  004B                     get_holes_after_merge@stop:	
  2896                           ; 1 bytes @ 0x2B
  2897                           
  2898                           
  2899                           ; 1 bytes @ 0x2B
  2900  004B                     	ds	1
  2901  004C                     evaluate@full:	
  2902  004C                     get_high_after_merge@row:	
  2903                           ; 1 bytes @ 0x2C
  2904                           
  2905  004C                     get_holes_after_merge@matrix:	
  2906                           ; 1 bytes @ 0x2C
  2907                           
  2908                           
  2909                           ; 1 bytes @ 0x2C
  2910  004C                     	ds	1
  2911  004D                     evaluate@matrix:	
  2912  004D                     get_holes_after_merge@start:	
  2913                           ; 1 bytes @ 0x2D
  2914                           
  2915                           
  2916                           ; 1 bytes @ 0x2D
  2917  004D                     	ds	1
  2918  004E                     hit_land@x:	
  2919  004E                     is_valid@x:	
  2920                           ; 1 bytes @ 0x2E
  2921                           
  2922  004E                     fall_off@x:	
  2923                           ; 1 bytes @ 0x2E
  2924                           
  2925  004E                     evaluate@col:	
  2926                           ; 1 bytes @ 0x2E
  2927                           
  2928  004E                     get_holes_after_merge@col:	
  2929                           ; 1 bytes @ 0x2E
  2930                           
  2931                           
  2932                           ; 1 bytes @ 0x2E
  2933  004E                     	ds	1
  2934  004F                     hit_land@col:	
  2935  004F                     is_valid@row:	
  2936                           ; 1 bytes @ 0x2F
  2937                           
  2938  004F                     fall_off@col:	
  2939                           ; 1 bytes @ 0x2F
  2940                           
  2941  004F                     evaluate@row:	
  2942                           ; 1 bytes @ 0x2F
  2943                           
  2944  004F                     get_holes_after_merge@row:	
  2945                           ; 1 bytes @ 0x2F
  2946                           
  2947                           
  2948                           ; 1 bytes @ 0x2F
  2949  004F                     	ds	1
  2950  0050                     hit_land@row:	
  2951  0050                     is_valid@col:	
  2952                           ; 1 bytes @ 0x30
  2953                           
  2954  0050                     fall_off@row:	
  2955                           ; 1 bytes @ 0x30
  2956                           
  2957                           
  2958                           ; 1 bytes @ 0x30
  2959  0050                     	ds	1
  2960  0051                     ??_find_best_solution:	
  2961                           
  2962                           ; 1 bytes @ 0x31
  2963  0051                     	ds	7
  2964  0058                     ?_main:	
  2965  0058                     main@argc:	
  2966                           ; 2 bytes @ 0x38
  2967                           
  2968                           
  2969                           ; 2 bytes @ 0x38
  2970  0058                     	ds	2
  2971  005A                     main@argv:	
  2972                           
  2973                           ; 2 bytes @ 0x3A
  2974  005A                     	ds	2
  2975  005C                     ??_main:	
  2976                           
  2977                           ; 1 bytes @ 0x3C
  2978  005C                     	ds	9
  2979  0065                     main@Seed:	
  2980                           
  2981                           ; 2 bytes @ 0x45
  2982  0065                     	ds	2
  2983  0067                     main@hit_res:	
  2984                           
  2985                           ; 1 bytes @ 0x47
  2986  0067                     	ds	1
  2987                           
  2988                           	psect	maintext
  2989  013C                     __pmaintext:	
  2990 ;;
  2991 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
  2992 ;;
  2993 ;; *************** function _main *****************
  2994 ;; Defined at:
  2995 ;;		line 1296 in file "teris_16f886.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  argc            2   56[BANK0 ] int 
  2998 ;;  argv            2   58[BANK0 ] PTR PTR unsigned char 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  Seed            2   69[BANK0 ] unsigned int 
  3001 ;;  hit_res         1   71[BANK0 ] unsigned char 
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  2   56[BANK0 ] int 
  3004 ;; Registers used:
  3005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : B00/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3011 ;;      Params:         0       4       0       0       0
  3012 ;;      Locals:         0       3       0       0       0
  3013 ;;      Temps:          0       9       0       0       0
  3014 ;;      Totals:         0      16       0       0       0
  3015 ;;Total ram usage:       16 bytes
  3016 ;; Hardware stack levels required when called:    6
  3017 ;; This function calls:
  3018 ;;		_Clear_Matrix
  3019 ;;		_USARTInit
  3020 ;;		___bmul
  3021 ;;		_char_info_index_rand
  3022 ;;		_clear
  3023 ;;		_debug_int1
  3024 ;;		_debug_line
  3025 ;;		_delete_matrix
  3026 ;;		_find_best_solution
  3027 ;;		_hit_land
  3028 ;;		_merge
  3029 ;;		_printf_Screen
  3030 ;;		_printf_debug_MATRIX88
  3031 ;;		_srand
  3032 ;; This function is called by:
  3033 ;;		Startup code after reset
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           
  3038                           ;psect for function _main
  3039  013C                     _main:	
  3040                           
  3041                           ;teris_16f886.c: 1298: uint8_t hit_res;
  3042                           ;teris_16f886.c: 1323: (TRISAbits.TRISA3 = 0);
  3043                           
  3044                           ;incstack = 0
  3045                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3046  013C  1683               	bsf	3,5	;RP0=1, select bank1
  3047  013D  1303               	bcf	3,6	;RP1=0, select bank1
  3048  013E  1185               	bcf	5,3	;volatile
  3049                           
  3050                           ;teris_16f886.c: 1325: (TRISAbits.TRISA2 = 0);
  3051  013F  1105               	bcf	5,2	;volatile
  3052                           
  3053                           ;teris_16f886.c: 1327: (TRISAbits.TRISA1 = 0);
  3054  0140  1085               	bcf	5,1	;volatile
  3055                           
  3056                           ;teris_16f886.c: 1329: ANSELbits.ANS1 = 0;
  3057  0141  1683               	bsf	3,5	;RP0=1, select bank3
  3058  0142  1703               	bsf	3,6	;RP1=1, select bank3
  3059  0143  1088               	bcf	8,1	;volatile
  3060                           
  3061                           ;teris_16f886.c: 1330: ANSELbits.ANS2 = 0;
  3062  0144  1108               	bcf	8,2	;volatile
  3063                           
  3064                           ;teris_16f886.c: 1331: ANSELbits.ANS3 = 0;
  3065  0145  1188               	bcf	8,3	;volatile
  3066                           
  3067                           ;teris_16f886.c: 1332: RA2 = 1;
  3068  0146  1283               	bcf	3,5	;RP0=0, select bank0
  3069  0147  1303               	bcf	3,6	;RP1=0, select bank0
  3070  0148  1505               	bsf	5,2	;volatile
  3071                           
  3072                           ;teris_16f886.c: 1333: RA1 = 0;
  3073  0149  1085               	bcf	5,1	;volatile
  3074                           
  3075                           ;teris_16f886.c: 1336: USARTInit(9600);
  3076  014A  3080               	movlw	128
  3077  014B  00F0               	movwf	USARTInit@baud_rate
  3078  014C  3025               	movlw	37
  3079  014D  00F1               	movwf	USARTInit@baud_rate+1
  3080  014E  160A  158A  230D  120A  118A  	fcall	_USARTInit
  3081                           
  3082                           ;teris_16f886.c: 1339: unsigned Seed;
  3083                           ;teris_16f886.c: 1340: srand(Seed);
  3084  0153  1283               	bcf	3,5	;RP0=0, select bank0
  3085  0154  1303               	bcf	3,6	;RP1=0, select bank0
  3086  0155  0866               	movf	main@Seed+1,w
  3087  0156  00F1               	movwf	srand@x+1
  3088  0157  0865               	movf	main@Seed,w
  3089  0158  00F0               	movwf	srand@x
  3090  0159  160A  158A  2020  120A  118A  	fcall	_srand
  3091  015E  2969               	goto	l5801
  3092  015F                     l5815:	
  3093                           
  3094                           ;teris_16f886.c: 1352: {
  3095                           ;teris_16f886.c: 1353: debug_line(1, "GAME OVER!!!");
  3096  015F  301D               	movlw	low (STR_94| (0+32768))
  3097  0160  00F3               	movwf	debug_line@str
  3098  0161  308D               	movlw	high (STR_94| (0+32768))
  3099  0162  00F4               	movwf	debug_line@str+1
  3100  0163  3001               	movlw	1
  3101  0164  160A  158A  209D  120A  118A  	fcall	_debug_line
  3102  0169                     l5801:	
  3103                           ;teris_16f886.c: 1342: __start:
  3104                           
  3105                           ;teris_16f886.c: 1354: goto __start;
  3106                           
  3107                           
  3108                           ;teris_16f886.c: 1343: Clear_Matrix();
  3109  0169  160A  158A  2089  120A  118A  	fcall	_Clear_Matrix
  3110  016E                     l5803:	
  3111                           ;teris_16f886.c: 1344: while(1)
  3112                           
  3113                           
  3114                           ;teris_16f886.c: 1345: {
  3115                           ;teris_16f886.c: 1346: cur_y = 0;
  3116  016E  1283               	bcf	3,5	;RP0=0, select bank0
  3117  016F  1303               	bcf	3,6	;RP1=0, select bank0
  3118  0170  01E8               	clrf	_cur_y
  3119                           
  3120                           ;teris_16f886.c: 1347: cur_x = 2, cur_y = 0;
  3121  0171  3002               	movlw	2
  3122  0172  00DC               	movwf	??_main
  3123  0173  085C               	movf	??_main,w
  3124  0174  1683               	bsf	3,5	;RP0=1, select bank1
  3125  0175  1303               	bcf	3,6	;RP1=0, select bank1
  3126  0176  00ED               	movwf	_cur_x^(0+128)
  3127  0177  1283               	bcf	3,5	;RP0=0, select bank0
  3128  0178  1303               	bcf	3,6	;RP1=0, select bank0
  3129  0179  01E8               	clrf	_cur_y
  3130                           
  3131                           ;teris_16f886.c: 1348: g_char_info_index = char_info_index_rand();
  3132  017A  120A  118A  2004  120A  118A  	fcall	_char_info_index_rand
  3133  017F  1283               	bcf	3,5	;RP0=0, select bank0
  3134  0180  1303               	bcf	3,6	;RP1=0, select bank0
  3135  0181  00DC               	movwf	??_main
  3136  0182  085C               	movf	??_main,w
  3137  0183  00E9               	movwf	_g_char_info_index
  3138                           
  3139                           ;teris_16f886.c: 1350: debug_int1(1, "g_char_info_index = %d", g_char_info_index);
  3140  0184  30C1               	movlw	low (STR_95| (0+32768))
  3141  0185  00BF               	movwf	debug_int1@f
  3142  0186  308A               	movlw	high (STR_95| (0+32768))
  3143  0187  00C0               	movwf	debug_int1@f+1
  3144  0188  0869               	movf	_g_char_info_index,w
  3145  0189  00DC               	movwf	??_main
  3146  018A  01DD               	clrf	??_main+1
  3147  018B  085C               	movf	??_main,w
  3148  018C  00C1               	movwf	debug_int1@i
  3149  018D  085D               	movf	??_main+1,w
  3150  018E  00C2               	movwf	debug_int1@i+1
  3151  018F  3001               	movlw	1
  3152  0190  160A  158A  214F  120A  118A  	fcall	_debug_int1
  3153                           
  3154                           ;teris_16f886.c: 1351: if(find_best_solution() == 0)
  3155  0195  120A  118A  229C  120A  118A  	fcall	_find_best_solution
  3156  019A  3A00               	xorlw	0
  3157  019B  1903               	btfsc	3,2
  3158  019C  295F               	goto	l5815
  3159                           
  3160                           ;teris_16f886.c: 1355: }
  3161                           ;teris_16f886.c: 1356: g_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].start
      +                          _index + g_char_info[g_char_info_index].cur_index];
  3162  019D  3003               	movlw	3
  3163  019E  1283               	bcf	3,5	;RP0=0, select bank0
  3164  019F  1303               	bcf	3,6	;RP1=0, select bank0
  3165  01A0  00DC               	movwf	??_main
  3166  01A1  085C               	movf	??_main,w
  3167  01A2  00F0               	movwf	___bmul@multiplicand
  3168  01A3  0869               	movf	_g_char_info_index,w
  3169  01A4  160A  158A  2043  120A  118A  	fcall	___bmul
  3170  01A9  3E01               	addlw	1
  3171  01AA  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3172  01AB  0084               	movwf	4
  3173  01AC  1783               	bsf	3,7	;select IRP bank3
  3174  01AD  0800               	movf	0,w
  3175  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  3176  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  3177  01B0  00DD               	movwf	??_main+1
  3178  01B1  3003               	movlw	3
  3179  01B2  00DE               	movwf	??_main+2
  3180  01B3  085E               	movf	??_main+2,w
  3181  01B4  00F0               	movwf	___bmul@multiplicand
  3182  01B5  0869               	movf	_g_char_info_index,w
  3183  01B6  160A  158A  2043  120A  118A  	fcall	___bmul
  3184  01BB  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3185  01BC  0084               	movwf	4
  3186  01BD  1783               	bsf	3,7	;select IRP bank3
  3187  01BE  0800               	movf	0,w
  3188  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  3189  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  3190  01C1  075D               	addwf	??_main+1,w
  3191  01C2  00DF               	movwf	??_main+3
  3192  01C3  01E0               	clrf	??_main+4
  3193  01C4  0DE0               	rlf	??_main+4,f
  3194  01C5  0EDF               	swapf	??_main+3,f
  3195  01C6  0EE0               	swapf	??_main+4,f
  3196  01C7  30F0               	movlw	240
  3197  01C8  05E0               	andwf	??_main+4,f
  3198  01C9  085F               	movf	??_main+3,w
  3199  01CA  390F               	andlw	15
  3200  01CB  04E0               	iorwf	??_main+4,f
  3201  01CC  30F0               	movlw	240
  3202  01CD  05DF               	andwf	??_main+3,f
  3203  01CE  3030               	movlw	low (_g_matrix44| (0+32768))
  3204  01CF  00E1               	movwf	??_main+5
  3205  01D0  3088               	movlw	high (_g_matrix44| (0+32768))
  3206  01D1  00E2               	movwf	??_main+6
  3207  01D2  085F               	movf	??_main+3,w
  3208  01D3  0761               	addwf	??_main+5,w
  3209  01D4  00E3               	movwf	??_main+7
  3210  01D5  0860               	movf	??_main+4,w
  3211  01D6  1803               	skipnc
  3212  01D7  0A60               	incf	??_main+4,w
  3213  01D8  0762               	addwf	??_main+6,w
  3214  01D9  00E4               	movwf	??_main+8
  3215  01DA  0863               	movf	??_main+7,w
  3216  01DB  1683               	bsf	3,5	;RP0=1, select bank3
  3217  01DC  1703               	bsf	3,6	;RP1=1, select bank3
  3218  01DD  0095               	movwf	_g_cur_matrix44^(0+384)
  3219  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  3220  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  3221  01E0  0864               	movf	??_main+8,w
  3222  01E1  1683               	bsf	3,5	;RP0=1, select bank3
  3223  01E2  1703               	bsf	3,6	;RP1=1, select bank3
  3224  01E3  0096               	movwf	(_g_cur_matrix44+1)^(0+384)
  3225  01E4                     l5819:	
  3226                           ;teris_16f886.c: 1357: while(1)
  3227                           
  3228                           
  3229                           ;teris_16f886.c: 1358: {
  3230                           ;teris_16f886.c: 1359: hit_res = hit_land(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3231  01E4  1283               	bcf	3,5	;RP0=0, select bank0
  3232  01E5  1303               	bcf	3,6	;RP1=0, select bank0
  3233  01E6  0868               	movf	_cur_y,w
  3234  01E7  00DC               	movwf	??_main
  3235  01E8  085C               	movf	??_main,w
  3236  01E9  00C6               	movwf	hit_land@y
  3237  01EA  1683               	bsf	3,5	;RP0=1, select bank3
  3238  01EB  1703               	bsf	3,6	;RP1=1, select bank3
  3239  01EC  0815               	movf	_g_cur_matrix44^(0+384),w
  3240  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  3241  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  3242  01EF  00C7               	movwf	hit_land@matrix44
  3243  01F0  1683               	bsf	3,5	;RP0=1, select bank3
  3244  01F1  1703               	bsf	3,6	;RP1=1, select bank3
  3245  01F2  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3246  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  3247  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  3248  01F5  00C8               	movwf	hit_land@matrix44+1
  3249  01F6  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3250  01F7  00DD               	movwf	??_main+1
  3251  01F8  085D               	movf	??_main+1,w
  3252  01F9  00C9               	movwf	hit_land@matrix88
  3253  01FA  1683               	bsf	3,5	;RP0=1, select bank1
  3254  01FB  1303               	bcf	3,6	;RP1=0, select bank1
  3255  01FC  086D               	movf	_cur_x^(0+128),w
  3256  01FD  160A  118A  2142  120A  118A  	fcall	_hit_land
  3257  0202  1283               	bcf	3,5	;RP0=0, select bank0
  3258  0203  1303               	bcf	3,6	;RP1=0, select bank0
  3259  0204  00DE               	movwf	??_main+2
  3260  0205  085E               	movf	??_main+2,w
  3261  0206  00E7               	movwf	main@hit_res
  3262                           
  3263                           ;teris_16f886.c: 1360: debug_int1(1, "hit_res = %d", hit_res);
  3264  0207  302A               	movlw	low (STR_97| (0+32768))
  3265  0208  00BF               	movwf	debug_int1@f
  3266  0209  308D               	movlw	high (STR_97| (0+32768))
  3267  020A  00C0               	movwf	debug_int1@f+1
  3268  020B  0867               	movf	main@hit_res,w
  3269  020C  00DC               	movwf	??_main
  3270  020D  01DD               	clrf	??_main+1
  3271  020E  085C               	movf	??_main,w
  3272  020F  00C1               	movwf	debug_int1@i
  3273  0210  085D               	movf	??_main+1,w
  3274  0211  00C2               	movwf	debug_int1@i+1
  3275  0212  3001               	movlw	1
  3276  0213  160A  158A  214F  120A  118A  	fcall	_debug_int1
  3277                           
  3278                           ;teris_16f886.c: 1361: merge(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3279  0218  1283               	bcf	3,5	;RP0=0, select bank0
  3280  0219  1303               	bcf	3,6	;RP1=0, select bank0
  3281  021A  0868               	movf	_cur_y,w
  3282  021B  00DC               	movwf	??_main
  3283  021C  085C               	movf	??_main,w
  3284  021D  00F0               	movwf	merge@y
  3285  021E  1683               	bsf	3,5	;RP0=1, select bank3
  3286  021F  1703               	bsf	3,6	;RP1=1, select bank3
  3287  0220  0815               	movf	_g_cur_matrix44^(0+384),w
  3288  0221  00F1               	movwf	merge@matrix44
  3289  0222  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3290  0223  00F2               	movwf	merge@matrix44+1
  3291  0224  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3292  0225  1283               	bcf	3,5	;RP0=0, select bank0
  3293  0226  1303               	bcf	3,6	;RP1=0, select bank0
  3294  0227  00DD               	movwf	??_main+1
  3295  0228  085D               	movf	??_main+1,w
  3296  0229  00F3               	movwf	merge@matrix88
  3297  022A  1683               	bsf	3,5	;RP0=1, select bank1
  3298  022B  1303               	bcf	3,6	;RP1=0, select bank1
  3299  022C  086D               	movf	_cur_x^(0+128),w
  3300  022D  160A  158A  24CA  120A  118A  	fcall	_merge
  3301                           
  3302                           ;teris_16f886.c: 1362: if(hit_res == 1)
  3303  0232  1283               	bcf	3,5	;RP0=0, select bank0
  3304  0233  1303               	bcf	3,6	;RP1=0, select bank0
  3305  0234  0367               	decf	main@hit_res,w
  3306  0235  1D03               	btfss	3,2
  3307  0236  2A56               	goto	l5833
  3308                           
  3309                           ;teris_16f886.c: 1363: {
  3310                           ;teris_16f886.c: 1364: printf_Screen();
  3311  0237  160A  158A  200B  120A  118A  	fcall	_printf_Screen
  3312                           
  3313                           ;teris_16f886.c: 1368: _delay((unsigned long)((100)*(20000000/4000.0)));
  3314  023C  3003               	movlw	3
  3315  023D  1283               	bcf	3,5	;RP0=0, select bank0
  3316  023E  1303               	bcf	3,6	;RP1=0, select bank0
  3317  023F  00DE               	movwf	??_main+2
  3318  0240  308A               	movlw	138
  3319  0241  00DD               	movwf	??_main+1
  3320  0242  3056               	movlw	86
  3321  0243  00DC               	movwf	??_main
  3322  0244                     u8517:	
  3323  0244  0BDC               	decfsz	??_main,f
  3324  0245  2A44               	goto	u8517
  3325  0246  0BDD               	decfsz	??_main+1,f
  3326  0247  2A44               	goto	u8517
  3327  0248  0BDE               	decfsz	??_main+2,f
  3328  0249  2A44               	goto	u8517
  3329  024A  2A4B               	nop2
  3330                           
  3331                           ;teris_16f886.c: 1370: delete_matrix(&g_matrix88);
  3332  024B  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3333  024C  1283               	bcf	3,5	;RP0=0, select bank0
  3334  024D  1303               	bcf	3,6	;RP1=0, select bank0
  3335  024E  00C4               	movwf	delete_matrix@matrix
  3336  024F  3001               	movlw	1
  3337  0250  00C5               	movwf	delete_matrix@matrix+1
  3338  0251  160A  158A  239C  120A  118A  	fcall	_delete_matrix
  3339  0256                     l5833:	
  3340                           
  3341                           ;teris_16f886.c: 1371: }
  3342                           ;teris_16f886.c: 1372: printf_debug_MATRIX88(1, "Main screen", &g_matrix88);
  3343  0256  3037               	movlw	low (STR_98| (0+32768))
  3344  0257  00F6               	movwf	printf_debug_MATRIX88@lable
  3345  0258  308D               	movlw	high (STR_98| (0+32768))
  3346  0259  00F7               	movwf	printf_debug_MATRIX88@lable+1
  3347  025A  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3348  025B  00F8               	movwf	printf_debug_MATRIX88@matrix
  3349  025C  3001               	movlw	1
  3350  025D  00F9               	movwf	printf_debug_MATRIX88@matrix+1
  3351  025E  3001               	movlw	1
  3352  025F  160A  118A  2028  120A  118A  	fcall	_printf_debug_MATRIX88
  3353                           
  3354                           ;teris_16f886.c: 1373: printf_Screen();
  3355  0264  160A  158A  200B  120A  118A  	fcall	_printf_Screen
  3356                           
  3357                           ;teris_16f886.c: 1374: if(hit_res == 0)
  3358  0269  1283               	bcf	3,5	;RP0=0, select bank0
  3359  026A  1303               	bcf	3,6	;RP1=0, select bank0
  3360  026B  0867               	movf	main@hit_res,w
  3361  026C  1D03               	btfss	3,2
  3362  026D  296E               	goto	l5803
  3363                           
  3364                           ;teris_16f886.c: 1375: {
  3365                           ;teris_16f886.c: 1376: clear(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3366  026E  0868               	movf	_cur_y,w
  3367  026F  00DC               	movwf	??_main
  3368  0270  085C               	movf	??_main,w
  3369  0271  00F0               	movwf	clear@y
  3370  0272  1683               	bsf	3,5	;RP0=1, select bank3
  3371  0273  1703               	bsf	3,6	;RP1=1, select bank3
  3372  0274  0815               	movf	_g_cur_matrix44^(0+384),w
  3373  0275  00F1               	movwf	clear@matrix44
  3374  0276  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3375  0277  00F2               	movwf	clear@matrix44+1
  3376  0278  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3377  0279  1283               	bcf	3,5	;RP0=0, select bank0
  3378  027A  1303               	bcf	3,6	;RP1=0, select bank0
  3379  027B  00DD               	movwf	??_main+1
  3380  027C  085D               	movf	??_main+1,w
  3381  027D  00F3               	movwf	clear@matrix88
  3382  027E  1683               	bsf	3,5	;RP0=1, select bank1
  3383  027F  1303               	bcf	3,6	;RP1=0, select bank1
  3384  0280  086D               	movf	_cur_x^(0+128),w
  3385  0281  160A  158A  247B  120A  118A  	fcall	_clear
  3386                           
  3387                           ;teris_16f886.c: 1381: }
  3388                           ;teris_16f886.c: 1385: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3389                           
  3390                           ;teris_16f886.c: 1378: else
  3391                           ;teris_16f886.c: 1379: {
  3392                           ;teris_16f886.c: 1380: break;
  3393                           
  3394                           ;teris_16f886.c: 1377: }
  3395  0286  301A               	movlw	26
  3396  0287  1283               	bcf	3,5	;RP0=0, select bank0
  3397  0288  1303               	bcf	3,6	;RP1=0, select bank0
  3398  0289  00DE               	movwf	??_main+2
  3399  028A  305E               	movlw	94
  3400  028B  00DD               	movwf	??_main+1
  3401  028C  3086               	movlw	134
  3402  028D  00DC               	movwf	??_main
  3403  028E                     u8527:	
  3404  028E  0BDC               	decfsz	??_main,f
  3405  028F  2A8E               	goto	u8527
  3406  0290  0BDD               	decfsz	??_main+1,f
  3407  0291  2A8E               	goto	u8527
  3408  0292  0BDE               	decfsz	??_main+2,f
  3409  0293  2A8E               	goto	u8527
  3410  0294  0000               	nop
  3411                           
  3412                           ;teris_16f886.c: 1387: cur_y++;
  3413  0295  3001               	movlw	1
  3414  0296  1283               	bcf	3,5	;RP0=0, select bank0
  3415  0297  1303               	bcf	3,6	;RP1=0, select bank0
  3416  0298  00DC               	movwf	??_main
  3417  0299  085C               	movf	??_main,w
  3418  029A  07E8               	addwf	_cur_y,f
  3419  029B  29E4               	goto	l5819
  3420  029C                     __end_of_main:	
  3421                           ;teris_16f886.c: 1397: return 0;
  3422                           ;	Return value of _main is never used
  3423                           
  3424                           ;teris_16f886.c: 1388: }
  3425                           ;teris_16f886.c: 1389: }
  3426                           ;teris_16f886.c: 1390: __exit:
  3427                           
  3428                           
  3429                           	psect	text1
  3430  1820                     __ptext1:	
  3431 ;; *************** function _srand *****************
  3432 ;; Defined at:
  3433 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;  x               2    0[COMMON] unsigned int 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;		None
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  1    wreg      void 
  3440 ;; Registers used:
  3441 ;;		wreg
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3447 ;;      Params:         2       0       0       0       0
  3448 ;;      Locals:         0       0       0       0       0
  3449 ;;      Temps:          0       0       0       0       0
  3450 ;;      Totals:         2       0       0       0       0
  3451 ;;Total ram usage:        2 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; This function calls:
  3454 ;;		Nothing
  3455 ;; This function is called by:
  3456 ;;		_main
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           
  3461                           ;psect for function _srand
  3462  1820                     _srand:	
  3463                           
  3464                           ;incstack = 0
  3465                           ; Regs used in _srand: [wreg]
  3466  1820  0870               	movf	srand@x,w
  3467  1821  1683               	bsf	3,5	;RP0=1, select bank3
  3468  1822  1703               	bsf	3,6	;RP1=1, select bank3
  3469  1823  00D2               	movwf	_randx^(0+384)
  3470  1824  0871               	movf	srand@x+1,w
  3471  1825  00D3               	movwf	(_randx^(0+384)+1)
  3472  1826  01D4               	clrf	(_randx^(0+384)+2)
  3473  1827  01D5               	clrf	(_randx^(0+384)+3)
  3474  1828  0008               	return
  3475  1829                     __end_of_srand:	
  3476                           
  3477                           	psect	text2
  3478  1CCA                     __ptext2:	
  3479 ;; *************** function _merge *****************
  3480 ;; Defined at:
  3481 ;;		line 822 in file "teris_16f886.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  x               1    wreg     char 
  3484 ;;  y               1    0[COMMON] char 
  3485 ;;  matrix44        2    1[COMMON] PTR const struct .
  3486 ;;		 -> NULL(0), g_matrix44(384), 
  3487 ;;  matrix88        1    3[COMMON] PTR struct .
  3488 ;;		 -> g_matrix88(64), 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  x               1    8[COMMON] char 
  3491 ;;  col             1   10[COMMON] unsigned char 
  3492 ;;  row             1    9[COMMON] unsigned char 
  3493 ;; Return value:  Size  Location     Type
  3494 ;;                  1    wreg      void 
  3495 ;; Registers used:
  3496 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3502 ;;      Params:         4       0       0       0       0
  3503 ;;      Locals:         3       0       0       0       0
  3504 ;;      Temps:          4       0       0       0       0
  3505 ;;      Totals:        11       0       0       0       0
  3506 ;;Total ram usage:       11 bytes
  3507 ;; Hardware stack levels used:    2
  3508 ;; This function calls:
  3509 ;;		Nothing
  3510 ;; This function is called by:
  3511 ;;		_main
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           
  3516                           ;psect for function _merge
  3517  1CCA                     _merge:	
  3518                           
  3519                           ;incstack = 0
  3520                           ; Regs used in _merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3521                           ;merge@x stored from wreg
  3522  1CCA  00F8               	movwf	merge@x
  3523                           
  3524                           ;teris_16f886.c: 824: for(uint8_t row = 0; row < 4; row++)
  3525  1CCB  01F9               	clrf	merge@row
  3526  1CCC                     L1:	
  3527  1CCC  3004               	movlw	4
  3528  1CCD  0279               	subwf	merge@row,w
  3529  1CCE  1803               	btfsc	3,0
  3530  1CCF  0008               	return
  3531                           
  3532                           ;teris_16f886.c: 825: {
  3533                           ;teris_16f886.c: 826: for(uint8_t col = 0; col < 4; col++)
  3534  1CD0  01FA               	clrf	merge@col
  3535  1CD1  3004               	movlw	4
  3536  1CD2  027A               	subwf	merge@col,w
  3537  1CD3  1803               	btfsc	3,0
  3538  1CD4  2D15               	goto	l4289
  3539  1CD5                     l4281:	
  3540                           
  3541                           ;teris_16f886.c: 827: {
  3542                           ;teris_16f886.c: 828: if(matrix44->data[row][col] == 1)
  3543  1CD5  0879               	movf	merge@row,w
  3544  1CD6  00F4               	movwf	??_merge
  3545  1CD7  01F5               	clrf	??_merge+1
  3546  1CD8  1003               	clrc
  3547  1CD9  0DF4               	rlf	??_merge,f
  3548  1CDA  0DF5               	rlf	??_merge+1,f
  3549  1CDB  1003               	clrc
  3550  1CDC  0DF4               	rlf	??_merge,f
  3551  1CDD  0DF5               	rlf	??_merge+1,f
  3552  1CDE  0874               	movf	??_merge,w
  3553  1CDF  0771               	addwf	merge@matrix44,w
  3554  1CE0  00F6               	movwf	??_merge+2
  3555  1CE1  0875               	movf	??_merge+1,w
  3556  1CE2  1803               	skipnc
  3557  1CE3  0A75               	incf	??_merge+1,w
  3558  1CE4  0772               	addwf	merge@matrix44+1,w
  3559  1CE5  00F7               	movwf	??_merge+3
  3560  1CE6  087A               	movf	merge@col,w
  3561  1CE7  0776               	addwf	??_merge+2,w
  3562  1CE8  0084               	movwf	4
  3563  1CE9  0877               	movf	??_merge+3,w
  3564  1CEA  1803               	skipnc
  3565  1CEB  0A77               	incf	??_merge+3,w
  3566  1CEC  1283               	bcf	3,5	;RP0=0, select bank0
  3567  1CED  1303               	bcf	3,6	;RP1=0, select bank0
  3568  1CEE  00FF               	movwf	127
  3569  1CEF  120A  158A  2000  160A  158A  	fcall	stringtab
  3570  1CF4  3A01               	xorlw	1
  3571  1CF5  1D03               	skipz
  3572  1CF6  2D0D               	goto	l4285
  3573                           
  3574                           ;teris_16f886.c: 829: {
  3575                           ;teris_16f886.c: 830: matrix88->data[y + row][x + col] = 1;
  3576  1CF7  087A               	movf	merge@col,w
  3577  1CF8  0778               	addwf	merge@x,w
  3578  1CF9  0773               	addwf	merge@matrix88,w
  3579  1CFA  00F4               	movwf	??_merge
  3580  1CFB  0879               	movf	merge@row,w
  3581  1CFC  0770               	addwf	merge@y,w
  3582  1CFD  00F5               	movwf	??_merge+1
  3583  1CFE  3002               	movlw	2
  3584  1CFF                     u6055:	
  3585  1CFF  1003               	clrc
  3586  1D00  0DF5               	rlf	??_merge+1,f
  3587  1D01  3EFF               	addlw	-1
  3588  1D02  1D03               	skipz
  3589  1D03  2CFF               	goto	u6055
  3590  1D04  1003               	clrc
  3591  1D05  0D75               	rlf	??_merge+1,w
  3592  1D06  0774               	addwf	??_merge,w
  3593  1D07  00F6               	movwf	??_merge+2
  3594  1D08  0876               	movf	??_merge+2,w
  3595  1D09  0084               	movwf	4
  3596  1D0A  1783               	bsf	3,7	;select IRP bank2
  3597  1D0B  0180               	clrf	0
  3598  1D0C  0A80               	incf	0,f
  3599  1D0D                     l4285:	
  3600  1D0D  3001               	movlw	1
  3601  1D0E  00F4               	movwf	??_merge
  3602  1D0F  0874               	movf	??_merge,w
  3603  1D10  07FA               	addwf	merge@col,f
  3604  1D11  3004               	movlw	4
  3605  1D12  027A               	subwf	merge@col,w
  3606  1D13  1C03               	skipc
  3607  1D14  2CD5               	goto	l4281
  3608  1D15                     l4289:	
  3609  1D15  3001               	movlw	1
  3610  1D16  00F4               	movwf	??_merge
  3611  1D17  0874               	movf	??_merge,w
  3612  1D18  07F9               	addwf	merge@row,f
  3613  1D19  2CCC               	goto	L1
  3614  1D1A                     __end_of_merge:	
  3615                           
  3616                           	psect	text3
  3617  1142                     __ptext3:	
  3618 ;; *************** function _hit_land *****************
  3619 ;; Defined at:
  3620 ;;		line 684 in file "teris_16f886.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  x               1    wreg     char 
  3623 ;;  y               1   38[BANK0 ] char 
  3624 ;;  matrix44        2   39[BANK0 ] PTR const struct .
  3625 ;;		 -> NULL(0), g_matrix44(384), 
  3626 ;;  matrix88        1   41[BANK0 ] PTR const struct .
  3627 ;;		 -> g_matrix88(64), 
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  x               1   46[BANK0 ] char 
  3630 ;;  col             1   47[BANK0 ] char 
  3631 ;;  row             1   48[BANK0 ] char 
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  1    wreg      unsigned char 
  3634 ;; Registers used:
  3635 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3641 ;;      Params:         0       4       0       0       0
  3642 ;;      Locals:         0       3       0       0       0
  3643 ;;      Temps:          0       4       0       0       0
  3644 ;;      Totals:         0      11       0       0       0
  3645 ;;Total ram usage:       11 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    3
  3648 ;; This function calls:
  3649 ;;		_debug_int2
  3650 ;;		_debug_line
  3651 ;; This function is called by:
  3652 ;;		_main
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           
  3657                           ;psect for function _hit_land
  3658  1142                     _hit_land:	
  3659                           
  3660                           ;incstack = 0
  3661                           ; Regs used in _hit_land: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3662                           ;hit_land@x stored from wreg
  3663  1142  1283               	bcf	3,5	;RP0=0, select bank0
  3664  1143  1303               	bcf	3,6	;RP1=0, select bank0
  3665  1144  00CE               	movwf	hit_land@x
  3666                           
  3667                           ;teris_16f886.c: 686: debug_line(0, "==============hit_land============");
  3668  1145  3000               	movlw	low (STR_29| (0+32768))
  3669  1146  00F3               	movwf	debug_line@str
  3670  1147  308A               	movlw	high (STR_29| (0+32768))
  3671  1148  00F4               	movwf	debug_line@str+1
  3672  1149  3000               	movlw	0
  3673  114A  160A  158A  209D  160A  118A  	fcall	_debug_line
  3674                           
  3675                           ;teris_16f886.c: 688: for(int8_t row = 4 - 1; row >= 0; row--)
  3676  114F  3003               	movlw	3
  3677  1150  1283               	bcf	3,5	;RP0=0, select bank0
  3678  1151  1303               	bcf	3,6	;RP1=0, select bank0
  3679  1152  00CA               	movwf	??_hit_land
  3680  1153  084A               	movf	??_hit_land,w
  3681  1154  00D0               	movwf	hit_land@row
  3682  1155  1BD0               	btfsc	hit_land@row,7
  3683  1156  29E9               	goto	l5455
  3684  1157                     l5423:	
  3685                           
  3686                           ;teris_16f886.c: 689: {
  3687                           ;teris_16f886.c: 690: for(int8_t col = 0; col < 4; col++)
  3688  1157  01CF               	clrf	hit_land@col
  3689  1158  084F               	movf	hit_land@col,w
  3690  1159  3A80               	xorlw	128
  3691  115A  3E7C               	addlw	-132
  3692  115B  1803               	btfsc	3,0
  3693  115C  29E3               	goto	l5451
  3694  115D                     l5429:	
  3695                           
  3696                           ;teris_16f886.c: 691: {
  3697                           ;teris_16f886.c: 692: if(matrix44->data[row][col] == 1)
  3698  115D  0850               	movf	hit_land@row,w
  3699  115E  00CA               	movwf	??_hit_land
  3700  115F  01CB               	clrf	??_hit_land+1
  3701  1160  1003               	clrc
  3702  1161  0DCA               	rlf	??_hit_land,f
  3703  1162  0DCB               	rlf	??_hit_land+1,f
  3704  1163  1003               	clrc
  3705  1164  0DCA               	rlf	??_hit_land,f
  3706  1165  0DCB               	rlf	??_hit_land+1,f
  3707  1166  084A               	movf	??_hit_land,w
  3708  1167  0747               	addwf	hit_land@matrix44,w
  3709  1168  00CC               	movwf	??_hit_land+2
  3710  1169  084B               	movf	??_hit_land+1,w
  3711  116A  1803               	skipnc
  3712  116B  0A4B               	incf	??_hit_land+1,w
  3713  116C  0748               	addwf	hit_land@matrix44+1,w
  3714  116D  00CD               	movwf	??_hit_land+3
  3715  116E  084F               	movf	hit_land@col,w
  3716  116F  074C               	addwf	??_hit_land+2,w
  3717  1170  0084               	movwf	4
  3718  1171  084D               	movf	??_hit_land+3,w
  3719  1172  1803               	skipnc
  3720  1173  0A4D               	incf	??_hit_land+3,w
  3721  1174  00FF               	movwf	127
  3722  1175  120A  158A  2000  160A  118A  	fcall	stringtab
  3723  117A  3A01               	xorlw	1
  3724  117B  1D03               	skipz
  3725  117C  29D8               	goto	l5447
  3726                           
  3727                           ;teris_16f886.c: 693: {
  3728                           ;teris_16f886.c: 694: if((y + row) >= (8 - 1))
  3729  117D  0846               	movf	hit_land@y,w
  3730  117E  0750               	addwf	hit_land@row,w
  3731  117F  00CA               	movwf	??_hit_land
  3732  1180  01CB               	clrf	??_hit_land+1
  3733  1181  1803               	skipnc
  3734  1182  0ACB               	incf	??_hit_land+1,f
  3735  1183  1BC6               	btfsc	hit_land@y,7
  3736  1184  03CB               	decf	??_hit_land+1,f
  3737  1185  1BD0               	btfsc	hit_land@row,7
  3738  1186  03CB               	decf	??_hit_land+1,f
  3739  1187  1283               	bcf	3,5	;RP0=0, select bank0
  3740  1188  1303               	bcf	3,6	;RP1=0, select bank0
  3741  1189  084B               	movf	??_hit_land+1,w
  3742  118A  3A80               	xorlw	128
  3743  118B  00FF               	movwf	127
  3744  118C  3080               	movlw	128
  3745  118D  027F               	subwf	127,w
  3746  118E  1D03               	skipz
  3747  118F  2992               	goto	u8065
  3748  1190  3007               	movlw	7
  3749  1191  024A               	subwf	??_hit_land,w
  3750  1192                     u8065:	
  3751  1192  1C03               	skipc
  3752  1193  29AA               	goto	l5439
  3753                           
  3754                           ;teris_16f886.c: 695: {
  3755                           ;teris_16f886.c: 696: debug_int2(0, "hit1 row = %d, col = %d", row, col);
  3756  1194  3091               	movlw	low (STR_30| (0+32768))
  3757  1195  1283               	bcf	3,5	;RP0=0, select bank0
  3758  1196  1303               	bcf	3,6	;RP1=0, select bank0
  3759  1197  00BF               	movwf	debug_int2@f
  3760  1198  308A               	movlw	high (STR_30| (0+32768))
  3761  1199  00C0               	movwf	debug_int2@f+1
  3762  119A  0850               	movf	hit_land@row,w
  3763  119B  00C1               	movwf	debug_int2@i1
  3764  119C  01C2               	clrf	debug_int2@i1+1
  3765  119D  1BC1               	btfsc	debug_int2@i1,7
  3766  119E  03C2               	decf	debug_int2@i1+1,f
  3767  119F  084F               	movf	hit_land@col,w
  3768  11A0  00C3               	movwf	debug_int2@i2
  3769  11A1  01C4               	clrf	debug_int2@i2+1
  3770  11A2  1BC3               	btfsc	debug_int2@i2,7
  3771  11A3  03C4               	decf	debug_int2@i2+1,f
  3772  11A4  3000               	movlw	0
  3773  11A5  160A  158A  2174   	fcall	_debug_int2
  3774                           
  3775                           ;teris_16f886.c: 697: return 1;
  3776  11A8  3001               	movlw	1
  3777  11A9  0008               	return
  3778  11AA                     l5439:	
  3779                           
  3780                           ;teris_16f886.c: 698: }
  3781                           ;teris_16f886.c: 700: if(matrix88->data[y + row + 1][x + col] == 1)
  3782  11AA  1283               	bcf	3,5	;RP0=0, select bank0
  3783  11AB  1303               	bcf	3,6	;RP1=0, select bank0
  3784  11AC  084F               	movf	hit_land@col,w
  3785  11AD  074E               	addwf	hit_land@x,w
  3786  11AE  0749               	addwf	hit_land@matrix88,w
  3787  11AF  00CA               	movwf	??_hit_land
  3788  11B0  0850               	movf	hit_land@row,w
  3789  11B1  0746               	addwf	hit_land@y,w
  3790  11B2  00CB               	movwf	??_hit_land+1
  3791  11B3  3002               	movlw	2
  3792  11B4                     u8075:	
  3793  11B4  1003               	clrc
  3794  11B5  0DCB               	rlf	??_hit_land+1,f
  3795  11B6  3EFF               	addlw	-1
  3796  11B7  1D03               	skipz
  3797  11B8  29B4               	goto	u8075
  3798  11B9  1003               	clrc
  3799  11BA  0D4B               	rlf	??_hit_land+1,w
  3800  11BB  3E08               	addlw	8
  3801  11BC  074A               	addwf	??_hit_land,w
  3802  11BD  00CC               	movwf	??_hit_land+2
  3803  11BE  084C               	movf	??_hit_land+2,w
  3804  11BF  0084               	movwf	4
  3805  11C0  1783               	bsf	3,7	;select IRP bank2
  3806  11C1  0300               	decf	0,w
  3807  11C2  1D03               	btfss	3,2
  3808  11C3  29D8               	goto	l5447
  3809                           
  3810                           ;teris_16f886.c: 701: {
  3811                           ;teris_16f886.c: 702: debug_int2(0, "hit2 row = %d, col = %d", row, col);
  3812  11C4  30A9               	movlw	low (STR_31| (0+32768))
  3813  11C5  00BF               	movwf	debug_int2@f
  3814  11C6  308A               	movlw	high (STR_31| (0+32768))
  3815  11C7  00C0               	movwf	debug_int2@f+1
  3816  11C8  0850               	movf	hit_land@row,w
  3817  11C9  00C1               	movwf	debug_int2@i1
  3818  11CA  01C2               	clrf	debug_int2@i1+1
  3819  11CB  1BC1               	btfsc	debug_int2@i1,7
  3820  11CC  03C2               	decf	debug_int2@i1+1,f
  3821  11CD  084F               	movf	hit_land@col,w
  3822  11CE  00C3               	movwf	debug_int2@i2
  3823  11CF  01C4               	clrf	debug_int2@i2+1
  3824  11D0  1BC3               	btfsc	debug_int2@i2,7
  3825  11D1  03C4               	decf	debug_int2@i2+1,f
  3826  11D2  3000               	movlw	0
  3827  11D3  160A  158A  2174   	fcall	_debug_int2
  3828                           
  3829                           ;teris_16f886.c: 703: return 1;
  3830  11D6  3001               	movlw	1
  3831  11D7  0008               	return
  3832  11D8                     l5447:	
  3833  11D8  3001               	movlw	1
  3834  11D9  1283               	bcf	3,5	;RP0=0, select bank0
  3835  11DA  1303               	bcf	3,6	;RP1=0, select bank0
  3836  11DB  00CA               	movwf	??_hit_land
  3837  11DC  084A               	movf	??_hit_land,w
  3838  11DD  07CF               	addwf	hit_land@col,f
  3839  11DE  084F               	movf	hit_land@col,w
  3840  11DF  3A80               	xorlw	128
  3841  11E0  3E7C               	addlw	-132
  3842  11E1  1C03               	skipc
  3843  11E2  295D               	goto	l5429
  3844  11E3                     l5451:	
  3845  11E3  30FF               	movlw	255
  3846  11E4  00CA               	movwf	??_hit_land
  3847  11E5  084A               	movf	??_hit_land,w
  3848  11E6  07D0               	addwf	hit_land@row,f
  3849  11E7  1FD0               	btfss	hit_land@row,7
  3850  11E8  2957               	goto	l5423
  3851  11E9                     l5455:	
  3852                           
  3853                           ;teris_16f886.c: 704: }
  3854                           ;teris_16f886.c: 705: }
  3855                           ;teris_16f886.c: 706: }
  3856                           ;teris_16f886.c: 707: }
  3857                           ;teris_16f886.c: 708: debug_line(0, "not hit");
  3858  11E9  30A0               	movlw	low (STR_32| (0+32768))
  3859  11EA  00F3               	movwf	debug_line@str
  3860  11EB  308D               	movlw	high (STR_32| (0+32768))
  3861  11EC  00F4               	movwf	debug_line@str+1
  3862  11ED  3000               	movlw	0
  3863  11EE  160A  158A  209D   	fcall	_debug_line
  3864                           
  3865                           ;teris_16f886.c: 709: return 0;
  3866  11F1  3000               	movlw	0
  3867  11F2  0008               	return
  3868  11F3                     __end_of_hit_land:	
  3869                           
  3870                           	psect	text4
  3871  029C                     __ptext4:	
  3872 ;; *************** function _find_best_solution *****************
  3873 ;; Defined at:
  3874 ;;		line 1020 in file "teris_16f886.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;		None
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  temp_x          1   70[BANK1 ] char 
  3879 ;;  tem_sub_inde    1   69[BANK1 ] unsigned char 
  3880 ;;  temp_matrix8   64    3[BANK1 ] struct .
  3881 ;;  temp_cur_mat    2   67[BANK1 ] PTR struct .
  3882 ;;		 -> g_matrix44(384), 
  3883 ;;  res             1    2[BANK1 ] unsigned char 
  3884 ;;  right_most_i    1    1[BANK1 ] char 
  3885 ;;  left_most_in    1    0[BANK1 ] char 
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  1    wreg      unsigned char 
  3888 ;; Registers used:
  3889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3895 ;;      Params:         0       0       0       0       0
  3896 ;;      Locals:         0       0      71       0       0
  3897 ;;      Temps:          0       7       0       0       0
  3898 ;;      Totals:         0       7      71       0       0
  3899 ;;Total ram usage:       78 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; Hardware stack levels required when called:    5
  3902 ;; This function calls:
  3903 ;;		___bmul
  3904 ;;		_debug_int1
  3905 ;;		_debug_int2
  3906 ;;		_debug_line
  3907 ;;		_delete_matrix
  3908 ;;		_evaluate
  3909 ;;		_fall_off
  3910 ;;		_get_high
  3911 ;;		_get_high_after_merge
  3912 ;;		_get_holes_after_merge
  3913 ;;		_is_valid
  3914 ;;		_left_most
  3915 ;;		_merge1
  3916 ;;		_printf_debug_MATRIX44
  3917 ;;		_printf_debug_MATRIX88
  3918 ;;		_printf_debug_Screen
  3919 ;;		_printf_debug_cur_MATRIX44
  3920 ;;		_right_most
  3921 ;; This function is called by:
  3922 ;;		_main
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           
  3927                           ;psect for function _find_best_solution
  3928  029C                     _find_best_solution:	
  3929                           
  3930                           ;teris_16f886.c: 1022: debug_line(1, "==============find_best_solution============");
  3931                           
  3932                           ;incstack = 0
  3933                           ; Regs used in _find_best_solution: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3934  029C  30B0               	movlw	low (STR_59| (0+32768))
  3935  029D  00F3               	movwf	debug_line@str
  3936  029E  3089               	movlw	high (STR_59| (0+32768))
  3937  029F  00F4               	movwf	debug_line@str+1
  3938  02A0  3001               	movlw	1
  3939  02A1  160A  158A  209D  120A  118A  	fcall	_debug_line
  3940                           
  3941                           ;teris_16f886.c: 1026: _delay((unsigned long)((3000)*(20000000/4000.0)));
  3942  02A6  304D               	movlw	77
  3943  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  3944  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  3945  02A9  00D3               	movwf	??_find_best_solution+2
  3946  02AA  3019               	movlw	25
  3947  02AB  00D2               	movwf	??_find_best_solution+1
  3948  02AC  309A               	movlw	154
  3949  02AD  00D1               	movwf	??_find_best_solution
  3950  02AE                     u8537:	
  3951  02AE  0BD1               	decfsz	??_find_best_solution,f
  3952  02AF  2AAE               	goto	u8537
  3953  02B0  0BD2               	decfsz	??_find_best_solution+1,f
  3954  02B1  2AAE               	goto	u8537
  3955  02B2  0BD3               	decfsz	??_find_best_solution+2,f
  3956  02B3  2AAE               	goto	u8537
  3957  02B4  2AB5               	nop2
  3958                           
  3959                           ;teris_16f886.c: 1029: MATRIX44* temp_cur_matrix44;
  3960                           ;teris_16f886.c: 1030: MATRIX88 temp_matrix88;
  3961                           ;teris_16f886.c: 1031: uint8_t res = 0;
  3962  02B5  1683               	bsf	3,5	;RP0=1, select bank1
  3963  02B6  1303               	bcf	3,6	;RP1=0, select bank1
  3964  02B7  01A2               	clrf	find_best_solution@res^(0+128)
  3965                           
  3966                           ;teris_16f886.c: 1032: int8_t left_most_index, right_most_index;
  3967                           ;teris_16f886.c: 1034: temp_pre_x = 0xF;
  3968  02B8  300F               	movlw	15
  3969  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  3970  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  3971  02BB  00D1               	movwf	??_find_best_solution
  3972  02BC  0851               	movf	??_find_best_solution,w
  3973  02BD  00ED               	movwf	_temp_pre_x
  3974                           
  3975                           ;teris_16f886.c: 1035: tem_pre_sub_index = 0xF;
  3976  02BE  300F               	movlw	15
  3977  02BF  00D1               	movwf	??_find_best_solution
  3978  02C0  0851               	movf	??_find_best_solution,w
  3979  02C1  1683               	bsf	3,5	;RP0=1, select bank3
  3980  02C2  1703               	bsf	3,6	;RP1=1, select bank3
  3981  02C3  00D6               	movwf	_tem_pre_sub_index^(0+384)
  3982                           
  3983                           ;teris_16f886.c: 1036: temp_pre_risk = 0xFFFF;
  3984  02C4  30FF               	movlw	255
  3985  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  3986  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  3987  02C7  00EB               	movwf	_temp_pre_risk
  3988  02C8  30FF               	movlw	255
  3989  02C9  00EC               	movwf	_temp_pre_risk+1
  3990                           
  3991                           ;teris_16f886.c: 1037: temp_pre_count = 0;
  3992  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  3993  02CB  1303               	bcf	3,6	;RP1=0, select bank1
  3994  02CC  01EC               	clrf	_temp_pre_count^(0+128)
  3995                           
  3996                           ;teris_16f886.c: 1038: temp_pre_high = 0xFF;
  3997  02CD  30FF               	movlw	255
  3998  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  3999  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  4000  02D0  00D1               	movwf	??_find_best_solution
  4001  02D1  0851               	movf	??_find_best_solution,w
  4002  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  4003  02D3  1303               	bcf	3,6	;RP1=0, select bank1
  4004  02D4  00EE               	movwf	_temp_pre_high^(0+128)
  4005                           
  4006                           ;teris_16f886.c: 1039: temp_pre_hole = 0xFF;
  4007  02D5  30FF               	movlw	255
  4008  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  4009  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  4010  02D8  00D1               	movwf	??_find_best_solution
  4011  02D9  0851               	movf	??_find_best_solution,w
  4012  02DA  1683               	bsf	3,5	;RP0=1, select bank1
  4013  02DB  1303               	bcf	3,6	;RP1=0, select bank1
  4014  02DC  00EF               	movwf	_temp_pre_hole^(0+128)
  4015                           
  4016                           ;teris_16f886.c: 1042: for(uint8_t tem_sub_index = 0; tem_sub_index < g_char_info[g_char
      +                          _info_index].num; tem_sub_index++)
  4017  02DD  01E5               	clrf	find_best_solution@tem_sub_index^(0+128)
  4018  02DE                     l5637:	
  4019  02DE  3003               	movlw	3
  4020  02DF  1283               	bcf	3,5	;RP0=0, select bank0
  4021  02E0  1303               	bcf	3,6	;RP1=0, select bank0
  4022  02E1  00D1               	movwf	??_find_best_solution
  4023  02E2  0851               	movf	??_find_best_solution,w
  4024  02E3  00F0               	movwf	___bmul@multiplicand
  4025  02E4  0869               	movf	_g_char_info_index,w
  4026  02E5  160A  158A  2043  120A  118A  	fcall	___bmul
  4027  02EA  3E02               	addlw	2
  4028  02EB  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4029  02EC  0084               	movwf	4
  4030  02ED  1783               	bsf	3,7	;select IRP bank3
  4031  02EE  0800               	movf	0,w
  4032  02EF  1683               	bsf	3,5	;RP0=1, select bank1
  4033  02F0  1303               	bcf	3,6	;RP1=0, select bank1
  4034  02F1  0265               	subwf	find_best_solution@tem_sub_index^(0+128),w
  4035  02F2  1803               	btfsc	3,0
  4036  02F3  2EEF               	goto	l5639
  4037                           
  4038                           ;teris_16f886.c: 1043: {
  4039                           ;teris_16f886.c: 1044: temp_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].st
      +                          art_index + tem_sub_index];
  4040  02F4  3003               	movlw	3
  4041  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  4042  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  4043  02F7  00D1               	movwf	??_find_best_solution
  4044  02F8  0851               	movf	??_find_best_solution,w
  4045  02F9  00F0               	movwf	___bmul@multiplicand
  4046  02FA  0869               	movf	_g_char_info_index,w
  4047  02FB  160A  158A  2043  120A  118A  	fcall	___bmul
  4048  0300  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4049  0301  0084               	movwf	4
  4050  0302  1783               	bsf	3,7	;select IRP bank3
  4051  0303  0800               	movf	0,w
  4052  0304  1683               	bsf	3,5	;RP0=1, select bank1
  4053  0305  1303               	bcf	3,6	;RP1=0, select bank1
  4054  0306  0765               	addwf	find_best_solution@tem_sub_index^(0+128),w
  4055  0307  1283               	bcf	3,5	;RP0=0, select bank0
  4056  0308  1303               	bcf	3,6	;RP1=0, select bank0
  4057  0309  00D2               	movwf	??_find_best_solution+1
  4058  030A  01D3               	clrf	??_find_best_solution+2
  4059  030B  0DD3               	rlf	??_find_best_solution+2,f
  4060  030C  0ED2               	swapf	??_find_best_solution+1,f
  4061  030D  0ED3               	swapf	??_find_best_solution+2,f
  4062  030E  30F0               	movlw	240
  4063  030F  05D3               	andwf	??_find_best_solution+2,f
  4064  0310  0852               	movf	??_find_best_solution+1,w
  4065  0311  390F               	andlw	15
  4066  0312  04D3               	iorwf	??_find_best_solution+2,f
  4067  0313  30F0               	movlw	240
  4068  0314  05D2               	andwf	??_find_best_solution+1,f
  4069  0315  3030               	movlw	low (_g_matrix44| (0+32768))
  4070  0316  00D4               	movwf	??_find_best_solution+3
  4071  0317  3088               	movlw	high (_g_matrix44| (0+32768))
  4072  0318  00D5               	movwf	??_find_best_solution+4
  4073  0319  0852               	movf	??_find_best_solution+1,w
  4074  031A  0754               	addwf	??_find_best_solution+3,w
  4075  031B  00D6               	movwf	??_find_best_solution+5
  4076  031C  0853               	movf	??_find_best_solution+2,w
  4077  031D  1803               	skipnc
  4078  031E  0A53               	incf	??_find_best_solution+2,w
  4079  031F  0755               	addwf	??_find_best_solution+4,w
  4080  0320  00D7               	movwf	??_find_best_solution+6
  4081  0321  0856               	movf	??_find_best_solution+5,w
  4082  0322  1683               	bsf	3,5	;RP0=1, select bank1
  4083  0323  1303               	bcf	3,6	;RP1=0, select bank1
  4084  0324  00E3               	movwf	find_best_solution@temp_cur_matrix44^(0+128)
  4085  0325  1283               	bcf	3,5	;RP0=0, select bank0
  4086  0326  1303               	bcf	3,6	;RP1=0, select bank0
  4087  0327  0857               	movf	??_find_best_solution+6,w
  4088  0328  1683               	bsf	3,5	;RP0=1, select bank1
  4089  0329  1303               	bcf	3,6	;RP1=0, select bank1
  4090  032A  00E4               	movwf	(find_best_solution@temp_cur_matrix44+1)^(0+128)
  4091                           
  4092                           ;teris_16f886.c: 1045: left_most_index = left_most(cur_x, temp_cur_matrix44, &g_matrix88
      +                          );
  4093  032B  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4094  032C  1283               	bcf	3,5	;RP0=0, select bank0
  4095  032D  1303               	bcf	3,6	;RP1=0, select bank0
  4096  032E  00C4               	movwf	left_most@matrix44
  4097  032F  1683               	bsf	3,5	;RP0=1, select bank1
  4098  0330  1303               	bcf	3,6	;RP1=0, select bank1
  4099  0331  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4100  0332  1283               	bcf	3,5	;RP0=0, select bank0
  4101  0333  1303               	bcf	3,6	;RP1=0, select bank0
  4102  0334  00C5               	movwf	left_most@matrix44+1
  4103  0335  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4104  0336  00D1               	movwf	??_find_best_solution
  4105  0337  0851               	movf	??_find_best_solution,w
  4106  0338  00C6               	movwf	left_most@matrix88
  4107  0339  1683               	bsf	3,5	;RP0=1, select bank1
  4108  033A  1303               	bcf	3,6	;RP1=0, select bank1
  4109  033B  086D               	movf	_cur_x^(0+128),w
  4110  033C  160A  158A  2229  120A  118A  	fcall	_left_most
  4111  0341  1283               	bcf	3,5	;RP0=0, select bank0
  4112  0342  1303               	bcf	3,6	;RP1=0, select bank0
  4113  0343  00D2               	movwf	??_find_best_solution+1
  4114  0344  0852               	movf	??_find_best_solution+1,w
  4115  0345  1683               	bsf	3,5	;RP0=1, select bank1
  4116  0346  1303               	bcf	3,6	;RP1=0, select bank1
  4117  0347  00A0               	movwf	find_best_solution@left_most_index^(0+128)
  4118                           
  4119                           ;teris_16f886.c: 1046: right_most_index = right_most(cur_x, temp_cur_matrix44, &g_matrix
      +                          88);
  4120  0348  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4121  0349  1283               	bcf	3,5	;RP0=0, select bank0
  4122  034A  1303               	bcf	3,6	;RP1=0, select bank0
  4123  034B  00C4               	movwf	right_most@matrix44
  4124  034C  1683               	bsf	3,5	;RP0=1, select bank1
  4125  034D  1303               	bcf	3,6	;RP1=0, select bank1
  4126  034E  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4127  034F  1283               	bcf	3,5	;RP0=0, select bank0
  4128  0350  1303               	bcf	3,6	;RP1=0, select bank0
  4129  0351  00C5               	movwf	right_most@matrix44+1
  4130  0352  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4131  0353  00D1               	movwf	??_find_best_solution
  4132  0354  0851               	movf	??_find_best_solution,w
  4133  0355  00C6               	movwf	right_most@matrix88
  4134  0356  1683               	bsf	3,5	;RP0=1, select bank1
  4135  0357  1303               	bcf	3,6	;RP1=0, select bank1
  4136  0358  086D               	movf	_cur_x^(0+128),w
  4137  0359  160A  158A  225B  120A  118A  	fcall	_right_most
  4138  035E  1283               	bcf	3,5	;RP0=0, select bank0
  4139  035F  1303               	bcf	3,6	;RP1=0, select bank0
  4140  0360  00D2               	movwf	??_find_best_solution+1
  4141  0361  0852               	movf	??_find_best_solution+1,w
  4142  0362  1683               	bsf	3,5	;RP0=1, select bank1
  4143  0363  1303               	bcf	3,6	;RP1=0, select bank1
  4144  0364  00A1               	movwf	find_best_solution@right_most_index^(0+128)
  4145                           
  4146                           ;teris_16f886.c: 1048: for(int8_t temp_x = left_most_index; temp_x <= right_most_index; 
      +                          temp_x++)
  4147  0365  0820               	movf	find_best_solution@left_most_index^(0+128),w
  4148  0366  1283               	bcf	3,5	;RP0=0, select bank0
  4149  0367  1303               	bcf	3,6	;RP1=0, select bank0
  4150  0368  00D1               	movwf	??_find_best_solution
  4151  0369  0851               	movf	??_find_best_solution,w
  4152  036A  1683               	bsf	3,5	;RP0=1, select bank1
  4153  036B  1303               	bcf	3,6	;RP1=0, select bank1
  4154  036C  00E6               	movwf	find_best_solution@temp_x^(0+128)
  4155  036D                     l5633:	
  4156  036D  0821               	movf	find_best_solution@right_most_index^(0+128),w
  4157  036E  3A80               	xorlw	128
  4158  036F  1283               	bcf	3,5	;RP0=0, select bank0
  4159  0370  1303               	bcf	3,6	;RP1=0, select bank0
  4160  0371  00D1               	movwf	??_find_best_solution
  4161  0372  1683               	bsf	3,5	;RP0=1, select bank1
  4162  0373  1303               	bcf	3,6	;RP1=0, select bank1
  4163  0374  0866               	movf	find_best_solution@temp_x^(0+128),w
  4164  0375  3A80               	xorlw	128
  4165  0376  1283               	bcf	3,5	;RP0=0, select bank0
  4166  0377  1303               	bcf	3,6	;RP1=0, select bank0
  4167  0378  02D1               	subwf	??_find_best_solution,f
  4168  0379  1C03               	btfss	3,0
  4169  037A  2EE8               	goto	l5635
  4170                           
  4171                           ;teris_16f886.c: 1049: {
  4172                           ;teris_16f886.c: 1050: temp_y = fall_off(temp_x, cur_y, temp_cur_matrix44, &g_matrix88);
  4173  037B  1283               	bcf	3,5	;RP0=0, select bank0
  4174  037C  0868               	movf	_cur_y,w
  4175  037D  00D1               	movwf	??_find_best_solution
  4176  037E  0851               	movf	??_find_best_solution,w
  4177  037F  00C6               	movwf	fall_off@y
  4178  0380  1683               	bsf	3,5	;RP0=1, select bank1
  4179  0381  1303               	bcf	3,6	;RP1=0, select bank1
  4180  0382  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4181  0383  1283               	bcf	3,5	;RP0=0, select bank0
  4182  0384  1303               	bcf	3,6	;RP1=0, select bank0
  4183  0385  00C7               	movwf	fall_off@matrix44
  4184  0386  1683               	bsf	3,5	;RP0=1, select bank1
  4185  0387  1303               	bcf	3,6	;RP1=0, select bank1
  4186  0388  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4187  0389  1283               	bcf	3,5	;RP0=0, select bank0
  4188  038A  1303               	bcf	3,6	;RP1=0, select bank0
  4189  038B  00C8               	movwf	fall_off@matrix44+1
  4190  038C  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4191  038D  00D2               	movwf	??_find_best_solution+1
  4192  038E  0852               	movf	??_find_best_solution+1,w
  4193  038F  00C9               	movwf	fall_off@matrix88
  4194  0390  1683               	bsf	3,5	;RP0=1, select bank1
  4195  0391  1303               	bcf	3,6	;RP1=0, select bank1
  4196  0392  0866               	movf	find_best_solution@temp_x^(0+128),w
  4197  0393  120A  158A  25F1  120A  118A  	fcall	_fall_off
  4198  0398  1283               	bcf	3,5	;RP0=0, select bank0
  4199  0399  1303               	bcf	3,6	;RP1=0, select bank0
  4200  039A  00D3               	movwf	??_find_best_solution+2
  4201  039B  0853               	movf	??_find_best_solution+2,w
  4202  039C  00EA               	movwf	_temp_y
  4203                           
  4204                           ;teris_16f886.c: 1052: printf_debug_MATRIX44(1, "After fall off", temp_x, temp_y, temp_c
      +                          ur_matrix44);
  4205  039D  3000               	movlw	low (STR_60| (0+32768))
  4206  039E  00F6               	movwf	printf_debug_MATRIX44@lable
  4207  039F  308D               	movlw	high (STR_60| (0+32768))
  4208  03A0  00F7               	movwf	printf_debug_MATRIX44@lable+1
  4209  03A1  1683               	bsf	3,5	;RP0=1, select bank1
  4210  03A2  1303               	bcf	3,6	;RP1=0, select bank1
  4211  03A3  0866               	movf	find_best_solution@temp_x^(0+128),w
  4212  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  4213  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  4214  03A6  00D1               	movwf	??_find_best_solution
  4215  03A7  0851               	movf	??_find_best_solution,w
  4216  03A8  00F8               	movwf	printf_debug_MATRIX44@x
  4217  03A9  086A               	movf	_temp_y,w
  4218  03AA  00D2               	movwf	??_find_best_solution+1
  4219  03AB  0852               	movf	??_find_best_solution+1,w
  4220  03AC  00F9               	movwf	printf_debug_MATRIX44@y
  4221  03AD  1683               	bsf	3,5	;RP0=1, select bank1
  4222  03AE  1303               	bcf	3,6	;RP1=0, select bank1
  4223  03AF  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4224  03B0  00FA               	movwf	printf_debug_MATRIX44@matrix
  4225  03B1  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4226  03B2  00FB               	movwf	printf_debug_MATRIX44@matrix+1
  4227  03B3  3001               	movlw	1
  4228  03B4  120A  118A  201C  120A  118A  	fcall	_printf_debug_MATRIX44
  4229                           
  4230                           ;teris_16f886.c: 1053: printf_debug_Screen(1, "After fall off");
  4231  03B9  3000               	movlw	low (STR_60| (0+32768))
  4232  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  4233  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  4234  03BC  00A5               	movwf	printf_debug_Screen@lable
  4235  03BD  308D               	movlw	high (STR_60| (0+32768))
  4236  03BE  00A6               	movwf	printf_debug_Screen@lable+1
  4237  03BF  3001               	movlw	1
  4238  03C0  120A  158A  25C7  120A  118A  	fcall	_printf_debug_Screen
  4239                           
  4240                           ;teris_16f886.c: 1055: if(is_valid(temp_x, temp_y, temp_cur_matrix44, &g_matrix88) == 0)
  4241  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  4242  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  4243  03C7  086A               	movf	_temp_y,w
  4244  03C8  00D1               	movwf	??_find_best_solution
  4245  03C9  0851               	movf	??_find_best_solution,w
  4246  03CA  00C6               	movwf	is_valid@y
  4247  03CB  1683               	bsf	3,5	;RP0=1, select bank1
  4248  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  4249  03CD  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4250  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  4251  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  4252  03D0  00C7               	movwf	is_valid@matrix44
  4253  03D1  1683               	bsf	3,5	;RP0=1, select bank1
  4254  03D2  1303               	bcf	3,6	;RP1=0, select bank1
  4255  03D3  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4256  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  4257  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  4258  03D6  00C8               	movwf	is_valid@matrix44+1
  4259  03D7  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4260  03D8  00D2               	movwf	??_find_best_solution+1
  4261  03D9  0852               	movf	??_find_best_solution+1,w
  4262  03DA  00C9               	movwf	is_valid@matrix88
  4263  03DB  1683               	bsf	3,5	;RP0=1, select bank1
  4264  03DC  1303               	bcf	3,6	;RP1=0, select bank1
  4265  03DD  0866               	movf	find_best_solution@temp_x^(0+128),w
  4266  03DE  160A  118A  21F3  120A  118A  	fcall	_is_valid
  4267  03E3  3A00               	xorlw	0
  4268  03E4  1903               	btfsc	3,2
  4269  03E5  2EDF               	goto	l5631
  4270                           
  4271                           ;teris_16f886.c: 1058: }
  4272                           ;teris_16f886.c: 1059: res = 1;
  4273                           
  4274                           ;teris_16f886.c: 1056: {
  4275                           ;teris_16f886.c: 1057: continue;
  4276  03E6  1683               	bsf	3,5	;RP0=1, select bank1
  4277  03E7  1303               	bcf	3,6	;RP1=0, select bank1
  4278  03E8  01A2               	clrf	find_best_solution@res^(0+128)
  4279  03E9  0AA2               	incf	find_best_solution@res^(0+128),f
  4280                           
  4281                           ;teris_16f886.c: 1060: merge1(temp_x, temp_y, temp_cur_matrix44, &g_matrix88, &temp_matr
      +                          ix88);
  4282  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  4283  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  4284  03EC  086A               	movf	_temp_y,w
  4285  03ED  00D1               	movwf	??_find_best_solution
  4286  03EE  0851               	movf	??_find_best_solution,w
  4287  03EF  00A0               	movwf	merge1@y
  4288  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  4289  03F1  1303               	bcf	3,6	;RP1=0, select bank1
  4290  03F2  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4291  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  4292  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  4293  03F5  00A1               	movwf	merge1@matrix44
  4294  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  4295  03F7  1303               	bcf	3,6	;RP1=0, select bank1
  4296  03F8  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4297  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  4298  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  4299  03FB  00A2               	movwf	merge1@matrix44+1
  4300  03FC  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4301  03FD  00D2               	movwf	??_find_best_solution+1
  4302  03FE  0852               	movf	??_find_best_solution+1,w
  4303  03FF  00A3               	movwf	merge1@matrix88_in
  4304  0400  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4305  0401  00D3               	movwf	??_find_best_solution+2
  4306  0402  0853               	movf	??_find_best_solution+2,w
  4307  0403  00A4               	movwf	merge1@matrix88_out
  4308  0404  1683               	bsf	3,5	;RP0=1, select bank1
  4309  0405  1303               	bcf	3,6	;RP1=0, select bank1
  4310  0406  0866               	movf	find_best_solution@temp_x^(0+128),w
  4311  0407  160A  158A  262F  120A  118A  	fcall	_merge1
  4312                           
  4313                           ;teris_16f886.c: 1061: temp_count = delete_matrix(&temp_matrix88);
  4314  040C  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4315  040D  1283               	bcf	3,5	;RP0=0, select bank0
  4316  040E  1303               	bcf	3,6	;RP1=0, select bank0
  4317  040F  00C4               	movwf	delete_matrix@matrix
  4318  0410  3000               	movlw	0
  4319  0411  00C5               	movwf	delete_matrix@matrix+1
  4320  0412  160A  158A  239C  120A  118A  	fcall	_delete_matrix
  4321  0417  1283               	bcf	3,5	;RP0=0, select bank0
  4322  0418  1303               	bcf	3,6	;RP1=0, select bank0
  4323  0419  00D1               	movwf	??_find_best_solution
  4324  041A  0851               	movf	??_find_best_solution,w
  4325  041B  1683               	bsf	3,5	;RP0=1, select bank1
  4326  041C  1303               	bcf	3,6	;RP1=0, select bank1
  4327  041D  00E9               	movwf	_temp_count^(0+128)
  4328                           
  4329                           ;teris_16f886.c: 1062: temp_risk = evaluate(&temp_matrix88);
  4330  041E  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4331  041F  160A  158A  277E  120A  118A  	fcall	_evaluate
  4332  0424  1283               	bcf	3,5	;RP0=0, select bank0
  4333  0425  1303               	bcf	3,6	;RP1=0, select bank0
  4334  0426  0845               	movf	?_evaluate+1,w
  4335  0427  1683               	bsf	3,5	;RP0=1, select bank1
  4336  0428  1303               	bcf	3,6	;RP1=0, select bank1
  4337  0429  00E8               	movwf	(_temp_risk+1)^(0+128)
  4338  042A  1283               	bcf	3,5	;RP0=0, select bank0
  4339  042B  1303               	bcf	3,6	;RP1=0, select bank0
  4340  042C  0844               	movf	?_evaluate,w
  4341  042D  1683               	bsf	3,5	;RP0=1, select bank1
  4342  042E  1303               	bcf	3,6	;RP1=0, select bank1
  4343  042F  00E7               	movwf	_temp_risk^(0+128)
  4344                           
  4345                           ;teris_16f886.c: 1063: temp_high = get_high_after_merge(temp_y, temp_cur_matrix44);
  4346  0430  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4347  0431  1283               	bcf	3,5	;RP0=0, select bank0
  4348  0432  1303               	bcf	3,6	;RP1=0, select bank0
  4349  0433  00C4               	movwf	get_high_after_merge@matrix
  4350  0434  1683               	bsf	3,5	;RP0=1, select bank1
  4351  0435  1303               	bcf	3,6	;RP1=0, select bank1
  4352  0436  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4353  0437  1283               	bcf	3,5	;RP0=0, select bank0
  4354  0438  1303               	bcf	3,6	;RP1=0, select bank0
  4355  0439  00C5               	movwf	get_high_after_merge@matrix+1
  4356  043A  086A               	movf	_temp_y,w
  4357  043B  160A  118A  20AE  120A  118A  	fcall	_get_high_after_merge
  4358  0440  1283               	bcf	3,5	;RP0=0, select bank0
  4359  0441  1303               	bcf	3,6	;RP1=0, select bank0
  4360  0442  00D1               	movwf	??_find_best_solution
  4361  0443  0851               	movf	??_find_best_solution,w
  4362  0444  1683               	bsf	3,5	;RP0=1, select bank1
  4363  0445  1303               	bcf	3,6	;RP1=0, select bank1
  4364  0446  00EA               	movwf	_temp_high^(0+128)
  4365                           
  4366                           ;teris_16f886.c: 1064: temp_hole = get_holes_after_merge(&temp_matrix88);
  4367  0447  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4368  0448  120A  158A  26A9  120A  118A  	fcall	_get_holes_after_merge
  4369  044D  1283               	bcf	3,5	;RP0=0, select bank0
  4370  044E  1303               	bcf	3,6	;RP1=0, select bank0
  4371  044F  00D1               	movwf	??_find_best_solution
  4372  0450  0851               	movf	??_find_best_solution,w
  4373  0451  1683               	bsf	3,5	;RP0=1, select bank1
  4374  0452  1303               	bcf	3,6	;RP1=0, select bank1
  4375  0453  00EB               	movwf	_temp_hole^(0+128)
  4376                           
  4377                           ;teris_16f886.c: 1066: printf_debug_MATRIX88(1, "Valid instance", &temp_matrix88);
  4378  0454  30F1               	movlw	low (STR_62| (0+32768))
  4379  0455  00F6               	movwf	printf_debug_MATRIX88@lable
  4380  0456  308C               	movlw	high (STR_62| (0+32768))
  4381  0457  00F7               	movwf	printf_debug_MATRIX88@lable+1
  4382  0458  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4383  0459  00F8               	movwf	printf_debug_MATRIX88@matrix
  4384  045A  3000               	movlw	0
  4385  045B  00F9               	movwf	printf_debug_MATRIX88@matrix+1
  4386  045C  3001               	movlw	1
  4387  045D  160A  118A  2028  120A  118A  	fcall	_printf_debug_MATRIX88
  4388                           
  4389                           ;teris_16f886.c: 1067: debug_line(1, "Start evaluation");
  4390  0462  3093               	movlw	low (STR_63| (0+32768))
  4391  0463  00F3               	movwf	debug_line@str
  4392  0464  308C               	movlw	high (STR_63| (0+32768))
  4393  0465  00F4               	movwf	debug_line@str+1
  4394  0466  3001               	movlw	1
  4395  0467  160A  158A  209D  120A  118A  	fcall	_debug_line
  4396                           
  4397                           ;teris_16f886.c: 1069: if(temp_count > temp_pre_count)
  4398  046C  1683               	bsf	3,5	;RP0=1, select bank1
  4399  046D  1303               	bcf	3,6	;RP1=0, select bank1
  4400  046E  0869               	movf	_temp_count^(0+128),w
  4401  046F  026C               	subwf	_temp_pre_count^(0+128),w
  4402  0470  1803               	skipnc
  4403  0471  2C87               	goto	l5511
  4404                           
  4405                           ;teris_16f886.c: 1070: {
  4406                           ;teris_16f886.c: 1071: debug_int2(1, "count: (%d) > (%d)", temp_count, temp_pre_count);
  4407  0472  30CB               	movlw	low (STR_64| (0+32768))
  4408  0473  1283               	bcf	3,5	;RP0=0, select bank0
  4409  0474  1303               	bcf	3,6	;RP1=0, select bank0
  4410  0475  00BF               	movwf	debug_int2@f
  4411  0476  308B               	movlw	high (STR_64| (0+32768))
  4412  0477  00C0               	movwf	debug_int2@f+1
  4413  0478  1683               	bsf	3,5	;RP0=1, select bank1
  4414  0479  1303               	bcf	3,6	;RP1=0, select bank1
  4415  047A  0869               	movf	_temp_count^(0+128),w
  4416  047B  1283               	bcf	3,5	;RP0=0, select bank0
  4417  047C  1303               	bcf	3,6	;RP1=0, select bank0
  4418  047D  00D1               	movwf	??_find_best_solution
  4419  047E  01D2               	clrf	??_find_best_solution+1
  4420  047F  0851               	movf	??_find_best_solution,w
  4421  0480  00C1               	movwf	debug_int2@i1
  4422  0481  0852               	movf	??_find_best_solution+1,w
  4423  0482  00C2               	movwf	debug_int2@i1+1
  4424  0483  1683               	bsf	3,5	;RP0=1, select bank1
  4425  0484  1303               	bcf	3,6	;RP1=0, select bank1
  4426  0485  086C               	movf	_temp_pre_count^(0+128),w
  4427  0486  2DC7               	goto	L5
  4428  0487                     l5511:	
  4429                           ;teris_16f886.c: 1078: }
  4430                           
  4431                           ;teris_16f886.c: 1077: temp_pre_x = temp_x;
  4432                           
  4433                           ;teris_16f886.c: 1076: tem_pre_sub_index = tem_sub_index;
  4434                           
  4435                           ;teris_16f886.c: 1075: temp_pre_hole = temp_hole;
  4436                           
  4437                           ;teris_16f886.c: 1074: temp_pre_high = temp_high;
  4438                           
  4439                           ;teris_16f886.c: 1073: temp_pre_risk = temp_risk;
  4440                           
  4441                           ;teris_16f886.c: 1072: temp_pre_count = temp_count;
  4442                           
  4443                           
  4444                           ;teris_16f886.c: 1079: else if(temp_count == temp_pre_count)
  4445  0487  1683               	bsf	3,5	;RP0=1, select bank1
  4446  0488  1303               	bcf	3,6	;RP1=0, select bank1
  4447  0489  0869               	movf	_temp_count^(0+128),w
  4448  048A  066C               	xorwf	_temp_pre_count^(0+128),w
  4449  048B  1D03               	skipz
  4450  048C  2E5A               	goto	l470
  4451                           
  4452                           ;teris_16f886.c: 1080: {
  4453                           ;teris_16f886.c: 1081: if(get_high(&g_matrix88) <= 8/2 + 1)
  4454  048D  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4455  048E  160A  158A  23E5  120A  118A  	fcall	_get_high
  4456  0493  1283               	bcf	3,5	;RP0=0, select bank0
  4457  0494  1303               	bcf	3,6	;RP1=0, select bank0
  4458  0495  00D1               	movwf	??_find_best_solution
  4459  0496  3006               	movlw	6
  4460  0497  0251               	subwf	??_find_best_solution,w
  4461  0498  1803               	skipnc
  4462  0499  2D3A               	goto	l5573
  4463                           
  4464                           ;teris_16f886.c: 1082: {
  4465                           ;teris_16f886.c: 1083: debug_int1(1, "height <= (%d)", 8/2 + 1);
  4466  049A  30C4               	movlw	low (STR_65| (0+32768))
  4467  049B  00BF               	movwf	debug_int1@f
  4468  049C  308C               	movlw	high (STR_65| (0+32768))
  4469  049D  00C0               	movwf	debug_int1@f+1
  4470  049E  3005               	movlw	5
  4471  049F  00C1               	movwf	debug_int1@i
  4472  04A0  3000               	movlw	0
  4473  04A1  00C2               	movwf	debug_int1@i+1
  4474  04A2  3001               	movlw	1
  4475  04A3  160A  158A  214F  120A  118A  	fcall	_debug_int1
  4476                           
  4477                           ;teris_16f886.c: 1084: debug_int2(1, "count: (%d) == (%d)", temp_count, temp_pre_count);
  4478  04A8  3042               	movlw	low (STR_66| (0+32768))
  4479  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  4480  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  4481  04AB  00BF               	movwf	debug_int2@f
  4482  04AC  308B               	movlw	high (STR_66| (0+32768))
  4483  04AD  00C0               	movwf	debug_int2@f+1
  4484  04AE  1683               	bsf	3,5	;RP0=1, select bank1
  4485  04AF  1303               	bcf	3,6	;RP1=0, select bank1
  4486  04B0  0869               	movf	_temp_count^(0+128),w
  4487  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  4488  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  4489  04B3  00D1               	movwf	??_find_best_solution
  4490  04B4  01D2               	clrf	??_find_best_solution+1
  4491  04B5  0851               	movf	??_find_best_solution,w
  4492  04B6  00C1               	movwf	debug_int2@i1
  4493  04B7  0852               	movf	??_find_best_solution+1,w
  4494  04B8  00C2               	movwf	debug_int2@i1+1
  4495  04B9  1683               	bsf	3,5	;RP0=1, select bank1
  4496  04BA  1303               	bcf	3,6	;RP1=0, select bank1
  4497  04BB  086C               	movf	_temp_pre_count^(0+128),w
  4498  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  4499  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  4500  04BE  00D3               	movwf	??_find_best_solution+2
  4501  04BF  01D4               	clrf	??_find_best_solution+3
  4502  04C0  0853               	movf	??_find_best_solution+2,w
  4503  04C1  00C3               	movwf	debug_int2@i2
  4504  04C2  0854               	movf	??_find_best_solution+3,w
  4505  04C3  00C4               	movwf	debug_int2@i2+1
  4506  04C4  3001               	movlw	1
  4507  04C5  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4508                           
  4509                           ;teris_16f886.c: 1085: if(temp_risk < temp_pre_risk)
  4510  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  4511  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  4512  04CC  086C               	movf	_temp_pre_risk+1,w
  4513  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  4514  04CE  1303               	bcf	3,6	;RP1=0, select bank1
  4515  04CF  0268               	subwf	(_temp_risk+1)^(0+128),w
  4516  04D0  1D03               	skipz
  4517  04D1  2CD8               	goto	u8155
  4518  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  4519  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  4520  04D4  086B               	movf	_temp_pre_risk,w
  4521  04D5  1683               	bsf	3,5	;RP0=1, select bank1
  4522  04D6  1303               	bcf	3,6	;RP1=0, select bank1
  4523  04D7  0267               	subwf	_temp_risk^(0+128),w
  4524  04D8                     u8155:	
  4525  04D8  1C03               	btfss	3,0
  4526  04D9  2E08               	goto	L6
  4527                           
  4528                           ;teris_16f886.c: 1095: else if(temp_risk == temp_pre_risk)
  4529                           
  4530                           ;teris_16f886.c: 1094: }
  4531                           
  4532                           ;teris_16f886.c: 1093: temp_pre_x = temp_x;
  4533                           
  4534                           ;teris_16f886.c: 1092: tem_pre_sub_index = tem_sub_index;
  4535                           
  4536                           ;teris_16f886.c: 1091: temp_pre_hole = temp_hole;
  4537                           
  4538                           ;teris_16f886.c: 1090: temp_pre_high = temp_high;
  4539                           
  4540                           ;teris_16f886.c: 1089: temp_pre_risk = temp_risk;
  4541                           
  4542                           ;teris_16f886.c: 1088: temp_pre_count = temp_count;
  4543                           
  4544                           ;teris_16f886.c: 1086: {
  4545                           ;teris_16f886.c: 1087: debug_int2(1, "risk: (%d) < (%d)", temp_risk, temp_pre_risk);
  4546  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  4547  04DB  086C               	movf	_temp_pre_risk+1,w
  4548  04DC  1683               	bsf	3,5	;RP0=1, select bank1
  4549  04DD  1303               	bcf	3,6	;RP1=0, select bank1
  4550  04DE  0668               	xorwf	(_temp_risk+1)^(0+128),w
  4551  04DF  1D03               	skipz
  4552  04E0  2CE7               	goto	u8165
  4553  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  4554  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  4555  04E3  086B               	movf	_temp_pre_risk,w
  4556  04E4  1683               	bsf	3,5	;RP0=1, select bank1
  4557  04E5  1303               	bcf	3,6	;RP1=0, select bank1
  4558  04E6  0667               	xorwf	_temp_risk^(0+128),w
  4559  04E7                     u8165:	
  4560  04E7  1D03               	skipz
  4561  04E8  2E5A               	goto	l470
  4562                           
  4563                           ;teris_16f886.c: 1096: {
  4564                           ;teris_16f886.c: 1097: debug_int2(1, "risk: (%d) == (%d)", temp_risk, temp_pre_risk);
  4565  04E9  30B8               	movlw	low (STR_68| (0+32768))
  4566  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  4567  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  4568  04EC  00BF               	movwf	debug_int2@f
  4569  04ED  308B               	movlw	high (STR_68| (0+32768))
  4570  04EE  00C0               	movwf	debug_int2@f+1
  4571  04EF  1683               	bsf	3,5	;RP0=1, select bank1
  4572  04F0  1303               	bcf	3,6	;RP1=0, select bank1
  4573  04F1  0868               	movf	(_temp_risk+1)^(0+128),w
  4574  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  4575  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  4576  04F4  00C2               	movwf	debug_int2@i1+1
  4577  04F5  1683               	bsf	3,5	;RP0=1, select bank1
  4578  04F6  1303               	bcf	3,6	;RP1=0, select bank1
  4579  04F7  0867               	movf	_temp_risk^(0+128),w
  4580  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  4581  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  4582  04FA  00C1               	movwf	debug_int2@i1
  4583  04FB  086C               	movf	_temp_pre_risk+1,w
  4584  04FC  00C4               	movwf	debug_int2@i2+1
  4585  04FD  086B               	movf	_temp_pre_risk,w
  4586  04FE  00C3               	movwf	debug_int2@i2
  4587  04FF  3001               	movlw	1
  4588  0500  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4589                           
  4590                           ;teris_16f886.c: 1098: if(temp_high < temp_pre_high)
  4591  0505  1683               	bsf	3,5	;RP0=1, select bank1
  4592  0506  1303               	bcf	3,6	;RP1=0, select bank1
  4593  0507  086E               	movf	_temp_pre_high^(0+128),w
  4594  0508  026A               	subwf	_temp_high^(0+128),w
  4595  0509  1C03               	btfss	3,0
  4596  050A  2D70               	goto	L8
  4597                           
  4598                           ;teris_16f886.c: 1108: else if(temp_high == temp_pre_high)
  4599                           
  4600                           ;teris_16f886.c: 1107: }
  4601                           
  4602                           ;teris_16f886.c: 1106: temp_pre_x = temp_x;
  4603                           
  4604                           ;teris_16f886.c: 1105: tem_pre_sub_index = tem_sub_index;
  4605                           
  4606                           ;teris_16f886.c: 1104: temp_pre_hole = temp_hole;
  4607                           
  4608                           ;teris_16f886.c: 1103: temp_pre_high = temp_high;
  4609                           
  4610                           ;teris_16f886.c: 1102: temp_pre_risk = temp_risk;
  4611                           
  4612                           ;teris_16f886.c: 1101: temp_pre_count = temp_count;
  4613                           
  4614                           ;teris_16f886.c: 1099: {
  4615                           ;teris_16f886.c: 1100: debug_int2(1, "high: (%d) < (%d)", temp_high, temp_pre_high);
  4616  050B  1683               	bsf	3,5	;RP0=1, select bank1
  4617  050C  1303               	bcf	3,6	;RP1=0, select bank1
  4618  050D  086A               	movf	_temp_high^(0+128),w
  4619  050E  066E               	xorwf	_temp_pre_high^(0+128),w
  4620  050F  1D03               	skipz
  4621  0510  2E5A               	goto	l470
  4622                           
  4623                           ;teris_16f886.c: 1109: {
  4624                           ;teris_16f886.c: 1110: debug_int2(1, "high: (%d) == (%d)", temp_high, temp_pre_high);
  4625  0511  30A5               	movlw	low (STR_70| (0+32768))
  4626  0512  1283               	bcf	3,5	;RP0=0, select bank0
  4627  0513  1303               	bcf	3,6	;RP1=0, select bank0
  4628  0514  00BF               	movwf	debug_int2@f
  4629  0515  308B               	movlw	high (STR_70| (0+32768))
  4630  0516  00C0               	movwf	debug_int2@f+1
  4631  0517  1683               	bsf	3,5	;RP0=1, select bank1
  4632  0518  1303               	bcf	3,6	;RP1=0, select bank1
  4633  0519  086A               	movf	_temp_high^(0+128),w
  4634  051A  1283               	bcf	3,5	;RP0=0, select bank0
  4635  051B  1303               	bcf	3,6	;RP1=0, select bank0
  4636  051C  00D1               	movwf	??_find_best_solution
  4637  051D  01D2               	clrf	??_find_best_solution+1
  4638  051E  0851               	movf	??_find_best_solution,w
  4639  051F  00C1               	movwf	debug_int2@i1
  4640  0520  0852               	movf	??_find_best_solution+1,w
  4641  0521  00C2               	movwf	debug_int2@i1+1
  4642  0522  1683               	bsf	3,5	;RP0=1, select bank1
  4643  0523  1303               	bcf	3,6	;RP1=0, select bank1
  4644  0524  086E               	movf	_temp_pre_high^(0+128),w
  4645  0525  1283               	bcf	3,5	;RP0=0, select bank0
  4646  0526  1303               	bcf	3,6	;RP1=0, select bank0
  4647  0527  00D3               	movwf	??_find_best_solution+2
  4648  0528  01D4               	clrf	??_find_best_solution+3
  4649  0529  0853               	movf	??_find_best_solution+2,w
  4650  052A  00C3               	movwf	debug_int2@i2
  4651  052B  0854               	movf	??_find_best_solution+3,w
  4652  052C  00C4               	movwf	debug_int2@i2+1
  4653  052D  3001               	movlw	1
  4654  052E  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4655                           
  4656                           ;teris_16f886.c: 1111: if(temp_hole < temp_pre_hole)
  4657  0533  1683               	bsf	3,5	;RP0=1, select bank1
  4658  0534  1303               	bcf	3,6	;RP1=0, select bank1
  4659  0535  086F               	movf	_temp_pre_hole^(0+128),w
  4660  0536  026B               	subwf	_temp_hole^(0+128),w
  4661  0537  1803               	skipnc
  4662  0538  2E5A               	goto	l470
  4663  0539  2DB3               	goto	L7
  4664  053A                     l5573:	
  4665                           ;teris_16f886.c: 1120: }
  4666                           ;teris_16f886.c: 1122: }
  4667                           ;teris_16f886.c: 1124: }
  4668                           ;teris_16f886.c: 1125: }
  4669                           
  4670                           ;teris_16f886.c: 1119: temp_pre_x = temp_x;
  4671                           
  4672                           ;teris_16f886.c: 1118: tem_pre_sub_index = tem_sub_index;
  4673                           
  4674                           ;teris_16f886.c: 1117: temp_pre_hole = temp_hole;
  4675                           
  4676                           ;teris_16f886.c: 1116: temp_pre_high = temp_high;
  4677                           
  4678                           ;teris_16f886.c: 1115: temp_pre_risk = temp_risk;
  4679                           
  4680                           ;teris_16f886.c: 1114: temp_pre_count = temp_count;
  4681                           
  4682                           ;teris_16f886.c: 1112: {
  4683                           ;teris_16f886.c: 1113: debug_int2(1, "hole: (%d) < (%d)", temp_hole, temp_pre_hole);
  4684                           
  4685                           
  4686                           ;teris_16f886.c: 1126: else
  4687                           ;teris_16f886.c: 1127: {
  4688                           ;teris_16f886.c: 1128: debug_int1(1, "WARNING height > (%d)", 8/2 + 1);
  4689  053A  30D8               	movlw	low (STR_72| (0+32768))
  4690  053B  00BF               	movwf	debug_int1@f
  4691  053C  308A               	movlw	high (STR_72| (0+32768))
  4692  053D  00C0               	movwf	debug_int1@f+1
  4693  053E  3005               	movlw	5
  4694  053F  00C1               	movwf	debug_int1@i
  4695  0540  3000               	movlw	0
  4696  0541  00C2               	movwf	debug_int1@i+1
  4697  0542  3001               	movlw	1
  4698  0543  160A  158A  214F  120A  118A  	fcall	_debug_int1
  4699                           
  4700                           ;teris_16f886.c: 1129: debug_int2(1, "high: (%d), (%d)", temp_high, temp_pre_high);
  4701  0548  3082               	movlw	low (STR_73| (0+32768))
  4702  0549  1283               	bcf	3,5	;RP0=0, select bank0
  4703  054A  1303               	bcf	3,6	;RP1=0, select bank0
  4704  054B  00BF               	movwf	debug_int2@f
  4705  054C  308C               	movlw	high (STR_73| (0+32768))
  4706  054D  00C0               	movwf	debug_int2@f+1
  4707  054E  1683               	bsf	3,5	;RP0=1, select bank1
  4708  054F  1303               	bcf	3,6	;RP1=0, select bank1
  4709  0550  086A               	movf	_temp_high^(0+128),w
  4710  0551  1283               	bcf	3,5	;RP0=0, select bank0
  4711  0552  1303               	bcf	3,6	;RP1=0, select bank0
  4712  0553  00D1               	movwf	??_find_best_solution
  4713  0554  01D2               	clrf	??_find_best_solution+1
  4714  0555  0851               	movf	??_find_best_solution,w
  4715  0556  00C1               	movwf	debug_int2@i1
  4716  0557  0852               	movf	??_find_best_solution+1,w
  4717  0558  00C2               	movwf	debug_int2@i1+1
  4718  0559  1683               	bsf	3,5	;RP0=1, select bank1
  4719  055A  1303               	bcf	3,6	;RP1=0, select bank1
  4720  055B  086E               	movf	_temp_pre_high^(0+128),w
  4721  055C  1283               	bcf	3,5	;RP0=0, select bank0
  4722  055D  1303               	bcf	3,6	;RP1=0, select bank0
  4723  055E  00D3               	movwf	??_find_best_solution+2
  4724  055F  01D4               	clrf	??_find_best_solution+3
  4725  0560  0853               	movf	??_find_best_solution+2,w
  4726  0561  00C3               	movwf	debug_int2@i2
  4727  0562  0854               	movf	??_find_best_solution+3,w
  4728  0563  00C4               	movwf	debug_int2@i2+1
  4729  0564  3001               	movlw	1
  4730  0565  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4731                           
  4732                           ;teris_16f886.c: 1130: if(temp_high < temp_pre_high)
  4733  056A  1683               	bsf	3,5	;RP0=1, select bank1
  4734  056B  1303               	bcf	3,6	;RP1=0, select bank1
  4735  056C  086E               	movf	_temp_pre_high^(0+128),w
  4736  056D  026A               	subwf	_temp_high^(0+128),w
  4737  056E  1803               	skipnc
  4738  056F  2D85               	goto	l5591
  4739  0570                     L8:	
  4740                           
  4741                           ;teris_16f886.c: 1131: {
  4742                           ;teris_16f886.c: 1132: debug_int2(1, "high: (%d) < (%d)", temp_high, temp_pre_high);
  4743  0570  303C               	movlw	low (STR_69| (0+32768))
  4744  0571  1283               	bcf	3,5	;RP0=0, select bank0
  4745  0572  1303               	bcf	3,6	;RP1=0, select bank0
  4746  0573  00BF               	movwf	debug_int2@f
  4747  0574  308C               	movlw	high (STR_69| (0+32768))
  4748  0575  00C0               	movwf	debug_int2@f+1
  4749  0576  1683               	bsf	3,5	;RP0=1, select bank1
  4750  0577  1303               	bcf	3,6	;RP1=0, select bank1
  4751  0578  086A               	movf	_temp_high^(0+128),w
  4752  0579  1283               	bcf	3,5	;RP0=0, select bank0
  4753  057A  1303               	bcf	3,6	;RP1=0, select bank0
  4754  057B  00D1               	movwf	??_find_best_solution
  4755  057C  01D2               	clrf	??_find_best_solution+1
  4756  057D  0851               	movf	??_find_best_solution,w
  4757  057E  00C1               	movwf	debug_int2@i1
  4758  057F  0852               	movf	??_find_best_solution+1,w
  4759  0580  00C2               	movwf	debug_int2@i1+1
  4760  0581  1683               	bsf	3,5	;RP0=1, select bank1
  4761  0582  1303               	bcf	3,6	;RP1=0, select bank1
  4762  0583  086E               	movf	_temp_pre_high^(0+128),w
  4763  0584  2DC7               	goto	L5
  4764  0585                     l5591:	
  4765                           ;teris_16f886.c: 1139: }
  4766                           
  4767                           ;teris_16f886.c: 1138: temp_pre_x = temp_x;
  4768                           
  4769                           ;teris_16f886.c: 1137: tem_pre_sub_index = tem_sub_index;
  4770                           
  4771                           ;teris_16f886.c: 1136: temp_pre_hole = temp_hole;
  4772                           
  4773                           ;teris_16f886.c: 1135: temp_pre_high = temp_high;
  4774                           
  4775                           ;teris_16f886.c: 1134: temp_pre_risk = temp_risk;
  4776                           
  4777                           ;teris_16f886.c: 1133: temp_pre_count = temp_count;
  4778                           
  4779                           
  4780                           ;teris_16f886.c: 1140: else if(temp_high == temp_pre_high)
  4781  0585  1683               	bsf	3,5	;RP0=1, select bank1
  4782  0586  1303               	bcf	3,6	;RP1=0, select bank1
  4783  0587  086A               	movf	_temp_high^(0+128),w
  4784  0588  066E               	xorwf	_temp_pre_high^(0+128),w
  4785  0589  1D03               	skipz
  4786  058A  2E5A               	goto	l470
  4787                           
  4788                           ;teris_16f886.c: 1141: {
  4789                           ;teris_16f886.c: 1142: debug_int2(1, "high: (%d) == (%d)", temp_high, temp_pre_high);
  4790  058B  30A5               	movlw	low (STR_70| (0+32768))
  4791  058C  1283               	bcf	3,5	;RP0=0, select bank0
  4792  058D  1303               	bcf	3,6	;RP1=0, select bank0
  4793  058E  00BF               	movwf	debug_int2@f
  4794  058F  308B               	movlw	high (STR_70| (0+32768))
  4795  0590  00C0               	movwf	debug_int2@f+1
  4796  0591  1683               	bsf	3,5	;RP0=1, select bank1
  4797  0592  1303               	bcf	3,6	;RP1=0, select bank1
  4798  0593  086A               	movf	_temp_high^(0+128),w
  4799  0594  1283               	bcf	3,5	;RP0=0, select bank0
  4800  0595  1303               	bcf	3,6	;RP1=0, select bank0
  4801  0596  00D1               	movwf	??_find_best_solution
  4802  0597  01D2               	clrf	??_find_best_solution+1
  4803  0598  0851               	movf	??_find_best_solution,w
  4804  0599  00C1               	movwf	debug_int2@i1
  4805  059A  0852               	movf	??_find_best_solution+1,w
  4806  059B  00C2               	movwf	debug_int2@i1+1
  4807  059C  1683               	bsf	3,5	;RP0=1, select bank1
  4808  059D  1303               	bcf	3,6	;RP1=0, select bank1
  4809  059E  086E               	movf	_temp_pre_high^(0+128),w
  4810  059F  1283               	bcf	3,5	;RP0=0, select bank0
  4811  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  4812  05A1  00D3               	movwf	??_find_best_solution+2
  4813  05A2  01D4               	clrf	??_find_best_solution+3
  4814  05A3  0853               	movf	??_find_best_solution+2,w
  4815  05A4  00C3               	movwf	debug_int2@i2
  4816  05A5  0854               	movf	??_find_best_solution+3,w
  4817  05A6  00C4               	movwf	debug_int2@i2+1
  4818  05A7  3001               	movlw	1
  4819  05A8  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4820                           
  4821                           ;teris_16f886.c: 1143: if(temp_hole < temp_pre_hole)
  4822  05AD  1683               	bsf	3,5	;RP0=1, select bank1
  4823  05AE  1303               	bcf	3,6	;RP1=0, select bank1
  4824  05AF  086F               	movf	_temp_pre_hole^(0+128),w
  4825  05B0  026B               	subwf	_temp_hole^(0+128),w
  4826  05B1  1803               	skipnc
  4827  05B2  2DD0               	goto	l5611
  4828  05B3                     L7:	
  4829                           
  4830                           ;teris_16f886.c: 1144: {
  4831                           ;teris_16f886.c: 1145: debug_int2(1, "hole: (%d) < (%d)", temp_hole, temp_pre_hole);
  4832  05B3  302A               	movlw	low (STR_71| (0+32768))
  4833  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  4834  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  4835  05B6  00BF               	movwf	debug_int2@f
  4836  05B7  308C               	movlw	high (STR_71| (0+32768))
  4837  05B8  00C0               	movwf	debug_int2@f+1
  4838  05B9  1683               	bsf	3,5	;RP0=1, select bank1
  4839  05BA  1303               	bcf	3,6	;RP1=0, select bank1
  4840  05BB  086B               	movf	_temp_hole^(0+128),w
  4841  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  4842  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  4843  05BE  00D1               	movwf	??_find_best_solution
  4844  05BF  01D2               	clrf	??_find_best_solution+1
  4845  05C0  0851               	movf	??_find_best_solution,w
  4846  05C1  00C1               	movwf	debug_int2@i1
  4847  05C2  0852               	movf	??_find_best_solution+1,w
  4848  05C3  00C2               	movwf	debug_int2@i1+1
  4849  05C4  1683               	bsf	3,5	;RP0=1, select bank1
  4850  05C5  1303               	bcf	3,6	;RP1=0, select bank1
  4851  05C6  086F               	movf	_temp_pre_hole^(0+128),w
  4852  05C7                     L5:	
  4853  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  4854  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  4855  05C9  00D3               	movwf	??_find_best_solution+2
  4856  05CA  01D4               	clrf	??_find_best_solution+3
  4857  05CB  0853               	movf	??_find_best_solution+2,w
  4858  05CC  00C3               	movwf	debug_int2@i2
  4859  05CD  0854               	movf	??_find_best_solution+3,w
  4860  05CE  00C4               	movwf	debug_int2@i2+1
  4861  05CF  2E1E               	goto	L2
  4862  05D0                     l5611:	
  4863                           ;teris_16f886.c: 1152: }
  4864                           
  4865                           ;teris_16f886.c: 1151: temp_pre_x = temp_x;
  4866                           
  4867                           ;teris_16f886.c: 1150: tem_pre_sub_index = tem_sub_index;
  4868                           
  4869                           ;teris_16f886.c: 1149: temp_pre_hole = temp_hole;
  4870                           
  4871                           ;teris_16f886.c: 1148: temp_pre_high = temp_high;
  4872                           
  4873                           ;teris_16f886.c: 1147: temp_pre_risk = temp_risk;
  4874                           
  4875                           ;teris_16f886.c: 1146: temp_pre_count = temp_count;
  4876                           
  4877                           
  4878                           ;teris_16f886.c: 1153: else if(temp_hole == temp_pre_hole)
  4879  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  4880  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  4881  05D2  086B               	movf	_temp_hole^(0+128),w
  4882  05D3  066F               	xorwf	_temp_pre_hole^(0+128),w
  4883  05D4  1D03               	skipz
  4884  05D5  2E5A               	goto	l470
  4885                           
  4886                           ;teris_16f886.c: 1154: {
  4887                           ;teris_16f886.c: 1155: debug_int2(1, "hole: (%d) == (%d)", temp_hole, temp_pre_hole);
  4888  05D6  3092               	movlw	low (STR_77| (0+32768))
  4889  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  4890  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  4891  05D9  00BF               	movwf	debug_int2@f
  4892  05DA  308B               	movlw	high (STR_77| (0+32768))
  4893  05DB  00C0               	movwf	debug_int2@f+1
  4894  05DC  1683               	bsf	3,5	;RP0=1, select bank1
  4895  05DD  1303               	bcf	3,6	;RP1=0, select bank1
  4896  05DE  086B               	movf	_temp_hole^(0+128),w
  4897  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  4898  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  4899  05E1  00D1               	movwf	??_find_best_solution
  4900  05E2  01D2               	clrf	??_find_best_solution+1
  4901  05E3  0851               	movf	??_find_best_solution,w
  4902  05E4  00C1               	movwf	debug_int2@i1
  4903  05E5  0852               	movf	??_find_best_solution+1,w
  4904  05E6  00C2               	movwf	debug_int2@i1+1
  4905  05E7  1683               	bsf	3,5	;RP0=1, select bank1
  4906  05E8  1303               	bcf	3,6	;RP1=0, select bank1
  4907  05E9  086F               	movf	_temp_pre_hole^(0+128),w
  4908  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  4909  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  4910  05EC  00D3               	movwf	??_find_best_solution+2
  4911  05ED  01D4               	clrf	??_find_best_solution+3
  4912  05EE  0853               	movf	??_find_best_solution+2,w
  4913  05EF  00C3               	movwf	debug_int2@i2
  4914  05F0  0854               	movf	??_find_best_solution+3,w
  4915  05F1  00C4               	movwf	debug_int2@i2+1
  4916  05F2  3001               	movlw	1
  4917  05F3  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4918                           
  4919                           ;teris_16f886.c: 1156: if(temp_risk < temp_pre_risk)
  4920  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  4921  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  4922  05FA  086C               	movf	_temp_pre_risk+1,w
  4923  05FB  1683               	bsf	3,5	;RP0=1, select bank1
  4924  05FC  1303               	bcf	3,6	;RP1=0, select bank1
  4925  05FD  0268               	subwf	(_temp_risk+1)^(0+128),w
  4926  05FE  1D03               	skipz
  4927  05FF  2E06               	goto	u8245
  4928  0600  1283               	bcf	3,5	;RP0=0, select bank0
  4929  0601  1303               	bcf	3,6	;RP1=0, select bank0
  4930  0602  086B               	movf	_temp_pre_risk,w
  4931  0603  1683               	bsf	3,5	;RP0=1, select bank1
  4932  0604  1303               	bcf	3,6	;RP1=0, select bank1
  4933  0605  0267               	subwf	_temp_risk^(0+128),w
  4934  0606                     u8245:	
  4935  0606  1803               	skipnc
  4936  0607  2E5A               	goto	l470
  4937  0608                     L6:	
  4938                           
  4939                           ;teris_16f886.c: 1157: {
  4940                           ;teris_16f886.c: 1158: debug_int2(1, "risk: (%d) < (%d)", temp_risk, temp_pre_risk);
  4941  0608  304E               	movlw	low (STR_67| (0+32768))
  4942  0609  1283               	bcf	3,5	;RP0=0, select bank0
  4943  060A  1303               	bcf	3,6	;RP1=0, select bank0
  4944  060B  00BF               	movwf	debug_int2@f
  4945  060C  308C               	movlw	high (STR_67| (0+32768))
  4946  060D  00C0               	movwf	debug_int2@f+1
  4947  060E  1683               	bsf	3,5	;RP0=1, select bank1
  4948  060F  1303               	bcf	3,6	;RP1=0, select bank1
  4949  0610  0868               	movf	(_temp_risk+1)^(0+128),w
  4950  0611  1283               	bcf	3,5	;RP0=0, select bank0
  4951  0612  1303               	bcf	3,6	;RP1=0, select bank0
  4952  0613  00C2               	movwf	debug_int2@i1+1
  4953  0614  1683               	bsf	3,5	;RP0=1, select bank1
  4954  0615  1303               	bcf	3,6	;RP1=0, select bank1
  4955  0616  0867               	movf	_temp_risk^(0+128),w
  4956  0617  1283               	bcf	3,5	;RP0=0, select bank0
  4957  0618  1303               	bcf	3,6	;RP1=0, select bank0
  4958  0619  00C1               	movwf	debug_int2@i1
  4959  061A  086C               	movf	_temp_pre_risk+1,w
  4960  061B  00C4               	movwf	debug_int2@i2+1
  4961  061C  086B               	movf	_temp_pre_risk,w
  4962  061D  00C3               	movwf	debug_int2@i2
  4963  061E                     L2:	
  4964  061E  3001               	movlw	1
  4965  061F  160A  158A  2174  120A  118A  	fcall	_debug_int2
  4966                           
  4967                           ;teris_16f886.c: 1159: temp_pre_count = temp_count;
  4968  0624  1683               	bsf	3,5	;RP0=1, select bank1
  4969  0625  1303               	bcf	3,6	;RP1=0, select bank1
  4970  0626  0869               	movf	_temp_count^(0+128),w
  4971  0627  1283               	bcf	3,5	;RP0=0, select bank0
  4972  0628  1303               	bcf	3,6	;RP1=0, select bank0
  4973  0629  00D1               	movwf	??_find_best_solution
  4974  062A  0851               	movf	??_find_best_solution,w
  4975  062B  1683               	bsf	3,5	;RP0=1, select bank1
  4976  062C  1303               	bcf	3,6	;RP1=0, select bank1
  4977  062D  00EC               	movwf	_temp_pre_count^(0+128)
  4978                           
  4979                           ;teris_16f886.c: 1160: temp_pre_risk = temp_risk;
  4980  062E  0868               	movf	(_temp_risk+1)^(0+128),w
  4981  062F  1283               	bcf	3,5	;RP0=0, select bank0
  4982  0630  1303               	bcf	3,6	;RP1=0, select bank0
  4983  0631  00EC               	movwf	_temp_pre_risk+1
  4984  0632  1683               	bsf	3,5	;RP0=1, select bank1
  4985  0633  1303               	bcf	3,6	;RP1=0, select bank1
  4986  0634  0867               	movf	_temp_risk^(0+128),w
  4987  0635  1283               	bcf	3,5	;RP0=0, select bank0
  4988  0636  1303               	bcf	3,6	;RP1=0, select bank0
  4989  0637  00EB               	movwf	_temp_pre_risk
  4990                           
  4991                           ;teris_16f886.c: 1161: temp_pre_high = temp_high;
  4992  0638  1683               	bsf	3,5	;RP0=1, select bank1
  4993  0639  1303               	bcf	3,6	;RP1=0, select bank1
  4994  063A  086A               	movf	_temp_high^(0+128),w
  4995  063B  1283               	bcf	3,5	;RP0=0, select bank0
  4996  063C  1303               	bcf	3,6	;RP1=0, select bank0
  4997  063D  00D1               	movwf	??_find_best_solution
  4998  063E  0851               	movf	??_find_best_solution,w
  4999  063F  1683               	bsf	3,5	;RP0=1, select bank1
  5000  0640  1303               	bcf	3,6	;RP1=0, select bank1
  5001  0641  00EE               	movwf	_temp_pre_high^(0+128)
  5002                           
  5003                           ;teris_16f886.c: 1162: temp_pre_hole = temp_hole;
  5004  0642  086B               	movf	_temp_hole^(0+128),w
  5005  0643  1283               	bcf	3,5	;RP0=0, select bank0
  5006  0644  1303               	bcf	3,6	;RP1=0, select bank0
  5007  0645  00D1               	movwf	??_find_best_solution
  5008  0646  0851               	movf	??_find_best_solution,w
  5009  0647  1683               	bsf	3,5	;RP0=1, select bank1
  5010  0648  1303               	bcf	3,6	;RP1=0, select bank1
  5011  0649  00EF               	movwf	_temp_pre_hole^(0+128)
  5012                           
  5013                           ;teris_16f886.c: 1163: tem_pre_sub_index = tem_sub_index;
  5014  064A  0865               	movf	find_best_solution@tem_sub_index^(0+128),w
  5015  064B  1283               	bcf	3,5	;RP0=0, select bank0
  5016  064C  1303               	bcf	3,6	;RP1=0, select bank0
  5017  064D  00D1               	movwf	??_find_best_solution
  5018  064E  0851               	movf	??_find_best_solution,w
  5019  064F  1683               	bsf	3,5	;RP0=1, select bank3
  5020  0650  1703               	bsf	3,6	;RP1=1, select bank3
  5021  0651  00D6               	movwf	_tem_pre_sub_index^(0+384)
  5022                           
  5023                           ;teris_16f886.c: 1164: temp_pre_x = temp_x;
  5024  0652  1683               	bsf	3,5	;RP0=1, select bank1
  5025  0653  1303               	bcf	3,6	;RP1=0, select bank1
  5026  0654  0866               	movf	find_best_solution@temp_x^(0+128),w
  5027  0655  1283               	bcf	3,5	;RP0=0, select bank0
  5028  0656  1303               	bcf	3,6	;RP1=0, select bank0
  5029  0657  00D1               	movwf	??_find_best_solution
  5030  0658  0851               	movf	??_find_best_solution,w
  5031  0659  00ED               	movwf	_temp_pre_x
  5032  065A                     l470:	
  5033                           
  5034                           ;teris_16f886.c: 1165: }
  5035                           ;teris_16f886.c: 1166: }
  5036                           ;teris_16f886.c: 1167: }
  5037                           ;teris_16f886.c: 1168: }
  5038                           ;teris_16f886.c: 1169: }
  5039                           ;teris_16f886.c: 1175: debug_line(1, "Loop");
  5040  065A  30B5               	movlw	low (STR_79| (0+32768))
  5041  065B  00F3               	movwf	debug_line@str
  5042  065C  308D               	movlw	high (STR_79| (0+32768))
  5043  065D  00F4               	movwf	debug_line@str+1
  5044  065E  3001               	movlw	1
  5045  065F  160A  158A  209D  120A  118A  	fcall	_debug_line
  5046                           
  5047                           ;teris_16f886.c: 1176: debug_int1(1, "sub_index = %d", tem_pre_sub_index);
  5048  0664  3069               	movlw	low ((STR_14+12)| (0+32768))
  5049  0665  1283               	bcf	3,5	;RP0=0, select bank0
  5050  0666  1303               	bcf	3,6	;RP1=0, select bank0
  5051  0667  00BF               	movwf	debug_int1@f
  5052  0668  308A               	movlw	high ((STR_14+12)| (0+32768))
  5053  0669  00C0               	movwf	debug_int1@f+1
  5054  066A  1683               	bsf	3,5	;RP0=1, select bank3
  5055  066B  1703               	bsf	3,6	;RP1=1, select bank3
  5056  066C  0856               	movf	_tem_pre_sub_index^(0+384),w
  5057  066D  1283               	bcf	3,5	;RP0=0, select bank0
  5058  066E  1303               	bcf	3,6	;RP1=0, select bank0
  5059  066F  00C1               	movwf	debug_int1@i
  5060  0670  01C2               	clrf	debug_int1@i+1
  5061  0671  1BC1               	btfsc	debug_int1@i,7
  5062  0672  03C2               	decf	debug_int1@i+1,f
  5063  0673  3001               	movlw	1
  5064  0674  160A  158A  214F  120A  118A  	fcall	_debug_int1
  5065                           
  5066                           ;teris_16f886.c: 1177: debug_int1(1, "temp_pre_x = %d", temp_pre_x);
  5067  0679  30B4               	movlw	low (STR_81| (0+32768))
  5068  067A  1283               	bcf	3,5	;RP0=0, select bank0
  5069  067B  1303               	bcf	3,6	;RP1=0, select bank0
  5070  067C  00BF               	movwf	debug_int1@f
  5071  067D  308C               	movlw	high (STR_81| (0+32768))
  5072  067E  00C0               	movwf	debug_int1@f+1
  5073  067F  086D               	movf	_temp_pre_x,w
  5074  0680  00C1               	movwf	debug_int1@i
  5075  0681  01C2               	clrf	debug_int1@i+1
  5076  0682  1BC1               	btfsc	debug_int1@i,7
  5077  0683  03C2               	decf	debug_int1@i+1,f
  5078  0684  3001               	movlw	1
  5079  0685  160A  158A  214F  120A  118A  	fcall	_debug_int1
  5080                           
  5081                           ;teris_16f886.c: 1178: debug_int1(1, "temp_pre_count = %d", temp_pre_count);
  5082  068A  307E               	movlw	low (STR_82| (0+32768))
  5083  068B  1283               	bcf	3,5	;RP0=0, select bank0
  5084  068C  1303               	bcf	3,6	;RP1=0, select bank0
  5085  068D  00BF               	movwf	debug_int1@f
  5086  068E  308B               	movlw	high (STR_82| (0+32768))
  5087  068F  00C0               	movwf	debug_int1@f+1
  5088  0690  1683               	bsf	3,5	;RP0=1, select bank1
  5089  0691  1303               	bcf	3,6	;RP1=0, select bank1
  5090  0692  086C               	movf	_temp_pre_count^(0+128),w
  5091  0693  1283               	bcf	3,5	;RP0=0, select bank0
  5092  0694  1303               	bcf	3,6	;RP1=0, select bank0
  5093  0695  00D1               	movwf	??_find_best_solution
  5094  0696  01D2               	clrf	??_find_best_solution+1
  5095  0697  0851               	movf	??_find_best_solution,w
  5096  0698  00C1               	movwf	debug_int1@i
  5097  0699  0852               	movf	??_find_best_solution+1,w
  5098  069A  00C2               	movwf	debug_int1@i+1
  5099  069B  3001               	movlw	1
  5100  069C  160A  158A  214F  120A  118A  	fcall	_debug_int1
  5101                           
  5102                           ;teris_16f886.c: 1179: debug_int1(1, "temp_pre_risk = %d", temp_pre_risk);
  5103  06A1  3017               	movlw	low (STR_83| (0+32768))
  5104  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  5105  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  5106  06A4  00BF               	movwf	debug_int1@f
  5107  06A5  308C               	movlw	high (STR_83| (0+32768))
  5108  06A6  00C0               	movwf	debug_int1@f+1
  5109  06A7  086C               	movf	_temp_pre_risk+1,w
  5110  06A8  00C2               	movwf	debug_int1@i+1
  5111  06A9  086B               	movf	_temp_pre_risk,w
  5112  06AA  00C1               	movwf	debug_int1@i
  5113  06AB  3001               	movlw	1
  5114  06AC  160A  158A  214F  120A  118A  	fcall	_debug_int1
  5115                           
  5116                           ;teris_16f886.c: 1180: debug_int1(1, "temp_pre_high = %d", temp_pre_high);
  5117  06B1  3004               	movlw	low (STR_84| (0+32768))
  5118  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  5119  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  5120  06B4  00BF               	movwf	debug_int1@f
  5121  06B5  308C               	movlw	high (STR_84| (0+32768))
  5122  06B6  00C0               	movwf	debug_int1@f+1
  5123  06B7  1683               	bsf	3,5	;RP0=1, select bank1
  5124  06B8  1303               	bcf	3,6	;RP1=0, select bank1
  5125  06B9  086E               	movf	_temp_pre_high^(0+128),w
  5126  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  5127  06BB  1303               	bcf	3,6	;RP1=0, select bank0
  5128  06BC  00D1               	movwf	??_find_best_solution
  5129  06BD  01D2               	clrf	??_find_best_solution+1
  5130  06BE  0851               	movf	??_find_best_solution,w
  5131  06BF  00C1               	movwf	debug_int1@i
  5132  06C0  0852               	movf	??_find_best_solution+1,w
  5133  06C1  00C2               	movwf	debug_int1@i+1
  5134  06C2  3001               	movlw	1
  5135  06C3  160A  158A  214F  120A  118A  	fcall	_debug_int1
  5136                           
  5137                           ;teris_16f886.c: 1181: debug_int1(1, "temp_pre_hole = %d", temp_pre_hole);
  5138  06C8  30F1               	movlw	low (STR_85| (0+32768))
  5139  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  5140  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  5141  06CB  00BF               	movwf	debug_int1@f
  5142  06CC  308B               	movlw	high (STR_85| (0+32768))
  5143  06CD  00C0               	movwf	debug_int1@f+1
  5144  06CE  1683               	bsf	3,5	;RP0=1, select bank1
  5145  06CF  1303               	bcf	3,6	;RP1=0, select bank1
  5146  06D0  086F               	movf	_temp_pre_hole^(0+128),w
  5147  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  5148  06D2  1303               	bcf	3,6	;RP1=0, select bank0
  5149  06D3  00D1               	movwf	??_find_best_solution
  5150  06D4  01D2               	clrf	??_find_best_solution+1
  5151  06D5  0851               	movf	??_find_best_solution,w
  5152  06D6  00C1               	movwf	debug_int1@i
  5153  06D7  0852               	movf	??_find_best_solution+1,w
  5154  06D8  00C2               	movwf	debug_int1@i+1
  5155  06D9  3001               	movlw	1
  5156  06DA  160A  158A  214F  120A  118A  	fcall	_debug_int1
  5157  06DF                     l5631:	
  5158  06DF  3001               	movlw	1
  5159  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  5160  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  5161  06E2  00D1               	movwf	??_find_best_solution
  5162  06E3  0851               	movf	??_find_best_solution,w
  5163  06E4  1683               	bsf	3,5	;RP0=1, select bank1
  5164  06E5  1303               	bcf	3,6	;RP1=0, select bank1
  5165  06E6  07E6               	addwf	find_best_solution@temp_x^(0+128),f
  5166  06E7  2B6D               	goto	l5633
  5167  06E8                     l5635:	
  5168  06E8  3001               	movlw	1
  5169  06E9  00D1               	movwf	??_find_best_solution
  5170  06EA  0851               	movf	??_find_best_solution,w
  5171  06EB  1683               	bsf	3,5	;RP0=1, select bank1
  5172  06EC  1303               	bcf	3,6	;RP1=0, select bank1
  5173  06ED  07E5               	addwf	find_best_solution@tem_sub_index^(0+128),f
  5174  06EE  2ADE               	goto	l5637
  5175  06EF                     l5639:	
  5176                           
  5177                           ;teris_16f886.c: 1183: }
  5178                           ;teris_16f886.c: 1184: }
  5179                           ;teris_16f886.c: 1185: if(res == 1)
  5180  06EF  0322               	decf	find_best_solution@res^(0+128),w
  5181  06F0  1D03               	btfss	3,2
  5182  06F1  2FAE               	goto	l5661
  5183                           
  5184                           ;teris_16f886.c: 1186: {
  5185                           ;teris_16f886.c: 1187: g_char_info[g_char_info_index].cur_index = tem_pre_sub_index;
  5186  06F2  1683               	bsf	3,5	;RP0=1, select bank3
  5187  06F3  1703               	bsf	3,6	;RP1=1, select bank3
  5188  06F4  0856               	movf	_tem_pre_sub_index^(0+384),w
  5189  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  5190  06F6  1303               	bcf	3,6	;RP1=0, select bank0
  5191  06F7  00D1               	movwf	??_find_best_solution
  5192  06F8  3003               	movlw	3
  5193  06F9  00D2               	movwf	??_find_best_solution+1
  5194  06FA  0852               	movf	??_find_best_solution+1,w
  5195  06FB  00F0               	movwf	___bmul@multiplicand
  5196  06FC  0869               	movf	_g_char_info_index,w
  5197  06FD  160A  158A  2043  120A  118A  	fcall	___bmul
  5198  0702  3E01               	addlw	1
  5199  0703  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5200  0704  0084               	movwf	4
  5201  0705  1283               	bcf	3,5	;RP0=0, select bank0
  5202  0706  1303               	bcf	3,6	;RP1=0, select bank0
  5203  0707  0851               	movf	??_find_best_solution,w
  5204  0708  1783               	bsf	3,7	;select IRP bank3
  5205  0709  0080               	movwf	0
  5206                           
  5207                           ;teris_16f886.c: 1188: cur_x = temp_pre_x;
  5208  070A  086D               	movf	_temp_pre_x,w
  5209  070B  00D1               	movwf	??_find_best_solution
  5210  070C  0851               	movf	??_find_best_solution,w
  5211  070D  1683               	bsf	3,5	;RP0=1, select bank1
  5212  070E  1303               	bcf	3,6	;RP1=0, select bank1
  5213  070F  00ED               	movwf	_cur_x^(0+128)
  5214                           
  5215                           ;teris_16f886.c: 1189: printf_debug_cur_MATRIX44(1, "Chosen", cur_x, cur_y);
  5216  0710  30A8               	movlw	low (STR_86| (0+32768))
  5217  0711  1283               	bcf	3,5	;RP0=0, select bank0
  5218  0712  1303               	bcf	3,6	;RP1=0, select bank0
  5219  0713  00AC               	movwf	printf_debug_cur_MATRIX44@lable
  5220  0714  308D               	movlw	high (STR_86| (0+32768))
  5221  0715  00AD               	movwf	printf_debug_cur_MATRIX44@lable+1
  5222  0716  1683               	bsf	3,5	;RP0=1, select bank1
  5223  0717  1303               	bcf	3,6	;RP1=0, select bank1
  5224  0718  086D               	movf	_cur_x^(0+128),w
  5225  0719  1283               	bcf	3,5	;RP0=0, select bank0
  5226  071A  1303               	bcf	3,6	;RP1=0, select bank0
  5227  071B  00D1               	movwf	??_find_best_solution
  5228  071C  0851               	movf	??_find_best_solution,w
  5229  071D  00AE               	movwf	printf_debug_cur_MATRIX44@x
  5230  071E  0868               	movf	_cur_y,w
  5231  071F  00D2               	movwf	??_find_best_solution+1
  5232  0720  0852               	movf	??_find_best_solution+1,w
  5233  0721  00AF               	movwf	printf_debug_cur_MATRIX44@y
  5234  0722  3001               	movlw	1
  5235  0723  160A  158A  2696  120A  118A  	fcall	_printf_debug_cur_MATRIX44
  5236                           
  5237                           ;teris_16f886.c: 1195: debug_line(1, "Chosen");
  5238  0728  30A8               	movlw	low (STR_86| (0+32768))
  5239  0729  00F3               	movwf	debug_line@str
  5240  072A  308D               	movlw	high (STR_86| (0+32768))
  5241  072B  00F4               	movwf	debug_line@str+1
  5242  072C  3001               	movlw	1
  5243  072D  160A  158A  209D  120A  118A  	fcall	_debug_line
  5244                           
  5245                           ;teris_16f886.c: 1196: debug_int1(1, "sub_index = %d", tem_pre_sub_index);
  5246  0732  3069               	movlw	low ((STR_14+12)| (0+32768))
  5247  0733  1283               	bcf	3,5	;RP0=0, select bank0
  5248  0734  1303               	bcf	3,6	;RP1=0, select bank0
  5249  0735  00BF               	movwf	debug_int1@f
  5250  0736  308A               	movlw	high ((STR_14+12)| (0+32768))
  5251  0737  00C0               	movwf	debug_int1@f+1
  5252  0738  1683               	bsf	3,5	;RP0=1, select bank3
  5253  0739  1703               	bsf	3,6	;RP1=1, select bank3
  5254  073A  0856               	movf	_tem_pre_sub_index^(0+384),w
  5255  073B  1283               	bcf	3,5	;RP0=0, select bank0
  5256  073C  1303               	bcf	3,6	;RP1=0, select bank0
  5257  073D  00C1               	movwf	debug_int1@i
  5258  073E  01C2               	clrf	debug_int1@i+1
  5259  073F  1BC1               	btfsc	debug_int1@i,7
  5260  0740  03C2               	decf	debug_int1@i+1,f
  5261  0741  3001               	movlw	1
  5262  0742  160A  158A  214F  120A  118A  	fcall	_debug_int1
  5263                           
  5264                           ;teris_16f886.c: 1197: debug_int1(1, "temp_pre_x = %d", temp_pre_x);
  5265  0747  30B4               	movlw	low (STR_81| (0+32768))
  5266  0748  1283               	bcf	3,5	;RP0=0, select bank0
  5267  0749  1303               	bcf	3,6	;RP1=0, select bank0
  5268  074A  00BF               	movwf	debug_int1@f
  5269  074B  308C               	movlw	high (STR_81| (0+32768))
  5270  074C  00C0               	movwf	debug_int1@f+1
  5271  074D  086D               	movf	_temp_pre_x,w
  5272  074E  00C1               	movwf	debug_int1@i
  5273  074F  01C2               	clrf	debug_int1@i+1
  5274  0750  1BC1               	btfsc	debug_int1@i,7
  5275  0751  03C2               	decf	debug_int1@i+1,f
  5276  0752  3001               	movlw	1
  5277  0753  160A  158A  214F  120A  118A  	fcall	_debug_int1
  5278                           
  5279                           ;teris_16f886.c: 1198: debug_int1(1, "temp_pre_count = %d", temp_pre_count);
  5280  0758  307E               	movlw	low (STR_82| (0+32768))
  5281  0759  1283               	bcf	3,5	;RP0=0, select bank0
  5282  075A  1303               	bcf	3,6	;RP1=0, select bank0
  5283  075B  00BF               	movwf	debug_int1@f
  5284  075C  308B               	movlw	high (STR_82| (0+32768))
  5285  075D  00C0               	movwf	debug_int1@f+1
  5286  075E  1683               	bsf	3,5	;RP0=1, select bank1
  5287  075F  1303               	bcf	3,6	;RP1=0, select bank1
  5288  0760  086C               	movf	_temp_pre_count^(0+128),w
  5289  0761  1283               	bcf	3,5	;RP0=0, select bank0
  5290  0762  1303               	bcf	3,6	;RP1=0, select bank0
  5291  0763  00D1               	movwf	??_find_best_solution
  5292  0764  01D2               	clrf	??_find_best_solution+1
  5293  0765  0851               	movf	??_find_best_solution,w
  5294  0766  00C1               	movwf	debug_int1@i
  5295  0767  0852               	movf	??_find_best_solution+1,w
  5296  0768  00C2               	movwf	debug_int1@i+1
  5297  0769  3001               	movlw	1
  5298  076A  160A  158A  214F  120A  118A  	fcall	_debug_int1
  5299                           
  5300                           ;teris_16f886.c: 1199: debug_int1(1, "temp_pre_risk = %d", temp_pre_risk);
  5301  076F  3017               	movlw	low (STR_83| (0+32768))
  5302  0770  1283               	bcf	3,5	;RP0=0, select bank0
  5303  0771  1303               	bcf	3,6	;RP1=0, select bank0
  5304  0772  00BF               	movwf	debug_int1@f
  5305  0773  308C               	movlw	high (STR_83| (0+32768))
  5306  0774  00C0               	movwf	debug_int1@f+1
  5307  0775  086C               	movf	_temp_pre_risk+1,w
  5308  0776  00C2               	movwf	debug_int1@i+1
  5309  0777  086B               	movf	_temp_pre_risk,w
  5310  0778  00C1               	movwf	debug_int1@i
  5311  0779  3001               	movlw	1
  5312  077A  160A  158A  214F  120A  118A  	fcall	_debug_int1
  5313                           
  5314                           ;teris_16f886.c: 1200: debug_int1(1, "temp_pre_high = %d", temp_pre_high);
  5315  077F  3004               	movlw	low (STR_84| (0+32768))
  5316  0780  1283               	bcf	3,5	;RP0=0, select bank0
  5317  0781  1303               	bcf	3,6	;RP1=0, select bank0
  5318  0782  00BF               	movwf	debug_int1@f
  5319  0783  308C               	movlw	high (STR_84| (0+32768))
  5320  0784  00C0               	movwf	debug_int1@f+1
  5321  0785  1683               	bsf	3,5	;RP0=1, select bank1
  5322  0786  1303               	bcf	3,6	;RP1=0, select bank1
  5323  0787  086E               	movf	_temp_pre_high^(0+128),w
  5324  0788  1283               	bcf	3,5	;RP0=0, select bank0
  5325  0789  1303               	bcf	3,6	;RP1=0, select bank0
  5326  078A  00D1               	movwf	??_find_best_solution
  5327  078B  01D2               	clrf	??_find_best_solution+1
  5328  078C  0851               	movf	??_find_best_solution,w
  5329  078D  00C1               	movwf	debug_int1@i
  5330  078E  0852               	movf	??_find_best_solution+1,w
  5331  078F  00C2               	movwf	debug_int1@i+1
  5332  0790  3001               	movlw	1
  5333  0791  160A  158A  214F  120A  118A  	fcall	_debug_int1
  5334                           
  5335                           ;teris_16f886.c: 1201: debug_int1(1, "temp_pre_hole = %d", temp_pre_hole);
  5336  0796  30F1               	movlw	low (STR_85| (0+32768))
  5337  0797  1283               	bcf	3,5	;RP0=0, select bank0
  5338  0798  1303               	bcf	3,6	;RP1=0, select bank0
  5339  0799  00BF               	movwf	debug_int1@f
  5340  079A  308B               	movlw	high (STR_85| (0+32768))
  5341  079B  00C0               	movwf	debug_int1@f+1
  5342  079C  1683               	bsf	3,5	;RP0=1, select bank1
  5343  079D  1303               	bcf	3,6	;RP1=0, select bank1
  5344  079E  086F               	movf	_temp_pre_hole^(0+128),w
  5345  079F  1283               	bcf	3,5	;RP0=0, select bank0
  5346  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  5347  07A1  00D1               	movwf	??_find_best_solution
  5348  07A2  01D2               	clrf	??_find_best_solution+1
  5349  07A3  0851               	movf	??_find_best_solution,w
  5350  07A4  00C1               	movwf	debug_int1@i
  5351  07A5  0852               	movf	??_find_best_solution+1,w
  5352  07A6  00C2               	movwf	debug_int1@i+1
  5353  07A7  3001               	movlw	1
  5354  07A8  160A  158A  214F  120A  118A  	fcall	_debug_int1
  5355                           
  5356                           ;teris_16f886.c: 1203: }
  5357  07AD  2FB6               	goto	l5663
  5358  07AE                     l5661:	
  5359                           
  5360                           ;teris_16f886.c: 1204: else
  5361                           ;teris_16f886.c: 1205: {
  5362                           ;teris_16f886.c: 1206: debug_line(1, "GAME OVER!!!");
  5363  07AE  301D               	movlw	low (STR_94| (0+32768))
  5364  07AF  00F3               	movwf	debug_line@str
  5365  07B0  308D               	movlw	high (STR_94| (0+32768))
  5366  07B1  00F4               	movwf	debug_line@str+1
  5367  07B2  3001               	movlw	1
  5368  07B3  160A  158A  209D   	fcall	_debug_line
  5369  07B6                     l5663:	
  5370                           
  5371                           ;teris_16f886.c: 1207: }
  5372                           ;teris_16f886.c: 1208: return res;
  5373  07B6  1683               	bsf	3,5	;RP0=1, select bank1
  5374  07B7  1303               	bcf	3,6	;RP1=0, select bank1
  5375  07B8  0822               	movf	find_best_solution@res^(0+128),w
  5376  07B9  0008               	return
  5377  07BA                     __end_of_find_best_solution:	
  5378                           
  5379                           	psect	text5
  5380  1A5B                     __ptext5:	
  5381 ;; *************** function _right_most *****************
  5382 ;; Defined at:
  5383 ;;		line 902 in file "teris_16f886.c"
  5384 ;; Parameters:    Size  Location     Type
  5385 ;;  x               1    wreg     char 
  5386 ;;  matrix44        2   36[BANK0 ] PTR const struct .
  5387 ;;		 -> g_matrix44(384), 
  5388 ;;  matrix88        1   38[BANK0 ] PTR const struct .
  5389 ;;		 -> g_matrix88(64), 
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;  x               1   41[BANK0 ] char 
  5392 ;; Return value:  Size  Location     Type
  5393 ;;                  1    wreg      char 
  5394 ;; Registers used:
  5395 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5396 ;; Tracked objects:
  5397 ;;		On entry : 0/0
  5398 ;;		On exit  : 0/0
  5399 ;;		Unchanged: 0/0
  5400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5401 ;;      Params:         0       3       0       0       0
  5402 ;;      Locals:         0       1       0       0       0
  5403 ;;      Temps:          0       2       0       0       0
  5404 ;;      Totals:         0       6       0       0       0
  5405 ;;Total ram usage:        6 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; Hardware stack levels required when called:    4
  5408 ;; This function calls:
  5409 ;;		_debug_int1
  5410 ;;		_is_right_boundary
  5411 ;; This function is called by:
  5412 ;;		_find_best_solution
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           
  5417                           ;psect for function _right_most
  5418  1A5B                     _right_most:	
  5419                           
  5420                           ;incstack = 0
  5421                           ; Regs used in _right_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5422                           ;right_most@x stored from wreg
  5423  1A5B  1283               	bcf	3,5	;RP0=0, select bank0
  5424  1A5C  1303               	bcf	3,6	;RP1=0, select bank0
  5425  1A5D  00C9               	movwf	right_most@x
  5426  1A5E                     l396:	
  5427                           ;teris_16f886.c: 904: while(1)
  5428                           
  5429                           
  5430                           ;teris_16f886.c: 905: {
  5431                           ;teris_16f886.c: 906: if(is_right_boundary(x, matrix44, matrix88) == RIGHT_OVER_BOUNDARY
      +                          )
  5432  1A5E  0844               	movf	right_most@matrix44,w
  5433  1A5F  00F6               	movwf	is_right_boundary@matrix44
  5434  1A60  0845               	movf	right_most@matrix44+1,w
  5435  1A61  00F7               	movwf	is_right_boundary@matrix44+1
  5436  1A62  0846               	movf	right_most@matrix88,w
  5437  1A63  00C7               	movwf	??_right_most
  5438  1A64  0847               	movf	??_right_most,w
  5439  1A65  00F8               	movwf	is_right_boundary@matrix88
  5440  1A66  0849               	movf	right_most@x,w
  5441  1A67  160A  158A  25CE  160A  158A  	fcall	_is_right_boundary
  5442  1A6C  3A03               	xorlw	3
  5443  1A6D  1D03               	skipz
  5444  1A6E  2A8B               	goto	l5281
  5445                           
  5446                           ;teris_16f886.c: 907: {
  5447                           ;teris_16f886.c: 908: debug_int1(0, "right_most = %d", x - 1);
  5448  1A6F  30A4               	movlw	low (STR_49| (0+32768))
  5449  1A70  1283               	bcf	3,5	;RP0=0, select bank0
  5450  1A71  1303               	bcf	3,6	;RP1=0, select bank0
  5451  1A72  00BF               	movwf	debug_int1@f
  5452  1A73  308C               	movlw	high (STR_49| (0+32768))
  5453  1A74  00C0               	movwf	debug_int1@f+1
  5454  1A75  0849               	movf	right_most@x,w
  5455  1A76  00C7               	movwf	??_right_most
  5456  1A77  01C8               	clrf	??_right_most+1
  5457  1A78  1BC7               	btfsc	??_right_most,7
  5458  1A79  03C8               	decf	??_right_most+1,f
  5459  1A7A  0847               	movf	??_right_most,w
  5460  1A7B  3EFF               	addlw	255
  5461  1A7C  00C1               	movwf	debug_int1@i
  5462  1A7D  0848               	movf	??_right_most+1,w
  5463  1A7E  1803               	skipnc
  5464  1A7F  3E01               	addlw	1
  5465  1A80  3EFF               	addlw	255
  5466  1A81  00C2               	movwf	debug_int1@i+1
  5467  1A82  3000               	movlw	0
  5468  1A83  160A  158A  214F   	fcall	_debug_int1
  5469                           
  5470                           ;teris_16f886.c: 909: return x - 1;
  5471  1A86  1283               	bcf	3,5	;RP0=0, select bank0
  5472  1A87  1303               	bcf	3,6	;RP1=0, select bank0
  5473  1A88  0849               	movf	right_most@x,w
  5474  1A89  3EFF               	addlw	-1
  5475  1A8A  0008               	return
  5476  1A8B                     l5281:	
  5477                           
  5478                           ;teris_16f886.c: 910: }
  5479                           ;teris_16f886.c: 911: x++;
  5480  1A8B  3001               	movlw	1
  5481  1A8C  1283               	bcf	3,5	;RP0=0, select bank0
  5482  1A8D  1303               	bcf	3,6	;RP1=0, select bank0
  5483  1A8E  00C7               	movwf	??_right_most
  5484  1A8F  0847               	movf	??_right_most,w
  5485  1A90  07C9               	addwf	right_most@x,f
  5486  1A91  2A5E               	goto	l396
  5487  1A92                     __end_of_right_most:	
  5488                           
  5489                           	psect	text6
  5490  1DCE                     __ptext6:	
  5491 ;; *************** function _is_right_boundary *****************
  5492 ;; Defined at:
  5493 ;;		line 763 in file "teris_16f886.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;  x               1    wreg     char 
  5496 ;;  matrix44        2    6[COMMON] PTR const struct .
  5497 ;;		 -> g_matrix44(384), 
  5498 ;;  matrix88        1    8[COMMON] PTR const struct .
  5499 ;;		 -> g_matrix88(64), 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  x               1    0[BANK0 ] char 
  5502 ;;  col             1    2[BANK0 ] char 
  5503 ;;  row             1    1[BANK0 ] char 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      unsigned char 
  5506 ;; Registers used:
  5507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5513 ;;      Params:         3       0       0       0       0
  5514 ;;      Locals:         0       3       0       0       0
  5515 ;;      Temps:          4       0       0       0       0
  5516 ;;      Totals:         7       3       0       0       0
  5517 ;;Total ram usage:       10 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    3
  5520 ;; This function calls:
  5521 ;;		_debug_line
  5522 ;; This function is called by:
  5523 ;;		_right_most
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function _is_right_boundary
  5529  1DCE                     _is_right_boundary:	
  5530                           
  5531                           ;incstack = 0
  5532                           ; Regs used in _is_right_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5533                           ;is_right_boundary@x stored from wreg
  5534  1DCE  1283               	bcf	3,5	;RP0=0, select bank0
  5535  1DCF  1303               	bcf	3,6	;RP1=0, select bank0
  5536  1DD0  00A0               	movwf	is_right_boundary@x
  5537                           
  5538                           ;teris_16f886.c: 765: for(int8_t row = 4 - 1; row >= 0; row--)
  5539  1DD1  3003               	movlw	3
  5540  1DD2  00F9               	movwf	??_is_right_boundary
  5541  1DD3  0879               	movf	??_is_right_boundary,w
  5542  1DD4  00A1               	movwf	is_right_boundary@row
  5543  1DD5  1BA1               	btfsc	is_right_boundary@row,7
  5544  1DD6  2E2D               	goto	l5059
  5545  1DD7                     l5035:	
  5546                           
  5547                           ;teris_16f886.c: 766: {
  5548                           ;teris_16f886.c: 767: for(int8_t col = 0; col < 4; col++)
  5549  1DD7  01A2               	clrf	is_right_boundary@col
  5550  1DD8  0822               	movf	is_right_boundary@col,w
  5551  1DD9  3A80               	xorlw	128
  5552  1DDA  3E7C               	addlw	-132
  5553  1DDB  1803               	btfsc	3,0
  5554  1DDC  2E27               	goto	l5055
  5555  1DDD                     l5041:	
  5556                           
  5557                           ;teris_16f886.c: 768: {
  5558                           ;teris_16f886.c: 769: if(matrix44->data[row][col] == 1)
  5559  1DDD  0821               	movf	is_right_boundary@row,w
  5560  1DDE  00F9               	movwf	??_is_right_boundary
  5561  1DDF  01FA               	clrf	??_is_right_boundary+1
  5562  1DE0  1003               	clrc
  5563  1DE1  0DF9               	rlf	??_is_right_boundary,f
  5564  1DE2  0DFA               	rlf	??_is_right_boundary+1,f
  5565  1DE3  1003               	clrc
  5566  1DE4  0DF9               	rlf	??_is_right_boundary,f
  5567  1DE5  0DFA               	rlf	??_is_right_boundary+1,f
  5568  1DE6  0879               	movf	??_is_right_boundary,w
  5569  1DE7  0776               	addwf	is_right_boundary@matrix44,w
  5570  1DE8  00FB               	movwf	??_is_right_boundary+2
  5571  1DE9  087A               	movf	??_is_right_boundary+1,w
  5572  1DEA  1803               	skipnc
  5573  1DEB  0A7A               	incf	??_is_right_boundary+1,w
  5574  1DEC  0777               	addwf	is_right_boundary@matrix44+1,w
  5575  1DED  00FC               	movwf	??_is_right_boundary+3
  5576  1DEE  0822               	movf	is_right_boundary@col,w
  5577  1DEF  077B               	addwf	??_is_right_boundary+2,w
  5578  1DF0  0084               	movwf	4
  5579  1DF1  087C               	movf	??_is_right_boundary+3,w
  5580  1DF2  1803               	skipnc
  5581  1DF3  0A7C               	incf	??_is_right_boundary+3,w
  5582  1DF4  00FF               	movwf	127
  5583  1DF5  120A  158A  2000  160A  158A  	fcall	stringtab
  5584  1DFA  3A01               	xorlw	1
  5585  1DFB  1D03               	skipz
  5586  1DFC  2E1C               	goto	l5051
  5587                           
  5588                           ;teris_16f886.c: 770: {
  5589                           ;teris_16f886.c: 771: if(x + col > 8 - 1)
  5590  1DFD  0820               	movf	is_right_boundary@x,w
  5591  1DFE  0722               	addwf	is_right_boundary@col,w
  5592  1DFF  00F9               	movwf	??_is_right_boundary
  5593  1E00  01FA               	clrf	??_is_right_boundary+1
  5594  1E01  1803               	skipnc
  5595  1E02  0AFA               	incf	??_is_right_boundary+1,f
  5596  1E03  1BA0               	btfsc	is_right_boundary@x,7
  5597  1E04  03FA               	decf	??_is_right_boundary+1,f
  5598  1E05  1BA2               	btfsc	is_right_boundary@col,7
  5599  1E06  03FA               	decf	??_is_right_boundary+1,f
  5600  1E07  087A               	movf	??_is_right_boundary+1,w
  5601  1E08  3A80               	xorlw	128
  5602  1E09  00FF               	movwf	127
  5603  1E0A  3080               	movlw	128
  5604  1E0B  027F               	subwf	127,w
  5605  1E0C  1D03               	skipz
  5606  1E0D  2E10               	goto	u7105
  5607  1E0E  3008               	movlw	8
  5608  1E0F  0279               	subwf	??_is_right_boundary,w
  5609  1E10                     u7105:	
  5610  1E10  1C03               	skipc
  5611  1E11  2E1C               	goto	l5051
  5612                           
  5613                           ;teris_16f886.c: 772: {
  5614                           ;teris_16f886.c: 773: debug_line(0, "RIGHT_OVER_BOUNDARY");
  5615  1E12  306A               	movlw	low (STR_42| (0+32768))
  5616  1E13  00F3               	movwf	debug_line@str
  5617  1E14  308B               	movlw	high (STR_42| (0+32768))
  5618  1E15  00F4               	movwf	debug_line@str+1
  5619  1E16  3000               	movlw	0
  5620  1E17  160A  158A  209D   	fcall	_debug_line
  5621                           
  5622                           ;teris_16f886.c: 774: return RIGHT_OVER_BOUNDARY;
  5623  1E1A  3003               	movlw	3
  5624  1E1B  0008               	return
  5625  1E1C                     l5051:	
  5626  1E1C  3001               	movlw	1
  5627  1E1D  00F9               	movwf	??_is_right_boundary
  5628  1E1E  0879               	movf	??_is_right_boundary,w
  5629  1E1F  1283               	bcf	3,5	;RP0=0, select bank0
  5630  1E20  1303               	bcf	3,6	;RP1=0, select bank0
  5631  1E21  07A2               	addwf	is_right_boundary@col,f
  5632  1E22  0822               	movf	is_right_boundary@col,w
  5633  1E23  3A80               	xorlw	128
  5634  1E24  3E7C               	addlw	-132
  5635  1E25  1C03               	skipc
  5636  1E26  2DDD               	goto	l5041
  5637  1E27                     l5055:	
  5638  1E27  30FF               	movlw	255
  5639  1E28  00F9               	movwf	??_is_right_boundary
  5640  1E29  0879               	movf	??_is_right_boundary,w
  5641  1E2A  07A1               	addwf	is_right_boundary@row,f
  5642  1E2B  1FA1               	btfss	is_right_boundary@row,7
  5643  1E2C  2DD7               	goto	l5035
  5644  1E2D                     l5059:	
  5645                           
  5646                           ;teris_16f886.c: 775: }
  5647                           ;teris_16f886.c: 776: }
  5648                           ;teris_16f886.c: 777: }
  5649                           ;teris_16f886.c: 778: }
  5650                           ;teris_16f886.c: 779: return OK;
  5651  1E2D  3000               	movlw	0
  5652  1E2E  0008               	return
  5653  1E2F                     __end_of_is_right_boundary:	
  5654                           
  5655                           	psect	text7
  5656  1E96                     __ptext7:	
  5657 ;; *************** function _printf_debug_cur_MATRIX44 *****************
  5658 ;; Defined at:
  5659 ;;		line 386 in file "teris_16f886.c"
  5660 ;; Parameters:    Size  Location     Type
  5661 ;;  enable          1    wreg     unsigned char 
  5662 ;;  lable           2   12[BANK0 ] PTR const unsigned char 
  5663 ;;		 -> STR_86(7), 
  5664 ;;  x               1   14[BANK0 ] char 
  5665 ;;  y               1   15[BANK0 ] char 
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;  enable          1   25[BANK0 ] unsigned char 
  5668 ;;  matrix          2   26[BANK0 ] PTR struct .
  5669 ;;		 -> g_matrix44(384), 
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  1    wreg      void 
  5672 ;; Registers used:
  5673 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5679 ;;      Params:         0       4       0       0       0
  5680 ;;      Locals:         0       3       0       0       0
  5681 ;;      Temps:          0       9       0       0       0
  5682 ;;      Totals:         0      16       0       0       0
  5683 ;;Total ram usage:       16 bytes
  5684 ;; Hardware stack levels used:    1
  5685 ;; Hardware stack levels required when called:    4
  5686 ;; This function calls:
  5687 ;;		___bmul
  5688 ;;		_debug_line
  5689 ;;		_debug_str
  5690 ;;		_printf_debug_MATRIX44
  5691 ;; This function is called by:
  5692 ;;		_find_best_solution
  5693 ;; This function uses a non-reentrant model
  5694 ;;
  5695                           
  5696                           
  5697                           ;psect for function _printf_debug_cur_MATRIX44
  5698  1E96                     _printf_debug_cur_MATRIX44:	
  5699                           
  5700                           ;incstack = 0
  5701                           ; Regs used in _printf_debug_cur_MATRIX44: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  5702                           ;printf_debug_cur_MATRIX44@enable stored from wreg
  5703  1E96  1283               	bcf	3,5	;RP0=0, select bank0
  5704  1E97  1303               	bcf	3,6	;RP1=0, select bank0
  5705  1E98  00B9               	movwf	printf_debug_cur_MATRIX44@enable
  5706                           
  5707                           ;teris_16f886.c: 388: if(enable == 1)
  5708  1E99  0339               	decf	printf_debug_cur_MATRIX44@enable,w
  5709  1E9A  1D03               	btfss	3,2
  5710  1E9B  0008               	return
  5711                           
  5712                           ;teris_16f886.c: 389: {
  5713                           ;teris_16f886.c: 390: if(lable != (0))
  5714  1E9C  082C               	movf	printf_debug_cur_MATRIX44@lable,w
  5715  1E9D  042D               	iorwf	printf_debug_cur_MATRIX44@lable+1,w
  5716  1E9E  1903               	btfsc	3,2
  5717  1E9F  2EB4               	goto	l5069
  5718                           
  5719                           ;teris_16f886.c: 391: {
  5720                           ;teris_16f886.c: 392: debug_str(1, lable);
  5721  1EA0  082C               	movf	printf_debug_cur_MATRIX44@lable,w
  5722  1EA1  00F3               	movwf	debug_str@str
  5723  1EA2  082D               	movf	printf_debug_cur_MATRIX44@lable+1,w
  5724  1EA3  00F4               	movwf	debug_str@str+1
  5725  1EA4  3001               	movlw	1
  5726  1EA5  160A  158A  2029  160A  158A  	fcall	_debug_str
  5727                           
  5728                           ;teris_16f886.c: 393: debug_line(1, ":");
  5729  1EAA  30BF               	movlw	low (STR_5| (0+32768))
  5730  1EAB  00F3               	movwf	debug_line@str
  5731  1EAC  308D               	movlw	high (STR_5| (0+32768))
  5732  1EAD  00F4               	movwf	debug_line@str+1
  5733  1EAE  3001               	movlw	1
  5734  1EAF  160A  158A  209D  160A  158A  	fcall	_debug_line
  5735  1EB4                     l5069:	
  5736                           
  5737                           ;teris_16f886.c: 394: }
  5738                           ;teris_16f886.c: 395: MATRIX44* matrix = &g_matrix44[g_char_info[g_char_info_index].star
      +                          t_index + g_char_info[g_char_info_index].cur_index];
  5739  1EB4  3003               	movlw	3
  5740  1EB5  1283               	bcf	3,5	;RP0=0, select bank0
  5741  1EB6  1303               	bcf	3,6	;RP1=0, select bank0
  5742  1EB7  00B0               	movwf	??_printf_debug_cur_MATRIX44
  5743  1EB8  0830               	movf	??_printf_debug_cur_MATRIX44,w
  5744  1EB9  00F0               	movwf	___bmul@multiplicand
  5745  1EBA  0869               	movf	_g_char_info_index,w
  5746  1EBB  160A  158A  2043  160A  158A  	fcall	___bmul
  5747  1EC0  3E01               	addlw	1
  5748  1EC1  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5749  1EC2  0084               	movwf	4
  5750  1EC3  1783               	bsf	3,7	;select IRP bank3
  5751  1EC4  0800               	movf	0,w
  5752  1EC5  1283               	bcf	3,5	;RP0=0, select bank0
  5753  1EC6  1303               	bcf	3,6	;RP1=0, select bank0
  5754  1EC7  00B1               	movwf	??_printf_debug_cur_MATRIX44+1
  5755  1EC8  3003               	movlw	3
  5756  1EC9  00B2               	movwf	??_printf_debug_cur_MATRIX44+2
  5757  1ECA  0832               	movf	??_printf_debug_cur_MATRIX44+2,w
  5758  1ECB  00F0               	movwf	___bmul@multiplicand
  5759  1ECC  0869               	movf	_g_char_info_index,w
  5760  1ECD  160A  158A  2043  160A  158A  	fcall	___bmul
  5761  1ED2  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5762  1ED3  0084               	movwf	4
  5763  1ED4  1783               	bsf	3,7	;select IRP bank3
  5764  1ED5  0800               	movf	0,w
  5765  1ED6  1283               	bcf	3,5	;RP0=0, select bank0
  5766  1ED7  1303               	bcf	3,6	;RP1=0, select bank0
  5767  1ED8  0731               	addwf	??_printf_debug_cur_MATRIX44+1,w
  5768  1ED9  00B3               	movwf	??_printf_debug_cur_MATRIX44+3
  5769  1EDA  01B4               	clrf	??_printf_debug_cur_MATRIX44+4
  5770  1EDB  0DB4               	rlf	??_printf_debug_cur_MATRIX44+4,f
  5771  1EDC  0EB3               	swapf	??_printf_debug_cur_MATRIX44+3,f
  5772  1EDD  0EB4               	swapf	??_printf_debug_cur_MATRIX44+4,f
  5773  1EDE  30F0               	movlw	240
  5774  1EDF  05B4               	andwf	??_printf_debug_cur_MATRIX44+4,f
  5775  1EE0  0833               	movf	??_printf_debug_cur_MATRIX44+3,w
  5776  1EE1  390F               	andlw	15
  5777  1EE2  04B4               	iorwf	??_printf_debug_cur_MATRIX44+4,f
  5778  1EE3  30F0               	movlw	240
  5779  1EE4  05B3               	andwf	??_printf_debug_cur_MATRIX44+3,f
  5780  1EE5  3030               	movlw	low (_g_matrix44| (0+32768))
  5781  1EE6  00B5               	movwf	??_printf_debug_cur_MATRIX44+5
  5782  1EE7  3088               	movlw	high (_g_matrix44| (0+32768))
  5783  1EE8  00B6               	movwf	??_printf_debug_cur_MATRIX44+6
  5784  1EE9  0833               	movf	??_printf_debug_cur_MATRIX44+3,w
  5785  1EEA  0735               	addwf	??_printf_debug_cur_MATRIX44+5,w
  5786  1EEB  00B7               	movwf	??_printf_debug_cur_MATRIX44+7
  5787  1EEC  0834               	movf	??_printf_debug_cur_MATRIX44+4,w
  5788  1EED  1803               	skipnc
  5789  1EEE  0A34               	incf	??_printf_debug_cur_MATRIX44+4,w
  5790  1EEF  0736               	addwf	??_printf_debug_cur_MATRIX44+6,w
  5791  1EF0  00B8               	movwf	??_printf_debug_cur_MATRIX44+8
  5792  1EF1  0837               	movf	??_printf_debug_cur_MATRIX44+7,w
  5793  1EF2  00BA               	movwf	printf_debug_cur_MATRIX44@matrix
  5794  1EF3  0838               	movf	??_printf_debug_cur_MATRIX44+8,w
  5795  1EF4  00BB               	movwf	printf_debug_cur_MATRIX44@matrix+1
  5796                           
  5797                           ;teris_16f886.c: 396: printf_debug_MATRIX44(1, (0), x, y, matrix);
  5798  1EF5  3000               	movlw	0
  5799  1EF6  00F6               	movwf	printf_debug_MATRIX44@lable
  5800  1EF7  00F7               	movwf	printf_debug_MATRIX44@lable+1
  5801  1EF8  082E               	movf	printf_debug_cur_MATRIX44@x,w
  5802  1EF9  00B0               	movwf	??_printf_debug_cur_MATRIX44
  5803  1EFA  0830               	movf	??_printf_debug_cur_MATRIX44,w
  5804  1EFB  00F8               	movwf	printf_debug_MATRIX44@x
  5805  1EFC  082F               	movf	printf_debug_cur_MATRIX44@y,w
  5806  1EFD  00B1               	movwf	??_printf_debug_cur_MATRIX44+1
  5807  1EFE  0831               	movf	??_printf_debug_cur_MATRIX44+1,w
  5808  1EFF  00F9               	movwf	printf_debug_MATRIX44@y
  5809  1F00  083A               	movf	printf_debug_cur_MATRIX44@matrix,w
  5810  1F01  00FA               	movwf	printf_debug_MATRIX44@matrix
  5811  1F02  083B               	movf	printf_debug_cur_MATRIX44@matrix+1,w
  5812  1F03  00FB               	movwf	printf_debug_MATRIX44@matrix+1
  5813  1F04  3001               	movlw	1
  5814  1F05  120A  118A  201C   	fcall	_printf_debug_MATRIX44
  5815  1F08  0008               	return
  5816  1F09                     __end_of_printf_debug_cur_MATRIX44:	
  5817                           
  5818                           	psect	text8
  5819  001C                     __ptext8:	
  5820 ;; *************** function _printf_debug_MATRIX44 *****************
  5821 ;; Defined at:
  5822 ;;		line 356 in file "teris_16f886.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  enable          1    wreg     unsigned char 
  5825 ;;  lable           2    6[COMMON] PTR const unsigned char 
  5826 ;;		 -> STR_60(15), ROM(8192), 
  5827 ;;  x               1    8[COMMON] char 
  5828 ;;  y               1    9[COMMON] char 
  5829 ;;  matrix          2   10[COMMON] PTR const struct .
  5830 ;;		 -> g_matrix44(384), 
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;  enable          1    9[BANK0 ] unsigned char 
  5833 ;;  col             1   11[BANK0 ] char 
  5834 ;;  row             1   10[BANK0 ] char 
  5835 ;; Return value:  Size  Location     Type
  5836 ;;                  1    wreg      void 
  5837 ;; Registers used:
  5838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5839 ;; Tracked objects:
  5840 ;;		On entry : 0/0
  5841 ;;		On exit  : 0/0
  5842 ;;		Unchanged: 0/0
  5843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5844 ;;      Params:         6       0       0       0       0
  5845 ;;      Locals:         0       3       0       0       0
  5846 ;;      Temps:          0       9       0       0       0
  5847 ;;      Totals:         6      12       0       0       0
  5848 ;;Total ram usage:       18 bytes
  5849 ;; Hardware stack levels used:    1
  5850 ;; Hardware stack levels required when called:    3
  5851 ;; This function calls:
  5852 ;;		_debug_line
  5853 ;;		_debug_str
  5854 ;; This function is called by:
  5855 ;;		_printf_debug_cur_MATRIX44
  5856 ;;		_find_best_solution
  5857 ;;		_printf_debug_all_MATRIX44
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           
  5862                           ;psect for function _printf_debug_MATRIX44
  5863  001C                     _printf_debug_MATRIX44:	
  5864                           
  5865                           ;incstack = 0
  5866                           ; Regs used in _printf_debug_MATRIX44: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  5867                           ;printf_debug_MATRIX44@enable stored from wreg
  5868  001C  1283               	bcf	3,5	;RP0=0, select bank0
  5869  001D  1303               	bcf	3,6	;RP1=0, select bank0
  5870  001E  00A9               	movwf	printf_debug_MATRIX44@enable
  5871                           
  5872                           ;teris_16f886.c: 358: if(enable == 1)
  5873  001F  0329               	decf	printf_debug_MATRIX44@enable,w
  5874  0020  1D03               	btfss	3,2
  5875  0021  0008               	return
  5876                           
  5877                           ;teris_16f886.c: 359: {
  5878                           ;teris_16f886.c: 360: if(lable != (0))
  5879  0022  0876               	movf	printf_debug_MATRIX44@lable,w
  5880  0023  0477               	iorwf	printf_debug_MATRIX44@lable+1,w
  5881  0024  1903               	btfsc	3,2
  5882  0025  283A               	goto	l178
  5883                           
  5884                           ;teris_16f886.c: 361: {
  5885                           ;teris_16f886.c: 362: debug_str(1, lable);
  5886  0026  0876               	movf	printf_debug_MATRIX44@lable,w
  5887  0027  00F3               	movwf	debug_str@str
  5888  0028  0877               	movf	printf_debug_MATRIX44@lable+1,w
  5889  0029  00F4               	movwf	debug_str@str+1
  5890  002A  3001               	movlw	1
  5891  002B  160A  158A  2029  120A  118A  	fcall	_debug_str
  5892                           
  5893                           ;teris_16f886.c: 363: debug_line(1, ":");
  5894  0030  30BF               	movlw	low (STR_5| (0+32768))
  5895  0031  00F3               	movwf	debug_line@str
  5896  0032  308D               	movlw	high (STR_5| (0+32768))
  5897  0033  00F4               	movwf	debug_line@str+1
  5898  0034  3001               	movlw	1
  5899  0035  160A  158A  209D  120A  118A  	fcall	_debug_line
  5900  003A                     l178:	
  5901                           
  5902                           ;teris_16f886.c: 364: }
  5903                           ;teris_16f886.c: 365: debug_line(1, "<<<<<<<<<<<<<<<<<<<<MATRIX44");
  5904  003A  3023               	movlw	low (STR_6| (0+32768))
  5905  003B  00F3               	movwf	debug_line@str
  5906  003C  308A               	movlw	high (STR_6| (0+32768))
  5907  003D  00F4               	movwf	debug_line@str+1
  5908  003E  3001               	movlw	1
  5909  003F  160A  158A  209D  120A  118A  	fcall	_debug_line
  5910                           
  5911                           ;teris_16f886.c: 366: for(int8_t row = 0; row < 8; row++)
  5912  0044  1283               	bcf	3,5	;RP0=0, select bank0
  5913  0045  1303               	bcf	3,6	;RP1=0, select bank0
  5914  0046  01AA               	clrf	printf_debug_MATRIX44@row
  5915  0047  082A               	movf	printf_debug_MATRIX44@row,w
  5916  0048  3A80               	xorlw	128
  5917  0049  3E78               	addlw	-136
  5918  004A  1803               	btfsc	3,0
  5919  004B  2933               	goto	l4937
  5920  004C                     l4907:	
  5921                           
  5922                           ;teris_16f886.c: 367: {
  5923                           ;teris_16f886.c: 368: for(int8_t col = 0; col < 8; col++)
  5924  004C  01AB               	clrf	printf_debug_MATRIX44@col
  5925  004D  082B               	movf	printf_debug_MATRIX44@col,w
  5926  004E  3A80               	xorlw	128
  5927  004F  3E78               	addlw	-136
  5928  0050  1803               	btfsc	3,0
  5929  0051  291E               	goto	l4931
  5930  0052                     l4913:	
  5931                           
  5932                           ;teris_16f886.c: 369: {
  5933                           ;teris_16f886.c: 370: if((row - y >= 0) && (row - y < 4)
  5934                           ;teris_16f886.c: 371: && (col - x >= 0) && (col - x < 4)
  5935                           ;teris_16f886.c: 372: && (matrix->data[row - y][col - x] == 1))
  5936  0052  0879               	movf	printf_debug_MATRIX44@y,w
  5937  0053  00A0               	movwf	??_printf_debug_MATRIX44
  5938  0054  01A1               	clrf	??_printf_debug_MATRIX44+1
  5939  0055  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  5940  0056  03A1               	decf	??_printf_debug_MATRIX44+1,f
  5941  0057  09A0               	comf	??_printf_debug_MATRIX44,f
  5942  0058  09A1               	comf	??_printf_debug_MATRIX44+1,f
  5943  0059  0AA0               	incf	??_printf_debug_MATRIX44,f
  5944  005A  1903               	skipnz
  5945  005B  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  5946  005C  082A               	movf	printf_debug_MATRIX44@row,w
  5947  005D  00A2               	movwf	??_printf_debug_MATRIX44+2
  5948  005E  01A3               	clrf	??_printf_debug_MATRIX44+3
  5949  005F  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  5950  0060  03A3               	decf	??_printf_debug_MATRIX44+3,f
  5951  0061  0820               	movf	??_printf_debug_MATRIX44,w
  5952  0062  0722               	addwf	??_printf_debug_MATRIX44+2,w
  5953  0063  00A4               	movwf	??_printf_debug_MATRIX44+4
  5954  0064  0821               	movf	??_printf_debug_MATRIX44+1,w
  5955  0065  1803               	skipnc
  5956  0066  0A21               	incf	??_printf_debug_MATRIX44+1,w
  5957  0067  0723               	addwf	??_printf_debug_MATRIX44+3,w
  5958  0068  00A5               	movwf	??_printf_debug_MATRIX44+5
  5959  0069  1BA5               	btfsc	??_printf_debug_MATRIX44+5,7
  5960  006A  2909               	goto	l4925
  5961  006B  0879               	movf	printf_debug_MATRIX44@y,w
  5962  006C  00A0               	movwf	??_printf_debug_MATRIX44
  5963  006D  01A1               	clrf	??_printf_debug_MATRIX44+1
  5964  006E  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  5965  006F  03A1               	decf	??_printf_debug_MATRIX44+1,f
  5966  0070  09A0               	comf	??_printf_debug_MATRIX44,f
  5967  0071  09A1               	comf	??_printf_debug_MATRIX44+1,f
  5968  0072  0AA0               	incf	??_printf_debug_MATRIX44,f
  5969  0073  1903               	skipnz
  5970  0074  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  5971  0075  082A               	movf	printf_debug_MATRIX44@row,w
  5972  0076  00A2               	movwf	??_printf_debug_MATRIX44+2
  5973  0077  01A3               	clrf	??_printf_debug_MATRIX44+3
  5974  0078  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  5975  0079  03A3               	decf	??_printf_debug_MATRIX44+3,f
  5976  007A  0820               	movf	??_printf_debug_MATRIX44,w
  5977  007B  0722               	addwf	??_printf_debug_MATRIX44+2,w
  5978  007C  00A4               	movwf	??_printf_debug_MATRIX44+4
  5979  007D  0821               	movf	??_printf_debug_MATRIX44+1,w
  5980  007E  1803               	skipnc
  5981  007F  0A21               	incf	??_printf_debug_MATRIX44+1,w
  5982  0080  0723               	addwf	??_printf_debug_MATRIX44+3,w
  5983  0081  00A5               	movwf	??_printf_debug_MATRIX44+5
  5984  0082  0825               	movf	??_printf_debug_MATRIX44+5,w
  5985  0083  3A80               	xorlw	128
  5986  0084  00FF               	movwf	127
  5987  0085  3080               	movlw	128
  5988  0086  027F               	subwf	127,w
  5989  0087  1D03               	skipz
  5990  0088  288B               	goto	u6785
  5991  0089  3004               	movlw	4
  5992  008A  0224               	subwf	??_printf_debug_MATRIX44+4,w
  5993  008B                     u6785:	
  5994  008B  1803               	skipnc
  5995  008C  2909               	goto	l4925
  5996  008D  0878               	movf	printf_debug_MATRIX44@x,w
  5997  008E  1283               	bcf	3,5	;RP0=0, select bank0
  5998  008F  1303               	bcf	3,6	;RP1=0, select bank0
  5999  0090  00A0               	movwf	??_printf_debug_MATRIX44
  6000  0091  01A1               	clrf	??_printf_debug_MATRIX44+1
  6001  0092  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  6002  0093  03A1               	decf	??_printf_debug_MATRIX44+1,f
  6003  0094  09A0               	comf	??_printf_debug_MATRIX44,f
  6004  0095  09A1               	comf	??_printf_debug_MATRIX44+1,f
  6005  0096  0AA0               	incf	??_printf_debug_MATRIX44,f
  6006  0097  1903               	skipnz
  6007  0098  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  6008  0099  082B               	movf	printf_debug_MATRIX44@col,w
  6009  009A  00A2               	movwf	??_printf_debug_MATRIX44+2
  6010  009B  01A3               	clrf	??_printf_debug_MATRIX44+3
  6011  009C  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  6012  009D  03A3               	decf	??_printf_debug_MATRIX44+3,f
  6013  009E  0820               	movf	??_printf_debug_MATRIX44,w
  6014  009F  0722               	addwf	??_printf_debug_MATRIX44+2,w
  6015  00A0  00A4               	movwf	??_printf_debug_MATRIX44+4
  6016  00A1  0821               	movf	??_printf_debug_MATRIX44+1,w
  6017  00A2  1803               	skipnc
  6018  00A3  0A21               	incf	??_printf_debug_MATRIX44+1,w
  6019  00A4  0723               	addwf	??_printf_debug_MATRIX44+3,w
  6020  00A5  00A5               	movwf	??_printf_debug_MATRIX44+5
  6021  00A6  1BA5               	btfsc	??_printf_debug_MATRIX44+5,7
  6022  00A7  2909               	goto	l4925
  6023  00A8  0878               	movf	printf_debug_MATRIX44@x,w
  6024  00A9  00A0               	movwf	??_printf_debug_MATRIX44
  6025  00AA  01A1               	clrf	??_printf_debug_MATRIX44+1
  6026  00AB  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  6027  00AC  03A1               	decf	??_printf_debug_MATRIX44+1,f
  6028  00AD  09A0               	comf	??_printf_debug_MATRIX44,f
  6029  00AE  09A1               	comf	??_printf_debug_MATRIX44+1,f
  6030  00AF  0AA0               	incf	??_printf_debug_MATRIX44,f
  6031  00B0  1903               	skipnz
  6032  00B1  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  6033  00B2  082B               	movf	printf_debug_MATRIX44@col,w
  6034  00B3  00A2               	movwf	??_printf_debug_MATRIX44+2
  6035  00B4  01A3               	clrf	??_printf_debug_MATRIX44+3
  6036  00B5  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  6037  00B6  03A3               	decf	??_printf_debug_MATRIX44+3,f
  6038  00B7  0820               	movf	??_printf_debug_MATRIX44,w
  6039  00B8  0722               	addwf	??_printf_debug_MATRIX44+2,w
  6040  00B9  00A4               	movwf	??_printf_debug_MATRIX44+4
  6041  00BA  0821               	movf	??_printf_debug_MATRIX44+1,w
  6042  00BB  1803               	skipnc
  6043  00BC  0A21               	incf	??_printf_debug_MATRIX44+1,w
  6044  00BD  0723               	addwf	??_printf_debug_MATRIX44+3,w
  6045  00BE  00A5               	movwf	??_printf_debug_MATRIX44+5
  6046  00BF  0825               	movf	??_printf_debug_MATRIX44+5,w
  6047  00C0  3A80               	xorlw	128
  6048  00C1  00FF               	movwf	127
  6049  00C2  3080               	movlw	128
  6050  00C3  027F               	subwf	127,w
  6051  00C4  1D03               	skipz
  6052  00C5  28C8               	goto	u6805
  6053  00C6  3004               	movlw	4
  6054  00C7  0224               	subwf	??_printf_debug_MATRIX44+4,w
  6055  00C8                     u6805:	
  6056  00C8  1803               	skipnc
  6057  00C9  2909               	goto	l4925
  6058  00CA  0878               	movf	printf_debug_MATRIX44@x,w
  6059  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  6060  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  6061  00CD  00A0               	movwf	??_printf_debug_MATRIX44
  6062  00CE  01A1               	clrf	??_printf_debug_MATRIX44+1
  6063  00CF  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  6064  00D0  03A1               	decf	??_printf_debug_MATRIX44+1,f
  6065  00D1  09A0               	comf	??_printf_debug_MATRIX44,f
  6066  00D2  09A1               	comf	??_printf_debug_MATRIX44+1,f
  6067  00D3  0AA0               	incf	??_printf_debug_MATRIX44,f
  6068  00D4  1903               	skipnz
  6069  00D5  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  6070  00D6  082B               	movf	printf_debug_MATRIX44@col,w
  6071  00D7  00A2               	movwf	??_printf_debug_MATRIX44+2
  6072  00D8  01A3               	clrf	??_printf_debug_MATRIX44+3
  6073  00D9  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  6074  00DA  03A3               	decf	??_printf_debug_MATRIX44+3,f
  6075  00DB  0820               	movf	??_printf_debug_MATRIX44,w
  6076  00DC  0722               	addwf	??_printf_debug_MATRIX44+2,w
  6077  00DD  00A4               	movwf	??_printf_debug_MATRIX44+4
  6078  00DE  0821               	movf	??_printf_debug_MATRIX44+1,w
  6079  00DF  1803               	skipnc
  6080  00E0  0A21               	incf	??_printf_debug_MATRIX44+1,w
  6081  00E1  0723               	addwf	??_printf_debug_MATRIX44+3,w
  6082  00E2  00A5               	movwf	??_printf_debug_MATRIX44+5
  6083  00E3  0824               	movf	??_printf_debug_MATRIX44+4,w
  6084  00E4  077A               	addwf	printf_debug_MATRIX44@matrix,w
  6085  00E5  00A6               	movwf	??_printf_debug_MATRIX44+6
  6086  00E6  0825               	movf	??_printf_debug_MATRIX44+5,w
  6087  00E7  1803               	skipnc
  6088  00E8  0A25               	incf	??_printf_debug_MATRIX44+5,w
  6089  00E9  077B               	addwf	printf_debug_MATRIX44@matrix+1,w
  6090  00EA  00A7               	movwf	??_printf_debug_MATRIX44+7
  6091  00EB  0379               	decf	printf_debug_MATRIX44@y,w
  6092  00EC  3AFF               	xorlw	255
  6093  00ED  072A               	addwf	printf_debug_MATRIX44@row,w
  6094  00EE  00A8               	movwf	??_printf_debug_MATRIX44+8
  6095  00EF  3001               	movlw	1
  6096  00F0                     u6815:	
  6097  00F0  1003               	clrc
  6098  00F1  0DA8               	rlf	??_printf_debug_MATRIX44+8,f
  6099  00F2  3EFF               	addlw	-1
  6100  00F3  1D03               	skipz
  6101  00F4  28F0               	goto	u6815
  6102  00F5  1003               	clrc
  6103  00F6  0D28               	rlf	??_printf_debug_MATRIX44+8,w
  6104  00F7  0726               	addwf	??_printf_debug_MATRIX44+6,w
  6105  00F8  0084               	movwf	4
  6106  00F9  0827               	movf	??_printf_debug_MATRIX44+7,w
  6107  00FA  1803               	skipnc
  6108  00FB  0A27               	incf	??_printf_debug_MATRIX44+7,w
  6109  00FC  00FF               	movwf	127
  6110  00FD  120A  158A  2000  120A  118A  	fcall	stringtab
  6111  0102  3A01               	xorlw	1
  6112  0103  1D03               	skipz
  6113  0104  2909               	goto	l4925
  6114                           
  6115                           ;teris_16f886.c: 373: {
  6116                           ;teris_16f886.c: 374: debug_str(1, "*");
  6117  0105  30BD               	movlw	low (STR_7| (0+32768))
  6118  0106  00F3               	movwf	debug_str@str
  6119  0107  308D               	movlw	high (STR_7| (0+32768))
  6120  0108  290C               	goto	L9
  6121  0109                     l4925:	
  6122                           ;teris_16f886.c: 375: }
  6123                           
  6124                           
  6125                           ;teris_16f886.c: 376: else
  6126                           ;teris_16f886.c: 377: {
  6127                           ;teris_16f886.c: 378: debug_str(1, "_");
  6128  0109  30C1               	movlw	low (STR_8| (0+32768))
  6129  010A  00F3               	movwf	debug_str@str
  6130  010B  308D               	movlw	high (STR_8| (0+32768))
  6131  010C                     L9:	
  6132  010C  00F4               	movwf	debug_str@str+1
  6133  010D  3001               	movlw	1
  6134  010E  160A  158A  2029  120A  118A  	fcall	_debug_str
  6135  0113  3001               	movlw	1
  6136  0114  1283               	bcf	3,5	;RP0=0, select bank0
  6137  0115  1303               	bcf	3,6	;RP1=0, select bank0
  6138  0116  00A0               	movwf	??_printf_debug_MATRIX44
  6139  0117  0820               	movf	??_printf_debug_MATRIX44,w
  6140  0118  07AB               	addwf	printf_debug_MATRIX44@col,f
  6141  0119  082B               	movf	printf_debug_MATRIX44@col,w
  6142  011A  3A80               	xorlw	128
  6143  011B  3E78               	addlw	-136
  6144  011C  1C03               	skipc
  6145  011D  2852               	goto	l4913
  6146  011E                     l4931:	
  6147                           
  6148                           ;teris_16f886.c: 379: }
  6149                           ;teris_16f886.c: 380: }
  6150                           ;teris_16f886.c: 381: debug_line(1, "");
  6151  011E  30BC               	movlw	low ((STR_1+2)| (0+32768))
  6152  011F  00F3               	movwf	debug_line@str
  6153  0120  308D               	movlw	high ((STR_1+2)| (0+32768))
  6154  0121  00F4               	movwf	debug_line@str+1
  6155  0122  3001               	movlw	1
  6156  0123  160A  158A  209D  120A  118A  	fcall	_debug_line
  6157  0128  3001               	movlw	1
  6158  0129  1283               	bcf	3,5	;RP0=0, select bank0
  6159  012A  1303               	bcf	3,6	;RP1=0, select bank0
  6160  012B  00A0               	movwf	??_printf_debug_MATRIX44
  6161  012C  0820               	movf	??_printf_debug_MATRIX44,w
  6162  012D  07AA               	addwf	printf_debug_MATRIX44@row,f
  6163  012E  082A               	movf	printf_debug_MATRIX44@row,w
  6164  012F  3A80               	xorlw	128
  6165  0130  3E78               	addlw	-136
  6166  0131  1C03               	skipc
  6167  0132  284C               	goto	l4907
  6168  0133                     l4937:	
  6169                           
  6170                           ;teris_16f886.c: 382: }
  6171                           ;teris_16f886.c: 383: debug_line(1, ">>>>>>>>>>>>>>>>>>>>");
  6172  0133  3003               	movlw	low (STR_10| (0+32768))
  6173  0134  00F3               	movwf	debug_line@str
  6174  0135  308B               	movlw	high (STR_10| (0+32768))
  6175  0136  00F4               	movwf	debug_line@str+1
  6176  0137  3001               	movlw	1
  6177  0138  160A  158A  209D   	fcall	_debug_line
  6178  013B  0008               	return
  6179  013C                     __end_of_printf_debug_MATRIX44:	
  6180                           
  6181                           	psect	text9
  6182  0DC7                     __ptext9:	
  6183 ;; *************** function _printf_debug_Screen *****************
  6184 ;; Defined at:
  6185 ;;		line 588 in file "teris_16f886.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;  enable          1    wreg     unsigned char 
  6188 ;;  lable           2    5[BANK0 ] PTR const unsigned char 
  6189 ;;		 -> STR_61(15), 
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;  enable          1   13[COMMON] unsigned char 
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  1    wreg      void 
  6194 ;; Registers used:
  6195 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6201 ;;      Params:         0       2       0       0       0
  6202 ;;      Locals:         1       0       0       0       0
  6203 ;;      Temps:          0       0       0       0       0
  6204 ;;      Totals:         1       2       0       0       0
  6205 ;;Total ram usage:        3 bytes
  6206 ;; Hardware stack levels used:    1
  6207 ;; Hardware stack levels required when called:    4
  6208 ;; This function calls:
  6209 ;;		_debug_line
  6210 ;;		_debug_str
  6211 ;;		_printf_debug_MATRIX88
  6212 ;; This function is called by:
  6213 ;;		_find_best_solution
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           
  6218                           ;psect for function _printf_debug_Screen
  6219  0DC7                     _printf_debug_Screen:	
  6220                           
  6221                           ;incstack = 0
  6222                           ; Regs used in _printf_debug_Screen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  6223                           ;printf_debug_Screen@enable stored from wreg
  6224  0DC7  00FD               	movwf	printf_debug_Screen@enable
  6225                           
  6226                           ;teris_16f886.c: 590: if(enable == 1)
  6227  0DC8  037D               	decf	printf_debug_Screen@enable,w
  6228  0DC9  1D03               	btfss	3,2
  6229  0DCA  0008               	return
  6230                           
  6231                           ;teris_16f886.c: 591: {
  6232                           ;teris_16f886.c: 592: if(lable != (0))
  6233  0DCB  1283               	bcf	3,5	;RP0=0, select bank0
  6234  0DCC  1303               	bcf	3,6	;RP1=0, select bank0
  6235  0DCD  0825               	movf	printf_debug_Screen@lable,w
  6236  0DCE  0426               	iorwf	printf_debug_Screen@lable+1,w
  6237  0DCF  1903               	btfsc	3,2
  6238  0DD0  2DE5               	goto	l256
  6239                           
  6240                           ;teris_16f886.c: 593: {
  6241                           ;teris_16f886.c: 594: debug_str(1, lable);
  6242  0DD1  0825               	movf	printf_debug_Screen@lable,w
  6243  0DD2  00F3               	movwf	debug_str@str
  6244  0DD3  0826               	movf	printf_debug_Screen@lable+1,w
  6245  0DD4  00F4               	movwf	debug_str@str+1
  6246  0DD5  3001               	movlw	1
  6247  0DD6  160A  158A  2029  120A  158A  	fcall	_debug_str
  6248                           
  6249                           ;teris_16f886.c: 595: debug_line(1, ":");
  6250  0DDB  30BF               	movlw	low (STR_5| (0+32768))
  6251  0DDC  00F3               	movwf	debug_line@str
  6252  0DDD  308D               	movlw	high (STR_5| (0+32768))
  6253  0DDE  00F4               	movwf	debug_line@str+1
  6254  0DDF  3001               	movlw	1
  6255  0DE0  160A  158A  209D  120A  158A  	fcall	_debug_line
  6256  0DE5                     l256:	
  6257                           
  6258                           ;teris_16f886.c: 596: }
  6259                           ;teris_16f886.c: 597: printf_debug_MATRIX88(1, (0), &g_matrix88);
  6260  0DE5  3000               	movlw	0
  6261  0DE6  00F6               	movwf	printf_debug_MATRIX88@lable
  6262  0DE7  00F7               	movwf	printf_debug_MATRIX88@lable+1
  6263  0DE8  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  6264  0DE9  00F8               	movwf	printf_debug_MATRIX88@matrix
  6265  0DEA  3001               	movlw	1
  6266  0DEB  00F9               	movwf	printf_debug_MATRIX88@matrix+1
  6267  0DEC  3001               	movlw	1
  6268  0DED  160A  118A  2028   	fcall	_printf_debug_MATRIX88
  6269  0DF0  0008               	return
  6270  0DF1                     __end_of_printf_debug_Screen:	
  6271                           
  6272                           	psect	text10
  6273  1028                     __ptext10:	
  6274 ;; *************** function _printf_debug_MATRIX88 *****************
  6275 ;; Defined at:
  6276 ;;		line 550 in file "teris_16f886.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;  enable          1    wreg     unsigned char 
  6279 ;;  lable           2    6[COMMON] PTR const unsigned char 
  6280 ;;		 -> STR_98(12), STR_62(15), ROM(8192), 
  6281 ;;  matrix          2    8[COMMON] PTR const struct .
  6282 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  6283 ;; Auto vars:     Size  Location     Type
  6284 ;;  enable          1   10[COMMON] unsigned char 
  6285 ;;  col             1   12[COMMON] unsigned char 
  6286 ;;  row             1   11[COMMON] unsigned char 
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  1    wreg      void 
  6289 ;; Registers used:
  6290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6296 ;;      Params:         4       0       0       0       0
  6297 ;;      Locals:         3       0       0       0       0
  6298 ;;      Temps:          0       5       0       0       0
  6299 ;;      Totals:         7       5       0       0       0
  6300 ;;Total ram usage:       12 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    3
  6303 ;; This function calls:
  6304 ;;		_debug_line
  6305 ;;		_debug_str
  6306 ;; This function is called by:
  6307 ;;		_printf_debug_Screen
  6308 ;;		_find_best_solution
  6309 ;;		_main
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           
  6314                           ;psect for function _printf_debug_MATRIX88
  6315  1028                     _printf_debug_MATRIX88:	
  6316                           
  6317                           ;incstack = 0
  6318                           ; Regs used in _printf_debug_MATRIX88: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  6319                           ;printf_debug_MATRIX88@enable stored from wreg
  6320  1028  00FA               	movwf	printf_debug_MATRIX88@enable
  6321                           
  6322                           ;teris_16f886.c: 552: if(enable == 1)
  6323  1029  037A               	decf	printf_debug_MATRIX88@enable,w
  6324  102A  1D03               	btfss	3,2
  6325  102B  0008               	return
  6326                           
  6327                           ;teris_16f886.c: 553: {
  6328                           ;teris_16f886.c: 554: if(lable != (0))
  6329  102C  0876               	movf	printf_debug_MATRIX88@lable,w
  6330  102D  0477               	iorwf	printf_debug_MATRIX88@lable+1,w
  6331  102E  1903               	btfsc	3,2
  6332  102F  2844               	goto	l239
  6333                           
  6334                           ;teris_16f886.c: 555: {
  6335                           ;teris_16f886.c: 556: debug_str(1, lable);
  6336  1030  0876               	movf	printf_debug_MATRIX88@lable,w
  6337  1031  00F3               	movwf	debug_str@str
  6338  1032  0877               	movf	printf_debug_MATRIX88@lable+1,w
  6339  1033  00F4               	movwf	debug_str@str+1
  6340  1034  3001               	movlw	1
  6341  1035  160A  158A  2029  160A  118A  	fcall	_debug_str
  6342                           
  6343                           ;teris_16f886.c: 557: debug_line(1, ":");
  6344  103A  30BF               	movlw	low (STR_5| (0+32768))
  6345  103B  00F3               	movwf	debug_line@str
  6346  103C  308D               	movlw	high (STR_5| (0+32768))
  6347  103D  00F4               	movwf	debug_line@str+1
  6348  103E  3001               	movlw	1
  6349  103F  160A  158A  209D  160A  118A  	fcall	_debug_line
  6350  1044                     l239:	
  6351                           
  6352                           ;teris_16f886.c: 558: }
  6353                           ;teris_16f886.c: 559: debug_line(1, "<<<<<<<<<<<<<<<<<<<<MATRIX88");
  6354  1044  3040               	movlw	low (STR_22| (0+32768))
  6355  1045  00F3               	movwf	debug_line@str
  6356  1046  308A               	movlw	high (STR_22| (0+32768))
  6357  1047  00F4               	movwf	debug_line@str+1
  6358  1048  3001               	movlw	1
  6359  1049  160A  158A  209D  160A  118A  	fcall	_debug_line
  6360                           
  6361                           ;teris_16f886.c: 560: for(uint8_t row = 0; row < 8; row++)
  6362  104E  01FB               	clrf	printf_debug_MATRIX88@row
  6363  104F  3008               	movlw	8
  6364  1050  027B               	subwf	printf_debug_MATRIX88@row,w
  6365  1051  1803               	btfsc	3,0
  6366  1052  28A5               	goto	l4973
  6367  1053                     l4951:	
  6368                           
  6369                           ;teris_16f886.c: 561: {
  6370                           ;teris_16f886.c: 562: for(uint8_t col = 0; col < 8; col++)
  6371  1053  01FC               	clrf	printf_debug_MATRIX88@col
  6372  1054  3008               	movlw	8
  6373  1055  027C               	subwf	printf_debug_MATRIX88@col,w
  6374  1056  1803               	btfsc	3,0
  6375  1057  2891               	goto	l4967
  6376  1058                     l4957:	
  6377                           
  6378                           ;teris_16f886.c: 563: {
  6379                           ;teris_16f886.c: 564: if(matrix->data[row][col] == 1)
  6380  1058  087B               	movf	printf_debug_MATRIX88@row,w
  6381  1059  1283               	bcf	3,5	;RP0=0, select bank0
  6382  105A  1303               	bcf	3,6	;RP1=0, select bank0
  6383  105B  00A0               	movwf	??_printf_debug_MATRIX88
  6384  105C  3002               	movlw	2
  6385  105D                     u6895:	
  6386  105D  1003               	clrc
  6387  105E  0DA0               	rlf	??_printf_debug_MATRIX88,f
  6388  105F  3EFF               	addlw	-1
  6389  1060  1D03               	skipz
  6390  1061  285D               	goto	u6895
  6391  1062  1003               	clrc
  6392  1063  0D20               	rlf	??_printf_debug_MATRIX88,w
  6393  1064  0778               	addwf	printf_debug_MATRIX88@matrix,w
  6394  1065  00A1               	movwf	??_printf_debug_MATRIX88+1
  6395  1066  0879               	movf	printf_debug_MATRIX88@matrix+1,w
  6396  1067  1803               	skipnc
  6397  1068  3E01               	addlw	1
  6398  1069  00A2               	movwf	??_printf_debug_MATRIX88+2
  6399  106A  087C               	movf	printf_debug_MATRIX88@col,w
  6400  106B  0721               	addwf	??_printf_debug_MATRIX88+1,w
  6401  106C  00A3               	movwf	??_printf_debug_MATRIX88+3
  6402  106D  0822               	movf	??_printf_debug_MATRIX88+2,w
  6403  106E  1803               	skipnc
  6404  106F  3E01               	addlw	1
  6405  1070  00A4               	movwf	??_printf_debug_MATRIX88+4
  6406  1071  0823               	movf	??_printf_debug_MATRIX88+3,w
  6407  1072  0084               	movwf	4
  6408  1073  1783               	bsf	3,7
  6409  1074  1C24               	btfss	??_printf_debug_MATRIX88+4,0
  6410  1075  1383               	bcf	3,7
  6411  1076  0300               	decf	0,w
  6412  1077  1D03               	btfss	3,2
  6413  1078  287D               	goto	l4961
  6414                           
  6415                           ;teris_16f886.c: 565: {
  6416                           ;teris_16f886.c: 566: debug_str(1, "*");
  6417  1079  30BD               	movlw	low (STR_7| (0+32768))
  6418  107A  00F3               	movwf	debug_str@str
  6419  107B  308D               	movlw	high (STR_7| (0+32768))
  6420  107C  2880               	goto	L10
  6421  107D                     l4961:	
  6422                           ;teris_16f886.c: 567: }
  6423                           
  6424                           
  6425                           ;teris_16f886.c: 568: else
  6426                           ;teris_16f886.c: 569: {
  6427                           ;teris_16f886.c: 570: debug_str(1, "_");
  6428  107D  30C1               	movlw	low (STR_8| (0+32768))
  6429  107E  00F3               	movwf	debug_str@str
  6430  107F  308D               	movlw	high (STR_8| (0+32768))
  6431  1080                     L10:	
  6432  1080  00F4               	movwf	debug_str@str+1
  6433  1081  3001               	movlw	1
  6434  1082  160A  158A  2029  160A  118A  	fcall	_debug_str
  6435  1087  3001               	movlw	1
  6436  1088  1283               	bcf	3,5	;RP0=0, select bank0
  6437  1089  1303               	bcf	3,6	;RP1=0, select bank0
  6438  108A  00A0               	movwf	??_printf_debug_MATRIX88
  6439  108B  0820               	movf	??_printf_debug_MATRIX88,w
  6440  108C  07FC               	addwf	printf_debug_MATRIX88@col,f
  6441  108D  3008               	movlw	8
  6442  108E  027C               	subwf	printf_debug_MATRIX88@col,w
  6443  108F  1C03               	skipc
  6444  1090  2858               	goto	l4957
  6445  1091                     l4967:	
  6446                           
  6447                           ;teris_16f886.c: 571: }
  6448                           ;teris_16f886.c: 572: }
  6449                           ;teris_16f886.c: 573: debug_line(1, "");
  6450  1091  30BC               	movlw	low ((STR_1+2)| (0+32768))
  6451  1092  00F3               	movwf	debug_line@str
  6452  1093  308D               	movlw	high ((STR_1+2)| (0+32768))
  6453  1094  00F4               	movwf	debug_line@str+1
  6454  1095  3001               	movlw	1
  6455  1096  160A  158A  209D  160A  118A  	fcall	_debug_line
  6456  109B  3001               	movlw	1
  6457  109C  1283               	bcf	3,5	;RP0=0, select bank0
  6458  109D  1303               	bcf	3,6	;RP1=0, select bank0
  6459  109E  00A0               	movwf	??_printf_debug_MATRIX88
  6460  109F  0820               	movf	??_printf_debug_MATRIX88,w
  6461  10A0  07FB               	addwf	printf_debug_MATRIX88@row,f
  6462  10A1  3008               	movlw	8
  6463  10A2  027B               	subwf	printf_debug_MATRIX88@row,w
  6464  10A3  1C03               	skipc
  6465  10A4  2853               	goto	l4951
  6466  10A5                     l4973:	
  6467                           
  6468                           ;teris_16f886.c: 574: }
  6469                           ;teris_16f886.c: 575: debug_line(1, ">>>>>>>>>>>>>>>>>>>>");
  6470  10A5  3003               	movlw	low (STR_10| (0+32768))
  6471  10A6  00F3               	movwf	debug_line@str
  6472  10A7  308B               	movlw	high (STR_10| (0+32768))
  6473  10A8  00F4               	movwf	debug_line@str+1
  6474  10A9  3001               	movlw	1
  6475  10AA  160A  158A  209D   	fcall	_debug_line
  6476  10AD  0008               	return
  6477  10AE                     __end_of_printf_debug_MATRIX88:	
  6478                           
  6479                           	psect	text11
  6480  1829                     __ptext11:	
  6481 ;; *************** function _debug_str *****************
  6482 ;; Defined at:
  6483 ;;		line 288 in file "teris_16f886.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;  enable          1    wreg     unsigned char 
  6486 ;;  str             2    3[COMMON] PTR const unsigned char 
  6487 ;;		 -> STR_98(12), STR_86(7), STR_62(15), STR_61(15), 
  6488 ;;		 -> STR_60(15), STR_24(2), STR_23(2), STR_18(2), 
  6489 ;;		 -> STR_17(2), STR_8(2), STR_7(2), ROM(8192), 
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;  enable          1    5[COMMON] unsigned char 
  6492 ;; Return value:  Size  Location     Type
  6493 ;;                  1    wreg      void 
  6494 ;; Registers used:
  6495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6501 ;;      Params:         2       0       0       0       0
  6502 ;;      Locals:         1       0       0       0       0
  6503 ;;      Temps:          0       0       0       0       0
  6504 ;;      Totals:         3       0       0       0       0
  6505 ;;Total ram usage:        3 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:    2
  6508 ;; This function calls:
  6509 ;;		_USARTWriteString
  6510 ;; This function is called by:
  6511 ;;		_printf_debug_MATRIX44
  6512 ;;		_printf_debug_cur_MATRIX44
  6513 ;;		_printf_debug_MATRIX88
  6514 ;;		_printf_debug_Screen
  6515 ;;		_printf_debug_MATRIX7219
  6516 ;; This function uses a non-reentrant model
  6517 ;;
  6518                           
  6519                           
  6520                           ;psect for function _debug_str
  6521  1829                     _debug_str:	
  6522                           
  6523                           ;incstack = 0
  6524                           ; Regs used in _debug_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6525                           ;debug_str@enable stored from wreg
  6526  1829  00F5               	movwf	debug_str@enable
  6527                           
  6528                           ;teris_16f886.c: 290: if(enable == 1)
  6529  182A  0375               	decf	debug_str@enable,w
  6530  182B  1D03               	btfss	3,2
  6531  182C  0008               	return
  6532                           
  6533                           ;teris_16f886.c: 291: {
  6534                           ;teris_16f886.c: 295: USARTWriteString(str);
  6535  182D  0873               	movf	debug_str@str,w
  6536  182E  00F1               	movwf	USARTWriteString@str
  6537  182F  0874               	movf	debug_str@str+1,w
  6538  1830  00F2               	movwf	USARTWriteString@str+1
  6539  1831  160A  158A  212A   	fcall	_USARTWriteString
  6540  1834  0008               	return
  6541  1835                     __end_of_debug_str:	
  6542                           
  6543                           	psect	text12
  6544  1E2F                     __ptext12:	
  6545 ;; *************** function _merge1 *****************
  6546 ;; Defined at:
  6547 ;;		line 835 in file "teris_16f886.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;  x               1    wreg     char 
  6550 ;;  y               1    0[BANK0 ] char 
  6551 ;;  matrix44        2    1[BANK0 ] PTR const struct .
  6552 ;;		 -> g_matrix44(384), 
  6553 ;;  matrix88_in     1    3[BANK0 ] PTR const struct .
  6554 ;;		 -> g_matrix88(64), 
  6555 ;;  matrix88_out    1    4[BANK0 ] PTR struct .
  6556 ;;		 -> find_best_solution@temp_matrix88(64), 
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;  x               1    9[BANK0 ] char 
  6559 ;;  col             1   13[BANK0 ] unsigned char 
  6560 ;;  row             1   12[BANK0 ] unsigned char 
  6561 ;;  len             2   10[BANK0 ] unsigned int 
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  1    wreg      void 
  6564 ;; Registers used:
  6565 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6571 ;;      Params:         0       5       0       0       0
  6572 ;;      Locals:         0       5       0       0       0
  6573 ;;      Temps:          0       4       0       0       0
  6574 ;;      Totals:         0      14       0       0       0
  6575 ;;Total ram usage:       14 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:    1
  6578 ;; This function calls:
  6579 ;;		_memcpy
  6580 ;; This function is called by:
  6581 ;;		_find_best_solution
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           
  6586                           ;psect for function _merge1
  6587  1E2F                     _merge1:	
  6588                           
  6589                           ;incstack = 0
  6590                           ; Regs used in _merge1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6591                           ;merge1@x stored from wreg
  6592  1E2F  1283               	bcf	3,5	;RP0=0, select bank0
  6593  1E30  1303               	bcf	3,6	;RP1=0, select bank0
  6594  1E31  00A9               	movwf	merge1@x
  6595                           
  6596                           ;teris_16f886.c: 840: register size_t len;
  6597                           ;teris_16f886.c: 842: len = sizeof(MATRIX88);
  6598  1E32  3040               	movlw	64
  6599  1E33  00AA               	movwf	merge1@len
  6600  1E34  3000               	movlw	0
  6601  1E35  00AB               	movwf	merge1@len+1
  6602                           
  6603                           ;teris_16f886.c: 843: memcpy(matrix88_out, matrix88_in, len);
  6604  1E36  0824               	movf	merge1@matrix88_out,w
  6605  1E37  00F0               	movwf	memcpy@d1
  6606  1E38  3000               	movlw	0
  6607  1E39  00F1               	movwf	memcpy@d1+1
  6608  1E3A  0823               	movf	merge1@matrix88_in,w
  6609  1E3B  00F2               	movwf	memcpy@s1
  6610  1E3C  3001               	movlw	1
  6611  1E3D  00F3               	movwf	memcpy@s1+1
  6612  1E3E  082B               	movf	merge1@len+1,w
  6613  1E3F  00F5               	movwf	memcpy@n+1
  6614  1E40  082A               	movf	merge1@len,w
  6615  1E41  00F4               	movwf	memcpy@n
  6616  1E42  160A  158A  219D  160A  158A  	fcall	_memcpy
  6617                           
  6618                           ;teris_16f886.c: 845: for(uint8_t row = 0; row < 4; row++)
  6619  1E47  1283               	bcf	3,5	;RP0=0, select bank0
  6620  1E48  1303               	bcf	3,6	;RP1=0, select bank0
  6621  1E49  01AC               	clrf	merge1@row
  6622  1E4A                     L11:	
  6623  1E4A  3004               	movlw	4
  6624  1E4B  022C               	subwf	merge1@row,w
  6625  1E4C  1803               	btfsc	3,0
  6626  1E4D  0008               	return
  6627                           
  6628                           ;teris_16f886.c: 846: {
  6629                           ;teris_16f886.c: 847: for(uint8_t col = 0; col < 4; col++)
  6630  1E4E  01AD               	clrf	merge1@col
  6631  1E4F  3004               	movlw	4
  6632  1E50  022D               	subwf	merge1@col,w
  6633  1E51  1803               	btfsc	3,0
  6634  1E52  2E91               	goto	l5219
  6635  1E53                     l5211:	
  6636                           
  6637                           ;teris_16f886.c: 848: {
  6638                           ;teris_16f886.c: 849: if(matrix44->data[row][col] == 1)
  6639  1E53  082C               	movf	merge1@row,w
  6640  1E54  00A5               	movwf	??_merge1
  6641  1E55  01A6               	clrf	??_merge1+1
  6642  1E56  1003               	clrc
  6643  1E57  0DA5               	rlf	??_merge1,f
  6644  1E58  0DA6               	rlf	??_merge1+1,f
  6645  1E59  1003               	clrc
  6646  1E5A  0DA5               	rlf	??_merge1,f
  6647  1E5B  0DA6               	rlf	??_merge1+1,f
  6648  1E5C  0825               	movf	??_merge1,w
  6649  1E5D  0721               	addwf	merge1@matrix44,w
  6650  1E5E  00A7               	movwf	??_merge1+2
  6651  1E5F  0826               	movf	??_merge1+1,w
  6652  1E60  1803               	skipnc
  6653  1E61  0A26               	incf	??_merge1+1,w
  6654  1E62  0722               	addwf	merge1@matrix44+1,w
  6655  1E63  00A8               	movwf	??_merge1+3
  6656  1E64  082D               	movf	merge1@col,w
  6657  1E65  0727               	addwf	??_merge1+2,w
  6658  1E66  0084               	movwf	4
  6659  1E67  0828               	movf	??_merge1+3,w
  6660  1E68  1803               	skipnc
  6661  1E69  0A28               	incf	??_merge1+3,w
  6662  1E6A  00FF               	movwf	127
  6663  1E6B  120A  158A  2000  160A  158A  	fcall	stringtab
  6664  1E70  3A01               	xorlw	1
  6665  1E71  1D03               	skipz
  6666  1E72  2E89               	goto	l5215
  6667                           
  6668                           ;teris_16f886.c: 850: {
  6669                           ;teris_16f886.c: 851: matrix88_out->data[y + row][x + col] = 1;
  6670  1E73  082D               	movf	merge1@col,w
  6671  1E74  0729               	addwf	merge1@x,w
  6672  1E75  0724               	addwf	merge1@matrix88_out,w
  6673  1E76  00A5               	movwf	??_merge1
  6674  1E77  082C               	movf	merge1@row,w
  6675  1E78  0720               	addwf	merge1@y,w
  6676  1E79  00A6               	movwf	??_merge1+1
  6677  1E7A  3002               	movlw	2
  6678  1E7B                     u7445:	
  6679  1E7B  1003               	clrc
  6680  1E7C  0DA6               	rlf	??_merge1+1,f
  6681  1E7D  3EFF               	addlw	-1
  6682  1E7E  1D03               	skipz
  6683  1E7F  2E7B               	goto	u7445
  6684  1E80  1003               	clrc
  6685  1E81  0D26               	rlf	??_merge1+1,w
  6686  1E82  0725               	addwf	??_merge1,w
  6687  1E83  00A7               	movwf	??_merge1+2
  6688  1E84  0827               	movf	??_merge1+2,w
  6689  1E85  0084               	movwf	4
  6690  1E86  1383               	bcf	3,7	;select IRP bank0
  6691  1E87  0180               	clrf	0
  6692  1E88  0A80               	incf	0,f
  6693  1E89                     l5215:	
  6694  1E89  3001               	movlw	1
  6695  1E8A  00A5               	movwf	??_merge1
  6696  1E8B  0825               	movf	??_merge1,w
  6697  1E8C  07AD               	addwf	merge1@col,f
  6698  1E8D  3004               	movlw	4
  6699  1E8E  022D               	subwf	merge1@col,w
  6700  1E8F  1C03               	skipc
  6701  1E90  2E53               	goto	l5211
  6702  1E91                     l5219:	
  6703  1E91  3001               	movlw	1
  6704  1E92  00A5               	movwf	??_merge1
  6705  1E93  0825               	movf	??_merge1,w
  6706  1E94  07AC               	addwf	merge1@row,f
  6707  1E95  2E4A               	goto	L11
  6708  1E96                     __end_of_merge1:	
  6709                           
  6710                           	psect	text13
  6711  1A29                     __ptext13:	
  6712 ;; *************** function _left_most *****************
  6713 ;; Defined at:
  6714 ;;		line 890 in file "teris_16f886.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;  x               1    wreg     char 
  6717 ;;  matrix44        2   36[BANK0 ] PTR const struct .
  6718 ;;		 -> g_matrix44(384), 
  6719 ;;  matrix88        1   38[BANK0 ] PTR const struct .
  6720 ;;		 -> g_matrix88(64), 
  6721 ;; Auto vars:     Size  Location     Type
  6722 ;;  x               1   40[BANK0 ] char 
  6723 ;; Return value:  Size  Location     Type
  6724 ;;                  1    wreg      char 
  6725 ;; Registers used:
  6726 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6727 ;; Tracked objects:
  6728 ;;		On entry : 0/0
  6729 ;;		On exit  : 0/0
  6730 ;;		Unchanged: 0/0
  6731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6732 ;;      Params:         0       3       0       0       0
  6733 ;;      Locals:         0       1       0       0       0
  6734 ;;      Temps:          0       1       0       0       0
  6735 ;;      Totals:         0       5       0       0       0
  6736 ;;Total ram usage:        5 bytes
  6737 ;; Hardware stack levels used:    1
  6738 ;; Hardware stack levels required when called:    4
  6739 ;; This function calls:
  6740 ;;		_debug_int1
  6741 ;;		_is_left_boundary
  6742 ;; This function is called by:
  6743 ;;		_find_best_solution
  6744 ;; This function uses a non-reentrant model
  6745 ;;
  6746                           
  6747                           
  6748                           ;psect for function _left_most
  6749  1A29                     _left_most:	
  6750                           
  6751                           ;incstack = 0
  6752                           ; Regs used in _left_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6753                           ;left_most@x stored from wreg
  6754  1A29  1283               	bcf	3,5	;RP0=0, select bank0
  6755  1A2A  1303               	bcf	3,6	;RP1=0, select bank0
  6756  1A2B  00C8               	movwf	left_most@x
  6757  1A2C                     l389:	
  6758                           ;teris_16f886.c: 892: while(1)
  6759                           
  6760                           
  6761                           ;teris_16f886.c: 893: {
  6762                           ;teris_16f886.c: 894: if(is_left_boundary(x, matrix44, matrix88) == LEFT_OVER_BOUNDARY)
  6763  1A2C  0844               	movf	left_most@matrix44,w
  6764  1A2D  00F6               	movwf	is_left_boundary@matrix44
  6765  1A2E  0845               	movf	left_most@matrix44+1,w
  6766  1A2F  00F7               	movwf	is_left_boundary@matrix44+1
  6767  1A30  0846               	movf	left_most@matrix88,w
  6768  1A31  00C7               	movwf	??_left_most
  6769  1A32  0847               	movf	??_left_most,w
  6770  1A33  00F8               	movwf	is_left_boundary@matrix88
  6771  1A34  0848               	movf	left_most@x,w
  6772  1A35  160A  158A  256F  160A  158A  	fcall	_is_left_boundary
  6773  1A3A  3A02               	xorlw	2
  6774  1A3B  1D03               	skipz
  6775  1A3C  2A54               	goto	l5271
  6776                           
  6777                           ;teris_16f886.c: 895: {
  6778                           ;teris_16f886.c: 896: debug_int1(0, "left_most = %d", x + 1);
  6779  1A3D  30D3               	movlw	low (STR_48| (0+32768))
  6780  1A3E  1283               	bcf	3,5	;RP0=0, select bank0
  6781  1A3F  1303               	bcf	3,6	;RP1=0, select bank0
  6782  1A40  00BF               	movwf	debug_int1@f
  6783  1A41  308C               	movlw	high (STR_48| (0+32768))
  6784  1A42  00C0               	movwf	debug_int1@f+1
  6785  1A43  3001               	movlw	1
  6786  1A44  0748               	addwf	left_most@x,w
  6787  1A45  00C1               	movwf	debug_int1@i
  6788  1A46  01C2               	clrf	debug_int1@i+1
  6789  1A47  1803               	skipnc
  6790  1A48  0AC2               	incf	debug_int1@i+1,f
  6791  1A49  1BC8               	btfsc	left_most@x,7
  6792  1A4A  03C2               	decf	debug_int1@i+1,f
  6793  1A4B  3000               	movlw	0
  6794  1A4C  160A  158A  214F   	fcall	_debug_int1
  6795                           
  6796                           ;teris_16f886.c: 897: return x + 1;
  6797  1A4F  1283               	bcf	3,5	;RP0=0, select bank0
  6798  1A50  1303               	bcf	3,6	;RP1=0, select bank0
  6799  1A51  0848               	movf	left_most@x,w
  6800  1A52  3E01               	addlw	1
  6801  1A53  0008               	return
  6802  1A54                     l5271:	
  6803                           
  6804                           ;teris_16f886.c: 898: }
  6805                           ;teris_16f886.c: 899: x--;
  6806  1A54  30FF               	movlw	255
  6807  1A55  1283               	bcf	3,5	;RP0=0, select bank0
  6808  1A56  1303               	bcf	3,6	;RP1=0, select bank0
  6809  1A57  00C7               	movwf	??_left_most
  6810  1A58  0847               	movf	??_left_most,w
  6811  1A59  07C8               	addwf	left_most@x,f
  6812  1A5A  2A2C               	goto	l389
  6813  1A5B                     __end_of_left_most:	
  6814                           
  6815                           	psect	text14
  6816  1D6F                     __ptext14:	
  6817 ;; *************** function _is_left_boundary *****************
  6818 ;; Defined at:
  6819 ;;		line 745 in file "teris_16f886.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  x               1    wreg     char 
  6822 ;;  matrix44        2    6[COMMON] PTR const struct .
  6823 ;;		 -> g_matrix44(384), 
  6824 ;;  matrix88        1    8[COMMON] PTR const struct .
  6825 ;;		 -> g_matrix88(64), 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  x               1    0[BANK0 ] char 
  6828 ;;  col             1    2[BANK0 ] char 
  6829 ;;  row             1    1[BANK0 ] char 
  6830 ;; Return value:  Size  Location     Type
  6831 ;;                  1    wreg      unsigned char 
  6832 ;; Registers used:
  6833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6834 ;; Tracked objects:
  6835 ;;		On entry : 0/0
  6836 ;;		On exit  : 0/0
  6837 ;;		Unchanged: 0/0
  6838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6839 ;;      Params:         3       0       0       0       0
  6840 ;;      Locals:         0       3       0       0       0
  6841 ;;      Temps:          5       0       0       0       0
  6842 ;;      Totals:         8       3       0       0       0
  6843 ;;Total ram usage:       11 bytes
  6844 ;; Hardware stack levels used:    1
  6845 ;; Hardware stack levels required when called:    3
  6846 ;; This function calls:
  6847 ;;		_debug_line
  6848 ;; This function is called by:
  6849 ;;		_left_most
  6850 ;; This function uses a non-reentrant model
  6851 ;;
  6852                           
  6853                           
  6854                           ;psect for function _is_left_boundary
  6855  1D6F                     _is_left_boundary:	
  6856                           
  6857                           ;incstack = 0
  6858                           ; Regs used in _is_left_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6859                           ;is_left_boundary@x stored from wreg
  6860  1D6F  1283               	bcf	3,5	;RP0=0, select bank0
  6861  1D70  1303               	bcf	3,6	;RP1=0, select bank0
  6862  1D71  00A0               	movwf	is_left_boundary@x
  6863                           
  6864                           ;teris_16f886.c: 747: for(int8_t row = 4 - 1; row >= 0; row--)
  6865  1D72  3003               	movlw	3
  6866  1D73  00F9               	movwf	??_is_left_boundary
  6867  1D74  0879               	movf	??_is_left_boundary,w
  6868  1D75  00A1               	movwf	is_left_boundary@row
  6869  1D76  1BA1               	btfsc	is_left_boundary@row,7
  6870  1D77  2DCC               	goto	l5025
  6871  1D78                     l5001:	
  6872                           
  6873                           ;teris_16f886.c: 748: {
  6874                           ;teris_16f886.c: 749: for(int8_t col = 0; col < 4; col++)
  6875  1D78  01A2               	clrf	is_left_boundary@col
  6876  1D79  0822               	movf	is_left_boundary@col,w
  6877  1D7A  3A80               	xorlw	128
  6878  1D7B  3E7C               	addlw	-132
  6879  1D7C  1803               	btfsc	3,0
  6880  1D7D  2DC6               	goto	l5021
  6881  1D7E                     l5007:	
  6882                           
  6883                           ;teris_16f886.c: 750: {
  6884                           ;teris_16f886.c: 751: if(matrix44->data[row][col] == 1)
  6885  1D7E  0821               	movf	is_left_boundary@row,w
  6886  1D7F  00F9               	movwf	??_is_left_boundary
  6887  1D80  01FA               	clrf	??_is_left_boundary+1
  6888  1D81  1003               	clrc
  6889  1D82  0DF9               	rlf	??_is_left_boundary,f
  6890  1D83  0DFA               	rlf	??_is_left_boundary+1,f
  6891  1D84  1003               	clrc
  6892  1D85  0DF9               	rlf	??_is_left_boundary,f
  6893  1D86  0DFA               	rlf	??_is_left_boundary+1,f
  6894  1D87  0879               	movf	??_is_left_boundary,w
  6895  1D88  0776               	addwf	is_left_boundary@matrix44,w
  6896  1D89  00FB               	movwf	??_is_left_boundary+2
  6897  1D8A  087A               	movf	??_is_left_boundary+1,w
  6898  1D8B  1803               	skipnc
  6899  1D8C  0A7A               	incf	??_is_left_boundary+1,w
  6900  1D8D  0777               	addwf	is_left_boundary@matrix44+1,w
  6901  1D8E  00FC               	movwf	??_is_left_boundary+3
  6902  1D8F  0822               	movf	is_left_boundary@col,w
  6903  1D90  077B               	addwf	??_is_left_boundary+2,w
  6904  1D91  0084               	movwf	4
  6905  1D92  087C               	movf	??_is_left_boundary+3,w
  6906  1D93  1803               	skipnc
  6907  1D94  0A7C               	incf	??_is_left_boundary+3,w
  6908  1D95  00FF               	movwf	127
  6909  1D96  120A  158A  2000  160A  158A  	fcall	stringtab
  6910  1D9B  3A01               	xorlw	1
  6911  1D9C  1D03               	skipz
  6912  1D9D  2DBB               	goto	l5017
  6913                           
  6914                           ;teris_16f886.c: 752: {
  6915                           ;teris_16f886.c: 753: if( x + col < 0)
  6916  1D9E  0822               	movf	is_left_boundary@col,w
  6917  1D9F  00F9               	movwf	??_is_left_boundary
  6918  1DA0  01FA               	clrf	??_is_left_boundary+1
  6919  1DA1  1BF9               	btfsc	??_is_left_boundary,7
  6920  1DA2  03FA               	decf	??_is_left_boundary+1,f
  6921  1DA3  0820               	movf	is_left_boundary@x,w
  6922  1DA4  00FB               	movwf	??_is_left_boundary+2
  6923  1DA5  01FC               	clrf	??_is_left_boundary+3
  6924  1DA6  1BFB               	btfsc	??_is_left_boundary+2,7
  6925  1DA7  03FC               	decf	??_is_left_boundary+3,f
  6926  1DA8  0879               	movf	??_is_left_boundary,w
  6927  1DA9  077B               	addwf	??_is_left_boundary+2,w
  6928  1DAA  087C               	movf	??_is_left_boundary+3,w
  6929  1DAB  1803               	skipnc
  6930  1DAC  0A7C               	incf	??_is_left_boundary+3,w
  6931  1DAD  077A               	addwf	??_is_left_boundary+1,w
  6932  1DAE  00FD               	movwf	??_is_left_boundary+4
  6933  1DAF  1FFD               	btfss	??_is_left_boundary+4,7
  6934  1DB0  2DBB               	goto	l5017
  6935                           
  6936                           ;teris_16f886.c: 754: {
  6937                           ;teris_16f886.c: 755: debug_line(0, "LEFT_OVER_BOUNDARY");
  6938  1DB1  30DE               	movlw	low (STR_41| (0+32768))
  6939  1DB2  00F3               	movwf	debug_line@str
  6940  1DB3  308B               	movlw	high (STR_41| (0+32768))
  6941  1DB4  00F4               	movwf	debug_line@str+1
  6942  1DB5  3000               	movlw	0
  6943  1DB6  160A  158A  209D   	fcall	_debug_line
  6944                           
  6945                           ;teris_16f886.c: 756: return LEFT_OVER_BOUNDARY;
  6946  1DB9  3002               	movlw	2
  6947  1DBA  0008               	return
  6948  1DBB                     l5017:	
  6949  1DBB  3001               	movlw	1
  6950  1DBC  00F9               	movwf	??_is_left_boundary
  6951  1DBD  0879               	movf	??_is_left_boundary,w
  6952  1DBE  1283               	bcf	3,5	;RP0=0, select bank0
  6953  1DBF  1303               	bcf	3,6	;RP1=0, select bank0
  6954  1DC0  07A2               	addwf	is_left_boundary@col,f
  6955  1DC1  0822               	movf	is_left_boundary@col,w
  6956  1DC2  3A80               	xorlw	128
  6957  1DC3  3E7C               	addlw	-132
  6958  1DC4  1C03               	skipc
  6959  1DC5  2D7E               	goto	l5007
  6960  1DC6                     l5021:	
  6961  1DC6  30FF               	movlw	255
  6962  1DC7  00F9               	movwf	??_is_left_boundary
  6963  1DC8  0879               	movf	??_is_left_boundary,w
  6964  1DC9  07A1               	addwf	is_left_boundary@row,f
  6965  1DCA  1FA1               	btfss	is_left_boundary@row,7
  6966  1DCB  2D78               	goto	l5001
  6967  1DCC                     l5025:	
  6968                           
  6969                           ;teris_16f886.c: 757: }
  6970                           ;teris_16f886.c: 758: }
  6971                           ;teris_16f886.c: 759: }
  6972                           ;teris_16f886.c: 760: }
  6973                           ;teris_16f886.c: 761: return OK;
  6974  1DCC  3000               	movlw	0
  6975  1DCD  0008               	return
  6976  1DCE                     __end_of_is_left_boundary:	
  6977                           
  6978                           	psect	text15
  6979  11F3                     __ptext15:	
  6980 ;; *************** function _is_valid *****************
  6981 ;; Defined at:
  6982 ;;		line 711 in file "teris_16f886.c"
  6983 ;; Parameters:    Size  Location     Type
  6984 ;;  x               1    wreg     char 
  6985 ;;  y               1   38[BANK0 ] char 
  6986 ;;  matrix44        2   39[BANK0 ] PTR const struct .
  6987 ;;		 -> g_matrix44(384), 
  6988 ;;  matrix88        1   41[BANK0 ] PTR const struct .
  6989 ;;		 -> g_matrix88(64), 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;  x               1   46[BANK0 ] char 
  6992 ;;  col             1   48[BANK0 ] char 
  6993 ;;  row             1   47[BANK0 ] char 
  6994 ;; Return value:  Size  Location     Type
  6995 ;;                  1    wreg      unsigned char 
  6996 ;; Registers used:
  6997 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7003 ;;      Params:         0       4       0       0       0
  7004 ;;      Locals:         0       3       0       0       0
  7005 ;;      Temps:          0       4       0       0       0
  7006 ;;      Totals:         0      11       0       0       0
  7007 ;;Total ram usage:       11 bytes
  7008 ;; Hardware stack levels used:    1
  7009 ;; Hardware stack levels required when called:    3
  7010 ;; This function calls:
  7011 ;;		_debug_int2
  7012 ;;		_debug_line
  7013 ;; This function is called by:
  7014 ;;		_find_best_solution
  7015 ;; This function uses a non-reentrant model
  7016 ;;
  7017                           
  7018                           
  7019                           ;psect for function _is_valid
  7020  11F3                     _is_valid:	
  7021                           
  7022                           ;incstack = 0
  7023                           ; Regs used in _is_valid: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7024                           ;is_valid@x stored from wreg
  7025  11F3  1283               	bcf	3,5	;RP0=0, select bank0
  7026  11F4  1303               	bcf	3,6	;RP1=0, select bank0
  7027  11F5  00CE               	movwf	is_valid@x
  7028                           
  7029                           ;teris_16f886.c: 713: debug_line(0, "==============is_valid============");
  7030  11F6  30DD               	movlw	low (STR_33| (0+32768))
  7031  11F7  00F3               	movwf	debug_line@str
  7032  11F8  3089               	movlw	high (STR_33| (0+32768))
  7033  11F9  00F4               	movwf	debug_line@str+1
  7034  11FA  3000               	movlw	0
  7035  11FB  160A  158A  209D  160A  118A  	fcall	_debug_line
  7036                           
  7037                           ;teris_16f886.c: 714: for(int8_t row = 4 - 1; row >= 0; row--)
  7038  1200  3003               	movlw	3
  7039  1201  1283               	bcf	3,5	;RP0=0, select bank0
  7040  1202  1303               	bcf	3,6	;RP1=0, select bank0
  7041  1203  00CA               	movwf	??_is_valid
  7042  1204  084A               	movf	??_is_valid,w
  7043  1205  00CF               	movwf	is_valid@row
  7044  1206  1BCF               	btfsc	is_valid@row,7
  7045  1207  2AF6               	goto	l5149
  7046  1208                     l5107:	
  7047                           
  7048                           ;teris_16f886.c: 715: {
  7049                           ;teris_16f886.c: 716: for(int8_t col = 0; col < 4; col++)
  7050  1208  01D0               	clrf	is_valid@col
  7051  1209  0850               	movf	is_valid@col,w
  7052  120A  3A80               	xorlw	128
  7053  120B  3E7C               	addlw	-132
  7054  120C  1803               	btfsc	3,0
  7055  120D  2AF0               	goto	l5145
  7056  120E                     l5113:	
  7057                           
  7058                           ;teris_16f886.c: 717: {
  7059                           ;teris_16f886.c: 718: if(matrix44->data[row][col] == 1)
  7060  120E  084F               	movf	is_valid@row,w
  7061  120F  00CA               	movwf	??_is_valid
  7062  1210  01CB               	clrf	??_is_valid+1
  7063  1211  1003               	clrc
  7064  1212  0DCA               	rlf	??_is_valid,f
  7065  1213  0DCB               	rlf	??_is_valid+1,f
  7066  1214  1003               	clrc
  7067  1215  0DCA               	rlf	??_is_valid,f
  7068  1216  0DCB               	rlf	??_is_valid+1,f
  7069  1217  084A               	movf	??_is_valid,w
  7070  1218  0747               	addwf	is_valid@matrix44,w
  7071  1219  00CC               	movwf	??_is_valid+2
  7072  121A  084B               	movf	??_is_valid+1,w
  7073  121B  1803               	skipnc
  7074  121C  0A4B               	incf	??_is_valid+1,w
  7075  121D  0748               	addwf	is_valid@matrix44+1,w
  7076  121E  00CD               	movwf	??_is_valid+3
  7077  121F  0850               	movf	is_valid@col,w
  7078  1220  074C               	addwf	??_is_valid+2,w
  7079  1221  0084               	movwf	4
  7080  1222  084D               	movf	??_is_valid+3,w
  7081  1223  1803               	skipnc
  7082  1224  0A4D               	incf	??_is_valid+3,w
  7083  1225  00FF               	movwf	127
  7084  1226  120A  158A  2000  160A  118A  	fcall	stringtab
  7085  122B  3A01               	xorlw	1
  7086  122C  1D03               	skipz
  7087  122D  2AE5               	goto	l5141
  7088                           
  7089                           ;teris_16f886.c: 719: {
  7090                           ;teris_16f886.c: 720: if(matrix88->data[y + row][x + col] == 1)
  7091  122E  0850               	movf	is_valid@col,w
  7092  122F  074E               	addwf	is_valid@x,w
  7093  1230  0749               	addwf	is_valid@matrix88,w
  7094  1231  00CA               	movwf	??_is_valid
  7095  1232  084F               	movf	is_valid@row,w
  7096  1233  0746               	addwf	is_valid@y,w
  7097  1234  00CB               	movwf	??_is_valid+1
  7098  1235  3002               	movlw	2
  7099  1236                     u7225:	
  7100  1236  1003               	clrc
  7101  1237  0DCB               	rlf	??_is_valid+1,f
  7102  1238  3EFF               	addlw	-1
  7103  1239  1D03               	skipz
  7104  123A  2A36               	goto	u7225
  7105  123B  1003               	clrc
  7106  123C  0D4B               	rlf	??_is_valid+1,w
  7107  123D  074A               	addwf	??_is_valid,w
  7108  123E  00CC               	movwf	??_is_valid+2
  7109  123F  084C               	movf	??_is_valid+2,w
  7110  1240  0084               	movwf	4
  7111  1241  1783               	bsf	3,7	;select IRP bank2
  7112  1242  0300               	decf	0,w
  7113  1243  1D03               	btfss	3,2
  7114  1244  2A65               	goto	l5123
  7115                           
  7116                           ;teris_16f886.c: 721: {
  7117                           ;teris_16f886.c: 722: debug_line(0, "not valid1");
  7118  1245  3043               	movlw	low (STR_34| (0+32768))
  7119  1246  00F3               	movwf	debug_line@str
  7120  1247  308D               	movlw	high (STR_34| (0+32768))
  7121  1248  00F4               	movwf	debug_line@str+1
  7122  1249  3000               	movlw	0
  7123  124A  160A  158A  209D  160A  118A  	fcall	_debug_line
  7124                           
  7125                           ;teris_16f886.c: 723: debug_int2(0, "row = %d, col = %d", row, col);
  7126  124F  3096               	movlw	low ((STR_30+5)| (0+32768))
  7127  1250  1283               	bcf	3,5	;RP0=0, select bank0
  7128  1251  1303               	bcf	3,6	;RP1=0, select bank0
  7129  1252  00BF               	movwf	debug_int2@f
  7130  1253  308A               	movlw	high ((STR_30+5)| (0+32768))
  7131  1254  00C0               	movwf	debug_int2@f+1
  7132  1255  084F               	movf	is_valid@row,w
  7133  1256  00C1               	movwf	debug_int2@i1
  7134  1257  01C2               	clrf	debug_int2@i1+1
  7135  1258  1BC1               	btfsc	debug_int2@i1,7
  7136  1259  03C2               	decf	debug_int2@i1+1,f
  7137  125A  0850               	movf	is_valid@col,w
  7138  125B  00C3               	movwf	debug_int2@i2
  7139  125C  01C4               	clrf	debug_int2@i2+1
  7140  125D  1BC3               	btfsc	debug_int2@i2,7
  7141  125E  03C4               	decf	debug_int2@i2+1,f
  7142  125F  3000               	movlw	0
  7143  1260  160A  158A  2174   	fcall	_debug_int2
  7144                           
  7145                           ;teris_16f886.c: 724: return 0;
  7146  1263  3000               	movlw	0
  7147  1264  0008               	return
  7148  1265                     l5123:	
  7149                           
  7150                           ;teris_16f886.c: 725: }
  7151                           ;teris_16f886.c: 727: if(( x + col < 0) || (x + col >= 8))
  7152  1265  1283               	bcf	3,5	;RP0=0, select bank0
  7153  1266  1303               	bcf	3,6	;RP1=0, select bank0
  7154  1267  084E               	movf	is_valid@x,w
  7155  1268  0750               	addwf	is_valid@col,w
  7156  1269  00CA               	movwf	??_is_valid
  7157  126A  01CB               	clrf	??_is_valid+1
  7158  126B  1803               	skipnc
  7159  126C  0ACB               	incf	??_is_valid+1,f
  7160  126D  1BCE               	btfsc	is_valid@x,7
  7161  126E  03CB               	decf	??_is_valid+1,f
  7162  126F  1BD0               	btfsc	is_valid@col,7
  7163  1270  03CB               	decf	??_is_valid+1,f
  7164  1271  1283               	bcf	3,5	;RP0=0, select bank0
  7165  1272  1303               	bcf	3,6	;RP1=0, select bank0
  7166  1273  1BCB               	btfsc	??_is_valid+1,7
  7167  1274  2A8C               	goto	l5127
  7168  1275  084E               	movf	is_valid@x,w
  7169  1276  0750               	addwf	is_valid@col,w
  7170  1277  00CA               	movwf	??_is_valid
  7171  1278  01CB               	clrf	??_is_valid+1
  7172  1279  1803               	skipnc
  7173  127A  0ACB               	incf	??_is_valid+1,f
  7174  127B  1BCE               	btfsc	is_valid@x,7
  7175  127C  03CB               	decf	??_is_valid+1,f
  7176  127D  1BD0               	btfsc	is_valid@col,7
  7177  127E  03CB               	decf	??_is_valid+1,f
  7178  127F  1283               	bcf	3,5	;RP0=0, select bank0
  7179  1280  1303               	bcf	3,6	;RP1=0, select bank0
  7180  1281  084B               	movf	??_is_valid+1,w
  7181  1282  3A80               	xorlw	128
  7182  1283  00FF               	movwf	127
  7183  1284  3080               	movlw	128
  7184  1285  027F               	subwf	127,w
  7185  1286  1D03               	skipz
  7186  1287  2A8A               	goto	u7275
  7187  1288  3008               	movlw	8
  7188  1289  024A               	subwf	??_is_valid,w
  7189  128A                     u7275:	
  7190  128A  1C03               	skipc
  7191  128B  2AAC               	goto	l5133
  7192  128C                     l5127:	
  7193                           
  7194                           ;teris_16f886.c: 728: {
  7195                           ;teris_16f886.c: 729: debug_line(0, "not valid2");
  7196  128C  304E               	movlw	low (STR_36| (0+32768))
  7197  128D  00F3               	movwf	debug_line@str
  7198  128E  308D               	movlw	high (STR_36| (0+32768))
  7199  128F  00F4               	movwf	debug_line@str+1
  7200  1290  3000               	movlw	0
  7201  1291  160A  158A  209D  160A  118A  	fcall	_debug_line
  7202                           
  7203                           ;teris_16f886.c: 730: debug_int2(0, "row = %d, col = %d", row, col);
  7204  1296  3096               	movlw	low ((STR_30+5)| (0+32768))
  7205  1297  1283               	bcf	3,5	;RP0=0, select bank0
  7206  1298  1303               	bcf	3,6	;RP1=0, select bank0
  7207  1299  00BF               	movwf	debug_int2@f
  7208  129A  308A               	movlw	high ((STR_30+5)| (0+32768))
  7209  129B  00C0               	movwf	debug_int2@f+1
  7210  129C  084F               	movf	is_valid@row,w
  7211  129D  00C1               	movwf	debug_int2@i1
  7212  129E  01C2               	clrf	debug_int2@i1+1
  7213  129F  1BC1               	btfsc	debug_int2@i1,7
  7214  12A0  03C2               	decf	debug_int2@i1+1,f
  7215  12A1  0850               	movf	is_valid@col,w
  7216  12A2  00C3               	movwf	debug_int2@i2
  7217  12A3  01C4               	clrf	debug_int2@i2+1
  7218  12A4  1BC3               	btfsc	debug_int2@i2,7
  7219  12A5  03C4               	decf	debug_int2@i2+1,f
  7220  12A6  3000               	movlw	0
  7221  12A7  160A  158A  2174   	fcall	_debug_int2
  7222                           
  7223                           ;teris_16f886.c: 731: return 0;
  7224  12AA  3000               	movlw	0
  7225  12AB  0008               	return
  7226  12AC                     l5133:	
  7227                           
  7228                           ;teris_16f886.c: 732: }
  7229                           ;teris_16f886.c: 733: if((y + row) > (8 - 1))
  7230  12AC  1283               	bcf	3,5	;RP0=0, select bank0
  7231  12AD  1303               	bcf	3,6	;RP1=0, select bank0
  7232  12AE  0846               	movf	is_valid@y,w
  7233  12AF  074F               	addwf	is_valid@row,w
  7234  12B0  00CA               	movwf	??_is_valid
  7235  12B1  01CB               	clrf	??_is_valid+1
  7236  12B2  1803               	skipnc
  7237  12B3  0ACB               	incf	??_is_valid+1,f
  7238  12B4  1BC6               	btfsc	is_valid@y,7
  7239  12B5  03CB               	decf	??_is_valid+1,f
  7240  12B6  1BCF               	btfsc	is_valid@row,7
  7241  12B7  03CB               	decf	??_is_valid+1,f
  7242  12B8  1283               	bcf	3,5	;RP0=0, select bank0
  7243  12B9  1303               	bcf	3,6	;RP1=0, select bank0
  7244  12BA  084B               	movf	??_is_valid+1,w
  7245  12BB  3A80               	xorlw	128
  7246  12BC  00FF               	movwf	127
  7247  12BD  3080               	movlw	128
  7248  12BE  027F               	subwf	127,w
  7249  12BF  1D03               	skipz
  7250  12C0  2AC3               	goto	u7295
  7251  12C1  3008               	movlw	8
  7252  12C2  024A               	subwf	??_is_valid,w
  7253  12C3                     u7295:	
  7254  12C3  1C03               	skipc
  7255  12C4  2AE5               	goto	l5141
  7256                           
  7257                           ;teris_16f886.c: 734: {
  7258                           ;teris_16f886.c: 735: debug_line(0, "not valid3");
  7259  12C5  3059               	movlw	low (STR_38| (0+32768))
  7260  12C6  00F3               	movwf	debug_line@str
  7261  12C7  308D               	movlw	high (STR_38| (0+32768))
  7262  12C8  00F4               	movwf	debug_line@str+1
  7263  12C9  3000               	movlw	0
  7264  12CA  160A  158A  209D  160A  118A  	fcall	_debug_line
  7265                           
  7266                           ;teris_16f886.c: 736: debug_int2(0, "row = %d, col = %d", row, col);
  7267  12CF  3096               	movlw	low ((STR_30+5)| (0+32768))
  7268  12D0  1283               	bcf	3,5	;RP0=0, select bank0
  7269  12D1  1303               	bcf	3,6	;RP1=0, select bank0
  7270  12D2  00BF               	movwf	debug_int2@f
  7271  12D3  308A               	movlw	high ((STR_30+5)| (0+32768))
  7272  12D4  00C0               	movwf	debug_int2@f+1
  7273  12D5  084F               	movf	is_valid@row,w
  7274  12D6  00C1               	movwf	debug_int2@i1
  7275  12D7  01C2               	clrf	debug_int2@i1+1
  7276  12D8  1BC1               	btfsc	debug_int2@i1,7
  7277  12D9  03C2               	decf	debug_int2@i1+1,f
  7278  12DA  0850               	movf	is_valid@col,w
  7279  12DB  00C3               	movwf	debug_int2@i2
  7280  12DC  01C4               	clrf	debug_int2@i2+1
  7281  12DD  1BC3               	btfsc	debug_int2@i2,7
  7282  12DE  03C4               	decf	debug_int2@i2+1,f
  7283  12DF  3000               	movlw	0
  7284  12E0  160A  158A  2174   	fcall	_debug_int2
  7285                           
  7286                           ;teris_16f886.c: 737: return 0;
  7287  12E3  3000               	movlw	0
  7288  12E4  0008               	return
  7289  12E5                     l5141:	
  7290  12E5  3001               	movlw	1
  7291  12E6  1283               	bcf	3,5	;RP0=0, select bank0
  7292  12E7  1303               	bcf	3,6	;RP1=0, select bank0
  7293  12E8  00CA               	movwf	??_is_valid
  7294  12E9  084A               	movf	??_is_valid,w
  7295  12EA  07D0               	addwf	is_valid@col,f
  7296  12EB  0850               	movf	is_valid@col,w
  7297  12EC  3A80               	xorlw	128
  7298  12ED  3E7C               	addlw	-132
  7299  12EE  1C03               	skipc
  7300  12EF  2A0E               	goto	l5113
  7301  12F0                     l5145:	
  7302  12F0  30FF               	movlw	255
  7303  12F1  00CA               	movwf	??_is_valid
  7304  12F2  084A               	movf	??_is_valid,w
  7305  12F3  07CF               	addwf	is_valid@row,f
  7306  12F4  1FCF               	btfss	is_valid@row,7
  7307  12F5  2A08               	goto	l5107
  7308  12F6                     l5149:	
  7309                           
  7310                           ;teris_16f886.c: 738: }
  7311                           ;teris_16f886.c: 739: }
  7312                           ;teris_16f886.c: 740: }
  7313                           ;teris_16f886.c: 741: }
  7314                           ;teris_16f886.c: 742: debug_line(0, "valid");
  7315  12F6  30AF               	movlw	low (STR_40| (0+32768))
  7316  12F7  00F3               	movwf	debug_line@str
  7317  12F8  308D               	movlw	high (STR_40| (0+32768))
  7318  12F9  00F4               	movwf	debug_line@str+1
  7319  12FA  3000               	movlw	0
  7320  12FB  160A  158A  209D   	fcall	_debug_line
  7321                           
  7322                           ;teris_16f886.c: 743: return 1;
  7323  12FE  3001               	movlw	1
  7324  12FF  0008               	return
  7325  1300                     __end_of_is_valid:	
  7326                           
  7327                           	psect	text16
  7328  0EA9                     __ptext16:	
  7329 ;; *************** function _get_holes_after_merge *****************
  7330 ;; Defined at:
  7331 ;;		line 943 in file "teris_16f886.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;  matrix          1    wreg     PTR struct .
  7334 ;;		 -> find_best_solution@temp_matrix88(64), 
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;  matrix          1   44[BANK0 ] PTR struct .
  7337 ;;		 -> find_best_solution@temp_matrix88(64), 
  7338 ;;  row             1   47[BANK0 ] char 
  7339 ;;  col             1   46[BANK0 ] char 
  7340 ;;  start           1   45[BANK0 ] char 
  7341 ;;  stop            1   43[BANK0 ] char 
  7342 ;;  num_hole        1   42[BANK0 ] unsigned char 
  7343 ;; Return value:  Size  Location     Type
  7344 ;;                  1    wreg      unsigned char 
  7345 ;; Registers used:
  7346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7347 ;; Tracked objects:
  7348 ;;		On entry : 0/0
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7352 ;;      Params:         0       0       0       0       0
  7353 ;;      Locals:         0       6       0       0       0
  7354 ;;      Temps:          0       6       0       0       0
  7355 ;;      Totals:         0      12       0       0       0
  7356 ;;Total ram usage:       12 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; Hardware stack levels required when called:    3
  7359 ;; This function calls:
  7360 ;;		_debug_int1
  7361 ;; This function is called by:
  7362 ;;		_find_best_solution
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           
  7367                           ;psect for function _get_holes_after_merge
  7368  0EA9                     _get_holes_after_merge:	
  7369                           
  7370                           ;incstack = 0
  7371                           ; Regs used in _get_holes_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  7372                           ;get_holes_after_merge@matrix stored from wreg
  7373  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  7374  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  7375  0EAB  00CC               	movwf	get_holes_after_merge@matrix
  7376                           
  7377                           ;teris_16f886.c: 945: int8_t start = -1;
  7378  0EAC  01CD               	clrf	get_holes_after_merge@start
  7379  0EAD  03CD               	decf	get_holes_after_merge@start,f
  7380                           
  7381                           ;teris_16f886.c: 946: int8_t stop = -1;
  7382  0EAE  01CB               	clrf	get_holes_after_merge@stop
  7383  0EAF  03CB               	decf	get_holes_after_merge@stop,f
  7384                           
  7385                           ;teris_16f886.c: 947: uint8_t num_hole = 0;
  7386  0EB0  01CA               	clrf	get_holes_after_merge@num_hole
  7387                           
  7388                           ;teris_16f886.c: 948: for(int8_t col = 0; col < 8; col++)
  7389  0EB1  01CE               	clrf	get_holes_after_merge@col
  7390  0EB2  084E               	movf	get_holes_after_merge@col,w
  7391  0EB3  3A80               	xorlw	128
  7392  0EB4  3E78               	addlw	-136
  7393  0EB5  1803               	btfsc	3,0
  7394  0EB6  2FED               	goto	l5409
  7395  0EB7                     l5343:	
  7396                           
  7397                           ;teris_16f886.c: 949: {
  7398                           ;teris_16f886.c: 950: start = stop = -1;
  7399  0EB7  30FF               	movlw	255
  7400  0EB8  00CB               	movwf	get_holes_after_merge@stop
  7401  0EB9  00C4               	movwf	??_get_holes_after_merge
  7402  0EBA  0844               	movf	??_get_holes_after_merge,w
  7403  0EBB  00CD               	movwf	get_holes_after_merge@start
  7404                           
  7405                           ;teris_16f886.c: 951: for(int8_t row = 0; row < 8; row++)
  7406  0EBC  01CF               	clrf	get_holes_after_merge@row
  7407  0EBD  084F               	movf	get_holes_after_merge@row,w
  7408  0EBE  3A80               	xorlw	128
  7409  0EBF  3E78               	addlw	-136
  7410  0EC0  1803               	btfsc	3,0
  7411  0EC1  2F84               	goto	l420
  7412  0EC2                     l5351:	
  7413                           
  7414                           ;teris_16f886.c: 952: {
  7415                           ;teris_16f886.c: 953: if(col == 0)
  7416  0EC2  084E               	movf	get_holes_after_merge@col,w
  7417  0EC3  1D03               	btfss	3,2
  7418  0EC4  2EE7               	goto	l5361
  7419                           
  7420                           ;teris_16f886.c: 954: {
  7421                           ;teris_16f886.c: 955: if((matrix->data[row][col] == 0) && (matrix->data[row][col + 1] ==
      +                           1))
  7422  0EC5  084F               	movf	get_holes_after_merge@row,w
  7423  0EC6  00C4               	movwf	??_get_holes_after_merge
  7424  0EC7  3002               	movlw	2
  7425  0EC8                     u7735:	
  7426  0EC8  1003               	clrc
  7427  0EC9  0DC4               	rlf	??_get_holes_after_merge,f
  7428  0ECA  3EFF               	addlw	-1
  7429  0ECB  1D03               	skipz
  7430  0ECC  2EC8               	goto	u7735
  7431  0ECD  1003               	clrc
  7432  0ECE  0D44               	rlf	??_get_holes_after_merge,w
  7433  0ECF  074C               	addwf	get_holes_after_merge@matrix,w
  7434  0ED0  00C5               	movwf	??_get_holes_after_merge+1
  7435  0ED1  084E               	movf	get_holes_after_merge@col,w
  7436  0ED2  0745               	addwf	??_get_holes_after_merge+1,w
  7437  0ED3  00C6               	movwf	??_get_holes_after_merge+2
  7438  0ED4  0846               	movf	??_get_holes_after_merge+2,w
  7439  0ED5  0084               	movwf	4
  7440  0ED6  1383               	bcf	3,7	;select IRP bank0
  7441  0ED7  0800               	movf	0,w
  7442  0ED8  1D03               	btfss	3,2
  7443  0ED9  2F53               	goto	l5381
  7444  0EDA  084E               	movf	get_holes_after_merge@col,w
  7445  0EDB  3E01               	addlw	1
  7446  0EDC  074C               	addwf	get_holes_after_merge@matrix,w
  7447  0EDD  00C4               	movwf	??_get_holes_after_merge
  7448  0EDE  084F               	movf	get_holes_after_merge@row,w
  7449  0EDF  00C5               	movwf	??_get_holes_after_merge+1
  7450  0EE0  3002               	movlw	2
  7451  0EE1                     u7755:	
  7452  0EE1  1003               	clrc
  7453  0EE2  0DC5               	rlf	??_get_holes_after_merge+1,f
  7454  0EE3  3EFF               	addlw	-1
  7455  0EE4  1D03               	skipz
  7456  0EE5  2EE1               	goto	u7755
  7457  0EE6  2F43               	goto	L13
  7458  0EE7                     l5361:	
  7459                           ;teris_16f886.c: 960: }
  7460                           ;teris_16f886.c: 961: }
  7461                           ;teris_16f886.c: 962: }
  7462                           
  7463                           ;teris_16f886.c: 958: {
  7464                           ;teris_16f886.c: 959: start = row;
  7465                           
  7466                           ;teris_16f886.c: 956: {
  7467                           ;teris_16f886.c: 957: if(start == -1)
  7468                           
  7469                           
  7470                           ;teris_16f886.c: 963: else if(col == 8 - 1)
  7471  0EE7  3007               	movlw	7
  7472  0EE8  064E               	xorwf	get_holes_after_merge@col,w
  7473  0EE9  1D03               	btfss	3,2
  7474  0EEA  2F0D               	goto	l5371
  7475                           
  7476                           ;teris_16f886.c: 964: {
  7477                           ;teris_16f886.c: 965: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] ==
      +                           1))
  7478  0EEB  084F               	movf	get_holes_after_merge@row,w
  7479  0EEC  00C4               	movwf	??_get_holes_after_merge
  7480  0EED  3002               	movlw	2
  7481  0EEE                     u7795:	
  7482  0EEE  1003               	clrc
  7483  0EEF  0DC4               	rlf	??_get_holes_after_merge,f
  7484  0EF0  3EFF               	addlw	-1
  7485  0EF1  1D03               	skipz
  7486  0EF2  2EEE               	goto	u7795
  7487  0EF3  1003               	clrc
  7488  0EF4  0D44               	rlf	??_get_holes_after_merge,w
  7489  0EF5  074C               	addwf	get_holes_after_merge@matrix,w
  7490  0EF6  00C5               	movwf	??_get_holes_after_merge+1
  7491  0EF7  084E               	movf	get_holes_after_merge@col,w
  7492  0EF8  0745               	addwf	??_get_holes_after_merge+1,w
  7493  0EF9  00C6               	movwf	??_get_holes_after_merge+2
  7494  0EFA  0846               	movf	??_get_holes_after_merge+2,w
  7495  0EFB  0084               	movwf	4
  7496  0EFC  1383               	bcf	3,7	;select IRP bank0
  7497  0EFD  0800               	movf	0,w
  7498  0EFE  1D03               	btfss	3,2
  7499  0EFF  2F53               	goto	l5381
  7500  0F00  084E               	movf	get_holes_after_merge@col,w
  7501  0F01  3EFF               	addlw	255
  7502  0F02  074C               	addwf	get_holes_after_merge@matrix,w
  7503  0F03  00C4               	movwf	??_get_holes_after_merge
  7504  0F04  084F               	movf	get_holes_after_merge@row,w
  7505  0F05  00C5               	movwf	??_get_holes_after_merge+1
  7506  0F06  3002               	movlw	2
  7507  0F07                     u7815:	
  7508  0F07  1003               	clrc
  7509  0F08  0DC5               	rlf	??_get_holes_after_merge+1,f
  7510  0F09  3EFF               	addlw	-1
  7511  0F0A  1D03               	skipz
  7512  0F0B  2F07               	goto	u7815
  7513  0F0C  2F43               	goto	L13
  7514  0F0D                     l5371:	
  7515                           ;teris_16f886.c: 970: }
  7516                           ;teris_16f886.c: 971: }
  7517                           ;teris_16f886.c: 972: }
  7518                           
  7519                           ;teris_16f886.c: 968: {
  7520                           ;teris_16f886.c: 969: start = row;
  7521                           
  7522                           ;teris_16f886.c: 966: {
  7523                           ;teris_16f886.c: 967: if(start == -1)
  7524                           
  7525                           
  7526                           ;teris_16f886.c: 973: else
  7527                           ;teris_16f886.c: 974: {
  7528                           ;teris_16f886.c: 975: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] ==
      +                           1) && (matrix->data[row][col + 1] == 1))
  7529  0F0D  084F               	movf	get_holes_after_merge@row,w
  7530  0F0E  00C4               	movwf	??_get_holes_after_merge
  7531  0F0F  3002               	movlw	2
  7532  0F10                     u7845:	
  7533  0F10  1003               	clrc
  7534  0F11  0DC4               	rlf	??_get_holes_after_merge,f
  7535  0F12  3EFF               	addlw	-1
  7536  0F13  1D03               	skipz
  7537  0F14  2F10               	goto	u7845
  7538  0F15  1003               	clrc
  7539  0F16  0D44               	rlf	??_get_holes_after_merge,w
  7540  0F17  074C               	addwf	get_holes_after_merge@matrix,w
  7541  0F18  00C5               	movwf	??_get_holes_after_merge+1
  7542  0F19  084E               	movf	get_holes_after_merge@col,w
  7543  0F1A  0745               	addwf	??_get_holes_after_merge+1,w
  7544  0F1B  00C6               	movwf	??_get_holes_after_merge+2
  7545  0F1C  0846               	movf	??_get_holes_after_merge+2,w
  7546  0F1D  0084               	movwf	4
  7547  0F1E  1383               	bcf	3,7	;select IRP bank0
  7548  0F1F  0800               	movf	0,w
  7549  0F20  1D03               	btfss	3,2
  7550  0F21  2F53               	goto	l5381
  7551  0F22  084E               	movf	get_holes_after_merge@col,w
  7552  0F23  3EFF               	addlw	255
  7553  0F24  074C               	addwf	get_holes_after_merge@matrix,w
  7554  0F25  00C4               	movwf	??_get_holes_after_merge
  7555  0F26  084F               	movf	get_holes_after_merge@row,w
  7556  0F27  00C5               	movwf	??_get_holes_after_merge+1
  7557  0F28  3002               	movlw	2
  7558  0F29                     u7865:	
  7559  0F29  1003               	clrc
  7560  0F2A  0DC5               	rlf	??_get_holes_after_merge+1,f
  7561  0F2B  3EFF               	addlw	-1
  7562  0F2C  1D03               	skipz
  7563  0F2D  2F29               	goto	u7865
  7564  0F2E  1003               	clrc
  7565  0F2F  0D45               	rlf	??_get_holes_after_merge+1,w
  7566  0F30  0744               	addwf	??_get_holes_after_merge,w
  7567  0F31  00C6               	movwf	??_get_holes_after_merge+2
  7568  0F32  0846               	movf	??_get_holes_after_merge+2,w
  7569  0F33  0084               	movwf	4
  7570  0F34  0300               	decf	0,w
  7571  0F35  1D03               	btfss	3,2
  7572  0F36  2F53               	goto	l5381
  7573  0F37  084E               	movf	get_holes_after_merge@col,w
  7574  0F38  3E01               	addlw	1
  7575  0F39  074C               	addwf	get_holes_after_merge@matrix,w
  7576  0F3A  00C4               	movwf	??_get_holes_after_merge
  7577  0F3B  084F               	movf	get_holes_after_merge@row,w
  7578  0F3C  00C5               	movwf	??_get_holes_after_merge+1
  7579  0F3D  3002               	movlw	2
  7580  0F3E                     u7885:	
  7581  0F3E  1003               	clrc
  7582  0F3F  0DC5               	rlf	??_get_holes_after_merge+1,f
  7583  0F40  3EFF               	addlw	-1
  7584  0F41  1D03               	skipz
  7585  0F42  2F3E               	goto	u7885
  7586  0F43                     L13:	
  7587  0F43  1003               	clrc
  7588  0F44  0D45               	rlf	??_get_holes_after_merge+1,w
  7589  0F45  0744               	addwf	??_get_holes_after_merge,w
  7590  0F46  00C6               	movwf	??_get_holes_after_merge+2
  7591  0F47  0846               	movf	??_get_holes_after_merge+2,w
  7592  0F48  0084               	movwf	4
  7593  0F49  0300               	decf	0,w
  7594  0F4A  1D03               	btfss	3,2
  7595  0F4B  2F53               	goto	l5381
  7596                           
  7597                           ;teris_16f886.c: 976: {
  7598                           ;teris_16f886.c: 977: if(start == -1)
  7599  0F4C  0A4D               	incf	get_holes_after_merge@start,w
  7600  0F4D  1D03               	btfss	3,2
  7601  0F4E  2F53               	goto	l5381
  7602                           
  7603                           ;teris_16f886.c: 978: {
  7604                           ;teris_16f886.c: 979: start = row;
  7605  0F4F  084F               	movf	get_holes_after_merge@row,w
  7606  0F50  00C4               	movwf	??_get_holes_after_merge
  7607  0F51  0844               	movf	??_get_holes_after_merge,w
  7608  0F52  00CD               	movwf	get_holes_after_merge@start
  7609  0F53                     l5381:	
  7610                           
  7611                           ;teris_16f886.c: 980: }
  7612                           ;teris_16f886.c: 981: }
  7613                           ;teris_16f886.c: 982: }
  7614                           ;teris_16f886.c: 983: if(start >= 0)
  7615  0F53  1BCD               	btfsc	get_holes_after_merge@start,7
  7616  0F54  2F7B               	goto	l431
  7617                           
  7618                           ;teris_16f886.c: 984: {
  7619                           ;teris_16f886.c: 985: if(row == 8 - 1)
  7620  0F55  3007               	movlw	7
  7621  0F56  064F               	xorwf	get_holes_after_merge@row,w
  7622  0F57  1D03               	btfss	3,2
  7623  0F58  2F5E               	goto	l5389
  7624                           
  7625                           ;teris_16f886.c: 986: {
  7626                           ;teris_16f886.c: 987: if(stop == -1)
  7627  0F59  0A4B               	incf	get_holes_after_merge@stop,w
  7628  0F5A  1D03               	btfss	3,2
  7629  0F5B  2F7B               	goto	l431
  7630                           
  7631                           ;teris_16f886.c: 988: {
  7632                           ;teris_16f886.c: 989: stop = 8;
  7633  0F5C  3008               	movlw	8
  7634  0F5D  2F78               	goto	L12
  7635  0F5E                     l5389:	
  7636                           ;teris_16f886.c: 990: }
  7637                           ;teris_16f886.c: 991: }
  7638                           
  7639                           
  7640                           ;teris_16f886.c: 992: else if(matrix->data[row + 1][col] == 1)
  7641  0F5E  084F               	movf	get_holes_after_merge@row,w
  7642  0F5F  00C4               	movwf	??_get_holes_after_merge
  7643  0F60  3002               	movlw	2
  7644  0F61                     u7945:	
  7645  0F61  1003               	clrc
  7646  0F62  0DC4               	rlf	??_get_holes_after_merge,f
  7647  0F63  3EFF               	addlw	-1
  7648  0F64  1D03               	skipz
  7649  0F65  2F61               	goto	u7945
  7650  0F66  1003               	clrc
  7651  0F67  0D44               	rlf	??_get_holes_after_merge,w
  7652  0F68  3E08               	addlw	8
  7653  0F69  074C               	addwf	get_holes_after_merge@matrix,w
  7654  0F6A  00C5               	movwf	??_get_holes_after_merge+1
  7655  0F6B  084E               	movf	get_holes_after_merge@col,w
  7656  0F6C  0745               	addwf	??_get_holes_after_merge+1,w
  7657  0F6D  00C6               	movwf	??_get_holes_after_merge+2
  7658  0F6E  0846               	movf	??_get_holes_after_merge+2,w
  7659  0F6F  0084               	movwf	4
  7660  0F70  0300               	decf	0,w
  7661  0F71  1D03               	btfss	3,2
  7662  0F72  2F7B               	goto	l431
  7663                           
  7664                           ;teris_16f886.c: 993: {
  7665                           ;teris_16f886.c: 994: if(stop == -1)
  7666  0F73  0A4B               	incf	get_holes_after_merge@stop,w
  7667  0F74  1D03               	btfss	3,2
  7668  0F75  2F7B               	goto	l431
  7669                           
  7670                           ;teris_16f886.c: 995: {
  7671                           ;teris_16f886.c: 996: stop = row + 1;
  7672  0F76  084F               	movf	get_holes_after_merge@row,w
  7673  0F77  3E01               	addlw	1
  7674  0F78                     L12:	
  7675  0F78  00C4               	movwf	??_get_holes_after_merge
  7676  0F79  0844               	movf	??_get_holes_after_merge,w
  7677  0F7A  00CB               	movwf	get_holes_after_merge@stop
  7678  0F7B                     l431:	
  7679  0F7B  3001               	movlw	1
  7680  0F7C  00C4               	movwf	??_get_holes_after_merge
  7681  0F7D  0844               	movf	??_get_holes_after_merge,w
  7682  0F7E  07CF               	addwf	get_holes_after_merge@row,f
  7683  0F7F  084F               	movf	get_holes_after_merge@row,w
  7684  0F80  3A80               	xorlw	128
  7685  0F81  3E78               	addlw	-136
  7686  0F82  1C03               	skipc
  7687  0F83  2EC2               	goto	l5351
  7688  0F84                     l420:	
  7689                           
  7690                           ;teris_16f886.c: 997: }
  7691                           ;teris_16f886.c: 998: }
  7692                           ;teris_16f886.c: 999: }
  7693                           ;teris_16f886.c: 1001: }
  7694                           ;teris_16f886.c: 1002: if((start >= 0) && (stop >= 0) && (stop - start >= 3))
  7695  0F84  1FCD               	btfss	get_holes_after_merge@start,7
  7696  0F85  1BCB               	btfsc	get_holes_after_merge@stop,7
  7697  0F86  2FE2               	goto	l5405
  7698  0F87  084D               	movf	get_holes_after_merge@start,w
  7699  0F88  00C4               	movwf	??_get_holes_after_merge
  7700  0F89  01C5               	clrf	??_get_holes_after_merge+1
  7701  0F8A  1BC4               	btfsc	??_get_holes_after_merge,7
  7702  0F8B  03C5               	decf	??_get_holes_after_merge+1,f
  7703  0F8C  09C4               	comf	??_get_holes_after_merge,f
  7704  0F8D  09C5               	comf	??_get_holes_after_merge+1,f
  7705  0F8E  0AC4               	incf	??_get_holes_after_merge,f
  7706  0F8F  1903               	skipnz
  7707  0F90  0AC5               	incf	??_get_holes_after_merge+1,f
  7708  0F91  084B               	movf	get_holes_after_merge@stop,w
  7709  0F92  00C6               	movwf	??_get_holes_after_merge+2
  7710  0F93  01C7               	clrf	??_get_holes_after_merge+3
  7711  0F94  1BC6               	btfsc	??_get_holes_after_merge+2,7
  7712  0F95  03C7               	decf	??_get_holes_after_merge+3,f
  7713  0F96  0844               	movf	??_get_holes_after_merge,w
  7714  0F97  0746               	addwf	??_get_holes_after_merge+2,w
  7715  0F98  00C8               	movwf	??_get_holes_after_merge+4
  7716  0F99  0845               	movf	??_get_holes_after_merge+1,w
  7717  0F9A  1803               	skipnc
  7718  0F9B  0A45               	incf	??_get_holes_after_merge+1,w
  7719  0F9C  0747               	addwf	??_get_holes_after_merge+3,w
  7720  0F9D  00C9               	movwf	??_get_holes_after_merge+5
  7721  0F9E  0849               	movf	??_get_holes_after_merge+5,w
  7722  0F9F  3A80               	xorlw	128
  7723  0FA0  00FF               	movwf	127
  7724  0FA1  3080               	movlw	128
  7725  0FA2  027F               	subwf	127,w
  7726  0FA3  1D03               	skipz
  7727  0FA4  2FA7               	goto	u8005
  7728  0FA5  3003               	movlw	3
  7729  0FA6  0248               	subwf	??_get_holes_after_merge+4,w
  7730  0FA7                     u8005:	
  7731  0FA7  1C03               	skipc
  7732  0FA8  2FE2               	goto	l5405
  7733                           
  7734                           ;teris_16f886.c: 1003: {
  7735                           ;teris_16f886.c: 1004: debug_int1(0, "col = %d", col);
  7736  0FA9  30A0               	movlw	low ((STR_30+15)| (0+32768))
  7737  0FAA  1283               	bcf	3,5	;RP0=0, select bank0
  7738  0FAB  1303               	bcf	3,6	;RP1=0, select bank0
  7739  0FAC  00BF               	movwf	debug_int1@f
  7740  0FAD  308A               	movlw	high ((STR_30+15)| (0+32768))
  7741  0FAE  00C0               	movwf	debug_int1@f+1
  7742  0FAF  084E               	movf	get_holes_after_merge@col,w
  7743  0FB0  00C1               	movwf	debug_int1@i
  7744  0FB1  01C2               	clrf	debug_int1@i+1
  7745  0FB2  1BC1               	btfsc	debug_int1@i,7
  7746  0FB3  03C2               	decf	debug_int1@i+1,f
  7747  0FB4  3000               	movlw	0
  7748  0FB5  160A  158A  214F  120A  158A  	fcall	_debug_int1
  7749                           
  7750                           ;teris_16f886.c: 1005: debug_int1(0, "start = %d", start);
  7751  0FBA  3064               	movlw	low (STR_56| (0+32768))
  7752  0FBB  1283               	bcf	3,5	;RP0=0, select bank0
  7753  0FBC  1303               	bcf	3,6	;RP1=0, select bank0
  7754  0FBD  00BF               	movwf	debug_int1@f
  7755  0FBE  308D               	movlw	high (STR_56| (0+32768))
  7756  0FBF  00C0               	movwf	debug_int1@f+1
  7757  0FC0  084D               	movf	get_holes_after_merge@start,w
  7758  0FC1  00C1               	movwf	debug_int1@i
  7759  0FC2  01C2               	clrf	debug_int1@i+1
  7760  0FC3  1BC1               	btfsc	debug_int1@i,7
  7761  0FC4  03C2               	decf	debug_int1@i+1,f
  7762  0FC5  3000               	movlw	0
  7763  0FC6  160A  158A  214F  120A  158A  	fcall	_debug_int1
  7764                           
  7765                           ;teris_16f886.c: 1006: debug_int1(0, "stop = %d", stop);
  7766  0FCB  308D               	movlw	low (STR_57| (0+32768))
  7767  0FCC  1283               	bcf	3,5	;RP0=0, select bank0
  7768  0FCD  1303               	bcf	3,6	;RP1=0, select bank0
  7769  0FCE  00BF               	movwf	debug_int1@f
  7770  0FCF  308D               	movlw	high (STR_57| (0+32768))
  7771  0FD0  00C0               	movwf	debug_int1@f+1
  7772  0FD1  084B               	movf	get_holes_after_merge@stop,w
  7773  0FD2  00C1               	movwf	debug_int1@i
  7774  0FD3  01C2               	clrf	debug_int1@i+1
  7775  0FD4  1BC1               	btfsc	debug_int1@i,7
  7776  0FD5  03C2               	decf	debug_int1@i+1,f
  7777  0FD6  3000               	movlw	0
  7778  0FD7  160A  158A  214F  120A  158A  	fcall	_debug_int1
  7779                           
  7780                           ;teris_16f886.c: 1007: num_hole++;
  7781  0FDC  3001               	movlw	1
  7782  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  7783  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  7784  0FDF  00C4               	movwf	??_get_holes_after_merge
  7785  0FE0  0844               	movf	??_get_holes_after_merge,w
  7786  0FE1  07CA               	addwf	get_holes_after_merge@num_hole,f
  7787  0FE2                     l5405:	
  7788  0FE2  3001               	movlw	1
  7789  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  7790  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  7791  0FE5  00C4               	movwf	??_get_holes_after_merge
  7792  0FE6  0844               	movf	??_get_holes_after_merge,w
  7793  0FE7  07CE               	addwf	get_holes_after_merge@col,f
  7794  0FE8  084E               	movf	get_holes_after_merge@col,w
  7795  0FE9  3A80               	xorlw	128
  7796  0FEA  3E78               	addlw	-136
  7797  0FEB  1C03               	skipc
  7798  0FEC  2EB7               	goto	l5343
  7799  0FED                     l5409:	
  7800                           
  7801                           ;teris_16f886.c: 1008: }
  7802                           ;teris_16f886.c: 1009: }
  7803                           ;teris_16f886.c: 1010: debug_int1(1, "num_hole = %d", num_hole);
  7804  0FED  300F               	movlw	low (STR_58| (0+32768))
  7805  0FEE  00BF               	movwf	debug_int1@f
  7806  0FEF  308D               	movlw	high (STR_58| (0+32768))
  7807  0FF0  00C0               	movwf	debug_int1@f+1
  7808  0FF1  084A               	movf	get_holes_after_merge@num_hole,w
  7809  0FF2  00C4               	movwf	??_get_holes_after_merge
  7810  0FF3  01C5               	clrf	??_get_holes_after_merge+1
  7811  0FF4  0844               	movf	??_get_holes_after_merge,w
  7812  0FF5  00C1               	movwf	debug_int1@i
  7813  0FF6  0845               	movf	??_get_holes_after_merge+1,w
  7814  0FF7  00C2               	movwf	debug_int1@i+1
  7815  0FF8  3001               	movlw	1
  7816  0FF9  160A  158A  214F   	fcall	_debug_int1
  7817                           
  7818                           ;teris_16f886.c: 1011: return num_hole;
  7819  0FFC  1283               	bcf	3,5	;RP0=0, select bank0
  7820  0FFD  1303               	bcf	3,6	;RP1=0, select bank0
  7821  0FFE  084A               	movf	get_holes_after_merge@num_hole,w
  7822  0FFF  0008               	return
  7823  1000                     __end_of_get_holes_after_merge:	
  7824                           
  7825                           	psect	text17
  7826  10AE                     __ptext17:	
  7827 ;; *************** function _get_high_after_merge *****************
  7828 ;; Defined at:
  7829 ;;		line 926 in file "teris_16f886.c"
  7830 ;; Parameters:    Size  Location     Type
  7831 ;;  y               1    wreg     char 
  7832 ;;  matrix          2   36[BANK0 ] PTR struct .
  7833 ;;		 -> g_matrix44(384), 
  7834 ;; Auto vars:     Size  Location     Type
  7835 ;;  y               1   42[BANK0 ] char 
  7836 ;;  col             1   43[BANK0 ] char 
  7837 ;;  row             1   44[BANK0 ] char 
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  1    wreg      unsigned char 
  7840 ;; Registers used:
  7841 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7847 ;;      Params:         0       2       0       0       0
  7848 ;;      Locals:         0       3       0       0       0
  7849 ;;      Temps:          0       4       0       0       0
  7850 ;;      Totals:         0       9       0       0       0
  7851 ;;Total ram usage:        9 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    3
  7854 ;; This function calls:
  7855 ;;		_debug_int1
  7856 ;;		_debug_line
  7857 ;; This function is called by:
  7858 ;;		_find_best_solution
  7859 ;; This function uses a non-reentrant model
  7860 ;;
  7861                           
  7862                           
  7863                           ;psect for function _get_high_after_merge
  7864  10AE                     _get_high_after_merge:	
  7865                           
  7866                           ;incstack = 0
  7867                           ; Regs used in _get_high_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  7868                           ;get_high_after_merge@y stored from wreg
  7869  10AE  1283               	bcf	3,5	;RP0=0, select bank0
  7870  10AF  1303               	bcf	3,6	;RP1=0, select bank0
  7871  10B0  00CA               	movwf	get_high_after_merge@y
  7872                           
  7873                           ;teris_16f886.c: 928: debug_line(0, "get_high_after_merge");
  7874  10B1  302D               	movlw	low (STR_51| (0+32768))
  7875  10B2  00F3               	movwf	debug_line@str
  7876  10B3  308B               	movlw	high (STR_51| (0+32768))
  7877  10B4  00F4               	movwf	debug_line@str+1
  7878  10B5  3000               	movlw	0
  7879  10B6  160A  158A  209D  160A  118A  	fcall	_debug_line
  7880                           
  7881                           ;teris_16f886.c: 929: for(int8_t row = 0; row < 4; row++)
  7882  10BB  1283               	bcf	3,5	;RP0=0, select bank0
  7883  10BC  1303               	bcf	3,6	;RP1=0, select bank0
  7884  10BD  01CC               	clrf	get_high_after_merge@row
  7885  10BE                     L14:	
  7886  10BE  084C               	movf	get_high_after_merge@row,w
  7887  10BF  3A80               	xorlw	128
  7888  10C0  3E7C               	addlw	-132
  7889  10C1  1803               	btfsc	3,0
  7890  10C2  0008               	return
  7891                           
  7892                           ;teris_16f886.c: 930: {
  7893                           ;teris_16f886.c: 931: for(int8_t col = 0; col < 4; col++)
  7894  10C3  01CB               	clrf	get_high_after_merge@col
  7895  10C4  084B               	movf	get_high_after_merge@col,w
  7896  10C5  3A80               	xorlw	128
  7897  10C6  3E7C               	addlw	-132
  7898  10C7  1803               	btfsc	3,0
  7899  10C8  293D               	goto	l5331
  7900  10C9                     l5319:	
  7901                           
  7902                           ;teris_16f886.c: 932: {
  7903                           ;teris_16f886.c: 933: if(matrix->data[row][col] == 1)
  7904  10C9  084C               	movf	get_high_after_merge@row,w
  7905  10CA  00C6               	movwf	??_get_high_after_merge
  7906  10CB  01C7               	clrf	??_get_high_after_merge+1
  7907  10CC  1003               	clrc
  7908  10CD  0DC6               	rlf	??_get_high_after_merge,f
  7909  10CE  0DC7               	rlf	??_get_high_after_merge+1,f
  7910  10CF  1003               	clrc
  7911  10D0  0DC6               	rlf	??_get_high_after_merge,f
  7912  10D1  0DC7               	rlf	??_get_high_after_merge+1,f
  7913  10D2  0846               	movf	??_get_high_after_merge,w
  7914  10D3  0744               	addwf	get_high_after_merge@matrix,w
  7915  10D4  00C8               	movwf	??_get_high_after_merge+2
  7916  10D5  0847               	movf	??_get_high_after_merge+1,w
  7917  10D6  1803               	skipnc
  7918  10D7  0A47               	incf	??_get_high_after_merge+1,w
  7919  10D8  0745               	addwf	get_high_after_merge@matrix+1,w
  7920  10D9  00C9               	movwf	??_get_high_after_merge+3
  7921  10DA  084B               	movf	get_high_after_merge@col,w
  7922  10DB  0748               	addwf	??_get_high_after_merge+2,w
  7923  10DC  0084               	movwf	4
  7924  10DD  0849               	movf	??_get_high_after_merge+3,w
  7925  10DE  1803               	skipnc
  7926  10DF  0A49               	incf	??_get_high_after_merge+3,w
  7927  10E0  00FF               	movwf	127
  7928  10E1  120A  158A  2000  160A  118A  	fcall	stringtab
  7929  10E6  3A01               	xorlw	1
  7930  10E7  1D03               	skipz
  7931  10E8  2934               	goto	l5327
  7932                           
  7933                           ;teris_16f886.c: 934: {
  7934                           ;teris_16f886.c: 935: debug_int1(0, "y = %d", y);
  7935  10E9  30EA               	movlw	low ((STR_44+8)| (0+32768))
  7936  10EA  00BF               	movwf	debug_int1@f
  7937  10EB  308C               	movlw	high ((STR_44+8)| (0+32768))
  7938  10EC  00C0               	movwf	debug_int1@f+1
  7939  10ED  084A               	movf	get_high_after_merge@y,w
  7940  10EE  00C1               	movwf	debug_int1@i
  7941  10EF  01C2               	clrf	debug_int1@i+1
  7942  10F0  1BC1               	btfsc	debug_int1@i,7
  7943  10F1  03C2               	decf	debug_int1@i+1,f
  7944  10F2  3000               	movlw	0
  7945  10F3  160A  158A  214F  160A  118A  	fcall	_debug_int1
  7946                           
  7947                           ;teris_16f886.c: 936: debug_int1(0, "row = %d", row);
  7948  10F8  3097               	movlw	low (STR_53| (0+32768))
  7949  10F9  1283               	bcf	3,5	;RP0=0, select bank0
  7950  10FA  1303               	bcf	3,6	;RP1=0, select bank0
  7951  10FB  00BF               	movwf	debug_int1@f
  7952  10FC  308D               	movlw	high (STR_53| (0+32768))
  7953  10FD  00C0               	movwf	debug_int1@f+1
  7954  10FE  084C               	movf	get_high_after_merge@row,w
  7955  10FF  00C1               	movwf	debug_int1@i
  7956  1100  01C2               	clrf	debug_int1@i+1
  7957  1101  1BC1               	btfsc	debug_int1@i,7
  7958  1102  03C2               	decf	debug_int1@i+1,f
  7959  1103  3000               	movlw	0
  7960  1104  160A  158A  214F  160A  118A  	fcall	_debug_int1
  7961                           
  7962                           ;teris_16f886.c: 937: debug_int1(1, "height = %d", 8 - y - row);
  7963  1109  3021               	movlw	low ((STR_50+9)| (0+32768))
  7964  110A  1283               	bcf	3,5	;RP0=0, select bank0
  7965  110B  1303               	bcf	3,6	;RP1=0, select bank0
  7966  110C  00BF               	movwf	debug_int1@f
  7967  110D  308B               	movlw	high ((STR_50+9)| (0+32768))
  7968  110E  00C0               	movwf	debug_int1@f+1
  7969  110F  084A               	movf	get_high_after_merge@y,w
  7970  1110  074C               	addwf	get_high_after_merge@row,w
  7971  1111  00C6               	movwf	??_get_high_after_merge
  7972  1112  01C7               	clrf	??_get_high_after_merge+1
  7973  1113  1803               	skipnc
  7974  1114  0AC7               	incf	??_get_high_after_merge+1,f
  7975  1115  1BCA               	btfsc	get_high_after_merge@y,7
  7976  1116  03C7               	decf	??_get_high_after_merge+1,f
  7977  1117  1BCC               	btfsc	get_high_after_merge@row,7
  7978  1118  03C7               	decf	??_get_high_after_merge+1,f
  7979  1119  1283               	bcf	3,5	;RP0=0, select bank0
  7980  111A  1303               	bcf	3,6	;RP1=0, select bank0
  7981  111B  09C6               	comf	??_get_high_after_merge,f
  7982  111C  09C7               	comf	??_get_high_after_merge+1,f
  7983  111D  0AC6               	incf	??_get_high_after_merge,f
  7984  111E  1903               	skipnz
  7985  111F  0AC7               	incf	??_get_high_after_merge+1,f
  7986  1120  0846               	movf	??_get_high_after_merge,w
  7987  1121  3E08               	addlw	8
  7988  1122  00C1               	movwf	debug_int1@i
  7989  1123  0847               	movf	??_get_high_after_merge+1,w
  7990  1124  1803               	skipnc
  7991  1125  3E01               	addlw	1
  7992  1126  3E00               	addlw	0
  7993  1127  00C2               	movwf	debug_int1@i+1
  7994  1128  3001               	movlw	1
  7995  1129  160A  158A  214F   	fcall	_debug_int1
  7996                           
  7997                           ;teris_16f886.c: 938: return (uint8_t)(8 - y - row);
  7998  112C  1283               	bcf	3,5	;RP0=0, select bank0
  7999  112D  1303               	bcf	3,6	;RP1=0, select bank0
  8000  112E  084C               	movf	get_high_after_merge@row,w
  8001  112F  074A               	addwf	get_high_after_merge@y,w
  8002  1130  3AFF               	xorlw	255
  8003  1131  3E01               	addlw	1
  8004  1132  3E08               	addlw	8
  8005  1133  0008               	return
  8006  1134                     l5327:	
  8007  1134  3001               	movlw	1
  8008  1135  00C6               	movwf	??_get_high_after_merge
  8009  1136  0846               	movf	??_get_high_after_merge,w
  8010  1137  07CB               	addwf	get_high_after_merge@col,f
  8011  1138  084B               	movf	get_high_after_merge@col,w
  8012  1139  3A80               	xorlw	128
  8013  113A  3E7C               	addlw	-132
  8014  113B  1C03               	skipc
  8015  113C  28C9               	goto	l5319
  8016  113D                     l5331:	
  8017  113D  3001               	movlw	1
  8018  113E  00C6               	movwf	??_get_high_after_merge
  8019  113F  0846               	movf	??_get_high_after_merge,w
  8020  1140  07CC               	addwf	get_high_after_merge@row,f
  8021  1141  28BE               	goto	L14
  8022  1142                     __end_of_get_high_after_merge:	
  8023                           
  8024                           	psect	text18
  8025  1BE5                     __ptext18:	
  8026 ;; *************** function _get_high *****************
  8027 ;; Defined at:
  8028 ;;		line 914 in file "teris_16f886.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;  matrix          1    wreg     PTR struct .
  8031 ;;		 -> g_matrix88(64), 
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;  matrix          1   38[BANK0 ] PTR struct .
  8034 ;;		 -> g_matrix88(64), 
  8035 ;;  row             1   39[BANK0 ] char 
  8036 ;; Return value:  Size  Location     Type
  8037 ;;                  1    wreg      unsigned char 
  8038 ;; Registers used:
  8039 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8045 ;;      Params:         0       0       0       0       0
  8046 ;;      Locals:         0       2       0       0       0
  8047 ;;      Temps:          0       2       0       0       0
  8048 ;;      Totals:         0       4       0       0       0
  8049 ;;Total ram usage:        4 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    3
  8052 ;; This function calls:
  8053 ;;		_debug_int1
  8054 ;;		_is_row_empty
  8055 ;; This function is called by:
  8056 ;;		_find_best_solution
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           
  8061                           ;psect for function _get_high
  8062  1BE5                     _get_high:	
  8063                           
  8064                           ;incstack = 0
  8065                           ; Regs used in _get_high: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8066                           ;get_high@matrix stored from wreg
  8067  1BE5  1283               	bcf	3,5	;RP0=0, select bank0
  8068  1BE6  1303               	bcf	3,6	;RP1=0, select bank0
  8069  1BE7  00C6               	movwf	get_high@matrix
  8070                           
  8071                           ;teris_16f886.c: 916: for(int8_t row = 8 - 1; row >= 0; row--)
  8072  1BE8  3007               	movlw	7
  8073  1BE9  00C4               	movwf	??_get_high
  8074  1BEA  0844               	movf	??_get_high,w
  8075  1BEB  00C7               	movwf	get_high@row
  8076  1BEC  1BC7               	btfsc	get_high@row,7
  8077  1BED  2C2C               	goto	l5301
  8078  1BEE                     l5289:	
  8079                           
  8080                           ;teris_16f886.c: 917: {
  8081                           ;teris_16f886.c: 918: if(is_row_empty(matrix, row) == 1)
  8082  1BEE  0847               	movf	get_high@row,w
  8083  1BEF  00C4               	movwf	??_get_high
  8084  1BF0  0844               	movf	??_get_high,w
  8085  1BF1  00F0               	movwf	is_row_empty@row
  8086  1BF2  0846               	movf	get_high@matrix,w
  8087  1BF3  160A  118A  2001  160A  158A  	fcall	_is_row_empty
  8088  1BF8  3A01               	xorlw	1
  8089  1BF9  1D03               	skipz
  8090  1BFA  2C24               	goto	l5297
  8091                           
  8092                           ;teris_16f886.c: 919: {
  8093                           ;teris_16f886.c: 920: debug_int1(0, "get_high height = %d", 8 - row - 1);
  8094  1BFB  3018               	movlw	low (STR_50| (0+32768))
  8095  1BFC  1283               	bcf	3,5	;RP0=0, select bank0
  8096  1BFD  1303               	bcf	3,6	;RP1=0, select bank0
  8097  1BFE  00BF               	movwf	debug_int1@f
  8098  1BFF  308B               	movlw	high (STR_50| (0+32768))
  8099  1C00  00C0               	movwf	debug_int1@f+1
  8100  1C01  3001               	movlw	1
  8101  1C02  0747               	addwf	get_high@row,w
  8102  1C03  00C4               	movwf	??_get_high
  8103  1C04  01C5               	clrf	??_get_high+1
  8104  1C05  1803               	skipnc
  8105  1C06  0AC5               	incf	??_get_high+1,f
  8106  1C07  1BC7               	btfsc	get_high@row,7
  8107  1C08  03C5               	decf	??_get_high+1,f
  8108  1C09  1283               	bcf	3,5	;RP0=0, select bank0
  8109  1C0A  1303               	bcf	3,6	;RP1=0, select bank0
  8110  1C0B  09C4               	comf	??_get_high,f
  8111  1C0C  09C5               	comf	??_get_high+1,f
  8112  1C0D  0AC4               	incf	??_get_high,f
  8113  1C0E  1903               	skipnz
  8114  1C0F  0AC5               	incf	??_get_high+1,f
  8115  1C10  0844               	movf	??_get_high,w
  8116  1C11  3E08               	addlw	8
  8117  1C12  00C1               	movwf	debug_int1@i
  8118  1C13  0845               	movf	??_get_high+1,w
  8119  1C14  1803               	skipnc
  8120  1C15  3E01               	addlw	1
  8121  1C16  3E00               	addlw	0
  8122  1C17  00C2               	movwf	debug_int1@i+1
  8123  1C18  3000               	movlw	0
  8124  1C19  160A  158A  214F   	fcall	_debug_int1
  8125                           
  8126                           ;teris_16f886.c: 921: return (uint8_t)(8 - row - 1);
  8127  1C1C  1283               	bcf	3,5	;RP0=0, select bank0
  8128  1C1D  1303               	bcf	3,6	;RP1=0, select bank0
  8129  1C1E  0847               	movf	get_high@row,w
  8130  1C1F  3E01               	addlw	1
  8131  1C20  3AFF               	xorlw	255
  8132  1C21  3E01               	addlw	1
  8133  1C22  3E08               	addlw	8
  8134  1C23  0008               	return
  8135  1C24                     l5297:	
  8136  1C24  30FF               	movlw	255
  8137  1C25  1283               	bcf	3,5	;RP0=0, select bank0
  8138  1C26  1303               	bcf	3,6	;RP1=0, select bank0
  8139  1C27  00C4               	movwf	??_get_high
  8140  1C28  0844               	movf	??_get_high,w
  8141  1C29  07C7               	addwf	get_high@row,f
  8142  1C2A  1FC7               	btfss	get_high@row,7
  8143  1C2B  2BEE               	goto	l5289
  8144  1C2C                     l5301:	
  8145                           
  8146                           ;teris_16f886.c: 922: }
  8147                           ;teris_16f886.c: 923: }
  8148                           ;teris_16f886.c: 924: return 8;
  8149  1C2C  3008               	movlw	8
  8150  1C2D  0008               	return
  8151  1C2E                     __end_of_get_high:	
  8152                           
  8153                           	psect	text19
  8154  1001                     __ptext19:	
  8155 ;; *************** function _is_row_empty *****************
  8156 ;; Defined at:
  8157 ;;		line 662 in file "teris_16f886.c"
  8158 ;; Parameters:    Size  Location     Type
  8159 ;;  matrix          1    wreg     PTR const struct .
  8160 ;;		 -> g_matrix88(64), 
  8161 ;;  row             1    0[COMMON] unsigned char 
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;  matrix          1    4[COMMON] PTR const struct .
  8164 ;;		 -> g_matrix88(64), 
  8165 ;;  col             1    5[COMMON] unsigned char 
  8166 ;; Return value:  Size  Location     Type
  8167 ;;                  1    wreg      unsigned char 
  8168 ;; Registers used:
  8169 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8170 ;; Tracked objects:
  8171 ;;		On entry : 0/0
  8172 ;;		On exit  : 0/0
  8173 ;;		Unchanged: 0/0
  8174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8175 ;;      Params:         1       0       0       0       0
  8176 ;;      Locals:         2       0       0       0       0
  8177 ;;      Temps:          3       0       0       0       0
  8178 ;;      Totals:         6       0       0       0       0
  8179 ;;Total ram usage:        6 bytes
  8180 ;; Hardware stack levels used:    1
  8181 ;; This function calls:
  8182 ;;		Nothing
  8183 ;; This function is called by:
  8184 ;;		_get_high
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           
  8189                           ;psect for function _is_row_empty
  8190  1001                     _is_row_empty:	
  8191                           
  8192                           ;incstack = 0
  8193                           ; Regs used in _is_row_empty: [wreg-fsr0h+status,2+status,0]
  8194                           ;is_row_empty@matrix stored from wreg
  8195  1001  00F4               	movwf	is_row_empty@matrix
  8196                           
  8197                           ;teris_16f886.c: 664: for(uint8_t col = 0; col < 8; col++)
  8198  1002  01F5               	clrf	is_row_empty@col
  8199  1003  3008               	movlw	8
  8200  1004  0275               	subwf	is_row_empty@col,w
  8201  1005  1803               	btfsc	3,0
  8202  1006  2826               	goto	l3631
  8203  1007                     l3621:	
  8204                           
  8205                           ;teris_16f886.c: 665: {
  8206                           ;teris_16f886.c: 666: if(matrix->data[row][col] == 1)
  8207  1007  0870               	movf	is_row_empty@row,w
  8208  1008  00F1               	movwf	??_is_row_empty
  8209  1009  3002               	movlw	2
  8210  100A                     u4615:	
  8211  100A  1003               	clrc
  8212  100B  0DF1               	rlf	??_is_row_empty,f
  8213  100C  3EFF               	addlw	-1
  8214  100D  1D03               	skipz
  8215  100E  280A               	goto	u4615
  8216  100F  1003               	clrc
  8217  1010  0D71               	rlf	??_is_row_empty,w
  8218  1011  0774               	addwf	is_row_empty@matrix,w
  8219  1012  00F2               	movwf	??_is_row_empty+1
  8220  1013  0875               	movf	is_row_empty@col,w
  8221  1014  0772               	addwf	??_is_row_empty+1,w
  8222  1015  00F3               	movwf	??_is_row_empty+2
  8223  1016  0873               	movf	??_is_row_empty+2,w
  8224  1017  0084               	movwf	4
  8225  1018  1783               	bsf	3,7	;select IRP bank2
  8226  1019  0300               	decf	0,w
  8227  101A  1D03               	btfss	3,2
  8228  101B  281E               	goto	l3627
  8229                           
  8230                           ;teris_16f886.c: 667: {
  8231                           ;teris_16f886.c: 668: return 0;
  8232  101C  3000               	movlw	0
  8233  101D  0008               	return
  8234  101E                     l3627:	
  8235  101E  3001               	movlw	1
  8236  101F  00F1               	movwf	??_is_row_empty
  8237  1020  0871               	movf	??_is_row_empty,w
  8238  1021  07F5               	addwf	is_row_empty@col,f
  8239  1022  3008               	movlw	8
  8240  1023  0275               	subwf	is_row_empty@col,w
  8241  1024  1C03               	skipc
  8242  1025  2807               	goto	l3621
  8243  1026                     l3631:	
  8244                           
  8245                           ;teris_16f886.c: 669: }
  8246                           ;teris_16f886.c: 670: }
  8247                           ;teris_16f886.c: 671: return 1;
  8248  1026  3001               	movlw	1
  8249  1027  0008               	return
  8250  1028                     __end_of_is_row_empty:	
  8251                           
  8252                           	psect	text20
  8253  0DF1                     __ptext20:	
  8254 ;; *************** function _fall_off *****************
  8255 ;; Defined at:
  8256 ;;		line 781 in file "teris_16f886.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;  x               1    wreg     char 
  8259 ;;  y               1   38[BANK0 ] char 
  8260 ;;  matrix44        2   39[BANK0 ] PTR const struct .
  8261 ;;		 -> g_matrix44(384), 
  8262 ;;  matrix88        1   41[BANK0 ] PTR const struct .
  8263 ;;		 -> g_matrix88(64), 
  8264 ;; Auto vars:     Size  Location     Type
  8265 ;;  x               1   46[BANK0 ] char 
  8266 ;;  col             1   47[BANK0 ] char 
  8267 ;;  row             1   48[BANK0 ] char 
  8268 ;; Return value:  Size  Location     Type
  8269 ;;                  1    wreg      unsigned char 
  8270 ;; Registers used:
  8271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8272 ;; Tracked objects:
  8273 ;;		On entry : 0/0
  8274 ;;		On exit  : 0/0
  8275 ;;		Unchanged: 0/0
  8276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8277 ;;      Params:         0       4       0       0       0
  8278 ;;      Locals:         0       3       0       0       0
  8279 ;;      Temps:          0       4       0       0       0
  8280 ;;      Totals:         0      11       0       0       0
  8281 ;;Total ram usage:       11 bytes
  8282 ;; Hardware stack levels used:    1
  8283 ;; Hardware stack levels required when called:    3
  8284 ;; This function calls:
  8285 ;;		_debug_int2
  8286 ;;		_debug_line
  8287 ;; This function is called by:
  8288 ;;		_find_best_solution
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           
  8293                           ;psect for function _fall_off
  8294  0DF1                     _fall_off:	
  8295                           
  8296                           ;incstack = 0
  8297                           ; Regs used in _fall_off: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8298                           ;fall_off@x stored from wreg
  8299  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  8300  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  8301  0DF3  00CE               	movwf	fall_off@x
  8302  0DF4                     l338:	
  8303                           ;teris_16f886.c: 783: while(1)
  8304                           
  8305                           
  8306                           ;teris_16f886.c: 784: {
  8307                           ;teris_16f886.c: 785: for(int8_t row = 4 - 1; row >= 0; row--)
  8308  0DF4  3003               	movlw	3
  8309  0DF5  00CA               	movwf	??_fall_off
  8310  0DF6  084A               	movf	??_fall_off,w
  8311  0DF7  00D0               	movwf	fall_off@row
  8312  0DF8  1BD0               	btfsc	fall_off@row,7
  8313  0DF9  2EA4               	goto	l5193
  8314  0DFA                     l5161:	
  8315                           
  8316                           ;teris_16f886.c: 786: {
  8317                           ;teris_16f886.c: 787: for(int8_t col = 0; col < 4; col++)
  8318  0DFA  01CF               	clrf	fall_off@col
  8319  0DFB  084F               	movf	fall_off@col,w
  8320  0DFC  3A80               	xorlw	128
  8321  0DFD  3E7C               	addlw	-132
  8322  0DFE  1803               	btfsc	3,0
  8323  0DFF  2E9E               	goto	l5189
  8324  0E00                     l5167:	
  8325                           
  8326                           ;teris_16f886.c: 788: {
  8327                           ;teris_16f886.c: 789: if(matrix44->data[row][col] == 1)
  8328  0E00  0850               	movf	fall_off@row,w
  8329  0E01  00CA               	movwf	??_fall_off
  8330  0E02  01CB               	clrf	??_fall_off+1
  8331  0E03  1003               	clrc
  8332  0E04  0DCA               	rlf	??_fall_off,f
  8333  0E05  0DCB               	rlf	??_fall_off+1,f
  8334  0E06  1003               	clrc
  8335  0E07  0DCA               	rlf	??_fall_off,f
  8336  0E08  0DCB               	rlf	??_fall_off+1,f
  8337  0E09  084A               	movf	??_fall_off,w
  8338  0E0A  0747               	addwf	fall_off@matrix44,w
  8339  0E0B  00CC               	movwf	??_fall_off+2
  8340  0E0C  084B               	movf	??_fall_off+1,w
  8341  0E0D  1803               	skipnc
  8342  0E0E  0A4B               	incf	??_fall_off+1,w
  8343  0E0F  0748               	addwf	fall_off@matrix44+1,w
  8344  0E10  00CD               	movwf	??_fall_off+3
  8345  0E11  084F               	movf	fall_off@col,w
  8346  0E12  074C               	addwf	??_fall_off+2,w
  8347  0E13  0084               	movwf	4
  8348  0E14  084D               	movf	??_fall_off+3,w
  8349  0E15  1803               	skipnc
  8350  0E16  0A4D               	incf	??_fall_off+3,w
  8351  0E17  00FF               	movwf	127
  8352  0E18  120A  158A  2000  120A  158A  	fcall	stringtab
  8353  0E1D  3A01               	xorlw	1
  8354  0E1E  1D03               	skipz
  8355  0E1F  2E93               	goto	l5185
  8356                           
  8357                           ;teris_16f886.c: 790: {
  8358                           ;teris_16f886.c: 791: if(matrix88->data[y + row + 1][x + col] == 1)
  8359  0E20  084F               	movf	fall_off@col,w
  8360  0E21  074E               	addwf	fall_off@x,w
  8361  0E22  0749               	addwf	fall_off@matrix88,w
  8362  0E23  00CA               	movwf	??_fall_off
  8363  0E24  0850               	movf	fall_off@row,w
  8364  0E25  0746               	addwf	fall_off@y,w
  8365  0E26  00CB               	movwf	??_fall_off+1
  8366  0E27  3002               	movlw	2
  8367  0E28                     u7355:	
  8368  0E28  1003               	clrc
  8369  0E29  0DCB               	rlf	??_fall_off+1,f
  8370  0E2A  3EFF               	addlw	-1
  8371  0E2B  1D03               	skipz
  8372  0E2C  2E28               	goto	u7355
  8373  0E2D  1003               	clrc
  8374  0E2E  0D4B               	rlf	??_fall_off+1,w
  8375  0E2F  3E08               	addlw	8
  8376  0E30  074A               	addwf	??_fall_off,w
  8377  0E31  00CC               	movwf	??_fall_off+2
  8378  0E32  084C               	movf	??_fall_off+2,w
  8379  0E33  0084               	movwf	4
  8380  0E34  1783               	bsf	3,7	;select IRP bank2
  8381  0E35  0300               	decf	0,w
  8382  0E36  1D03               	btfss	3,2
  8383  0E37  2E5A               	goto	l5177
  8384                           
  8385                           ;teris_16f886.c: 792: {
  8386                           ;teris_16f886.c: 793: debug_line(0, "fall_off1");
  8387  0E38  306F               	movlw	low (STR_43| (0+32768))
  8388  0E39  00F3               	movwf	debug_line@str
  8389  0E3A  308D               	movlw	high (STR_43| (0+32768))
  8390  0E3B  00F4               	movwf	debug_line@str+1
  8391  0E3C  3000               	movlw	0
  8392  0E3D  160A  158A  209D  120A  158A  	fcall	_debug_line
  8393                           
  8394                           ;teris_16f886.c: 794: debug_int2(0, "x = %d, y = %d", x, y);
  8395  0E42  30E2               	movlw	low (STR_44| (0+32768))
  8396  0E43  1283               	bcf	3,5	;RP0=0, select bank0
  8397  0E44  1303               	bcf	3,6	;RP1=0, select bank0
  8398  0E45  00BF               	movwf	debug_int2@f
  8399  0E46  308C               	movlw	high (STR_44| (0+32768))
  8400  0E47  00C0               	movwf	debug_int2@f+1
  8401  0E48  084E               	movf	fall_off@x,w
  8402  0E49  00C1               	movwf	debug_int2@i1
  8403  0E4A  01C2               	clrf	debug_int2@i1+1
  8404  0E4B  1BC1               	btfsc	debug_int2@i1,7
  8405  0E4C  03C2               	decf	debug_int2@i1+1,f
  8406  0E4D  0846               	movf	fall_off@y,w
  8407  0E4E  00C3               	movwf	debug_int2@i2
  8408  0E4F  01C4               	clrf	debug_int2@i2+1
  8409  0E50  1BC3               	btfsc	debug_int2@i2,7
  8410  0E51  03C4               	decf	debug_int2@i2+1,f
  8411  0E52  3000               	movlw	0
  8412  0E53  160A  158A  2174   	fcall	_debug_int2
  8413                           
  8414                           ;teris_16f886.c: 795: return y;
  8415  0E56  1283               	bcf	3,5	;RP0=0, select bank0
  8416  0E57  1303               	bcf	3,6	;RP1=0, select bank0
  8417  0E58  0846               	movf	fall_off@y,w
  8418  0E59  0008               	return
  8419  0E5A                     l5177:	
  8420                           
  8421                           ;teris_16f886.c: 796: }
  8422                           ;teris_16f886.c: 797: if((y + row) >= (8 - 1))
  8423  0E5A  0846               	movf	fall_off@y,w
  8424  0E5B  0750               	addwf	fall_off@row,w
  8425  0E5C  00CA               	movwf	??_fall_off
  8426  0E5D  01CB               	clrf	??_fall_off+1
  8427  0E5E  1803               	skipnc
  8428  0E5F  0ACB               	incf	??_fall_off+1,f
  8429  0E60  1BC6               	btfsc	fall_off@y,7
  8430  0E61  03CB               	decf	??_fall_off+1,f
  8431  0E62  1BD0               	btfsc	fall_off@row,7
  8432  0E63  03CB               	decf	??_fall_off+1,f
  8433  0E64  1283               	bcf	3,5	;RP0=0, select bank0
  8434  0E65  1303               	bcf	3,6	;RP1=0, select bank0
  8435  0E66  084B               	movf	??_fall_off+1,w
  8436  0E67  3A80               	xorlw	128
  8437  0E68  00FF               	movwf	127
  8438  0E69  3080               	movlw	128
  8439  0E6A  027F               	subwf	127,w
  8440  0E6B  1D03               	skipz
  8441  0E6C  2E6F               	goto	u7385
  8442  0E6D  3007               	movlw	7
  8443  0E6E  024A               	subwf	??_fall_off,w
  8444  0E6F                     u7385:	
  8445  0E6F  1C03               	skipc
  8446  0E70  2E93               	goto	l5185
  8447                           
  8448                           ;teris_16f886.c: 798: {
  8449                           ;teris_16f886.c: 799: debug_line(0, "fall_off2");
  8450  0E71  3079               	movlw	low (STR_45| (0+32768))
  8451  0E72  00F3               	movwf	debug_line@str
  8452  0E73  308D               	movlw	high (STR_45| (0+32768))
  8453  0E74  00F4               	movwf	debug_line@str+1
  8454  0E75  3000               	movlw	0
  8455  0E76  160A  158A  209D  120A  158A  	fcall	_debug_line
  8456                           
  8457                           ;teris_16f886.c: 800: debug_int2(0, "x = %d, y = %d", x, y);
  8458  0E7B  30E2               	movlw	low (STR_44| (0+32768))
  8459  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  8460  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  8461  0E7E  00BF               	movwf	debug_int2@f
  8462  0E7F  308C               	movlw	high (STR_44| (0+32768))
  8463  0E80  00C0               	movwf	debug_int2@f+1
  8464  0E81  084E               	movf	fall_off@x,w
  8465  0E82  00C1               	movwf	debug_int2@i1
  8466  0E83  01C2               	clrf	debug_int2@i1+1
  8467  0E84  1BC1               	btfsc	debug_int2@i1,7
  8468  0E85  03C2               	decf	debug_int2@i1+1,f
  8469  0E86  0846               	movf	fall_off@y,w
  8470  0E87  00C3               	movwf	debug_int2@i2
  8471  0E88  01C4               	clrf	debug_int2@i2+1
  8472  0E89  1BC3               	btfsc	debug_int2@i2,7
  8473  0E8A  03C4               	decf	debug_int2@i2+1,f
  8474  0E8B  3000               	movlw	0
  8475  0E8C  160A  158A  2174   	fcall	_debug_int2
  8476                           
  8477                           ;teris_16f886.c: 801: return y;
  8478  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  8479  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  8480  0E91  0846               	movf	fall_off@y,w
  8481  0E92  0008               	return
  8482  0E93                     l5185:	
  8483  0E93  3001               	movlw	1
  8484  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  8485  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  8486  0E96  00CA               	movwf	??_fall_off
  8487  0E97  084A               	movf	??_fall_off,w
  8488  0E98  07CF               	addwf	fall_off@col,f
  8489  0E99  084F               	movf	fall_off@col,w
  8490  0E9A  3A80               	xorlw	128
  8491  0E9B  3E7C               	addlw	-132
  8492  0E9C  1C03               	skipc
  8493  0E9D  2E00               	goto	l5167
  8494  0E9E                     l5189:	
  8495  0E9E  30FF               	movlw	255
  8496  0E9F  00CA               	movwf	??_fall_off
  8497  0EA0  084A               	movf	??_fall_off,w
  8498  0EA1  07D0               	addwf	fall_off@row,f
  8499  0EA2  1FD0               	btfss	fall_off@row,7
  8500  0EA3  2DFA               	goto	l5161
  8501  0EA4                     l5193:	
  8502                           
  8503                           ;teris_16f886.c: 802: }
  8504                           ;teris_16f886.c: 803: }
  8505                           ;teris_16f886.c: 804: }
  8506                           ;teris_16f886.c: 805: }
  8507                           ;teris_16f886.c: 806: y++;
  8508  0EA4  3001               	movlw	1
  8509  0EA5  00CA               	movwf	??_fall_off
  8510  0EA6  084A               	movf	??_fall_off,w
  8511  0EA7  07C6               	addwf	fall_off@y,f
  8512  0EA8  2DF4               	goto	l338
  8513  0EA9                     __end_of_fall_off:	
  8514                           
  8515                           	psect	text21
  8516  189D                     __ptext21:	
  8517 ;; *************** function _debug_line *****************
  8518 ;; Defined at:
  8519 ;;		line 300 in file "teris_16f886.c"
  8520 ;; Parameters:    Size  Location     Type
  8521 ;;  enable          1    wreg     unsigned char 
  8522 ;;  str             2    3[COMMON] PTR const unsigned char 
  8523 ;;		 -> STR_96(13), STR_94(13), STR_87(7), STR_79(5), 
  8524 ;;		 -> STR_63(17), STR_59(45), STR_51(21), STR_45(10), 
  8525 ;;		 -> STR_43(10), STR_42(20), STR_41(19), STR_40(6), 
  8526 ;;		 -> STR_38(11), STR_36(11), STR_34(11), STR_33(35), 
  8527 ;;		 -> STR_32(8), STR_29(35), STR_27(2), STR_26(21), 
  8528 ;;		 -> STR_25(1), STR_22(29), STR_21(2), STR_20(21), 
  8529 ;;		 -> STR_19(1), STR_16(21), STR_15(2), STR_12(20), 
  8530 ;;		 -> STR_11(2), STR_10(21), STR_9(1), STR_6(29), 
  8531 ;;		 -> STR_5(2), 
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;  enable          1    5[COMMON] unsigned char 
  8534 ;; Return value:  Size  Location     Type
  8535 ;;                  1    wreg      void 
  8536 ;; Registers used:
  8537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8543 ;;      Params:         2       0       0       0       0
  8544 ;;      Locals:         1       0       0       0       0
  8545 ;;      Temps:          0       0       0       0       0
  8546 ;;      Totals:         3       0       0       0       0
  8547 ;;Total ram usage:        3 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; Hardware stack levels required when called:    2
  8550 ;; This function calls:
  8551 ;;		_USARTWriteString
  8552 ;; This function is called by:
  8553 ;;		_printf_debug_MATRIX44
  8554 ;;		_printf_debug_cur_MATRIX44
  8555 ;;		_printf_debug_MATRIX88
  8556 ;;		_printf_debug_Screen
  8557 ;;		_hit_land
  8558 ;;		_is_valid
  8559 ;;		_is_left_boundary
  8560 ;;		_is_right_boundary
  8561 ;;		_fall_off
  8562 ;;		_get_high_after_merge
  8563 ;;		_find_best_solution
  8564 ;;		_main
  8565 ;;		_printf_debug_all_MATRIX44
  8566 ;;		_printf_debug_MATRIX7219
  8567 ;; This function uses a non-reentrant model
  8568 ;;
  8569                           
  8570                           
  8571                           ;psect for function _debug_line
  8572  189D                     _debug_line:	
  8573                           
  8574                           ;incstack = 0
  8575                           ; Regs used in _debug_line: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8576                           ;debug_line@enable stored from wreg
  8577  189D  00F5               	movwf	debug_line@enable
  8578                           
  8579                           ;teris_16f886.c: 302: if(enable == 1)
  8580  189E  0375               	decf	debug_line@enable,w
  8581  189F  1D03               	btfss	3,2
  8582  18A0  0008               	return
  8583                           
  8584                           ;teris_16f886.c: 303: {
  8585                           ;teris_16f886.c: 308: USARTWriteString(str);
  8586  18A1  0873               	movf	debug_line@str,w
  8587  18A2  00F1               	movwf	USARTWriteString@str
  8588  18A3  0874               	movf	debug_line@str+1,w
  8589  18A4  00F2               	movwf	USARTWriteString@str+1
  8590  18A5  160A  158A  212A  160A  158A  	fcall	_USARTWriteString
  8591                           
  8592                           ;teris_16f886.c: 309: USARTWriteString("\r\n");
  8593  18AA  30BA               	movlw	low (STR_1| (0+32768))
  8594  18AB  00F1               	movwf	USARTWriteString@str
  8595  18AC  308D               	movlw	high (STR_1| (0+32768))
  8596  18AD  00F2               	movwf	USARTWriteString@str+1
  8597  18AE  160A  158A  212A   	fcall	_USARTWriteString
  8598  18B1  0008               	return
  8599  18B2                     __end_of_debug_line:	
  8600                           
  8601                           	psect	text22
  8602  1974                     __ptext22:	
  8603 ;; *************** function _debug_int2 *****************
  8604 ;; Defined at:
  8605 ;;		line 328 in file "teris_16f886.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;  enable          1    wreg     unsigned char 
  8608 ;;  f               2   31[BANK0 ] PTR const unsigned char 
  8609 ;;		 -> STR_78(18), STR_77(19), STR_76(18), STR_75(19), 
  8610 ;;		 -> STR_74(18), STR_73(17), STR_71(18), STR_70(19), 
  8611 ;;		 -> STR_69(18), STR_68(19), STR_67(18), STR_66(20), 
  8612 ;;		 -> STR_64(19), STR_46(15), STR_44(15), STR_39(19), 
  8613 ;;		 -> STR_37(19), STR_35(19), STR_31(24), STR_30(24), 
  8614 ;;		 -> STR_14(27), 
  8615 ;;  i1              2   33[BANK0 ] int 
  8616 ;;  i2              2   35[BANK0 ] int 
  8617 ;; Auto vars:     Size  Location     Type
  8618 ;;  enable          1   37[BANK0 ] unsigned char 
  8619 ;; Return value:  Size  Location     Type
  8620 ;;                  1    wreg      void 
  8621 ;; Registers used:
  8622 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8628 ;;      Params:         0       6       0       0       0
  8629 ;;      Locals:         0       1       0       0       0
  8630 ;;      Temps:          0       0       0       0       0
  8631 ;;      Totals:         0       7       0       0       0
  8632 ;;Total ram usage:        7 bytes
  8633 ;; Hardware stack levels used:    1
  8634 ;; Hardware stack levels required when called:    2
  8635 ;; This function calls:
  8636 ;;		_USARTWriteString
  8637 ;;		_sprintf
  8638 ;; This function is called by:
  8639 ;;		_hit_land
  8640 ;;		_is_valid
  8641 ;;		_fall_off
  8642 ;;		_find_best_solution
  8643 ;;		_printf_debug_all_MATRIX44
  8644 ;; This function uses a non-reentrant model
  8645 ;;
  8646                           
  8647                           
  8648                           ;psect for function _debug_int2
  8649  1974                     _debug_int2:	
  8650                           
  8651                           ;incstack = 0
  8652                           ; Regs used in _debug_int2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8653                           ;debug_int2@enable stored from wreg
  8654  1974  1283               	bcf	3,5	;RP0=0, select bank0
  8655  1975  1303               	bcf	3,6	;RP1=0, select bank0
  8656  1976  00C5               	movwf	debug_int2@enable
  8657                           
  8658                           ;teris_16f886.c: 330: if(enable == 1)
  8659  1977  0345               	decf	debug_int2@enable,w
  8660  1978  1D03               	btfss	3,2
  8661  1979  0008               	return
  8662                           
  8663                           ;teris_16f886.c: 331: {
  8664                           ;teris_16f886.c: 336: sprintf(g_debug, f, i1, i2);
  8665  197A  083F               	movf	debug_int2@f,w
  8666  197B  00A0               	movwf	sprintf@f
  8667  197C  0840               	movf	debug_int2@f+1,w
  8668  197D  00A1               	movwf	sprintf@f+1
  8669  197E  0842               	movf	debug_int2@i1+1,w
  8670  197F  00A3               	movwf	?_sprintf+3
  8671  1980  0841               	movf	debug_int2@i1,w
  8672  1981  00A2               	movwf	?_sprintf+2
  8673  1982  0844               	movf	debug_int2@i2+1,w
  8674  1983  00A5               	movwf	?_sprintf+5
  8675  1984  0843               	movf	debug_int2@i2,w
  8676  1985  00A4               	movwf	?_sprintf+4
  8677  1986  3097               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8678  1987  160A  118A  2300  160A  158A  	fcall	_sprintf
  8679                           
  8680                           ;teris_16f886.c: 337: USARTWriteString(g_debug);
  8681  198C  3097               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8682  198D  00F1               	movwf	USARTWriteString@str
  8683  198E  3001               	movlw	1
  8684  198F  00F2               	movwf	USARTWriteString@str+1
  8685  1990  160A  158A  212A  160A  158A  	fcall	_USARTWriteString
  8686                           
  8687                           ;teris_16f886.c: 338: USARTWriteString("\r\n");
  8688  1995  30BA               	movlw	low (STR_1| (0+32768))
  8689  1996  00F1               	movwf	USARTWriteString@str
  8690  1997  308D               	movlw	high (STR_1| (0+32768))
  8691  1998  00F2               	movwf	USARTWriteString@str+1
  8692  1999  160A  158A  212A   	fcall	_USARTWriteString
  8693  199C  0008               	return
  8694  199D                     __end_of_debug_int2:	
  8695                           
  8696                           	psect	text23
  8697  1F7E                     __ptext23:	
  8698 ;; *************** function _evaluate *****************
  8699 ;; Defined at:
  8700 ;;		line 856 in file "teris_16f886.c"
  8701 ;; Parameters:    Size  Location     Type
  8702 ;;  matrix          1    wreg     PTR const struct .
  8703 ;;		 -> find_best_solution@temp_matrix88(64), 
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;  matrix          1   45[BANK0 ] PTR const struct .
  8706 ;;		 -> find_best_solution@temp_matrix88(64), 
  8707 ;;  row             1   47[BANK0 ] char 
  8708 ;;  col             1   46[BANK0 ] unsigned char 
  8709 ;;  risk            2   42[BANK0 ] unsigned int 
  8710 ;;  full            1   44[BANK0 ] unsigned char 
  8711 ;; Return value:  Size  Location     Type
  8712 ;;                  2   36[BANK0 ] unsigned int 
  8713 ;; Registers used:
  8714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8715 ;; Tracked objects:
  8716 ;;		On entry : 0/0
  8717 ;;		On exit  : 0/0
  8718 ;;		Unchanged: 0/0
  8719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8720 ;;      Params:         0       2       0       0       0
  8721 ;;      Locals:         0       6       0       0       0
  8722 ;;      Temps:          0       4       0       0       0
  8723 ;;      Totals:         0      12       0       0       0
  8724 ;;Total ram usage:       12 bytes
  8725 ;; Hardware stack levels used:    1
  8726 ;; Hardware stack levels required when called:    3
  8727 ;; This function calls:
  8728 ;;		_debug_int1
  8729 ;; This function is called by:
  8730 ;;		_find_best_solution
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           
  8735                           ;psect for function _evaluate
  8736  1F7E                     _evaluate:	
  8737                           
  8738                           ;incstack = 0
  8739                           ; Regs used in _evaluate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8740                           ;evaluate@matrix stored from wreg
  8741  1F7E  1283               	bcf	3,5	;RP0=0, select bank0
  8742  1F7F  1303               	bcf	3,6	;RP1=0, select bank0
  8743  1F80  00CD               	movwf	evaluate@matrix
  8744                           
  8745                           ;teris_16f886.c: 858: uint16_t risk = 0;
  8746  1F81  01CA               	clrf	evaluate@risk
  8747  1F82  01CB               	clrf	evaluate@risk+1
  8748                           
  8749                           ;teris_16f886.c: 859: uint8_t full = 0xFF;
  8750  1F83  30FF               	movlw	255
  8751  1F84  00C6               	movwf	??_evaluate
  8752  1F85  0846               	movf	??_evaluate,w
  8753  1F86  00CC               	movwf	evaluate@full
  8754                           
  8755                           ;teris_16f886.c: 860: for(uint8_t col = 0; col < 8; col++)
  8756  1F87  01CE               	clrf	evaluate@col
  8757  1F88  3008               	movlw	8
  8758  1F89  024E               	subwf	evaluate@col,w
  8759  1F8A  1803               	btfsc	3,0
  8760  1F8B  2FED               	goto	l5257
  8761  1F8C                     l5231:	
  8762                           
  8763                           ;teris_16f886.c: 861: {
  8764                           ;teris_16f886.c: 862: full = 0xFF;
  8765  1F8C  30FF               	movlw	255
  8766  1F8D  00C6               	movwf	??_evaluate
  8767  1F8E  0846               	movf	??_evaluate,w
  8768  1F8F  00CC               	movwf	evaluate@full
  8769                           
  8770                           ;teris_16f886.c: 863: for(int8_t row = 8 - 1; row >= 0; row--)
  8771  1F90  3007               	movlw	7
  8772  1F91  00C6               	movwf	??_evaluate
  8773  1F92  0846               	movf	??_evaluate,w
  8774  1F93  00CF               	movwf	evaluate@row
  8775  1F94  1BCF               	btfsc	evaluate@row,7
  8776  1F95  2FE5               	goto	l5253
  8777  1F96                     l5237:	
  8778                           
  8779                           ;teris_16f886.c: 864: {
  8780                           ;teris_16f886.c: 865: if(full == 0xFF)
  8781  1F96  0A4C               	incf	evaluate@full,w
  8782  1F97  1D03               	btfss	3,2
  8783  1F98  2FAC               	goto	l5241
  8784                           
  8785                           ;teris_16f886.c: 866: {
  8786                           ;teris_16f886.c: 867: full = matrix->data[row][col];
  8787  1F99  084F               	movf	evaluate@row,w
  8788  1F9A  00C6               	movwf	??_evaluate
  8789  1F9B  3002               	movlw	2
  8790  1F9C                     u7505:	
  8791  1F9C  1003               	clrc
  8792  1F9D  0DC6               	rlf	??_evaluate,f
  8793  1F9E  3EFF               	addlw	-1
  8794  1F9F  1D03               	skipz
  8795  1FA0  2F9C               	goto	u7505
  8796  1FA1  1003               	clrc
  8797  1FA2  0D46               	rlf	??_evaluate,w
  8798  1FA3  074D               	addwf	evaluate@matrix,w
  8799  1FA4  00C7               	movwf	??_evaluate+1
  8800  1FA5  084E               	movf	evaluate@col,w
  8801  1FA6  0747               	addwf	??_evaluate+1,w
  8802  1FA7  00C8               	movwf	??_evaluate+2
  8803  1FA8  0848               	movf	??_evaluate+2,w
  8804  1FA9  0084               	movwf	4
  8805  1FAA  1383               	bcf	3,7	;select IRP bank0
  8806  1FAB  2FDB               	goto	L15
  8807  1FAC                     l5241:	
  8808                           ;teris_16f886.c: 868: }
  8809                           
  8810                           
  8811                           ;teris_16f886.c: 869: else
  8812                           ;teris_16f886.c: 870: {
  8813                           ;teris_16f886.c: 871: if(matrix->data[row][col] == 1)
  8814  1FAC  084F               	movf	evaluate@row,w
  8815  1FAD  00C6               	movwf	??_evaluate
  8816  1FAE  3002               	movlw	2
  8817  1FAF                     u7515:	
  8818  1FAF  1003               	clrc
  8819  1FB0  0DC6               	rlf	??_evaluate,f
  8820  1FB1  3EFF               	addlw	-1
  8821  1FB2  1D03               	skipz
  8822  1FB3  2FAF               	goto	u7515
  8823  1FB4  1003               	clrc
  8824  1FB5  0D46               	rlf	??_evaluate,w
  8825  1FB6  074D               	addwf	evaluate@matrix,w
  8826  1FB7  00C7               	movwf	??_evaluate+1
  8827  1FB8  084E               	movf	evaluate@col,w
  8828  1FB9  0747               	addwf	??_evaluate+1,w
  8829  1FBA  00C8               	movwf	??_evaluate+2
  8830  1FBB  0848               	movf	??_evaluate+2,w
  8831  1FBC  0084               	movwf	4
  8832  1FBD  1383               	bcf	3,7	;select IRP bank0
  8833  1FBE  0300               	decf	0,w
  8834  1FBF  1D03               	btfss	3,2
  8835  1FC0  2FCA               	goto	l5247
  8836                           
  8837                           ;teris_16f886.c: 872: {
  8838                           ;teris_16f886.c: 873: if(full == 0)
  8839  1FC1  084C               	movf	evaluate@full,w
  8840  1FC2  1D03               	btfss	3,2
  8841  1FC3  2FCA               	goto	l5247
  8842                           
  8843                           ;teris_16f886.c: 874: {
  8844                           ;teris_16f886.c: 875: risk++;
  8845  1FC4  3001               	movlw	1
  8846  1FC5  07CA               	addwf	evaluate@risk,f
  8847  1FC6  1803               	skipnc
  8848  1FC7  0ACB               	incf	evaluate@risk+1,f
  8849  1FC8  3000               	movlw	0
  8850  1FC9  07CB               	addwf	evaluate@risk+1,f
  8851  1FCA                     l5247:	
  8852                           
  8853                           ;teris_16f886.c: 876: }
  8854                           ;teris_16f886.c: 877: }
  8855                           ;teris_16f886.c: 878: full = matrix->data[row][col];
  8856  1FCA  084F               	movf	evaluate@row,w
  8857  1FCB  00C6               	movwf	??_evaluate
  8858  1FCC  3002               	movlw	2
  8859  1FCD                     u7545:	
  8860  1FCD  1003               	clrc
  8861  1FCE  0DC6               	rlf	??_evaluate,f
  8862  1FCF  3EFF               	addlw	-1
  8863  1FD0  1D03               	skipz
  8864  1FD1  2FCD               	goto	u7545
  8865  1FD2  1003               	clrc
  8866  1FD3  0D46               	rlf	??_evaluate,w
  8867  1FD4  074D               	addwf	evaluate@matrix,w
  8868  1FD5  00C7               	movwf	??_evaluate+1
  8869  1FD6  084E               	movf	evaluate@col,w
  8870  1FD7  0747               	addwf	??_evaluate+1,w
  8871  1FD8  00C8               	movwf	??_evaluate+2
  8872  1FD9  0848               	movf	??_evaluate+2,w
  8873  1FDA  0084               	movwf	4
  8874  1FDB                     L15:	
  8875  1FDB  0800               	movf	0,w
  8876  1FDC  00C9               	movwf	??_evaluate+3
  8877  1FDD  0849               	movf	??_evaluate+3,w
  8878  1FDE  00CC               	movwf	evaluate@full
  8879  1FDF  30FF               	movlw	255
  8880  1FE0  00C6               	movwf	??_evaluate
  8881  1FE1  0846               	movf	??_evaluate,w
  8882  1FE2  07CF               	addwf	evaluate@row,f
  8883  1FE3  1FCF               	btfss	evaluate@row,7
  8884  1FE4  2F96               	goto	l5237
  8885  1FE5                     l5253:	
  8886  1FE5  3001               	movlw	1
  8887  1FE6  00C6               	movwf	??_evaluate
  8888  1FE7  0846               	movf	??_evaluate,w
  8889  1FE8  07CE               	addwf	evaluate@col,f
  8890  1FE9  3008               	movlw	8
  8891  1FEA  024E               	subwf	evaluate@col,w
  8892  1FEB  1C03               	skipc
  8893  1FEC  2F8C               	goto	l5231
  8894  1FED                     l5257:	
  8895                           
  8896                           ;teris_16f886.c: 879: }
  8897                           ;teris_16f886.c: 880: }
  8898                           ;teris_16f886.c: 881: }
  8899                           ;teris_16f886.c: 882: debug_int1(1, "risk = %d", risk);
  8900  1FED  3020               	movlw	low ((STR_83+9)| (0+32768))
  8901  1FEE  00BF               	movwf	debug_int1@f
  8902  1FEF  308C               	movlw	high ((STR_83+9)| (0+32768))
  8903  1FF0  00C0               	movwf	debug_int1@f+1
  8904  1FF1  084B               	movf	evaluate@risk+1,w
  8905  1FF2  00C2               	movwf	debug_int1@i+1
  8906  1FF3  084A               	movf	evaluate@risk,w
  8907  1FF4  00C1               	movwf	debug_int1@i
  8908  1FF5  3001               	movlw	1
  8909  1FF6  160A  158A  214F   	fcall	_debug_int1
  8910                           
  8911                           ;teris_16f886.c: 884: return risk;
  8912  1FF9  1283               	bcf	3,5	;RP0=0, select bank0
  8913  1FFA  1303               	bcf	3,6	;RP1=0, select bank0
  8914  1FFB  084B               	movf	evaluate@risk+1,w
  8915  1FFC  00C5               	movwf	?_evaluate+1
  8916  1FFD  084A               	movf	evaluate@risk,w
  8917  1FFE  00C4               	movwf	?_evaluate
  8918  1FFF  0008               	return
  8919  2000                     __end_of_evaluate:	
  8920                           
  8921                           	psect	text24
  8922  1B9C                     __ptext24:	
  8923 ;; *************** function _delete_matrix *****************
  8924 ;; Defined at:
  8925 ;;		line 641 in file "teris_16f886.c"
  8926 ;; Parameters:    Size  Location     Type
  8927 ;;  matrix          2   36[BANK0 ] PTR struct .
  8928 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;  row             1   41[BANK0 ] char 
  8931 ;;  count           1   40[BANK0 ] unsigned char 
  8932 ;; Return value:  Size  Location     Type
  8933 ;;                  1    wreg      unsigned char 
  8934 ;; Registers used:
  8935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8936 ;; Tracked objects:
  8937 ;;		On entry : 0/0
  8938 ;;		On exit  : 0/0
  8939 ;;		Unchanged: 0/0
  8940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8941 ;;      Params:         0       2       0       0       0
  8942 ;;      Locals:         0       2       0       0       0
  8943 ;;      Temps:          0       2       0       0       0
  8944 ;;      Totals:         0       6       0       0       0
  8945 ;;Total ram usage:        6 bytes
  8946 ;; Hardware stack levels used:    1
  8947 ;; Hardware stack levels required when called:    3
  8948 ;; This function calls:
  8949 ;;		_debug_int1
  8950 ;;		_delete_row
  8951 ;;		_is_row_full
  8952 ;; This function is called by:
  8953 ;;		_find_best_solution
  8954 ;;		_main
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function _delete_matrix
  8960  1B9C                     _delete_matrix:	
  8961                           
  8962                           ;teris_16f886.c: 643: uint8_t count = 0;
  8963                           
  8964                           ;incstack = 0
  8965                           ; Regs used in _delete_matrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8966  1B9C  1283               	bcf	3,5	;RP0=0, select bank0
  8967  1B9D  1303               	bcf	3,6	;RP1=0, select bank0
  8968  1B9E  01C8               	clrf	delete_matrix@count
  8969                           
  8970                           ;teris_16f886.c: 644: int8_t row = 8 - 1;
  8971  1B9F  3007               	movlw	7
  8972  1BA0  00C6               	movwf	??_delete_matrix
  8973  1BA1  0846               	movf	??_delete_matrix,w
  8974  1BA2  00C9               	movwf	delete_matrix@row
  8975  1BA3                     l5091:	
  8976                           ;teris_16f886.c: 645: while(row >= 0)
  8977                           
  8978  1BA3  1BC9               	btfsc	delete_matrix@row,7
  8979  1BA4  2BD2               	goto	l5093
  8980                           
  8981                           ;teris_16f886.c: 646: {
  8982                           ;teris_16f886.c: 647: if(is_row_full(matrix, row))
  8983  1BA5  0844               	movf	delete_matrix@matrix,w
  8984  1BA6  00F0               	movwf	is_row_full@matrix
  8985  1BA7  0845               	movf	delete_matrix@matrix+1,w
  8986  1BA8  00F1               	movwf	is_row_full@matrix+1
  8987  1BA9  0849               	movf	delete_matrix@row,w
  8988  1BAA  00C6               	movwf	??_delete_matrix
  8989  1BAB  0846               	movf	??_delete_matrix,w
  8990  1BAC  00F2               	movwf	is_row_full@row
  8991  1BAD  160A  158A  21C7  160A  158A  	fcall	_is_row_full
  8992  1BB2  3A00               	xorlw	0
  8993  1BB3  1903               	skipnz
  8994  1BB4  2BCB               	goto	l5089
  8995                           
  8996                           ;teris_16f886.c: 648: {
  8997                           ;teris_16f886.c: 649: delete_row(matrix, row);
  8998  1BB5  1283               	bcf	3,5	;RP0=0, select bank0
  8999  1BB6  1303               	bcf	3,6	;RP1=0, select bank0
  9000  1BB7  0844               	movf	delete_matrix@matrix,w
  9001  1BB8  00FB               	movwf	delete_row@matrix
  9002  1BB9  0845               	movf	delete_matrix@matrix+1,w
  9003  1BBA  00FC               	movwf	delete_row@matrix+1
  9004  1BBB  0849               	movf	delete_matrix@row,w
  9005  1BBC  00C6               	movwf	??_delete_matrix
  9006  1BBD  0846               	movf	??_delete_matrix,w
  9007  1BBE  00FD               	movwf	delete_row@row
  9008  1BBF  160A  158A  2709  160A  158A  	fcall	_delete_row
  9009                           
  9010                           ;teris_16f886.c: 650: count++;
  9011  1BC4  3001               	movlw	1
  9012  1BC5  1283               	bcf	3,5	;RP0=0, select bank0
  9013  1BC6  1303               	bcf	3,6	;RP1=0, select bank0
  9014  1BC7  00C6               	movwf	??_delete_matrix
  9015  1BC8  0846               	movf	??_delete_matrix,w
  9016  1BC9  07C8               	addwf	delete_matrix@count,f
  9017                           
  9018                           ;teris_16f886.c: 651: }
  9019  1BCA  2BA3               	goto	l5091
  9020  1BCB                     l5089:	
  9021                           
  9022                           ;teris_16f886.c: 652: else
  9023                           ;teris_16f886.c: 653: {
  9024                           ;teris_16f886.c: 654: row--;
  9025  1BCB  30FF               	movlw	255
  9026  1BCC  1283               	bcf	3,5	;RP0=0, select bank0
  9027  1BCD  1303               	bcf	3,6	;RP1=0, select bank0
  9028  1BCE  00C6               	movwf	??_delete_matrix
  9029  1BCF  0846               	movf	??_delete_matrix,w
  9030  1BD0  07C9               	addwf	delete_matrix@row,f
  9031  1BD1  2BA3               	goto	l5091
  9032  1BD2                     l5093:	
  9033                           
  9034                           ;teris_16f886.c: 655: }
  9035                           ;teris_16f886.c: 656: }
  9036                           ;teris_16f886.c: 657: debug_int1(1, "delete_matrix count = %d", count);
  9037  1BD2  3078               	movlw	low (STR_28| (0+32768))
  9038  1BD3  00BF               	movwf	debug_int1@f
  9039  1BD4  308A               	movlw	high (STR_28| (0+32768))
  9040  1BD5  00C0               	movwf	debug_int1@f+1
  9041  1BD6  0848               	movf	delete_matrix@count,w
  9042  1BD7  00C6               	movwf	??_delete_matrix
  9043  1BD8  01C7               	clrf	??_delete_matrix+1
  9044  1BD9  0846               	movf	??_delete_matrix,w
  9045  1BDA  00C1               	movwf	debug_int1@i
  9046  1BDB  0847               	movf	??_delete_matrix+1,w
  9047  1BDC  00C2               	movwf	debug_int1@i+1
  9048  1BDD  3001               	movlw	1
  9049  1BDE  160A  158A  214F   	fcall	_debug_int1
  9050                           
  9051                           ;teris_16f886.c: 659: return count;
  9052  1BE1  1283               	bcf	3,5	;RP0=0, select bank0
  9053  1BE2  1303               	bcf	3,6	;RP1=0, select bank0
  9054  1BE3  0848               	movf	delete_matrix@count,w
  9055  1BE4  0008               	return
  9056  1BE5                     __end_of_delete_matrix:	
  9057                           
  9058                           	psect	text25
  9059  19C7                     __ptext25:	
  9060 ;; *************** function _is_row_full *****************
  9061 ;; Defined at:
  9062 ;;		line 607 in file "teris_16f886.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;  matrix          2    0[COMMON] PTR const struct .
  9065 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  9066 ;;  row             1    2[COMMON] unsigned char 
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;  col             1    8[COMMON] unsigned char 
  9069 ;; Return value:  Size  Location     Type
  9070 ;;                  1    wreg      unsigned char 
  9071 ;; Registers used:
  9072 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9073 ;; Tracked objects:
  9074 ;;		On entry : 0/0
  9075 ;;		On exit  : 0/0
  9076 ;;		Unchanged: 0/0
  9077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9078 ;;      Params:         3       0       0       0       0
  9079 ;;      Locals:         1       0       0       0       0
  9080 ;;      Temps:          5       0       0       0       0
  9081 ;;      Totals:         9       0       0       0       0
  9082 ;;Total ram usage:        9 bytes
  9083 ;; Hardware stack levels used:    1
  9084 ;; This function calls:
  9085 ;;		Nothing
  9086 ;; This function is called by:
  9087 ;;		_delete_matrix
  9088 ;; This function uses a non-reentrant model
  9089 ;;
  9090                           
  9091                           
  9092                           ;psect for function _is_row_full
  9093  19C7                     _is_row_full:	
  9094                           
  9095                           ;teris_16f886.c: 609: for(uint8_t col = 0; col < 8; col++)
  9096                           
  9097                           ;incstack = 0
  9098                           ; Regs used in _is_row_full: [wreg-fsr0h+status,2+status,0]
  9099  19C7  01F8               	clrf	is_row_full@col
  9100  19C8  3008               	movlw	8
  9101  19C9  0278               	subwf	is_row_full@col,w
  9102  19CA  1803               	btfsc	3,0
  9103  19CB  29F5               	goto	l3591
  9104  19CC                     l3581:	
  9105                           
  9106                           ;teris_16f886.c: 610: {
  9107                           ;teris_16f886.c: 611: if(matrix->data[row][col] == 0)
  9108  19CC  0872               	movf	is_row_full@row,w
  9109  19CD  00F3               	movwf	??_is_row_full
  9110  19CE  3002               	movlw	2
  9111  19CF                     u4505:	
  9112  19CF  1003               	clrc
  9113  19D0  0DF3               	rlf	??_is_row_full,f
  9114  19D1  3EFF               	addlw	-1
  9115  19D2  1D03               	skipz
  9116  19D3  29CF               	goto	u4505
  9117  19D4  1003               	clrc
  9118  19D5  0D73               	rlf	??_is_row_full,w
  9119  19D6  0770               	addwf	is_row_full@matrix,w
  9120  19D7  00F4               	movwf	??_is_row_full+1
  9121  19D8  0871               	movf	is_row_full@matrix+1,w
  9122  19D9  1803               	skipnc
  9123  19DA  3E01               	addlw	1
  9124  19DB  00F5               	movwf	??_is_row_full+2
  9125  19DC  0878               	movf	is_row_full@col,w
  9126  19DD  0774               	addwf	??_is_row_full+1,w
  9127  19DE  00F6               	movwf	??_is_row_full+3
  9128  19DF  0875               	movf	??_is_row_full+2,w
  9129  19E0  1803               	skipnc
  9130  19E1  3E01               	addlw	1
  9131  19E2  00F7               	movwf	??_is_row_full+4
  9132  19E3  0876               	movf	??_is_row_full+3,w
  9133  19E4  0084               	movwf	4
  9134  19E5  1783               	bsf	3,7
  9135  19E6  1C77               	btfss	??_is_row_full+4,0
  9136  19E7  1383               	bcf	3,7
  9137  19E8  0800               	movf	0,w
  9138  19E9  1D03               	btfss	3,2
  9139  19EA  29ED               	goto	l3587
  9140                           
  9141                           ;teris_16f886.c: 612: {
  9142                           ;teris_16f886.c: 613: return 0;
  9143  19EB  3000               	movlw	0
  9144  19EC  0008               	return
  9145  19ED                     l3587:	
  9146  19ED  3001               	movlw	1
  9147  19EE  00F3               	movwf	??_is_row_full
  9148  19EF  0873               	movf	??_is_row_full,w
  9149  19F0  07F8               	addwf	is_row_full@col,f
  9150  19F1  3008               	movlw	8
  9151  19F2  0278               	subwf	is_row_full@col,w
  9152  19F3  1C03               	skipc
  9153  19F4  29CC               	goto	l3581
  9154  19F5                     l3591:	
  9155                           
  9156                           ;teris_16f886.c: 614: }
  9157                           ;teris_16f886.c: 615: }
  9158                           ;teris_16f886.c: 616: return 1;
  9159  19F5  3001               	movlw	1
  9160  19F6  0008               	return
  9161  19F7                     __end_of_is_row_full:	
  9162                           
  9163                           	psect	text26
  9164  1F09                     __ptext26:	
  9165 ;; *************** function _delete_row *****************
  9166 ;; Defined at:
  9167 ;;		line 618 in file "teris_16f886.c"
  9168 ;; Parameters:    Size  Location     Type
  9169 ;;  matrix          2   11[COMMON] PTR struct .
  9170 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  9171 ;;  row             1   13[COMMON] unsigned char 
  9172 ;; Auto vars:     Size  Location     Type
  9173 ;;  len             2    4[BANK0 ] unsigned int 
  9174 ;;  i               1    6[BANK0 ] char 
  9175 ;; Return value:  Size  Location     Type
  9176 ;;                  1    wreg      void 
  9177 ;; Registers used:
  9178 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9179 ;; Tracked objects:
  9180 ;;		On entry : 0/0
  9181 ;;		On exit  : 0/0
  9182 ;;		Unchanged: 0/0
  9183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9184 ;;      Params:         3       0       0       0       0
  9185 ;;      Locals:         0       3       0       0       0
  9186 ;;      Temps:          0       4       0       0       0
  9187 ;;      Totals:         3       7       0       0       0
  9188 ;;Total ram usage:       10 bytes
  9189 ;; Hardware stack levels used:    1
  9190 ;; Hardware stack levels required when called:    1
  9191 ;; This function calls:
  9192 ;;		_memcpy
  9193 ;;		_memset
  9194 ;; This function is called by:
  9195 ;;		_delete_matrix
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           
  9200                           ;psect for function _delete_row
  9201  1F09                     _delete_row:	
  9202                           
  9203                           ;teris_16f886.c: 620: for(int8_t i = 8 - 1; i >= 0; i--)
  9204                           
  9205                           ;incstack = 0
  9206                           ; Regs used in _delete_row: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9207  1F09  3007               	movlw	7
  9208  1F0A  1283               	bcf	3,5	;RP0=0, select bank0
  9209  1F0B  1303               	bcf	3,6	;RP1=0, select bank0
  9210  1F0C  00A0               	movwf	??_delete_row
  9211  1F0D  0820               	movf	??_delete_row,w
  9212  1F0E  00A6               	movwf	delete_row@i
  9213  1F0F                     L16:	
  9214  1F0F  1BA6               	btfsc	delete_row@i,7
  9215  1F10  0008               	return
  9216                           
  9217                           ;teris_16f886.c: 621: {
  9218                           ;teris_16f886.c: 622: if(i <= row)
  9219  1F11  0826               	movf	delete_row@i,w
  9220  1F12  00A0               	movwf	??_delete_row
  9221  1F13  01A1               	clrf	??_delete_row+1
  9222  1F14  1BA0               	btfsc	??_delete_row,7
  9223  1F15  03A1               	decf	??_delete_row+1,f
  9224  1F16  0821               	movf	??_delete_row+1,w
  9225  1F17  3A80               	xorlw	128
  9226  1F18  3C80               	sublw	128
  9227  1F19  1D03               	skipz
  9228  1F1A  2F1D               	goto	u6945
  9229  1F1B  0820               	movf	??_delete_row,w
  9230  1F1C  027D               	subwf	delete_row@row,w
  9231  1F1D                     u6945:	
  9232  1F1D  1C03               	skipc
  9233  1F1E  2F77               	goto	l4991
  9234                           
  9235                           ;teris_16f886.c: 623: {
  9236                           ;teris_16f886.c: 624: if(i > 0)
  9237  1F1F  1283               	bcf	3,5	;RP0=0, select bank0
  9238  1F20  1303               	bcf	3,6	;RP1=0, select bank0
  9239  1F21  0826               	movf	delete_row@i,w
  9240  1F22  3A80               	xorlw	128
  9241  1F23  3E7F               	addlw	-129
  9242  1F24  1C03               	skipc
  9243  1F25  2F59               	goto	l4989
  9244                           
  9245                           ;teris_16f886.c: 625: {
  9246                           ;teris_16f886.c: 629: register size_t len;
  9247                           ;teris_16f886.c: 631: len = 8*sizeof(uint8_t);
  9248  1F26  3008               	movlw	8
  9249  1F27  00A4               	movwf	delete_row@len
  9250  1F28  3000               	movlw	0
  9251  1F29  00A5               	movwf	delete_row@len+1
  9252                           
  9253                           ;teris_16f886.c: 632: memcpy(matrix->data[i], matrix->data[i - 1], len);
  9254  1F2A  0826               	movf	delete_row@i,w
  9255  1F2B  00A0               	movwf	??_delete_row
  9256  1F2C  3002               	movlw	2
  9257  1F2D                     u6965:	
  9258  1F2D  1003               	clrc
  9259  1F2E  0DA0               	rlf	??_delete_row,f
  9260  1F2F  3EFF               	addlw	-1
  9261  1F30  1D03               	skipz
  9262  1F31  2F2D               	goto	u6965
  9263  1F32  1003               	clrc
  9264  1F33  0D20               	rlf	??_delete_row,w
  9265  1F34  077B               	addwf	delete_row@matrix,w
  9266  1F35  00F0               	movwf	memcpy@d1
  9267  1F36  087C               	movf	delete_row@matrix+1,w
  9268  1F37  1803               	skipnc
  9269  1F38  3E01               	addlw	1
  9270  1F39  00F1               	movwf	memcpy@d1+1
  9271  1F3A  0826               	movf	delete_row@i,w
  9272  1F3B  00A1               	movwf	??_delete_row+1
  9273  1F3C  3002               	movlw	2
  9274  1F3D                     u6975:	
  9275  1F3D  1003               	clrc
  9276  1F3E  0DA1               	rlf	??_delete_row+1,f
  9277  1F3F  3EFF               	addlw	-1
  9278  1F40  1D03               	skipz
  9279  1F41  2F3D               	goto	u6975
  9280  1F42  1003               	clrc
  9281  1F43  0D21               	rlf	??_delete_row+1,w
  9282  1F44  3EF8               	addlw	248
  9283  1F45  077B               	addwf	delete_row@matrix,w
  9284  1F46  00A2               	movwf	??_delete_row+2
  9285  1F47  087C               	movf	delete_row@matrix+1,w
  9286  1F48  1803               	skipnc
  9287  1F49  3E01               	addlw	1
  9288  1F4A  00A3               	movwf	??_delete_row+3
  9289  1F4B  0822               	movf	??_delete_row+2,w
  9290  1F4C  00F2               	movwf	memcpy@s1
  9291  1F4D  0823               	movf	??_delete_row+3,w
  9292  1F4E  00F3               	movwf	memcpy@s1+1
  9293  1F4F  0825               	movf	delete_row@len+1,w
  9294  1F50  00F5               	movwf	memcpy@n+1
  9295  1F51  0824               	movf	delete_row@len,w
  9296  1F52  00F4               	movwf	memcpy@n
  9297  1F53  160A  158A  219D  160A  158A  	fcall	_memcpy
  9298                           
  9299                           ;teris_16f886.c: 633: }
  9300  1F58  2F77               	goto	l4991
  9301  1F59                     l4989:	
  9302                           
  9303                           ;teris_16f886.c: 634: else
  9304                           ;teris_16f886.c: 635: {
  9305                           ;teris_16f886.c: 636: memset(matrix->data[i], 0, 8*sizeof(uint8_t));
  9306  1F59  1283               	bcf	3,5	;RP0=0, select bank0
  9307  1F5A  1303               	bcf	3,6	;RP1=0, select bank0
  9308  1F5B  0826               	movf	delete_row@i,w
  9309  1F5C  00A0               	movwf	??_delete_row
  9310  1F5D  3002               	movlw	2
  9311  1F5E                     u6985:	
  9312  1F5E  1003               	clrc
  9313  1F5F  0DA0               	rlf	??_delete_row,f
  9314  1F60  3EFF               	addlw	-1
  9315  1F61  1D03               	skipz
  9316  1F62  2F5E               	goto	u6985
  9317  1F63  1003               	clrc
  9318  1F64  0D20               	rlf	??_delete_row,w
  9319  1F65  077B               	addwf	delete_row@matrix,w
  9320  1F66  00F0               	movwf	memset@p1
  9321  1F67  087C               	movf	delete_row@matrix+1,w
  9322  1F68  1803               	skipnc
  9323  1F69  3E01               	addlw	1
  9324  1F6A  00F1               	movwf	memset@p1+1
  9325  1F6B  3000               	movlw	0
  9326  1F6C  00F2               	movwf	memset@c
  9327  1F6D  00F3               	movwf	memset@c+1
  9328  1F6E  3008               	movlw	8
  9329  1F6F  00F4               	movwf	memset@n
  9330  1F70  3000               	movlw	0
  9331  1F71  00F5               	movwf	memset@n+1
  9332  1F72  160A  158A  20B2  160A  158A  	fcall	_memset
  9333  1F77                     l4991:	
  9334  1F77  30FF               	movlw	255
  9335  1F78  1283               	bcf	3,5	;RP0=0, select bank0
  9336  1F79  1303               	bcf	3,6	;RP1=0, select bank0
  9337  1F7A  00A0               	movwf	??_delete_row
  9338  1F7B  0820               	movf	??_delete_row,w
  9339  1F7C  07A6               	addwf	delete_row@i,f
  9340  1F7D  2F0F               	goto	L16
  9341  1F7E                     __end_of_delete_row:	
  9342                           
  9343                           	psect	text27
  9344  199D                     __ptext27:	
  9345 ;; *************** function _memcpy *****************
  9346 ;; Defined at:
  9347 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  9348 ;; Parameters:    Size  Location     Type
  9349 ;;  d1              2    0[COMMON] PTR void 
  9350 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9351 ;;  s1              2    2[COMMON] PTR const void 
  9352 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9353 ;;  n               2    4[COMMON] unsigned int 
  9354 ;; Auto vars:     Size  Location     Type
  9355 ;;  s               2    9[COMMON] PTR const unsigned char 
  9356 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9357 ;;  d               2    7[COMMON] PTR unsigned char 
  9358 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9359 ;; Return value:  Size  Location     Type
  9360 ;;                  2    0[COMMON] PTR void 
  9361 ;; Registers used:
  9362 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9363 ;; Tracked objects:
  9364 ;;		On entry : 0/0
  9365 ;;		On exit  : 0/0
  9366 ;;		Unchanged: 0/0
  9367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9368 ;;      Params:         6       0       0       0       0
  9369 ;;      Locals:         4       0       0       0       0
  9370 ;;      Temps:          1       0       0       0       0
  9371 ;;      Totals:        11       0       0       0       0
  9372 ;;Total ram usage:       11 bytes
  9373 ;; Hardware stack levels used:    1
  9374 ;; This function calls:
  9375 ;;		Nothing
  9376 ;; This function is called by:
  9377 ;;		_delete_row
  9378 ;;		_merge1
  9379 ;; This function uses a non-reentrant model
  9380 ;;
  9381                           
  9382                           
  9383                           ;psect for function _memcpy
  9384  199D                     _memcpy:	
  9385                           
  9386                           ;incstack = 0
  9387                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  9388  199D  0872               	movf	memcpy@s1,w
  9389  199E  00F9               	movwf	memcpy@s
  9390  199F  0873               	movf	memcpy@s1+1,w
  9391  19A0  00FA               	movwf	memcpy@s+1
  9392  19A1  0870               	movf	memcpy@d1,w
  9393  19A2  00F7               	movwf	memcpy@d
  9394  19A3  0871               	movf	memcpy@d1+1,w
  9395  19A4  00F8               	movwf	memcpy@d+1
  9396  19A5                     l3483:	
  9397  19A5  3001               	movlw	1
  9398  19A6  02F4               	subwf	memcpy@n,f
  9399  19A7  3000               	movlw	0
  9400  19A8  1C03               	skipc
  9401  19A9  03F5               	decf	memcpy@n+1,f
  9402  19AA  02F5               	subwf	memcpy@n+1,f
  9403  19AB  0A74               	incf	memcpy@n,w
  9404  19AC  1903               	btfsc	3,2
  9405  19AD  0A75               	incf	memcpy@n+1,w
  9406  19AE  1903               	btfsc	3,2
  9407  19AF  0008               	return
  9408  19B0  0879               	movf	memcpy@s,w
  9409  19B1  0084               	movwf	4
  9410  19B2  1783               	bsf	3,7
  9411  19B3  1C7A               	btfss	memcpy@s+1,0
  9412  19B4  1383               	bcf	3,7
  9413  19B5  0800               	movf	0,w
  9414  19B6  00F6               	movwf	??_memcpy
  9415  19B7  0877               	movf	memcpy@d,w
  9416  19B8  0084               	movwf	4
  9417  19B9  1383               	bcf	3,7
  9418  19BA  1878               	btfsc	memcpy@d+1,0
  9419  19BB  1783               	bsf	3,7
  9420  19BC  0876               	movf	??_memcpy,w
  9421  19BD  0080               	movwf	0
  9422  19BE  3001               	movlw	1
  9423  19BF  07F9               	addwf	memcpy@s,f
  9424  19C0  1803               	skipnc
  9425  19C1  0AFA               	incf	memcpy@s+1,f
  9426  19C2  3001               	movlw	1
  9427  19C3  07F7               	addwf	memcpy@d,f
  9428  19C4  1803               	skipnc
  9429  19C5  0AF8               	incf	memcpy@d+1,f
  9430  19C6  29A5               	goto	l3483
  9431  19C7                     __end_of_memcpy:	
  9432                           ;	Return value of _memcpy is never used
  9433                           
  9434                           
  9435                           	psect	text28
  9436  194F                     __ptext28:	
  9437 ;; *************** function _debug_int1 *****************
  9438 ;; Defined at:
  9439 ;;		line 314 in file "teris_16f886.c"
  9440 ;; Parameters:    Size  Location     Type
  9441 ;;  enable          1    wreg     unsigned char 
  9442 ;;  f               2   31[BANK0 ] PTR const unsigned char 
  9443 ;;		 -> STR_97(13), STR_95(23), STR_93(19), STR_92(19), 
  9444 ;;		 -> STR_91(19), STR_90(20), STR_89(16), STR_88(15), 
  9445 ;;		 -> STR_85(19), STR_84(19), STR_83(19), STR_82(20), 
  9446 ;;		 -> STR_81(16), STR_80(15), STR_72(22), STR_65(15), 
  9447 ;;		 -> STR_58(14), STR_57(10), STR_56(11), STR_55(9), 
  9448 ;;		 -> STR_54(12), STR_53(9), STR_52(7), STR_50(21), 
  9449 ;;		 -> STR_49(16), STR_48(15), STR_47(10), STR_28(25), 
  9450 ;;		 -> STR_13(10), 
  9451 ;;  i               2   33[BANK0 ] int 
  9452 ;; Auto vars:     Size  Location     Type
  9453 ;;  enable          1   35[BANK0 ] unsigned char 
  9454 ;; Return value:  Size  Location     Type
  9455 ;;                  1    wreg      void 
  9456 ;; Registers used:
  9457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9458 ;; Tracked objects:
  9459 ;;		On entry : 0/0
  9460 ;;		On exit  : 0/0
  9461 ;;		Unchanged: 0/0
  9462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9463 ;;      Params:         0       4       0       0       0
  9464 ;;      Locals:         0       1       0       0       0
  9465 ;;      Temps:          0       0       0       0       0
  9466 ;;      Totals:         0       5       0       0       0
  9467 ;;Total ram usage:        5 bytes
  9468 ;; Hardware stack levels used:    1
  9469 ;; Hardware stack levels required when called:    2
  9470 ;; This function calls:
  9471 ;;		_USARTWriteString
  9472 ;;		_sprintf
  9473 ;; This function is called by:
  9474 ;;		_delete_matrix
  9475 ;;		_evaluate
  9476 ;;		_left_most
  9477 ;;		_right_most
  9478 ;;		_get_high
  9479 ;;		_get_high_after_merge
  9480 ;;		_get_holes_after_merge
  9481 ;;		_find_best_solution
  9482 ;;		_main
  9483 ;;		_printf_debug_all_MATRIX44
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           
  9488                           ;psect for function _debug_int1
  9489  194F                     _debug_int1:	
  9490                           
  9491                           ;incstack = 0
  9492                           ; Regs used in _debug_int1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9493                           ;debug_int1@enable stored from wreg
  9494  194F  1283               	bcf	3,5	;RP0=0, select bank0
  9495  1950  1303               	bcf	3,6	;RP1=0, select bank0
  9496  1951  00C3               	movwf	debug_int1@enable
  9497                           
  9498                           ;teris_16f886.c: 316: if(enable == 1)
  9499  1952  0343               	decf	debug_int1@enable,w
  9500  1953  1D03               	btfss	3,2
  9501  1954  0008               	return
  9502                           
  9503                           ;teris_16f886.c: 317: {
  9504                           ;teris_16f886.c: 322: sprintf(g_debug, f, i);
  9505  1955  083F               	movf	debug_int1@f,w
  9506  1956  00A0               	movwf	sprintf@f
  9507  1957  0840               	movf	debug_int1@f+1,w
  9508  1958  00A1               	movwf	sprintf@f+1
  9509  1959  0842               	movf	debug_int1@i+1,w
  9510  195A  00A3               	movwf	?_sprintf+3
  9511  195B  0841               	movf	debug_int1@i,w
  9512  195C  00A2               	movwf	?_sprintf+2
  9513  195D  3097               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9514  195E  160A  118A  2300  160A  158A  	fcall	_sprintf
  9515                           
  9516                           ;teris_16f886.c: 323: USARTWriteString(g_debug);
  9517  1963  3097               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9518  1964  00F1               	movwf	USARTWriteString@str
  9519  1965  3001               	movlw	1
  9520  1966  00F2               	movwf	USARTWriteString@str+1
  9521  1967  160A  158A  212A  160A  158A  	fcall	_USARTWriteString
  9522                           
  9523                           ;teris_16f886.c: 324: USARTWriteString("\r\n");
  9524  196C  30BA               	movlw	low (STR_1| (0+32768))
  9525  196D  00F1               	movwf	USARTWriteString@str
  9526  196E  308D               	movlw	high (STR_1| (0+32768))
  9527  196F  00F2               	movwf	USARTWriteString@str+1
  9528  1970  160A  158A  212A   	fcall	_USARTWriteString
  9529  1973  0008               	return
  9530  1974                     __end_of_debug_int1:	
  9531                           
  9532                           	psect	text29
  9533  1300                     __ptext29:	
  9534 ;; *************** function _sprintf *****************
  9535 ;; Defined at:
  9536 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  9537 ;; Parameters:    Size  Location     Type
  9538 ;;  sp              1    wreg     PTR unsigned char 
  9539 ;;		 -> g_debug(32), 
  9540 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  9541 ;;		 -> STR_97(13), STR_95(23), STR_93(19), STR_92(19), 
  9542 ;;		 -> STR_91(19), STR_90(20), STR_89(16), STR_88(15), 
  9543 ;;		 -> STR_85(19), STR_84(19), STR_83(19), STR_82(20), 
  9544 ;;		 -> STR_81(16), STR_80(15), STR_78(18), STR_77(19), 
  9545 ;;		 -> STR_76(18), STR_75(19), STR_74(18), STR_73(17), 
  9546 ;;		 -> STR_72(22), STR_71(18), STR_70(19), STR_69(18), 
  9547 ;;		 -> STR_68(19), STR_67(18), STR_66(20), STR_65(15), 
  9548 ;;		 -> STR_64(19), STR_58(14), STR_57(10), STR_56(11), 
  9549 ;;		 -> STR_55(9), STR_54(12), STR_53(9), STR_52(7), 
  9550 ;;		 -> STR_50(21), STR_49(16), STR_48(15), STR_47(10), 
  9551 ;;		 -> STR_46(15), STR_44(15), STR_39(19), STR_37(19), 
  9552 ;;		 -> STR_35(19), STR_31(24), STR_30(24), STR_28(25), 
  9553 ;;		 -> STR_14(27), STR_13(10), 
  9554 ;; Auto vars:     Size  Location     Type
  9555 ;;  sp              1   28[BANK0 ] PTR unsigned char 
  9556 ;;		 -> g_debug(32), 
  9557 ;;  idx             1   17[BANK0 ] unsigned char 
  9558 ;;  tmpval          4    0        struct .
  9559 ;;  flag            2   29[BANK0 ] unsigned short 
  9560 ;;  width           2   25[BANK0 ] int 
  9561 ;;  val             2   22[BANK0 ] unsigned int 
  9562 ;;  len             2   19[BANK0 ] unsigned int 
  9563 ;;  c               1   27[BANK0 ] char 
  9564 ;;  prec            1   24[BANK0 ] char 
  9565 ;;  ap              1   21[BANK0 ] PTR void [1]
  9566 ;;		 -> ?_sprintf(2), 
  9567 ;;  cp              1   18[BANK0 ] PTR const unsigned char 
  9568 ;;		 -> sprintf@c(1), 
  9569 ;; Return value:  Size  Location     Type
  9570 ;;                  2    0[BANK0 ] int 
  9571 ;; Registers used:
  9572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9578 ;;      Params:         0       8       0       0       0
  9579 ;;      Locals:         0      20       0       0       0
  9580 ;;      Temps:          0       3       0       0       0
  9581 ;;      Totals:         0      31       0       0       0
  9582 ;;Total ram usage:       31 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:    1
  9585 ;; This function calls:
  9586 ;;		___bmul
  9587 ;;		___lwdiv
  9588 ;;		___lwmod
  9589 ;;		___wmul
  9590 ;;		_isdigit
  9591 ;; This function is called by:
  9592 ;;		_debug_int1
  9593 ;;		_debug_int2
  9594 ;;		_debug_int3
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           
  9599                           ;psect for function _sprintf
  9600  1300                     _sprintf:	
  9601                           
  9602                           ;incstack = 0
  9603                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9604                           ;sprintf@sp stored from wreg
  9605  1300  1283               	bcf	3,5	;RP0=0, select bank0
  9606  1301  1303               	bcf	3,6	;RP1=0, select bank0
  9607  1302  00BC               	movwf	sprintf@sp
  9608                           
  9609                           ;doprnt.c: 494: va_list ap;
  9610                           ;doprnt.c: 499: signed char c;
  9611                           ;doprnt.c: 501: int width;
  9612                           ;doprnt.c: 506: signed char prec;
  9613                           ;doprnt.c: 508: unsigned short flag;
  9614                           ;doprnt.c: 523: union {
  9615                           ;doprnt.c: 524: unsigned long vd;
  9616                           ;doprnt.c: 525: double integ;
  9617                           ;doprnt.c: 526: } tmpval;
  9618                           ;doprnt.c: 528: unsigned int val;
  9619                           ;doprnt.c: 529: unsigned len;
  9620                           ;doprnt.c: 530: const char * cp;
  9621                           ;doprnt.c: 533: *ap = __va_start();
  9622  1303  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  9623  1304  00A8               	movwf	??_sprintf
  9624  1305  0828               	movf	??_sprintf,w
  9625  1306  00B5               	movwf	sprintf@ap
  9626  1307                     l3417:	
  9627                           ;doprnt.c: 536: while(c = *f++) {
  9628                           
  9629  1307  1283               	bcf	3,5	;RP0=0, select bank0
  9630  1308  1303               	bcf	3,6	;RP1=0, select bank0
  9631  1309  0821               	movf	sprintf@f+1,w
  9632  130A  00A9               	movwf	??_sprintf+1
  9633  130B  0820               	movf	sprintf@f,w
  9634  130C  00A8               	movwf	??_sprintf
  9635  130D  0AA0               	incf	sprintf@f,f
  9636  130E  1903               	skipnz
  9637  130F  0AA1               	incf	sprintf@f+1,f
  9638  1310  0829               	movf	??_sprintf+1,w
  9639  1311  00FF               	movwf	127
  9640  1312  0828               	movf	??_sprintf,w
  9641  1313  0084               	movwf	4
  9642  1314  120A  158A  2000  160A  118A  	fcall	stringtab
  9643  1319  00AA               	movwf	??_sprintf+2
  9644  131A  082A               	movf	??_sprintf+2,w
  9645  131B  00BB               	movwf	sprintf@c
  9646  131C  083B               	movf	sprintf@c,w
  9647  131D  1903               	btfsc	3,2
  9648  131E  2FFB               	goto	l3419
  9649                           
  9650                           ;doprnt.c: 538: if(c != '%')
  9651  131F  3025               	movlw	37
  9652  1320  063B               	xorwf	sprintf@c,w
  9653  1321  1903               	btfsc	3,2
  9654  1322  2B2F               	goto	l3109
  9655                           
  9656                           ;doprnt.c: 540: {
  9657                           ;doprnt.c: 541: ((*sp++ = (c)));
  9658  1323  083B               	movf	sprintf@c,w
  9659  1324  00A8               	movwf	??_sprintf
  9660  1325  083C               	movf	sprintf@sp,w
  9661  1326  0084               	movwf	4
  9662  1327  0828               	movf	??_sprintf,w
  9663  1328  1783               	bsf	3,7	;select IRP bank2
  9664  1329  0080               	movwf	0
  9665  132A  3001               	movlw	1
  9666  132B  00A8               	movwf	??_sprintf
  9667  132C  0828               	movf	??_sprintf,w
  9668  132D  07BC               	addwf	sprintf@sp,f
  9669                           
  9670                           ;doprnt.c: 542: continue;
  9671  132E  2B07               	goto	l3417
  9672  132F                     l3109:	
  9673                           
  9674                           ;doprnt.c: 543: }
  9675                           ;doprnt.c: 546: width = 0;
  9676  132F  01B9               	clrf	sprintf@width
  9677  1330  01BA               	clrf	sprintf@width+1
  9678                           
  9679                           ;doprnt.c: 548: flag = 0;
  9680  1331  01BD               	clrf	sprintf@flag
  9681  1332  01BE               	clrf	sprintf@flag+1
  9682                           
  9683                           ;doprnt.c: 551: switch(*f) {
  9684                           
  9685                           ;doprnt.c: 550: for(;;) {
  9686  1333  2B3F               	goto	l3113
  9687  1334                     l527:	
  9688                           ;doprnt.c: 553: case '-':
  9689                           
  9690                           
  9691                           ;doprnt.c: 554: flag |= 0x08;
  9692  1334  15BD               	bsf	sprintf@flag,3
  9693  1335  2B3B               	goto	L19
  9694  1336                     l529:	
  9695                           ;doprnt.c: 560: case ' ':
  9696                           
  9697                           ;doprnt.c: 556: continue;
  9698                           
  9699                           ;doprnt.c: 555: f++;
  9700                           
  9701                           
  9702                           ;doprnt.c: 561: flag |= 0x01;
  9703  1336  143D               	bsf	sprintf@flag,0
  9704  1337  2B3B               	goto	L19
  9705  1338                     l530:	
  9706                           ;doprnt.c: 573: case '#':
  9707                           
  9708                           ;doprnt.c: 563: continue;
  9709                           
  9710                           ;doprnt.c: 562: f++;
  9711                           
  9712                           
  9713                           ;doprnt.c: 574: flag |= 0x800;
  9714  1338  15BE               	bsf	sprintf@flag+1,3
  9715  1339  2B3B               	goto	L19
  9716  133A                     l531:	
  9717                           ;doprnt.c: 579: case '0':
  9718                           
  9719                           ;doprnt.c: 576: continue;
  9720                           
  9721                           ;doprnt.c: 575: f++;
  9722                           
  9723                           
  9724                           ;doprnt.c: 580: flag |= 0x04;
  9725  133A  153D               	bsf	sprintf@flag,2
  9726  133B                     L19:	
  9727                           
  9728                           ;doprnt.c: 581: f++;
  9729  133B  3001               	movlw	1
  9730  133C  07A0               	addwf	sprintf@f,f
  9731  133D  1803               	skipnc
  9732  133E  0AA1               	incf	sprintf@f+1,f
  9733  133F                     l3113:	
  9734                           ;doprnt.c: 584: }
  9735                           
  9736                           ;doprnt.c: 582: continue;
  9737                           
  9738  133F  0821               	movf	sprintf@f+1,w
  9739  1340  00FF               	movwf	127
  9740  1341  0820               	movf	sprintf@f,w
  9741  1342  0084               	movwf	4
  9742  1343  120A  158A  2000  160A  118A  	fcall	stringtab
  9743                           
  9744                           ; Switch size 1, requested type "space"
  9745                           ; Number of cases is 4, Range of values is 32 to 48
  9746                           ; switch strategies available:
  9747                           ; Name         Instructions Cycles
  9748                           ; simple_byte           13     7 (average)
  9749                           ; direct_byte           62    11 (fixed)
  9750                           ; jumptable            263     9 (fixed)
  9751                           ;	Chosen strategy is simple_byte
  9752  1348  3A20               	xorlw	32	; case 32
  9753  1349  1903               	skipnz
  9754  134A  2B36               	goto	l529
  9755  134B  3A03               	xorlw	3	; case 35
  9756  134C  1903               	skipnz
  9757  134D  2B38               	goto	l530
  9758  134E  3A0E               	xorlw	14	; case 45
  9759  134F  1903               	skipnz
  9760  1350  2B34               	goto	l527
  9761  1351  3A1D               	xorlw	29	; case 48
  9762  1352  1903               	skipnz
  9763  1353  2B3A               	goto	l531
  9764  1354  2B55               	goto	l533
  9765  1355                     l533:	
  9766                           ;doprnt.c: 586: }
  9767                           
  9768                           ;doprnt.c: 585: break;
  9769                           
  9770                           
  9771                           ;doprnt.c: 593: if(flag & 0x08)
  9772  1355  1DBD               	btfss	sprintf@flag,3
  9773  1356  2B5B               	goto	l3117
  9774                           
  9775                           ;doprnt.c: 594: flag &= ~0x04;
  9776  1357  30FB               	movlw	251
  9777  1358  05BD               	andwf	sprintf@flag,f
  9778  1359  30FF               	movlw	255
  9779  135A  05BE               	andwf	sprintf@flag+1,f
  9780  135B                     l3117:	
  9781                           
  9782                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9783  135B  0821               	movf	sprintf@f+1,w
  9784  135C  00FF               	movwf	127
  9785  135D  0820               	movf	sprintf@f,w
  9786  135E  0084               	movwf	4
  9787  135F  120A  158A  2000  160A  118A  	fcall	stringtab
  9788  1364  160A  158A  2035  160A  118A  	fcall	_isdigit
  9789  1369  1C03               	btfss	3,0
  9790  136A  2BAE               	goto	l3129
  9791                           
  9792                           ;doprnt.c: 598: width = 0;
  9793  136B  1283               	bcf	3,5	;RP0=0, select bank0
  9794  136C  1303               	bcf	3,6	;RP1=0, select bank0
  9795  136D  01B9               	clrf	sprintf@width
  9796  136E  01BA               	clrf	sprintf@width+1
  9797  136F                     l3121:	
  9798                           ;doprnt.c: 599: do {
  9799                           
  9800                           
  9801                           ;doprnt.c: 600: width *= 10;
  9802  136F  300A               	movlw	10
  9803  1370  00F0               	movwf	___wmul@multiplier
  9804  1371  3000               	movlw	0
  9805  1372  00F1               	movwf	___wmul@multiplier+1
  9806  1373  1283               	bcf	3,5	;RP0=0, select bank0
  9807  1374  1303               	bcf	3,6	;RP1=0, select bank0
  9808  1375  083A               	movf	sprintf@width+1,w
  9809  1376  00F3               	movwf	___wmul@multiplicand+1
  9810  1377  0839               	movf	sprintf@width,w
  9811  1378  00F2               	movwf	___wmul@multiplicand
  9812  1379  160A  158A  2109  160A  118A  	fcall	___wmul
  9813  137E  0871               	movf	?___wmul+1,w
  9814  137F  1283               	bcf	3,5	;RP0=0, select bank0
  9815  1380  1303               	bcf	3,6	;RP1=0, select bank0
  9816  1381  00BA               	movwf	sprintf@width+1
  9817  1382  0870               	movf	?___wmul,w
  9818  1383  00B9               	movwf	sprintf@width
  9819                           
  9820                           ;doprnt.c: 601: width += *f++ - '0';
  9821  1384  0821               	movf	sprintf@f+1,w
  9822  1385  00FF               	movwf	127
  9823  1386  0820               	movf	sprintf@f,w
  9824  1387  0084               	movwf	4
  9825  1388  120A  158A  2000  160A  118A  	fcall	stringtab
  9826  138D  3ED0               	addlw	208
  9827  138E  00A8               	movwf	??_sprintf
  9828  138F  30FF               	movlw	255
  9829  1390  1803               	skipnc
  9830  1391  3000               	movlw	0
  9831  1392  00A9               	movwf	??_sprintf+1
  9832  1393  0828               	movf	??_sprintf,w
  9833  1394  07B9               	addwf	sprintf@width,f
  9834  1395  1803               	skipnc
  9835  1396  0ABA               	incf	sprintf@width+1,f
  9836  1397  0829               	movf	??_sprintf+1,w
  9837  1398  07BA               	addwf	sprintf@width+1,f
  9838  1399  3001               	movlw	1
  9839  139A  07A0               	addwf	sprintf@f,f
  9840  139B  1803               	skipnc
  9841  139C  0AA1               	incf	sprintf@f+1,f
  9842                           
  9843                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9844  139D  0821               	movf	sprintf@f+1,w
  9845  139E  00FF               	movwf	127
  9846  139F  0820               	movf	sprintf@f,w
  9847  13A0  0084               	movwf	4
  9848  13A1  120A  158A  2000  160A  118A  	fcall	stringtab
  9849  13A6  160A  158A  2035  160A  118A  	fcall	_isdigit
  9850  13AB  1C03               	btfss	3,0
  9851  13AC  2BCC               	goto	l3137
  9852  13AD  2B6F               	goto	l3121
  9853  13AE                     l3129:	
  9854                           ;doprnt.c: 604: } else if(*f == '*') {
  9855                           
  9856  13AE  1283               	bcf	3,5	;RP0=0, select bank0
  9857  13AF  1303               	bcf	3,6	;RP1=0, select bank0
  9858  13B0  0821               	movf	sprintf@f+1,w
  9859  13B1  00FF               	movwf	127
  9860  13B2  0820               	movf	sprintf@f,w
  9861  13B3  0084               	movwf	4
  9862  13B4  120A  158A  2000  160A  118A  	fcall	stringtab
  9863  13B9  3A2A               	xorlw	42
  9864  13BA  1D03               	skipz
  9865  13BB  2BCC               	goto	l3137
  9866                           
  9867                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  9868  13BC  0835               	movf	sprintf@ap,w
  9869  13BD  0084               	movwf	4
  9870  13BE  1383               	bcf	3,7	;select IRP bank0
  9871  13BF  0800               	movf	0,w
  9872  13C0  00B9               	movwf	sprintf@width
  9873  13C1  0A84               	incf	4,f
  9874  13C2  0800               	movf	0,w
  9875  13C3  00BA               	movwf	sprintf@width+1
  9876  13C4  3002               	movlw	2
  9877  13C5  00A8               	movwf	??_sprintf
  9878  13C6  0828               	movf	??_sprintf,w
  9879  13C7  07B5               	addwf	sprintf@ap,f
  9880                           
  9881                           ;doprnt.c: 606: f++;
  9882  13C8  3001               	movlw	1
  9883  13C9  07A0               	addwf	sprintf@f,f
  9884  13CA  1803               	skipnc
  9885  13CB  0AA1               	incf	sprintf@f+1,f
  9886  13CC                     l3137:	
  9887                           
  9888                           ;doprnt.c: 608: }
  9889                           ;doprnt.c: 611: if(*f == '.') {
  9890  13CC  1283               	bcf	3,5	;RP0=0, select bank0
  9891  13CD  1303               	bcf	3,6	;RP1=0, select bank0
  9892  13CE  0821               	movf	sprintf@f+1,w
  9893  13CF  00FF               	movwf	127
  9894  13D0  0820               	movf	sprintf@f,w
  9895  13D1  0084               	movwf	4
  9896  13D2  120A  158A  2000  160A  118A  	fcall	stringtab
  9897  13D7  3A2E               	xorlw	46
  9898  13D8  1D03               	skipz
  9899  13D9  2C2E               	goto	l3155
  9900                           
  9901                           ;doprnt.c: 612: flag |= 0x4000;
  9902  13DA  173E               	bsf	sprintf@flag+1,6
  9903                           
  9904                           ;doprnt.c: 613: f++;
  9905  13DB  3001               	movlw	1
  9906  13DC  07A0               	addwf	sprintf@f,f
  9907  13DD  1803               	skipnc
  9908  13DE  0AA1               	incf	sprintf@f+1,f
  9909                           
  9910                           ;doprnt.c: 615: if(*f == '*') {
  9911  13DF  0821               	movf	sprintf@f+1,w
  9912  13E0  00FF               	movwf	127
  9913  13E1  0820               	movf	sprintf@f,w
  9914  13E2  0084               	movwf	4
  9915  13E3  120A  158A  2000  160A  118A  	fcall	stringtab
  9916  13E8  3A2A               	xorlw	42
  9917  13E9  1D03               	skipz
  9918  13EA  2BFB               	goto	l3149
  9919                           
  9920                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  9921  13EB  0835               	movf	sprintf@ap,w
  9922  13EC  0084               	movwf	4
  9923  13ED  1383               	bcf	3,7	;select IRP bank0
  9924  13EE  0800               	movf	0,w
  9925  13EF  00A8               	movwf	??_sprintf
  9926  13F0  0828               	movf	??_sprintf,w
  9927  13F1  00B8               	movwf	sprintf@prec
  9928  13F2  3002               	movlw	2
  9929  13F3  00A8               	movwf	??_sprintf
  9930  13F4  0828               	movf	??_sprintf,w
  9931  13F5  07B5               	addwf	sprintf@ap,f
  9932                           
  9933                           ;doprnt.c: 617: f++;
  9934  13F6  3001               	movlw	1
  9935  13F7  07A0               	addwf	sprintf@f,f
  9936  13F8  1803               	skipnc
  9937  13F9  0AA1               	incf	sprintf@f+1,f
  9938                           
  9939                           ;doprnt.c: 618: } else
  9940  13FA  2CCA               	goto	l3207
  9941  13FB                     l3149:	
  9942                           
  9943                           ;doprnt.c: 620: {
  9944                           ;doprnt.c: 621: prec = 0;
  9945  13FB  01B8               	clrf	sprintf@prec
  9946  13FC                     l543:	
  9947                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  9948                           
  9949  13FC  0821               	movf	sprintf@f+1,w
  9950  13FD  00FF               	movwf	127
  9951  13FE  0820               	movf	sprintf@f,w
  9952  13FF  0084               	movwf	4
  9953  1400  120A  158A  2000  160A  118A  	fcall	stringtab
  9954  1405  160A  158A  2035  160A  118A  	fcall	_isdigit
  9955  140A  1C03               	btfss	3,0
  9956  140B  2CCA               	goto	l3207
  9957                           
  9958                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  9959  140C  1283               	bcf	3,5	;RP0=0, select bank0
  9960  140D  1303               	bcf	3,6	;RP1=0, select bank0
  9961  140E  0821               	movf	sprintf@f+1,w
  9962  140F  00FF               	movwf	127
  9963  1410  0820               	movf	sprintf@f,w
  9964  1411  0084               	movwf	4
  9965  1412  120A  158A  2000  160A  118A  	fcall	stringtab
  9966  1417  00A8               	movwf	??_sprintf
  9967  1418  300A               	movlw	10
  9968  1419  00A9               	movwf	??_sprintf+1
  9969  141A  0829               	movf	??_sprintf+1,w
  9970  141B  00F0               	movwf	___bmul@multiplicand
  9971  141C  0838               	movf	sprintf@prec,w
  9972  141D  160A  158A  2043  160A  118A  	fcall	___bmul
  9973  1422  1283               	bcf	3,5	;RP0=0, select bank0
  9974  1423  1303               	bcf	3,6	;RP1=0, select bank0
  9975  1424  0728               	addwf	??_sprintf,w
  9976  1425  3ED0               	addlw	-48
  9977  1426  00AA               	movwf	??_sprintf+2
  9978  1427  082A               	movf	??_sprintf+2,w
  9979  1428  00B8               	movwf	sprintf@prec
  9980  1429  3001               	movlw	1
  9981  142A  07A0               	addwf	sprintf@f,f
  9982  142B  1803               	skipnc
  9983  142C  0AA1               	incf	sprintf@f+1,f
  9984  142D  2BFC               	goto	l543
  9985  142E                     l3155:	
  9986                           ;doprnt.c: 624: }
  9987                           ;doprnt.c: 625: } else {
  9988                           
  9989                           
  9990                           ;doprnt.c: 626: prec = 0;
  9991  142E  1283               	bcf	3,5	;RP0=0, select bank0
  9992  142F  1303               	bcf	3,6	;RP1=0, select bank0
  9993  1430  01B8               	clrf	sprintf@prec
  9994                           
  9995                           ;doprnt.c: 630: }
  9996                           ;doprnt.c: 635: switch(c = *f++) {
  9997  1431  2CCA               	goto	l3207
  9998  1432                     l550:	
  9999                           ;doprnt.c: 689: case 'o':
 10000                           
 10001                           ;doprnt.c: 638: goto alldone;
 10002                           
 10003                           ;doprnt.c: 637: case 0:
 10004                           
 10005                           
 10006                           ;doprnt.c: 691: flag |= 0x40;
 10007  1432  173D               	bsf	sprintf@flag,6
 10008                           
 10009                           ;doprnt.c: 698: case 'i':
 10010                           ;doprnt.c: 699: break;
 10011                           
 10012                           ;doprnt.c: 697: case 'd':
 10013                           
 10014                           ;doprnt.c: 693: break;
 10015  1433  2CF6               	goto	l3209
 10016  1434                     l554:	
 10017                           ;doprnt.c: 712: case 'X':
 10018                           
 10019                           
 10020                           ;doprnt.c: 714: flag |= 0x20;
 10021  1434  16BD               	bsf	sprintf@flag,5
 10022  1435                     l555:	
 10023                           ;doprnt.c: 718: case 'x':
 10024                           
 10025                           
 10026                           ;doprnt.c: 721: flag |= 0x80;
 10027  1435  17BD               	bsf	sprintf@flag,7
 10028                           
 10029                           ;doprnt.c: 723: break;
 10030  1436  2CF6               	goto	l3209
 10031  1437                     l3157:	
 10032                           ;doprnt.c: 750: dostring:
 10033                           
 10034                           
 10035                           ;doprnt.c: 753: if(prec && prec < len)
 10036  1437  0838               	movf	sprintf@prec,w
 10037  1438  1903               	btfsc	3,2
 10038  1439  2C4C               	goto	l3163
 10039  143A  0838               	movf	sprintf@prec,w
 10040  143B  00A8               	movwf	??_sprintf
 10041  143C  01A9               	clrf	??_sprintf+1
 10042  143D  1BA8               	btfsc	??_sprintf,7
 10043  143E  03A9               	decf	??_sprintf+1,f
 10044  143F  0834               	movf	sprintf@len+1,w
 10045  1440  0229               	subwf	??_sprintf+1,w
 10046  1441  1D03               	skipz
 10047  1442  2C45               	goto	u3655
 10048  1443  0833               	movf	sprintf@len,w
 10049  1444  0228               	subwf	??_sprintf,w
 10050  1445                     u3655:	
 10051  1445  1803               	skipnc
 10052  1446  2C4C               	goto	l3163
 10053                           
 10054                           ;doprnt.c: 754: len = prec;
 10055  1447  0838               	movf	sprintf@prec,w
 10056  1448  00B3               	movwf	sprintf@len
 10057  1449  01B4               	clrf	sprintf@len+1
 10058  144A  1BB3               	btfsc	sprintf@len,7
 10059  144B  03B4               	decf	sprintf@len+1,f
 10060  144C                     l3163:	
 10061                           
 10062                           ;doprnt.c: 757: if(width > len)
 10063  144C  083A               	movf	sprintf@width+1,w
 10064  144D  0234               	subwf	sprintf@len+1,w
 10065  144E  1D03               	skipz
 10066  144F  2C52               	goto	u3665
 10067  1450  0839               	movf	sprintf@width,w
 10068  1451  0233               	subwf	sprintf@len,w
 10069  1452                     u3665:	
 10070  1452  1803               	skipnc
 10071  1453  2C5B               	goto	l3167
 10072                           
 10073                           ;doprnt.c: 758: width -= len;
 10074  1454  0833               	movf	sprintf@len,w
 10075  1455  02B9               	subwf	sprintf@width,f
 10076  1456  0834               	movf	sprintf@len+1,w
 10077  1457  1C03               	skipc
 10078  1458  03BA               	decf	sprintf@width+1,f
 10079  1459  02BA               	subwf	sprintf@width+1,f
 10080  145A  2C5D               	goto	l3169
 10081  145B                     l3167:	
 10082                           
 10083                           ;doprnt.c: 759: else
 10084                           ;doprnt.c: 760: width = 0;
 10085  145B  01B9               	clrf	sprintf@width
 10086  145C  01BA               	clrf	sprintf@width+1
 10087  145D                     l3169:	
 10088                           
 10089                           ;doprnt.c: 762: if(!(flag & 0x08))
 10090  145D  1DBD               	btfss	sprintf@flag,3
 10091  145E  2C6B               	goto	l3177
 10092  145F  2C8A               	goto	l3185
 10093  1460                     l3173:	
 10094                           ;doprnt.c: 764: while(width--)
 10095                           
 10096                           
 10097                           ;doprnt.c: 765: ((*sp++ = (' ')));
 10098  1460  3020               	movlw	32
 10099  1461  00A8               	movwf	??_sprintf
 10100  1462  083C               	movf	sprintf@sp,w
 10101  1463  0084               	movwf	4
 10102  1464  0828               	movf	??_sprintf,w
 10103  1465  1783               	bsf	3,7	;select IRP bank2
 10104  1466  0080               	movwf	0
 10105  1467  3001               	movlw	1
 10106  1468  00A8               	movwf	??_sprintf
 10107  1469  0828               	movf	??_sprintf,w
 10108  146A  07BC               	addwf	sprintf@sp,f
 10109  146B                     l3177:	
 10110  146B  30FF               	movlw	255
 10111  146C  07B9               	addwf	sprintf@width,f
 10112  146D  1803               	skipnc
 10113  146E  0ABA               	incf	sprintf@width+1,f
 10114  146F  30FF               	movlw	255
 10115  1470  07BA               	addwf	sprintf@width+1,f
 10116  1471  0A39               	incf	sprintf@width,w
 10117  1472  1D03               	skipz
 10118  1473  2C60               	goto	l3173
 10119  1474  0A3A               	incf	sprintf@width+1,w
 10120  1475  1903               	btfsc	3,2
 10121  1476  2C8A               	goto	l3185
 10122  1477  2C60               	goto	l3173
 10123  1478                     l3179:	
 10124                           ;doprnt.c: 767: while(len--)
 10125                           
 10126                           
 10127                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 10128  1478  0832               	movf	sprintf@cp,w
 10129  1479  0084               	movwf	4
 10130  147A  1383               	bcf	3,7	;select IRP bank0
 10131  147B  0800               	movf	0,w
 10132  147C  00A8               	movwf	??_sprintf
 10133  147D  083C               	movf	sprintf@sp,w
 10134  147E  0084               	movwf	4
 10135  147F  0828               	movf	??_sprintf,w
 10136  1480  1783               	bsf	3,7	;select IRP bank2
 10137  1481  0080               	movwf	0
 10138  1482  3001               	movlw	1
 10139  1483  00A8               	movwf	??_sprintf
 10140  1484  0828               	movf	??_sprintf,w
 10141  1485  07B2               	addwf	sprintf@cp,f
 10142  1486  3001               	movlw	1
 10143  1487  00A8               	movwf	??_sprintf
 10144  1488  0828               	movf	??_sprintf,w
 10145  1489  07BC               	addwf	sprintf@sp,f
 10146  148A                     l3185:	
 10147  148A  3001               	movlw	1
 10148  148B  02B3               	subwf	sprintf@len,f
 10149  148C  3000               	movlw	0
 10150  148D  1C03               	skipc
 10151  148E  03B4               	decf	sprintf@len+1,f
 10152  148F  02B4               	subwf	sprintf@len+1,f
 10153  1490  0A33               	incf	sprintf@len,w
 10154  1491  1D03               	skipz
 10155  1492  2C78               	goto	l3179
 10156  1493  0A34               	incf	sprintf@len+1,w
 10157  1494  1D03               	btfss	3,2
 10158  1495  2C78               	goto	l3179
 10159                           
 10160                           ;doprnt.c: 770: if(flag & 0x08)
 10161  1496  19BD               	btfsc	sprintf@flag,3
 10162  1497  2CA4               	goto	l3193
 10163  1498  2B07               	goto	l3417
 10164  1499                     l3189:	
 10165                           ;doprnt.c: 771: while(width--)
 10166                           
 10167                           
 10168                           ;doprnt.c: 772: ((*sp++ = (' ')));
 10169  1499  3020               	movlw	32
 10170  149A  00A8               	movwf	??_sprintf
 10171  149B  083C               	movf	sprintf@sp,w
 10172  149C  0084               	movwf	4
 10173  149D  0828               	movf	??_sprintf,w
 10174  149E  1783               	bsf	3,7	;select IRP bank2
 10175  149F  0080               	movwf	0
 10176  14A0  3001               	movlw	1
 10177  14A1  00A8               	movwf	??_sprintf
 10178  14A2  0828               	movf	??_sprintf,w
 10179  14A3  07BC               	addwf	sprintf@sp,f
 10180  14A4                     l3193:	
 10181  14A4  30FF               	movlw	255
 10182  14A5  07B9               	addwf	sprintf@width,f
 10183  14A6  1803               	skipnc
 10184  14A7  0ABA               	incf	sprintf@width+1,f
 10185  14A8  30FF               	movlw	255
 10186  14A9  07BA               	addwf	sprintf@width+1,f
 10187  14AA  0A39               	incf	sprintf@width,w
 10188  14AB  1D03               	skipz
 10189  14AC  2C99               	goto	l3189
 10190  14AD  0A3A               	incf	sprintf@width+1,w
 10191  14AE  1903               	btfsc	3,2
 10192  14AF  2B07               	goto	l3417
 10193  14B0  2C99               	goto	l3189
 10194  14B1                     l3195:	
 10195                           ;doprnt.c: 784: case 'c':
 10196                           
 10197                           ;doprnt.c: 774: continue;
 10198                           
 10199                           
 10200                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 10201  14B1  0835               	movf	sprintf@ap,w
 10202  14B2  0084               	movwf	4
 10203  14B3  1383               	bcf	3,7	;select IRP bank0
 10204  14B4  0800               	movf	0,w
 10205  14B5  00A8               	movwf	??_sprintf
 10206  14B6  0828               	movf	??_sprintf,w
 10207  14B7  00BB               	movwf	sprintf@c
 10208  14B8  3002               	movlw	2
 10209  14B9  00A8               	movwf	??_sprintf
 10210  14BA  0828               	movf	??_sprintf,w
 10211  14BB  07B5               	addwf	sprintf@ap,f
 10212  14BC                     l3199:	
 10213                           ;doprnt.c: 802: default:
 10214                           
 10215                           
 10216                           ;doprnt.c: 805: cp = (char *)&c;
 10217  14BC  303B               	movlw	(low (sprintf@c| 0))& (0+255)
 10218  14BD  00A8               	movwf	??_sprintf
 10219  14BE  0828               	movf	??_sprintf,w
 10220  14BF  00B2               	movwf	sprintf@cp
 10221                           
 10222                           ;doprnt.c: 806: len = 1;
 10223  14C0  3001               	movlw	1
 10224  14C1  00B3               	movwf	sprintf@len
 10225  14C2  3000               	movlw	0
 10226  14C3  00B4               	movwf	sprintf@len+1
 10227                           
 10228                           ;doprnt.c: 807: goto dostring;
 10229  14C4  2C37               	goto	l3157
 10230  14C5                     l3203:	
 10231                           ;doprnt.c: 817: case 'u':
 10232                           
 10233                           
 10234                           ;doprnt.c: 818: flag |= 0xC0;
 10235  14C5  30C0               	movlw	192
 10236  14C6  04BD               	iorwf	sprintf@flag,f
 10237  14C7  3000               	movlw	0
 10238  14C8  04BE               	iorwf	sprintf@flag+1,f
 10239                           
 10240                           ;doprnt.c: 822: }
 10241                           
 10242                           ;doprnt.c: 819: break;
 10243  14C9  2CF6               	goto	l3209
 10244  14CA                     l3207:	
 10245  14CA  1283               	bcf	3,5	;RP0=0, select bank0
 10246  14CB  1303               	bcf	3,6	;RP1=0, select bank0
 10247  14CC  0821               	movf	sprintf@f+1,w
 10248  14CD  00A9               	movwf	??_sprintf+1
 10249  14CE  0820               	movf	sprintf@f,w
 10250  14CF  00A8               	movwf	??_sprintf
 10251  14D0  0AA0               	incf	sprintf@f,f
 10252  14D1  1903               	skipnz
 10253  14D2  0AA1               	incf	sprintf@f+1,f
 10254  14D3  0829               	movf	??_sprintf+1,w
 10255  14D4  00FF               	movwf	127
 10256  14D5  0828               	movf	??_sprintf,w
 10257  14D6  0084               	movwf	4
 10258  14D7  120A  158A  2000  160A  118A  	fcall	stringtab
 10259  14DC  00BB               	movwf	sprintf@c
 10260                           
 10261                           ; Switch size 1, requested type "space"
 10262                           ; Number of cases is 8, Range of values is 0 to 120
 10263                           ; switch strategies available:
 10264                           ; Name         Instructions Cycles
 10265                           ; simple_byte           25    13 (average)
 10266                           ; jumptable            260     6 (fixed)
 10267                           ;	Chosen strategy is simple_byte
 10268  14DD  3A00               	xorlw	0	; case 0
 10269  14DE  1903               	skipnz
 10270  14DF  2FFB               	goto	l3419
 10271  14E0  3A58               	xorlw	88	; case 88
 10272  14E1  1903               	skipnz
 10273  14E2  2C34               	goto	l554
 10274  14E3  3A3B               	xorlw	59	; case 99
 10275  14E4  1903               	skipnz
 10276  14E5  2CB1               	goto	l3195
 10277  14E6  3A07               	xorlw	7	; case 100
 10278  14E7  1903               	skipnz
 10279  14E8  2CF6               	goto	l3209
 10280  14E9  3A0D               	xorlw	13	; case 105
 10281  14EA  1903               	skipnz
 10282  14EB  2CF6               	goto	l3209
 10283  14EC  3A06               	xorlw	6	; case 111
 10284  14ED  1903               	skipnz
 10285  14EE  2C32               	goto	l550
 10286  14EF  3A1A               	xorlw	26	; case 117
 10287  14F0  1903               	skipnz
 10288  14F1  2CC5               	goto	l3203
 10289  14F2  3A0D               	xorlw	13	; case 120
 10290  14F3  1903               	skipnz
 10291  14F4  2C35               	goto	l555
 10292  14F5  2CBC               	goto	l3199
 10293  14F6                     l3209:	
 10294                           
 10295                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 10296  14F6  30C0               	movlw	192
 10297  14F7  053D               	andwf	sprintf@flag,w
 10298  14F8  00A8               	movwf	??_sprintf
 10299  14F9  3000               	movlw	0
 10300  14FA  053E               	andwf	sprintf@flag+1,w
 10301  14FB  00A9               	movwf	??_sprintf+1
 10302  14FC  0828               	movf	??_sprintf,w
 10303  14FD  0429               	iorwf	??_sprintf+1,w
 10304  14FE  1D03               	btfss	3,2
 10305  14FF  2D18               	goto	l3221
 10306                           
 10307                           ;doprnt.c: 1253: {
 10308                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10309  1500  0835               	movf	sprintf@ap,w
 10310  1501  0084               	movwf	4
 10311  1502  1383               	bcf	3,7	;select IRP bank0
 10312  1503  0800               	movf	0,w
 10313  1504  00B6               	movwf	sprintf@val
 10314  1505  0A84               	incf	4,f
 10315  1506  0800               	movf	0,w
 10316  1507  00B7               	movwf	sprintf@val+1
 10317  1508  3002               	movlw	2
 10318  1509  00A8               	movwf	??_sprintf
 10319  150A  0828               	movf	??_sprintf,w
 10320  150B  07B5               	addwf	sprintf@ap,f
 10321                           
 10322                           ;doprnt.c: 1261: if((int)val < 0) {
 10323  150C  1FB7               	btfss	sprintf@val+1,7
 10324  150D  2D24               	goto	l3225
 10325                           
 10326                           ;doprnt.c: 1262: flag |= 0x03;
 10327  150E  3003               	movlw	3
 10328  150F  04BD               	iorwf	sprintf@flag,f
 10329  1510  3000               	movlw	0
 10330  1511  04BE               	iorwf	sprintf@flag+1,f
 10331                           
 10332                           ;doprnt.c: 1263: val = -val;
 10333  1512  09B6               	comf	sprintf@val,f
 10334  1513  09B7               	comf	sprintf@val+1,f
 10335  1514  0AB6               	incf	sprintf@val,f
 10336  1515  1903               	skipnz
 10337  1516  0AB7               	incf	sprintf@val+1,f
 10338                           
 10339                           ;doprnt.c: 1264: }
 10340                           ;doprnt.c: 1266: }
 10341  1517  2D24               	goto	l3225
 10342  1518                     l3221:	
 10343                           
 10344                           ;doprnt.c: 1268: else
 10345                           ;doprnt.c: 1273: {
 10346                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10347  1518  0835               	movf	sprintf@ap,w
 10348  1519  0084               	movwf	4
 10349  151A  1383               	bcf	3,7	;select IRP bank0
 10350  151B  0800               	movf	0,w
 10351  151C  00B6               	movwf	sprintf@val
 10352  151D  0A84               	incf	4,f
 10353  151E  0800               	movf	0,w
 10354  151F  00B7               	movwf	sprintf@val+1
 10355  1520  3002               	movlw	2
 10356  1521  00A8               	movwf	??_sprintf
 10357  1522  0828               	movf	??_sprintf,w
 10358  1523  07B5               	addwf	sprintf@ap,f
 10359  1524                     l3225:	
 10360                           
 10361                           ;doprnt.c: 1287: }
 10362                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 10363  1524  0838               	movf	sprintf@prec,w
 10364  1525  1D03               	btfss	3,2
 10365  1526  2DA8               	goto	l3263
 10366  1527  0836               	movf	sprintf@val,w
 10367  1528  0437               	iorwf	sprintf@val+1,w
 10368  1529  1D03               	btfss	3,2
 10369  152A  2DA8               	goto	l3263
 10370                           
 10371                           ;doprnt.c: 1291: prec++;
 10372  152B  3001               	movlw	1
 10373  152C  00A8               	movwf	??_sprintf
 10374  152D  0828               	movf	??_sprintf,w
 10375  152E  07B8               	addwf	sprintf@prec,f
 10376                           
 10377                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 10378  152F  2DA8               	goto	l3263
 10379  1530                     l580:	
 10380                           ;doprnt.c: 1299: case 0x00:
 10381                           
 10382                           
 10383                           ;doprnt.c: 1302: case 0xC0:
 10384                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10385  1530  01BB               	clrf	sprintf@c
 10386  1531  0ABB               	incf	sprintf@c,f
 10387  1532                     L26:	
 10388  1532  3005               	movlw	5
 10389  1533  063B               	xorwf	sprintf@c,w
 10390  1534  1903               	btfsc	3,2
 10391  1535  2DB7               	goto	l3265
 10392                           
 10393                           ;doprnt.c: 1306: if(val < dpowers[c])
 10394  1536  083B               	movf	sprintf@c,w
 10395  1537  00A8               	movwf	??_sprintf
 10396  1538  0728               	addwf	??_sprintf,w
 10397  1539  3E1E               	addlw	low (_dpowers| (0+32768))
 10398  153A  0084               	movwf	4
 10399  153B  3088               	movlw	high (_dpowers| (0+32768))
 10400  153C  1803               	skipnc
 10401  153D  3E01               	addlw	1
 10402  153E  00FF               	movwf	127
 10403  153F  120A  158A  2000  160A  118A  	fcall	stringtab
 10404  1544  00A9               	movwf	??_sprintf+1
 10405  1545  120A  158A  2000  160A  118A  	fcall	stringtab
 10406  154A  00AA               	movwf	??_sprintf+2
 10407  154B  082A               	movf	??_sprintf+2,w
 10408  154C  0237               	subwf	sprintf@val+1,w
 10409  154D  1D03               	skipz
 10410  154E  2D51               	goto	u3775
 10411  154F  0829               	movf	??_sprintf+1,w
 10412  1550  0236               	subwf	sprintf@val,w
 10413  1551                     u3775:	
 10414  1551  1C03               	btfss	3,0
 10415  1552  2DB7               	goto	l3265
 10416                           
 10417                           ;doprnt.c: 1307: break;
 10418  1553  3001               	movlw	1
 10419  1554  00A8               	movwf	??_sprintf
 10420  1555  0828               	movf	??_sprintf,w
 10421  1556  07BB               	addwf	sprintf@c,f
 10422  1557  2D32               	goto	L26
 10423  1558                     l585:	
 10424                           ;doprnt.c: 1314: case 0x80:
 10425                           
 10426                           ;doprnt.c: 1309: break;
 10427                           
 10428                           
 10429                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10430  1558  01BB               	clrf	sprintf@c
 10431  1559  0ABB               	incf	sprintf@c,f
 10432  155A                     L27:	
 10433  155A  3004               	movlw	4
 10434  155B  063B               	xorwf	sprintf@c,w
 10435  155C  1903               	btfsc	3,2
 10436  155D  2DB7               	goto	l3265
 10437                           
 10438                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10439  155E  083B               	movf	sprintf@c,w
 10440  155F  00A8               	movwf	??_sprintf
 10441  1560  0728               	addwf	??_sprintf,w
 10442  1561  3E28               	addlw	low (_hexpowers| (0+32768))
 10443  1562  0084               	movwf	4
 10444  1563  3088               	movlw	high (_hexpowers| (0+32768))
 10445  1564  1803               	skipnc
 10446  1565  3E01               	addlw	1
 10447  1566  00FF               	movwf	127
 10448  1567  120A  158A  2000  160A  118A  	fcall	stringtab
 10449  156C  00A9               	movwf	??_sprintf+1
 10450  156D  120A  158A  2000  160A  118A  	fcall	stringtab
 10451  1572  00AA               	movwf	??_sprintf+2
 10452  1573  082A               	movf	??_sprintf+2,w
 10453  1574  0237               	subwf	sprintf@val+1,w
 10454  1575  1D03               	skipz
 10455  1576  2D79               	goto	u3805
 10456  1577  0829               	movf	??_sprintf+1,w
 10457  1578  0236               	subwf	sprintf@val,w
 10458  1579                     u3805:	
 10459  1579  1C03               	btfss	3,0
 10460  157A  2DB7               	goto	l3265
 10461                           
 10462                           ;doprnt.c: 1318: break;
 10463  157B  3001               	movlw	1
 10464  157C  00A8               	movwf	??_sprintf
 10465  157D  0828               	movf	??_sprintf,w
 10466  157E  07BB               	addwf	sprintf@c,f
 10467  157F  2D5A               	goto	L27
 10468  1580                     l589:	
 10469                           ;doprnt.c: 1326: case 0x40:
 10470                           
 10471                           ;doprnt.c: 1320: break;
 10472                           
 10473                           
 10474                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 10475  1580  01BB               	clrf	sprintf@c
 10476  1581  0ABB               	incf	sprintf@c,f
 10477  1582                     L28:	
 10478  1582  3006               	movlw	6
 10479  1583  063B               	xorwf	sprintf@c,w
 10480  1584  1903               	btfsc	3,2
 10481  1585  2DB7               	goto	l3265
 10482                           
 10483                           ;doprnt.c: 1329: if(val < octpowers[c])
 10484  1586  083B               	movf	sprintf@c,w
 10485  1587  00A8               	movwf	??_sprintf
 10486  1588  0728               	addwf	??_sprintf,w
 10487  1589  3E12               	addlw	low (_octpowers| (0+32768))
 10488  158A  0084               	movwf	4
 10489  158B  3088               	movlw	high (_octpowers| (0+32768))
 10490  158C  1803               	skipnc
 10491  158D  3E01               	addlw	1
 10492  158E  00FF               	movwf	127
 10493  158F  120A  158A  2000  160A  118A  	fcall	stringtab
 10494  1594  00A9               	movwf	??_sprintf+1
 10495  1595  120A  158A  2000  160A  118A  	fcall	stringtab
 10496  159A  00AA               	movwf	??_sprintf+2
 10497  159B  082A               	movf	??_sprintf+2,w
 10498  159C  0237               	subwf	sprintf@val+1,w
 10499  159D  1D03               	skipz
 10500  159E  2DA1               	goto	u3835
 10501  159F  0829               	movf	??_sprintf+1,w
 10502  15A0  0236               	subwf	sprintf@val,w
 10503  15A1                     u3835:	
 10504  15A1  1C03               	btfss	3,0
 10505  15A2  2DB7               	goto	l3265
 10506                           
 10507                           ;doprnt.c: 1330: break;
 10508  15A3  3001               	movlw	1
 10509  15A4  00A8               	movwf	??_sprintf
 10510  15A5  0828               	movf	??_sprintf,w
 10511  15A6  07BB               	addwf	sprintf@c,f
 10512  15A7  2D82               	goto	L28
 10513  15A8                     l3263:	
 10514                           ;doprnt.c: 1336: }
 10515                           
 10516                           ;doprnt.c: 1332: break;
 10517                           
 10518  15A8  083D               	movf	sprintf@flag,w
 10519  15A9  39C0               	andlw	192
 10520                           
 10521                           ; Switch size 1, requested type "space"
 10522                           ; Number of cases is 4, Range of values is 0 to 192
 10523                           ; switch strategies available:
 10524                           ; Name         Instructions Cycles
 10525                           ; simple_byte           13     7 (average)
 10526                           ; jumptable            260     6 (fixed)
 10527                           ;	Chosen strategy is simple_byte
 10528  15AA  3A00               	xorlw	0	; case 0
 10529  15AB  1903               	skipnz
 10530  15AC  2D30               	goto	l580
 10531  15AD  3A40               	xorlw	64	; case 64
 10532  15AE  1903               	skipnz
 10533  15AF  2D80               	goto	l589
 10534  15B0  3AC0               	xorlw	192	; case 128
 10535  15B1  1903               	skipnz
 10536  15B2  2D58               	goto	l585
 10537  15B3  3A40               	xorlw	64	; case 192
 10538  15B4  1903               	skipnz
 10539  15B5  2D30               	goto	l580
 10540  15B6  2DB7               	goto	l3265
 10541  15B7                     l3265:	
 10542                           
 10543                           ;doprnt.c: 1339: if(c < prec)
 10544  15B7  083B               	movf	sprintf@c,w
 10545  15B8  3A80               	xorlw	128
 10546  15B9  00A8               	movwf	??_sprintf
 10547  15BA  0838               	movf	sprintf@prec,w
 10548  15BB  3A80               	xorlw	128
 10549  15BC  02A8               	subwf	??_sprintf,f
 10550  15BD  1803               	skipnc
 10551  15BE  2DC4               	goto	l3269
 10552                           
 10553                           ;doprnt.c: 1340: c = prec;
 10554  15BF  0838               	movf	sprintf@prec,w
 10555  15C0  00A8               	movwf	??_sprintf
 10556  15C1  0828               	movf	??_sprintf,w
 10557  15C2  00BB               	movwf	sprintf@c
 10558  15C3  2DD0               	goto	l3273
 10559  15C4                     l3269:	
 10560                           
 10561                           ;doprnt.c: 1341: else if(prec < c)
 10562  15C4  0838               	movf	sprintf@prec,w
 10563  15C5  3A80               	xorlw	128
 10564  15C6  00A8               	movwf	??_sprintf
 10565  15C7  083B               	movf	sprintf@c,w
 10566  15C8  3A80               	xorlw	128
 10567  15C9  02A8               	subwf	??_sprintf,f
 10568  15CA  1803               	skipnc
 10569  15CB  2DD0               	goto	l3273
 10570                           
 10571                           ;doprnt.c: 1342: prec = c;
 10572  15CC  083B               	movf	sprintf@c,w
 10573  15CD  00A8               	movwf	??_sprintf
 10574  15CE  0828               	movf	??_sprintf,w
 10575  15CF  00B8               	movwf	sprintf@prec
 10576  15D0                     l3273:	
 10577                           
 10578                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10579  15D0  0839               	movf	sprintf@width,w
 10580  15D1  043A               	iorwf	sprintf@width+1,w
 10581  15D2  1903               	btfsc	3,2
 10582  15D3  2DE4               	goto	l3279
 10583  15D4  3003               	movlw	3
 10584  15D5  053D               	andwf	sprintf@flag,w
 10585  15D6  00A8               	movwf	??_sprintf
 10586  15D7  3000               	movlw	0
 10587  15D8  053E               	andwf	sprintf@flag+1,w
 10588  15D9  00A9               	movwf	??_sprintf+1
 10589  15DA  0828               	movf	??_sprintf,w
 10590  15DB  0429               	iorwf	??_sprintf+1,w
 10591  15DC  1903               	btfsc	3,2
 10592  15DD  2DE4               	goto	l3279
 10593                           
 10594                           ;doprnt.c: 1346: width--;
 10595  15DE  30FF               	movlw	255
 10596  15DF  07B9               	addwf	sprintf@width,f
 10597  15E0  1803               	skipnc
 10598  15E1  0ABA               	incf	sprintf@width+1,f
 10599  15E2  30FF               	movlw	255
 10600  15E3  07BA               	addwf	sprintf@width+1,f
 10601  15E4                     l3279:	
 10602                           
 10603                           ;doprnt.c: 1348: if(flag & 0x4000) {
 10604  15E4  1F3E               	btfss	sprintf@flag+1,6
 10605  15E5  2E09               	goto	l3287
 10606                           
 10607                           ;doprnt.c: 1349: if(width > prec)
 10608  15E6  0838               	movf	sprintf@prec,w
 10609  15E7  00A8               	movwf	??_sprintf
 10610  15E8  01A9               	clrf	??_sprintf+1
 10611  15E9  1BA8               	btfsc	??_sprintf,7
 10612  15EA  03A9               	decf	??_sprintf+1,f
 10613  15EB  0829               	movf	??_sprintf+1,w
 10614  15EC  3A80               	xorlw	128
 10615  15ED  00AA               	movwf	??_sprintf+2
 10616  15EE  083A               	movf	sprintf@width+1,w
 10617  15EF  3A80               	xorlw	128
 10618  15F0  022A               	subwf	??_sprintf+2,w
 10619  15F1  1D03               	skipz
 10620  15F2  2DF5               	goto	u3905
 10621  15F3  0839               	movf	sprintf@width,w
 10622  15F4  0228               	subwf	??_sprintf,w
 10623  15F5                     u3905:	
 10624  15F5  1803               	skipnc
 10625  15F6  2E05               	goto	l3285
 10626                           
 10627                           ;doprnt.c: 1350: width -= prec;
 10628  15F7  1283               	bcf	3,5	;RP0=0, select bank0
 10629  15F8  1303               	bcf	3,6	;RP1=0, select bank0
 10630  15F9  0838               	movf	sprintf@prec,w
 10631  15FA  00A8               	movwf	??_sprintf
 10632  15FB  01A9               	clrf	??_sprintf+1
 10633  15FC  1BA8               	btfsc	??_sprintf,7
 10634  15FD  03A9               	decf	??_sprintf+1,f
 10635  15FE  0828               	movf	??_sprintf,w
 10636  15FF  02B9               	subwf	sprintf@width,f
 10637  1600  0829               	movf	??_sprintf+1,w
 10638  1601  1C03               	skipc
 10639  1602  03BA               	decf	sprintf@width+1,f
 10640  1603  02BA               	subwf	sprintf@width+1,f
 10641  1604  2E09               	goto	l3287
 10642  1605                     l3285:	
 10643                           
 10644                           ;doprnt.c: 1351: else
 10645                           ;doprnt.c: 1352: width = 0;
 10646  1605  1283               	bcf	3,5	;RP0=0, select bank0
 10647  1606  1303               	bcf	3,6	;RP1=0, select bank0
 10648  1607  01B9               	clrf	sprintf@width
 10649  1608  01BA               	clrf	sprintf@width+1
 10650  1609                     l3287:	
 10651                           
 10652                           ;doprnt.c: 1353: }
 10653                           ;doprnt.c: 1357: if((flag & (
 10654                           ;doprnt.c: 1359: 0x04|
 10655                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
 10656  1609  30C4               	movlw	196
 10657  160A  053D               	andwf	sprintf@flag,w
 10658  160B  00A8               	movwf	??_sprintf
 10659  160C  3008               	movlw	8
 10660  160D  053E               	andwf	sprintf@flag+1,w
 10661  160E  00A9               	movwf	??_sprintf+1
 10662  160F  3040               	movlw	64
 10663  1610  0628               	xorwf	??_sprintf,w
 10664  1611  3008               	movlw	8
 10665  1612  1903               	skipnz
 10666  1613  0629               	xorwf	??_sprintf+1,w
 10667  1614  1D03               	btfss	3,2
 10668  1615  2E1C               	goto	l3293
 10669                           
 10670                           ;doprnt.c: 1362: if(width)
 10671  1616  0839               	movf	sprintf@width,w
 10672  1617  043A               	iorwf	sprintf@width+1,w
 10673  1618  1903               	btfsc	3,2
 10674  1619  2E41               	goto	l3301
 10675                           
 10676                           ;doprnt.c: 1363: width--;
 10677  161A  30FF               	movlw	255
 10678  161B  2E37               	goto	L20
 10679  161C                     l3293:	
 10680                           ;doprnt.c: 1364: } else
 10681                           
 10682                           
 10683                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10684  161C  30C0               	movlw	192
 10685  161D  053D               	andwf	sprintf@flag,w
 10686  161E  00A8               	movwf	??_sprintf
 10687  161F  3008               	movlw	8
 10688  1620  053E               	andwf	sprintf@flag+1,w
 10689  1621  00A9               	movwf	??_sprintf+1
 10690  1622  3080               	movlw	128
 10691  1623  0628               	xorwf	??_sprintf,w
 10692  1624  3008               	movlw	8
 10693  1625  1903               	skipnz
 10694  1626  0629               	xorwf	??_sprintf+1,w
 10695  1627  1D03               	btfss	3,2
 10696  1628  2E41               	goto	l3301
 10697                           
 10698                           ;doprnt.c: 1372: if(width > 2)
 10699  1629  083A               	movf	sprintf@width+1,w
 10700  162A  3A80               	xorlw	128
 10701  162B  00FF               	movwf	127
 10702  162C  3080               	movlw	128
 10703  162D  027F               	subwf	127,w
 10704  162E  1D03               	skipz
 10705  162F  2E32               	goto	u3945
 10706  1630  3003               	movlw	3
 10707  1631  0239               	subwf	sprintf@width,w
 10708  1632                     u3945:	
 10709  1632  1C03               	skipc
 10710  1633  2E3D               	goto	l3299
 10711                           
 10712                           ;doprnt.c: 1373: width -= 2;
 10713  1634  30FE               	movlw	254
 10714  1635  1283               	bcf	3,5	;RP0=0, select bank0
 10715  1636  1303               	bcf	3,6	;RP1=0, select bank0
 10716  1637                     L20:	
 10717  1637  07B9               	addwf	sprintf@width,f
 10718  1638  1803               	skipnc
 10719  1639  0ABA               	incf	sprintf@width+1,f
 10720  163A  30FF               	movlw	255
 10721  163B  07BA               	addwf	sprintf@width+1,f
 10722  163C  2E41               	goto	l3301
 10723  163D                     l3299:	
 10724                           
 10725                           ;doprnt.c: 1374: else
 10726                           ;doprnt.c: 1375: width = 0;
 10727  163D  1283               	bcf	3,5	;RP0=0, select bank0
 10728  163E  1303               	bcf	3,6	;RP1=0, select bank0
 10729  163F  01B9               	clrf	sprintf@width
 10730  1640  01BA               	clrf	sprintf@width+1
 10731  1641                     l3301:	
 10732                           
 10733                           ;doprnt.c: 1376: }
 10734                           ;doprnt.c: 1381: if(width > c)
 10735  1641  083B               	movf	sprintf@c,w
 10736  1642  00A8               	movwf	??_sprintf
 10737  1643  01A9               	clrf	??_sprintf+1
 10738  1644  1BA8               	btfsc	??_sprintf,7
 10739  1645  03A9               	decf	??_sprintf+1,f
 10740  1646  0829               	movf	??_sprintf+1,w
 10741  1647  3A80               	xorlw	128
 10742  1648  00AA               	movwf	??_sprintf+2
 10743  1649  083A               	movf	sprintf@width+1,w
 10744  164A  3A80               	xorlw	128
 10745  164B  022A               	subwf	??_sprintf+2,w
 10746  164C  1D03               	skipz
 10747  164D  2E50               	goto	u3955
 10748  164E  0839               	movf	sprintf@width,w
 10749  164F  0228               	subwf	??_sprintf,w
 10750  1650                     u3955:	
 10751  1650  1803               	skipnc
 10752  1651  2E60               	goto	l3305
 10753                           
 10754                           ;doprnt.c: 1382: width -= c;
 10755  1652  1283               	bcf	3,5	;RP0=0, select bank0
 10756  1653  1303               	bcf	3,6	;RP1=0, select bank0
 10757  1654  083B               	movf	sprintf@c,w
 10758  1655  00A8               	movwf	??_sprintf
 10759  1656  01A9               	clrf	??_sprintf+1
 10760  1657  1BA8               	btfsc	??_sprintf,7
 10761  1658  03A9               	decf	??_sprintf+1,f
 10762  1659  0828               	movf	??_sprintf,w
 10763  165A  02B9               	subwf	sprintf@width,f
 10764  165B  0829               	movf	??_sprintf+1,w
 10765  165C  1C03               	skipc
 10766  165D  03BA               	decf	sprintf@width+1,f
 10767  165E  02BA               	subwf	sprintf@width+1,f
 10768  165F  2E64               	goto	l3307
 10769  1660                     l3305:	
 10770                           
 10771                           ;doprnt.c: 1383: else
 10772                           ;doprnt.c: 1384: width = 0;
 10773  1660  1283               	bcf	3,5	;RP0=0, select bank0
 10774  1661  1303               	bcf	3,6	;RP1=0, select bank0
 10775  1662  01B9               	clrf	sprintf@width
 10776  1663  01BA               	clrf	sprintf@width+1
 10777  1664                     l3307:	
 10778                           
 10779                           ;doprnt.c: 1387: if(flag & 0x04) {
 10780  1664  1D3D               	btfss	sprintf@flag,2
 10781  1665  2EBB               	goto	l3343
 10782                           
 10783                           ;doprnt.c: 1392: if(flag & 0x03)
 10784  1666  3003               	movlw	3
 10785  1667  053D               	andwf	sprintf@flag,w
 10786  1668  00A8               	movwf	??_sprintf
 10787  1669  3000               	movlw	0
 10788  166A  053E               	andwf	sprintf@flag+1,w
 10789  166B  00A9               	movwf	??_sprintf+1
 10790  166C  0828               	movf	??_sprintf,w
 10791  166D  0429               	iorwf	??_sprintf+1,w
 10792  166E  1903               	btfsc	3,2
 10793  166F  2E72               	goto	l609
 10794                           
 10795                           ;doprnt.c: 1393: ((*sp++ = ('-')));
 10796  1670  302D               	movlw	45
 10797  1671  2E75               	goto	L33
 10798  1672                     l609:	
 10799                           
 10800                           ;doprnt.c: 1396: else
 10801                           ;doprnt.c: 1399: if(flag & 0x01)
 10802  1672  1C3D               	btfss	sprintf@flag,0
 10803  1673  2E7B               	goto	l3319
 10804                           
 10805                           ;doprnt.c: 1400: ((*sp++ = (' ')));
 10806  1674  3020               	movlw	32
 10807  1675                     L33:	
 10808  1675  00A8               	movwf	??_sprintf
 10809  1676  083C               	movf	sprintf@sp,w
 10810  1677  0084               	movwf	4
 10811  1678  0828               	movf	??_sprintf,w
 10812  1679  1783               	bsf	3,7	;select IRP bank2
 10813  167A  2EA0               	goto	L29
 10814  167B                     l3319:	
 10815                           
 10816                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10817  167B  30C0               	movlw	192
 10818  167C  053D               	andwf	sprintf@flag,w
 10819  167D  00A8               	movwf	??_sprintf
 10820  167E  3008               	movlw	8
 10821  167F  053E               	andwf	sprintf@flag+1,w
 10822  1680  00A9               	movwf	??_sprintf+1
 10823  1681  3080               	movlw	128
 10824  1682  0628               	xorwf	??_sprintf,w
 10825  1683  3008               	movlw	8
 10826  1684  1903               	skipnz
 10827  1685  0629               	xorwf	??_sprintf+1,w
 10828  1686  1D03               	btfss	3,2
 10829  1687  2EA5               	goto	l3335
 10830                           
 10831                           ;doprnt.c: 1404: ((*sp++ = ('0')));
 10832  1688  3030               	movlw	48
 10833  1689  00A8               	movwf	??_sprintf
 10834  168A  083C               	movf	sprintf@sp,w
 10835  168B  0084               	movwf	4
 10836  168C  0828               	movf	??_sprintf,w
 10837  168D  1783               	bsf	3,7	;select IRP bank2
 10838  168E  0080               	movwf	0
 10839  168F  3001               	movlw	1
 10840  1690  00A8               	movwf	??_sprintf
 10841  1691  0828               	movf	??_sprintf,w
 10842  1692  07BC               	addwf	sprintf@sp,f
 10843                           
 10844                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 10845  1693  1ABD               	btfsc	sprintf@flag,5
 10846  1694  2E97               	goto	l3329
 10847  1695  3078               	movlw	120
 10848  1696  2E98               	goto	L21
 10849  1697                     l3329:	
 10850  1697  3058               	movlw	88
 10851  1698                     L21:	
 10852  1698  00AB               	movwf	_sprintf$713
 10853  1699  3000               	movlw	0
 10854  169A  00AC               	movwf	_sprintf$713+1
 10855  169B  082B               	movf	_sprintf$713,w
 10856  169C  00A8               	movwf	??_sprintf
 10857  169D  083C               	movf	sprintf@sp,w
 10858  169E  0084               	movwf	4
 10859  169F  0828               	movf	??_sprintf,w
 10860  16A0                     L29:	
 10861  16A0  0080               	movwf	0
 10862  16A1  3001               	movlw	1
 10863  16A2  00A8               	movwf	??_sprintf
 10864  16A3  0828               	movf	??_sprintf,w
 10865  16A4  07BC               	addwf	sprintf@sp,f
 10866  16A5                     l3335:	
 10867                           
 10868                           ;doprnt.c: 1412: }
 10869                           ;doprnt.c: 1415: if(width)
 10870  16A5  0839               	movf	sprintf@width,w
 10871  16A6  043A               	iorwf	sprintf@width+1,w
 10872  16A7  1903               	btfsc	3,2
 10873  16A8  2FBF               	goto	l3407
 10874                           
 10875                           ;doprnt.c: 1417: ((*sp++ = ('0')));
 10876                           
 10877                           ;doprnt.c: 1416: do
 10878  16A9  3030               	movlw	48
 10879  16AA  00A8               	movwf	??_sprintf
 10880  16AB  083C               	movf	sprintf@sp,w
 10881  16AC  0084               	movwf	4
 10882  16AD  0828               	movf	??_sprintf,w
 10883  16AE  1783               	bsf	3,7	;select IRP bank2
 10884  16AF  0080               	movwf	0
 10885  16B0  3001               	movlw	1
 10886  16B1  00A8               	movwf	??_sprintf
 10887  16B2  0828               	movf	??_sprintf,w
 10888  16B3  07BC               	addwf	sprintf@sp,f
 10889                           
 10890                           ;doprnt.c: 1418: while(--width);
 10891  16B4  30FF               	movlw	255
 10892  16B5  07B9               	addwf	sprintf@width,f
 10893  16B6  1803               	skipnc
 10894  16B7  0ABA               	incf	sprintf@width+1,f
 10895  16B8  30FF               	movlw	255
 10896  16B9  07BA               	addwf	sprintf@width+1,f
 10897  16BA  2EA5               	goto	l3335
 10898  16BB                     l3343:	
 10899                           ;doprnt.c: 1420: } else
 10900                           
 10901                           
 10902                           ;doprnt.c: 1422: {
 10903                           ;doprnt.c: 1424: if(width
 10904                           ;doprnt.c: 1426: && !(flag & 0x08)
 10905                           ;doprnt.c: 1428: )
 10906  16BB  0839               	movf	sprintf@width,w
 10907  16BC  043A               	iorwf	sprintf@width+1,w
 10908  16BD  1D03               	btfss	3,2
 10909  16BE  19BD               	btfsc	sprintf@flag,3
 10910  16BF  2ED5               	goto	l3353
 10911  16C0                     l3347:	
 10912                           ;doprnt.c: 1429: do
 10913                           
 10914                           
 10915                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 10916  16C0  3020               	movlw	32
 10917  16C1  00A8               	movwf	??_sprintf
 10918  16C2  083C               	movf	sprintf@sp,w
 10919  16C3  0084               	movwf	4
 10920  16C4  0828               	movf	??_sprintf,w
 10921  16C5  1783               	bsf	3,7	;select IRP bank2
 10922  16C6  0080               	movwf	0
 10923  16C7  3001               	movlw	1
 10924  16C8  00A8               	movwf	??_sprintf
 10925  16C9  0828               	movf	??_sprintf,w
 10926  16CA  07BC               	addwf	sprintf@sp,f
 10927                           
 10928                           ;doprnt.c: 1431: while(--width);
 10929  16CB  30FF               	movlw	255
 10930  16CC  07B9               	addwf	sprintf@width,f
 10931  16CD  1803               	skipnc
 10932  16CE  0ABA               	incf	sprintf@width+1,f
 10933  16CF  30FF               	movlw	255
 10934  16D0  07BA               	addwf	sprintf@width+1,f
 10935  16D1  0839               	movf	sprintf@width,w
 10936  16D2  043A               	iorwf	sprintf@width+1,w
 10937  16D3  1D03               	btfss	3,2
 10938  16D4  2EC0               	goto	l3347
 10939  16D5                     l3353:	
 10940                           
 10941                           ;doprnt.c: 1438: if(flag & 0x03)
 10942  16D5  3003               	movlw	3
 10943  16D6  053D               	andwf	sprintf@flag,w
 10944  16D7  00A8               	movwf	??_sprintf
 10945  16D8  3000               	movlw	0
 10946  16D9  053E               	andwf	sprintf@flag+1,w
 10947  16DA  00A9               	movwf	??_sprintf+1
 10948  16DB  0828               	movf	??_sprintf,w
 10949  16DC  0429               	iorwf	??_sprintf+1,w
 10950  16DD  1903               	btfsc	3,2
 10951  16DE  2EE1               	goto	l625
 10952                           
 10953                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10954  16DF  302D               	movlw	45
 10955  16E0  2EE4               	goto	L30
 10956  16E1                     l625:	
 10957                           
 10958                           ;doprnt.c: 1443: else if(flag & 0x01)
 10959  16E1  1C3D               	btfss	sprintf@flag,0
 10960  16E2  2EEE               	goto	l3363
 10961                           
 10962                           ;doprnt.c: 1444: ((*sp++ = (' ')));
 10963  16E3  3020               	movlw	32
 10964  16E4                     L30:	
 10965  16E4  00A8               	movwf	??_sprintf
 10966  16E5  083C               	movf	sprintf@sp,w
 10967  16E6  0084               	movwf	4
 10968  16E7  0828               	movf	??_sprintf,w
 10969  16E8  1783               	bsf	3,7	;select IRP bank2
 10970  16E9  0080               	movwf	0
 10971  16EA  3001               	movlw	1
 10972  16EB  00A8               	movwf	??_sprintf
 10973  16EC  0828               	movf	??_sprintf,w
 10974  16ED  07BC               	addwf	sprintf@sp,f
 10975  16EE                     l3363:	
 10976                           
 10977                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 10978  16EE  30C0               	movlw	192
 10979  16EF  053D               	andwf	sprintf@flag,w
 10980  16F0  00A8               	movwf	??_sprintf
 10981  16F1  3008               	movlw	8
 10982  16F2  053E               	andwf	sprintf@flag+1,w
 10983  16F3  00A9               	movwf	??_sprintf+1
 10984  16F4  3040               	movlw	64
 10985  16F5  0628               	xorwf	??_sprintf,w
 10986  16F6  3008               	movlw	8
 10987  16F7  1903               	skipnz
 10988  16F8  0629               	xorwf	??_sprintf+1,w
 10989  16F9  1D03               	btfss	3,2
 10990  16FA  2EFD               	goto	l3369
 10991                           
 10992                           ;doprnt.c: 1449: ((*sp++ = ('0')));
 10993  16FB  3030               	movlw	48
 10994  16FC  2FB5               	goto	L34
 10995  16FD                     l3369:	
 10996                           
 10997                           ;doprnt.c: 1450: else
 10998                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10999  16FD  30C0               	movlw	192
 11000  16FE  053D               	andwf	sprintf@flag,w
 11001  16FF  00A8               	movwf	??_sprintf
 11002  1700  3008               	movlw	8
 11003  1701  053E               	andwf	sprintf@flag+1,w
 11004  1702  00A9               	movwf	??_sprintf+1
 11005  1703  3080               	movlw	128
 11006  1704  0628               	xorwf	??_sprintf,w
 11007  1705  3008               	movlw	8
 11008  1706  1903               	skipnz
 11009  1707  0629               	xorwf	??_sprintf+1,w
 11010  1708  1D03               	btfss	3,2
 11011  1709  2FBF               	goto	l3407
 11012                           
 11013                           ;doprnt.c: 1458: ((*sp++ = ('0')));
 11014  170A  3030               	movlw	48
 11015  170B  00A8               	movwf	??_sprintf
 11016  170C  083C               	movf	sprintf@sp,w
 11017  170D  0084               	movwf	4
 11018  170E  0828               	movf	??_sprintf,w
 11019  170F  1783               	bsf	3,7	;select IRP bank2
 11020  1710  0080               	movwf	0
 11021  1711  3001               	movlw	1
 11022  1712  00A8               	movwf	??_sprintf
 11023  1713  0828               	movf	??_sprintf,w
 11024  1714  07BC               	addwf	sprintf@sp,f
 11025                           
 11026                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 11027  1715  1ABD               	btfsc	sprintf@flag,5
 11028  1716  2F19               	goto	l3379
 11029  1717  3078               	movlw	120
 11030  1718  2F1A               	goto	L22
 11031  1719                     l3379:	
 11032  1719  3058               	movlw	88
 11033  171A                     L22:	
 11034  171A  00AD               	movwf	_sprintf$714
 11035  171B  3000               	movlw	0
 11036  171C  00AE               	movwf	_sprintf$714+1
 11037  171D  082D               	movf	_sprintf$714,w
 11038  171E  00A8               	movwf	??_sprintf
 11039  171F  083C               	movf	sprintf@sp,w
 11040  1720  0084               	movwf	4
 11041  1721  0828               	movf	??_sprintf,w
 11042  1722  2FBA               	goto	L31
 11043  1723                     l3385:	
 11044                           ;doprnt.c: 1478: {
 11045                           ;doprnt.c: 1483: case 0x00:
 11046                           
 11047                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
 11048                           
 11049                           ;doprnt.c: 1466: }
 11050                           ;doprnt.c: 1469: }
 11051                           ;doprnt.c: 1474: while(prec--) {
 11052                           
 11053                           
 11054                           ;doprnt.c: 1486: case 0xC0:
 11055                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11056  1723  300A               	movlw	10
 11057  1724  00F8               	movwf	___lwmod@divisor
 11058  1725  3000               	movlw	0
 11059  1726  00F9               	movwf	___lwmod@divisor+1
 11060  1727  0838               	movf	sprintf@prec,w
 11061  1728  00A8               	movwf	??_sprintf
 11062  1729  0728               	addwf	??_sprintf,w
 11063  172A  3E1E               	addlw	low (_dpowers| (0+32768))
 11064  172B  0084               	movwf	4
 11065  172C  3088               	movlw	high (_dpowers| (0+32768))
 11066  172D  1803               	skipnc
 11067  172E  3E01               	addlw	1
 11068  172F  00FF               	movwf	127
 11069  1730  120A  158A  2000  160A  118A  	fcall	stringtab
 11070  1735  00F0               	movwf	___lwdiv@divisor
 11071  1736  120A  158A  2000  160A  118A  	fcall	stringtab
 11072  173B  00F1               	movwf	___lwdiv@divisor+1
 11073  173C  0837               	movf	sprintf@val+1,w
 11074  173D  00F3               	movwf	___lwdiv@dividend+1
 11075  173E  0836               	movf	sprintf@val,w
 11076  173F  00F2               	movwf	___lwdiv@dividend
 11077  1740  160A  158A  2292  160A  118A  	fcall	___lwdiv
 11078  1745  0871               	movf	?___lwdiv+1,w
 11079  1746  00FB               	movwf	___lwmod@dividend+1
 11080  1747  0870               	movf	?___lwdiv,w
 11081  1748  00FA               	movwf	___lwmod@dividend
 11082  1749  160A  158A  21F7  160A  118A  	fcall	___lwmod
 11083  174E  0878               	movf	?___lwmod,w
 11084  174F  2FAE               	goto	L32
 11085  1750                     l3387:	
 11086                           ;doprnt.c: 1497: case 0x80:
 11087                           
 11088                           ;doprnt.c: 1491: break;
 11089                           
 11090                           
 11091                           ;doprnt.c: 1499: {
 11092                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11093  1750  0838               	movf	sprintf@prec,w
 11094  1751  00A8               	movwf	??_sprintf
 11095  1752  0728               	addwf	??_sprintf,w
 11096  1753  3E28               	addlw	low (_hexpowers| (0+32768))
 11097  1754  0084               	movwf	4
 11098  1755  3088               	movlw	high (_hexpowers| (0+32768))
 11099  1756  1803               	skipnc
 11100  1757  3E01               	addlw	1
 11101  1758  00FF               	movwf	127
 11102  1759  120A  158A  2000  160A  118A  	fcall	stringtab
 11103  175E  00F0               	movwf	___lwdiv@divisor
 11104  175F  120A  158A  2000  160A  118A  	fcall	stringtab
 11105  1764  00F1               	movwf	___lwdiv@divisor+1
 11106  1765  0837               	movf	sprintf@val+1,w
 11107  1766  00F3               	movwf	___lwdiv@dividend+1
 11108  1767  0836               	movf	sprintf@val,w
 11109  1768  00F2               	movwf	___lwdiv@dividend
 11110  1769  160A  158A  2292  160A  118A  	fcall	___lwdiv
 11111  176E  0870               	movf	?___lwdiv,w
 11112  176F  390F               	andlw	15
 11113  1770  1283               	bcf	3,5	;RP0=0, select bank0
 11114  1771  1303               	bcf	3,6	;RP1=0, select bank0
 11115  1772  00A9               	movwf	??_sprintf+1
 11116  1773  0829               	movf	??_sprintf+1,w
 11117  1774  00B1               	movwf	sprintf@idx
 11118                           
 11119                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 11120  1775  1ABD               	btfsc	sprintf@flag,5
 11121  1776  2F7B               	goto	l3393
 11122  1777  3071               	movlw	low (STR_100| (0+32768))
 11123  1778  00AF               	movwf	_sprintf$720
 11124  1779  308C               	movlw	high (STR_100| (0+32768))
 11125  177A  2F7E               	goto	L24
 11126  177B                     l3393:	
 11127  177B  3060               	movlw	low (STR_99| (0+32768))
 11128  177C  00AF               	movwf	_sprintf$720
 11129  177D  308C               	movlw	high (STR_99| (0+32768))
 11130  177E                     L24:	
 11131  177E  00B0               	movwf	_sprintf$720+1
 11132  177F  0831               	movf	sprintf@idx,w
 11133  1780  072F               	addwf	_sprintf$720,w
 11134  1781  0084               	movwf	4
 11135  1782  0830               	movf	_sprintf$720+1,w
 11136  1783  1803               	skipnc
 11137  1784  0A30               	incf	_sprintf$720+1,w
 11138  1785  00FF               	movwf	127
 11139  1786  120A  158A  2000  160A  118A  	fcall	stringtab
 11140  178B  00A8               	movwf	??_sprintf
 11141  178C  0828               	movf	??_sprintf,w
 11142  178D  2FB3               	goto	L25
 11143  178E                     l3397:	
 11144                           ;doprnt.c: 1516: case 0x40:
 11145                           
 11146                           ;doprnt.c: 1508: }
 11147                           ;doprnt.c: 1510: break;
 11148                           
 11149                           
 11150                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
 11151  178E  0838               	movf	sprintf@prec,w
 11152  178F  00A8               	movwf	??_sprintf
 11153  1790  0728               	addwf	??_sprintf,w
 11154  1791  3E12               	addlw	low (_octpowers| (0+32768))
 11155  1792  0084               	movwf	4
 11156  1793  3088               	movlw	high (_octpowers| (0+32768))
 11157  1794  1803               	skipnc
 11158  1795  3E01               	addlw	1
 11159  1796  00FF               	movwf	127
 11160  1797  120A  158A  2000  160A  118A  	fcall	stringtab
 11161  179C  00F0               	movwf	___lwdiv@divisor
 11162  179D  120A  158A  2000  160A  118A  	fcall	stringtab
 11163  17A2  00F1               	movwf	___lwdiv@divisor+1
 11164  17A3  0837               	movf	sprintf@val+1,w
 11165  17A4  00F3               	movwf	___lwdiv@dividend+1
 11166  17A5  0836               	movf	sprintf@val,w
 11167  17A6  00F2               	movwf	___lwdiv@dividend
 11168  17A7  160A  158A  2292  160A  118A  	fcall	___lwdiv
 11169  17AC  0870               	movf	?___lwdiv,w
 11170  17AD  3907               	andlw	7
 11171  17AE                     L32:	
 11172  17AE  3E30               	addlw	48
 11173  17AF  1283               	bcf	3,5	;RP0=0, select bank0
 11174  17B0  1303               	bcf	3,6	;RP1=0, select bank0
 11175  17B1  00A9               	movwf	??_sprintf+1
 11176  17B2  0829               	movf	??_sprintf+1,w
 11177  17B3                     L25:	
 11178  17B3  00BB               	movwf	sprintf@c
 11179  17B4                     l3403:	
 11180                           ;doprnt.c: 1523: }
 11181                           
 11182                           ;doprnt.c: 1520: break;
 11183                           
 11184                           
 11185                           ;doprnt.c: 1524: ((*sp++ = (c)));
 11186  17B4  083B               	movf	sprintf@c,w
 11187  17B5                     L34:	
 11188  17B5  00A8               	movwf	??_sprintf
 11189  17B6  083C               	movf	sprintf@sp,w
 11190  17B7  0084               	movwf	4
 11191  17B8  0828               	movf	??_sprintf,w
 11192  17B9  1783               	bsf	3,7	;select IRP bank2
 11193  17BA                     L31:	
 11194  17BA  0080               	movwf	0
 11195  17BB  3001               	movlw	1
 11196  17BC  00A8               	movwf	??_sprintf
 11197  17BD  0828               	movf	??_sprintf,w
 11198  17BE  07BC               	addwf	sprintf@sp,f
 11199  17BF                     l3407:	
 11200  17BF  30FF               	movlw	255
 11201  17C0  00A8               	movwf	??_sprintf
 11202  17C1  0828               	movf	??_sprintf,w
 11203  17C2  07B8               	addwf	sprintf@prec,f
 11204  17C3  0A38               	incf	sprintf@prec,w
 11205  17C4  1903               	btfsc	3,2
 11206  17C5  2FD6               	goto	l647
 11207  17C6  083D               	movf	sprintf@flag,w
 11208  17C7  39C0               	andlw	192
 11209                           
 11210                           ; Switch size 1, requested type "space"
 11211                           ; Number of cases is 4, Range of values is 0 to 192
 11212                           ; switch strategies available:
 11213                           ; Name         Instructions Cycles
 11214                           ; simple_byte           13     7 (average)
 11215                           ; jumptable            260     6 (fixed)
 11216                           ;	Chosen strategy is simple_byte
 11217  17C8  3A00               	xorlw	0	; case 0
 11218  17C9  1903               	skipnz
 11219  17CA  2F23               	goto	l3385
 11220  17CB  3A40               	xorlw	64	; case 64
 11221  17CC  1903               	skipnz
 11222  17CD  2F8E               	goto	l3397
 11223  17CE  3AC0               	xorlw	192	; case 128
 11224  17CF  1903               	skipnz
 11225  17D0  2F50               	goto	l3387
 11226  17D1  3A40               	xorlw	64	; case 192
 11227  17D2  1903               	skipnz
 11228  17D3  2F23               	goto	l3385
 11229  17D4  2FB4               	goto	l3403
 11230  17D5  2FB4               	goto	l3403
 11231  17D6                     l647:	
 11232                           
 11233                           ;doprnt.c: 1525: }
 11234                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
 11235  17D6  1DBD               	btfss	sprintf@flag,3
 11236  17D7  2B07               	goto	l3417
 11237  17D8  083A               	movf	sprintf@width+1,w
 11238  17D9  3A80               	xorlw	128
 11239  17DA  00FF               	movwf	127
 11240  17DB  3080               	movlw	128
 11241  17DC  027F               	subwf	127,w
 11242  17DD  1D03               	skipz
 11243  17DE  2FE1               	goto	u4145
 11244  17DF  3001               	movlw	1
 11245  17E0  0239               	subwf	sprintf@width,w
 11246  17E1                     u4145:	
 11247  17E1  1C03               	skipc
 11248  17E2  2B07               	goto	l3417
 11249  17E3                     l3411:	
 11250                           ;doprnt.c: 1529: do
 11251                           
 11252                           
 11253                           ;doprnt.c: 1530: ((*sp++ = (' ')));
 11254  17E3  3020               	movlw	32
 11255  17E4  1283               	bcf	3,5	;RP0=0, select bank0
 11256  17E5  1303               	bcf	3,6	;RP1=0, select bank0
 11257  17E6  00A8               	movwf	??_sprintf
 11258  17E7  083C               	movf	sprintf@sp,w
 11259  17E8  0084               	movwf	4
 11260  17E9  0828               	movf	??_sprintf,w
 11261  17EA  1783               	bsf	3,7	;select IRP bank2
 11262  17EB  0080               	movwf	0
 11263  17EC  3001               	movlw	1
 11264  17ED  00A8               	movwf	??_sprintf
 11265  17EE  0828               	movf	??_sprintf,w
 11266  17EF  07BC               	addwf	sprintf@sp,f
 11267                           
 11268                           ;doprnt.c: 1531: while(--width);
 11269  17F0  30FF               	movlw	255
 11270  17F1  07B9               	addwf	sprintf@width,f
 11271  17F2  1803               	skipnc
 11272  17F3  0ABA               	incf	sprintf@width+1,f
 11273  17F4  30FF               	movlw	255
 11274  17F5  07BA               	addwf	sprintf@width+1,f
 11275  17F6  0839               	movf	sprintf@width,w
 11276  17F7  043A               	iorwf	sprintf@width+1,w
 11277  17F8  1903               	btfsc	3,2
 11278  17F9  2B07               	goto	l3417
 11279  17FA  2FE3               	goto	l3411
 11280  17FB                     l3419:	
 11281                           ;doprnt.c: 1533: }
 11282                           ;doprnt.c: 1535: alldone:
 11283                           
 11284                           
 11285                           ;doprnt.c: 1538: *sp = 0;
 11286  17FB  083C               	movf	sprintf@sp,w
 11287  17FC  0084               	movwf	4
 11288  17FD  1783               	bsf	3,7	;select IRP bank2
 11289  17FE  0180               	clrf	0
 11290  17FF  0008               	return
 11291  1800                     __end_of_sprintf:	
 11292                           ;doprnt.c: 1540: return 0;
 11293                           ;	Return value of _sprintf is never used
 11294                           
 11295                           
 11296                           	psect	text30
 11297  1835                     __ptext30:	
 11298 ;; *************** function _isdigit *****************
 11299 ;; Defined at:
 11300 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
 11301 ;; Parameters:    Size  Location     Type
 11302 ;;  c               1    wreg     unsigned char 
 11303 ;; Auto vars:     Size  Location     Type
 11304 ;;  c               1    1[COMMON] unsigned char 
 11305 ;; Return value:  Size  Location     Type
 11306 ;;		None               void
 11307 ;; Registers used:
 11308 ;;		wreg, status,2, status,0
 11309 ;; Tracked objects:
 11310 ;;		On entry : 0/0
 11311 ;;		On exit  : 0/0
 11312 ;;		Unchanged: 0/0
 11313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11314 ;;      Params:         0       0       0       0       0
 11315 ;;      Locals:         2       0       0       0       0
 11316 ;;      Temps:          0       0       0       0       0
 11317 ;;      Totals:         2       0       0       0       0
 11318 ;;Total ram usage:        2 bytes
 11319 ;; Hardware stack levels used:    1
 11320 ;; This function calls:
 11321 ;;		Nothing
 11322 ;; This function is called by:
 11323 ;;		_sprintf
 11324 ;; This function uses a non-reentrant model
 11325 ;;
 11326                           
 11327                           
 11328                           ;psect for function _isdigit
 11329  1835                     _isdigit:	
 11330                           
 11331                           ;incstack = 0
 11332                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 11333                           ;isdigit@c stored from wreg
 11334  1835  00F1               	movwf	isdigit@c
 11335  1836  01F0               	clrf	_isdigit$906
 11336  1837  303A               	movlw	58
 11337  1838  0271               	subwf	isdigit@c,w
 11338  1839  1803               	skipnc
 11339  183A  2841               	goto	l3013
 11340  183B  3030               	movlw	48
 11341  183C  0271               	subwf	isdigit@c,w
 11342  183D  1C03               	skipc
 11343  183E  2841               	goto	l3013
 11344  183F  01F0               	clrf	_isdigit$906
 11345  1840  0AF0               	incf	_isdigit$906,f
 11346  1841                     l3013:	
 11347  1841  0C70               	rrf	_isdigit$906,w
 11348  1842  0008               	return
 11349  1843                     __end_of_isdigit:	
 11350                           
 11351                           	psect	text31
 11352  1909                     __ptext31:	
 11353 ;; *************** function ___wmul *****************
 11354 ;; Defined at:
 11355 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;  multiplier      2    0[COMMON] unsigned int 
 11358 ;;  multiplicand    2    2[COMMON] unsigned int 
 11359 ;; Auto vars:     Size  Location     Type
 11360 ;;  product         2    4[COMMON] unsigned int 
 11361 ;; Return value:  Size  Location     Type
 11362 ;;                  2    0[COMMON] unsigned int 
 11363 ;; Registers used:
 11364 ;;		wreg, status,2, status,0
 11365 ;; Tracked objects:
 11366 ;;		On entry : 0/0
 11367 ;;		On exit  : 0/0
 11368 ;;		Unchanged: 0/0
 11369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11370 ;;      Params:         4       0       0       0       0
 11371 ;;      Locals:         2       0       0       0       0
 11372 ;;      Temps:          0       0       0       0       0
 11373 ;;      Totals:         6       0       0       0       0
 11374 ;;Total ram usage:        6 bytes
 11375 ;; Hardware stack levels used:    1
 11376 ;; This function calls:
 11377 ;;		Nothing
 11378 ;; This function is called by:
 11379 ;;		_sprintf
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           
 11384                           ;psect for function ___wmul
 11385  1909                     ___wmul:	
 11386                           
 11387                           ;incstack = 0
 11388                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11389  1909  01F4               	clrf	___wmul@product
 11390  190A  01F5               	clrf	___wmul@product+1
 11391  190B                     l3019:	
 11392  190B  1C70               	btfss	___wmul@multiplier,0
 11393  190C  2913               	goto	l736
 11394  190D  0872               	movf	___wmul@multiplicand,w
 11395  190E  07F4               	addwf	___wmul@product,f
 11396  190F  1803               	skipnc
 11397  1910  0AF5               	incf	___wmul@product+1,f
 11398  1911  0873               	movf	___wmul@multiplicand+1,w
 11399  1912  07F5               	addwf	___wmul@product+1,f
 11400  1913                     l736:	
 11401  1913  3001               	movlw	1
 11402  1914                     u3365:	
 11403  1914  1003               	clrc
 11404  1915  0DF2               	rlf	___wmul@multiplicand,f
 11405  1916  0DF3               	rlf	___wmul@multiplicand+1,f
 11406  1917  3EFF               	addlw	-1
 11407  1918  1D03               	skipz
 11408  1919  2914               	goto	u3365
 11409  191A  3001               	movlw	1
 11410  191B                     u3375:	
 11411  191B  1003               	clrc
 11412  191C  0CF1               	rrf	___wmul@multiplier+1,f
 11413  191D  0CF0               	rrf	___wmul@multiplier,f
 11414  191E  3EFF               	addlw	-1
 11415  191F  1D03               	skipz
 11416  1920  291B               	goto	u3375
 11417  1921  0870               	movf	___wmul@multiplier,w
 11418  1922  0471               	iorwf	___wmul@multiplier+1,w
 11419  1923  1D03               	btfss	3,2
 11420  1924  290B               	goto	l3019
 11421  1925  0875               	movf	___wmul@product+1,w
 11422  1926  00F1               	movwf	?___wmul+1
 11423  1927  0874               	movf	___wmul@product,w
 11424  1928  00F0               	movwf	?___wmul
 11425  1929  0008               	return
 11426  192A                     __end_of___wmul:	
 11427                           
 11428                           	psect	text32
 11429  19F7                     __ptext32:	
 11430 ;; *************** function ___lwmod *****************
 11431 ;; Defined at:
 11432 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 11433 ;; Parameters:    Size  Location     Type
 11434 ;;  divisor         2    8[COMMON] unsigned int 
 11435 ;;  dividend        2   10[COMMON] unsigned int 
 11436 ;; Auto vars:     Size  Location     Type
 11437 ;;  counter         1   13[COMMON] unsigned char 
 11438 ;; Return value:  Size  Location     Type
 11439 ;;                  2    8[COMMON] unsigned int 
 11440 ;; Registers used:
 11441 ;;		wreg, status,2, status,0
 11442 ;; Tracked objects:
 11443 ;;		On entry : 0/0
 11444 ;;		On exit  : 0/0
 11445 ;;		Unchanged: 0/0
 11446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11447 ;;      Params:         4       0       0       0       0
 11448 ;;      Locals:         1       0       0       0       0
 11449 ;;      Temps:          1       0       0       0       0
 11450 ;;      Totals:         6       0       0       0       0
 11451 ;;Total ram usage:        6 bytes
 11452 ;; Hardware stack levels used:    1
 11453 ;; This function calls:
 11454 ;;		Nothing
 11455 ;; This function is called by:
 11456 ;;		_sprintf
 11457 ;; This function uses a non-reentrant model
 11458 ;;
 11459                           
 11460                           
 11461                           ;psect for function ___lwmod
 11462  19F7                     ___lwmod:	
 11463                           
 11464                           ;incstack = 0
 11465                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11466  19F7  0878               	movf	___lwmod@divisor,w
 11467  19F8  0479               	iorwf	___lwmod@divisor+1,w
 11468  19F9  1903               	btfsc	3,2
 11469  19FA  2A24               	goto	l3089
 11470  19FB  01FD               	clrf	___lwmod@counter
 11471  19FC  0AFD               	incf	___lwmod@counter,f
 11472  19FD                     l3079:	
 11473  19FD  1BF9               	btfsc	___lwmod@divisor+1,7
 11474  19FE  2A0B               	goto	l3081
 11475  19FF  3001               	movlw	1
 11476  1A00                     u3495:	
 11477  1A00  1003               	clrc
 11478  1A01  0DF8               	rlf	___lwmod@divisor,f
 11479  1A02  0DF9               	rlf	___lwmod@divisor+1,f
 11480  1A03  3EFF               	addlw	-1
 11481  1A04  1D03               	skipz
 11482  1A05  2A00               	goto	u3495
 11483  1A06  3001               	movlw	1
 11484  1A07  00FC               	movwf	??___lwmod
 11485  1A08  087C               	movf	??___lwmod,w
 11486  1A09  07FD               	addwf	___lwmod@counter,f
 11487  1A0A  29FD               	goto	l3079
 11488  1A0B                     l3081:	
 11489  1A0B  0879               	movf	___lwmod@divisor+1,w
 11490  1A0C  027B               	subwf	___lwmod@dividend+1,w
 11491  1A0D  1D03               	skipz
 11492  1A0E  2A11               	goto	u3515
 11493  1A0F  0878               	movf	___lwmod@divisor,w
 11494  1A10  027A               	subwf	___lwmod@dividend,w
 11495  1A11                     u3515:	
 11496  1A11  1C03               	skipc
 11497  1A12  2A19               	goto	l3085
 11498  1A13  0878               	movf	___lwmod@divisor,w
 11499  1A14  02FA               	subwf	___lwmod@dividend,f
 11500  1A15  0879               	movf	___lwmod@divisor+1,w
 11501  1A16  1C03               	skipc
 11502  1A17  03FB               	decf	___lwmod@dividend+1,f
 11503  1A18  02FB               	subwf	___lwmod@dividend+1,f
 11504  1A19                     l3085:	
 11505  1A19  3001               	movlw	1
 11506  1A1A                     u3525:	
 11507  1A1A  1003               	clrc
 11508  1A1B  0CF9               	rrf	___lwmod@divisor+1,f
 11509  1A1C  0CF8               	rrf	___lwmod@divisor,f
 11510  1A1D  3EFF               	addlw	-1
 11511  1A1E  1D03               	skipz
 11512  1A1F  2A1A               	goto	u3525
 11513  1A20  3001               	movlw	1
 11514  1A21  02FD               	subwf	___lwmod@counter,f
 11515  1A22  1D03               	btfss	3,2
 11516  1A23  2A0B               	goto	l3081
 11517  1A24                     l3089:	
 11518  1A24  087B               	movf	___lwmod@dividend+1,w
 11519  1A25  00F9               	movwf	?___lwmod+1
 11520  1A26  087A               	movf	___lwmod@dividend,w
 11521  1A27  00F8               	movwf	?___lwmod
 11522  1A28  0008               	return
 11523  1A29                     __end_of___lwmod:	
 11524                           
 11525                           	psect	text33
 11526  1A92                     __ptext33:	
 11527 ;; *************** function ___lwdiv *****************
 11528 ;; Defined at:
 11529 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 11530 ;; Parameters:    Size  Location     Type
 11531 ;;  divisor         2    0[COMMON] unsigned int 
 11532 ;;  dividend        2    2[COMMON] unsigned int 
 11533 ;; Auto vars:     Size  Location     Type
 11534 ;;  quotient        2    5[COMMON] unsigned int 
 11535 ;;  counter         1    7[COMMON] unsigned char 
 11536 ;; Return value:  Size  Location     Type
 11537 ;;                  2    0[COMMON] unsigned int 
 11538 ;; Registers used:
 11539 ;;		wreg, status,2, status,0
 11540 ;; Tracked objects:
 11541 ;;		On entry : 0/0
 11542 ;;		On exit  : 0/0
 11543 ;;		Unchanged: 0/0
 11544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11545 ;;      Params:         4       0       0       0       0
 11546 ;;      Locals:         3       0       0       0       0
 11547 ;;      Temps:          1       0       0       0       0
 11548 ;;      Totals:         8       0       0       0       0
 11549 ;;Total ram usage:        8 bytes
 11550 ;; Hardware stack levels used:    1
 11551 ;; This function calls:
 11552 ;;		Nothing
 11553 ;; This function is called by:
 11554 ;;		_sprintf
 11555 ;; This function uses a non-reentrant model
 11556 ;;
 11557                           
 11558                           
 11559                           ;psect for function ___lwdiv
 11560  1A92                     ___lwdiv:	
 11561                           
 11562                           ;incstack = 0
 11563                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11564  1A92  01F5               	clrf	___lwdiv@quotient
 11565  1A93  01F6               	clrf	___lwdiv@quotient+1
 11566  1A94  0870               	movf	___lwdiv@divisor,w
 11567  1A95  0471               	iorwf	___lwdiv@divisor+1,w
 11568  1A96  1903               	btfsc	3,2
 11569  1A97  2AC9               	goto	l3067
 11570  1A98  01F7               	clrf	___lwdiv@counter
 11571  1A99  0AF7               	incf	___lwdiv@counter,f
 11572  1A9A                     l3055:	
 11573  1A9A  1BF1               	btfsc	___lwdiv@divisor+1,7
 11574  1A9B  2AA8               	goto	l3057
 11575  1A9C  3001               	movlw	1
 11576  1A9D                     u3425:	
 11577  1A9D  1003               	clrc
 11578  1A9E  0DF0               	rlf	___lwdiv@divisor,f
 11579  1A9F  0DF1               	rlf	___lwdiv@divisor+1,f
 11580  1AA0  3EFF               	addlw	-1
 11581  1AA1  1D03               	skipz
 11582  1AA2  2A9D               	goto	u3425
 11583  1AA3  3001               	movlw	1
 11584  1AA4  00F4               	movwf	??___lwdiv
 11585  1AA5  0874               	movf	??___lwdiv,w
 11586  1AA6  07F7               	addwf	___lwdiv@counter,f
 11587  1AA7  2A9A               	goto	l3055
 11588  1AA8                     l3057:	
 11589  1AA8  3001               	movlw	1
 11590  1AA9                     u3445:	
 11591  1AA9  1003               	clrc
 11592  1AAA  0DF5               	rlf	___lwdiv@quotient,f
 11593  1AAB  0DF6               	rlf	___lwdiv@quotient+1,f
 11594  1AAC  3EFF               	addlw	-1
 11595  1AAD  1D03               	skipz
 11596  1AAE  2AA9               	goto	u3445
 11597  1AAF  0871               	movf	___lwdiv@divisor+1,w
 11598  1AB0  0273               	subwf	___lwdiv@dividend+1,w
 11599  1AB1  1D03               	skipz
 11600  1AB2  2AB5               	goto	u3455
 11601  1AB3  0870               	movf	___lwdiv@divisor,w
 11602  1AB4  0272               	subwf	___lwdiv@dividend,w
 11603  1AB5                     u3455:	
 11604  1AB5  1C03               	skipc
 11605  1AB6  2ABE               	goto	l3063
 11606  1AB7  0870               	movf	___lwdiv@divisor,w
 11607  1AB8  02F2               	subwf	___lwdiv@dividend,f
 11608  1AB9  0871               	movf	___lwdiv@divisor+1,w
 11609  1ABA  1C03               	skipc
 11610  1ABB  03F3               	decf	___lwdiv@dividend+1,f
 11611  1ABC  02F3               	subwf	___lwdiv@dividend+1,f
 11612  1ABD  1475               	bsf	___lwdiv@quotient,0
 11613  1ABE                     l3063:	
 11614  1ABE  3001               	movlw	1
 11615  1ABF                     u3465:	
 11616  1ABF  1003               	clrc
 11617  1AC0  0CF1               	rrf	___lwdiv@divisor+1,f
 11618  1AC1  0CF0               	rrf	___lwdiv@divisor,f
 11619  1AC2  3EFF               	addlw	-1
 11620  1AC3  1D03               	skipz
 11621  1AC4  2ABF               	goto	u3465
 11622  1AC5  3001               	movlw	1
 11623  1AC6  02F7               	subwf	___lwdiv@counter,f
 11624  1AC7  1D03               	btfss	3,2
 11625  1AC8  2AA8               	goto	l3057
 11626  1AC9                     l3067:	
 11627  1AC9  0876               	movf	___lwdiv@quotient+1,w
 11628  1ACA  00F1               	movwf	?___lwdiv+1
 11629  1ACB  0875               	movf	___lwdiv@quotient,w
 11630  1ACC  00F0               	movwf	?___lwdiv
 11631  1ACD  0008               	return
 11632  1ACE                     __end_of___lwdiv:	
 11633                           
 11634                           	psect	text34
 11635  1843                     __ptext34:	
 11636 ;; *************** function ___bmul *****************
 11637 ;; Defined at:
 11638 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 11639 ;; Parameters:    Size  Location     Type
 11640 ;;  multiplier      1    wreg     unsigned char 
 11641 ;;  multiplicand    1    0[COMMON] unsigned char 
 11642 ;; Auto vars:     Size  Location     Type
 11643 ;;  multiplier      1    3[COMMON] unsigned char 
 11644 ;;  product         1    2[COMMON] unsigned char 
 11645 ;; Return value:  Size  Location     Type
 11646 ;;                  1    wreg      unsigned char 
 11647 ;; Registers used:
 11648 ;;		wreg, status,2, status,0
 11649 ;; Tracked objects:
 11650 ;;		On entry : 0/0
 11651 ;;		On exit  : 0/0
 11652 ;;		Unchanged: 0/0
 11653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11654 ;;      Params:         1       0       0       0       0
 11655 ;;      Locals:         2       0       0       0       0
 11656 ;;      Temps:          1       0       0       0       0
 11657 ;;      Totals:         4       0       0       0       0
 11658 ;;Total ram usage:        4 bytes
 11659 ;; Hardware stack levels used:    1
 11660 ;; This function calls:
 11661 ;;		Nothing
 11662 ;; This function is called by:
 11663 ;;		_printf_debug_cur_MATRIX44
 11664 ;;		_find_best_solution
 11665 ;;		_main
 11666 ;;		_sprintf
 11667 ;;		_get_MATRIX44
 11668 ;;		_printf_debug_all_MATRIX44
 11669 ;; This function uses a non-reentrant model
 11670 ;;
 11671                           
 11672                           
 11673                           ;psect for function ___bmul
 11674  1843                     ___bmul:	
 11675                           
 11676                           ;incstack = 0
 11677                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11678                           ;___bmul@multiplier stored from wreg
 11679  1843  00F3               	movwf	___bmul@multiplier
 11680  1844  01F2               	clrf	___bmul@product
 11681  1845                     l3033:	
 11682  1845  1C73               	btfss	___bmul@multiplier,0
 11683  1846  284B               	goto	l3037
 11684  1847  0870               	movf	___bmul@multiplicand,w
 11685  1848  00F1               	movwf	??___bmul
 11686  1849  0871               	movf	??___bmul,w
 11687  184A  07F2               	addwf	___bmul@product,f
 11688  184B                     l3037:	
 11689  184B  1003               	clrc
 11690  184C  0DF0               	rlf	___bmul@multiplicand,f
 11691  184D  1003               	clrc
 11692  184E  0CF3               	rrf	___bmul@multiplier,f
 11693  184F  0873               	movf	___bmul@multiplier,w
 11694  1850  1D03               	btfss	3,2
 11695  1851  2845               	goto	l3033
 11696  1852  0872               	movf	___bmul@product,w
 11697  1853  0008               	return
 11698  1854                     __end_of___bmul:	
 11699                           
 11700                           	psect	text35
 11701  192A                     __ptext35:	
 11702 ;; *************** function _USARTWriteString *****************
 11703 ;; Defined at:
 11704 ;;		line 76 in file "usart_pic16.c"
 11705 ;; Parameters:    Size  Location     Type
 11706 ;;  str             2    1[COMMON] PTR const unsigned char 
 11707 ;;		 -> STR_98(12), STR_96(13), STR_94(13), STR_87(7), 
 11708 ;;		 -> STR_86(7), STR_79(5), STR_63(17), STR_62(15), 
 11709 ;;		 -> STR_61(15), STR_60(15), STR_59(45), STR_51(21), 
 11710 ;;		 -> STR_45(10), STR_43(10), STR_42(20), STR_41(19), 
 11711 ;;		 -> STR_40(6), STR_38(11), STR_36(11), STR_34(11), 
 11712 ;;		 -> STR_33(35), STR_32(8), STR_29(35), STR_27(2), 
 11713 ;;		 -> STR_26(21), STR_25(1), STR_24(2), STR_23(2), 
 11714 ;;		 -> STR_22(29), STR_21(2), STR_20(21), STR_19(1), 
 11715 ;;		 -> STR_18(2), STR_17(2), STR_16(21), STR_15(2), 
 11716 ;;		 -> STR_12(20), STR_11(2), STR_10(21), STR_9(1), 
 11717 ;;		 -> STR_8(2), STR_7(2), STR_6(29), STR_5(2), 
 11718 ;;		 -> ROM(8192), STR_4(3), STR_3(3), STR_2(3), 
 11719 ;;		 -> g_debug(32), STR_1(3), 
 11720 ;; Auto vars:     Size  Location     Type
 11721 ;;		None
 11722 ;; Return value:  Size  Location     Type
 11723 ;;                  1    wreg      void 
 11724 ;; Registers used:
 11725 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 11726 ;; Tracked objects:
 11727 ;;		On entry : 0/0
 11728 ;;		On exit  : 0/0
 11729 ;;		Unchanged: 0/0
 11730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11731 ;;      Params:         2       0       0       0       0
 11732 ;;      Locals:         0       0       0       0       0
 11733 ;;      Temps:          0       0       0       0       0
 11734 ;;      Totals:         2       0       0       0       0
 11735 ;;Total ram usage:        2 bytes
 11736 ;; Hardware stack levels used:    1
 11737 ;; Hardware stack levels required when called:    1
 11738 ;; This function calls:
 11739 ;;		_USARTWriteChar
 11740 ;; This function is called by:
 11741 ;;		_debug_str
 11742 ;;		_debug_line
 11743 ;;		_debug_int1
 11744 ;;		_debug_int2
 11745 ;;		_USARTWriteLine
 11746 ;;		_debug_int3
 11747 ;; This function uses a non-reentrant model
 11748 ;;
 11749                           
 11750                           
 11751                           ;psect for function _USARTWriteString
 11752  192A                     _USARTWriteString:	
 11753  192A                     l4877:	
 11754                           ;usart_pic16.c: 77: while (*str != '\0') {
 11755                           
 11756                           ;incstack = 0
 11757                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 11758                           
 11759  192A  0872               	movf	USARTWriteString@str+1,w
 11760  192B  1283               	bcf	3,5	;RP0=0, select bank0
 11761  192C  1303               	bcf	3,6	;RP1=0, select bank0
 11762  192D  00FF               	movwf	127
 11763  192E  0871               	movf	USARTWriteString@str,w
 11764  192F  0084               	movwf	4
 11765  1930  120A  158A  2000  160A  158A  	fcall	stringtab
 11766  1935  3A00               	xorlw	0
 11767  1936  1903               	btfsc	3,2
 11768  1937  0008               	return
 11769                           
 11770                           ;usart_pic16.c: 78: USARTWriteChar(*str);
 11771  1938  0872               	movf	USARTWriteString@str+1,w
 11772  1939  1283               	bcf	3,5	;RP0=0, select bank0
 11773  193A  1303               	bcf	3,6	;RP1=0, select bank0
 11774  193B  00FF               	movwf	127
 11775  193C  0871               	movf	USARTWriteString@str,w
 11776  193D  0084               	movwf	4
 11777  193E  120A  158A  2000  160A  158A  	fcall	stringtab
 11778  1943  160A  158A  2010  160A  158A  	fcall	_USARTWriteChar
 11779                           
 11780                           ;usart_pic16.c: 79: str++;
 11781  1948  3001               	movlw	1
 11782  1949  07F1               	addwf	USARTWriteString@str,f
 11783  194A  1803               	skipnc
 11784  194B  0AF2               	incf	USARTWriteString@str+1,f
 11785  194C  3000               	movlw	0
 11786  194D  07F2               	addwf	USARTWriteString@str+1,f
 11787  194E  292A               	goto	l4877
 11788  194F                     __end_of_USARTWriteString:	
 11789                           
 11790                           	psect	text36
 11791  1810                     __ptext36:	
 11792 ;; *************** function _USARTWriteChar *****************
 11793 ;; Defined at:
 11794 ;;		line 70 in file "usart_pic16.c"
 11795 ;; Parameters:    Size  Location     Type
 11796 ;;  ch              1    wreg     unsigned char 
 11797 ;; Auto vars:     Size  Location     Type
 11798 ;;  ch              1    0[COMMON] unsigned char 
 11799 ;; Return value:  Size  Location     Type
 11800 ;;                  1    wreg      void 
 11801 ;; Registers used:
 11802 ;;		wreg
 11803 ;; Tracked objects:
 11804 ;;		On entry : 0/0
 11805 ;;		On exit  : 0/0
 11806 ;;		Unchanged: 0/0
 11807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11808 ;;      Params:         0       0       0       0       0
 11809 ;;      Locals:         1       0       0       0       0
 11810 ;;      Temps:          0       0       0       0       0
 11811 ;;      Totals:         1       0       0       0       0
 11812 ;;Total ram usage:        1 bytes
 11813 ;; Hardware stack levels used:    1
 11814 ;; This function calls:
 11815 ;;		Nothing
 11816 ;; This function is called by:
 11817 ;;		_USARTWriteString
 11818 ;;		_USARTWriteLine
 11819 ;;		_USARTWriteInt
 11820 ;;		_USARTGotoNewLine
 11821 ;; This function uses a non-reentrant model
 11822 ;;
 11823                           
 11824                           
 11825                           ;psect for function _USARTWriteChar
 11826  1810                     _USARTWriteChar:	
 11827                           
 11828                           ;incstack = 0
 11829                           ; Regs used in _USARTWriteChar: [wreg]
 11830                           ;USARTWriteChar@ch stored from wreg
 11831  1810  00F0               	movwf	USARTWriteChar@ch
 11832  1811                     l36:	
 11833                           ;usart_pic16.c: 71: while (!PIR1bits.TXIF);
 11834                           
 11835  1811  1283               	bcf	3,5	;RP0=0, select bank0
 11836  1812  1303               	bcf	3,6	;RP1=0, select bank0
 11837  1813  1E0C               	btfss	12,4	;volatile
 11838  1814  2811               	goto	l36
 11839                           
 11840                           ;usart_pic16.c: 73: TXREG = ch;
 11841  1815  0870               	movf	USARTWriteChar@ch,w
 11842  1816  0099               	movwf	25	;volatile
 11843  1817  0008               	return
 11844  1818                     __end_of_USARTWriteChar:	
 11845                           
 11846                           	psect	text37
 11847  1C7B                     __ptext37:	
 11848 ;; *************** function _clear *****************
 11849 ;; Defined at:
 11850 ;;		line 809 in file "teris_16f886.c"
 11851 ;; Parameters:    Size  Location     Type
 11852 ;;  x               1    wreg     char 
 11853 ;;  y               1    0[COMMON] char 
 11854 ;;  matrix44        2    1[COMMON] PTR const struct .
 11855 ;;		 -> NULL(0), g_matrix44(384), 
 11856 ;;  matrix88        1    3[COMMON] PTR struct .
 11857 ;;		 -> g_matrix88(64), 
 11858 ;; Auto vars:     Size  Location     Type
 11859 ;;  x               1    8[COMMON] char 
 11860 ;;  col             1   10[COMMON] unsigned char 
 11861 ;;  row             1    9[COMMON] unsigned char 
 11862 ;; Return value:  Size  Location     Type
 11863 ;;                  1    wreg      void 
 11864 ;; Registers used:
 11865 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
 11866 ;; Tracked objects:
 11867 ;;		On entry : 0/0
 11868 ;;		On exit  : 0/0
 11869 ;;		Unchanged: 0/0
 11870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11871 ;;      Params:         4       0       0       0       0
 11872 ;;      Locals:         3       0       0       0       0
 11873 ;;      Temps:          4       0       0       0       0
 11874 ;;      Totals:        11       0       0       0       0
 11875 ;;Total ram usage:       11 bytes
 11876 ;; Hardware stack levels used:    2
 11877 ;; This function calls:
 11878 ;;		Nothing
 11879 ;; This function is called by:
 11880 ;;		_main
 11881 ;; This function uses a non-reentrant model
 11882 ;;
 11883                           
 11884                           
 11885                           ;psect for function _clear
 11886  1C7B                     _clear:	
 11887                           
 11888                           ;incstack = 0
 11889                           ; Regs used in _clear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
 11890                           ;clear@x stored from wreg
 11891  1C7B  00F8               	movwf	clear@x
 11892                           
 11893                           ;teris_16f886.c: 811: for(uint8_t row = 0; row < 4; row++)
 11894  1C7C  01F9               	clrf	clear@row
 11895  1C7D                     L35:	
 11896  1C7D  3004               	movlw	4
 11897  1C7E  0279               	subwf	clear@row,w
 11898  1C7F  1803               	btfsc	3,0
 11899  1C80  0008               	return
 11900                           
 11901                           ;teris_16f886.c: 812: {
 11902                           ;teris_16f886.c: 813: for(uint8_t col = 0; col < 4; col++)
 11903  1C81  01FA               	clrf	clear@col
 11904  1C82  3004               	movlw	4
 11905  1C83  027A               	subwf	clear@col,w
 11906  1C84  1803               	btfsc	3,0
 11907  1C85  2CC5               	goto	l4265
 11908  1C86                     l4257:	
 11909                           
 11910                           ;teris_16f886.c: 814: {
 11911                           ;teris_16f886.c: 815: if(matrix44->data[row][col] == 1)
 11912  1C86  0879               	movf	clear@row,w
 11913  1C87  00F4               	movwf	??_clear
 11914  1C88  01F5               	clrf	??_clear+1
 11915  1C89  1003               	clrc
 11916  1C8A  0DF4               	rlf	??_clear,f
 11917  1C8B  0DF5               	rlf	??_clear+1,f
 11918  1C8C  1003               	clrc
 11919  1C8D  0DF4               	rlf	??_clear,f
 11920  1C8E  0DF5               	rlf	??_clear+1,f
 11921  1C8F  0874               	movf	??_clear,w
 11922  1C90  0771               	addwf	clear@matrix44,w
 11923  1C91  00F6               	movwf	??_clear+2
 11924  1C92  0875               	movf	??_clear+1,w
 11925  1C93  1803               	skipnc
 11926  1C94  0A75               	incf	??_clear+1,w
 11927  1C95  0772               	addwf	clear@matrix44+1,w
 11928  1C96  00F7               	movwf	??_clear+3
 11929  1C97  087A               	movf	clear@col,w
 11930  1C98  0776               	addwf	??_clear+2,w
 11931  1C99  0084               	movwf	4
 11932  1C9A  0877               	movf	??_clear+3,w
 11933  1C9B  1803               	skipnc
 11934  1C9C  0A77               	incf	??_clear+3,w
 11935  1C9D  1283               	bcf	3,5	;RP0=0, select bank0
 11936  1C9E  1303               	bcf	3,6	;RP1=0, select bank0
 11937  1C9F  00FF               	movwf	127
 11938  1CA0  120A  158A  2000  160A  158A  	fcall	stringtab
 11939  1CA5  3A01               	xorlw	1
 11940  1CA6  1D03               	skipz
 11941  1CA7  2CBD               	goto	l4261
 11942                           
 11943                           ;teris_16f886.c: 816: {
 11944                           ;teris_16f886.c: 817: matrix88->data[y + row][x + col] = 0;
 11945  1CA8  087A               	movf	clear@col,w
 11946  1CA9  0778               	addwf	clear@x,w
 11947  1CAA  0773               	addwf	clear@matrix88,w
 11948  1CAB  00F4               	movwf	??_clear
 11949  1CAC  0879               	movf	clear@row,w
 11950  1CAD  0770               	addwf	clear@y,w
 11951  1CAE  00F5               	movwf	??_clear+1
 11952  1CAF  3002               	movlw	2
 11953  1CB0                     u5995:	
 11954  1CB0  1003               	clrc
 11955  1CB1  0DF5               	rlf	??_clear+1,f
 11956  1CB2  3EFF               	addlw	-1
 11957  1CB3  1D03               	skipz
 11958  1CB4  2CB0               	goto	u5995
 11959  1CB5  1003               	clrc
 11960  1CB6  0D75               	rlf	??_clear+1,w
 11961  1CB7  0774               	addwf	??_clear,w
 11962  1CB8  00F6               	movwf	??_clear+2
 11963  1CB9  0876               	movf	??_clear+2,w
 11964  1CBA  0084               	movwf	4
 11965  1CBB  1783               	bsf	3,7	;select IRP bank2
 11966  1CBC  0180               	clrf	0
 11967  1CBD                     l4261:	
 11968  1CBD  3001               	movlw	1
 11969  1CBE  00F4               	movwf	??_clear
 11970  1CBF  0874               	movf	??_clear,w
 11971  1CC0  07FA               	addwf	clear@col,f
 11972  1CC1  3004               	movlw	4
 11973  1CC2  027A               	subwf	clear@col,w
 11974  1CC3  1C03               	skipc
 11975  1CC4  2C86               	goto	l4257
 11976  1CC5                     l4265:	
 11977  1CC5  3001               	movlw	1
 11978  1CC6  00F4               	movwf	??_clear
 11979  1CC7  0874               	movf	??_clear,w
 11980  1CC8  07F9               	addwf	clear@row,f
 11981  1CC9  2C7D               	goto	L35
 11982  1CCA                     __end_of_clear:	
 11983                           
 11984                           	psect	text38
 11985  0004                     __ptext38:	
 11986 ;; *************** function _char_info_index_rand *****************
 11987 ;; Defined at:
 11988 ;;		line 886 in file "teris_16f886.c"
 11989 ;; Parameters:    Size  Location     Type
 11990 ;;		None
 11991 ;; Auto vars:     Size  Location     Type
 11992 ;;		None
 11993 ;; Return value:  Size  Location     Type
 11994 ;;                  1    wreg      unsigned char 
 11995 ;; Registers used:
 11996 ;;		wreg, status,2, status,0, pclath, cstack
 11997 ;; Tracked objects:
 11998 ;;		On entry : 0/0
 11999 ;;		On exit  : 0/0
 12000 ;;		Unchanged: 0/0
 12001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12002 ;;      Params:         0       0       0       0       0
 12003 ;;      Locals:         0       0       0       0       0
 12004 ;;      Temps:          0       0       0       0       0
 12005 ;;      Totals:         0       0       0       0       0
 12006 ;;Total ram usage:        0 bytes
 12007 ;; Hardware stack levels used:    1
 12008 ;; Hardware stack levels required when called:    2
 12009 ;; This function calls:
 12010 ;;		___awmod
 12011 ;;		_rand
 12012 ;; This function is called by:
 12013 ;;		_main
 12014 ;; This function uses a non-reentrant model
 12015 ;;
 12016                           
 12017                           
 12018                           ;psect for function _char_info_index_rand
 12019  0004                     _char_info_index_rand:	
 12020                           
 12021                           ;teris_16f886.c: 888: return (uint8_t)(rand()%9);
 12022                           
 12023                           ;incstack = 0
 12024                           ; Regs used in _char_info_index_rand: [wreg+status,2+status,0+pclath+cstack]
 12025  0004  3009               	movlw	9
 12026  0005  1283               	bcf	3,5	;RP0=0, select bank0
 12027  0006  1303               	bcf	3,6	;RP1=0, select bank0
 12028  0007  00A7               	movwf	___awmod@divisor
 12029  0008  3000               	movlw	0
 12030  0009  00A8               	movwf	___awmod@divisor+1
 12031  000A  160A  158A  251A  120A  118A  	fcall	_rand
 12032  000F  1283               	bcf	3,5	;RP0=0, select bank0
 12033  0010  1303               	bcf	3,6	;RP1=0, select bank0
 12034  0011  0821               	movf	?_rand+1,w
 12035  0012  00AA               	movwf	___awmod@dividend+1
 12036  0013  0820               	movf	?_rand,w
 12037  0014  00A9               	movwf	___awmod@dividend
 12038  0015  160A  158A  242E   	fcall	___awmod
 12039  0018  1283               	bcf	3,5	;RP0=0, select bank0
 12040  0019  1303               	bcf	3,6	;RP1=0, select bank0
 12041  001A  0827               	movf	?___awmod,w
 12042  001B  0008               	return
 12043  001C                     __end_of_char_info_index_rand:	
 12044                           
 12045                           	psect	text39
 12046  1D1A                     __ptext39:	
 12047 ;; *************** function _rand *****************
 12048 ;; Defined at:
 12049 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
 12050 ;; Parameters:    Size  Location     Type
 12051 ;;		None
 12052 ;; Auto vars:     Size  Location     Type
 12053 ;;		None
 12054 ;; Return value:  Size  Location     Type
 12055 ;;                  2    0[BANK0 ] int 
 12056 ;; Registers used:
 12057 ;;		wreg, status,2, status,0, pclath, cstack
 12058 ;; Tracked objects:
 12059 ;;		On entry : 0/0
 12060 ;;		On exit  : 0/0
 12061 ;;		Unchanged: 0/0
 12062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12063 ;;      Params:         0       2       0       0       0
 12064 ;;      Locals:         0       0       0       0       0
 12065 ;;      Temps:          0       5       0       0       0
 12066 ;;      Totals:         0       7       0       0       0
 12067 ;;Total ram usage:        7 bytes
 12068 ;; Hardware stack levels used:    1
 12069 ;; Hardware stack levels required when called:    1
 12070 ;; This function calls:
 12071 ;;		___lmul
 12072 ;; This function is called by:
 12073 ;;		_char_info_index_rand
 12074 ;; This function uses a non-reentrant model
 12075 ;;
 12076                           
 12077                           
 12078                           ;psect for function _rand
 12079  1D1A                     _rand:	
 12080                           
 12081                           ;incstack = 0
 12082                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 12083  1D1A  1683               	bsf	3,5	;RP0=1, select bank3
 12084  1D1B  1703               	bsf	3,6	;RP1=1, select bank3
 12085  1D1C  0855               	movf	(_randx+3)^(0+384),w
 12086  1D1D  00F3               	movwf	___lmul@multiplier+3
 12087  1D1E  0854               	movf	(_randx+2)^(0+384),w
 12088  1D1F  00F2               	movwf	___lmul@multiplier+2
 12089  1D20  0853               	movf	(_randx+1)^(0+384),w
 12090  1D21  00F1               	movwf	___lmul@multiplier+1
 12091  1D22  0852               	movf	_randx^(0+384),w
 12092  1D23  00F0               	movwf	___lmul@multiplier
 12093  1D24  3041               	movlw	65
 12094  1D25  00F7               	movwf	___lmul@multiplicand+3
 12095  1D26  30C6               	movlw	198
 12096  1D27  00F6               	movwf	___lmul@multiplicand+2
 12097  1D28  304E               	movlw	78
 12098  1D29  00F5               	movwf	___lmul@multiplicand+1
 12099  1D2A  306D               	movlw	109
 12100  1D2B  00F4               	movwf	___lmul@multiplicand
 12101  1D2C  160A  158A  22CE  160A  158A  	fcall	___lmul
 12102  1D31  0873               	movf	?___lmul+3,w
 12103  1D32  1683               	bsf	3,5	;RP0=1, select bank3
 12104  1D33  1703               	bsf	3,6	;RP1=1, select bank3
 12105  1D34  00D5               	movwf	(_randx+3)^(0+384)
 12106  1D35  0872               	movf	?___lmul+2,w
 12107  1D36  00D4               	movwf	(_randx+2)^(0+384)
 12108  1D37  0871               	movf	?___lmul+1,w
 12109  1D38  00D3               	movwf	(_randx+1)^(0+384)
 12110  1D39  0870               	movf	?___lmul,w
 12111  1D3A  00D2               	movwf	_randx^(0+384)
 12112  1D3B  3039               	movlw	57
 12113  1D3C  07D2               	addwf	_randx^(0+384),f
 12114  1D3D  3030               	movlw	48
 12115  1D3E  1803               	skipnc
 12116  1D3F  3031               	movlw	49
 12117  1D40  07D3               	addwf	(_randx+1)^(0+384),f
 12118  1D41  3000               	movlw	0
 12119  1D42  1803               	skipnc
 12120  1D43  3001               	movlw	1
 12121  1D44  07D4               	addwf	(_randx+2)^(0+384),f
 12122  1D45  3000               	movlw	0
 12123  1D46  1803               	skipnc
 12124  1D47  3001               	movlw	1
 12125  1D48  07D5               	addwf	(_randx+3)^(0+384),f
 12126  1D49  0852               	movf	_randx^(0+384),w
 12127  1D4A  1283               	bcf	3,5	;RP0=0, select bank0
 12128  1D4B  1303               	bcf	3,6	;RP1=0, select bank0
 12129  1D4C  00A2               	movwf	??_rand
 12130  1D4D  1683               	bsf	3,5	;RP0=1, select bank3
 12131  1D4E  1703               	bsf	3,6	;RP1=1, select bank3
 12132  1D4F  0853               	movf	(_randx+1)^(0+384),w
 12133  1D50  1283               	bcf	3,5	;RP0=0, select bank0
 12134  1D51  1303               	bcf	3,6	;RP1=0, select bank0
 12135  1D52  00A3               	movwf	??_rand+1
 12136  1D53  1683               	bsf	3,5	;RP0=1, select bank3
 12137  1D54  1703               	bsf	3,6	;RP1=1, select bank3
 12138  1D55  0854               	movf	(_randx+2)^(0+384),w
 12139  1D56  1283               	bcf	3,5	;RP0=0, select bank0
 12140  1D57  1303               	bcf	3,6	;RP1=0, select bank0
 12141  1D58  00A4               	movwf	??_rand+2
 12142  1D59  1683               	bsf	3,5	;RP0=1, select bank3
 12143  1D5A  1703               	bsf	3,6	;RP1=1, select bank3
 12144  1D5B  0855               	movf	(_randx+3)^(0+384),w
 12145  1D5C  1283               	bcf	3,5	;RP0=0, select bank0
 12146  1D5D  1303               	bcf	3,6	;RP1=0, select bank0
 12147  1D5E  00A5               	movwf	??_rand+3
 12148  1D5F  3010               	movlw	16
 12149  1D60  00A6               	movwf	??_rand+4
 12150  1D61                     u5265:	
 12151  1D61  0D25               	rlf	??_rand+3,w
 12152  1D62  0CA5               	rrf	??_rand+3,f
 12153  1D63  0CA4               	rrf	??_rand+2,f
 12154  1D64  0CA3               	rrf	??_rand+1,f
 12155  1D65  0CA2               	rrf	??_rand,f
 12156  1D66  0BA6               	decfsz	??_rand+4,f
 12157  1D67  2D61               	goto	u5265
 12158  1D68  30FF               	movlw	255
 12159  1D69  0522               	andwf	??_rand,w
 12160  1D6A  00A0               	movwf	?_rand
 12161  1D6B  307F               	movlw	127
 12162  1D6C  0523               	andwf	??_rand+1,w
 12163  1D6D  00A1               	movwf	?_rand+1
 12164  1D6E  0008               	return
 12165  1D6F                     __end_of_rand:	
 12166                           
 12167                           	psect	text40
 12168  1ACE                     __ptext40:	
 12169 ;; *************** function ___lmul *****************
 12170 ;; Defined at:
 12171 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 12172 ;; Parameters:    Size  Location     Type
 12173 ;;  multiplier      4    0[COMMON] unsigned long 
 12174 ;;  multiplicand    4    4[COMMON] unsigned long 
 12175 ;; Auto vars:     Size  Location     Type
 12176 ;;  product         4    9[COMMON] unsigned long 
 12177 ;; Return value:  Size  Location     Type
 12178 ;;                  4    0[COMMON] unsigned long 
 12179 ;; Registers used:
 12180 ;;		wreg, status,2, status,0
 12181 ;; Tracked objects:
 12182 ;;		On entry : 0/0
 12183 ;;		On exit  : 0/0
 12184 ;;		Unchanged: 0/0
 12185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12186 ;;      Params:         8       0       0       0       0
 12187 ;;      Locals:         4       0       0       0       0
 12188 ;;      Temps:          1       0       0       0       0
 12189 ;;      Totals:        13       0       0       0       0
 12190 ;;Total ram usage:       13 bytes
 12191 ;; Hardware stack levels used:    1
 12192 ;; This function calls:
 12193 ;;		Nothing
 12194 ;; This function is called by:
 12195 ;;		_rand
 12196 ;; This function uses a non-reentrant model
 12197 ;;
 12198                           
 12199                           
 12200                           ;psect for function ___lmul
 12201  1ACE                     ___lmul:	
 12202                           
 12203                           ;incstack = 0
 12204                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 12205  1ACE  3000               	movlw	0
 12206  1ACF  00FC               	movwf	___lmul@product+3
 12207  1AD0  3000               	movlw	0
 12208  1AD1  00FB               	movwf	___lmul@product+2
 12209  1AD2  3000               	movlw	0
 12210  1AD3  00FA               	movwf	___lmul@product+1
 12211  1AD4  3000               	movlw	0
 12212  1AD5  00F9               	movwf	___lmul@product
 12213  1AD6                     l3705:	
 12214  1AD6  1C70               	btfss	___lmul@multiplier,0
 12215  1AD7  2AEC               	goto	l3709
 12216  1AD8  0874               	movf	___lmul@multiplicand,w
 12217  1AD9  07F9               	addwf	___lmul@product,f
 12218  1ADA  0875               	movf	___lmul@multiplicand+1,w
 12219  1ADB  1103               	clrz
 12220  1ADC  1803               	skipnc
 12221  1ADD  3E01               	addlw	1
 12222  1ADE  1D03               	btfss	3,2
 12223  1ADF  07FA               	addwf	___lmul@product+1,f
 12224  1AE0  0876               	movf	___lmul@multiplicand+2,w
 12225  1AE1  1103               	clrz
 12226  1AE2  1803               	skipnc
 12227  1AE3  3E01               	addlw	1
 12228  1AE4  1D03               	btfss	3,2
 12229  1AE5  07FB               	addwf	___lmul@product+2,f
 12230  1AE6  0877               	movf	___lmul@multiplicand+3,w
 12231  1AE7  1103               	clrz
 12232  1AE8  1803               	skipnc
 12233  1AE9  3E01               	addlw	1
 12234  1AEA  1D03               	btfss	3,2
 12235  1AEB  07FC               	addwf	___lmul@product+3,f
 12236  1AEC                     l3709:	
 12237  1AEC  3001               	movlw	1
 12238  1AED  00F8               	movwf	??___lmul
 12239  1AEE                     u4795:	
 12240  1AEE  1003               	clrc
 12241  1AEF  0DF4               	rlf	___lmul@multiplicand,f
 12242  1AF0  0DF5               	rlf	___lmul@multiplicand+1,f
 12243  1AF1  0DF6               	rlf	___lmul@multiplicand+2,f
 12244  1AF2  0DF7               	rlf	___lmul@multiplicand+3,f
 12245  1AF3  0BF8               	decfsz	??___lmul,f
 12246  1AF4  2AEE               	goto	u4795
 12247  1AF5  3001               	movlw	1
 12248  1AF6                     u4805:	
 12249  1AF6  1003               	clrc
 12250  1AF7  0CF3               	rrf	___lmul@multiplier+3,f
 12251  1AF8  0CF2               	rrf	___lmul@multiplier+2,f
 12252  1AF9  0CF1               	rrf	___lmul@multiplier+1,f
 12253  1AFA  0CF0               	rrf	___lmul@multiplier,f
 12254  1AFB  3EFF               	addlw	-1
 12255  1AFC  1D03               	skipz
 12256  1AFD  2AF6               	goto	u4805
 12257  1AFE  0873               	movf	___lmul@multiplier+3,w
 12258  1AFF  0472               	iorwf	___lmul@multiplier+2,w
 12259  1B00  0471               	iorwf	___lmul@multiplier+1,w
 12260  1B01  0470               	iorwf	___lmul@multiplier,w
 12261  1B02  1D03               	skipz
 12262  1B03  2AD6               	goto	l3705
 12263  1B04  087C               	movf	___lmul@product+3,w
 12264  1B05  00F3               	movwf	?___lmul+3
 12265  1B06  087B               	movf	___lmul@product+2,w
 12266  1B07  00F2               	movwf	?___lmul+2
 12267  1B08  087A               	movf	___lmul@product+1,w
 12268  1B09  00F1               	movwf	?___lmul+1
 12269  1B0A  0879               	movf	___lmul@product,w
 12270  1B0B  00F0               	movwf	?___lmul
 12271  1B0C  0008               	return
 12272  1B0D                     __end_of___lmul:	
 12273                           
 12274                           	psect	text41
 12275  1C2E                     __ptext41:	
 12276 ;; *************** function ___awmod *****************
 12277 ;; Defined at:
 12278 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 12279 ;; Parameters:    Size  Location     Type
 12280 ;;  divisor         2    7[BANK0 ] int 
 12281 ;;  dividend        2    9[BANK0 ] int 
 12282 ;; Auto vars:     Size  Location     Type
 12283 ;;  sign            1   12[BANK0 ] unsigned char 
 12284 ;;  counter         1   11[BANK0 ] unsigned char 
 12285 ;; Return value:  Size  Location     Type
 12286 ;;                  2    7[BANK0 ] int 
 12287 ;; Registers used:
 12288 ;;		wreg, status,2, status,0
 12289 ;; Tracked objects:
 12290 ;;		On entry : 0/0
 12291 ;;		On exit  : 0/0
 12292 ;;		Unchanged: 0/0
 12293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12294 ;;      Params:         0       4       0       0       0
 12295 ;;      Locals:         0       2       0       0       0
 12296 ;;      Temps:          1       0       0       0       0
 12297 ;;      Totals:         1       6       0       0       0
 12298 ;;Total ram usage:        7 bytes
 12299 ;; Hardware stack levels used:    1
 12300 ;; This function calls:
 12301 ;;		Nothing
 12302 ;; This function is called by:
 12303 ;;		_char_info_index_rand
 12304 ;;		_USARTWriteInt
 12305 ;; This function uses a non-reentrant model
 12306 ;;
 12307                           
 12308                           
 12309                           ;psect for function ___awmod
 12310  1C2E                     ___awmod:	
 12311                           
 12312                           ;incstack = 0
 12313                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 12314  1C2E  1283               	bcf	3,5	;RP0=0, select bank0
 12315  1C2F  1303               	bcf	3,6	;RP1=0, select bank0
 12316  1C30  01AC               	clrf	___awmod@sign
 12317  1C31  1FAA               	btfss	___awmod@dividend+1,7
 12318  1C32  2C3A               	goto	l4087
 12319  1C33  09A9               	comf	___awmod@dividend,f
 12320  1C34  09AA               	comf	___awmod@dividend+1,f
 12321  1C35  0AA9               	incf	___awmod@dividend,f
 12322  1C36  1903               	skipnz
 12323  1C37  0AAA               	incf	___awmod@dividend+1,f
 12324  1C38  01AC               	clrf	___awmod@sign
 12325  1C39  0AAC               	incf	___awmod@sign,f
 12326  1C3A                     l4087:	
 12327  1C3A  1FA8               	btfss	___awmod@divisor+1,7
 12328  1C3B  2C41               	goto	l4091
 12329  1C3C  09A7               	comf	___awmod@divisor,f
 12330  1C3D  09A8               	comf	___awmod@divisor+1,f
 12331  1C3E  0AA7               	incf	___awmod@divisor,f
 12332  1C3F  1903               	skipnz
 12333  1C40  0AA8               	incf	___awmod@divisor+1,f
 12334  1C41                     l4091:	
 12335  1C41  0827               	movf	___awmod@divisor,w
 12336  1C42  0428               	iorwf	___awmod@divisor+1,w
 12337  1C43  1903               	btfsc	3,2
 12338  1C44  2C6E               	goto	l4109
 12339  1C45  01AB               	clrf	___awmod@counter
 12340  1C46  0AAB               	incf	___awmod@counter,f
 12341  1C47                     l4099:	
 12342  1C47  1BA8               	btfsc	___awmod@divisor+1,7
 12343  1C48  2C55               	goto	l4101
 12344  1C49  3001               	movlw	1
 12345  1C4A                     u5755:	
 12346  1C4A  1003               	clrc
 12347  1C4B  0DA7               	rlf	___awmod@divisor,f
 12348  1C4C  0DA8               	rlf	___awmod@divisor+1,f
 12349  1C4D  3EFF               	addlw	-1
 12350  1C4E  1D03               	skipz
 12351  1C4F  2C4A               	goto	u5755
 12352  1C50  3001               	movlw	1
 12353  1C51  00FD               	movwf	??___awmod
 12354  1C52  087D               	movf	??___awmod,w
 12355  1C53  07AB               	addwf	___awmod@counter,f
 12356  1C54  2C47               	goto	l4099
 12357  1C55                     l4101:	
 12358  1C55  0828               	movf	___awmod@divisor+1,w
 12359  1C56  022A               	subwf	___awmod@dividend+1,w
 12360  1C57  1D03               	skipz
 12361  1C58  2C5B               	goto	u5775
 12362  1C59  0827               	movf	___awmod@divisor,w
 12363  1C5A  0229               	subwf	___awmod@dividend,w
 12364  1C5B                     u5775:	
 12365  1C5B  1C03               	skipc
 12366  1C5C  2C63               	goto	l4105
 12367  1C5D  0827               	movf	___awmod@divisor,w
 12368  1C5E  02A9               	subwf	___awmod@dividend,f
 12369  1C5F  0828               	movf	___awmod@divisor+1,w
 12370  1C60  1C03               	skipc
 12371  1C61  03AA               	decf	___awmod@dividend+1,f
 12372  1C62  02AA               	subwf	___awmod@dividend+1,f
 12373  1C63                     l4105:	
 12374  1C63  3001               	movlw	1
 12375  1C64                     u5785:	
 12376  1C64  1003               	clrc
 12377  1C65  0CA8               	rrf	___awmod@divisor+1,f
 12378  1C66  0CA7               	rrf	___awmod@divisor,f
 12379  1C67  3EFF               	addlw	-1
 12380  1C68  1D03               	skipz
 12381  1C69  2C64               	goto	u5785
 12382  1C6A  3001               	movlw	1
 12383  1C6B  02AB               	subwf	___awmod@counter,f
 12384  1C6C  1D03               	btfss	3,2
 12385  1C6D  2C55               	goto	l4101
 12386  1C6E                     l4109:	
 12387  1C6E  082C               	movf	___awmod@sign,w
 12388  1C6F  1903               	btfsc	3,2
 12389  1C70  2C76               	goto	l4113
 12390  1C71  09A9               	comf	___awmod@dividend,f
 12391  1C72  09AA               	comf	___awmod@dividend+1,f
 12392  1C73  0AA9               	incf	___awmod@dividend,f
 12393  1C74  1903               	skipnz
 12394  1C75  0AAA               	incf	___awmod@dividend+1,f
 12395  1C76                     l4113:	
 12396  1C76  082A               	movf	___awmod@dividend+1,w
 12397  1C77  00A8               	movwf	?___awmod+1
 12398  1C78  0829               	movf	___awmod@dividend,w
 12399  1C79  00A7               	movwf	?___awmod
 12400  1C7A  0008               	return
 12401  1C7B                     __end_of___awmod:	
 12402                           
 12403                           	psect	text42
 12404  1B0D                     __ptext42:	
 12405 ;; *************** function _USARTInit *****************
 12406 ;; Defined at:
 12407 ;;		line 31 in file "usart_pic16.c"
 12408 ;; Parameters:    Size  Location     Type
 12409 ;;  baud_rate       2    0[COMMON] unsigned int 
 12410 ;; Auto vars:     Size  Location     Type
 12411 ;;		None
 12412 ;; Return value:  Size  Location     Type
 12413 ;;                  1    wreg      void 
 12414 ;; Registers used:
 12415 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12416 ;; Tracked objects:
 12417 ;;		On entry : 0/0
 12418 ;;		On exit  : 0/0
 12419 ;;		Unchanged: 0/0
 12420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12421 ;;      Params:         2       0       0       0       0
 12422 ;;      Locals:         0       0       0       0       0
 12423 ;;      Temps:          1       0       0       0       0
 12424 ;;      Totals:         3       0       0       0       0
 12425 ;;Total ram usage:        3 bytes
 12426 ;; Hardware stack levels used:    1
 12427 ;; This function calls:
 12428 ;;		Nothing
 12429 ;; This function is called by:
 12430 ;;		_main
 12431 ;; This function uses a non-reentrant model
 12432 ;;
 12433                           
 12434                           
 12435                           ;psect for function _USARTInit
 12436  1B0D                     _USARTInit:	
 12437                           
 12438                           ;usart_pic16.c: 33: UQFront = UQEnd = -1;
 12439                           
 12440                           ;incstack = 0
 12441                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 12442  1B0D  30FF               	movlw	255
 12443  1B0E  1283               	bcf	3,5	;RP0=0, select bank0
 12444  1B0F  1303               	bcf	3,6	;RP1=0, select bank0
 12445  1B10  00EE               	movwf	_UQEnd	;volatile
 12446  1B11  00F2               	movwf	??_USARTInit
 12447  1B12  0872               	movf	??_USARTInit,w
 12448  1B13  00EF               	movwf	_UQFront	;volatile
 12449                           
 12450                           ;usart_pic16.c: 36: switch (baud_rate) {
 12451  1B14  2B20               	goto	l4129
 12452  1B15                     l4119:	
 12453                           ;usart_pic16.c: 37: case 9600:
 12454                           
 12455                           
 12456                           ;usart_pic16.c: 38: SPBRG = 129;
 12457  1B15  3081               	movlw	129
 12458  1B16  2B1C               	goto	L38
 12459  1B17                     l4121:	
 12460                           ;usart_pic16.c: 40: case 19200:
 12461                           
 12462                           ;usart_pic16.c: 39: break;
 12463                           
 12464                           
 12465                           ;usart_pic16.c: 41: SPBRG = 64;
 12466  1B17  3040               	movlw	64
 12467  1B18  2B1C               	goto	L38
 12468  1B19                     l4123:	
 12469                           ;usart_pic16.c: 43: case 28800:
 12470                           
 12471                           ;usart_pic16.c: 42: break;
 12472                           
 12473                           
 12474                           ;usart_pic16.c: 44: SPBRG = 42;
 12475  1B19  302A               	movlw	42
 12476  1B1A  2B1C               	goto	L38
 12477  1B1B                     l4125:	
 12478                           ;usart_pic16.c: 46: case 33600:
 12479                           
 12480                           ;usart_pic16.c: 45: break;
 12481                           
 12482                           
 12483                           ;usart_pic16.c: 47: SPBRG = 36;
 12484  1B1B  3024               	movlw	36
 12485  1B1C                     L38:	
 12486  1B1C  1683               	bsf	3,5	;RP0=1, select bank1
 12487  1B1D  1303               	bcf	3,6	;RP1=0, select bank1
 12488  1B1E  0099               	movwf	25	;volatile
 12489                           
 12490                           ;usart_pic16.c: 49: }
 12491                           
 12492                           ;usart_pic16.c: 48: break;
 12493  1B1F  2B42               	goto	l29
 12494  1B20                     l4129:	
 12495                           
 12496                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 12497                           ; Switch size 1, requested type "space"
 12498                           ; Number of cases is 4, Range of values is 37 to 131
 12499                           ; switch strategies available:
 12500                           ; Name         Instructions Cycles
 12501                           ; simple_byte           13     7 (average)
 12502                           ; jumptable            263     9 (fixed)
 12503                           ;	Chosen strategy is simple_byte
 12504  1B20  0871               	movf	USARTInit@baud_rate+1,w
 12505  1B21  3A25               	xorlw	37	; case 37
 12506  1B22  1903               	skipnz
 12507  1B23  2B2E               	goto	l5925
 12508  1B24  3A6E               	xorlw	110	; case 75
 12509  1B25  1903               	skipnz
 12510  1B26  2B33               	goto	l5927
 12511  1B27  3A3B               	xorlw	59	; case 112
 12512  1B28  1903               	skipnz
 12513  1B29  2B38               	goto	l5929
 12514  1B2A  3AF3               	xorlw	243	; case 131
 12515  1B2B  1903               	skipnz
 12516  1B2C  2B3D               	goto	l5931
 12517  1B2D  2B42               	goto	l29
 12518  1B2E                     l5925:	
 12519                           
 12520                           ; Switch size 1, requested type "space"
 12521                           ; Number of cases is 1, Range of values is 128 to 128
 12522                           ; switch strategies available:
 12523                           ; Name         Instructions Cycles
 12524                           ; simple_byte            4     3 (average)
 12525                           ; direct_byte           14    11 (fixed)
 12526                           ; jumptable            263     9 (fixed)
 12527                           ;	Chosen strategy is simple_byte
 12528  1B2E  0870               	movf	USARTInit@baud_rate,w
 12529  1B2F  3A80               	xorlw	128	; case 128
 12530  1B30  1903               	skipnz
 12531  1B31  2B15               	goto	l4119
 12532  1B32  2B42               	goto	l29
 12533  1B33                     l5927:	
 12534                           
 12535                           ; Switch size 1, requested type "space"
 12536                           ; Number of cases is 1, Range of values is 0 to 0
 12537                           ; switch strategies available:
 12538                           ; Name         Instructions Cycles
 12539                           ; simple_byte            4     3 (average)
 12540                           ; direct_byte           11     8 (fixed)
 12541                           ; jumptable            260     6 (fixed)
 12542                           ;	Chosen strategy is simple_byte
 12543  1B33  0870               	movf	USARTInit@baud_rate,w
 12544  1B34  3A00               	xorlw	0	; case 0
 12545  1B35  1903               	skipnz
 12546  1B36  2B17               	goto	l4121
 12547  1B37  2B42               	goto	l29
 12548  1B38                     l5929:	
 12549                           
 12550                           ; Switch size 1, requested type "space"
 12551                           ; Number of cases is 1, Range of values is 128 to 128
 12552                           ; switch strategies available:
 12553                           ; Name         Instructions Cycles
 12554                           ; simple_byte            4     3 (average)
 12555                           ; direct_byte           14    11 (fixed)
 12556                           ; jumptable            263     9 (fixed)
 12557                           ;	Chosen strategy is simple_byte
 12558  1B38  0870               	movf	USARTInit@baud_rate,w
 12559  1B39  3A80               	xorlw	128	; case 128
 12560  1B3A  1903               	skipnz
 12561  1B3B  2B19               	goto	l4123
 12562  1B3C  2B42               	goto	l29
 12563  1B3D                     l5931:	
 12564                           
 12565                           ; Switch size 1, requested type "space"
 12566                           ; Number of cases is 1, Range of values is 64 to 64
 12567                           ; switch strategies available:
 12568                           ; Name         Instructions Cycles
 12569                           ; simple_byte            4     3 (average)
 12570                           ; direct_byte           14    11 (fixed)
 12571                           ; jumptable            263     9 (fixed)
 12572                           ;	Chosen strategy is simple_byte
 12573  1B3D  0870               	movf	USARTInit@baud_rate,w
 12574  1B3E  3A40               	xorlw	64	; case 64
 12575  1B3F  1903               	skipnz
 12576  1B40  2B1B               	goto	l4125
 12577  1B41  2B42               	goto	l29
 12578  1B42                     l29:	
 12579                           
 12580                           ;usart_pic16.c: 52: TXSTAbits.TX9 = 0;
 12581  1B42  1683               	bsf	3,5	;RP0=1, select bank1
 12582  1B43  1303               	bcf	3,6	;RP1=0, select bank1
 12583  1B44  1318               	bcf	24,6	;volatile
 12584                           
 12585                           ;usart_pic16.c: 53: TXSTAbits.TXEN = 1;
 12586  1B45  1698               	bsf	24,5	;volatile
 12587                           
 12588                           ;usart_pic16.c: 54: TXSTAbits.SYNC = 0;
 12589  1B46  1218               	bcf	24,4	;volatile
 12590                           
 12591                           ;usart_pic16.c: 55: TXSTAbits.BRGH = 1;
 12592  1B47  1518               	bsf	24,2	;volatile
 12593                           
 12594                           ;usart_pic16.c: 58: RCSTAbits.SPEN = 1;
 12595  1B48  1283               	bcf	3,5	;RP0=0, select bank0
 12596  1B49  1303               	bcf	3,6	;RP1=0, select bank0
 12597  1B4A  1798               	bsf	24,7	;volatile
 12598                           
 12599                           ;usart_pic16.c: 59: RCSTAbits.RX9 = 0;
 12600  1B4B  1318               	bcf	24,6	;volatile
 12601                           
 12602                           ;usart_pic16.c: 60: RCSTAbits.CREN = 1;
 12603  1B4C  1618               	bsf	24,4	;volatile
 12604                           
 12605                           ;usart_pic16.c: 61: RCSTAbits.ADDEN = 0;
 12606  1B4D  1198               	bcf	24,3	;volatile
 12607                           
 12608                           ;usart_pic16.c: 64: RCIE = 1;
 12609  1B4E  1683               	bsf	3,5	;RP0=1, select bank1
 12610  1B4F  1303               	bcf	3,6	;RP1=0, select bank1
 12611  1B50  168C               	bsf	12,5	;volatile
 12612                           
 12613                           ;usart_pic16.c: 65: PEIE = 1;
 12614  1B51  170B               	bsf	11,6	;volatile
 12615                           
 12616                           ;usart_pic16.c: 67: (GIE = 1);
 12617  1B52  178B               	bsf	11,7	;volatile
 12618  1B53  0008               	return
 12619  1B54                     __end_of_USARTInit:	
 12620                           
 12621                           	psect	text43
 12622  1889                     __ptext43:	
 12623 ;; *************** function _Clear_Matrix *****************
 12624 ;; Defined at:
 12625 ;;		line 601 in file "teris_16f886.c"
 12626 ;; Parameters:    Size  Location     Type
 12627 ;;		None
 12628 ;; Auto vars:     Size  Location     Type
 12629 ;;		None
 12630 ;; Return value:  Size  Location     Type
 12631 ;;                  1    wreg      void 
 12632 ;; Registers used:
 12633 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12634 ;; Tracked objects:
 12635 ;;		On entry : 0/0
 12636 ;;		On exit  : 0/0
 12637 ;;		Unchanged: 0/0
 12638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12639 ;;      Params:         0       0       0       0       0
 12640 ;;      Locals:         0       0       0       0       0
 12641 ;;      Temps:          0       0       0       0       0
 12642 ;;      Totals:         0       0       0       0       0
 12643 ;;Total ram usage:        0 bytes
 12644 ;; Hardware stack levels used:    1
 12645 ;; Hardware stack levels required when called:    5
 12646 ;; This function calls:
 12647 ;;		_memset
 12648 ;;		_printf_Screen
 12649 ;; This function is called by:
 12650 ;;		_main
 12651 ;; This function uses a non-reentrant model
 12652 ;;
 12653                           
 12654                           
 12655                           ;psect for function _Clear_Matrix
 12656  1889                     _Clear_Matrix:	
 12657                           
 12658                           ;teris_16f886.c: 603: memset(&g_matrix88, 0, sizeof(MATRIX88));
 12659                           
 12660                           ;incstack = 0
 12661                           ; Regs used in _Clear_Matrix: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12662  1889  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
 12663  188A  00F0               	movwf	memset@p1
 12664  188B  3001               	movlw	1
 12665  188C  00F1               	movwf	memset@p1+1
 12666  188D  3000               	movlw	0
 12667  188E  00F2               	movwf	memset@c
 12668  188F  00F3               	movwf	memset@c+1
 12669  1890  3040               	movlw	64
 12670  1891  00F4               	movwf	memset@n
 12671  1892  3000               	movlw	0
 12672  1893  00F5               	movwf	memset@n+1
 12673  1894  160A  158A  20B2  160A  158A  	fcall	_memset
 12674                           
 12675                           ;teris_16f886.c: 604: printf_Screen();
 12676  1899  160A  158A  200B   	fcall	_printf_Screen
 12677  189C  0008               	return
 12678  189D                     __end_of_Clear_Matrix:	
 12679                           
 12680                           	psect	text44
 12681  180B                     __ptext44:	
 12682 ;; *************** function _printf_Screen *****************
 12683 ;; Defined at:
 12684 ;;		line 584 in file "teris_16f886.c"
 12685 ;; Parameters:    Size  Location     Type
 12686 ;;		None
 12687 ;; Auto vars:     Size  Location     Type
 12688 ;;		None
 12689 ;; Return value:  Size  Location     Type
 12690 ;;                  1    wreg      void 
 12691 ;; Registers used:
 12692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12693 ;; Tracked objects:
 12694 ;;		On entry : 0/0
 12695 ;;		On exit  : 0/0
 12696 ;;		Unchanged: 0/0
 12697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12698 ;;      Params:         0       0       0       0       0
 12699 ;;      Locals:         0       0       0       0       0
 12700 ;;      Temps:          0       0       0       0       0
 12701 ;;      Totals:         0       0       0       0       0
 12702 ;;Total ram usage:        0 bytes
 12703 ;; Hardware stack levels used:    1
 12704 ;; Hardware stack levels required when called:    4
 12705 ;; This function calls:
 12706 ;;		_printf_MATRIX88
 12707 ;; This function is called by:
 12708 ;;		_Clear_Matrix
 12709 ;;		_main
 12710 ;; This function uses a non-reentrant model
 12711 ;;
 12712                           
 12713                           
 12714                           ;psect for function _printf_Screen
 12715  180B                     _printf_Screen:	
 12716                           
 12717                           ;teris_16f886.c: 586: printf_MATRIX88(&g_matrix88);
 12718                           
 12719                           ;incstack = 0
 12720                           ; Regs used in _printf_Screen: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12721  180B  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
 12722  180C  160A  158A  2077   	fcall	_printf_MATRIX88
 12723  180F  0008               	return
 12724  1810                     __end_of_printf_Screen:	
 12725                           
 12726                           	psect	text45
 12727  1877                     __ptext45:	
 12728 ;; *************** function _printf_MATRIX88 *****************
 12729 ;; Defined at:
 12730 ;;		line 578 in file "teris_16f886.c"
 12731 ;; Parameters:    Size  Location     Type
 12732 ;;  matrix88        1    wreg     PTR const struct .
 12733 ;;		 -> g_matrix88(64), 
 12734 ;; Auto vars:     Size  Location     Type
 12735 ;;  matrix88        1    0[BANK0 ] PTR const struct .
 12736 ;;		 -> g_matrix88(64), 
 12737 ;;  matrix7219      8    1[BANK0 ] struct .
 12738 ;; Return value:  Size  Location     Type
 12739 ;;                  1    wreg      void 
 12740 ;; Registers used:
 12741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12742 ;; Tracked objects:
 12743 ;;		On entry : 0/0
 12744 ;;		On exit  : 0/0
 12745 ;;		Unchanged: 0/0
 12746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12747 ;;      Params:         0       0       0       0       0
 12748 ;;      Locals:         0       9       0       0       0
 12749 ;;      Temps:          1       0       0       0       0
 12750 ;;      Totals:         1       9       0       0       0
 12751 ;;Total ram usage:       10 bytes
 12752 ;; Hardware stack levels used:    1
 12753 ;; Hardware stack levels required when called:    3
 12754 ;; This function calls:
 12755 ;;		_MATRIX88_to_MATRIX7219
 12756 ;;		_printf_MATRIX7219
 12757 ;; This function is called by:
 12758 ;;		_printf_Screen
 12759 ;; This function uses a non-reentrant model
 12760 ;;
 12761                           
 12762                           
 12763                           ;psect for function _printf_MATRIX88
 12764  1877                     _printf_MATRIX88:	
 12765                           
 12766                           ;incstack = 0
 12767                           ; Regs used in _printf_MATRIX88: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12768                           ;printf_MATRIX88@matrix88 stored from wreg
 12769  1877  1283               	bcf	3,5	;RP0=0, select bank0
 12770  1878  1303               	bcf	3,6	;RP1=0, select bank0
 12771  1879  00A0               	movwf	printf_MATRIX88@matrix88
 12772                           
 12773                           ;teris_16f886.c: 580: MATRIX7219 matrix7219;
 12774                           ;teris_16f886.c: 581: MATRIX88_to_MATRIX7219(matrix88, &matrix7219);
 12775  187A  3021               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
 12776  187B  00F8               	movwf	??_printf_MATRIX88
 12777  187C  0878               	movf	??_printf_MATRIX88,w
 12778  187D  00F0               	movwf	MATRIX88_to_MATRIX7219@matrix7219
 12779  187E  0820               	movf	printf_MATRIX88@matrix88,w
 12780  187F  160A  158A  2354  160A  158A  	fcall	_MATRIX88_to_MATRIX7219
 12781                           
 12782                           ;teris_16f886.c: 582: printf_MATRIX7219(&matrix7219);
 12783  1884  3021               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
 12784  1885  160A  158A  20CD   	fcall	_printf_MATRIX7219
 12785  1888  0008               	return
 12786  1889                     __end_of_printf_MATRIX88:	
 12787                           
 12788                           	psect	text46
 12789  18CD                     __ptext46:	
 12790 ;; *************** function _printf_MATRIX7219 *****************
 12791 ;; Defined at:
 12792 ;;		line 522 in file "teris_16f886.c"
 12793 ;; Parameters:    Size  Location     Type
 12794 ;;  matrix          1    wreg     PTR const struct .
 12795 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12796 ;; Auto vars:     Size  Location     Type
 12797 ;;  matrix          1    4[COMMON] PTR const struct .
 12798 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12799 ;;  col             1    5[COMMON] unsigned char 
 12800 ;; Return value:  Size  Location     Type
 12801 ;;                  1    wreg      void 
 12802 ;; Registers used:
 12803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12804 ;; Tracked objects:
 12805 ;;		On entry : 0/0
 12806 ;;		On exit  : 0/0
 12807 ;;		Unchanged: 0/0
 12808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12809 ;;      Params:         0       0       0       0       0
 12810 ;;      Locals:         2       0       0       0       0
 12811 ;;      Temps:          2       0       0       0       0
 12812 ;;      Totals:         4       0       0       0       0
 12813 ;;Total ram usage:        4 bytes
 12814 ;; Hardware stack levels used:    1
 12815 ;; Hardware stack levels required when called:    2
 12816 ;; This function calls:
 12817 ;;		_Write_Byte
 12818 ;; This function is called by:
 12819 ;;		_printf_MATRIX88
 12820 ;; This function uses a non-reentrant model
 12821 ;;
 12822                           
 12823                           
 12824                           ;psect for function _printf_MATRIX7219
 12825  18CD                     _printf_MATRIX7219:	
 12826                           
 12827                           ;incstack = 0
 12828                           ; Regs used in _printf_MATRIX7219: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12829                           ;printf_MATRIX7219@matrix stored from wreg
 12830  18CD  00F4               	movwf	printf_MATRIX7219@matrix
 12831                           
 12832                           ;teris_16f886.c: 524: uint8_t col;
 12833                           ;teris_16f886.c: 526: for (col = 0; col < 8; col++)
 12834  18CE  01F5               	clrf	printf_MATRIX7219@col
 12835  18CF                     L39:	
 12836  18CF  3008               	movlw	8
 12837  18D0  0275               	subwf	printf_MATRIX7219@col,w
 12838  18D1  1803               	btfsc	3,0
 12839  18D2  0008               	return
 12840                           
 12841                           ;teris_16f886.c: 527: {
 12842                           ;teris_16f886.c: 528: Write_Byte(col + 1, matrix->col[col]);
 12843  18D3  0875               	movf	printf_MATRIX7219@col,w
 12844  18D4  0774               	addwf	printf_MATRIX7219@matrix,w
 12845  18D5  00F2               	movwf	??_printf_MATRIX7219
 12846  18D6  0872               	movf	??_printf_MATRIX7219,w
 12847  18D7  0084               	movwf	4
 12848  18D8  1383               	bcf	3,7	;select IRP bank0
 12849  18D9  0800               	movf	0,w
 12850  18DA  00F3               	movwf	??_printf_MATRIX7219+1
 12851  18DB  0873               	movf	??_printf_MATRIX7219+1,w
 12852  18DC  00F0               	movwf	Write_Byte@myValue
 12853  18DD  0875               	movf	printf_MATRIX7219@col,w
 12854  18DE  3E01               	addlw	1
 12855  18DF  160A  158A  2065  160A  158A  	fcall	_Write_Byte
 12856  18E4  3001               	movlw	1
 12857  18E5  00F2               	movwf	??_printf_MATRIX7219
 12858  18E6  0872               	movf	??_printf_MATRIX7219,w
 12859  18E7  07F5               	addwf	printf_MATRIX7219@col,f
 12860  18E8  28CF               	goto	L39
 12861  18E9                     __end_of_printf_MATRIX7219:	
 12862                           
 12863                           	psect	text47
 12864  1865                     __ptext47:	
 12865 ;; *************** function _Write_Byte *****************
 12866 ;; Defined at:
 12867 ;;		line 482 in file "teris_16f886.c"
 12868 ;; Parameters:    Size  Location     Type
 12869 ;;  myColumn        1    wreg     unsigned char 
 12870 ;;  myValue         1    0[COMMON] unsigned char 
 12871 ;; Auto vars:     Size  Location     Type
 12872 ;;  myColumn        1    1[COMMON] unsigned char 
 12873 ;; Return value:  Size  Location     Type
 12874 ;;                  1    wreg      void 
 12875 ;; Registers used:
 12876 ;;		wreg, status,2, status,0, pclath, cstack
 12877 ;; Tracked objects:
 12878 ;;		On entry : 0/0
 12879 ;;		On exit  : 0/0
 12880 ;;		Unchanged: 0/0
 12881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12882 ;;      Params:         1       0       0       0       0
 12883 ;;      Locals:         1       0       0       0       0
 12884 ;;      Temps:          0       0       0       0       0
 12885 ;;      Totals:         2       0       0       0       0
 12886 ;;Total ram usage:        2 bytes
 12887 ;; Hardware stack levels used:    1
 12888 ;; Hardware stack levels required when called:    1
 12889 ;; This function calls:
 12890 ;;		_SPI1_write
 12891 ;; This function is called by:
 12892 ;;		_printf_MATRIX7219
 12893 ;; This function uses a non-reentrant model
 12894 ;;
 12895                           
 12896                           
 12897                           ;psect for function _Write_Byte
 12898  1865                     _Write_Byte:	
 12899                           
 12900                           ;incstack = 0
 12901                           ; Regs used in _Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 12902                           ;Write_Byte@myColumn stored from wreg
 12903  1865  00F1               	movwf	Write_Byte@myColumn
 12904                           
 12905                           ;teris_16f886.c: 483: RA2 = 0;
 12906  1866  1283               	bcf	3,5	;RP0=0, select bank0
 12907  1867  1303               	bcf	3,6	;RP1=0, select bank0
 12908  1868  1105               	bcf	5,2	;volatile
 12909                           
 12910                           ;teris_16f886.c: 484: SPI1_write(myColumn);
 12911  1869  0871               	movf	Write_Byte@myColumn,w
 12912  186A  120A  118A  2003  160A  158A  	fcall	_SPI1_write
 12913                           
 12914                           ;teris_16f886.c: 485: SPI1_write(myValue);
 12915  186F  0870               	movf	Write_Byte@myValue,w
 12916  1870  120A  118A  2003   	fcall	_SPI1_write
 12917                           
 12918                           ;teris_16f886.c: 486: RA2 = 1;
 12919  1873  1283               	bcf	3,5	;RP0=0, select bank0
 12920  1874  1303               	bcf	3,6	;RP1=0, select bank0
 12921  1875  1505               	bsf	5,2	;volatile
 12922  1876  0008               	return
 12923  1877                     __end_of_Write_Byte:	
 12924                           
 12925                           	psect	text48
 12926  0003                     __ptext48:	
 12927 ;; *************** function _SPI1_write *****************
 12928 ;; Defined at:
 12929 ;;		line 424 in file "teris_16f886.c"
 12930 ;; Parameters:    Size  Location     Type
 12931 ;;  data            1    wreg     unsigned char 
 12932 ;; Auto vars:     Size  Location     Type
 12933 ;;  data            1    0[COMMON] unsigned char 
 12934 ;; Return value:  Size  Location     Type
 12935 ;;                  1    wreg      void 
 12936 ;; Registers used:
 12937 ;;		wreg
 12938 ;; Tracked objects:
 12939 ;;		On entry : 0/0
 12940 ;;		On exit  : 0/0
 12941 ;;		Unchanged: 0/0
 12942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12943 ;;      Params:         0       0       0       0       0
 12944 ;;      Locals:         0       0       0       0       0
 12945 ;;      Temps:          0       0       0       0       0
 12946 ;;      Totals:         0       0       0       0       0
 12947 ;;Total ram usage:        0 bytes
 12948 ;; Hardware stack levels used:    1
 12949 ;; This function calls:
 12950 ;;		Nothing
 12951 ;; This function is called by:
 12952 ;;		_Write_Byte
 12953 ;;		_max7219_init1
 12954 ;; This function uses a non-reentrant model
 12955 ;;
 12956                           
 12957                           
 12958                           ;psect for function _SPI1_write
 12959  0003                     _SPI1_write:	
 12960                           
 12961                           ;incstack = 0
 12962                           ; Regs used in _SPI1_write: [wreg]
 12963  0003  0008               	return
 12964  0004                     __end_of_SPI1_write:	
 12965                           
 12966                           	psect	text49
 12967  1B54                     __ptext49:	
 12968 ;; *************** function _MATRIX88_to_MATRIX7219 *****************
 12969 ;; Defined at:
 12970 ;;		line 531 in file "teris_16f886.c"
 12971 ;; Parameters:    Size  Location     Type
 12972 ;;  matrix88        1    wreg     PTR const struct .
 12973 ;;		 -> g_matrix88(64), 
 12974 ;;  matrix7219      1    0[COMMON] PTR struct .
 12975 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12976 ;; Auto vars:     Size  Location     Type
 12977 ;;  matrix88        1    4[COMMON] PTR const struct .
 12978 ;;		 -> g_matrix88(64), 
 12979 ;;  row             1    6[COMMON] unsigned char 
 12980 ;;  col             1    7[COMMON] unsigned char 
 12981 ;;  mask            1    5[COMMON] unsigned char 
 12982 ;; Return value:  Size  Location     Type
 12983 ;;                  1    wreg      void 
 12984 ;; Registers used:
 12985 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12986 ;; Tracked objects:
 12987 ;;		On entry : 0/0
 12988 ;;		On exit  : 0/0
 12989 ;;		Unchanged: 0/0
 12990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12991 ;;      Params:         1       0       0       0       0
 12992 ;;      Locals:         4       0       0       0       0
 12993 ;;      Temps:          3       0       0       0       0
 12994 ;;      Totals:         8       0       0       0       0
 12995 ;;Total ram usage:        8 bytes
 12996 ;; Hardware stack levels used:    1
 12997 ;; This function calls:
 12998 ;;		Nothing
 12999 ;; This function is called by:
 13000 ;;		_printf_MATRIX88
 13001 ;; This function uses a non-reentrant model
 13002 ;;
 13003                           
 13004                           
 13005                           ;psect for function _MATRIX88_to_MATRIX7219
 13006  1B54                     _MATRIX88_to_MATRIX7219:	
 13007                           
 13008                           ;incstack = 0
 13009                           ; Regs used in _MATRIX88_to_MATRIX7219: [wreg-fsr0h+status,2+status,0]
 13010                           ;MATRIX88_to_MATRIX7219@matrix88 stored from wreg
 13011  1B54  00F4               	movwf	MATRIX88_to_MATRIX7219@matrix88
 13012                           
 13013                           ;teris_16f886.c: 533: uint8_t mask = 0x80;
 13014  1B55  3080               	movlw	128
 13015  1B56  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13016  1B57  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13017  1B58  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
 13018                           
 13019                           ;teris_16f886.c: 535: for(uint8_t col = 0; col < 8; col++)
 13020  1B59  01F7               	clrf	MATRIX88_to_MATRIX7219@col
 13021  1B5A                     L40:	
 13022  1B5A  3008               	movlw	8
 13023  1B5B  0277               	subwf	MATRIX88_to_MATRIX7219@col,w
 13024  1B5C  1803               	btfsc	3,0
 13025  1B5D  0008               	return
 13026                           
 13027                           ;teris_16f886.c: 536: {
 13028                           ;teris_16f886.c: 537: mask = 0x80;
 13029  1B5E  3080               	movlw	128
 13030  1B5F  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13031  1B60  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13032  1B61  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
 13033                           
 13034                           ;teris_16f886.c: 538: matrix7219->col[col] = 0;
 13035  1B62  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 13036  1B63  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
 13037  1B64  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13038  1B65  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13039  1B66  0084               	movwf	4
 13040  1B67  1383               	bcf	3,7	;select IRP bank0
 13041  1B68  0180               	clrf	0
 13042                           
 13043                           ;teris_16f886.c: 539: for(uint8_t row = 0; row < 8; row++)
 13044  1B69  01F6               	clrf	MATRIX88_to_MATRIX7219@row
 13045  1B6A  3008               	movlw	8
 13046  1B6B  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
 13047  1B6C  1803               	btfsc	3,0
 13048  1B6D  2B97               	goto	l3463
 13049  1B6E                     l3453:	
 13050                           
 13051                           ;teris_16f886.c: 540: {
 13052                           ;teris_16f886.c: 541: if(matrix88->data[row][col] == 1)
 13053  1B6E  0876               	movf	MATRIX88_to_MATRIX7219@row,w
 13054  1B6F  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13055  1B70  3002               	movlw	2
 13056  1B71                     u4215:	
 13057  1B71  1003               	clrc
 13058  1B72  0DF1               	rlf	??_MATRIX88_to_MATRIX7219,f
 13059  1B73  3EFF               	addlw	-1
 13060  1B74  1D03               	skipz
 13061  1B75  2B71               	goto	u4215
 13062  1B76  1003               	clrc
 13063  1B77  0D71               	rlf	??_MATRIX88_to_MATRIX7219,w
 13064  1B78  0774               	addwf	MATRIX88_to_MATRIX7219@matrix88,w
 13065  1B79  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
 13066  1B7A  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 13067  1B7B  0772               	addwf	??_MATRIX88_to_MATRIX7219+1,w
 13068  1B7C  00F3               	movwf	??_MATRIX88_to_MATRIX7219+2
 13069  1B7D  0873               	movf	??_MATRIX88_to_MATRIX7219+2,w
 13070  1B7E  0084               	movwf	4
 13071  1B7F  1783               	bsf	3,7	;select IRP bank2
 13072  1B80  0300               	decf	0,w
 13073  1B81  1D03               	btfss	3,2
 13074  1B82  2B8D               	goto	l3457
 13075                           
 13076                           ;teris_16f886.c: 542: {
 13077                           ;teris_16f886.c: 543: matrix7219->col[col] |= mask;
 13078  1B83  0875               	movf	MATRIX88_to_MATRIX7219@mask,w
 13079  1B84  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13080  1B85  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 13081  1B86  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
 13082  1B87  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
 13083  1B88  0872               	movf	??_MATRIX88_to_MATRIX7219+1,w
 13084  1B89  0084               	movwf	4
 13085  1B8A  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13086  1B8B  1383               	bcf	3,7	;select IRP bank0
 13087  1B8C  0480               	iorwf	0,f
 13088  1B8D                     l3457:	
 13089                           
 13090                           ;teris_16f886.c: 544: }
 13091                           ;teris_16f886.c: 545: mask >>= 1;
 13092  1B8D  1003               	clrc
 13093  1B8E  0CF5               	rrf	MATRIX88_to_MATRIX7219@mask,f
 13094  1B8F  3001               	movlw	1
 13095  1B90  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13096  1B91  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13097  1B92  07F6               	addwf	MATRIX88_to_MATRIX7219@row,f
 13098  1B93  3008               	movlw	8
 13099  1B94  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
 13100  1B95  1C03               	skipc
 13101  1B96  2B6E               	goto	l3453
 13102  1B97                     l3463:	
 13103  1B97  3001               	movlw	1
 13104  1B98  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13105  1B99  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13106  1B9A  07F7               	addwf	MATRIX88_to_MATRIX7219@col,f
 13107  1B9B  2B5A               	goto	L40
 13108  1B9C                     __end_of_MATRIX88_to_MATRIX7219:	
 13109                           
 13110                           	psect	text50
 13111  18B2                     __ptext50:	
 13112 ;; *************** function _memset *****************
 13113 ;; Defined at:
 13114 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
 13115 ;; Parameters:    Size  Location     Type
 13116 ;;  p1              2    0[COMMON] PTR void 
 13117 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
 13118 ;;  c               2    2[COMMON] int 
 13119 ;;  n               2    4[COMMON] unsigned int 
 13120 ;; Auto vars:     Size  Location     Type
 13121 ;;  p               2    6[COMMON] PTR unsigned char 
 13122 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
 13123 ;; Return value:  Size  Location     Type
 13124 ;;                  2    0[COMMON] PTR void 
 13125 ;; Registers used:
 13126 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13127 ;; Tracked objects:
 13128 ;;		On entry : 0/0
 13129 ;;		On exit  : 0/0
 13130 ;;		Unchanged: 0/0
 13131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13132 ;;      Params:         6       0       0       0       0
 13133 ;;      Locals:         2       0       0       0       0
 13134 ;;      Temps:          0       0       0       0       0
 13135 ;;      Totals:         8       0       0       0       0
 13136 ;;Total ram usage:        8 bytes
 13137 ;; Hardware stack levels used:    1
 13138 ;; This function calls:
 13139 ;;		Nothing
 13140 ;; This function is called by:
 13141 ;;		_Clear_Matrix
 13142 ;;		_delete_row
 13143 ;; This function uses a non-reentrant model
 13144 ;;
 13145                           
 13146                           
 13147                           ;psect for function _memset
 13148  18B2                     _memset:	
 13149                           
 13150                           ;incstack = 0
 13151                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
 13152  18B2  0870               	movf	memset@p1,w
 13153  18B3  00F6               	movwf	memset@p
 13154  18B4  0871               	movf	memset@p1+1,w
 13155  18B5  00F7               	movwf	memset@p+1
 13156  18B6                     l3473:	
 13157  18B6  3001               	movlw	1
 13158  18B7  02F4               	subwf	memset@n,f
 13159  18B8  3000               	movlw	0
 13160  18B9  1C03               	skipc
 13161  18BA  03F5               	decf	memset@n+1,f
 13162  18BB  02F5               	subwf	memset@n+1,f
 13163  18BC  0A74               	incf	memset@n,w
 13164  18BD  1903               	btfsc	3,2
 13165  18BE  0A75               	incf	memset@n+1,w
 13166  18BF  1903               	btfsc	3,2
 13167  18C0  0008               	return
 13168  18C1  0876               	movf	memset@p,w
 13169  18C2  0084               	movwf	4
 13170  18C3  1383               	bcf	3,7
 13171  18C4  1877               	btfsc	memset@p+1,0
 13172  18C5  1783               	bsf	3,7
 13173  18C6  0872               	movf	memset@c,w
 13174  18C7  0080               	movwf	0
 13175  18C8  3001               	movlw	1
 13176  18C9  07F6               	addwf	memset@p,f
 13177  18CA  1803               	skipnc
 13178  18CB  0AF7               	incf	memset@p+1,f
 13179  18CC  28B6               	goto	l3473
 13180  18CD                     __end_of_memset:	
 13181                           ;	Return value of _memset is never used
 13182                           
 13183  007E                     btemp	set	126	;btemp
 13184  007E                     wtemp	set	126
 13185  007E                     wtemp0	set	126
 13186  0080                     wtemp1	set	128
 13187  0082                     wtemp2	set	130
 13188  0084                     wtemp3	set	132
 13189  0086                     wtemp4	set	134
 13190  0088                     wtemp5	set	136
 13191  007F                     wtemp6	set	127
 13192  007E                     ttemp	set	126
 13193  007E                     ttemp0	set	126
 13194  0081                     ttemp1	set	129
 13195  0084                     ttemp2	set	132
 13196  0087                     ttemp3	set	135
 13197  007F                     ttemp4	set	127
 13198  007E                     ltemp	set	126
 13199  007E                     ltemp0	set	126
 13200  0082                     ltemp1	set	130
 13201  0086                     ltemp2	set	134
 13202  0080                     ltemp3	set	128


Data Sizes:
    Strings     1043
    Constant    414
    Data        38
    BSS         144
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     72      80
    BANK1            80     71      80
    BANK3            96      0      71
    BANK2            96      0      96

Pointer List with Targets:

    is_right_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_left_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    memset@p1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memset@p	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    sprintf$720	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_100(CODE[17]), STR_99(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_97(CODE[13]), STR_95(CODE[23]), STR_93(CODE[19]), STR_92(CODE[19]), 
		 -> STR_91(CODE[19]), STR_90(CODE[20]), STR_89(CODE[16]), STR_88(CODE[15]), 
		 -> STR_85(CODE[19]), STR_84(CODE[19]), STR_83(CODE[19]), STR_82(CODE[20]), 
		 -> STR_81(CODE[16]), STR_80(CODE[15]), STR_78(CODE[18]), STR_77(CODE[19]), 
		 -> STR_76(CODE[18]), STR_75(CODE[19]), STR_74(CODE[18]), STR_73(CODE[17]), 
		 -> STR_72(CODE[22]), STR_71(CODE[18]), STR_70(CODE[19]), STR_69(CODE[18]), 
		 -> STR_68(CODE[19]), STR_67(CODE[18]), STR_66(CODE[20]), STR_65(CODE[15]), 
		 -> STR_64(CODE[19]), STR_58(CODE[14]), STR_57(CODE[10]), STR_56(CODE[11]), 
		 -> STR_55(CODE[9]), STR_54(CODE[12]), STR_53(CODE[9]), STR_52(CODE[7]), 
		 -> STR_50(CODE[21]), STR_49(CODE[16]), STR_48(CODE[15]), STR_47(CODE[10]), 
		 -> STR_46(CODE[15]), STR_44(CODE[15]), STR_39(CODE[19]), STR_37(CODE[19]), 
		 -> STR_35(CODE[19]), STR_31(CODE[24]), STR_30(CODE[24]), STR_28(CODE[25]), 
		 -> STR_14(CODE[27]), STR_13(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 32
		 -> g_debug(BANK3[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    g_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    find_best_solution@temp_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_holes_after_merge@matrix	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    get_high_after_merge@matrix	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_high@matrix	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    left_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    left_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    evaluate@matrix	PTR const struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge1@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    merge1@matrix88_in	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge1@matrix88_out	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    clear@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    clear@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    fall_off@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    fall_off@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_right_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_left_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_valid@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_valid@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    hit_land@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    hit_land@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    is_row_empty@matrix	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    delete_matrix@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memcpy	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    delete_row@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    is_row_full@matrix	PTR const struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memset	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    printf_debug_Screen@lable	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_61(CODE[15]), 

    printf_MATRIX88@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    printf_debug_MATRIX88@matrix	PTR const struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    printf_debug_MATRIX88@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_98(CODE[12]), STR_62(CODE[15]), ROM(CODE[8192]), 

    MATRIX88_to_MATRIX7219@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    MATRIX88_to_MATRIX7219@matrix7219	PTR struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    printf_MATRIX7219@matrix	PTR const struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    sp__get_MATRIX44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_debug_cur_MATRIX44@matrix	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_debug_cur_MATRIX44@lable	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_86(CODE[7]), 

    printf_debug_MATRIX44@matrix	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_debug_MATRIX44@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_60(CODE[15]), ROM(CODE[8192]), 

    debug_int2@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_78(CODE[18]), STR_77(CODE[19]), STR_76(CODE[18]), STR_75(CODE[19]), 
		 -> STR_74(CODE[18]), STR_73(CODE[17]), STR_71(CODE[18]), STR_70(CODE[19]), 
		 -> STR_69(CODE[18]), STR_68(CODE[19]), STR_67(CODE[18]), STR_66(CODE[20]), 
		 -> STR_64(CODE[19]), STR_46(CODE[15]), STR_44(CODE[15]), STR_39(CODE[19]), 
		 -> STR_37(CODE[19]), STR_35(CODE[19]), STR_31(CODE[24]), STR_30(CODE[24]), 
		 -> STR_14(CODE[27]), 

    debug_int1@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_97(CODE[13]), STR_95(CODE[23]), STR_93(CODE[19]), STR_92(CODE[19]), 
		 -> STR_91(CODE[19]), STR_90(CODE[20]), STR_89(CODE[16]), STR_88(CODE[15]), 
		 -> STR_85(CODE[19]), STR_84(CODE[19]), STR_83(CODE[19]), STR_82(CODE[20]), 
		 -> STR_81(CODE[16]), STR_80(CODE[15]), STR_72(CODE[22]), STR_65(CODE[15]), 
		 -> STR_58(CODE[14]), STR_57(CODE[10]), STR_56(CODE[11]), STR_55(CODE[9]), 
		 -> STR_54(CODE[12]), STR_53(CODE[9]), STR_52(CODE[7]), STR_50(CODE[21]), 
		 -> STR_49(CODE[16]), STR_48(CODE[15]), STR_47(CODE[10]), STR_28(CODE[25]), 
		 -> STR_13(CODE[10]), 

    debug_line@str	PTR const unsigned char  size(2) Largest target is 45
		 -> STR_96(CODE[13]), STR_94(CODE[13]), STR_87(CODE[7]), STR_79(CODE[5]), 
		 -> STR_63(CODE[17]), STR_59(CODE[45]), STR_51(CODE[21]), STR_45(CODE[10]), 
		 -> STR_43(CODE[10]), STR_42(CODE[20]), STR_41(CODE[19]), STR_40(CODE[6]), 
		 -> STR_38(CODE[11]), STR_36(CODE[11]), STR_34(CODE[11]), STR_33(CODE[35]), 
		 -> STR_32(CODE[8]), STR_29(CODE[35]), STR_27(CODE[2]), STR_26(CODE[21]), 
		 -> STR_25(CODE[1]), STR_22(CODE[29]), STR_21(CODE[2]), STR_20(CODE[21]), 
		 -> STR_19(CODE[1]), STR_16(CODE[21]), STR_15(CODE[2]), STR_12(CODE[20]), 
		 -> STR_11(CODE[2]), STR_10(CODE[21]), STR_9(CODE[1]), STR_6(CODE[29]), 
		 -> STR_5(CODE[2]), 

    debug_str@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_98(CODE[12]), STR_86(CODE[7]), STR_62(CODE[15]), STR_61(CODE[15]), 
		 -> STR_60(CODE[15]), STR_24(CODE[2]), STR_23(CODE[2]), STR_18(CODE[2]), 
		 -> STR_17(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), ROM(CODE[8192]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_98(CODE[12]), STR_96(CODE[13]), STR_94(CODE[13]), STR_87(CODE[7]), 
		 -> STR_86(CODE[7]), STR_79(CODE[5]), STR_63(CODE[17]), STR_62(CODE[15]), 
		 -> STR_61(CODE[15]), STR_60(CODE[15]), STR_59(CODE[45]), STR_51(CODE[21]), 
		 -> STR_45(CODE[10]), STR_43(CODE[10]), STR_42(CODE[20]), STR_41(CODE[19]), 
		 -> STR_40(CODE[6]), STR_38(CODE[11]), STR_36(CODE[11]), STR_34(CODE[11]), 
		 -> STR_33(CODE[35]), STR_32(CODE[8]), STR_29(CODE[35]), STR_27(CODE[2]), 
		 -> STR_26(CODE[21]), STR_25(CODE[1]), STR_24(CODE[2]), STR_23(CODE[2]), 
		 -> STR_22(CODE[29]), STR_21(CODE[2]), STR_20(CODE[21]), STR_19(CODE[1]), 
		 -> STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[21]), STR_15(CODE[2]), 
		 -> STR_12(CODE[20]), STR_11(CODE[2]), STR_10(CODE[21]), STR_9(CODE[1]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[29]), STR_5(CODE[2]), 
		 -> ROM(CODE[8192]), STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), 
		 -> g_debug(BANK3[32]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    _find_best_solution->_printf_debug_Screen
    _is_right_boundary->_debug_line
    _printf_debug_cur_MATRIX44->_printf_debug_MATRIX44
    _printf_debug_MATRIX44->_debug_line
    _printf_debug_MATRIX44->_debug_str
    _printf_debug_Screen->_printf_debug_MATRIX88
    _printf_debug_MATRIX88->_debug_line
    _printf_debug_MATRIX88->_debug_str
    _debug_str->_USARTWriteString
    _merge1->_memcpy
    _left_most->_is_left_boundary
    _is_left_boundary->_debug_line
    _debug_line->_USARTWriteString
    _delete_matrix->_delete_row
    _delete_row->_memcpy
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USARTWriteString->_USARTWriteChar
    _char_info_index_rand->___awmod
    _rand->___lmul
    _printf_Screen->_printf_MATRIX88
    _printf_MATRIX88->_MATRIX88_to_MATRIX7219
    _printf_MATRIX7219->_Write_Byte

Critical Paths under _main in BANK0

    _main->_find_best_solution
    _hit_land->_debug_int2
    _find_best_solution->_fall_off
    _find_best_solution->_is_valid
    _right_most->_debug_int1
    _printf_debug_cur_MATRIX44->_printf_debug_MATRIX44
    _printf_debug_Screen->_printf_debug_MATRIX88
    _left_most->_debug_int1
    _is_valid->_debug_int2
    _get_holes_after_merge->_debug_int1
    _get_high_after_merge->_debug_int1
    _get_high->_debug_int1
    _fall_off->_debug_int2
    _debug_int2->_sprintf
    _evaluate->_debug_int1
    _delete_matrix->_debug_int1
    _debug_int1->_sprintf
    _char_info_index_rand->___awmod
    ___awmod->_rand
    _printf_Screen->_printf_MATRIX88

Critical Paths under _main in BANK1

    _main->_find_best_solution

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    12      4  212445
                                             56 BANK0     16    12      4
                       _Clear_Matrix
                          _USARTInit
                             ___bmul
               _char_info_index_rand
                              _clear
                         _debug_int1
                         _debug_line
                      _delete_matrix
                 _find_best_solution
                           _hit_land
                              _merge
                      _printf_Screen
              _printf_debug_MATRIX88
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _merge                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _hit_land                                            11     7      4   13576
                                             38 BANK0     11     7      4
                         _debug_int2
                         _debug_line
 ---------------------------------------------------------------------------------
 (1) _find_best_solution                                  78    78      0  166056
                                             49 BANK0      7     7      0
                                              0 BANK1     71    71      0
                             ___bmul
                         _debug_int1
                         _debug_int2
                         _debug_line
                      _delete_matrix
                           _evaluate
                           _fall_off
                           _get_high
               _get_high_after_merge
              _get_holes_after_merge
                           _is_valid
                          _left_most
                             _merge1
              _printf_debug_MATRIX44
              _printf_debug_MATRIX88
                _printf_debug_Screen
          _printf_debug_cur_MATRIX44
                         _right_most
 ---------------------------------------------------------------------------------
 (2) _right_most                                           6     3      3   13164
                                             36 BANK0      6     3      3
                         _debug_int1
                  _is_right_boundary
 ---------------------------------------------------------------------------------
 (3) _is_right_boundary                                   10     7      3    3374
                                              6 COMMON     7     4      3
                                              0 BANK0      3     3      0
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _printf_debug_cur_MATRIX44                           16    12      4   11127
                                             12 BANK0     16    12      4
                             ___bmul
                         _debug_line
                          _debug_str
              _printf_debug_MATRIX44
 ---------------------------------------------------------------------------------
 (3) _printf_debug_MATRIX44                               18    12      6    5888
                                              6 COMMON     6     0      6
                                              0 BANK0     12    12      0
                         _debug_line
                          _debug_str
 ---------------------------------------------------------------------------------
 (2) _printf_debug_Screen                                  3     1      2    9822
                                             13 COMMON     1     1      0
                                              5 BANK0      2     0      2
                         _debug_line
                          _debug_str
              _printf_debug_MATRIX88
 ---------------------------------------------------------------------------------
 (1) _printf_debug_MATRIX88                               12     8      4    5188
                                              6 COMMON     7     3      4
                                              0 BANK0      5     5      0
                         _debug_line
                          _debug_str
 ---------------------------------------------------------------------------------
 (2) _debug_str                                            3     1      2    1523
                                              3 COMMON     3     1      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _merge1                                              14     9      5    1128
                                              0 BANK0     14     9      5
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _left_most                                            5     2      3   13164
                                             36 BANK0      5     2      3
                         _debug_int1
                   _is_left_boundary
 ---------------------------------------------------------------------------------
 (3) _is_left_boundary                                    11     8      3    3374
                                              6 COMMON     8     5      3
                                              0 BANK0      3     3      0
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _is_valid                                            11     7      4   13762
                                             38 BANK0     11     7      4
                         _debug_int2
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _get_holes_after_merge                               12    12      0   11127
                                             36 BANK0     12    12      0
                         _debug_int1
 ---------------------------------------------------------------------------------
 (2) _get_high_after_merge                                 9     7      2   12935
                                             36 BANK0      9     7      2
                         _debug_int1
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _get_high                                             4     4      0    9916
                                             36 BANK0      4     4      0
                         _debug_int1
                       _is_row_empty
 ---------------------------------------------------------------------------------
 (3) _is_row_empty                                         6     5      1     192
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (2) _fall_off                                            11     7      4   13641
                                             38 BANK0     11     7      4
                         _debug_int2
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _debug_line                                           3     1      2    2953
                                              3 COMMON     3     1      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _debug_int2                                           7     1      6    9858
                                             31 BANK0      7     1      6
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _evaluate                                            12    10      2   10089
                                             36 BANK0     12    10      2
                         _debug_int1
 ---------------------------------------------------------------------------------
 (2) _delete_matrix                                        6     4      2   11224
                                             36 BANK0      6     4      2
                         _debug_int1
                         _delete_row
                        _is_row_full
 ---------------------------------------------------------------------------------
 (3) _is_row_full                                          9     6      3     193
                                              0 COMMON     9     6      3
 ---------------------------------------------------------------------------------
 (3) _delete_row                                          10     7      3    1232
                                             11 COMMON     3     0      3
                                              0 BANK0      7     7      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6     388
                                              0 COMMON    11     5      6
 ---------------------------------------------------------------------------------
 (3) _debug_int1                                           5     1      4    9502
                                             31 BANK0      5     1      4
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             35    27      8    4893
                                              0 BANK0     31    23      8
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     684
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     480
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     379
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     0      2     746
                                              1 COMMON     2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _clear                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _char_info_index_rand                                 0     0      0     706
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     198
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     508
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      75
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Clear_Matrix                                         0     0      0    1047
                             _memset
                      _printf_Screen
 ---------------------------------------------------------------------------------
 (1) _printf_Screen                                        0     0      0     683
                    _printf_MATRIX88
 ---------------------------------------------------------------------------------
 (2) _printf_MATRIX88                                     10    10      0     683
                                              8 COMMON     1     1      0
                                              0 BANK0      9     9      0
             _MATRIX88_to_MATRIX7219
                  _printf_MATRIX7219
 ---------------------------------------------------------------------------------
 (3) _printf_MATRIX7219                                    4     4      0     236
                                              2 COMMON     4     4      0
                         _Write_Byte
 ---------------------------------------------------------------------------------
 (4) _Write_Byte                                           2     1      1      97
                                              0 COMMON     2     1      1
                         _SPI1_write
 ---------------------------------------------------------------------------------
 (5) _SPI1_write                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _MATRIX88_to_MATRIX7219                               8     7      1     351
                                              0 COMMON     8     7      1
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     364
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Clear_Matrix
     _memset
     _printf_Screen
       _printf_MATRIX88
         _MATRIX88_to_MATRIX7219
         _printf_MATRIX7219
           _Write_Byte
             _SPI1_write
   _USARTInit
   ___bmul
   _char_info_index_rand
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _clear
   _debug_int1
     _USARTWriteString
       _USARTWriteChar
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _debug_line
     _USARTWriteString
       _USARTWriteChar
   _delete_matrix
     _debug_int1
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _delete_row
       _memcpy
       _memset
     _is_row_full
   _find_best_solution
     ___bmul
     _debug_int1
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_int2
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _delete_matrix
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _delete_row
         _memcpy
         _memset
       _is_row_full
     _evaluate
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _fall_off
       _debug_int2
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _debug_line
         _USARTWriteString
           _USARTWriteChar
     _get_high
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_row_empty
     _get_high_after_merge
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _debug_line
         _USARTWriteString
           _USARTWriteChar
     _get_holes_after_merge
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _is_valid
       _debug_int2
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _debug_line
         _USARTWriteString
           _USARTWriteChar
     _left_most
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_left_boundary
         _debug_line
           _USARTWriteString
             _USARTWriteChar
     _merge1
       _memcpy
     _printf_debug_MATRIX44
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
     _printf_debug_MATRIX88
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
     _printf_debug_Screen
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
       _printf_debug_MATRIX88
         _debug_line
           _USARTWriteString
             _USARTWriteChar
         _debug_str
           _USARTWriteString
             _USARTWriteChar
     _printf_debug_cur_MATRIX44
       ___bmul
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
       _printf_debug_MATRIX44
         _debug_line
           _USARTWriteString
             _USARTWriteChar
         _debug_str
           _USARTWriteString
             _USARTWriteChar
     _right_most
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_right_boundary
         _debug_line
           _USARTWriteString
             _USARTWriteChar
   _hit_land
     _debug_int2
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_line
       _USARTWriteString
         _USARTWriteChar
   _merge
   _printf_Screen
     _printf_MATRIX88
       _MATRIX88_to_MATRIX7219
       _printf_MATRIX7219
         _Write_Byte
           _SPI1_write
   _printf_debug_MATRIX88
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _debug_str
       _USARTWriteString
         _USARTWriteChar
   _srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      47       9       74.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      60      11      100.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     47      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     48      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     155      12        0.0%
ABS                  0      0     155       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Aug 27 14:38:32 2016

                         __CFG_CP$ON 0000                                    pc 0002  
                     ___bmul@product 0072        get_holes_after_merge@num_hole 004A  
                                 l36 1811                                   l29 1B42  
                        __CFG_CPD$ON 0000                    merge1@matrix88_in 0023  
     __end_of_MATRIX88_to_MATRIX7219 1B9C                                   fsr 0004  
                ___wmul@multiplicand 0072                   USARTInit@baud_rate 0070  
              ?_char_info_index_rand 0070                          get_high@row 0047  
                        __CFG_LVP$ON 0000                                  l420 0F84  
                                l431 0F7B                                  l239 1044  
                                l256 0DE5                                  l530 1338  
                                l338 0DF4                                  l178 003A  
                                l531 133A                                  l533 1355  
                                l550 1432                                  l470 065A  
                                l543 13FC                                  l527 1334  
                                l625 16E1                                  l609 1672  
                                l529 1336                                  l554 1434  
                                l555 1435                                  l580 1530  
                                l396 1A5E                                  l389 1A2C  
                                l647 17D6                                  l736 1913  
                                l585 1558                                  l589 1580  
                                _GIE 005F                                  _RA1 0029  
                                _RA2 002A                   merge1@matrix88_out 0024  
                                fsr0 0004                                  indf 0000  
                       ___awmod@sign 002C                         __CFG_IESO$ON 0000  
                        _sprintf$720 002F                          _sprintf$713 002B  
                        _sprintf$714 002D                       is_row_full@col 0078  
                     is_row_full@row 0072                                 l3013 1841  
                               l3033 1845                                 l3121 136F  
                               l3113 133F                                 l3019 190B  
                               l3203 14C5                                 l4101 1C55  
                               l3037 184B                                 l3301 1641  
                               l3221 1518                                 l3117 135B  
                               l3109 132F                                 l3063 1ABE  
                               l3055 1A9A                                 l3207 14CA  
                               l4121 1B17                                 l4113 1C76  
                               l4105 1C63                                 l3057 1AA8  
                               l3081 1A0B                                 l3305 1660  
                               l3225 1524                                 l3209 14F6  
                               l3137 13CC                                 l3129 13AE  
                               l5001 1D78                                 l4123 1B19  
                               l3067 1AC9                                 l3411 17E3  
                               l3403 17B4                                 l3307 1664  
                               l3163 144C                                 l3155 142E  
                               l4125 1B1B                                 l4109 1C6E  
                               l3085 1A19                                 l3173 1460  
                               l3157 1437                                 l3149 13FB  
                               l5021 1DC6                                 l4119 1B15  
                               l3079 19FD                                 l3407 17BF  
                               l3319 167B                                 l3335 16A5  
                               l3343 16BB                                 l3263 15A8  
                               l3167 145B                                 l5007 1D7E  
                               l4129 1B20                                 l3089 1A24  
                               l3353 16D5                                 l3329 1697  
                               l3273 15D0                                 l3265 15B7  
                               l3193 14A4                                 l3177 146B  
                               l3185 148A                                 l3169 145D  
                               l3417 1307                                 l5113 120E  
                               l5017 1DBB                                 l5025 1DCC  
                               l5041 1DDD                                 l4091 1C41  
                               l3363 16EE                                 l3347 16C0  
                               l3195 14B1                                 l3179 1478  
                               l3419 17FB                                 l5123 1265  
                               l5107 1208                                 l5211 1E53  
                               l5051 1E1C                                 l5035 1DD7  
                               l3453 1B6E                                 l4261 1CBD  
                               l3293 161C                                 l3285 1605  
                               l3269 15C4                                 l3189 1499  
                               l3621 1007                                 l5301 1C2C  
                               l5133 12AC                                 l5141 12E5  
                               l3463 1B97                                 l4087 1C3A  
                               l3287 1609                                 l3279 15E4  
                               l3199 14BC                                 l5231 1F8C  
                               l3631 1026                                 l5127 128C  
                               l5215 1E89                                 l5055 1E27  
                               l3473 18B6                                 l3457 1B8D  
                               l3705 1AD6                                 l4265 1CC5  
                               l4257 1C86                                 l3393 177B  
                               l3385 1723                                 l3369 16FD  
                               l5241 1FAC                                 l5161 0DFA  
                               l5145 12F0                                 l4281 1CD5  
                               l4099 1C47                                 l3387 1750  
                               l3379 1719                                 l3299 163D  
                               l3483 19A5                                 l5091 1BA3  
                               l3627 101E                                 l5331 113D  
                               l5219 1E91                                 l5059 1E2D  
                               l3709 1AEC                                 l3397 178E  
                               l3581 19CC                                 l5093 1BD2  
                               l5253 1FE5                                 l5237 1F96  
                               l5405 0FE2                                 l5149 12F6  
                               l5069 1EB4                                 l4285 1D0D  
                               l3591 19F5                                 l5247 1FCA  
                               l5167 0E00                                 l5327 1134  
                               l5319 10C9                                 l5351 0EC2  
                               l5343 0EB7                                 l5271 1A54  
                               l5511 0487                                 l5423 1157  
                               l5089 1BCB                                 l5257 1FED  
                               l5177 0E5A                                 l5185 0E93  
                               l5193 0EA4                                 l5361 0EE7  
                               l5409 0FED                                 l5281 1A8B  
                               l4289 1D15                                 l3587 19ED  
                               l5371 0F0D                                 l5611 05D0  
                               l5451 11E3                                 l5189 0E9E  
                               l5381 0F53                                 l5429 115D  
                               l5631 06DF                                 l5439 11AA  
                               l5447 11D8                                 l5455 11E9  
                               l5297 1C24                                 l5289 1BEE  
                               l4913 0052                                 l5633 036D  
                               l5801 0169                                 l4931 011E  
                               l4907 004C                                 l5635 06E8  
                               l5803 016E                                 l5389 0F5E  
                               l4925 0109                                 l5661 07AE  
                               l5573 053A                                 l5637 02DE  
                               l4951 1053                                 l5663 07B6  
                               l5639 06EF                                 l5591 0585  
                               l5815 015F                                 l4961 107D  
                               l4937 0133                                 l5833 0256  
                               l5931 1B3D                                 l5819 01E4  
                               l5925 1B2E                                 l4877 192A  
                               l4957 1058                                 l4973 10A5  
                               l5927 1B33                                 l4991 1F77  
                               l4967 1091                                 l5929 1B38  
                               l4989 1F59                                 STR_1 0DBA  
                       __CFG_WDTE$ON 0000                                 STR_2 0DBA  
                               STR_3 0DBA                                 STR_5 0DBF  
                               STR_6 0A23                                 STR_7 0DBD  
                               STR_8 0DC1                                 STR_9 0DBC  
                        main@hit_res 0067                                 u4215 1B71  
                               u3425 1A9D                                 u4145 17E1  
                               u3515 1A11                                 u3445 1AA9  
                               u3525 1A1A                                 u3365 1914  
                               u3455 1AB5                                 u3375 191B  
                               u3465 1ABF                                 u4505 19CF  
                               _PEIE 005E                                 u3805 1579  
                               u3495 1A00                                 u3655 1445  
                               u4615 100A                                 u6055 1CFF  
                               u5265 1D61                                 u3905 15F5  
                               u3665 1452                                 u7105 1E10  
                               u3835 15A1                                 _RCIE 0465  
                               u4805 1AF6                                 u8005 0FA7  
                               u3775 1551                                 u3945 1632  
                               u7225 1236                                 u3955 1650  
                               u7505 1F9C                                 u8065 1192  
                               u5755 1C4A                                 u4795 1AEE  
                               u7515 1FAF                                 u7355 0E28  
                               u7275 128A                                 u8155 04D8  
                               u8075 11B4                                 u7445 1E7B  
                               u6805 00C8                                 u8245 0606  
                               u8165 04E7                                 u5775 1C5B  
                               u7295 12C3                                 u6815 00F0  
                               u5785 1C64                                 u7545 1FCD  
                               u7385 0E6F                                 u8517 0244  
                               u7815 0F07                                 u7735 0EC8  
                               u8527 028E                                 u6945 1F1D  
                               u6785 008B                                 u8537 02AE  
                               u5995 1CB0                                 u7755 0EE1  
                               u6965 1F2D                                 u7845 0F10  
                               u6975 1F3D                                 u6895 105D  
                               u6985 1F5E                                 u7945 0F61  
                               u7865 0F29                                 u7795 0EEE  
                               u7885 0F3E                         __CFG_WRT$OFF 0000  
             __end_of_USARTWriteChar 1818                        __CFG_FCMEN$ON 0000  
                               _main 013C                                 _rand 1D1A  
                               btemp 007E                        __CFG_BOREN$ON 0000  
                               ltemp 007E                                 start 0000  
                               ttemp 007E                                 wtemp 007E  
                  ___bmul@multiplier 0073                        __CFG_MCLRE$ON 0000  
    find_best_solution@tem_sub_index 00E5                      is_row_empty@col 0075  
                    is_row_empty@row 0070           get_high_after_merge@matrix 0044  
                              ?_main 0058                                ?_rand 0020  
                              STR_10 0B03                                STR_11 0DBF  
                              STR_12 0B56                                STR_21 0DBF  
                              STR_13 0D83                                STR_30 0A91  
                              STR_14 0A5D                                STR_22 0A40  
                              STR_23 0DBD                                STR_31 0AA9  
                              STR_24 0DC1                                STR_40 0DAF  
                              STR_32 0DA0                                STR_16 0AEE  
                              STR_25 0DBC                                STR_41 0BDE  
                              STR_33 09DD                                STR_26 0B03  
                              STR_34 0D43                                STR_42 0B6A  
                              STR_50 0B18                                STR_27 0DBF  
                              STR_35 0A96                                STR_43 0D6F  
                              STR_51 0B2D                                STR_52 0CEA  
                              STR_36 0D4E                                STR_60 0D00  
                              STR_44 0CE2                                STR_28 0A78  
                    __end_of___awmod 1C7B                                STR_37 0A96  
                              STR_61 0D00                                STR_53 0D97  
                              STR_45 0D79                                STR_29 0A00  
                              STR_54 0B21                                STR_46 0CE2  
                              STR_38 0D59                                STR_62 0CF1  
                              STR_70 0BA5                                STR_47 0C20  
                              STR_55 0AA0                                STR_39 0A96  
                              STR_63 0C93                                STR_71 0C2A  
                              STR_80 0A69                                STR_56 0D64  
                              STR_48 0CD3                                STR_64 0BCB  
                              STR_72 0AD8                                STR_57 0D8D  
                              STR_65 0CC4                                STR_81 0CB4  
                              STR_49 0CA4                                STR_73 0C82  
                              STR_74 0C3C                                STR_90 0B7E  
                              STR_58 0D0F                                STR_82 0B7E  
                              STR_66 0B42                                STR_75 0BA5  
                              STR_91 0C17                                STR_67 0C4E  
                              STR_83 0C17                                STR_59 09B0  
                              STR_76 0C2A                                STR_92 0C04  
                              STR_84 0C04                                STR_68 0BB8  
                              STR_93 0BF1                                STR_69 0C3C  
                              STR_85 0BF1                                STR_77 0B92  
                              STR_78 0C4E                                STR_86 0DA8  
                              STR_94 0D1D                                STR_87 0DA8  
                              STR_79 0DB5                                STR_95 0AC1  
                              STR_96 0D1D                                STR_88 0A69  
                              STR_89 0CB4                                STR_97 0D2A  
                              STR_98 0D37                                STR_99 0C60  
                   USARTWriteChar@ch 0070                      __end_of___lwdiv 1ACE  
                    __end_of___lwmod 1A29                                _RCREG 001A  
                              _SPBRG 0099                     _is_left_boundary 1D6F  
                              _TXREG 0019                                _UQEnd 006E  
                ___lmul@multiplicand 0074                          ?_SPI1_write 0070  
                   debug_int1@enable 0043                                _clear 1C7B  
                   debug_int2@enable 0045                      __end_of_dpowers 0828  
                              _cur_x 00ED                                _cur_y 0068  
                              _merge 1CCA                      __end_of_isdigit 1843  
                              _randx 01D2                                _srand 1820  
                       ?_is_row_full 0070                      ??_printf_Screen 0079  
                              pclath 000A                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080             printf_debug_MATRIX44@col 002B  
           printf_debug_MATRIX44@row 002A                   __size_of_USARTInit 0047  
                    ?_USARTWriteChar 0070             printf_debug_MATRIX88@col 007C  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F             printf_debug_MATRIX88@row 007B  
                              status 0003                          hit_land@col 004F  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                      __end_of_sprintf 1800  
    find_best_solution@temp_matrix88 00A3                          hit_land@row 0050  
              _printf_debug_MATRIX44 001C                _printf_debug_MATRIX88 1028  
                     get_high@matrix 0046                      __initialization 07BA  
                       __end_of_main 029C                         __end_of_rand 1D6F  
             ??_char_info_index_rand 007E                               ??_main 005C  
                             ??_rand 0022           ?_printf_debug_cur_MATRIX44 002C  
                        evaluate@col 004E                          evaluate@row 004F  
           find_best_solution@temp_x 00E6                               ?_clear 0070  
                             ?_merge 0070                               STR_100 0C71  
                             ?_srand 0070                __size_of_Clear_Matrix 0014  
              __end_of_delete_matrix 1BE5                               _URBuff 0110  
                   __end_of_fall_off 0EA9                       __CFG_PWRTE$OFF 0000  
                   debug_line@enable 0075                get_high_after_merge@y 004A  
                   __end_of_get_high 1C2E                               ___bmul 1843  
                __size_of_SPI1_write 0001                               ___lmul 1ACE  
                             ___wmul 1909                            ??___awmod 007D  
                   __end_of_hit_land 11F3                            ??___lwdiv 0074  
                   __end_of_evaluate 2000                            ??___lwmod 007C  
                             _merge1 1E2F             __end_of_USARTWriteString 194F  
                             _memcpy 199D                               _memset 18B2  
                   __end_of_is_valid 1300                               clear@x 0078  
                             clear@y 0070                      ___awmod@divisor 0027  
                             _temp_y 006A             __size_of_printf_MATRIX88 0012  
                    ___awmod@counter 002B                    __end_of_USARTInit 1B54  
                      ?_is_row_empty 0070          __size_of_find_best_solution 051E  
                             merge@x 0078                               merge@y 0070  
                          ??_isdigit 0070                          is_valid@col 0050  
                        is_valid@row 004F           printf_debug_MATRIX44@lable 0076  
                       _Clear_Matrix 1889                               srand@x 0070  
                  _is_right_boundary 1DCE                            ??_sprintf 0028  
            ??_get_holes_after_merge 0044           printf_debug_MATRIX88@lable 0076  
                 ?_is_right_boundary 0076                       evaluate@matrix 004D  
            __end_of__initialization 07FC                       merge1@matrix44 0021  
             ?_printf_debug_MATRIX44 0076               ?_printf_debug_MATRIX88 0076  
                     _g_cur_matrix44 0195            printf_debug_Screen@enable 007D  
                ??_is_right_boundary 0079                  ___bmul@multiplicand 0070  
                     __pcstackCOMMON 0070                         __pidataBANK0 0DC4  
                       __pidataBANK1 1808                         __pidataBANK3 18E9  
                      __end_of_clear 1CCA                           _Write_Byte 1865  
                      __end_of_merge 1D1A                        __end_of_srand 1829  
                 __size_of_debug_str 000C                       ??_is_row_empty 0071  
          __end_of_is_right_boundary 1E2F        __size_of_get_high_after_merge 0094  
         get_holes_after_merge@start 004D                              ??_clear 0074  
                            ??_merge 0074                         sprintf@width 0039  
                            ??_srand 0072                         evaluate@full 004C  
                         __pbssBANK0 0068                           __pbssBANK1 00E7  
                         __pbssBANK2 0110                           __pbssBANK3 0190  
                       evaluate@risk 004A         __size_of_printf_debug_Screen 002A  
                 __size_of_left_most 0032                    is_row_full@matrix 0070  
               __size_of_is_row_full 0030                           _debug_int1 194F  
                         _debug_int2 1974                           _debug_line 189D  
                delete_matrix@matrix 0044                     is_valid@matrix44 0047  
                   is_valid@matrix88 0049             __end_of_is_left_boundary 1DCE  
                         _g_matrix44 0830                           _delete_row 1F09  
                         _g_matrix88 0130                           __pmaintext 013C  
           printf_debug_Screen@lable 0025                              ?___bmul 0070  
                            ?___lmul 0070                              ?___wmul 0070  
                            ?_merge1 0020                              ?_memcpy 0070  
                            ?_memset 0070                       ___lmul@product 0079  
          get_holes_after_merge@stop 004B                         ??_SPI1_write 0070  
                          ?_fall_off 0046                    ??_printf_MATRIX88 0078  
          printf_MATRIX88@matrix7219 0021                     ??_USARTWriteChar 0070  
               is_right_boundary@col 0022                 is_right_boundary@row 0021  
                          ?_get_high 0070                   USARTWriteInt@F1617 0190  
                         __stringtab 0800                            ?_hit_land 0046  
                  __end_of_debug_str 1835                              _UQFront 006F  
                          ?_evaluate 0044                            ?_is_valid 0046  
                      debug_line@str 0073  find_best_solution@temp_cur_matrix44 00E3  
                    __size_of___bmul 0011                      __size_of___lmul 003F  
                        ?_Write_Byte 0070                              ___awmod 1C2E  
                 __end_of_SPI1_write 0004                      __size_of___wmul 0021  
                            ___lwdiv 1A92                              ___lwmod 19F7  
                        right_most@x 0049                              _g_debug 0197  
                    __size_of_merge1 0067                      __size_of_memcpy 002A  
                          _ANSELbits 0188                      __size_of_memset 001B  
                  __end_of_left_most 1A5B                              __ptext1 1820  
                            __ptext2 1CCA                              __ptext3 1142  
                            __ptext4 029C                              __ptext5 1A5B  
                            __ptext6 1DCE                              __ptext7 1E96  
                            __ptext8 001C                              __ptext9 0DC7  
        ??_printf_debug_cur_MATRIX44 0030                    __end_of_hexpowers 0830  
                   fall_off@matrix44 0047                     fall_off@matrix88 0049  
                            _dpowers 081E                              _isdigit 1835  
                   ___awmod@dividend 0029           __size_of_is_right_boundary 0061  
                         ??_fall_off 004A                              _sprintf 1300  
                         ??_get_high 0044                              clrloop0 1819  
               end_of_initialization 07FC                    __end_of_octpowers 081E  
                  _printf_MATRIX7219 18CD                           ??_hit_land 004A  
                            merge1@x 0029                              merge1@y 0020  
                         ??_evaluate 0046                              memcpy@d 0077  
                            memcpy@n 0074                              memcpy@s 0079  
              __end_of_printf_Screen 1810                              memset@c 0072  
               __end_of_is_row_empty 1028                              memset@n 0074  
                            memset@p 0076                          ?_debug_int1 003F  
                        ?_debug_int2 003F                           ??_is_valid 004A  
                        ?_debug_line 0073                   ?_printf_MATRIX7219 0070  
                     SPI1_write@data 0070          printf_debug_MATRIX44@enable 0029  
                         _right_most 1A5B             ??_MATRIX88_to_MATRIX7219 0071  
        printf_debug_MATRIX44@matrix 007A                          ?_delete_row 007B  
                      clear@matrix44 0071                        clear@matrix88 0073  
                          _RCSTAbits 0018                    Write_Byte@myValue 0070  
                ??_printf_MATRIX7219 0072                           _temp_count 00E9  
                         _temp_pre_x 006D                         __pstringtext 0800  
                  ?_USARTWriteString 0071        __size_of_char_info_index_rand 0018  
        printf_debug_MATRIX88@enable 007A          printf_debug_MATRIX88@matrix 0078  
                 ??_USARTWriteString 0073            is_right_boundary@matrix44 0076  
          is_right_boundary@matrix88 0078                            _USARTInit 1B0D  
                          _TRISAbits 0085            __end_of_printf_MATRIX7219 18E9  
                  _tem_pre_sub_index 01D6              ??_printf_debug_MATRIX44 0020  
            ??_printf_debug_MATRIX88 0020                  __size_of_Write_Byte 0012  
                 right_most@matrix44 0044                   right_most@matrix88 0046  
     __size_of_get_holes_after_merge 0157        __end_of_get_holes_after_merge 1000  
              find_best_solution@res 00A2            _printf_debug_cur_MATRIX44 1E96  
                          _TXSTAbits 0098                       __end_of___bmul 1854  
         __end_of_find_best_solution 07BA                       __end_of___lmul 1B0D  
                     __end_of___wmul 192A                  _printf_debug_Screen 0DC7  
                     __end_of_merge1 1E96                       __end_of_memcpy 19C7  
                     __end_of_memset 18CD     MATRIX88_to_MATRIX7219@matrix7219 0070  
                __size_of_debug_int1 0025                  __size_of_debug_int2 0029  
             __size_of_delete_matrix 0049                  __size_of_debug_line 0015  
                start_initialization 07BA                           ?_USARTInit 0070  
                __size_of_delete_row 0075                           left_most@x 0048  
               ?_printf_debug_Screen 0025      printf_debug_cur_MATRIX44@enable 0039  
                      delete_row@len 0024      printf_debug_cur_MATRIX44@matrix 003A  
                      delete_row@row 007D             __CFG_FOSC$INTRC_NOCLKOUT 0000  
                 is_right_boundary@x 0020         __end_of_get_high_after_merge 1142  
                        ?_right_most 0044                       _temp_pre_count 00EC  
                  ?_is_left_boundary 0076      __size_of_MATRIX88_to_MATRIX7219 0048  
        get_holes_after_merge@matrix 004C                             ??___bmul 0071  
                           ??___lmul 0078                   ??_is_left_boundary 0079  
                           ??___wmul 0074                           init_fetch0 1854  
                 is_row_empty@matrix 0074                          __pdataBANK0 006B  
                        __pdataBANK1 00ED                          __pdataBANK3 01B7  
                  _g_char_info_index 0069                      _printf_MATRIX88 1877  
                           ??_merge1 0025                             ??_memcpy 0076  
                           ??_memset 0076                          _g_char_info 01B7  
  find_best_solution@left_most_index 00A0                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
         __size_of_printf_MATRIX7219 001C                __size_of_is_row_empty 0027  
                      ??_is_row_full 0073                    __size_of_fall_off 00B8  
              ??_printf_debug_Screen 007D                    __size_of_get_high 0049  
                        sprintf@flag 003D                          sprintf@prec 0038  
                  __size_of_hit_land 00B1                        _delete_matrix 1B9C  
                          __pnvBANK0 006E                    __size_of_evaluate 0082  
                          _debug_str 1829                   delete_matrix@count 0048  
                  __size_of_is_valid 010D                     ___lwdiv@dividend 0072  
            printf_MATRIX7219@matrix 0074                     delete_matrix@row 0049  
                       ??_Write_Byte 0071                             ?___awmod 0027  
                           ?___lwdiv 0070                             ?___lwmod 0078  
                       _is_row_empty 1001                         debug_int2@i1 0041  
                       debug_int2@i2 0043                      debug_str@enable 0075  
                           ?_isdigit 0070                    is_left_boundary@x 0020  
                        ??_USARTInit 0072               _MATRIX88_to_MATRIX7219 1B54  
                          _left_most 1A29                  __size_of_right_most 0037  
                          _hexpowers 0828                     ___lwdiv@quotient 0075  
                     __size_of_clear 004F                             ?_sprintf 0020  
               printf_MATRIX7219@col 0075                       __size_of_merge 0050  
                     __size_of_srand 0009                         debug_str@str 0073  
                 __end_of_Write_Byte 1877                         ??_debug_int1 007E  
                       ??_debug_int2 007E                         ??_debug_line 0075  
                     ?_delete_matrix 0044                       ___wmul@product 0074  
                          fall_off@x 004E                            fall_off@y 0046  
                   delete_row@matrix 007B                            clear_ram0 1818  
                          _octpowers 0812                  __end_of_is_row_full 19F7  
                         ?_debug_str 0073              __end_of_printf_MATRIX88 1889  
                       ??_delete_row 0020                             _PIR1bits 000C  
                          _temp_high 00EA                            _temp_hole 00EB  
                          _temp_risk 00E7   __size_of_printf_debug_cur_MATRIX44 0073  
                  left_most@matrix44 0044                    left_most@matrix88 0046  
                        __stringbase 0812                    ___wmul@multiplier 0070  
                 __end_of_debug_int1 1974                   __end_of_debug_int2 199D  
                 __end_of_debug_line 18B2                        ?_Clear_Matrix 0070  
               _get_high_after_merge 10AE                           ?_left_most 0044  
                 __end_of_g_matrix44 09B0                   __end_of_delete_row 1F7E  
                  ___lmul@multiplier 0070                  is_left_boundary@col 0022  
                is_left_boundary@row 0021               printf_debug_MATRIX44@x 0078  
             printf_debug_MATRIX44@y 0079                        merge@matrix44 0071  
                      merge@matrix88 0073            __size_of_USARTWriteString 0025  
                          hit_land@x 004E                            hit_land@y 0046  
     __size_of_printf_debug_MATRIX44 0120       __size_of_printf_debug_MATRIX88 0086  
       __end_of_char_info_index_rand 001C        __end_of_printf_debug_MATRIX44 013C  
      __end_of_printf_debug_MATRIX88 10AE              get_high_after_merge@col 004B  
                          merge1@col 002D                            merge1@len 002A  
            get_high_after_merge@row 004C                            merge1@row 002C  
            __size_of_USARTWriteChar 0008                        _temp_pre_high 00EE  
                      _temp_pre_hole 00EF                        _temp_pre_risk 006B  
                          is_valid@x 004E                            is_valid@y 0046  
                   __size_of___awmod 004D                     __size_of___lwdiv 003C  
                   __size_of___lwmod 0032    __end_of_printf_debug_cur_MATRIX44 1F09  
                 __end_of__stringtab 0812                          _isdigit$906 0070  
             __size_of_printf_Screen 0005                           sprintf@idx 0031  
                         sprintf@len 0033                           sprintf@val 0036  
                     ??_Clear_Matrix 0079                ?_get_high_after_merge 0044  
           is_left_boundary@matrix44 0076             is_left_boundary@matrix88 0078  
                   __size_of_isdigit 000E                             _fall_off 0DF1  
                    ___lwdiv@divisor 0070                      ___lwdiv@counter 0077  
                 _find_best_solution 029C                             __ptext10 1028  
                           __ptext11 1829                             __ptext20 0DF1  
                           __ptext12 1E2F                             __ptext21 189D  
                           __ptext13 1A29                             __ptext30 1835  
                           __ptext22 1974                             __ptext14 1D6F  
                           __ptext31 1909                             __ptext23 1F7E  
                           __ptext15 11F3                             __ptext40 1ACE  
                           __ptext32 19F7                             __ptext24 1B9C  
                           __ptext16 0EA9                             __ptext41 1C2E  
                           __ptext33 1A92                             __ptext25 19C7  
                           __ptext17 10AE                             __ptext50 18B2  
                           __ptext42 1B0D                             __ptext34 1843  
                           __ptext26 1F09                             __ptext18 1BE5  
                           __ptext43 1889                             __ptext35 192A  
                           __ptext27 199D                             __ptext19 1001  
                           __ptext44 180B                             __ptext36 1810  
                           __ptext28 194F                             __ptext45 1877  
                           __ptext37 1C7B                             __ptext29 1300  
                           __ptext46 18CD                             __ptext38 0004  
                           __ptext47 1865                             __ptext39 1D1A  
                           __ptext48 0003                             __ptext49 1B54  
                  __CFG_BOR4V$BOR21V 0000                             _get_high 1BE5  
                        _is_row_full 19C7       MATRIX88_to_MATRIX7219@matrix88 0074  
                   __size_of_sprintf 0500                      ??_delete_matrix 0046  
                        debug_int1@f 003F                          debug_int1@i 0041  
                        debug_int2@f 003F                             _hit_land 1142  
                           _evaluate 1F7E                  ?_find_best_solution 0070  
                      __size_of_main 0160                             _is_valid 11F3  
                      __size_of_rand 0055                     hit_land@matrix44 0047  
                   hit_land@matrix88 0049                             clear@col 007A  
                           clear@row 0079                         ??_right_most 0047  
              _get_holes_after_merge 0EA9                          ??_debug_str 0075  
                   ?_printf_MATRIX88 0070                             main@Seed 0065  
                           main@argc 0058                             main@argv 005A  
           get_holes_after_merge@col 004E             get_holes_after_merge@row 004F  
               ??_find_best_solution 0051                          fall_off@col 004F  
                        fall_off@row 0050            __size_of_is_left_boundary 005F  
                        delete_row@i 0026                          ??_left_most 0047  
                           memcpy@d1 0070                             memcpy@s1 0072  
                           merge@col 007A                             merge@row 0079  
                 __end_of_right_most 1A92                             init_ram0 1858  
                           isdigit@c 0071                             memset@p1 0070  
                          sprintf@ap 0035                            sprintf@cp 0032  
                          sprintf@sp 003C                     ___lwmod@dividend 007A  
                      _printf_Screen 180B                            stringcode 080A  
                 Write_Byte@myColumn 0071                  USARTWriteString@str 0071  
            printf_MATRIX88@matrix88 0020                 _char_info_index_rand 0004  
            ?_MATRIX88_to_MATRIX7219 0070               ??_get_high_after_merge 0046  
                           sprintf@c 003B                             sprintf@f 0020  
 find_best_solution@right_most_index 00A1                      ___lwmod@divisor 0078  
                    ___lwmod@counter 007D          __end_of_printf_debug_Screen 0DF1  
                           stringtab 0800                           _SPI1_write 0003  
                   _USARTWriteString 192A                       ?_printf_Screen 0070  
             ?_get_holes_after_merge 0070                       _USARTWriteChar 1810  
         printf_debug_cur_MATRIX44@x 002E           printf_debug_cur_MATRIX44@y 002F  
         MATRIX88_to_MATRIX7219@mask 0075            MATRIX88_to_MATRIX7219@col 0077  
               __end_of_Clear_Matrix 189D            MATRIX88_to_MATRIX7219@row 0076  
     printf_debug_cur_MATRIX44@lable 002C  
