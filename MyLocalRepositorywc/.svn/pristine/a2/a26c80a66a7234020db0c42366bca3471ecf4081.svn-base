

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Aug 27 11:08:26 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	dabs	1,0x7E,2
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0014                     	;# 
    96  0015                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  0087                     	;# 
   113  0089                     	;# 
   114  008C                     	;# 
   115  008D                     	;# 
   116  008E                     	;# 
   117  008F                     	;# 
   118  0090                     	;# 
   119  0091                     	;# 
   120  0092                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0093                     	;# 
   124  0094                     	;# 
   125  0095                     	;# 
   126  0096                     	;# 
   127  0097                     	;# 
   128  0098                     	;# 
   129  0099                     	;# 
   130  009A                     	;# 
   131  009B                     	;# 
   132  009C                     	;# 
   133  009D                     	;# 
   134  009E                     	;# 
   135  009F                     	;# 
   136  0105                     	;# 
   137  0107                     	;# 
   138  0108                     	;# 
   139  0109                     	;# 
   140  010C                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  010E                     	;# 
   144  010F                     	;# 
   145  0185                     	;# 
   146  0187                     	;# 
   147  0188                     	;# 
   148  0189                     	;# 
   149  018C                     	;# 
   150  018D                     	;# 
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  0007                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0089                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  008F                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0093                     	;# 
   200  0094                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0098                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  009F                     	;# 
   212  0105                     	;# 
   213  0107                     	;# 
   214  0108                     	;# 
   215  0109                     	;# 
   216  010C                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  010F                     	;# 
   221  0185                     	;# 
   222  0187                     	;# 
   223  0188                     	;# 
   224  0189                     	;# 
   225  018C                     	;# 
   226  018D                     	;# 
   227                           
   228                           	psect	idataBANK0
   229  0E6E                     __pidataBANK0:	
   230                           
   231                           ;initializer for _temp_pre_hole
   232  0E6E  34FF               	retlw	255
   233                           
   234                           	psect	idataBANK1
   235  1915                     __pidataBANK1:	
   236                           
   237                           ;initializer for _cur_x
   238  1915  3402               	retlw	2
   239                           
   240                           ;initializer for _temp_pre_high
   241  1916  34FF               	retlw	255
   242                           
   243                           	psect	idataBANK3
   244  1A50                     __pidataBANK3:	
   245                           
   246                           ;initializer for _g_char_info
   247  1A50  3400               	retlw	0
   248  1A51  3400               	retlw	0
   249  1A52  3402               	retlw	2
   250  1A53  3402               	retlw	2
   251  1A54  3400               	retlw	0
   252  1A55  3402               	retlw	2
   253  1A56  3404               	retlw	4
   254  1A57  3400               	retlw	0
   255  1A58  3402               	retlw	2
   256  1A59  3406               	retlw	6
   257  1A5A  3400               	retlw	0
   258  1A5B  3404               	retlw	4
   259  1A5C  340A               	retlw	10
   260  1A5D  3400               	retlw	0
   261  1A5E  3404               	retlw	4
   262  1A5F  340E               	retlw	14
   263  1A60  3400               	retlw	0
   264  1A61  3401               	retlw	1
   265  1A62  340F               	retlw	15
   266  1A63  3400               	retlw	0
   267  1A64  3404               	retlw	4
   268  1A65  3413               	retlw	19
   269  1A66  3400               	retlw	0
   270  1A67  3401               	retlw	1
   271  1A68  3414               	retlw	20
   272  1A69  3400               	retlw	0
   273  1A6A  3404               	retlw	4
   274                           
   275                           ;initializer for _randx
   276  1A6B  3401               	retlw	1
   277  1A6C  3400               	retlw	0
   278  1A6D  3400               	retlw	0
   279  1A6E  3400               	retlw	0
   280                           
   281                           ;initializer for _temp_pre_risk
   282  1A6F  34FF               	retlw	255
   283  1A70  34FF               	retlw	255
   284                           
   285                           ;initializer for _tem_pre_sub_index
   286  1A71  34FF               	retlw	-1
   287                           
   288                           ;initializer for _temp_pre_x
   289  1A72  34FF               	retlw	-1
   290                           
   291                           	psect	stringtext
   292  0800                     __pstringtext:	
   293  0800                     stringtab:	
   294  0800                     __stringtab:	
   295                           
   296                           ;	String table - string pointers are 2 bytes each
   297  0800  1BFF               	btfsc	btemp+1,7
   298  0801  280A               	ljmp	stringcode
   299  0802  1383               	bcf	3,7
   300  0803  187F               	btfsc	btemp+1,0
   301  0804  1783               	bsf	3,7
   302  0805  0800               	movf	0,w
   303  0806  0A84               	incf	4,f
   304  0807  1903               	skipnz
   305  0808  0AFF               	incf	btemp+1,f
   306  0809  0008               	return
   307  080A                     stringcode:	
   308  080A  087F               	movf	btemp+1,w
   309  080B  397F               	andlw	127
   310  080C  008A               	movwf	10
   311  080D  0804               	movf	4,w
   312  080E  0A84               	incf	4,f
   313  080F  1903               	skipnz
   314  0810  0AFF               	incf	btemp+1,f
   315  0811  0082               	movwf	2
   316  0812                     __stringbase:	
   317  0812                     __end_of__stringtab:	
   318  0812                     _octpowers:	
   319  0812  3401               	retlw	1
   320  0813  3400               	retlw	0
   321  0814  3408               	retlw	8
   322  0815  3400               	retlw	0
   323  0816  3440               	retlw	64
   324  0817  3400               	retlw	0
   325  0818  3400               	retlw	0
   326  0819  3402               	retlw	2
   327  081A  3400               	retlw	0
   328  081B  3410               	retlw	16
   329  081C  3400               	retlw	0
   330  081D  3480               	retlw	128
   331  081E                     __end_of_octpowers:	
   332  081E                     _dpowers:	
   333  081E  3401               	retlw	1
   334  081F  3400               	retlw	0
   335  0820  340A               	retlw	10
   336  0821  3400               	retlw	0
   337  0822  3464               	retlw	100
   338  0823  3400               	retlw	0
   339  0824  34E8               	retlw	232
   340  0825  3403               	retlw	3
   341  0826  3410               	retlw	16
   342  0827  3427               	retlw	39
   343  0828                     __end_of_dpowers:	
   344  0828                     _hexpowers:	
   345  0828  3401               	retlw	1
   346  0829  3400               	retlw	0
   347  082A  3410               	retlw	16
   348  082B  3400               	retlw	0
   349  082C  3400               	retlw	0
   350  082D  3401               	retlw	1
   351  082E  3400               	retlw	0
   352  082F  3410               	retlw	16
   353  0830                     __end_of_hexpowers:	
   354  0830                     _g_matrix44:	
   355  0830  3400               	retlw	0
   356  0831  3401               	retlw	1
   357  0832  3400               	retlw	0
   358  0833  3400               	retlw	0
   359  0834  3400               	retlw	0
   360  0835  3401               	retlw	1
   361  0836  3400               	retlw	0
   362  0837  3400               	retlw	0
   363  0838  3400               	retlw	0
   364  0839  3401               	retlw	1
   365  083A  3400               	retlw	0
   366  083B  3400               	retlw	0
   367  083C  3400               	retlw	0
   368  083D  3401               	retlw	1
   369  083E  3400               	retlw	0
   370  083F  3400               	retlw	0
   371  0840  3400               	retlw	0
   372  0841  3400               	retlw	0
   373  0842  3400               	retlw	0
   374  0843  3400               	retlw	0
   375  0844  3401               	retlw	1
   376  0845  3401               	retlw	1
   377  0846  3401               	retlw	1
   378  0847  3401               	retlw	1
   379  0848  3400               	retlw	0
   380  0849  3400               	retlw	0
   381  084A  3400               	retlw	0
   382  084B  3400               	retlw	0
   383  084C  3400               	retlw	0
   384  084D  3400               	retlw	0
   385  084E  3400               	retlw	0
   386  084F  3400               	retlw	0
   387  0850  3400               	retlw	0
   388  0851  3401               	retlw	1
   389  0852  3401               	retlw	1
   390  0853  3400               	retlw	0
   391  0854  3401               	retlw	1
   392  0855  3401               	retlw	1
   393  0856  3400               	retlw	0
   394  0857  3400               	retlw	0
   395  0858  3400               	retlw	0
   396  0859  3400               	retlw	0
   397  085A  3400               	retlw	0
   398  085B  3400               	retlw	0
   399  085C  3400               	retlw	0
   400  085D  3400               	retlw	0
   401  085E  3400               	retlw	0
   402  085F  3400               	retlw	0
   403  0860  3400               	retlw	0
   404  0861  3401               	retlw	1
   405  0862  3400               	retlw	0
   406  0863  3400               	retlw	0
   407  0864  3400               	retlw	0
   408  0865  3401               	retlw	1
   409  0866  3401               	retlw	1
   410  0867  3400               	retlw	0
   411  0868  3400               	retlw	0
   412  0869  3400               	retlw	0
   413  086A  3401               	retlw	1
   414  086B  3400               	retlw	0
   415  086C  3400               	retlw	0
   416  086D  3400               	retlw	0
   417  086E  3400               	retlw	0
   418  086F  3400               	retlw	0
   419  0870  3401               	retlw	1
   420  0871  3401               	retlw	1
   421  0872  3400               	retlw	0
   422  0873  3400               	retlw	0
   423  0874  3400               	retlw	0
   424  0875  3401               	retlw	1
   425  0876  3401               	retlw	1
   426  0877  3400               	retlw	0
   427  0878  3400               	retlw	0
   428  0879  3400               	retlw	0
   429  087A  3400               	retlw	0
   430  087B  3400               	retlw	0
   431  087C  3400               	retlw	0
   432  087D  3400               	retlw	0
   433  087E  3400               	retlw	0
   434  087F  3400               	retlw	0
   435  0880  3400               	retlw	0
   436  0881  3401               	retlw	1
   437  0882  3400               	retlw	0
   438  0883  3400               	retlw	0
   439  0884  3401               	retlw	1
   440  0885  3401               	retlw	1
   441  0886  3400               	retlw	0
   442  0887  3400               	retlw	0
   443  0888  3401               	retlw	1
   444  0889  3400               	retlw	0
   445  088A  3400               	retlw	0
   446  088B  3400               	retlw	0
   447  088C  3400               	retlw	0
   448  088D  3400               	retlw	0
   449  088E  3400               	retlw	0
   450  088F  3400               	retlw	0
   451  0890  3400               	retlw	0
   452  0891  3400               	retlw	0
   453  0892  3400               	retlw	0
   454  0893  3400               	retlw	0
   455  0894  3401               	retlw	1
   456  0895  3401               	retlw	1
   457  0896  3401               	retlw	1
   458  0897  3400               	retlw	0
   459  0898  3400               	retlw	0
   460  0899  3400               	retlw	0
   461  089A  3401               	retlw	1
   462  089B  3400               	retlw	0
   463  089C  3400               	retlw	0
   464  089D  3400               	retlw	0
   465  089E  3400               	retlw	0
   466  089F  3400               	retlw	0
   467  08A0  3400               	retlw	0
   468  08A1  3401               	retlw	1
   469  08A2  3401               	retlw	1
   470  08A3  3400               	retlw	0
   471  08A4  3400               	retlw	0
   472  08A5  3401               	retlw	1
   473  08A6  3400               	retlw	0
   474  08A7  3400               	retlw	0
   475  08A8  3400               	retlw	0
   476  08A9  3401               	retlw	1
   477  08AA  3400               	retlw	0
   478  08AB  3400               	retlw	0
   479  08AC  3400               	retlw	0
   480  08AD  3400               	retlw	0
   481  08AE  3400               	retlw	0
   482  08AF  3400               	retlw	0
   483  08B0  3401               	retlw	1
   484  08B1  3400               	retlw	0
   485  08B2  3400               	retlw	0
   486  08B3  3400               	retlw	0
   487  08B4  3401               	retlw	1
   488  08B5  3401               	retlw	1
   489  08B6  3401               	retlw	1
   490  08B7  3400               	retlw	0
   491  08B8  3400               	retlw	0
   492  08B9  3400               	retlw	0
   493  08BA  3400               	retlw	0
   494  08BB  3400               	retlw	0
   495  08BC  3400               	retlw	0
   496  08BD  3400               	retlw	0
   497  08BE  3400               	retlw	0
   498  08BF  3400               	retlw	0
   499  08C0  3400               	retlw	0
   500  08C1  3401               	retlw	1
   501  08C2  3400               	retlw	0
   502  08C3  3400               	retlw	0
   503  08C4  3400               	retlw	0
   504  08C5  3401               	retlw	1
   505  08C6  3400               	retlw	0
   506  08C7  3400               	retlw	0
   507  08C8  3401               	retlw	1
   508  08C9  3401               	retlw	1
   509  08CA  3400               	retlw	0
   510  08CB  3400               	retlw	0
   511  08CC  3400               	retlw	0
   512  08CD  3400               	retlw	0
   513  08CE  3400               	retlw	0
   514  08CF  3400               	retlw	0
   515  08D0  3400               	retlw	0
   516  08D1  3400               	retlw	0
   517  08D2  3400               	retlw	0
   518  08D3  3400               	retlw	0
   519  08D4  3401               	retlw	1
   520  08D5  3401               	retlw	1
   521  08D6  3401               	retlw	1
   522  08D7  3400               	retlw	0
   523  08D8  3401               	retlw	1
   524  08D9  3400               	retlw	0
   525  08DA  3400               	retlw	0
   526  08DB  3400               	retlw	0
   527  08DC  3400               	retlw	0
   528  08DD  3400               	retlw	0
   529  08DE  3400               	retlw	0
   530  08DF  3400               	retlw	0
   531  08E0  3401               	retlw	1
   532  08E1  3401               	retlw	1
   533  08E2  3400               	retlw	0
   534  08E3  3400               	retlw	0
   535  08E4  3400               	retlw	0
   536  08E5  3401               	retlw	1
   537  08E6  3400               	retlw	0
   538  08E7  3400               	retlw	0
   539  08E8  3400               	retlw	0
   540  08E9  3401               	retlw	1
   541  08EA  3400               	retlw	0
   542  08EB  3400               	retlw	0
   543  08EC  3400               	retlw	0
   544  08ED  3400               	retlw	0
   545  08EE  3400               	retlw	0
   546  08EF  3400               	retlw	0
   547  08F0  3400               	retlw	0
   548  08F1  3400               	retlw	0
   549  08F2  3401               	retlw	1
   550  08F3  3400               	retlw	0
   551  08F4  3401               	retlw	1
   552  08F5  3401               	retlw	1
   553  08F6  3401               	retlw	1
   554  08F7  3400               	retlw	0
   555  08F8  3400               	retlw	0
   556  08F9  3400               	retlw	0
   557  08FA  3400               	retlw	0
   558  08FB  3400               	retlw	0
   559  08FC  3400               	retlw	0
   560  08FD  3400               	retlw	0
   561  08FE  3400               	retlw	0
   562  08FF  3400               	retlw	0
   563  0900  3400               	retlw	0
   564  0901  3401               	retlw	1
   565  0902  3400               	retlw	0
   566  0903  3400               	retlw	0
   567  0904  3400               	retlw	0
   568  0905  3401               	retlw	1
   569  0906  3400               	retlw	0
   570  0907  3400               	retlw	0
   571  0908  3400               	retlw	0
   572  0909  3401               	retlw	1
   573  090A  3401               	retlw	1
   574  090B  3400               	retlw	0
   575  090C  3400               	retlw	0
   576  090D  3400               	retlw	0
   577  090E  3400               	retlw	0
   578  090F  3400               	retlw	0
   579  0910  3400               	retlw	0
   580  0911  3401               	retlw	1
   581  0912  3401               	retlw	1
   582  0913  3400               	retlw	0
   583  0914  3400               	retlw	0
   584  0915  3401               	retlw	1
   585  0916  3401               	retlw	1
   586  0917  3400               	retlw	0
   587  0918  3400               	retlw	0
   588  0919  3400               	retlw	0
   589  091A  3400               	retlw	0
   590  091B  3400               	retlw	0
   591  091C  3400               	retlw	0
   592  091D  3400               	retlw	0
   593  091E  3400               	retlw	0
   594  091F  3400               	retlw	0
   595  0920  3400               	retlw	0
   596  0921  3400               	retlw	0
   597  0922  3400               	retlw	0
   598  0923  3400               	retlw	0
   599  0924  3400               	retlw	0
   600  0925  3401               	retlw	1
   601  0926  3401               	retlw	1
   602  0927  3400               	retlw	0
   603  0928  3400               	retlw	0
   604  0929  3401               	retlw	1
   605  092A  3400               	retlw	0
   606  092B  3400               	retlw	0
   607  092C  3400               	retlw	0
   608  092D  3400               	retlw	0
   609  092E  3400               	retlw	0
   610  092F  3400               	retlw	0
   611  0930  3400               	retlw	0
   612  0931  3400               	retlw	0
   613  0932  3400               	retlw	0
   614  0933  3400               	retlw	0
   615  0934  3401               	retlw	1
   616  0935  3401               	retlw	1
   617  0936  3400               	retlw	0
   618  0937  3400               	retlw	0
   619  0938  3400               	retlw	0
   620  0939  3401               	retlw	1
   621  093A  3400               	retlw	0
   622  093B  3400               	retlw	0
   623  093C  3400               	retlw	0
   624  093D  3400               	retlw	0
   625  093E  3400               	retlw	0
   626  093F  3400               	retlw	0
   627  0940  3400               	retlw	0
   628  0941  3401               	retlw	1
   629  0942  3400               	retlw	0
   630  0943  3400               	retlw	0
   631  0944  3401               	retlw	1
   632  0945  3401               	retlw	1
   633  0946  3400               	retlw	0
   634  0947  3400               	retlw	0
   635  0948  3400               	retlw	0
   636  0949  3400               	retlw	0
   637  094A  3400               	retlw	0
   638  094B  3400               	retlw	0
   639  094C  3400               	retlw	0
   640  094D  3400               	retlw	0
   641  094E  3400               	retlw	0
   642  094F  3400               	retlw	0
   643  0950  3400               	retlw	0
   644  0951  3401               	retlw	1
   645  0952  3400               	retlw	0
   646  0953  3400               	retlw	0
   647  0954  3400               	retlw	0
   648  0955  3401               	retlw	1
   649  0956  3401               	retlw	1
   650  0957  3400               	retlw	0
   651  0958  3400               	retlw	0
   652  0959  3400               	retlw	0
   653  095A  3400               	retlw	0
   654  095B  3400               	retlw	0
   655  095C  3400               	retlw	0
   656  095D  3400               	retlw	0
   657  095E  3400               	retlw	0
   658  095F  3400               	retlw	0
   659  0960  3400               	retlw	0
   660  0961  3401               	retlw	1
   661  0962  3400               	retlw	0
   662  0963  3400               	retlw	0
   663  0964  3401               	retlw	1
   664  0965  3401               	retlw	1
   665  0966  3401               	retlw	1
   666  0967  3400               	retlw	0
   667  0968  3400               	retlw	0
   668  0969  3401               	retlw	1
   669  096A  3400               	retlw	0
   670  096B  3400               	retlw	0
   671  096C  3400               	retlw	0
   672  096D  3400               	retlw	0
   673  096E  3400               	retlw	0
   674  096F  3400               	retlw	0
   675  0970  3401               	retlw	1
   676  0971  3401               	retlw	1
   677  0972  3401               	retlw	1
   678  0973  3400               	retlw	0
   679  0974  3400               	retlw	0
   680  0975  3401               	retlw	1
   681  0976  3400               	retlw	0
   682  0977  3400               	retlw	0
   683  0978  3400               	retlw	0
   684  0979  3401               	retlw	1
   685  097A  3400               	retlw	0
   686  097B  3400               	retlw	0
   687  097C  3400               	retlw	0
   688  097D  3400               	retlw	0
   689  097E  3400               	retlw	0
   690  097F  3400               	retlw	0
   691  0980  3400               	retlw	0
   692  0981  3400               	retlw	0
   693  0982  3401               	retlw	1
   694  0983  3400               	retlw	0
   695  0984  3401               	retlw	1
   696  0985  3401               	retlw	1
   697  0986  3401               	retlw	1
   698  0987  3400               	retlw	0
   699  0988  3400               	retlw	0
   700  0989  3400               	retlw	0
   701  098A  3401               	retlw	1
   702  098B  3400               	retlw	0
   703  098C  3400               	retlw	0
   704  098D  3400               	retlw	0
   705  098E  3400               	retlw	0
   706  098F  3400               	retlw	0
   707  0990  3400               	retlw	0
   708  0991  3401               	retlw	1
   709  0992  3400               	retlw	0
   710  0993  3400               	retlw	0
   711  0994  3400               	retlw	0
   712  0995  3401               	retlw	1
   713  0996  3400               	retlw	0
   714  0997  3400               	retlw	0
   715  0998  3401               	retlw	1
   716  0999  3401               	retlw	1
   717  099A  3401               	retlw	1
   718  099B  3400               	retlw	0
   719  099C  3400               	retlw	0
   720  099D  3400               	retlw	0
   721  099E  3400               	retlw	0
   722  099F  3400               	retlw	0
   723  09A0  3401               	retlw	1
   724  09A1  3400               	retlw	0
   725  09A2  3400               	retlw	0
   726  09A3  3400               	retlw	0
   727  09A4  3401               	retlw	1
   728  09A5  3401               	retlw	1
   729  09A6  3401               	retlw	1
   730  09A7  3400               	retlw	0
   731  09A8  3401               	retlw	1
   732  09A9  3400               	retlw	0
   733  09AA  3400               	retlw	0
   734  09AB  3400               	retlw	0
   735  09AC  3400               	retlw	0
   736  09AD  3400               	retlw	0
   737  09AE  3400               	retlw	0
   738  09AF  3400               	retlw	0
   739  09B0                     __end_of_g_matrix44:	
   740  09B0                     STR_40:	
   741  09B0  3467               	retlw	103	;'g'
   742  09B1  3465               	retlw	101	;'e'
   743  09B2  3474               	retlw	116	;'t'
   744  09B3  345F               	retlw	95	;'_'
   745  09B4  3468               	retlw	104	;'h'
   746  09B5  3469               	retlw	105	;'i'
   747  09B6  3467               	retlw	103	;'g'
   748  09B7  3468               	retlw	104	;'h'
   749  09B8  345F               	retlw	95	;'_'
   750  09B9  3461               	retlw	97	;'a'
   751  09BA  3466               	retlw	102	;'f'
   752  09BB  3474               	retlw	116	;'t'
   753  09BC  3465               	retlw	101	;'e'
   754  09BD  3472               	retlw	114	;'r'
   755  09BE  345F               	retlw	95	;'_'
   756  09BF  346D               	retlw	109	;'m'
   757  09C0  3465               	retlw	101	;'e'
   758  09C1  3472               	retlw	114	;'r'
   759  09C2  3467               	retlw	103	;'g'
   760  09C3  3465               	retlw	101	;'e'
   761  09C4  3420               	retlw	32	;' '
   762  09C5  3479               	retlw	121	;'y'
   763  09C6  3420               	retlw	32	;' '
   764  09C7  343D               	retlw	61	;'='
   765  09C8  3420               	retlw	32	;' '
   766  09C9  3425               	retlw	37	;'%'
   767  09CA  3464               	retlw	100	;'d'
   768  09CB  342C               	retlw	44	;','
   769  09CC  3420               	retlw	32	;' '
   770  09CD  3472               	retlw	114	;'r'
   771  09CE  346F               	retlw	111	;'o'
   772  09CF  3477               	retlw	119	;'w'
   773  09D0  3420               	retlw	32	;' '
   774  09D1  343D               	retlw	61	;'='
   775  09D2  3420               	retlw	32	;' '
   776  09D3  3425               	retlw	37	;'%'
   777  09D4  3464               	retlw	100	;'d'
   778  09D5  342C               	retlw	44	;','
   779  09D6  3420               	retlw	32	;' '
   780  09D7  3468               	retlw	104	;'h'
   781  09D8  3465               	retlw	101	;'e'
   782  09D9  3469               	retlw	105	;'i'
   783  09DA  3467               	retlw	103	;'g'
   784  09DB  3468               	retlw	104	;'h'
   785  09DC  3474               	retlw	116	;'t'
   786  09DD  3420               	retlw	32	;' '
   787  09DE  343D               	retlw	61	;'='
   788  09DF  3420               	retlw	32	;' '
   789  09E0  3425               	retlw	37	;'%'
   790  09E1  3464               	retlw	100	;'d'
   791  09E2  340A               	retlw	10
   792  09E3  3400               	retlw	0
   793  09E4                     STR_43:	
   794  09E4  343D               	retlw	61	;'='
   795  09E5  343D               	retlw	61	;'='
   796  09E6  343D               	retlw	61	;'='
   797  09E7  343D               	retlw	61	;'='
   798  09E8  343D               	retlw	61	;'='
   799  09E9  343D               	retlw	61	;'='
   800  09EA  343D               	retlw	61	;'='
   801  09EB  343D               	retlw	61	;'='
   802  09EC  343D               	retlw	61	;'='
   803  09ED  343D               	retlw	61	;'='
   804  09EE  343D               	retlw	61	;'='
   805  09EF  343D               	retlw	61	;'='
   806  09F0  343D               	retlw	61	;'='
   807  09F1  343D               	retlw	61	;'='
   808  09F2  3466               	retlw	102	;'f'
   809  09F3  3469               	retlw	105	;'i'
   810  09F4  346E               	retlw	110	;'n'
   811  09F5  3464               	retlw	100	;'d'
   812  09F6  345F               	retlw	95	;'_'
   813  09F7  3462               	retlw	98	;'b'
   814  09F8  3465               	retlw	101	;'e'
   815  09F9  3473               	retlw	115	;'s'
   816  09FA  3474               	retlw	116	;'t'
   817  09FB  345F               	retlw	95	;'_'
   818  09FC  3473               	retlw	115	;'s'
   819  09FD  346F               	retlw	111	;'o'
   820  09FE  346C               	retlw	108	;'l'
   821  09FF  3475               	retlw	117	;'u'
   822  0A00  3474               	retlw	116	;'t'
   823  0A01  3469               	retlw	105	;'i'
   824  0A02  346F               	retlw	111	;'o'
   825  0A03  346E               	retlw	110	;'n'
   826  0A04  343D               	retlw	61	;'='
   827  0A05  343D               	retlw	61	;'='
   828  0A06  343D               	retlw	61	;'='
   829  0A07  343D               	retlw	61	;'='
   830  0A08  343D               	retlw	61	;'='
   831  0A09  343D               	retlw	61	;'='
   832  0A0A  343D               	retlw	61	;'='
   833  0A0B  343D               	retlw	61	;'='
   834  0A0C  343D               	retlw	61	;'='
   835  0A0D  343D               	retlw	61	;'='
   836  0A0E  343D               	retlw	61	;'='
   837  0A0F  343D               	retlw	61	;'='
   838  0A10  3400               	retlw	0
   839  0A11                     STR_11:	
   840  0A11  3470               	retlw	112	;'p'
   841  0A12  3472               	retlw	114	;'r'
   842  0A13  3469               	retlw	105	;'i'
   843  0A14  346E               	retlw	110	;'n'
   844  0A15  3474               	retlw	116	;'t'
   845  0A16  3466               	retlw	102	;'f'
   846  0A17  344D               	retlw	77	;'M'
   847  0A18  3441               	retlw	65	;'A'
   848  0A19  3454               	retlw	84	;'T'
   849  0A1A  3452               	retlw	82	;'R'
   850  0A1B  3449               	retlw	73	;'I'
   851  0A1C  3458               	retlw	88	;'X'
   852  0A1D  3434               	retlw	52	;'4'
   853  0A1E  3434               	retlw	52	;'4'
   854  0A1F  3420               	retlw	32	;' '
   855  0A20  3469               	retlw	105	;'i'
   856  0A21  346E               	retlw	110	;'n'
   857  0A22  3464               	retlw	100	;'d'
   858  0A23  3465               	retlw	101	;'e'
   859  0A24  3478               	retlw	120	;'x'
   860  0A25  3420               	retlw	32	;' '
   861  0A26  343D               	retlw	61	;'='
   862  0A27  3420               	retlw	32	;' '
   863  0A28  3425               	retlw	37	;'%'
   864  0A29  3464               	retlw	100	;'d'
   865  0A2A  342C               	retlw	44	;','
   866  0A2B  3420               	retlw	32	;' '
   867  0A2C  3473               	retlw	115	;'s'
   868  0A2D  3475               	retlw	117	;'u'
   869  0A2E  3462               	retlw	98	;'b'
   870  0A2F  345F               	retlw	95	;'_'
   871  0A30  3469               	retlw	105	;'i'
   872  0A31  346E               	retlw	110	;'n'
   873  0A32  3464               	retlw	100	;'d'
   874  0A33  3465               	retlw	101	;'e'
   875  0A34  3478               	retlw	120	;'x'
   876  0A35  3420               	retlw	32	;' '
   877  0A36  343D               	retlw	61	;'='
   878  0A37  3420               	retlw	32	;' '
   879  0A38  3425               	retlw	37	;'%'
   880  0A39  3464               	retlw	100	;'d'
   881  0A3A  3400               	retlw	0
   882  0A3B                     STR_47:	
   883  0A3B  3474               	retlw	116	;'t'
   884  0A3C  3465               	retlw	101	;'e'
   885  0A3D  346D               	retlw	109	;'m'
   886  0A3E  3470               	retlw	112	;'p'
   887  0A3F  345F               	retlw	95	;'_'
   888  0A40  3463               	retlw	99	;'c'
   889  0A41  346F               	retlw	111	;'o'
   890  0A42  3475               	retlw	117	;'u'
   891  0A43  346E               	retlw	110	;'n'
   892  0A44  3474               	retlw	116	;'t'
   893  0A45  3428               	retlw	40	;'('
   894  0A46  3425               	retlw	37	;'%'
   895  0A47  3464               	retlw	100	;'d'
   896  0A48  3429               	retlw	41	;')'
   897  0A49  3420               	retlw	32	;' '
   898  0A4A  343D               	retlw	61	;'='
   899  0A4B  343D               	retlw	61	;'='
   900  0A4C  3420               	retlw	32	;' '
   901  0A4D  3474               	retlw	116	;'t'
   902  0A4E  3465               	retlw	101	;'e'
   903  0A4F  346D               	retlw	109	;'m'
   904  0A50  3470               	retlw	112	;'p'
   905  0A51  345F               	retlw	95	;'_'
   906  0A52  3470               	retlw	112	;'p'
   907  0A53  3472               	retlw	114	;'r'
   908  0A54  3465               	retlw	101	;'e'
   909  0A55  345F               	retlw	95	;'_'
   910  0A56  3463               	retlw	99	;'c'
   911  0A57  346F               	retlw	111	;'o'
   912  0A58  3475               	retlw	117	;'u'
   913  0A59  346E               	retlw	110	;'n'
   914  0A5A  3474               	retlw	116	;'t'
   915  0A5B  3428               	retlw	40	;'('
   916  0A5C  3425               	retlw	37	;'%'
   917  0A5D  3464               	retlw	100	;'d'
   918  0A5E  3429               	retlw	41	;')'
   919  0A5F  340A               	retlw	10
   920  0A60  3400               	retlw	0
   921  0A61                     STR_45:	
   922  0A61  3474               	retlw	116	;'t'
   923  0A62  3465               	retlw	101	;'e'
   924  0A63  346D               	retlw	109	;'m'
   925  0A64  3470               	retlw	112	;'p'
   926  0A65  345F               	retlw	95	;'_'
   927  0A66  3463               	retlw	99	;'c'
   928  0A67  346F               	retlw	111	;'o'
   929  0A68  3475               	retlw	117	;'u'
   930  0A69  346E               	retlw	110	;'n'
   931  0A6A  3474               	retlw	116	;'t'
   932  0A6B  3428               	retlw	40	;'('
   933  0A6C  3425               	retlw	37	;'%'
   934  0A6D  3464               	retlw	100	;'d'
   935  0A6E  3429               	retlw	41	;')'
   936  0A6F  3420               	retlw	32	;' '
   937  0A70  343E               	retlw	62	;'>'
   938  0A71  3420               	retlw	32	;' '
   939  0A72  3474               	retlw	116	;'t'
   940  0A73  3465               	retlw	101	;'e'
   941  0A74  346D               	retlw	109	;'m'
   942  0A75  3470               	retlw	112	;'p'
   943  0A76  345F               	retlw	95	;'_'
   944  0A77  3470               	retlw	112	;'p'
   945  0A78  3472               	retlw	114	;'r'
   946  0A79  3465               	retlw	101	;'e'
   947  0A7A  345F               	retlw	95	;'_'
   948  0A7B  3463               	retlw	99	;'c'
   949  0A7C  346F               	retlw	111	;'o'
   950  0A7D  3475               	retlw	117	;'u'
   951  0A7E  346E               	retlw	110	;'n'
   952  0A7F  3474               	retlw	116	;'t'
   953  0A80  3428               	retlw	40	;'('
   954  0A81  3425               	retlw	37	;'%'
   955  0A82  3464               	retlw	100	;'d'
   956  0A83  3429               	retlw	41	;')'
   957  0A84  340A               	retlw	10
   958  0A85  3400               	retlw	0
   959  0A86                     STR_58:	
   960  0A86  3474               	retlw	116	;'t'
   961  0A87  3465               	retlw	101	;'e'
   962  0A88  346D               	retlw	109	;'m'
   963  0A89  3470               	retlw	112	;'p'
   964  0A8A  345F               	retlw	95	;'_'
   965  0A8B  3468               	retlw	104	;'h'
   966  0A8C  346F               	retlw	111	;'o'
   967  0A8D  346C               	retlw	108	;'l'
   968  0A8E  3465               	retlw	101	;'e'
   969  0A8F  3428               	retlw	40	;'('
   970  0A90  3425               	retlw	37	;'%'
   971  0A91  3464               	retlw	100	;'d'
   972  0A92  3429               	retlw	41	;')'
   973  0A93  3420               	retlw	32	;' '
   974  0A94  343D               	retlw	61	;'='
   975  0A95  343D               	retlw	61	;'='
   976  0A96  3420               	retlw	32	;' '
   977  0A97  3474               	retlw	116	;'t'
   978  0A98  3465               	retlw	101	;'e'
   979  0A99  346D               	retlw	109	;'m'
   980  0A9A  3470               	retlw	112	;'p'
   981  0A9B  345F               	retlw	95	;'_'
   982  0A9C  3470               	retlw	112	;'p'
   983  0A9D  3472               	retlw	114	;'r'
   984  0A9E  3465               	retlw	101	;'e'
   985  0A9F  345F               	retlw	95	;'_'
   986  0AA0  3468               	retlw	104	;'h'
   987  0AA1  346F               	retlw	111	;'o'
   988  0AA2  346C               	retlw	108	;'l'
   989  0AA3  3465               	retlw	101	;'e'
   990  0AA4  3428               	retlw	40	;'('
   991  0AA5  3425               	retlw	37	;'%'
   992  0AA6  3464               	retlw	100	;'d'
   993  0AA7  3429               	retlw	41	;')'
   994  0AA8  340A               	retlw	10
   995  0AA9  3400               	retlw	0
   996  0AAA                     STR_51:	
   997  0AAA  3474               	retlw	116	;'t'
   998  0AAB  3465               	retlw	101	;'e'
   999  0AAC  346D               	retlw	109	;'m'
  1000  0AAD  3470               	retlw	112	;'p'
  1001  0AAE  345F               	retlw	95	;'_'
  1002  0AAF  3468               	retlw	104	;'h'
  1003  0AB0  3469               	retlw	105	;'i'
  1004  0AB1  3467               	retlw	103	;'g'
  1005  0AB2  3468               	retlw	104	;'h'
  1006  0AB3  3428               	retlw	40	;'('
  1007  0AB4  3425               	retlw	37	;'%'
  1008  0AB5  3464               	retlw	100	;'d'
  1009  0AB6  3429               	retlw	41	;')'
  1010  0AB7  3420               	retlw	32	;' '
  1011  0AB8  343D               	retlw	61	;'='
  1012  0AB9  343D               	retlw	61	;'='
  1013  0ABA  3420               	retlw	32	;' '
  1014  0ABB  3474               	retlw	116	;'t'
  1015  0ABC  3465               	retlw	101	;'e'
  1016  0ABD  346D               	retlw	109	;'m'
  1017  0ABE  3470               	retlw	112	;'p'
  1018  0ABF  345F               	retlw	95	;'_'
  1019  0AC0  3470               	retlw	112	;'p'
  1020  0AC1  3472               	retlw	114	;'r'
  1021  0AC2  3465               	retlw	101	;'e'
  1022  0AC3  345F               	retlw	95	;'_'
  1023  0AC4  3468               	retlw	104	;'h'
  1024  0AC5  3469               	retlw	105	;'i'
  1025  0AC6  3467               	retlw	103	;'g'
  1026  0AC7  3468               	retlw	104	;'h'
  1027  0AC8  3428               	retlw	40	;'('
  1028  0AC9  3425               	retlw	37	;'%'
  1029  0ACA  3464               	retlw	100	;'d'
  1030  0ACB  3429               	retlw	41	;')'
  1031  0ACC  340A               	retlw	10
  1032  0ACD  3400               	retlw	0
  1033  0ACE                     STR_49:	
  1034  0ACE  3474               	retlw	116	;'t'
  1035  0ACF  3465               	retlw	101	;'e'
  1036  0AD0  346D               	retlw	109	;'m'
  1037  0AD1  3470               	retlw	112	;'p'
  1038  0AD2  345F               	retlw	95	;'_'
  1039  0AD3  3472               	retlw	114	;'r'
  1040  0AD4  3469               	retlw	105	;'i'
  1041  0AD5  3473               	retlw	115	;'s'
  1042  0AD6  346B               	retlw	107	;'k'
  1043  0AD7  3428               	retlw	40	;'('
  1044  0AD8  3425               	retlw	37	;'%'
  1045  0AD9  3464               	retlw	100	;'d'
  1046  0ADA  3429               	retlw	41	;')'
  1047  0ADB  3420               	retlw	32	;' '
  1048  0ADC  343D               	retlw	61	;'='
  1049  0ADD  343D               	retlw	61	;'='
  1050  0ADE  3420               	retlw	32	;' '
  1051  0ADF  3474               	retlw	116	;'t'
  1052  0AE0  3465               	retlw	101	;'e'
  1053  0AE1  346D               	retlw	109	;'m'
  1054  0AE2  3470               	retlw	112	;'p'
  1055  0AE3  345F               	retlw	95	;'_'
  1056  0AE4  3470               	retlw	112	;'p'
  1057  0AE5  3472               	retlw	114	;'r'
  1058  0AE6  3465               	retlw	101	;'e'
  1059  0AE7  345F               	retlw	95	;'_'
  1060  0AE8  3472               	retlw	114	;'r'
  1061  0AE9  3469               	retlw	105	;'i'
  1062  0AEA  3473               	retlw	115	;'s'
  1063  0AEB  346B               	retlw	107	;'k'
  1064  0AEC  3428               	retlw	40	;'('
  1065  0AED  3425               	retlw	37	;'%'
  1066  0AEE  3464               	retlw	100	;'d'
  1067  0AEF  3429               	retlw	41	;')'
  1068  0AF0  340A               	retlw	10
  1069  0AF1  3400               	retlw	0
  1070  0AF2                     STR_54:	
  1071  0AF2  3474               	retlw	116	;'t'
  1072  0AF3  3465               	retlw	101	;'e'
  1073  0AF4  346D               	retlw	109	;'m'
  1074  0AF5  3470               	retlw	112	;'p'
  1075  0AF6  345F               	retlw	95	;'_'
  1076  0AF7  3468               	retlw	104	;'h'
  1077  0AF8  3469               	retlw	105	;'i'
  1078  0AF9  3467               	retlw	103	;'g'
  1079  0AFA  3468               	retlw	104	;'h'
  1080  0AFB  3420               	retlw	32	;' '
  1081  0AFC  343D               	retlw	61	;'='
  1082  0AFD  3420               	retlw	32	;' '
  1083  0AFE  3425               	retlw	37	;'%'
  1084  0AFF  3464               	retlw	100	;'d'
  1085  0B00  342C               	retlw	44	;','
  1086  0B01  3420               	retlw	32	;' '
  1087  0B02  3474               	retlw	116	;'t'
  1088  0B03  3465               	retlw	101	;'e'
  1089  0B04  346D               	retlw	109	;'m'
  1090  0B05  3470               	retlw	112	;'p'
  1091  0B06  345F               	retlw	95	;'_'
  1092  0B07  3470               	retlw	112	;'p'
  1093  0B08  3472               	retlw	114	;'r'
  1094  0B09  3465               	retlw	101	;'e'
  1095  0B0A  345F               	retlw	95	;'_'
  1096  0B0B  3468               	retlw	104	;'h'
  1097  0B0C  3469               	retlw	105	;'i'
  1098  0B0D  3467               	retlw	103	;'g'
  1099  0B0E  3468               	retlw	104	;'h'
  1100  0B0F  3420               	retlw	32	;' '
  1101  0B10  343D               	retlw	61	;'='
  1102  0B11  3420               	retlw	32	;' '
  1103  0B12  3425               	retlw	37	;'%'
  1104  0B13  3464               	retlw	100	;'d'
  1105  0B14  340A               	retlw	10
  1106  0B15  3400               	retlw	0
  1107  0B16                     STR_44:	
  1108  0B16  3467               	retlw	103	;'g'
  1109  0B17  345F               	retlw	95	;'_'
  1110  0B18  3463               	retlw	99	;'c'
  1111  0B19  3468               	retlw	104	;'h'
  1112  0B1A  3461               	retlw	97	;'a'
  1113  0B1B  3472               	retlw	114	;'r'
  1114  0B1C  345F               	retlw	95	;'_'
  1115  0B1D  3469               	retlw	105	;'i'
  1116  0B1E  346E               	retlw	110	;'n'
  1117  0B1F  3466               	retlw	102	;'f'
  1118  0B20  346F               	retlw	111	;'o'
  1119  0B21  345F               	retlw	95	;'_'
  1120  0B22  3469               	retlw	105	;'i'
  1121  0B23  346E               	retlw	110	;'n'
  1122  0B24  3464               	retlw	100	;'d'
  1123  0B25  3465               	retlw	101	;'e'
  1124  0B26  3478               	retlw	120	;'x'
  1125  0B27  3420               	retlw	32	;' '
  1126  0B28  343D               	retlw	61	;'='
  1127  0B29  3420               	retlw	32	;' '
  1128  0B2A  3428               	retlw	40	;'('
  1129  0B2B  3425               	retlw	37	;'%'
  1130  0B2C  3464               	retlw	100	;'d'
  1131  0B2D  3429               	retlw	41	;')'
  1132  0B2E  342C               	retlw	44	;','
  1133  0B2F  3420               	retlw	32	;' '
  1134  0B30  346E               	retlw	110	;'n'
  1135  0B31  3475               	retlw	117	;'u'
  1136  0B32  346D               	retlw	109	;'m'
  1137  0B33  3420               	retlw	32	;' '
  1138  0B34  343D               	retlw	61	;'='
  1139  0B35  3420               	retlw	32	;' '
  1140  0B36  3425               	retlw	37	;'%'
  1141  0B37  3464               	retlw	100	;'d'
  1142  0B38  340A               	retlw	10
  1143  0B39  3400               	retlw	0
  1144  0B3A                     STR_52:	
  1145  0B3A  3474               	retlw	116	;'t'
  1146  0B3B  3465               	retlw	101	;'e'
  1147  0B3C  346D               	retlw	109	;'m'
  1148  0B3D  3470               	retlw	112	;'p'
  1149  0B3E  345F               	retlw	95	;'_'
  1150  0B3F  3468               	retlw	104	;'h'
  1151  0B40  346F               	retlw	111	;'o'
  1152  0B41  346C               	retlw	108	;'l'
  1153  0B42  3465               	retlw	101	;'e'
  1154  0B43  3428               	retlw	40	;'('
  1155  0B44  3425               	retlw	37	;'%'
  1156  0B45  3464               	retlw	100	;'d'
  1157  0B46  3429               	retlw	41	;')'
  1158  0B47  3420               	retlw	32	;' '
  1159  0B48  343C               	retlw	60	;'<'
  1160  0B49  3420               	retlw	32	;' '
  1161  0B4A  3474               	retlw	116	;'t'
  1162  0B4B  3465               	retlw	101	;'e'
  1163  0B4C  346D               	retlw	109	;'m'
  1164  0B4D  3470               	retlw	112	;'p'
  1165  0B4E  345F               	retlw	95	;'_'
  1166  0B4F  3470               	retlw	112	;'p'
  1167  0B50  3472               	retlw	114	;'r'
  1168  0B51  3465               	retlw	101	;'e'
  1169  0B52  345F               	retlw	95	;'_'
  1170  0B53  3468               	retlw	104	;'h'
  1171  0B54  346F               	retlw	111	;'o'
  1172  0B55  346C               	retlw	108	;'l'
  1173  0B56  3465               	retlw	101	;'e'
  1174  0B57  3428               	retlw	40	;'('
  1175  0B58  3425               	retlw	37	;'%'
  1176  0B59  3464               	retlw	100	;'d'
  1177  0B5A  3429               	retlw	41	;')'
  1178  0B5B  340A               	retlw	10
  1179  0B5C  3400               	retlw	0
  1180  0B5D                     STR_50:	
  1181  0B5D  3474               	retlw	116	;'t'
  1182  0B5E  3465               	retlw	101	;'e'
  1183  0B5F  346D               	retlw	109	;'m'
  1184  0B60  3470               	retlw	112	;'p'
  1185  0B61  345F               	retlw	95	;'_'
  1186  0B62  3468               	retlw	104	;'h'
  1187  0B63  3469               	retlw	105	;'i'
  1188  0B64  3467               	retlw	103	;'g'
  1189  0B65  3468               	retlw	104	;'h'
  1190  0B66  3428               	retlw	40	;'('
  1191  0B67  3425               	retlw	37	;'%'
  1192  0B68  3464               	retlw	100	;'d'
  1193  0B69  3429               	retlw	41	;')'
  1194  0B6A  3420               	retlw	32	;' '
  1195  0B6B  343C               	retlw	60	;'<'
  1196  0B6C  3420               	retlw	32	;' '
  1197  0B6D  3474               	retlw	116	;'t'
  1198  0B6E  3465               	retlw	101	;'e'
  1199  0B6F  346D               	retlw	109	;'m'
  1200  0B70  3470               	retlw	112	;'p'
  1201  0B71  345F               	retlw	95	;'_'
  1202  0B72  3470               	retlw	112	;'p'
  1203  0B73  3472               	retlw	114	;'r'
  1204  0B74  3465               	retlw	101	;'e'
  1205  0B75  345F               	retlw	95	;'_'
  1206  0B76  3468               	retlw	104	;'h'
  1207  0B77  3469               	retlw	105	;'i'
  1208  0B78  3467               	retlw	103	;'g'
  1209  0B79  3468               	retlw	104	;'h'
  1210  0B7A  3428               	retlw	40	;'('
  1211  0B7B  3425               	retlw	37	;'%'
  1212  0B7C  3464               	retlw	100	;'d'
  1213  0B7D  3429               	retlw	41	;')'
  1214  0B7E  340A               	retlw	10
  1215  0B7F  3400               	retlw	0
  1216  0B80                     STR_48:	
  1217  0B80  3474               	retlw	116	;'t'
  1218  0B81  3465               	retlw	101	;'e'
  1219  0B82  346D               	retlw	109	;'m'
  1220  0B83  3470               	retlw	112	;'p'
  1221  0B84  345F               	retlw	95	;'_'
  1222  0B85  3472               	retlw	114	;'r'
  1223  0B86  3469               	retlw	105	;'i'
  1224  0B87  3473               	retlw	115	;'s'
  1225  0B88  346B               	retlw	107	;'k'
  1226  0B89  3428               	retlw	40	;'('
  1227  0B8A  3425               	retlw	37	;'%'
  1228  0B8B  3464               	retlw	100	;'d'
  1229  0B8C  3429               	retlw	41	;')'
  1230  0B8D  3420               	retlw	32	;' '
  1231  0B8E  343C               	retlw	60	;'<'
  1232  0B8F  3420               	retlw	32	;' '
  1233  0B90  3474               	retlw	116	;'t'
  1234  0B91  3465               	retlw	101	;'e'
  1235  0B92  346D               	retlw	109	;'m'
  1236  0B93  3470               	retlw	112	;'p'
  1237  0B94  345F               	retlw	95	;'_'
  1238  0B95  3470               	retlw	112	;'p'
  1239  0B96  3472               	retlw	114	;'r'
  1240  0B97  3465               	retlw	101	;'e'
  1241  0B98  345F               	retlw	95	;'_'
  1242  0B99  3472               	retlw	114	;'r'
  1243  0B9A  3469               	retlw	105	;'i'
  1244  0B9B  3473               	retlw	115	;'s'
  1245  0B9C  346B               	retlw	107	;'k'
  1246  0B9D  3428               	retlw	40	;'('
  1247  0B9E  3425               	retlw	37	;'%'
  1248  0B9F  3464               	retlw	100	;'d'
  1249  0BA0  3429               	retlw	41	;')'
  1250  0BA1  340A               	retlw	10
  1251  0BA2  3400               	retlw	0
  1252  0BA3                     STR_27:	
  1253  0BA3  343D               	retlw	61	;'='
  1254  0BA4  343D               	retlw	61	;'='
  1255  0BA5  343D               	retlw	61	;'='
  1256  0BA6  343D               	retlw	61	;'='
  1257  0BA7  343D               	retlw	61	;'='
  1258  0BA8  343D               	retlw	61	;'='
  1259  0BA9  343D               	retlw	61	;'='
  1260  0BAA  343D               	retlw	61	;'='
  1261  0BAB  343D               	retlw	61	;'='
  1262  0BAC  343D               	retlw	61	;'='
  1263  0BAD  343D               	retlw	61	;'='
  1264  0BAE  343D               	retlw	61	;'='
  1265  0BAF  343D               	retlw	61	;'='
  1266  0BB0  343D               	retlw	61	;'='
  1267  0BB1  3469               	retlw	105	;'i'
  1268  0BB2  3473               	retlw	115	;'s'
  1269  0BB3  345F               	retlw	95	;'_'
  1270  0BB4  3476               	retlw	118	;'v'
  1271  0BB5  3461               	retlw	97	;'a'
  1272  0BB6  346C               	retlw	108	;'l'
  1273  0BB7  3469               	retlw	105	;'i'
  1274  0BB8  3464               	retlw	100	;'d'
  1275  0BB9  343D               	retlw	61	;'='
  1276  0BBA  343D               	retlw	61	;'='
  1277  0BBB  343D               	retlw	61	;'='
  1278  0BBC  343D               	retlw	61	;'='
  1279  0BBD  343D               	retlw	61	;'='
  1280  0BBE  343D               	retlw	61	;'='
  1281  0BBF  343D               	retlw	61	;'='
  1282  0BC0  343D               	retlw	61	;'='
  1283  0BC1  343D               	retlw	61	;'='
  1284  0BC2  343D               	retlw	61	;'='
  1285  0BC3  343D               	retlw	61	;'='
  1286  0BC4  343D               	retlw	61	;'='
  1287  0BC5  3400               	retlw	0
  1288  0BC6                     STR_23:	
  1289  0BC6  343D               	retlw	61	;'='
  1290  0BC7  343D               	retlw	61	;'='
  1291  0BC8  343D               	retlw	61	;'='
  1292  0BC9  343D               	retlw	61	;'='
  1293  0BCA  343D               	retlw	61	;'='
  1294  0BCB  343D               	retlw	61	;'='
  1295  0BCC  343D               	retlw	61	;'='
  1296  0BCD  343D               	retlw	61	;'='
  1297  0BCE  343D               	retlw	61	;'='
  1298  0BCF  343D               	retlw	61	;'='
  1299  0BD0  343D               	retlw	61	;'='
  1300  0BD1  343D               	retlw	61	;'='
  1301  0BD2  343D               	retlw	61	;'='
  1302  0BD3  343D               	retlw	61	;'='
  1303  0BD4  3468               	retlw	104	;'h'
  1304  0BD5  3469               	retlw	105	;'i'
  1305  0BD6  3474               	retlw	116	;'t'
  1306  0BD7  345F               	retlw	95	;'_'
  1307  0BD8  346C               	retlw	108	;'l'
  1308  0BD9  3461               	retlw	97	;'a'
  1309  0BDA  346E               	retlw	110	;'n'
  1310  0BDB  3464               	retlw	100	;'d'
  1311  0BDC  343D               	retlw	61	;'='
  1312  0BDD  343D               	retlw	61	;'='
  1313  0BDE  343D               	retlw	61	;'='
  1314  0BDF  343D               	retlw	61	;'='
  1315  0BE0  343D               	retlw	61	;'='
  1316  0BE1  343D               	retlw	61	;'='
  1317  0BE2  343D               	retlw	61	;'='
  1318  0BE3  343D               	retlw	61	;'='
  1319  0BE4  343D               	retlw	61	;'='
  1320  0BE5  343D               	retlw	61	;'='
  1321  0BE6  343D               	retlw	61	;'='
  1322  0BE7  343D               	retlw	61	;'='
  1323  0BE8  3400               	retlw	0
  1324  0BE9                     STR_41:	
  1325  0BE9  3463               	retlw	99	;'c'
  1326  0BEA  346F               	retlw	111	;'o'
  1327  0BEB  346C               	retlw	108	;'l'
  1328  0BEC  3420               	retlw	32	;' '
  1329  0BED  343D               	retlw	61	;'='
  1330  0BEE  3420               	retlw	32	;' '
  1331  0BEF  3425               	retlw	37	;'%'
  1332  0BF0  3464               	retlw	100	;'d'
  1333  0BF1  342C               	retlw	44	;','
  1334  0BF2  3420               	retlw	32	;' '
  1335  0BF3  3473               	retlw	115	;'s'
  1336  0BF4  3474               	retlw	116	;'t'
  1337  0BF5  3461               	retlw	97	;'a'
  1338  0BF6  3472               	retlw	114	;'r'
  1339  0BF7  3474               	retlw	116	;'t'
  1340  0BF8  3420               	retlw	32	;' '
  1341  0BF9  343D               	retlw	61	;'='
  1342  0BFA  3420               	retlw	32	;' '
  1343  0BFB  3425               	retlw	37	;'%'
  1344  0BFC  3464               	retlw	100	;'d'
  1345  0BFD  342C               	retlw	44	;','
  1346  0BFE  3420               	retlw	32	;' '
  1347  0BFF  3473               	retlw	115	;'s'
  1348  0C00  3474               	retlw	116	;'t'
  1349  0C01  346F               	retlw	111	;'o'
  1350  0C02  3470               	retlw	112	;'p'
  1351  0C03  3420               	retlw	32	;' '
  1352  0C04  343D               	retlw	61	;'='
  1353  0C05  3420               	retlw	32	;' '
  1354  0C06  3425               	retlw	37	;'%'
  1355  0C07  3464               	retlw	100	;'d'
  1356  0C08  340A               	retlw	10
  1357  0C09  3400               	retlw	0
  1358  0C0A                     STR_10:	
  1359  0C0A  3470               	retlw	112	;'p'
  1360  0C0B  3472               	retlw	114	;'r'
  1361  0C0C  3469               	retlw	105	;'i'
  1362  0C0D  346E               	retlw	110	;'n'
  1363  0C0E  3474               	retlw	116	;'t'
  1364  0C0F  3466               	retlw	102	;'f'
  1365  0C10  345F               	retlw	95	;'_'
  1366  0C11  3461               	retlw	97	;'a'
  1367  0C12  346C               	retlw	108	;'l'
  1368  0C13  346C               	retlw	108	;'l'
  1369  0C14  345F               	retlw	95	;'_'
  1370  0C15  344D               	retlw	77	;'M'
  1371  0C16  3441               	retlw	65	;'A'
  1372  0C17  3454               	retlw	84	;'T'
  1373  0C18  3452               	retlw	82	;'R'
  1374  0C19  3449               	retlw	73	;'I'
  1375  0C1A  3458               	retlw	88	;'X'
  1376  0C1B  3434               	retlw	52	;'4'
  1377  0C1C  3434               	retlw	52	;'4'
  1378  0C1D  3420               	retlw	32	;' '
  1379  0C1E  3473               	retlw	115	;'s'
  1380  0C1F  3469               	retlw	105	;'i'
  1381  0C20  347A               	retlw	122	;'z'
  1382  0C21  3465               	retlw	101	;'e'
  1383  0C22  3420               	retlw	32	;' '
  1384  0C23  343D               	retlw	61	;'='
  1385  0C24  3420               	retlw	32	;' '
  1386  0C25  3425               	retlw	37	;'%'
  1387  0C26  3464               	retlw	100	;'d'
  1388  0C27  3400               	retlw	0
  1389  0C28                     STR_28:	
  1390  0C28  346E               	retlw	110	;'n'
  1391  0C29  346F               	retlw	111	;'o'
  1392  0C2A  3474               	retlw	116	;'t'
  1393  0C2B  3420               	retlw	32	;' '
  1394  0C2C  3476               	retlw	118	;'v'
  1395  0C2D  3461               	retlw	97	;'a'
  1396  0C2E  346C               	retlw	108	;'l'
  1397  0C2F  3469               	retlw	105	;'i'
  1398  0C30  3464               	retlw	100	;'d'
  1399  0C31  3431               	retlw	49	;'1'
  1400  0C32  3420               	retlw	32	;' '
  1401  0C33  3472               	retlw	114	;'r'
  1402  0C34  346F               	retlw	111	;'o'
  1403  0C35  3477               	retlw	119	;'w'
  1404  0C36  3420               	retlw	32	;' '
  1405  0C37  343D               	retlw	61	;'='
  1406  0C38  3420               	retlw	32	;' '
  1407  0C39  3425               	retlw	37	;'%'
  1408  0C3A  3464               	retlw	100	;'d'
  1409  0C3B  342C               	retlw	44	;','
  1410  0C3C  3420               	retlw	32	;' '
  1411  0C3D  3463               	retlw	99	;'c'
  1412  0C3E  346F               	retlw	111	;'o'
  1413  0C3F  346C               	retlw	108	;'l'
  1414  0C40  3420               	retlw	32	;' '
  1415  0C41  343D               	retlw	61	;'='
  1416  0C42  3420               	retlw	32	;' '
  1417  0C43  3425               	retlw	37	;'%'
  1418  0C44  3464               	retlw	100	;'d'
  1419  0C45  3400               	retlw	0
  1420  0C46                     STR_29:	
  1421  0C46  346E               	retlw	110	;'n'
  1422  0C47  346F               	retlw	111	;'o'
  1423  0C48  3474               	retlw	116	;'t'
  1424  0C49  3420               	retlw	32	;' '
  1425  0C4A  3476               	retlw	118	;'v'
  1426  0C4B  3461               	retlw	97	;'a'
  1427  0C4C  346C               	retlw	108	;'l'
  1428  0C4D  3469               	retlw	105	;'i'
  1429  0C4E  3464               	retlw	100	;'d'
  1430  0C4F  3432               	retlw	50	;'2'
  1431  0C50  3420               	retlw	32	;' '
  1432  0C51  3472               	retlw	114	;'r'
  1433  0C52  346F               	retlw	111	;'o'
  1434  0C53  3477               	retlw	119	;'w'
  1435  0C54  3420               	retlw	32	;' '
  1436  0C55  343D               	retlw	61	;'='
  1437  0C56  3420               	retlw	32	;' '
  1438  0C57  3425               	retlw	37	;'%'
  1439  0C58  3464               	retlw	100	;'d'
  1440  0C59  342C               	retlw	44	;','
  1441  0C5A  3420               	retlw	32	;' '
  1442  0C5B  3463               	retlw	99	;'c'
  1443  0C5C  346F               	retlw	111	;'o'
  1444  0C5D  346C               	retlw	108	;'l'
  1445  0C5E  3420               	retlw	32	;' '
  1446  0C5F  343D               	retlw	61	;'='
  1447  0C60  3420               	retlw	32	;' '
  1448  0C61  3425               	retlw	37	;'%'
  1449  0C62  3464               	retlw	100	;'d'
  1450  0C63  3400               	retlw	0
  1451  0C64                     STR_30:	
  1452  0C64  346E               	retlw	110	;'n'
  1453  0C65  346F               	retlw	111	;'o'
  1454  0C66  3474               	retlw	116	;'t'
  1455  0C67  3420               	retlw	32	;' '
  1456  0C68  3476               	retlw	118	;'v'
  1457  0C69  3461               	retlw	97	;'a'
  1458  0C6A  346C               	retlw	108	;'l'
  1459  0C6B  3469               	retlw	105	;'i'
  1460  0C6C  3464               	retlw	100	;'d'
  1461  0C6D  3433               	retlw	51	;'3'
  1462  0C6E  3420               	retlw	32	;' '
  1463  0C6F  3472               	retlw	114	;'r'
  1464  0C70  346F               	retlw	111	;'o'
  1465  0C71  3477               	retlw	119	;'w'
  1466  0C72  3420               	retlw	32	;' '
  1467  0C73  343D               	retlw	61	;'='
  1468  0C74  3420               	retlw	32	;' '
  1469  0C75  3425               	retlw	37	;'%'
  1470  0C76  3464               	retlw	100	;'d'
  1471  0C77  342C               	retlw	44	;','
  1472  0C78  3420               	retlw	32	;' '
  1473  0C79  3463               	retlw	99	;'c'
  1474  0C7A  346F               	retlw	111	;'o'
  1475  0C7B  346C               	retlw	108	;'l'
  1476  0C7C  3420               	retlw	32	;' '
  1477  0C7D  343D               	retlw	61	;'='
  1478  0C7E  3420               	retlw	32	;' '
  1479  0C7F  3425               	retlw	37	;'%'
  1480  0C80  3464               	retlw	100	;'d'
  1481  0C81  3400               	retlw	0
  1482  0C82                     STR_5:	
  1483  0C82  343C               	retlw	60	;'<'
  1484  0C83  343C               	retlw	60	;'<'
  1485  0C84  343C               	retlw	60	;'<'
  1486  0C85  343C               	retlw	60	;'<'
  1487  0C86  343C               	retlw	60	;'<'
  1488  0C87  343C               	retlw	60	;'<'
  1489  0C88  343C               	retlw	60	;'<'
  1490  0C89  343C               	retlw	60	;'<'
  1491  0C8A  343C               	retlw	60	;'<'
  1492  0C8B  343C               	retlw	60	;'<'
  1493  0C8C  343C               	retlw	60	;'<'
  1494  0C8D  343C               	retlw	60	;'<'
  1495  0C8E  343C               	retlw	60	;'<'
  1496  0C8F  343C               	retlw	60	;'<'
  1497  0C90  343C               	retlw	60	;'<'
  1498  0C91  343C               	retlw	60	;'<'
  1499  0C92  343C               	retlw	60	;'<'
  1500  0C93  343C               	retlw	60	;'<'
  1501  0C94  343C               	retlw	60	;'<'
  1502  0C95  343C               	retlw	60	;'<'
  1503  0C96  344D               	retlw	77	;'M'
  1504  0C97  3441               	retlw	65	;'A'
  1505  0C98  3454               	retlw	84	;'T'
  1506  0C99  3452               	retlw	82	;'R'
  1507  0C9A  3449               	retlw	73	;'I'
  1508  0C9B  3458               	retlw	88	;'X'
  1509  0C9C  3434               	retlw	52	;'4'
  1510  0C9D  3434               	retlw	52	;'4'
  1511  0C9E  3400               	retlw	0
  1512  0C9F                     STR_17:	
  1513  0C9F  343C               	retlw	60	;'<'
  1514  0CA0  343C               	retlw	60	;'<'
  1515  0CA1  343C               	retlw	60	;'<'
  1516  0CA2  343C               	retlw	60	;'<'
  1517  0CA3  343C               	retlw	60	;'<'
  1518  0CA4  343C               	retlw	60	;'<'
  1519  0CA5  343C               	retlw	60	;'<'
  1520  0CA6  343C               	retlw	60	;'<'
  1521  0CA7  343C               	retlw	60	;'<'
  1522  0CA8  343C               	retlw	60	;'<'
  1523  0CA9  343C               	retlw	60	;'<'
  1524  0CAA  343C               	retlw	60	;'<'
  1525  0CAB  343C               	retlw	60	;'<'
  1526  0CAC  343C               	retlw	60	;'<'
  1527  0CAD  343C               	retlw	60	;'<'
  1528  0CAE  343C               	retlw	60	;'<'
  1529  0CAF  343C               	retlw	60	;'<'
  1530  0CB0  343C               	retlw	60	;'<'
  1531  0CB1  343C               	retlw	60	;'<'
  1532  0CB2  343C               	retlw	60	;'<'
  1533  0CB3  344D               	retlw	77	;'M'
  1534  0CB4  3441               	retlw	65	;'A'
  1535  0CB5  3454               	retlw	84	;'T'
  1536  0CB6  3452               	retlw	82	;'R'
  1537  0CB7  3449               	retlw	73	;'I'
  1538  0CB8  3458               	retlw	88	;'X'
  1539  0CB9  3438               	retlw	56	;'8'
  1540  0CBA  3438               	retlw	56	;'8'
  1541  0CBB  3400               	retlw	0
  1542  0CBC                     STR_34:	
  1543  0CBC  3466               	retlw	102	;'f'
  1544  0CBD  3461               	retlw	97	;'a'
  1545  0CBE  346C               	retlw	108	;'l'
  1546  0CBF  346C               	retlw	108	;'l'
  1547  0CC0  345F               	retlw	95	;'_'
  1548  0CC1  346F               	retlw	111	;'o'
  1549  0CC2  3466               	retlw	102	;'f'
  1550  0CC3  3466               	retlw	102	;'f'
  1551  0CC4  3431               	retlw	49	;'1'
  1552  0CC5  3420               	retlw	32	;' '
  1553  0CC6  3478               	retlw	120	;'x'
  1554  0CC7  3420               	retlw	32	;' '
  1555  0CC8  343D               	retlw	61	;'='
  1556  0CC9  3420               	retlw	32	;' '
  1557  0CCA  3425               	retlw	37	;'%'
  1558  0CCB  3464               	retlw	100	;'d'
  1559  0CCC  342C               	retlw	44	;','
  1560  0CCD  3420               	retlw	32	;' '
  1561  0CCE  3479               	retlw	121	;'y'
  1562  0CCF  3420               	retlw	32	;' '
  1563  0CD0  343D               	retlw	61	;'='
  1564  0CD1  3420               	retlw	32	;' '
  1565  0CD2  3425               	retlw	37	;'%'
  1566  0CD3  3464               	retlw	100	;'d'
  1567  0CD4  340A               	retlw	10
  1568  0CD5  3400               	retlw	0
  1569  0CD6                     STR_35:	
  1570  0CD6  3466               	retlw	102	;'f'
  1571  0CD7  3461               	retlw	97	;'a'
  1572  0CD8  346C               	retlw	108	;'l'
  1573  0CD9  346C               	retlw	108	;'l'
  1574  0CDA  345F               	retlw	95	;'_'
  1575  0CDB  346F               	retlw	111	;'o'
  1576  0CDC  3466               	retlw	102	;'f'
  1577  0CDD  3466               	retlw	102	;'f'
  1578  0CDE  3432               	retlw	50	;'2'
  1579  0CDF  3420               	retlw	32	;' '
  1580  0CE0  3478               	retlw	120	;'x'
  1581  0CE1  3420               	retlw	32	;' '
  1582  0CE2  343D               	retlw	61	;'='
  1583  0CE3  3420               	retlw	32	;' '
  1584  0CE4  3425               	retlw	37	;'%'
  1585  0CE5  3464               	retlw	100	;'d'
  1586  0CE6  342C               	retlw	44	;','
  1587  0CE7  3420               	retlw	32	;' '
  1588  0CE8  3479               	retlw	121	;'y'
  1589  0CE9  3420               	retlw	32	;' '
  1590  0CEA  343D               	retlw	61	;'='
  1591  0CEB  3420               	retlw	32	;' '
  1592  0CEC  3425               	retlw	37	;'%'
  1593  0CED  3464               	retlw	100	;'d'
  1594  0CEE  340A               	retlw	10
  1595  0CEF  3400               	retlw	0
  1596  0CF0                     STR_22:	
  1597  0CF0  3464               	retlw	100	;'d'
  1598  0CF1  3465               	retlw	101	;'e'
  1599  0CF2  346C               	retlw	108	;'l'
  1600  0CF3  3465               	retlw	101	;'e'
  1601  0CF4  3474               	retlw	116	;'t'
  1602  0CF5  3465               	retlw	101	;'e'
  1603  0CF6  345F               	retlw	95	;'_'
  1604  0CF7  346D               	retlw	109	;'m'
  1605  0CF8  3461               	retlw	97	;'a'
  1606  0CF9  3474               	retlw	116	;'t'
  1607  0CFA  3472               	retlw	114	;'r'
  1608  0CFB  3469               	retlw	105	;'i'
  1609  0CFC  3478               	retlw	120	;'x'
  1610  0CFD  3420               	retlw	32	;' '
  1611  0CFE  3463               	retlw	99	;'c'
  1612  0CFF  346F               	retlw	111	;'o'
  1613  0D00  3475               	retlw	117	;'u'
  1614  0D01  346E               	retlw	110	;'n'
  1615  0D02  3474               	retlw	116	;'t'
  1616  0D03  3420               	retlw	32	;' '
  1617  0D04  343D               	retlw	61	;'='
  1618  0D05  3420               	retlw	32	;' '
  1619  0D06  3425               	retlw	37	;'%'
  1620  0D07  3464               	retlw	100	;'d'
  1621  0D08  3400               	retlw	0
  1622  0D09                     STR_61:	
  1623  0D09  3467               	retlw	103	;'g'
  1624  0D0A  345F               	retlw	95	;'_'
  1625  0D0B  3463               	retlw	99	;'c'
  1626  0D0C  3468               	retlw	104	;'h'
  1627  0D0D  3461               	retlw	97	;'a'
  1628  0D0E  3472               	retlw	114	;'r'
  1629  0D0F  345F               	retlw	95	;'_'
  1630  0D10  3469               	retlw	105	;'i'
  1631  0D11  346E               	retlw	110	;'n'
  1632  0D12  3466               	retlw	102	;'f'
  1633  0D13  346F               	retlw	111	;'o'
  1634  0D14  345F               	retlw	95	;'_'
  1635  0D15  3469               	retlw	105	;'i'
  1636  0D16  346E               	retlw	110	;'n'
  1637  0D17  3464               	retlw	100	;'d'
  1638  0D18  3465               	retlw	101	;'e'
  1639  0D19  3478               	retlw	120	;'x'
  1640  0D1A  3420               	retlw	32	;' '
  1641  0D1B  343D               	retlw	61	;'='
  1642  0D1C  3420               	retlw	32	;' '
  1643  0D1D  3425               	retlw	37	;'%'
  1644  0D1E  3464               	retlw	100	;'d'
  1645  0D1F  340A               	retlw	10
  1646  0D20  3400               	retlw	0
  1647  0D21                     STR_24:	
  1648  0D21  3468               	retlw	104	;'h'
  1649  0D22  3469               	retlw	105	;'i'
  1650  0D23  3474               	retlw	116	;'t'
  1651  0D24  3431               	retlw	49	;'1'
  1652  0D25  3420               	retlw	32	;' '
  1653  0D26  3472               	retlw	114	;'r'
  1654  0D27  346F               	retlw	111	;'o'
  1655  0D28  3477               	retlw	119	;'w'
  1656  0D29  3420               	retlw	32	;' '
  1657  0D2A  343D               	retlw	61	;'='
  1658  0D2B  3420               	retlw	32	;' '
  1659  0D2C  3425               	retlw	37	;'%'
  1660  0D2D  3464               	retlw	100	;'d'
  1661  0D2E  342C               	retlw	44	;','
  1662  0D2F  3420               	retlw	32	;' '
  1663  0D30  3463               	retlw	99	;'c'
  1664  0D31  346F               	retlw	111	;'o'
  1665  0D32  346C               	retlw	108	;'l'
  1666  0D33  3420               	retlw	32	;' '
  1667  0D34  343D               	retlw	61	;'='
  1668  0D35  3420               	retlw	32	;' '
  1669  0D36  3425               	retlw	37	;'%'
  1670  0D37  3464               	retlw	100	;'d'
  1671  0D38  3400               	retlw	0
  1672  0D39                     STR_25:	
  1673  0D39  3468               	retlw	104	;'h'
  1674  0D3A  3469               	retlw	105	;'i'
  1675  0D3B  3474               	retlw	116	;'t'
  1676  0D3C  3432               	retlw	50	;'2'
  1677  0D3D  3420               	retlw	32	;' '
  1678  0D3E  3472               	retlw	114	;'r'
  1679  0D3F  346F               	retlw	111	;'o'
  1680  0D40  3477               	retlw	119	;'w'
  1681  0D41  3420               	retlw	32	;' '
  1682  0D42  343D               	retlw	61	;'='
  1683  0D43  3420               	retlw	32	;' '
  1684  0D44  3425               	retlw	37	;'%'
  1685  0D45  3464               	retlw	100	;'d'
  1686  0D46  342C               	retlw	44	;','
  1687  0D47  3420               	retlw	32	;' '
  1688  0D48  3463               	retlw	99	;'c'
  1689  0D49  346F               	retlw	111	;'o'
  1690  0D4A  346C               	retlw	108	;'l'
  1691  0D4B  3420               	retlw	32	;' '
  1692  0D4C  343D               	retlw	61	;'='
  1693  0D4D  3420               	retlw	32	;' '
  1694  0D4E  3425               	retlw	37	;'%'
  1695  0D4F  3464               	retlw	100	;'d'
  1696  0D50  3400               	retlw	0
  1697  0D51                     STR_53:	
  1698  0D51  3457               	retlw	87	;'W'
  1699  0D52  3441               	retlw	65	;'A'
  1700  0D53  3452               	retlw	82	;'R'
  1701  0D54  344E               	retlw	78	;'N'
  1702  0D55  3449               	retlw	73	;'I'
  1703  0D56  344E               	retlw	78	;'N'
  1704  0D57  3447               	retlw	71	;'G'
  1705  0D58  3420               	retlw	32	;' '
  1706  0D59  3468               	retlw	104	;'h'
  1707  0D5A  3465               	retlw	101	;'e'
  1708  0D5B  3469               	retlw	105	;'i'
  1709  0D5C  3467               	retlw	103	;'g'
  1710  0D5D  3468               	retlw	104	;'h'
  1711  0D5E  3474               	retlw	116	;'t'
  1712  0D5F  3420               	retlw	32	;' '
  1713  0D60  343E               	retlw	62	;'>'
  1714  0D61  3420               	retlw	32	;' '
  1715  0D62  3428               	retlw	40	;'('
  1716  0D63  3425               	retlw	37	;'%'
  1717  0D64  3464               	retlw	100	;'d'
  1718  0D65  3429               	retlw	41	;')'
  1719  0D66  340A               	retlw	10
  1720  0D67  3400               	retlw	0
  1721  0D68                     STR_39:	
  1722  0D68  3467               	retlw	103	;'g'
  1723  0D69  3465               	retlw	101	;'e'
  1724  0D6A  3474               	retlw	116	;'t'
  1725  0D6B  345F               	retlw	95	;'_'
  1726  0D6C  3468               	retlw	104	;'h'
  1727  0D6D  3469               	retlw	105	;'i'
  1728  0D6E  3467               	retlw	103	;'g'
  1729  0D6F  3468               	retlw	104	;'h'
  1730  0D70  3420               	retlw	32	;' '
  1731  0D71  3468               	retlw	104	;'h'
  1732  0D72  3465               	retlw	101	;'e'
  1733  0D73  3469               	retlw	105	;'i'
  1734  0D74  3467               	retlw	103	;'g'
  1735  0D75  3468               	retlw	104	;'h'
  1736  0D76  3474               	retlw	116	;'t'
  1737  0D77  3420               	retlw	32	;' '
  1738  0D78  343D               	retlw	61	;'='
  1739  0D79  3420               	retlw	32	;' '
  1740  0D7A  3425               	retlw	37	;'%'
  1741  0D7B  3464               	retlw	100	;'d'
  1742  0D7C  340A               	retlw	10
  1743  0D7D  3400               	retlw	0
  1744  0D7E                     STR_12:	
  1745  0D7E  343C               	retlw	60	;'<'
  1746  0D7F  343C               	retlw	60	;'<'
  1747  0D80  343C               	retlw	60	;'<'
  1748  0D81  343C               	retlw	60	;'<'
  1749  0D82  343C               	retlw	60	;'<'
  1750  0D83  343C               	retlw	60	;'<'
  1751  0D84  343C               	retlw	60	;'<'
  1752  0D85  343C               	retlw	60	;'<'
  1753  0D86  343C               	retlw	60	;'<'
  1754  0D87  343C               	retlw	60	;'<'
  1755  0D88  343C               	retlw	60	;'<'
  1756  0D89  343C               	retlw	60	;'<'
  1757  0D8A  343C               	retlw	60	;'<'
  1758  0D8B  343C               	retlw	60	;'<'
  1759  0D8C  343C               	retlw	60	;'<'
  1760  0D8D  343C               	retlw	60	;'<'
  1761  0D8E  343C               	retlw	60	;'<'
  1762  0D8F  343C               	retlw	60	;'<'
  1763  0D90  343C               	retlw	60	;'<'
  1764  0D91  343C               	retlw	60	;'<'
  1765  0D92  3400               	retlw	0
  1766  0D93                     STR_9:	
  1767  0D93  343E               	retlw	62	;'>'
  1768  0D94  343E               	retlw	62	;'>'
  1769  0D95  343E               	retlw	62	;'>'
  1770  0D96  343E               	retlw	62	;'>'
  1771  0D97  343E               	retlw	62	;'>'
  1772  0D98  343E               	retlw	62	;'>'
  1773  0D99  343E               	retlw	62	;'>'
  1774  0D9A  343E               	retlw	62	;'>'
  1775  0D9B  343E               	retlw	62	;'>'
  1776  0D9C  343E               	retlw	62	;'>'
  1777  0D9D  343E               	retlw	62	;'>'
  1778  0D9E  343E               	retlw	62	;'>'
  1779  0D9F  343E               	retlw	62	;'>'
  1780  0DA0  343E               	retlw	62	;'>'
  1781  0DA1  343E               	retlw	62	;'>'
  1782  0DA2  343E               	retlw	62	;'>'
  1783  0DA3  343E               	retlw	62	;'>'
  1784  0DA4  343E               	retlw	62	;'>'
  1785  0DA5  343E               	retlw	62	;'>'
  1786  0DA6  343E               	retlw	62	;'>'
  1787  0DA7  3400               	retlw	0
  1788  0DA8                     STR_33:	
  1789  0DA8  3452               	retlw	82	;'R'
  1790  0DA9  3449               	retlw	73	;'I'
  1791  0DAA  3447               	retlw	71	;'G'
  1792  0DAB  3448               	retlw	72	;'H'
  1793  0DAC  3454               	retlw	84	;'T'
  1794  0DAD  345F               	retlw	95	;'_'
  1795  0DAE  344F               	retlw	79	;'O'
  1796  0DAF  3456               	retlw	86	;'V'
  1797  0DB0  3445               	retlw	69	;'E'
  1798  0DB1  3452               	retlw	82	;'R'
  1799  0DB2  345F               	retlw	95	;'_'
  1800  0DB3  3442               	retlw	66	;'B'
  1801  0DB4  344F               	retlw	79	;'O'
  1802  0DB5  3455               	retlw	85	;'U'
  1803  0DB6  344E               	retlw	78	;'N'
  1804  0DB7  3444               	retlw	68	;'D'
  1805  0DB8  3441               	retlw	65	;'A'
  1806  0DB9  3452               	retlw	82	;'R'
  1807  0DBA  3459               	retlw	89	;'Y'
  1808  0DBB  3400               	retlw	0
  1809  0DBC                     STR_32:	
  1810  0DBC  344C               	retlw	76	;'L'
  1811  0DBD  3445               	retlw	69	;'E'
  1812  0DBE  3446               	retlw	70	;'F'
  1813  0DBF  3454               	retlw	84	;'T'
  1814  0DC0  345F               	retlw	95	;'_'
  1815  0DC1  344F               	retlw	79	;'O'
  1816  0DC2  3456               	retlw	86	;'V'
  1817  0DC3  3445               	retlw	69	;'E'
  1818  0DC4  3452               	retlw	82	;'R'
  1819  0DC5  345F               	retlw	95	;'_'
  1820  0DC6  3442               	retlw	66	;'B'
  1821  0DC7  344F               	retlw	79	;'O'
  1822  0DC8  3455               	retlw	85	;'U'
  1823  0DC9  344E               	retlw	78	;'N'
  1824  0DCA  3444               	retlw	68	;'D'
  1825  0DCB  3441               	retlw	65	;'A'
  1826  0DCC  3452               	retlw	82	;'R'
  1827  0DCD  3459               	retlw	89	;'Y'
  1828  0DCE  3400               	retlw	0
  1829  0DCF                     STR_64:	
  1830  0DCF  3430               	retlw	48	;'0'
  1831  0DD0  3431               	retlw	49	;'1'
  1832  0DD1  3432               	retlw	50	;'2'
  1833  0DD2  3433               	retlw	51	;'3'
  1834  0DD3  3434               	retlw	52	;'4'
  1835  0DD4  3435               	retlw	53	;'5'
  1836  0DD5  3436               	retlw	54	;'6'
  1837  0DD6  3437               	retlw	55	;'7'
  1838  0DD7  3438               	retlw	56	;'8'
  1839  0DD8  3439               	retlw	57	;'9'
  1840  0DD9  3441               	retlw	65	;'A'
  1841  0DDA  3442               	retlw	66	;'B'
  1842  0DDB  3443               	retlw	67	;'C'
  1843  0DDC  3444               	retlw	68	;'D'
  1844  0DDD  3445               	retlw	69	;'E'
  1845  0DDE  3446               	retlw	70	;'F'
  1846  0DDF  3400               	retlw	0
  1847  0DE0                     STR_65:	
  1848  0DE0  3430               	retlw	48	;'0'
  1849  0DE1  3431               	retlw	49	;'1'
  1850  0DE2  3432               	retlw	50	;'2'
  1851  0DE3  3433               	retlw	51	;'3'
  1852  0DE4  3434               	retlw	52	;'4'
  1853  0DE5  3435               	retlw	53	;'5'
  1854  0DE6  3436               	retlw	54	;'6'
  1855  0DE7  3437               	retlw	55	;'7'
  1856  0DE8  3438               	retlw	56	;'8'
  1857  0DE9  3439               	retlw	57	;'9'
  1858  0DEA  3461               	retlw	97	;'a'
  1859  0DEB  3462               	retlw	98	;'b'
  1860  0DEC  3463               	retlw	99	;'c'
  1861  0DED  3464               	retlw	100	;'d'
  1862  0DEE  3465               	retlw	101	;'e'
  1863  0DEF  3466               	retlw	102	;'f'
  1864  0DF0  3400               	retlw	0
  1865  0DF1                     STR_42:	
  1866  0DF1  346E               	retlw	110	;'n'
  1867  0DF2  3475               	retlw	117	;'u'
  1868  0DF3  346D               	retlw	109	;'m'
  1869  0DF4  345F               	retlw	95	;'_'
  1870  0DF5  3468               	retlw	104	;'h'
  1871  0DF6  346F               	retlw	111	;'o'
  1872  0DF7  346C               	retlw	108	;'l'
  1873  0DF8  3465               	retlw	101	;'e'
  1874  0DF9  3420               	retlw	32	;' '
  1875  0DFA  343D               	retlw	61	;'='
  1876  0DFB  3420               	retlw	32	;' '
  1877  0DFC  3428               	retlw	40	;'('
  1878  0DFD  3425               	retlw	37	;'%'
  1879  0DFE  3464               	retlw	100	;'d'
  1880  0DFF  3429               	retlw	41	;')'
  1881  0E00  340A               	retlw	10
  1882  0E01  3400               	retlw	0
  1883  0E02                     STR_38:	
  1884  0E02  3472               	retlw	114	;'r'
  1885  0E03  3469               	retlw	105	;'i'
  1886  0E04  3467               	retlw	103	;'g'
  1887  0E05  3468               	retlw	104	;'h'
  1888  0E06  3474               	retlw	116	;'t'
  1889  0E07  345F               	retlw	95	;'_'
  1890  0E08  346D               	retlw	109	;'m'
  1891  0E09  346F               	retlw	111	;'o'
  1892  0E0A  3473               	retlw	115	;'s'
  1893  0E0B  3474               	retlw	116	;'t'
  1894  0E0C  3420               	retlw	32	;' '
  1895  0E0D  343D               	retlw	61	;'='
  1896  0E0E  3420               	retlw	32	;' '
  1897  0E0F  3425               	retlw	37	;'%'
  1898  0E10  3464               	retlw	100	;'d'
  1899  0E11  340A               	retlw	10
  1900  0E12  3400               	retlw	0
  1901  0E13                     STR_46:	
  1902  0E13  3468               	retlw	104	;'h'
  1903  0E14  3465               	retlw	101	;'e'
  1904  0E15  3469               	retlw	105	;'i'
  1905  0E16  3467               	retlw	103	;'g'
  1906  0E17  3468               	retlw	104	;'h'
  1907  0E18  3474               	retlw	116	;'t'
  1908  0E19  3420               	retlw	32	;' '
  1909  0E1A  343C               	retlw	60	;'<'
  1910  0E1B  343D               	retlw	61	;'='
  1911  0E1C  3420               	retlw	32	;' '
  1912  0E1D  3428               	retlw	40	;'('
  1913  0E1E  3425               	retlw	37	;'%'
  1914  0E1F  3464               	retlw	100	;'d'
  1915  0E20  3429               	retlw	41	;')'
  1916  0E21  340A               	retlw	10
  1917  0E22  3400               	retlw	0
  1918  0E23                     STR_37:	
  1919  0E23  346C               	retlw	108	;'l'
  1920  0E24  3465               	retlw	101	;'e'
  1921  0E25  3466               	retlw	102	;'f'
  1922  0E26  3474               	retlw	116	;'t'
  1923  0E27  345F               	retlw	95	;'_'
  1924  0E28  346D               	retlw	109	;'m'
  1925  0E29  346F               	retlw	111	;'o'
  1926  0E2A  3473               	retlw	115	;'s'
  1927  0E2B  3474               	retlw	116	;'t'
  1928  0E2C  3420               	retlw	32	;' '
  1929  0E2D  343D               	retlw	61	;'='
  1930  0E2E  3420               	retlw	32	;' '
  1931  0E2F  3425               	retlw	37	;'%'
  1932  0E30  3464               	retlw	100	;'d'
  1933  0E31  340A               	retlw	10
  1934  0E32  3400               	retlw	0
  1935  0E33                     STR_63:	
  1936  0E33  3468               	retlw	104	;'h'
  1937  0E34  3469               	retlw	105	;'i'
  1938  0E35  3474               	retlw	116	;'t'
  1939  0E36  345F               	retlw	95	;'_'
  1940  0E37  3472               	retlw	114	;'r'
  1941  0E38  3465               	retlw	101	;'e'
  1942  0E39  3473               	retlw	115	;'s'
  1943  0E3A  3420               	retlw	32	;' '
  1944  0E3B  343D               	retlw	61	;'='
  1945  0E3C  3420               	retlw	32	;' '
  1946  0E3D  3425               	retlw	37	;'%'
  1947  0E3E  3464               	retlw	100	;'d'
  1948  0E3F  340A               	retlw	10
  1949  0E40  3400               	retlw	0
  1950  0E41                     STR_60:	
  1951  0E41  3447               	retlw	71	;'G'
  1952  0E42  3441               	retlw	65	;'A'
  1953  0E43  344D               	retlw	77	;'M'
  1954  0E44  3445               	retlw	69	;'E'
  1955  0E45  3420               	retlw	32	;' '
  1956  0E46  344F               	retlw	79	;'O'
  1957  0E47  3456               	retlw	86	;'V'
  1958  0E48  3445               	retlw	69	;'E'
  1959  0E49  3452               	retlw	82	;'R'
  1960  0E4A  3421               	retlw	33	;'!'
  1961  0E4B  3421               	retlw	33	;'!'
  1962  0E4C  3421               	retlw	33	;'!'
  1963  0E4D  3400               	retlw	0
  1964  0E4E                     STR_36:	
  1965  0E4E  3472               	retlw	114	;'r'
  1966  0E4F  3469               	retlw	105	;'i'
  1967  0E50  3473               	retlw	115	;'s'
  1968  0E51  346B               	retlw	107	;'k'
  1969  0E52  3420               	retlw	32	;' '
  1970  0E53  343D               	retlw	61	;'='
  1971  0E54  3420               	retlw	32	;' '
  1972  0E55  3425               	retlw	37	;'%'
  1973  0E56  3464               	retlw	100	;'d'
  1974  0E57  340A               	retlw	10
  1975  0E58  3400               	retlw	0
  1976  0E59                     STR_26:	
  1977  0E59  346E               	retlw	110	;'n'
  1978  0E5A  346F               	retlw	111	;'o'
  1979  0E5B  3474               	retlw	116	;'t'
  1980  0E5C  3420               	retlw	32	;' '
  1981  0E5D  3468               	retlw	104	;'h'
  1982  0E5E  3469               	retlw	105	;'i'
  1983  0E5F  3474               	retlw	116	;'t'
  1984  0E60  3400               	retlw	0
  1985  0E61                     STR_31:	
  1986  0E61  3476               	retlw	118	;'v'
  1987  0E62  3461               	retlw	97	;'a'
  1988  0E63  346C               	retlw	108	;'l'
  1989  0E64  3469               	retlw	105	;'i'
  1990  0E65  3464               	retlw	100	;'d'
  1991  0E66  3400               	retlw	0
  1992  0E67                     STR_1:	
  1993  0E67  340D               	retlw	13
  1994  0E68  340A               	retlw	10
  1995  0E69  3400               	retlw	0
  1996  0E6A                     STR_6:	
  1997  0E6A  342A               	retlw	42	;'*'
  1998  0E6B  3400               	retlw	0
  1999  0E6C                     STR_7:	
  2000  0E6C  345F               	retlw	95	;'_'
  2001  0E6D  3400               	retlw	0
  2002  0E69                     
  2003                           ; #config settings
  2004  0000                     
  2005                           	psect	nvBANK0
  2006  006B                     __pnvBANK0:	
  2007  006B                     _UQEnd:	
  2008  006B                     	ds	1
  2009  006C                     _UQFront:	
  2010  006C                     	ds	1
  2011  000C                     _PIR1bits	set	12
  2012  001A                     _RCREG	set	26
  2013  0018                     _RCSTAbits	set	24
  2014  0019                     _TXREG	set	25
  2015  005F                     _GIE	set	95
  2016  005E                     _PEIE	set	94
  2017  0029                     _RA1	set	41
  2018  002A                     _RA2	set	42
  2019  0099                     _SPBRG	set	153
  2020  0085                     _TRISAbits	set	133
  2021  0098                     _TXSTAbits	set	152
  2022  0465                     _RCIE	set	1125
  2023  0188                     _ANSELbits	set	392
  2024                           
  2025                           	psect	cinit
  2026  07C3                     start_initialization:	
  2027  07C3                     __initialization:	
  2028                           
  2029                           ; Clear objects allocated to BANK0
  2030  07C3  01ED               	clrf	__pbssBANK0& (0+127)
  2031  07C4  01EE               	clrf	(__pbssBANK0+1)& (0+127)
  2032                           
  2033                           ; Clear objects allocated to BANK1
  2034  07C5  1683               	bsf	3,5	;RP0=1, select bank1
  2035  07C6  1303               	bcf	3,6	;RP1=0, select bank1
  2036  07C7  01E9               	clrf	__pbssBANK1& (0+127)
  2037  07C8  01EA               	clrf	(__pbssBANK1+1)& (0+127)
  2038  07C9  01EB               	clrf	(__pbssBANK1+2)& (0+127)
  2039  07CA  01EC               	clrf	(__pbssBANK1+3)& (0+127)
  2040  07CB  01ED               	clrf	(__pbssBANK1+4)& (0+127)
  2041                           
  2042                           ; Clear objects allocated to BANK3
  2043  07CC  1783               	bsf	3,7	;select IRP bank2
  2044  07CD  3090               	movlw	low __pbssBANK3
  2045  07CE  0084               	movwf	4
  2046  07CF  30B9               	movlw	low (__pbssBANK3+41)
  2047  07D0  160A  158A  211F  120A  118A  	fcall	clear_ram0
  2048                           
  2049                           ; Clear objects allocated to BANK2
  2050  07D5  3010               	movlw	low __pbssBANK2
  2051  07D6  0084               	movwf	4
  2052  07D7  3070               	movlw	low (__pbssBANK2+96)
  2053  07D8  160A  158A  211F  120A  118A  	fcall	clear_ram0
  2054                           
  2055                           ; Initialize objects allocated to BANK3
  2056  07DD  30DC               	movlw	low (__pdataBANK3+35)
  2057  07DE  00FD               	movwf	btemp+-1
  2058  07DF  301A               	movlw	high __pidataBANK3
  2059  07E0  00FE               	movwf	btemp
  2060  07E1  3050               	movlw	low __pidataBANK3
  2061  07E2  00FF               	movwf	btemp+1
  2062  07E3  30B9               	movlw	low __pdataBANK3
  2063  07E4  0084               	movwf	4
  2064  07E5  160A  158A  2163  120A  118A  	fcall	init_ram0
  2065                           
  2066                           ; Initialize objects allocated to BANK1
  2067  07EA  160A  158A  2115  120A  118A  	fcall	__pidataBANK1	;fetch initializer
  2068  07EF  00EE               	movwf	__pdataBANK1& (0+127)
  2069  07F0  160A  158A  2116  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
  2070  07F5  00EF               	movwf	(__pdataBANK1+1)& (0+127)
  2071                           
  2072                           ; Initialize objects allocated to BANK0
  2073  07F6  1283               	bcf	3,5	;RP0=0, select bank0
  2074  07F7  1303               	bcf	3,6	;RP1=0, select bank0
  2075  07F8  120A  158A  266E   	fcall	__pidataBANK0	;fetch initializer
  2076  07FB  00EF               	movwf	__pdataBANK0& (0+127)
  2077  07FC                     end_of_initialization:	
  2078                           ;End of C runtime variable initialization code
  2079                           
  2080  07FC                     __end_of__initialization:	
  2081  07FC  0183               	clrf	3
  2082  07FD  120A  118A  2967   	ljmp	_main	;jump to C main() function
  2083                           
  2084                           	psect	bssBANK0
  2085  006D                     __pbssBANK0:	
  2086  006D                     _cur_y:	
  2087  006D                     	ds	1
  2088  006E                     _g_char_info_index:	
  2089  006E                     	ds	1
  2090                           
  2091                           	psect	dataBANK0
  2092  006F                     __pdataBANK0:	
  2093  006F                     _temp_pre_hole:	
  2094  006F                     	ds	1
  2095                           
  2096                           	psect	bssBANK1
  2097  00E9                     __pbssBANK1:	
  2098  00E9                     _temp_risk:	
  2099  00E9                     	ds	2
  2100  00EB                     _temp_count:	
  2101  00EB                     	ds	1
  2102  00EC                     _temp_high:	
  2103  00EC                     	ds	1
  2104  00ED                     _temp_hole:	
  2105  00ED                     	ds	1
  2106                           
  2107                           	psect	dataBANK1
  2108  00EE                     __pdataBANK1:	
  2109  00EE                     _cur_x:	
  2110  00EE                     	ds	1
  2111  00EF                     _temp_pre_high:	
  2112  00EF                     	ds	1
  2113                           
  2114                           	psect	bssBANK3
  2115  0190                     __pbssBANK3:	
  2116  0190                     USARTWriteInt@F1617:	
  2117  0190                     	ds	5
  2118  0195                     _g_cur_matrix44:	
  2119  0195                     	ds	2
  2120  0197                     _temp_pre_count:	
  2121  0197                     	ds	1
  2122  0198                     _temp_y:	
  2123  0198                     	ds	1
  2124  0199                     _g_debug:	
  2125  0199                     	ds	32
  2126                           
  2127                           	psect	dataBANK3
  2128  01B9                     __pdataBANK3:	
  2129  01B9                     _g_char_info:	
  2130  01B9                     	ds	27
  2131  01D4                     _randx:	
  2132  01D4                     	ds	4
  2133  01D8                     _temp_pre_risk:	
  2134  01D8                     	ds	2
  2135  01DA                     _tem_pre_sub_index:	
  2136  01DA                     	ds	1
  2137  01DB                     _temp_pre_x:	
  2138  01DB                     	ds	1
  2139                           
  2140                           	psect	bssBANK2
  2141  0110                     __pbssBANK2:	
  2142  0110                     _URBuff:	
  2143  0110                     	ds	32
  2144  0130                     _g_matrix88:	
  2145  0130                     	ds	64
  2146                           
  2147                           	psect	clrtext
  2148  191F                     clear_ram0:	
  2149                           ;	Called with FSR containing the base address, and
  2150                           ;	W with the last address+1
  2151                           
  2152  191F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2153  1920                     clrloop0:	
  2154  1920  0180               	clrf	0	;clear RAM location pointed to by FSR
  2155  1921  0A84               	incf	4,f	;increment pointer
  2156  1922  0604               	xorwf	4,w	;XOR with final address
  2157  1923  1903               	btfsc	3,2	;have we reached the end yet?
  2158  1924  3400               	retlw	0	;all done for this memory range, return
  2159  1925  0604               	xorwf	4,w	;XOR again to restore value
  2160  1926  2920               	goto	clrloop0	;do the next byte
  2161                           
  2162                           	psect	inittext
  2163  195F                     init_fetch0:	
  2164                           ;	Called with low address in FSR and high address in W
  2165                           
  2166  195F  087E               	movf	126,w
  2167  1960  008A               	movwf	10
  2168  1961  087F               	movf	127,w
  2169  1962  0082               	movwf	2
  2170  1963                     init_ram0:	
  2171                           ;Called with:
  2172                           ;	high address of idata address in btemp 
  2173                           ;	low address of idata address in btemp+1 
  2174                           ;	low address of data in FSR
  2175                           ;	high address + 1 of data in btemp-1
  2176                           
  2177  1963  215F  160A  158A   	fcall	init_fetch0
  2178  1966  0080               	movwf	0
  2179  1967  0A84               	incf	4,f
  2180  1968  0804               	movf	4,w
  2181  1969  067D               	xorwf	125,w
  2182  196A  1903               	btfsc	3,2
  2183  196B  3400               	retlw	0
  2184  196C  0AFF               	incf	127,f
  2185  196D  1903               	btfsc	3,2
  2186  196E  0AFE               	incf	126,f
  2187  196F  2963               	goto	init_ram0
  2188                           
  2189                           	psect	cstackBANK1
  2190  00A0                     __pcstackBANK1:	
  2191  00A0                     _find_best_solution$1195:	
  2192                           
  2193                           ; 2 bytes @ 0x0
  2194  00A0                     	ds	2
  2195  00A2                     find_best_solution@left_most_index:	
  2196                           
  2197                           ; 1 bytes @ 0x2
  2198  00A2                     	ds	1
  2199  00A3                     find_best_solution@right_most_index:	
  2200                           
  2201                           ; 1 bytes @ 0x3
  2202  00A3                     	ds	1
  2203  00A4                     find_best_solution@res:	
  2204                           
  2205                           ; 1 bytes @ 0x4
  2206  00A4                     	ds	1
  2207  00A5                     find_best_solution@temp_matrix88:	
  2208                           
  2209                           ; 64 bytes @ 0x5
  2210  00A5                     	ds	64
  2211  00E5                     find_best_solution@temp_cur_matrix44:	
  2212                           
  2213                           ; 2 bytes @ 0x45
  2214  00E5                     	ds	2
  2215  00E7                     find_best_solution@tem_sub_index:	
  2216                           
  2217                           ; 1 bytes @ 0x47
  2218  00E7                     	ds	1
  2219  00E8                     find_best_solution@temp_x:	
  2220                           
  2221                           ; 1 bytes @ 0x48
  2222  00E8                     	ds	1
  2223                           
  2224                           	psect	cstackCOMMON
  2225  0070                     __pcstackCOMMON:	
  2226  0070                     ?_isdigit:	
  2227  0070                     ?_srand:	
  2228                           ; 1 bit 
  2229                           
  2230  0070                     ??_isdigit:	
  2231                           ; 1 bytes @ 0x0
  2232                           
  2233  0070                     ?_USARTInit:	
  2234                           ; 1 bytes @ 0x0
  2235                           
  2236  0070                     ?_USARTWriteChar:	
  2237                           ; 1 bytes @ 0x0
  2238                           
  2239  0070                     ??_USARTWriteChar:	
  2240                           ; 1 bytes @ 0x0
  2241                           
  2242  0070                     ?_SPI1_write:	
  2243                           ; 1 bytes @ 0x0
  2244                           
  2245  0070                     ??_SPI1_write:	
  2246                           ; 1 bytes @ 0x0
  2247                           
  2248  0070                     ?_Write_Byte:	
  2249                           ; 1 bytes @ 0x0
  2250                           
  2251  0070                     ?_printf_MATRIX7219:	
  2252                           ; 1 bytes @ 0x0
  2253                           
  2254  0070                     ?_MATRIX88_to_MATRIX7219:	
  2255                           ; 1 bytes @ 0x0
  2256                           
  2257  0070                     ?_printf_MATRIX88:	
  2258                           ; 1 bytes @ 0x0
  2259                           
  2260  0070                     ?_printf_Screen:	
  2261                           ; 1 bytes @ 0x0
  2262                           
  2263  0070                     ?_printf_console_Screen:	
  2264                           ; 1 bytes @ 0x0
  2265                           
  2266  0070                     ?_Clear_Matrix:	
  2267                           ; 1 bytes @ 0x0
  2268                           
  2269  0070                     ?_is_row_full:	
  2270                           ; 1 bytes @ 0x0
  2271                           
  2272  0070                     ?_is_row_empty:	
  2273                           ; 1 bytes @ 0x0
  2274                           
  2275  0070                     ?_clear:	
  2276                           ; 1 bytes @ 0x0
  2277                           
  2278  0070                     ?_merge:	
  2279                           ; 1 bytes @ 0x0
  2280                           
  2281  0070                     ?_char_info_index_rand:	
  2282                           ; 1 bytes @ 0x0
  2283                           
  2284  0070                     ?_get_high:	
  2285                           ; 1 bytes @ 0x0
  2286                           
  2287  0070                     ?_get_holes_after_merge:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0070                     ?_find_best_solution:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0070                     ?___bmul:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0070                     ?_memset:	
  2297                           ; 1 bytes @ 0x0
  2298                           
  2299  0070                     ?_memcpy:	
  2300                           ; 2 bytes @ 0x0
  2301                           
  2302  0070                     ?___wmul:	
  2303                           ; 2 bytes @ 0x0
  2304                           
  2305  0070                     ?___lwdiv:	
  2306                           ; 2 bytes @ 0x0
  2307                           
  2308  0070                     ?___lmul:	
  2309                           ; 2 bytes @ 0x0
  2310                           
  2311  0070                     USARTWriteChar@ch:	
  2312                           ; 4 bytes @ 0x0
  2313                           
  2314  0070                     SPI1_write@data:	
  2315                           ; 1 bytes @ 0x0
  2316                           
  2317  0070                     Write_Byte@myValue:	
  2318                           ; 1 bytes @ 0x0
  2319                           
  2320  0070                     MATRIX88_to_MATRIX7219@matrix7219:	
  2321                           ; 1 bytes @ 0x0
  2322                           
  2323  0070                     is_row_empty@row:	
  2324                           ; 1 bytes @ 0x0
  2325                           
  2326  0070                     clear@y:	
  2327                           ; 1 bytes @ 0x0
  2328                           
  2329  0070                     merge@y:	
  2330                           ; 1 bytes @ 0x0
  2331                           
  2332  0070                     ___bmul@multiplicand:	
  2333                           ; 1 bytes @ 0x0
  2334                           
  2335  0070                     _isdigit$866:	
  2336                           ; 1 bytes @ 0x0
  2337                           
  2338  0070                     USARTInit@baud_rate:	
  2339                           ; 1 bytes @ 0x0
  2340                           
  2341  0070                     is_row_full@matrix:	
  2342                           ; 2 bytes @ 0x0
  2343                           
  2344  0070                     ___wmul@multiplier:	
  2345                           ; 2 bytes @ 0x0
  2346                           
  2347  0070                     ___lwdiv@divisor:	
  2348                           ; 2 bytes @ 0x0
  2349                           
  2350  0070                     memcpy@d1:	
  2351                           ; 2 bytes @ 0x0
  2352                           
  2353  0070                     memset@p1:	
  2354                           ; 2 bytes @ 0x0
  2355                           
  2356  0070                     srand@x:	
  2357                           ; 2 bytes @ 0x0
  2358                           
  2359  0070                     ___lmul@multiplier:	
  2360                           ; 2 bytes @ 0x0
  2361                           
  2362                           
  2363                           ; 4 bytes @ 0x0
  2364  0070                     	ds	1
  2365  0071                     ?_USARTWriteString:	
  2366  0071                     ??_Write_Byte:	
  2367                           ; 1 bytes @ 0x1
  2368                           
  2369  0071                     ??_MATRIX88_to_MATRIX7219:	
  2370                           ; 1 bytes @ 0x1
  2371                           
  2372  0071                     ??_is_row_empty:	
  2373                           ; 1 bytes @ 0x1
  2374                           
  2375  0071                     ??___bmul:	
  2376                           ; 1 bytes @ 0x1
  2377                           
  2378  0071                     Write_Byte@myColumn:	
  2379                           ; 1 bytes @ 0x1
  2380                           
  2381  0071                     isdigit@c:	
  2382                           ; 1 bytes @ 0x1
  2383                           
  2384  0071                     USARTWriteString@str:	
  2385                           ; 1 bytes @ 0x1
  2386                           
  2387  0071                     clear@matrix44:	
  2388                           ; 2 bytes @ 0x1
  2389                           
  2390  0071                     merge@matrix44:	
  2391                           ; 2 bytes @ 0x1
  2392                           
  2393                           
  2394                           ; 2 bytes @ 0x1
  2395  0071                     	ds	1
  2396  0072                     ??_srand:	
  2397  0072                     ??_USARTInit:	
  2398                           ; 1 bytes @ 0x2
  2399                           
  2400  0072                     ??_printf_MATRIX7219:	
  2401                           ; 1 bytes @ 0x2
  2402                           
  2403  0072                     is_row_full@row:	
  2404                           ; 1 bytes @ 0x2
  2405                           
  2406  0072                     ___bmul@product:	
  2407                           ; 1 bytes @ 0x2
  2408                           
  2409  0072                     ___wmul@multiplicand:	
  2410                           ; 1 bytes @ 0x2
  2411                           
  2412  0072                     ___lwdiv@dividend:	
  2413                           ; 2 bytes @ 0x2
  2414                           
  2415  0072                     memcpy@s1:	
  2416                           ; 2 bytes @ 0x2
  2417                           
  2418  0072                     memset@c:	
  2419                           ; 2 bytes @ 0x2
  2420                           
  2421                           
  2422                           ; 2 bytes @ 0x2
  2423  0072                     	ds	1
  2424  0073                     ??_USARTWriteString:	
  2425  0073                     ?_debug_str:	
  2426                           ; 1 bytes @ 0x3
  2427                           
  2428  0073                     ?_debug_line:	
  2429                           ; 1 bytes @ 0x3
  2430                           
  2431  0073                     ??_is_row_full:	
  2432                           ; 1 bytes @ 0x3
  2433                           
  2434  0073                     clear@matrix88:	
  2435                           ; 1 bytes @ 0x3
  2436                           
  2437  0073                     merge@matrix88:	
  2438                           ; 1 bytes @ 0x3
  2439                           
  2440  0073                     ___bmul@multiplier:	
  2441                           ; 1 bytes @ 0x3
  2442                           
  2443  0073                     debug_str@str:	
  2444                           ; 1 bytes @ 0x3
  2445                           
  2446  0073                     debug_line@str:	
  2447                           ; 2 bytes @ 0x3
  2448                           
  2449                           
  2450                           ; 2 bytes @ 0x3
  2451  0073                     	ds	1
  2452  0074                     ??_clear:	
  2453  0074                     ??_merge:	
  2454                           ; 1 bytes @ 0x4
  2455                           
  2456  0074                     ??___wmul:	
  2457                           ; 1 bytes @ 0x4
  2458                           
  2459  0074                     ??___lwdiv:	
  2460                           ; 1 bytes @ 0x4
  2461                           
  2462  0074                     printf_MATRIX7219@matrix:	
  2463                           ; 1 bytes @ 0x4
  2464                           
  2465  0074                     MATRIX88_to_MATRIX7219@matrix88:	
  2466                           ; 1 bytes @ 0x4
  2467                           
  2468  0074                     is_row_empty@matrix:	
  2469                           ; 1 bytes @ 0x4
  2470                           
  2471  0074                     ___wmul@product:	
  2472                           ; 1 bytes @ 0x4
  2473                           
  2474  0074                     memcpy@n:	
  2475                           ; 2 bytes @ 0x4
  2476                           
  2477  0074                     memset@n:	
  2478                           ; 2 bytes @ 0x4
  2479                           
  2480  0074                     ___lmul@multiplicand:	
  2481                           ; 2 bytes @ 0x4
  2482                           
  2483                           
  2484                           ; 4 bytes @ 0x4
  2485  0074                     	ds	1
  2486  0075                     ??_debug_str:	
  2487  0075                     ??_debug_line:	
  2488                           ; 1 bytes @ 0x5
  2489                           
  2490  0075                     debug_str@enable:	
  2491                           ; 1 bytes @ 0x5
  2492                           
  2493  0075                     debug_line@enable:	
  2494                           ; 1 bytes @ 0x5
  2495                           
  2496  0075                     printf_MATRIX7219@col:	
  2497                           ; 1 bytes @ 0x5
  2498                           
  2499  0075                     MATRIX88_to_MATRIX7219@mask:	
  2500                           ; 1 bytes @ 0x5
  2501                           
  2502  0075                     is_row_empty@col:	
  2503                           ; 1 bytes @ 0x5
  2504                           
  2505  0075                     ___lwdiv@quotient:	
  2506                           ; 1 bytes @ 0x5
  2507                           
  2508                           
  2509                           ; 2 bytes @ 0x5
  2510  0075                     	ds	1
  2511  0076                     ??_memset:	
  2512  0076                     ??_memcpy:	
  2513                           ; 1 bytes @ 0x6
  2514                           
  2515  0076                     ?_printf_console_MATRIX44:	
  2516                           ; 1 bytes @ 0x6
  2517                           
  2518  0076                     ?_printf_console_MATRIX88:	
  2519                           ; 1 bytes @ 0x6
  2520                           
  2521  0076                     ?_is_left_boundary:	
  2522                           ; 1 bytes @ 0x6
  2523                           
  2524  0076                     ?_is_right_boundary:	
  2525                           ; 1 bytes @ 0x6
  2526                           
  2527  0076                     printf_console_MATRIX44@x:	
  2528                           ; 1 bytes @ 0x6
  2529                           
  2530  0076                     MATRIX88_to_MATRIX7219@row:	
  2531                           ; 1 bytes @ 0x6
  2532                           
  2533  0076                     printf_console_MATRIX88@matrix:	
  2534                           ; 1 bytes @ 0x6
  2535                           
  2536  0076                     is_left_boundary@matrix44:	
  2537                           ; 2 bytes @ 0x6
  2538                           
  2539  0076                     is_right_boundary@matrix44:	
  2540                           ; 2 bytes @ 0x6
  2541                           
  2542  0076                     memset@p:	
  2543                           ; 2 bytes @ 0x6
  2544                           
  2545                           
  2546                           ; 2 bytes @ 0x6
  2547  0076                     	ds	1
  2548  0077                     printf_console_MATRIX44@y:	
  2549  0077                     MATRIX88_to_MATRIX7219@col:	
  2550                           ; 1 bytes @ 0x7
  2551                           
  2552  0077                     ___lwdiv@counter:	
  2553                           ; 1 bytes @ 0x7
  2554                           
  2555  0077                     memcpy@d:	
  2556                           ; 1 bytes @ 0x7
  2557                           
  2558                           
  2559                           ; 2 bytes @ 0x7
  2560  0077                     	ds	1
  2561  0078                     ??_printf_console_MATRIX88:	
  2562  0078                     ??_printf_MATRIX88:	
  2563                           ; 1 bytes @ 0x8
  2564                           
  2565  0078                     ??___lmul:	
  2566                           ; 1 bytes @ 0x8
  2567                           
  2568  0078                     ?___lwmod:	
  2569                           ; 1 bytes @ 0x8
  2570                           
  2571  0078                     is_row_full@col:	
  2572                           ; 2 bytes @ 0x8
  2573                           
  2574  0078                     is_left_boundary@matrix88:	
  2575                           ; 1 bytes @ 0x8
  2576                           
  2577  0078                     is_right_boundary@matrix88:	
  2578                           ; 1 bytes @ 0x8
  2579                           
  2580  0078                     clear@x:	
  2581                           ; 1 bytes @ 0x8
  2582                           
  2583  0078                     merge@x:	
  2584                           ; 1 bytes @ 0x8
  2585                           
  2586  0078                     printf_console_MATRIX44@matrix:	
  2587                           ; 1 bytes @ 0x8
  2588                           
  2589  0078                     ___lwmod@divisor:	
  2590                           ; 2 bytes @ 0x8
  2591                           
  2592                           
  2593                           ; 2 bytes @ 0x8
  2594  0078                     	ds	1
  2595  0079                     ??_printf_Screen:	
  2596  0079                     ??_Clear_Matrix:	
  2597                           ; 1 bytes @ 0x9
  2598                           
  2599  0079                     ??_is_left_boundary:	
  2600                           ; 1 bytes @ 0x9
  2601                           
  2602  0079                     ??_is_right_boundary:	
  2603                           ; 1 bytes @ 0x9
  2604                           
  2605  0079                     clear@row:	
  2606                           ; 1 bytes @ 0x9
  2607                           
  2608  0079                     merge@row:	
  2609                           ; 1 bytes @ 0x9
  2610                           
  2611  0079                     memcpy@s:	
  2612                           ; 1 bytes @ 0x9
  2613                           
  2614  0079                     ___lmul@product:	
  2615                           ; 2 bytes @ 0x9
  2616                           
  2617                           
  2618                           ; 4 bytes @ 0x9
  2619  0079                     	ds	1
  2620  007A                     printf_console_MATRIX44@enable:	
  2621  007A                     clear@col:	
  2622                           ; 1 bytes @ 0xA
  2623                           
  2624  007A                     merge@col:	
  2625                           ; 1 bytes @ 0xA
  2626                           
  2627  007A                     ___lwmod@dividend:	
  2628                           ; 1 bytes @ 0xA
  2629                           
  2630                           
  2631                           ; 2 bytes @ 0xA
  2632  007A                     	ds	1
  2633  007B                     ?_delete_row:	
  2634  007B                     printf_console_MATRIX44@row:	
  2635                           ; 1 bytes @ 0xB
  2636                           
  2637  007B                     delete_row@matrix:	
  2638                           ; 1 bytes @ 0xB
  2639                           
  2640                           
  2641                           ; 2 bytes @ 0xB
  2642  007B                     	ds	1
  2643  007C                     ??___lwmod:	
  2644  007C                     printf_console_MATRIX44@col:	
  2645                           ; 1 bytes @ 0xC
  2646                           
  2647                           
  2648                           ; 1 bytes @ 0xC
  2649  007C                     	ds	1
  2650  007D                     ??_printf_console_Screen:	
  2651  007D                     ??___awmod:	
  2652                           ; 1 bytes @ 0xD
  2653                           
  2654  007D                     printf_console_Screen@enable:	
  2655                           ; 1 bytes @ 0xD
  2656                           
  2657  007D                     delete_row@row:	
  2658                           ; 1 bytes @ 0xD
  2659                           
  2660  007D                     ___lwmod@counter:	
  2661                           ; 1 bytes @ 0xD
  2662                           
  2663                           
  2664                           ; 1 bytes @ 0xD
  2665  007D                     	ds	1
  2666  007E                     ??_debug_int1:	
  2667  007E                     ??_debug_int2:	
  2668                           ; 1 bytes @ 0xE
  2669                           
  2670  007E                     ??_debug_int3:	
  2671                           ; 1 bytes @ 0xE
  2672                           
  2673  007E                     ??_char_info_index_rand:	
  2674                           ; 1 bytes @ 0xE
  2675                           
  2676                           
  2677                           	psect	cstackBANK0
  2678  0020                     __pcstackBANK0:	
  2679                           ; 1 bytes @ 0xE
  2680                           
  2681  0020                     ??_printf_console_MATRIX44:	
  2682  0020                     ??_delete_row:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685  0020                     ?_merge1:	
  2686                           ; 1 bytes @ 0x0
  2687                           
  2688  0020                     ?_sprintf:	
  2689                           ; 1 bytes @ 0x0
  2690                           
  2691  0020                     ?_rand:	
  2692                           ; 2 bytes @ 0x0
  2693                           
  2694  0020                     printf_console_MATRIX88@enable:	
  2695                           ; 2 bytes @ 0x0
  2696                           
  2697  0020                     printf_MATRIX88@matrix88:	
  2698                           ; 1 bytes @ 0x0
  2699                           
  2700  0020                     is_left_boundary@x:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703  0020                     is_right_boundary@x:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0020                     merge1@y:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709  0020                     sprintf@f:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712                           
  2713                           ; 2 bytes @ 0x0
  2714  0020                     	ds	1
  2715  0021                     printf_console_MATRIX88@row:	
  2716  0021                     is_left_boundary@row:	
  2717                           ; 1 bytes @ 0x1
  2718                           
  2719  0021                     is_right_boundary@row:	
  2720                           ; 1 bytes @ 0x1
  2721                           
  2722  0021                     merge1@matrix44:	
  2723                           ; 1 bytes @ 0x1
  2724                           
  2725  0021                     printf_MATRIX88@matrix7219:	
  2726                           ; 2 bytes @ 0x1
  2727                           
  2728                           
  2729                           ; 8 bytes @ 0x1
  2730  0021                     	ds	1
  2731  0022                     ??_rand:	
  2732  0022                     printf_console_MATRIX88@col:	
  2733                           ; 1 bytes @ 0x2
  2734                           
  2735  0022                     is_left_boundary@col:	
  2736                           ; 1 bytes @ 0x2
  2737                           
  2738  0022                     is_right_boundary@col:	
  2739                           ; 1 bytes @ 0x2
  2740                           
  2741                           
  2742                           ; 1 bytes @ 0x2
  2743  0022                     	ds	1
  2744  0023                     merge1@matrix88_in:	
  2745                           
  2746                           ; 1 bytes @ 0x3
  2747  0023                     	ds	1
  2748  0024                     merge1@matrix88_out:	
  2749  0024                     delete_row@len:	
  2750                           ; 1 bytes @ 0x4
  2751                           
  2752                           
  2753                           ; 2 bytes @ 0x4
  2754  0024                     	ds	1
  2755  0025                     ??_merge1:	
  2756                           
  2757                           ; 1 bytes @ 0x5
  2758  0025                     	ds	1
  2759  0026                     delete_row@i:	
  2760                           
  2761                           ; 1 bytes @ 0x6
  2762  0026                     	ds	1
  2763  0027                     ?___awmod:	
  2764  0027                     ___awmod@divisor:	
  2765                           ; 2 bytes @ 0x7
  2766                           
  2767                           
  2768                           ; 2 bytes @ 0x7
  2769  0027                     	ds	1
  2770  0028                     ??_sprintf:	
  2771                           
  2772                           ; 1 bytes @ 0x8
  2773  0028                     	ds	1
  2774  0029                     ?_printf_console_cur_MATRIX44:	
  2775  0029                     printf_console_cur_MATRIX44@x:	
  2776                           ; 1 bytes @ 0x9
  2777                           
  2778  0029                     merge1@x:	
  2779                           ; 1 bytes @ 0x9
  2780                           
  2781  0029                     ___awmod@dividend:	
  2782                           ; 1 bytes @ 0x9
  2783                           
  2784                           
  2785                           ; 2 bytes @ 0x9
  2786  0029                     	ds	1
  2787  002A                     printf_console_cur_MATRIX44@y:	
  2788  002A                     merge1@len:	
  2789                           ; 1 bytes @ 0xA
  2790                           
  2791                           
  2792                           ; 2 bytes @ 0xA
  2793  002A                     	ds	1
  2794  002B                     ??_printf_console_cur_MATRIX44:	
  2795  002B                     ___awmod@counter:	
  2796                           ; 1 bytes @ 0xB
  2797                           
  2798  002B                     _sprintf$673:	
  2799                           ; 1 bytes @ 0xB
  2800                           
  2801                           
  2802                           ; 2 bytes @ 0xB
  2803  002B                     	ds	1
  2804  002C                     merge1@row:	
  2805  002C                     ___awmod@sign:	
  2806                           ; 1 bytes @ 0xC
  2807                           
  2808                           
  2809                           ; 1 bytes @ 0xC
  2810  002C                     	ds	1
  2811  002D                     merge1@col:	
  2812  002D                     _sprintf$674:	
  2813                           ; 1 bytes @ 0xD
  2814                           
  2815                           
  2816                           ; 2 bytes @ 0xD
  2817  002D                     	ds	2
  2818  002F                     _sprintf$680:	
  2819                           
  2820                           ; 2 bytes @ 0xF
  2821  002F                     	ds	2
  2822  0031                     sprintf@idx:	
  2823                           
  2824                           ; 1 bytes @ 0x11
  2825  0031                     	ds	1
  2826  0032                     sprintf@cp:	
  2827                           
  2828                           ; 1 bytes @ 0x12
  2829  0032                     	ds	1
  2830  0033                     sprintf@len:	
  2831                           
  2832                           ; 2 bytes @ 0x13
  2833  0033                     	ds	1
  2834  0034                     printf_console_cur_MATRIX44@enable:	
  2835                           
  2836                           ; 1 bytes @ 0x14
  2837  0034                     	ds	1
  2838  0035                     sprintf@ap:	
  2839  0035                     printf_console_cur_MATRIX44@matrix:	
  2840                           ; 1 bytes @ 0x15
  2841                           
  2842                           
  2843                           ; 2 bytes @ 0x15
  2844  0035                     	ds	1
  2845  0036                     sprintf@val:	
  2846                           
  2847                           ; 2 bytes @ 0x16
  2848  0036                     	ds	2
  2849  0038                     sprintf@prec:	
  2850                           
  2851                           ; 1 bytes @ 0x18
  2852  0038                     	ds	1
  2853  0039                     sprintf@width:	
  2854                           
  2855                           ; 2 bytes @ 0x19
  2856  0039                     	ds	2
  2857  003B                     sprintf@c:	
  2858                           
  2859                           ; 1 bytes @ 0x1B
  2860  003B                     	ds	1
  2861  003C                     sprintf@sp:	
  2862                           
  2863                           ; 1 bytes @ 0x1C
  2864  003C                     	ds	1
  2865  003D                     sprintf@flag:	
  2866                           
  2867                           ; 2 bytes @ 0x1D
  2868  003D                     	ds	2
  2869  003F                     ?_debug_int1:	
  2870  003F                     ?_debug_int2:	
  2871                           ; 1 bytes @ 0x1F
  2872                           
  2873  003F                     ?_debug_int3:	
  2874                           ; 1 bytes @ 0x1F
  2875                           
  2876  003F                     debug_int1@f:	
  2877                           ; 1 bytes @ 0x1F
  2878                           
  2879  003F                     debug_int2@f:	
  2880                           ; 2 bytes @ 0x1F
  2881                           
  2882  003F                     debug_int3@f:	
  2883                           ; 2 bytes @ 0x1F
  2884                           
  2885                           
  2886                           ; 2 bytes @ 0x1F
  2887  003F                     	ds	2
  2888  0041                     debug_int1@i:	
  2889  0041                     debug_int2@i1:	
  2890                           ; 2 bytes @ 0x21
  2891                           
  2892  0041                     debug_int3@i1:	
  2893                           ; 2 bytes @ 0x21
  2894                           
  2895                           
  2896                           ; 2 bytes @ 0x21
  2897  0041                     	ds	2
  2898  0043                     debug_int1@enable:	
  2899  0043                     debug_int2@i2:	
  2900                           ; 1 bytes @ 0x23
  2901                           
  2902  0043                     debug_int3@i2:	
  2903                           ; 2 bytes @ 0x23
  2904                           
  2905                           
  2906                           ; 2 bytes @ 0x23
  2907  0043                     	ds	1
  2908  0044                     ?_delete_matrix:	
  2909  0044                     ?_left_most:	
  2910                           ; 1 bytes @ 0x24
  2911                           
  2912  0044                     ?_right_most:	
  2913                           ; 1 bytes @ 0x24
  2914                           
  2915  0044                     ??_get_high:	
  2916                           ; 1 bytes @ 0x24
  2917                           
  2918  0044                     ?_evaluate:	
  2919                           ; 1 bytes @ 0x24
  2920                           
  2921  0044                     delete_matrix@matrix:	
  2922                           ; 2 bytes @ 0x24
  2923                           
  2924  0044                     left_most@matrix44:	
  2925                           ; 2 bytes @ 0x24
  2926                           
  2927  0044                     right_most@matrix44:	
  2928                           ; 2 bytes @ 0x24
  2929                           
  2930                           
  2931                           ; 2 bytes @ 0x24
  2932  0044                     	ds	1
  2933  0045                     debug_int2@enable:	
  2934  0045                     debug_int3@i3:	
  2935                           ; 1 bytes @ 0x25
  2936                           
  2937                           
  2938                           ; 2 bytes @ 0x25
  2939  0045                     	ds	1
  2940  0046                     ??_delete_matrix:	
  2941  0046                     ?_hit_land:	
  2942                           ; 1 bytes @ 0x26
  2943                           
  2944  0046                     ?_is_valid:	
  2945                           ; 1 bytes @ 0x26
  2946                           
  2947  0046                     ?_fall_off:	
  2948                           ; 1 bytes @ 0x26
  2949                           
  2950  0046                     ??_evaluate:	
  2951                           ; 1 bytes @ 0x26
  2952                           
  2953  0046                     hit_land@y:	
  2954                           ; 1 bytes @ 0x26
  2955                           
  2956  0046                     is_valid@y:	
  2957                           ; 1 bytes @ 0x26
  2958                           
  2959  0046                     fall_off@y:	
  2960                           ; 1 bytes @ 0x26
  2961                           
  2962  0046                     left_most@matrix88:	
  2963                           ; 1 bytes @ 0x26
  2964                           
  2965  0046                     right_most@matrix88:	
  2966                           ; 1 bytes @ 0x26
  2967                           
  2968  0046                     get_high@matrix:	
  2969                           ; 1 bytes @ 0x26
  2970                           
  2971                           
  2972                           ; 1 bytes @ 0x26
  2973  0046                     	ds	1
  2974  0047                     ??_left_most:	
  2975  0047                     ??_right_most:	
  2976                           ; 1 bytes @ 0x27
  2977                           
  2978  0047                     debug_int3@enable:	
  2979                           ; 1 bytes @ 0x27
  2980                           
  2981  0047                     get_high@row:	
  2982                           ; 1 bytes @ 0x27
  2983                           
  2984  0047                     hit_land@matrix44:	
  2985                           ; 1 bytes @ 0x27
  2986                           
  2987  0047                     is_valid@matrix44:	
  2988                           ; 2 bytes @ 0x27
  2989                           
  2990  0047                     fall_off@matrix44:	
  2991                           ; 2 bytes @ 0x27
  2992                           
  2993                           
  2994                           ; 2 bytes @ 0x27
  2995  0047                     	ds	1
  2996  0048                     ?_get_high_after_merge:	
  2997  0048                     ??_get_holes_after_merge:	
  2998                           ; 1 bytes @ 0x28
  2999                           
  3000  0048                     delete_matrix@count:	
  3001                           ; 1 bytes @ 0x28
  3002                           
  3003  0048                     left_most@x:	
  3004                           ; 1 bytes @ 0x28
  3005                           
  3006  0048                     get_high_after_merge@matrix:	
  3007                           ; 1 bytes @ 0x28
  3008                           
  3009                           
  3010                           ; 2 bytes @ 0x28
  3011  0048                     	ds	1
  3012  0049                     delete_matrix@row:	
  3013  0049                     hit_land@matrix88:	
  3014                           ; 1 bytes @ 0x29
  3015                           
  3016  0049                     is_valid@matrix88:	
  3017                           ; 1 bytes @ 0x29
  3018                           
  3019  0049                     fall_off@matrix88:	
  3020                           ; 1 bytes @ 0x29
  3021                           
  3022  0049                     right_most@x:	
  3023                           ; 1 bytes @ 0x29
  3024                           
  3025                           
  3026                           ; 1 bytes @ 0x29
  3027  0049                     	ds	1
  3028  004A                     ??_hit_land:	
  3029  004A                     ??_is_valid:	
  3030                           ; 1 bytes @ 0x2A
  3031                           
  3032  004A                     ??_fall_off:	
  3033                           ; 1 bytes @ 0x2A
  3034                           
  3035  004A                     ??_get_high_after_merge:	
  3036                           ; 1 bytes @ 0x2A
  3037                           
  3038  004A                     evaluate@risk:	
  3039                           ; 1 bytes @ 0x2A
  3040                           
  3041                           
  3042                           ; 2 bytes @ 0x2A
  3043  004A                     	ds	2
  3044  004C                     evaluate@full:	
  3045                           
  3046                           ; 1 bytes @ 0x2C
  3047  004C                     	ds	1
  3048  004D                     evaluate@matrix:	
  3049                           
  3050                           ; 1 bytes @ 0x2D
  3051  004D                     	ds	1
  3052  004E                     hit_land@x:	
  3053  004E                     is_valid@x:	
  3054                           ; 1 bytes @ 0x2E
  3055                           
  3056  004E                     fall_off@x:	
  3057                           ; 1 bytes @ 0x2E
  3058                           
  3059  004E                     evaluate@col:	
  3060                           ; 1 bytes @ 0x2E
  3061                           
  3062  004E                     get_high_after_merge@y:	
  3063                           ; 1 bytes @ 0x2E
  3064                           
  3065  004E                     get_holes_after_merge@num_hole:	
  3066                           ; 1 bytes @ 0x2E
  3067                           
  3068                           
  3069                           ; 1 bytes @ 0x2E
  3070  004E                     	ds	1
  3071  004F                     hit_land@col:	
  3072  004F                     is_valid@row:	
  3073                           ; 1 bytes @ 0x2F
  3074                           
  3075  004F                     fall_off@col:	
  3076                           ; 1 bytes @ 0x2F
  3077                           
  3078  004F                     evaluate@row:	
  3079                           ; 1 bytes @ 0x2F
  3080                           
  3081  004F                     get_high_after_merge@col:	
  3082                           ; 1 bytes @ 0x2F
  3083                           
  3084  004F                     get_holes_after_merge@stop:	
  3085                           ; 1 bytes @ 0x2F
  3086                           
  3087                           
  3088                           ; 1 bytes @ 0x2F
  3089  004F                     	ds	1
  3090  0050                     hit_land@row:	
  3091  0050                     is_valid@col:	
  3092                           ; 1 bytes @ 0x30
  3093                           
  3094  0050                     fall_off@row:	
  3095                           ; 1 bytes @ 0x30
  3096                           
  3097  0050                     get_high_after_merge@row:	
  3098                           ; 1 bytes @ 0x30
  3099                           
  3100  0050                     get_holes_after_merge@matrix:	
  3101                           ; 1 bytes @ 0x30
  3102                           
  3103                           
  3104                           ; 1 bytes @ 0x30
  3105  0050                     	ds	1
  3106  0051                     get_holes_after_merge@start:	
  3107                           
  3108                           ; 1 bytes @ 0x31
  3109  0051                     	ds	1
  3110  0052                     get_holes_after_merge@col:	
  3111                           
  3112                           ; 1 bytes @ 0x32
  3113  0052                     	ds	1
  3114  0053                     get_holes_after_merge@row:	
  3115                           
  3116                           ; 1 bytes @ 0x33
  3117  0053                     	ds	1
  3118  0054                     ??_find_best_solution:	
  3119                           
  3120                           ; 1 bytes @ 0x34
  3121  0054                     	ds	7
  3122  005B                     ?_main:	
  3123  005B                     main@argc:	
  3124                           ; 2 bytes @ 0x3B
  3125                           
  3126                           
  3127                           ; 2 bytes @ 0x3B
  3128  005B                     	ds	2
  3129  005D                     main@argv:	
  3130                           
  3131                           ; 2 bytes @ 0x3D
  3132  005D                     	ds	2
  3133  005F                     ??_main:	
  3134                           
  3135                           ; 1 bytes @ 0x3F
  3136  005F                     	ds	9
  3137  0068                     main@Seed:	
  3138                           
  3139                           ; 2 bytes @ 0x48
  3140  0068                     	ds	2
  3141  006A                     main@hit_res:	
  3142                           
  3143                           ; 1 bytes @ 0x4A
  3144  006A                     	ds	1
  3145                           
  3146                           	psect	maintext
  3147  0167                     __pmaintext:	
  3148 ;;
  3149 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
  3150 ;;
  3151 ;; *************** function _main *****************
  3152 ;; Defined at:
  3153 ;;		line 1232 in file "teris_16f886.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  argc            2   59[BANK0 ] int 
  3156 ;;  argv            2   61[BANK0 ] PTR PTR unsigned char 
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  Seed            2   72[BANK0 ] unsigned int 
  3159 ;;  hit_res         1   74[BANK0 ] unsigned char 
  3160 ;; Return value:  Size  Location     Type
  3161 ;;                  2   59[BANK0 ] int 
  3162 ;; Registers used:
  3163 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3164 ;; Tracked objects:
  3165 ;;		On entry : B00/0
  3166 ;;		On exit  : 0/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3169 ;;      Params:         0       4       0       0       0
  3170 ;;      Locals:         0       3       0       0       0
  3171 ;;      Temps:          0       9       0       0       0
  3172 ;;      Totals:         0      16       0       0       0
  3173 ;;Total ram usage:       16 bytes
  3174 ;; Hardware stack levels required when called:    6
  3175 ;; This function calls:
  3176 ;;		_Clear_Matrix
  3177 ;;		_USARTInit
  3178 ;;		___bmul
  3179 ;;		_char_info_index_rand
  3180 ;;		_clear
  3181 ;;		_debug_int1
  3182 ;;		_debug_line
  3183 ;;		_delete_matrix
  3184 ;;		_find_best_solution
  3185 ;;		_hit_land
  3186 ;;		_merge
  3187 ;;		_printf_Screen
  3188 ;;		_printf_console_MATRIX88
  3189 ;;		_srand
  3190 ;; This function is called by:
  3191 ;;		Startup code after reset
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           
  3196                           ;psect for function _main
  3197  0167                     _main:	
  3198                           
  3199                           ;teris_16f886.c: 1234: uint8_t hit_res;
  3200                           ;teris_16f886.c: 1259: (TRISAbits.TRISA3 = 0);
  3201                           
  3202                           ;incstack = 0
  3203                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3204  0167  1683               	bsf	3,5	;RP0=1, select bank1
  3205  0168  1303               	bcf	3,6	;RP1=0, select bank1
  3206  0169  1185               	bcf	5,3	;volatile
  3207                           
  3208                           ;teris_16f886.c: 1261: (TRISAbits.TRISA2 = 0);
  3209  016A  1105               	bcf	5,2	;volatile
  3210                           
  3211                           ;teris_16f886.c: 1263: (TRISAbits.TRISA1 = 0);
  3212  016B  1085               	bcf	5,1	;volatile
  3213                           
  3214                           ;teris_16f886.c: 1265: ANSELbits.ANS1 = 0;
  3215  016C  1683               	bsf	3,5	;RP0=1, select bank3
  3216  016D  1703               	bsf	3,6	;RP1=1, select bank3
  3217  016E  1088               	bcf	8,1	;volatile
  3218                           
  3219                           ;teris_16f886.c: 1266: ANSELbits.ANS2 = 0;
  3220  016F  1108               	bcf	8,2	;volatile
  3221                           
  3222                           ;teris_16f886.c: 1267: ANSELbits.ANS3 = 0;
  3223  0170  1188               	bcf	8,3	;volatile
  3224                           
  3225                           ;teris_16f886.c: 1268: RA2 = 1;
  3226  0171  1283               	bcf	3,5	;RP0=0, select bank0
  3227  0172  1303               	bcf	3,6	;RP1=0, select bank0
  3228  0173  1505               	bsf	5,2	;volatile
  3229                           
  3230                           ;teris_16f886.c: 1269: RA1 = 0;
  3231  0174  1085               	bcf	5,1	;volatile
  3232                           
  3233                           ;teris_16f886.c: 1272: USARTInit(9600);
  3234  0175  3080               	movlw	128
  3235  0176  00F0               	movwf	USARTInit@baud_rate
  3236  0177  3025               	movlw	37
  3237  0178  00F1               	movwf	USARTInit@baud_rate+1
  3238  0179  160A  158A  2421  120A  118A  	fcall	_USARTInit
  3239                           
  3240                           ;teris_16f886.c: 1275: unsigned Seed;
  3241                           ;teris_16f886.c: 1276: srand(Seed);
  3242  017E  1283               	bcf	3,5	;RP0=0, select bank0
  3243  017F  1303               	bcf	3,6	;RP1=0, select bank0
  3244  0180  0869               	movf	main@Seed+1,w
  3245  0181  00F1               	movwf	srand@x+1
  3246  0182  0868               	movf	main@Seed,w
  3247  0183  00F0               	movwf	srand@x
  3248  0184  120A  158A  266F  120A  118A  	fcall	_srand
  3249  0189  2994               	goto	l5682
  3250  018A                     l5696:	
  3251                           
  3252                           ;teris_16f886.c: 1288: {
  3253                           ;teris_16f886.c: 1289: debug_line(1, "GAME OVER!!!");
  3254  018A  3041               	movlw	low (STR_60| (0+32768))
  3255  018B  00F3               	movwf	debug_line@str
  3256  018C  308E               	movlw	high (STR_60| (0+32768))
  3257  018D  00F4               	movwf	debug_line@str+1
  3258  018E  3001               	movlw	1
  3259  018F  160A  158A  21A8  120A  118A  	fcall	_debug_line
  3260  0194                     l5682:	
  3261                           ;teris_16f886.c: 1278: __start:
  3262                           
  3263                           ;teris_16f886.c: 1290: goto __start;
  3264                           
  3265                           
  3266                           ;teris_16f886.c: 1279: Clear_Matrix();
  3267  0194  160A  158A  2194  120A  118A  	fcall	_Clear_Matrix
  3268  0199                     l5684:	
  3269                           ;teris_16f886.c: 1280: while(1)
  3270                           
  3271                           
  3272                           ;teris_16f886.c: 1281: {
  3273                           ;teris_16f886.c: 1282: cur_y = 0;
  3274  0199  1283               	bcf	3,5	;RP0=0, select bank0
  3275  019A  1303               	bcf	3,6	;RP1=0, select bank0
  3276  019B  01ED               	clrf	_cur_y
  3277                           
  3278                           ;teris_16f886.c: 1283: cur_x = 2, cur_y = 0;
  3279  019C  3002               	movlw	2
  3280  019D  00DF               	movwf	??_main
  3281  019E  085F               	movf	??_main,w
  3282  019F  1683               	bsf	3,5	;RP0=1, select bank1
  3283  01A0  1303               	bcf	3,6	;RP1=0, select bank1
  3284  01A1  00EE               	movwf	_cur_x^(0+128)
  3285  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  3286  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  3287  01A4  01ED               	clrf	_cur_y
  3288                           
  3289                           ;teris_16f886.c: 1284: g_char_info_index = char_info_index_rand();
  3290  01A5  160A  158A  21BD  120A  118A  	fcall	_char_info_index_rand
  3291  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  3292  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  3293  01AC  00DF               	movwf	??_main
  3294  01AD  085F               	movf	??_main,w
  3295  01AE  00EE               	movwf	_g_char_info_index
  3296                           
  3297                           ;teris_16f886.c: 1286: debug_int1(1, "g_char_info_index = %d\n", g_char_info_index);
  3298  01AF  3009               	movlw	low (STR_61| (0+32768))
  3299  01B0  00BF               	movwf	debug_int1@f
  3300  01B1  308D               	movlw	high (STR_61| (0+32768))
  3301  01B2  00C0               	movwf	debug_int1@f+1
  3302  01B3  086E               	movf	_g_char_info_index,w
  3303  01B4  00DF               	movwf	??_main
  3304  01B5  01E0               	clrf	??_main+1
  3305  01B6  085F               	movf	??_main,w
  3306  01B7  00C1               	movwf	debug_int1@i
  3307  01B8  0860               	movf	??_main+1,w
  3308  01B9  00C2               	movwf	debug_int1@i+1
  3309  01BA  3001               	movlw	1
  3310  01BB  120A  118A  2003  120A  118A  	fcall	_debug_int1
  3311                           
  3312                           ;teris_16f886.c: 1287: if(find_best_solution() == 0)
  3313  01C0  160A  118A  23DA  120A  118A  	fcall	_find_best_solution
  3314  01C5  3A00               	xorlw	0
  3315  01C6  1903               	btfsc	3,2
  3316  01C7  298A               	goto	l5696
  3317                           
  3318                           ;teris_16f886.c: 1291: }
  3319                           ;teris_16f886.c: 1292: g_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].start
      +                          _index + g_char_info[g_char_info_index].cur_index];
  3320  01C8  3003               	movlw	3
  3321  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  3322  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  3323  01CB  00DF               	movwf	??_main
  3324  01CC  085F               	movf	??_main,w
  3325  01CD  00F0               	movwf	___bmul@multiplicand
  3326  01CE  086E               	movf	_g_char_info_index,w
  3327  01CF  160A  158A  214E  120A  118A  	fcall	___bmul
  3328  01D4  3E01               	addlw	1
  3329  01D5  3EB9               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3330  01D6  0084               	movwf	4
  3331  01D7  1783               	bsf	3,7	;select IRP bank3
  3332  01D8  0800               	movf	0,w
  3333  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  3334  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  3335  01DB  00E0               	movwf	??_main+1
  3336  01DC  3003               	movlw	3
  3337  01DD  00E1               	movwf	??_main+2
  3338  01DE  0861               	movf	??_main+2,w
  3339  01DF  00F0               	movwf	___bmul@multiplicand
  3340  01E0  086E               	movf	_g_char_info_index,w
  3341  01E1  160A  158A  214E  120A  118A  	fcall	___bmul
  3342  01E6  3EB9               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3343  01E7  0084               	movwf	4
  3344  01E8  1783               	bsf	3,7	;select IRP bank3
  3345  01E9  0800               	movf	0,w
  3346  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  3347  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  3348  01EC  0760               	addwf	??_main+1,w
  3349  01ED  00E2               	movwf	??_main+3
  3350  01EE  01E3               	clrf	??_main+4
  3351  01EF  0DE3               	rlf	??_main+4,f
  3352  01F0  0EE2               	swapf	??_main+3,f
  3353  01F1  0EE3               	swapf	??_main+4,f
  3354  01F2  30F0               	movlw	240
  3355  01F3  05E3               	andwf	??_main+4,f
  3356  01F4  0862               	movf	??_main+3,w
  3357  01F5  390F               	andlw	15
  3358  01F6  04E3               	iorwf	??_main+4,f
  3359  01F7  30F0               	movlw	240
  3360  01F8  05E2               	andwf	??_main+3,f
  3361  01F9  3030               	movlw	low (_g_matrix44| (0+32768))
  3362  01FA  00E4               	movwf	??_main+5
  3363  01FB  3088               	movlw	high (_g_matrix44| (0+32768))
  3364  01FC  00E5               	movwf	??_main+6
  3365  01FD  0862               	movf	??_main+3,w
  3366  01FE  0764               	addwf	??_main+5,w
  3367  01FF  00E6               	movwf	??_main+7
  3368  0200  0863               	movf	??_main+4,w
  3369  0201  1803               	skipnc
  3370  0202  0A63               	incf	??_main+4,w
  3371  0203  0765               	addwf	??_main+6,w
  3372  0204  00E7               	movwf	??_main+8
  3373  0205  0866               	movf	??_main+7,w
  3374  0206  1683               	bsf	3,5	;RP0=1, select bank3
  3375  0207  1703               	bsf	3,6	;RP1=1, select bank3
  3376  0208  0095               	movwf	_g_cur_matrix44^(0+384)
  3377  0209  1283               	bcf	3,5	;RP0=0, select bank0
  3378  020A  1303               	bcf	3,6	;RP1=0, select bank0
  3379  020B  0867               	movf	??_main+8,w
  3380  020C  1683               	bsf	3,5	;RP0=1, select bank3
  3381  020D  1703               	bsf	3,6	;RP1=1, select bank3
  3382  020E  0096               	movwf	(_g_cur_matrix44+1)^(0+384)
  3383  020F                     l5700:	
  3384                           ;teris_16f886.c: 1293: while(1)
  3385                           
  3386                           
  3387                           ;teris_16f886.c: 1294: {
  3388                           ;teris_16f886.c: 1295: hit_res = hit_land(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3389  020F  1283               	bcf	3,5	;RP0=0, select bank0
  3390  0210  1303               	bcf	3,6	;RP1=0, select bank0
  3391  0211  086D               	movf	_cur_y,w
  3392  0212  00DF               	movwf	??_main
  3393  0213  085F               	movf	??_main,w
  3394  0214  00C6               	movwf	hit_land@y
  3395  0215  1683               	bsf	3,5	;RP0=1, select bank3
  3396  0216  1703               	bsf	3,6	;RP1=1, select bank3
  3397  0217  0815               	movf	_g_cur_matrix44^(0+384),w
  3398  0218  1283               	bcf	3,5	;RP0=0, select bank0
  3399  0219  1303               	bcf	3,6	;RP1=0, select bank0
  3400  021A  00C7               	movwf	hit_land@matrix44
  3401  021B  1683               	bsf	3,5	;RP0=1, select bank3
  3402  021C  1703               	bsf	3,6	;RP1=1, select bank3
  3403  021D  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3404  021E  1283               	bcf	3,5	;RP0=0, select bank0
  3405  021F  1303               	bcf	3,6	;RP1=0, select bank0
  3406  0220  00C8               	movwf	hit_land@matrix44+1
  3407  0221  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3408  0222  00E0               	movwf	??_main+1
  3409  0223  0860               	movf	??_main+1,w
  3410  0224  00C9               	movwf	hit_land@matrix88
  3411  0225  1683               	bsf	3,5	;RP0=1, select bank1
  3412  0226  1303               	bcf	3,6	;RP1=0, select bank1
  3413  0227  086E               	movf	_cur_x^(0+128),w
  3414  0228  160A  118A  223C  120A  118A  	fcall	_hit_land
  3415  022D  1283               	bcf	3,5	;RP0=0, select bank0
  3416  022E  1303               	bcf	3,6	;RP1=0, select bank0
  3417  022F  00E1               	movwf	??_main+2
  3418  0230  0861               	movf	??_main+2,w
  3419  0231  00EA               	movwf	main@hit_res
  3420                           
  3421                           ;teris_16f886.c: 1296: debug_int1(1, "hit_res = %d\n", hit_res);
  3422  0232  3033               	movlw	low (STR_63| (0+32768))
  3423  0233  00BF               	movwf	debug_int1@f
  3424  0234  308E               	movlw	high (STR_63| (0+32768))
  3425  0235  00C0               	movwf	debug_int1@f+1
  3426  0236  086A               	movf	main@hit_res,w
  3427  0237  00DF               	movwf	??_main
  3428  0238  01E0               	clrf	??_main+1
  3429  0239  085F               	movf	??_main,w
  3430  023A  00C1               	movwf	debug_int1@i
  3431  023B  0860               	movf	??_main+1,w
  3432  023C  00C2               	movwf	debug_int1@i+1
  3433  023D  3001               	movlw	1
  3434  023E  120A  118A  2003  120A  118A  	fcall	_debug_int1
  3435                           
  3436                           ;teris_16f886.c: 1297: merge(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3437  0243  1283               	bcf	3,5	;RP0=0, select bank0
  3438  0244  1303               	bcf	3,6	;RP1=0, select bank0
  3439  0245  086D               	movf	_cur_y,w
  3440  0246  00DF               	movwf	??_main
  3441  0247  085F               	movf	??_main,w
  3442  0248  00F0               	movwf	merge@y
  3443  0249  1683               	bsf	3,5	;RP0=1, select bank3
  3444  024A  1703               	bsf	3,6	;RP1=1, select bank3
  3445  024B  0815               	movf	_g_cur_matrix44^(0+384),w
  3446  024C  00F1               	movwf	merge@matrix44
  3447  024D  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3448  024E  00F2               	movwf	merge@matrix44+1
  3449  024F  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3450  0250  1283               	bcf	3,5	;RP0=0, select bank0
  3451  0251  1303               	bcf	3,6	;RP1=0, select bank0
  3452  0252  00E0               	movwf	??_main+1
  3453  0253  0860               	movf	??_main+1,w
  3454  0254  00F3               	movwf	merge@matrix88
  3455  0255  1683               	bsf	3,5	;RP0=1, select bank1
  3456  0256  1303               	bcf	3,6	;RP1=0, select bank1
  3457  0257  086E               	movf	_cur_x^(0+128),w
  3458  0258  160A  158A  25DE  120A  118A  	fcall	_merge
  3459                           
  3460                           ;teris_16f886.c: 1298: if(hit_res == 1)
  3461  025D  1283               	bcf	3,5	;RP0=0, select bank0
  3462  025E  1303               	bcf	3,6	;RP1=0, select bank0
  3463  025F  036A               	decf	main@hit_res,w
  3464  0260  1D03               	btfss	3,2
  3465  0261  2A81               	goto	l5714
  3466                           
  3467                           ;teris_16f886.c: 1299: {
  3468                           ;teris_16f886.c: 1300: printf_Screen();
  3469  0262  160A  118A  2001  120A  118A  	fcall	_printf_Screen
  3470                           
  3471                           ;teris_16f886.c: 1304: _delay((unsigned long)((100)*(20000000/4000.0)));
  3472  0267  3003               	movlw	3
  3473  0268  1283               	bcf	3,5	;RP0=0, select bank0
  3474  0269  1303               	bcf	3,6	;RP1=0, select bank0
  3475  026A  00E1               	movwf	??_main+2
  3476  026B  308A               	movlw	138
  3477  026C  00E0               	movwf	??_main+1
  3478  026D  3056               	movlw	86
  3479  026E  00DF               	movwf	??_main
  3480  026F                     u8367:	
  3481  026F  0BDF               	decfsz	??_main,f
  3482  0270  2A6F               	goto	u8367
  3483  0271  0BE0               	decfsz	??_main+1,f
  3484  0272  2A6F               	goto	u8367
  3485  0273  0BE1               	decfsz	??_main+2,f
  3486  0274  2A6F               	goto	u8367
  3487  0275  2A76               	nop2
  3488                           
  3489                           ;teris_16f886.c: 1306: delete_matrix(&g_matrix88);
  3490  0276  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3491  0277  1283               	bcf	3,5	;RP0=0, select bank0
  3492  0278  1303               	bcf	3,6	;RP1=0, select bank0
  3493  0279  00C4               	movwf	delete_matrix@matrix
  3494  027A  3001               	movlw	1
  3495  027B  00C5               	movwf	delete_matrix@matrix+1
  3496  027C  160A  158A  24B0  120A  118A  	fcall	_delete_matrix
  3497  0281                     l5714:	
  3498                           
  3499                           ;teris_16f886.c: 1307: }
  3500                           ;teris_16f886.c: 1308: printf_console_MATRIX88(1, &g_matrix88);
  3501  0281  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3502  0282  00F6               	movwf	printf_console_MATRIX88@matrix
  3503  0283  3001               	movlw	1
  3504  0284  00F7               	movwf	printf_console_MATRIX88@matrix+1
  3505  0285  3001               	movlw	1
  3506  0286  160A  118A  20B5  120A  118A  	fcall	_printf_console_MATRIX88
  3507                           
  3508                           ;teris_16f886.c: 1309: printf_Screen();
  3509  028B  160A  118A  2001  120A  118A  	fcall	_printf_Screen
  3510                           
  3511                           ;teris_16f886.c: 1310: if(hit_res == 0)
  3512  0290  1283               	bcf	3,5	;RP0=0, select bank0
  3513  0291  1303               	bcf	3,6	;RP1=0, select bank0
  3514  0292  086A               	movf	main@hit_res,w
  3515  0293  1D03               	btfss	3,2
  3516  0294  2999               	goto	l5684
  3517                           
  3518                           ;teris_16f886.c: 1311: {
  3519                           ;teris_16f886.c: 1312: clear(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3520  0295  086D               	movf	_cur_y,w
  3521  0296  00DF               	movwf	??_main
  3522  0297  085F               	movf	??_main,w
  3523  0298  00F0               	movwf	clear@y
  3524  0299  1683               	bsf	3,5	;RP0=1, select bank3
  3525  029A  1703               	bsf	3,6	;RP1=1, select bank3
  3526  029B  0815               	movf	_g_cur_matrix44^(0+384),w
  3527  029C  00F1               	movwf	clear@matrix44
  3528  029D  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3529  029E  00F2               	movwf	clear@matrix44+1
  3530  029F  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3531  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  3532  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  3533  02A2  00E0               	movwf	??_main+1
  3534  02A3  0860               	movf	??_main+1,w
  3535  02A4  00F3               	movwf	clear@matrix88
  3536  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  3537  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  3538  02A7  086E               	movf	_cur_x^(0+128),w
  3539  02A8  160A  158A  258F  120A  118A  	fcall	_clear
  3540                           
  3541                           ;teris_16f886.c: 1317: }
  3542                           ;teris_16f886.c: 1321: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3543                           
  3544                           ;teris_16f886.c: 1314: else
  3545                           ;teris_16f886.c: 1315: {
  3546                           ;teris_16f886.c: 1316: break;
  3547                           
  3548                           ;teris_16f886.c: 1313: }
  3549  02AD  301A               	movlw	26
  3550  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  3551  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  3552  02B0  00E1               	movwf	??_main+2
  3553  02B1  305E               	movlw	94
  3554  02B2  00E0               	movwf	??_main+1
  3555  02B3  3086               	movlw	134
  3556  02B4  00DF               	movwf	??_main
  3557  02B5                     u8377:	
  3558  02B5  0BDF               	decfsz	??_main,f
  3559  02B6  2AB5               	goto	u8377
  3560  02B7  0BE0               	decfsz	??_main+1,f
  3561  02B8  2AB5               	goto	u8377
  3562  02B9  0BE1               	decfsz	??_main+2,f
  3563  02BA  2AB5               	goto	u8377
  3564  02BB  0000               	nop
  3565                           
  3566                           ;teris_16f886.c: 1323: cur_y++;
  3567  02BC  3001               	movlw	1
  3568  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  3569  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  3570  02BF  00DF               	movwf	??_main
  3571  02C0  085F               	movf	??_main,w
  3572  02C1  07ED               	addwf	_cur_y,f
  3573  02C2  2A0F               	goto	l5700
  3574  02C3                     __end_of_main:	
  3575                           ;teris_16f886.c: 1333: return 0;
  3576                           ;	Return value of _main is never used
  3577                           
  3578                           ;teris_16f886.c: 1324: }
  3579                           ;teris_16f886.c: 1325: }
  3580                           ;teris_16f886.c: 1326: __exit:
  3581                           
  3582                           
  3583                           	psect	text1
  3584  0E6F                     __ptext1:	
  3585 ;; *************** function _srand *****************
  3586 ;; Defined at:
  3587 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  x               2    0[COMMON] unsigned int 
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;		None
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  1    wreg      void 
  3594 ;; Registers used:
  3595 ;;		wreg
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3601 ;;      Params:         2       0       0       0       0
  3602 ;;      Locals:         0       0       0       0       0
  3603 ;;      Temps:          0       0       0       0       0
  3604 ;;      Totals:         2       0       0       0       0
  3605 ;;Total ram usage:        2 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_main
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           
  3615                           ;psect for function _srand
  3616  0E6F                     _srand:	
  3617                           
  3618                           ;incstack = 0
  3619                           ; Regs used in _srand: [wreg]
  3620  0E6F  0870               	movf	srand@x,w
  3621  0E70  1683               	bsf	3,5	;RP0=1, select bank3
  3622  0E71  1703               	bsf	3,6	;RP1=1, select bank3
  3623  0E72  00D4               	movwf	_randx^(0+384)
  3624  0E73  0871               	movf	srand@x+1,w
  3625  0E74  00D5               	movwf	(_randx^(0+384)+1)
  3626  0E75  01D6               	clrf	(_randx^(0+384)+2)
  3627  0E76  01D7               	clrf	(_randx^(0+384)+3)
  3628  0E77  0008               	return
  3629  0E78                     __end_of_srand:	
  3630                           
  3631                           	psect	text2
  3632  1DDE                     __ptext2:	
  3633 ;; *************** function _merge *****************
  3634 ;; Defined at:
  3635 ;;		line 791 in file "teris_16f886.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;  x               1    wreg     char 
  3638 ;;  y               1    0[COMMON] char 
  3639 ;;  matrix44        2    1[COMMON] PTR const struct .
  3640 ;;		 -> NULL(0), g_matrix44(384), 
  3641 ;;  matrix88        1    3[COMMON] PTR struct .
  3642 ;;		 -> g_matrix88(64), 
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;  x               1    8[COMMON] char 
  3645 ;;  col             1   10[COMMON] unsigned char 
  3646 ;;  row             1    9[COMMON] unsigned char 
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3656 ;;      Params:         4       0       0       0       0
  3657 ;;      Locals:         3       0       0       0       0
  3658 ;;      Temps:          4       0       0       0       0
  3659 ;;      Totals:        11       0       0       0       0
  3660 ;;Total ram usage:       11 bytes
  3661 ;; Hardware stack levels used:    2
  3662 ;; This function calls:
  3663 ;;		Nothing
  3664 ;; This function is called by:
  3665 ;;		_main
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           
  3670                           ;psect for function _merge
  3671  1DDE                     _merge:	
  3672                           
  3673                           ;incstack = 0
  3674                           ; Regs used in _merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3675                           ;merge@x stored from wreg
  3676  1DDE  00F8               	movwf	merge@x
  3677                           
  3678                           ;teris_16f886.c: 793: for(uint8_t row = 0; row < 4; row++)
  3679  1DDF  01F9               	clrf	merge@row
  3680  1DE0                     L1:	
  3681  1DE0  3004               	movlw	4
  3682  1DE1  0279               	subwf	merge@row,w
  3683  1DE2  1803               	btfsc	3,0
  3684  1DE3  0008               	return
  3685                           
  3686                           ;teris_16f886.c: 794: {
  3687                           ;teris_16f886.c: 795: for(uint8_t col = 0; col < 4; col++)
  3688  1DE4  01FA               	clrf	merge@col
  3689  1DE5  3004               	movlw	4
  3690  1DE6  027A               	subwf	merge@col,w
  3691  1DE7  1803               	btfsc	3,0
  3692  1DE8  2E29               	goto	l4238
  3693  1DE9                     l4230:	
  3694                           
  3695                           ;teris_16f886.c: 796: {
  3696                           ;teris_16f886.c: 797: if(matrix44->data[row][col] == 1)
  3697  1DE9  0879               	movf	merge@row,w
  3698  1DEA  00F4               	movwf	??_merge
  3699  1DEB  01F5               	clrf	??_merge+1
  3700  1DEC  1003               	clrc
  3701  1DED  0DF4               	rlf	??_merge,f
  3702  1DEE  0DF5               	rlf	??_merge+1,f
  3703  1DEF  1003               	clrc
  3704  1DF0  0DF4               	rlf	??_merge,f
  3705  1DF1  0DF5               	rlf	??_merge+1,f
  3706  1DF2  0874               	movf	??_merge,w
  3707  1DF3  0771               	addwf	merge@matrix44,w
  3708  1DF4  00F6               	movwf	??_merge+2
  3709  1DF5  0875               	movf	??_merge+1,w
  3710  1DF6  1803               	skipnc
  3711  1DF7  0A75               	incf	??_merge+1,w
  3712  1DF8  0772               	addwf	merge@matrix44+1,w
  3713  1DF9  00F7               	movwf	??_merge+3
  3714  1DFA  087A               	movf	merge@col,w
  3715  1DFB  0776               	addwf	??_merge+2,w
  3716  1DFC  0084               	movwf	4
  3717  1DFD  0877               	movf	??_merge+3,w
  3718  1DFE  1803               	skipnc
  3719  1DFF  0A77               	incf	??_merge+3,w
  3720  1E00  1283               	bcf	3,5	;RP0=0, select bank0
  3721  1E01  1303               	bcf	3,6	;RP1=0, select bank0
  3722  1E02  00FF               	movwf	127
  3723  1E03  120A  158A  2000  160A  158A  	fcall	stringtab
  3724  1E08  3A01               	xorlw	1
  3725  1E09  1D03               	skipz
  3726  1E0A  2E21               	goto	l4234
  3727                           
  3728                           ;teris_16f886.c: 798: {
  3729                           ;teris_16f886.c: 799: matrix88->data[y + row][x + col] = 1;
  3730  1E0B  087A               	movf	merge@col,w
  3731  1E0C  0778               	addwf	merge@x,w
  3732  1E0D  0773               	addwf	merge@matrix88,w
  3733  1E0E  00F4               	movwf	??_merge
  3734  1E0F  0879               	movf	merge@row,w
  3735  1E10  0770               	addwf	merge@y,w
  3736  1E11  00F5               	movwf	??_merge+1
  3737  1E12  3002               	movlw	2
  3738  1E13                     u5975:	
  3739  1E13  1003               	clrc
  3740  1E14  0DF5               	rlf	??_merge+1,f
  3741  1E15  3EFF               	addlw	-1
  3742  1E16  1D03               	skipz
  3743  1E17  2E13               	goto	u5975
  3744  1E18  1003               	clrc
  3745  1E19  0D75               	rlf	??_merge+1,w
  3746  1E1A  0774               	addwf	??_merge,w
  3747  1E1B  00F6               	movwf	??_merge+2
  3748  1E1C  0876               	movf	??_merge+2,w
  3749  1E1D  0084               	movwf	4
  3750  1E1E  1783               	bsf	3,7	;select IRP bank2
  3751  1E1F  0180               	clrf	0
  3752  1E20  0A80               	incf	0,f
  3753  1E21                     l4234:	
  3754  1E21  3001               	movlw	1
  3755  1E22  00F4               	movwf	??_merge
  3756  1E23  0874               	movf	??_merge,w
  3757  1E24  07FA               	addwf	merge@col,f
  3758  1E25  3004               	movlw	4
  3759  1E26  027A               	subwf	merge@col,w
  3760  1E27  1C03               	skipc
  3761  1E28  2DE9               	goto	l4230
  3762  1E29                     l4238:	
  3763  1E29  3001               	movlw	1
  3764  1E2A  00F4               	movwf	??_merge
  3765  1E2B  0874               	movf	??_merge,w
  3766  1E2C  07F9               	addwf	merge@row,f
  3767  1E2D  2DE0               	goto	L1
  3768  1E2E                     __end_of_merge:	
  3769                           
  3770                           	psect	text3
  3771  123C                     __ptext3:	
  3772 ;; *************** function _hit_land *****************
  3773 ;; Defined at:
  3774 ;;		line 658 in file "teris_16f886.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  x               1    wreg     char 
  3777 ;;  y               1   38[BANK0 ] char 
  3778 ;;  matrix44        2   39[BANK0 ] PTR const struct .
  3779 ;;		 -> NULL(0), g_matrix44(384), 
  3780 ;;  matrix88        1   41[BANK0 ] PTR const struct .
  3781 ;;		 -> g_matrix88(64), 
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;  x               1   46[BANK0 ] char 
  3784 ;;  col             1   47[BANK0 ] char 
  3785 ;;  row             1   48[BANK0 ] char 
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  1    wreg      unsigned char 
  3788 ;; Registers used:
  3789 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3795 ;;      Params:         0       4       0       0       0
  3796 ;;      Locals:         0       3       0       0       0
  3797 ;;      Temps:          0       4       0       0       0
  3798 ;;      Totals:         0      11       0       0       0
  3799 ;;Total ram usage:       11 bytes
  3800 ;; Hardware stack levels used:    1
  3801 ;; Hardware stack levels required when called:    3
  3802 ;; This function calls:
  3803 ;;		_debug_int2
  3804 ;;		_debug_line
  3805 ;; This function is called by:
  3806 ;;		_main
  3807 ;; This function uses a non-reentrant model
  3808 ;;
  3809                           
  3810                           
  3811                           ;psect for function _hit_land
  3812  123C                     _hit_land:	
  3813                           
  3814                           ;incstack = 0
  3815                           ; Regs used in _hit_land: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3816                           ;hit_land@x stored from wreg
  3817  123C  1283               	bcf	3,5	;RP0=0, select bank0
  3818  123D  1303               	bcf	3,6	;RP1=0, select bank0
  3819  123E  00CE               	movwf	hit_land@x
  3820                           
  3821                           ;teris_16f886.c: 660: debug_line(0, "==============hit_land============");
  3822  123F  30C6               	movlw	low (STR_23| (0+32768))
  3823  1240  00F3               	movwf	debug_line@str
  3824  1241  308B               	movlw	high (STR_23| (0+32768))
  3825  1242  00F4               	movwf	debug_line@str+1
  3826  1243  3000               	movlw	0
  3827  1244  160A  158A  21A8  160A  118A  	fcall	_debug_line
  3828                           
  3829                           ;teris_16f886.c: 662: for(int8_t row = 4 - 1; row >= 0; row--)
  3830  1249  3003               	movlw	3
  3831  124A  1283               	bcf	3,5	;RP0=0, select bank0
  3832  124B  1303               	bcf	3,6	;RP1=0, select bank0
  3833  124C  00CA               	movwf	??_hit_land
  3834  124D  084A               	movf	??_hit_land,w
  3835  124E  00D0               	movwf	hit_land@row
  3836  124F  1BD0               	btfsc	hit_land@row,7
  3837  1250  2AE3               	goto	l5366
  3838  1251                     l5334:	
  3839                           
  3840                           ;teris_16f886.c: 663: {
  3841                           ;teris_16f886.c: 664: for(int8_t col = 0; col < 4; col++)
  3842  1251  01CF               	clrf	hit_land@col
  3843  1252  084F               	movf	hit_land@col,w
  3844  1253  3A80               	xorlw	128
  3845  1254  3E7C               	addlw	-132
  3846  1255  1803               	btfsc	3,0
  3847  1256  2ADD               	goto	l5362
  3848  1257                     l5340:	
  3849                           
  3850                           ;teris_16f886.c: 665: {
  3851                           ;teris_16f886.c: 666: if(matrix44->data[row][col] == 1)
  3852  1257  0850               	movf	hit_land@row,w
  3853  1258  00CA               	movwf	??_hit_land
  3854  1259  01CB               	clrf	??_hit_land+1
  3855  125A  1003               	clrc
  3856  125B  0DCA               	rlf	??_hit_land,f
  3857  125C  0DCB               	rlf	??_hit_land+1,f
  3858  125D  1003               	clrc
  3859  125E  0DCA               	rlf	??_hit_land,f
  3860  125F  0DCB               	rlf	??_hit_land+1,f
  3861  1260  084A               	movf	??_hit_land,w
  3862  1261  0747               	addwf	hit_land@matrix44,w
  3863  1262  00CC               	movwf	??_hit_land+2
  3864  1263  084B               	movf	??_hit_land+1,w
  3865  1264  1803               	skipnc
  3866  1265  0A4B               	incf	??_hit_land+1,w
  3867  1266  0748               	addwf	hit_land@matrix44+1,w
  3868  1267  00CD               	movwf	??_hit_land+3
  3869  1268  084F               	movf	hit_land@col,w
  3870  1269  074C               	addwf	??_hit_land+2,w
  3871  126A  0084               	movwf	4
  3872  126B  084D               	movf	??_hit_land+3,w
  3873  126C  1803               	skipnc
  3874  126D  0A4D               	incf	??_hit_land+3,w
  3875  126E  00FF               	movwf	127
  3876  126F  120A  158A  2000  160A  118A  	fcall	stringtab
  3877  1274  3A01               	xorlw	1
  3878  1275  1D03               	skipz
  3879  1276  2AD2               	goto	l5358
  3880                           
  3881                           ;teris_16f886.c: 667: {
  3882                           ;teris_16f886.c: 668: if((y + row) >= (8 - 1))
  3883  1277  0846               	movf	hit_land@y,w
  3884  1278  0750               	addwf	hit_land@row,w
  3885  1279  00CA               	movwf	??_hit_land
  3886  127A  01CB               	clrf	??_hit_land+1
  3887  127B  1803               	skipnc
  3888  127C  0ACB               	incf	??_hit_land+1,f
  3889  127D  1BC6               	btfsc	hit_land@y,7
  3890  127E  03CB               	decf	??_hit_land+1,f
  3891  127F  1BD0               	btfsc	hit_land@row,7
  3892  1280  03CB               	decf	??_hit_land+1,f
  3893  1281  1283               	bcf	3,5	;RP0=0, select bank0
  3894  1282  1303               	bcf	3,6	;RP1=0, select bank0
  3895  1283  084B               	movf	??_hit_land+1,w
  3896  1284  3A80               	xorlw	128
  3897  1285  00FF               	movwf	127
  3898  1286  3080               	movlw	128
  3899  1287  027F               	subwf	127,w
  3900  1288  1D03               	skipz
  3901  1289  2A8C               	goto	u7935
  3902  128A  3007               	movlw	7
  3903  128B  024A               	subwf	??_hit_land,w
  3904  128C                     u7935:	
  3905  128C  1C03               	skipc
  3906  128D  2AA4               	goto	l5350
  3907                           
  3908                           ;teris_16f886.c: 669: {
  3909                           ;teris_16f886.c: 670: debug_int2(0, "hit1 row = %d, col = %d", row, col);
  3910  128E  3021               	movlw	low (STR_24| (0+32768))
  3911  128F  1283               	bcf	3,5	;RP0=0, select bank0
  3912  1290  1303               	bcf	3,6	;RP1=0, select bank0
  3913  1291  00BF               	movwf	debug_int2@f
  3914  1292  308D               	movlw	high (STR_24| (0+32768))
  3915  1293  00C0               	movwf	debug_int2@f+1
  3916  1294  0850               	movf	hit_land@row,w
  3917  1295  00C1               	movwf	debug_int2@i1
  3918  1296  01C2               	clrf	debug_int2@i1+1
  3919  1297  1BC1               	btfsc	debug_int2@i1,7
  3920  1298  03C2               	decf	debug_int2@i1+1,f
  3921  1299  084F               	movf	hit_land@col,w
  3922  129A  00C3               	movwf	debug_int2@i2
  3923  129B  01C4               	clrf	debug_int2@i2+1
  3924  129C  1BC3               	btfsc	debug_int2@i2,7
  3925  129D  03C4               	decf	debug_int2@i2+1,f
  3926  129E  3000               	movlw	0
  3927  129F  160A  158A  229A   	fcall	_debug_int2
  3928                           
  3929                           ;teris_16f886.c: 671: return 1;
  3930  12A2  3001               	movlw	1
  3931  12A3  0008               	return
  3932  12A4                     l5350:	
  3933                           
  3934                           ;teris_16f886.c: 672: }
  3935                           ;teris_16f886.c: 674: if(matrix88->data[y + row + 1][x + col] == 1)
  3936  12A4  1283               	bcf	3,5	;RP0=0, select bank0
  3937  12A5  1303               	bcf	3,6	;RP1=0, select bank0
  3938  12A6  084F               	movf	hit_land@col,w
  3939  12A7  074E               	addwf	hit_land@x,w
  3940  12A8  0749               	addwf	hit_land@matrix88,w
  3941  12A9  00CA               	movwf	??_hit_land
  3942  12AA  0850               	movf	hit_land@row,w
  3943  12AB  0746               	addwf	hit_land@y,w
  3944  12AC  00CB               	movwf	??_hit_land+1
  3945  12AD  3002               	movlw	2
  3946  12AE                     u7945:	
  3947  12AE  1003               	clrc
  3948  12AF  0DCB               	rlf	??_hit_land+1,f
  3949  12B0  3EFF               	addlw	-1
  3950  12B1  1D03               	skipz
  3951  12B2  2AAE               	goto	u7945
  3952  12B3  1003               	clrc
  3953  12B4  0D4B               	rlf	??_hit_land+1,w
  3954  12B5  3E08               	addlw	8
  3955  12B6  074A               	addwf	??_hit_land,w
  3956  12B7  00CC               	movwf	??_hit_land+2
  3957  12B8  084C               	movf	??_hit_land+2,w
  3958  12B9  0084               	movwf	4
  3959  12BA  1783               	bsf	3,7	;select IRP bank2
  3960  12BB  0300               	decf	0,w
  3961  12BC  1D03               	btfss	3,2
  3962  12BD  2AD2               	goto	l5358
  3963                           
  3964                           ;teris_16f886.c: 675: {
  3965                           ;teris_16f886.c: 676: debug_int2(0, "hit2 row = %d, col = %d", row, col);
  3966  12BE  3039               	movlw	low (STR_25| (0+32768))
  3967  12BF  00BF               	movwf	debug_int2@f
  3968  12C0  308D               	movlw	high (STR_25| (0+32768))
  3969  12C1  00C0               	movwf	debug_int2@f+1
  3970  12C2  0850               	movf	hit_land@row,w
  3971  12C3  00C1               	movwf	debug_int2@i1
  3972  12C4  01C2               	clrf	debug_int2@i1+1
  3973  12C5  1BC1               	btfsc	debug_int2@i1,7
  3974  12C6  03C2               	decf	debug_int2@i1+1,f
  3975  12C7  084F               	movf	hit_land@col,w
  3976  12C8  00C3               	movwf	debug_int2@i2
  3977  12C9  01C4               	clrf	debug_int2@i2+1
  3978  12CA  1BC3               	btfsc	debug_int2@i2,7
  3979  12CB  03C4               	decf	debug_int2@i2+1,f
  3980  12CC  3000               	movlw	0
  3981  12CD  160A  158A  229A   	fcall	_debug_int2
  3982                           
  3983                           ;teris_16f886.c: 677: return 1;
  3984  12D0  3001               	movlw	1
  3985  12D1  0008               	return
  3986  12D2                     l5358:	
  3987  12D2  3001               	movlw	1
  3988  12D3  1283               	bcf	3,5	;RP0=0, select bank0
  3989  12D4  1303               	bcf	3,6	;RP1=0, select bank0
  3990  12D5  00CA               	movwf	??_hit_land
  3991  12D6  084A               	movf	??_hit_land,w
  3992  12D7  07CF               	addwf	hit_land@col,f
  3993  12D8  084F               	movf	hit_land@col,w
  3994  12D9  3A80               	xorlw	128
  3995  12DA  3E7C               	addlw	-132
  3996  12DB  1C03               	skipc
  3997  12DC  2A57               	goto	l5340
  3998  12DD                     l5362:	
  3999  12DD  30FF               	movlw	255
  4000  12DE  00CA               	movwf	??_hit_land
  4001  12DF  084A               	movf	??_hit_land,w
  4002  12E0  07D0               	addwf	hit_land@row,f
  4003  12E1  1FD0               	btfss	hit_land@row,7
  4004  12E2  2A51               	goto	l5334
  4005  12E3                     l5366:	
  4006                           
  4007                           ;teris_16f886.c: 678: }
  4008                           ;teris_16f886.c: 679: }
  4009                           ;teris_16f886.c: 680: }
  4010                           ;teris_16f886.c: 681: }
  4011                           ;teris_16f886.c: 682: debug_line(0, "not hit");
  4012  12E3  3059               	movlw	low (STR_26| (0+32768))
  4013  12E4  00F3               	movwf	debug_line@str
  4014  12E5  308E               	movlw	high (STR_26| (0+32768))
  4015  12E6  00F4               	movwf	debug_line@str+1
  4016  12E7  3000               	movlw	0
  4017  12E8  160A  158A  21A8   	fcall	_debug_line
  4018                           
  4019                           ;teris_16f886.c: 683: return 0;
  4020  12EB  3000               	movlw	0
  4021  12EC  0008               	return
  4022  12ED                     __end_of_hit_land:	
  4023                           
  4024                           	psect	text4
  4025  13DA                     __ptext4:	
  4026 ;; *************** function _find_best_solution *****************
  4027 ;; Defined at:
  4028 ;;		line 984 in file "teris_16f886.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;		None
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;  temp_x          1   72[BANK1 ] char 
  4033 ;;  tem_sub_inde    1   71[BANK1 ] unsigned char 
  4034 ;;  temp_matrix8   64    5[BANK1 ] struct .
  4035 ;;  temp_cur_mat    2   69[BANK1 ] PTR struct .
  4036 ;;		 -> g_matrix44(384), 
  4037 ;;  res             1    4[BANK1 ] unsigned char 
  4038 ;;  right_most_i    1    3[BANK1 ] char 
  4039 ;;  left_most_in    1    2[BANK1 ] char 
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  1    wreg      unsigned char 
  4042 ;; Registers used:
  4043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4049 ;;      Params:         0       0       0       0       0
  4050 ;;      Locals:         0       0      73       0       0
  4051 ;;      Temps:          0       7       0       0       0
  4052 ;;      Totals:         0       7      73       0       0
  4053 ;;Total ram usage:       80 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    5
  4056 ;; This function calls:
  4057 ;;		___bmul
  4058 ;;		_debug_int1
  4059 ;;		_debug_int2
  4060 ;;		_debug_line
  4061 ;;		_delete_matrix
  4062 ;;		_evaluate
  4063 ;;		_fall_off
  4064 ;;		_get_high
  4065 ;;		_get_high_after_merge
  4066 ;;		_get_holes_after_merge
  4067 ;;		_is_valid
  4068 ;;		_left_most
  4069 ;;		_merge1
  4070 ;;		_printf_console_MATRIX44
  4071 ;;		_printf_console_MATRIX88
  4072 ;;		_printf_console_Screen
  4073 ;;		_printf_console_cur_MATRIX44
  4074 ;;		_right_most
  4075 ;; This function is called by:
  4076 ;;		_main
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           
  4081                           ;psect for function _find_best_solution
  4082  13DA                     _find_best_solution:	
  4083                           
  4084                           ;teris_16f886.c: 986: debug_line(0, "==============find_best_solution============");
  4085                           
  4086                           ;incstack = 0
  4087                           ; Regs used in _find_best_solution: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4088  13DA  30E4               	movlw	low (STR_43| (0+32768))
  4089  13DB  00F3               	movwf	debug_line@str
  4090  13DC  3089               	movlw	high (STR_43| (0+32768))
  4091  13DD  00F4               	movwf	debug_line@str+1
  4092  13DE  3000               	movlw	0
  4093  13DF  160A  158A  21A8  160A  118A  	fcall	_debug_line
  4094                           
  4095                           ;teris_16f886.c: 987: MATRIX44* temp_cur_matrix44;
  4096                           ;teris_16f886.c: 988: MATRIX88 temp_matrix88;
  4097                           ;teris_16f886.c: 989: uint8_t res = 0;
  4098  13E4  1683               	bsf	3,5	;RP0=1, select bank1
  4099  13E5  1303               	bcf	3,6	;RP1=0, select bank1
  4100  13E6  01A4               	clrf	find_best_solution@res^(0+128)
  4101                           
  4102                           ;teris_16f886.c: 990: int8_t left_most_index, right_most_index;
  4103                           ;teris_16f886.c: 992: debug_int2(0, "g_char_info_index = (%d), num = %d\n", g_char_info_
      +                          index, g_char_info[g_char_info_index].num);
  4104  13E7  3003               	movlw	3
  4105  13E8  1283               	bcf	3,5	;RP0=0, select bank0
  4106  13E9  1303               	bcf	3,6	;RP1=0, select bank0
  4107  13EA  00D4               	movwf	??_find_best_solution
  4108  13EB  0854               	movf	??_find_best_solution,w
  4109  13EC  00F0               	movwf	___bmul@multiplicand
  4110  13ED  086E               	movf	_g_char_info_index,w
  4111  13EE  160A  158A  214E  160A  118A  	fcall	___bmul
  4112  13F3  3E02               	addlw	2
  4113  13F4  3EB9               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4114  13F5  0084               	movwf	4
  4115  13F6  1783               	bsf	3,7	;select IRP bank3
  4116  13F7  0800               	movf	0,w
  4117  13F8  1283               	bcf	3,5	;RP0=0, select bank0
  4118  13F9  1303               	bcf	3,6	;RP1=0, select bank0
  4119  13FA  00D5               	movwf	??_find_best_solution+1
  4120  13FB  01D6               	clrf	??_find_best_solution+2
  4121  13FC  0855               	movf	??_find_best_solution+1,w
  4122  13FD  1683               	bsf	3,5	;RP0=1, select bank1
  4123  13FE  1303               	bcf	3,6	;RP1=0, select bank1
  4124  13FF  00A0               	movwf	_find_best_solution$1195^(0+128)
  4125  1400  1283               	bcf	3,5	;RP0=0, select bank0
  4126  1401  1303               	bcf	3,6	;RP1=0, select bank0
  4127  1402  0856               	movf	??_find_best_solution+2,w
  4128  1403  1683               	bsf	3,5	;RP0=1, select bank1
  4129  1404  1303               	bcf	3,6	;RP1=0, select bank1
  4130  1405  00A1               	movwf	(_find_best_solution$1195+1)^(0+128)
  4131                           
  4132                           ;teris_16f886.c: 990: int8_t left_most_index, right_most_index;
  4133                           ;teris_16f886.c: 992: debug_int2(0, "g_char_info_index = (%d), num = %d\n", g_char_info_
      +                          index, g_char_info[g_char_info_index].num);
  4134  1406  3016               	movlw	low (STR_44| (0+32768))
  4135  1407  1283               	bcf	3,5	;RP0=0, select bank0
  4136  1408  1303               	bcf	3,6	;RP1=0, select bank0
  4137  1409  00BF               	movwf	debug_int2@f
  4138  140A  308B               	movlw	high (STR_44| (0+32768))
  4139  140B  00C0               	movwf	debug_int2@f+1
  4140  140C  086E               	movf	_g_char_info_index,w
  4141  140D  00D4               	movwf	??_find_best_solution
  4142  140E  01D5               	clrf	??_find_best_solution+1
  4143  140F  0854               	movf	??_find_best_solution,w
  4144  1410  00C1               	movwf	debug_int2@i1
  4145  1411  0855               	movf	??_find_best_solution+1,w
  4146  1412  00C2               	movwf	debug_int2@i1+1
  4147  1413  1683               	bsf	3,5	;RP0=1, select bank1
  4148  1414  1303               	bcf	3,6	;RP1=0, select bank1
  4149  1415  0821               	movf	(_find_best_solution$1195+1)^(0+128),w
  4150  1416  1283               	bcf	3,5	;RP0=0, select bank0
  4151  1417  1303               	bcf	3,6	;RP1=0, select bank0
  4152  1418  00C4               	movwf	debug_int2@i2+1
  4153  1419  1683               	bsf	3,5	;RP0=1, select bank1
  4154  141A  1303               	bcf	3,6	;RP1=0, select bank1
  4155  141B  0820               	movf	_find_best_solution$1195^(0+128),w
  4156  141C  1283               	bcf	3,5	;RP0=0, select bank0
  4157  141D  1303               	bcf	3,6	;RP1=0, select bank0
  4158  141E  00C3               	movwf	debug_int2@i2
  4159  141F  3000               	movlw	0
  4160  1420  160A  158A  229A  160A  118A  	fcall	_debug_int2
  4161                           
  4162                           ;teris_16f886.c: 993: for(uint8_t tem_sub_index = 0; tem_sub_index < g_char_info[g_char_
      +                          info_index].num; tem_sub_index++)
  4163  1425  1683               	bsf	3,5	;RP0=1, select bank1
  4164  1426  1303               	bcf	3,6	;RP1=0, select bank1
  4165  1427  01E7               	clrf	find_best_solution@tem_sub_index^(0+128)
  4166  1428                     l5538:	
  4167  1428  3003               	movlw	3
  4168  1429  1283               	bcf	3,5	;RP0=0, select bank0
  4169  142A  1303               	bcf	3,6	;RP1=0, select bank0
  4170  142B  00D4               	movwf	??_find_best_solution
  4171  142C  0854               	movf	??_find_best_solution,w
  4172  142D  00F0               	movwf	___bmul@multiplicand
  4173  142E  086E               	movf	_g_char_info_index,w
  4174  142F  160A  158A  214E  160A  118A  	fcall	___bmul
  4175  1434  3E02               	addlw	2
  4176  1435  3EB9               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4177  1436  0084               	movwf	4
  4178  1437  1783               	bsf	3,7	;select IRP bank3
  4179  1438  0800               	movf	0,w
  4180  1439  1683               	bsf	3,5	;RP0=1, select bank1
  4181  143A  1303               	bcf	3,6	;RP1=0, select bank1
  4182  143B  0267               	subwf	find_best_solution@tem_sub_index^(0+128),w
  4183  143C  1803               	btfsc	3,0
  4184  143D  2FBE               	goto	l5540
  4185                           
  4186                           ;teris_16f886.c: 994: {
  4187                           ;teris_16f886.c: 995: temp_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].sta
      +                          rt_index + tem_sub_index];
  4188  143E  3003               	movlw	3
  4189  143F  1283               	bcf	3,5	;RP0=0, select bank0
  4190  1440  1303               	bcf	3,6	;RP1=0, select bank0
  4191  1441  00D4               	movwf	??_find_best_solution
  4192  1442  0854               	movf	??_find_best_solution,w
  4193  1443  00F0               	movwf	___bmul@multiplicand
  4194  1444  086E               	movf	_g_char_info_index,w
  4195  1445  160A  158A  214E  160A  118A  	fcall	___bmul
  4196  144A  3EB9               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  4197  144B  0084               	movwf	4
  4198  144C  1783               	bsf	3,7	;select IRP bank3
  4199  144D  0800               	movf	0,w
  4200  144E  1683               	bsf	3,5	;RP0=1, select bank1
  4201  144F  1303               	bcf	3,6	;RP1=0, select bank1
  4202  1450  0767               	addwf	find_best_solution@tem_sub_index^(0+128),w
  4203  1451  1283               	bcf	3,5	;RP0=0, select bank0
  4204  1452  1303               	bcf	3,6	;RP1=0, select bank0
  4205  1453  00D5               	movwf	??_find_best_solution+1
  4206  1454  01D6               	clrf	??_find_best_solution+2
  4207  1455  0DD6               	rlf	??_find_best_solution+2,f
  4208  1456  0ED5               	swapf	??_find_best_solution+1,f
  4209  1457  0ED6               	swapf	??_find_best_solution+2,f
  4210  1458  30F0               	movlw	240
  4211  1459  05D6               	andwf	??_find_best_solution+2,f
  4212  145A  0855               	movf	??_find_best_solution+1,w
  4213  145B  390F               	andlw	15
  4214  145C  04D6               	iorwf	??_find_best_solution+2,f
  4215  145D  30F0               	movlw	240
  4216  145E  05D5               	andwf	??_find_best_solution+1,f
  4217  145F  3030               	movlw	low (_g_matrix44| (0+32768))
  4218  1460  00D7               	movwf	??_find_best_solution+3
  4219  1461  3088               	movlw	high (_g_matrix44| (0+32768))
  4220  1462  00D8               	movwf	??_find_best_solution+4
  4221  1463  0855               	movf	??_find_best_solution+1,w
  4222  1464  0757               	addwf	??_find_best_solution+3,w
  4223  1465  00D9               	movwf	??_find_best_solution+5
  4224  1466  0856               	movf	??_find_best_solution+2,w
  4225  1467  1803               	skipnc
  4226  1468  0A56               	incf	??_find_best_solution+2,w
  4227  1469  0758               	addwf	??_find_best_solution+4,w
  4228  146A  00DA               	movwf	??_find_best_solution+6
  4229  146B  0859               	movf	??_find_best_solution+5,w
  4230  146C  1683               	bsf	3,5	;RP0=1, select bank1
  4231  146D  1303               	bcf	3,6	;RP1=0, select bank1
  4232  146E  00E5               	movwf	find_best_solution@temp_cur_matrix44^(0+128)
  4233  146F  1283               	bcf	3,5	;RP0=0, select bank0
  4234  1470  1303               	bcf	3,6	;RP1=0, select bank0
  4235  1471  085A               	movf	??_find_best_solution+6,w
  4236  1472  1683               	bsf	3,5	;RP0=1, select bank1
  4237  1473  1303               	bcf	3,6	;RP1=0, select bank1
  4238  1474  00E6               	movwf	(find_best_solution@temp_cur_matrix44+1)^(0+128)
  4239                           
  4240                           ;teris_16f886.c: 996: left_most_index = left_most(cur_x, temp_cur_matrix44, &g_matrix88)
      +                          ;
  4241  1475  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4242  1476  1283               	bcf	3,5	;RP0=0, select bank0
  4243  1477  1303               	bcf	3,6	;RP1=0, select bank0
  4244  1478  00C4               	movwf	left_most@matrix44
  4245  1479  1683               	bsf	3,5	;RP0=1, select bank1
  4246  147A  1303               	bcf	3,6	;RP1=0, select bank1
  4247  147B  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4248  147C  1283               	bcf	3,5	;RP0=0, select bank0
  4249  147D  1303               	bcf	3,6	;RP1=0, select bank0
  4250  147E  00C5               	movwf	left_most@matrix44+1
  4251  147F  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4252  1480  00D4               	movwf	??_find_best_solution
  4253  1481  0854               	movf	??_find_best_solution,w
  4254  1482  00C6               	movwf	left_most@matrix88
  4255  1483  1683               	bsf	3,5	;RP0=1, select bank1
  4256  1484  1303               	bcf	3,6	;RP1=0, select bank1
  4257  1485  086E               	movf	_cur_x^(0+128),w
  4258  1486  160A  158A  237C  160A  118A  	fcall	_left_most
  4259  148B  1283               	bcf	3,5	;RP0=0, select bank0
  4260  148C  1303               	bcf	3,6	;RP1=0, select bank0
  4261  148D  00D5               	movwf	??_find_best_solution+1
  4262  148E  0855               	movf	??_find_best_solution+1,w
  4263  148F  1683               	bsf	3,5	;RP0=1, select bank1
  4264  1490  1303               	bcf	3,6	;RP1=0, select bank1
  4265  1491  00A2               	movwf	find_best_solution@left_most_index^(0+128)
  4266                           
  4267                           ;teris_16f886.c: 997: right_most_index = right_most(cur_x, temp_cur_matrix44, &g_matrix8
      +                          8);
  4268  1492  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4269  1493  1283               	bcf	3,5	;RP0=0, select bank0
  4270  1494  1303               	bcf	3,6	;RP1=0, select bank0
  4271  1495  00C4               	movwf	right_most@matrix44
  4272  1496  1683               	bsf	3,5	;RP0=1, select bank1
  4273  1497  1303               	bcf	3,6	;RP1=0, select bank1
  4274  1498  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4275  1499  1283               	bcf	3,5	;RP0=0, select bank0
  4276  149A  1303               	bcf	3,6	;RP1=0, select bank0
  4277  149B  00C5               	movwf	right_most@matrix44+1
  4278  149C  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4279  149D  00D4               	movwf	??_find_best_solution
  4280  149E  0854               	movf	??_find_best_solution,w
  4281  149F  00C6               	movwf	right_most@matrix88
  4282  14A0  1683               	bsf	3,5	;RP0=1, select bank1
  4283  14A1  1303               	bcf	3,6	;RP1=0, select bank1
  4284  14A2  086E               	movf	_cur_x^(0+128),w
  4285  14A3  160A  158A  23AE  160A  118A  	fcall	_right_most
  4286  14A8  1283               	bcf	3,5	;RP0=0, select bank0
  4287  14A9  1303               	bcf	3,6	;RP1=0, select bank0
  4288  14AA  00D5               	movwf	??_find_best_solution+1
  4289  14AB  0855               	movf	??_find_best_solution+1,w
  4290  14AC  1683               	bsf	3,5	;RP0=1, select bank1
  4291  14AD  1303               	bcf	3,6	;RP1=0, select bank1
  4292  14AE  00A3               	movwf	find_best_solution@right_most_index^(0+128)
  4293                           
  4294                           ;teris_16f886.c: 999: for(int8_t temp_x = left_most_index; temp_x <= right_most_index; t
      +                          emp_x++)
  4295  14AF  0822               	movf	find_best_solution@left_most_index^(0+128),w
  4296  14B0  1283               	bcf	3,5	;RP0=0, select bank0
  4297  14B1  1303               	bcf	3,6	;RP1=0, select bank0
  4298  14B2  00D4               	movwf	??_find_best_solution
  4299  14B3  0854               	movf	??_find_best_solution,w
  4300  14B4  1683               	bsf	3,5	;RP0=1, select bank1
  4301  14B5  1303               	bcf	3,6	;RP1=0, select bank1
  4302  14B6  00E8               	movwf	find_best_solution@temp_x^(0+128)
  4303  14B7                     l5534:	
  4304  14B7  0823               	movf	find_best_solution@right_most_index^(0+128),w
  4305  14B8  3A80               	xorlw	128
  4306  14B9  1283               	bcf	3,5	;RP0=0, select bank0
  4307  14BA  1303               	bcf	3,6	;RP1=0, select bank0
  4308  14BB  00D4               	movwf	??_find_best_solution
  4309  14BC  1683               	bsf	3,5	;RP0=1, select bank1
  4310  14BD  1303               	bcf	3,6	;RP1=0, select bank1
  4311  14BE  0868               	movf	find_best_solution@temp_x^(0+128),w
  4312  14BF  3A80               	xorlw	128
  4313  14C0  1283               	bcf	3,5	;RP0=0, select bank0
  4314  14C1  1303               	bcf	3,6	;RP1=0, select bank0
  4315  14C2  02D4               	subwf	??_find_best_solution,f
  4316  14C3  1C03               	btfss	3,0
  4317  14C4  2FB7               	goto	l5536
  4318                           
  4319                           ;teris_16f886.c: 1000: {
  4320                           ;teris_16f886.c: 1001: temp_y = fall_off(temp_x, cur_y, temp_cur_matrix44, &g_matrix88);
  4321  14C5  1283               	bcf	3,5	;RP0=0, select bank0
  4322  14C6  086D               	movf	_cur_y,w
  4323  14C7  00D4               	movwf	??_find_best_solution
  4324  14C8  0854               	movf	??_find_best_solution,w
  4325  14C9  00C6               	movwf	fall_off@y
  4326  14CA  1683               	bsf	3,5	;RP0=1, select bank1
  4327  14CB  1303               	bcf	3,6	;RP1=0, select bank1
  4328  14CC  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4329  14CD  1283               	bcf	3,5	;RP0=0, select bank0
  4330  14CE  1303               	bcf	3,6	;RP1=0, select bank0
  4331  14CF  00C7               	movwf	fall_off@matrix44
  4332  14D0  1683               	bsf	3,5	;RP0=1, select bank1
  4333  14D1  1303               	bcf	3,6	;RP1=0, select bank1
  4334  14D2  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4335  14D3  1283               	bcf	3,5	;RP0=0, select bank0
  4336  14D4  1303               	bcf	3,6	;RP1=0, select bank0
  4337  14D5  00C8               	movwf	fall_off@matrix44+1
  4338  14D6  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4339  14D7  00D5               	movwf	??_find_best_solution+1
  4340  14D8  0855               	movf	??_find_best_solution+1,w
  4341  14D9  00C9               	movwf	fall_off@matrix88
  4342  14DA  1683               	bsf	3,5	;RP0=1, select bank1
  4343  14DB  1303               	bcf	3,6	;RP1=0, select bank1
  4344  14DC  0868               	movf	find_best_solution@temp_x^(0+128),w
  4345  14DD  160A  118A  219A  160A  118A  	fcall	_fall_off
  4346  14E2  1283               	bcf	3,5	;RP0=0, select bank0
  4347  14E3  1303               	bcf	3,6	;RP1=0, select bank0
  4348  14E4  00D6               	movwf	??_find_best_solution+2
  4349  14E5  0856               	movf	??_find_best_solution+2,w
  4350  14E6  1683               	bsf	3,5	;RP0=1, select bank3
  4351  14E7  1703               	bsf	3,6	;RP1=1, select bank3
  4352  14E8  0098               	movwf	_temp_y^(0+384)
  4353                           
  4354                           ;teris_16f886.c: 1003: printf_console_MATRIX44(1, temp_x, temp_y, temp_cur_matrix44);
  4355  14E9  1683               	bsf	3,5	;RP0=1, select bank1
  4356  14EA  1303               	bcf	3,6	;RP1=0, select bank1
  4357  14EB  0868               	movf	find_best_solution@temp_x^(0+128),w
  4358  14EC  1283               	bcf	3,5	;RP0=0, select bank0
  4359  14ED  1303               	bcf	3,6	;RP1=0, select bank0
  4360  14EE  00D4               	movwf	??_find_best_solution
  4361  14EF  0854               	movf	??_find_best_solution,w
  4362  14F0  00F6               	movwf	printf_console_MATRIX44@x
  4363  14F1  1683               	bsf	3,5	;RP0=1, select bank3
  4364  14F2  1703               	bsf	3,6	;RP1=1, select bank3
  4365  14F3  0818               	movf	_temp_y^(0+384),w
  4366  14F4  1283               	bcf	3,5	;RP0=0, select bank0
  4367  14F5  1303               	bcf	3,6	;RP1=0, select bank0
  4368  14F6  00D5               	movwf	??_find_best_solution+1
  4369  14F7  0855               	movf	??_find_best_solution+1,w
  4370  14F8  00F7               	movwf	printf_console_MATRIX44@y
  4371  14F9  1683               	bsf	3,5	;RP0=1, select bank1
  4372  14FA  1303               	bcf	3,6	;RP1=0, select bank1
  4373  14FB  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4374  14FC  00F8               	movwf	printf_console_MATRIX44@matrix
  4375  14FD  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4376  14FE  00F9               	movwf	printf_console_MATRIX44@matrix+1
  4377  14FF  3001               	movlw	1
  4378  1500  120A  158A  26FA  160A  118A  	fcall	_printf_console_MATRIX44
  4379                           
  4380                           ;teris_16f886.c: 1004: printf_console_Screen(1);
  4381  1505  3001               	movlw	1
  4382  1506  160A  158A  2133  160A  118A  	fcall	_printf_console_Screen
  4383                           
  4384                           ;teris_16f886.c: 1006: if(is_valid(temp_x, temp_y, temp_cur_matrix44, &g_matrix88) == 0)
  4385  150B  1683               	bsf	3,5	;RP0=1, select bank3
  4386  150C  1703               	bsf	3,6	;RP1=1, select bank3
  4387  150D  0818               	movf	_temp_y^(0+384),w
  4388  150E  1283               	bcf	3,5	;RP0=0, select bank0
  4389  150F  1303               	bcf	3,6	;RP1=0, select bank0
  4390  1510  00D4               	movwf	??_find_best_solution
  4391  1511  0854               	movf	??_find_best_solution,w
  4392  1512  00C6               	movwf	is_valid@y
  4393  1513  1683               	bsf	3,5	;RP0=1, select bank1
  4394  1514  1303               	bcf	3,6	;RP1=0, select bank1
  4395  1515  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4396  1516  1283               	bcf	3,5	;RP0=0, select bank0
  4397  1517  1303               	bcf	3,6	;RP1=0, select bank0
  4398  1518  00C7               	movwf	is_valid@matrix44
  4399  1519  1683               	bsf	3,5	;RP0=1, select bank1
  4400  151A  1303               	bcf	3,6	;RP1=0, select bank1
  4401  151B  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4402  151C  1283               	bcf	3,5	;RP0=0, select bank0
  4403  151D  1303               	bcf	3,6	;RP1=0, select bank0
  4404  151E  00C8               	movwf	is_valid@matrix44+1
  4405  151F  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4406  1520  00D5               	movwf	??_find_best_solution+1
  4407  1521  0855               	movf	??_find_best_solution+1,w
  4408  1522  00C9               	movwf	is_valid@matrix88
  4409  1523  1683               	bsf	3,5	;RP0=1, select bank1
  4410  1524  1303               	bcf	3,6	;RP1=0, select bank1
  4411  1525  0868               	movf	find_best_solution@temp_x^(0+128),w
  4412  1526  160A  118A  22ED  160A  118A  	fcall	_is_valid
  4413  152B  3A00               	xorlw	0
  4414  152C  1903               	btfsc	3,2
  4415  152D  2FAE               	goto	l5532
  4416                           
  4417                           ;teris_16f886.c: 1009: }
  4418                           ;teris_16f886.c: 1010: res = 1;
  4419                           
  4420                           ;teris_16f886.c: 1007: {
  4421                           ;teris_16f886.c: 1008: continue;
  4422  152E  1683               	bsf	3,5	;RP0=1, select bank1
  4423  152F  1303               	bcf	3,6	;RP1=0, select bank1
  4424  1530  01A4               	clrf	find_best_solution@res^(0+128)
  4425  1531  0AA4               	incf	find_best_solution@res^(0+128),f
  4426                           
  4427                           ;teris_16f886.c: 1011: merge1(temp_x, temp_y, temp_cur_matrix44, &g_matrix88, &temp_matr
      +                          ix88);
  4428  1532  1683               	bsf	3,5	;RP0=1, select bank3
  4429  1533  1703               	bsf	3,6	;RP1=1, select bank3
  4430  1534  0818               	movf	_temp_y^(0+384),w
  4431  1535  1283               	bcf	3,5	;RP0=0, select bank0
  4432  1536  1303               	bcf	3,6	;RP1=0, select bank0
  4433  1537  00D4               	movwf	??_find_best_solution
  4434  1538  0854               	movf	??_find_best_solution,w
  4435  1539  00A0               	movwf	merge1@y
  4436  153A  1683               	bsf	3,5	;RP0=1, select bank1
  4437  153B  1303               	bcf	3,6	;RP1=0, select bank1
  4438  153C  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4439  153D  1283               	bcf	3,5	;RP0=0, select bank0
  4440  153E  1303               	bcf	3,6	;RP1=0, select bank0
  4441  153F  00A1               	movwf	merge1@matrix44
  4442  1540  1683               	bsf	3,5	;RP0=1, select bank1
  4443  1541  1303               	bcf	3,6	;RP1=0, select bank1
  4444  1542  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4445  1543  1283               	bcf	3,5	;RP0=0, select bank0
  4446  1544  1303               	bcf	3,6	;RP1=0, select bank0
  4447  1545  00A2               	movwf	merge1@matrix44+1
  4448  1546  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4449  1547  00D5               	movwf	??_find_best_solution+1
  4450  1548  0855               	movf	??_find_best_solution+1,w
  4451  1549  00A3               	movwf	merge1@matrix88_in
  4452  154A  30A5               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4453  154B  00D6               	movwf	??_find_best_solution+2
  4454  154C  0856               	movf	??_find_best_solution+2,w
  4455  154D  00A4               	movwf	merge1@matrix88_out
  4456  154E  1683               	bsf	3,5	;RP0=1, select bank1
  4457  154F  1303               	bcf	3,6	;RP1=0, select bank1
  4458  1550  0868               	movf	find_best_solution@temp_x^(0+128),w
  4459  1551  160A  158A  2799  160A  118A  	fcall	_merge1
  4460                           
  4461                           ;teris_16f886.c: 1012: temp_count = delete_matrix(&temp_matrix88);
  4462  1556  30A5               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4463  1557  1283               	bcf	3,5	;RP0=0, select bank0
  4464  1558  1303               	bcf	3,6	;RP1=0, select bank0
  4465  1559  00C4               	movwf	delete_matrix@matrix
  4466  155A  3000               	movlw	0
  4467  155B  00C5               	movwf	delete_matrix@matrix+1
  4468  155C  160A  158A  24B0  160A  118A  	fcall	_delete_matrix
  4469  1561  1283               	bcf	3,5	;RP0=0, select bank0
  4470  1562  1303               	bcf	3,6	;RP1=0, select bank0
  4471  1563  00D4               	movwf	??_find_best_solution
  4472  1564  0854               	movf	??_find_best_solution,w
  4473  1565  1683               	bsf	3,5	;RP0=1, select bank1
  4474  1566  1303               	bcf	3,6	;RP1=0, select bank1
  4475  1567  00EB               	movwf	_temp_count^(0+128)
  4476                           
  4477                           ;teris_16f886.c: 1013: temp_risk = evaluate(&temp_matrix88);
  4478  1568  30A5               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4479  1569  120A  158A  2678  160A  118A  	fcall	_evaluate
  4480  156E  1283               	bcf	3,5	;RP0=0, select bank0
  4481  156F  1303               	bcf	3,6	;RP1=0, select bank0
  4482  1570  0845               	movf	?_evaluate+1,w
  4483  1571  1683               	bsf	3,5	;RP0=1, select bank1
  4484  1572  1303               	bcf	3,6	;RP1=0, select bank1
  4485  1573  00EA               	movwf	(_temp_risk+1)^(0+128)
  4486  1574  1283               	bcf	3,5	;RP0=0, select bank0
  4487  1575  1303               	bcf	3,6	;RP1=0, select bank0
  4488  1576  0844               	movf	?_evaluate,w
  4489  1577  1683               	bsf	3,5	;RP0=1, select bank1
  4490  1578  1303               	bcf	3,6	;RP1=0, select bank1
  4491  1579  00E9               	movwf	_temp_risk^(0+128)
  4492                           
  4493                           ;teris_16f886.c: 1014: temp_high = get_high_after_merge(temp_y, temp_cur_matrix44);
  4494  157A  0865               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4495  157B  1283               	bcf	3,5	;RP0=0, select bank0
  4496  157C  1303               	bcf	3,6	;RP1=0, select bank0
  4497  157D  00C8               	movwf	get_high_after_merge@matrix
  4498  157E  1683               	bsf	3,5	;RP0=1, select bank1
  4499  157F  1303               	bcf	3,6	;RP1=0, select bank1
  4500  1580  0866               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4501  1581  1283               	bcf	3,5	;RP0=0, select bank0
  4502  1582  1303               	bcf	3,6	;RP1=0, select bank0
  4503  1583  00C9               	movwf	get_high_after_merge@matrix+1
  4504  1584  1683               	bsf	3,5	;RP0=1, select bank3
  4505  1585  1703               	bsf	3,6	;RP1=1, select bank3
  4506  1586  0818               	movf	_temp_y^(0+384),w
  4507  1587  160A  118A  2045  160A  118A  	fcall	_get_high_after_merge
  4508  158C  1283               	bcf	3,5	;RP0=0, select bank0
  4509  158D  1303               	bcf	3,6	;RP1=0, select bank0
  4510  158E  00D4               	movwf	??_find_best_solution
  4511  158F  0854               	movf	??_find_best_solution,w
  4512  1590  1683               	bsf	3,5	;RP0=1, select bank1
  4513  1591  1303               	bcf	3,6	;RP1=0, select bank1
  4514  1592  00EC               	movwf	_temp_high^(0+128)
  4515                           
  4516                           ;teris_16f886.c: 1015: temp_hole = get_holes_after_merge(&temp_matrix88);
  4517  1593  30A5               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4518  1594  120A  118A  2028  160A  118A  	fcall	_get_holes_after_merge
  4519  1599  1283               	bcf	3,5	;RP0=0, select bank0
  4520  159A  1303               	bcf	3,6	;RP1=0, select bank0
  4521  159B  00D4               	movwf	??_find_best_solution
  4522  159C  0854               	movf	??_find_best_solution,w
  4523  159D  1683               	bsf	3,5	;RP0=1, select bank1
  4524  159E  1303               	bcf	3,6	;RP1=0, select bank1
  4525  159F  00ED               	movwf	_temp_hole^(0+128)
  4526                           
  4527                           ;teris_16f886.c: 1017: printf_console_MATRIX88(1, &temp_matrix88);
  4528  15A0  30A5               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4529  15A1  00F6               	movwf	printf_console_MATRIX88@matrix
  4530  15A2  3000               	movlw	0
  4531  15A3  00F7               	movwf	printf_console_MATRIX88@matrix+1
  4532  15A4  3001               	movlw	1
  4533  15A5  160A  118A  20B5  160A  118A  	fcall	_printf_console_MATRIX88
  4534                           
  4535                           ;teris_16f886.c: 1019: if(temp_count > temp_pre_count)
  4536  15AA  1683               	bsf	3,5	;RP0=1, select bank1
  4537  15AB  1303               	bcf	3,6	;RP1=0, select bank1
  4538  15AC  086B               	movf	_temp_count^(0+128),w
  4539  15AD  1683               	bsf	3,5	;RP0=1, select bank3
  4540  15AE  1703               	bsf	3,6	;RP1=1, select bank3
  4541  15AF  0217               	subwf	_temp_pre_count^(0+384),w
  4542  15B0  1803               	skipnc
  4543  15B1  2DC7               	goto	l5412
  4544                           
  4545                           ;teris_16f886.c: 1020: {
  4546                           ;teris_16f886.c: 1021: debug_int2(0, "temp_count(%d) > temp_pre_count(%d)\n", temp_count
      +                          , temp_pre_count);
  4547  15B2  3061               	movlw	low (STR_45| (0+32768))
  4548  15B3  1283               	bcf	3,5	;RP0=0, select bank0
  4549  15B4  1303               	bcf	3,6	;RP1=0, select bank0
  4550  15B5  00BF               	movwf	debug_int2@f
  4551  15B6  308A               	movlw	high (STR_45| (0+32768))
  4552  15B7  00C0               	movwf	debug_int2@f+1
  4553  15B8  1683               	bsf	3,5	;RP0=1, select bank1
  4554  15B9  1303               	bcf	3,6	;RP1=0, select bank1
  4555  15BA  086B               	movf	_temp_count^(0+128),w
  4556  15BB  1283               	bcf	3,5	;RP0=0, select bank0
  4557  15BC  1303               	bcf	3,6	;RP1=0, select bank0
  4558  15BD  00D4               	movwf	??_find_best_solution
  4559  15BE  01D5               	clrf	??_find_best_solution+1
  4560  15BF  0854               	movf	??_find_best_solution,w
  4561  15C0  00C1               	movwf	debug_int2@i1
  4562  15C1  0855               	movf	??_find_best_solution+1,w
  4563  15C2  00C2               	movwf	debug_int2@i1+1
  4564  15C3  1683               	bsf	3,5	;RP0=1, select bank3
  4565  15C4  1703               	bsf	3,6	;RP1=1, select bank3
  4566  15C5  0817               	movf	_temp_pre_count^(0+384),w
  4567  15C6  2ED2               	goto	L9
  4568  15C7                     l5412:	
  4569                           ;teris_16f886.c: 1028: }
  4570                           
  4571                           ;teris_16f886.c: 1027: temp_pre_x = temp_x;
  4572                           
  4573                           ;teris_16f886.c: 1026: tem_pre_sub_index = tem_sub_index;
  4574                           
  4575                           ;teris_16f886.c: 1025: temp_pre_hole = temp_hole;
  4576                           
  4577                           ;teris_16f886.c: 1024: temp_pre_high = temp_high;
  4578                           
  4579                           ;teris_16f886.c: 1023: temp_pre_risk = temp_risk;
  4580                           
  4581                           ;teris_16f886.c: 1022: temp_pre_count = temp_count;
  4582                           
  4583                           
  4584                           ;teris_16f886.c: 1029: else if(temp_count == temp_pre_count)
  4585  15C7  1683               	bsf	3,5	;RP0=1, select bank1
  4586  15C8  1303               	bcf	3,6	;RP1=0, select bank1
  4587  15C9  086B               	movf	_temp_count^(0+128),w
  4588  15CA  1683               	bsf	3,5	;RP0=1, select bank3
  4589  15CB  1703               	bsf	3,6	;RP1=1, select bank3
  4590  15CC  0617               	xorwf	_temp_pre_count^(0+384),w
  4591  15CD  1D03               	skipz
  4592  15CE  2FAE               	goto	l5532
  4593                           
  4594                           ;teris_16f886.c: 1030: {
  4595                           ;teris_16f886.c: 1031: if(get_high(&g_matrix88) <= 8/2 + 1)
  4596  15CF  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4597  15D0  160A  158A  24F9  160A  118A  	fcall	_get_high
  4598  15D5  1283               	bcf	3,5	;RP0=0, select bank0
  4599  15D6  1303               	bcf	3,6	;RP1=0, select bank0
  4600  15D7  00D4               	movwf	??_find_best_solution
  4601  15D8  3006               	movlw	6
  4602  15D9  0254               	subwf	??_find_best_solution,w
  4603  15DA  1803               	skipnc
  4604  15DB  2E86               	goto	l5474
  4605                           
  4606                           ;teris_16f886.c: 1032: {
  4607                           ;teris_16f886.c: 1033: debug_int1(0, "height <= (%d)\n", 8/2 + 1);
  4608  15DC  3013               	movlw	low (STR_46| (0+32768))
  4609  15DD  00BF               	movwf	debug_int1@f
  4610  15DE  308E               	movlw	high (STR_46| (0+32768))
  4611  15DF  00C0               	movwf	debug_int1@f+1
  4612  15E0  3005               	movlw	5
  4613  15E1  00C1               	movwf	debug_int1@i
  4614  15E2  3000               	movlw	0
  4615  15E3  00C2               	movwf	debug_int1@i+1
  4616  15E4  3000               	movlw	0
  4617  15E5  120A  118A  2003  160A  118A  	fcall	_debug_int1
  4618                           
  4619                           ;teris_16f886.c: 1034: debug_int2(0, "temp_count(%d) == temp_pre_count(%d)\n", temp_coun
      +                          t, temp_pre_count);
  4620  15EA  303B               	movlw	low (STR_47| (0+32768))
  4621  15EB  1283               	bcf	3,5	;RP0=0, select bank0
  4622  15EC  1303               	bcf	3,6	;RP1=0, select bank0
  4623  15ED  00BF               	movwf	debug_int2@f
  4624  15EE  308A               	movlw	high (STR_47| (0+32768))
  4625  15EF  00C0               	movwf	debug_int2@f+1
  4626  15F0  1683               	bsf	3,5	;RP0=1, select bank1
  4627  15F1  1303               	bcf	3,6	;RP1=0, select bank1
  4628  15F2  086B               	movf	_temp_count^(0+128),w
  4629  15F3  1283               	bcf	3,5	;RP0=0, select bank0
  4630  15F4  1303               	bcf	3,6	;RP1=0, select bank0
  4631  15F5  00D4               	movwf	??_find_best_solution
  4632  15F6  01D5               	clrf	??_find_best_solution+1
  4633  15F7  0854               	movf	??_find_best_solution,w
  4634  15F8  00C1               	movwf	debug_int2@i1
  4635  15F9  0855               	movf	??_find_best_solution+1,w
  4636  15FA  00C2               	movwf	debug_int2@i1+1
  4637  15FB  1683               	bsf	3,5	;RP0=1, select bank3
  4638  15FC  1703               	bsf	3,6	;RP1=1, select bank3
  4639  15FD  0817               	movf	_temp_pre_count^(0+384),w
  4640  15FE  1283               	bcf	3,5	;RP0=0, select bank0
  4641  15FF  1303               	bcf	3,6	;RP1=0, select bank0
  4642  1600  00D6               	movwf	??_find_best_solution+2
  4643  1601  01D7               	clrf	??_find_best_solution+3
  4644  1602  0856               	movf	??_find_best_solution+2,w
  4645  1603  00C3               	movwf	debug_int2@i2
  4646  1604  0857               	movf	??_find_best_solution+3,w
  4647  1605  00C4               	movwf	debug_int2@i2+1
  4648  1606  3000               	movlw	0
  4649  1607  160A  158A  229A  160A  118A  	fcall	_debug_int2
  4650                           
  4651                           ;teris_16f886.c: 1035: if(temp_risk < temp_pre_risk)
  4652  160C  1683               	bsf	3,5	;RP0=1, select bank3
  4653  160D  1703               	bsf	3,6	;RP1=1, select bank3
  4654  160E  0859               	movf	(_temp_pre_risk+1)^(0+384),w
  4655  160F  1683               	bsf	3,5	;RP0=1, select bank1
  4656  1610  1303               	bcf	3,6	;RP1=0, select bank1
  4657  1611  026A               	subwf	(_temp_risk+1)^(0+128),w
  4658  1612  1D03               	skipz
  4659  1613  2E1A               	goto	u8025
  4660  1614  1683               	bsf	3,5	;RP0=1, select bank3
  4661  1615  1703               	bsf	3,6	;RP1=1, select bank3
  4662  1616  0858               	movf	_temp_pre_risk^(0+384),w
  4663  1617  1683               	bsf	3,5	;RP0=1, select bank1
  4664  1618  1303               	bcf	3,6	;RP1=0, select bank1
  4665  1619  0269               	subwf	_temp_risk^(0+128),w
  4666  161A                     u8025:	
  4667  161A  1C03               	btfss	3,0
  4668  161B  2F50               	goto	L6
  4669                           
  4670                           ;teris_16f886.c: 1045: else if(temp_risk == temp_pre_risk)
  4671                           
  4672                           ;teris_16f886.c: 1044: }
  4673                           
  4674                           ;teris_16f886.c: 1043: temp_pre_x = temp_x;
  4675                           
  4676                           ;teris_16f886.c: 1042: tem_pre_sub_index = tem_sub_index;
  4677                           
  4678                           ;teris_16f886.c: 1041: temp_pre_hole = temp_hole;
  4679                           
  4680                           ;teris_16f886.c: 1040: temp_pre_high = temp_high;
  4681                           
  4682                           ;teris_16f886.c: 1039: temp_pre_risk = temp_risk;
  4683                           
  4684                           ;teris_16f886.c: 1038: temp_pre_count = temp_count;
  4685                           
  4686                           ;teris_16f886.c: 1036: {
  4687                           ;teris_16f886.c: 1037: debug_int2(0, "temp_risk(%d) < temp_pre_risk(%d)\n", temp_risk, t
      +                          emp_pre_risk);
  4688  161C  1683               	bsf	3,5	;RP0=1, select bank3
  4689  161D  1703               	bsf	3,6	;RP1=1, select bank3
  4690  161E  0859               	movf	(_temp_pre_risk+1)^(0+384),w
  4691  161F  1683               	bsf	3,5	;RP0=1, select bank1
  4692  1620  1303               	bcf	3,6	;RP1=0, select bank1
  4693  1621  066A               	xorwf	(_temp_risk+1)^(0+128),w
  4694  1622  1D03               	skipz
  4695  1623  2E2A               	goto	u8035
  4696  1624  1683               	bsf	3,5	;RP0=1, select bank3
  4697  1625  1703               	bsf	3,6	;RP1=1, select bank3
  4698  1626  0858               	movf	_temp_pre_risk^(0+384),w
  4699  1627  1683               	bsf	3,5	;RP0=1, select bank1
  4700  1628  1303               	bcf	3,6	;RP1=0, select bank1
  4701  1629  0669               	xorwf	_temp_risk^(0+128),w
  4702  162A                     u8035:	
  4703  162A  1D03               	skipz
  4704  162B  2FAE               	goto	l5532
  4705                           
  4706                           ;teris_16f886.c: 1046: {
  4707                           ;teris_16f886.c: 1047: debug_int2(0, "temp_risk(%d) == temp_pre_risk(%d)\n", temp_risk, 
      +                          temp_pre_risk);
  4708  162C  30CE               	movlw	low (STR_49| (0+32768))
  4709  162D  1283               	bcf	3,5	;RP0=0, select bank0
  4710  162E  1303               	bcf	3,6	;RP1=0, select bank0
  4711  162F  00BF               	movwf	debug_int2@f
  4712  1630  308A               	movlw	high (STR_49| (0+32768))
  4713  1631  00C0               	movwf	debug_int2@f+1
  4714  1632  1683               	bsf	3,5	;RP0=1, select bank1
  4715  1633  1303               	bcf	3,6	;RP1=0, select bank1
  4716  1634  086A               	movf	(_temp_risk+1)^(0+128),w
  4717  1635  1283               	bcf	3,5	;RP0=0, select bank0
  4718  1636  1303               	bcf	3,6	;RP1=0, select bank0
  4719  1637  00C2               	movwf	debug_int2@i1+1
  4720  1638  1683               	bsf	3,5	;RP0=1, select bank1
  4721  1639  1303               	bcf	3,6	;RP1=0, select bank1
  4722  163A  0869               	movf	_temp_risk^(0+128),w
  4723  163B  1283               	bcf	3,5	;RP0=0, select bank0
  4724  163C  1303               	bcf	3,6	;RP1=0, select bank0
  4725  163D  00C1               	movwf	debug_int2@i1
  4726  163E  1683               	bsf	3,5	;RP0=1, select bank3
  4727  163F  1703               	bsf	3,6	;RP1=1, select bank3
  4728  1640  0859               	movf	(_temp_pre_risk+1)^(0+384),w
  4729  1641  1283               	bcf	3,5	;RP0=0, select bank0
  4730  1642  1303               	bcf	3,6	;RP1=0, select bank0
  4731  1643  00C4               	movwf	debug_int2@i2+1
  4732  1644  1683               	bsf	3,5	;RP0=1, select bank3
  4733  1645  1703               	bsf	3,6	;RP1=1, select bank3
  4734  1646  0858               	movf	_temp_pre_risk^(0+384),w
  4735  1647  1283               	bcf	3,5	;RP0=0, select bank0
  4736  1648  1303               	bcf	3,6	;RP1=0, select bank0
  4737  1649  00C3               	movwf	debug_int2@i2
  4738  164A  3000               	movlw	0
  4739  164B  160A  158A  229A  160A  118A  	fcall	_debug_int2
  4740                           
  4741                           ;teris_16f886.c: 1048: if(temp_high < temp_pre_high)
  4742  1650  1683               	bsf	3,5	;RP0=1, select bank1
  4743  1651  1303               	bcf	3,6	;RP1=0, select bank1
  4744  1652  086F               	movf	_temp_pre_high^(0+128),w
  4745  1653  026C               	subwf	_temp_high^(0+128),w
  4746  1654  1C03               	btfss	3,0
  4747  1655  2EBE               	goto	L10
  4748                           
  4749                           ;teris_16f886.c: 1058: else if(temp_high == temp_pre_high)
  4750                           
  4751                           ;teris_16f886.c: 1057: }
  4752                           
  4753                           ;teris_16f886.c: 1056: temp_pre_x = temp_x;
  4754                           
  4755                           ;teris_16f886.c: 1055: tem_pre_sub_index = tem_sub_index;
  4756                           
  4757                           ;teris_16f886.c: 1054: temp_pre_hole = temp_hole;
  4758                           
  4759                           ;teris_16f886.c: 1053: temp_pre_high = temp_high;
  4760                           
  4761                           ;teris_16f886.c: 1052: temp_pre_risk = temp_risk;
  4762                           
  4763                           ;teris_16f886.c: 1051: temp_pre_count = temp_count;
  4764                           
  4765                           ;teris_16f886.c: 1049: {
  4766                           ;teris_16f886.c: 1050: debug_int2(0, "temp_high(%d) < temp_pre_high(%d)\n", temp_high, t
      +                          emp_pre_high);
  4767  1656  1303               	bcf	3,6	;RP1=0, select bank1
  4768  1657  086C               	movf	_temp_high^(0+128),w
  4769  1658  066F               	xorwf	_temp_pre_high^(0+128),w
  4770  1659  1D03               	skipz
  4771  165A  2FAE               	goto	l5532
  4772                           
  4773                           ;teris_16f886.c: 1059: {
  4774                           ;teris_16f886.c: 1060: debug_int2(0, "temp_high(%d) == temp_pre_high(%d)\n", temp_high, 
      +                          temp_pre_high);
  4775  165B  30AA               	movlw	low (STR_51| (0+32768))
  4776  165C  1283               	bcf	3,5	;RP0=0, select bank0
  4777  165D  1303               	bcf	3,6	;RP1=0, select bank0
  4778  165E  00BF               	movwf	debug_int2@f
  4779  165F  308A               	movlw	high (STR_51| (0+32768))
  4780  1660  00C0               	movwf	debug_int2@f+1
  4781  1661  1683               	bsf	3,5	;RP0=1, select bank1
  4782  1662  1303               	bcf	3,6	;RP1=0, select bank1
  4783  1663  086C               	movf	_temp_high^(0+128),w
  4784  1664  1283               	bcf	3,5	;RP0=0, select bank0
  4785  1665  1303               	bcf	3,6	;RP1=0, select bank0
  4786  1666  00D4               	movwf	??_find_best_solution
  4787  1667  01D5               	clrf	??_find_best_solution+1
  4788  1668  0854               	movf	??_find_best_solution,w
  4789  1669  00C1               	movwf	debug_int2@i1
  4790  166A  0855               	movf	??_find_best_solution+1,w
  4791  166B  00C2               	movwf	debug_int2@i1+1
  4792  166C  1683               	bsf	3,5	;RP0=1, select bank1
  4793  166D  1303               	bcf	3,6	;RP1=0, select bank1
  4794  166E  086F               	movf	_temp_pre_high^(0+128),w
  4795  166F  1283               	bcf	3,5	;RP0=0, select bank0
  4796  1670  1303               	bcf	3,6	;RP1=0, select bank0
  4797  1671  00D6               	movwf	??_find_best_solution+2
  4798  1672  01D7               	clrf	??_find_best_solution+3
  4799  1673  0856               	movf	??_find_best_solution+2,w
  4800  1674  00C3               	movwf	debug_int2@i2
  4801  1675  0857               	movf	??_find_best_solution+3,w
  4802  1676  00C4               	movwf	debug_int2@i2+1
  4803  1677  3000               	movlw	0
  4804  1678  160A  158A  229A  160A  118A  	fcall	_debug_int2
  4805                           
  4806                           ;teris_16f886.c: 1061: if(temp_hole < temp_pre_hole)
  4807  167D  1283               	bcf	3,5	;RP0=0, select bank0
  4808  167E  1303               	bcf	3,6	;RP1=0, select bank0
  4809  167F  086F               	movf	_temp_pre_hole,w
  4810  1680  1683               	bsf	3,5	;RP0=1, select bank1
  4811  1681  1303               	bcf	3,6	;RP1=0, select bank1
  4812  1682  026D               	subwf	_temp_hole^(0+128),w
  4813  1683  1803               	skipnc
  4814  1684  2FAE               	goto	l5532
  4815  1685  2F04               	goto	L7
  4816  1686                     l5474:	
  4817                           ;teris_16f886.c: 1070: }
  4818                           ;teris_16f886.c: 1072: }
  4819                           ;teris_16f886.c: 1074: }
  4820                           ;teris_16f886.c: 1075: }
  4821                           
  4822                           ;teris_16f886.c: 1069: temp_pre_x = temp_x;
  4823                           
  4824                           ;teris_16f886.c: 1068: tem_pre_sub_index = tem_sub_index;
  4825                           
  4826                           ;teris_16f886.c: 1067: temp_pre_hole = temp_hole;
  4827                           
  4828                           ;teris_16f886.c: 1066: temp_pre_high = temp_high;
  4829                           
  4830                           ;teris_16f886.c: 1065: temp_pre_risk = temp_risk;
  4831                           
  4832                           ;teris_16f886.c: 1064: temp_pre_count = temp_count;
  4833                           
  4834                           ;teris_16f886.c: 1062: {
  4835                           ;teris_16f886.c: 1063: debug_int2(0, "temp_hole(%d) < temp_pre_hole(%d)\n", temp_hole, t
      +                          emp_pre_hole);
  4836                           
  4837                           
  4838                           ;teris_16f886.c: 1076: else
  4839                           ;teris_16f886.c: 1077: {
  4840                           ;teris_16f886.c: 1078: debug_int1(0, "WARNING height > (%d)\n", 8/2 + 1);
  4841  1686  3051               	movlw	low (STR_53| (0+32768))
  4842  1687  1283               	bcf	3,5	;RP0=0, select bank0
  4843  1688  1303               	bcf	3,6	;RP1=0, select bank0
  4844  1689  00BF               	movwf	debug_int1@f
  4845  168A  308D               	movlw	high (STR_53| (0+32768))
  4846  168B  00C0               	movwf	debug_int1@f+1
  4847  168C  3005               	movlw	5
  4848  168D  00C1               	movwf	debug_int1@i
  4849  168E  3000               	movlw	0
  4850  168F  00C2               	movwf	debug_int1@i+1
  4851  1690  3000               	movlw	0
  4852  1691  120A  118A  2003  160A  118A  	fcall	_debug_int1
  4853                           
  4854                           ;teris_16f886.c: 1079: debug_int2(0, "temp_high = %d, temp_pre_high = %d\n", temp_high, 
      +                          temp_pre_high);
  4855  1696  30F2               	movlw	low (STR_54| (0+32768))
  4856  1697  1283               	bcf	3,5	;RP0=0, select bank0
  4857  1698  1303               	bcf	3,6	;RP1=0, select bank0
  4858  1699  00BF               	movwf	debug_int2@f
  4859  169A  308A               	movlw	high (STR_54| (0+32768))
  4860  169B  00C0               	movwf	debug_int2@f+1
  4861  169C  1683               	bsf	3,5	;RP0=1, select bank1
  4862  169D  1303               	bcf	3,6	;RP1=0, select bank1
  4863  169E  086C               	movf	_temp_high^(0+128),w
  4864  169F  1283               	bcf	3,5	;RP0=0, select bank0
  4865  16A0  1303               	bcf	3,6	;RP1=0, select bank0
  4866  16A1  00D4               	movwf	??_find_best_solution
  4867  16A2  01D5               	clrf	??_find_best_solution+1
  4868  16A3  0854               	movf	??_find_best_solution,w
  4869  16A4  00C1               	movwf	debug_int2@i1
  4870  16A5  0855               	movf	??_find_best_solution+1,w
  4871  16A6  00C2               	movwf	debug_int2@i1+1
  4872  16A7  1683               	bsf	3,5	;RP0=1, select bank1
  4873  16A8  1303               	bcf	3,6	;RP1=0, select bank1
  4874  16A9  086F               	movf	_temp_pre_high^(0+128),w
  4875  16AA  1283               	bcf	3,5	;RP0=0, select bank0
  4876  16AB  1303               	bcf	3,6	;RP1=0, select bank0
  4877  16AC  00D6               	movwf	??_find_best_solution+2
  4878  16AD  01D7               	clrf	??_find_best_solution+3
  4879  16AE  0856               	movf	??_find_best_solution+2,w
  4880  16AF  00C3               	movwf	debug_int2@i2
  4881  16B0  0857               	movf	??_find_best_solution+3,w
  4882  16B1  00C4               	movwf	debug_int2@i2+1
  4883  16B2  3000               	movlw	0
  4884  16B3  160A  158A  229A  160A  118A  	fcall	_debug_int2
  4885                           
  4886                           ;teris_16f886.c: 1080: if(temp_high < temp_pre_high)
  4887  16B8  1683               	bsf	3,5	;RP0=1, select bank1
  4888  16B9  1303               	bcf	3,6	;RP1=0, select bank1
  4889  16BA  086F               	movf	_temp_pre_high^(0+128),w
  4890  16BB  026C               	subwf	_temp_high^(0+128),w
  4891  16BC  1803               	skipnc
  4892  16BD  2ED5               	goto	l5492
  4893  16BE                     L10:	
  4894                           
  4895                           ;teris_16f886.c: 1081: {
  4896                           ;teris_16f886.c: 1082: debug_int2(0, "temp_high(%d) < temp_pre_high(%d)\n", temp_high, t
      +                          emp_pre_high);
  4897  16BE  305D               	movlw	low (STR_50| (0+32768))
  4898  16BF  1283               	bcf	3,5	;RP0=0, select bank0
  4899  16C0  1303               	bcf	3,6	;RP1=0, select bank0
  4900  16C1  00BF               	movwf	debug_int2@f
  4901  16C2  308B               	movlw	high (STR_50| (0+32768))
  4902  16C3  00C0               	movwf	debug_int2@f+1
  4903  16C4  1683               	bsf	3,5	;RP0=1, select bank1
  4904  16C5  1303               	bcf	3,6	;RP1=0, select bank1
  4905  16C6  086C               	movf	_temp_high^(0+128),w
  4906  16C7  1283               	bcf	3,5	;RP0=0, select bank0
  4907  16C8  1303               	bcf	3,6	;RP1=0, select bank0
  4908  16C9  00D4               	movwf	??_find_best_solution
  4909  16CA  01D5               	clrf	??_find_best_solution+1
  4910  16CB  0854               	movf	??_find_best_solution,w
  4911  16CC  00C1               	movwf	debug_int2@i1
  4912  16CD  0855               	movf	??_find_best_solution+1,w
  4913  16CE  00C2               	movwf	debug_int2@i1+1
  4914  16CF  1683               	bsf	3,5	;RP0=1, select bank1
  4915  16D0  1303               	bcf	3,6	;RP1=0, select bank1
  4916  16D1  086F               	movf	_temp_pre_high^(0+128),w
  4917  16D2                     L9:	
  4918  16D2  1283               	bcf	3,5	;RP0=0, select bank0
  4919  16D3  1303               	bcf	3,6	;RP1=0, select bank0
  4920  16D4  2F16               	goto	L5
  4921  16D5                     l5492:	
  4922                           ;teris_16f886.c: 1089: }
  4923                           
  4924                           ;teris_16f886.c: 1088: temp_pre_x = temp_x;
  4925                           
  4926                           ;teris_16f886.c: 1087: tem_pre_sub_index = tem_sub_index;
  4927                           
  4928                           ;teris_16f886.c: 1086: temp_pre_hole = temp_hole;
  4929                           
  4930                           ;teris_16f886.c: 1085: temp_pre_high = temp_high;
  4931                           
  4932                           ;teris_16f886.c: 1084: temp_pre_risk = temp_risk;
  4933                           
  4934                           ;teris_16f886.c: 1083: temp_pre_count = temp_count;
  4935                           
  4936                           
  4937                           ;teris_16f886.c: 1090: else if(temp_high == temp_pre_high)
  4938  16D5  1303               	bcf	3,6	;RP1=0, select bank1
  4939  16D6  086C               	movf	_temp_high^(0+128),w
  4940  16D7  066F               	xorwf	_temp_pre_high^(0+128),w
  4941  16D8  1D03               	skipz
  4942  16D9  2FAE               	goto	l5532
  4943                           
  4944                           ;teris_16f886.c: 1091: {
  4945                           ;teris_16f886.c: 1092: debug_int2(0, "temp_high(%d) == temp_pre_high(%d)\n", temp_high, 
      +                          temp_pre_high);
  4946  16DA  30AA               	movlw	low (STR_51| (0+32768))
  4947  16DB  1283               	bcf	3,5	;RP0=0, select bank0
  4948  16DC  1303               	bcf	3,6	;RP1=0, select bank0
  4949  16DD  00BF               	movwf	debug_int2@f
  4950  16DE  308A               	movlw	high (STR_51| (0+32768))
  4951  16DF  00C0               	movwf	debug_int2@f+1
  4952  16E0  1683               	bsf	3,5	;RP0=1, select bank1
  4953  16E1  1303               	bcf	3,6	;RP1=0, select bank1
  4954  16E2  086C               	movf	_temp_high^(0+128),w
  4955  16E3  1283               	bcf	3,5	;RP0=0, select bank0
  4956  16E4  1303               	bcf	3,6	;RP1=0, select bank0
  4957  16E5  00D4               	movwf	??_find_best_solution
  4958  16E6  01D5               	clrf	??_find_best_solution+1
  4959  16E7  0854               	movf	??_find_best_solution,w
  4960  16E8  00C1               	movwf	debug_int2@i1
  4961  16E9  0855               	movf	??_find_best_solution+1,w
  4962  16EA  00C2               	movwf	debug_int2@i1+1
  4963  16EB  1683               	bsf	3,5	;RP0=1, select bank1
  4964  16EC  1303               	bcf	3,6	;RP1=0, select bank1
  4965  16ED  086F               	movf	_temp_pre_high^(0+128),w
  4966  16EE  1283               	bcf	3,5	;RP0=0, select bank0
  4967  16EF  1303               	bcf	3,6	;RP1=0, select bank0
  4968  16F0  00D6               	movwf	??_find_best_solution+2
  4969  16F1  01D7               	clrf	??_find_best_solution+3
  4970  16F2  0856               	movf	??_find_best_solution+2,w
  4971  16F3  00C3               	movwf	debug_int2@i2
  4972  16F4  0857               	movf	??_find_best_solution+3,w
  4973  16F5  00C4               	movwf	debug_int2@i2+1
  4974  16F6  3000               	movlw	0
  4975  16F7  160A  158A  229A  160A  118A  	fcall	_debug_int2
  4976                           
  4977                           ;teris_16f886.c: 1093: if(temp_hole < temp_pre_hole)
  4978  16FC  1283               	bcf	3,5	;RP0=0, select bank0
  4979  16FD  1303               	bcf	3,6	;RP1=0, select bank0
  4980  16FE  086F               	movf	_temp_pre_hole,w
  4981  16FF  1683               	bsf	3,5	;RP0=1, select bank1
  4982  1700  1303               	bcf	3,6	;RP1=0, select bank1
  4983  1701  026D               	subwf	_temp_hole^(0+128),w
  4984  1702  1803               	skipnc
  4985  1703  2F1D               	goto	l5512
  4986  1704                     L7:	
  4987                           
  4988                           ;teris_16f886.c: 1094: {
  4989                           ;teris_16f886.c: 1095: debug_int2(0, "temp_hole(%d) < temp_pre_hole(%d)\n", temp_hole, t
      +                          emp_pre_hole);
  4990  1704  303A               	movlw	low (STR_52| (0+32768))
  4991  1705  1283               	bcf	3,5	;RP0=0, select bank0
  4992  1706  1303               	bcf	3,6	;RP1=0, select bank0
  4993  1707  00BF               	movwf	debug_int2@f
  4994  1708  308B               	movlw	high (STR_52| (0+32768))
  4995  1709  00C0               	movwf	debug_int2@f+1
  4996  170A  1683               	bsf	3,5	;RP0=1, select bank1
  4997  170B  1303               	bcf	3,6	;RP1=0, select bank1
  4998  170C  086D               	movf	_temp_hole^(0+128),w
  4999  170D  1283               	bcf	3,5	;RP0=0, select bank0
  5000  170E  1303               	bcf	3,6	;RP1=0, select bank0
  5001  170F  00D4               	movwf	??_find_best_solution
  5002  1710  01D5               	clrf	??_find_best_solution+1
  5003  1711  0854               	movf	??_find_best_solution,w
  5004  1712  00C1               	movwf	debug_int2@i1
  5005  1713  0855               	movf	??_find_best_solution+1,w
  5006  1714  00C2               	movwf	debug_int2@i1+1
  5007  1715  086F               	movf	_temp_pre_hole,w
  5008  1716                     L5:	
  5009  1716  00D6               	movwf	??_find_best_solution+2
  5010  1717  01D7               	clrf	??_find_best_solution+3
  5011  1718  0856               	movf	??_find_best_solution+2,w
  5012  1719  00C3               	movwf	debug_int2@i2
  5013  171A  0857               	movf	??_find_best_solution+3,w
  5014  171B  00C4               	movwf	debug_int2@i2+1
  5015  171C  2F6E               	goto	L2
  5016  171D                     l5512:	
  5017                           ;teris_16f886.c: 1102: }
  5018                           
  5019                           ;teris_16f886.c: 1101: temp_pre_x = temp_x;
  5020                           
  5021                           ;teris_16f886.c: 1100: tem_pre_sub_index = tem_sub_index;
  5022                           
  5023                           ;teris_16f886.c: 1099: temp_pre_hole = temp_hole;
  5024                           
  5025                           ;teris_16f886.c: 1098: temp_pre_high = temp_high;
  5026                           
  5027                           ;teris_16f886.c: 1097: temp_pre_risk = temp_risk;
  5028                           
  5029                           ;teris_16f886.c: 1096: temp_pre_count = temp_count;
  5030                           
  5031                           
  5032                           ;teris_16f886.c: 1103: else if(temp_hole == temp_pre_hole)
  5033  171D  1303               	bcf	3,6	;RP1=0, select bank1
  5034  171E  086D               	movf	_temp_hole^(0+128),w
  5035  171F  1283               	bcf	3,5	;RP0=0, select bank0
  5036  1720  1303               	bcf	3,6	;RP1=0, select bank0
  5037  1721  066F               	xorwf	_temp_pre_hole,w
  5038  1722  1D03               	skipz
  5039  1723  2FAE               	goto	l5532
  5040                           
  5041                           ;teris_16f886.c: 1104: {
  5042                           ;teris_16f886.c: 1105: debug_int2(0, "temp_hole(%d) == temp_pre_hole(%d)\n", temp_hole, 
      +                          temp_pre_hole);
  5043  1724  3086               	movlw	low (STR_58| (0+32768))
  5044  1725  00BF               	movwf	debug_int2@f
  5045  1726  308A               	movlw	high (STR_58| (0+32768))
  5046  1727  00C0               	movwf	debug_int2@f+1
  5047  1728  1683               	bsf	3,5	;RP0=1, select bank1
  5048  1729  1303               	bcf	3,6	;RP1=0, select bank1
  5049  172A  086D               	movf	_temp_hole^(0+128),w
  5050  172B  1283               	bcf	3,5	;RP0=0, select bank0
  5051  172C  1303               	bcf	3,6	;RP1=0, select bank0
  5052  172D  00D4               	movwf	??_find_best_solution
  5053  172E  01D5               	clrf	??_find_best_solution+1
  5054  172F  0854               	movf	??_find_best_solution,w
  5055  1730  00C1               	movwf	debug_int2@i1
  5056  1731  0855               	movf	??_find_best_solution+1,w
  5057  1732  00C2               	movwf	debug_int2@i1+1
  5058  1733  086F               	movf	_temp_pre_hole,w
  5059  1734  00D6               	movwf	??_find_best_solution+2
  5060  1735  01D7               	clrf	??_find_best_solution+3
  5061  1736  0856               	movf	??_find_best_solution+2,w
  5062  1737  00C3               	movwf	debug_int2@i2
  5063  1738  0857               	movf	??_find_best_solution+3,w
  5064  1739  00C4               	movwf	debug_int2@i2+1
  5065  173A  3000               	movlw	0
  5066  173B  160A  158A  229A  160A  118A  	fcall	_debug_int2
  5067                           
  5068                           ;teris_16f886.c: 1106: if(temp_risk < temp_pre_risk)
  5069  1740  1683               	bsf	3,5	;RP0=1, select bank3
  5070  1741  1703               	bsf	3,6	;RP1=1, select bank3
  5071  1742  0859               	movf	(_temp_pre_risk+1)^(0+384),w
  5072  1743  1683               	bsf	3,5	;RP0=1, select bank1
  5073  1744  1303               	bcf	3,6	;RP1=0, select bank1
  5074  1745  026A               	subwf	(_temp_risk+1)^(0+128),w
  5075  1746  1D03               	skipz
  5076  1747  2F4E               	goto	u8115
  5077  1748  1683               	bsf	3,5	;RP0=1, select bank3
  5078  1749  1703               	bsf	3,6	;RP1=1, select bank3
  5079  174A  0858               	movf	_temp_pre_risk^(0+384),w
  5080  174B  1683               	bsf	3,5	;RP0=1, select bank1
  5081  174C  1303               	bcf	3,6	;RP1=0, select bank1
  5082  174D  0269               	subwf	_temp_risk^(0+128),w
  5083  174E                     u8115:	
  5084  174E  1803               	skipnc
  5085  174F  2FAE               	goto	l5532
  5086  1750                     L6:	
  5087                           
  5088                           ;teris_16f886.c: 1107: {
  5089                           ;teris_16f886.c: 1108: debug_int2(0, "temp_risk(%d) < temp_pre_risk(%d)\n", temp_risk, t
      +                          emp_pre_risk);
  5090  1750  3080               	movlw	low (STR_48| (0+32768))
  5091  1751  1283               	bcf	3,5	;RP0=0, select bank0
  5092  1752  1303               	bcf	3,6	;RP1=0, select bank0
  5093  1753  00BF               	movwf	debug_int2@f
  5094  1754  308B               	movlw	high (STR_48| (0+32768))
  5095  1755  00C0               	movwf	debug_int2@f+1
  5096  1756  1683               	bsf	3,5	;RP0=1, select bank1
  5097  1757  1303               	bcf	3,6	;RP1=0, select bank1
  5098  1758  086A               	movf	(_temp_risk+1)^(0+128),w
  5099  1759  1283               	bcf	3,5	;RP0=0, select bank0
  5100  175A  1303               	bcf	3,6	;RP1=0, select bank0
  5101  175B  00C2               	movwf	debug_int2@i1+1
  5102  175C  1683               	bsf	3,5	;RP0=1, select bank1
  5103  175D  1303               	bcf	3,6	;RP1=0, select bank1
  5104  175E  0869               	movf	_temp_risk^(0+128),w
  5105  175F  1283               	bcf	3,5	;RP0=0, select bank0
  5106  1760  1303               	bcf	3,6	;RP1=0, select bank0
  5107  1761  00C1               	movwf	debug_int2@i1
  5108  1762  1683               	bsf	3,5	;RP0=1, select bank3
  5109  1763  1703               	bsf	3,6	;RP1=1, select bank3
  5110  1764  0859               	movf	(_temp_pre_risk+1)^(0+384),w
  5111  1765  1283               	bcf	3,5	;RP0=0, select bank0
  5112  1766  1303               	bcf	3,6	;RP1=0, select bank0
  5113  1767  00C4               	movwf	debug_int2@i2+1
  5114  1768  1683               	bsf	3,5	;RP0=1, select bank3
  5115  1769  1703               	bsf	3,6	;RP1=1, select bank3
  5116  176A  0858               	movf	_temp_pre_risk^(0+384),w
  5117  176B  1283               	bcf	3,5	;RP0=0, select bank0
  5118  176C  1303               	bcf	3,6	;RP1=0, select bank0
  5119  176D  00C3               	movwf	debug_int2@i2
  5120  176E                     L2:	
  5121  176E  3000               	movlw	0
  5122  176F  160A  158A  229A  160A  118A  	fcall	_debug_int2
  5123                           
  5124                           ;teris_16f886.c: 1109: temp_pre_count = temp_count;
  5125  1774  1683               	bsf	3,5	;RP0=1, select bank1
  5126  1775  1303               	bcf	3,6	;RP1=0, select bank1
  5127  1776  086B               	movf	_temp_count^(0+128),w
  5128  1777  1283               	bcf	3,5	;RP0=0, select bank0
  5129  1778  1303               	bcf	3,6	;RP1=0, select bank0
  5130  1779  00D4               	movwf	??_find_best_solution
  5131  177A  0854               	movf	??_find_best_solution,w
  5132  177B  1683               	bsf	3,5	;RP0=1, select bank3
  5133  177C  1703               	bsf	3,6	;RP1=1, select bank3
  5134  177D  0097               	movwf	_temp_pre_count^(0+384)
  5135                           
  5136                           ;teris_16f886.c: 1110: temp_pre_risk = temp_risk;
  5137  177E  1683               	bsf	3,5	;RP0=1, select bank1
  5138  177F  1303               	bcf	3,6	;RP1=0, select bank1
  5139  1780  086A               	movf	(_temp_risk+1)^(0+128),w
  5140  1781  1683               	bsf	3,5	;RP0=1, select bank3
  5141  1782  1703               	bsf	3,6	;RP1=1, select bank3
  5142  1783  00D9               	movwf	(_temp_pre_risk+1)^(0+384)
  5143  1784  1683               	bsf	3,5	;RP0=1, select bank1
  5144  1785  1303               	bcf	3,6	;RP1=0, select bank1
  5145  1786  0869               	movf	_temp_risk^(0+128),w
  5146  1787  1683               	bsf	3,5	;RP0=1, select bank3
  5147  1788  1703               	bsf	3,6	;RP1=1, select bank3
  5148  1789  00D8               	movwf	_temp_pre_risk^(0+384)
  5149                           
  5150                           ;teris_16f886.c: 1111: temp_pre_high = temp_high;
  5151  178A  1683               	bsf	3,5	;RP0=1, select bank1
  5152  178B  1303               	bcf	3,6	;RP1=0, select bank1
  5153  178C  086C               	movf	_temp_high^(0+128),w
  5154  178D  1283               	bcf	3,5	;RP0=0, select bank0
  5155  178E  1303               	bcf	3,6	;RP1=0, select bank0
  5156  178F  00D4               	movwf	??_find_best_solution
  5157  1790  0854               	movf	??_find_best_solution,w
  5158  1791  1683               	bsf	3,5	;RP0=1, select bank1
  5159  1792  1303               	bcf	3,6	;RP1=0, select bank1
  5160  1793  00EF               	movwf	_temp_pre_high^(0+128)
  5161                           
  5162                           ;teris_16f886.c: 1112: temp_pre_hole = temp_hole;
  5163  1794  086D               	movf	_temp_hole^(0+128),w
  5164  1795  1283               	bcf	3,5	;RP0=0, select bank0
  5165  1796  1303               	bcf	3,6	;RP1=0, select bank0
  5166  1797  00D4               	movwf	??_find_best_solution
  5167  1798  0854               	movf	??_find_best_solution,w
  5168  1799  00EF               	movwf	_temp_pre_hole
  5169                           
  5170                           ;teris_16f886.c: 1113: tem_pre_sub_index = tem_sub_index;
  5171  179A  1683               	bsf	3,5	;RP0=1, select bank1
  5172  179B  1303               	bcf	3,6	;RP1=0, select bank1
  5173  179C  0867               	movf	find_best_solution@tem_sub_index^(0+128),w
  5174  179D  1283               	bcf	3,5	;RP0=0, select bank0
  5175  179E  1303               	bcf	3,6	;RP1=0, select bank0
  5176  179F  00D4               	movwf	??_find_best_solution
  5177  17A0  0854               	movf	??_find_best_solution,w
  5178  17A1  1683               	bsf	3,5	;RP0=1, select bank3
  5179  17A2  1703               	bsf	3,6	;RP1=1, select bank3
  5180  17A3  00DA               	movwf	_tem_pre_sub_index^(0+384)
  5181                           
  5182                           ;teris_16f886.c: 1114: temp_pre_x = temp_x;
  5183  17A4  1683               	bsf	3,5	;RP0=1, select bank1
  5184  17A5  1303               	bcf	3,6	;RP1=0, select bank1
  5185  17A6  0868               	movf	find_best_solution@temp_x^(0+128),w
  5186  17A7  1283               	bcf	3,5	;RP0=0, select bank0
  5187  17A8  1303               	bcf	3,6	;RP1=0, select bank0
  5188  17A9  00D4               	movwf	??_find_best_solution
  5189  17AA  0854               	movf	??_find_best_solution,w
  5190  17AB  1683               	bsf	3,5	;RP0=1, select bank3
  5191  17AC  1703               	bsf	3,6	;RP1=1, select bank3
  5192  17AD  00DB               	movwf	_temp_pre_x^(0+384)
  5193  17AE                     l5532:	
  5194  17AE  3001               	movlw	1
  5195  17AF  1283               	bcf	3,5	;RP0=0, select bank0
  5196  17B0  1303               	bcf	3,6	;RP1=0, select bank0
  5197  17B1  00D4               	movwf	??_find_best_solution
  5198  17B2  0854               	movf	??_find_best_solution,w
  5199  17B3  1683               	bsf	3,5	;RP0=1, select bank1
  5200  17B4  1303               	bcf	3,6	;RP1=0, select bank1
  5201  17B5  07E8               	addwf	find_best_solution@temp_x^(0+128),f
  5202  17B6  2CB7               	goto	l5534
  5203  17B7                     l5536:	
  5204  17B7  3001               	movlw	1
  5205  17B8  00D4               	movwf	??_find_best_solution
  5206  17B9  0854               	movf	??_find_best_solution,w
  5207  17BA  1683               	bsf	3,5	;RP0=1, select bank1
  5208  17BB  1303               	bcf	3,6	;RP1=0, select bank1
  5209  17BC  07E7               	addwf	find_best_solution@tem_sub_index^(0+128),f
  5210  17BD  2C28               	goto	l5538
  5211  17BE                     l5540:	
  5212                           
  5213                           ;teris_16f886.c: 1115: }
  5214                           ;teris_16f886.c: 1116: }
  5215                           ;teris_16f886.c: 1117: }
  5216                           ;teris_16f886.c: 1118: }
  5217                           ;teris_16f886.c: 1119: }
  5218                           ;teris_16f886.c: 1126: }
  5219                           ;teris_16f886.c: 1127: }
  5220                           ;teris_16f886.c: 1128: if(res == 1)
  5221  17BE  0324               	decf	find_best_solution@res^(0+128),w
  5222  17BF  1D03               	btfss	3,2
  5223  17C0  2FF4               	goto	l5548
  5224                           
  5225                           ;teris_16f886.c: 1129: {
  5226                           ;teris_16f886.c: 1130: g_char_info[g_char_info_index].cur_index = tem_pre_sub_index;
  5227  17C1  1683               	bsf	3,5	;RP0=1, select bank3
  5228  17C2  1703               	bsf	3,6	;RP1=1, select bank3
  5229  17C3  085A               	movf	_tem_pre_sub_index^(0+384),w
  5230  17C4  1283               	bcf	3,5	;RP0=0, select bank0
  5231  17C5  1303               	bcf	3,6	;RP1=0, select bank0
  5232  17C6  00D4               	movwf	??_find_best_solution
  5233  17C7  3003               	movlw	3
  5234  17C8  00D5               	movwf	??_find_best_solution+1
  5235  17C9  0855               	movf	??_find_best_solution+1,w
  5236  17CA  00F0               	movwf	___bmul@multiplicand
  5237  17CB  086E               	movf	_g_char_info_index,w
  5238  17CC  160A  158A  214E  160A  118A  	fcall	___bmul
  5239  17D1  3E01               	addlw	1
  5240  17D2  3EB9               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5241  17D3  0084               	movwf	4
  5242  17D4  1283               	bcf	3,5	;RP0=0, select bank0
  5243  17D5  1303               	bcf	3,6	;RP1=0, select bank0
  5244  17D6  0854               	movf	??_find_best_solution,w
  5245  17D7  1783               	bsf	3,7	;select IRP bank3
  5246  17D8  0080               	movwf	0
  5247                           
  5248                           ;teris_16f886.c: 1131: cur_x = temp_pre_x;
  5249  17D9  1683               	bsf	3,5	;RP0=1, select bank3
  5250  17DA  1703               	bsf	3,6	;RP1=1, select bank3
  5251  17DB  085B               	movf	_temp_pre_x^(0+384),w
  5252  17DC  1283               	bcf	3,5	;RP0=0, select bank0
  5253  17DD  1303               	bcf	3,6	;RP1=0, select bank0
  5254  17DE  00D4               	movwf	??_find_best_solution
  5255  17DF  0854               	movf	??_find_best_solution,w
  5256  17E0  1683               	bsf	3,5	;RP0=1, select bank1
  5257  17E1  1303               	bcf	3,6	;RP1=0, select bank1
  5258  17E2  00EE               	movwf	_cur_x^(0+128)
  5259                           
  5260                           ;teris_16f886.c: 1132: printf_console_cur_MATRIX44(1, cur_x, cur_y);
  5261  17E3  086E               	movf	_cur_x^(0+128),w
  5262  17E4  1283               	bcf	3,5	;RP0=0, select bank0
  5263  17E5  1303               	bcf	3,6	;RP1=0, select bank0
  5264  17E6  00D4               	movwf	??_find_best_solution
  5265  17E7  0854               	movf	??_find_best_solution,w
  5266  17E8  00A9               	movwf	printf_console_cur_MATRIX44@x
  5267  17E9  086D               	movf	_cur_y,w
  5268  17EA  00D5               	movwf	??_find_best_solution+1
  5269  17EB  0855               	movf	??_find_best_solution+1,w
  5270  17EC  00AA               	movwf	printf_console_cur_MATRIX44@y
  5271  17ED  3001               	movlw	1
  5272  17EE  160A  158A  2683  160A  118A  	fcall	_printf_console_cur_MATRIX44
  5273                           
  5274                           ;teris_16f886.c: 1139: }
  5275  17F3  2FFC               	goto	l5550
  5276  17F4                     l5548:	
  5277                           
  5278                           ;teris_16f886.c: 1140: else
  5279                           ;teris_16f886.c: 1141: {
  5280                           ;teris_16f886.c: 1142: debug_line(0, "GAME OVER!!!");
  5281  17F4  3041               	movlw	low (STR_60| (0+32768))
  5282  17F5  00F3               	movwf	debug_line@str
  5283  17F6  308E               	movlw	high (STR_60| (0+32768))
  5284  17F7  00F4               	movwf	debug_line@str+1
  5285  17F8  3000               	movlw	0
  5286  17F9  160A  158A  21A8   	fcall	_debug_line
  5287  17FC                     l5550:	
  5288                           
  5289                           ;teris_16f886.c: 1143: }
  5290                           ;teris_16f886.c: 1144: return res;
  5291  17FC  1683               	bsf	3,5	;RP0=1, select bank1
  5292  17FD  1303               	bcf	3,6	;RP1=0, select bank1
  5293  17FE  0824               	movf	find_best_solution@res^(0+128),w
  5294  17FF  0008               	return
  5295  1800                     __end_of_find_best_solution:	
  5296                           
  5297                           	psect	text5
  5298  1BAE                     __ptext5:	
  5299 ;; *************** function _right_most *****************
  5300 ;; Defined at:
  5301 ;;		line 871 in file "teris_16f886.c"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;  x               1    wreg     char 
  5304 ;;  matrix44        2   36[BANK0 ] PTR const struct .
  5305 ;;		 -> g_matrix44(384), 
  5306 ;;  matrix88        1   38[BANK0 ] PTR const struct .
  5307 ;;		 -> g_matrix88(64), 
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;  x               1   41[BANK0 ] char 
  5310 ;; Return value:  Size  Location     Type
  5311 ;;                  1    wreg      char 
  5312 ;; Registers used:
  5313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5319 ;;      Params:         0       3       0       0       0
  5320 ;;      Locals:         0       1       0       0       0
  5321 ;;      Temps:          0       2       0       0       0
  5322 ;;      Totals:         0       6       0       0       0
  5323 ;;Total ram usage:        6 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; Hardware stack levels required when called:    4
  5326 ;; This function calls:
  5327 ;;		_debug_int1
  5328 ;;		_is_right_boundary
  5329 ;; This function is called by:
  5330 ;;		_find_best_solution
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           
  5335                           ;psect for function _right_most
  5336  1BAE                     _right_most:	
  5337                           
  5338                           ;incstack = 0
  5339                           ; Regs used in _right_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5340                           ;right_most@x stored from wreg
  5341  1BAE  1283               	bcf	3,5	;RP0=0, select bank0
  5342  1BAF  1303               	bcf	3,6	;RP1=0, select bank0
  5343  1BB0  00C9               	movwf	right_most@x
  5344  1BB1                     l391:	
  5345                           ;teris_16f886.c: 873: while(1)
  5346                           
  5347                           
  5348                           ;teris_16f886.c: 874: {
  5349                           ;teris_16f886.c: 875: if(is_right_boundary(x, matrix44, matrix88) == RIGHT_OVER_BOUNDARY
      +                          )
  5350  1BB1  0844               	movf	right_most@matrix44,w
  5351  1BB2  00F6               	movwf	is_right_boundary@matrix44
  5352  1BB3  0845               	movf	right_most@matrix44+1,w
  5353  1BB4  00F7               	movwf	is_right_boundary@matrix44+1
  5354  1BB5  0846               	movf	right_most@matrix88,w
  5355  1BB6  00C7               	movwf	??_right_most
  5356  1BB7  0847               	movf	??_right_most,w
  5357  1BB8  00F8               	movwf	is_right_boundary@matrix88
  5358  1BB9  0849               	movf	right_most@x,w
  5359  1BBA  160A  158A  2738  160A  158A  	fcall	_is_right_boundary
  5360  1BBF  3A03               	xorlw	3
  5361  1BC0  1D03               	skipz
  5362  1BC1  2BDE               	goto	l5194
  5363                           
  5364                           ;teris_16f886.c: 876: {
  5365                           ;teris_16f886.c: 877: debug_int1(0, "right_most = %d\n", x - 1);
  5366  1BC2  3002               	movlw	low (STR_38| (0+32768))
  5367  1BC3  1283               	bcf	3,5	;RP0=0, select bank0
  5368  1BC4  1303               	bcf	3,6	;RP1=0, select bank0
  5369  1BC5  00BF               	movwf	debug_int1@f
  5370  1BC6  308E               	movlw	high (STR_38| (0+32768))
  5371  1BC7  00C0               	movwf	debug_int1@f+1
  5372  1BC8  0849               	movf	right_most@x,w
  5373  1BC9  00C7               	movwf	??_right_most
  5374  1BCA  01C8               	clrf	??_right_most+1
  5375  1BCB  1BC7               	btfsc	??_right_most,7
  5376  1BCC  03C8               	decf	??_right_most+1,f
  5377  1BCD  0847               	movf	??_right_most,w
  5378  1BCE  3EFF               	addlw	255
  5379  1BCF  00C1               	movwf	debug_int1@i
  5380  1BD0  0848               	movf	??_right_most+1,w
  5381  1BD1  1803               	skipnc
  5382  1BD2  3E01               	addlw	1
  5383  1BD3  3EFF               	addlw	255
  5384  1BD4  00C2               	movwf	debug_int1@i+1
  5385  1BD5  3000               	movlw	0
  5386  1BD6  120A  118A  2003   	fcall	_debug_int1
  5387                           
  5388                           ;teris_16f886.c: 878: return x - 1;
  5389  1BD9  1283               	bcf	3,5	;RP0=0, select bank0
  5390  1BDA  1303               	bcf	3,6	;RP1=0, select bank0
  5391  1BDB  0849               	movf	right_most@x,w
  5392  1BDC  3EFF               	addlw	-1
  5393  1BDD  0008               	return
  5394  1BDE                     l5194:	
  5395                           
  5396                           ;teris_16f886.c: 879: }
  5397                           ;teris_16f886.c: 880: x++;
  5398  1BDE  3001               	movlw	1
  5399  1BDF  1283               	bcf	3,5	;RP0=0, select bank0
  5400  1BE0  1303               	bcf	3,6	;RP1=0, select bank0
  5401  1BE1  00C7               	movwf	??_right_most
  5402  1BE2  0847               	movf	??_right_most,w
  5403  1BE3  07C9               	addwf	right_most@x,f
  5404  1BE4  2BB1               	goto	l391
  5405  1BE5                     __end_of_right_most:	
  5406                           
  5407                           	psect	text6
  5408  1F38                     __ptext6:	
  5409 ;; *************** function _is_right_boundary *****************
  5410 ;; Defined at:
  5411 ;;		line 734 in file "teris_16f886.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;  x               1    wreg     char 
  5414 ;;  matrix44        2    6[COMMON] PTR const struct .
  5415 ;;		 -> g_matrix44(384), 
  5416 ;;  matrix88        1    8[COMMON] PTR const struct .
  5417 ;;		 -> g_matrix88(64), 
  5418 ;; Auto vars:     Size  Location     Type
  5419 ;;  x               1    0[BANK0 ] char 
  5420 ;;  col             1    2[BANK0 ] char 
  5421 ;;  row             1    1[BANK0 ] char 
  5422 ;; Return value:  Size  Location     Type
  5423 ;;                  1    wreg      unsigned char 
  5424 ;; Registers used:
  5425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5426 ;; Tracked objects:
  5427 ;;		On entry : 0/0
  5428 ;;		On exit  : 0/0
  5429 ;;		Unchanged: 0/0
  5430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5431 ;;      Params:         3       0       0       0       0
  5432 ;;      Locals:         0       3       0       0       0
  5433 ;;      Temps:          4       0       0       0       0
  5434 ;;      Totals:         7       3       0       0       0
  5435 ;;Total ram usage:       10 bytes
  5436 ;; Hardware stack levels used:    1
  5437 ;; Hardware stack levels required when called:    3
  5438 ;; This function calls:
  5439 ;;		_debug_line
  5440 ;; This function is called by:
  5441 ;;		_right_most
  5442 ;; This function uses a non-reentrant model
  5443 ;;
  5444                           
  5445                           
  5446                           ;psect for function _is_right_boundary
  5447  1F38                     _is_right_boundary:	
  5448                           
  5449                           ;incstack = 0
  5450                           ; Regs used in _is_right_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5451                           ;is_right_boundary@x stored from wreg
  5452  1F38  1283               	bcf	3,5	;RP0=0, select bank0
  5453  1F39  1303               	bcf	3,6	;RP1=0, select bank0
  5454  1F3A  00A0               	movwf	is_right_boundary@x
  5455                           
  5456                           ;teris_16f886.c: 736: for(int8_t row = 4 - 1; row >= 0; row--)
  5457  1F3B  3003               	movlw	3
  5458  1F3C  00F9               	movwf	??_is_right_boundary
  5459  1F3D  0879               	movf	??_is_right_boundary,w
  5460  1F3E  00A1               	movwf	is_right_boundary@row
  5461  1F3F  1BA1               	btfsc	is_right_boundary@row,7
  5462  1F40  2F97               	goto	l4978
  5463  1F41                     l4954:	
  5464                           
  5465                           ;teris_16f886.c: 737: {
  5466                           ;teris_16f886.c: 738: for(int8_t col = 0; col < 4; col++)
  5467  1F41  01A2               	clrf	is_right_boundary@col
  5468  1F42  0822               	movf	is_right_boundary@col,w
  5469  1F43  3A80               	xorlw	128
  5470  1F44  3E7C               	addlw	-132
  5471  1F45  1803               	btfsc	3,0
  5472  1F46  2F91               	goto	l4974
  5473  1F47                     l4960:	
  5474                           
  5475                           ;teris_16f886.c: 739: {
  5476                           ;teris_16f886.c: 740: if(matrix44->data[row][col] == 1)
  5477  1F47  0821               	movf	is_right_boundary@row,w
  5478  1F48  00F9               	movwf	??_is_right_boundary
  5479  1F49  01FA               	clrf	??_is_right_boundary+1
  5480  1F4A  1003               	clrc
  5481  1F4B  0DF9               	rlf	??_is_right_boundary,f
  5482  1F4C  0DFA               	rlf	??_is_right_boundary+1,f
  5483  1F4D  1003               	clrc
  5484  1F4E  0DF9               	rlf	??_is_right_boundary,f
  5485  1F4F  0DFA               	rlf	??_is_right_boundary+1,f
  5486  1F50  0879               	movf	??_is_right_boundary,w
  5487  1F51  0776               	addwf	is_right_boundary@matrix44,w
  5488  1F52  00FB               	movwf	??_is_right_boundary+2
  5489  1F53  087A               	movf	??_is_right_boundary+1,w
  5490  1F54  1803               	skipnc
  5491  1F55  0A7A               	incf	??_is_right_boundary+1,w
  5492  1F56  0777               	addwf	is_right_boundary@matrix44+1,w
  5493  1F57  00FC               	movwf	??_is_right_boundary+3
  5494  1F58  0822               	movf	is_right_boundary@col,w
  5495  1F59  077B               	addwf	??_is_right_boundary+2,w
  5496  1F5A  0084               	movwf	4
  5497  1F5B  087C               	movf	??_is_right_boundary+3,w
  5498  1F5C  1803               	skipnc
  5499  1F5D  0A7C               	incf	??_is_right_boundary+3,w
  5500  1F5E  00FF               	movwf	127
  5501  1F5F  120A  158A  2000  160A  158A  	fcall	stringtab
  5502  1F64  3A01               	xorlw	1
  5503  1F65  1D03               	skipz
  5504  1F66  2F86               	goto	l4970
  5505                           
  5506                           ;teris_16f886.c: 741: {
  5507                           ;teris_16f886.c: 742: if(x + col > 8 - 1)
  5508  1F67  0820               	movf	is_right_boundary@x,w
  5509  1F68  0722               	addwf	is_right_boundary@col,w
  5510  1F69  00F9               	movwf	??_is_right_boundary
  5511  1F6A  01FA               	clrf	??_is_right_boundary+1
  5512  1F6B  1803               	skipnc
  5513  1F6C  0AFA               	incf	??_is_right_boundary+1,f
  5514  1F6D  1BA0               	btfsc	is_right_boundary@x,7
  5515  1F6E  03FA               	decf	??_is_right_boundary+1,f
  5516  1F6F  1BA2               	btfsc	is_right_boundary@col,7
  5517  1F70  03FA               	decf	??_is_right_boundary+1,f
  5518  1F71  087A               	movf	??_is_right_boundary+1,w
  5519  1F72  3A80               	xorlw	128
  5520  1F73  00FF               	movwf	127
  5521  1F74  3080               	movlw	128
  5522  1F75  027F               	subwf	127,w
  5523  1F76  1D03               	skipz
  5524  1F77  2F7A               	goto	u6995
  5525  1F78  3008               	movlw	8
  5526  1F79  0279               	subwf	??_is_right_boundary,w
  5527  1F7A                     u6995:	
  5528  1F7A  1C03               	skipc
  5529  1F7B  2F86               	goto	l4970
  5530                           
  5531                           ;teris_16f886.c: 743: {
  5532                           ;teris_16f886.c: 744: debug_line(0, "RIGHT_OVER_BOUNDARY");
  5533  1F7C  30A8               	movlw	low (STR_33| (0+32768))
  5534  1F7D  00F3               	movwf	debug_line@str
  5535  1F7E  308D               	movlw	high (STR_33| (0+32768))
  5536  1F7F  00F4               	movwf	debug_line@str+1
  5537  1F80  3000               	movlw	0
  5538  1F81  160A  158A  21A8   	fcall	_debug_line
  5539                           
  5540                           ;teris_16f886.c: 745: return RIGHT_OVER_BOUNDARY;
  5541  1F84  3003               	movlw	3
  5542  1F85  0008               	return
  5543  1F86                     l4970:	
  5544  1F86  3001               	movlw	1
  5545  1F87  00F9               	movwf	??_is_right_boundary
  5546  1F88  0879               	movf	??_is_right_boundary,w
  5547  1F89  1283               	bcf	3,5	;RP0=0, select bank0
  5548  1F8A  1303               	bcf	3,6	;RP1=0, select bank0
  5549  1F8B  07A2               	addwf	is_right_boundary@col,f
  5550  1F8C  0822               	movf	is_right_boundary@col,w
  5551  1F8D  3A80               	xorlw	128
  5552  1F8E  3E7C               	addlw	-132
  5553  1F8F  1C03               	skipc
  5554  1F90  2F47               	goto	l4960
  5555  1F91                     l4974:	
  5556  1F91  30FF               	movlw	255
  5557  1F92  00F9               	movwf	??_is_right_boundary
  5558  1F93  0879               	movf	??_is_right_boundary,w
  5559  1F94  07A1               	addwf	is_right_boundary@row,f
  5560  1F95  1FA1               	btfss	is_right_boundary@row,7
  5561  1F96  2F41               	goto	l4954
  5562  1F97                     l4978:	
  5563                           
  5564                           ;teris_16f886.c: 746: }
  5565                           ;teris_16f886.c: 747: }
  5566                           ;teris_16f886.c: 748: }
  5567                           ;teris_16f886.c: 749: }
  5568                           ;teris_16f886.c: 750: return OK;
  5569  1F97  3000               	movlw	0
  5570  1F98  0008               	return
  5571  1F99                     __end_of_is_right_boundary:	
  5572                           
  5573                           	psect	text7
  5574  1E83                     __ptext7:	
  5575 ;; *************** function _printf_console_cur_MATRIX44 *****************
  5576 ;; Defined at:
  5577 ;;		line 381 in file "teris_16f886.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;  enable          1    wreg     unsigned char 
  5580 ;;  x               1    9[BANK0 ] char 
  5581 ;;  y               1   10[BANK0 ] char 
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;  enable          1   20[BANK0 ] unsigned char 
  5584 ;;  matrix          2   21[BANK0 ] PTR struct .
  5585 ;;		 -> g_matrix44(384), 
  5586 ;; Return value:  Size  Location     Type
  5587 ;;                  1    wreg      void 
  5588 ;; Registers used:
  5589 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5590 ;; Tracked objects:
  5591 ;;		On entry : 0/0
  5592 ;;		On exit  : 0/0
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5595 ;;      Params:         0       2       0       0       0
  5596 ;;      Locals:         0       3       0       0       0
  5597 ;;      Temps:          0       9       0       0       0
  5598 ;;      Totals:         0      14       0       0       0
  5599 ;;Total ram usage:       14 bytes
  5600 ;; Hardware stack levels used:    1
  5601 ;; Hardware stack levels required when called:    4
  5602 ;; This function calls:
  5603 ;;		___bmul
  5604 ;;		_printf_console_MATRIX44
  5605 ;; This function is called by:
  5606 ;;		_find_best_solution
  5607 ;; This function uses a non-reentrant model
  5608 ;;
  5609                           
  5610                           
  5611                           ;psect for function _printf_console_cur_MATRIX44
  5612  1E83                     _printf_console_cur_MATRIX44:	
  5613                           
  5614                           ;incstack = 0
  5615                           ; Regs used in _printf_console_cur_MATRIX44: [wreg-fsr0h+status,2+status,0+btemp+1+pclat
      +                          h+cstack]
  5616                           ;printf_console_cur_MATRIX44@enable stored from wreg
  5617  1E83  1283               	bcf	3,5	;RP0=0, select bank0
  5618  1E84  1303               	bcf	3,6	;RP1=0, select bank0
  5619  1E85  00B4               	movwf	printf_console_cur_MATRIX44@enable
  5620                           
  5621                           ;teris_16f886.c: 383: if(enable == 1)
  5622  1E86  0334               	decf	printf_console_cur_MATRIX44@enable,w
  5623  1E87  1D03               	btfss	3,2
  5624  1E88  0008               	return
  5625                           
  5626                           ;teris_16f886.c: 384: {
  5627                           ;teris_16f886.c: 385: MATRIX44* matrix = &g_matrix44[g_char_info[g_char_info_index].star
      +                          t_index + g_char_info[g_char_info_index].cur_index];
  5628  1E89  3003               	movlw	3
  5629  1E8A  00AB               	movwf	??_printf_console_cur_MATRIX44
  5630  1E8B  082B               	movf	??_printf_console_cur_MATRIX44,w
  5631  1E8C  00F0               	movwf	___bmul@multiplicand
  5632  1E8D  086E               	movf	_g_char_info_index,w
  5633  1E8E  160A  158A  214E  160A  158A  	fcall	___bmul
  5634  1E93  3E01               	addlw	1
  5635  1E94  3EB9               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5636  1E95  0084               	movwf	4
  5637  1E96  1783               	bsf	3,7	;select IRP bank3
  5638  1E97  0800               	movf	0,w
  5639  1E98  1283               	bcf	3,5	;RP0=0, select bank0
  5640  1E99  1303               	bcf	3,6	;RP1=0, select bank0
  5641  1E9A  00AC               	movwf	??_printf_console_cur_MATRIX44+1
  5642  1E9B  3003               	movlw	3
  5643  1E9C  00AD               	movwf	??_printf_console_cur_MATRIX44+2
  5644  1E9D  082D               	movf	??_printf_console_cur_MATRIX44+2,w
  5645  1E9E  00F0               	movwf	___bmul@multiplicand
  5646  1E9F  086E               	movf	_g_char_info_index,w
  5647  1EA0  160A  158A  214E  160A  158A  	fcall	___bmul
  5648  1EA5  3EB9               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5649  1EA6  0084               	movwf	4
  5650  1EA7  1783               	bsf	3,7	;select IRP bank3
  5651  1EA8  0800               	movf	0,w
  5652  1EA9  1283               	bcf	3,5	;RP0=0, select bank0
  5653  1EAA  1303               	bcf	3,6	;RP1=0, select bank0
  5654  1EAB  072C               	addwf	??_printf_console_cur_MATRIX44+1,w
  5655  1EAC  00AE               	movwf	??_printf_console_cur_MATRIX44+3
  5656  1EAD  01AF               	clrf	??_printf_console_cur_MATRIX44+4
  5657  1EAE  0DAF               	rlf	??_printf_console_cur_MATRIX44+4,f
  5658  1EAF  0EAE               	swapf	??_printf_console_cur_MATRIX44+3,f
  5659  1EB0  0EAF               	swapf	??_printf_console_cur_MATRIX44+4,f
  5660  1EB1  30F0               	movlw	240
  5661  1EB2  05AF               	andwf	??_printf_console_cur_MATRIX44+4,f
  5662  1EB3  082E               	movf	??_printf_console_cur_MATRIX44+3,w
  5663  1EB4  390F               	andlw	15
  5664  1EB5  04AF               	iorwf	??_printf_console_cur_MATRIX44+4,f
  5665  1EB6  30F0               	movlw	240
  5666  1EB7  05AE               	andwf	??_printf_console_cur_MATRIX44+3,f
  5667  1EB8  3030               	movlw	low (_g_matrix44| (0+32768))
  5668  1EB9  00B0               	movwf	??_printf_console_cur_MATRIX44+5
  5669  1EBA  3088               	movlw	high (_g_matrix44| (0+32768))
  5670  1EBB  00B1               	movwf	??_printf_console_cur_MATRIX44+6
  5671  1EBC  082E               	movf	??_printf_console_cur_MATRIX44+3,w
  5672  1EBD  0730               	addwf	??_printf_console_cur_MATRIX44+5,w
  5673  1EBE  00B2               	movwf	??_printf_console_cur_MATRIX44+7
  5674  1EBF  082F               	movf	??_printf_console_cur_MATRIX44+4,w
  5675  1EC0  1803               	skipnc
  5676  1EC1  0A2F               	incf	??_printf_console_cur_MATRIX44+4,w
  5677  1EC2  0731               	addwf	??_printf_console_cur_MATRIX44+6,w
  5678  1EC3  00B3               	movwf	??_printf_console_cur_MATRIX44+8
  5679  1EC4  0832               	movf	??_printf_console_cur_MATRIX44+7,w
  5680  1EC5  00B5               	movwf	printf_console_cur_MATRIX44@matrix
  5681  1EC6  0833               	movf	??_printf_console_cur_MATRIX44+8,w
  5682  1EC7  00B6               	movwf	printf_console_cur_MATRIX44@matrix+1
  5683                           
  5684                           ;teris_16f886.c: 386: printf_console_MATRIX44(1, x, y, matrix);
  5685  1EC8  0829               	movf	printf_console_cur_MATRIX44@x,w
  5686  1EC9  00AB               	movwf	??_printf_console_cur_MATRIX44
  5687  1ECA  082B               	movf	??_printf_console_cur_MATRIX44,w
  5688  1ECB  00F6               	movwf	printf_console_MATRIX44@x
  5689  1ECC  082A               	movf	printf_console_cur_MATRIX44@y,w
  5690  1ECD  00AC               	movwf	??_printf_console_cur_MATRIX44+1
  5691  1ECE  082C               	movf	??_printf_console_cur_MATRIX44+1,w
  5692  1ECF  00F7               	movwf	printf_console_MATRIX44@y
  5693  1ED0  0835               	movf	printf_console_cur_MATRIX44@matrix,w
  5694  1ED1  00F8               	movwf	printf_console_MATRIX44@matrix
  5695  1ED2  0836               	movf	printf_console_cur_MATRIX44@matrix+1,w
  5696  1ED3  00F9               	movwf	printf_console_MATRIX44@matrix+1
  5697  1ED4  3001               	movlw	1
  5698  1ED5  120A  158A  26FA   	fcall	_printf_console_MATRIX44
  5699  1ED8  0008               	return
  5700  1ED9                     __end_of_printf_console_cur_MATRIX44:	
  5701                           
  5702                           	psect	text8
  5703  0EFA                     __ptext8:	
  5704 ;; *************** function _printf_console_MATRIX44 *****************
  5705 ;; Defined at:
  5706 ;;		line 356 in file "teris_16f886.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;  enable          1    wreg     unsigned char 
  5709 ;;  x               1    6[COMMON] char 
  5710 ;;  y               1    7[COMMON] char 
  5711 ;;  matrix          2    8[COMMON] PTR const struct .
  5712 ;;		 -> g_matrix44(384), 
  5713 ;; Auto vars:     Size  Location     Type
  5714 ;;  enable          1   10[COMMON] unsigned char 
  5715 ;;  col             1   12[COMMON] char 
  5716 ;;  row             1   11[COMMON] char 
  5717 ;; Return value:  Size  Location     Type
  5718 ;;                  1    wreg      void 
  5719 ;; Registers used:
  5720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5726 ;;      Params:         4       0       0       0       0
  5727 ;;      Locals:         3       0       0       0       0
  5728 ;;      Temps:          0       9       0       0       0
  5729 ;;      Totals:         7       9       0       0       0
  5730 ;;Total ram usage:       16 bytes
  5731 ;; Hardware stack levels used:    1
  5732 ;; Hardware stack levels required when called:    3
  5733 ;; This function calls:
  5734 ;;		_debug_line
  5735 ;;		_debug_str
  5736 ;; This function is called by:
  5737 ;;		_printf_console_cur_MATRIX44
  5738 ;;		_find_best_solution
  5739 ;;		_printf_console_all_MATRIX44
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           
  5744                           ;psect for function _printf_console_MATRIX44
  5745  0EFA                     _printf_console_MATRIX44:	
  5746                           
  5747                           ;incstack = 0
  5748                           ; Regs used in _printf_console_MATRIX44: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  5749                           ;printf_console_MATRIX44@enable stored from wreg
  5750  0EFA  00FA               	movwf	printf_console_MATRIX44@enable
  5751                           
  5752                           ;teris_16f886.c: 358: if(enable == 1)
  5753  0EFB  037A               	decf	printf_console_MATRIX44@enable,w
  5754  0EFC  1D03               	btfss	3,2
  5755  0EFD  0008               	return
  5756                           
  5757                           ;teris_16f886.c: 359: {
  5758                           ;teris_16f886.c: 360: debug_line(1, "<<<<<<<<<<<<<<<<<<<<MATRIX44");
  5759  0EFE  3082               	movlw	low (STR_5| (0+32768))
  5760  0EFF  00F3               	movwf	debug_line@str
  5761  0F00  308C               	movlw	high (STR_5| (0+32768))
  5762  0F01  00F4               	movwf	debug_line@str+1
  5763  0F02  3001               	movlw	1
  5764  0F03  160A  158A  21A8  120A  158A  	fcall	_debug_line
  5765                           
  5766                           ;teris_16f886.c: 361: for(int8_t row = 0; row < 8; row++)
  5767  0F08  01FB               	clrf	printf_console_MATRIX44@row
  5768  0F09  087B               	movf	printf_console_MATRIX44@row,w
  5769  0F0A  3A80               	xorlw	128
  5770  0F0B  3E78               	addlw	-136
  5771  0F0C  1803               	btfsc	3,0
  5772  0F0D  2FF7               	goto	l4858
  5773  0F0E                     l4828:	
  5774                           
  5775                           ;teris_16f886.c: 362: {
  5776                           ;teris_16f886.c: 363: for(int8_t col = 0; col < 8; col++)
  5777  0F0E  01FC               	clrf	printf_console_MATRIX44@col
  5778  0F0F  087C               	movf	printf_console_MATRIX44@col,w
  5779  0F10  3A80               	xorlw	128
  5780  0F11  3E78               	addlw	-136
  5781  0F12  1803               	btfsc	3,0
  5782  0F13  2FE2               	goto	l4852
  5783  0F14                     l4834:	
  5784                           
  5785                           ;teris_16f886.c: 364: {
  5786                           ;teris_16f886.c: 365: if((row - y >= 0) && (row - y < 4)
  5787                           ;teris_16f886.c: 366: && (col - x >= 0) && (col - x < 4)
  5788                           ;teris_16f886.c: 367: && (matrix->data[row - y][col - x] == 1))
  5789  0F14  0877               	movf	printf_console_MATRIX44@y,w
  5790  0F15  1283               	bcf	3,5	;RP0=0, select bank0
  5791  0F16  1303               	bcf	3,6	;RP1=0, select bank0
  5792  0F17  00A0               	movwf	??_printf_console_MATRIX44
  5793  0F18  01A1               	clrf	??_printf_console_MATRIX44+1
  5794  0F19  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5795  0F1A  03A1               	decf	??_printf_console_MATRIX44+1,f
  5796  0F1B  09A0               	comf	??_printf_console_MATRIX44,f
  5797  0F1C  09A1               	comf	??_printf_console_MATRIX44+1,f
  5798  0F1D  0AA0               	incf	??_printf_console_MATRIX44,f
  5799  0F1E  1903               	skipnz
  5800  0F1F  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5801  0F20  087B               	movf	printf_console_MATRIX44@row,w
  5802  0F21  00A2               	movwf	??_printf_console_MATRIX44+2
  5803  0F22  01A3               	clrf	??_printf_console_MATRIX44+3
  5804  0F23  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5805  0F24  03A3               	decf	??_printf_console_MATRIX44+3,f
  5806  0F25  0820               	movf	??_printf_console_MATRIX44,w
  5807  0F26  0722               	addwf	??_printf_console_MATRIX44+2,w
  5808  0F27  00A4               	movwf	??_printf_console_MATRIX44+4
  5809  0F28  0821               	movf	??_printf_console_MATRIX44+1,w
  5810  0F29  1803               	skipnc
  5811  0F2A  0A21               	incf	??_printf_console_MATRIX44+1,w
  5812  0F2B  0723               	addwf	??_printf_console_MATRIX44+3,w
  5813  0F2C  00A5               	movwf	??_printf_console_MATRIX44+5
  5814  0F2D  1BA5               	btfsc	??_printf_console_MATRIX44+5,7
  5815  0F2E  2FCD               	goto	l4846
  5816  0F2F  0877               	movf	printf_console_MATRIX44@y,w
  5817  0F30  00A0               	movwf	??_printf_console_MATRIX44
  5818  0F31  01A1               	clrf	??_printf_console_MATRIX44+1
  5819  0F32  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5820  0F33  03A1               	decf	??_printf_console_MATRIX44+1,f
  5821  0F34  09A0               	comf	??_printf_console_MATRIX44,f
  5822  0F35  09A1               	comf	??_printf_console_MATRIX44+1,f
  5823  0F36  0AA0               	incf	??_printf_console_MATRIX44,f
  5824  0F37  1903               	skipnz
  5825  0F38  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5826  0F39  087B               	movf	printf_console_MATRIX44@row,w
  5827  0F3A  00A2               	movwf	??_printf_console_MATRIX44+2
  5828  0F3B  01A3               	clrf	??_printf_console_MATRIX44+3
  5829  0F3C  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5830  0F3D  03A3               	decf	??_printf_console_MATRIX44+3,f
  5831  0F3E  0820               	movf	??_printf_console_MATRIX44,w
  5832  0F3F  0722               	addwf	??_printf_console_MATRIX44+2,w
  5833  0F40  00A4               	movwf	??_printf_console_MATRIX44+4
  5834  0F41  0821               	movf	??_printf_console_MATRIX44+1,w
  5835  0F42  1803               	skipnc
  5836  0F43  0A21               	incf	??_printf_console_MATRIX44+1,w
  5837  0F44  0723               	addwf	??_printf_console_MATRIX44+3,w
  5838  0F45  00A5               	movwf	??_printf_console_MATRIX44+5
  5839  0F46  0825               	movf	??_printf_console_MATRIX44+5,w
  5840  0F47  3A80               	xorlw	128
  5841  0F48  00FF               	movwf	127
  5842  0F49  3080               	movlw	128
  5843  0F4A  027F               	subwf	127,w
  5844  0F4B  1D03               	skipz
  5845  0F4C  2F4F               	goto	u6685
  5846  0F4D  3004               	movlw	4
  5847  0F4E  0224               	subwf	??_printf_console_MATRIX44+4,w
  5848  0F4F                     u6685:	
  5849  0F4F  1803               	skipnc
  5850  0F50  2FCD               	goto	l4846
  5851  0F51  0876               	movf	printf_console_MATRIX44@x,w
  5852  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  5853  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  5854  0F54  00A0               	movwf	??_printf_console_MATRIX44
  5855  0F55  01A1               	clrf	??_printf_console_MATRIX44+1
  5856  0F56  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5857  0F57  03A1               	decf	??_printf_console_MATRIX44+1,f
  5858  0F58  09A0               	comf	??_printf_console_MATRIX44,f
  5859  0F59  09A1               	comf	??_printf_console_MATRIX44+1,f
  5860  0F5A  0AA0               	incf	??_printf_console_MATRIX44,f
  5861  0F5B  1903               	skipnz
  5862  0F5C  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5863  0F5D  087C               	movf	printf_console_MATRIX44@col,w
  5864  0F5E  00A2               	movwf	??_printf_console_MATRIX44+2
  5865  0F5F  01A3               	clrf	??_printf_console_MATRIX44+3
  5866  0F60  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5867  0F61  03A3               	decf	??_printf_console_MATRIX44+3,f
  5868  0F62  0820               	movf	??_printf_console_MATRIX44,w
  5869  0F63  0722               	addwf	??_printf_console_MATRIX44+2,w
  5870  0F64  00A4               	movwf	??_printf_console_MATRIX44+4
  5871  0F65  0821               	movf	??_printf_console_MATRIX44+1,w
  5872  0F66  1803               	skipnc
  5873  0F67  0A21               	incf	??_printf_console_MATRIX44+1,w
  5874  0F68  0723               	addwf	??_printf_console_MATRIX44+3,w
  5875  0F69  00A5               	movwf	??_printf_console_MATRIX44+5
  5876  0F6A  1BA5               	btfsc	??_printf_console_MATRIX44+5,7
  5877  0F6B  2FCD               	goto	l4846
  5878  0F6C  0876               	movf	printf_console_MATRIX44@x,w
  5879  0F6D  00A0               	movwf	??_printf_console_MATRIX44
  5880  0F6E  01A1               	clrf	??_printf_console_MATRIX44+1
  5881  0F6F  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5882  0F70  03A1               	decf	??_printf_console_MATRIX44+1,f
  5883  0F71  09A0               	comf	??_printf_console_MATRIX44,f
  5884  0F72  09A1               	comf	??_printf_console_MATRIX44+1,f
  5885  0F73  0AA0               	incf	??_printf_console_MATRIX44,f
  5886  0F74  1903               	skipnz
  5887  0F75  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5888  0F76  087C               	movf	printf_console_MATRIX44@col,w
  5889  0F77  00A2               	movwf	??_printf_console_MATRIX44+2
  5890  0F78  01A3               	clrf	??_printf_console_MATRIX44+3
  5891  0F79  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5892  0F7A  03A3               	decf	??_printf_console_MATRIX44+3,f
  5893  0F7B  0820               	movf	??_printf_console_MATRIX44,w
  5894  0F7C  0722               	addwf	??_printf_console_MATRIX44+2,w
  5895  0F7D  00A4               	movwf	??_printf_console_MATRIX44+4
  5896  0F7E  0821               	movf	??_printf_console_MATRIX44+1,w
  5897  0F7F  1803               	skipnc
  5898  0F80  0A21               	incf	??_printf_console_MATRIX44+1,w
  5899  0F81  0723               	addwf	??_printf_console_MATRIX44+3,w
  5900  0F82  00A5               	movwf	??_printf_console_MATRIX44+5
  5901  0F83  0825               	movf	??_printf_console_MATRIX44+5,w
  5902  0F84  3A80               	xorlw	128
  5903  0F85  00FF               	movwf	127
  5904  0F86  3080               	movlw	128
  5905  0F87  027F               	subwf	127,w
  5906  0F88  1D03               	skipz
  5907  0F89  2F8C               	goto	u6705
  5908  0F8A  3004               	movlw	4
  5909  0F8B  0224               	subwf	??_printf_console_MATRIX44+4,w
  5910  0F8C                     u6705:	
  5911  0F8C  1803               	skipnc
  5912  0F8D  2FCD               	goto	l4846
  5913  0F8E  0876               	movf	printf_console_MATRIX44@x,w
  5914  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  5915  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  5916  0F91  00A0               	movwf	??_printf_console_MATRIX44
  5917  0F92  01A1               	clrf	??_printf_console_MATRIX44+1
  5918  0F93  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5919  0F94  03A1               	decf	??_printf_console_MATRIX44+1,f
  5920  0F95  09A0               	comf	??_printf_console_MATRIX44,f
  5921  0F96  09A1               	comf	??_printf_console_MATRIX44+1,f
  5922  0F97  0AA0               	incf	??_printf_console_MATRIX44,f
  5923  0F98  1903               	skipnz
  5924  0F99  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5925  0F9A  087C               	movf	printf_console_MATRIX44@col,w
  5926  0F9B  00A2               	movwf	??_printf_console_MATRIX44+2
  5927  0F9C  01A3               	clrf	??_printf_console_MATRIX44+3
  5928  0F9D  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5929  0F9E  03A3               	decf	??_printf_console_MATRIX44+3,f
  5930  0F9F  0820               	movf	??_printf_console_MATRIX44,w
  5931  0FA0  0722               	addwf	??_printf_console_MATRIX44+2,w
  5932  0FA1  00A4               	movwf	??_printf_console_MATRIX44+4
  5933  0FA2  0821               	movf	??_printf_console_MATRIX44+1,w
  5934  0FA3  1803               	skipnc
  5935  0FA4  0A21               	incf	??_printf_console_MATRIX44+1,w
  5936  0FA5  0723               	addwf	??_printf_console_MATRIX44+3,w
  5937  0FA6  00A5               	movwf	??_printf_console_MATRIX44+5
  5938  0FA7  0824               	movf	??_printf_console_MATRIX44+4,w
  5939  0FA8  0778               	addwf	printf_console_MATRIX44@matrix,w
  5940  0FA9  00A6               	movwf	??_printf_console_MATRIX44+6
  5941  0FAA  0825               	movf	??_printf_console_MATRIX44+5,w
  5942  0FAB  1803               	skipnc
  5943  0FAC  0A25               	incf	??_printf_console_MATRIX44+5,w
  5944  0FAD  0779               	addwf	printf_console_MATRIX44@matrix+1,w
  5945  0FAE  00A7               	movwf	??_printf_console_MATRIX44+7
  5946  0FAF  0377               	decf	printf_console_MATRIX44@y,w
  5947  0FB0  3AFF               	xorlw	255
  5948  0FB1  077B               	addwf	printf_console_MATRIX44@row,w
  5949  0FB2  00A8               	movwf	??_printf_console_MATRIX44+8
  5950  0FB3  3001               	movlw	1
  5951  0FB4                     u6715:	
  5952  0FB4  1003               	clrc
  5953  0FB5  0DA8               	rlf	??_printf_console_MATRIX44+8,f
  5954  0FB6  3EFF               	addlw	-1
  5955  0FB7  1D03               	skipz
  5956  0FB8  2FB4               	goto	u6715
  5957  0FB9  1003               	clrc
  5958  0FBA  0D28               	rlf	??_printf_console_MATRIX44+8,w
  5959  0FBB  0726               	addwf	??_printf_console_MATRIX44+6,w
  5960  0FBC  0084               	movwf	4
  5961  0FBD  0827               	movf	??_printf_console_MATRIX44+7,w
  5962  0FBE  1803               	skipnc
  5963  0FBF  0A27               	incf	??_printf_console_MATRIX44+7,w
  5964  0FC0  00FF               	movwf	127
  5965  0FC1  120A  158A  2000  120A  158A  	fcall	stringtab
  5966  0FC6  3A01               	xorlw	1
  5967  0FC7  1D03               	skipz
  5968  0FC8  2FCD               	goto	l4846
  5969                           
  5970                           ;teris_16f886.c: 368: {
  5971                           ;teris_16f886.c: 369: debug_str(1, "*");
  5972  0FC9  306A               	movlw	low (STR_6| (0+32768))
  5973  0FCA  00F3               	movwf	debug_str@str
  5974  0FCB  308E               	movlw	high (STR_6| (0+32768))
  5975  0FCC  2FD0               	goto	L11
  5976  0FCD                     l4846:	
  5977                           ;teris_16f886.c: 370: }
  5978                           
  5979                           
  5980                           ;teris_16f886.c: 371: else
  5981                           ;teris_16f886.c: 372: {
  5982                           ;teris_16f886.c: 373: debug_str(1, "_");
  5983  0FCD  306C               	movlw	low (STR_7| (0+32768))
  5984  0FCE  00F3               	movwf	debug_str@str
  5985  0FCF  308E               	movlw	high (STR_7| (0+32768))
  5986  0FD0                     L11:	
  5987  0FD0  00F4               	movwf	debug_str@str+1
  5988  0FD1  3001               	movlw	1
  5989  0FD2  160A  158A  2127  120A  158A  	fcall	_debug_str
  5990  0FD7  3001               	movlw	1
  5991  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  5992  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  5993  0FDA  00A0               	movwf	??_printf_console_MATRIX44
  5994  0FDB  0820               	movf	??_printf_console_MATRIX44,w
  5995  0FDC  07FC               	addwf	printf_console_MATRIX44@col,f
  5996  0FDD  087C               	movf	printf_console_MATRIX44@col,w
  5997  0FDE  3A80               	xorlw	128
  5998  0FDF  3E78               	addlw	-136
  5999  0FE0  1C03               	skipc
  6000  0FE1  2F14               	goto	l4834
  6001  0FE2                     l4852:	
  6002                           
  6003                           ;teris_16f886.c: 374: }
  6004                           ;teris_16f886.c: 375: }
  6005                           ;teris_16f886.c: 376: debug_line(1, "");
  6006  0FE2  3069               	movlw	low ((STR_1+2)| (0+32768))
  6007  0FE3  00F3               	movwf	debug_line@str
  6008  0FE4  308E               	movlw	high ((STR_1+2)| (0+32768))
  6009  0FE5  00F4               	movwf	debug_line@str+1
  6010  0FE6  3001               	movlw	1
  6011  0FE7  160A  158A  21A8  120A  158A  	fcall	_debug_line
  6012  0FEC  3001               	movlw	1
  6013  0FED  1283               	bcf	3,5	;RP0=0, select bank0
  6014  0FEE  1303               	bcf	3,6	;RP1=0, select bank0
  6015  0FEF  00A0               	movwf	??_printf_console_MATRIX44
  6016  0FF0  0820               	movf	??_printf_console_MATRIX44,w
  6017  0FF1  07FB               	addwf	printf_console_MATRIX44@row,f
  6018  0FF2  087B               	movf	printf_console_MATRIX44@row,w
  6019  0FF3  3A80               	xorlw	128
  6020  0FF4  3E78               	addlw	-136
  6021  0FF5  1C03               	skipc
  6022  0FF6  2F0E               	goto	l4828
  6023  0FF7                     l4858:	
  6024                           
  6025                           ;teris_16f886.c: 377: }
  6026                           ;teris_16f886.c: 378: debug_line(1, ">>>>>>>>>>>>>>>>>>>>");
  6027  0FF7  3093               	movlw	low (STR_9| (0+32768))
  6028  0FF8  00F3               	movwf	debug_line@str
  6029  0FF9  308D               	movlw	high (STR_9| (0+32768))
  6030  0FFA  00F4               	movwf	debug_line@str+1
  6031  0FFB  3001               	movlw	1
  6032  0FFC  160A  158A  21A8   	fcall	_debug_line
  6033  0FFF  0008               	return
  6034  1000                     __end_of_printf_console_MATRIX44:	
  6035                           
  6036                           	psect	text9
  6037  1933                     __ptext9:	
  6038 ;; *************** function _printf_console_Screen *****************
  6039 ;; Defined at:
  6040 ;;		line 567 in file "teris_16f886.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;  enable          1    wreg     unsigned char 
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;  enable          1   13[COMMON] unsigned char 
  6045 ;; Return value:  Size  Location     Type
  6046 ;;                  1    wreg      void 
  6047 ;; Registers used:
  6048 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6054 ;;      Params:         0       0       0       0       0
  6055 ;;      Locals:         1       0       0       0       0
  6056 ;;      Temps:          0       0       0       0       0
  6057 ;;      Totals:         1       0       0       0       0
  6058 ;;Total ram usage:        1 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; Hardware stack levels required when called:    4
  6061 ;; This function calls:
  6062 ;;		_printf_console_MATRIX88
  6063 ;; This function is called by:
  6064 ;;		_find_best_solution
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           
  6069                           ;psect for function _printf_console_Screen
  6070  1933                     _printf_console_Screen:	
  6071                           
  6072                           ;incstack = 0
  6073                           ; Regs used in _printf_console_Screen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  6074                           ;printf_console_Screen@enable stored from wreg
  6075  1933  00FD               	movwf	printf_console_Screen@enable
  6076                           
  6077                           ;teris_16f886.c: 569: if(enable == 1)
  6078  1934  037D               	decf	printf_console_Screen@enable,w
  6079  1935  1D03               	btfss	3,2
  6080  1936  0008               	return
  6081                           
  6082                           ;teris_16f886.c: 570: {
  6083                           ;teris_16f886.c: 571: printf_console_MATRIX88(1, &g_matrix88);
  6084  1937  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  6085  1938  00F6               	movwf	printf_console_MATRIX88@matrix
  6086  1939  3001               	movlw	1
  6087  193A  00F7               	movwf	printf_console_MATRIX88@matrix+1
  6088  193B  3001               	movlw	1
  6089  193C  160A  118A  20B5   	fcall	_printf_console_MATRIX88
  6090  193F  0008               	return
  6091  1940                     __end_of_printf_console_Screen:	
  6092                           
  6093                           	psect	text10
  6094  10B5                     __ptext10:	
  6095 ;; *************** function _printf_console_MATRIX88 *****************
  6096 ;; Defined at:
  6097 ;;		line 534 in file "teris_16f886.c"
  6098 ;; Parameters:    Size  Location     Type
  6099 ;;  enable          1    wreg     unsigned char 
  6100 ;;  matrix          2    6[COMMON] PTR const struct .
  6101 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;  enable          1    0[BANK0 ] unsigned char 
  6104 ;;  col             1    2[BANK0 ] unsigned char 
  6105 ;;  row             1    1[BANK0 ] unsigned char 
  6106 ;; Return value:  Size  Location     Type
  6107 ;;                  1    wreg      void 
  6108 ;; Registers used:
  6109 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6110 ;; Tracked objects:
  6111 ;;		On entry : 0/0
  6112 ;;		On exit  : 0/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6115 ;;      Params:         2       0       0       0       0
  6116 ;;      Locals:         0       3       0       0       0
  6117 ;;      Temps:          5       0       0       0       0
  6118 ;;      Totals:         7       3       0       0       0
  6119 ;;Total ram usage:       10 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; Hardware stack levels required when called:    3
  6122 ;; This function calls:
  6123 ;;		_debug_line
  6124 ;;		_debug_str
  6125 ;; This function is called by:
  6126 ;;		_printf_console_Screen
  6127 ;;		_find_best_solution
  6128 ;;		_main
  6129 ;; This function uses a non-reentrant model
  6130 ;;
  6131                           
  6132                           
  6133                           ;psect for function _printf_console_MATRIX88
  6134  10B5                     _printf_console_MATRIX88:	
  6135                           
  6136                           ;incstack = 0
  6137                           ; Regs used in _printf_console_MATRIX88: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  6138                           ;printf_console_MATRIX88@enable stored from wreg
  6139  10B5  1283               	bcf	3,5	;RP0=0, select bank0
  6140  10B6  1303               	bcf	3,6	;RP1=0, select bank0
  6141  10B7  00A0               	movwf	printf_console_MATRIX88@enable
  6142                           
  6143                           ;teris_16f886.c: 536: if(enable == 1)
  6144  10B8  0320               	decf	printf_console_MATRIX88@enable,w
  6145  10B9  1D03               	btfss	3,2
  6146  10BA  0008               	return
  6147                           
  6148                           ;teris_16f886.c: 537: {
  6149                           ;teris_16f886.c: 538: debug_line(1, "<<<<<<<<<<<<<<<<<<<<MATRIX88");
  6150  10BB  309F               	movlw	low (STR_17| (0+32768))
  6151  10BC  00F3               	movwf	debug_line@str
  6152  10BD  308C               	movlw	high (STR_17| (0+32768))
  6153  10BE  00F4               	movwf	debug_line@str+1
  6154  10BF  3001               	movlw	1
  6155  10C0  160A  158A  21A8  160A  118A  	fcall	_debug_line
  6156                           
  6157                           ;teris_16f886.c: 539: for(uint8_t row = 0; row < 8; row++)
  6158  10C5  1283               	bcf	3,5	;RP0=0, select bank0
  6159  10C6  1303               	bcf	3,6	;RP1=0, select bank0
  6160  10C7  01A1               	clrf	printf_console_MATRIX88@row
  6161  10C8  3008               	movlw	8
  6162  10C9  0221               	subwf	printf_console_MATRIX88@row,w
  6163  10CA  1803               	btfsc	3,0
  6164  10CB  291C               	goto	l4892
  6165  10CC                     l4870:	
  6166                           
  6167                           ;teris_16f886.c: 540: {
  6168                           ;teris_16f886.c: 541: for(uint8_t col = 0; col < 8; col++)
  6169  10CC  01A2               	clrf	printf_console_MATRIX88@col
  6170  10CD  3008               	movlw	8
  6171  10CE  0222               	subwf	printf_console_MATRIX88@col,w
  6172  10CF  1803               	btfsc	3,0
  6173  10D0  2908               	goto	l4886
  6174  10D1                     l4876:	
  6175                           
  6176                           ;teris_16f886.c: 542: {
  6177                           ;teris_16f886.c: 543: if(matrix->data[row][col] == 1)
  6178  10D1  0821               	movf	printf_console_MATRIX88@row,w
  6179  10D2  00F8               	movwf	??_printf_console_MATRIX88
  6180  10D3  3002               	movlw	2
  6181  10D4                     u6785:	
  6182  10D4  1003               	clrc
  6183  10D5  0DF8               	rlf	??_printf_console_MATRIX88,f
  6184  10D6  3EFF               	addlw	-1
  6185  10D7  1D03               	skipz
  6186  10D8  28D4               	goto	u6785
  6187  10D9  1003               	clrc
  6188  10DA  0D78               	rlf	??_printf_console_MATRIX88,w
  6189  10DB  0776               	addwf	printf_console_MATRIX88@matrix,w
  6190  10DC  00F9               	movwf	??_printf_console_MATRIX88+1
  6191  10DD  0877               	movf	printf_console_MATRIX88@matrix+1,w
  6192  10DE  1803               	skipnc
  6193  10DF  3E01               	addlw	1
  6194  10E0  00FA               	movwf	??_printf_console_MATRIX88+2
  6195  10E1  0822               	movf	printf_console_MATRIX88@col,w
  6196  10E2  0779               	addwf	??_printf_console_MATRIX88+1,w
  6197  10E3  00FB               	movwf	??_printf_console_MATRIX88+3
  6198  10E4  087A               	movf	??_printf_console_MATRIX88+2,w
  6199  10E5  1803               	skipnc
  6200  10E6  3E01               	addlw	1
  6201  10E7  00FC               	movwf	??_printf_console_MATRIX88+4
  6202  10E8  087B               	movf	??_printf_console_MATRIX88+3,w
  6203  10E9  0084               	movwf	4
  6204  10EA  1783               	bsf	3,7
  6205  10EB  1C7C               	btfss	??_printf_console_MATRIX88+4,0
  6206  10EC  1383               	bcf	3,7
  6207  10ED  0300               	decf	0,w
  6208  10EE  1D03               	btfss	3,2
  6209  10EF  28F4               	goto	l4880
  6210                           
  6211                           ;teris_16f886.c: 544: {
  6212                           ;teris_16f886.c: 545: debug_str(1, "*");
  6213  10F0  306A               	movlw	low (STR_6| (0+32768))
  6214  10F1  00F3               	movwf	debug_str@str
  6215  10F2  308E               	movlw	high (STR_6| (0+32768))
  6216  10F3  28F7               	goto	L12
  6217  10F4                     l4880:	
  6218                           ;teris_16f886.c: 546: }
  6219                           
  6220                           
  6221                           ;teris_16f886.c: 547: else
  6222                           ;teris_16f886.c: 548: {
  6223                           ;teris_16f886.c: 549: debug_str(1, "_");
  6224  10F4  306C               	movlw	low (STR_7| (0+32768))
  6225  10F5  00F3               	movwf	debug_str@str
  6226  10F6  308E               	movlw	high (STR_7| (0+32768))
  6227  10F7                     L12:	
  6228  10F7  00F4               	movwf	debug_str@str+1
  6229  10F8  3001               	movlw	1
  6230  10F9  160A  158A  2127  160A  118A  	fcall	_debug_str
  6231  10FE  3001               	movlw	1
  6232  10FF  00F8               	movwf	??_printf_console_MATRIX88
  6233  1100  0878               	movf	??_printf_console_MATRIX88,w
  6234  1101  1283               	bcf	3,5	;RP0=0, select bank0
  6235  1102  1303               	bcf	3,6	;RP1=0, select bank0
  6236  1103  07A2               	addwf	printf_console_MATRIX88@col,f
  6237  1104  3008               	movlw	8
  6238  1105  0222               	subwf	printf_console_MATRIX88@col,w
  6239  1106  1C03               	skipc
  6240  1107  28D1               	goto	l4876
  6241  1108                     l4886:	
  6242                           
  6243                           ;teris_16f886.c: 550: }
  6244                           ;teris_16f886.c: 551: }
  6245                           ;teris_16f886.c: 552: debug_line(1, "");
  6246  1108  3069               	movlw	low ((STR_1+2)| (0+32768))
  6247  1109  00F3               	movwf	debug_line@str
  6248  110A  308E               	movlw	high ((STR_1+2)| (0+32768))
  6249  110B  00F4               	movwf	debug_line@str+1
  6250  110C  3001               	movlw	1
  6251  110D  160A  158A  21A8  160A  118A  	fcall	_debug_line
  6252  1112  3001               	movlw	1
  6253  1113  00F8               	movwf	??_printf_console_MATRIX88
  6254  1114  0878               	movf	??_printf_console_MATRIX88,w
  6255  1115  1283               	bcf	3,5	;RP0=0, select bank0
  6256  1116  1303               	bcf	3,6	;RP1=0, select bank0
  6257  1117  07A1               	addwf	printf_console_MATRIX88@row,f
  6258  1118  3008               	movlw	8
  6259  1119  0221               	subwf	printf_console_MATRIX88@row,w
  6260  111A  1C03               	skipc
  6261  111B  28CC               	goto	l4870
  6262  111C                     l4892:	
  6263                           
  6264                           ;teris_16f886.c: 553: }
  6265                           ;teris_16f886.c: 554: debug_line(1, ">>>>>>>>>>>>>>>>>>>>");
  6266  111C  3093               	movlw	low (STR_9| (0+32768))
  6267  111D  00F3               	movwf	debug_line@str
  6268  111E  308D               	movlw	high (STR_9| (0+32768))
  6269  111F  00F4               	movwf	debug_line@str+1
  6270  1120  3001               	movlw	1
  6271  1121  160A  158A  21A8   	fcall	_debug_line
  6272  1124  0008               	return
  6273  1125                     __end_of_printf_console_MATRIX88:	
  6274                           
  6275                           	psect	text11
  6276  1927                     __ptext11:	
  6277 ;; *************** function _debug_str *****************
  6278 ;; Defined at:
  6279 ;;		line 288 in file "teris_16f886.c"
  6280 ;; Parameters:    Size  Location     Type
  6281 ;;  enable          1    wreg     unsigned char 
  6282 ;;  str             2    3[COMMON] PTR const unsigned char 
  6283 ;;		 -> STR_19(2), STR_18(2), STR_14(2), STR_13(2), 
  6284 ;;		 -> STR_7(2), STR_6(2), 
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;  enable          1    5[COMMON] unsigned char 
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  1    wreg      void 
  6289 ;; Registers used:
  6290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6296 ;;      Params:         2       0       0       0       0
  6297 ;;      Locals:         1       0       0       0       0
  6298 ;;      Temps:          0       0       0       0       0
  6299 ;;      Totals:         3       0       0       0       0
  6300 ;;Total ram usage:        3 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    2
  6303 ;; This function calls:
  6304 ;;		_USARTWriteString
  6305 ;; This function is called by:
  6306 ;;		_printf_console_MATRIX44
  6307 ;;		_printf_console_MATRIX88
  6308 ;;		_printf_console_MATRIX7219
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           
  6313                           ;psect for function _debug_str
  6314  1927                     _debug_str:	
  6315                           
  6316                           ;incstack = 0
  6317                           ; Regs used in _debug_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6318                           ;debug_str@enable stored from wreg
  6319  1927  00F5               	movwf	debug_str@enable
  6320                           
  6321                           ;teris_16f886.c: 290: if(enable == 1)
  6322  1928  0375               	decf	debug_str@enable,w
  6323  1929  1D03               	btfss	3,2
  6324  192A  0008               	return
  6325                           
  6326                           ;teris_16f886.c: 291: {
  6327                           ;teris_16f886.c: 295: USARTWriteString(str);
  6328  192B  0873               	movf	debug_str@str,w
  6329  192C  00F1               	movwf	USARTWriteString@str
  6330  192D  0874               	movf	debug_str@str+1,w
  6331  192E  00F2               	movwf	USARTWriteString@str+1
  6332  192F  160A  158A  222D   	fcall	_USARTWriteString
  6333  1932  0008               	return
  6334  1933                     __end_of_debug_str:	
  6335                           
  6336                           	psect	text12
  6337  1F99                     __ptext12:	
  6338 ;; *************** function _merge1 *****************
  6339 ;; Defined at:
  6340 ;;		line 804 in file "teris_16f886.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;  x               1    wreg     char 
  6343 ;;  y               1    0[BANK0 ] char 
  6344 ;;  matrix44        2    1[BANK0 ] PTR const struct .
  6345 ;;		 -> g_matrix44(384), 
  6346 ;;  matrix88_in     1    3[BANK0 ] PTR const struct .
  6347 ;;		 -> g_matrix88(64), 
  6348 ;;  matrix88_out    1    4[BANK0 ] PTR struct .
  6349 ;;		 -> find_best_solution@temp_matrix88(64), 
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;  x               1    9[BANK0 ] char 
  6352 ;;  col             1   13[BANK0 ] unsigned char 
  6353 ;;  row             1   12[BANK0 ] unsigned char 
  6354 ;;  len             2   10[BANK0 ] unsigned int 
  6355 ;; Return value:  Size  Location     Type
  6356 ;;                  1    wreg      void 
  6357 ;; Registers used:
  6358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6364 ;;      Params:         0       5       0       0       0
  6365 ;;      Locals:         0       5       0       0       0
  6366 ;;      Temps:          0       4       0       0       0
  6367 ;;      Totals:         0      14       0       0       0
  6368 ;;Total ram usage:       14 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    1
  6371 ;; This function calls:
  6372 ;;		_memcpy
  6373 ;; This function is called by:
  6374 ;;		_find_best_solution
  6375 ;; This function uses a non-reentrant model
  6376 ;;
  6377                           
  6378                           
  6379                           ;psect for function _merge1
  6380  1F99                     _merge1:	
  6381                           
  6382                           ;incstack = 0
  6383                           ; Regs used in _merge1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6384                           ;merge1@x stored from wreg
  6385  1F99  1283               	bcf	3,5	;RP0=0, select bank0
  6386  1F9A  1303               	bcf	3,6	;RP1=0, select bank0
  6387  1F9B  00A9               	movwf	merge1@x
  6388                           
  6389                           ;teris_16f886.c: 809: register size_t len;
  6390                           ;teris_16f886.c: 811: len = sizeof(MATRIX88);
  6391  1F9C  3040               	movlw	64
  6392  1F9D  00AA               	movwf	merge1@len
  6393  1F9E  3000               	movlw	0
  6394  1F9F  00AB               	movwf	merge1@len+1
  6395                           
  6396                           ;teris_16f886.c: 812: memcpy(matrix88_out, matrix88_in, len);
  6397  1FA0  0824               	movf	merge1@matrix88_out,w
  6398  1FA1  00F0               	movwf	memcpy@d1
  6399  1FA2  3000               	movlw	0
  6400  1FA3  00F1               	movwf	memcpy@d1+1
  6401  1FA4  0823               	movf	merge1@matrix88_in,w
  6402  1FA5  00F2               	movwf	memcpy@s1
  6403  1FA6  3001               	movlw	1
  6404  1FA7  00F3               	movwf	memcpy@s1+1
  6405  1FA8  082B               	movf	merge1@len+1,w
  6406  1FA9  00F5               	movwf	memcpy@n+1
  6407  1FAA  082A               	movf	merge1@len,w
  6408  1FAB  00F4               	movwf	memcpy@n
  6409  1FAC  160A  158A  22C3  160A  158A  	fcall	_memcpy
  6410                           
  6411                           ;teris_16f886.c: 814: for(uint8_t row = 0; row < 4; row++)
  6412  1FB1  1283               	bcf	3,5	;RP0=0, select bank0
  6413  1FB2  1303               	bcf	3,6	;RP1=0, select bank0
  6414  1FB3  01AC               	clrf	merge1@row
  6415  1FB4                     L13:	
  6416  1FB4  3004               	movlw	4
  6417  1FB5  022C               	subwf	merge1@row,w
  6418  1FB6  1803               	btfsc	3,0
  6419  1FB7  0008               	return
  6420                           
  6421                           ;teris_16f886.c: 815: {
  6422                           ;teris_16f886.c: 816: for(uint8_t col = 0; col < 4; col++)
  6423  1FB8  01AD               	clrf	merge1@col
  6424  1FB9  3004               	movlw	4
  6425  1FBA  022D               	subwf	merge1@col,w
  6426  1FBB  1803               	btfsc	3,0
  6427  1FBC  2FFB               	goto	l5132
  6428  1FBD                     l5124:	
  6429                           
  6430                           ;teris_16f886.c: 817: {
  6431                           ;teris_16f886.c: 818: if(matrix44->data[row][col] == 1)
  6432  1FBD  082C               	movf	merge1@row,w
  6433  1FBE  00A5               	movwf	??_merge1
  6434  1FBF  01A6               	clrf	??_merge1+1
  6435  1FC0  1003               	clrc
  6436  1FC1  0DA5               	rlf	??_merge1,f
  6437  1FC2  0DA6               	rlf	??_merge1+1,f
  6438  1FC3  1003               	clrc
  6439  1FC4  0DA5               	rlf	??_merge1,f
  6440  1FC5  0DA6               	rlf	??_merge1+1,f
  6441  1FC6  0825               	movf	??_merge1,w
  6442  1FC7  0721               	addwf	merge1@matrix44,w
  6443  1FC8  00A7               	movwf	??_merge1+2
  6444  1FC9  0826               	movf	??_merge1+1,w
  6445  1FCA  1803               	skipnc
  6446  1FCB  0A26               	incf	??_merge1+1,w
  6447  1FCC  0722               	addwf	merge1@matrix44+1,w
  6448  1FCD  00A8               	movwf	??_merge1+3
  6449  1FCE  082D               	movf	merge1@col,w
  6450  1FCF  0727               	addwf	??_merge1+2,w
  6451  1FD0  0084               	movwf	4
  6452  1FD1  0828               	movf	??_merge1+3,w
  6453  1FD2  1803               	skipnc
  6454  1FD3  0A28               	incf	??_merge1+3,w
  6455  1FD4  00FF               	movwf	127
  6456  1FD5  120A  158A  2000  160A  158A  	fcall	stringtab
  6457  1FDA  3A01               	xorlw	1
  6458  1FDB  1D03               	skipz
  6459  1FDC  2FF3               	goto	l5128
  6460                           
  6461                           ;teris_16f886.c: 819: {
  6462                           ;teris_16f886.c: 820: matrix88_out->data[y + row][x + col] = 1;
  6463  1FDD  082D               	movf	merge1@col,w
  6464  1FDE  0729               	addwf	merge1@x,w
  6465  1FDF  0724               	addwf	merge1@matrix88_out,w
  6466  1FE0  00A5               	movwf	??_merge1
  6467  1FE1  082C               	movf	merge1@row,w
  6468  1FE2  0720               	addwf	merge1@y,w
  6469  1FE3  00A6               	movwf	??_merge1+1
  6470  1FE4  3002               	movlw	2
  6471  1FE5                     u7315:	
  6472  1FE5  1003               	clrc
  6473  1FE6  0DA6               	rlf	??_merge1+1,f
  6474  1FE7  3EFF               	addlw	-1
  6475  1FE8  1D03               	skipz
  6476  1FE9  2FE5               	goto	u7315
  6477  1FEA  1003               	clrc
  6478  1FEB  0D26               	rlf	??_merge1+1,w
  6479  1FEC  0725               	addwf	??_merge1,w
  6480  1FED  00A7               	movwf	??_merge1+2
  6481  1FEE  0827               	movf	??_merge1+2,w
  6482  1FEF  0084               	movwf	4
  6483  1FF0  1383               	bcf	3,7	;select IRP bank0
  6484  1FF1  0180               	clrf	0
  6485  1FF2  0A80               	incf	0,f
  6486  1FF3                     l5128:	
  6487  1FF3  3001               	movlw	1
  6488  1FF4  00A5               	movwf	??_merge1
  6489  1FF5  0825               	movf	??_merge1,w
  6490  1FF6  07AD               	addwf	merge1@col,f
  6491  1FF7  3004               	movlw	4
  6492  1FF8  022D               	subwf	merge1@col,w
  6493  1FF9  1C03               	skipc
  6494  1FFA  2FBD               	goto	l5124
  6495  1FFB                     l5132:	
  6496  1FFB  3001               	movlw	1
  6497  1FFC  00A5               	movwf	??_merge1
  6498  1FFD  0825               	movf	??_merge1,w
  6499  1FFE  07AC               	addwf	merge1@row,f
  6500  1FFF  2FB4               	goto	L13
  6501  2000                     __end_of_merge1:	
  6502                           
  6503                           	psect	text13
  6504  1B7C                     __ptext13:	
  6505 ;; *************** function _left_most *****************
  6506 ;; Defined at:
  6507 ;;		line 859 in file "teris_16f886.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;  x               1    wreg     char 
  6510 ;;  matrix44        2   36[BANK0 ] PTR const struct .
  6511 ;;		 -> g_matrix44(384), 
  6512 ;;  matrix88        1   38[BANK0 ] PTR const struct .
  6513 ;;		 -> g_matrix88(64), 
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;  x               1   40[BANK0 ] char 
  6516 ;; Return value:  Size  Location     Type
  6517 ;;                  1    wreg      char 
  6518 ;; Registers used:
  6519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6525 ;;      Params:         0       3       0       0       0
  6526 ;;      Locals:         0       1       0       0       0
  6527 ;;      Temps:          0       1       0       0       0
  6528 ;;      Totals:         0       5       0       0       0
  6529 ;;Total ram usage:        5 bytes
  6530 ;; Hardware stack levels used:    1
  6531 ;; Hardware stack levels required when called:    4
  6532 ;; This function calls:
  6533 ;;		_debug_int1
  6534 ;;		_is_left_boundary
  6535 ;; This function is called by:
  6536 ;;		_find_best_solution
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           
  6541                           ;psect for function _left_most
  6542  1B7C                     _left_most:	
  6543                           
  6544                           ;incstack = 0
  6545                           ; Regs used in _left_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6546                           ;left_most@x stored from wreg
  6547  1B7C  1283               	bcf	3,5	;RP0=0, select bank0
  6548  1B7D  1303               	bcf	3,6	;RP1=0, select bank0
  6549  1B7E  00C8               	movwf	left_most@x
  6550  1B7F                     l384:	
  6551                           ;teris_16f886.c: 861: while(1)
  6552                           
  6553                           
  6554                           ;teris_16f886.c: 862: {
  6555                           ;teris_16f886.c: 863: if(is_left_boundary(x, matrix44, matrix88) == LEFT_OVER_BOUNDARY)
  6556  1B7F  0844               	movf	left_most@matrix44,w
  6557  1B80  00F6               	movwf	is_left_boundary@matrix44
  6558  1B81  0845               	movf	left_most@matrix44+1,w
  6559  1B82  00F7               	movwf	is_left_boundary@matrix44+1
  6560  1B83  0846               	movf	left_most@matrix88,w
  6561  1B84  00C7               	movwf	??_left_most
  6562  1B85  0847               	movf	??_left_most,w
  6563  1B86  00F8               	movwf	is_left_boundary@matrix88
  6564  1B87  0848               	movf	left_most@x,w
  6565  1B88  160A  158A  26D9  160A  158A  	fcall	_is_left_boundary
  6566  1B8D  3A02               	xorlw	2
  6567  1B8E  1D03               	skipz
  6568  1B8F  2BA7               	goto	l5184
  6569                           
  6570                           ;teris_16f886.c: 864: {
  6571                           ;teris_16f886.c: 865: debug_int1(0, "left_most = %d\n", x + 1);
  6572  1B90  3023               	movlw	low (STR_37| (0+32768))
  6573  1B91  1283               	bcf	3,5	;RP0=0, select bank0
  6574  1B92  1303               	bcf	3,6	;RP1=0, select bank0
  6575  1B93  00BF               	movwf	debug_int1@f
  6576  1B94  308E               	movlw	high (STR_37| (0+32768))
  6577  1B95  00C0               	movwf	debug_int1@f+1
  6578  1B96  3001               	movlw	1
  6579  1B97  0748               	addwf	left_most@x,w
  6580  1B98  00C1               	movwf	debug_int1@i
  6581  1B99  01C2               	clrf	debug_int1@i+1
  6582  1B9A  1803               	skipnc
  6583  1B9B  0AC2               	incf	debug_int1@i+1,f
  6584  1B9C  1BC8               	btfsc	left_most@x,7
  6585  1B9D  03C2               	decf	debug_int1@i+1,f
  6586  1B9E  3000               	movlw	0
  6587  1B9F  120A  118A  2003   	fcall	_debug_int1
  6588                           
  6589                           ;teris_16f886.c: 866: return x + 1;
  6590  1BA2  1283               	bcf	3,5	;RP0=0, select bank0
  6591  1BA3  1303               	bcf	3,6	;RP1=0, select bank0
  6592  1BA4  0848               	movf	left_most@x,w
  6593  1BA5  3E01               	addlw	1
  6594  1BA6  0008               	return
  6595  1BA7                     l5184:	
  6596                           
  6597                           ;teris_16f886.c: 867: }
  6598                           ;teris_16f886.c: 868: x--;
  6599  1BA7  30FF               	movlw	255
  6600  1BA8  1283               	bcf	3,5	;RP0=0, select bank0
  6601  1BA9  1303               	bcf	3,6	;RP1=0, select bank0
  6602  1BAA  00C7               	movwf	??_left_most
  6603  1BAB  0847               	movf	??_left_most,w
  6604  1BAC  07C8               	addwf	left_most@x,f
  6605  1BAD  2B7F               	goto	l384
  6606  1BAE                     __end_of_left_most:	
  6607                           
  6608                           	psect	text14
  6609  1ED9                     __ptext14:	
  6610 ;; *************** function _is_left_boundary *****************
  6611 ;; Defined at:
  6612 ;;		line 716 in file "teris_16f886.c"
  6613 ;; Parameters:    Size  Location     Type
  6614 ;;  x               1    wreg     char 
  6615 ;;  matrix44        2    6[COMMON] PTR const struct .
  6616 ;;		 -> g_matrix44(384), 
  6617 ;;  matrix88        1    8[COMMON] PTR const struct .
  6618 ;;		 -> g_matrix88(64), 
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;  x               1    0[BANK0 ] char 
  6621 ;;  col             1    2[BANK0 ] char 
  6622 ;;  row             1    1[BANK0 ] char 
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      unsigned char 
  6625 ;; Registers used:
  6626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6632 ;;      Params:         3       0       0       0       0
  6633 ;;      Locals:         0       3       0       0       0
  6634 ;;      Temps:          5       0       0       0       0
  6635 ;;      Totals:         8       3       0       0       0
  6636 ;;Total ram usage:       11 bytes
  6637 ;; Hardware stack levels used:    1
  6638 ;; Hardware stack levels required when called:    3
  6639 ;; This function calls:
  6640 ;;		_debug_line
  6641 ;; This function is called by:
  6642 ;;		_left_most
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           
  6647                           ;psect for function _is_left_boundary
  6648  1ED9                     _is_left_boundary:	
  6649                           
  6650                           ;incstack = 0
  6651                           ; Regs used in _is_left_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6652                           ;is_left_boundary@x stored from wreg
  6653  1ED9  1283               	bcf	3,5	;RP0=0, select bank0
  6654  1EDA  1303               	bcf	3,6	;RP1=0, select bank0
  6655  1EDB  00A0               	movwf	is_left_boundary@x
  6656                           
  6657                           ;teris_16f886.c: 718: for(int8_t row = 4 - 1; row >= 0; row--)
  6658  1EDC  3003               	movlw	3
  6659  1EDD  00F9               	movwf	??_is_left_boundary
  6660  1EDE  0879               	movf	??_is_left_boundary,w
  6661  1EDF  00A1               	movwf	is_left_boundary@row
  6662  1EE0  1BA1               	btfsc	is_left_boundary@row,7
  6663  1EE1  2F36               	goto	l4944
  6664  1EE2                     l4920:	
  6665                           
  6666                           ;teris_16f886.c: 719: {
  6667                           ;teris_16f886.c: 720: for(int8_t col = 0; col < 4; col++)
  6668  1EE2  01A2               	clrf	is_left_boundary@col
  6669  1EE3  0822               	movf	is_left_boundary@col,w
  6670  1EE4  3A80               	xorlw	128
  6671  1EE5  3E7C               	addlw	-132
  6672  1EE6  1803               	btfsc	3,0
  6673  1EE7  2F30               	goto	l4940
  6674  1EE8                     l4926:	
  6675                           
  6676                           ;teris_16f886.c: 721: {
  6677                           ;teris_16f886.c: 722: if(matrix44->data[row][col] == 1)
  6678  1EE8  0821               	movf	is_left_boundary@row,w
  6679  1EE9  00F9               	movwf	??_is_left_boundary
  6680  1EEA  01FA               	clrf	??_is_left_boundary+1
  6681  1EEB  1003               	clrc
  6682  1EEC  0DF9               	rlf	??_is_left_boundary,f
  6683  1EED  0DFA               	rlf	??_is_left_boundary+1,f
  6684  1EEE  1003               	clrc
  6685  1EEF  0DF9               	rlf	??_is_left_boundary,f
  6686  1EF0  0DFA               	rlf	??_is_left_boundary+1,f
  6687  1EF1  0879               	movf	??_is_left_boundary,w
  6688  1EF2  0776               	addwf	is_left_boundary@matrix44,w
  6689  1EF3  00FB               	movwf	??_is_left_boundary+2
  6690  1EF4  087A               	movf	??_is_left_boundary+1,w
  6691  1EF5  1803               	skipnc
  6692  1EF6  0A7A               	incf	??_is_left_boundary+1,w
  6693  1EF7  0777               	addwf	is_left_boundary@matrix44+1,w
  6694  1EF8  00FC               	movwf	??_is_left_boundary+3
  6695  1EF9  0822               	movf	is_left_boundary@col,w
  6696  1EFA  077B               	addwf	??_is_left_boundary+2,w
  6697  1EFB  0084               	movwf	4
  6698  1EFC  087C               	movf	??_is_left_boundary+3,w
  6699  1EFD  1803               	skipnc
  6700  1EFE  0A7C               	incf	??_is_left_boundary+3,w
  6701  1EFF  00FF               	movwf	127
  6702  1F00  120A  158A  2000  160A  158A  	fcall	stringtab
  6703  1F05  3A01               	xorlw	1
  6704  1F06  1D03               	skipz
  6705  1F07  2F25               	goto	l4936
  6706                           
  6707                           ;teris_16f886.c: 723: {
  6708                           ;teris_16f886.c: 724: if( x + col < 0)
  6709  1F08  0822               	movf	is_left_boundary@col,w
  6710  1F09  00F9               	movwf	??_is_left_boundary
  6711  1F0A  01FA               	clrf	??_is_left_boundary+1
  6712  1F0B  1BF9               	btfsc	??_is_left_boundary,7
  6713  1F0C  03FA               	decf	??_is_left_boundary+1,f
  6714  1F0D  0820               	movf	is_left_boundary@x,w
  6715  1F0E  00FB               	movwf	??_is_left_boundary+2
  6716  1F0F  01FC               	clrf	??_is_left_boundary+3
  6717  1F10  1BFB               	btfsc	??_is_left_boundary+2,7
  6718  1F11  03FC               	decf	??_is_left_boundary+3,f
  6719  1F12  0879               	movf	??_is_left_boundary,w
  6720  1F13  077B               	addwf	??_is_left_boundary+2,w
  6721  1F14  087C               	movf	??_is_left_boundary+3,w
  6722  1F15  1803               	skipnc
  6723  1F16  0A7C               	incf	??_is_left_boundary+3,w
  6724  1F17  077A               	addwf	??_is_left_boundary+1,w
  6725  1F18  00FD               	movwf	??_is_left_boundary+4
  6726  1F19  1FFD               	btfss	??_is_left_boundary+4,7
  6727  1F1A  2F25               	goto	l4936
  6728                           
  6729                           ;teris_16f886.c: 725: {
  6730                           ;teris_16f886.c: 726: debug_line(0, "LEFT_OVER_BOUNDARY");
  6731  1F1B  30BC               	movlw	low (STR_32| (0+32768))
  6732  1F1C  00F3               	movwf	debug_line@str
  6733  1F1D  308D               	movlw	high (STR_32| (0+32768))
  6734  1F1E  00F4               	movwf	debug_line@str+1
  6735  1F1F  3000               	movlw	0
  6736  1F20  160A  158A  21A8   	fcall	_debug_line
  6737                           
  6738                           ;teris_16f886.c: 727: return LEFT_OVER_BOUNDARY;
  6739  1F23  3002               	movlw	2
  6740  1F24  0008               	return
  6741  1F25                     l4936:	
  6742  1F25  3001               	movlw	1
  6743  1F26  00F9               	movwf	??_is_left_boundary
  6744  1F27  0879               	movf	??_is_left_boundary,w
  6745  1F28  1283               	bcf	3,5	;RP0=0, select bank0
  6746  1F29  1303               	bcf	3,6	;RP1=0, select bank0
  6747  1F2A  07A2               	addwf	is_left_boundary@col,f
  6748  1F2B  0822               	movf	is_left_boundary@col,w
  6749  1F2C  3A80               	xorlw	128
  6750  1F2D  3E7C               	addlw	-132
  6751  1F2E  1C03               	skipc
  6752  1F2F  2EE8               	goto	l4926
  6753  1F30                     l4940:	
  6754  1F30  30FF               	movlw	255
  6755  1F31  00F9               	movwf	??_is_left_boundary
  6756  1F32  0879               	movf	??_is_left_boundary,w
  6757  1F33  07A1               	addwf	is_left_boundary@row,f
  6758  1F34  1FA1               	btfss	is_left_boundary@row,7
  6759  1F35  2EE2               	goto	l4920
  6760  1F36                     l4944:	
  6761                           
  6762                           ;teris_16f886.c: 728: }
  6763                           ;teris_16f886.c: 729: }
  6764                           ;teris_16f886.c: 730: }
  6765                           ;teris_16f886.c: 731: }
  6766                           ;teris_16f886.c: 732: return OK;
  6767  1F36  3000               	movlw	0
  6768  1F37  0008               	return
  6769  1F38                     __end_of_is_left_boundary:	
  6770                           
  6771                           	psect	text15
  6772  12ED                     __ptext15:	
  6773 ;; *************** function _is_valid *****************
  6774 ;; Defined at:
  6775 ;;		line 685 in file "teris_16f886.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  x               1    wreg     char 
  6778 ;;  y               1   38[BANK0 ] char 
  6779 ;;  matrix44        2   39[BANK0 ] PTR const struct .
  6780 ;;		 -> g_matrix44(384), 
  6781 ;;  matrix88        1   41[BANK0 ] PTR const struct .
  6782 ;;		 -> g_matrix88(64), 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  x               1   46[BANK0 ] char 
  6785 ;;  col             1   48[BANK0 ] char 
  6786 ;;  row             1   47[BANK0 ] char 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  1    wreg      unsigned char 
  6789 ;; Registers used:
  6790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6796 ;;      Params:         0       4       0       0       0
  6797 ;;      Locals:         0       3       0       0       0
  6798 ;;      Temps:          0       4       0       0       0
  6799 ;;      Totals:         0      11       0       0       0
  6800 ;;Total ram usage:       11 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    3
  6803 ;; This function calls:
  6804 ;;		_debug_int2
  6805 ;;		_debug_line
  6806 ;; This function is called by:
  6807 ;;		_find_best_solution
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810                           
  6811                           
  6812                           ;psect for function _is_valid
  6813  12ED                     _is_valid:	
  6814                           
  6815                           ;incstack = 0
  6816                           ; Regs used in _is_valid: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6817                           ;is_valid@x stored from wreg
  6818  12ED  1283               	bcf	3,5	;RP0=0, select bank0
  6819  12EE  1303               	bcf	3,6	;RP1=0, select bank0
  6820  12EF  00CE               	movwf	is_valid@x
  6821                           
  6822                           ;teris_16f886.c: 687: debug_line(0, "==============is_valid============");
  6823  12F0  30A3               	movlw	low (STR_27| (0+32768))
  6824  12F1  00F3               	movwf	debug_line@str
  6825  12F2  308B               	movlw	high (STR_27| (0+32768))
  6826  12F3  00F4               	movwf	debug_line@str+1
  6827  12F4  3000               	movlw	0
  6828  12F5  160A  158A  21A8  160A  118A  	fcall	_debug_line
  6829                           
  6830                           ;teris_16f886.c: 688: for(int8_t row = 4 - 1; row >= 0; row--)
  6831  12FA  3003               	movlw	3
  6832  12FB  1283               	bcf	3,5	;RP0=0, select bank0
  6833  12FC  1303               	bcf	3,6	;RP1=0, select bank0
  6834  12FD  00CA               	movwf	??_is_valid
  6835  12FE  084A               	movf	??_is_valid,w
  6836  12FF  00CF               	movwf	is_valid@row
  6837  1300  1BCF               	btfsc	is_valid@row,7
  6838  1301  2BD0               	goto	l5062
  6839  1302                     l5020:	
  6840                           
  6841                           ;teris_16f886.c: 689: {
  6842                           ;teris_16f886.c: 690: for(int8_t col = 0; col < 4; col++)
  6843  1302  01D0               	clrf	is_valid@col
  6844  1303  0850               	movf	is_valid@col,w
  6845  1304  3A80               	xorlw	128
  6846  1305  3E7C               	addlw	-132
  6847  1306  1803               	btfsc	3,0
  6848  1307  2BCA               	goto	l5058
  6849  1308                     l5026:	
  6850                           
  6851                           ;teris_16f886.c: 691: {
  6852                           ;teris_16f886.c: 692: if(matrix44->data[row][col] == 1)
  6853  1308  084F               	movf	is_valid@row,w
  6854  1309  00CA               	movwf	??_is_valid
  6855  130A  01CB               	clrf	??_is_valid+1
  6856  130B  1003               	clrc
  6857  130C  0DCA               	rlf	??_is_valid,f
  6858  130D  0DCB               	rlf	??_is_valid+1,f
  6859  130E  1003               	clrc
  6860  130F  0DCA               	rlf	??_is_valid,f
  6861  1310  0DCB               	rlf	??_is_valid+1,f
  6862  1311  084A               	movf	??_is_valid,w
  6863  1312  0747               	addwf	is_valid@matrix44,w
  6864  1313  00CC               	movwf	??_is_valid+2
  6865  1314  084B               	movf	??_is_valid+1,w
  6866  1315  1803               	skipnc
  6867  1316  0A4B               	incf	??_is_valid+1,w
  6868  1317  0748               	addwf	is_valid@matrix44+1,w
  6869  1318  00CD               	movwf	??_is_valid+3
  6870  1319  0850               	movf	is_valid@col,w
  6871  131A  074C               	addwf	??_is_valid+2,w
  6872  131B  0084               	movwf	4
  6873  131C  084D               	movf	??_is_valid+3,w
  6874  131D  1803               	skipnc
  6875  131E  0A4D               	incf	??_is_valid+3,w
  6876  131F  00FF               	movwf	127
  6877  1320  120A  158A  2000  160A  118A  	fcall	stringtab
  6878  1325  3A01               	xorlw	1
  6879  1326  1D03               	skipz
  6880  1327  2BBF               	goto	l5054
  6881                           
  6882                           ;teris_16f886.c: 693: {
  6883                           ;teris_16f886.c: 694: if(matrix88->data[y + row][x + col] == 1)
  6884  1328  0850               	movf	is_valid@col,w
  6885  1329  074E               	addwf	is_valid@x,w
  6886  132A  0749               	addwf	is_valid@matrix88,w
  6887  132B  00CA               	movwf	??_is_valid
  6888  132C  084F               	movf	is_valid@row,w
  6889  132D  0746               	addwf	is_valid@y,w
  6890  132E  00CB               	movwf	??_is_valid+1
  6891  132F  3002               	movlw	2
  6892  1330                     u7095:	
  6893  1330  1003               	clrc
  6894  1331  0DCB               	rlf	??_is_valid+1,f
  6895  1332  3EFF               	addlw	-1
  6896  1333  1D03               	skipz
  6897  1334  2B30               	goto	u7095
  6898  1335  1003               	clrc
  6899  1336  0D4B               	rlf	??_is_valid+1,w
  6900  1337  074A               	addwf	??_is_valid,w
  6901  1338  00CC               	movwf	??_is_valid+2
  6902  1339  084C               	movf	??_is_valid+2,w
  6903  133A  0084               	movwf	4
  6904  133B  1783               	bsf	3,7	;select IRP bank2
  6905  133C  0300               	decf	0,w
  6906  133D  1D03               	btfss	3,2
  6907  133E  2B53               	goto	l5036
  6908                           
  6909                           ;teris_16f886.c: 695: {
  6910                           ;teris_16f886.c: 696: debug_int2(0, "not valid1 row = %d, col = %d", row, col);
  6911  133F  3028               	movlw	low (STR_28| (0+32768))
  6912  1340  00BF               	movwf	debug_int2@f
  6913  1341  308C               	movlw	high (STR_28| (0+32768))
  6914  1342  00C0               	movwf	debug_int2@f+1
  6915  1343  084F               	movf	is_valid@row,w
  6916  1344  00C1               	movwf	debug_int2@i1
  6917  1345  01C2               	clrf	debug_int2@i1+1
  6918  1346  1BC1               	btfsc	debug_int2@i1,7
  6919  1347  03C2               	decf	debug_int2@i1+1,f
  6920  1348  0850               	movf	is_valid@col,w
  6921  1349  00C3               	movwf	debug_int2@i2
  6922  134A  01C4               	clrf	debug_int2@i2+1
  6923  134B  1BC3               	btfsc	debug_int2@i2,7
  6924  134C  03C4               	decf	debug_int2@i2+1,f
  6925  134D  3000               	movlw	0
  6926  134E  160A  158A  229A   	fcall	_debug_int2
  6927                           
  6928                           ;teris_16f886.c: 697: return 0;
  6929  1351  3000               	movlw	0
  6930  1352  0008               	return
  6931  1353                     l5036:	
  6932                           
  6933                           ;teris_16f886.c: 698: }
  6934                           ;teris_16f886.c: 700: if(( x + col < 0) || (x + col >= 8))
  6935  1353  1283               	bcf	3,5	;RP0=0, select bank0
  6936  1354  1303               	bcf	3,6	;RP1=0, select bank0
  6937  1355  084E               	movf	is_valid@x,w
  6938  1356  0750               	addwf	is_valid@col,w
  6939  1357  00CA               	movwf	??_is_valid
  6940  1358  01CB               	clrf	??_is_valid+1
  6941  1359  1803               	skipnc
  6942  135A  0ACB               	incf	??_is_valid+1,f
  6943  135B  1BCE               	btfsc	is_valid@x,7
  6944  135C  03CB               	decf	??_is_valid+1,f
  6945  135D  1BD0               	btfsc	is_valid@col,7
  6946  135E  03CB               	decf	??_is_valid+1,f
  6947  135F  1283               	bcf	3,5	;RP0=0, select bank0
  6948  1360  1303               	bcf	3,6	;RP1=0, select bank0
  6949  1361  1BCB               	btfsc	??_is_valid+1,7
  6950  1362  2B7A               	goto	l5040
  6951  1363  084E               	movf	is_valid@x,w
  6952  1364  0750               	addwf	is_valid@col,w
  6953  1365  00CA               	movwf	??_is_valid
  6954  1366  01CB               	clrf	??_is_valid+1
  6955  1367  1803               	skipnc
  6956  1368  0ACB               	incf	??_is_valid+1,f
  6957  1369  1BCE               	btfsc	is_valid@x,7
  6958  136A  03CB               	decf	??_is_valid+1,f
  6959  136B  1BD0               	btfsc	is_valid@col,7
  6960  136C  03CB               	decf	??_is_valid+1,f
  6961  136D  1283               	bcf	3,5	;RP0=0, select bank0
  6962  136E  1303               	bcf	3,6	;RP1=0, select bank0
  6963  136F  084B               	movf	??_is_valid+1,w
  6964  1370  3A80               	xorlw	128
  6965  1371  00FF               	movwf	127
  6966  1372  3080               	movlw	128
  6967  1373  027F               	subwf	127,w
  6968  1374  1D03               	skipz
  6969  1375  2B78               	goto	u7145
  6970  1376  3008               	movlw	8
  6971  1377  024A               	subwf	??_is_valid,w
  6972  1378                     u7145:	
  6973  1378  1C03               	skipc
  6974  1379  2B90               	goto	l5046
  6975  137A                     l5040:	
  6976                           
  6977                           ;teris_16f886.c: 701: {
  6978                           ;teris_16f886.c: 702: debug_int2(0, "not valid2 row = %d, col = %d", row, col);
  6979  137A  3046               	movlw	low (STR_29| (0+32768))
  6980  137B  1283               	bcf	3,5	;RP0=0, select bank0
  6981  137C  1303               	bcf	3,6	;RP1=0, select bank0
  6982  137D  00BF               	movwf	debug_int2@f
  6983  137E  308C               	movlw	high (STR_29| (0+32768))
  6984  137F  00C0               	movwf	debug_int2@f+1
  6985  1380  084F               	movf	is_valid@row,w
  6986  1381  00C1               	movwf	debug_int2@i1
  6987  1382  01C2               	clrf	debug_int2@i1+1
  6988  1383  1BC1               	btfsc	debug_int2@i1,7
  6989  1384  03C2               	decf	debug_int2@i1+1,f
  6990  1385  0850               	movf	is_valid@col,w
  6991  1386  00C3               	movwf	debug_int2@i2
  6992  1387  01C4               	clrf	debug_int2@i2+1
  6993  1388  1BC3               	btfsc	debug_int2@i2,7
  6994  1389  03C4               	decf	debug_int2@i2+1,f
  6995  138A  3000               	movlw	0
  6996  138B  160A  158A  229A   	fcall	_debug_int2
  6997                           
  6998                           ;teris_16f886.c: 703: return 0;
  6999  138E  3000               	movlw	0
  7000  138F  0008               	return
  7001  1390                     l5046:	
  7002                           
  7003                           ;teris_16f886.c: 704: }
  7004                           ;teris_16f886.c: 705: if((y + row) > (8 - 1))
  7005  1390  1283               	bcf	3,5	;RP0=0, select bank0
  7006  1391  1303               	bcf	3,6	;RP1=0, select bank0
  7007  1392  0846               	movf	is_valid@y,w
  7008  1393  074F               	addwf	is_valid@row,w
  7009  1394  00CA               	movwf	??_is_valid
  7010  1395  01CB               	clrf	??_is_valid+1
  7011  1396  1803               	skipnc
  7012  1397  0ACB               	incf	??_is_valid+1,f
  7013  1398  1BC6               	btfsc	is_valid@y,7
  7014  1399  03CB               	decf	??_is_valid+1,f
  7015  139A  1BCF               	btfsc	is_valid@row,7
  7016  139B  03CB               	decf	??_is_valid+1,f
  7017  139C  1283               	bcf	3,5	;RP0=0, select bank0
  7018  139D  1303               	bcf	3,6	;RP1=0, select bank0
  7019  139E  084B               	movf	??_is_valid+1,w
  7020  139F  3A80               	xorlw	128
  7021  13A0  00FF               	movwf	127
  7022  13A1  3080               	movlw	128
  7023  13A2  027F               	subwf	127,w
  7024  13A3  1D03               	skipz
  7025  13A4  2BA7               	goto	u7165
  7026  13A5  3008               	movlw	8
  7027  13A6  024A               	subwf	??_is_valid,w
  7028  13A7                     u7165:	
  7029  13A7  1C03               	skipc
  7030  13A8  2BBF               	goto	l5054
  7031                           
  7032                           ;teris_16f886.c: 706: {
  7033                           ;teris_16f886.c: 707: debug_int2(0, "not valid3 row = %d, col = %d", row, col);
  7034  13A9  3064               	movlw	low (STR_30| (0+32768))
  7035  13AA  1283               	bcf	3,5	;RP0=0, select bank0
  7036  13AB  1303               	bcf	3,6	;RP1=0, select bank0
  7037  13AC  00BF               	movwf	debug_int2@f
  7038  13AD  308C               	movlw	high (STR_30| (0+32768))
  7039  13AE  00C0               	movwf	debug_int2@f+1
  7040  13AF  084F               	movf	is_valid@row,w
  7041  13B0  00C1               	movwf	debug_int2@i1
  7042  13B1  01C2               	clrf	debug_int2@i1+1
  7043  13B2  1BC1               	btfsc	debug_int2@i1,7
  7044  13B3  03C2               	decf	debug_int2@i1+1,f
  7045  13B4  0850               	movf	is_valid@col,w
  7046  13B5  00C3               	movwf	debug_int2@i2
  7047  13B6  01C4               	clrf	debug_int2@i2+1
  7048  13B7  1BC3               	btfsc	debug_int2@i2,7
  7049  13B8  03C4               	decf	debug_int2@i2+1,f
  7050  13B9  3000               	movlw	0
  7051  13BA  160A  158A  229A   	fcall	_debug_int2
  7052                           
  7053                           ;teris_16f886.c: 708: return 0;
  7054  13BD  3000               	movlw	0
  7055  13BE  0008               	return
  7056  13BF                     l5054:	
  7057  13BF  3001               	movlw	1
  7058  13C0  1283               	bcf	3,5	;RP0=0, select bank0
  7059  13C1  1303               	bcf	3,6	;RP1=0, select bank0
  7060  13C2  00CA               	movwf	??_is_valid
  7061  13C3  084A               	movf	??_is_valid,w
  7062  13C4  07D0               	addwf	is_valid@col,f
  7063  13C5  0850               	movf	is_valid@col,w
  7064  13C6  3A80               	xorlw	128
  7065  13C7  3E7C               	addlw	-132
  7066  13C8  1C03               	skipc
  7067  13C9  2B08               	goto	l5026
  7068  13CA                     l5058:	
  7069  13CA  30FF               	movlw	255
  7070  13CB  00CA               	movwf	??_is_valid
  7071  13CC  084A               	movf	??_is_valid,w
  7072  13CD  07CF               	addwf	is_valid@row,f
  7073  13CE  1FCF               	btfss	is_valid@row,7
  7074  13CF  2B02               	goto	l5020
  7075  13D0                     l5062:	
  7076                           
  7077                           ;teris_16f886.c: 709: }
  7078                           ;teris_16f886.c: 710: }
  7079                           ;teris_16f886.c: 711: }
  7080                           ;teris_16f886.c: 712: }
  7081                           ;teris_16f886.c: 713: debug_line(0, "valid");
  7082  13D0  3061               	movlw	low (STR_31| (0+32768))
  7083  13D1  00F3               	movwf	debug_line@str
  7084  13D2  308E               	movlw	high (STR_31| (0+32768))
  7085  13D3  00F4               	movwf	debug_line@str+1
  7086  13D4  3000               	movlw	0
  7087  13D5  160A  158A  21A8   	fcall	_debug_line
  7088                           
  7089                           ;teris_16f886.c: 714: return 1;
  7090  13D8  3001               	movlw	1
  7091  13D9  0008               	return
  7092  13DA                     __end_of_is_valid:	
  7093                           
  7094                           	psect	text16
  7095  19A8                     __ptext16:	
  7096 ;; *************** function _debug_line *****************
  7097 ;; Defined at:
  7098 ;;		line 300 in file "teris_16f886.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;  enable          1    wreg     unsigned char 
  7101 ;;  str             2    3[COMMON] PTR const unsigned char 
  7102 ;;		 -> STR_62(13), STR_60(13), STR_43(45), STR_33(20), 
  7103 ;;		 -> STR_32(19), STR_31(6), STR_27(35), STR_26(8), 
  7104 ;;		 -> STR_23(35), STR_21(21), STR_20(1), STR_17(29), 
  7105 ;;		 -> STR_16(21), STR_15(1), STR_12(21), STR_9(21), 
  7106 ;;		 -> STR_8(1), STR_5(29), 
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;  enable          1    5[COMMON] unsigned char 
  7109 ;; Return value:  Size  Location     Type
  7110 ;;                  1    wreg      void 
  7111 ;; Registers used:
  7112 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7113 ;; Tracked objects:
  7114 ;;		On entry : 0/0
  7115 ;;		On exit  : 0/0
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7118 ;;      Params:         2       0       0       0       0
  7119 ;;      Locals:         1       0       0       0       0
  7120 ;;      Temps:          0       0       0       0       0
  7121 ;;      Totals:         3       0       0       0       0
  7122 ;;Total ram usage:        3 bytes
  7123 ;; Hardware stack levels used:    1
  7124 ;; Hardware stack levels required when called:    2
  7125 ;; This function calls:
  7126 ;;		_USARTWriteString
  7127 ;; This function is called by:
  7128 ;;		_printf_console_MATRIX44
  7129 ;;		_printf_console_MATRIX88
  7130 ;;		_hit_land
  7131 ;;		_is_valid
  7132 ;;		_is_left_boundary
  7133 ;;		_is_right_boundary
  7134 ;;		_find_best_solution
  7135 ;;		_main
  7136 ;;		_printf_console_MATRIX7219
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           
  7141                           ;psect for function _debug_line
  7142  19A8                     _debug_line:	
  7143                           
  7144                           ;incstack = 0
  7145                           ; Regs used in _debug_line: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7146                           ;debug_line@enable stored from wreg
  7147  19A8  00F5               	movwf	debug_line@enable
  7148                           
  7149                           ;teris_16f886.c: 302: if(enable == 1)
  7150  19A9  0375               	decf	debug_line@enable,w
  7151  19AA  1D03               	btfss	3,2
  7152  19AB  0008               	return
  7153                           
  7154                           ;teris_16f886.c: 303: {
  7155                           ;teris_16f886.c: 308: USARTWriteString(str);
  7156  19AC  0873               	movf	debug_line@str,w
  7157  19AD  00F1               	movwf	USARTWriteString@str
  7158  19AE  0874               	movf	debug_line@str+1,w
  7159  19AF  00F2               	movwf	USARTWriteString@str+1
  7160  19B0  160A  158A  222D  160A  158A  	fcall	_USARTWriteString
  7161                           
  7162                           ;teris_16f886.c: 309: USARTWriteString("\r\n");
  7163  19B5  3067               	movlw	low (STR_1| (0+32768))
  7164  19B6  00F1               	movwf	USARTWriteString@str
  7165  19B7  308E               	movlw	high (STR_1| (0+32768))
  7166  19B8  00F2               	movwf	USARTWriteString@str+1
  7167  19B9  160A  158A  222D   	fcall	_USARTWriteString
  7168  19BC  0008               	return
  7169  19BD                     __end_of_debug_line:	
  7170                           
  7171                           	psect	text17
  7172  0028                     __ptext17:	
  7173 ;; *************** function _get_holes_after_merge *****************
  7174 ;; Defined at:
  7175 ;;		line 909 in file "teris_16f886.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;  matrix          1    wreg     PTR struct .
  7178 ;;		 -> find_best_solution@temp_matrix88(64), 
  7179 ;; Auto vars:     Size  Location     Type
  7180 ;;  matrix          1   48[BANK0 ] PTR struct .
  7181 ;;		 -> find_best_solution@temp_matrix88(64), 
  7182 ;;  row             1   51[BANK0 ] char 
  7183 ;;  col             1   50[BANK0 ] char 
  7184 ;;  start           1   49[BANK0 ] char 
  7185 ;;  stop            1   47[BANK0 ] char 
  7186 ;;  num_hole        1   46[BANK0 ] unsigned char 
  7187 ;; Return value:  Size  Location     Type
  7188 ;;                  1    wreg      unsigned char 
  7189 ;; Registers used:
  7190 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7196 ;;      Params:         0       0       0       0       0
  7197 ;;      Locals:         0       6       0       0       0
  7198 ;;      Temps:          0       6       0       0       0
  7199 ;;      Totals:         0      12       0       0       0
  7200 ;;Total ram usage:       12 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:    3
  7203 ;; This function calls:
  7204 ;;		_debug_int1
  7205 ;;		_debug_int3
  7206 ;; This function is called by:
  7207 ;;		_find_best_solution
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function _get_holes_after_merge
  7213  0028                     _get_holes_after_merge:	
  7214                           
  7215                           ;incstack = 0
  7216                           ; Regs used in _get_holes_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  7217                           ;get_holes_after_merge@matrix stored from wreg
  7218  0028  1283               	bcf	3,5	;RP0=0, select bank0
  7219  0029  1303               	bcf	3,6	;RP1=0, select bank0
  7220  002A  00D0               	movwf	get_holes_after_merge@matrix
  7221                           
  7222                           ;teris_16f886.c: 911: int8_t start = -1;
  7223  002B  01D1               	clrf	get_holes_after_merge@start
  7224  002C  03D1               	decf	get_holes_after_merge@start,f
  7225                           
  7226                           ;teris_16f886.c: 912: int8_t stop = -1;
  7227  002D  01CF               	clrf	get_holes_after_merge@stop
  7228  002E  03CF               	decf	get_holes_after_merge@stop,f
  7229                           
  7230                           ;teris_16f886.c: 913: uint8_t num_hole = 0;
  7231  002F  01CE               	clrf	get_holes_after_merge@num_hole
  7232                           
  7233                           ;teris_16f886.c: 914: for(int8_t col = 0; col < 8; col++)
  7234  0030  01D2               	clrf	get_holes_after_merge@col
  7235  0031  0852               	movf	get_holes_after_merge@col,w
  7236  0032  3A80               	xorlw	128
  7237  0033  3E78               	addlw	-136
  7238  0034  1803               	btfsc	3,0
  7239  0035  2954               	goto	l5320
  7240  0036                     l5254:	
  7241                           
  7242                           ;teris_16f886.c: 915: {
  7243                           ;teris_16f886.c: 916: start = stop = -1;
  7244  0036  30FF               	movlw	255
  7245  0037  00CF               	movwf	get_holes_after_merge@stop
  7246  0038  00C8               	movwf	??_get_holes_after_merge
  7247  0039  0848               	movf	??_get_holes_after_merge,w
  7248  003A  00D1               	movwf	get_holes_after_merge@start
  7249                           
  7250                           ;teris_16f886.c: 917: for(int8_t row = 0; row < 8; row++)
  7251  003B  01D3               	clrf	get_holes_after_merge@row
  7252  003C  0853               	movf	get_holes_after_merge@row,w
  7253  003D  3A80               	xorlw	128
  7254  003E  3E78               	addlw	-136
  7255  003F  1803               	btfsc	3,0
  7256  0040  2903               	goto	l415
  7257  0041                     l5262:	
  7258                           
  7259                           ;teris_16f886.c: 918: {
  7260                           ;teris_16f886.c: 919: if(col == 0)
  7261  0041  0852               	movf	get_holes_after_merge@col,w
  7262  0042  1D03               	btfss	3,2
  7263  0043  2866               	goto	l5272
  7264                           
  7265                           ;teris_16f886.c: 920: {
  7266                           ;teris_16f886.c: 921: if((matrix->data[row][col] == 0) && (matrix->data[row][col + 1] ==
      +                           1))
  7267  0044  0853               	movf	get_holes_after_merge@row,w
  7268  0045  00C8               	movwf	??_get_holes_after_merge
  7269  0046  3002               	movlw	2
  7270  0047                     u7605:	
  7271  0047  1003               	clrc
  7272  0048  0DC8               	rlf	??_get_holes_after_merge,f
  7273  0049  3EFF               	addlw	-1
  7274  004A  1D03               	skipz
  7275  004B  2847               	goto	u7605
  7276  004C  1003               	clrc
  7277  004D  0D48               	rlf	??_get_holes_after_merge,w
  7278  004E  0750               	addwf	get_holes_after_merge@matrix,w
  7279  004F  00C9               	movwf	??_get_holes_after_merge+1
  7280  0050  0852               	movf	get_holes_after_merge@col,w
  7281  0051  0749               	addwf	??_get_holes_after_merge+1,w
  7282  0052  00CA               	movwf	??_get_holes_after_merge+2
  7283  0053  084A               	movf	??_get_holes_after_merge+2,w
  7284  0054  0084               	movwf	4
  7285  0055  1383               	bcf	3,7	;select IRP bank0
  7286  0056  0800               	movf	0,w
  7287  0057  1D03               	btfss	3,2
  7288  0058  28D2               	goto	l5292
  7289  0059  0852               	movf	get_holes_after_merge@col,w
  7290  005A  3E01               	addlw	1
  7291  005B  0750               	addwf	get_holes_after_merge@matrix,w
  7292  005C  00C8               	movwf	??_get_holes_after_merge
  7293  005D  0853               	movf	get_holes_after_merge@row,w
  7294  005E  00C9               	movwf	??_get_holes_after_merge+1
  7295  005F  3002               	movlw	2
  7296  0060                     u7625:	
  7297  0060  1003               	clrc
  7298  0061  0DC9               	rlf	??_get_holes_after_merge+1,f
  7299  0062  3EFF               	addlw	-1
  7300  0063  1D03               	skipz
  7301  0064  2860               	goto	u7625
  7302  0065  28C2               	goto	L15
  7303  0066                     l5272:	
  7304                           ;teris_16f886.c: 926: }
  7305                           ;teris_16f886.c: 927: }
  7306                           ;teris_16f886.c: 928: }
  7307                           
  7308                           ;teris_16f886.c: 924: {
  7309                           ;teris_16f886.c: 925: start = row;
  7310                           
  7311                           ;teris_16f886.c: 922: {
  7312                           ;teris_16f886.c: 923: if(start == -1)
  7313                           
  7314                           
  7315                           ;teris_16f886.c: 929: else if(col == 8 - 1)
  7316  0066  3007               	movlw	7
  7317  0067  0652               	xorwf	get_holes_after_merge@col,w
  7318  0068  1D03               	btfss	3,2
  7319  0069  288C               	goto	l5282
  7320                           
  7321                           ;teris_16f886.c: 930: {
  7322                           ;teris_16f886.c: 931: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] ==
      +                           1))
  7323  006A  0853               	movf	get_holes_after_merge@row,w
  7324  006B  00C8               	movwf	??_get_holes_after_merge
  7325  006C  3002               	movlw	2
  7326  006D                     u7665:	
  7327  006D  1003               	clrc
  7328  006E  0DC8               	rlf	??_get_holes_after_merge,f
  7329  006F  3EFF               	addlw	-1
  7330  0070  1D03               	skipz
  7331  0071  286D               	goto	u7665
  7332  0072  1003               	clrc
  7333  0073  0D48               	rlf	??_get_holes_after_merge,w
  7334  0074  0750               	addwf	get_holes_after_merge@matrix,w
  7335  0075  00C9               	movwf	??_get_holes_after_merge+1
  7336  0076  0852               	movf	get_holes_after_merge@col,w
  7337  0077  0749               	addwf	??_get_holes_after_merge+1,w
  7338  0078  00CA               	movwf	??_get_holes_after_merge+2
  7339  0079  084A               	movf	??_get_holes_after_merge+2,w
  7340  007A  0084               	movwf	4
  7341  007B  1383               	bcf	3,7	;select IRP bank0
  7342  007C  0800               	movf	0,w
  7343  007D  1D03               	btfss	3,2
  7344  007E  28D2               	goto	l5292
  7345  007F  0852               	movf	get_holes_after_merge@col,w
  7346  0080  3EFF               	addlw	255
  7347  0081  0750               	addwf	get_holes_after_merge@matrix,w
  7348  0082  00C8               	movwf	??_get_holes_after_merge
  7349  0083  0853               	movf	get_holes_after_merge@row,w
  7350  0084  00C9               	movwf	??_get_holes_after_merge+1
  7351  0085  3002               	movlw	2
  7352  0086                     u7685:	
  7353  0086  1003               	clrc
  7354  0087  0DC9               	rlf	??_get_holes_after_merge+1,f
  7355  0088  3EFF               	addlw	-1
  7356  0089  1D03               	skipz
  7357  008A  2886               	goto	u7685
  7358  008B  28C2               	goto	L15
  7359  008C                     l5282:	
  7360                           ;teris_16f886.c: 936: }
  7361                           ;teris_16f886.c: 937: }
  7362                           ;teris_16f886.c: 938: }
  7363                           
  7364                           ;teris_16f886.c: 934: {
  7365                           ;teris_16f886.c: 935: start = row;
  7366                           
  7367                           ;teris_16f886.c: 932: {
  7368                           ;teris_16f886.c: 933: if(start == -1)
  7369                           
  7370                           
  7371                           ;teris_16f886.c: 939: else
  7372                           ;teris_16f886.c: 940: {
  7373                           ;teris_16f886.c: 941: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] ==
      +                           1) && (matrix->data[row][col + 1] == 1))
  7374  008C  0853               	movf	get_holes_after_merge@row,w
  7375  008D  00C8               	movwf	??_get_holes_after_merge
  7376  008E  3002               	movlw	2
  7377  008F                     u7715:	
  7378  008F  1003               	clrc
  7379  0090  0DC8               	rlf	??_get_holes_after_merge,f
  7380  0091  3EFF               	addlw	-1
  7381  0092  1D03               	skipz
  7382  0093  288F               	goto	u7715
  7383  0094  1003               	clrc
  7384  0095  0D48               	rlf	??_get_holes_after_merge,w
  7385  0096  0750               	addwf	get_holes_after_merge@matrix,w
  7386  0097  00C9               	movwf	??_get_holes_after_merge+1
  7387  0098  0852               	movf	get_holes_after_merge@col,w
  7388  0099  0749               	addwf	??_get_holes_after_merge+1,w
  7389  009A  00CA               	movwf	??_get_holes_after_merge+2
  7390  009B  084A               	movf	??_get_holes_after_merge+2,w
  7391  009C  0084               	movwf	4
  7392  009D  1383               	bcf	3,7	;select IRP bank0
  7393  009E  0800               	movf	0,w
  7394  009F  1D03               	btfss	3,2
  7395  00A0  28D2               	goto	l5292
  7396  00A1  0852               	movf	get_holes_after_merge@col,w
  7397  00A2  3EFF               	addlw	255
  7398  00A3  0750               	addwf	get_holes_after_merge@matrix,w
  7399  00A4  00C8               	movwf	??_get_holes_after_merge
  7400  00A5  0853               	movf	get_holes_after_merge@row,w
  7401  00A6  00C9               	movwf	??_get_holes_after_merge+1
  7402  00A7  3002               	movlw	2
  7403  00A8                     u7735:	
  7404  00A8  1003               	clrc
  7405  00A9  0DC9               	rlf	??_get_holes_after_merge+1,f
  7406  00AA  3EFF               	addlw	-1
  7407  00AB  1D03               	skipz
  7408  00AC  28A8               	goto	u7735
  7409  00AD  1003               	clrc
  7410  00AE  0D49               	rlf	??_get_holes_after_merge+1,w
  7411  00AF  0748               	addwf	??_get_holes_after_merge,w
  7412  00B0  00CA               	movwf	??_get_holes_after_merge+2
  7413  00B1  084A               	movf	??_get_holes_after_merge+2,w
  7414  00B2  0084               	movwf	4
  7415  00B3  0300               	decf	0,w
  7416  00B4  1D03               	btfss	3,2
  7417  00B5  28D2               	goto	l5292
  7418  00B6  0852               	movf	get_holes_after_merge@col,w
  7419  00B7  3E01               	addlw	1
  7420  00B8  0750               	addwf	get_holes_after_merge@matrix,w
  7421  00B9  00C8               	movwf	??_get_holes_after_merge
  7422  00BA  0853               	movf	get_holes_after_merge@row,w
  7423  00BB  00C9               	movwf	??_get_holes_after_merge+1
  7424  00BC  3002               	movlw	2
  7425  00BD                     u7755:	
  7426  00BD  1003               	clrc
  7427  00BE  0DC9               	rlf	??_get_holes_after_merge+1,f
  7428  00BF  3EFF               	addlw	-1
  7429  00C0  1D03               	skipz
  7430  00C1  28BD               	goto	u7755
  7431  00C2                     L15:	
  7432  00C2  1003               	clrc
  7433  00C3  0D49               	rlf	??_get_holes_after_merge+1,w
  7434  00C4  0748               	addwf	??_get_holes_after_merge,w
  7435  00C5  00CA               	movwf	??_get_holes_after_merge+2
  7436  00C6  084A               	movf	??_get_holes_after_merge+2,w
  7437  00C7  0084               	movwf	4
  7438  00C8  0300               	decf	0,w
  7439  00C9  1D03               	btfss	3,2
  7440  00CA  28D2               	goto	l5292
  7441                           
  7442                           ;teris_16f886.c: 942: {
  7443                           ;teris_16f886.c: 943: if(start == -1)
  7444  00CB  0A51               	incf	get_holes_after_merge@start,w
  7445  00CC  1D03               	btfss	3,2
  7446  00CD  28D2               	goto	l5292
  7447                           
  7448                           ;teris_16f886.c: 944: {
  7449                           ;teris_16f886.c: 945: start = row;
  7450  00CE  0853               	movf	get_holes_after_merge@row,w
  7451  00CF  00C8               	movwf	??_get_holes_after_merge
  7452  00D0  0848               	movf	??_get_holes_after_merge,w
  7453  00D1  00D1               	movwf	get_holes_after_merge@start
  7454  00D2                     l5292:	
  7455                           
  7456                           ;teris_16f886.c: 946: }
  7457                           ;teris_16f886.c: 947: }
  7458                           ;teris_16f886.c: 948: }
  7459                           ;teris_16f886.c: 949: if(start >= 0)
  7460  00D2  1BD1               	btfsc	get_holes_after_merge@start,7
  7461  00D3  28FA               	goto	l426
  7462                           
  7463                           ;teris_16f886.c: 950: {
  7464                           ;teris_16f886.c: 951: if(row == 8 - 1)
  7465  00D4  3007               	movlw	7
  7466  00D5  0653               	xorwf	get_holes_after_merge@row,w
  7467  00D6  1D03               	btfss	3,2
  7468  00D7  28DD               	goto	l5300
  7469                           
  7470                           ;teris_16f886.c: 952: {
  7471                           ;teris_16f886.c: 953: if(stop == -1)
  7472  00D8  0A4F               	incf	get_holes_after_merge@stop,w
  7473  00D9  1D03               	btfss	3,2
  7474  00DA  28FA               	goto	l426
  7475                           
  7476                           ;teris_16f886.c: 954: {
  7477                           ;teris_16f886.c: 955: stop = 8;
  7478  00DB  3008               	movlw	8
  7479  00DC  28F7               	goto	L14
  7480  00DD                     l5300:	
  7481                           ;teris_16f886.c: 956: }
  7482                           ;teris_16f886.c: 957: }
  7483                           
  7484                           
  7485                           ;teris_16f886.c: 958: else if(matrix->data[row + 1][col] == 1)
  7486  00DD  0853               	movf	get_holes_after_merge@row,w
  7487  00DE  00C8               	movwf	??_get_holes_after_merge
  7488  00DF  3002               	movlw	2
  7489  00E0                     u7815:	
  7490  00E0  1003               	clrc
  7491  00E1  0DC8               	rlf	??_get_holes_after_merge,f
  7492  00E2  3EFF               	addlw	-1
  7493  00E3  1D03               	skipz
  7494  00E4  28E0               	goto	u7815
  7495  00E5  1003               	clrc
  7496  00E6  0D48               	rlf	??_get_holes_after_merge,w
  7497  00E7  3E08               	addlw	8
  7498  00E8  0750               	addwf	get_holes_after_merge@matrix,w
  7499  00E9  00C9               	movwf	??_get_holes_after_merge+1
  7500  00EA  0852               	movf	get_holes_after_merge@col,w
  7501  00EB  0749               	addwf	??_get_holes_after_merge+1,w
  7502  00EC  00CA               	movwf	??_get_holes_after_merge+2
  7503  00ED  084A               	movf	??_get_holes_after_merge+2,w
  7504  00EE  0084               	movwf	4
  7505  00EF  0300               	decf	0,w
  7506  00F0  1D03               	btfss	3,2
  7507  00F1  28FA               	goto	l426
  7508                           
  7509                           ;teris_16f886.c: 959: {
  7510                           ;teris_16f886.c: 960: if(stop == -1)
  7511  00F2  0A4F               	incf	get_holes_after_merge@stop,w
  7512  00F3  1D03               	btfss	3,2
  7513  00F4  28FA               	goto	l426
  7514                           
  7515                           ;teris_16f886.c: 961: {
  7516                           ;teris_16f886.c: 962: stop = row + 1;
  7517  00F5  0853               	movf	get_holes_after_merge@row,w
  7518  00F6  3E01               	addlw	1
  7519  00F7                     L14:	
  7520  00F7  00C8               	movwf	??_get_holes_after_merge
  7521  00F8  0848               	movf	??_get_holes_after_merge,w
  7522  00F9  00CF               	movwf	get_holes_after_merge@stop
  7523  00FA                     l426:	
  7524  00FA  3001               	movlw	1
  7525  00FB  00C8               	movwf	??_get_holes_after_merge
  7526  00FC  0848               	movf	??_get_holes_after_merge,w
  7527  00FD  07D3               	addwf	get_holes_after_merge@row,f
  7528  00FE  0853               	movf	get_holes_after_merge@row,w
  7529  00FF  3A80               	xorlw	128
  7530  0100  3E78               	addlw	-136
  7531  0101  1C03               	skipc
  7532  0102  2841               	goto	l5262
  7533  0103                     l415:	
  7534                           
  7535                           ;teris_16f886.c: 963: }
  7536                           ;teris_16f886.c: 964: }
  7537                           ;teris_16f886.c: 965: }
  7538                           ;teris_16f886.c: 967: }
  7539                           ;teris_16f886.c: 968: if((start >= 0) && (stop >= 0) && (stop - start >= 3))
  7540  0103  1FD1               	btfss	get_holes_after_merge@start,7
  7541  0104  1BCF               	btfsc	get_holes_after_merge@stop,7
  7542  0105  2949               	goto	l5316
  7543  0106  0851               	movf	get_holes_after_merge@start,w
  7544  0107  00C8               	movwf	??_get_holes_after_merge
  7545  0108  01C9               	clrf	??_get_holes_after_merge+1
  7546  0109  1BC8               	btfsc	??_get_holes_after_merge,7
  7547  010A  03C9               	decf	??_get_holes_after_merge+1,f
  7548  010B  09C8               	comf	??_get_holes_after_merge,f
  7549  010C  09C9               	comf	??_get_holes_after_merge+1,f
  7550  010D  0AC8               	incf	??_get_holes_after_merge,f
  7551  010E  1903               	skipnz
  7552  010F  0AC9               	incf	??_get_holes_after_merge+1,f
  7553  0110  084F               	movf	get_holes_after_merge@stop,w
  7554  0111  00CA               	movwf	??_get_holes_after_merge+2
  7555  0112  01CB               	clrf	??_get_holes_after_merge+3
  7556  0113  1BCA               	btfsc	??_get_holes_after_merge+2,7
  7557  0114  03CB               	decf	??_get_holes_after_merge+3,f
  7558  0115  0848               	movf	??_get_holes_after_merge,w
  7559  0116  074A               	addwf	??_get_holes_after_merge+2,w
  7560  0117  00CC               	movwf	??_get_holes_after_merge+4
  7561  0118  0849               	movf	??_get_holes_after_merge+1,w
  7562  0119  1803               	skipnc
  7563  011A  0A49               	incf	??_get_holes_after_merge+1,w
  7564  011B  074B               	addwf	??_get_holes_after_merge+3,w
  7565  011C  00CD               	movwf	??_get_holes_after_merge+5
  7566  011D  084D               	movf	??_get_holes_after_merge+5,w
  7567  011E  3A80               	xorlw	128
  7568  011F  00FF               	movwf	127
  7569  0120  3080               	movlw	128
  7570  0121  027F               	subwf	127,w
  7571  0122  1D03               	skipz
  7572  0123  2926               	goto	u7875
  7573  0124  3003               	movlw	3
  7574  0125  024C               	subwf	??_get_holes_after_merge+4,w
  7575  0126                     u7875:	
  7576  0126  1C03               	skipc
  7577  0127  2949               	goto	l5316
  7578                           
  7579                           ;teris_16f886.c: 969: {
  7580                           ;teris_16f886.c: 970: debug_int3(0, "col = %d, start = %d, stop = %d\n", col, start, sto
      +                          p);
  7581  0128  30E9               	movlw	low (STR_41| (0+32768))
  7582  0129  1283               	bcf	3,5	;RP0=0, select bank0
  7583  012A  1303               	bcf	3,6	;RP1=0, select bank0
  7584  012B  00BF               	movwf	debug_int3@f
  7585  012C  308B               	movlw	high (STR_41| (0+32768))
  7586  012D  00C0               	movwf	debug_int3@f+1
  7587  012E  0852               	movf	get_holes_after_merge@col,w
  7588  012F  00C1               	movwf	debug_int3@i1
  7589  0130  01C2               	clrf	debug_int3@i1+1
  7590  0131  1BC1               	btfsc	debug_int3@i1,7
  7591  0132  03C2               	decf	debug_int3@i1+1,f
  7592  0133  0851               	movf	get_holes_after_merge@start,w
  7593  0134  00C3               	movwf	debug_int3@i2
  7594  0135  01C4               	clrf	debug_int3@i2+1
  7595  0136  1BC3               	btfsc	debug_int3@i2,7
  7596  0137  03C4               	decf	debug_int3@i2+1,f
  7597  0138  084F               	movf	get_holes_after_merge@stop,w
  7598  0139  00C5               	movwf	debug_int3@i3
  7599  013A  01C6               	clrf	debug_int3@i3+1
  7600  013B  1BC5               	btfsc	debug_int3@i3,7
  7601  013C  03C6               	decf	debug_int3@i3+1,f
  7602  013D  3000               	movlw	0
  7603  013E  160A  158A  22ED  120A  118A  	fcall	_debug_int3
  7604                           
  7605                           ;teris_16f886.c: 971: num_hole++;
  7606  0143  3001               	movlw	1
  7607  0144  1283               	bcf	3,5	;RP0=0, select bank0
  7608  0145  1303               	bcf	3,6	;RP1=0, select bank0
  7609  0146  00C8               	movwf	??_get_holes_after_merge
  7610  0147  0848               	movf	??_get_holes_after_merge,w
  7611  0148  07CE               	addwf	get_holes_after_merge@num_hole,f
  7612  0149                     l5316:	
  7613  0149  3001               	movlw	1
  7614  014A  1283               	bcf	3,5	;RP0=0, select bank0
  7615  014B  1303               	bcf	3,6	;RP1=0, select bank0
  7616  014C  00C8               	movwf	??_get_holes_after_merge
  7617  014D  0848               	movf	??_get_holes_after_merge,w
  7618  014E  07D2               	addwf	get_holes_after_merge@col,f
  7619  014F  0852               	movf	get_holes_after_merge@col,w
  7620  0150  3A80               	xorlw	128
  7621  0151  3E78               	addlw	-136
  7622  0152  1C03               	skipc
  7623  0153  2836               	goto	l5254
  7624  0154                     l5320:	
  7625                           
  7626                           ;teris_16f886.c: 972: }
  7627                           ;teris_16f886.c: 973: }
  7628                           ;teris_16f886.c: 974: debug_int1(0, "num_hole = (%d)\n", num_hole);
  7629  0154  30F1               	movlw	low (STR_42| (0+32768))
  7630  0155  00BF               	movwf	debug_int1@f
  7631  0156  308D               	movlw	high (STR_42| (0+32768))
  7632  0157  00C0               	movwf	debug_int1@f+1
  7633  0158  084E               	movf	get_holes_after_merge@num_hole,w
  7634  0159  00C8               	movwf	??_get_holes_after_merge
  7635  015A  01C9               	clrf	??_get_holes_after_merge+1
  7636  015B  0848               	movf	??_get_holes_after_merge,w
  7637  015C  00C1               	movwf	debug_int1@i
  7638  015D  0849               	movf	??_get_holes_after_merge+1,w
  7639  015E  00C2               	movwf	debug_int1@i+1
  7640  015F  3000               	movlw	0
  7641  0160  120A  118A  2003   	fcall	_debug_int1
  7642                           
  7643                           ;teris_16f886.c: 975: return num_hole;
  7644  0163  1283               	bcf	3,5	;RP0=0, select bank0
  7645  0164  1303               	bcf	3,6	;RP1=0, select bank0
  7646  0165  084E               	movf	get_holes_after_merge@num_hole,w
  7647  0166  0008               	return
  7648  0167                     __end_of_get_holes_after_merge:	
  7649                           
  7650                           	psect	text18
  7651  1045                     __ptext18:	
  7652 ;; *************** function _get_high_after_merge *****************
  7653 ;; Defined at:
  7654 ;;		line 895 in file "teris_16f886.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;  y               1    wreg     char 
  7657 ;;  matrix          2   40[BANK0 ] PTR struct .
  7658 ;;		 -> g_matrix44(384), 
  7659 ;; Auto vars:     Size  Location     Type
  7660 ;;  y               1   46[BANK0 ] char 
  7661 ;;  col             1   47[BANK0 ] char 
  7662 ;;  row             1   48[BANK0 ] char 
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  1    wreg      unsigned char 
  7665 ;; Registers used:
  7666 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7672 ;;      Params:         0       2       0       0       0
  7673 ;;      Locals:         0       3       0       0       0
  7674 ;;      Temps:          0       4       0       0       0
  7675 ;;      Totals:         0       9       0       0       0
  7676 ;;Total ram usage:        9 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; Hardware stack levels required when called:    3
  7679 ;; This function calls:
  7680 ;;		_debug_int3
  7681 ;; This function is called by:
  7682 ;;		_find_best_solution
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           
  7687                           ;psect for function _get_high_after_merge
  7688  1045                     _get_high_after_merge:	
  7689                           
  7690                           ;incstack = 0
  7691                           ; Regs used in _get_high_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  7692                           ;get_high_after_merge@y stored from wreg
  7693  1045  1283               	bcf	3,5	;RP0=0, select bank0
  7694  1046  1303               	bcf	3,6	;RP1=0, select bank0
  7695  1047  00CE               	movwf	get_high_after_merge@y
  7696                           
  7697                           ;teris_16f886.c: 897: for(int8_t row = 0; row < 4; row++)
  7698  1048  01D0               	clrf	get_high_after_merge@row
  7699  1049                     L16:	
  7700  1049  0850               	movf	get_high_after_merge@row,w
  7701  104A  3A80               	xorlw	128
  7702  104B  3E7C               	addlw	-132
  7703  104C  1803               	btfsc	3,0
  7704  104D  0008               	return
  7705                           
  7706                           ;teris_16f886.c: 898: {
  7707                           ;teris_16f886.c: 899: for(int8_t col = 0; col < 4; col++)
  7708  104E  01CF               	clrf	get_high_after_merge@col
  7709  104F  084F               	movf	get_high_after_merge@col,w
  7710  1050  3A80               	xorlw	128
  7711  1051  3E7C               	addlw	-132
  7712  1052  1803               	btfsc	3,0
  7713  1053  28B0               	goto	l5242
  7714  1054                     l5230:	
  7715                           
  7716                           ;teris_16f886.c: 900: {
  7717                           ;teris_16f886.c: 901: if(matrix->data[row][col] == 1)
  7718  1054  0850               	movf	get_high_after_merge@row,w
  7719  1055  00CA               	movwf	??_get_high_after_merge
  7720  1056  01CB               	clrf	??_get_high_after_merge+1
  7721  1057  1003               	clrc
  7722  1058  0DCA               	rlf	??_get_high_after_merge,f
  7723  1059  0DCB               	rlf	??_get_high_after_merge+1,f
  7724  105A  1003               	clrc
  7725  105B  0DCA               	rlf	??_get_high_after_merge,f
  7726  105C  0DCB               	rlf	??_get_high_after_merge+1,f
  7727  105D  084A               	movf	??_get_high_after_merge,w
  7728  105E  0748               	addwf	get_high_after_merge@matrix,w
  7729  105F  00CC               	movwf	??_get_high_after_merge+2
  7730  1060  084B               	movf	??_get_high_after_merge+1,w
  7731  1061  1803               	skipnc
  7732  1062  0A4B               	incf	??_get_high_after_merge+1,w
  7733  1063  0749               	addwf	get_high_after_merge@matrix+1,w
  7734  1064  00CD               	movwf	??_get_high_after_merge+3
  7735  1065  084F               	movf	get_high_after_merge@col,w
  7736  1066  074C               	addwf	??_get_high_after_merge+2,w
  7737  1067  0084               	movwf	4
  7738  1068  084D               	movf	??_get_high_after_merge+3,w
  7739  1069  1803               	skipnc
  7740  106A  0A4D               	incf	??_get_high_after_merge+3,w
  7741  106B  00FF               	movwf	127
  7742  106C  120A  158A  2000  160A  118A  	fcall	stringtab
  7743  1071  3A01               	xorlw	1
  7744  1072  1D03               	skipz
  7745  1073  28A7               	goto	l5238
  7746                           
  7747                           ;teris_16f886.c: 902: {
  7748                           ;teris_16f886.c: 903: debug_int3(0, "get_high_after_merge y = %d, row = %d, height = %d\
      +                          n", y, row, 8 - y - row);
  7749  1074  30B0               	movlw	low (STR_40| (0+32768))
  7750  1075  00BF               	movwf	debug_int3@f
  7751  1076  3089               	movlw	high (STR_40| (0+32768))
  7752  1077  00C0               	movwf	debug_int3@f+1
  7753  1078  084E               	movf	get_high_after_merge@y,w
  7754  1079  00C1               	movwf	debug_int3@i1
  7755  107A  01C2               	clrf	debug_int3@i1+1
  7756  107B  1BC1               	btfsc	debug_int3@i1,7
  7757  107C  03C2               	decf	debug_int3@i1+1,f
  7758  107D  0850               	movf	get_high_after_merge@row,w
  7759  107E  00C3               	movwf	debug_int3@i2
  7760  107F  01C4               	clrf	debug_int3@i2+1
  7761  1080  1BC3               	btfsc	debug_int3@i2,7
  7762  1081  03C4               	decf	debug_int3@i2+1,f
  7763  1082  084E               	movf	get_high_after_merge@y,w
  7764  1083  0750               	addwf	get_high_after_merge@row,w
  7765  1084  00CA               	movwf	??_get_high_after_merge
  7766  1085  01CB               	clrf	??_get_high_after_merge+1
  7767  1086  1803               	skipnc
  7768  1087  0ACB               	incf	??_get_high_after_merge+1,f
  7769  1088  1BCE               	btfsc	get_high_after_merge@y,7
  7770  1089  03CB               	decf	??_get_high_after_merge+1,f
  7771  108A  1BD0               	btfsc	get_high_after_merge@row,7
  7772  108B  03CB               	decf	??_get_high_after_merge+1,f
  7773  108C  1283               	bcf	3,5	;RP0=0, select bank0
  7774  108D  1303               	bcf	3,6	;RP1=0, select bank0
  7775  108E  09CA               	comf	??_get_high_after_merge,f
  7776  108F  09CB               	comf	??_get_high_after_merge+1,f
  7777  1090  0ACA               	incf	??_get_high_after_merge,f
  7778  1091  1903               	skipnz
  7779  1092  0ACB               	incf	??_get_high_after_merge+1,f
  7780  1093  084A               	movf	??_get_high_after_merge,w
  7781  1094  3E08               	addlw	8
  7782  1095  00C5               	movwf	debug_int3@i3
  7783  1096  084B               	movf	??_get_high_after_merge+1,w
  7784  1097  1803               	skipnc
  7785  1098  3E01               	addlw	1
  7786  1099  3E00               	addlw	0
  7787  109A  00C6               	movwf	debug_int3@i3+1
  7788  109B  3000               	movlw	0
  7789  109C  160A  158A  22ED   	fcall	_debug_int3
  7790                           
  7791                           ;teris_16f886.c: 904: return (uint8_t)(8 - y - row);
  7792  109F  1283               	bcf	3,5	;RP0=0, select bank0
  7793  10A0  1303               	bcf	3,6	;RP1=0, select bank0
  7794  10A1  0850               	movf	get_high_after_merge@row,w
  7795  10A2  074E               	addwf	get_high_after_merge@y,w
  7796  10A3  3AFF               	xorlw	255
  7797  10A4  3E01               	addlw	1
  7798  10A5  3E08               	addlw	8
  7799  10A6  0008               	return
  7800  10A7                     l5238:	
  7801  10A7  3001               	movlw	1
  7802  10A8  00CA               	movwf	??_get_high_after_merge
  7803  10A9  084A               	movf	??_get_high_after_merge,w
  7804  10AA  07CF               	addwf	get_high_after_merge@col,f
  7805  10AB  084F               	movf	get_high_after_merge@col,w
  7806  10AC  3A80               	xorlw	128
  7807  10AD  3E7C               	addlw	-132
  7808  10AE  1C03               	skipc
  7809  10AF  2854               	goto	l5230
  7810  10B0                     l5242:	
  7811  10B0  3001               	movlw	1
  7812  10B1  00CA               	movwf	??_get_high_after_merge
  7813  10B2  084A               	movf	??_get_high_after_merge,w
  7814  10B3  07D0               	addwf	get_high_after_merge@row,f
  7815  10B4  2849               	goto	L16
  7816  10B5                     __end_of_get_high_after_merge:	
  7817                           
  7818                           	psect	text19
  7819  1AED                     __ptext19:	
  7820 ;; *************** function _debug_int3 *****************
  7821 ;; Defined at:
  7822 ;;		line 342 in file "teris_16f886.c"
  7823 ;; Parameters:    Size  Location     Type
  7824 ;;  enable          1    wreg     unsigned char 
  7825 ;;  f               2   31[BANK0 ] PTR const unsigned char 
  7826 ;;		 -> STR_41(33), STR_40(52), 
  7827 ;;  i1              2   33[BANK0 ] int 
  7828 ;;  i2              2   35[BANK0 ] int 
  7829 ;;  i3              2   37[BANK0 ] int 
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;  enable          1   39[BANK0 ] unsigned char 
  7832 ;; Return value:  Size  Location     Type
  7833 ;;                  1    wreg      void 
  7834 ;; Registers used:
  7835 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7841 ;;      Params:         0       8       0       0       0
  7842 ;;      Locals:         0       1       0       0       0
  7843 ;;      Temps:          0       0       0       0       0
  7844 ;;      Totals:         0       9       0       0       0
  7845 ;;Total ram usage:        9 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; Hardware stack levels required when called:    2
  7848 ;; This function calls:
  7849 ;;		_USARTWriteString
  7850 ;;		_sprintf
  7851 ;; This function is called by:
  7852 ;;		_get_high_after_merge
  7853 ;;		_get_holes_after_merge
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           
  7858                           ;psect for function _debug_int3
  7859  1AED                     _debug_int3:	
  7860                           
  7861                           ;incstack = 0
  7862                           ; Regs used in _debug_int3: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7863                           ;debug_int3@enable stored from wreg
  7864  1AED  1283               	bcf	3,5	;RP0=0, select bank0
  7865  1AEE  1303               	bcf	3,6	;RP1=0, select bank0
  7866  1AEF  00C7               	movwf	debug_int3@enable
  7867                           
  7868                           ;teris_16f886.c: 344: if(enable == 1)
  7869  1AF0  0347               	decf	debug_int3@enable,w
  7870  1AF1  1D03               	btfss	3,2
  7871  1AF2  0008               	return
  7872                           
  7873                           ;teris_16f886.c: 345: {
  7874                           ;teris_16f886.c: 350: sprintf(g_debug, f, i1, i2, i3);
  7875  1AF3  083F               	movf	debug_int3@f,w
  7876  1AF4  00A0               	movwf	sprintf@f
  7877  1AF5  0840               	movf	debug_int3@f+1,w
  7878  1AF6  00A1               	movwf	sprintf@f+1
  7879  1AF7  0842               	movf	debug_int3@i1+1,w
  7880  1AF8  00A3               	movwf	?_sprintf+3
  7881  1AF9  0841               	movf	debug_int3@i1,w
  7882  1AFA  00A2               	movwf	?_sprintf+2
  7883  1AFB  0844               	movf	debug_int3@i2+1,w
  7884  1AFC  00A5               	movwf	?_sprintf+5
  7885  1AFD  0843               	movf	debug_int3@i2,w
  7886  1AFE  00A4               	movwf	?_sprintf+4
  7887  1AFF  0846               	movf	debug_int3@i3+1,w
  7888  1B00  00A7               	movwf	?_sprintf+7
  7889  1B01  0845               	movf	debug_int3@i3,w
  7890  1B02  00A6               	movwf	?_sprintf+6
  7891  1B03  3099               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7892  1B04  120A  118A  22C3  160A  158A  	fcall	_sprintf
  7893                           
  7894                           ;teris_16f886.c: 351: USARTWriteString(g_debug);
  7895  1B09  3099               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7896  1B0A  00F1               	movwf	USARTWriteString@str
  7897  1B0B  3001               	movlw	1
  7898  1B0C  00F2               	movwf	USARTWriteString@str+1
  7899  1B0D  160A  158A  222D  160A  158A  	fcall	_USARTWriteString
  7900                           
  7901                           ;teris_16f886.c: 352: USARTWriteString("\r\n");
  7902  1B12  3067               	movlw	low (STR_1| (0+32768))
  7903  1B13  00F1               	movwf	USARTWriteString@str
  7904  1B14  308E               	movlw	high (STR_1| (0+32768))
  7905  1B15  00F2               	movwf	USARTWriteString@str+1
  7906  1B16  160A  158A  222D   	fcall	_USARTWriteString
  7907  1B19  0008               	return
  7908  1B1A                     __end_of_debug_int3:	
  7909                           
  7910                           	psect	text20
  7911  1CF9                     __ptext20:	
  7912 ;; *************** function _get_high *****************
  7913 ;; Defined at:
  7914 ;;		line 883 in file "teris_16f886.c"
  7915 ;; Parameters:    Size  Location     Type
  7916 ;;  matrix          1    wreg     PTR struct .
  7917 ;;		 -> g_matrix88(64), 
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;  matrix          1   38[BANK0 ] PTR struct .
  7920 ;;		 -> g_matrix88(64), 
  7921 ;;  row             1   39[BANK0 ] char 
  7922 ;; Return value:  Size  Location     Type
  7923 ;;                  1    wreg      unsigned char 
  7924 ;; Registers used:
  7925 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7931 ;;      Params:         0       0       0       0       0
  7932 ;;      Locals:         0       2       0       0       0
  7933 ;;      Temps:          0       2       0       0       0
  7934 ;;      Totals:         0       4       0       0       0
  7935 ;;Total ram usage:        4 bytes
  7936 ;; Hardware stack levels used:    1
  7937 ;; Hardware stack levels required when called:    3
  7938 ;; This function calls:
  7939 ;;		_debug_int1
  7940 ;;		_is_row_empty
  7941 ;; This function is called by:
  7942 ;;		_find_best_solution
  7943 ;; This function uses a non-reentrant model
  7944 ;;
  7945                           
  7946                           
  7947                           ;psect for function _get_high
  7948  1CF9                     _get_high:	
  7949                           
  7950                           ;incstack = 0
  7951                           ; Regs used in _get_high: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7952                           ;get_high@matrix stored from wreg
  7953  1CF9  1283               	bcf	3,5	;RP0=0, select bank0
  7954  1CFA  1303               	bcf	3,6	;RP1=0, select bank0
  7955  1CFB  00C6               	movwf	get_high@matrix
  7956                           
  7957                           ;teris_16f886.c: 885: for(int8_t row = 8 - 1; row >= 0; row--)
  7958  1CFC  3007               	movlw	7
  7959  1CFD  00C4               	movwf	??_get_high
  7960  1CFE  0844               	movf	??_get_high,w
  7961  1CFF  00C7               	movwf	get_high@row
  7962  1D00  1BC7               	btfsc	get_high@row,7
  7963  1D01  2D40               	goto	l5214
  7964  1D02                     l5202:	
  7965                           
  7966                           ;teris_16f886.c: 886: {
  7967                           ;teris_16f886.c: 887: if(is_row_empty(matrix, row) == 1)
  7968  1D02  0847               	movf	get_high@row,w
  7969  1D03  00C4               	movwf	??_get_high
  7970  1D04  0844               	movf	??_get_high,w
  7971  1D05  00F0               	movwf	is_row_empty@row
  7972  1D06  0846               	movf	get_high@matrix,w
  7973  1D07  160A  158A  2273  160A  158A  	fcall	_is_row_empty
  7974  1D0C  3A01               	xorlw	1
  7975  1D0D  1D03               	skipz
  7976  1D0E  2D38               	goto	l5210
  7977                           
  7978                           ;teris_16f886.c: 888: {
  7979                           ;teris_16f886.c: 889: debug_int1(0, "get_high height = %d\n", 8 - row - 1);
  7980  1D0F  3068               	movlw	low (STR_39| (0+32768))
  7981  1D10  1283               	bcf	3,5	;RP0=0, select bank0
  7982  1D11  1303               	bcf	3,6	;RP1=0, select bank0
  7983  1D12  00BF               	movwf	debug_int1@f
  7984  1D13  308D               	movlw	high (STR_39| (0+32768))
  7985  1D14  00C0               	movwf	debug_int1@f+1
  7986  1D15  3001               	movlw	1
  7987  1D16  0747               	addwf	get_high@row,w
  7988  1D17  00C4               	movwf	??_get_high
  7989  1D18  01C5               	clrf	??_get_high+1
  7990  1D19  1803               	skipnc
  7991  1D1A  0AC5               	incf	??_get_high+1,f
  7992  1D1B  1BC7               	btfsc	get_high@row,7
  7993  1D1C  03C5               	decf	??_get_high+1,f
  7994  1D1D  1283               	bcf	3,5	;RP0=0, select bank0
  7995  1D1E  1303               	bcf	3,6	;RP1=0, select bank0
  7996  1D1F  09C4               	comf	??_get_high,f
  7997  1D20  09C5               	comf	??_get_high+1,f
  7998  1D21  0AC4               	incf	??_get_high,f
  7999  1D22  1903               	skipnz
  8000  1D23  0AC5               	incf	??_get_high+1,f
  8001  1D24  0844               	movf	??_get_high,w
  8002  1D25  3E08               	addlw	8
  8003  1D26  00C1               	movwf	debug_int1@i
  8004  1D27  0845               	movf	??_get_high+1,w
  8005  1D28  1803               	skipnc
  8006  1D29  3E01               	addlw	1
  8007  1D2A  3E00               	addlw	0
  8008  1D2B  00C2               	movwf	debug_int1@i+1
  8009  1D2C  3000               	movlw	0
  8010  1D2D  120A  118A  2003   	fcall	_debug_int1
  8011                           
  8012                           ;teris_16f886.c: 890: return (uint8_t)(8 - row - 1);
  8013  1D30  1283               	bcf	3,5	;RP0=0, select bank0
  8014  1D31  1303               	bcf	3,6	;RP1=0, select bank0
  8015  1D32  0847               	movf	get_high@row,w
  8016  1D33  3E01               	addlw	1
  8017  1D34  3AFF               	xorlw	255
  8018  1D35  3E01               	addlw	1
  8019  1D36  3E08               	addlw	8
  8020  1D37  0008               	return
  8021  1D38                     l5210:	
  8022  1D38  30FF               	movlw	255
  8023  1D39  1283               	bcf	3,5	;RP0=0, select bank0
  8024  1D3A  1303               	bcf	3,6	;RP1=0, select bank0
  8025  1D3B  00C4               	movwf	??_get_high
  8026  1D3C  0844               	movf	??_get_high,w
  8027  1D3D  07C7               	addwf	get_high@row,f
  8028  1D3E  1FC7               	btfss	get_high@row,7
  8029  1D3F  2D02               	goto	l5202
  8030  1D40                     l5214:	
  8031                           
  8032                           ;teris_16f886.c: 891: }
  8033                           ;teris_16f886.c: 892: }
  8034                           ;teris_16f886.c: 893: return 8;
  8035  1D40  3008               	movlw	8
  8036  1D41  0008               	return
  8037  1D42                     __end_of_get_high:	
  8038                           
  8039                           	psect	text21
  8040  1A73                     __ptext21:	
  8041 ;; *************** function _is_row_empty *****************
  8042 ;; Defined at:
  8043 ;;		line 636 in file "teris_16f886.c"
  8044 ;; Parameters:    Size  Location     Type
  8045 ;;  matrix          1    wreg     PTR const struct .
  8046 ;;		 -> g_matrix88(64), 
  8047 ;;  row             1    0[COMMON] unsigned char 
  8048 ;; Auto vars:     Size  Location     Type
  8049 ;;  matrix          1    4[COMMON] PTR const struct .
  8050 ;;		 -> g_matrix88(64), 
  8051 ;;  col             1    5[COMMON] unsigned char 
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  1    wreg      unsigned char 
  8054 ;; Registers used:
  8055 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8061 ;;      Params:         1       0       0       0       0
  8062 ;;      Locals:         2       0       0       0       0
  8063 ;;      Temps:          3       0       0       0       0
  8064 ;;      Totals:         6       0       0       0       0
  8065 ;;Total ram usage:        6 bytes
  8066 ;; Hardware stack levels used:    1
  8067 ;; This function calls:
  8068 ;;		Nothing
  8069 ;; This function is called by:
  8070 ;;		_get_high
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           
  8075                           ;psect for function _is_row_empty
  8076  1A73                     _is_row_empty:	
  8077                           
  8078                           ;incstack = 0
  8079                           ; Regs used in _is_row_empty: [wreg-fsr0h+status,2+status,0]
  8080                           ;is_row_empty@matrix stored from wreg
  8081  1A73  00F4               	movwf	is_row_empty@matrix
  8082                           
  8083                           ;teris_16f886.c: 638: for(uint8_t col = 0; col < 8; col++)
  8084  1A74  01F5               	clrf	is_row_empty@col
  8085  1A75  3008               	movlw	8
  8086  1A76  0275               	subwf	is_row_empty@col,w
  8087  1A77  1803               	btfsc	3,0
  8088  1A78  2A98               	goto	l3588
  8089  1A79                     l3578:	
  8090                           
  8091                           ;teris_16f886.c: 639: {
  8092                           ;teris_16f886.c: 640: if(matrix->data[row][col] == 1)
  8093  1A79  0870               	movf	is_row_empty@row,w
  8094  1A7A  00F1               	movwf	??_is_row_empty
  8095  1A7B  3002               	movlw	2
  8096  1A7C                     u4555:	
  8097  1A7C  1003               	clrc
  8098  1A7D  0DF1               	rlf	??_is_row_empty,f
  8099  1A7E  3EFF               	addlw	-1
  8100  1A7F  1D03               	skipz
  8101  1A80  2A7C               	goto	u4555
  8102  1A81  1003               	clrc
  8103  1A82  0D71               	rlf	??_is_row_empty,w
  8104  1A83  0774               	addwf	is_row_empty@matrix,w
  8105  1A84  00F2               	movwf	??_is_row_empty+1
  8106  1A85  0875               	movf	is_row_empty@col,w
  8107  1A86  0772               	addwf	??_is_row_empty+1,w
  8108  1A87  00F3               	movwf	??_is_row_empty+2
  8109  1A88  0873               	movf	??_is_row_empty+2,w
  8110  1A89  0084               	movwf	4
  8111  1A8A  1783               	bsf	3,7	;select IRP bank2
  8112  1A8B  0300               	decf	0,w
  8113  1A8C  1D03               	btfss	3,2
  8114  1A8D  2A90               	goto	l3584
  8115                           
  8116                           ;teris_16f886.c: 641: {
  8117                           ;teris_16f886.c: 642: return 0;
  8118  1A8E  3000               	movlw	0
  8119  1A8F  0008               	return
  8120  1A90                     l3584:	
  8121  1A90  3001               	movlw	1
  8122  1A91  00F1               	movwf	??_is_row_empty
  8123  1A92  0871               	movf	??_is_row_empty,w
  8124  1A93  07F5               	addwf	is_row_empty@col,f
  8125  1A94  3008               	movlw	8
  8126  1A95  0275               	subwf	is_row_empty@col,w
  8127  1A96  1C03               	skipc
  8128  1A97  2A79               	goto	l3578
  8129  1A98                     l3588:	
  8130                           
  8131                           ;teris_16f886.c: 643: }
  8132                           ;teris_16f886.c: 644: }
  8133                           ;teris_16f886.c: 645: return 1;
  8134  1A98  3001               	movlw	1
  8135  1A99  0008               	return
  8136  1A9A                     __end_of_is_row_empty:	
  8137                           
  8138                           	psect	text22
  8139  119A                     __ptext22:	
  8140 ;; *************** function _fall_off *****************
  8141 ;; Defined at:
  8142 ;;		line 752 in file "teris_16f886.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;  x               1    wreg     char 
  8145 ;;  y               1   38[BANK0 ] char 
  8146 ;;  matrix44        2   39[BANK0 ] PTR const struct .
  8147 ;;		 -> g_matrix44(384), 
  8148 ;;  matrix88        1   41[BANK0 ] PTR const struct .
  8149 ;;		 -> g_matrix88(64), 
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;  x               1   46[BANK0 ] char 
  8152 ;;  col             1   47[BANK0 ] char 
  8153 ;;  row             1   48[BANK0 ] char 
  8154 ;; Return value:  Size  Location     Type
  8155 ;;                  1    wreg      unsigned char 
  8156 ;; Registers used:
  8157 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8158 ;; Tracked objects:
  8159 ;;		On entry : 0/0
  8160 ;;		On exit  : 0/0
  8161 ;;		Unchanged: 0/0
  8162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8163 ;;      Params:         0       4       0       0       0
  8164 ;;      Locals:         0       3       0       0       0
  8165 ;;      Temps:          0       4       0       0       0
  8166 ;;      Totals:         0      11       0       0       0
  8167 ;;Total ram usage:       11 bytes
  8168 ;; Hardware stack levels used:    1
  8169 ;; Hardware stack levels required when called:    3
  8170 ;; This function calls:
  8171 ;;		_debug_int2
  8172 ;; This function is called by:
  8173 ;;		_find_best_solution
  8174 ;; This function uses a non-reentrant model
  8175 ;;
  8176                           
  8177                           
  8178                           ;psect for function _fall_off
  8179  119A                     _fall_off:	
  8180                           
  8181                           ;incstack = 0
  8182                           ; Regs used in _fall_off: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8183                           ;fall_off@x stored from wreg
  8184  119A  1283               	bcf	3,5	;RP0=0, select bank0
  8185  119B  1303               	bcf	3,6	;RP1=0, select bank0
  8186  119C  00CE               	movwf	fall_off@x
  8187  119D                     l333:	
  8188                           ;teris_16f886.c: 754: while(1)
  8189                           
  8190                           
  8191                           ;teris_16f886.c: 755: {
  8192                           ;teris_16f886.c: 756: for(int8_t row = 4 - 1; row >= 0; row--)
  8193  119D  3003               	movlw	3
  8194  119E  00CA               	movwf	??_fall_off
  8195  119F  084A               	movf	??_fall_off,w
  8196  11A0  00D0               	movwf	fall_off@row
  8197  11A1  1BD0               	btfsc	fall_off@row,7
  8198  11A2  2A37               	goto	l5106
  8199  11A3                     l5074:	
  8200                           
  8201                           ;teris_16f886.c: 757: {
  8202                           ;teris_16f886.c: 758: for(int8_t col = 0; col < 4; col++)
  8203  11A3  01CF               	clrf	fall_off@col
  8204  11A4  084F               	movf	fall_off@col,w
  8205  11A5  3A80               	xorlw	128
  8206  11A6  3E7C               	addlw	-132
  8207  11A7  1803               	btfsc	3,0
  8208  11A8  2A31               	goto	l5102
  8209  11A9                     l5080:	
  8210                           
  8211                           ;teris_16f886.c: 759: {
  8212                           ;teris_16f886.c: 760: if(matrix44->data[row][col] == 1)
  8213  11A9  0850               	movf	fall_off@row,w
  8214  11AA  00CA               	movwf	??_fall_off
  8215  11AB  01CB               	clrf	??_fall_off+1
  8216  11AC  1003               	clrc
  8217  11AD  0DCA               	rlf	??_fall_off,f
  8218  11AE  0DCB               	rlf	??_fall_off+1,f
  8219  11AF  1003               	clrc
  8220  11B0  0DCA               	rlf	??_fall_off,f
  8221  11B1  0DCB               	rlf	??_fall_off+1,f
  8222  11B2  084A               	movf	??_fall_off,w
  8223  11B3  0747               	addwf	fall_off@matrix44,w
  8224  11B4  00CC               	movwf	??_fall_off+2
  8225  11B5  084B               	movf	??_fall_off+1,w
  8226  11B6  1803               	skipnc
  8227  11B7  0A4B               	incf	??_fall_off+1,w
  8228  11B8  0748               	addwf	fall_off@matrix44+1,w
  8229  11B9  00CD               	movwf	??_fall_off+3
  8230  11BA  084F               	movf	fall_off@col,w
  8231  11BB  074C               	addwf	??_fall_off+2,w
  8232  11BC  0084               	movwf	4
  8233  11BD  084D               	movf	??_fall_off+3,w
  8234  11BE  1803               	skipnc
  8235  11BF  0A4D               	incf	??_fall_off+3,w
  8236  11C0  00FF               	movwf	127
  8237  11C1  120A  158A  2000  160A  118A  	fcall	stringtab
  8238  11C6  3A01               	xorlw	1
  8239  11C7  1D03               	skipz
  8240  11C8  2A26               	goto	l5098
  8241                           
  8242                           ;teris_16f886.c: 761: {
  8243                           ;teris_16f886.c: 762: if(matrix88->data[y + row + 1][x + col] == 1)
  8244  11C9  084F               	movf	fall_off@col,w
  8245  11CA  074E               	addwf	fall_off@x,w
  8246  11CB  0749               	addwf	fall_off@matrix88,w
  8247  11CC  00CA               	movwf	??_fall_off
  8248  11CD  0850               	movf	fall_off@row,w
  8249  11CE  0746               	addwf	fall_off@y,w
  8250  11CF  00CB               	movwf	??_fall_off+1
  8251  11D0  3002               	movlw	2
  8252  11D1                     u7225:	
  8253  11D1  1003               	clrc
  8254  11D2  0DCB               	rlf	??_fall_off+1,f
  8255  11D3  3EFF               	addlw	-1
  8256  11D4  1D03               	skipz
  8257  11D5  29D1               	goto	u7225
  8258  11D6  1003               	clrc
  8259  11D7  0D4B               	rlf	??_fall_off+1,w
  8260  11D8  3E08               	addlw	8
  8261  11D9  074A               	addwf	??_fall_off,w
  8262  11DA  00CC               	movwf	??_fall_off+2
  8263  11DB  084C               	movf	??_fall_off+2,w
  8264  11DC  0084               	movwf	4
  8265  11DD  1783               	bsf	3,7	;select IRP bank2
  8266  11DE  0300               	decf	0,w
  8267  11DF  1D03               	btfss	3,2
  8268  11E0  29F7               	goto	l5090
  8269                           
  8270                           ;teris_16f886.c: 763: {
  8271                           ;teris_16f886.c: 764: debug_int2(0, "fall_off1 x = %d, y = %d\n", x, y);
  8272  11E1  30BC               	movlw	low (STR_34| (0+32768))
  8273  11E2  00BF               	movwf	debug_int2@f
  8274  11E3  308C               	movlw	high (STR_34| (0+32768))
  8275  11E4  00C0               	movwf	debug_int2@f+1
  8276  11E5  084E               	movf	fall_off@x,w
  8277  11E6  00C1               	movwf	debug_int2@i1
  8278  11E7  01C2               	clrf	debug_int2@i1+1
  8279  11E8  1BC1               	btfsc	debug_int2@i1,7
  8280  11E9  03C2               	decf	debug_int2@i1+1,f
  8281  11EA  0846               	movf	fall_off@y,w
  8282  11EB  00C3               	movwf	debug_int2@i2
  8283  11EC  01C4               	clrf	debug_int2@i2+1
  8284  11ED  1BC3               	btfsc	debug_int2@i2,7
  8285  11EE  03C4               	decf	debug_int2@i2+1,f
  8286  11EF  3000               	movlw	0
  8287  11F0  160A  158A  229A   	fcall	_debug_int2
  8288                           
  8289                           ;teris_16f886.c: 765: return y;
  8290  11F3  1283               	bcf	3,5	;RP0=0, select bank0
  8291  11F4  1303               	bcf	3,6	;RP1=0, select bank0
  8292  11F5  0846               	movf	fall_off@y,w
  8293  11F6  0008               	return
  8294  11F7                     l5090:	
  8295                           
  8296                           ;teris_16f886.c: 766: }
  8297                           ;teris_16f886.c: 767: if((y + row) >= (8 - 1))
  8298  11F7  0846               	movf	fall_off@y,w
  8299  11F8  0750               	addwf	fall_off@row,w
  8300  11F9  00CA               	movwf	??_fall_off
  8301  11FA  01CB               	clrf	??_fall_off+1
  8302  11FB  1803               	skipnc
  8303  11FC  0ACB               	incf	??_fall_off+1,f
  8304  11FD  1BC6               	btfsc	fall_off@y,7
  8305  11FE  03CB               	decf	??_fall_off+1,f
  8306  11FF  1BD0               	btfsc	fall_off@row,7
  8307  1200  03CB               	decf	??_fall_off+1,f
  8308  1201  1283               	bcf	3,5	;RP0=0, select bank0
  8309  1202  1303               	bcf	3,6	;RP1=0, select bank0
  8310  1203  084B               	movf	??_fall_off+1,w
  8311  1204  3A80               	xorlw	128
  8312  1205  00FF               	movwf	127
  8313  1206  3080               	movlw	128
  8314  1207  027F               	subwf	127,w
  8315  1208  1D03               	skipz
  8316  1209  2A0C               	goto	u7255
  8317  120A  3007               	movlw	7
  8318  120B  024A               	subwf	??_fall_off,w
  8319  120C                     u7255:	
  8320  120C  1C03               	skipc
  8321  120D  2A26               	goto	l5098
  8322                           
  8323                           ;teris_16f886.c: 768: {
  8324                           ;teris_16f886.c: 769: debug_int2(0, "fall_off2 x = %d, y = %d\n", x, y);
  8325  120E  30D6               	movlw	low (STR_35| (0+32768))
  8326  120F  1283               	bcf	3,5	;RP0=0, select bank0
  8327  1210  1303               	bcf	3,6	;RP1=0, select bank0
  8328  1211  00BF               	movwf	debug_int2@f
  8329  1212  308C               	movlw	high (STR_35| (0+32768))
  8330  1213  00C0               	movwf	debug_int2@f+1
  8331  1214  084E               	movf	fall_off@x,w
  8332  1215  00C1               	movwf	debug_int2@i1
  8333  1216  01C2               	clrf	debug_int2@i1+1
  8334  1217  1BC1               	btfsc	debug_int2@i1,7
  8335  1218  03C2               	decf	debug_int2@i1+1,f
  8336  1219  0846               	movf	fall_off@y,w
  8337  121A  00C3               	movwf	debug_int2@i2
  8338  121B  01C4               	clrf	debug_int2@i2+1
  8339  121C  1BC3               	btfsc	debug_int2@i2,7
  8340  121D  03C4               	decf	debug_int2@i2+1,f
  8341  121E  3000               	movlw	0
  8342  121F  160A  158A  229A   	fcall	_debug_int2
  8343                           
  8344                           ;teris_16f886.c: 770: return y;
  8345  1222  1283               	bcf	3,5	;RP0=0, select bank0
  8346  1223  1303               	bcf	3,6	;RP1=0, select bank0
  8347  1224  0846               	movf	fall_off@y,w
  8348  1225  0008               	return
  8349  1226                     l5098:	
  8350  1226  3001               	movlw	1
  8351  1227  1283               	bcf	3,5	;RP0=0, select bank0
  8352  1228  1303               	bcf	3,6	;RP1=0, select bank0
  8353  1229  00CA               	movwf	??_fall_off
  8354  122A  084A               	movf	??_fall_off,w
  8355  122B  07CF               	addwf	fall_off@col,f
  8356  122C  084F               	movf	fall_off@col,w
  8357  122D  3A80               	xorlw	128
  8358  122E  3E7C               	addlw	-132
  8359  122F  1C03               	skipc
  8360  1230  29A9               	goto	l5080
  8361  1231                     l5102:	
  8362  1231  30FF               	movlw	255
  8363  1232  00CA               	movwf	??_fall_off
  8364  1233  084A               	movf	??_fall_off,w
  8365  1234  07D0               	addwf	fall_off@row,f
  8366  1235  1FD0               	btfss	fall_off@row,7
  8367  1236  29A3               	goto	l5074
  8368  1237                     l5106:	
  8369                           
  8370                           ;teris_16f886.c: 771: }
  8371                           ;teris_16f886.c: 772: }
  8372                           ;teris_16f886.c: 773: }
  8373                           ;teris_16f886.c: 774: }
  8374                           ;teris_16f886.c: 775: y++;
  8375  1237  3001               	movlw	1
  8376  1238  00CA               	movwf	??_fall_off
  8377  1239  084A               	movf	??_fall_off,w
  8378  123A  07C6               	addwf	fall_off@y,f
  8379  123B  299D               	goto	l333
  8380  123C                     __end_of_fall_off:	
  8381                           
  8382                           	psect	text23
  8383  1A9A                     __ptext23:	
  8384 ;; *************** function _debug_int2 *****************
  8385 ;; Defined at:
  8386 ;;		line 328 in file "teris_16f886.c"
  8387 ;; Parameters:    Size  Location     Type
  8388 ;;  enable          1    wreg     unsigned char 
  8389 ;;  f               2   31[BANK0 ] PTR const unsigned char 
  8390 ;;		 -> STR_59(35), STR_58(36), STR_57(35), STR_56(36), 
  8391 ;;		 -> STR_55(35), STR_54(36), STR_52(35), STR_51(36), 
  8392 ;;		 -> STR_50(35), STR_49(36), STR_48(35), STR_47(38), 
  8393 ;;		 -> STR_45(37), STR_44(36), STR_35(26), STR_34(26), 
  8394 ;;		 -> STR_30(30), STR_29(30), STR_28(30), STR_25(24), 
  8395 ;;		 -> STR_24(24), STR_11(42), 
  8396 ;;  i1              2   33[BANK0 ] int 
  8397 ;;  i2              2   35[BANK0 ] int 
  8398 ;; Auto vars:     Size  Location     Type
  8399 ;;  enable          1   37[BANK0 ] unsigned char 
  8400 ;; Return value:  Size  Location     Type
  8401 ;;                  1    wreg      void 
  8402 ;; Registers used:
  8403 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8404 ;; Tracked objects:
  8405 ;;		On entry : 0/0
  8406 ;;		On exit  : 0/0
  8407 ;;		Unchanged: 0/0
  8408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8409 ;;      Params:         0       6       0       0       0
  8410 ;;      Locals:         0       1       0       0       0
  8411 ;;      Temps:          0       0       0       0       0
  8412 ;;      Totals:         0       7       0       0       0
  8413 ;;Total ram usage:        7 bytes
  8414 ;; Hardware stack levels used:    1
  8415 ;; Hardware stack levels required when called:    2
  8416 ;; This function calls:
  8417 ;;		_USARTWriteString
  8418 ;;		_sprintf
  8419 ;; This function is called by:
  8420 ;;		_hit_land
  8421 ;;		_is_valid
  8422 ;;		_fall_off
  8423 ;;		_find_best_solution
  8424 ;;		_printf_console_all_MATRIX44
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           
  8429                           ;psect for function _debug_int2
  8430  1A9A                     _debug_int2:	
  8431                           
  8432                           ;incstack = 0
  8433                           ; Regs used in _debug_int2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8434                           ;debug_int2@enable stored from wreg
  8435  1A9A  1283               	bcf	3,5	;RP0=0, select bank0
  8436  1A9B  1303               	bcf	3,6	;RP1=0, select bank0
  8437  1A9C  00C5               	movwf	debug_int2@enable
  8438                           
  8439                           ;teris_16f886.c: 330: if(enable == 1)
  8440  1A9D  0345               	decf	debug_int2@enable,w
  8441  1A9E  1D03               	btfss	3,2
  8442  1A9F  0008               	return
  8443                           
  8444                           ;teris_16f886.c: 331: {
  8445                           ;teris_16f886.c: 336: sprintf(g_debug, f, i1, i2);
  8446  1AA0  083F               	movf	debug_int2@f,w
  8447  1AA1  00A0               	movwf	sprintf@f
  8448  1AA2  0840               	movf	debug_int2@f+1,w
  8449  1AA3  00A1               	movwf	sprintf@f+1
  8450  1AA4  0842               	movf	debug_int2@i1+1,w
  8451  1AA5  00A3               	movwf	?_sprintf+3
  8452  1AA6  0841               	movf	debug_int2@i1,w
  8453  1AA7  00A2               	movwf	?_sprintf+2
  8454  1AA8  0844               	movf	debug_int2@i2+1,w
  8455  1AA9  00A5               	movwf	?_sprintf+5
  8456  1AAA  0843               	movf	debug_int2@i2,w
  8457  1AAB  00A4               	movwf	?_sprintf+4
  8458  1AAC  3099               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8459  1AAD  120A  118A  22C3  160A  158A  	fcall	_sprintf
  8460                           
  8461                           ;teris_16f886.c: 337: USARTWriteString(g_debug);
  8462  1AB2  3099               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8463  1AB3  00F1               	movwf	USARTWriteString@str
  8464  1AB4  3001               	movlw	1
  8465  1AB5  00F2               	movwf	USARTWriteString@str+1
  8466  1AB6  160A  158A  222D  160A  158A  	fcall	_USARTWriteString
  8467                           
  8468                           ;teris_16f886.c: 338: USARTWriteString("\r\n");
  8469  1ABB  3067               	movlw	low (STR_1| (0+32768))
  8470  1ABC  00F1               	movwf	USARTWriteString@str
  8471  1ABD  308E               	movlw	high (STR_1| (0+32768))
  8472  1ABE  00F2               	movwf	USARTWriteString@str+1
  8473  1ABF  160A  158A  222D   	fcall	_USARTWriteString
  8474  1AC2  0008               	return
  8475  1AC3                     __end_of_debug_int2:	
  8476                           
  8477                           	psect	text24
  8478  0E78                     __ptext24:	
  8479 ;; *************** function _evaluate *****************
  8480 ;; Defined at:
  8481 ;;		line 825 in file "teris_16f886.c"
  8482 ;; Parameters:    Size  Location     Type
  8483 ;;  matrix          1    wreg     PTR const struct .
  8484 ;;		 -> find_best_solution@temp_matrix88(64), 
  8485 ;; Auto vars:     Size  Location     Type
  8486 ;;  matrix          1   45[BANK0 ] PTR const struct .
  8487 ;;		 -> find_best_solution@temp_matrix88(64), 
  8488 ;;  row             1   47[BANK0 ] char 
  8489 ;;  col             1   46[BANK0 ] unsigned char 
  8490 ;;  risk            2   42[BANK0 ] unsigned int 
  8491 ;;  full            1   44[BANK0 ] unsigned char 
  8492 ;; Return value:  Size  Location     Type
  8493 ;;                  2   36[BANK0 ] unsigned int 
  8494 ;; Registers used:
  8495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8496 ;; Tracked objects:
  8497 ;;		On entry : 0/0
  8498 ;;		On exit  : 0/0
  8499 ;;		Unchanged: 0/0
  8500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8501 ;;      Params:         0       2       0       0       0
  8502 ;;      Locals:         0       6       0       0       0
  8503 ;;      Temps:          0       4       0       0       0
  8504 ;;      Totals:         0      12       0       0       0
  8505 ;;Total ram usage:       12 bytes
  8506 ;; Hardware stack levels used:    1
  8507 ;; Hardware stack levels required when called:    3
  8508 ;; This function calls:
  8509 ;;		_debug_int1
  8510 ;; This function is called by:
  8511 ;;		_find_best_solution
  8512 ;; This function uses a non-reentrant model
  8513 ;;
  8514                           
  8515                           
  8516                           ;psect for function _evaluate
  8517  0E78                     _evaluate:	
  8518                           
  8519                           ;incstack = 0
  8520                           ; Regs used in _evaluate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8521                           ;evaluate@matrix stored from wreg
  8522  0E78  1283               	bcf	3,5	;RP0=0, select bank0
  8523  0E79  1303               	bcf	3,6	;RP1=0, select bank0
  8524  0E7A  00CD               	movwf	evaluate@matrix
  8525                           
  8526                           ;teris_16f886.c: 827: uint16_t risk = 0;
  8527  0E7B  01CA               	clrf	evaluate@risk
  8528  0E7C  01CB               	clrf	evaluate@risk+1
  8529                           
  8530                           ;teris_16f886.c: 828: uint8_t full = 0xFF;
  8531  0E7D  30FF               	movlw	255
  8532  0E7E  00C6               	movwf	??_evaluate
  8533  0E7F  0846               	movf	??_evaluate,w
  8534  0E80  00CC               	movwf	evaluate@full
  8535                           
  8536                           ;teris_16f886.c: 829: for(uint8_t col = 0; col < 8; col++)
  8537  0E81  01CE               	clrf	evaluate@col
  8538  0E82  3008               	movlw	8
  8539  0E83  024E               	subwf	evaluate@col,w
  8540  0E84  1803               	btfsc	3,0
  8541  0E85  2EE7               	goto	l5170
  8542  0E86                     l5144:	
  8543                           
  8544                           ;teris_16f886.c: 830: {
  8545                           ;teris_16f886.c: 831: full = 0xFF;
  8546  0E86  30FF               	movlw	255
  8547  0E87  00C6               	movwf	??_evaluate
  8548  0E88  0846               	movf	??_evaluate,w
  8549  0E89  00CC               	movwf	evaluate@full
  8550                           
  8551                           ;teris_16f886.c: 832: for(int8_t row = 8 - 1; row >= 0; row--)
  8552  0E8A  3007               	movlw	7
  8553  0E8B  00C6               	movwf	??_evaluate
  8554  0E8C  0846               	movf	??_evaluate,w
  8555  0E8D  00CF               	movwf	evaluate@row
  8556  0E8E  1BCF               	btfsc	evaluate@row,7
  8557  0E8F  2EDF               	goto	l5166
  8558  0E90                     l5150:	
  8559                           
  8560                           ;teris_16f886.c: 833: {
  8561                           ;teris_16f886.c: 834: if(full == 0xFF)
  8562  0E90  0A4C               	incf	evaluate@full,w
  8563  0E91  1D03               	btfss	3,2
  8564  0E92  2EA6               	goto	l5154
  8565                           
  8566                           ;teris_16f886.c: 835: {
  8567                           ;teris_16f886.c: 836: full = matrix->data[row][col];
  8568  0E93  084F               	movf	evaluate@row,w
  8569  0E94  00C6               	movwf	??_evaluate
  8570  0E95  3002               	movlw	2
  8571  0E96                     u7375:	
  8572  0E96  1003               	clrc
  8573  0E97  0DC6               	rlf	??_evaluate,f
  8574  0E98  3EFF               	addlw	-1
  8575  0E99  1D03               	skipz
  8576  0E9A  2E96               	goto	u7375
  8577  0E9B  1003               	clrc
  8578  0E9C  0D46               	rlf	??_evaluate,w
  8579  0E9D  074D               	addwf	evaluate@matrix,w
  8580  0E9E  00C7               	movwf	??_evaluate+1
  8581  0E9F  084E               	movf	evaluate@col,w
  8582  0EA0  0747               	addwf	??_evaluate+1,w
  8583  0EA1  00C8               	movwf	??_evaluate+2
  8584  0EA2  0848               	movf	??_evaluate+2,w
  8585  0EA3  0084               	movwf	4
  8586  0EA4  1383               	bcf	3,7	;select IRP bank0
  8587  0EA5  2ED5               	goto	L17
  8588  0EA6                     l5154:	
  8589                           ;teris_16f886.c: 837: }
  8590                           
  8591                           
  8592                           ;teris_16f886.c: 838: else
  8593                           ;teris_16f886.c: 839: {
  8594                           ;teris_16f886.c: 840: if(matrix->data[row][col] == 1)
  8595  0EA6  084F               	movf	evaluate@row,w
  8596  0EA7  00C6               	movwf	??_evaluate
  8597  0EA8  3002               	movlw	2
  8598  0EA9                     u7385:	
  8599  0EA9  1003               	clrc
  8600  0EAA  0DC6               	rlf	??_evaluate,f
  8601  0EAB  3EFF               	addlw	-1
  8602  0EAC  1D03               	skipz
  8603  0EAD  2EA9               	goto	u7385
  8604  0EAE  1003               	clrc
  8605  0EAF  0D46               	rlf	??_evaluate,w
  8606  0EB0  074D               	addwf	evaluate@matrix,w
  8607  0EB1  00C7               	movwf	??_evaluate+1
  8608  0EB2  084E               	movf	evaluate@col,w
  8609  0EB3  0747               	addwf	??_evaluate+1,w
  8610  0EB4  00C8               	movwf	??_evaluate+2
  8611  0EB5  0848               	movf	??_evaluate+2,w
  8612  0EB6  0084               	movwf	4
  8613  0EB7  1383               	bcf	3,7	;select IRP bank0
  8614  0EB8  0300               	decf	0,w
  8615  0EB9  1D03               	btfss	3,2
  8616  0EBA  2EC4               	goto	l5160
  8617                           
  8618                           ;teris_16f886.c: 841: {
  8619                           ;teris_16f886.c: 842: if(full == 0)
  8620  0EBB  084C               	movf	evaluate@full,w
  8621  0EBC  1D03               	btfss	3,2
  8622  0EBD  2EC4               	goto	l5160
  8623                           
  8624                           ;teris_16f886.c: 843: {
  8625                           ;teris_16f886.c: 844: risk++;
  8626  0EBE  3001               	movlw	1
  8627  0EBF  07CA               	addwf	evaluate@risk,f
  8628  0EC0  1803               	skipnc
  8629  0EC1  0ACB               	incf	evaluate@risk+1,f
  8630  0EC2  3000               	movlw	0
  8631  0EC3  07CB               	addwf	evaluate@risk+1,f
  8632  0EC4                     l5160:	
  8633                           
  8634                           ;teris_16f886.c: 845: }
  8635                           ;teris_16f886.c: 846: }
  8636                           ;teris_16f886.c: 847: full = matrix->data[row][col];
  8637  0EC4  084F               	movf	evaluate@row,w
  8638  0EC5  00C6               	movwf	??_evaluate
  8639  0EC6  3002               	movlw	2
  8640  0EC7                     u7415:	
  8641  0EC7  1003               	clrc
  8642  0EC8  0DC6               	rlf	??_evaluate,f
  8643  0EC9  3EFF               	addlw	-1
  8644  0ECA  1D03               	skipz
  8645  0ECB  2EC7               	goto	u7415
  8646  0ECC  1003               	clrc
  8647  0ECD  0D46               	rlf	??_evaluate,w
  8648  0ECE  074D               	addwf	evaluate@matrix,w
  8649  0ECF  00C7               	movwf	??_evaluate+1
  8650  0ED0  084E               	movf	evaluate@col,w
  8651  0ED1  0747               	addwf	??_evaluate+1,w
  8652  0ED2  00C8               	movwf	??_evaluate+2
  8653  0ED3  0848               	movf	??_evaluate+2,w
  8654  0ED4  0084               	movwf	4
  8655  0ED5                     L17:	
  8656  0ED5  0800               	movf	0,w
  8657  0ED6  00C9               	movwf	??_evaluate+3
  8658  0ED7  0849               	movf	??_evaluate+3,w
  8659  0ED8  00CC               	movwf	evaluate@full
  8660  0ED9  30FF               	movlw	255
  8661  0EDA  00C6               	movwf	??_evaluate
  8662  0EDB  0846               	movf	??_evaluate,w
  8663  0EDC  07CF               	addwf	evaluate@row,f
  8664  0EDD  1FCF               	btfss	evaluate@row,7
  8665  0EDE  2E90               	goto	l5150
  8666  0EDF                     l5166:	
  8667  0EDF  3001               	movlw	1
  8668  0EE0  00C6               	movwf	??_evaluate
  8669  0EE1  0846               	movf	??_evaluate,w
  8670  0EE2  07CE               	addwf	evaluate@col,f
  8671  0EE3  3008               	movlw	8
  8672  0EE4  024E               	subwf	evaluate@col,w
  8673  0EE5  1C03               	skipc
  8674  0EE6  2E86               	goto	l5144
  8675  0EE7                     l5170:	
  8676                           
  8677                           ;teris_16f886.c: 848: }
  8678                           ;teris_16f886.c: 849: }
  8679                           ;teris_16f886.c: 850: }
  8680                           ;teris_16f886.c: 851: debug_int1(0, "risk = %d\n", risk);
  8681  0EE7  304E               	movlw	low (STR_36| (0+32768))
  8682  0EE8  00BF               	movwf	debug_int1@f
  8683  0EE9  308E               	movlw	high (STR_36| (0+32768))
  8684  0EEA  00C0               	movwf	debug_int1@f+1
  8685  0EEB  084B               	movf	evaluate@risk+1,w
  8686  0EEC  00C2               	movwf	debug_int1@i+1
  8687  0EED  084A               	movf	evaluate@risk,w
  8688  0EEE  00C1               	movwf	debug_int1@i
  8689  0EEF  3000               	movlw	0
  8690  0EF0  120A  118A  2003   	fcall	_debug_int1
  8691                           
  8692                           ;teris_16f886.c: 853: return risk;
  8693  0EF3  1283               	bcf	3,5	;RP0=0, select bank0
  8694  0EF4  1303               	bcf	3,6	;RP1=0, select bank0
  8695  0EF5  084B               	movf	evaluate@risk+1,w
  8696  0EF6  00C5               	movwf	?_evaluate+1
  8697  0EF7  084A               	movf	evaluate@risk,w
  8698  0EF8  00C4               	movwf	?_evaluate
  8699  0EF9  0008               	return
  8700  0EFA                     __end_of_evaluate:	
  8701                           
  8702                           	psect	text25
  8703  1CB0                     __ptext25:	
  8704 ;; *************** function _delete_matrix *****************
  8705 ;; Defined at:
  8706 ;;		line 615 in file "teris_16f886.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;  matrix          2   36[BANK0 ] PTR struct .
  8709 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;  row             1   41[BANK0 ] char 
  8712 ;;  count           1   40[BANK0 ] unsigned char 
  8713 ;; Return value:  Size  Location     Type
  8714 ;;                  1    wreg      unsigned char 
  8715 ;; Registers used:
  8716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8722 ;;      Params:         0       2       0       0       0
  8723 ;;      Locals:         0       2       0       0       0
  8724 ;;      Temps:          0       2       0       0       0
  8725 ;;      Totals:         0       6       0       0       0
  8726 ;;Total ram usage:        6 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; Hardware stack levels required when called:    3
  8729 ;; This function calls:
  8730 ;;		_debug_int1
  8731 ;;		_delete_row
  8732 ;;		_is_row_full
  8733 ;; This function is called by:
  8734 ;;		_find_best_solution
  8735 ;;		_main
  8736 ;; This function uses a non-reentrant model
  8737 ;;
  8738                           
  8739                           
  8740                           ;psect for function _delete_matrix
  8741  1CB0                     _delete_matrix:	
  8742                           
  8743                           ;teris_16f886.c: 617: uint8_t count = 0;
  8744                           
  8745                           ;incstack = 0
  8746                           ; Regs used in _delete_matrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8747  1CB0  1283               	bcf	3,5	;RP0=0, select bank0
  8748  1CB1  1303               	bcf	3,6	;RP1=0, select bank0
  8749  1CB2  01C8               	clrf	delete_matrix@count
  8750                           
  8751                           ;teris_16f886.c: 618: int8_t row = 8 - 1;
  8752  1CB3  3007               	movlw	7
  8753  1CB4  00C6               	movwf	??_delete_matrix
  8754  1CB5  0846               	movf	??_delete_matrix,w
  8755  1CB6  00C9               	movwf	delete_matrix@row
  8756  1CB7                     l5004:	
  8757                           ;teris_16f886.c: 619: while(row >= 0)
  8758                           
  8759  1CB7  1BC9               	btfsc	delete_matrix@row,7
  8760  1CB8  2CE6               	goto	l5006
  8761                           
  8762                           ;teris_16f886.c: 620: {
  8763                           ;teris_16f886.c: 621: if(is_row_full(matrix, row))
  8764  1CB9  0844               	movf	delete_matrix@matrix,w
  8765  1CBA  00F0               	movwf	is_row_full@matrix
  8766  1CBB  0845               	movf	delete_matrix@matrix+1,w
  8767  1CBC  00F1               	movwf	is_row_full@matrix+1
  8768  1CBD  0849               	movf	delete_matrix@row,w
  8769  1CBE  00C6               	movwf	??_delete_matrix
  8770  1CBF  0846               	movf	??_delete_matrix,w
  8771  1CC0  00F2               	movwf	is_row_full@row
  8772  1CC1  160A  158A  231A  160A  158A  	fcall	_is_row_full
  8773  1CC6  3A00               	xorlw	0
  8774  1CC7  1903               	skipnz
  8775  1CC8  2CDF               	goto	l5002
  8776                           
  8777                           ;teris_16f886.c: 622: {
  8778                           ;teris_16f886.c: 623: delete_row(matrix, row);
  8779  1CC9  1283               	bcf	3,5	;RP0=0, select bank0
  8780  1CCA  1303               	bcf	3,6	;RP1=0, select bank0
  8781  1CCB  0844               	movf	delete_matrix@matrix,w
  8782  1CCC  00FB               	movwf	delete_row@matrix
  8783  1CCD  0845               	movf	delete_matrix@matrix+1,w
  8784  1CCE  00FC               	movwf	delete_row@matrix+1
  8785  1CCF  0849               	movf	delete_matrix@row,w
  8786  1CD0  00C6               	movwf	??_delete_matrix
  8787  1CD1  0846               	movf	??_delete_matrix,w
  8788  1CD2  00FD               	movwf	delete_row@row
  8789  1CD3  160A  118A  2125  160A  158A  	fcall	_delete_row
  8790                           
  8791                           ;teris_16f886.c: 624: count++;
  8792  1CD8  3001               	movlw	1
  8793  1CD9  1283               	bcf	3,5	;RP0=0, select bank0
  8794  1CDA  1303               	bcf	3,6	;RP1=0, select bank0
  8795  1CDB  00C6               	movwf	??_delete_matrix
  8796  1CDC  0846               	movf	??_delete_matrix,w
  8797  1CDD  07C8               	addwf	delete_matrix@count,f
  8798                           
  8799                           ;teris_16f886.c: 625: }
  8800  1CDE  2CB7               	goto	l5004
  8801  1CDF                     l5002:	
  8802                           
  8803                           ;teris_16f886.c: 626: else
  8804                           ;teris_16f886.c: 627: {
  8805                           ;teris_16f886.c: 628: row--;
  8806  1CDF  30FF               	movlw	255
  8807  1CE0  1283               	bcf	3,5	;RP0=0, select bank0
  8808  1CE1  1303               	bcf	3,6	;RP1=0, select bank0
  8809  1CE2  00C6               	movwf	??_delete_matrix
  8810  1CE3  0846               	movf	??_delete_matrix,w
  8811  1CE4  07C9               	addwf	delete_matrix@row,f
  8812  1CE5  2CB7               	goto	l5004
  8813  1CE6                     l5006:	
  8814                           
  8815                           ;teris_16f886.c: 629: }
  8816                           ;teris_16f886.c: 630: }
  8817                           ;teris_16f886.c: 631: debug_int1(0, "delete_matrix count = %d", count);
  8818  1CE6  30F0               	movlw	low (STR_22| (0+32768))
  8819  1CE7  00BF               	movwf	debug_int1@f
  8820  1CE8  308C               	movlw	high (STR_22| (0+32768))
  8821  1CE9  00C0               	movwf	debug_int1@f+1
  8822  1CEA  0848               	movf	delete_matrix@count,w
  8823  1CEB  00C6               	movwf	??_delete_matrix
  8824  1CEC  01C7               	clrf	??_delete_matrix+1
  8825  1CED  0846               	movf	??_delete_matrix,w
  8826  1CEE  00C1               	movwf	debug_int1@i
  8827  1CEF  0847               	movf	??_delete_matrix+1,w
  8828  1CF0  00C2               	movwf	debug_int1@i+1
  8829  1CF1  3000               	movlw	0
  8830  1CF2  120A  118A  2003   	fcall	_debug_int1
  8831                           
  8832                           ;teris_16f886.c: 633: return count;
  8833  1CF5  1283               	bcf	3,5	;RP0=0, select bank0
  8834  1CF6  1303               	bcf	3,6	;RP1=0, select bank0
  8835  1CF7  0848               	movf	delete_matrix@count,w
  8836  1CF8  0008               	return
  8837  1CF9                     __end_of_delete_matrix:	
  8838                           
  8839                           	psect	text26
  8840  1B1A                     __ptext26:	
  8841 ;; *************** function _is_row_full *****************
  8842 ;; Defined at:
  8843 ;;		line 581 in file "teris_16f886.c"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;  matrix          2    0[COMMON] PTR const struct .
  8846 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  8847 ;;  row             1    2[COMMON] unsigned char 
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;  col             1    8[COMMON] unsigned char 
  8850 ;; Return value:  Size  Location     Type
  8851 ;;                  1    wreg      unsigned char 
  8852 ;; Registers used:
  8853 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8859 ;;      Params:         3       0       0       0       0
  8860 ;;      Locals:         1       0       0       0       0
  8861 ;;      Temps:          5       0       0       0       0
  8862 ;;      Totals:         9       0       0       0       0
  8863 ;;Total ram usage:        9 bytes
  8864 ;; Hardware stack levels used:    1
  8865 ;; This function calls:
  8866 ;;		Nothing
  8867 ;; This function is called by:
  8868 ;;		_delete_matrix
  8869 ;; This function uses a non-reentrant model
  8870 ;;
  8871                           
  8872                           
  8873                           ;psect for function _is_row_full
  8874  1B1A                     _is_row_full:	
  8875                           
  8876                           ;teris_16f886.c: 583: for(uint8_t col = 0; col < 8; col++)
  8877                           
  8878                           ;incstack = 0
  8879                           ; Regs used in _is_row_full: [wreg-fsr0h+status,2+status,0]
  8880  1B1A  01F8               	clrf	is_row_full@col
  8881  1B1B  3008               	movlw	8
  8882  1B1C  0278               	subwf	is_row_full@col,w
  8883  1B1D  1803               	btfsc	3,0
  8884  1B1E  2B48               	goto	l3548
  8885  1B1F                     l3538:	
  8886                           
  8887                           ;teris_16f886.c: 584: {
  8888                           ;teris_16f886.c: 585: if(matrix->data[row][col] == 0)
  8889  1B1F  0872               	movf	is_row_full@row,w
  8890  1B20  00F3               	movwf	??_is_row_full
  8891  1B21  3002               	movlw	2
  8892  1B22                     u4445:	
  8893  1B22  1003               	clrc
  8894  1B23  0DF3               	rlf	??_is_row_full,f
  8895  1B24  3EFF               	addlw	-1
  8896  1B25  1D03               	skipz
  8897  1B26  2B22               	goto	u4445
  8898  1B27  1003               	clrc
  8899  1B28  0D73               	rlf	??_is_row_full,w
  8900  1B29  0770               	addwf	is_row_full@matrix,w
  8901  1B2A  00F4               	movwf	??_is_row_full+1
  8902  1B2B  0871               	movf	is_row_full@matrix+1,w
  8903  1B2C  1803               	skipnc
  8904  1B2D  3E01               	addlw	1
  8905  1B2E  00F5               	movwf	??_is_row_full+2
  8906  1B2F  0878               	movf	is_row_full@col,w
  8907  1B30  0774               	addwf	??_is_row_full+1,w
  8908  1B31  00F6               	movwf	??_is_row_full+3
  8909  1B32  0875               	movf	??_is_row_full+2,w
  8910  1B33  1803               	skipnc
  8911  1B34  3E01               	addlw	1
  8912  1B35  00F7               	movwf	??_is_row_full+4
  8913  1B36  0876               	movf	??_is_row_full+3,w
  8914  1B37  0084               	movwf	4
  8915  1B38  1783               	bsf	3,7
  8916  1B39  1C77               	btfss	??_is_row_full+4,0
  8917  1B3A  1383               	bcf	3,7
  8918  1B3B  0800               	movf	0,w
  8919  1B3C  1D03               	btfss	3,2
  8920  1B3D  2B40               	goto	l3544
  8921                           
  8922                           ;teris_16f886.c: 586: {
  8923                           ;teris_16f886.c: 587: return 0;
  8924  1B3E  3000               	movlw	0
  8925  1B3F  0008               	return
  8926  1B40                     l3544:	
  8927  1B40  3001               	movlw	1
  8928  1B41  00F3               	movwf	??_is_row_full
  8929  1B42  0873               	movf	??_is_row_full,w
  8930  1B43  07F8               	addwf	is_row_full@col,f
  8931  1B44  3008               	movlw	8
  8932  1B45  0278               	subwf	is_row_full@col,w
  8933  1B46  1C03               	skipc
  8934  1B47  2B1F               	goto	l3538
  8935  1B48                     l3548:	
  8936                           
  8937                           ;teris_16f886.c: 588: }
  8938                           ;teris_16f886.c: 589: }
  8939                           ;teris_16f886.c: 590: return 1;
  8940  1B48  3001               	movlw	1
  8941  1B49  0008               	return
  8942  1B4A                     __end_of_is_row_full:	
  8943                           
  8944                           	psect	text27
  8945  1125                     __ptext27:	
  8946 ;; *************** function _delete_row *****************
  8947 ;; Defined at:
  8948 ;;		line 592 in file "teris_16f886.c"
  8949 ;; Parameters:    Size  Location     Type
  8950 ;;  matrix          2   11[COMMON] PTR struct .
  8951 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  8952 ;;  row             1   13[COMMON] unsigned char 
  8953 ;; Auto vars:     Size  Location     Type
  8954 ;;  len             2    4[BANK0 ] unsigned int 
  8955 ;;  i               1    6[BANK0 ] char 
  8956 ;; Return value:  Size  Location     Type
  8957 ;;                  1    wreg      void 
  8958 ;; Registers used:
  8959 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8960 ;; Tracked objects:
  8961 ;;		On entry : 0/0
  8962 ;;		On exit  : 0/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8965 ;;      Params:         3       0       0       0       0
  8966 ;;      Locals:         0       3       0       0       0
  8967 ;;      Temps:          0       4       0       0       0
  8968 ;;      Totals:         3       7       0       0       0
  8969 ;;Total ram usage:       10 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    1
  8972 ;; This function calls:
  8973 ;;		_memcpy
  8974 ;;		_memset
  8975 ;; This function is called by:
  8976 ;;		_delete_matrix
  8977 ;; This function uses a non-reentrant model
  8978 ;;
  8979                           
  8980                           
  8981                           ;psect for function _delete_row
  8982  1125                     _delete_row:	
  8983                           
  8984                           ;teris_16f886.c: 594: for(int8_t i = 8 - 1; i >= 0; i--)
  8985                           
  8986                           ;incstack = 0
  8987                           ; Regs used in _delete_row: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8988  1125  3007               	movlw	7
  8989  1126  1283               	bcf	3,5	;RP0=0, select bank0
  8990  1127  1303               	bcf	3,6	;RP1=0, select bank0
  8991  1128  00A0               	movwf	??_delete_row
  8992  1129  0820               	movf	??_delete_row,w
  8993  112A  00A6               	movwf	delete_row@i
  8994  112B                     L18:	
  8995  112B  1BA6               	btfsc	delete_row@i,7
  8996  112C  0008               	return
  8997                           
  8998                           ;teris_16f886.c: 595: {
  8999                           ;teris_16f886.c: 596: if(i <= row)
  9000  112D  0826               	movf	delete_row@i,w
  9001  112E  00A0               	movwf	??_delete_row
  9002  112F  01A1               	clrf	??_delete_row+1
  9003  1130  1BA0               	btfsc	??_delete_row,7
  9004  1131  03A1               	decf	??_delete_row+1,f
  9005  1132  0821               	movf	??_delete_row+1,w
  9006  1133  3A80               	xorlw	128
  9007  1134  3C80               	sublw	128
  9008  1135  1D03               	skipz
  9009  1136  2939               	goto	u6835
  9010  1137  0820               	movf	??_delete_row,w
  9011  1138  027D               	subwf	delete_row@row,w
  9012  1139                     u6835:	
  9013  1139  1C03               	skipc
  9014  113A  2993               	goto	l4910
  9015                           
  9016                           ;teris_16f886.c: 597: {
  9017                           ;teris_16f886.c: 598: if(i > 0)
  9018  113B  1283               	bcf	3,5	;RP0=0, select bank0
  9019  113C  1303               	bcf	3,6	;RP1=0, select bank0
  9020  113D  0826               	movf	delete_row@i,w
  9021  113E  3A80               	xorlw	128
  9022  113F  3E7F               	addlw	-129
  9023  1140  1C03               	skipc
  9024  1141  2975               	goto	l4908
  9025                           
  9026                           ;teris_16f886.c: 599: {
  9027                           ;teris_16f886.c: 603: register size_t len;
  9028                           ;teris_16f886.c: 605: len = 8*sizeof(uint8_t);
  9029  1142  3008               	movlw	8
  9030  1143  00A4               	movwf	delete_row@len
  9031  1144  3000               	movlw	0
  9032  1145  00A5               	movwf	delete_row@len+1
  9033                           
  9034                           ;teris_16f886.c: 606: memcpy(matrix->data[i], matrix->data[i - 1], len);
  9035  1146  0826               	movf	delete_row@i,w
  9036  1147  00A0               	movwf	??_delete_row
  9037  1148  3002               	movlw	2
  9038  1149                     u6855:	
  9039  1149  1003               	clrc
  9040  114A  0DA0               	rlf	??_delete_row,f
  9041  114B  3EFF               	addlw	-1
  9042  114C  1D03               	skipz
  9043  114D  2949               	goto	u6855
  9044  114E  1003               	clrc
  9045  114F  0D20               	rlf	??_delete_row,w
  9046  1150  077B               	addwf	delete_row@matrix,w
  9047  1151  00F0               	movwf	memcpy@d1
  9048  1152  087C               	movf	delete_row@matrix+1,w
  9049  1153  1803               	skipnc
  9050  1154  3E01               	addlw	1
  9051  1155  00F1               	movwf	memcpy@d1+1
  9052  1156  0826               	movf	delete_row@i,w
  9053  1157  00A1               	movwf	??_delete_row+1
  9054  1158  3002               	movlw	2
  9055  1159                     u6865:	
  9056  1159  1003               	clrc
  9057  115A  0DA1               	rlf	??_delete_row+1,f
  9058  115B  3EFF               	addlw	-1
  9059  115C  1D03               	skipz
  9060  115D  2959               	goto	u6865
  9061  115E  1003               	clrc
  9062  115F  0D21               	rlf	??_delete_row+1,w
  9063  1160  3EF8               	addlw	248
  9064  1161  077B               	addwf	delete_row@matrix,w
  9065  1162  00A2               	movwf	??_delete_row+2
  9066  1163  087C               	movf	delete_row@matrix+1,w
  9067  1164  1803               	skipnc
  9068  1165  3E01               	addlw	1
  9069  1166  00A3               	movwf	??_delete_row+3
  9070  1167  0822               	movf	??_delete_row+2,w
  9071  1168  00F2               	movwf	memcpy@s1
  9072  1169  0823               	movf	??_delete_row+3,w
  9073  116A  00F3               	movwf	memcpy@s1+1
  9074  116B  0825               	movf	delete_row@len+1,w
  9075  116C  00F5               	movwf	memcpy@n+1
  9076  116D  0824               	movf	delete_row@len,w
  9077  116E  00F4               	movwf	memcpy@n
  9078  116F  160A  158A  22C3  160A  118A  	fcall	_memcpy
  9079                           
  9080                           ;teris_16f886.c: 607: }
  9081  1174  2993               	goto	l4910
  9082  1175                     l4908:	
  9083                           
  9084                           ;teris_16f886.c: 608: else
  9085                           ;teris_16f886.c: 609: {
  9086                           ;teris_16f886.c: 610: memset(matrix->data[i], 0, 8*sizeof(uint8_t));
  9087  1175  1283               	bcf	3,5	;RP0=0, select bank0
  9088  1176  1303               	bcf	3,6	;RP1=0, select bank0
  9089  1177  0826               	movf	delete_row@i,w
  9090  1178  00A0               	movwf	??_delete_row
  9091  1179  3002               	movlw	2
  9092  117A                     u6875:	
  9093  117A  1003               	clrc
  9094  117B  0DA0               	rlf	??_delete_row,f
  9095  117C  3EFF               	addlw	-1
  9096  117D  1D03               	skipz
  9097  117E  297A               	goto	u6875
  9098  117F  1003               	clrc
  9099  1180  0D20               	rlf	??_delete_row,w
  9100  1181  077B               	addwf	delete_row@matrix,w
  9101  1182  00F0               	movwf	memset@p1
  9102  1183  087C               	movf	delete_row@matrix+1,w
  9103  1184  1803               	skipnc
  9104  1185  3E01               	addlw	1
  9105  1186  00F1               	movwf	memset@p1+1
  9106  1187  3000               	movlw	0
  9107  1188  00F2               	movwf	memset@c
  9108  1189  00F3               	movwf	memset@c+1
  9109  118A  3008               	movlw	8
  9110  118B  00F4               	movwf	memset@n
  9111  118C  3000               	movlw	0
  9112  118D  00F5               	movwf	memset@n+1
  9113  118E  160A  158A  21D5  160A  118A  	fcall	_memset
  9114  1193                     l4910:	
  9115  1193  30FF               	movlw	255
  9116  1194  1283               	bcf	3,5	;RP0=0, select bank0
  9117  1195  1303               	bcf	3,6	;RP1=0, select bank0
  9118  1196  00A0               	movwf	??_delete_row
  9119  1197  0820               	movf	??_delete_row,w
  9120  1198  07A6               	addwf	delete_row@i,f
  9121  1199  292B               	goto	L18
  9122  119A                     __end_of_delete_row:	
  9123                           
  9124                           	psect	text28
  9125  1AC3                     __ptext28:	
  9126 ;; *************** function _memcpy *****************
  9127 ;; Defined at:
  9128 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  9129 ;; Parameters:    Size  Location     Type
  9130 ;;  d1              2    0[COMMON] PTR void 
  9131 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9132 ;;  s1              2    2[COMMON] PTR const void 
  9133 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9134 ;;  n               2    4[COMMON] unsigned int 
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;  s               2    9[COMMON] PTR const unsigned char 
  9137 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9138 ;;  d               2    7[COMMON] PTR unsigned char 
  9139 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9140 ;; Return value:  Size  Location     Type
  9141 ;;                  2    0[COMMON] PTR void 
  9142 ;; Registers used:
  9143 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9144 ;; Tracked objects:
  9145 ;;		On entry : 0/0
  9146 ;;		On exit  : 0/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9149 ;;      Params:         6       0       0       0       0
  9150 ;;      Locals:         4       0       0       0       0
  9151 ;;      Temps:          1       0       0       0       0
  9152 ;;      Totals:        11       0       0       0       0
  9153 ;;Total ram usage:       11 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; This function calls:
  9156 ;;		Nothing
  9157 ;; This function is called by:
  9158 ;;		_delete_row
  9159 ;;		_merge1
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           
  9164                           ;psect for function _memcpy
  9165  1AC3                     _memcpy:	
  9166                           
  9167                           ;incstack = 0
  9168                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  9169  1AC3  0872               	movf	memcpy@s1,w
  9170  1AC4  00F9               	movwf	memcpy@s
  9171  1AC5  0873               	movf	memcpy@s1+1,w
  9172  1AC6  00FA               	movwf	memcpy@s+1
  9173  1AC7  0870               	movf	memcpy@d1,w
  9174  1AC8  00F7               	movwf	memcpy@d
  9175  1AC9  0871               	movf	memcpy@d1+1,w
  9176  1ACA  00F8               	movwf	memcpy@d+1
  9177  1ACB                     l3440:	
  9178  1ACB  3001               	movlw	1
  9179  1ACC  02F4               	subwf	memcpy@n,f
  9180  1ACD  3000               	movlw	0
  9181  1ACE  1C03               	skipc
  9182  1ACF  03F5               	decf	memcpy@n+1,f
  9183  1AD0  02F5               	subwf	memcpy@n+1,f
  9184  1AD1  0A74               	incf	memcpy@n,w
  9185  1AD2  1903               	btfsc	3,2
  9186  1AD3  0A75               	incf	memcpy@n+1,w
  9187  1AD4  1903               	btfsc	3,2
  9188  1AD5  0008               	return
  9189  1AD6  0879               	movf	memcpy@s,w
  9190  1AD7  0084               	movwf	4
  9191  1AD8  1783               	bsf	3,7
  9192  1AD9  1C7A               	btfss	memcpy@s+1,0
  9193  1ADA  1383               	bcf	3,7
  9194  1ADB  0800               	movf	0,w
  9195  1ADC  00F6               	movwf	??_memcpy
  9196  1ADD  0877               	movf	memcpy@d,w
  9197  1ADE  0084               	movwf	4
  9198  1ADF  1383               	bcf	3,7
  9199  1AE0  1878               	btfsc	memcpy@d+1,0
  9200  1AE1  1783               	bsf	3,7
  9201  1AE2  0876               	movf	??_memcpy,w
  9202  1AE3  0080               	movwf	0
  9203  1AE4  3001               	movlw	1
  9204  1AE5  07F9               	addwf	memcpy@s,f
  9205  1AE6  1803               	skipnc
  9206  1AE7  0AFA               	incf	memcpy@s+1,f
  9207  1AE8  3001               	movlw	1
  9208  1AE9  07F7               	addwf	memcpy@d,f
  9209  1AEA  1803               	skipnc
  9210  1AEB  0AF8               	incf	memcpy@d+1,f
  9211  1AEC  2ACB               	goto	l3440
  9212  1AED                     __end_of_memcpy:	
  9213                           ;	Return value of _memcpy is never used
  9214                           
  9215                           
  9216                           	psect	text29
  9217  0003                     __ptext29:	
  9218 ;; *************** function _debug_int1 *****************
  9219 ;; Defined at:
  9220 ;;		line 314 in file "teris_16f886.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;  enable          1    wreg     unsigned char 
  9223 ;;  f               2   31[BANK0 ] PTR const unsigned char 
  9224 ;;		 -> STR_63(14), STR_61(24), STR_53(23), STR_46(16), 
  9225 ;;		 -> STR_42(17), STR_39(22), STR_38(17), STR_37(16), 
  9226 ;;		 -> STR_36(11), STR_22(25), STR_10(30), 
  9227 ;;  i               2   33[BANK0 ] int 
  9228 ;; Auto vars:     Size  Location     Type
  9229 ;;  enable          1   35[BANK0 ] unsigned char 
  9230 ;; Return value:  Size  Location     Type
  9231 ;;                  1    wreg      void 
  9232 ;; Registers used:
  9233 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9234 ;; Tracked objects:
  9235 ;;		On entry : 0/0
  9236 ;;		On exit  : 0/0
  9237 ;;		Unchanged: 0/0
  9238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9239 ;;      Params:         0       4       0       0       0
  9240 ;;      Locals:         0       1       0       0       0
  9241 ;;      Temps:          0       0       0       0       0
  9242 ;;      Totals:         0       5       0       0       0
  9243 ;;Total ram usage:        5 bytes
  9244 ;; Hardware stack levels used:    1
  9245 ;; Hardware stack levels required when called:    2
  9246 ;; This function calls:
  9247 ;;		_USARTWriteString
  9248 ;;		_sprintf
  9249 ;; This function is called by:
  9250 ;;		_delete_matrix
  9251 ;;		_evaluate
  9252 ;;		_left_most
  9253 ;;		_right_most
  9254 ;;		_get_high
  9255 ;;		_get_holes_after_merge
  9256 ;;		_find_best_solution
  9257 ;;		_main
  9258 ;;		_printf_console_all_MATRIX44
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           
  9263                           ;psect for function _debug_int1
  9264  0003                     _debug_int1:	
  9265                           
  9266                           ;incstack = 0
  9267                           ; Regs used in _debug_int1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9268                           ;debug_int1@enable stored from wreg
  9269  0003  1283               	bcf	3,5	;RP0=0, select bank0
  9270  0004  1303               	bcf	3,6	;RP1=0, select bank0
  9271  0005  00C3               	movwf	debug_int1@enable
  9272                           
  9273                           ;teris_16f886.c: 316: if(enable == 1)
  9274  0006  0343               	decf	debug_int1@enable,w
  9275  0007  1D03               	btfss	3,2
  9276  0008  0008               	return
  9277                           
  9278                           ;teris_16f886.c: 317: {
  9279                           ;teris_16f886.c: 322: sprintf(g_debug, f, i);
  9280  0009  083F               	movf	debug_int1@f,w
  9281  000A  00A0               	movwf	sprintf@f
  9282  000B  0840               	movf	debug_int1@f+1,w
  9283  000C  00A1               	movwf	sprintf@f+1
  9284  000D  0842               	movf	debug_int1@i+1,w
  9285  000E  00A3               	movwf	?_sprintf+3
  9286  000F  0841               	movf	debug_int1@i,w
  9287  0010  00A2               	movwf	?_sprintf+2
  9288  0011  3099               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9289  0012  120A  118A  22C3  120A  118A  	fcall	_sprintf
  9290                           
  9291                           ;teris_16f886.c: 323: USARTWriteString(g_debug);
  9292  0017  3099               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9293  0018  00F1               	movwf	USARTWriteString@str
  9294  0019  3001               	movlw	1
  9295  001A  00F2               	movwf	USARTWriteString@str+1
  9296  001B  160A  158A  222D  120A  118A  	fcall	_USARTWriteString
  9297                           
  9298                           ;teris_16f886.c: 324: USARTWriteString("\r\n");
  9299  0020  3067               	movlw	low (STR_1| (0+32768))
  9300  0021  00F1               	movwf	USARTWriteString@str
  9301  0022  308E               	movlw	high (STR_1| (0+32768))
  9302  0023  00F2               	movwf	USARTWriteString@str+1
  9303  0024  160A  158A  222D   	fcall	_USARTWriteString
  9304  0027  0008               	return
  9305  0028                     __end_of_debug_int1:	
  9306                           
  9307                           	psect	text30
  9308  02C3                     __ptext30:	
  9309 ;; *************** function _sprintf *****************
  9310 ;; Defined at:
  9311 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  9312 ;; Parameters:    Size  Location     Type
  9313 ;;  sp              1    wreg     PTR unsigned char 
  9314 ;;		 -> g_debug(32), 
  9315 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  9316 ;;		 -> STR_63(14), STR_61(24), STR_59(35), STR_58(36), 
  9317 ;;		 -> STR_57(35), STR_56(36), STR_55(35), STR_54(36), 
  9318 ;;		 -> STR_53(23), STR_52(35), STR_51(36), STR_50(35), 
  9319 ;;		 -> STR_49(36), STR_48(35), STR_47(38), STR_46(16), 
  9320 ;;		 -> STR_45(37), STR_44(36), STR_42(17), STR_41(33), 
  9321 ;;		 -> STR_40(52), STR_39(22), STR_38(17), STR_37(16), 
  9322 ;;		 -> STR_36(11), STR_35(26), STR_34(26), STR_30(30), 
  9323 ;;		 -> STR_29(30), STR_28(30), STR_25(24), STR_24(24), 
  9324 ;;		 -> STR_22(25), STR_11(42), STR_10(30), 
  9325 ;; Auto vars:     Size  Location     Type
  9326 ;;  sp              1   28[BANK0 ] PTR unsigned char 
  9327 ;;		 -> g_debug(32), 
  9328 ;;  idx             1   17[BANK0 ] unsigned char 
  9329 ;;  tmpval          4    0        struct .
  9330 ;;  flag            2   29[BANK0 ] unsigned short 
  9331 ;;  width           2   25[BANK0 ] int 
  9332 ;;  val             2   22[BANK0 ] unsigned int 
  9333 ;;  len             2   19[BANK0 ] unsigned int 
  9334 ;;  c               1   27[BANK0 ] char 
  9335 ;;  prec            1   24[BANK0 ] char 
  9336 ;;  ap              1   21[BANK0 ] PTR void [1]
  9337 ;;		 -> ?_sprintf(2), 
  9338 ;;  cp              1   18[BANK0 ] PTR const unsigned char 
  9339 ;;		 -> sprintf@c(1), 
  9340 ;; Return value:  Size  Location     Type
  9341 ;;                  2    0[BANK0 ] int 
  9342 ;; Registers used:
  9343 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9349 ;;      Params:         0       8       0       0       0
  9350 ;;      Locals:         0      20       0       0       0
  9351 ;;      Temps:          0       3       0       0       0
  9352 ;;      Totals:         0      31       0       0       0
  9353 ;;Total ram usage:       31 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    1
  9356 ;; This function calls:
  9357 ;;		___bmul
  9358 ;;		___lwdiv
  9359 ;;		___lwmod
  9360 ;;		___wmul
  9361 ;;		_isdigit
  9362 ;; This function is called by:
  9363 ;;		_debug_int1
  9364 ;;		_debug_int2
  9365 ;;		_debug_int3
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           
  9370                           ;psect for function _sprintf
  9371  02C3                     _sprintf:	
  9372                           
  9373                           ;incstack = 0
  9374                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9375                           ;sprintf@sp stored from wreg
  9376  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  9377  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  9378  02C5  00BC               	movwf	sprintf@sp
  9379                           
  9380                           ;doprnt.c: 494: va_list ap;
  9381                           ;doprnt.c: 499: signed char c;
  9382                           ;doprnt.c: 501: int width;
  9383                           ;doprnt.c: 506: signed char prec;
  9384                           ;doprnt.c: 508: unsigned short flag;
  9385                           ;doprnt.c: 523: union {
  9386                           ;doprnt.c: 524: unsigned long vd;
  9387                           ;doprnt.c: 525: double integ;
  9388                           ;doprnt.c: 526: } tmpval;
  9389                           ;doprnt.c: 528: unsigned int val;
  9390                           ;doprnt.c: 529: unsigned len;
  9391                           ;doprnt.c: 530: const char * cp;
  9392                           ;doprnt.c: 533: *ap = __va_start();
  9393  02C6  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  9394  02C7  00A8               	movwf	??_sprintf
  9395  02C8  0828               	movf	??_sprintf,w
  9396  02C9  00B5               	movwf	sprintf@ap
  9397  02CA                     l3374:	
  9398                           ;doprnt.c: 536: while(c = *f++) {
  9399                           
  9400  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  9401  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  9402  02CC  0821               	movf	sprintf@f+1,w
  9403  02CD  00A9               	movwf	??_sprintf+1
  9404  02CE  0820               	movf	sprintf@f,w
  9405  02CF  00A8               	movwf	??_sprintf
  9406  02D0  0AA0               	incf	sprintf@f,f
  9407  02D1  1903               	skipnz
  9408  02D2  0AA1               	incf	sprintf@f+1,f
  9409  02D3  0829               	movf	??_sprintf+1,w
  9410  02D4  00FF               	movwf	127
  9411  02D5  0828               	movf	??_sprintf,w
  9412  02D6  0084               	movwf	4
  9413  02D7  120A  158A  2000  120A  118A  	fcall	stringtab
  9414  02DC  00AA               	movwf	??_sprintf+2
  9415  02DD  082A               	movf	??_sprintf+2,w
  9416  02DE  00BB               	movwf	sprintf@c
  9417  02DF  083B               	movf	sprintf@c,w
  9418  02E0  1903               	btfsc	3,2
  9419  02E1  2FBE               	goto	l3376
  9420                           
  9421                           ;doprnt.c: 538: if(c != '%')
  9422  02E2  3025               	movlw	37
  9423  02E3  063B               	xorwf	sprintf@c,w
  9424  02E4  1903               	btfsc	3,2
  9425  02E5  2AF2               	goto	l3066
  9426                           
  9427                           ;doprnt.c: 540: {
  9428                           ;doprnt.c: 541: ((*sp++ = (c)));
  9429  02E6  083B               	movf	sprintf@c,w
  9430  02E7  00A8               	movwf	??_sprintf
  9431  02E8  083C               	movf	sprintf@sp,w
  9432  02E9  0084               	movwf	4
  9433  02EA  0828               	movf	??_sprintf,w
  9434  02EB  1783               	bsf	3,7	;select IRP bank2
  9435  02EC  0080               	movwf	0
  9436  02ED  3001               	movlw	1
  9437  02EE  00A8               	movwf	??_sprintf
  9438  02EF  0828               	movf	??_sprintf,w
  9439  02F0  07BC               	addwf	sprintf@sp,f
  9440                           
  9441                           ;doprnt.c: 542: continue;
  9442  02F1  2ACA               	goto	l3374
  9443  02F2                     l3066:	
  9444                           
  9445                           ;doprnt.c: 543: }
  9446                           ;doprnt.c: 546: width = 0;
  9447  02F2  01B9               	clrf	sprintf@width
  9448  02F3  01BA               	clrf	sprintf@width+1
  9449                           
  9450                           ;doprnt.c: 548: flag = 0;
  9451  02F4  01BD               	clrf	sprintf@flag
  9452  02F5  01BE               	clrf	sprintf@flag+1
  9453                           
  9454                           ;doprnt.c: 551: switch(*f) {
  9455                           
  9456                           ;doprnt.c: 550: for(;;) {
  9457  02F6  2B02               	goto	l3070
  9458  02F7                     l522:	
  9459                           ;doprnt.c: 553: case '-':
  9460                           
  9461                           
  9462                           ;doprnt.c: 554: flag |= 0x08;
  9463  02F7  15BD               	bsf	sprintf@flag,3
  9464  02F8  2AFE               	goto	L21
  9465  02F9                     l524:	
  9466                           ;doprnt.c: 560: case ' ':
  9467                           
  9468                           ;doprnt.c: 556: continue;
  9469                           
  9470                           ;doprnt.c: 555: f++;
  9471                           
  9472                           
  9473                           ;doprnt.c: 561: flag |= 0x01;
  9474  02F9  143D               	bsf	sprintf@flag,0
  9475  02FA  2AFE               	goto	L21
  9476  02FB                     l525:	
  9477                           ;doprnt.c: 573: case '#':
  9478                           
  9479                           ;doprnt.c: 563: continue;
  9480                           
  9481                           ;doprnt.c: 562: f++;
  9482                           
  9483                           
  9484                           ;doprnt.c: 574: flag |= 0x800;
  9485  02FB  15BE               	bsf	sprintf@flag+1,3
  9486  02FC  2AFE               	goto	L21
  9487  02FD                     l526:	
  9488                           ;doprnt.c: 579: case '0':
  9489                           
  9490                           ;doprnt.c: 576: continue;
  9491                           
  9492                           ;doprnt.c: 575: f++;
  9493                           
  9494                           
  9495                           ;doprnt.c: 580: flag |= 0x04;
  9496  02FD  153D               	bsf	sprintf@flag,2
  9497  02FE                     L21:	
  9498                           
  9499                           ;doprnt.c: 581: f++;
  9500  02FE  3001               	movlw	1
  9501  02FF  07A0               	addwf	sprintf@f,f
  9502  0300  1803               	skipnc
  9503  0301  0AA1               	incf	sprintf@f+1,f
  9504  0302                     l3070:	
  9505                           ;doprnt.c: 584: }
  9506                           
  9507                           ;doprnt.c: 582: continue;
  9508                           
  9509  0302  0821               	movf	sprintf@f+1,w
  9510  0303  00FF               	movwf	127
  9511  0304  0820               	movf	sprintf@f,w
  9512  0305  0084               	movwf	4
  9513  0306  120A  158A  2000  120A  118A  	fcall	stringtab
  9514                           
  9515                           ; Switch size 1, requested type "space"
  9516                           ; Number of cases is 4, Range of values is 32 to 48
  9517                           ; switch strategies available:
  9518                           ; Name         Instructions Cycles
  9519                           ; simple_byte           13     7 (average)
  9520                           ; direct_byte           62    11 (fixed)
  9521                           ; jumptable            263     9 (fixed)
  9522                           ;	Chosen strategy is simple_byte
  9523  030B  3A20               	xorlw	32	; case 32
  9524  030C  1903               	skipnz
  9525  030D  2AF9               	goto	l524
  9526  030E  3A03               	xorlw	3	; case 35
  9527  030F  1903               	skipnz
  9528  0310  2AFB               	goto	l525
  9529  0311  3A0E               	xorlw	14	; case 45
  9530  0312  1903               	skipnz
  9531  0313  2AF7               	goto	l522
  9532  0314  3A1D               	xorlw	29	; case 48
  9533  0315  1903               	skipnz
  9534  0316  2AFD               	goto	l526
  9535  0317  2B18               	goto	l528
  9536  0318                     l528:	
  9537                           ;doprnt.c: 586: }
  9538                           
  9539                           ;doprnt.c: 585: break;
  9540                           
  9541                           
  9542                           ;doprnt.c: 593: if(flag & 0x08)
  9543  0318  1DBD               	btfss	sprintf@flag,3
  9544  0319  2B1E               	goto	l3074
  9545                           
  9546                           ;doprnt.c: 594: flag &= ~0x04;
  9547  031A  30FB               	movlw	251
  9548  031B  05BD               	andwf	sprintf@flag,f
  9549  031C  30FF               	movlw	255
  9550  031D  05BE               	andwf	sprintf@flag+1,f
  9551  031E                     l3074:	
  9552                           
  9553                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9554  031E  0821               	movf	sprintf@f+1,w
  9555  031F  00FF               	movwf	127
  9556  0320  0820               	movf	sprintf@f,w
  9557  0321  0084               	movwf	4
  9558  0322  120A  158A  2000  120A  118A  	fcall	stringtab
  9559  0327  160A  158A  2140  120A  118A  	fcall	_isdigit
  9560  032C  1C03               	btfss	3,0
  9561  032D  2B71               	goto	l3086
  9562                           
  9563                           ;doprnt.c: 598: width = 0;
  9564  032E  1283               	bcf	3,5	;RP0=0, select bank0
  9565  032F  1303               	bcf	3,6	;RP1=0, select bank0
  9566  0330  01B9               	clrf	sprintf@width
  9567  0331  01BA               	clrf	sprintf@width+1
  9568  0332                     l3078:	
  9569                           ;doprnt.c: 599: do {
  9570                           
  9571                           
  9572                           ;doprnt.c: 600: width *= 10;
  9573  0332  300A               	movlw	10
  9574  0333  00F0               	movwf	___wmul@multiplier
  9575  0334  3000               	movlw	0
  9576  0335  00F1               	movwf	___wmul@multiplier+1
  9577  0336  1283               	bcf	3,5	;RP0=0, select bank0
  9578  0337  1303               	bcf	3,6	;RP1=0, select bank0
  9579  0338  083A               	movf	sprintf@width+1,w
  9580  0339  00F3               	movwf	___wmul@multiplicand+1
  9581  033A  0839               	movf	sprintf@width,w
  9582  033B  00F2               	movwf	___wmul@multiplicand
  9583  033C  160A  158A  220C  120A  118A  	fcall	___wmul
  9584  0341  0871               	movf	?___wmul+1,w
  9585  0342  1283               	bcf	3,5	;RP0=0, select bank0
  9586  0343  1303               	bcf	3,6	;RP1=0, select bank0
  9587  0344  00BA               	movwf	sprintf@width+1
  9588  0345  0870               	movf	?___wmul,w
  9589  0346  00B9               	movwf	sprintf@width
  9590                           
  9591                           ;doprnt.c: 601: width += *f++ - '0';
  9592  0347  0821               	movf	sprintf@f+1,w
  9593  0348  00FF               	movwf	127
  9594  0349  0820               	movf	sprintf@f,w
  9595  034A  0084               	movwf	4
  9596  034B  120A  158A  2000  120A  118A  	fcall	stringtab
  9597  0350  3ED0               	addlw	208
  9598  0351  00A8               	movwf	??_sprintf
  9599  0352  30FF               	movlw	255
  9600  0353  1803               	skipnc
  9601  0354  3000               	movlw	0
  9602  0355  00A9               	movwf	??_sprintf+1
  9603  0356  0828               	movf	??_sprintf,w
  9604  0357  07B9               	addwf	sprintf@width,f
  9605  0358  1803               	skipnc
  9606  0359  0ABA               	incf	sprintf@width+1,f
  9607  035A  0829               	movf	??_sprintf+1,w
  9608  035B  07BA               	addwf	sprintf@width+1,f
  9609  035C  3001               	movlw	1
  9610  035D  07A0               	addwf	sprintf@f,f
  9611  035E  1803               	skipnc
  9612  035F  0AA1               	incf	sprintf@f+1,f
  9613                           
  9614                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9615  0360  0821               	movf	sprintf@f+1,w
  9616  0361  00FF               	movwf	127
  9617  0362  0820               	movf	sprintf@f,w
  9618  0363  0084               	movwf	4
  9619  0364  120A  158A  2000  120A  118A  	fcall	stringtab
  9620  0369  160A  158A  2140  120A  118A  	fcall	_isdigit
  9621  036E  1C03               	btfss	3,0
  9622  036F  2B8F               	goto	l3094
  9623  0370  2B32               	goto	l3078
  9624  0371                     l3086:	
  9625                           ;doprnt.c: 604: } else if(*f == '*') {
  9626                           
  9627  0371  1283               	bcf	3,5	;RP0=0, select bank0
  9628  0372  1303               	bcf	3,6	;RP1=0, select bank0
  9629  0373  0821               	movf	sprintf@f+1,w
  9630  0374  00FF               	movwf	127
  9631  0375  0820               	movf	sprintf@f,w
  9632  0376  0084               	movwf	4
  9633  0377  120A  158A  2000  120A  118A  	fcall	stringtab
  9634  037C  3A2A               	xorlw	42
  9635  037D  1D03               	skipz
  9636  037E  2B8F               	goto	l3094
  9637                           
  9638                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  9639  037F  0835               	movf	sprintf@ap,w
  9640  0380  0084               	movwf	4
  9641  0381  1383               	bcf	3,7	;select IRP bank0
  9642  0382  0800               	movf	0,w
  9643  0383  00B9               	movwf	sprintf@width
  9644  0384  0A84               	incf	4,f
  9645  0385  0800               	movf	0,w
  9646  0386  00BA               	movwf	sprintf@width+1
  9647  0387  3002               	movlw	2
  9648  0388  00A8               	movwf	??_sprintf
  9649  0389  0828               	movf	??_sprintf,w
  9650  038A  07B5               	addwf	sprintf@ap,f
  9651                           
  9652                           ;doprnt.c: 606: f++;
  9653  038B  3001               	movlw	1
  9654  038C  07A0               	addwf	sprintf@f,f
  9655  038D  1803               	skipnc
  9656  038E  0AA1               	incf	sprintf@f+1,f
  9657  038F                     l3094:	
  9658                           
  9659                           ;doprnt.c: 608: }
  9660                           ;doprnt.c: 611: if(*f == '.') {
  9661  038F  1283               	bcf	3,5	;RP0=0, select bank0
  9662  0390  1303               	bcf	3,6	;RP1=0, select bank0
  9663  0391  0821               	movf	sprintf@f+1,w
  9664  0392  00FF               	movwf	127
  9665  0393  0820               	movf	sprintf@f,w
  9666  0394  0084               	movwf	4
  9667  0395  120A  158A  2000  120A  118A  	fcall	stringtab
  9668  039A  3A2E               	xorlw	46
  9669  039B  1D03               	skipz
  9670  039C  2BF1               	goto	l3112
  9671                           
  9672                           ;doprnt.c: 612: flag |= 0x4000;
  9673  039D  173E               	bsf	sprintf@flag+1,6
  9674                           
  9675                           ;doprnt.c: 613: f++;
  9676  039E  3001               	movlw	1
  9677  039F  07A0               	addwf	sprintf@f,f
  9678  03A0  1803               	skipnc
  9679  03A1  0AA1               	incf	sprintf@f+1,f
  9680                           
  9681                           ;doprnt.c: 615: if(*f == '*') {
  9682  03A2  0821               	movf	sprintf@f+1,w
  9683  03A3  00FF               	movwf	127
  9684  03A4  0820               	movf	sprintf@f,w
  9685  03A5  0084               	movwf	4
  9686  03A6  120A  158A  2000  120A  118A  	fcall	stringtab
  9687  03AB  3A2A               	xorlw	42
  9688  03AC  1D03               	skipz
  9689  03AD  2BBE               	goto	l3106
  9690                           
  9691                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  9692  03AE  0835               	movf	sprintf@ap,w
  9693  03AF  0084               	movwf	4
  9694  03B0  1383               	bcf	3,7	;select IRP bank0
  9695  03B1  0800               	movf	0,w
  9696  03B2  00A8               	movwf	??_sprintf
  9697  03B3  0828               	movf	??_sprintf,w
  9698  03B4  00B8               	movwf	sprintf@prec
  9699  03B5  3002               	movlw	2
  9700  03B6  00A8               	movwf	??_sprintf
  9701  03B7  0828               	movf	??_sprintf,w
  9702  03B8  07B5               	addwf	sprintf@ap,f
  9703                           
  9704                           ;doprnt.c: 617: f++;
  9705  03B9  3001               	movlw	1
  9706  03BA  07A0               	addwf	sprintf@f,f
  9707  03BB  1803               	skipnc
  9708  03BC  0AA1               	incf	sprintf@f+1,f
  9709                           
  9710                           ;doprnt.c: 618: } else
  9711  03BD  2C8D               	goto	l3164
  9712  03BE                     l3106:	
  9713                           
  9714                           ;doprnt.c: 620: {
  9715                           ;doprnt.c: 621: prec = 0;
  9716  03BE  01B8               	clrf	sprintf@prec
  9717  03BF                     l538:	
  9718                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  9719                           
  9720  03BF  0821               	movf	sprintf@f+1,w
  9721  03C0  00FF               	movwf	127
  9722  03C1  0820               	movf	sprintf@f,w
  9723  03C2  0084               	movwf	4
  9724  03C3  120A  158A  2000  120A  118A  	fcall	stringtab
  9725  03C8  160A  158A  2140  120A  118A  	fcall	_isdigit
  9726  03CD  1C03               	btfss	3,0
  9727  03CE  2C8D               	goto	l3164
  9728                           
  9729                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  9730  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  9731  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  9732  03D1  0821               	movf	sprintf@f+1,w
  9733  03D2  00FF               	movwf	127
  9734  03D3  0820               	movf	sprintf@f,w
  9735  03D4  0084               	movwf	4
  9736  03D5  120A  158A  2000  120A  118A  	fcall	stringtab
  9737  03DA  00A8               	movwf	??_sprintf
  9738  03DB  300A               	movlw	10
  9739  03DC  00A9               	movwf	??_sprintf+1
  9740  03DD  0829               	movf	??_sprintf+1,w
  9741  03DE  00F0               	movwf	___bmul@multiplicand
  9742  03DF  0838               	movf	sprintf@prec,w
  9743  03E0  160A  158A  214E  120A  118A  	fcall	___bmul
  9744  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  9745  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  9746  03E7  0728               	addwf	??_sprintf,w
  9747  03E8  3ED0               	addlw	-48
  9748  03E9  00AA               	movwf	??_sprintf+2
  9749  03EA  082A               	movf	??_sprintf+2,w
  9750  03EB  00B8               	movwf	sprintf@prec
  9751  03EC  3001               	movlw	1
  9752  03ED  07A0               	addwf	sprintf@f,f
  9753  03EE  1803               	skipnc
  9754  03EF  0AA1               	incf	sprintf@f+1,f
  9755  03F0  2BBF               	goto	l538
  9756  03F1                     l3112:	
  9757                           ;doprnt.c: 624: }
  9758                           ;doprnt.c: 625: } else {
  9759                           
  9760                           
  9761                           ;doprnt.c: 626: prec = 0;
  9762  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  9763  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  9764  03F3  01B8               	clrf	sprintf@prec
  9765                           
  9766                           ;doprnt.c: 630: }
  9767                           ;doprnt.c: 635: switch(c = *f++) {
  9768  03F4  2C8D               	goto	l3164
  9769  03F5                     l545:	
  9770                           ;doprnt.c: 689: case 'o':
  9771                           
  9772                           ;doprnt.c: 638: goto alldone;
  9773                           
  9774                           ;doprnt.c: 637: case 0:
  9775                           
  9776                           
  9777                           ;doprnt.c: 691: flag |= 0x40;
  9778  03F5  173D               	bsf	sprintf@flag,6
  9779                           
  9780                           ;doprnt.c: 698: case 'i':
  9781                           ;doprnt.c: 699: break;
  9782                           
  9783                           ;doprnt.c: 697: case 'd':
  9784                           
  9785                           ;doprnt.c: 693: break;
  9786  03F6  2CB9               	goto	l3166
  9787  03F7                     l549:	
  9788                           ;doprnt.c: 712: case 'X':
  9789                           
  9790                           
  9791                           ;doprnt.c: 714: flag |= 0x20;
  9792  03F7  16BD               	bsf	sprintf@flag,5
  9793  03F8                     l550:	
  9794                           ;doprnt.c: 718: case 'x':
  9795                           
  9796                           
  9797                           ;doprnt.c: 721: flag |= 0x80;
  9798  03F8  17BD               	bsf	sprintf@flag,7
  9799                           
  9800                           ;doprnt.c: 723: break;
  9801  03F9  2CB9               	goto	l3166
  9802  03FA                     l3114:	
  9803                           ;doprnt.c: 750: dostring:
  9804                           
  9805                           
  9806                           ;doprnt.c: 753: if(prec && prec < len)
  9807  03FA  0838               	movf	sprintf@prec,w
  9808  03FB  1903               	btfsc	3,2
  9809  03FC  2C0F               	goto	l3120
  9810  03FD  0838               	movf	sprintf@prec,w
  9811  03FE  00A8               	movwf	??_sprintf
  9812  03FF  01A9               	clrf	??_sprintf+1
  9813  0400  1BA8               	btfsc	??_sprintf,7
  9814  0401  03A9               	decf	??_sprintf+1,f
  9815  0402  0834               	movf	sprintf@len+1,w
  9816  0403  0229               	subwf	??_sprintf+1,w
  9817  0404  1D03               	skipz
  9818  0405  2C08               	goto	u3605
  9819  0406  0833               	movf	sprintf@len,w
  9820  0407  0228               	subwf	??_sprintf,w
  9821  0408                     u3605:	
  9822  0408  1803               	skipnc
  9823  0409  2C0F               	goto	l3120
  9824                           
  9825                           ;doprnt.c: 754: len = prec;
  9826  040A  0838               	movf	sprintf@prec,w
  9827  040B  00B3               	movwf	sprintf@len
  9828  040C  01B4               	clrf	sprintf@len+1
  9829  040D  1BB3               	btfsc	sprintf@len,7
  9830  040E  03B4               	decf	sprintf@len+1,f
  9831  040F                     l3120:	
  9832                           
  9833                           ;doprnt.c: 757: if(width > len)
  9834  040F  083A               	movf	sprintf@width+1,w
  9835  0410  0234               	subwf	sprintf@len+1,w
  9836  0411  1D03               	skipz
  9837  0412  2C15               	goto	u3615
  9838  0413  0839               	movf	sprintf@width,w
  9839  0414  0233               	subwf	sprintf@len,w
  9840  0415                     u3615:	
  9841  0415  1803               	skipnc
  9842  0416  2C1E               	goto	l3124
  9843                           
  9844                           ;doprnt.c: 758: width -= len;
  9845  0417  0833               	movf	sprintf@len,w
  9846  0418  02B9               	subwf	sprintf@width,f
  9847  0419  0834               	movf	sprintf@len+1,w
  9848  041A  1C03               	skipc
  9849  041B  03BA               	decf	sprintf@width+1,f
  9850  041C  02BA               	subwf	sprintf@width+1,f
  9851  041D  2C20               	goto	l3126
  9852  041E                     l3124:	
  9853                           
  9854                           ;doprnt.c: 759: else
  9855                           ;doprnt.c: 760: width = 0;
  9856  041E  01B9               	clrf	sprintf@width
  9857  041F  01BA               	clrf	sprintf@width+1
  9858  0420                     l3126:	
  9859                           
  9860                           ;doprnt.c: 762: if(!(flag & 0x08))
  9861  0420  1DBD               	btfss	sprintf@flag,3
  9862  0421  2C2E               	goto	l3134
  9863  0422  2C4D               	goto	l3142
  9864  0423                     l3130:	
  9865                           ;doprnt.c: 764: while(width--)
  9866                           
  9867                           
  9868                           ;doprnt.c: 765: ((*sp++ = (' ')));
  9869  0423  3020               	movlw	32
  9870  0424  00A8               	movwf	??_sprintf
  9871  0425  083C               	movf	sprintf@sp,w
  9872  0426  0084               	movwf	4
  9873  0427  0828               	movf	??_sprintf,w
  9874  0428  1783               	bsf	3,7	;select IRP bank2
  9875  0429  0080               	movwf	0
  9876  042A  3001               	movlw	1
  9877  042B  00A8               	movwf	??_sprintf
  9878  042C  0828               	movf	??_sprintf,w
  9879  042D  07BC               	addwf	sprintf@sp,f
  9880  042E                     l3134:	
  9881  042E  30FF               	movlw	255
  9882  042F  07B9               	addwf	sprintf@width,f
  9883  0430  1803               	skipnc
  9884  0431  0ABA               	incf	sprintf@width+1,f
  9885  0432  30FF               	movlw	255
  9886  0433  07BA               	addwf	sprintf@width+1,f
  9887  0434  0A39               	incf	sprintf@width,w
  9888  0435  1D03               	skipz
  9889  0436  2C23               	goto	l3130
  9890  0437  0A3A               	incf	sprintf@width+1,w
  9891  0438  1903               	btfsc	3,2
  9892  0439  2C4D               	goto	l3142
  9893  043A  2C23               	goto	l3130
  9894  043B                     l3136:	
  9895                           ;doprnt.c: 767: while(len--)
  9896                           
  9897                           
  9898                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  9899  043B  0832               	movf	sprintf@cp,w
  9900  043C  0084               	movwf	4
  9901  043D  1383               	bcf	3,7	;select IRP bank0
  9902  043E  0800               	movf	0,w
  9903  043F  00A8               	movwf	??_sprintf
  9904  0440  083C               	movf	sprintf@sp,w
  9905  0441  0084               	movwf	4
  9906  0442  0828               	movf	??_sprintf,w
  9907  0443  1783               	bsf	3,7	;select IRP bank2
  9908  0444  0080               	movwf	0
  9909  0445  3001               	movlw	1
  9910  0446  00A8               	movwf	??_sprintf
  9911  0447  0828               	movf	??_sprintf,w
  9912  0448  07B2               	addwf	sprintf@cp,f
  9913  0449  3001               	movlw	1
  9914  044A  00A8               	movwf	??_sprintf
  9915  044B  0828               	movf	??_sprintf,w
  9916  044C  07BC               	addwf	sprintf@sp,f
  9917  044D                     l3142:	
  9918  044D  3001               	movlw	1
  9919  044E  02B3               	subwf	sprintf@len,f
  9920  044F  3000               	movlw	0
  9921  0450  1C03               	skipc
  9922  0451  03B4               	decf	sprintf@len+1,f
  9923  0452  02B4               	subwf	sprintf@len+1,f
  9924  0453  0A33               	incf	sprintf@len,w
  9925  0454  1D03               	skipz
  9926  0455  2C3B               	goto	l3136
  9927  0456  0A34               	incf	sprintf@len+1,w
  9928  0457  1D03               	btfss	3,2
  9929  0458  2C3B               	goto	l3136
  9930                           
  9931                           ;doprnt.c: 770: if(flag & 0x08)
  9932  0459  19BD               	btfsc	sprintf@flag,3
  9933  045A  2C67               	goto	l3150
  9934  045B  2ACA               	goto	l3374
  9935  045C                     l3146:	
  9936                           ;doprnt.c: 771: while(width--)
  9937                           
  9938                           
  9939                           ;doprnt.c: 772: ((*sp++ = (' ')));
  9940  045C  3020               	movlw	32
  9941  045D  00A8               	movwf	??_sprintf
  9942  045E  083C               	movf	sprintf@sp,w
  9943  045F  0084               	movwf	4
  9944  0460  0828               	movf	??_sprintf,w
  9945  0461  1783               	bsf	3,7	;select IRP bank2
  9946  0462  0080               	movwf	0
  9947  0463  3001               	movlw	1
  9948  0464  00A8               	movwf	??_sprintf
  9949  0465  0828               	movf	??_sprintf,w
  9950  0466  07BC               	addwf	sprintf@sp,f
  9951  0467                     l3150:	
  9952  0467  30FF               	movlw	255
  9953  0468  07B9               	addwf	sprintf@width,f
  9954  0469  1803               	skipnc
  9955  046A  0ABA               	incf	sprintf@width+1,f
  9956  046B  30FF               	movlw	255
  9957  046C  07BA               	addwf	sprintf@width+1,f
  9958  046D  0A39               	incf	sprintf@width,w
  9959  046E  1D03               	skipz
  9960  046F  2C5C               	goto	l3146
  9961  0470  0A3A               	incf	sprintf@width+1,w
  9962  0471  1903               	btfsc	3,2
  9963  0472  2ACA               	goto	l3374
  9964  0473  2C5C               	goto	l3146
  9965  0474                     l3152:	
  9966                           ;doprnt.c: 784: case 'c':
  9967                           
  9968                           ;doprnt.c: 774: continue;
  9969                           
  9970                           
  9971                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  9972  0474  0835               	movf	sprintf@ap,w
  9973  0475  0084               	movwf	4
  9974  0476  1383               	bcf	3,7	;select IRP bank0
  9975  0477  0800               	movf	0,w
  9976  0478  00A8               	movwf	??_sprintf
  9977  0479  0828               	movf	??_sprintf,w
  9978  047A  00BB               	movwf	sprintf@c
  9979  047B  3002               	movlw	2
  9980  047C  00A8               	movwf	??_sprintf
  9981  047D  0828               	movf	??_sprintf,w
  9982  047E  07B5               	addwf	sprintf@ap,f
  9983  047F                     l3156:	
  9984                           ;doprnt.c: 802: default:
  9985                           
  9986                           
  9987                           ;doprnt.c: 805: cp = (char *)&c;
  9988  047F  303B               	movlw	(low (sprintf@c| 0))& (0+255)
  9989  0480  00A8               	movwf	??_sprintf
  9990  0481  0828               	movf	??_sprintf,w
  9991  0482  00B2               	movwf	sprintf@cp
  9992                           
  9993                           ;doprnt.c: 806: len = 1;
  9994  0483  3001               	movlw	1
  9995  0484  00B3               	movwf	sprintf@len
  9996  0485  3000               	movlw	0
  9997  0486  00B4               	movwf	sprintf@len+1
  9998                           
  9999                           ;doprnt.c: 807: goto dostring;
 10000  0487  2BFA               	goto	l3114
 10001  0488                     l3160:	
 10002                           ;doprnt.c: 817: case 'u':
 10003                           
 10004                           
 10005                           ;doprnt.c: 818: flag |= 0xC0;
 10006  0488  30C0               	movlw	192
 10007  0489  04BD               	iorwf	sprintf@flag,f
 10008  048A  3000               	movlw	0
 10009  048B  04BE               	iorwf	sprintf@flag+1,f
 10010                           
 10011                           ;doprnt.c: 822: }
 10012                           
 10013                           ;doprnt.c: 819: break;
 10014  048C  2CB9               	goto	l3166
 10015  048D                     l3164:	
 10016  048D  1283               	bcf	3,5	;RP0=0, select bank0
 10017  048E  1303               	bcf	3,6	;RP1=0, select bank0
 10018  048F  0821               	movf	sprintf@f+1,w
 10019  0490  00A9               	movwf	??_sprintf+1
 10020  0491  0820               	movf	sprintf@f,w
 10021  0492  00A8               	movwf	??_sprintf
 10022  0493  0AA0               	incf	sprintf@f,f
 10023  0494  1903               	skipnz
 10024  0495  0AA1               	incf	sprintf@f+1,f
 10025  0496  0829               	movf	??_sprintf+1,w
 10026  0497  00FF               	movwf	127
 10027  0498  0828               	movf	??_sprintf,w
 10028  0499  0084               	movwf	4
 10029  049A  120A  158A  2000  120A  118A  	fcall	stringtab
 10030  049F  00BB               	movwf	sprintf@c
 10031                           
 10032                           ; Switch size 1, requested type "space"
 10033                           ; Number of cases is 8, Range of values is 0 to 120
 10034                           ; switch strategies available:
 10035                           ; Name         Instructions Cycles
 10036                           ; simple_byte           25    13 (average)
 10037                           ; jumptable            260     6 (fixed)
 10038                           ;	Chosen strategy is simple_byte
 10039  04A0  3A00               	xorlw	0	; case 0
 10040  04A1  1903               	skipnz
 10041  04A2  2FBE               	goto	l3376
 10042  04A3  3A58               	xorlw	88	; case 88
 10043  04A4  1903               	skipnz
 10044  04A5  2BF7               	goto	l549
 10045  04A6  3A3B               	xorlw	59	; case 99
 10046  04A7  1903               	skipnz
 10047  04A8  2C74               	goto	l3152
 10048  04A9  3A07               	xorlw	7	; case 100
 10049  04AA  1903               	skipnz
 10050  04AB  2CB9               	goto	l3166
 10051  04AC  3A0D               	xorlw	13	; case 105
 10052  04AD  1903               	skipnz
 10053  04AE  2CB9               	goto	l3166
 10054  04AF  3A06               	xorlw	6	; case 111
 10055  04B0  1903               	skipnz
 10056  04B1  2BF5               	goto	l545
 10057  04B2  3A1A               	xorlw	26	; case 117
 10058  04B3  1903               	skipnz
 10059  04B4  2C88               	goto	l3160
 10060  04B5  3A0D               	xorlw	13	; case 120
 10061  04B6  1903               	skipnz
 10062  04B7  2BF8               	goto	l550
 10063  04B8  2C7F               	goto	l3156
 10064  04B9                     l3166:	
 10065                           
 10066                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 10067  04B9  30C0               	movlw	192
 10068  04BA  053D               	andwf	sprintf@flag,w
 10069  04BB  00A8               	movwf	??_sprintf
 10070  04BC  3000               	movlw	0
 10071  04BD  053E               	andwf	sprintf@flag+1,w
 10072  04BE  00A9               	movwf	??_sprintf+1
 10073  04BF  0828               	movf	??_sprintf,w
 10074  04C0  0429               	iorwf	??_sprintf+1,w
 10075  04C1  1D03               	btfss	3,2
 10076  04C2  2CDB               	goto	l3178
 10077                           
 10078                           ;doprnt.c: 1253: {
 10079                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10080  04C3  0835               	movf	sprintf@ap,w
 10081  04C4  0084               	movwf	4
 10082  04C5  1383               	bcf	3,7	;select IRP bank0
 10083  04C6  0800               	movf	0,w
 10084  04C7  00B6               	movwf	sprintf@val
 10085  04C8  0A84               	incf	4,f
 10086  04C9  0800               	movf	0,w
 10087  04CA  00B7               	movwf	sprintf@val+1
 10088  04CB  3002               	movlw	2
 10089  04CC  00A8               	movwf	??_sprintf
 10090  04CD  0828               	movf	??_sprintf,w
 10091  04CE  07B5               	addwf	sprintf@ap,f
 10092                           
 10093                           ;doprnt.c: 1261: if((int)val < 0) {
 10094  04CF  1FB7               	btfss	sprintf@val+1,7
 10095  04D0  2CE7               	goto	l3182
 10096                           
 10097                           ;doprnt.c: 1262: flag |= 0x03;
 10098  04D1  3003               	movlw	3
 10099  04D2  04BD               	iorwf	sprintf@flag,f
 10100  04D3  3000               	movlw	0
 10101  04D4  04BE               	iorwf	sprintf@flag+1,f
 10102                           
 10103                           ;doprnt.c: 1263: val = -val;
 10104  04D5  09B6               	comf	sprintf@val,f
 10105  04D6  09B7               	comf	sprintf@val+1,f
 10106  04D7  0AB6               	incf	sprintf@val,f
 10107  04D8  1903               	skipnz
 10108  04D9  0AB7               	incf	sprintf@val+1,f
 10109                           
 10110                           ;doprnt.c: 1264: }
 10111                           ;doprnt.c: 1266: }
 10112  04DA  2CE7               	goto	l3182
 10113  04DB                     l3178:	
 10114                           
 10115                           ;doprnt.c: 1268: else
 10116                           ;doprnt.c: 1273: {
 10117                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10118  04DB  0835               	movf	sprintf@ap,w
 10119  04DC  0084               	movwf	4
 10120  04DD  1383               	bcf	3,7	;select IRP bank0
 10121  04DE  0800               	movf	0,w
 10122  04DF  00B6               	movwf	sprintf@val
 10123  04E0  0A84               	incf	4,f
 10124  04E1  0800               	movf	0,w
 10125  04E2  00B7               	movwf	sprintf@val+1
 10126  04E3  3002               	movlw	2
 10127  04E4  00A8               	movwf	??_sprintf
 10128  04E5  0828               	movf	??_sprintf,w
 10129  04E6  07B5               	addwf	sprintf@ap,f
 10130  04E7                     l3182:	
 10131                           
 10132                           ;doprnt.c: 1287: }
 10133                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 10134  04E7  0838               	movf	sprintf@prec,w
 10135  04E8  1D03               	btfss	3,2
 10136  04E9  2D6B               	goto	l3220
 10137  04EA  0836               	movf	sprintf@val,w
 10138  04EB  0437               	iorwf	sprintf@val+1,w
 10139  04EC  1D03               	btfss	3,2
 10140  04ED  2D6B               	goto	l3220
 10141                           
 10142                           ;doprnt.c: 1291: prec++;
 10143  04EE  3001               	movlw	1
 10144  04EF  00A8               	movwf	??_sprintf
 10145  04F0  0828               	movf	??_sprintf,w
 10146  04F1  07B8               	addwf	sprintf@prec,f
 10147                           
 10148                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 10149  04F2  2D6B               	goto	l3220
 10150  04F3                     l575:	
 10151                           ;doprnt.c: 1299: case 0x00:
 10152                           
 10153                           
 10154                           ;doprnt.c: 1302: case 0xC0:
 10155                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10156  04F3  01BB               	clrf	sprintf@c
 10157  04F4  0ABB               	incf	sprintf@c,f
 10158  04F5                     L28:	
 10159  04F5  3005               	movlw	5
 10160  04F6  063B               	xorwf	sprintf@c,w
 10161  04F7  1903               	btfsc	3,2
 10162  04F8  2D7A               	goto	l3222
 10163                           
 10164                           ;doprnt.c: 1306: if(val < dpowers[c])
 10165  04F9  083B               	movf	sprintf@c,w
 10166  04FA  00A8               	movwf	??_sprintf
 10167  04FB  0728               	addwf	??_sprintf,w
 10168  04FC  3E1E               	addlw	low (_dpowers| (0+32768))
 10169  04FD  0084               	movwf	4
 10170  04FE  3088               	movlw	high (_dpowers| (0+32768))
 10171  04FF  1803               	skipnc
 10172  0500  3E01               	addlw	1
 10173  0501  00FF               	movwf	127
 10174  0502  120A  158A  2000  120A  118A  	fcall	stringtab
 10175  0507  00A9               	movwf	??_sprintf+1
 10176  0508  120A  158A  2000  120A  118A  	fcall	stringtab
 10177  050D  00AA               	movwf	??_sprintf+2
 10178  050E  082A               	movf	??_sprintf+2,w
 10179  050F  0237               	subwf	sprintf@val+1,w
 10180  0510  1D03               	skipz
 10181  0511  2D14               	goto	u3725
 10182  0512  0829               	movf	??_sprintf+1,w
 10183  0513  0236               	subwf	sprintf@val,w
 10184  0514                     u3725:	
 10185  0514  1C03               	btfss	3,0
 10186  0515  2D7A               	goto	l3222
 10187                           
 10188                           ;doprnt.c: 1307: break;
 10189  0516  3001               	movlw	1
 10190  0517  00A8               	movwf	??_sprintf
 10191  0518  0828               	movf	??_sprintf,w
 10192  0519  07BB               	addwf	sprintf@c,f
 10193  051A  2CF5               	goto	L28
 10194  051B                     l580:	
 10195                           ;doprnt.c: 1314: case 0x80:
 10196                           
 10197                           ;doprnt.c: 1309: break;
 10198                           
 10199                           
 10200                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10201  051B  01BB               	clrf	sprintf@c
 10202  051C  0ABB               	incf	sprintf@c,f
 10203  051D                     L29:	
 10204  051D  3004               	movlw	4
 10205  051E  063B               	xorwf	sprintf@c,w
 10206  051F  1903               	btfsc	3,2
 10207  0520  2D7A               	goto	l3222
 10208                           
 10209                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10210  0521  083B               	movf	sprintf@c,w
 10211  0522  00A8               	movwf	??_sprintf
 10212  0523  0728               	addwf	??_sprintf,w
 10213  0524  3E28               	addlw	low (_hexpowers| (0+32768))
 10214  0525  0084               	movwf	4
 10215  0526  3088               	movlw	high (_hexpowers| (0+32768))
 10216  0527  1803               	skipnc
 10217  0528  3E01               	addlw	1
 10218  0529  00FF               	movwf	127
 10219  052A  120A  158A  2000  120A  118A  	fcall	stringtab
 10220  052F  00A9               	movwf	??_sprintf+1
 10221  0530  120A  158A  2000  120A  118A  	fcall	stringtab
 10222  0535  00AA               	movwf	??_sprintf+2
 10223  0536  082A               	movf	??_sprintf+2,w
 10224  0537  0237               	subwf	sprintf@val+1,w
 10225  0538  1D03               	skipz
 10226  0539  2D3C               	goto	u3755
 10227  053A  0829               	movf	??_sprintf+1,w
 10228  053B  0236               	subwf	sprintf@val,w
 10229  053C                     u3755:	
 10230  053C  1C03               	btfss	3,0
 10231  053D  2D7A               	goto	l3222
 10232                           
 10233                           ;doprnt.c: 1318: break;
 10234  053E  3001               	movlw	1
 10235  053F  00A8               	movwf	??_sprintf
 10236  0540  0828               	movf	??_sprintf,w
 10237  0541  07BB               	addwf	sprintf@c,f
 10238  0542  2D1D               	goto	L29
 10239  0543                     l584:	
 10240                           ;doprnt.c: 1326: case 0x40:
 10241                           
 10242                           ;doprnt.c: 1320: break;
 10243                           
 10244                           
 10245                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 10246  0543  01BB               	clrf	sprintf@c
 10247  0544  0ABB               	incf	sprintf@c,f
 10248  0545                     L30:	
 10249  0545  3006               	movlw	6
 10250  0546  063B               	xorwf	sprintf@c,w
 10251  0547  1903               	btfsc	3,2
 10252  0548  2D7A               	goto	l3222
 10253                           
 10254                           ;doprnt.c: 1329: if(val < octpowers[c])
 10255  0549  083B               	movf	sprintf@c,w
 10256  054A  00A8               	movwf	??_sprintf
 10257  054B  0728               	addwf	??_sprintf,w
 10258  054C  3E12               	addlw	low (_octpowers| (0+32768))
 10259  054D  0084               	movwf	4
 10260  054E  3088               	movlw	high (_octpowers| (0+32768))
 10261  054F  1803               	skipnc
 10262  0550  3E01               	addlw	1
 10263  0551  00FF               	movwf	127
 10264  0552  120A  158A  2000  120A  118A  	fcall	stringtab
 10265  0557  00A9               	movwf	??_sprintf+1
 10266  0558  120A  158A  2000  120A  118A  	fcall	stringtab
 10267  055D  00AA               	movwf	??_sprintf+2
 10268  055E  082A               	movf	??_sprintf+2,w
 10269  055F  0237               	subwf	sprintf@val+1,w
 10270  0560  1D03               	skipz
 10271  0561  2D64               	goto	u3785
 10272  0562  0829               	movf	??_sprintf+1,w
 10273  0563  0236               	subwf	sprintf@val,w
 10274  0564                     u3785:	
 10275  0564  1C03               	btfss	3,0
 10276  0565  2D7A               	goto	l3222
 10277                           
 10278                           ;doprnt.c: 1330: break;
 10279  0566  3001               	movlw	1
 10280  0567  00A8               	movwf	??_sprintf
 10281  0568  0828               	movf	??_sprintf,w
 10282  0569  07BB               	addwf	sprintf@c,f
 10283  056A  2D45               	goto	L30
 10284  056B                     l3220:	
 10285                           ;doprnt.c: 1336: }
 10286                           
 10287                           ;doprnt.c: 1332: break;
 10288                           
 10289  056B  083D               	movf	sprintf@flag,w
 10290  056C  39C0               	andlw	192
 10291                           
 10292                           ; Switch size 1, requested type "space"
 10293                           ; Number of cases is 4, Range of values is 0 to 192
 10294                           ; switch strategies available:
 10295                           ; Name         Instructions Cycles
 10296                           ; simple_byte           13     7 (average)
 10297                           ; jumptable            260     6 (fixed)
 10298                           ;	Chosen strategy is simple_byte
 10299  056D  3A00               	xorlw	0	; case 0
 10300  056E  1903               	skipnz
 10301  056F  2CF3               	goto	l575
 10302  0570  3A40               	xorlw	64	; case 64
 10303  0571  1903               	skipnz
 10304  0572  2D43               	goto	l584
 10305  0573  3AC0               	xorlw	192	; case 128
 10306  0574  1903               	skipnz
 10307  0575  2D1B               	goto	l580
 10308  0576  3A40               	xorlw	64	; case 192
 10309  0577  1903               	skipnz
 10310  0578  2CF3               	goto	l575
 10311  0579  2D7A               	goto	l3222
 10312  057A                     l3222:	
 10313                           
 10314                           ;doprnt.c: 1339: if(c < prec)
 10315  057A  083B               	movf	sprintf@c,w
 10316  057B  3A80               	xorlw	128
 10317  057C  00A8               	movwf	??_sprintf
 10318  057D  0838               	movf	sprintf@prec,w
 10319  057E  3A80               	xorlw	128
 10320  057F  02A8               	subwf	??_sprintf,f
 10321  0580  1803               	skipnc
 10322  0581  2D87               	goto	l3226
 10323                           
 10324                           ;doprnt.c: 1340: c = prec;
 10325  0582  0838               	movf	sprintf@prec,w
 10326  0583  00A8               	movwf	??_sprintf
 10327  0584  0828               	movf	??_sprintf,w
 10328  0585  00BB               	movwf	sprintf@c
 10329  0586  2D93               	goto	l3230
 10330  0587                     l3226:	
 10331                           
 10332                           ;doprnt.c: 1341: else if(prec < c)
 10333  0587  0838               	movf	sprintf@prec,w
 10334  0588  3A80               	xorlw	128
 10335  0589  00A8               	movwf	??_sprintf
 10336  058A  083B               	movf	sprintf@c,w
 10337  058B  3A80               	xorlw	128
 10338  058C  02A8               	subwf	??_sprintf,f
 10339  058D  1803               	skipnc
 10340  058E  2D93               	goto	l3230
 10341                           
 10342                           ;doprnt.c: 1342: prec = c;
 10343  058F  083B               	movf	sprintf@c,w
 10344  0590  00A8               	movwf	??_sprintf
 10345  0591  0828               	movf	??_sprintf,w
 10346  0592  00B8               	movwf	sprintf@prec
 10347  0593                     l3230:	
 10348                           
 10349                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10350  0593  0839               	movf	sprintf@width,w
 10351  0594  043A               	iorwf	sprintf@width+1,w
 10352  0595  1903               	btfsc	3,2
 10353  0596  2DA7               	goto	l3236
 10354  0597  3003               	movlw	3
 10355  0598  053D               	andwf	sprintf@flag,w
 10356  0599  00A8               	movwf	??_sprintf
 10357  059A  3000               	movlw	0
 10358  059B  053E               	andwf	sprintf@flag+1,w
 10359  059C  00A9               	movwf	??_sprintf+1
 10360  059D  0828               	movf	??_sprintf,w
 10361  059E  0429               	iorwf	??_sprintf+1,w
 10362  059F  1903               	btfsc	3,2
 10363  05A0  2DA7               	goto	l3236
 10364                           
 10365                           ;doprnt.c: 1346: width--;
 10366  05A1  30FF               	movlw	255
 10367  05A2  07B9               	addwf	sprintf@width,f
 10368  05A3  1803               	skipnc
 10369  05A4  0ABA               	incf	sprintf@width+1,f
 10370  05A5  30FF               	movlw	255
 10371  05A6  07BA               	addwf	sprintf@width+1,f
 10372  05A7                     l3236:	
 10373                           
 10374                           ;doprnt.c: 1348: if(flag & 0x4000) {
 10375  05A7  1F3E               	btfss	sprintf@flag+1,6
 10376  05A8  2DCC               	goto	l3244
 10377                           
 10378                           ;doprnt.c: 1349: if(width > prec)
 10379  05A9  0838               	movf	sprintf@prec,w
 10380  05AA  00A8               	movwf	??_sprintf
 10381  05AB  01A9               	clrf	??_sprintf+1
 10382  05AC  1BA8               	btfsc	??_sprintf,7
 10383  05AD  03A9               	decf	??_sprintf+1,f
 10384  05AE  0829               	movf	??_sprintf+1,w
 10385  05AF  3A80               	xorlw	128
 10386  05B0  00AA               	movwf	??_sprintf+2
 10387  05B1  083A               	movf	sprintf@width+1,w
 10388  05B2  3A80               	xorlw	128
 10389  05B3  022A               	subwf	??_sprintf+2,w
 10390  05B4  1D03               	skipz
 10391  05B5  2DB8               	goto	u3855
 10392  05B6  0839               	movf	sprintf@width,w
 10393  05B7  0228               	subwf	??_sprintf,w
 10394  05B8                     u3855:	
 10395  05B8  1803               	skipnc
 10396  05B9  2DC8               	goto	l3242
 10397                           
 10398                           ;doprnt.c: 1350: width -= prec;
 10399  05BA  1283               	bcf	3,5	;RP0=0, select bank0
 10400  05BB  1303               	bcf	3,6	;RP1=0, select bank0
 10401  05BC  0838               	movf	sprintf@prec,w
 10402  05BD  00A8               	movwf	??_sprintf
 10403  05BE  01A9               	clrf	??_sprintf+1
 10404  05BF  1BA8               	btfsc	??_sprintf,7
 10405  05C0  03A9               	decf	??_sprintf+1,f
 10406  05C1  0828               	movf	??_sprintf,w
 10407  05C2  02B9               	subwf	sprintf@width,f
 10408  05C3  0829               	movf	??_sprintf+1,w
 10409  05C4  1C03               	skipc
 10410  05C5  03BA               	decf	sprintf@width+1,f
 10411  05C6  02BA               	subwf	sprintf@width+1,f
 10412  05C7  2DCC               	goto	l3244
 10413  05C8                     l3242:	
 10414                           
 10415                           ;doprnt.c: 1351: else
 10416                           ;doprnt.c: 1352: width = 0;
 10417  05C8  1283               	bcf	3,5	;RP0=0, select bank0
 10418  05C9  1303               	bcf	3,6	;RP1=0, select bank0
 10419  05CA  01B9               	clrf	sprintf@width
 10420  05CB  01BA               	clrf	sprintf@width+1
 10421  05CC                     l3244:	
 10422                           
 10423                           ;doprnt.c: 1353: }
 10424                           ;doprnt.c: 1357: if((flag & (
 10425                           ;doprnt.c: 1359: 0x04|
 10426                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
 10427  05CC  30C4               	movlw	196
 10428  05CD  053D               	andwf	sprintf@flag,w
 10429  05CE  00A8               	movwf	??_sprintf
 10430  05CF  3008               	movlw	8
 10431  05D0  053E               	andwf	sprintf@flag+1,w
 10432  05D1  00A9               	movwf	??_sprintf+1
 10433  05D2  3040               	movlw	64
 10434  05D3  0628               	xorwf	??_sprintf,w
 10435  05D4  3008               	movlw	8
 10436  05D5  1903               	skipnz
 10437  05D6  0629               	xorwf	??_sprintf+1,w
 10438  05D7  1D03               	btfss	3,2
 10439  05D8  2DDF               	goto	l3250
 10440                           
 10441                           ;doprnt.c: 1362: if(width)
 10442  05D9  0839               	movf	sprintf@width,w
 10443  05DA  043A               	iorwf	sprintf@width+1,w
 10444  05DB  1903               	btfsc	3,2
 10445  05DC  2E04               	goto	l3258
 10446                           
 10447                           ;doprnt.c: 1363: width--;
 10448  05DD  30FF               	movlw	255
 10449  05DE  2DFA               	goto	L22
 10450  05DF                     l3250:	
 10451                           ;doprnt.c: 1364: } else
 10452                           
 10453                           
 10454                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10455  05DF  30C0               	movlw	192
 10456  05E0  053D               	andwf	sprintf@flag,w
 10457  05E1  00A8               	movwf	??_sprintf
 10458  05E2  3008               	movlw	8
 10459  05E3  053E               	andwf	sprintf@flag+1,w
 10460  05E4  00A9               	movwf	??_sprintf+1
 10461  05E5  3080               	movlw	128
 10462  05E6  0628               	xorwf	??_sprintf,w
 10463  05E7  3008               	movlw	8
 10464  05E8  1903               	skipnz
 10465  05E9  0629               	xorwf	??_sprintf+1,w
 10466  05EA  1D03               	btfss	3,2
 10467  05EB  2E04               	goto	l3258
 10468                           
 10469                           ;doprnt.c: 1372: if(width > 2)
 10470  05EC  083A               	movf	sprintf@width+1,w
 10471  05ED  3A80               	xorlw	128
 10472  05EE  00FF               	movwf	127
 10473  05EF  3080               	movlw	128
 10474  05F0  027F               	subwf	127,w
 10475  05F1  1D03               	skipz
 10476  05F2  2DF5               	goto	u3895
 10477  05F3  3003               	movlw	3
 10478  05F4  0239               	subwf	sprintf@width,w
 10479  05F5                     u3895:	
 10480  05F5  1C03               	skipc
 10481  05F6  2E00               	goto	l3256
 10482                           
 10483                           ;doprnt.c: 1373: width -= 2;
 10484  05F7  30FE               	movlw	254
 10485  05F8  1283               	bcf	3,5	;RP0=0, select bank0
 10486  05F9  1303               	bcf	3,6	;RP1=0, select bank0
 10487  05FA                     L22:	
 10488  05FA  07B9               	addwf	sprintf@width,f
 10489  05FB  1803               	skipnc
 10490  05FC  0ABA               	incf	sprintf@width+1,f
 10491  05FD  30FF               	movlw	255
 10492  05FE  07BA               	addwf	sprintf@width+1,f
 10493  05FF  2E04               	goto	l3258
 10494  0600                     l3256:	
 10495                           
 10496                           ;doprnt.c: 1374: else
 10497                           ;doprnt.c: 1375: width = 0;
 10498  0600  1283               	bcf	3,5	;RP0=0, select bank0
 10499  0601  1303               	bcf	3,6	;RP1=0, select bank0
 10500  0602  01B9               	clrf	sprintf@width
 10501  0603  01BA               	clrf	sprintf@width+1
 10502  0604                     l3258:	
 10503                           
 10504                           ;doprnt.c: 1376: }
 10505                           ;doprnt.c: 1381: if(width > c)
 10506  0604  083B               	movf	sprintf@c,w
 10507  0605  00A8               	movwf	??_sprintf
 10508  0606  01A9               	clrf	??_sprintf+1
 10509  0607  1BA8               	btfsc	??_sprintf,7
 10510  0608  03A9               	decf	??_sprintf+1,f
 10511  0609  0829               	movf	??_sprintf+1,w
 10512  060A  3A80               	xorlw	128
 10513  060B  00AA               	movwf	??_sprintf+2
 10514  060C  083A               	movf	sprintf@width+1,w
 10515  060D  3A80               	xorlw	128
 10516  060E  022A               	subwf	??_sprintf+2,w
 10517  060F  1D03               	skipz
 10518  0610  2E13               	goto	u3905
 10519  0611  0839               	movf	sprintf@width,w
 10520  0612  0228               	subwf	??_sprintf,w
 10521  0613                     u3905:	
 10522  0613  1803               	skipnc
 10523  0614  2E23               	goto	l3262
 10524                           
 10525                           ;doprnt.c: 1382: width -= c;
 10526  0615  1283               	bcf	3,5	;RP0=0, select bank0
 10527  0616  1303               	bcf	3,6	;RP1=0, select bank0
 10528  0617  083B               	movf	sprintf@c,w
 10529  0618  00A8               	movwf	??_sprintf
 10530  0619  01A9               	clrf	??_sprintf+1
 10531  061A  1BA8               	btfsc	??_sprintf,7
 10532  061B  03A9               	decf	??_sprintf+1,f
 10533  061C  0828               	movf	??_sprintf,w
 10534  061D  02B9               	subwf	sprintf@width,f
 10535  061E  0829               	movf	??_sprintf+1,w
 10536  061F  1C03               	skipc
 10537  0620  03BA               	decf	sprintf@width+1,f
 10538  0621  02BA               	subwf	sprintf@width+1,f
 10539  0622  2E27               	goto	l3264
 10540  0623                     l3262:	
 10541                           
 10542                           ;doprnt.c: 1383: else
 10543                           ;doprnt.c: 1384: width = 0;
 10544  0623  1283               	bcf	3,5	;RP0=0, select bank0
 10545  0624  1303               	bcf	3,6	;RP1=0, select bank0
 10546  0625  01B9               	clrf	sprintf@width
 10547  0626  01BA               	clrf	sprintf@width+1
 10548  0627                     l3264:	
 10549                           
 10550                           ;doprnt.c: 1387: if(flag & 0x04) {
 10551  0627  1D3D               	btfss	sprintf@flag,2
 10552  0628  2E7E               	goto	l3300
 10553                           
 10554                           ;doprnt.c: 1392: if(flag & 0x03)
 10555  0629  3003               	movlw	3
 10556  062A  053D               	andwf	sprintf@flag,w
 10557  062B  00A8               	movwf	??_sprintf
 10558  062C  3000               	movlw	0
 10559  062D  053E               	andwf	sprintf@flag+1,w
 10560  062E  00A9               	movwf	??_sprintf+1
 10561  062F  0828               	movf	??_sprintf,w
 10562  0630  0429               	iorwf	??_sprintf+1,w
 10563  0631  1903               	btfsc	3,2
 10564  0632  2E35               	goto	l604
 10565                           
 10566                           ;doprnt.c: 1393: ((*sp++ = ('-')));
 10567  0633  302D               	movlw	45
 10568  0634  2E38               	goto	L35
 10569  0635                     l604:	
 10570                           
 10571                           ;doprnt.c: 1396: else
 10572                           ;doprnt.c: 1399: if(flag & 0x01)
 10573  0635  1C3D               	btfss	sprintf@flag,0
 10574  0636  2E3E               	goto	l3276
 10575                           
 10576                           ;doprnt.c: 1400: ((*sp++ = (' ')));
 10577  0637  3020               	movlw	32
 10578  0638                     L35:	
 10579  0638  00A8               	movwf	??_sprintf
 10580  0639  083C               	movf	sprintf@sp,w
 10581  063A  0084               	movwf	4
 10582  063B  0828               	movf	??_sprintf,w
 10583  063C  1783               	bsf	3,7	;select IRP bank2
 10584  063D  2E63               	goto	L31
 10585  063E                     l3276:	
 10586                           
 10587                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10588  063E  30C0               	movlw	192
 10589  063F  053D               	andwf	sprintf@flag,w
 10590  0640  00A8               	movwf	??_sprintf
 10591  0641  3008               	movlw	8
 10592  0642  053E               	andwf	sprintf@flag+1,w
 10593  0643  00A9               	movwf	??_sprintf+1
 10594  0644  3080               	movlw	128
 10595  0645  0628               	xorwf	??_sprintf,w
 10596  0646  3008               	movlw	8
 10597  0647  1903               	skipnz
 10598  0648  0629               	xorwf	??_sprintf+1,w
 10599  0649  1D03               	btfss	3,2
 10600  064A  2E68               	goto	l3292
 10601                           
 10602                           ;doprnt.c: 1404: ((*sp++ = ('0')));
 10603  064B  3030               	movlw	48
 10604  064C  00A8               	movwf	??_sprintf
 10605  064D  083C               	movf	sprintf@sp,w
 10606  064E  0084               	movwf	4
 10607  064F  0828               	movf	??_sprintf,w
 10608  0650  1783               	bsf	3,7	;select IRP bank2
 10609  0651  0080               	movwf	0
 10610  0652  3001               	movlw	1
 10611  0653  00A8               	movwf	??_sprintf
 10612  0654  0828               	movf	??_sprintf,w
 10613  0655  07BC               	addwf	sprintf@sp,f
 10614                           
 10615                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 10616  0656  1ABD               	btfsc	sprintf@flag,5
 10617  0657  2E5A               	goto	l3286
 10618  0658  3078               	movlw	120
 10619  0659  2E5B               	goto	L23
 10620  065A                     l3286:	
 10621  065A  3058               	movlw	88
 10622  065B                     L23:	
 10623  065B  00AB               	movwf	_sprintf$673
 10624  065C  3000               	movlw	0
 10625  065D  00AC               	movwf	_sprintf$673+1
 10626  065E  082B               	movf	_sprintf$673,w
 10627  065F  00A8               	movwf	??_sprintf
 10628  0660  083C               	movf	sprintf@sp,w
 10629  0661  0084               	movwf	4
 10630  0662  0828               	movf	??_sprintf,w
 10631  0663                     L31:	
 10632  0663  0080               	movwf	0
 10633  0664  3001               	movlw	1
 10634  0665  00A8               	movwf	??_sprintf
 10635  0666  0828               	movf	??_sprintf,w
 10636  0667  07BC               	addwf	sprintf@sp,f
 10637  0668                     l3292:	
 10638                           
 10639                           ;doprnt.c: 1412: }
 10640                           ;doprnt.c: 1415: if(width)
 10641  0668  0839               	movf	sprintf@width,w
 10642  0669  043A               	iorwf	sprintf@width+1,w
 10643  066A  1903               	btfsc	3,2
 10644  066B  2F82               	goto	l3364
 10645                           
 10646                           ;doprnt.c: 1417: ((*sp++ = ('0')));
 10647                           
 10648                           ;doprnt.c: 1416: do
 10649  066C  3030               	movlw	48
 10650  066D  00A8               	movwf	??_sprintf
 10651  066E  083C               	movf	sprintf@sp,w
 10652  066F  0084               	movwf	4
 10653  0670  0828               	movf	??_sprintf,w
 10654  0671  1783               	bsf	3,7	;select IRP bank2
 10655  0672  0080               	movwf	0
 10656  0673  3001               	movlw	1
 10657  0674  00A8               	movwf	??_sprintf
 10658  0675  0828               	movf	??_sprintf,w
 10659  0676  07BC               	addwf	sprintf@sp,f
 10660                           
 10661                           ;doprnt.c: 1418: while(--width);
 10662  0677  30FF               	movlw	255
 10663  0678  07B9               	addwf	sprintf@width,f
 10664  0679  1803               	skipnc
 10665  067A  0ABA               	incf	sprintf@width+1,f
 10666  067B  30FF               	movlw	255
 10667  067C  07BA               	addwf	sprintf@width+1,f
 10668  067D  2E68               	goto	l3292
 10669  067E                     l3300:	
 10670                           ;doprnt.c: 1420: } else
 10671                           
 10672                           
 10673                           ;doprnt.c: 1422: {
 10674                           ;doprnt.c: 1424: if(width
 10675                           ;doprnt.c: 1426: && !(flag & 0x08)
 10676                           ;doprnt.c: 1428: )
 10677  067E  0839               	movf	sprintf@width,w
 10678  067F  043A               	iorwf	sprintf@width+1,w
 10679  0680  1D03               	btfss	3,2
 10680  0681  19BD               	btfsc	sprintf@flag,3
 10681  0682  2E98               	goto	l3310
 10682  0683                     l3304:	
 10683                           ;doprnt.c: 1429: do
 10684                           
 10685                           
 10686                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 10687  0683  3020               	movlw	32
 10688  0684  00A8               	movwf	??_sprintf
 10689  0685  083C               	movf	sprintf@sp,w
 10690  0686  0084               	movwf	4
 10691  0687  0828               	movf	??_sprintf,w
 10692  0688  1783               	bsf	3,7	;select IRP bank2
 10693  0689  0080               	movwf	0
 10694  068A  3001               	movlw	1
 10695  068B  00A8               	movwf	??_sprintf
 10696  068C  0828               	movf	??_sprintf,w
 10697  068D  07BC               	addwf	sprintf@sp,f
 10698                           
 10699                           ;doprnt.c: 1431: while(--width);
 10700  068E  30FF               	movlw	255
 10701  068F  07B9               	addwf	sprintf@width,f
 10702  0690  1803               	skipnc
 10703  0691  0ABA               	incf	sprintf@width+1,f
 10704  0692  30FF               	movlw	255
 10705  0693  07BA               	addwf	sprintf@width+1,f
 10706  0694  0839               	movf	sprintf@width,w
 10707  0695  043A               	iorwf	sprintf@width+1,w
 10708  0696  1D03               	btfss	3,2
 10709  0697  2E83               	goto	l3304
 10710  0698                     l3310:	
 10711                           
 10712                           ;doprnt.c: 1438: if(flag & 0x03)
 10713  0698  3003               	movlw	3
 10714  0699  053D               	andwf	sprintf@flag,w
 10715  069A  00A8               	movwf	??_sprintf
 10716  069B  3000               	movlw	0
 10717  069C  053E               	andwf	sprintf@flag+1,w
 10718  069D  00A9               	movwf	??_sprintf+1
 10719  069E  0828               	movf	??_sprintf,w
 10720  069F  0429               	iorwf	??_sprintf+1,w
 10721  06A0  1903               	btfsc	3,2
 10722  06A1  2EA4               	goto	l620
 10723                           
 10724                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10725  06A2  302D               	movlw	45
 10726  06A3  2EA7               	goto	L32
 10727  06A4                     l620:	
 10728                           
 10729                           ;doprnt.c: 1443: else if(flag & 0x01)
 10730  06A4  1C3D               	btfss	sprintf@flag,0
 10731  06A5  2EB1               	goto	l3320
 10732                           
 10733                           ;doprnt.c: 1444: ((*sp++ = (' ')));
 10734  06A6  3020               	movlw	32
 10735  06A7                     L32:	
 10736  06A7  00A8               	movwf	??_sprintf
 10737  06A8  083C               	movf	sprintf@sp,w
 10738  06A9  0084               	movwf	4
 10739  06AA  0828               	movf	??_sprintf,w
 10740  06AB  1783               	bsf	3,7	;select IRP bank2
 10741  06AC  0080               	movwf	0
 10742  06AD  3001               	movlw	1
 10743  06AE  00A8               	movwf	??_sprintf
 10744  06AF  0828               	movf	??_sprintf,w
 10745  06B0  07BC               	addwf	sprintf@sp,f
 10746  06B1                     l3320:	
 10747                           
 10748                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 10749  06B1  30C0               	movlw	192
 10750  06B2  053D               	andwf	sprintf@flag,w
 10751  06B3  00A8               	movwf	??_sprintf
 10752  06B4  3008               	movlw	8
 10753  06B5  053E               	andwf	sprintf@flag+1,w
 10754  06B6  00A9               	movwf	??_sprintf+1
 10755  06B7  3040               	movlw	64
 10756  06B8  0628               	xorwf	??_sprintf,w
 10757  06B9  3008               	movlw	8
 10758  06BA  1903               	skipnz
 10759  06BB  0629               	xorwf	??_sprintf+1,w
 10760  06BC  1D03               	btfss	3,2
 10761  06BD  2EC0               	goto	l3326
 10762                           
 10763                           ;doprnt.c: 1449: ((*sp++ = ('0')));
 10764  06BE  3030               	movlw	48
 10765  06BF  2F78               	goto	L36
 10766  06C0                     l3326:	
 10767                           
 10768                           ;doprnt.c: 1450: else
 10769                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10770  06C0  30C0               	movlw	192
 10771  06C1  053D               	andwf	sprintf@flag,w
 10772  06C2  00A8               	movwf	??_sprintf
 10773  06C3  3008               	movlw	8
 10774  06C4  053E               	andwf	sprintf@flag+1,w
 10775  06C5  00A9               	movwf	??_sprintf+1
 10776  06C6  3080               	movlw	128
 10777  06C7  0628               	xorwf	??_sprintf,w
 10778  06C8  3008               	movlw	8
 10779  06C9  1903               	skipnz
 10780  06CA  0629               	xorwf	??_sprintf+1,w
 10781  06CB  1D03               	btfss	3,2
 10782  06CC  2F82               	goto	l3364
 10783                           
 10784                           ;doprnt.c: 1458: ((*sp++ = ('0')));
 10785  06CD  3030               	movlw	48
 10786  06CE  00A8               	movwf	??_sprintf
 10787  06CF  083C               	movf	sprintf@sp,w
 10788  06D0  0084               	movwf	4
 10789  06D1  0828               	movf	??_sprintf,w
 10790  06D2  1783               	bsf	3,7	;select IRP bank2
 10791  06D3  0080               	movwf	0
 10792  06D4  3001               	movlw	1
 10793  06D5  00A8               	movwf	??_sprintf
 10794  06D6  0828               	movf	??_sprintf,w
 10795  06D7  07BC               	addwf	sprintf@sp,f
 10796                           
 10797                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 10798  06D8  1ABD               	btfsc	sprintf@flag,5
 10799  06D9  2EDC               	goto	l3336
 10800  06DA  3078               	movlw	120
 10801  06DB  2EDD               	goto	L24
 10802  06DC                     l3336:	
 10803  06DC  3058               	movlw	88
 10804  06DD                     L24:	
 10805  06DD  00AD               	movwf	_sprintf$674
 10806  06DE  3000               	movlw	0
 10807  06DF  00AE               	movwf	_sprintf$674+1
 10808  06E0  082D               	movf	_sprintf$674,w
 10809  06E1  00A8               	movwf	??_sprintf
 10810  06E2  083C               	movf	sprintf@sp,w
 10811  06E3  0084               	movwf	4
 10812  06E4  0828               	movf	??_sprintf,w
 10813  06E5  2F7D               	goto	L33
 10814  06E6                     l3342:	
 10815                           ;doprnt.c: 1478: {
 10816                           ;doprnt.c: 1483: case 0x00:
 10817                           
 10818                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
 10819                           
 10820                           ;doprnt.c: 1466: }
 10821                           ;doprnt.c: 1469: }
 10822                           ;doprnt.c: 1474: while(prec--) {
 10823                           
 10824                           
 10825                           ;doprnt.c: 1486: case 0xC0:
 10826                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10827  06E6  300A               	movlw	10
 10828  06E7  00F8               	movwf	___lwmod@divisor
 10829  06E8  3000               	movlw	0
 10830  06E9  00F9               	movwf	___lwmod@divisor+1
 10831  06EA  0838               	movf	sprintf@prec,w
 10832  06EB  00A8               	movwf	??_sprintf
 10833  06EC  0728               	addwf	??_sprintf,w
 10834  06ED  3E1E               	addlw	low (_dpowers| (0+32768))
 10835  06EE  0084               	movwf	4
 10836  06EF  3088               	movlw	high (_dpowers| (0+32768))
 10837  06F0  1803               	skipnc
 10838  06F1  3E01               	addlw	1
 10839  06F2  00FF               	movwf	127
 10840  06F3  120A  158A  2000  120A  118A  	fcall	stringtab
 10841  06F8  00F0               	movwf	___lwdiv@divisor
 10842  06F9  120A  158A  2000  120A  118A  	fcall	stringtab
 10843  06FE  00F1               	movwf	___lwdiv@divisor+1
 10844  06FF  0837               	movf	sprintf@val+1,w
 10845  0700  00F3               	movwf	___lwdiv@dividend+1
 10846  0701  0836               	movf	sprintf@val,w
 10847  0702  00F2               	movwf	___lwdiv@dividend
 10848  0703  160A  158A  23E5  120A  118A  	fcall	___lwdiv
 10849  0708  0871               	movf	?___lwdiv+1,w
 10850  0709  00FB               	movwf	___lwmod@dividend+1
 10851  070A  0870               	movf	?___lwdiv,w
 10852  070B  00FA               	movwf	___lwmod@dividend
 10853  070C  160A  158A  234A  120A  118A  	fcall	___lwmod
 10854  0711  0878               	movf	?___lwmod,w
 10855  0712  2F71               	goto	L34
 10856  0713                     l3344:	
 10857                           ;doprnt.c: 1497: case 0x80:
 10858                           
 10859                           ;doprnt.c: 1491: break;
 10860                           
 10861                           
 10862                           ;doprnt.c: 1499: {
 10863                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10864  0713  0838               	movf	sprintf@prec,w
 10865  0714  00A8               	movwf	??_sprintf
 10866  0715  0728               	addwf	??_sprintf,w
 10867  0716  3E28               	addlw	low (_hexpowers| (0+32768))
 10868  0717  0084               	movwf	4
 10869  0718  3088               	movlw	high (_hexpowers| (0+32768))
 10870  0719  1803               	skipnc
 10871  071A  3E01               	addlw	1
 10872  071B  00FF               	movwf	127
 10873  071C  120A  158A  2000  120A  118A  	fcall	stringtab
 10874  0721  00F0               	movwf	___lwdiv@divisor
 10875  0722  120A  158A  2000  120A  118A  	fcall	stringtab
 10876  0727  00F1               	movwf	___lwdiv@divisor+1
 10877  0728  0837               	movf	sprintf@val+1,w
 10878  0729  00F3               	movwf	___lwdiv@dividend+1
 10879  072A  0836               	movf	sprintf@val,w
 10880  072B  00F2               	movwf	___lwdiv@dividend
 10881  072C  160A  158A  23E5  120A  118A  	fcall	___lwdiv
 10882  0731  0870               	movf	?___lwdiv,w
 10883  0732  390F               	andlw	15
 10884  0733  1283               	bcf	3,5	;RP0=0, select bank0
 10885  0734  1303               	bcf	3,6	;RP1=0, select bank0
 10886  0735  00A9               	movwf	??_sprintf+1
 10887  0736  0829               	movf	??_sprintf+1,w
 10888  0737  00B1               	movwf	sprintf@idx
 10889                           
 10890                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 10891  0738  1ABD               	btfsc	sprintf@flag,5
 10892  0739  2F3E               	goto	l3350
 10893  073A  30E0               	movlw	low (STR_65| (0+32768))
 10894  073B  00AF               	movwf	_sprintf$680
 10895  073C  308D               	movlw	high (STR_65| (0+32768))
 10896  073D  2F41               	goto	L26
 10897  073E                     l3350:	
 10898  073E  30CF               	movlw	low (STR_64| (0+32768))
 10899  073F  00AF               	movwf	_sprintf$680
 10900  0740  308D               	movlw	high (STR_64| (0+32768))
 10901  0741                     L26:	
 10902  0741  00B0               	movwf	_sprintf$680+1
 10903  0742  0831               	movf	sprintf@idx,w
 10904  0743  072F               	addwf	_sprintf$680,w
 10905  0744  0084               	movwf	4
 10906  0745  0830               	movf	_sprintf$680+1,w
 10907  0746  1803               	skipnc
 10908  0747  0A30               	incf	_sprintf$680+1,w
 10909  0748  00FF               	movwf	127
 10910  0749  120A  158A  2000  120A  118A  	fcall	stringtab
 10911  074E  00A8               	movwf	??_sprintf
 10912  074F  0828               	movf	??_sprintf,w
 10913  0750  2F76               	goto	L27
 10914  0751                     l3354:	
 10915                           ;doprnt.c: 1516: case 0x40:
 10916                           
 10917                           ;doprnt.c: 1508: }
 10918                           ;doprnt.c: 1510: break;
 10919                           
 10920                           
 10921                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
 10922  0751  0838               	movf	sprintf@prec,w
 10923  0752  00A8               	movwf	??_sprintf
 10924  0753  0728               	addwf	??_sprintf,w
 10925  0754  3E12               	addlw	low (_octpowers| (0+32768))
 10926  0755  0084               	movwf	4
 10927  0756  3088               	movlw	high (_octpowers| (0+32768))
 10928  0757  1803               	skipnc
 10929  0758  3E01               	addlw	1
 10930  0759  00FF               	movwf	127
 10931  075A  120A  158A  2000  120A  118A  	fcall	stringtab
 10932  075F  00F0               	movwf	___lwdiv@divisor
 10933  0760  120A  158A  2000  120A  118A  	fcall	stringtab
 10934  0765  00F1               	movwf	___lwdiv@divisor+1
 10935  0766  0837               	movf	sprintf@val+1,w
 10936  0767  00F3               	movwf	___lwdiv@dividend+1
 10937  0768  0836               	movf	sprintf@val,w
 10938  0769  00F2               	movwf	___lwdiv@dividend
 10939  076A  160A  158A  23E5  120A  118A  	fcall	___lwdiv
 10940  076F  0870               	movf	?___lwdiv,w
 10941  0770  3907               	andlw	7
 10942  0771                     L34:	
 10943  0771  3E30               	addlw	48
 10944  0772  1283               	bcf	3,5	;RP0=0, select bank0
 10945  0773  1303               	bcf	3,6	;RP1=0, select bank0
 10946  0774  00A9               	movwf	??_sprintf+1
 10947  0775  0829               	movf	??_sprintf+1,w
 10948  0776                     L27:	
 10949  0776  00BB               	movwf	sprintf@c
 10950  0777                     l3360:	
 10951                           ;doprnt.c: 1523: }
 10952                           
 10953                           ;doprnt.c: 1520: break;
 10954                           
 10955                           
 10956                           ;doprnt.c: 1524: ((*sp++ = (c)));
 10957  0777  083B               	movf	sprintf@c,w
 10958  0778                     L36:	
 10959  0778  00A8               	movwf	??_sprintf
 10960  0779  083C               	movf	sprintf@sp,w
 10961  077A  0084               	movwf	4
 10962  077B  0828               	movf	??_sprintf,w
 10963  077C  1783               	bsf	3,7	;select IRP bank2
 10964  077D                     L33:	
 10965  077D  0080               	movwf	0
 10966  077E  3001               	movlw	1
 10967  077F  00A8               	movwf	??_sprintf
 10968  0780  0828               	movf	??_sprintf,w
 10969  0781  07BC               	addwf	sprintf@sp,f
 10970  0782                     l3364:	
 10971  0782  30FF               	movlw	255
 10972  0783  00A8               	movwf	??_sprintf
 10973  0784  0828               	movf	??_sprintf,w
 10974  0785  07B8               	addwf	sprintf@prec,f
 10975  0786  0A38               	incf	sprintf@prec,w
 10976  0787  1903               	btfsc	3,2
 10977  0788  2F99               	goto	l642
 10978  0789  083D               	movf	sprintf@flag,w
 10979  078A  39C0               	andlw	192
 10980                           
 10981                           ; Switch size 1, requested type "space"
 10982                           ; Number of cases is 4, Range of values is 0 to 192
 10983                           ; switch strategies available:
 10984                           ; Name         Instructions Cycles
 10985                           ; simple_byte           13     7 (average)
 10986                           ; jumptable            260     6 (fixed)
 10987                           ;	Chosen strategy is simple_byte
 10988  078B  3A00               	xorlw	0	; case 0
 10989  078C  1903               	skipnz
 10990  078D  2EE6               	goto	l3342
 10991  078E  3A40               	xorlw	64	; case 64
 10992  078F  1903               	skipnz
 10993  0790  2F51               	goto	l3354
 10994  0791  3AC0               	xorlw	192	; case 128
 10995  0792  1903               	skipnz
 10996  0793  2F13               	goto	l3344
 10997  0794  3A40               	xorlw	64	; case 192
 10998  0795  1903               	skipnz
 10999  0796  2EE6               	goto	l3342
 11000  0797  2F77               	goto	l3360
 11001  0798  2F77               	goto	l3360
 11002  0799                     l642:	
 11003                           
 11004                           ;doprnt.c: 1525: }
 11005                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
 11006  0799  1DBD               	btfss	sprintf@flag,3
 11007  079A  2ACA               	goto	l3374
 11008  079B  083A               	movf	sprintf@width+1,w
 11009  079C  3A80               	xorlw	128
 11010  079D  00FF               	movwf	127
 11011  079E  3080               	movlw	128
 11012  079F  027F               	subwf	127,w
 11013  07A0  1D03               	skipz
 11014  07A1  2FA4               	goto	u4095
 11015  07A2  3001               	movlw	1
 11016  07A3  0239               	subwf	sprintf@width,w
 11017  07A4                     u4095:	
 11018  07A4  1C03               	skipc
 11019  07A5  2ACA               	goto	l3374
 11020  07A6                     l3368:	
 11021                           ;doprnt.c: 1529: do
 11022                           
 11023                           
 11024                           ;doprnt.c: 1530: ((*sp++ = (' ')));
 11025  07A6  3020               	movlw	32
 11026  07A7  1283               	bcf	3,5	;RP0=0, select bank0
 11027  07A8  1303               	bcf	3,6	;RP1=0, select bank0
 11028  07A9  00A8               	movwf	??_sprintf
 11029  07AA  083C               	movf	sprintf@sp,w
 11030  07AB  0084               	movwf	4
 11031  07AC  0828               	movf	??_sprintf,w
 11032  07AD  1783               	bsf	3,7	;select IRP bank2
 11033  07AE  0080               	movwf	0
 11034  07AF  3001               	movlw	1
 11035  07B0  00A8               	movwf	??_sprintf
 11036  07B1  0828               	movf	??_sprintf,w
 11037  07B2  07BC               	addwf	sprintf@sp,f
 11038                           
 11039                           ;doprnt.c: 1531: while(--width);
 11040  07B3  30FF               	movlw	255
 11041  07B4  07B9               	addwf	sprintf@width,f
 11042  07B5  1803               	skipnc
 11043  07B6  0ABA               	incf	sprintf@width+1,f
 11044  07B7  30FF               	movlw	255
 11045  07B8  07BA               	addwf	sprintf@width+1,f
 11046  07B9  0839               	movf	sprintf@width,w
 11047  07BA  043A               	iorwf	sprintf@width+1,w
 11048  07BB  1903               	btfsc	3,2
 11049  07BC  2ACA               	goto	l3374
 11050  07BD  2FA6               	goto	l3368
 11051  07BE                     l3376:	
 11052                           ;doprnt.c: 1533: }
 11053                           ;doprnt.c: 1535: alldone:
 11054                           
 11055                           
 11056                           ;doprnt.c: 1538: *sp = 0;
 11057  07BE  083C               	movf	sprintf@sp,w
 11058  07BF  0084               	movwf	4
 11059  07C0  1783               	bsf	3,7	;select IRP bank2
 11060  07C1  0180               	clrf	0
 11061  07C2  0008               	return
 11062  07C3                     __end_of_sprintf:	
 11063                           ;doprnt.c: 1540: return 0;
 11064                           ;	Return value of _sprintf is never used
 11065                           
 11066                           
 11067                           	psect	text31
 11068  1940                     __ptext31:	
 11069 ;; *************** function _isdigit *****************
 11070 ;; Defined at:
 11071 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
 11072 ;; Parameters:    Size  Location     Type
 11073 ;;  c               1    wreg     unsigned char 
 11074 ;; Auto vars:     Size  Location     Type
 11075 ;;  c               1    1[COMMON] unsigned char 
 11076 ;; Return value:  Size  Location     Type
 11077 ;;		None               void
 11078 ;; Registers used:
 11079 ;;		wreg, status,2, status,0
 11080 ;; Tracked objects:
 11081 ;;		On entry : 0/0
 11082 ;;		On exit  : 0/0
 11083 ;;		Unchanged: 0/0
 11084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11085 ;;      Params:         0       0       0       0       0
 11086 ;;      Locals:         2       0       0       0       0
 11087 ;;      Temps:          0       0       0       0       0
 11088 ;;      Totals:         2       0       0       0       0
 11089 ;;Total ram usage:        2 bytes
 11090 ;; Hardware stack levels used:    1
 11091 ;; This function calls:
 11092 ;;		Nothing
 11093 ;; This function is called by:
 11094 ;;		_sprintf
 11095 ;; This function uses a non-reentrant model
 11096 ;;
 11097                           
 11098                           
 11099                           ;psect for function _isdigit
 11100  1940                     _isdigit:	
 11101                           
 11102                           ;incstack = 0
 11103                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 11104                           ;isdigit@c stored from wreg
 11105  1940  00F1               	movwf	isdigit@c
 11106  1941  01F0               	clrf	_isdigit$866
 11107  1942  303A               	movlw	58
 11108  1943  0271               	subwf	isdigit@c,w
 11109  1944  1803               	skipnc
 11110  1945  294C               	goto	l2970
 11111  1946  3030               	movlw	48
 11112  1947  0271               	subwf	isdigit@c,w
 11113  1948  1C03               	skipc
 11114  1949  294C               	goto	l2970
 11115  194A  01F0               	clrf	_isdigit$866
 11116  194B  0AF0               	incf	_isdigit$866,f
 11117  194C                     l2970:	
 11118  194C  0C70               	rrf	_isdigit$866,w
 11119  194D  0008               	return
 11120  194E                     __end_of_isdigit:	
 11121                           
 11122                           	psect	text32
 11123  1A0C                     __ptext32:	
 11124 ;; *************** function ___wmul *****************
 11125 ;; Defined at:
 11126 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 11127 ;; Parameters:    Size  Location     Type
 11128 ;;  multiplier      2    0[COMMON] unsigned int 
 11129 ;;  multiplicand    2    2[COMMON] unsigned int 
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;  product         2    4[COMMON] unsigned int 
 11132 ;; Return value:  Size  Location     Type
 11133 ;;                  2    0[COMMON] unsigned int 
 11134 ;; Registers used:
 11135 ;;		wreg, status,2, status,0
 11136 ;; Tracked objects:
 11137 ;;		On entry : 0/0
 11138 ;;		On exit  : 0/0
 11139 ;;		Unchanged: 0/0
 11140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11141 ;;      Params:         4       0       0       0       0
 11142 ;;      Locals:         2       0       0       0       0
 11143 ;;      Temps:          0       0       0       0       0
 11144 ;;      Totals:         6       0       0       0       0
 11145 ;;Total ram usage:        6 bytes
 11146 ;; Hardware stack levels used:    1
 11147 ;; This function calls:
 11148 ;;		Nothing
 11149 ;; This function is called by:
 11150 ;;		_sprintf
 11151 ;; This function uses a non-reentrant model
 11152 ;;
 11153                           
 11154                           
 11155                           ;psect for function ___wmul
 11156  1A0C                     ___wmul:	
 11157                           
 11158                           ;incstack = 0
 11159                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11160  1A0C  01F4               	clrf	___wmul@product
 11161  1A0D  01F5               	clrf	___wmul@product+1
 11162  1A0E                     l2976:	
 11163  1A0E  1C70               	btfss	___wmul@multiplier,0
 11164  1A0F  2A16               	goto	l731
 11165  1A10  0872               	movf	___wmul@multiplicand,w
 11166  1A11  07F4               	addwf	___wmul@product,f
 11167  1A12  1803               	skipnc
 11168  1A13  0AF5               	incf	___wmul@product+1,f
 11169  1A14  0873               	movf	___wmul@multiplicand+1,w
 11170  1A15  07F5               	addwf	___wmul@product+1,f
 11171  1A16                     l731:	
 11172  1A16  3001               	movlw	1
 11173  1A17                     u3315:	
 11174  1A17  1003               	clrc
 11175  1A18  0DF2               	rlf	___wmul@multiplicand,f
 11176  1A19  0DF3               	rlf	___wmul@multiplicand+1,f
 11177  1A1A  3EFF               	addlw	-1
 11178  1A1B  1D03               	skipz
 11179  1A1C  2A17               	goto	u3315
 11180  1A1D  3001               	movlw	1
 11181  1A1E                     u3325:	
 11182  1A1E  1003               	clrc
 11183  1A1F  0CF1               	rrf	___wmul@multiplier+1,f
 11184  1A20  0CF0               	rrf	___wmul@multiplier,f
 11185  1A21  3EFF               	addlw	-1
 11186  1A22  1D03               	skipz
 11187  1A23  2A1E               	goto	u3325
 11188  1A24  0870               	movf	___wmul@multiplier,w
 11189  1A25  0471               	iorwf	___wmul@multiplier+1,w
 11190  1A26  1D03               	btfss	3,2
 11191  1A27  2A0E               	goto	l2976
 11192  1A28  0875               	movf	___wmul@product+1,w
 11193  1A29  00F1               	movwf	?___wmul+1
 11194  1A2A  0874               	movf	___wmul@product,w
 11195  1A2B  00F0               	movwf	?___wmul
 11196  1A2C  0008               	return
 11197  1A2D                     __end_of___wmul:	
 11198                           
 11199                           	psect	text33
 11200  1B4A                     __ptext33:	
 11201 ;; *************** function ___lwmod *****************
 11202 ;; Defined at:
 11203 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 11204 ;; Parameters:    Size  Location     Type
 11205 ;;  divisor         2    8[COMMON] unsigned int 
 11206 ;;  dividend        2   10[COMMON] unsigned int 
 11207 ;; Auto vars:     Size  Location     Type
 11208 ;;  counter         1   13[COMMON] unsigned char 
 11209 ;; Return value:  Size  Location     Type
 11210 ;;                  2    8[COMMON] unsigned int 
 11211 ;; Registers used:
 11212 ;;		wreg, status,2, status,0
 11213 ;; Tracked objects:
 11214 ;;		On entry : 0/0
 11215 ;;		On exit  : 0/0
 11216 ;;		Unchanged: 0/0
 11217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11218 ;;      Params:         4       0       0       0       0
 11219 ;;      Locals:         1       0       0       0       0
 11220 ;;      Temps:          1       0       0       0       0
 11221 ;;      Totals:         6       0       0       0       0
 11222 ;;Total ram usage:        6 bytes
 11223 ;; Hardware stack levels used:    1
 11224 ;; This function calls:
 11225 ;;		Nothing
 11226 ;; This function is called by:
 11227 ;;		_sprintf
 11228 ;; This function uses a non-reentrant model
 11229 ;;
 11230                           
 11231                           
 11232                           ;psect for function ___lwmod
 11233  1B4A                     ___lwmod:	
 11234                           
 11235                           ;incstack = 0
 11236                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11237  1B4A  0878               	movf	___lwmod@divisor,w
 11238  1B4B  0479               	iorwf	___lwmod@divisor+1,w
 11239  1B4C  1903               	btfsc	3,2
 11240  1B4D  2B77               	goto	l3046
 11241  1B4E  01FD               	clrf	___lwmod@counter
 11242  1B4F  0AFD               	incf	___lwmod@counter,f
 11243  1B50                     l3036:	
 11244  1B50  1BF9               	btfsc	___lwmod@divisor+1,7
 11245  1B51  2B5E               	goto	l3038
 11246  1B52  3001               	movlw	1
 11247  1B53                     u3445:	
 11248  1B53  1003               	clrc
 11249  1B54  0DF8               	rlf	___lwmod@divisor,f
 11250  1B55  0DF9               	rlf	___lwmod@divisor+1,f
 11251  1B56  3EFF               	addlw	-1
 11252  1B57  1D03               	skipz
 11253  1B58  2B53               	goto	u3445
 11254  1B59  3001               	movlw	1
 11255  1B5A  00FC               	movwf	??___lwmod
 11256  1B5B  087C               	movf	??___lwmod,w
 11257  1B5C  07FD               	addwf	___lwmod@counter,f
 11258  1B5D  2B50               	goto	l3036
 11259  1B5E                     l3038:	
 11260  1B5E  0879               	movf	___lwmod@divisor+1,w
 11261  1B5F  027B               	subwf	___lwmod@dividend+1,w
 11262  1B60  1D03               	skipz
 11263  1B61  2B64               	goto	u3465
 11264  1B62  0878               	movf	___lwmod@divisor,w
 11265  1B63  027A               	subwf	___lwmod@dividend,w
 11266  1B64                     u3465:	
 11267  1B64  1C03               	skipc
 11268  1B65  2B6C               	goto	l3042
 11269  1B66  0878               	movf	___lwmod@divisor,w
 11270  1B67  02FA               	subwf	___lwmod@dividend,f
 11271  1B68  0879               	movf	___lwmod@divisor+1,w
 11272  1B69  1C03               	skipc
 11273  1B6A  03FB               	decf	___lwmod@dividend+1,f
 11274  1B6B  02FB               	subwf	___lwmod@dividend+1,f
 11275  1B6C                     l3042:	
 11276  1B6C  3001               	movlw	1
 11277  1B6D                     u3475:	
 11278  1B6D  1003               	clrc
 11279  1B6E  0CF9               	rrf	___lwmod@divisor+1,f
 11280  1B6F  0CF8               	rrf	___lwmod@divisor,f
 11281  1B70  3EFF               	addlw	-1
 11282  1B71  1D03               	skipz
 11283  1B72  2B6D               	goto	u3475
 11284  1B73  3001               	movlw	1
 11285  1B74  02FD               	subwf	___lwmod@counter,f
 11286  1B75  1D03               	btfss	3,2
 11287  1B76  2B5E               	goto	l3038
 11288  1B77                     l3046:	
 11289  1B77  087B               	movf	___lwmod@dividend+1,w
 11290  1B78  00F9               	movwf	?___lwmod+1
 11291  1B79  087A               	movf	___lwmod@dividend,w
 11292  1B7A  00F8               	movwf	?___lwmod
 11293  1B7B  0008               	return
 11294  1B7C                     __end_of___lwmod:	
 11295                           
 11296                           	psect	text34
 11297  1BE5                     __ptext34:	
 11298 ;; *************** function ___lwdiv *****************
 11299 ;; Defined at:
 11300 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 11301 ;; Parameters:    Size  Location     Type
 11302 ;;  divisor         2    0[COMMON] unsigned int 
 11303 ;;  dividend        2    2[COMMON] unsigned int 
 11304 ;; Auto vars:     Size  Location     Type
 11305 ;;  quotient        2    5[COMMON] unsigned int 
 11306 ;;  counter         1    7[COMMON] unsigned char 
 11307 ;; Return value:  Size  Location     Type
 11308 ;;                  2    0[COMMON] unsigned int 
 11309 ;; Registers used:
 11310 ;;		wreg, status,2, status,0
 11311 ;; Tracked objects:
 11312 ;;		On entry : 0/0
 11313 ;;		On exit  : 0/0
 11314 ;;		Unchanged: 0/0
 11315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11316 ;;      Params:         4       0       0       0       0
 11317 ;;      Locals:         3       0       0       0       0
 11318 ;;      Temps:          1       0       0       0       0
 11319 ;;      Totals:         8       0       0       0       0
 11320 ;;Total ram usage:        8 bytes
 11321 ;; Hardware stack levels used:    1
 11322 ;; This function calls:
 11323 ;;		Nothing
 11324 ;; This function is called by:
 11325 ;;		_sprintf
 11326 ;; This function uses a non-reentrant model
 11327 ;;
 11328                           
 11329                           
 11330                           ;psect for function ___lwdiv
 11331  1BE5                     ___lwdiv:	
 11332                           
 11333                           ;incstack = 0
 11334                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11335  1BE5  01F5               	clrf	___lwdiv@quotient
 11336  1BE6  01F6               	clrf	___lwdiv@quotient+1
 11337  1BE7  0870               	movf	___lwdiv@divisor,w
 11338  1BE8  0471               	iorwf	___lwdiv@divisor+1,w
 11339  1BE9  1903               	btfsc	3,2
 11340  1BEA  2C1C               	goto	l3024
 11341  1BEB  01F7               	clrf	___lwdiv@counter
 11342  1BEC  0AF7               	incf	___lwdiv@counter,f
 11343  1BED                     l3012:	
 11344  1BED  1BF1               	btfsc	___lwdiv@divisor+1,7
 11345  1BEE  2BFB               	goto	l3014
 11346  1BEF  3001               	movlw	1
 11347  1BF0                     u3375:	
 11348  1BF0  1003               	clrc
 11349  1BF1  0DF0               	rlf	___lwdiv@divisor,f
 11350  1BF2  0DF1               	rlf	___lwdiv@divisor+1,f
 11351  1BF3  3EFF               	addlw	-1
 11352  1BF4  1D03               	skipz
 11353  1BF5  2BF0               	goto	u3375
 11354  1BF6  3001               	movlw	1
 11355  1BF7  00F4               	movwf	??___lwdiv
 11356  1BF8  0874               	movf	??___lwdiv,w
 11357  1BF9  07F7               	addwf	___lwdiv@counter,f
 11358  1BFA  2BED               	goto	l3012
 11359  1BFB                     l3014:	
 11360  1BFB  3001               	movlw	1
 11361  1BFC                     u3395:	
 11362  1BFC  1003               	clrc
 11363  1BFD  0DF5               	rlf	___lwdiv@quotient,f
 11364  1BFE  0DF6               	rlf	___lwdiv@quotient+1,f
 11365  1BFF  3EFF               	addlw	-1
 11366  1C00  1D03               	skipz
 11367  1C01  2BFC               	goto	u3395
 11368  1C02  0871               	movf	___lwdiv@divisor+1,w
 11369  1C03  0273               	subwf	___lwdiv@dividend+1,w
 11370  1C04  1D03               	skipz
 11371  1C05  2C08               	goto	u3405
 11372  1C06  0870               	movf	___lwdiv@divisor,w
 11373  1C07  0272               	subwf	___lwdiv@dividend,w
 11374  1C08                     u3405:	
 11375  1C08  1C03               	skipc
 11376  1C09  2C11               	goto	l3020
 11377  1C0A  0870               	movf	___lwdiv@divisor,w
 11378  1C0B  02F2               	subwf	___lwdiv@dividend,f
 11379  1C0C  0871               	movf	___lwdiv@divisor+1,w
 11380  1C0D  1C03               	skipc
 11381  1C0E  03F3               	decf	___lwdiv@dividend+1,f
 11382  1C0F  02F3               	subwf	___lwdiv@dividend+1,f
 11383  1C10  1475               	bsf	___lwdiv@quotient,0
 11384  1C11                     l3020:	
 11385  1C11  3001               	movlw	1
 11386  1C12                     u3415:	
 11387  1C12  1003               	clrc
 11388  1C13  0CF1               	rrf	___lwdiv@divisor+1,f
 11389  1C14  0CF0               	rrf	___lwdiv@divisor,f
 11390  1C15  3EFF               	addlw	-1
 11391  1C16  1D03               	skipz
 11392  1C17  2C12               	goto	u3415
 11393  1C18  3001               	movlw	1
 11394  1C19  02F7               	subwf	___lwdiv@counter,f
 11395  1C1A  1D03               	btfss	3,2
 11396  1C1B  2BFB               	goto	l3014
 11397  1C1C                     l3024:	
 11398  1C1C  0876               	movf	___lwdiv@quotient+1,w
 11399  1C1D  00F1               	movwf	?___lwdiv+1
 11400  1C1E  0875               	movf	___lwdiv@quotient,w
 11401  1C1F  00F0               	movwf	?___lwdiv
 11402  1C20  0008               	return
 11403  1C21                     __end_of___lwdiv:	
 11404                           
 11405                           	psect	text35
 11406  194E                     __ptext35:	
 11407 ;; *************** function ___bmul *****************
 11408 ;; Defined at:
 11409 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 11410 ;; Parameters:    Size  Location     Type
 11411 ;;  multiplier      1    wreg     unsigned char 
 11412 ;;  multiplicand    1    0[COMMON] unsigned char 
 11413 ;; Auto vars:     Size  Location     Type
 11414 ;;  multiplier      1    3[COMMON] unsigned char 
 11415 ;;  product         1    2[COMMON] unsigned char 
 11416 ;; Return value:  Size  Location     Type
 11417 ;;                  1    wreg      unsigned char 
 11418 ;; Registers used:
 11419 ;;		wreg, status,2, status,0
 11420 ;; Tracked objects:
 11421 ;;		On entry : 0/0
 11422 ;;		On exit  : 0/0
 11423 ;;		Unchanged: 0/0
 11424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11425 ;;      Params:         1       0       0       0       0
 11426 ;;      Locals:         2       0       0       0       0
 11427 ;;      Temps:          1       0       0       0       0
 11428 ;;      Totals:         4       0       0       0       0
 11429 ;;Total ram usage:        4 bytes
 11430 ;; Hardware stack levels used:    1
 11431 ;; This function calls:
 11432 ;;		Nothing
 11433 ;; This function is called by:
 11434 ;;		_printf_console_cur_MATRIX44
 11435 ;;		_find_best_solution
 11436 ;;		_main
 11437 ;;		_sprintf
 11438 ;;		_get_MATRIX44
 11439 ;;		_printf_console_all_MATRIX44
 11440 ;; This function uses a non-reentrant model
 11441 ;;
 11442                           
 11443                           
 11444                           ;psect for function ___bmul
 11445  194E                     ___bmul:	
 11446                           
 11447                           ;incstack = 0
 11448                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11449                           ;___bmul@multiplier stored from wreg
 11450  194E  00F3               	movwf	___bmul@multiplier
 11451  194F  01F2               	clrf	___bmul@product
 11452  1950                     l2990:	
 11453  1950  1C73               	btfss	___bmul@multiplier,0
 11454  1951  2956               	goto	l2994
 11455  1952  0870               	movf	___bmul@multiplicand,w
 11456  1953  00F1               	movwf	??___bmul
 11457  1954  0871               	movf	??___bmul,w
 11458  1955  07F2               	addwf	___bmul@product,f
 11459  1956                     l2994:	
 11460  1956  1003               	clrc
 11461  1957  0DF0               	rlf	___bmul@multiplicand,f
 11462  1958  1003               	clrc
 11463  1959  0CF3               	rrf	___bmul@multiplier,f
 11464  195A  0873               	movf	___bmul@multiplier,w
 11465  195B  1D03               	btfss	3,2
 11466  195C  2950               	goto	l2990
 11467  195D  0872               	movf	___bmul@product,w
 11468  195E  0008               	return
 11469  195F                     __end_of___bmul:	
 11470                           
 11471                           	psect	text36
 11472  1A2D                     __ptext36:	
 11473 ;; *************** function _USARTWriteString *****************
 11474 ;; Defined at:
 11475 ;;		line 76 in file "usart_pic16.c"
 11476 ;; Parameters:    Size  Location     Type
 11477 ;;  str             2    1[COMMON] PTR const unsigned char 
 11478 ;;		 -> STR_62(13), STR_60(13), STR_43(45), STR_33(20), 
 11479 ;;		 -> STR_32(19), STR_31(6), STR_27(35), STR_26(8), 
 11480 ;;		 -> STR_23(35), STR_21(21), STR_20(1), STR_19(2), 
 11481 ;;		 -> STR_18(2), STR_17(29), STR_16(21), STR_15(1), 
 11482 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_9(21), 
 11483 ;;		 -> STR_8(1), STR_7(2), STR_6(2), STR_5(29), 
 11484 ;;		 -> STR_4(3), STR_3(3), STR_2(3), g_debug(32), 
 11485 ;;		 -> STR_1(3), 
 11486 ;; Auto vars:     Size  Location     Type
 11487 ;;		None
 11488 ;; Return value:  Size  Location     Type
 11489 ;;                  1    wreg      void 
 11490 ;; Registers used:
 11491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 11492 ;; Tracked objects:
 11493 ;;		On entry : 0/0
 11494 ;;		On exit  : 0/0
 11495 ;;		Unchanged: 0/0
 11496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11497 ;;      Params:         2       0       0       0       0
 11498 ;;      Locals:         0       0       0       0       0
 11499 ;;      Temps:          0       0       0       0       0
 11500 ;;      Totals:         2       0       0       0       0
 11501 ;;Total ram usage:        2 bytes
 11502 ;; Hardware stack levels used:    1
 11503 ;; Hardware stack levels required when called:    1
 11504 ;; This function calls:
 11505 ;;		_USARTWriteChar
 11506 ;; This function is called by:
 11507 ;;		_debug_str
 11508 ;;		_debug_line
 11509 ;;		_debug_int1
 11510 ;;		_debug_int2
 11511 ;;		_debug_int3
 11512 ;;		_USARTWriteLine
 11513 ;; This function uses a non-reentrant model
 11514 ;;
 11515                           
 11516                           
 11517                           ;psect for function _USARTWriteString
 11518  1A2D                     _USARTWriteString:	
 11519  1A2D                     l4796:	
 11520                           ;usart_pic16.c: 77: while (*str != '\0') {
 11521                           
 11522                           ;incstack = 0
 11523                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 11524                           
 11525  1A2D  0872               	movf	USARTWriteString@str+1,w
 11526  1A2E  1283               	bcf	3,5	;RP0=0, select bank0
 11527  1A2F  1303               	bcf	3,6	;RP1=0, select bank0
 11528  1A30  00FF               	movwf	127
 11529  1A31  0871               	movf	USARTWriteString@str,w
 11530  1A32  0084               	movwf	4
 11531  1A33  120A  158A  2000  160A  158A  	fcall	stringtab
 11532  1A38  3A00               	xorlw	0
 11533  1A39  1903               	btfsc	3,2
 11534  1A3A  0008               	return
 11535                           
 11536                           ;usart_pic16.c: 78: USARTWriteChar(*str);
 11537  1A3B  0872               	movf	USARTWriteString@str+1,w
 11538  1A3C  1283               	bcf	3,5	;RP0=0, select bank0
 11539  1A3D  1303               	bcf	3,6	;RP1=0, select bank0
 11540  1A3E  00FF               	movwf	127
 11541  1A3F  0871               	movf	USARTWriteString@str,w
 11542  1A40  0084               	movwf	4
 11543  1A41  120A  158A  2000  160A  158A  	fcall	stringtab
 11544  1A46  160A  158A  2117  160A  158A  	fcall	_USARTWriteChar
 11545                           
 11546                           ;usart_pic16.c: 79: str++;
 11547  1A4B  3001               	movlw	1
 11548  1A4C  07F1               	addwf	USARTWriteString@str,f
 11549  1A4D  1803               	skipnc
 11550  1A4E  0AF2               	incf	USARTWriteString@str+1,f
 11551  1A4F  2A2D               	goto	l4796
 11552  1A50                     __end_of_USARTWriteString:	
 11553                           
 11554                           	psect	text37
 11555  1917                     __ptext37:	
 11556 ;; *************** function _USARTWriteChar *****************
 11557 ;; Defined at:
 11558 ;;		line 70 in file "usart_pic16.c"
 11559 ;; Parameters:    Size  Location     Type
 11560 ;;  ch              1    wreg     unsigned char 
 11561 ;; Auto vars:     Size  Location     Type
 11562 ;;  ch              1    0[COMMON] unsigned char 
 11563 ;; Return value:  Size  Location     Type
 11564 ;;                  1    wreg      void 
 11565 ;; Registers used:
 11566 ;;		wreg
 11567 ;; Tracked objects:
 11568 ;;		On entry : 0/0
 11569 ;;		On exit  : 0/0
 11570 ;;		Unchanged: 0/0
 11571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11572 ;;      Params:         0       0       0       0       0
 11573 ;;      Locals:         1       0       0       0       0
 11574 ;;      Temps:          0       0       0       0       0
 11575 ;;      Totals:         1       0       0       0       0
 11576 ;;Total ram usage:        1 bytes
 11577 ;; Hardware stack levels used:    1
 11578 ;; This function calls:
 11579 ;;		Nothing
 11580 ;; This function is called by:
 11581 ;;		_USARTWriteString
 11582 ;;		_USARTWriteLine
 11583 ;;		_USARTWriteInt
 11584 ;;		_USARTGotoNewLine
 11585 ;; This function uses a non-reentrant model
 11586 ;;
 11587                           
 11588                           
 11589                           ;psect for function _USARTWriteChar
 11590  1917                     _USARTWriteChar:	
 11591                           
 11592                           ;incstack = 0
 11593                           ; Regs used in _USARTWriteChar: [wreg]
 11594                           ;USARTWriteChar@ch stored from wreg
 11595  1917  00F0               	movwf	USARTWriteChar@ch
 11596  1918                     l36:	
 11597                           ;usart_pic16.c: 71: while (!PIR1bits.TXIF);
 11598                           
 11599  1918  1283               	bcf	3,5	;RP0=0, select bank0
 11600  1919  1303               	bcf	3,6	;RP1=0, select bank0
 11601  191A  1E0C               	btfss	12,4	;volatile
 11602  191B  2918               	goto	l36
 11603                           
 11604                           ;usart_pic16.c: 73: TXREG = ch;
 11605  191C  0870               	movf	USARTWriteChar@ch,w
 11606  191D  0099               	movwf	25	;volatile
 11607  191E  0008               	return
 11608  191F                     __end_of_USARTWriteChar:	
 11609                           
 11610                           	psect	text38
 11611  1D8F                     __ptext38:	
 11612 ;; *************** function _clear *****************
 11613 ;; Defined at:
 11614 ;;		line 778 in file "teris_16f886.c"
 11615 ;; Parameters:    Size  Location     Type
 11616 ;;  x               1    wreg     char 
 11617 ;;  y               1    0[COMMON] char 
 11618 ;;  matrix44        2    1[COMMON] PTR const struct .
 11619 ;;		 -> NULL(0), g_matrix44(384), 
 11620 ;;  matrix88        1    3[COMMON] PTR struct .
 11621 ;;		 -> g_matrix88(64), 
 11622 ;; Auto vars:     Size  Location     Type
 11623 ;;  x               1    8[COMMON] char 
 11624 ;;  col             1   10[COMMON] unsigned char 
 11625 ;;  row             1    9[COMMON] unsigned char 
 11626 ;; Return value:  Size  Location     Type
 11627 ;;                  1    wreg      void 
 11628 ;; Registers used:
 11629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
 11630 ;; Tracked objects:
 11631 ;;		On entry : 0/0
 11632 ;;		On exit  : 0/0
 11633 ;;		Unchanged: 0/0
 11634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11635 ;;      Params:         4       0       0       0       0
 11636 ;;      Locals:         3       0       0       0       0
 11637 ;;      Temps:          4       0       0       0       0
 11638 ;;      Totals:        11       0       0       0       0
 11639 ;;Total ram usage:       11 bytes
 11640 ;; Hardware stack levels used:    2
 11641 ;; This function calls:
 11642 ;;		Nothing
 11643 ;; This function is called by:
 11644 ;;		_main
 11645 ;; This function uses a non-reentrant model
 11646 ;;
 11647                           
 11648                           
 11649                           ;psect for function _clear
 11650  1D8F                     _clear:	
 11651                           
 11652                           ;incstack = 0
 11653                           ; Regs used in _clear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
 11654                           ;clear@x stored from wreg
 11655  1D8F  00F8               	movwf	clear@x
 11656                           
 11657                           ;teris_16f886.c: 780: for(uint8_t row = 0; row < 4; row++)
 11658  1D90  01F9               	clrf	clear@row
 11659  1D91                     L37:	
 11660  1D91  3004               	movlw	4
 11661  1D92  0279               	subwf	clear@row,w
 11662  1D93  1803               	btfsc	3,0
 11663  1D94  0008               	return
 11664                           
 11665                           ;teris_16f886.c: 781: {
 11666                           ;teris_16f886.c: 782: for(uint8_t col = 0; col < 4; col++)
 11667  1D95  01FA               	clrf	clear@col
 11668  1D96  3004               	movlw	4
 11669  1D97  027A               	subwf	clear@col,w
 11670  1D98  1803               	btfsc	3,0
 11671  1D99  2DD9               	goto	l4214
 11672  1D9A                     l4206:	
 11673                           
 11674                           ;teris_16f886.c: 783: {
 11675                           ;teris_16f886.c: 784: if(matrix44->data[row][col] == 1)
 11676  1D9A  0879               	movf	clear@row,w
 11677  1D9B  00F4               	movwf	??_clear
 11678  1D9C  01F5               	clrf	??_clear+1
 11679  1D9D  1003               	clrc
 11680  1D9E  0DF4               	rlf	??_clear,f
 11681  1D9F  0DF5               	rlf	??_clear+1,f
 11682  1DA0  1003               	clrc
 11683  1DA1  0DF4               	rlf	??_clear,f
 11684  1DA2  0DF5               	rlf	??_clear+1,f
 11685  1DA3  0874               	movf	??_clear,w
 11686  1DA4  0771               	addwf	clear@matrix44,w
 11687  1DA5  00F6               	movwf	??_clear+2
 11688  1DA6  0875               	movf	??_clear+1,w
 11689  1DA7  1803               	skipnc
 11690  1DA8  0A75               	incf	??_clear+1,w
 11691  1DA9  0772               	addwf	clear@matrix44+1,w
 11692  1DAA  00F7               	movwf	??_clear+3
 11693  1DAB  087A               	movf	clear@col,w
 11694  1DAC  0776               	addwf	??_clear+2,w
 11695  1DAD  0084               	movwf	4
 11696  1DAE  0877               	movf	??_clear+3,w
 11697  1DAF  1803               	skipnc
 11698  1DB0  0A77               	incf	??_clear+3,w
 11699  1DB1  1283               	bcf	3,5	;RP0=0, select bank0
 11700  1DB2  1303               	bcf	3,6	;RP1=0, select bank0
 11701  1DB3  00FF               	movwf	127
 11702  1DB4  120A  158A  2000  160A  158A  	fcall	stringtab
 11703  1DB9  3A01               	xorlw	1
 11704  1DBA  1D03               	skipz
 11705  1DBB  2DD1               	goto	l4210
 11706                           
 11707                           ;teris_16f886.c: 785: {
 11708                           ;teris_16f886.c: 786: matrix88->data[y + row][x + col] = 0;
 11709  1DBC  087A               	movf	clear@col,w
 11710  1DBD  0778               	addwf	clear@x,w
 11711  1DBE  0773               	addwf	clear@matrix88,w
 11712  1DBF  00F4               	movwf	??_clear
 11713  1DC0  0879               	movf	clear@row,w
 11714  1DC1  0770               	addwf	clear@y,w
 11715  1DC2  00F5               	movwf	??_clear+1
 11716  1DC3  3002               	movlw	2
 11717  1DC4                     u5915:	
 11718  1DC4  1003               	clrc
 11719  1DC5  0DF5               	rlf	??_clear+1,f
 11720  1DC6  3EFF               	addlw	-1
 11721  1DC7  1D03               	skipz
 11722  1DC8  2DC4               	goto	u5915
 11723  1DC9  1003               	clrc
 11724  1DCA  0D75               	rlf	??_clear+1,w
 11725  1DCB  0774               	addwf	??_clear,w
 11726  1DCC  00F6               	movwf	??_clear+2
 11727  1DCD  0876               	movf	??_clear+2,w
 11728  1DCE  0084               	movwf	4
 11729  1DCF  1783               	bsf	3,7	;select IRP bank2
 11730  1DD0  0180               	clrf	0
 11731  1DD1                     l4210:	
 11732  1DD1  3001               	movlw	1
 11733  1DD2  00F4               	movwf	??_clear
 11734  1DD3  0874               	movf	??_clear,w
 11735  1DD4  07FA               	addwf	clear@col,f
 11736  1DD5  3004               	movlw	4
 11737  1DD6  027A               	subwf	clear@col,w
 11738  1DD7  1C03               	skipc
 11739  1DD8  2D9A               	goto	l4206
 11740  1DD9                     l4214:	
 11741  1DD9  3001               	movlw	1
 11742  1DDA  00F4               	movwf	??_clear
 11743  1DDB  0874               	movf	??_clear,w
 11744  1DDC  07F9               	addwf	clear@row,f
 11745  1DDD  2D91               	goto	L37
 11746  1DDE                     __end_of_clear:	
 11747                           
 11748                           	psect	text39
 11749  19BD                     __ptext39:	
 11750 ;; *************** function _char_info_index_rand *****************
 11751 ;; Defined at:
 11752 ;;		line 855 in file "teris_16f886.c"
 11753 ;; Parameters:    Size  Location     Type
 11754 ;;		None
 11755 ;; Auto vars:     Size  Location     Type
 11756 ;;		None
 11757 ;; Return value:  Size  Location     Type
 11758 ;;                  1    wreg      unsigned char 
 11759 ;; Registers used:
 11760 ;;		wreg, status,2, status,0, pclath, cstack
 11761 ;; Tracked objects:
 11762 ;;		On entry : 0/0
 11763 ;;		On exit  : 0/0
 11764 ;;		Unchanged: 0/0
 11765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11766 ;;      Params:         0       0       0       0       0
 11767 ;;      Locals:         0       0       0       0       0
 11768 ;;      Temps:          0       0       0       0       0
 11769 ;;      Totals:         0       0       0       0       0
 11770 ;;Total ram usage:        0 bytes
 11771 ;; Hardware stack levels used:    1
 11772 ;; Hardware stack levels required when called:    2
 11773 ;; This function calls:
 11774 ;;		___awmod
 11775 ;;		_rand
 11776 ;; This function is called by:
 11777 ;;		_main
 11778 ;; This function uses a non-reentrant model
 11779 ;;
 11780                           
 11781                           
 11782                           ;psect for function _char_info_index_rand
 11783  19BD                     _char_info_index_rand:	
 11784                           
 11785                           ;teris_16f886.c: 857: return (uint8_t)(rand()%9);
 11786                           
 11787                           ;incstack = 0
 11788                           ; Regs used in _char_info_index_rand: [wreg+status,2+status,0+pclath+cstack]
 11789  19BD  3009               	movlw	9
 11790  19BE  1283               	bcf	3,5	;RP0=0, select bank0
 11791  19BF  1303               	bcf	3,6	;RP1=0, select bank0
 11792  19C0  00A7               	movwf	___awmod@divisor
 11793  19C1  3000               	movlw	0
 11794  19C2  00A8               	movwf	___awmod@divisor+1
 11795  19C3  160A  158A  262E  160A  158A  	fcall	_rand
 11796  19C8  1283               	bcf	3,5	;RP0=0, select bank0
 11797  19C9  1303               	bcf	3,6	;RP1=0, select bank0
 11798  19CA  0821               	movf	?_rand+1,w
 11799  19CB  00AA               	movwf	___awmod@dividend+1
 11800  19CC  0820               	movf	?_rand,w
 11801  19CD  00A9               	movwf	___awmod@dividend
 11802  19CE  160A  158A  2542   	fcall	___awmod
 11803  19D1  1283               	bcf	3,5	;RP0=0, select bank0
 11804  19D2  1303               	bcf	3,6	;RP1=0, select bank0
 11805  19D3  0827               	movf	?___awmod,w
 11806  19D4  0008               	return
 11807  19D5                     __end_of_char_info_index_rand:	
 11808                           
 11809                           	psect	text40
 11810  1E2E                     __ptext40:	
 11811 ;; *************** function _rand *****************
 11812 ;; Defined at:
 11813 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
 11814 ;; Parameters:    Size  Location     Type
 11815 ;;		None
 11816 ;; Auto vars:     Size  Location     Type
 11817 ;;		None
 11818 ;; Return value:  Size  Location     Type
 11819 ;;                  2    0[BANK0 ] int 
 11820 ;; Registers used:
 11821 ;;		wreg, status,2, status,0, pclath, cstack
 11822 ;; Tracked objects:
 11823 ;;		On entry : 0/0
 11824 ;;		On exit  : 0/0
 11825 ;;		Unchanged: 0/0
 11826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11827 ;;      Params:         0       2       0       0       0
 11828 ;;      Locals:         0       0       0       0       0
 11829 ;;      Temps:          0       5       0       0       0
 11830 ;;      Totals:         0       7       0       0       0
 11831 ;;Total ram usage:        7 bytes
 11832 ;; Hardware stack levels used:    1
 11833 ;; Hardware stack levels required when called:    1
 11834 ;; This function calls:
 11835 ;;		___lmul
 11836 ;; This function is called by:
 11837 ;;		_char_info_index_rand
 11838 ;; This function uses a non-reentrant model
 11839 ;;
 11840                           
 11841                           
 11842                           ;psect for function _rand
 11843  1E2E                     _rand:	
 11844                           
 11845                           ;incstack = 0
 11846                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 11847  1E2E  1683               	bsf	3,5	;RP0=1, select bank3
 11848  1E2F  1703               	bsf	3,6	;RP1=1, select bank3
 11849  1E30  0857               	movf	(_randx+3)^(0+384),w
 11850  1E31  00F3               	movwf	___lmul@multiplier+3
 11851  1E32  0856               	movf	(_randx+2)^(0+384),w
 11852  1E33  00F2               	movwf	___lmul@multiplier+2
 11853  1E34  0855               	movf	(_randx+1)^(0+384),w
 11854  1E35  00F1               	movwf	___lmul@multiplier+1
 11855  1E36  0854               	movf	_randx^(0+384),w
 11856  1E37  00F0               	movwf	___lmul@multiplier
 11857  1E38  3041               	movlw	65
 11858  1E39  00F7               	movwf	___lmul@multiplicand+3
 11859  1E3A  30C6               	movlw	198
 11860  1E3B  00F6               	movwf	___lmul@multiplicand+2
 11861  1E3C  304E               	movlw	78
 11862  1E3D  00F5               	movwf	___lmul@multiplicand+1
 11863  1E3E  306D               	movlw	109
 11864  1E3F  00F4               	movwf	___lmul@multiplicand
 11865  1E40  160A  118A  2006  160A  158A  	fcall	___lmul
 11866  1E45  0873               	movf	?___lmul+3,w
 11867  1E46  1683               	bsf	3,5	;RP0=1, select bank3
 11868  1E47  1703               	bsf	3,6	;RP1=1, select bank3
 11869  1E48  00D7               	movwf	(_randx+3)^(0+384)
 11870  1E49  0872               	movf	?___lmul+2,w
 11871  1E4A  00D6               	movwf	(_randx+2)^(0+384)
 11872  1E4B  0871               	movf	?___lmul+1,w
 11873  1E4C  00D5               	movwf	(_randx+1)^(0+384)
 11874  1E4D  0870               	movf	?___lmul,w
 11875  1E4E  00D4               	movwf	_randx^(0+384)
 11876  1E4F  3039               	movlw	57
 11877  1E50  07D4               	addwf	_randx^(0+384),f
 11878  1E51  3030               	movlw	48
 11879  1E52  1803               	skipnc
 11880  1E53  3031               	movlw	49
 11881  1E54  07D5               	addwf	(_randx+1)^(0+384),f
 11882  1E55  3000               	movlw	0
 11883  1E56  1803               	skipnc
 11884  1E57  3001               	movlw	1
 11885  1E58  07D6               	addwf	(_randx+2)^(0+384),f
 11886  1E59  3000               	movlw	0
 11887  1E5A  1803               	skipnc
 11888  1E5B  3001               	movlw	1
 11889  1E5C  07D7               	addwf	(_randx+3)^(0+384),f
 11890  1E5D  0854               	movf	_randx^(0+384),w
 11891  1E5E  1283               	bcf	3,5	;RP0=0, select bank0
 11892  1E5F  1303               	bcf	3,6	;RP1=0, select bank0
 11893  1E60  00A2               	movwf	??_rand
 11894  1E61  1683               	bsf	3,5	;RP0=1, select bank3
 11895  1E62  1703               	bsf	3,6	;RP1=1, select bank3
 11896  1E63  0855               	movf	(_randx+1)^(0+384),w
 11897  1E64  1283               	bcf	3,5	;RP0=0, select bank0
 11898  1E65  1303               	bcf	3,6	;RP1=0, select bank0
 11899  1E66  00A3               	movwf	??_rand+1
 11900  1E67  1683               	bsf	3,5	;RP0=1, select bank3
 11901  1E68  1703               	bsf	3,6	;RP1=1, select bank3
 11902  1E69  0856               	movf	(_randx+2)^(0+384),w
 11903  1E6A  1283               	bcf	3,5	;RP0=0, select bank0
 11904  1E6B  1303               	bcf	3,6	;RP1=0, select bank0
 11905  1E6C  00A4               	movwf	??_rand+2
 11906  1E6D  1683               	bsf	3,5	;RP0=1, select bank3
 11907  1E6E  1703               	bsf	3,6	;RP1=1, select bank3
 11908  1E6F  0857               	movf	(_randx+3)^(0+384),w
 11909  1E70  1283               	bcf	3,5	;RP0=0, select bank0
 11910  1E71  1303               	bcf	3,6	;RP1=0, select bank0
 11911  1E72  00A5               	movwf	??_rand+3
 11912  1E73  3010               	movlw	16
 11913  1E74  00A6               	movwf	??_rand+4
 11914  1E75                     u5185:	
 11915  1E75  0D25               	rlf	??_rand+3,w
 11916  1E76  0CA5               	rrf	??_rand+3,f
 11917  1E77  0CA4               	rrf	??_rand+2,f
 11918  1E78  0CA3               	rrf	??_rand+1,f
 11919  1E79  0CA2               	rrf	??_rand,f
 11920  1E7A  0BA6               	decfsz	??_rand+4,f
 11921  1E7B  2E75               	goto	u5185
 11922  1E7C  30FF               	movlw	255
 11923  1E7D  0522               	andwf	??_rand,w
 11924  1E7E  00A0               	movwf	?_rand
 11925  1E7F  307F               	movlw	127
 11926  1E80  0523               	andwf	??_rand+1,w
 11927  1E81  00A1               	movwf	?_rand+1
 11928  1E82  0008               	return
 11929  1E83                     __end_of_rand:	
 11930                           
 11931                           	psect	text41
 11932  1006                     __ptext41:	
 11933 ;; *************** function ___lmul *****************
 11934 ;; Defined at:
 11935 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 11936 ;; Parameters:    Size  Location     Type
 11937 ;;  multiplier      4    0[COMMON] unsigned long 
 11938 ;;  multiplicand    4    4[COMMON] unsigned long 
 11939 ;; Auto vars:     Size  Location     Type
 11940 ;;  product         4    9[COMMON] unsigned long 
 11941 ;; Return value:  Size  Location     Type
 11942 ;;                  4    0[COMMON] unsigned long 
 11943 ;; Registers used:
 11944 ;;		wreg, status,2, status,0
 11945 ;; Tracked objects:
 11946 ;;		On entry : 0/0
 11947 ;;		On exit  : 0/0
 11948 ;;		Unchanged: 0/0
 11949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11950 ;;      Params:         8       0       0       0       0
 11951 ;;      Locals:         4       0       0       0       0
 11952 ;;      Temps:          1       0       0       0       0
 11953 ;;      Totals:        13       0       0       0       0
 11954 ;;Total ram usage:       13 bytes
 11955 ;; Hardware stack levels used:    1
 11956 ;; This function calls:
 11957 ;;		Nothing
 11958 ;; This function is called by:
 11959 ;;		_rand
 11960 ;; This function uses a non-reentrant model
 11961 ;;
 11962                           
 11963                           
 11964                           ;psect for function ___lmul
 11965  1006                     ___lmul:	
 11966                           
 11967                           ;incstack = 0
 11968                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11969  1006  3000               	movlw	0
 11970  1007  00FC               	movwf	___lmul@product+3
 11971  1008  3000               	movlw	0
 11972  1009  00FB               	movwf	___lmul@product+2
 11973  100A  3000               	movlw	0
 11974  100B  00FA               	movwf	___lmul@product+1
 11975  100C  3000               	movlw	0
 11976  100D  00F9               	movwf	___lmul@product
 11977  100E                     l3662:	
 11978  100E  1C70               	btfss	___lmul@multiplier,0
 11979  100F  2824               	goto	l3666
 11980  1010  0874               	movf	___lmul@multiplicand,w
 11981  1011  07F9               	addwf	___lmul@product,f
 11982  1012  0875               	movf	___lmul@multiplicand+1,w
 11983  1013  1103               	clrz
 11984  1014  1803               	skipnc
 11985  1015  3E01               	addlw	1
 11986  1016  1D03               	btfss	3,2
 11987  1017  07FA               	addwf	___lmul@product+1,f
 11988  1018  0876               	movf	___lmul@multiplicand+2,w
 11989  1019  1103               	clrz
 11990  101A  1803               	skipnc
 11991  101B  3E01               	addlw	1
 11992  101C  1D03               	btfss	3,2
 11993  101D  07FB               	addwf	___lmul@product+2,f
 11994  101E  0877               	movf	___lmul@multiplicand+3,w
 11995  101F  1103               	clrz
 11996  1020  1803               	skipnc
 11997  1021  3E01               	addlw	1
 11998  1022  1D03               	btfss	3,2
 11999  1023  07FC               	addwf	___lmul@product+3,f
 12000  1024                     l3666:	
 12001  1024  3001               	movlw	1
 12002  1025  00F8               	movwf	??___lmul
 12003  1026                     u4735:	
 12004  1026  1003               	clrc
 12005  1027  0DF4               	rlf	___lmul@multiplicand,f
 12006  1028  0DF5               	rlf	___lmul@multiplicand+1,f
 12007  1029  0DF6               	rlf	___lmul@multiplicand+2,f
 12008  102A  0DF7               	rlf	___lmul@multiplicand+3,f
 12009  102B  0BF8               	decfsz	??___lmul,f
 12010  102C  2826               	goto	u4735
 12011  102D  3001               	movlw	1
 12012  102E                     u4745:	
 12013  102E  1003               	clrc
 12014  102F  0CF3               	rrf	___lmul@multiplier+3,f
 12015  1030  0CF2               	rrf	___lmul@multiplier+2,f
 12016  1031  0CF1               	rrf	___lmul@multiplier+1,f
 12017  1032  0CF0               	rrf	___lmul@multiplier,f
 12018  1033  3EFF               	addlw	-1
 12019  1034  1D03               	skipz
 12020  1035  282E               	goto	u4745
 12021  1036  0873               	movf	___lmul@multiplier+3,w
 12022  1037  0472               	iorwf	___lmul@multiplier+2,w
 12023  1038  0471               	iorwf	___lmul@multiplier+1,w
 12024  1039  0470               	iorwf	___lmul@multiplier,w
 12025  103A  1D03               	skipz
 12026  103B  280E               	goto	l3662
 12027  103C  087C               	movf	___lmul@product+3,w
 12028  103D  00F3               	movwf	?___lmul+3
 12029  103E  087B               	movf	___lmul@product+2,w
 12030  103F  00F2               	movwf	?___lmul+2
 12031  1040  087A               	movf	___lmul@product+1,w
 12032  1041  00F1               	movwf	?___lmul+1
 12033  1042  0879               	movf	___lmul@product,w
 12034  1043  00F0               	movwf	?___lmul
 12035  1044  0008               	return
 12036  1045                     __end_of___lmul:	
 12037                           
 12038                           	psect	text42
 12039  1D42                     __ptext42:	
 12040 ;; *************** function ___awmod *****************
 12041 ;; Defined at:
 12042 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 12043 ;; Parameters:    Size  Location     Type
 12044 ;;  divisor         2    7[BANK0 ] int 
 12045 ;;  dividend        2    9[BANK0 ] int 
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;  sign            1   12[BANK0 ] unsigned char 
 12048 ;;  counter         1   11[BANK0 ] unsigned char 
 12049 ;; Return value:  Size  Location     Type
 12050 ;;                  2    7[BANK0 ] int 
 12051 ;; Registers used:
 12052 ;;		wreg, status,2, status,0
 12053 ;; Tracked objects:
 12054 ;;		On entry : 0/0
 12055 ;;		On exit  : 0/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12058 ;;      Params:         0       4       0       0       0
 12059 ;;      Locals:         0       2       0       0       0
 12060 ;;      Temps:          1       0       0       0       0
 12061 ;;      Totals:         1       6       0       0       0
 12062 ;;Total ram usage:        7 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; This function calls:
 12065 ;;		Nothing
 12066 ;; This function is called by:
 12067 ;;		_char_info_index_rand
 12068 ;;		_USARTWriteInt
 12069 ;; This function uses a non-reentrant model
 12070 ;;
 12071                           
 12072                           
 12073                           ;psect for function ___awmod
 12074  1D42                     ___awmod:	
 12075                           
 12076                           ;incstack = 0
 12077                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 12078  1D42  1283               	bcf	3,5	;RP0=0, select bank0
 12079  1D43  1303               	bcf	3,6	;RP1=0, select bank0
 12080  1D44  01AC               	clrf	___awmod@sign
 12081  1D45  1FAA               	btfss	___awmod@dividend+1,7
 12082  1D46  2D4E               	goto	l4036
 12083  1D47  09A9               	comf	___awmod@dividend,f
 12084  1D48  09AA               	comf	___awmod@dividend+1,f
 12085  1D49  0AA9               	incf	___awmod@dividend,f
 12086  1D4A  1903               	skipnz
 12087  1D4B  0AAA               	incf	___awmod@dividend+1,f
 12088  1D4C  01AC               	clrf	___awmod@sign
 12089  1D4D  0AAC               	incf	___awmod@sign,f
 12090  1D4E                     l4036:	
 12091  1D4E  1FA8               	btfss	___awmod@divisor+1,7
 12092  1D4F  2D55               	goto	l4040
 12093  1D50  09A7               	comf	___awmod@divisor,f
 12094  1D51  09A8               	comf	___awmod@divisor+1,f
 12095  1D52  0AA7               	incf	___awmod@divisor,f
 12096  1D53  1903               	skipnz
 12097  1D54  0AA8               	incf	___awmod@divisor+1,f
 12098  1D55                     l4040:	
 12099  1D55  0827               	movf	___awmod@divisor,w
 12100  1D56  0428               	iorwf	___awmod@divisor+1,w
 12101  1D57  1903               	btfsc	3,2
 12102  1D58  2D82               	goto	l4058
 12103  1D59  01AB               	clrf	___awmod@counter
 12104  1D5A  0AAB               	incf	___awmod@counter,f
 12105  1D5B                     l4048:	
 12106  1D5B  1BA8               	btfsc	___awmod@divisor+1,7
 12107  1D5C  2D69               	goto	l4050
 12108  1D5D  3001               	movlw	1
 12109  1D5E                     u5675:	
 12110  1D5E  1003               	clrc
 12111  1D5F  0DA7               	rlf	___awmod@divisor,f
 12112  1D60  0DA8               	rlf	___awmod@divisor+1,f
 12113  1D61  3EFF               	addlw	-1
 12114  1D62  1D03               	skipz
 12115  1D63  2D5E               	goto	u5675
 12116  1D64  3001               	movlw	1
 12117  1D65  00FD               	movwf	??___awmod
 12118  1D66  087D               	movf	??___awmod,w
 12119  1D67  07AB               	addwf	___awmod@counter,f
 12120  1D68  2D5B               	goto	l4048
 12121  1D69                     l4050:	
 12122  1D69  0828               	movf	___awmod@divisor+1,w
 12123  1D6A  022A               	subwf	___awmod@dividend+1,w
 12124  1D6B  1D03               	skipz
 12125  1D6C  2D6F               	goto	u5695
 12126  1D6D  0827               	movf	___awmod@divisor,w
 12127  1D6E  0229               	subwf	___awmod@dividend,w
 12128  1D6F                     u5695:	
 12129  1D6F  1C03               	skipc
 12130  1D70  2D77               	goto	l4054
 12131  1D71  0827               	movf	___awmod@divisor,w
 12132  1D72  02A9               	subwf	___awmod@dividend,f
 12133  1D73  0828               	movf	___awmod@divisor+1,w
 12134  1D74  1C03               	skipc
 12135  1D75  03AA               	decf	___awmod@dividend+1,f
 12136  1D76  02AA               	subwf	___awmod@dividend+1,f
 12137  1D77                     l4054:	
 12138  1D77  3001               	movlw	1
 12139  1D78                     u5705:	
 12140  1D78  1003               	clrc
 12141  1D79  0CA8               	rrf	___awmod@divisor+1,f
 12142  1D7A  0CA7               	rrf	___awmod@divisor,f
 12143  1D7B  3EFF               	addlw	-1
 12144  1D7C  1D03               	skipz
 12145  1D7D  2D78               	goto	u5705
 12146  1D7E  3001               	movlw	1
 12147  1D7F  02AB               	subwf	___awmod@counter,f
 12148  1D80  1D03               	btfss	3,2
 12149  1D81  2D69               	goto	l4050
 12150  1D82                     l4058:	
 12151  1D82  082C               	movf	___awmod@sign,w
 12152  1D83  1903               	btfsc	3,2
 12153  1D84  2D8A               	goto	l4062
 12154  1D85  09A9               	comf	___awmod@dividend,f
 12155  1D86  09AA               	comf	___awmod@dividend+1,f
 12156  1D87  0AA9               	incf	___awmod@dividend,f
 12157  1D88  1903               	skipnz
 12158  1D89  0AAA               	incf	___awmod@dividend+1,f
 12159  1D8A                     l4062:	
 12160  1D8A  082A               	movf	___awmod@dividend+1,w
 12161  1D8B  00A8               	movwf	?___awmod+1
 12162  1D8C  0829               	movf	___awmod@dividend,w
 12163  1D8D  00A7               	movwf	?___awmod
 12164  1D8E  0008               	return
 12165  1D8F                     __end_of___awmod:	
 12166                           
 12167                           	psect	text43
 12168  1C21                     __ptext43:	
 12169 ;; *************** function _USARTInit *****************
 12170 ;; Defined at:
 12171 ;;		line 31 in file "usart_pic16.c"
 12172 ;; Parameters:    Size  Location     Type
 12173 ;;  baud_rate       2    0[COMMON] unsigned int 
 12174 ;; Auto vars:     Size  Location     Type
 12175 ;;		None
 12176 ;; Return value:  Size  Location     Type
 12177 ;;                  1    wreg      void 
 12178 ;; Registers used:
 12179 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12180 ;; Tracked objects:
 12181 ;;		On entry : 0/0
 12182 ;;		On exit  : 0/0
 12183 ;;		Unchanged: 0/0
 12184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12185 ;;      Params:         2       0       0       0       0
 12186 ;;      Locals:         0       0       0       0       0
 12187 ;;      Temps:          1       0       0       0       0
 12188 ;;      Totals:         3       0       0       0       0
 12189 ;;Total ram usage:        3 bytes
 12190 ;; Hardware stack levels used:    1
 12191 ;; This function calls:
 12192 ;;		Nothing
 12193 ;; This function is called by:
 12194 ;;		_main
 12195 ;; This function uses a non-reentrant model
 12196 ;;
 12197                           
 12198                           
 12199                           ;psect for function _USARTInit
 12200  1C21                     _USARTInit:	
 12201                           
 12202                           ;usart_pic16.c: 33: UQFront = UQEnd = -1;
 12203                           
 12204                           ;incstack = 0
 12205                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 12206  1C21  30FF               	movlw	255
 12207  1C22  1283               	bcf	3,5	;RP0=0, select bank0
 12208  1C23  1303               	bcf	3,6	;RP1=0, select bank0
 12209  1C24  00EB               	movwf	_UQEnd	;volatile
 12210  1C25  00F2               	movwf	??_USARTInit
 12211  1C26  0872               	movf	??_USARTInit,w
 12212  1C27  00EC               	movwf	_UQFront	;volatile
 12213                           
 12214                           ;usart_pic16.c: 36: switch (baud_rate) {
 12215  1C28  2C34               	goto	l4078
 12216  1C29                     l4068:	
 12217                           ;usart_pic16.c: 37: case 9600:
 12218                           
 12219                           
 12220                           ;usart_pic16.c: 38: SPBRG = 129;
 12221  1C29  3081               	movlw	129
 12222  1C2A  2C30               	goto	L40
 12223  1C2B                     l4070:	
 12224                           ;usart_pic16.c: 40: case 19200:
 12225                           
 12226                           ;usart_pic16.c: 39: break;
 12227                           
 12228                           
 12229                           ;usart_pic16.c: 41: SPBRG = 64;
 12230  1C2B  3040               	movlw	64
 12231  1C2C  2C30               	goto	L40
 12232  1C2D                     l4072:	
 12233                           ;usart_pic16.c: 43: case 28800:
 12234                           
 12235                           ;usart_pic16.c: 42: break;
 12236                           
 12237                           
 12238                           ;usart_pic16.c: 44: SPBRG = 42;
 12239  1C2D  302A               	movlw	42
 12240  1C2E  2C30               	goto	L40
 12241  1C2F                     l4074:	
 12242                           ;usart_pic16.c: 46: case 33600:
 12243                           
 12244                           ;usart_pic16.c: 45: break;
 12245                           
 12246                           
 12247                           ;usart_pic16.c: 47: SPBRG = 36;
 12248  1C2F  3024               	movlw	36
 12249  1C30                     L40:	
 12250  1C30  1683               	bsf	3,5	;RP0=1, select bank1
 12251  1C31  1303               	bcf	3,6	;RP1=0, select bank1
 12252  1C32  0099               	movwf	25	;volatile
 12253                           
 12254                           ;usart_pic16.c: 49: }
 12255                           
 12256                           ;usart_pic16.c: 48: break;
 12257  1C33  2C56               	goto	l29
 12258  1C34                     l4078:	
 12259                           
 12260                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 12261                           ; Switch size 1, requested type "space"
 12262                           ; Number of cases is 4, Range of values is 37 to 131
 12263                           ; switch strategies available:
 12264                           ; Name         Instructions Cycles
 12265                           ; simple_byte           13     7 (average)
 12266                           ; jumptable            263     9 (fixed)
 12267                           ;	Chosen strategy is simple_byte
 12268  1C34  0871               	movf	USARTInit@baud_rate+1,w
 12269  1C35  3A25               	xorlw	37	; case 37
 12270  1C36  1903               	skipnz
 12271  1C37  2C42               	goto	l5806
 12272  1C38  3A6E               	xorlw	110	; case 75
 12273  1C39  1903               	skipnz
 12274  1C3A  2C47               	goto	l5808
 12275  1C3B  3A3B               	xorlw	59	; case 112
 12276  1C3C  1903               	skipnz
 12277  1C3D  2C4C               	goto	l5810
 12278  1C3E  3AF3               	xorlw	243	; case 131
 12279  1C3F  1903               	skipnz
 12280  1C40  2C51               	goto	l5812
 12281  1C41  2C56               	goto	l29
 12282  1C42                     l5806:	
 12283                           
 12284                           ; Switch size 1, requested type "space"
 12285                           ; Number of cases is 1, Range of values is 128 to 128
 12286                           ; switch strategies available:
 12287                           ; Name         Instructions Cycles
 12288                           ; simple_byte            4     3 (average)
 12289                           ; direct_byte           14    11 (fixed)
 12290                           ; jumptable            263     9 (fixed)
 12291                           ;	Chosen strategy is simple_byte
 12292  1C42  0870               	movf	USARTInit@baud_rate,w
 12293  1C43  3A80               	xorlw	128	; case 128
 12294  1C44  1903               	skipnz
 12295  1C45  2C29               	goto	l4068
 12296  1C46  2C56               	goto	l29
 12297  1C47                     l5808:	
 12298                           
 12299                           ; Switch size 1, requested type "space"
 12300                           ; Number of cases is 1, Range of values is 0 to 0
 12301                           ; switch strategies available:
 12302                           ; Name         Instructions Cycles
 12303                           ; simple_byte            4     3 (average)
 12304                           ; direct_byte           11     8 (fixed)
 12305                           ; jumptable            260     6 (fixed)
 12306                           ;	Chosen strategy is simple_byte
 12307  1C47  0870               	movf	USARTInit@baud_rate,w
 12308  1C48  3A00               	xorlw	0	; case 0
 12309  1C49  1903               	skipnz
 12310  1C4A  2C2B               	goto	l4070
 12311  1C4B  2C56               	goto	l29
 12312  1C4C                     l5810:	
 12313                           
 12314                           ; Switch size 1, requested type "space"
 12315                           ; Number of cases is 1, Range of values is 128 to 128
 12316                           ; switch strategies available:
 12317                           ; Name         Instructions Cycles
 12318                           ; simple_byte            4     3 (average)
 12319                           ; direct_byte           14    11 (fixed)
 12320                           ; jumptable            263     9 (fixed)
 12321                           ;	Chosen strategy is simple_byte
 12322  1C4C  0870               	movf	USARTInit@baud_rate,w
 12323  1C4D  3A80               	xorlw	128	; case 128
 12324  1C4E  1903               	skipnz
 12325  1C4F  2C2D               	goto	l4072
 12326  1C50  2C56               	goto	l29
 12327  1C51                     l5812:	
 12328                           
 12329                           ; Switch size 1, requested type "space"
 12330                           ; Number of cases is 1, Range of values is 64 to 64
 12331                           ; switch strategies available:
 12332                           ; Name         Instructions Cycles
 12333                           ; simple_byte            4     3 (average)
 12334                           ; direct_byte           14    11 (fixed)
 12335                           ; jumptable            263     9 (fixed)
 12336                           ;	Chosen strategy is simple_byte
 12337  1C51  0870               	movf	USARTInit@baud_rate,w
 12338  1C52  3A40               	xorlw	64	; case 64
 12339  1C53  1903               	skipnz
 12340  1C54  2C2F               	goto	l4074
 12341  1C55  2C56               	goto	l29
 12342  1C56                     l29:	
 12343                           
 12344                           ;usart_pic16.c: 52: TXSTAbits.TX9 = 0;
 12345  1C56  1683               	bsf	3,5	;RP0=1, select bank1
 12346  1C57  1303               	bcf	3,6	;RP1=0, select bank1
 12347  1C58  1318               	bcf	24,6	;volatile
 12348                           
 12349                           ;usart_pic16.c: 53: TXSTAbits.TXEN = 1;
 12350  1C59  1698               	bsf	24,5	;volatile
 12351                           
 12352                           ;usart_pic16.c: 54: TXSTAbits.SYNC = 0;
 12353  1C5A  1218               	bcf	24,4	;volatile
 12354                           
 12355                           ;usart_pic16.c: 55: TXSTAbits.BRGH = 1;
 12356  1C5B  1518               	bsf	24,2	;volatile
 12357                           
 12358                           ;usart_pic16.c: 58: RCSTAbits.SPEN = 1;
 12359  1C5C  1283               	bcf	3,5	;RP0=0, select bank0
 12360  1C5D  1303               	bcf	3,6	;RP1=0, select bank0
 12361  1C5E  1798               	bsf	24,7	;volatile
 12362                           
 12363                           ;usart_pic16.c: 59: RCSTAbits.RX9 = 0;
 12364  1C5F  1318               	bcf	24,6	;volatile
 12365                           
 12366                           ;usart_pic16.c: 60: RCSTAbits.CREN = 1;
 12367  1C60  1618               	bsf	24,4	;volatile
 12368                           
 12369                           ;usart_pic16.c: 61: RCSTAbits.ADDEN = 0;
 12370  1C61  1198               	bcf	24,3	;volatile
 12371                           
 12372                           ;usart_pic16.c: 64: RCIE = 1;
 12373  1C62  1683               	bsf	3,5	;RP0=1, select bank1
 12374  1C63  1303               	bcf	3,6	;RP1=0, select bank1
 12375  1C64  168C               	bsf	12,5	;volatile
 12376                           
 12377                           ;usart_pic16.c: 65: PEIE = 1;
 12378  1C65  170B               	bsf	11,6	;volatile
 12379                           
 12380                           ;usart_pic16.c: 67: (GIE = 1);
 12381  1C66  178B               	bsf	11,7	;volatile
 12382  1C67  0008               	return
 12383  1C68                     __end_of_USARTInit:	
 12384                           
 12385                           	psect	text44
 12386  1994                     __ptext44:	
 12387 ;; *************** function _Clear_Matrix *****************
 12388 ;; Defined at:
 12389 ;;		line 575 in file "teris_16f886.c"
 12390 ;; Parameters:    Size  Location     Type
 12391 ;;		None
 12392 ;; Auto vars:     Size  Location     Type
 12393 ;;		None
 12394 ;; Return value:  Size  Location     Type
 12395 ;;                  1    wreg      void 
 12396 ;; Registers used:
 12397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12398 ;; Tracked objects:
 12399 ;;		On entry : 0/0
 12400 ;;		On exit  : 0/0
 12401 ;;		Unchanged: 0/0
 12402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12403 ;;      Params:         0       0       0       0       0
 12404 ;;      Locals:         0       0       0       0       0
 12405 ;;      Temps:          0       0       0       0       0
 12406 ;;      Totals:         0       0       0       0       0
 12407 ;;Total ram usage:        0 bytes
 12408 ;; Hardware stack levels used:    1
 12409 ;; Hardware stack levels required when called:    5
 12410 ;; This function calls:
 12411 ;;		_memset
 12412 ;;		_printf_Screen
 12413 ;; This function is called by:
 12414 ;;		_main
 12415 ;; This function uses a non-reentrant model
 12416 ;;
 12417                           
 12418                           
 12419                           ;psect for function _Clear_Matrix
 12420  1994                     _Clear_Matrix:	
 12421                           
 12422                           ;teris_16f886.c: 577: memset(&g_matrix88, 0, sizeof(MATRIX88));
 12423                           
 12424                           ;incstack = 0
 12425                           ; Regs used in _Clear_Matrix: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12426  1994  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
 12427  1995  00F0               	movwf	memset@p1
 12428  1996  3001               	movlw	1
 12429  1997  00F1               	movwf	memset@p1+1
 12430  1998  3000               	movlw	0
 12431  1999  00F2               	movwf	memset@c
 12432  199A  00F3               	movwf	memset@c+1
 12433  199B  3040               	movlw	64
 12434  199C  00F4               	movwf	memset@n
 12435  199D  3000               	movlw	0
 12436  199E  00F5               	movwf	memset@n+1
 12437  199F  160A  158A  21D5  160A  158A  	fcall	_memset
 12438                           
 12439                           ;teris_16f886.c: 578: printf_Screen();
 12440  19A4  160A  118A  2001   	fcall	_printf_Screen
 12441  19A7  0008               	return
 12442  19A8                     __end_of_Clear_Matrix:	
 12443                           
 12444                           	psect	text45
 12445  1001                     __ptext45:	
 12446 ;; *************** function _printf_Screen *****************
 12447 ;; Defined at:
 12448 ;;		line 563 in file "teris_16f886.c"
 12449 ;; Parameters:    Size  Location     Type
 12450 ;;		None
 12451 ;; Auto vars:     Size  Location     Type
 12452 ;;		None
 12453 ;; Return value:  Size  Location     Type
 12454 ;;                  1    wreg      void 
 12455 ;; Registers used:
 12456 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12457 ;; Tracked objects:
 12458 ;;		On entry : 0/0
 12459 ;;		On exit  : 0/0
 12460 ;;		Unchanged: 0/0
 12461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12462 ;;      Params:         0       0       0       0       0
 12463 ;;      Locals:         0       0       0       0       0
 12464 ;;      Temps:          0       0       0       0       0
 12465 ;;      Totals:         0       0       0       0       0
 12466 ;;Total ram usage:        0 bytes
 12467 ;; Hardware stack levels used:    1
 12468 ;; Hardware stack levels required when called:    4
 12469 ;; This function calls:
 12470 ;;		_printf_MATRIX88
 12471 ;; This function is called by:
 12472 ;;		_Clear_Matrix
 12473 ;;		_main
 12474 ;; This function uses a non-reentrant model
 12475 ;;
 12476                           
 12477                           
 12478                           ;psect for function _printf_Screen
 12479  1001                     _printf_Screen:	
 12480                           
 12481                           ;teris_16f886.c: 565: printf_MATRIX88(&g_matrix88);
 12482                           
 12483                           ;incstack = 0
 12484                           ; Regs used in _printf_Screen: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12485  1001  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
 12486  1002  160A  158A  2182   	fcall	_printf_MATRIX88
 12487  1005  0008               	return
 12488  1006                     __end_of_printf_Screen:	
 12489                           
 12490                           	psect	text46
 12491  1982                     __ptext46:	
 12492 ;; *************** function _printf_MATRIX88 *****************
 12493 ;; Defined at:
 12494 ;;		line 557 in file "teris_16f886.c"
 12495 ;; Parameters:    Size  Location     Type
 12496 ;;  matrix88        1    wreg     PTR const struct .
 12497 ;;		 -> g_matrix88(64), 
 12498 ;; Auto vars:     Size  Location     Type
 12499 ;;  matrix88        1    0[BANK0 ] PTR const struct .
 12500 ;;		 -> g_matrix88(64), 
 12501 ;;  matrix7219      8    1[BANK0 ] struct .
 12502 ;; Return value:  Size  Location     Type
 12503 ;;                  1    wreg      void 
 12504 ;; Registers used:
 12505 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12506 ;; Tracked objects:
 12507 ;;		On entry : 0/0
 12508 ;;		On exit  : 0/0
 12509 ;;		Unchanged: 0/0
 12510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12511 ;;      Params:         0       0       0       0       0
 12512 ;;      Locals:         0       9       0       0       0
 12513 ;;      Temps:          1       0       0       0       0
 12514 ;;      Totals:         1       9       0       0       0
 12515 ;;Total ram usage:       10 bytes
 12516 ;; Hardware stack levels used:    1
 12517 ;; Hardware stack levels required when called:    3
 12518 ;; This function calls:
 12519 ;;		_MATRIX88_to_MATRIX7219
 12520 ;;		_printf_MATRIX7219
 12521 ;; This function is called by:
 12522 ;;		_printf_Screen
 12523 ;; This function uses a non-reentrant model
 12524 ;;
 12525                           
 12526                           
 12527                           ;psect for function _printf_MATRIX88
 12528  1982                     _printf_MATRIX88:	
 12529                           
 12530                           ;incstack = 0
 12531                           ; Regs used in _printf_MATRIX88: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12532                           ;printf_MATRIX88@matrix88 stored from wreg
 12533  1982  1283               	bcf	3,5	;RP0=0, select bank0
 12534  1983  1303               	bcf	3,6	;RP1=0, select bank0
 12535  1984  00A0               	movwf	printf_MATRIX88@matrix88
 12536                           
 12537                           ;teris_16f886.c: 559: MATRIX7219 matrix7219;
 12538                           ;teris_16f886.c: 560: MATRIX88_to_MATRIX7219(matrix88, &matrix7219);
 12539  1985  3021               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
 12540  1986  00F8               	movwf	??_printf_MATRIX88
 12541  1987  0878               	movf	??_printf_MATRIX88,w
 12542  1988  00F0               	movwf	MATRIX88_to_MATRIX7219@matrix7219
 12543  1989  0820               	movf	printf_MATRIX88@matrix88,w
 12544  198A  160A  158A  2468  160A  158A  	fcall	_MATRIX88_to_MATRIX7219
 12545                           
 12546                           ;teris_16f886.c: 561: printf_MATRIX7219(&matrix7219);
 12547  198F  3021               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
 12548  1990  160A  158A  21F0   	fcall	_printf_MATRIX7219
 12549  1993  0008               	return
 12550  1994                     __end_of_printf_MATRIX88:	
 12551                           
 12552                           	psect	text47
 12553  19F0                     __ptext47:	
 12554 ;; *************** function _printf_MATRIX7219 *****************
 12555 ;; Defined at:
 12556 ;;		line 506 in file "teris_16f886.c"
 12557 ;; Parameters:    Size  Location     Type
 12558 ;;  matrix          1    wreg     PTR const struct .
 12559 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12560 ;; Auto vars:     Size  Location     Type
 12561 ;;  matrix          1    4[COMMON] PTR const struct .
 12562 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12563 ;;  col             1    5[COMMON] unsigned char 
 12564 ;; Return value:  Size  Location     Type
 12565 ;;                  1    wreg      void 
 12566 ;; Registers used:
 12567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12568 ;; Tracked objects:
 12569 ;;		On entry : 0/0
 12570 ;;		On exit  : 0/0
 12571 ;;		Unchanged: 0/0
 12572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12573 ;;      Params:         0       0       0       0       0
 12574 ;;      Locals:         2       0       0       0       0
 12575 ;;      Temps:          2       0       0       0       0
 12576 ;;      Totals:         4       0       0       0       0
 12577 ;;Total ram usage:        4 bytes
 12578 ;; Hardware stack levels used:    1
 12579 ;; Hardware stack levels required when called:    2
 12580 ;; This function calls:
 12581 ;;		_Write_Byte
 12582 ;; This function is called by:
 12583 ;;		_printf_MATRIX88
 12584 ;; This function uses a non-reentrant model
 12585 ;;
 12586                           
 12587                           
 12588                           ;psect for function _printf_MATRIX7219
 12589  19F0                     _printf_MATRIX7219:	
 12590                           
 12591                           ;incstack = 0
 12592                           ; Regs used in _printf_MATRIX7219: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12593                           ;printf_MATRIX7219@matrix stored from wreg
 12594  19F0  00F4               	movwf	printf_MATRIX7219@matrix
 12595                           
 12596                           ;teris_16f886.c: 508: uint8_t col;
 12597                           ;teris_16f886.c: 510: for (col = 0; col < 8; col++)
 12598  19F1  01F5               	clrf	printf_MATRIX7219@col
 12599  19F2                     L41:	
 12600  19F2  3008               	movlw	8
 12601  19F3  0275               	subwf	printf_MATRIX7219@col,w
 12602  19F4  1803               	btfsc	3,0
 12603  19F5  0008               	return
 12604                           
 12605                           ;teris_16f886.c: 511: {
 12606                           ;teris_16f886.c: 512: Write_Byte(col + 1, matrix->col[col]);
 12607  19F6  0875               	movf	printf_MATRIX7219@col,w
 12608  19F7  0774               	addwf	printf_MATRIX7219@matrix,w
 12609  19F8  00F2               	movwf	??_printf_MATRIX7219
 12610  19F9  0872               	movf	??_printf_MATRIX7219,w
 12611  19FA  0084               	movwf	4
 12612  19FB  1383               	bcf	3,7	;select IRP bank0
 12613  19FC  0800               	movf	0,w
 12614  19FD  00F3               	movwf	??_printf_MATRIX7219+1
 12615  19FE  0873               	movf	??_printf_MATRIX7219+1,w
 12616  19FF  00F0               	movwf	Write_Byte@myValue
 12617  1A00  0875               	movf	printf_MATRIX7219@col,w
 12618  1A01  3E01               	addlw	1
 12619  1A02  160A  158A  2170  160A  158A  	fcall	_Write_Byte
 12620  1A07  3001               	movlw	1
 12621  1A08  00F2               	movwf	??_printf_MATRIX7219
 12622  1A09  0872               	movf	??_printf_MATRIX7219,w
 12623  1A0A  07F5               	addwf	printf_MATRIX7219@col,f
 12624  1A0B  29F2               	goto	L41
 12625  1A0C                     __end_of_printf_MATRIX7219:	
 12626                           
 12627                           	psect	text48
 12628  1970                     __ptext48:	
 12629 ;; *************** function _Write_Byte *****************
 12630 ;; Defined at:
 12631 ;;		line 471 in file "teris_16f886.c"
 12632 ;; Parameters:    Size  Location     Type
 12633 ;;  myColumn        1    wreg     unsigned char 
 12634 ;;  myValue         1    0[COMMON] unsigned char 
 12635 ;; Auto vars:     Size  Location     Type
 12636 ;;  myColumn        1    1[COMMON] unsigned char 
 12637 ;; Return value:  Size  Location     Type
 12638 ;;                  1    wreg      void 
 12639 ;; Registers used:
 12640 ;;		wreg, status,2, status,0, pclath, cstack
 12641 ;; Tracked objects:
 12642 ;;		On entry : 0/0
 12643 ;;		On exit  : 0/0
 12644 ;;		Unchanged: 0/0
 12645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12646 ;;      Params:         1       0       0       0       0
 12647 ;;      Locals:         1       0       0       0       0
 12648 ;;      Temps:          0       0       0       0       0
 12649 ;;      Totals:         2       0       0       0       0
 12650 ;;Total ram usage:        2 bytes
 12651 ;; Hardware stack levels used:    1
 12652 ;; Hardware stack levels required when called:    1
 12653 ;; This function calls:
 12654 ;;		_SPI1_write
 12655 ;; This function is called by:
 12656 ;;		_printf_MATRIX7219
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           
 12661                           ;psect for function _Write_Byte
 12662  1970                     _Write_Byte:	
 12663                           
 12664                           ;incstack = 0
 12665                           ; Regs used in _Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 12666                           ;Write_Byte@myColumn stored from wreg
 12667  1970  00F1               	movwf	Write_Byte@myColumn
 12668                           
 12669                           ;teris_16f886.c: 472: RA2 = 0;
 12670  1971  1283               	bcf	3,5	;RP0=0, select bank0
 12671  1972  1303               	bcf	3,6	;RP1=0, select bank0
 12672  1973  1105               	bcf	5,2	;volatile
 12673                           
 12674                           ;teris_16f886.c: 473: SPI1_write(myColumn);
 12675  1974  0871               	movf	Write_Byte@myColumn,w
 12676  1975  160A  118A  2000  160A  158A  	fcall	_SPI1_write
 12677                           
 12678                           ;teris_16f886.c: 474: SPI1_write(myValue);
 12679  197A  0870               	movf	Write_Byte@myValue,w
 12680  197B  160A  118A  2000   	fcall	_SPI1_write
 12681                           
 12682                           ;teris_16f886.c: 475: RA2 = 1;
 12683  197E  1283               	bcf	3,5	;RP0=0, select bank0
 12684  197F  1303               	bcf	3,6	;RP1=0, select bank0
 12685  1980  1505               	bsf	5,2	;volatile
 12686  1981  0008               	return
 12687  1982                     __end_of_Write_Byte:	
 12688                           
 12689                           	psect	text49
 12690  1000                     __ptext49:	
 12691 ;; *************** function _SPI1_write *****************
 12692 ;; Defined at:
 12693 ;;		line 413 in file "teris_16f886.c"
 12694 ;; Parameters:    Size  Location     Type
 12695 ;;  data            1    wreg     unsigned char 
 12696 ;; Auto vars:     Size  Location     Type
 12697 ;;  data            1    0[COMMON] unsigned char 
 12698 ;; Return value:  Size  Location     Type
 12699 ;;                  1    wreg      void 
 12700 ;; Registers used:
 12701 ;;		wreg
 12702 ;; Tracked objects:
 12703 ;;		On entry : 0/0
 12704 ;;		On exit  : 0/0
 12705 ;;		Unchanged: 0/0
 12706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12707 ;;      Params:         0       0       0       0       0
 12708 ;;      Locals:         0       0       0       0       0
 12709 ;;      Temps:          0       0       0       0       0
 12710 ;;      Totals:         0       0       0       0       0
 12711 ;;Total ram usage:        0 bytes
 12712 ;; Hardware stack levels used:    1
 12713 ;; This function calls:
 12714 ;;		Nothing
 12715 ;; This function is called by:
 12716 ;;		_Write_Byte
 12717 ;;		_max7219_init1
 12718 ;; This function uses a non-reentrant model
 12719 ;;
 12720                           
 12721                           
 12722                           ;psect for function _SPI1_write
 12723  1000                     _SPI1_write:	
 12724                           
 12725                           ;incstack = 0
 12726                           ; Regs used in _SPI1_write: [wreg]
 12727  1000  0008               	return
 12728  1001                     __end_of_SPI1_write:	
 12729                           
 12730                           	psect	text50
 12731  1C68                     __ptext50:	
 12732 ;; *************** function _MATRIX88_to_MATRIX7219 *****************
 12733 ;; Defined at:
 12734 ;;		line 515 in file "teris_16f886.c"
 12735 ;; Parameters:    Size  Location     Type
 12736 ;;  matrix88        1    wreg     PTR const struct .
 12737 ;;		 -> g_matrix88(64), 
 12738 ;;  matrix7219      1    0[COMMON] PTR struct .
 12739 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12740 ;; Auto vars:     Size  Location     Type
 12741 ;;  matrix88        1    4[COMMON] PTR const struct .
 12742 ;;		 -> g_matrix88(64), 
 12743 ;;  row             1    6[COMMON] unsigned char 
 12744 ;;  col             1    7[COMMON] unsigned char 
 12745 ;;  mask            1    5[COMMON] unsigned char 
 12746 ;; Return value:  Size  Location     Type
 12747 ;;                  1    wreg      void 
 12748 ;; Registers used:
 12749 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12750 ;; Tracked objects:
 12751 ;;		On entry : 0/0
 12752 ;;		On exit  : 0/0
 12753 ;;		Unchanged: 0/0
 12754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12755 ;;      Params:         1       0       0       0       0
 12756 ;;      Locals:         4       0       0       0       0
 12757 ;;      Temps:          3       0       0       0       0
 12758 ;;      Totals:         8       0       0       0       0
 12759 ;;Total ram usage:        8 bytes
 12760 ;; Hardware stack levels used:    1
 12761 ;; This function calls:
 12762 ;;		Nothing
 12763 ;; This function is called by:
 12764 ;;		_printf_MATRIX88
 12765 ;; This function uses a non-reentrant model
 12766 ;;
 12767                           
 12768                           
 12769                           ;psect for function _MATRIX88_to_MATRIX7219
 12770  1C68                     _MATRIX88_to_MATRIX7219:	
 12771                           
 12772                           ;incstack = 0
 12773                           ; Regs used in _MATRIX88_to_MATRIX7219: [wreg-fsr0h+status,2+status,0]
 12774                           ;MATRIX88_to_MATRIX7219@matrix88 stored from wreg
 12775  1C68  00F4               	movwf	MATRIX88_to_MATRIX7219@matrix88
 12776                           
 12777                           ;teris_16f886.c: 517: uint8_t mask = 0x80;
 12778  1C69  3080               	movlw	128
 12779  1C6A  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12780  1C6B  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12781  1C6C  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
 12782                           
 12783                           ;teris_16f886.c: 519: for(uint8_t col = 0; col < 8; col++)
 12784  1C6D  01F7               	clrf	MATRIX88_to_MATRIX7219@col
 12785  1C6E                     L42:	
 12786  1C6E  3008               	movlw	8
 12787  1C6F  0277               	subwf	MATRIX88_to_MATRIX7219@col,w
 12788  1C70  1803               	btfsc	3,0
 12789  1C71  0008               	return
 12790                           
 12791                           ;teris_16f886.c: 520: {
 12792                           ;teris_16f886.c: 521: mask = 0x80;
 12793  1C72  3080               	movlw	128
 12794  1C73  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12795  1C74  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12796  1C75  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
 12797                           
 12798                           ;teris_16f886.c: 522: matrix7219->col[col] = 0;
 12799  1C76  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 12800  1C77  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
 12801  1C78  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12802  1C79  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12803  1C7A  0084               	movwf	4
 12804  1C7B  1383               	bcf	3,7	;select IRP bank0
 12805  1C7C  0180               	clrf	0
 12806                           
 12807                           ;teris_16f886.c: 523: for(uint8_t row = 0; row < 8; row++)
 12808  1C7D  01F6               	clrf	MATRIX88_to_MATRIX7219@row
 12809  1C7E  3008               	movlw	8
 12810  1C7F  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
 12811  1C80  1803               	btfsc	3,0
 12812  1C81  2CAB               	goto	l3420
 12813  1C82                     l3410:	
 12814                           
 12815                           ;teris_16f886.c: 524: {
 12816                           ;teris_16f886.c: 525: if(matrix88->data[row][col] == 1)
 12817  1C82  0876               	movf	MATRIX88_to_MATRIX7219@row,w
 12818  1C83  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12819  1C84  3002               	movlw	2
 12820  1C85                     u4165:	
 12821  1C85  1003               	clrc
 12822  1C86  0DF1               	rlf	??_MATRIX88_to_MATRIX7219,f
 12823  1C87  3EFF               	addlw	-1
 12824  1C88  1D03               	skipz
 12825  1C89  2C85               	goto	u4165
 12826  1C8A  1003               	clrc
 12827  1C8B  0D71               	rlf	??_MATRIX88_to_MATRIX7219,w
 12828  1C8C  0774               	addwf	MATRIX88_to_MATRIX7219@matrix88,w
 12829  1C8D  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
 12830  1C8E  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 12831  1C8F  0772               	addwf	??_MATRIX88_to_MATRIX7219+1,w
 12832  1C90  00F3               	movwf	??_MATRIX88_to_MATRIX7219+2
 12833  1C91  0873               	movf	??_MATRIX88_to_MATRIX7219+2,w
 12834  1C92  0084               	movwf	4
 12835  1C93  1783               	bsf	3,7	;select IRP bank2
 12836  1C94  0300               	decf	0,w
 12837  1C95  1D03               	btfss	3,2
 12838  1C96  2CA1               	goto	l3414
 12839                           
 12840                           ;teris_16f886.c: 526: {
 12841                           ;teris_16f886.c: 527: matrix7219->col[col] |= mask;
 12842  1C97  0875               	movf	MATRIX88_to_MATRIX7219@mask,w
 12843  1C98  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12844  1C99  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 12845  1C9A  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
 12846  1C9B  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
 12847  1C9C  0872               	movf	??_MATRIX88_to_MATRIX7219+1,w
 12848  1C9D  0084               	movwf	4
 12849  1C9E  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12850  1C9F  1383               	bcf	3,7	;select IRP bank0
 12851  1CA0  0480               	iorwf	0,f
 12852  1CA1                     l3414:	
 12853                           
 12854                           ;teris_16f886.c: 528: }
 12855                           ;teris_16f886.c: 529: mask >>= 1;
 12856  1CA1  1003               	clrc
 12857  1CA2  0CF5               	rrf	MATRIX88_to_MATRIX7219@mask,f
 12858  1CA3  3001               	movlw	1
 12859  1CA4  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12860  1CA5  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12861  1CA6  07F6               	addwf	MATRIX88_to_MATRIX7219@row,f
 12862  1CA7  3008               	movlw	8
 12863  1CA8  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
 12864  1CA9  1C03               	skipc
 12865  1CAA  2C82               	goto	l3410
 12866  1CAB                     l3420:	
 12867  1CAB  3001               	movlw	1
 12868  1CAC  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12869  1CAD  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12870  1CAE  07F7               	addwf	MATRIX88_to_MATRIX7219@col,f
 12871  1CAF  2C6E               	goto	L42
 12872  1CB0                     __end_of_MATRIX88_to_MATRIX7219:	
 12873                           
 12874                           	psect	text51
 12875  19D5                     __ptext51:	
 12876 ;; *************** function _memset *****************
 12877 ;; Defined at:
 12878 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
 12879 ;; Parameters:    Size  Location     Type
 12880 ;;  p1              2    0[COMMON] PTR void 
 12881 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
 12882 ;;  c               2    2[COMMON] int 
 12883 ;;  n               2    4[COMMON] unsigned int 
 12884 ;; Auto vars:     Size  Location     Type
 12885 ;;  p               2    6[COMMON] PTR unsigned char 
 12886 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
 12887 ;; Return value:  Size  Location     Type
 12888 ;;                  2    0[COMMON] PTR void 
 12889 ;; Registers used:
 12890 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12891 ;; Tracked objects:
 12892 ;;		On entry : 0/0
 12893 ;;		On exit  : 0/0
 12894 ;;		Unchanged: 0/0
 12895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12896 ;;      Params:         6       0       0       0       0
 12897 ;;      Locals:         2       0       0       0       0
 12898 ;;      Temps:          0       0       0       0       0
 12899 ;;      Totals:         8       0       0       0       0
 12900 ;;Total ram usage:        8 bytes
 12901 ;; Hardware stack levels used:    1
 12902 ;; This function calls:
 12903 ;;		Nothing
 12904 ;; This function is called by:
 12905 ;;		_Clear_Matrix
 12906 ;;		_delete_row
 12907 ;; This function uses a non-reentrant model
 12908 ;;
 12909                           
 12910                           
 12911                           ;psect for function _memset
 12912  19D5                     _memset:	
 12913                           
 12914                           ;incstack = 0
 12915                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
 12916  19D5  0870               	movf	memset@p1,w
 12917  19D6  00F6               	movwf	memset@p
 12918  19D7  0871               	movf	memset@p1+1,w
 12919  19D8  00F7               	movwf	memset@p+1
 12920  19D9                     l3430:	
 12921  19D9  3001               	movlw	1
 12922  19DA  02F4               	subwf	memset@n,f
 12923  19DB  3000               	movlw	0
 12924  19DC  1C03               	skipc
 12925  19DD  03F5               	decf	memset@n+1,f
 12926  19DE  02F5               	subwf	memset@n+1,f
 12927  19DF  0A74               	incf	memset@n,w
 12928  19E0  1903               	btfsc	3,2
 12929  19E1  0A75               	incf	memset@n+1,w
 12930  19E2  1903               	btfsc	3,2
 12931  19E3  0008               	return
 12932  19E4  0876               	movf	memset@p,w
 12933  19E5  0084               	movwf	4
 12934  19E6  1383               	bcf	3,7
 12935  19E7  1877               	btfsc	memset@p+1,0
 12936  19E8  1783               	bsf	3,7
 12937  19E9  0872               	movf	memset@c,w
 12938  19EA  0080               	movwf	0
 12939  19EB  3001               	movlw	1
 12940  19EC  07F6               	addwf	memset@p,f
 12941  19ED  1803               	skipnc
 12942  19EE  0AF7               	incf	memset@p+1,f
 12943  19EF  29D9               	goto	l3430
 12944  19F0                     __end_of_memset:	
 12945                           ;	Return value of _memset is never used
 12946                           
 12947  007E                     btemp	set	126	;btemp
 12948  007E                     wtemp	set	126
 12949  007E                     wtemp0	set	126
 12950  0080                     wtemp1	set	128
 12951  0082                     wtemp2	set	130
 12952  0084                     wtemp3	set	132
 12953  0086                     wtemp4	set	134
 12954  0088                     wtemp5	set	136
 12955  007F                     wtemp6	set	127
 12956  007E                     ttemp	set	126
 12957  007E                     ttemp0	set	126
 12958  0081                     ttemp1	set	129
 12959  0084                     ttemp2	set	132
 12960  0087                     ttemp3	set	135
 12961  007F                     ttemp4	set	127
 12962  007E                     ltemp	set	126
 12963  007E                     ltemp0	set	126
 12964  0082                     ltemp1	set	130
 12965  0086                     ltemp2	set	134
 12966  0080                     ltemp3	set	128


Data Sizes:
    Strings     1214
    Constant    414
    Data        38
    BSS         144
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     75      80
    BANK1            80     73      80
    BANK3            96      0      76
    BANK2            96      0      96

Pointer List with Targets:

    is_right_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_left_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    memset@p1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memset@p	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    sprintf$680	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_65(CODE[17]), STR_64(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_63(CODE[14]), STR_61(CODE[24]), STR_59(CODE[35]), STR_58(CODE[36]), 
		 -> STR_57(CODE[35]), STR_56(CODE[36]), STR_55(CODE[35]), STR_54(CODE[36]), 
		 -> STR_53(CODE[23]), STR_52(CODE[35]), STR_51(CODE[36]), STR_50(CODE[35]), 
		 -> STR_49(CODE[36]), STR_48(CODE[35]), STR_47(CODE[38]), STR_46(CODE[16]), 
		 -> STR_45(CODE[37]), STR_44(CODE[36]), STR_42(CODE[17]), STR_41(CODE[33]), 
		 -> STR_40(CODE[52]), STR_39(CODE[22]), STR_38(CODE[17]), STR_37(CODE[16]), 
		 -> STR_36(CODE[11]), STR_35(CODE[26]), STR_34(CODE[26]), STR_30(CODE[30]), 
		 -> STR_29(CODE[30]), STR_28(CODE[30]), STR_25(CODE[24]), STR_24(CODE[24]), 
		 -> STR_22(CODE[25]), STR_11(CODE[42]), STR_10(CODE[30]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 32
		 -> g_debug(BANK3[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    g_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    find_best_solution@temp_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_holes_after_merge@matrix	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    get_high_after_merge@matrix	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_high@matrix	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    left_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    left_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    evaluate@matrix	PTR const struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge1@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    merge1@matrix88_in	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge1@matrix88_out	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    clear@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    clear@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    fall_off@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    fall_off@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_right_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_left_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_valid@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_valid@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    hit_land@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    hit_land@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    is_row_empty@matrix	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    delete_matrix@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memcpy	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    delete_row@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    is_row_full@matrix	PTR const struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memset	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    printf_MATRIX88@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    printf_console_MATRIX88@matrix	PTR const struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    MATRIX88_to_MATRIX7219@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    MATRIX88_to_MATRIX7219@matrix7219	PTR struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    printf_MATRIX7219@matrix	PTR const struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    sp__get_MATRIX44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_console_cur_MATRIX44@matrix	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_console_MATRIX44@matrix	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    debug_int3@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_41(CODE[33]), STR_40(CODE[52]), 

    debug_int2@f	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_59(CODE[35]), STR_58(CODE[36]), STR_57(CODE[35]), STR_56(CODE[36]), 
		 -> STR_55(CODE[35]), STR_54(CODE[36]), STR_52(CODE[35]), STR_51(CODE[36]), 
		 -> STR_50(CODE[35]), STR_49(CODE[36]), STR_48(CODE[35]), STR_47(CODE[38]), 
		 -> STR_45(CODE[37]), STR_44(CODE[36]), STR_35(CODE[26]), STR_34(CODE[26]), 
		 -> STR_30(CODE[30]), STR_29(CODE[30]), STR_28(CODE[30]), STR_25(CODE[24]), 
		 -> STR_24(CODE[24]), STR_11(CODE[42]), 

    debug_int1@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_63(CODE[14]), STR_61(CODE[24]), STR_53(CODE[23]), STR_46(CODE[16]), 
		 -> STR_42(CODE[17]), STR_39(CODE[22]), STR_38(CODE[17]), STR_37(CODE[16]), 
		 -> STR_36(CODE[11]), STR_22(CODE[25]), STR_10(CODE[30]), 

    debug_line@str	PTR const unsigned char  size(2) Largest target is 45
		 -> STR_62(CODE[13]), STR_60(CODE[13]), STR_43(CODE[45]), STR_33(CODE[20]), 
		 -> STR_32(CODE[19]), STR_31(CODE[6]), STR_27(CODE[35]), STR_26(CODE[8]), 
		 -> STR_23(CODE[35]), STR_21(CODE[21]), STR_20(CODE[1]), STR_17(CODE[29]), 
		 -> STR_16(CODE[21]), STR_15(CODE[1]), STR_12(CODE[21]), STR_9(CODE[21]), 
		 -> STR_8(CODE[1]), STR_5(CODE[29]), 

    debug_str@str	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_19(CODE[2]), STR_18(CODE[2]), STR_14(CODE[2]), STR_13(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[2]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 45
		 -> STR_62(CODE[13]), STR_60(CODE[13]), STR_43(CODE[45]), STR_33(CODE[20]), 
		 -> STR_32(CODE[19]), STR_31(CODE[6]), STR_27(CODE[35]), STR_26(CODE[8]), 
		 -> STR_23(CODE[35]), STR_21(CODE[21]), STR_20(CODE[1]), STR_19(CODE[2]), 
		 -> STR_18(CODE[2]), STR_17(CODE[29]), STR_16(CODE[21]), STR_15(CODE[1]), 
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_9(CODE[21]), 
		 -> STR_8(CODE[1]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[29]), 
		 -> STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), g_debug(BANK3[32]), 
		 -> STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    _find_best_solution->_printf_console_Screen
    _is_right_boundary->_debug_line
    _printf_console_cur_MATRIX44->_printf_console_MATRIX44
    _printf_console_MATRIX44->_debug_line
    _printf_console_MATRIX44->_debug_str
    _printf_console_Screen->_printf_console_MATRIX88
    _printf_console_MATRIX88->_debug_line
    _printf_console_MATRIX88->_debug_str
    _debug_str->_USARTWriteString
    _merge1->_memcpy
    _left_most->_is_left_boundary
    _is_left_boundary->_debug_line
    _debug_line->_USARTWriteString
    _delete_matrix->_delete_row
    _delete_row->_memcpy
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USARTWriteString->_USARTWriteChar
    _char_info_index_rand->___awmod
    _rand->___lmul
    _printf_Screen->_printf_MATRIX88
    _printf_MATRIX88->_MATRIX88_to_MATRIX7219
    _printf_MATRIX7219->_Write_Byte

Critical Paths under _main in BANK0

    _main->_find_best_solution
    _hit_land->_debug_int2
    _find_best_solution->_get_holes_after_merge
    _right_most->_debug_int1
    _printf_console_cur_MATRIX44->_printf_console_MATRIX44
    _printf_console_Screen->_printf_console_MATRIX88
    _left_most->_debug_int1
    _is_valid->_debug_int2
    _get_holes_after_merge->_debug_int3
    _get_high_after_merge->_debug_int3
    _debug_int3->_sprintf
    _get_high->_debug_int1
    _fall_off->_debug_int2
    _debug_int2->_sprintf
    _evaluate->_debug_int1
    _delete_matrix->_debug_int1
    _debug_int1->_sprintf
    _char_info_index_rand->___awmod
    ___awmod->_rand
    _printf_Screen->_printf_MATRIX88

Critical Paths under _main in BANK1

    _main->_find_best_solution

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    12      4  167856
                                             59 BANK0     16    12      4
                       _Clear_Matrix
                          _USARTInit
                             ___bmul
               _char_info_index_rand
                              _clear
                         _debug_int1
                         _debug_line
                      _delete_matrix
                 _find_best_solution
                           _hit_land
                              _merge
                      _printf_Screen
            _printf_console_MATRIX88
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _merge                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _hit_land                                            11     7      4   12876
                                             38 BANK0     11     7      4
                         _debug_int2
                         _debug_line
 ---------------------------------------------------------------------------------
 (1) _find_best_solution                                  80    80      0  129193
                                             52 BANK0      7     7      0
                                              0 BANK1     73    73      0
                             ___bmul
                         _debug_int1
                         _debug_int2
                         _debug_line
                      _delete_matrix
                           _evaluate
                           _fall_off
                           _get_high
               _get_high_after_merge
              _get_holes_after_merge
                           _is_valid
                          _left_most
                             _merge1
            _printf_console_MATRIX44
            _printf_console_MATRIX88
              _printf_console_Screen
        _printf_console_cur_MATRIX44
                         _right_most
 ---------------------------------------------------------------------------------
 (2) _right_most                                           6     3      3    9929
                                             36 BANK0      6     3      3
                         _debug_int1
                  _is_right_boundary
 ---------------------------------------------------------------------------------
 (3) _is_right_boundary                                   10     7      3    2399
                                              6 COMMON     7     4      3
                                              0 BANK0      3     3      0
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _printf_console_cur_MATRIX44                         14    12      2    4993
                                              9 BANK0     14    12      2
                             ___bmul
            _printf_console_MATRIX44
 ---------------------------------------------------------------------------------
 (3) _printf_console_MATRIX44                             16    12      4    4331
                                              6 COMMON     7     3      4
                                              0 BANK0      9     9      0
                         _debug_line
                          _debug_str
 ---------------------------------------------------------------------------------
 (2) _printf_console_Screen                                1     1      0    3662
                                             13 COMMON     1     1      0
            _printf_console_MATRIX88
 ---------------------------------------------------------------------------------
 (1) _printf_console_MATRIX88                             10     8      2    3631
                                              6 COMMON     7     5      2
                                              0 BANK0      3     3      0
                         _debug_line
                          _debug_str
 ---------------------------------------------------------------------------------
 (2) _debug_str                                            3     1      2    1198
                                              3 COMMON     3     1      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _merge1                                              14     9      5    1128
                                              0 BANK0     14     9      5
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _left_most                                            5     2      3    9929
                                             36 BANK0      5     2      3
                         _debug_int1
                   _is_left_boundary
 ---------------------------------------------------------------------------------
 (3) _is_left_boundary                                    11     8      3    2399
                                              6 COMMON     8     5      3
                                              0 BANK0      3     3      0
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _is_valid                                            11     7      4   13062
                                             38 BANK0     11     7      4
                         _debug_int2
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _debug_line                                           3     1      2    1978
                                              3 COMMON     3     1      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _get_holes_after_merge                               12    12      0   15261
                                             40 BANK0     12    12      0
                         _debug_int1
                         _debug_int3
 ---------------------------------------------------------------------------------
 (2) _get_high_after_merge                                 9     7      2    6874
                                             40 BANK0      9     7      2
                         _debug_int3
 ---------------------------------------------------------------------------------
 (3) _debug_int3                                           9     1      8    6394
                                             31 BANK0      9     1      8
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _get_high                                             4     4      0    7656
                                             36 BANK0      4     4      0
                         _debug_int1
                       _is_row_empty
 ---------------------------------------------------------------------------------
 (3) _is_row_empty                                         6     5      1     192
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (2) _fall_off                                            11     7      4   10963
                                             38 BANK0     11     7      4
                         _debug_int2
 ---------------------------------------------------------------------------------
 (2) _debug_int2                                           7     1      6   10133
                                             31 BANK0      7     1      6
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _evaluate                                            12    10      2    7829
                                             36 BANK0     12    10      2
                         _debug_int1
 ---------------------------------------------------------------------------------
 (2) _delete_matrix                                        6     4      2    8964
                                             36 BANK0      6     4      2
                         _debug_int1
                         _delete_row
                        _is_row_full
 ---------------------------------------------------------------------------------
 (3) _is_row_full                                          9     6      3     193
                                              0 COMMON     9     6      3
 ---------------------------------------------------------------------------------
 (3) _delete_row                                          10     7      3    1232
                                             11 COMMON     3     0      3
                                              0 BANK0      7     7      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6     388
                                              0 COMMON    11     5      6
 ---------------------------------------------------------------------------------
 (3) _debug_int1                                           5     1      4    7242
                                             31 BANK0      5     1      4
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             35    27      8    4973
                                              0 BANK0     31    23      8
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     738
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     480
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     405
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     0      2     746
                                              1 COMMON     2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _clear                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _char_info_index_rand                                 0     0      0     706
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     198
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     508
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      75
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Clear_Matrix                                         0     0      0    1047
                             _memset
                      _printf_Screen
 ---------------------------------------------------------------------------------
 (1) _printf_Screen                                        0     0      0     683
                    _printf_MATRIX88
 ---------------------------------------------------------------------------------
 (2) _printf_MATRIX88                                     10    10      0     683
                                              8 COMMON     1     1      0
                                              0 BANK0      9     9      0
             _MATRIX88_to_MATRIX7219
                  _printf_MATRIX7219
 ---------------------------------------------------------------------------------
 (3) _printf_MATRIX7219                                    4     4      0     236
                                              2 COMMON     4     4      0
                         _Write_Byte
 ---------------------------------------------------------------------------------
 (4) _Write_Byte                                           2     1      1      97
                                              0 COMMON     2     1      1
                         _SPI1_write
 ---------------------------------------------------------------------------------
 (5) _SPI1_write                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _MATRIX88_to_MATRIX7219                               8     7      1     351
                                              0 COMMON     8     7      1
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     364
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Clear_Matrix
     _memset
     _printf_Screen
       _printf_MATRIX88
         _MATRIX88_to_MATRIX7219
         _printf_MATRIX7219
           _Write_Byte
             _SPI1_write
   _USARTInit
   ___bmul
   _char_info_index_rand
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _clear
   _debug_int1
     _USARTWriteString
       _USARTWriteChar
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _debug_line
     _USARTWriteString
       _USARTWriteChar
   _delete_matrix
     _debug_int1
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _delete_row
       _memcpy
       _memset
     _is_row_full
   _find_best_solution
     ___bmul
     _debug_int1
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_int2
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _delete_matrix
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _delete_row
         _memcpy
         _memset
       _is_row_full
     _evaluate
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _fall_off
       _debug_int2
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _get_high
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_row_empty
     _get_high_after_merge
       _debug_int3
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _get_holes_after_merge
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _debug_int3
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _is_valid
       _debug_int2
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _debug_line
         _USARTWriteString
           _USARTWriteChar
     _left_most
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_left_boundary
         _debug_line
           _USARTWriteString
             _USARTWriteChar
     _merge1
       _memcpy
     _printf_console_MATRIX44
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
     _printf_console_MATRIX88
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
     _printf_console_Screen
       _printf_console_MATRIX88
         _debug_line
           _USARTWriteString
             _USARTWriteChar
         _debug_str
           _USARTWriteString
             _USARTWriteChar
     _printf_console_cur_MATRIX44
       ___bmul
       _printf_console_MATRIX44
         _debug_line
           _USARTWriteString
             _USARTWriteChar
         _debug_str
           _USARTWriteString
             _USARTWriteChar
     _right_most
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_right_boundary
         _debug_line
           _USARTWriteString
             _USARTWriteChar
   _hit_land
     _debug_int2
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_line
       _USARTWriteString
         _USARTWriteChar
   _merge
   _printf_Screen
     _printf_MATRIX88
       _MATRIX88_to_MATRIX7219
       _printf_MATRIX7219
         _Write_Byte
           _SPI1_write
   _printf_console_MATRIX88
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _debug_str
       _USARTWriteString
         _USARTWriteChar
   _srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      4C       9       79.2%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      60      11      100.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     49      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4B      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     15A      12        0.0%
ABS                  0      0     15A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Aug 27 11:08:26 2016

                          __CFG_CP$ON 0000                                     pc 0002  
                      ___bmul@product 0072         get_holes_after_merge@num_hole 004E  
                                  l36 1918                                    l29 1C56  
                         __CFG_CPD$ON 0000                     merge1@matrix88_in 0023  
      __end_of_MATRIX88_to_MATRIX7219 1CB0                                    fsr 0004  
                 ___wmul@multiplicand 0072                    USARTInit@baud_rate 0070  
               ?_char_info_index_rand 0070                           get_high@row 0047  
                         __CFG_LVP$ON 0000                                   l333 119D  
                                 l415 0103                                   l522 02F7  
                                 l426 00FA                                   l620 06A4  
                                 l604 0635                                   l524 02F9  
                                 l525 02FB                                   l550 03F8  
                                 l526 02FD                                   l391 1BB1  
                                 l528 0318                                   l384 1B7F  
                                 l545 03F5                                   l642 0799  
                                 l538 03BF                                   l731 1A16  
                                 l580 051B                                   l549 03F7  
                                 l575 04F3                                   l584 0543  
                                 _GIE 005F                                   _RA1 0029  
                                 _RA2 002A                    merge1@matrix88_out 0024  
                                 fsr0 0004                                   indf 0000  
                        ___awmod@sign 002C                          __CFG_IESO$ON 0000  
                         _sprintf$680 002F                           _sprintf$673 002B  
                         _sprintf$674 002D                        is_row_full@col 0078  
                      is_row_full@row 0072                                  l3020 1C11  
                                l3012 1BED                                  l3014 1BFB  
                                l3024 1C1C                                  l3120 040F  
                                l3112 03F1                                  l3042 1B6C  
                                l3130 0423                                  l3114 03FA  
                                l3106 03BE                                  l3036 1B50  
                                l3300 067E                                  l3220 056B  
                                l3124 041E                                  l3038 1B5E  
                                l3046 1B77                                  l3310 0698  
                                l3230 0593                                  l3222 057A  
                                l3150 0467                                  l3134 042E  
                                l3142 044D                                  l3126 0420  
                                l3070 0302                                  l4040 1D55  
                                l3320 06B1                                  l3304 0683  
                                l3160 0488                                  l3152 0474  
                                l3136 043B                                  l3410 1C82  
                                l4050 1D69                                  l4210 1DD1  
                                l3250 05DF                                  l3242 05C8  
                                l3226 0587                                  l3146 045C  
                                l3074 031E                                  l3066 02F2  
                                l5002 1CDF                                  l3420 1CAB  
                                l4036 1D4E                                  l3244 05CC  
                                l3236 05A7                                  l3156 047F  
                                l3164 048D                                  l5004 1CB7  
                                l5020 1302                                  l3430 19D9  
                                l3414 1CA1                                  l4070 1C2B  
                                l4062 1D8A                                  l4054 1D77  
                                l4214 1DD9                                  l4206 1D9A  
                                l3350 073E                                  l3342 06E6  
                                l3326 06C0                                  l3262 0623  
                                l3182 04E7                                  l3166 04B9  
                                l3094 038F                                  l3078 0332  
                                l3086 0371                                  l5006 1CE6  
                                l5102 1231                                  l4230 1DE9  
                                l4072 1C2D                                  l4048 1D5B  
                                l3344 0713                                  l3360 0777  
                                l3336 06DC                                  l3264 0627  
                                l3256 0600                                  l3440 1ACB  
                                l5040 137A                                  l4074 1C2F  
                                l4058 1D82                                  l3354 0751  
                                l3258 0604                                  l3178 04DB  
                                l5106 1237                                  l5210 1D38  
                                l5202 1D02                                  l5026 1308  
                                l4234 1E21                                  l4068 1C29  
                                l3364 0782                                  l3276 063E  
                                l3292 0668                                  l5300 00DD  
                                l5036 1353                                  l5132 1FFB  
                                l5124 1FBD                                  l4078 1C34  
                                l3286 065A                                  l3374 02CA  
                                l5150 0E90                                  l5214 1D40  
                                l5230 1054                                  l5046 1390  
                                l5054 13BF                                  l5062 13D0  
                                l4238 1E29                                  l3368 07A6  
                                l3376 07BE                                  l3544 1B40  
                                l5160 0EC4                                  l5144 0E86  
                                l5080 11A9                                  l5320 0154  
                                l5128 1FF3                                  l3538 1B1F  
                                l5154 0EA6                                  l5170 0EE7  
                                l5090 11F7                                  l5074 11A3  
                                l5242 10B0                                  l5058 13CA  
                                l3548 1B48                                  l5316 0149  
                                l5412 15C7                                  l5340 1257  
                                l3662 100E                                  l5166 0EDF  
                                l5238 10A7                                  l5262 0041  
                                l5254 0036                                  l5350 12A4  
                                l5334 1251                                  l3584 1A90  
                                l5272 0066                                  l5184 1BA7  
                                l5512 171D                                  l3666 1024  
                                l2970 194C                                  l5098 1226  
                                l3578 1A79                                  l5282 008C  
                                l5194 1BDE                                  l5362 12DD  
                                l3588 1A98                                  l5292 00D2  
                                l5540 17BE                                  l5532 17AE  
                                l5700 020F                                  l2990 1950  
                                l4910 1193                                  l5550 17FC  
                                l5534 14B7                                  l5358 12D2  
                                l5366 12E3                                  l2976 1A0E  
                                l4920 1EE2                                  l5536 17B7  
                                l5810 1C4C                                  l2994 1956  
                                l4834 0F14                                  l5474 1686  
                                l5538 1428                                  l5714 0281  
                                l5812 1C51                                  l4908 1175  
                                l4940 1F30                                  l4852 0FE2  
                                l4828 0F0E                                  l5548 17F4  
                                l5492 16D5                                  l5806 1C42  
                                l4926 1EE8                                  l4870 10CC  
                                l4846 0FCD                                  l5808 1C47  
                                l4936 1F25                                  l4944 1F36  
                                l4880 10F4                                  l4960 1F47  
                                l4858 0FF7                                  l4970 1F86  
                                l4954 1F41                                  l5682 0194  
                                l4796 1A2D                                  l4876 10D1  
                                l4892 111C                                  l5684 0199  
                                l4886 1108                                  l4974 1F91  
                                l5696 018A                                  l4978 1F97  
                                STR_1 0E67                          __CFG_WDTE$ON 0000  
                                STR_2 0E67                                  STR_3 0E67  
                                STR_4 0E67                                  STR_5 0C82  
                                STR_6 0E6A                                  STR_7 0E6C  
                                STR_8 0E69                                  STR_9 0D93  
                         main@hit_res 006A                                  u3315 1A17  
                                u3405 1C08                                  u3325 1A1E  
                                u3415 1C12                                  u4165 1C85  
                                u3445 1B53                                  u3605 0408  
                                u3375 1BF0                                  u4095 07A4  
                                u3615 0415                                  u3465 1B64  
                                u3395 1BFC                                  u3475 1B6D  
                                _PEIE 005E                                  u3725 0514  
                                u4445 1B22                                  u5185 1E75  
                                u3905 0613                                  u3755 053C  
                                u4555 1A7C                                  _RCIE 0465  
                                u4735 1026                                  u3855 05B8  
                                u5705 1D78                                  u4745 102E  
                                u3785 0564                                  u7225 11D1  
                                u7145 1378                                  u8025 161A  
                                u7315 1FE5                                  u8115 174E  
                                u8035 162A                                  u7165 13A7  
                                u3895 05F5                                  u7415 0EC7  
                                u7255 120C                                  u7095 1330  
                                u6705 0F8C                                  u5675 1D5E  
                                u5915 1DC4                                  u6715 0FB4  
                                u7605 0047                                  u5695 1D6F  
                                u7375 0E96                                  u7385 0EA9  
                                u7625 0060                                  u6835 1139  
                                u7715 008F                                  u6685 0F4F  
                                u6855 1149                                  u7815 00E0  
                                u7735 00A8                                  u5975 1E13  
                                u8367 026F                                  u6865 1159  
                                u7665 006D                                  u6785 10D4  
                                u8377 02B5                                  u6875 117A  
                                u7755 00BD                                  u7685 0086  
                                u7935 128C                                  u7945 12AE  
                                u7875 0126                                  u6995 1F7A  
                        __CFG_WRT$OFF 0000                __end_of_USARTWriteChar 191F  
                       __CFG_FCMEN$ON 0000                                  _main 0167  
                                _rand 1E2E                                  btemp 007E  
                       __CFG_BOREN$ON 0000                                  ltemp 007E  
                                start 0000                                  ttemp 007E  
                                wtemp 007E                     ___bmul@multiplier 0073  
                       __CFG_MCLRE$ON 0000       find_best_solution@tem_sub_index 00E7  
           ??_printf_console_MATRIX44 0020             ??_printf_console_MATRIX88 0078  
                     is_row_empty@col 0075                       is_row_empty@row 0070  
          get_high_after_merge@matrix 0048                                 ?_main 005B  
                               ?_rand 0020                                 STR_10 0C0A  
                               STR_11 0A11                                 STR_20 0E69  
                               STR_12 0D7E                                 STR_21 0D93  
                               STR_22 0CF0                                 STR_30 0C64  
                               STR_31 0E61                                 STR_23 0BC6  
                               STR_32 0DBC                                 STR_24 0D21  
                               STR_40 09B0                                 STR_33 0DA8  
                               STR_25 0D39                                 STR_17 0C9F  
                               STR_41 0BE9                                 STR_18 0E6A  
                               STR_26 0E59                                 STR_42 0DF1  
                               STR_34 0CBC                                 STR_50 0B5D  
                               STR_19 0E6C                                 STR_35 0CD6  
                               STR_27 0BA3                                 STR_51 0AAA  
                               STR_43 09E4                                 STR_36 0E4E  
                               STR_60 0E41                                 STR_28 0C28  
                               STR_52 0B3A                                 STR_44 0B16  
                     __end_of___awmod 1D8F                                 STR_37 0E23  
                               STR_53 0D51                                 STR_61 0D09  
                               STR_29 0C46                                 STR_45 0A61  
                               STR_62 0E41                                 STR_46 0E13  
                               STR_38 0E02                                 STR_54 0AF2  
                               STR_55 0B5D                                 STR_63 0E33  
                               STR_39 0D68                                 STR_47 0A3B  
                               STR_56 0AAA                                 STR_64 0DCF  
                               STR_48 0B80                                 STR_57 0B3A  
                               STR_65 0DE0                                 STR_49 0ACE  
                               STR_58 0A86                                 STR_59 0B80  
                    USARTWriteChar@ch 0070                       __end_of___lwdiv 1C21  
                     __end_of___lwmod 1B7C                                 _RCREG 001A  
                               _SPBRG 0099                      _is_left_boundary 1ED9  
                               _TXREG 0019                                 _UQEnd 006B  
                 ___lmul@multiplicand 0074                           ?_SPI1_write 0070  
                    debug_int1@enable 0043                                 _clear 1D8F  
                    debug_int2@enable 0045                       __end_of_dpowers 0828  
                               _cur_x 00EE                                 _cur_y 006D  
                               _merge 1DDE                      debug_int3@enable 0047  
                     __end_of_isdigit 194E                                 _randx 01D4  
                               _srand 0E6F                          ?_is_row_full 0070  
                     ??_printf_Screen 0079                                 pclath 000A  
                               ltemp0 007E                                 ltemp1 0082  
                               ltemp2 0086                                 ltemp3 0080  
                  __size_of_USARTInit 0047                       ?_USARTWriteChar 0070  
                               ttemp0 007E                                 ttemp1 0081  
                               ttemp2 0084                                 ttemp3 0087  
                               ttemp4 007F                                 status 0003  
                         hit_land@col 004F                                 wtemp0 007E  
                               wtemp1 0080                                 wtemp2 0082  
                               wtemp3 0084                                 wtemp4 0086  
                               wtemp5 0088                                 wtemp6 007F  
                     __end_of_sprintf 07C3       find_best_solution@temp_matrix88 00A5  
                         hit_land@row 0050                        get_high@matrix 0046  
                     __initialization 07C3                          __end_of_main 02C3  
                        __end_of_rand 1E83                ??_char_info_index_rand 007E  
                              ??_main 005F                                ??_rand 0022  
                         evaluate@col 004E                           evaluate@row 004F  
            find_best_solution@temp_x 00E8                                ?_clear 0070  
     __end_of_printf_console_MATRIX44 1000       __end_of_printf_console_MATRIX88 1125  
                              ?_merge 0070                                ?_srand 0070  
               __size_of_Clear_Matrix 0014                 __end_of_delete_matrix 1CF9  
                              _URBuff 0110                      __end_of_fall_off 123C  
                      __CFG_PWRTE$OFF 0000                      debug_line@enable 0075  
               get_high_after_merge@y 004E                      __end_of_get_high 1D42  
                              ___bmul 194E                   __size_of_SPI1_write 0001  
                              ___lmul 1006                                ___wmul 1A0C  
                           ??___awmod 007D                      __end_of_hit_land 12ED  
                           ??___lwdiv 0074                      __end_of_evaluate 0EFA  
                           ??___lwmod 007C                                _merge1 1F99  
            __end_of_USARTWriteString 1A50                                _memcpy 1AC3  
                              _memset 19D5          ?_printf_console_cur_MATRIX44 0029  
                    __end_of_is_valid 13DA                                clear@x 0078  
                              clear@y 0070                       ___awmod@divisor 0027  
                              _temp_y 0198              __size_of_printf_MATRIX88 0012  
                     ___awmod@counter 002B                     __end_of_USARTInit 1C68  
                       ?_is_row_empty 0070           __size_of_find_best_solution 0426  
                              merge@x 0078                                merge@y 0070  
        printf_console_cur_MATRIX44@x 0029          printf_console_cur_MATRIX44@y 002A  
                           ??_isdigit 0070                           is_valid@col 0050  
                         is_valid@row 004F                          _Clear_Matrix 1994  
                              srand@x 0070                     _is_right_boundary 1F38  
                           ??_sprintf 0028               ??_get_holes_after_merge 0048  
                  ?_is_right_boundary 0076                        evaluate@matrix 004D  
             __end_of__initialization 07FC                        merge1@matrix44 0021  
               _printf_console_Screen 1933                        _g_cur_matrix44 0195  
                 ??_is_right_boundary 0079                   ___bmul@multiplicand 0070  
                      __pcstackCOMMON 0070                          __pidataBANK0 0E6E  
                        __pidataBANK1 1915                          __pidataBANK3 1A50  
                       __end_of_clear 1DDE                            _Write_Byte 1970  
                       __end_of_merge 1E2E                         __end_of_srand 0E78  
                  __size_of_debug_str 000C                        ??_is_row_empty 0071  
       ??_printf_console_cur_MATRIX44 002B             __end_of_is_right_boundary 1F99  
       __size_of_get_high_after_merge 0070            get_holes_after_merge@start 0051  
                             ??_clear 0074                               ??_merge 0074  
                        sprintf@width 0039                               ??_srand 0072  
                        evaluate@full 004C                            __pbssBANK0 006D  
                          __pbssBANK1 00E9                            __pbssBANK2 0110  
                          __pbssBANK3 0190                          evaluate@risk 004A  
                  __size_of_left_most 0032                     is_row_full@matrix 0070  
   printf_console_cur_MATRIX44@enable 0034                  __size_of_is_row_full 0030  
                          _debug_int1 0003                            _debug_int2 1A9A  
                          _debug_int3 1AED                            _debug_line 19A8  
   printf_console_cur_MATRIX44@matrix 0035                   delete_matrix@matrix 0044  
                    is_valid@matrix44 0047                      is_valid@matrix88 0049  
            __end_of_is_left_boundary 1F38                            _g_matrix44 0830  
                          _delete_row 1125                            _g_matrix88 0130  
                          __pmaintext 0167                               ?___bmul 0070  
                             ?___lmul 0070                               ?___wmul 0070  
                             ?_merge1 0020                               ?_memcpy 0070  
                             ?_memset 0070                        ___lmul@product 0079  
           get_holes_after_merge@stop 004F                          ??_SPI1_write 0070  
                           ?_fall_off 0046                     ??_printf_MATRIX88 0078  
           printf_MATRIX88@matrix7219 0021                      ??_USARTWriteChar 0070  
                is_right_boundary@col 0022                  is_right_boundary@row 0021  
                           ?_get_high 0070                    USARTWriteInt@F1617 0190  
                          __stringtab 0800           printf_console_Screen@enable 007D  
                           ?_hit_land 0046                     __end_of_debug_str 1933  
                             _UQFront 006C  __size_of_printf_console_cur_MATRIX44 0056  
                           ?_evaluate 0044                ?_printf_console_Screen 0070  
                           ?_is_valid 0046                         debug_line@str 0073  
 find_best_solution@temp_cur_matrix44 00E5                       __size_of___bmul 0011  
                     __size_of___lmul 003F                           ?_Write_Byte 0070  
                             ___awmod 1D42                    __end_of_SPI1_write 1001  
                     __size_of___wmul 0021                               ___lwdiv 1BE5  
                             ___lwmod 1B4A                           right_most@x 0049  
                             _g_debug 0199                       __size_of_merge1 0067  
                     __size_of_memcpy 002A                             _ANSELbits 0188  
                     __size_of_memset 001B                     __end_of_left_most 1BAE  
                             __ptext1 0E6F                               __ptext2 1DDE  
                             __ptext3 123C                               __ptext4 13DA  
                             __ptext5 1BAE                               __ptext6 1F38  
                             __ptext7 1E83                               __ptext8 0EFA  
                             __ptext9 1933                     __end_of_hexpowers 0830  
                    fall_off@matrix44 0047                      fall_off@matrix88 0049  
                             _dpowers 081E                               _isdigit 1940  
                    ___awmod@dividend 0029            __size_of_is_right_boundary 0061  
                          ??_fall_off 004A                               _sprintf 02C3  
                          ??_get_high 0044                               clrloop0 1920  
                end_of_initialization 07FC                     __end_of_octpowers 081E  
                   _printf_MATRIX7219 19F0                            ??_hit_land 004A  
                             merge1@x 0029                               merge1@y 0020  
                          ??_evaluate 0046                               memcpy@d 0077  
                             memcpy@n 0074                               memcpy@s 0079  
               __end_of_printf_Screen 1006                               memset@c 0072  
                __end_of_is_row_empty 1A9A                               memset@n 0074  
                             memset@p 0076                           ?_debug_int1 003F  
                         ?_debug_int2 003F                           ?_debug_int3 003F  
                          ??_is_valid 004A                           ?_debug_line 0073  
                  ?_printf_MATRIX7219 0070                        SPI1_write@data 0070  
                          _right_most 1BAE              ?_printf_console_MATRIX44 0076  
            ?_printf_console_MATRIX88 0076              ??_MATRIX88_to_MATRIX7219 0071  
                         ?_delete_row 007B                         clear@matrix44 0071  
                       clear@matrix88 0073            printf_console_MATRIX44@col 007C  
                           _RCSTAbits 0018            printf_console_MATRIX44@row 007B  
                   Write_Byte@myValue 0070                   ??_printf_MATRIX7219 0072  
          printf_console_MATRIX88@col 0022                            _temp_count 00EB  
          printf_console_MATRIX88@row 0021                            _temp_pre_x 01DB  
                        __pstringtext 0800                     ?_USARTWriteString 0071  
       __size_of_char_info_index_rand 0018                    ??_USARTWriteString 0073  
           is_right_boundary@matrix44 0076             is_right_boundary@matrix88 0078  
                           _USARTInit 1C21                             _TRISAbits 0085  
           __end_of_printf_MATRIX7219 1A0C                     _tem_pre_sub_index 01DA  
                 __size_of_Write_Byte 0012                    right_most@matrix44 0044  
                  right_most@matrix88 0046        __size_of_get_holes_after_merge 013F  
       printf_console_MATRIX44@enable 007A         __end_of_get_holes_after_merge 0167  
               find_best_solution@res 00A4         printf_console_MATRIX44@matrix 0078  
                           _TXSTAbits 0098         printf_console_MATRIX88@enable 0020  
                      __end_of___bmul 195F            __end_of_find_best_solution 1800  
                      __end_of___lmul 1045                        __end_of___wmul 1A2D  
       printf_console_MATRIX88@matrix 0076                        __end_of_merge1 2000  
                      __end_of_memcpy 1AED                        __end_of_memset 19F0  
    MATRIX88_to_MATRIX7219@matrix7219 0070                   __size_of_debug_int1 0025  
                 __size_of_debug_int2 0029                   __size_of_debug_int3 002D  
              __size_of_delete_matrix 0049                   __size_of_debug_line 0015  
                 start_initialization 07C3                            ?_USARTInit 0070  
                 __size_of_delete_row 0075                            left_most@x 0048  
                       delete_row@len 0024                         delete_row@row 007D  
            __CFG_FOSC$INTRC_NOCLKOUT 0000                    is_right_boundary@x 0020  
        __end_of_get_high_after_merge 10B5                           ?_right_most 0044  
                      _temp_pre_count 0197                     ?_is_left_boundary 0076  
     __size_of_MATRIX88_to_MATRIX7219 0048           get_holes_after_merge@matrix 0050  
                            ??___bmul 0071                              ??___lmul 0078  
                  ??_is_left_boundary 0079                              ??___wmul 0074  
                          init_fetch0 195F                    is_row_empty@matrix 0074  
                         __pdataBANK0 006F                           __pdataBANK1 00EE  
                         __pdataBANK3 01B9                     _g_char_info_index 006E  
                     _printf_MATRIX88 1982                              ??_merge1 0025  
                            ??_memcpy 0076                              ??_memset 0076  
                         _g_char_info 01B9     find_best_solution@left_most_index 00A2  
                           ___latbits 0002                         __pcstackBANK0 0020  
                       __pcstackBANK1 00A0            __size_of_printf_MATRIX7219 001C  
               __size_of_is_row_empty 0027               ??_printf_console_Screen 007D  
                       ??_is_row_full 0073                     __size_of_fall_off 00A2  
                   __size_of_get_high 0049                           sprintf@flag 003D  
                         sprintf@prec 0038                     __size_of_hit_land 00B1  
                       _delete_matrix 1CB0                             __pnvBANK0 006B  
                   __size_of_evaluate 0082                             _debug_str 1927  
                  delete_matrix@count 0048                     __size_of_is_valid 00ED  
                    ___lwdiv@dividend 0072               printf_MATRIX7219@matrix 0074  
                    delete_matrix@row 0049                          ??_Write_Byte 0071  
                            ?___awmod 0027                              ?___lwdiv 0070  
                            ?___lwmod 0078   __end_of_printf_console_cur_MATRIX44 1ED9  
         _printf_console_cur_MATRIX44 1E83                          _is_row_empty 1A73  
                        debug_int2@i1 0041                          debug_int2@i2 0043  
                        debug_int3@i1 0041                          debug_int3@i2 0043  
                        debug_int3@i3 0045                       debug_str@enable 0075  
                            ?_isdigit 0070                     is_left_boundary@x 0020  
                         ??_USARTInit 0072                _MATRIX88_to_MATRIX7219 1C68  
                           _left_most 1B7C                   __size_of_right_most 0037  
                           _hexpowers 0828                      ___lwdiv@quotient 0075  
                      __size_of_clear 004F                              ?_sprintf 0020  
                printf_MATRIX7219@col 0075                        __size_of_merge 0050  
                      __size_of_srand 0009                          debug_str@str 0073  
                  __end_of_Write_Byte 1982                          ??_debug_int1 007E  
                        ??_debug_int2 007E                          ??_debug_int3 007E  
                        ??_debug_line 0075                        ?_delete_matrix 0044  
                      ___wmul@product 0074                             fall_off@x 004E  
                           fall_off@y 0046                      delete_row@matrix 007B  
                           clear_ram0 191F                             _octpowers 0812  
                 __end_of_is_row_full 1B4A                            ?_debug_str 0073  
             __end_of_printf_MATRIX88 1994                          ??_delete_row 0020  
                            _PIR1bits 000C                             _temp_high 00EC  
             _find_best_solution$1195 00A0                             _temp_hole 00ED  
                           _temp_risk 00E9                     left_most@matrix44 0044  
                   left_most@matrix88 0046                           __stringbase 0812  
                   ___wmul@multiplier 0070      __size_of_printf_console_MATRIX44 0106  
    __size_of_printf_console_MATRIX88 0070                    __end_of_debug_int1 0028  
                  __end_of_debug_int2 1AC3                    __end_of_debug_int3 1B1A  
                  __end_of_debug_line 19BD                         ?_Clear_Matrix 0070  
                _get_high_after_merge 1045                            ?_left_most 0044  
                  __end_of_g_matrix44 09B0                    __end_of_delete_row 119A  
                   ___lmul@multiplier 0070                   is_left_boundary@col 0022  
                 is_left_boundary@row 0021                         merge@matrix44 0071  
                       merge@matrix88 0073             __size_of_USARTWriteString 0023  
                           hit_land@x 004E                             hit_land@y 0046  
        __end_of_char_info_index_rand 19D5               get_high_after_merge@col 004F  
                           merge1@col 002D                             merge1@len 002A  
             get_high_after_merge@row 0050                             merge1@row 002C  
             __size_of_USARTWriteChar 0008                         _temp_pre_high 00EF  
                       _temp_pre_hole 006F                         _temp_pre_risk 01D8  
                           is_valid@x 004E                             is_valid@y 0046  
                    __size_of___awmod 004D                      __size_of___lwdiv 003C  
                    __size_of___lwmod 0032                    __end_of__stringtab 0812  
                         _isdigit$866 0070                __size_of_printf_Screen 0005  
                          sprintf@idx 0031                            sprintf@len 0033  
                          sprintf@val 0036                        ??_Clear_Matrix 0079  
               ?_get_high_after_merge 0048              is_left_boundary@matrix44 0076  
            is_left_boundary@matrix88 0078                      __size_of_isdigit 000E  
                            _fall_off 119A                       ___lwdiv@divisor 0070  
                     ___lwdiv@counter 0077                    _find_best_solution 13DA  
                            __ptext10 10B5                              __ptext11 1927  
                            __ptext20 1CF9                              __ptext12 1F99  
                            __ptext21 1A73                              __ptext13 1B7C  
                            __ptext30 02C3                              __ptext22 119A  
                            __ptext14 1ED9                              __ptext31 1940  
                            __ptext23 1A9A                              __ptext15 12ED  
                            __ptext40 1E2E                              __ptext32 1A0C  
                            __ptext24 0E78                              __ptext16 19A8  
                            __ptext41 1006                              __ptext33 1B4A  
                            __ptext25 1CB0                              __ptext17 0028  
                            __ptext50 1C68                              __ptext42 1D42  
                            __ptext34 1BE5                              __ptext26 1B1A  
                            __ptext18 1045                              __ptext51 19D5  
                            __ptext43 1C21                              __ptext35 194E  
                            __ptext27 1125                              __ptext19 1AED  
                            __ptext44 1994                              __ptext36 1A2D  
                            __ptext28 1AC3                              __ptext45 1001  
                            __ptext37 1917                              __ptext29 0003  
                            __ptext46 1982                              __ptext38 1D8F  
                            __ptext47 19F0                              __ptext39 19BD  
                            __ptext48 1970                              __ptext49 1000  
                   __CFG_BOR4V$BOR21V 0000                              _get_high 1CF9  
                         _is_row_full 1B1A        MATRIX88_to_MATRIX7219@matrix88 0074  
                    __size_of_sprintf 0500                       ??_delete_matrix 0046  
                         debug_int1@f 003F                           debug_int1@i 0041  
                         debug_int2@f 003F                           debug_int3@f 003F  
                            _hit_land 123C                              _evaluate 0E78  
                 ?_find_best_solution 0070                         __size_of_main 015C  
                            _is_valid 12ED                         __size_of_rand 0055  
                    hit_land@matrix44 0047                      hit_land@matrix88 0049  
                            clear@col 007A                              clear@row 0079  
                        ??_right_most 0047                 _get_holes_after_merge 0028  
                         ??_debug_str 0075                      ?_printf_MATRIX88 0070  
                            main@Seed 0068                              main@argc 005B  
                            main@argv 005D              get_holes_after_merge@col 0052  
            get_holes_after_merge@row 0053                  ??_find_best_solution 0054  
                         fall_off@col 004F                           fall_off@row 0050  
           __size_of_is_left_boundary 005F                           delete_row@i 0026  
                         ??_left_most 0047                              memcpy@d1 0070  
                            memcpy@s1 0072                              merge@col 007A  
                            merge@row 0079                    __end_of_right_most 1BE5  
                            init_ram0 1963                              isdigit@c 0071  
                            memset@p1 0070                             sprintf@ap 0035  
                           sprintf@cp 0032        __size_of_printf_console_Screen 000D  
                           sprintf@sp 003C         __end_of_printf_console_Screen 1940  
                    ___lwmod@dividend 007A                         _printf_Screen 1001  
            printf_console_MATRIX44@x 0076              printf_console_MATRIX44@y 0077  
                           stringcode 080A                    Write_Byte@myColumn 0071  
                 USARTWriteString@str 0071               printf_MATRIX88@matrix88 0020  
             _printf_console_MATRIX44 0EFA               _printf_console_MATRIX88 10B5  
                _char_info_index_rand 19BD               ?_MATRIX88_to_MATRIX7219 0070  
              ??_get_high_after_merge 004A                              sprintf@c 003B  
                            sprintf@f 0020    find_best_solution@right_most_index 00A3  
                     ___lwmod@divisor 0078                       ___lwmod@counter 007D  
                            stringtab 0800                            _SPI1_write 1000  
                    _USARTWriteString 1A2D                        ?_printf_Screen 0070  
              ?_get_holes_after_merge 0070                        _USARTWriteChar 1917  
          MATRIX88_to_MATRIX7219@mask 0075             MATRIX88_to_MATRIX7219@col 0077  
                __end_of_Clear_Matrix 19A8             MATRIX88_to_MATRIX7219@row 0076  
