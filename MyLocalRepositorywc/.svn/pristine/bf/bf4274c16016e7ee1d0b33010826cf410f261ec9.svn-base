

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Aug 27 14:17:47 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	dabs	1,0x7E,2
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000E                     	;# 
    89  000F                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  001D                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0086                     	;# 
   111  0087                     	;# 
   112  0089                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  008F                     	;# 
   117  0090                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  0105                     	;# 
   136  0107                     	;# 
   137  0108                     	;# 
   138  0109                     	;# 
   139  010C                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  010F                     	;# 
   144  0185                     	;# 
   145  0187                     	;# 
   146  0188                     	;# 
   147  0189                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  0105                     	;# 
   212  0107                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  0185                     	;# 
   221  0187                     	;# 
   222  0188                     	;# 
   223  0189                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226                           
   227                           	psect	idataBANK0
   228  1852                     __pidataBANK0:	
   229                           
   230                           ;initializer for _temp_pre_risk
   231  1852  34FF               	retlw	255
   232  1853  34FF               	retlw	255
   233                           
   234                           ;initializer for _temp_pre_x
   235  1854  340F               	retlw	15
   236                           
   237                           	psect	idataBANK1
   238  184F                     __pidataBANK1:	
   239                           
   240                           ;initializer for _cur_x
   241  184F  3402               	retlw	2
   242                           
   243                           ;initializer for _temp_pre_high
   244  1850  34FF               	retlw	255
   245                           
   246                           ;initializer for _temp_pre_hole
   247  1851  34FF               	retlw	255
   248                           
   249                           	psect	idataBANK3
   250  193F                     __pidataBANK3:	
   251                           
   252                           ;initializer for _g_char_info
   253  193F  3400               	retlw	0
   254  1940  3400               	retlw	0
   255  1941  3402               	retlw	2
   256  1942  3402               	retlw	2
   257  1943  3400               	retlw	0
   258  1944  3402               	retlw	2
   259  1945  3404               	retlw	4
   260  1946  3400               	retlw	0
   261  1947  3402               	retlw	2
   262  1948  3406               	retlw	6
   263  1949  3400               	retlw	0
   264  194A  3404               	retlw	4
   265  194B  340A               	retlw	10
   266  194C  3400               	retlw	0
   267  194D  3404               	retlw	4
   268  194E  340E               	retlw	14
   269  194F  3400               	retlw	0
   270  1950  3401               	retlw	1
   271  1951  340F               	retlw	15
   272  1952  3400               	retlw	0
   273  1953  3404               	retlw	4
   274  1954  3413               	retlw	19
   275  1955  3400               	retlw	0
   276  1956  3401               	retlw	1
   277  1957  3414               	retlw	20
   278  1958  3400               	retlw	0
   279  1959  3404               	retlw	4
   280                           
   281                           ;initializer for _randx
   282  195A  3401               	retlw	1
   283  195B  3400               	retlw	0
   284  195C  3400               	retlw	0
   285  195D  3400               	retlw	0
   286                           
   287                           ;initializer for _tem_pre_sub_index
   288  195E  340F               	retlw	15
   289                           
   290                           	psect	stringtext
   291  0800                     __pstringtext:	
   292  0800                     stringtab:	
   293  0800                     __stringtab:	
   294                           
   295                           ;	String table - string pointers are 2 bytes each
   296  0800  1BFF               	btfsc	btemp+1,7
   297  0801  280A               	ljmp	stringcode
   298  0802  1383               	bcf	3,7
   299  0803  187F               	btfsc	btemp+1,0
   300  0804  1783               	bsf	3,7
   301  0805  0800               	movf	0,w
   302  0806  0A84               	incf	4,f
   303  0807  1903               	skipnz
   304  0808  0AFF               	incf	btemp+1,f
   305  0809  0008               	return
   306  080A                     stringcode:	
   307  080A  087F               	movf	btemp+1,w
   308  080B  397F               	andlw	127
   309  080C  008A               	movwf	10
   310  080D  0804               	movf	4,w
   311  080E  0A84               	incf	4,f
   312  080F  1903               	skipnz
   313  0810  0AFF               	incf	btemp+1,f
   314  0811  0082               	movwf	2
   315  0812                     __stringbase:	
   316  0812                     __end_of__stringtab:	
   317  0812                     _octpowers:	
   318  0812  3401               	retlw	1
   319  0813  3400               	retlw	0
   320  0814  3408               	retlw	8
   321  0815  3400               	retlw	0
   322  0816  3440               	retlw	64
   323  0817  3400               	retlw	0
   324  0818  3400               	retlw	0
   325  0819  3402               	retlw	2
   326  081A  3400               	retlw	0
   327  081B  3410               	retlw	16
   328  081C  3400               	retlw	0
   329  081D  3480               	retlw	128
   330  081E                     __end_of_octpowers:	
   331  081E                     _dpowers:	
   332  081E  3401               	retlw	1
   333  081F  3400               	retlw	0
   334  0820  340A               	retlw	10
   335  0821  3400               	retlw	0
   336  0822  3464               	retlw	100
   337  0823  3400               	retlw	0
   338  0824  34E8               	retlw	232
   339  0825  3403               	retlw	3
   340  0826  3410               	retlw	16
   341  0827  3427               	retlw	39
   342  0828                     __end_of_dpowers:	
   343  0828                     _hexpowers:	
   344  0828  3401               	retlw	1
   345  0829  3400               	retlw	0
   346  082A  3410               	retlw	16
   347  082B  3400               	retlw	0
   348  082C  3400               	retlw	0
   349  082D  3401               	retlw	1
   350  082E  3400               	retlw	0
   351  082F  3410               	retlw	16
   352  0830                     __end_of_hexpowers:	
   353  0830                     _g_matrix44:	
   354  0830  3400               	retlw	0
   355  0831  3401               	retlw	1
   356  0832  3400               	retlw	0
   357  0833  3400               	retlw	0
   358  0834  3400               	retlw	0
   359  0835  3401               	retlw	1
   360  0836  3400               	retlw	0
   361  0837  3400               	retlw	0
   362  0838  3400               	retlw	0
   363  0839  3401               	retlw	1
   364  083A  3400               	retlw	0
   365  083B  3400               	retlw	0
   366  083C  3400               	retlw	0
   367  083D  3401               	retlw	1
   368  083E  3400               	retlw	0
   369  083F  3400               	retlw	0
   370  0840  3400               	retlw	0
   371  0841  3400               	retlw	0
   372  0842  3400               	retlw	0
   373  0843  3400               	retlw	0
   374  0844  3401               	retlw	1
   375  0845  3401               	retlw	1
   376  0846  3401               	retlw	1
   377  0847  3401               	retlw	1
   378  0848  3400               	retlw	0
   379  0849  3400               	retlw	0
   380  084A  3400               	retlw	0
   381  084B  3400               	retlw	0
   382  084C  3400               	retlw	0
   383  084D  3400               	retlw	0
   384  084E  3400               	retlw	0
   385  084F  3400               	retlw	0
   386  0850  3400               	retlw	0
   387  0851  3401               	retlw	1
   388  0852  3401               	retlw	1
   389  0853  3400               	retlw	0
   390  0854  3401               	retlw	1
   391  0855  3401               	retlw	1
   392  0856  3400               	retlw	0
   393  0857  3400               	retlw	0
   394  0858  3400               	retlw	0
   395  0859  3400               	retlw	0
   396  085A  3400               	retlw	0
   397  085B  3400               	retlw	0
   398  085C  3400               	retlw	0
   399  085D  3400               	retlw	0
   400  085E  3400               	retlw	0
   401  085F  3400               	retlw	0
   402  0860  3400               	retlw	0
   403  0861  3401               	retlw	1
   404  0862  3400               	retlw	0
   405  0863  3400               	retlw	0
   406  0864  3400               	retlw	0
   407  0865  3401               	retlw	1
   408  0866  3401               	retlw	1
   409  0867  3400               	retlw	0
   410  0868  3400               	retlw	0
   411  0869  3400               	retlw	0
   412  086A  3401               	retlw	1
   413  086B  3400               	retlw	0
   414  086C  3400               	retlw	0
   415  086D  3400               	retlw	0
   416  086E  3400               	retlw	0
   417  086F  3400               	retlw	0
   418  0870  3401               	retlw	1
   419  0871  3401               	retlw	1
   420  0872  3400               	retlw	0
   421  0873  3400               	retlw	0
   422  0874  3400               	retlw	0
   423  0875  3401               	retlw	1
   424  0876  3401               	retlw	1
   425  0877  3400               	retlw	0
   426  0878  3400               	retlw	0
   427  0879  3400               	retlw	0
   428  087A  3400               	retlw	0
   429  087B  3400               	retlw	0
   430  087C  3400               	retlw	0
   431  087D  3400               	retlw	0
   432  087E  3400               	retlw	0
   433  087F  3400               	retlw	0
   434  0880  3400               	retlw	0
   435  0881  3401               	retlw	1
   436  0882  3400               	retlw	0
   437  0883  3400               	retlw	0
   438  0884  3401               	retlw	1
   439  0885  3401               	retlw	1
   440  0886  3400               	retlw	0
   441  0887  3400               	retlw	0
   442  0888  3401               	retlw	1
   443  0889  3400               	retlw	0
   444  088A  3400               	retlw	0
   445  088B  3400               	retlw	0
   446  088C  3400               	retlw	0
   447  088D  3400               	retlw	0
   448  088E  3400               	retlw	0
   449  088F  3400               	retlw	0
   450  0890  3400               	retlw	0
   451  0891  3400               	retlw	0
   452  0892  3400               	retlw	0
   453  0893  3400               	retlw	0
   454  0894  3401               	retlw	1
   455  0895  3401               	retlw	1
   456  0896  3401               	retlw	1
   457  0897  3400               	retlw	0
   458  0898  3400               	retlw	0
   459  0899  3400               	retlw	0
   460  089A  3401               	retlw	1
   461  089B  3400               	retlw	0
   462  089C  3400               	retlw	0
   463  089D  3400               	retlw	0
   464  089E  3400               	retlw	0
   465  089F  3400               	retlw	0
   466  08A0  3400               	retlw	0
   467  08A1  3401               	retlw	1
   468  08A2  3401               	retlw	1
   469  08A3  3400               	retlw	0
   470  08A4  3400               	retlw	0
   471  08A5  3401               	retlw	1
   472  08A6  3400               	retlw	0
   473  08A7  3400               	retlw	0
   474  08A8  3400               	retlw	0
   475  08A9  3401               	retlw	1
   476  08AA  3400               	retlw	0
   477  08AB  3400               	retlw	0
   478  08AC  3400               	retlw	0
   479  08AD  3400               	retlw	0
   480  08AE  3400               	retlw	0
   481  08AF  3400               	retlw	0
   482  08B0  3401               	retlw	1
   483  08B1  3400               	retlw	0
   484  08B2  3400               	retlw	0
   485  08B3  3400               	retlw	0
   486  08B4  3401               	retlw	1
   487  08B5  3401               	retlw	1
   488  08B6  3401               	retlw	1
   489  08B7  3400               	retlw	0
   490  08B8  3400               	retlw	0
   491  08B9  3400               	retlw	0
   492  08BA  3400               	retlw	0
   493  08BB  3400               	retlw	0
   494  08BC  3400               	retlw	0
   495  08BD  3400               	retlw	0
   496  08BE  3400               	retlw	0
   497  08BF  3400               	retlw	0
   498  08C0  3400               	retlw	0
   499  08C1  3401               	retlw	1
   500  08C2  3400               	retlw	0
   501  08C3  3400               	retlw	0
   502  08C4  3400               	retlw	0
   503  08C5  3401               	retlw	1
   504  08C6  3400               	retlw	0
   505  08C7  3400               	retlw	0
   506  08C8  3401               	retlw	1
   507  08C9  3401               	retlw	1
   508  08CA  3400               	retlw	0
   509  08CB  3400               	retlw	0
   510  08CC  3400               	retlw	0
   511  08CD  3400               	retlw	0
   512  08CE  3400               	retlw	0
   513  08CF  3400               	retlw	0
   514  08D0  3400               	retlw	0
   515  08D1  3400               	retlw	0
   516  08D2  3400               	retlw	0
   517  08D3  3400               	retlw	0
   518  08D4  3401               	retlw	1
   519  08D5  3401               	retlw	1
   520  08D6  3401               	retlw	1
   521  08D7  3400               	retlw	0
   522  08D8  3401               	retlw	1
   523  08D9  3400               	retlw	0
   524  08DA  3400               	retlw	0
   525  08DB  3400               	retlw	0
   526  08DC  3400               	retlw	0
   527  08DD  3400               	retlw	0
   528  08DE  3400               	retlw	0
   529  08DF  3400               	retlw	0
   530  08E0  3401               	retlw	1
   531  08E1  3401               	retlw	1
   532  08E2  3400               	retlw	0
   533  08E3  3400               	retlw	0
   534  08E4  3400               	retlw	0
   535  08E5  3401               	retlw	1
   536  08E6  3400               	retlw	0
   537  08E7  3400               	retlw	0
   538  08E8  3400               	retlw	0
   539  08E9  3401               	retlw	1
   540  08EA  3400               	retlw	0
   541  08EB  3400               	retlw	0
   542  08EC  3400               	retlw	0
   543  08ED  3400               	retlw	0
   544  08EE  3400               	retlw	0
   545  08EF  3400               	retlw	0
   546  08F0  3400               	retlw	0
   547  08F1  3400               	retlw	0
   548  08F2  3401               	retlw	1
   549  08F3  3400               	retlw	0
   550  08F4  3401               	retlw	1
   551  08F5  3401               	retlw	1
   552  08F6  3401               	retlw	1
   553  08F7  3400               	retlw	0
   554  08F8  3400               	retlw	0
   555  08F9  3400               	retlw	0
   556  08FA  3400               	retlw	0
   557  08FB  3400               	retlw	0
   558  08FC  3400               	retlw	0
   559  08FD  3400               	retlw	0
   560  08FE  3400               	retlw	0
   561  08FF  3400               	retlw	0
   562  0900  3400               	retlw	0
   563  0901  3401               	retlw	1
   564  0902  3400               	retlw	0
   565  0903  3400               	retlw	0
   566  0904  3400               	retlw	0
   567  0905  3401               	retlw	1
   568  0906  3400               	retlw	0
   569  0907  3400               	retlw	0
   570  0908  3400               	retlw	0
   571  0909  3401               	retlw	1
   572  090A  3401               	retlw	1
   573  090B  3400               	retlw	0
   574  090C  3400               	retlw	0
   575  090D  3400               	retlw	0
   576  090E  3400               	retlw	0
   577  090F  3400               	retlw	0
   578  0910  3400               	retlw	0
   579  0911  3401               	retlw	1
   580  0912  3401               	retlw	1
   581  0913  3400               	retlw	0
   582  0914  3400               	retlw	0
   583  0915  3401               	retlw	1
   584  0916  3401               	retlw	1
   585  0917  3400               	retlw	0
   586  0918  3400               	retlw	0
   587  0919  3400               	retlw	0
   588  091A  3400               	retlw	0
   589  091B  3400               	retlw	0
   590  091C  3400               	retlw	0
   591  091D  3400               	retlw	0
   592  091E  3400               	retlw	0
   593  091F  3400               	retlw	0
   594  0920  3400               	retlw	0
   595  0921  3400               	retlw	0
   596  0922  3400               	retlw	0
   597  0923  3400               	retlw	0
   598  0924  3400               	retlw	0
   599  0925  3401               	retlw	1
   600  0926  3401               	retlw	1
   601  0927  3400               	retlw	0
   602  0928  3400               	retlw	0
   603  0929  3401               	retlw	1
   604  092A  3400               	retlw	0
   605  092B  3400               	retlw	0
   606  092C  3400               	retlw	0
   607  092D  3400               	retlw	0
   608  092E  3400               	retlw	0
   609  092F  3400               	retlw	0
   610  0930  3400               	retlw	0
   611  0931  3400               	retlw	0
   612  0932  3400               	retlw	0
   613  0933  3400               	retlw	0
   614  0934  3401               	retlw	1
   615  0935  3401               	retlw	1
   616  0936  3400               	retlw	0
   617  0937  3400               	retlw	0
   618  0938  3400               	retlw	0
   619  0939  3401               	retlw	1
   620  093A  3400               	retlw	0
   621  093B  3400               	retlw	0
   622  093C  3400               	retlw	0
   623  093D  3400               	retlw	0
   624  093E  3400               	retlw	0
   625  093F  3400               	retlw	0
   626  0940  3400               	retlw	0
   627  0941  3401               	retlw	1
   628  0942  3400               	retlw	0
   629  0943  3400               	retlw	0
   630  0944  3401               	retlw	1
   631  0945  3401               	retlw	1
   632  0946  3400               	retlw	0
   633  0947  3400               	retlw	0
   634  0948  3400               	retlw	0
   635  0949  3400               	retlw	0
   636  094A  3400               	retlw	0
   637  094B  3400               	retlw	0
   638  094C  3400               	retlw	0
   639  094D  3400               	retlw	0
   640  094E  3400               	retlw	0
   641  094F  3400               	retlw	0
   642  0950  3400               	retlw	0
   643  0951  3401               	retlw	1
   644  0952  3400               	retlw	0
   645  0953  3400               	retlw	0
   646  0954  3400               	retlw	0
   647  0955  3401               	retlw	1
   648  0956  3401               	retlw	1
   649  0957  3400               	retlw	0
   650  0958  3400               	retlw	0
   651  0959  3400               	retlw	0
   652  095A  3400               	retlw	0
   653  095B  3400               	retlw	0
   654  095C  3400               	retlw	0
   655  095D  3400               	retlw	0
   656  095E  3400               	retlw	0
   657  095F  3400               	retlw	0
   658  0960  3400               	retlw	0
   659  0961  3401               	retlw	1
   660  0962  3400               	retlw	0
   661  0963  3400               	retlw	0
   662  0964  3401               	retlw	1
   663  0965  3401               	retlw	1
   664  0966  3401               	retlw	1
   665  0967  3400               	retlw	0
   666  0968  3400               	retlw	0
   667  0969  3401               	retlw	1
   668  096A  3400               	retlw	0
   669  096B  3400               	retlw	0
   670  096C  3400               	retlw	0
   671  096D  3400               	retlw	0
   672  096E  3400               	retlw	0
   673  096F  3400               	retlw	0
   674  0970  3401               	retlw	1
   675  0971  3401               	retlw	1
   676  0972  3401               	retlw	1
   677  0973  3400               	retlw	0
   678  0974  3400               	retlw	0
   679  0975  3401               	retlw	1
   680  0976  3400               	retlw	0
   681  0977  3400               	retlw	0
   682  0978  3400               	retlw	0
   683  0979  3401               	retlw	1
   684  097A  3400               	retlw	0
   685  097B  3400               	retlw	0
   686  097C  3400               	retlw	0
   687  097D  3400               	retlw	0
   688  097E  3400               	retlw	0
   689  097F  3400               	retlw	0
   690  0980  3400               	retlw	0
   691  0981  3400               	retlw	0
   692  0982  3401               	retlw	1
   693  0983  3400               	retlw	0
   694  0984  3401               	retlw	1
   695  0985  3401               	retlw	1
   696  0986  3401               	retlw	1
   697  0987  3400               	retlw	0
   698  0988  3400               	retlw	0
   699  0989  3400               	retlw	0
   700  098A  3401               	retlw	1
   701  098B  3400               	retlw	0
   702  098C  3400               	retlw	0
   703  098D  3400               	retlw	0
   704  098E  3400               	retlw	0
   705  098F  3400               	retlw	0
   706  0990  3400               	retlw	0
   707  0991  3401               	retlw	1
   708  0992  3400               	retlw	0
   709  0993  3400               	retlw	0
   710  0994  3400               	retlw	0
   711  0995  3401               	retlw	1
   712  0996  3400               	retlw	0
   713  0997  3400               	retlw	0
   714  0998  3401               	retlw	1
   715  0999  3401               	retlw	1
   716  099A  3401               	retlw	1
   717  099B  3400               	retlw	0
   718  099C  3400               	retlw	0
   719  099D  3400               	retlw	0
   720  099E  3400               	retlw	0
   721  099F  3400               	retlw	0
   722  09A0  3401               	retlw	1
   723  09A1  3400               	retlw	0
   724  09A2  3400               	retlw	0
   725  09A3  3400               	retlw	0
   726  09A4  3401               	retlw	1
   727  09A5  3401               	retlw	1
   728  09A6  3401               	retlw	1
   729  09A7  3400               	retlw	0
   730  09A8  3401               	retlw	1
   731  09A9  3400               	retlw	0
   732  09AA  3400               	retlw	0
   733  09AB  3400               	retlw	0
   734  09AC  3400               	retlw	0
   735  09AD  3400               	retlw	0
   736  09AE  3400               	retlw	0
   737  09AF  3400               	retlw	0
   738  09B0                     __end_of_g_matrix44:	
   739  09B0                     STR_59:	
   740  09B0  343D               	retlw	61	;'='
   741  09B1  343D               	retlw	61	;'='
   742  09B2  343D               	retlw	61	;'='
   743  09B3  343D               	retlw	61	;'='
   744  09B4  343D               	retlw	61	;'='
   745  09B5  343D               	retlw	61	;'='
   746  09B6  343D               	retlw	61	;'='
   747  09B7  343D               	retlw	61	;'='
   748  09B8  343D               	retlw	61	;'='
   749  09B9  343D               	retlw	61	;'='
   750  09BA  343D               	retlw	61	;'='
   751  09BB  343D               	retlw	61	;'='
   752  09BC  343D               	retlw	61	;'='
   753  09BD  343D               	retlw	61	;'='
   754  09BE  3466               	retlw	102	;'f'
   755  09BF  3469               	retlw	105	;'i'
   756  09C0  346E               	retlw	110	;'n'
   757  09C1  3464               	retlw	100	;'d'
   758  09C2  345F               	retlw	95	;'_'
   759  09C3  3462               	retlw	98	;'b'
   760  09C4  3465               	retlw	101	;'e'
   761  09C5  3473               	retlw	115	;'s'
   762  09C6  3474               	retlw	116	;'t'
   763  09C7  345F               	retlw	95	;'_'
   764  09C8  3473               	retlw	115	;'s'
   765  09C9  346F               	retlw	111	;'o'
   766  09CA  346C               	retlw	108	;'l'
   767  09CB  3475               	retlw	117	;'u'
   768  09CC  3474               	retlw	116	;'t'
   769  09CD  3469               	retlw	105	;'i'
   770  09CE  346F               	retlw	111	;'o'
   771  09CF  346E               	retlw	110	;'n'
   772  09D0  343D               	retlw	61	;'='
   773  09D1  343D               	retlw	61	;'='
   774  09D2  343D               	retlw	61	;'='
   775  09D3  343D               	retlw	61	;'='
   776  09D4  343D               	retlw	61	;'='
   777  09D5  343D               	retlw	61	;'='
   778  09D6  343D               	retlw	61	;'='
   779  09D7  343D               	retlw	61	;'='
   780  09D8  343D               	retlw	61	;'='
   781  09D9  343D               	retlw	61	;'='
   782  09DA  343D               	retlw	61	;'='
   783  09DB  343D               	retlw	61	;'='
   784  09DC  3400               	retlw	0
   785  09DD                     STR_33:	
   786  09DD  343D               	retlw	61	;'='
   787  09DE  343D               	retlw	61	;'='
   788  09DF  343D               	retlw	61	;'='
   789  09E0  343D               	retlw	61	;'='
   790  09E1  343D               	retlw	61	;'='
   791  09E2  343D               	retlw	61	;'='
   792  09E3  343D               	retlw	61	;'='
   793  09E4  343D               	retlw	61	;'='
   794  09E5  343D               	retlw	61	;'='
   795  09E6  343D               	retlw	61	;'='
   796  09E7  343D               	retlw	61	;'='
   797  09E8  343D               	retlw	61	;'='
   798  09E9  343D               	retlw	61	;'='
   799  09EA  343D               	retlw	61	;'='
   800  09EB  3469               	retlw	105	;'i'
   801  09EC  3473               	retlw	115	;'s'
   802  09ED  345F               	retlw	95	;'_'
   803  09EE  3476               	retlw	118	;'v'
   804  09EF  3461               	retlw	97	;'a'
   805  09F0  346C               	retlw	108	;'l'
   806  09F1  3469               	retlw	105	;'i'
   807  09F2  3464               	retlw	100	;'d'
   808  09F3  343D               	retlw	61	;'='
   809  09F4  343D               	retlw	61	;'='
   810  09F5  343D               	retlw	61	;'='
   811  09F6  343D               	retlw	61	;'='
   812  09F7  343D               	retlw	61	;'='
   813  09F8  343D               	retlw	61	;'='
   814  09F9  343D               	retlw	61	;'='
   815  09FA  343D               	retlw	61	;'='
   816  09FB  343D               	retlw	61	;'='
   817  09FC  343D               	retlw	61	;'='
   818  09FD  343D               	retlw	61	;'='
   819  09FE  343D               	retlw	61	;'='
   820  09FF  3400               	retlw	0
   821  0A00                     STR_29:	
   822  0A00  343D               	retlw	61	;'='
   823  0A01  343D               	retlw	61	;'='
   824  0A02  343D               	retlw	61	;'='
   825  0A03  343D               	retlw	61	;'='
   826  0A04  343D               	retlw	61	;'='
   827  0A05  343D               	retlw	61	;'='
   828  0A06  343D               	retlw	61	;'='
   829  0A07  343D               	retlw	61	;'='
   830  0A08  343D               	retlw	61	;'='
   831  0A09  343D               	retlw	61	;'='
   832  0A0A  343D               	retlw	61	;'='
   833  0A0B  343D               	retlw	61	;'='
   834  0A0C  343D               	retlw	61	;'='
   835  0A0D  343D               	retlw	61	;'='
   836  0A0E  3468               	retlw	104	;'h'
   837  0A0F  3469               	retlw	105	;'i'
   838  0A10  3474               	retlw	116	;'t'
   839  0A11  345F               	retlw	95	;'_'
   840  0A12  346C               	retlw	108	;'l'
   841  0A13  3461               	retlw	97	;'a'
   842  0A14  346E               	retlw	110	;'n'
   843  0A15  3464               	retlw	100	;'d'
   844  0A16  343D               	retlw	61	;'='
   845  0A17  343D               	retlw	61	;'='
   846  0A18  343D               	retlw	61	;'='
   847  0A19  343D               	retlw	61	;'='
   848  0A1A  343D               	retlw	61	;'='
   849  0A1B  343D               	retlw	61	;'='
   850  0A1C  343D               	retlw	61	;'='
   851  0A1D  343D               	retlw	61	;'='
   852  0A1E  343D               	retlw	61	;'='
   853  0A1F  343D               	retlw	61	;'='
   854  0A20  343D               	retlw	61	;'='
   855  0A21  343D               	retlw	61	;'='
   856  0A22  3400               	retlw	0
   857  0A23                     STR_6:	
   858  0A23  343C               	retlw	60	;'<'
   859  0A24  343C               	retlw	60	;'<'
   860  0A25  343C               	retlw	60	;'<'
   861  0A26  343C               	retlw	60	;'<'
   862  0A27  343C               	retlw	60	;'<'
   863  0A28  343C               	retlw	60	;'<'
   864  0A29  343C               	retlw	60	;'<'
   865  0A2A  343C               	retlw	60	;'<'
   866  0A2B  343C               	retlw	60	;'<'
   867  0A2C  343C               	retlw	60	;'<'
   868  0A2D  343C               	retlw	60	;'<'
   869  0A2E  343C               	retlw	60	;'<'
   870  0A2F  343C               	retlw	60	;'<'
   871  0A30  343C               	retlw	60	;'<'
   872  0A31  343C               	retlw	60	;'<'
   873  0A32  343C               	retlw	60	;'<'
   874  0A33  343C               	retlw	60	;'<'
   875  0A34  343C               	retlw	60	;'<'
   876  0A35  343C               	retlw	60	;'<'
   877  0A36  343C               	retlw	60	;'<'
   878  0A37  344D               	retlw	77	;'M'
   879  0A38  3441               	retlw	65	;'A'
   880  0A39  3454               	retlw	84	;'T'
   881  0A3A  3452               	retlw	82	;'R'
   882  0A3B  3449               	retlw	73	;'I'
   883  0A3C  3458               	retlw	88	;'X'
   884  0A3D  3434               	retlw	52	;'4'
   885  0A3E  3434               	retlw	52	;'4'
   886  0A3F  3400               	retlw	0
   887  0A40                     STR_22:	
   888  0A40  343C               	retlw	60	;'<'
   889  0A41  343C               	retlw	60	;'<'
   890  0A42  343C               	retlw	60	;'<'
   891  0A43  343C               	retlw	60	;'<'
   892  0A44  343C               	retlw	60	;'<'
   893  0A45  343C               	retlw	60	;'<'
   894  0A46  343C               	retlw	60	;'<'
   895  0A47  343C               	retlw	60	;'<'
   896  0A48  343C               	retlw	60	;'<'
   897  0A49  343C               	retlw	60	;'<'
   898  0A4A  343C               	retlw	60	;'<'
   899  0A4B  343C               	retlw	60	;'<'
   900  0A4C  343C               	retlw	60	;'<'
   901  0A4D  343C               	retlw	60	;'<'
   902  0A4E  343C               	retlw	60	;'<'
   903  0A4F  343C               	retlw	60	;'<'
   904  0A50  343C               	retlw	60	;'<'
   905  0A51  343C               	retlw	60	;'<'
   906  0A52  343C               	retlw	60	;'<'
   907  0A53  343C               	retlw	60	;'<'
   908  0A54  344D               	retlw	77	;'M'
   909  0A55  3441               	retlw	65	;'A'
   910  0A56  3454               	retlw	84	;'T'
   911  0A57  3452               	retlw	82	;'R'
   912  0A58  3449               	retlw	73	;'I'
   913  0A59  3458               	retlw	88	;'X'
   914  0A5A  3438               	retlw	56	;'8'
   915  0A5B  3438               	retlw	56	;'8'
   916  0A5C  3400               	retlw	0
   917  0A5D                     STR_14:	
   918  0A5D  3469               	retlw	105	;'i'
   919  0A5E  346E               	retlw	110	;'n'
   920  0A5F  3464               	retlw	100	;'d'
   921  0A60  3465               	retlw	101	;'e'
   922  0A61  3478               	retlw	120	;'x'
   923  0A62  3420               	retlw	32	;' '
   924  0A63  343D               	retlw	61	;'='
   925  0A64  3420               	retlw	32	;' '
   926  0A65  3425               	retlw	37	;'%'
   927  0A66  3464               	retlw	100	;'d'
   928  0A67  342C               	retlw	44	;','
   929  0A68  3420               	retlw	32	;' '
   930  0A69  3473               	retlw	115	;'s'
   931  0A6A  3475               	retlw	117	;'u'
   932  0A6B  3462               	retlw	98	;'b'
   933  0A6C  345F               	retlw	95	;'_'
   934  0A6D  3469               	retlw	105	;'i'
   935  0A6E  346E               	retlw	110	;'n'
   936  0A6F  3464               	retlw	100	;'d'
   937  0A70  3465               	retlw	101	;'e'
   938  0A71  3478               	retlw	120	;'x'
   939  0A72  3420               	retlw	32	;' '
   940  0A73  343D               	retlw	61	;'='
   941  0A74  3420               	retlw	32	;' '
   942  0A75  3425               	retlw	37	;'%'
   943  0A76  3464               	retlw	100	;'d'
   944  0A77  3400               	retlw	0
   945  0A78                     STR_28:	
   946  0A78  3464               	retlw	100	;'d'
   947  0A79  3465               	retlw	101	;'e'
   948  0A7A  346C               	retlw	108	;'l'
   949  0A7B  3465               	retlw	101	;'e'
   950  0A7C  3474               	retlw	116	;'t'
   951  0A7D  3465               	retlw	101	;'e'
   952  0A7E  345F               	retlw	95	;'_'
   953  0A7F  346D               	retlw	109	;'m'
   954  0A80  3461               	retlw	97	;'a'
   955  0A81  3474               	retlw	116	;'t'
   956  0A82  3472               	retlw	114	;'r'
   957  0A83  3469               	retlw	105	;'i'
   958  0A84  3478               	retlw	120	;'x'
   959  0A85  3420               	retlw	32	;' '
   960  0A86  3463               	retlw	99	;'c'
   961  0A87  346F               	retlw	111	;'o'
   962  0A88  3475               	retlw	117	;'u'
   963  0A89  346E               	retlw	110	;'n'
   964  0A8A  3474               	retlw	116	;'t'
   965  0A8B  3420               	retlw	32	;' '
   966  0A8C  343D               	retlw	61	;'='
   967  0A8D  3420               	retlw	32	;' '
   968  0A8E  3425               	retlw	37	;'%'
   969  0A8F  3464               	retlw	100	;'d'
   970  0A90  3400               	retlw	0
   971  0A91                     STR_30:	
   972  0A91  3468               	retlw	104	;'h'
   973  0A92  3469               	retlw	105	;'i'
   974  0A93  3474               	retlw	116	;'t'
   975  0A94  3431               	retlw	49	;'1'
   976  0A95  3420               	retlw	32	;' '
   977  0A96  3472               	retlw	114	;'r'
   978  0A97  346F               	retlw	111	;'o'
   979  0A98  3477               	retlw	119	;'w'
   980  0A99  3420               	retlw	32	;' '
   981  0A9A  343D               	retlw	61	;'='
   982  0A9B  3420               	retlw	32	;' '
   983  0A9C  3425               	retlw	37	;'%'
   984  0A9D  3464               	retlw	100	;'d'
   985  0A9E  342C               	retlw	44	;','
   986  0A9F  3420               	retlw	32	;' '
   987  0AA0  3463               	retlw	99	;'c'
   988  0AA1  346F               	retlw	111	;'o'
   989  0AA2  346C               	retlw	108	;'l'
   990  0AA3  3420               	retlw	32	;' '
   991  0AA4  343D               	retlw	61	;'='
   992  0AA5  3420               	retlw	32	;' '
   993  0AA6  3425               	retlw	37	;'%'
   994  0AA7  3464               	retlw	100	;'d'
   995  0AA8  3400               	retlw	0
   996  0AA9                     STR_31:	
   997  0AA9  3468               	retlw	104	;'h'
   998  0AAA  3469               	retlw	105	;'i'
   999  0AAB  3474               	retlw	116	;'t'
  1000  0AAC  3432               	retlw	50	;'2'
  1001  0AAD  3420               	retlw	32	;' '
  1002  0AAE  3472               	retlw	114	;'r'
  1003  0AAF  346F               	retlw	111	;'o'
  1004  0AB0  3477               	retlw	119	;'w'
  1005  0AB1  3420               	retlw	32	;' '
  1006  0AB2  343D               	retlw	61	;'='
  1007  0AB3  3420               	retlw	32	;' '
  1008  0AB4  3425               	retlw	37	;'%'
  1009  0AB5  3464               	retlw	100	;'d'
  1010  0AB6  342C               	retlw	44	;','
  1011  0AB7  3420               	retlw	32	;' '
  1012  0AB8  3463               	retlw	99	;'c'
  1013  0AB9  346F               	retlw	111	;'o'
  1014  0ABA  346C               	retlw	108	;'l'
  1015  0ABB  3420               	retlw	32	;' '
  1016  0ABC  343D               	retlw	61	;'='
  1017  0ABD  3420               	retlw	32	;' '
  1018  0ABE  3425               	retlw	37	;'%'
  1019  0ABF  3464               	retlw	100	;'d'
  1020  0AC0  3400               	retlw	0
  1021  0AC1                     STR_94:	
  1022  0AC1  3467               	retlw	103	;'g'
  1023  0AC2  345F               	retlw	95	;'_'
  1024  0AC3  3463               	retlw	99	;'c'
  1025  0AC4  3468               	retlw	104	;'h'
  1026  0AC5  3461               	retlw	97	;'a'
  1027  0AC6  3472               	retlw	114	;'r'
  1028  0AC7  345F               	retlw	95	;'_'
  1029  0AC8  3469               	retlw	105	;'i'
  1030  0AC9  346E               	retlw	110	;'n'
  1031  0ACA  3466               	retlw	102	;'f'
  1032  0ACB  346F               	retlw	111	;'o'
  1033  0ACC  345F               	retlw	95	;'_'
  1034  0ACD  3469               	retlw	105	;'i'
  1035  0ACE  346E               	retlw	110	;'n'
  1036  0ACF  3464               	retlw	100	;'d'
  1037  0AD0  3465               	retlw	101	;'e'
  1038  0AD1  3478               	retlw	120	;'x'
  1039  0AD2  3420               	retlw	32	;' '
  1040  0AD3  343D               	retlw	61	;'='
  1041  0AD4  3420               	retlw	32	;' '
  1042  0AD5  3425               	retlw	37	;'%'
  1043  0AD6  3464               	retlw	100	;'d'
  1044  0AD7  3400               	retlw	0
  1045  0AD8                     STR_71:	
  1046  0AD8  3457               	retlw	87	;'W'
  1047  0AD9  3441               	retlw	65	;'A'
  1048  0ADA  3452               	retlw	82	;'R'
  1049  0ADB  344E               	retlw	78	;'N'
  1050  0ADC  3449               	retlw	73	;'I'
  1051  0ADD  344E               	retlw	78	;'N'
  1052  0ADE  3447               	retlw	71	;'G'
  1053  0ADF  3420               	retlw	32	;' '
  1054  0AE0  3468               	retlw	104	;'h'
  1055  0AE1  3465               	retlw	101	;'e'
  1056  0AE2  3469               	retlw	105	;'i'
  1057  0AE3  3467               	retlw	103	;'g'
  1058  0AE4  3468               	retlw	104	;'h'
  1059  0AE5  3474               	retlw	116	;'t'
  1060  0AE6  3420               	retlw	32	;' '
  1061  0AE7  343E               	retlw	62	;'>'
  1062  0AE8  3420               	retlw	32	;' '
  1063  0AE9  3428               	retlw	40	;'('
  1064  0AEA  3425               	retlw	37	;'%'
  1065  0AEB  3464               	retlw	100	;'d'
  1066  0AEC  3429               	retlw	41	;')'
  1067  0AED  3400               	retlw	0
  1068  0AEE                     STR_16:	
  1069  0AEE  343C               	retlw	60	;'<'
  1070  0AEF  343C               	retlw	60	;'<'
  1071  0AF0  343C               	retlw	60	;'<'
  1072  0AF1  343C               	retlw	60	;'<'
  1073  0AF2  343C               	retlw	60	;'<'
  1074  0AF3  343C               	retlw	60	;'<'
  1075  0AF4  343C               	retlw	60	;'<'
  1076  0AF5  343C               	retlw	60	;'<'
  1077  0AF6  343C               	retlw	60	;'<'
  1078  0AF7  343C               	retlw	60	;'<'
  1079  0AF8  343C               	retlw	60	;'<'
  1080  0AF9  343C               	retlw	60	;'<'
  1081  0AFA  343C               	retlw	60	;'<'
  1082  0AFB  343C               	retlw	60	;'<'
  1083  0AFC  343C               	retlw	60	;'<'
  1084  0AFD  343C               	retlw	60	;'<'
  1085  0AFE  343C               	retlw	60	;'<'
  1086  0AFF  343C               	retlw	60	;'<'
  1087  0B00  343C               	retlw	60	;'<'
  1088  0B01  343C               	retlw	60	;'<'
  1089  0B02  3400               	retlw	0
  1090  0B03                     STR_10:	
  1091  0B03  343E               	retlw	62	;'>'
  1092  0B04  343E               	retlw	62	;'>'
  1093  0B05  343E               	retlw	62	;'>'
  1094  0B06  343E               	retlw	62	;'>'
  1095  0B07  343E               	retlw	62	;'>'
  1096  0B08  343E               	retlw	62	;'>'
  1097  0B09  343E               	retlw	62	;'>'
  1098  0B0A  343E               	retlw	62	;'>'
  1099  0B0B  343E               	retlw	62	;'>'
  1100  0B0C  343E               	retlw	62	;'>'
  1101  0B0D  343E               	retlw	62	;'>'
  1102  0B0E  343E               	retlw	62	;'>'
  1103  0B0F  343E               	retlw	62	;'>'
  1104  0B10  343E               	retlw	62	;'>'
  1105  0B11  343E               	retlw	62	;'>'
  1106  0B12  343E               	retlw	62	;'>'
  1107  0B13  343E               	retlw	62	;'>'
  1108  0B14  343E               	retlw	62	;'>'
  1109  0B15  343E               	retlw	62	;'>'
  1110  0B16  343E               	retlw	62	;'>'
  1111  0B17  3400               	retlw	0
  1112  0B18                     STR_50:	
  1113  0B18  3467               	retlw	103	;'g'
  1114  0B19  3465               	retlw	101	;'e'
  1115  0B1A  3474               	retlw	116	;'t'
  1116  0B1B  345F               	retlw	95	;'_'
  1117  0B1C  3468               	retlw	104	;'h'
  1118  0B1D  3469               	retlw	105	;'i'
  1119  0B1E  3467               	retlw	103	;'g'
  1120  0B1F  3468               	retlw	104	;'h'
  1121  0B20  3420               	retlw	32	;' '
  1122  0B21  3468               	retlw	104	;'h'
  1123  0B22  3465               	retlw	101	;'e'
  1124  0B23  3469               	retlw	105	;'i'
  1125  0B24  3467               	retlw	103	;'g'
  1126  0B25  3468               	retlw	104	;'h'
  1127  0B26  3474               	retlw	116	;'t'
  1128  0B27  3420               	retlw	32	;' '
  1129  0B28  343D               	retlw	61	;'='
  1130  0B29  3420               	retlw	32	;' '
  1131  0B2A  3425               	retlw	37	;'%'
  1132  0B2B  3464               	retlw	100	;'d'
  1133  0B2C  3400               	retlw	0
  1134  0B2D                     STR_51:	
  1135  0B2D  3467               	retlw	103	;'g'
  1136  0B2E  3465               	retlw	101	;'e'
  1137  0B2F  3474               	retlw	116	;'t'
  1138  0B30  345F               	retlw	95	;'_'
  1139  0B31  3468               	retlw	104	;'h'
  1140  0B32  3469               	retlw	105	;'i'
  1141  0B33  3467               	retlw	103	;'g'
  1142  0B34  3468               	retlw	104	;'h'
  1143  0B35  345F               	retlw	95	;'_'
  1144  0B36  3461               	retlw	97	;'a'
  1145  0B37  3466               	retlw	102	;'f'
  1146  0B38  3474               	retlw	116	;'t'
  1147  0B39  3465               	retlw	101	;'e'
  1148  0B3A  3472               	retlw	114	;'r'
  1149  0B3B  345F               	retlw	95	;'_'
  1150  0B3C  346D               	retlw	109	;'m'
  1151  0B3D  3465               	retlw	101	;'e'
  1152  0B3E  3472               	retlw	114	;'r'
  1153  0B3F  3467               	retlw	103	;'g'
  1154  0B40  3465               	retlw	101	;'e'
  1155  0B41  3400               	retlw	0
  1156  0B42                     STR_65:	
  1157  0B42  3463               	retlw	99	;'c'
  1158  0B43  346F               	retlw	111	;'o'
  1159  0B44  3475               	retlw	117	;'u'
  1160  0B45  346E               	retlw	110	;'n'
  1161  0B46  3474               	retlw	116	;'t'
  1162  0B47  343A               	retlw	58	;':'
  1163  0B48  3420               	retlw	32	;' '
  1164  0B49  3428               	retlw	40	;'('
  1165  0B4A  3425               	retlw	37	;'%'
  1166  0B4B  3464               	retlw	100	;'d'
  1167  0B4C  3429               	retlw	41	;')'
  1168  0B4D  3420               	retlw	32	;' '
  1169  0B4E  343D               	retlw	61	;'='
  1170  0B4F  343D               	retlw	61	;'='
  1171  0B50  3420               	retlw	32	;' '
  1172  0B51  3428               	retlw	40	;'('
  1173  0B52  3425               	retlw	37	;'%'
  1174  0B53  3464               	retlw	100	;'d'
  1175  0B54  3429               	retlw	41	;')'
  1176  0B55  3400               	retlw	0
  1177  0B56                     STR_12:	
  1178  0B56  3470               	retlw	112	;'p'
  1179  0B57  3472               	retlw	114	;'r'
  1180  0B58  3469               	retlw	105	;'i'
  1181  0B59  346E               	retlw	110	;'n'
  1182  0B5A  3474               	retlw	116	;'t'
  1183  0B5B  3466               	retlw	102	;'f'
  1184  0B5C  345F               	retlw	95	;'_'
  1185  0B5D  3461               	retlw	97	;'a'
  1186  0B5E  346C               	retlw	108	;'l'
  1187  0B5F  346C               	retlw	108	;'l'
  1188  0B60  345F               	retlw	95	;'_'
  1189  0B61  344D               	retlw	77	;'M'
  1190  0B62  3441               	retlw	65	;'A'
  1191  0B63  3454               	retlw	84	;'T'
  1192  0B64  3452               	retlw	82	;'R'
  1193  0B65  3449               	retlw	73	;'I'
  1194  0B66  3458               	retlw	88	;'X'
  1195  0B67  3434               	retlw	52	;'4'
  1196  0B68  3434               	retlw	52	;'4'
  1197  0B69  3400               	retlw	0
  1198  0B6A                     STR_42:	
  1199  0B6A  3452               	retlw	82	;'R'
  1200  0B6B  3449               	retlw	73	;'I'
  1201  0B6C  3447               	retlw	71	;'G'
  1202  0B6D  3448               	retlw	72	;'H'
  1203  0B6E  3454               	retlw	84	;'T'
  1204  0B6F  345F               	retlw	95	;'_'
  1205  0B70  344F               	retlw	79	;'O'
  1206  0B71  3456               	retlw	86	;'V'
  1207  0B72  3445               	retlw	69	;'E'
  1208  0B73  3452               	retlw	82	;'R'
  1209  0B74  345F               	retlw	95	;'_'
  1210  0B75  3442               	retlw	66	;'B'
  1211  0B76  344F               	retlw	79	;'O'
  1212  0B77  3455               	retlw	85	;'U'
  1213  0B78  344E               	retlw	78	;'N'
  1214  0B79  3444               	retlw	68	;'D'
  1215  0B7A  3441               	retlw	65	;'A'
  1216  0B7B  3452               	retlw	82	;'R'
  1217  0B7C  3459               	retlw	89	;'Y'
  1218  0B7D  3400               	retlw	0
  1219  0B7E                     STR_81:	
  1220  0B7E  3474               	retlw	116	;'t'
  1221  0B7F  3465               	retlw	101	;'e'
  1222  0B80  346D               	retlw	109	;'m'
  1223  0B81  3470               	retlw	112	;'p'
  1224  0B82  345F               	retlw	95	;'_'
  1225  0B83  3470               	retlw	112	;'p'
  1226  0B84  3472               	retlw	114	;'r'
  1227  0B85  3465               	retlw	101	;'e'
  1228  0B86  345F               	retlw	95	;'_'
  1229  0B87  3463               	retlw	99	;'c'
  1230  0B88  346F               	retlw	111	;'o'
  1231  0B89  3475               	retlw	117	;'u'
  1232  0B8A  346E               	retlw	110	;'n'
  1233  0B8B  3474               	retlw	116	;'t'
  1234  0B8C  3420               	retlw	32	;' '
  1235  0B8D  343D               	retlw	61	;'='
  1236  0B8E  3420               	retlw	32	;' '
  1237  0B8F  3425               	retlw	37	;'%'
  1238  0B90  3464               	retlw	100	;'d'
  1239  0B91  3400               	retlw	0
  1240  0B92                     STR_76:	
  1241  0B92  3468               	retlw	104	;'h'
  1242  0B93  346F               	retlw	111	;'o'
  1243  0B94  346C               	retlw	108	;'l'
  1244  0B95  3465               	retlw	101	;'e'
  1245  0B96  343A               	retlw	58	;':'
  1246  0B97  3420               	retlw	32	;' '
  1247  0B98  3428               	retlw	40	;'('
  1248  0B99  3425               	retlw	37	;'%'
  1249  0B9A  3464               	retlw	100	;'d'
  1250  0B9B  3429               	retlw	41	;')'
  1251  0B9C  3420               	retlw	32	;' '
  1252  0B9D  343D               	retlw	61	;'='
  1253  0B9E  343D               	retlw	61	;'='
  1254  0B9F  3420               	retlw	32	;' '
  1255  0BA0  3428               	retlw	40	;'('
  1256  0BA1  3425               	retlw	37	;'%'
  1257  0BA2  3464               	retlw	100	;'d'
  1258  0BA3  3429               	retlw	41	;')'
  1259  0BA4  3400               	retlw	0
  1260  0BA5                     STR_69:	
  1261  0BA5  3468               	retlw	104	;'h'
  1262  0BA6  3469               	retlw	105	;'i'
  1263  0BA7  3467               	retlw	103	;'g'
  1264  0BA8  3468               	retlw	104	;'h'
  1265  0BA9  343A               	retlw	58	;':'
  1266  0BAA  3420               	retlw	32	;' '
  1267  0BAB  3428               	retlw	40	;'('
  1268  0BAC  3425               	retlw	37	;'%'
  1269  0BAD  3464               	retlw	100	;'d'
  1270  0BAE  3429               	retlw	41	;')'
  1271  0BAF  3420               	retlw	32	;' '
  1272  0BB0  343D               	retlw	61	;'='
  1273  0BB1  343D               	retlw	61	;'='
  1274  0BB2  3420               	retlw	32	;' '
  1275  0BB3  3428               	retlw	40	;'('
  1276  0BB4  3425               	retlw	37	;'%'
  1277  0BB5  3464               	retlw	100	;'d'
  1278  0BB6  3429               	retlw	41	;')'
  1279  0BB7  3400               	retlw	0
  1280  0BB8                     STR_67:	
  1281  0BB8  3472               	retlw	114	;'r'
  1282  0BB9  3469               	retlw	105	;'i'
  1283  0BBA  3473               	retlw	115	;'s'
  1284  0BBB  346B               	retlw	107	;'k'
  1285  0BBC  343A               	retlw	58	;':'
  1286  0BBD  3420               	retlw	32	;' '
  1287  0BBE  3428               	retlw	40	;'('
  1288  0BBF  3425               	retlw	37	;'%'
  1289  0BC0  3464               	retlw	100	;'d'
  1290  0BC1  3429               	retlw	41	;')'
  1291  0BC2  3420               	retlw	32	;' '
  1292  0BC3  343D               	retlw	61	;'='
  1293  0BC4  343D               	retlw	61	;'='
  1294  0BC5  3420               	retlw	32	;' '
  1295  0BC6  3428               	retlw	40	;'('
  1296  0BC7  3425               	retlw	37	;'%'
  1297  0BC8  3464               	retlw	100	;'d'
  1298  0BC9  3429               	retlw	41	;')'
  1299  0BCA  3400               	retlw	0
  1300  0BCB                     STR_63:	
  1301  0BCB  3463               	retlw	99	;'c'
  1302  0BCC  346F               	retlw	111	;'o'
  1303  0BCD  3475               	retlw	117	;'u'
  1304  0BCE  346E               	retlw	110	;'n'
  1305  0BCF  3474               	retlw	116	;'t'
  1306  0BD0  343A               	retlw	58	;':'
  1307  0BD1  3420               	retlw	32	;' '
  1308  0BD2  3428               	retlw	40	;'('
  1309  0BD3  3425               	retlw	37	;'%'
  1310  0BD4  3464               	retlw	100	;'d'
  1311  0BD5  3429               	retlw	41	;')'
  1312  0BD6  3420               	retlw	32	;' '
  1313  0BD7  343E               	retlw	62	;'>'
  1314  0BD8  3420               	retlw	32	;' '
  1315  0BD9  3428               	retlw	40	;'('
  1316  0BDA  3425               	retlw	37	;'%'
  1317  0BDB  3464               	retlw	100	;'d'
  1318  0BDC  3429               	retlw	41	;')'
  1319  0BDD  3400               	retlw	0
  1320  0BDE                     STR_41:	
  1321  0BDE  344C               	retlw	76	;'L'
  1322  0BDF  3445               	retlw	69	;'E'
  1323  0BE0  3446               	retlw	70	;'F'
  1324  0BE1  3454               	retlw	84	;'T'
  1325  0BE2  345F               	retlw	95	;'_'
  1326  0BE3  344F               	retlw	79	;'O'
  1327  0BE4  3456               	retlw	86	;'V'
  1328  0BE5  3445               	retlw	69	;'E'
  1329  0BE6  3452               	retlw	82	;'R'
  1330  0BE7  345F               	retlw	95	;'_'
  1331  0BE8  3442               	retlw	66	;'B'
  1332  0BE9  344F               	retlw	79	;'O'
  1333  0BEA  3455               	retlw	85	;'U'
  1334  0BEB  344E               	retlw	78	;'N'
  1335  0BEC  3444               	retlw	68	;'D'
  1336  0BED  3441               	retlw	65	;'A'
  1337  0BEE  3452               	retlw	82	;'R'
  1338  0BEF  3459               	retlw	89	;'Y'
  1339  0BF0  3400               	retlw	0
  1340  0BF1                     STR_83:	
  1341  0BF1  3474               	retlw	116	;'t'
  1342  0BF2  3465               	retlw	101	;'e'
  1343  0BF3  346D               	retlw	109	;'m'
  1344  0BF4  3470               	retlw	112	;'p'
  1345  0BF5  345F               	retlw	95	;'_'
  1346  0BF6  3470               	retlw	112	;'p'
  1347  0BF7  3472               	retlw	114	;'r'
  1348  0BF8  3465               	retlw	101	;'e'
  1349  0BF9  345F               	retlw	95	;'_'
  1350  0BFA  3468               	retlw	104	;'h'
  1351  0BFB  3469               	retlw	105	;'i'
  1352  0BFC  3467               	retlw	103	;'g'
  1353  0BFD  3468               	retlw	104	;'h'
  1354  0BFE  3420               	retlw	32	;' '
  1355  0BFF  343D               	retlw	61	;'='
  1356  0C00  3420               	retlw	32	;' '
  1357  0C01  3425               	retlw	37	;'%'
  1358  0C02  3464               	retlw	100	;'d'
  1359  0C03  3400               	retlw	0
  1360  0C04                     STR_82:	
  1361  0C04  3474               	retlw	116	;'t'
  1362  0C05  3465               	retlw	101	;'e'
  1363  0C06  346D               	retlw	109	;'m'
  1364  0C07  3470               	retlw	112	;'p'
  1365  0C08  345F               	retlw	95	;'_'
  1366  0C09  3470               	retlw	112	;'p'
  1367  0C0A  3472               	retlw	114	;'r'
  1368  0C0B  3465               	retlw	101	;'e'
  1369  0C0C  345F               	retlw	95	;'_'
  1370  0C0D  3472               	retlw	114	;'r'
  1371  0C0E  3469               	retlw	105	;'i'
  1372  0C0F  3473               	retlw	115	;'s'
  1373  0C10  346B               	retlw	107	;'k'
  1374  0C11  3420               	retlw	32	;' '
  1375  0C12  343D               	retlw	61	;'='
  1376  0C13  3420               	retlw	32	;' '
  1377  0C14  3425               	retlw	37	;'%'
  1378  0C15  3464               	retlw	100	;'d'
  1379  0C16  3400               	retlw	0
  1380  0C17                     STR_70:	
  1381  0C17  3468               	retlw	104	;'h'
  1382  0C18  346F               	retlw	111	;'o'
  1383  0C19  346C               	retlw	108	;'l'
  1384  0C1A  3465               	retlw	101	;'e'
  1385  0C1B  343A               	retlw	58	;':'
  1386  0C1C  3420               	retlw	32	;' '
  1387  0C1D  3428               	retlw	40	;'('
  1388  0C1E  3425               	retlw	37	;'%'
  1389  0C1F  3464               	retlw	100	;'d'
  1390  0C20  3429               	retlw	41	;')'
  1391  0C21  3420               	retlw	32	;' '
  1392  0C22  343C               	retlw	60	;'<'
  1393  0C23  3420               	retlw	32	;' '
  1394  0C24  3428               	retlw	40	;'('
  1395  0C25  3425               	retlw	37	;'%'
  1396  0C26  3464               	retlw	100	;'d'
  1397  0C27  3429               	retlw	41	;')'
  1398  0C28  3400               	retlw	0
  1399  0C29                     STR_68:	
  1400  0C29  3468               	retlw	104	;'h'
  1401  0C2A  3469               	retlw	105	;'i'
  1402  0C2B  3467               	retlw	103	;'g'
  1403  0C2C  3468               	retlw	104	;'h'
  1404  0C2D  343A               	retlw	58	;':'
  1405  0C2E  3420               	retlw	32	;' '
  1406  0C2F  3428               	retlw	40	;'('
  1407  0C30  3425               	retlw	37	;'%'
  1408  0C31  3464               	retlw	100	;'d'
  1409  0C32  3429               	retlw	41	;')'
  1410  0C33  3420               	retlw	32	;' '
  1411  0C34  343C               	retlw	60	;'<'
  1412  0C35  3420               	retlw	32	;' '
  1413  0C36  3428               	retlw	40	;'('
  1414  0C37  3425               	retlw	37	;'%'
  1415  0C38  3464               	retlw	100	;'d'
  1416  0C39  3429               	retlw	41	;')'
  1417  0C3A  3400               	retlw	0
  1418  0C3B                     STR_66:	
  1419  0C3B  3472               	retlw	114	;'r'
  1420  0C3C  3469               	retlw	105	;'i'
  1421  0C3D  3473               	retlw	115	;'s'
  1422  0C3E  346B               	retlw	107	;'k'
  1423  0C3F  343A               	retlw	58	;':'
  1424  0C40  3420               	retlw	32	;' '
  1425  0C41  3428               	retlw	40	;'('
  1426  0C42  3425               	retlw	37	;'%'
  1427  0C43  3464               	retlw	100	;'d'
  1428  0C44  3429               	retlw	41	;')'
  1429  0C45  3420               	retlw	32	;' '
  1430  0C46  343C               	retlw	60	;'<'
  1431  0C47  3420               	retlw	32	;' '
  1432  0C48  3428               	retlw	40	;'('
  1433  0C49  3425               	retlw	37	;'%'
  1434  0C4A  3464               	retlw	100	;'d'
  1435  0C4B  3429               	retlw	41	;')'
  1436  0C4C  3400               	retlw	0
  1437  0C4D                     STR_98:	
  1438  0C4D  3430               	retlw	48	;'0'
  1439  0C4E  3431               	retlw	49	;'1'
  1440  0C4F  3432               	retlw	50	;'2'
  1441  0C50  3433               	retlw	51	;'3'
  1442  0C51  3434               	retlw	52	;'4'
  1443  0C52  3435               	retlw	53	;'5'
  1444  0C53  3436               	retlw	54	;'6'
  1445  0C54  3437               	retlw	55	;'7'
  1446  0C55  3438               	retlw	56	;'8'
  1447  0C56  3439               	retlw	57	;'9'
  1448  0C57  3441               	retlw	65	;'A'
  1449  0C58  3442               	retlw	66	;'B'
  1450  0C59  3443               	retlw	67	;'C'
  1451  0C5A  3444               	retlw	68	;'D'
  1452  0C5B  3445               	retlw	69	;'E'
  1453  0C5C  3446               	retlw	70	;'F'
  1454  0C5D  3400               	retlw	0
  1455  0C5E                     STR_99:	
  1456  0C5E  3430               	retlw	48	;'0'
  1457  0C5F  3431               	retlw	49	;'1'
  1458  0C60  3432               	retlw	50	;'2'
  1459  0C61  3433               	retlw	51	;'3'
  1460  0C62  3434               	retlw	52	;'4'
  1461  0C63  3435               	retlw	53	;'5'
  1462  0C64  3436               	retlw	54	;'6'
  1463  0C65  3437               	retlw	55	;'7'
  1464  0C66  3438               	retlw	56	;'8'
  1465  0C67  3439               	retlw	57	;'9'
  1466  0C68  3461               	retlw	97	;'a'
  1467  0C69  3462               	retlw	98	;'b'
  1468  0C6A  3463               	retlw	99	;'c'
  1469  0C6B  3464               	retlw	100	;'d'
  1470  0C6C  3465               	retlw	101	;'e'
  1471  0C6D  3466               	retlw	102	;'f'
  1472  0C6E  3400               	retlw	0
  1473  0C6F                     STR_72:	
  1474  0C6F  3468               	retlw	104	;'h'
  1475  0C70  3469               	retlw	105	;'i'
  1476  0C71  3467               	retlw	103	;'g'
  1477  0C72  3468               	retlw	104	;'h'
  1478  0C73  343A               	retlw	58	;':'
  1479  0C74  3420               	retlw	32	;' '
  1480  0C75  3428               	retlw	40	;'('
  1481  0C76  3425               	retlw	37	;'%'
  1482  0C77  3464               	retlw	100	;'d'
  1483  0C78  3429               	retlw	41	;')'
  1484  0C79  342C               	retlw	44	;','
  1485  0C7A  3420               	retlw	32	;' '
  1486  0C7B  3428               	retlw	40	;'('
  1487  0C7C  3425               	retlw	37	;'%'
  1488  0C7D  3464               	retlw	100	;'d'
  1489  0C7E  3429               	retlw	41	;')'
  1490  0C7F  3400               	retlw	0
  1491  0C80                     STR_49:	
  1492  0C80  3472               	retlw	114	;'r'
  1493  0C81  3469               	retlw	105	;'i'
  1494  0C82  3467               	retlw	103	;'g'
  1495  0C83  3468               	retlw	104	;'h'
  1496  0C84  3474               	retlw	116	;'t'
  1497  0C85  345F               	retlw	95	;'_'
  1498  0C86  346D               	retlw	109	;'m'
  1499  0C87  346F               	retlw	111	;'o'
  1500  0C88  3473               	retlw	115	;'s'
  1501  0C89  3474               	retlw	116	;'t'
  1502  0C8A  3420               	retlw	32	;' '
  1503  0C8B  343D               	retlw	61	;'='
  1504  0C8C  3420               	retlw	32	;' '
  1505  0C8D  3425               	retlw	37	;'%'
  1506  0C8E  3464               	retlw	100	;'d'
  1507  0C8F  3400               	retlw	0
  1508  0C90                     STR_80:	
  1509  0C90  3474               	retlw	116	;'t'
  1510  0C91  3465               	retlw	101	;'e'
  1511  0C92  346D               	retlw	109	;'m'
  1512  0C93  3470               	retlw	112	;'p'
  1513  0C94  345F               	retlw	95	;'_'
  1514  0C95  3470               	retlw	112	;'p'
  1515  0C96  3472               	retlw	114	;'r'
  1516  0C97  3465               	retlw	101	;'e'
  1517  0C98  345F               	retlw	95	;'_'
  1518  0C99  3478               	retlw	120	;'x'
  1519  0C9A  3420               	retlw	32	;' '
  1520  0C9B  343D               	retlw	61	;'='
  1521  0C9C  3420               	retlw	32	;' '
  1522  0C9D  3425               	retlw	37	;'%'
  1523  0C9E  3464               	retlw	100	;'d'
  1524  0C9F  3400               	retlw	0
  1525  0CA0                     STR_64:	
  1526  0CA0  3468               	retlw	104	;'h'
  1527  0CA1  3465               	retlw	101	;'e'
  1528  0CA2  3469               	retlw	105	;'i'
  1529  0CA3  3467               	retlw	103	;'g'
  1530  0CA4  3468               	retlw	104	;'h'
  1531  0CA5  3474               	retlw	116	;'t'
  1532  0CA6  3420               	retlw	32	;' '
  1533  0CA7  343C               	retlw	60	;'<'
  1534  0CA8  343D               	retlw	61	;'='
  1535  0CA9  3420               	retlw	32	;' '
  1536  0CAA  3428               	retlw	40	;'('
  1537  0CAB  3425               	retlw	37	;'%'
  1538  0CAC  3464               	retlw	100	;'d'
  1539  0CAD  3429               	retlw	41	;')'
  1540  0CAE  3400               	retlw	0
  1541  0CAF                     STR_84:	
  1542  0CAF  3474               	retlw	116	;'t'
  1543  0CB0  3465               	retlw	101	;'e'
  1544  0CB1  346D               	retlw	109	;'m'
  1545  0CB2  3470               	retlw	112	;'p'
  1546  0CB3  345F               	retlw	95	;'_'
  1547  0CB4  3468               	retlw	104	;'h'
  1548  0CB5  346F               	retlw	111	;'o'
  1549  0CB6  346C               	retlw	108	;'l'
  1550  0CB7  3465               	retlw	101	;'e'
  1551  0CB8  3420               	retlw	32	;' '
  1552  0CB9  343D               	retlw	61	;'='
  1553  0CBA  3420               	retlw	32	;' '
  1554  0CBB  3425               	retlw	37	;'%'
  1555  0CBC  3464               	retlw	100	;'d'
  1556  0CBD  3400               	retlw	0
  1557  0CBE                     STR_48:	
  1558  0CBE  346C               	retlw	108	;'l'
  1559  0CBF  3465               	retlw	101	;'e'
  1560  0CC0  3466               	retlw	102	;'f'
  1561  0CC1  3474               	retlw	116	;'t'
  1562  0CC2  345F               	retlw	95	;'_'
  1563  0CC3  346D               	retlw	109	;'m'
  1564  0CC4  346F               	retlw	111	;'o'
  1565  0CC5  3473               	retlw	115	;'s'
  1566  0CC6  3474               	retlw	116	;'t'
  1567  0CC7  3420               	retlw	32	;' '
  1568  0CC8  343D               	retlw	61	;'='
  1569  0CC9  3420               	retlw	32	;' '
  1570  0CCA  3425               	retlw	37	;'%'
  1571  0CCB  3464               	retlw	100	;'d'
  1572  0CCC  3400               	retlw	0
  1573  0CCD                     STR_44:	
  1574  0CCD  3478               	retlw	120	;'x'
  1575  0CCE  3420               	retlw	32	;' '
  1576  0CCF  343D               	retlw	61	;'='
  1577  0CD0  3420               	retlw	32	;' '
  1578  0CD1  3425               	retlw	37	;'%'
  1579  0CD2  3464               	retlw	100	;'d'
  1580  0CD3  342C               	retlw	44	;','
  1581  0CD4  3420               	retlw	32	;' '
  1582  0CD5  3479               	retlw	121	;'y'
  1583  0CD6  3420               	retlw	32	;' '
  1584  0CD7  343D               	retlw	61	;'='
  1585  0CD8  3420               	retlw	32	;' '
  1586  0CD9  3425               	retlw	37	;'%'
  1587  0CDA  3464               	retlw	100	;'d'
  1588  0CDB  3400               	retlw	0
  1589  0CDC                     STR_62:	
  1590  0CDC  3456               	retlw	86	;'V'
  1591  0CDD  3461               	retlw	97	;'a'
  1592  0CDE  346C               	retlw	108	;'l'
  1593  0CDF  3469               	retlw	105	;'i'
  1594  0CE0  3464               	retlw	100	;'d'
  1595  0CE1  3420               	retlw	32	;' '
  1596  0CE2  3469               	retlw	105	;'i'
  1597  0CE3  346E               	retlw	110	;'n'
  1598  0CE4  3473               	retlw	115	;'s'
  1599  0CE5  3474               	retlw	116	;'t'
  1600  0CE6  3461               	retlw	97	;'a'
  1601  0CE7  346E               	retlw	110	;'n'
  1602  0CE8  3463               	retlw	99	;'c'
  1603  0CE9  3465               	retlw	101	;'e'
  1604  0CEA  3400               	retlw	0
  1605  0CEB                     STR_60:	
  1606  0CEB  3441               	retlw	65	;'A'
  1607  0CEC  3466               	retlw	102	;'f'
  1608  0CED  3474               	retlw	116	;'t'
  1609  0CEE  3465               	retlw	101	;'e'
  1610  0CEF  3472               	retlw	114	;'r'
  1611  0CF0  3420               	retlw	32	;' '
  1612  0CF1  3466               	retlw	102	;'f'
  1613  0CF2  3461               	retlw	97	;'a'
  1614  0CF3  346C               	retlw	108	;'l'
  1615  0CF4  346C               	retlw	108	;'l'
  1616  0CF5  3420               	retlw	32	;' '
  1617  0CF6  346F               	retlw	111	;'o'
  1618  0CF7  3466               	retlw	102	;'f'
  1619  0CF8  3466               	retlw	102	;'f'
  1620  0CF9  3400               	retlw	0
  1621  0CFA                     STR_58:	
  1622  0CFA  346E               	retlw	110	;'n'
  1623  0CFB  3475               	retlw	117	;'u'
  1624  0CFC  346D               	retlw	109	;'m'
  1625  0CFD  345F               	retlw	95	;'_'
  1626  0CFE  3468               	retlw	104	;'h'
  1627  0CFF  346F               	retlw	111	;'o'
  1628  0D00  346C               	retlw	108	;'l'
  1629  0D01  3465               	retlw	101	;'e'
  1630  0D02  3420               	retlw	32	;' '
  1631  0D03  343D               	retlw	61	;'='
  1632  0D04  3420               	retlw	32	;' '
  1633  0D05  3425               	retlw	37	;'%'
  1634  0D06  3464               	retlw	100	;'d'
  1635  0D07  3400               	retlw	0
  1636  0D08                     STR_93:	
  1637  0D08  3447               	retlw	71	;'G'
  1638  0D09  3441               	retlw	65	;'A'
  1639  0D0A  344D               	retlw	77	;'M'
  1640  0D0B  3445               	retlw	69	;'E'
  1641  0D0C  3420               	retlw	32	;' '
  1642  0D0D  344F               	retlw	79	;'O'
  1643  0D0E  3456               	retlw	86	;'V'
  1644  0D0F  3445               	retlw	69	;'E'
  1645  0D10  3452               	retlw	82	;'R'
  1646  0D11  3421               	retlw	33	;'!'
  1647  0D12  3421               	retlw	33	;'!'
  1648  0D13  3421               	retlw	33	;'!'
  1649  0D14  3400               	retlw	0
  1650  0D15                     STR_96:	
  1651  0D15  3468               	retlw	104	;'h'
  1652  0D16  3469               	retlw	105	;'i'
  1653  0D17  3474               	retlw	116	;'t'
  1654  0D18  345F               	retlw	95	;'_'
  1655  0D19  3472               	retlw	114	;'r'
  1656  0D1A  3465               	retlw	101	;'e'
  1657  0D1B  3473               	retlw	115	;'s'
  1658  0D1C  3420               	retlw	32	;' '
  1659  0D1D  343D               	retlw	61	;'='
  1660  0D1E  3420               	retlw	32	;' '
  1661  0D1F  3425               	retlw	37	;'%'
  1662  0D20  3464               	retlw	100	;'d'
  1663  0D21  3400               	retlw	0
  1664  0D22                     STR_97:	
  1665  0D22  344D               	retlw	77	;'M'
  1666  0D23  3461               	retlw	97	;'a'
  1667  0D24  3469               	retlw	105	;'i'
  1668  0D25  346E               	retlw	110	;'n'
  1669  0D26  3420               	retlw	32	;' '
  1670  0D27  3473               	retlw	115	;'s'
  1671  0D28  3463               	retlw	99	;'c'
  1672  0D29  3472               	retlw	114	;'r'
  1673  0D2A  3465               	retlw	101	;'e'
  1674  0D2B  3465               	retlw	101	;'e'
  1675  0D2C  346E               	retlw	110	;'n'
  1676  0D2D  3400               	retlw	0
  1677  0D2E                     STR_34:	
  1678  0D2E  346E               	retlw	110	;'n'
  1679  0D2F  346F               	retlw	111	;'o'
  1680  0D30  3474               	retlw	116	;'t'
  1681  0D31  3420               	retlw	32	;' '
  1682  0D32  3476               	retlw	118	;'v'
  1683  0D33  3461               	retlw	97	;'a'
  1684  0D34  346C               	retlw	108	;'l'
  1685  0D35  3469               	retlw	105	;'i'
  1686  0D36  3464               	retlw	100	;'d'
  1687  0D37  3431               	retlw	49	;'1'
  1688  0D38  3400               	retlw	0
  1689  0D39                     STR_36:	
  1690  0D39  346E               	retlw	110	;'n'
  1691  0D3A  346F               	retlw	111	;'o'
  1692  0D3B  3474               	retlw	116	;'t'
  1693  0D3C  3420               	retlw	32	;' '
  1694  0D3D  3476               	retlw	118	;'v'
  1695  0D3E  3461               	retlw	97	;'a'
  1696  0D3F  346C               	retlw	108	;'l'
  1697  0D40  3469               	retlw	105	;'i'
  1698  0D41  3464               	retlw	100	;'d'
  1699  0D42  3432               	retlw	50	;'2'
  1700  0D43  3400               	retlw	0
  1701  0D44                     STR_38:	
  1702  0D44  346E               	retlw	110	;'n'
  1703  0D45  346F               	retlw	111	;'o'
  1704  0D46  3474               	retlw	116	;'t'
  1705  0D47  3420               	retlw	32	;' '
  1706  0D48  3476               	retlw	118	;'v'
  1707  0D49  3461               	retlw	97	;'a'
  1708  0D4A  346C               	retlw	108	;'l'
  1709  0D4B  3469               	retlw	105	;'i'
  1710  0D4C  3464               	retlw	100	;'d'
  1711  0D4D  3433               	retlw	51	;'3'
  1712  0D4E  3400               	retlw	0
  1713  0D4F                     STR_56:	
  1714  0D4F  3473               	retlw	115	;'s'
  1715  0D50  3474               	retlw	116	;'t'
  1716  0D51  3461               	retlw	97	;'a'
  1717  0D52  3472               	retlw	114	;'r'
  1718  0D53  3474               	retlw	116	;'t'
  1719  0D54  3420               	retlw	32	;' '
  1720  0D55  343D               	retlw	61	;'='
  1721  0D56  3420               	retlw	32	;' '
  1722  0D57  3425               	retlw	37	;'%'
  1723  0D58  3464               	retlw	100	;'d'
  1724  0D59  3400               	retlw	0
  1725  0D5A                     STR_43:	
  1726  0D5A  3466               	retlw	102	;'f'
  1727  0D5B  3461               	retlw	97	;'a'
  1728  0D5C  346C               	retlw	108	;'l'
  1729  0D5D  346C               	retlw	108	;'l'
  1730  0D5E  345F               	retlw	95	;'_'
  1731  0D5F  346F               	retlw	111	;'o'
  1732  0D60  3466               	retlw	102	;'f'
  1733  0D61  3466               	retlw	102	;'f'
  1734  0D62  3431               	retlw	49	;'1'
  1735  0D63  3400               	retlw	0
  1736  0D64                     STR_45:	
  1737  0D64  3466               	retlw	102	;'f'
  1738  0D65  3461               	retlw	97	;'a'
  1739  0D66  346C               	retlw	108	;'l'
  1740  0D67  346C               	retlw	108	;'l'
  1741  0D68  345F               	retlw	95	;'_'
  1742  0D69  346F               	retlw	111	;'o'
  1743  0D6A  3466               	retlw	102	;'f'
  1744  0D6B  3466               	retlw	102	;'f'
  1745  0D6C  3432               	retlw	50	;'2'
  1746  0D6D  3400               	retlw	0
  1747  0D6E                     STR_13:	
  1748  0D6E  3473               	retlw	115	;'s'
  1749  0D6F  3469               	retlw	105	;'i'
  1750  0D70  347A               	retlw	122	;'z'
  1751  0D71  3465               	retlw	101	;'e'
  1752  0D72  3420               	retlw	32	;' '
  1753  0D73  343D               	retlw	61	;'='
  1754  0D74  3420               	retlw	32	;' '
  1755  0D75  3425               	retlw	37	;'%'
  1756  0D76  3464               	retlw	100	;'d'
  1757  0D77  3400               	retlw	0
  1758  0D78                     STR_57:	
  1759  0D78  3473               	retlw	115	;'s'
  1760  0D79  3474               	retlw	116	;'t'
  1761  0D7A  346F               	retlw	111	;'o'
  1762  0D7B  3470               	retlw	112	;'p'
  1763  0D7C  3420               	retlw	32	;' '
  1764  0D7D  343D               	retlw	61	;'='
  1765  0D7E  3420               	retlw	32	;' '
  1766  0D7F  3425               	retlw	37	;'%'
  1767  0D80  3464               	retlw	100	;'d'
  1768  0D81  3400               	retlw	0
  1769  0D82                     STR_53:	
  1770  0D82  3472               	retlw	114	;'r'
  1771  0D83  346F               	retlw	111	;'o'
  1772  0D84  3477               	retlw	119	;'w'
  1773  0D85  3420               	retlw	32	;' '
  1774  0D86  343D               	retlw	61	;'='
  1775  0D87  3420               	retlw	32	;' '
  1776  0D88  3425               	retlw	37	;'%'
  1777  0D89  3464               	retlw	100	;'d'
  1778  0D8A  3400               	retlw	0
  1779  0D8B                     STR_32:	
  1780  0D8B  346E               	retlw	110	;'n'
  1781  0D8C  346F               	retlw	111	;'o'
  1782  0D8D  3474               	retlw	116	;'t'
  1783  0D8E  3420               	retlw	32	;' '
  1784  0D8F  3468               	retlw	104	;'h'
  1785  0D90  3469               	retlw	105	;'i'
  1786  0D91  3474               	retlw	116	;'t'
  1787  0D92  3400               	retlw	0
  1788  0D93                     STR_85:	
  1789  0D93  3443               	retlw	67	;'C'
  1790  0D94  3468               	retlw	104	;'h'
  1791  0D95  346F               	retlw	111	;'o'
  1792  0D96  3473               	retlw	115	;'s'
  1793  0D97  3465               	retlw	101	;'e'
  1794  0D98  346E               	retlw	110	;'n'
  1795  0D99  3400               	retlw	0
  1796  0D9A                     STR_40:	
  1797  0D9A  3476               	retlw	118	;'v'
  1798  0D9B  3461               	retlw	97	;'a'
  1799  0D9C  346C               	retlw	108	;'l'
  1800  0D9D  3469               	retlw	105	;'i'
  1801  0D9E  3464               	retlw	100	;'d'
  1802  0D9F  3400               	retlw	0
  1803  0DA0                     STR_78:	
  1804  0DA0  344C               	retlw	76	;'L'
  1805  0DA1  346F               	retlw	111	;'o'
  1806  0DA2  346F               	retlw	111	;'o'
  1807  0DA3  3470               	retlw	112	;'p'
  1808  0DA4  3400               	retlw	0
  1809  0DA5                     STR_1:	
  1810  0DA5  340D               	retlw	13
  1811  0DA6  340A               	retlw	10
  1812  0DA7  3400               	retlw	0
  1813  0DA8                     STR_7:	
  1814  0DA8  342A               	retlw	42	;'*'
  1815  0DA9  3400               	retlw	0
  1816  0DAA                     STR_5:	
  1817  0DAA  343A               	retlw	58	;':'
  1818  0DAB  3400               	retlw	0
  1819  0DAC                     STR_8:	
  1820  0DAC  345F               	retlw	95	;'_'
  1821  0DAD  3400               	retlw	0
  1822  0DA7                     
  1823                           ; #config settings
  1824  0000                     
  1825                           	psect	nvBANK0
  1826  006E                     __pnvBANK0:	
  1827  006E                     _UQEnd:	
  1828  006E                     	ds	1
  1829  006F                     _UQFront:	
  1830  006F                     	ds	1
  1831  000C                     _PIR1bits	set	12
  1832  001A                     _RCREG	set	26
  1833  0018                     _RCSTAbits	set	24
  1834  0019                     _TXREG	set	25
  1835  005F                     _GIE	set	95
  1836  005E                     _PEIE	set	94
  1837  0029                     _RA1	set	41
  1838  002A                     _RA2	set	42
  1839  0099                     _SPBRG	set	153
  1840  0085                     _TRISAbits	set	133
  1841  0098                     _TXSTAbits	set	152
  1842  0465                     _RCIE	set	1125
  1843  0188                     _ANSELbits	set	392
  1844                           
  1845                           	psect	cinit
  1846  07BA                     start_initialization:	
  1847  07BA                     __initialization:	
  1848                           
  1849                           ; Clear objects allocated to BANK0
  1850  07BA  01E8               	clrf	__pbssBANK0& (0+127)
  1851  07BB  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  1852  07BC  01EA               	clrf	(__pbssBANK0+2)& (0+127)
  1853                           
  1854                           ; Clear objects allocated to BANK1
  1855  07BD  1683               	bsf	3,5	;RP0=1, select bank1
  1856  07BE  1303               	bcf	3,6	;RP1=0, select bank1
  1857  07BF  01E7               	clrf	__pbssBANK1& (0+127)
  1858  07C0  01E8               	clrf	(__pbssBANK1+1)& (0+127)
  1859  07C1  01E9               	clrf	(__pbssBANK1+2)& (0+127)
  1860  07C2  01EA               	clrf	(__pbssBANK1+3)& (0+127)
  1861  07C3  01EB               	clrf	(__pbssBANK1+4)& (0+127)
  1862  07C4  01EC               	clrf	(__pbssBANK1+5)& (0+127)
  1863                           
  1864                           ; Clear objects allocated to BANK3
  1865  07C5  1783               	bsf	3,7	;select IRP bank2
  1866  07C6  3090               	movlw	low __pbssBANK3
  1867  07C7  0084               	movwf	4
  1868  07C8  30B7               	movlw	low (__pbssBANK3+39)
  1869  07C9  160A  158A  2062  120A  118A  	fcall	clear_ram0
  1870                           
  1871                           ; Clear objects allocated to BANK2
  1872  07CE  3010               	movlw	low __pbssBANK2
  1873  07CF  0084               	movwf	4
  1874  07D0  3070               	movlw	low (__pbssBANK2+96)
  1875  07D1  160A  158A  2062  120A  118A  	fcall	clear_ram0
  1876                           
  1877                           ; Initialize objects allocated to BANK3
  1878  07D6  30D7               	movlw	low (__pdataBANK3+32)
  1879  07D7  00FD               	movwf	btemp+-1
  1880  07D8  3019               	movlw	high __pidataBANK3
  1881  07D9  00FE               	movwf	btemp
  1882  07DA  303F               	movlw	low __pidataBANK3
  1883  07DB  00FF               	movwf	btemp+1
  1884  07DC  30B7               	movlw	low __pdataBANK3
  1885  07DD  0084               	movwf	4
  1886  07DE  160A  158A  2096  120A  118A  	fcall	init_ram0
  1887                           
  1888                           ; Initialize objects allocated to BANK1
  1889  07E3  1383               	bcf	3,7	;select IRP bank0
  1890  07E4  30F0               	movlw	low (__pdataBANK1+3)
  1891  07E5  00FD               	movwf	btemp+-1
  1892  07E6  3018               	movlw	high __pidataBANK1
  1893  07E7  00FE               	movwf	btemp
  1894  07E8  304F               	movlw	low __pidataBANK1
  1895  07E9  00FF               	movwf	btemp+1
  1896  07EA  30ED               	movlw	low __pdataBANK1
  1897  07EB  0084               	movwf	4
  1898  07EC  160A  158A  2096  120A  118A  	fcall	init_ram0
  1899                           
  1900                           ; Initialize objects allocated to BANK0
  1901  07F1  306E               	movlw	low (__pdataBANK0+3)
  1902  07F2  00FD               	movwf	btemp+-1
  1903  07F3  3018               	movlw	high __pidataBANK0
  1904  07F4  00FE               	movwf	btemp
  1905  07F5  3052               	movlw	low __pidataBANK0
  1906  07F6  00FF               	movwf	btemp+1
  1907  07F7  306B               	movlw	low __pdataBANK0
  1908  07F8  0084               	movwf	4
  1909  07F9  160A  158A  2096   	fcall	init_ram0
  1910  07FC                     end_of_initialization:	
  1911                           ;End of C runtime variable initialization code
  1912                           
  1913  07FC                     __end_of__initialization:	
  1914  07FC  0183               	clrf	3
  1915  07FD  120A  118A  295A   	ljmp	_main	;jump to C main() function
  1916                           
  1917                           	psect	bssBANK0
  1918  0068                     __pbssBANK0:	
  1919  0068                     _cur_y:	
  1920  0068                     	ds	1
  1921  0069                     _g_char_info_index:	
  1922  0069                     	ds	1
  1923  006A                     _temp_y:	
  1924  006A                     	ds	1
  1925                           
  1926                           	psect	dataBANK0
  1927  006B                     __pdataBANK0:	
  1928  006B                     _temp_pre_risk:	
  1929  006B                     	ds	2
  1930  006D                     _temp_pre_x:	
  1931  006D                     	ds	1
  1932                           
  1933                           	psect	bssBANK1
  1934  00E7                     __pbssBANK1:	
  1935  00E7                     _temp_risk:	
  1936  00E7                     	ds	2
  1937  00E9                     _temp_count:	
  1938  00E9                     	ds	1
  1939  00EA                     _temp_high:	
  1940  00EA                     	ds	1
  1941  00EB                     _temp_hole:	
  1942  00EB                     	ds	1
  1943  00EC                     _temp_pre_count:	
  1944  00EC                     	ds	1
  1945                           
  1946                           	psect	dataBANK1
  1947  00ED                     __pdataBANK1:	
  1948  00ED                     _cur_x:	
  1949  00ED                     	ds	1
  1950  00EE                     _temp_pre_high:	
  1951  00EE                     	ds	1
  1952  00EF                     _temp_pre_hole:	
  1953  00EF                     	ds	1
  1954                           
  1955                           	psect	bssBANK3
  1956  0190                     __pbssBANK3:	
  1957  0190                     USARTWriteInt@F1617:	
  1958  0190                     	ds	5
  1959  0195                     _g_cur_matrix44:	
  1960  0195                     	ds	2
  1961  0197                     _g_debug:	
  1962  0197                     	ds	32
  1963                           
  1964                           	psect	dataBANK3
  1965  01B7                     __pdataBANK3:	
  1966  01B7                     _g_char_info:	
  1967  01B7                     	ds	27
  1968  01D2                     _randx:	
  1969  01D2                     	ds	4
  1970  01D6                     _tem_pre_sub_index:	
  1971  01D6                     	ds	1
  1972                           
  1973                           	psect	bssBANK2
  1974  0110                     __pbssBANK2:	
  1975  0110                     _URBuff:	
  1976  0110                     	ds	32
  1977  0130                     _g_matrix88:	
  1978  0130                     	ds	64
  1979                           
  1980                           	psect	clrtext
  1981  1862                     clear_ram0:	
  1982                           ;	Called with FSR containing the base address, and
  1983                           ;	W with the last address+1
  1984                           
  1985  1862  0064               	clrwdt	;clear the watchdog before getting into this loop
  1986  1863                     clrloop0:	
  1987  1863  0180               	clrf	0	;clear RAM location pointed to by FSR
  1988  1864  0A84               	incf	4,f	;increment pointer
  1989  1865  0604               	xorwf	4,w	;XOR with final address
  1990  1866  1903               	btfsc	3,2	;have we reached the end yet?
  1991  1867  3400               	retlw	0	;all done for this memory range, return
  1992  1868  0604               	xorwf	4,w	;XOR again to restore value
  1993  1869  2863               	goto	clrloop0	;do the next byte
  1994                           
  1995                           	psect	inittext
  1996  1892                     init_fetch0:	
  1997                           ;	Called with low address in FSR and high address in W
  1998                           
  1999  1892  087E               	movf	126,w
  2000  1893  008A               	movwf	10
  2001  1894  087F               	movf	127,w
  2002  1895  0082               	movwf	2
  2003  1896                     init_ram0:	
  2004                           ;Called with:
  2005                           ;	high address of idata address in btemp 
  2006                           ;	low address of idata address in btemp+1 
  2007                           ;	low address of data in FSR
  2008                           ;	high address + 1 of data in btemp-1
  2009                           
  2010  1896  2092  160A  158A   	fcall	init_fetch0
  2011  1899  0080               	movwf	0
  2012  189A  0A84               	incf	4,f
  2013  189B  0804               	movf	4,w
  2014  189C  067D               	xorwf	125,w
  2015  189D  1903               	btfsc	3,2
  2016  189E  3400               	retlw	0
  2017  189F  0AFF               	incf	127,f
  2018  18A0  1903               	btfsc	3,2
  2019  18A1  0AFE               	incf	126,f
  2020  18A2  2896               	goto	init_ram0
  2021                           
  2022                           	psect	cstackBANK1
  2023  00A0                     __pcstackBANK1:	
  2024  00A0                     find_best_solution@left_most_index:	
  2025                           
  2026                           ; 1 bytes @ 0x0
  2027  00A0                     	ds	1
  2028  00A1                     find_best_solution@right_most_index:	
  2029                           
  2030                           ; 1 bytes @ 0x1
  2031  00A1                     	ds	1
  2032  00A2                     find_best_solution@res:	
  2033                           
  2034                           ; 1 bytes @ 0x2
  2035  00A2                     	ds	1
  2036  00A3                     find_best_solution@temp_matrix88:	
  2037                           
  2038                           ; 64 bytes @ 0x3
  2039  00A3                     	ds	64
  2040  00E3                     find_best_solution@temp_cur_matrix44:	
  2041                           
  2042                           ; 2 bytes @ 0x43
  2043  00E3                     	ds	2
  2044  00E5                     find_best_solution@tem_sub_index:	
  2045                           
  2046                           ; 1 bytes @ 0x45
  2047  00E5                     	ds	1
  2048  00E6                     find_best_solution@temp_x:	
  2049                           
  2050                           ; 1 bytes @ 0x46
  2051  00E6                     	ds	1
  2052                           
  2053                           	psect	cstackCOMMON
  2054  0070                     __pcstackCOMMON:	
  2055  0070                     ?_isdigit:	
  2056  0070                     ?_srand:	
  2057                           ; 1 bit 
  2058                           
  2059  0070                     ??_isdigit:	
  2060                           ; 1 bytes @ 0x0
  2061                           
  2062  0070                     ?_USARTInit:	
  2063                           ; 1 bytes @ 0x0
  2064                           
  2065  0070                     ?_USARTWriteChar:	
  2066                           ; 1 bytes @ 0x0
  2067                           
  2068  0070                     ??_USARTWriteChar:	
  2069                           ; 1 bytes @ 0x0
  2070                           
  2071  0070                     ?_SPI1_write:	
  2072                           ; 1 bytes @ 0x0
  2073                           
  2074  0070                     ??_SPI1_write:	
  2075                           ; 1 bytes @ 0x0
  2076                           
  2077  0070                     ?_Write_Byte:	
  2078                           ; 1 bytes @ 0x0
  2079                           
  2080  0070                     ?_printf_MATRIX7219:	
  2081                           ; 1 bytes @ 0x0
  2082                           
  2083  0070                     ?_MATRIX88_to_MATRIX7219:	
  2084                           ; 1 bytes @ 0x0
  2085                           
  2086  0070                     ?_printf_MATRIX88:	
  2087                           ; 1 bytes @ 0x0
  2088                           
  2089  0070                     ?_printf_Screen:	
  2090                           ; 1 bytes @ 0x0
  2091                           
  2092  0070                     ?_Clear_Matrix:	
  2093                           ; 1 bytes @ 0x0
  2094                           
  2095  0070                     ?_is_row_full:	
  2096                           ; 1 bytes @ 0x0
  2097                           
  2098  0070                     ?_is_row_empty:	
  2099                           ; 1 bytes @ 0x0
  2100                           
  2101  0070                     ?_clear:	
  2102                           ; 1 bytes @ 0x0
  2103                           
  2104  0070                     ?_merge:	
  2105                           ; 1 bytes @ 0x0
  2106                           
  2107  0070                     ?_char_info_index_rand:	
  2108                           ; 1 bytes @ 0x0
  2109                           
  2110  0070                     ?_get_high:	
  2111                           ; 1 bytes @ 0x0
  2112                           
  2113  0070                     ?_get_holes_after_merge:	
  2114                           ; 1 bytes @ 0x0
  2115                           
  2116  0070                     ?_find_best_solution:	
  2117                           ; 1 bytes @ 0x0
  2118                           
  2119  0070                     ?___bmul:	
  2120                           ; 1 bytes @ 0x0
  2121                           
  2122  0070                     ?_memset:	
  2123                           ; 1 bytes @ 0x0
  2124                           
  2125  0070                     ?_memcpy:	
  2126                           ; 2 bytes @ 0x0
  2127                           
  2128  0070                     ?___wmul:	
  2129                           ; 2 bytes @ 0x0
  2130                           
  2131  0070                     ?___lwdiv:	
  2132                           ; 2 bytes @ 0x0
  2133                           
  2134  0070                     ?___lmul:	
  2135                           ; 2 bytes @ 0x0
  2136                           
  2137  0070                     USARTWriteChar@ch:	
  2138                           ; 4 bytes @ 0x0
  2139                           
  2140  0070                     SPI1_write@data:	
  2141                           ; 1 bytes @ 0x0
  2142                           
  2143  0070                     Write_Byte@myValue:	
  2144                           ; 1 bytes @ 0x0
  2145                           
  2146  0070                     MATRIX88_to_MATRIX7219@matrix7219:	
  2147                           ; 1 bytes @ 0x0
  2148                           
  2149  0070                     is_row_empty@row:	
  2150                           ; 1 bytes @ 0x0
  2151                           
  2152  0070                     clear@y:	
  2153                           ; 1 bytes @ 0x0
  2154                           
  2155  0070                     merge@y:	
  2156                           ; 1 bytes @ 0x0
  2157                           
  2158  0070                     ___bmul@multiplicand:	
  2159                           ; 1 bytes @ 0x0
  2160                           
  2161  0070                     _isdigit$905:	
  2162                           ; 1 bytes @ 0x0
  2163                           
  2164  0070                     USARTInit@baud_rate:	
  2165                           ; 1 bytes @ 0x0
  2166                           
  2167  0070                     is_row_full@matrix:	
  2168                           ; 2 bytes @ 0x0
  2169                           
  2170  0070                     ___wmul@multiplier:	
  2171                           ; 2 bytes @ 0x0
  2172                           
  2173  0070                     ___lwdiv@divisor:	
  2174                           ; 2 bytes @ 0x0
  2175                           
  2176  0070                     memcpy@d1:	
  2177                           ; 2 bytes @ 0x0
  2178                           
  2179  0070                     memset@p1:	
  2180                           ; 2 bytes @ 0x0
  2181                           
  2182  0070                     srand@x:	
  2183                           ; 2 bytes @ 0x0
  2184                           
  2185  0070                     ___lmul@multiplier:	
  2186                           ; 2 bytes @ 0x0
  2187                           
  2188                           
  2189                           ; 4 bytes @ 0x0
  2190  0070                     	ds	1
  2191  0071                     ?_USARTWriteString:	
  2192  0071                     ??_Write_Byte:	
  2193                           ; 1 bytes @ 0x1
  2194                           
  2195  0071                     ??_MATRIX88_to_MATRIX7219:	
  2196                           ; 1 bytes @ 0x1
  2197                           
  2198  0071                     ??_is_row_empty:	
  2199                           ; 1 bytes @ 0x1
  2200                           
  2201  0071                     ??___bmul:	
  2202                           ; 1 bytes @ 0x1
  2203                           
  2204  0071                     Write_Byte@myColumn:	
  2205                           ; 1 bytes @ 0x1
  2206                           
  2207  0071                     isdigit@c:	
  2208                           ; 1 bytes @ 0x1
  2209                           
  2210  0071                     USARTWriteString@str:	
  2211                           ; 1 bytes @ 0x1
  2212                           
  2213  0071                     clear@matrix44:	
  2214                           ; 2 bytes @ 0x1
  2215                           
  2216  0071                     merge@matrix44:	
  2217                           ; 2 bytes @ 0x1
  2218                           
  2219                           
  2220                           ; 2 bytes @ 0x1
  2221  0071                     	ds	1
  2222  0072                     ??_srand:	
  2223  0072                     ??_USARTInit:	
  2224                           ; 1 bytes @ 0x2
  2225                           
  2226  0072                     ??_printf_MATRIX7219:	
  2227                           ; 1 bytes @ 0x2
  2228                           
  2229  0072                     is_row_full@row:	
  2230                           ; 1 bytes @ 0x2
  2231                           
  2232  0072                     ___bmul@product:	
  2233                           ; 1 bytes @ 0x2
  2234                           
  2235  0072                     ___wmul@multiplicand:	
  2236                           ; 1 bytes @ 0x2
  2237                           
  2238  0072                     ___lwdiv@dividend:	
  2239                           ; 2 bytes @ 0x2
  2240                           
  2241  0072                     memcpy@s1:	
  2242                           ; 2 bytes @ 0x2
  2243                           
  2244  0072                     memset@c:	
  2245                           ; 2 bytes @ 0x2
  2246                           
  2247                           
  2248                           ; 2 bytes @ 0x2
  2249  0072                     	ds	1
  2250  0073                     ??_USARTWriteString:	
  2251  0073                     ?_debug_str:	
  2252                           ; 1 bytes @ 0x3
  2253                           
  2254  0073                     ?_debug_line:	
  2255                           ; 1 bytes @ 0x3
  2256                           
  2257  0073                     ??_is_row_full:	
  2258                           ; 1 bytes @ 0x3
  2259                           
  2260  0073                     clear@matrix88:	
  2261                           ; 1 bytes @ 0x3
  2262                           
  2263  0073                     merge@matrix88:	
  2264                           ; 1 bytes @ 0x3
  2265                           
  2266  0073                     ___bmul@multiplier:	
  2267                           ; 1 bytes @ 0x3
  2268                           
  2269  0073                     debug_str@str:	
  2270                           ; 1 bytes @ 0x3
  2271                           
  2272  0073                     debug_line@str:	
  2273                           ; 2 bytes @ 0x3
  2274                           
  2275                           
  2276                           ; 2 bytes @ 0x3
  2277  0073                     	ds	1
  2278  0074                     ??_clear:	
  2279  0074                     ??_merge:	
  2280                           ; 1 bytes @ 0x4
  2281                           
  2282  0074                     ??___wmul:	
  2283                           ; 1 bytes @ 0x4
  2284                           
  2285  0074                     ??___lwdiv:	
  2286                           ; 1 bytes @ 0x4
  2287                           
  2288  0074                     printf_MATRIX7219@matrix:	
  2289                           ; 1 bytes @ 0x4
  2290                           
  2291  0074                     MATRIX88_to_MATRIX7219@matrix88:	
  2292                           ; 1 bytes @ 0x4
  2293                           
  2294  0074                     is_row_empty@matrix:	
  2295                           ; 1 bytes @ 0x4
  2296                           
  2297  0074                     ___wmul@product:	
  2298                           ; 1 bytes @ 0x4
  2299                           
  2300  0074                     memcpy@n:	
  2301                           ; 2 bytes @ 0x4
  2302                           
  2303  0074                     memset@n:	
  2304                           ; 2 bytes @ 0x4
  2305                           
  2306  0074                     ___lmul@multiplicand:	
  2307                           ; 2 bytes @ 0x4
  2308                           
  2309                           
  2310                           ; 4 bytes @ 0x4
  2311  0074                     	ds	1
  2312  0075                     ??_debug_str:	
  2313  0075                     ??_debug_line:	
  2314                           ; 1 bytes @ 0x5
  2315                           
  2316  0075                     debug_str@enable:	
  2317                           ; 1 bytes @ 0x5
  2318                           
  2319  0075                     debug_line@enable:	
  2320                           ; 1 bytes @ 0x5
  2321                           
  2322  0075                     printf_MATRIX7219@col:	
  2323                           ; 1 bytes @ 0x5
  2324                           
  2325  0075                     MATRIX88_to_MATRIX7219@mask:	
  2326                           ; 1 bytes @ 0x5
  2327                           
  2328  0075                     is_row_empty@col:	
  2329                           ; 1 bytes @ 0x5
  2330                           
  2331  0075                     ___lwdiv@quotient:	
  2332                           ; 1 bytes @ 0x5
  2333                           
  2334                           
  2335                           ; 2 bytes @ 0x5
  2336  0075                     	ds	1
  2337  0076                     ??_memset:	
  2338  0076                     ??_memcpy:	
  2339                           ; 1 bytes @ 0x6
  2340                           
  2341  0076                     ?_printf_debug_MATRIX44:	
  2342                           ; 1 bytes @ 0x6
  2343                           
  2344  0076                     ?_printf_debug_MATRIX88:	
  2345                           ; 1 bytes @ 0x6
  2346                           
  2347  0076                     ?_is_left_boundary:	
  2348                           ; 1 bytes @ 0x6
  2349                           
  2350  0076                     ?_is_right_boundary:	
  2351                           ; 1 bytes @ 0x6
  2352                           
  2353  0076                     MATRIX88_to_MATRIX7219@row:	
  2354                           ; 1 bytes @ 0x6
  2355                           
  2356  0076                     printf_debug_MATRIX44@lable:	
  2357                           ; 1 bytes @ 0x6
  2358                           
  2359  0076                     printf_debug_MATRIX88@lable:	
  2360                           ; 2 bytes @ 0x6
  2361                           
  2362  0076                     is_left_boundary@matrix44:	
  2363                           ; 2 bytes @ 0x6
  2364                           
  2365  0076                     is_right_boundary@matrix44:	
  2366                           ; 2 bytes @ 0x6
  2367                           
  2368  0076                     memset@p:	
  2369                           ; 2 bytes @ 0x6
  2370                           
  2371                           
  2372                           ; 2 bytes @ 0x6
  2373  0076                     	ds	1
  2374  0077                     MATRIX88_to_MATRIX7219@col:	
  2375  0077                     ___lwdiv@counter:	
  2376                           ; 1 bytes @ 0x7
  2377                           
  2378  0077                     memcpy@d:	
  2379                           ; 1 bytes @ 0x7
  2380                           
  2381                           
  2382                           ; 2 bytes @ 0x7
  2383  0077                     	ds	1
  2384  0078                     ??_printf_MATRIX88:	
  2385  0078                     ??___lmul:	
  2386                           ; 1 bytes @ 0x8
  2387                           
  2388  0078                     ?___lwmod:	
  2389                           ; 1 bytes @ 0x8
  2390                           
  2391  0078                     printf_debug_MATRIX44@x:	
  2392                           ; 2 bytes @ 0x8
  2393                           
  2394  0078                     is_row_full@col:	
  2395                           ; 1 bytes @ 0x8
  2396                           
  2397  0078                     is_left_boundary@matrix88:	
  2398                           ; 1 bytes @ 0x8
  2399                           
  2400  0078                     is_right_boundary@matrix88:	
  2401                           ; 1 bytes @ 0x8
  2402                           
  2403  0078                     clear@x:	
  2404                           ; 1 bytes @ 0x8
  2405                           
  2406  0078                     merge@x:	
  2407                           ; 1 bytes @ 0x8
  2408                           
  2409  0078                     printf_debug_MATRIX88@matrix:	
  2410                           ; 1 bytes @ 0x8
  2411                           
  2412  0078                     ___lwmod@divisor:	
  2413                           ; 2 bytes @ 0x8
  2414                           
  2415                           
  2416                           ; 2 bytes @ 0x8
  2417  0078                     	ds	1
  2418  0079                     ??_printf_Screen:	
  2419  0079                     ??_Clear_Matrix:	
  2420                           ; 1 bytes @ 0x9
  2421                           
  2422  0079                     ??_is_left_boundary:	
  2423                           ; 1 bytes @ 0x9
  2424                           
  2425  0079                     ??_is_right_boundary:	
  2426                           ; 1 bytes @ 0x9
  2427                           
  2428  0079                     printf_debug_MATRIX44@y:	
  2429                           ; 1 bytes @ 0x9
  2430                           
  2431  0079                     clear@row:	
  2432                           ; 1 bytes @ 0x9
  2433                           
  2434  0079                     merge@row:	
  2435                           ; 1 bytes @ 0x9
  2436                           
  2437  0079                     memcpy@s:	
  2438                           ; 1 bytes @ 0x9
  2439                           
  2440  0079                     ___lmul@product:	
  2441                           ; 2 bytes @ 0x9
  2442                           
  2443                           
  2444                           ; 4 bytes @ 0x9
  2445  0079                     	ds	1
  2446  007A                     printf_debug_MATRIX88@enable:	
  2447  007A                     clear@col:	
  2448                           ; 1 bytes @ 0xA
  2449                           
  2450  007A                     merge@col:	
  2451                           ; 1 bytes @ 0xA
  2452                           
  2453  007A                     printf_debug_MATRIX44@matrix:	
  2454                           ; 1 bytes @ 0xA
  2455                           
  2456  007A                     ___lwmod@dividend:	
  2457                           ; 2 bytes @ 0xA
  2458                           
  2459                           
  2460                           ; 2 bytes @ 0xA
  2461  007A                     	ds	1
  2462  007B                     ?_delete_row:	
  2463  007B                     printf_debug_MATRIX88@row:	
  2464                           ; 1 bytes @ 0xB
  2465                           
  2466  007B                     delete_row@matrix:	
  2467                           ; 1 bytes @ 0xB
  2468                           
  2469                           
  2470                           ; 2 bytes @ 0xB
  2471  007B                     	ds	1
  2472  007C                     ??___lwmod:	
  2473  007C                     printf_debug_MATRIX88@col:	
  2474                           ; 1 bytes @ 0xC
  2475                           
  2476                           
  2477                           ; 1 bytes @ 0xC
  2478  007C                     	ds	1
  2479  007D                     ??_printf_debug_Screen:	
  2480  007D                     ??___awmod:	
  2481                           ; 1 bytes @ 0xD
  2482                           
  2483  007D                     printf_debug_Screen@enable:	
  2484                           ; 1 bytes @ 0xD
  2485                           
  2486  007D                     delete_row@row:	
  2487                           ; 1 bytes @ 0xD
  2488                           
  2489  007D                     ___lwmod@counter:	
  2490                           ; 1 bytes @ 0xD
  2491                           
  2492                           
  2493                           ; 1 bytes @ 0xD
  2494  007D                     	ds	1
  2495  007E                     ??_debug_int1:	
  2496  007E                     ??_debug_int2:	
  2497                           ; 1 bytes @ 0xE
  2498                           
  2499  007E                     ??_char_info_index_rand:	
  2500                           ; 1 bytes @ 0xE
  2501                           
  2502                           
  2503                           	psect	cstackBANK0
  2504  0020                     __pcstackBANK0:	
  2505                           ; 1 bytes @ 0xE
  2506                           
  2507  0020                     ??_printf_debug_MATRIX44:	
  2508  0020                     ??_printf_debug_MATRIX88:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0020                     ??_delete_row:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0020                     ?_merge1:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0020                     ?_sprintf:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0020                     ?_rand:	
  2521                           ; 2 bytes @ 0x0
  2522                           
  2523  0020                     printf_MATRIX88@matrix88:	
  2524                           ; 2 bytes @ 0x0
  2525                           
  2526  0020                     is_left_boundary@x:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0020                     is_right_boundary@x:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0020                     merge1@y:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535  0020                     sprintf@f:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538                           
  2539                           ; 2 bytes @ 0x0
  2540  0020                     	ds	1
  2541  0021                     is_left_boundary@row:	
  2542  0021                     is_right_boundary@row:	
  2543                           ; 1 bytes @ 0x1
  2544                           
  2545  0021                     merge1@matrix44:	
  2546                           ; 1 bytes @ 0x1
  2547                           
  2548  0021                     printf_MATRIX88@matrix7219:	
  2549                           ; 2 bytes @ 0x1
  2550                           
  2551                           
  2552                           ; 8 bytes @ 0x1
  2553  0021                     	ds	1
  2554  0022                     ??_rand:	
  2555  0022                     is_left_boundary@col:	
  2556                           ; 1 bytes @ 0x2
  2557                           
  2558  0022                     is_right_boundary@col:	
  2559                           ; 1 bytes @ 0x2
  2560                           
  2561                           
  2562                           ; 1 bytes @ 0x2
  2563  0022                     	ds	1
  2564  0023                     merge1@matrix88_in:	
  2565                           
  2566                           ; 1 bytes @ 0x3
  2567  0023                     	ds	1
  2568  0024                     merge1@matrix88_out:	
  2569  0024                     delete_row@len:	
  2570                           ; 1 bytes @ 0x4
  2571                           
  2572                           
  2573                           ; 2 bytes @ 0x4
  2574  0024                     	ds	1
  2575  0025                     ?_printf_debug_Screen:	
  2576  0025                     ??_merge1:	
  2577                           ; 1 bytes @ 0x5
  2578                           
  2579  0025                     printf_debug_Screen@lable:	
  2580                           ; 1 bytes @ 0x5
  2581                           
  2582                           
  2583                           ; 2 bytes @ 0x5
  2584  0025                     	ds	1
  2585  0026                     delete_row@i:	
  2586                           
  2587                           ; 1 bytes @ 0x6
  2588  0026                     	ds	1
  2589  0027                     ?___awmod:	
  2590  0027                     ___awmod@divisor:	
  2591                           ; 2 bytes @ 0x7
  2592                           
  2593                           
  2594                           ; 2 bytes @ 0x7
  2595  0027                     	ds	1
  2596  0028                     ??_sprintf:	
  2597                           
  2598                           ; 1 bytes @ 0x8
  2599  0028                     	ds	1
  2600  0029                     printf_debug_MATRIX44@enable:	
  2601  0029                     merge1@x:	
  2602                           ; 1 bytes @ 0x9
  2603                           
  2604  0029                     ___awmod@dividend:	
  2605                           ; 1 bytes @ 0x9
  2606                           
  2607                           
  2608                           ; 2 bytes @ 0x9
  2609  0029                     	ds	1
  2610  002A                     printf_debug_MATRIX44@row:	
  2611  002A                     merge1@len:	
  2612                           ; 1 bytes @ 0xA
  2613                           
  2614                           
  2615                           ; 2 bytes @ 0xA
  2616  002A                     	ds	1
  2617  002B                     printf_debug_MATRIX44@col:	
  2618  002B                     ___awmod@counter:	
  2619                           ; 1 bytes @ 0xB
  2620                           
  2621  002B                     _sprintf$712:	
  2622                           ; 1 bytes @ 0xB
  2623                           
  2624                           
  2625                           ; 2 bytes @ 0xB
  2626  002B                     	ds	1
  2627  002C                     ?_printf_debug_cur_MATRIX44:	
  2628  002C                     merge1@row:	
  2629                           ; 1 bytes @ 0xC
  2630                           
  2631  002C                     ___awmod@sign:	
  2632                           ; 1 bytes @ 0xC
  2633                           
  2634  002C                     printf_debug_cur_MATRIX44@lable:	
  2635                           ; 1 bytes @ 0xC
  2636                           
  2637                           
  2638                           ; 2 bytes @ 0xC
  2639  002C                     	ds	1
  2640  002D                     merge1@col:	
  2641  002D                     _sprintf$713:	
  2642                           ; 1 bytes @ 0xD
  2643                           
  2644                           
  2645                           ; 2 bytes @ 0xD
  2646  002D                     	ds	1
  2647  002E                     printf_debug_cur_MATRIX44@x:	
  2648                           
  2649                           ; 1 bytes @ 0xE
  2650  002E                     	ds	1
  2651  002F                     printf_debug_cur_MATRIX44@y:	
  2652  002F                     _sprintf$719:	
  2653                           ; 1 bytes @ 0xF
  2654                           
  2655                           
  2656                           ; 2 bytes @ 0xF
  2657  002F                     	ds	1
  2658  0030                     ??_printf_debug_cur_MATRIX44:	
  2659                           
  2660                           ; 1 bytes @ 0x10
  2661  0030                     	ds	1
  2662  0031                     sprintf@idx:	
  2663                           
  2664                           ; 1 bytes @ 0x11
  2665  0031                     	ds	1
  2666  0032                     sprintf@cp:	
  2667                           
  2668                           ; 1 bytes @ 0x12
  2669  0032                     	ds	1
  2670  0033                     sprintf@len:	
  2671                           
  2672                           ; 2 bytes @ 0x13
  2673  0033                     	ds	2
  2674  0035                     sprintf@ap:	
  2675                           
  2676                           ; 1 bytes @ 0x15
  2677  0035                     	ds	1
  2678  0036                     sprintf@val:	
  2679                           
  2680                           ; 2 bytes @ 0x16
  2681  0036                     	ds	2
  2682  0038                     sprintf@prec:	
  2683                           
  2684                           ; 1 bytes @ 0x18
  2685  0038                     	ds	1
  2686  0039                     printf_debug_cur_MATRIX44@enable:	
  2687  0039                     sprintf@width:	
  2688                           ; 1 bytes @ 0x19
  2689                           
  2690                           
  2691                           ; 2 bytes @ 0x19
  2692  0039                     	ds	1
  2693  003A                     printf_debug_cur_MATRIX44@matrix:	
  2694                           
  2695                           ; 2 bytes @ 0x1A
  2696  003A                     	ds	1
  2697  003B                     sprintf@c:	
  2698                           
  2699                           ; 1 bytes @ 0x1B
  2700  003B                     	ds	1
  2701  003C                     sprintf@sp:	
  2702                           
  2703                           ; 1 bytes @ 0x1C
  2704  003C                     	ds	1
  2705  003D                     sprintf@flag:	
  2706                           
  2707                           ; 2 bytes @ 0x1D
  2708  003D                     	ds	2
  2709  003F                     ?_debug_int1:	
  2710  003F                     ?_debug_int2:	
  2711                           ; 1 bytes @ 0x1F
  2712                           
  2713  003F                     debug_int1@f:	
  2714                           ; 1 bytes @ 0x1F
  2715                           
  2716  003F                     debug_int2@f:	
  2717                           ; 2 bytes @ 0x1F
  2718                           
  2719                           
  2720                           ; 2 bytes @ 0x1F
  2721  003F                     	ds	2
  2722  0041                     debug_int1@i:	
  2723  0041                     debug_int2@i1:	
  2724                           ; 2 bytes @ 0x21
  2725                           
  2726                           
  2727                           ; 2 bytes @ 0x21
  2728  0041                     	ds	2
  2729  0043                     debug_int1@enable:	
  2730  0043                     debug_int2@i2:	
  2731                           ; 1 bytes @ 0x23
  2732                           
  2733                           
  2734                           ; 2 bytes @ 0x23
  2735  0043                     	ds	1
  2736  0044                     ?_delete_matrix:	
  2737  0044                     ?_left_most:	
  2738                           ; 1 bytes @ 0x24
  2739                           
  2740  0044                     ?_right_most:	
  2741                           ; 1 bytes @ 0x24
  2742                           
  2743  0044                     ??_get_high:	
  2744                           ; 1 bytes @ 0x24
  2745                           
  2746  0044                     ?_get_high_after_merge:	
  2747                           ; 1 bytes @ 0x24
  2748                           
  2749  0044                     ??_get_holes_after_merge:	
  2750                           ; 1 bytes @ 0x24
  2751                           
  2752  0044                     ?_evaluate:	
  2753                           ; 1 bytes @ 0x24
  2754                           
  2755  0044                     delete_matrix@matrix:	
  2756                           ; 2 bytes @ 0x24
  2757                           
  2758  0044                     left_most@matrix44:	
  2759                           ; 2 bytes @ 0x24
  2760                           
  2761  0044                     right_most@matrix44:	
  2762                           ; 2 bytes @ 0x24
  2763                           
  2764  0044                     get_high_after_merge@matrix:	
  2765                           ; 2 bytes @ 0x24
  2766                           
  2767                           
  2768                           ; 2 bytes @ 0x24
  2769  0044                     	ds	1
  2770  0045                     debug_int2@enable:	
  2771                           
  2772                           ; 1 bytes @ 0x25
  2773  0045                     	ds	1
  2774  0046                     ??_delete_matrix:	
  2775  0046                     ?_hit_land:	
  2776                           ; 1 bytes @ 0x26
  2777                           
  2778  0046                     ?_is_valid:	
  2779                           ; 1 bytes @ 0x26
  2780                           
  2781  0046                     ?_fall_off:	
  2782                           ; 1 bytes @ 0x26
  2783                           
  2784  0046                     ??_evaluate:	
  2785                           ; 1 bytes @ 0x26
  2786                           
  2787  0046                     ??_get_high_after_merge:	
  2788                           ; 1 bytes @ 0x26
  2789                           
  2790  0046                     hit_land@y:	
  2791                           ; 1 bytes @ 0x26
  2792                           
  2793  0046                     is_valid@y:	
  2794                           ; 1 bytes @ 0x26
  2795                           
  2796  0046                     fall_off@y:	
  2797                           ; 1 bytes @ 0x26
  2798                           
  2799  0046                     left_most@matrix88:	
  2800                           ; 1 bytes @ 0x26
  2801                           
  2802  0046                     right_most@matrix88:	
  2803                           ; 1 bytes @ 0x26
  2804                           
  2805  0046                     get_high@matrix:	
  2806                           ; 1 bytes @ 0x26
  2807                           
  2808                           
  2809                           ; 1 bytes @ 0x26
  2810  0046                     	ds	1
  2811  0047                     ??_left_most:	
  2812  0047                     ??_right_most:	
  2813                           ; 1 bytes @ 0x27
  2814                           
  2815  0047                     get_high@row:	
  2816                           ; 1 bytes @ 0x27
  2817                           
  2818  0047                     hit_land@matrix44:	
  2819                           ; 1 bytes @ 0x27
  2820                           
  2821  0047                     is_valid@matrix44:	
  2822                           ; 2 bytes @ 0x27
  2823                           
  2824  0047                     fall_off@matrix44:	
  2825                           ; 2 bytes @ 0x27
  2826                           
  2827                           
  2828                           ; 2 bytes @ 0x27
  2829  0047                     	ds	1
  2830  0048                     delete_matrix@count:	
  2831  0048                     left_most@x:	
  2832                           ; 1 bytes @ 0x28
  2833                           
  2834                           
  2835                           ; 1 bytes @ 0x28
  2836  0048                     	ds	1
  2837  0049                     delete_matrix@row:	
  2838  0049                     hit_land@matrix88:	
  2839                           ; 1 bytes @ 0x29
  2840                           
  2841  0049                     is_valid@matrix88:	
  2842                           ; 1 bytes @ 0x29
  2843                           
  2844  0049                     fall_off@matrix88:	
  2845                           ; 1 bytes @ 0x29
  2846                           
  2847  0049                     right_most@x:	
  2848                           ; 1 bytes @ 0x29
  2849                           
  2850                           
  2851                           ; 1 bytes @ 0x29
  2852  0049                     	ds	1
  2853  004A                     ??_hit_land:	
  2854  004A                     ??_is_valid:	
  2855                           ; 1 bytes @ 0x2A
  2856                           
  2857  004A                     ??_fall_off:	
  2858                           ; 1 bytes @ 0x2A
  2859                           
  2860  004A                     get_high_after_merge@y:	
  2861                           ; 1 bytes @ 0x2A
  2862                           
  2863  004A                     get_holes_after_merge@num_hole:	
  2864                           ; 1 bytes @ 0x2A
  2865                           
  2866  004A                     evaluate@risk:	
  2867                           ; 1 bytes @ 0x2A
  2868                           
  2869                           
  2870                           ; 2 bytes @ 0x2A
  2871  004A                     	ds	1
  2872  004B                     get_high_after_merge@col:	
  2873  004B                     get_holes_after_merge@stop:	
  2874                           ; 1 bytes @ 0x2B
  2875                           
  2876                           
  2877                           ; 1 bytes @ 0x2B
  2878  004B                     	ds	1
  2879  004C                     evaluate@full:	
  2880  004C                     get_high_after_merge@row:	
  2881                           ; 1 bytes @ 0x2C
  2882                           
  2883  004C                     get_holes_after_merge@matrix:	
  2884                           ; 1 bytes @ 0x2C
  2885                           
  2886                           
  2887                           ; 1 bytes @ 0x2C
  2888  004C                     	ds	1
  2889  004D                     evaluate@matrix:	
  2890  004D                     get_holes_after_merge@start:	
  2891                           ; 1 bytes @ 0x2D
  2892                           
  2893                           
  2894                           ; 1 bytes @ 0x2D
  2895  004D                     	ds	1
  2896  004E                     hit_land@x:	
  2897  004E                     is_valid@x:	
  2898                           ; 1 bytes @ 0x2E
  2899                           
  2900  004E                     fall_off@x:	
  2901                           ; 1 bytes @ 0x2E
  2902                           
  2903  004E                     evaluate@col:	
  2904                           ; 1 bytes @ 0x2E
  2905                           
  2906  004E                     get_holes_after_merge@col:	
  2907                           ; 1 bytes @ 0x2E
  2908                           
  2909                           
  2910                           ; 1 bytes @ 0x2E
  2911  004E                     	ds	1
  2912  004F                     hit_land@col:	
  2913  004F                     is_valid@row:	
  2914                           ; 1 bytes @ 0x2F
  2915                           
  2916  004F                     fall_off@col:	
  2917                           ; 1 bytes @ 0x2F
  2918                           
  2919  004F                     evaluate@row:	
  2920                           ; 1 bytes @ 0x2F
  2921                           
  2922  004F                     get_holes_after_merge@row:	
  2923                           ; 1 bytes @ 0x2F
  2924                           
  2925                           
  2926                           ; 1 bytes @ 0x2F
  2927  004F                     	ds	1
  2928  0050                     hit_land@row:	
  2929  0050                     is_valid@col:	
  2930                           ; 1 bytes @ 0x30
  2931                           
  2932  0050                     fall_off@row:	
  2933                           ; 1 bytes @ 0x30
  2934                           
  2935                           
  2936                           ; 1 bytes @ 0x30
  2937  0050                     	ds	1
  2938  0051                     ??_find_best_solution:	
  2939                           
  2940                           ; 1 bytes @ 0x31
  2941  0051                     	ds	7
  2942  0058                     ?_main:	
  2943  0058                     main@argc:	
  2944                           ; 2 bytes @ 0x38
  2945                           
  2946                           
  2947                           ; 2 bytes @ 0x38
  2948  0058                     	ds	2
  2949  005A                     main@argv:	
  2950                           
  2951                           ; 2 bytes @ 0x3A
  2952  005A                     	ds	2
  2953  005C                     ??_main:	
  2954                           
  2955                           ; 1 bytes @ 0x3C
  2956  005C                     	ds	9
  2957  0065                     main@Seed:	
  2958                           
  2959                           ; 2 bytes @ 0x45
  2960  0065                     	ds	2
  2961  0067                     main@hit_res:	
  2962                           
  2963                           ; 1 bytes @ 0x47
  2964  0067                     	ds	1
  2965                           
  2966                           	psect	maintext
  2967  015A                     __pmaintext:	
  2968 ;;
  2969 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
  2970 ;;
  2971 ;; *************** function _main *****************
  2972 ;; Defined at:
  2973 ;;		line 1288 in file "teris_16f886.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;  argc            2   56[BANK0 ] int 
  2976 ;;  argv            2   58[BANK0 ] PTR PTR unsigned char 
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;  Seed            2   69[BANK0 ] unsigned int 
  2979 ;;  hit_res         1   71[BANK0 ] unsigned char 
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  2   56[BANK0 ] int 
  2982 ;; Registers used:
  2983 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2984 ;; Tracked objects:
  2985 ;;		On entry : B00/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2989 ;;      Params:         0       4       0       0       0
  2990 ;;      Locals:         0       3       0       0       0
  2991 ;;      Temps:          0       9       0       0       0
  2992 ;;      Totals:         0      16       0       0       0
  2993 ;;Total ram usage:       16 bytes
  2994 ;; Hardware stack levels required when called:    6
  2995 ;; This function calls:
  2996 ;;		_Clear_Matrix
  2997 ;;		_USARTInit
  2998 ;;		___bmul
  2999 ;;		_char_info_index_rand
  3000 ;;		_clear
  3001 ;;		_debug_int1
  3002 ;;		_debug_line
  3003 ;;		_delete_matrix
  3004 ;;		_find_best_solution
  3005 ;;		_hit_land
  3006 ;;		_merge
  3007 ;;		_printf_Screen
  3008 ;;		_printf_debug_MATRIX88
  3009 ;;		_srand
  3010 ;; This function is called by:
  3011 ;;		Startup code after reset
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           
  3016                           ;psect for function _main
  3017  015A                     _main:	
  3018                           
  3019                           ;teris_16f886.c: 1290: uint8_t hit_res;
  3020                           ;teris_16f886.c: 1315: (TRISAbits.TRISA3 = 0);
  3021                           
  3022                           ;incstack = 0
  3023                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3024  015A  1683               	bsf	3,5	;RP0=1, select bank1
  3025  015B  1303               	bcf	3,6	;RP1=0, select bank1
  3026  015C  1185               	bcf	5,3	;volatile
  3027                           
  3028                           ;teris_16f886.c: 1317: (TRISAbits.TRISA2 = 0);
  3029  015D  1105               	bcf	5,2	;volatile
  3030                           
  3031                           ;teris_16f886.c: 1319: (TRISAbits.TRISA1 = 0);
  3032  015E  1085               	bcf	5,1	;volatile
  3033                           
  3034                           ;teris_16f886.c: 1321: ANSELbits.ANS1 = 0;
  3035  015F  1683               	bsf	3,5	;RP0=1, select bank3
  3036  0160  1703               	bsf	3,6	;RP1=1, select bank3
  3037  0161  1088               	bcf	8,1	;volatile
  3038                           
  3039                           ;teris_16f886.c: 1322: ANSELbits.ANS2 = 0;
  3040  0162  1108               	bcf	8,2	;volatile
  3041                           
  3042                           ;teris_16f886.c: 1323: ANSELbits.ANS3 = 0;
  3043  0163  1188               	bcf	8,3	;volatile
  3044                           
  3045                           ;teris_16f886.c: 1324: RA2 = 1;
  3046  0164  1283               	bcf	3,5	;RP0=0, select bank0
  3047  0165  1303               	bcf	3,6	;RP1=0, select bank0
  3048  0166  1505               	bsf	5,2	;volatile
  3049                           
  3050                           ;teris_16f886.c: 1325: RA1 = 0;
  3051  0167  1085               	bcf	5,1	;volatile
  3052                           
  3053                           ;teris_16f886.c: 1328: USARTInit(9600);
  3054  0168  3080               	movlw	128
  3055  0169  00F0               	movwf	USARTInit@baud_rate
  3056  016A  3025               	movlw	37
  3057  016B  00F1               	movwf	USARTInit@baud_rate+1
  3058  016C  160A  158A  238F  120A  118A  	fcall	_USARTInit
  3059                           
  3060                           ;teris_16f886.c: 1331: unsigned Seed;
  3061                           ;teris_16f886.c: 1332: srand(Seed);
  3062  0171  1283               	bcf	3,5	;RP0=0, select bank0
  3063  0172  1303               	bcf	3,6	;RP1=0, select bank0
  3064  0173  0866               	movf	main@Seed+1,w
  3065  0174  00F1               	movwf	srand@x+1
  3066  0175  0865               	movf	main@Seed,w
  3067  0176  00F0               	movwf	srand@x
  3068  0177  160A  158A  206A  120A  118A  	fcall	_srand
  3069  017C  2987               	goto	l5765
  3070  017D                     l5779:	
  3071                           
  3072                           ;teris_16f886.c: 1344: {
  3073                           ;teris_16f886.c: 1345: debug_line(1, "GAME OVER!!!");
  3074  017D  3008               	movlw	low (STR_93| (0+32768))
  3075  017E  00F3               	movwf	debug_line@str
  3076  017F  308D               	movlw	high (STR_93| (0+32768))
  3077  0180  00F4               	movwf	debug_line@str+1
  3078  0181  3001               	movlw	1
  3079  0182  160A  158A  20DB  120A  118A  	fcall	_debug_line
  3080  0187                     l5765:	
  3081                           ;teris_16f886.c: 1334: __start:
  3082                           
  3083                           ;teris_16f886.c: 1346: goto __start;
  3084                           
  3085                           
  3086                           ;teris_16f886.c: 1335: Clear_Matrix();
  3087  0187  160A  158A  20C7  120A  118A  	fcall	_Clear_Matrix
  3088  018C                     l5767:	
  3089                           ;teris_16f886.c: 1336: while(1)
  3090                           
  3091                           
  3092                           ;teris_16f886.c: 1337: {
  3093                           ;teris_16f886.c: 1338: cur_y = 0;
  3094  018C  1283               	bcf	3,5	;RP0=0, select bank0
  3095  018D  1303               	bcf	3,6	;RP1=0, select bank0
  3096  018E  01E8               	clrf	_cur_y
  3097                           
  3098                           ;teris_16f886.c: 1339: cur_x = 2, cur_y = 0;
  3099  018F  3002               	movlw	2
  3100  0190  00DC               	movwf	??_main
  3101  0191  085C               	movf	??_main,w
  3102  0192  1683               	bsf	3,5	;RP0=1, select bank1
  3103  0193  1303               	bcf	3,6	;RP1=0, select bank1
  3104  0194  00ED               	movwf	_cur_x^(0+128)
  3105  0195  1283               	bcf	3,5	;RP0=0, select bank0
  3106  0196  1303               	bcf	3,6	;RP1=0, select bank0
  3107  0197  01E8               	clrf	_cur_y
  3108                           
  3109                           ;teris_16f886.c: 1340: g_char_info_index = char_info_index_rand();
  3110  0198  160A  158A  20F0  120A  118A  	fcall	_char_info_index_rand
  3111  019D  1283               	bcf	3,5	;RP0=0, select bank0
  3112  019E  1303               	bcf	3,6	;RP1=0, select bank0
  3113  019F  00DC               	movwf	??_main
  3114  01A0  085C               	movf	??_main,w
  3115  01A1  00E9               	movwf	_g_char_info_index
  3116                           
  3117                           ;teris_16f886.c: 1342: debug_int1(1, "g_char_info_index = %d", g_char_info_index);
  3118  01A2  30C1               	movlw	low (STR_94| (0+32768))
  3119  01A3  00BF               	movwf	debug_int1@f
  3120  01A4  308A               	movlw	high (STR_94| (0+32768))
  3121  01A5  00C0               	movwf	debug_int1@f+1
  3122  01A6  0869               	movf	_g_char_info_index,w
  3123  01A7  00DC               	movwf	??_main
  3124  01A8  01DD               	clrf	??_main+1
  3125  01A9  085C               	movf	??_main,w
  3126  01AA  00C1               	movwf	debug_int1@i
  3127  01AB  085D               	movf	??_main+1,w
  3128  01AC  00C2               	movwf	debug_int1@i+1
  3129  01AD  3001               	movlw	1
  3130  01AE  120A  158A  25AE  120A  118A  	fcall	_debug_int1
  3131                           
  3132                           ;teris_16f886.c: 1343: if(find_best_solution() == 0)
  3133  01B3  160A  118A  2311  120A  118A  	fcall	_find_best_solution
  3134  01B8  3A00               	xorlw	0
  3135  01B9  1903               	btfsc	3,2
  3136  01BA  297D               	goto	l5779
  3137                           
  3138                           ;teris_16f886.c: 1347: }
  3139                           ;teris_16f886.c: 1348: g_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].start
      +                          _index + g_char_info[g_char_info_index].cur_index];
  3140  01BB  3003               	movlw	3
  3141  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  3142  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  3143  01BE  00DC               	movwf	??_main
  3144  01BF  085C               	movf	??_main,w
  3145  01C0  00F0               	movwf	___bmul@multiplicand
  3146  01C1  0869               	movf	_g_char_info_index,w
  3147  01C2  160A  158A  2081  120A  118A  	fcall	___bmul
  3148  01C7  3E01               	addlw	1
  3149  01C8  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3150  01C9  0084               	movwf	4
  3151  01CA  1783               	bsf	3,7	;select IRP bank3
  3152  01CB  0800               	movf	0,w
  3153  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  3154  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  3155  01CE  00DD               	movwf	??_main+1
  3156  01CF  3003               	movlw	3
  3157  01D0  00DE               	movwf	??_main+2
  3158  01D1  085E               	movf	??_main+2,w
  3159  01D2  00F0               	movwf	___bmul@multiplicand
  3160  01D3  0869               	movf	_g_char_info_index,w
  3161  01D4  160A  158A  2081  120A  118A  	fcall	___bmul
  3162  01D9  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3163  01DA  0084               	movwf	4
  3164  01DB  1783               	bsf	3,7	;select IRP bank3
  3165  01DC  0800               	movf	0,w
  3166  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  3167  01DE  1303               	bcf	3,6	;RP1=0, select bank0
  3168  01DF  075D               	addwf	??_main+1,w
  3169  01E0  00DF               	movwf	??_main+3
  3170  01E1  01E0               	clrf	??_main+4
  3171  01E2  0DE0               	rlf	??_main+4,f
  3172  01E3  0EDF               	swapf	??_main+3,f
  3173  01E4  0EE0               	swapf	??_main+4,f
  3174  01E5  30F0               	movlw	240
  3175  01E6  05E0               	andwf	??_main+4,f
  3176  01E7  085F               	movf	??_main+3,w
  3177  01E8  390F               	andlw	15
  3178  01E9  04E0               	iorwf	??_main+4,f
  3179  01EA  30F0               	movlw	240
  3180  01EB  05DF               	andwf	??_main+3,f
  3181  01EC  3030               	movlw	low (_g_matrix44| (0+32768))
  3182  01ED  00E1               	movwf	??_main+5
  3183  01EE  3088               	movlw	high (_g_matrix44| (0+32768))
  3184  01EF  00E2               	movwf	??_main+6
  3185  01F0  085F               	movf	??_main+3,w
  3186  01F1  0761               	addwf	??_main+5,w
  3187  01F2  00E3               	movwf	??_main+7
  3188  01F3  0860               	movf	??_main+4,w
  3189  01F4  1803               	skipnc
  3190  01F5  0A60               	incf	??_main+4,w
  3191  01F6  0762               	addwf	??_main+6,w
  3192  01F7  00E4               	movwf	??_main+8
  3193  01F8  0863               	movf	??_main+7,w
  3194  01F9  1683               	bsf	3,5	;RP0=1, select bank3
  3195  01FA  1703               	bsf	3,6	;RP1=1, select bank3
  3196  01FB  0095               	movwf	_g_cur_matrix44^(0+384)
  3197  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  3198  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  3199  01FE  0864               	movf	??_main+8,w
  3200  01FF  1683               	bsf	3,5	;RP0=1, select bank3
  3201  0200  1703               	bsf	3,6	;RP1=1, select bank3
  3202  0201  0096               	movwf	(_g_cur_matrix44+1)^(0+384)
  3203  0202                     l5783:	
  3204                           ;teris_16f886.c: 1349: while(1)
  3205                           
  3206                           
  3207                           ;teris_16f886.c: 1350: {
  3208                           ;teris_16f886.c: 1351: hit_res = hit_land(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3209  0202  1283               	bcf	3,5	;RP0=0, select bank0
  3210  0203  1303               	bcf	3,6	;RP1=0, select bank0
  3211  0204  0868               	movf	_cur_y,w
  3212  0205  00DC               	movwf	??_main
  3213  0206  085C               	movf	??_main,w
  3214  0207  00C6               	movwf	hit_land@y
  3215  0208  1683               	bsf	3,5	;RP0=1, select bank3
  3216  0209  1703               	bsf	3,6	;RP1=1, select bank3
  3217  020A  0815               	movf	_g_cur_matrix44^(0+384),w
  3218  020B  1283               	bcf	3,5	;RP0=0, select bank0
  3219  020C  1303               	bcf	3,6	;RP1=0, select bank0
  3220  020D  00C7               	movwf	hit_land@matrix44
  3221  020E  1683               	bsf	3,5	;RP0=1, select bank3
  3222  020F  1703               	bsf	3,6	;RP1=1, select bank3
  3223  0210  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3224  0211  1283               	bcf	3,5	;RP0=0, select bank0
  3225  0212  1303               	bcf	3,6	;RP1=0, select bank0
  3226  0213  00C8               	movwf	hit_land@matrix44+1
  3227  0214  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3228  0215  00DD               	movwf	??_main+1
  3229  0216  085D               	movf	??_main+1,w
  3230  0217  00C9               	movwf	hit_land@matrix88
  3231  0218  1683               	bsf	3,5	;RP0=1, select bank1
  3232  0219  1303               	bcf	3,6	;RP1=0, select bank1
  3233  021A  086D               	movf	_cur_x^(0+128),w
  3234  021B  160A  118A  21A8  120A  118A  	fcall	_hit_land
  3235  0220  1283               	bcf	3,5	;RP0=0, select bank0
  3236  0221  1303               	bcf	3,6	;RP1=0, select bank0
  3237  0222  00DE               	movwf	??_main+2
  3238  0223  085E               	movf	??_main+2,w
  3239  0224  00E7               	movwf	main@hit_res
  3240                           
  3241                           ;teris_16f886.c: 1352: debug_int1(1, "hit_res = %d", hit_res);
  3242  0225  3015               	movlw	low (STR_96| (0+32768))
  3243  0226  00BF               	movwf	debug_int1@f
  3244  0227  308D               	movlw	high (STR_96| (0+32768))
  3245  0228  00C0               	movwf	debug_int1@f+1
  3246  0229  0867               	movf	main@hit_res,w
  3247  022A  00DC               	movwf	??_main
  3248  022B  01DD               	clrf	??_main+1
  3249  022C  085C               	movf	??_main,w
  3250  022D  00C1               	movwf	debug_int1@i
  3251  022E  085D               	movf	??_main+1,w
  3252  022F  00C2               	movwf	debug_int1@i+1
  3253  0230  3001               	movlw	1
  3254  0231  120A  158A  25AE  120A  118A  	fcall	_debug_int1
  3255                           
  3256                           ;teris_16f886.c: 1353: merge(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3257  0236  1283               	bcf	3,5	;RP0=0, select bank0
  3258  0237  1303               	bcf	3,6	;RP1=0, select bank0
  3259  0238  0868               	movf	_cur_y,w
  3260  0239  00DC               	movwf	??_main
  3261  023A  085C               	movf	??_main,w
  3262  023B  00F0               	movwf	merge@y
  3263  023C  1683               	bsf	3,5	;RP0=1, select bank3
  3264  023D  1703               	bsf	3,6	;RP1=1, select bank3
  3265  023E  0815               	movf	_g_cur_matrix44^(0+384),w
  3266  023F  00F1               	movwf	merge@matrix44
  3267  0240  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3268  0241  00F2               	movwf	merge@matrix44+1
  3269  0242  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3270  0243  1283               	bcf	3,5	;RP0=0, select bank0
  3271  0244  1303               	bcf	3,6	;RP1=0, select bank0
  3272  0245  00DD               	movwf	??_main+1
  3273  0246  085D               	movf	??_main+1,w
  3274  0247  00F3               	movwf	merge@matrix88
  3275  0248  1683               	bsf	3,5	;RP0=1, select bank1
  3276  0249  1303               	bcf	3,6	;RP1=0, select bank1
  3277  024A  086D               	movf	_cur_x^(0+128),w
  3278  024B  160A  158A  254C  120A  118A  	fcall	_merge
  3279                           
  3280                           ;teris_16f886.c: 1354: if(hit_res == 1)
  3281  0250  1283               	bcf	3,5	;RP0=0, select bank0
  3282  0251  1303               	bcf	3,6	;RP1=0, select bank0
  3283  0252  0367               	decf	main@hit_res,w
  3284  0253  1D03               	btfss	3,2
  3285  0254  2A74               	goto	l5797
  3286                           
  3287                           ;teris_16f886.c: 1355: {
  3288                           ;teris_16f886.c: 1356: printf_Screen();
  3289  0255  160A  158A  2055  120A  118A  	fcall	_printf_Screen
  3290                           
  3291                           ;teris_16f886.c: 1360: _delay((unsigned long)((100)*(20000000/4000.0)));
  3292  025A  3003               	movlw	3
  3293  025B  1283               	bcf	3,5	;RP0=0, select bank0
  3294  025C  1303               	bcf	3,6	;RP1=0, select bank0
  3295  025D  00DE               	movwf	??_main+2
  3296  025E  308A               	movlw	138
  3297  025F  00DD               	movwf	??_main+1
  3298  0260  3056               	movlw	86
  3299  0261  00DC               	movwf	??_main
  3300  0262                     u8517:	
  3301  0262  0BDC               	decfsz	??_main,f
  3302  0263  2A62               	goto	u8517
  3303  0264  0BDD               	decfsz	??_main+1,f
  3304  0265  2A62               	goto	u8517
  3305  0266  0BDE               	decfsz	??_main+2,f
  3306  0267  2A62               	goto	u8517
  3307  0268  2A69               	nop2
  3308                           
  3309                           ;teris_16f886.c: 1362: delete_matrix(&g_matrix88);
  3310  0269  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3311  026A  1283               	bcf	3,5	;RP0=0, select bank0
  3312  026B  1303               	bcf	3,6	;RP1=0, select bank0
  3313  026C  00C4               	movwf	delete_matrix@matrix
  3314  026D  3001               	movlw	1
  3315  026E  00C5               	movwf	delete_matrix@matrix+1
  3316  026F  160A  158A  241E  120A  118A  	fcall	_delete_matrix
  3317  0274                     l5797:	
  3318                           
  3319                           ;teris_16f886.c: 1363: }
  3320                           ;teris_16f886.c: 1364: printf_debug_MATRIX88(1, "Main screen", &g_matrix88);
  3321  0274  3022               	movlw	low (STR_97| (0+32768))
  3322  0275  00F6               	movwf	printf_debug_MATRIX88@lable
  3323  0276  308D               	movlw	high (STR_97| (0+32768))
  3324  0277  00F7               	movwf	printf_debug_MATRIX88@lable+1
  3325  0278  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3326  0279  00F8               	movwf	printf_debug_MATRIX88@matrix
  3327  027A  3001               	movlw	1
  3328  027B  00F9               	movwf	printf_debug_MATRIX88@matrix+1
  3329  027C  3001               	movlw	1
  3330  027D  160A  118A  208E  120A  118A  	fcall	_printf_debug_MATRIX88
  3331                           
  3332                           ;teris_16f886.c: 1365: printf_Screen();
  3333  0282  160A  158A  2055  120A  118A  	fcall	_printf_Screen
  3334                           
  3335                           ;teris_16f886.c: 1366: if(hit_res == 0)
  3336  0287  1283               	bcf	3,5	;RP0=0, select bank0
  3337  0288  1303               	bcf	3,6	;RP1=0, select bank0
  3338  0289  0867               	movf	main@hit_res,w
  3339  028A  1D03               	btfss	3,2
  3340  028B  298C               	goto	l5767
  3341                           
  3342                           ;teris_16f886.c: 1367: {
  3343                           ;teris_16f886.c: 1368: clear(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3344  028C  0868               	movf	_cur_y,w
  3345  028D  00DC               	movwf	??_main
  3346  028E  085C               	movf	??_main,w
  3347  028F  00F0               	movwf	clear@y
  3348  0290  1683               	bsf	3,5	;RP0=1, select bank3
  3349  0291  1703               	bsf	3,6	;RP1=1, select bank3
  3350  0292  0815               	movf	_g_cur_matrix44^(0+384),w
  3351  0293  00F1               	movwf	clear@matrix44
  3352  0294  0816               	movf	(_g_cur_matrix44+1)^(0+384),w
  3353  0295  00F2               	movwf	clear@matrix44+1
  3354  0296  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3355  0297  1283               	bcf	3,5	;RP0=0, select bank0
  3356  0298  1303               	bcf	3,6	;RP1=0, select bank0
  3357  0299  00DD               	movwf	??_main+1
  3358  029A  085D               	movf	??_main+1,w
  3359  029B  00F3               	movwf	clear@matrix88
  3360  029C  1683               	bsf	3,5	;RP0=1, select bank1
  3361  029D  1303               	bcf	3,6	;RP1=0, select bank1
  3362  029E  086D               	movf	_cur_x^(0+128),w
  3363  029F  160A  158A  24FD  120A  118A  	fcall	_clear
  3364                           
  3365                           ;teris_16f886.c: 1373: }
  3366                           ;teris_16f886.c: 1377: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3367                           
  3368                           ;teris_16f886.c: 1370: else
  3369                           ;teris_16f886.c: 1371: {
  3370                           ;teris_16f886.c: 1372: break;
  3371                           
  3372                           ;teris_16f886.c: 1369: }
  3373  02A4  301A               	movlw	26
  3374  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  3375  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  3376  02A7  00DE               	movwf	??_main+2
  3377  02A8  305E               	movlw	94
  3378  02A9  00DD               	movwf	??_main+1
  3379  02AA  3086               	movlw	134
  3380  02AB  00DC               	movwf	??_main
  3381  02AC                     u8527:	
  3382  02AC  0BDC               	decfsz	??_main,f
  3383  02AD  2AAC               	goto	u8527
  3384  02AE  0BDD               	decfsz	??_main+1,f
  3385  02AF  2AAC               	goto	u8527
  3386  02B0  0BDE               	decfsz	??_main+2,f
  3387  02B1  2AAC               	goto	u8527
  3388  02B2  0000               	nop
  3389                           
  3390                           ;teris_16f886.c: 1379: cur_y++;
  3391  02B3  3001               	movlw	1
  3392  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  3393  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  3394  02B6  00DC               	movwf	??_main
  3395  02B7  085C               	movf	??_main,w
  3396  02B8  07E8               	addwf	_cur_y,f
  3397  02B9  2A02               	goto	l5783
  3398  02BA                     __end_of_main:	
  3399                           ;teris_16f886.c: 1389: return 0;
  3400                           ;	Return value of _main is never used
  3401                           
  3402                           ;teris_16f886.c: 1380: }
  3403                           ;teris_16f886.c: 1381: }
  3404                           ;teris_16f886.c: 1382: __exit:
  3405                           
  3406                           
  3407                           	psect	text1
  3408  186A                     __ptext1:	
  3409 ;; *************** function _srand *****************
  3410 ;; Defined at:
  3411 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  x               2    0[COMMON] unsigned int 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;		None
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3425 ;;      Params:         2       0       0       0       0
  3426 ;;      Locals:         0       0       0       0       0
  3427 ;;      Temps:          0       0       0       0       0
  3428 ;;      Totals:         2       0       0       0       0
  3429 ;;Total ram usage:        2 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_main
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           
  3439                           ;psect for function _srand
  3440  186A                     _srand:	
  3441                           
  3442                           ;incstack = 0
  3443                           ; Regs used in _srand: [wreg]
  3444  186A  0870               	movf	srand@x,w
  3445  186B  1683               	bsf	3,5	;RP0=1, select bank3
  3446  186C  1703               	bsf	3,6	;RP1=1, select bank3
  3447  186D  00D2               	movwf	_randx^(0+384)
  3448  186E  0871               	movf	srand@x+1,w
  3449  186F  00D3               	movwf	(_randx^(0+384)+1)
  3450  1870  01D4               	clrf	(_randx^(0+384)+2)
  3451  1871  01D5               	clrf	(_randx^(0+384)+3)
  3452  1872  0008               	return
  3453  1873                     __end_of_srand:	
  3454                           
  3455                           	psect	text2
  3456  1D4C                     __ptext2:	
  3457 ;; *************** function _merge *****************
  3458 ;; Defined at:
  3459 ;;		line 822 in file "teris_16f886.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;  x               1    wreg     char 
  3462 ;;  y               1    0[COMMON] char 
  3463 ;;  matrix44        2    1[COMMON] PTR const struct .
  3464 ;;		 -> NULL(0), g_matrix44(384), 
  3465 ;;  matrix88        1    3[COMMON] PTR struct .
  3466 ;;		 -> g_matrix88(64), 
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  x               1    8[COMMON] char 
  3469 ;;  col             1   10[COMMON] unsigned char 
  3470 ;;  row             1    9[COMMON] unsigned char 
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3480 ;;      Params:         4       0       0       0       0
  3481 ;;      Locals:         3       0       0       0       0
  3482 ;;      Temps:          4       0       0       0       0
  3483 ;;      Totals:        11       0       0       0       0
  3484 ;;Total ram usage:       11 bytes
  3485 ;; Hardware stack levels used:    2
  3486 ;; This function calls:
  3487 ;;		Nothing
  3488 ;; This function is called by:
  3489 ;;		_main
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           
  3494                           ;psect for function _merge
  3495  1D4C                     _merge:	
  3496                           
  3497                           ;incstack = 0
  3498                           ; Regs used in _merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3499                           ;merge@x stored from wreg
  3500  1D4C  00F8               	movwf	merge@x
  3501                           
  3502                           ;teris_16f886.c: 824: for(uint8_t row = 0; row < 4; row++)
  3503  1D4D  01F9               	clrf	merge@row
  3504  1D4E                     L1:	
  3505  1D4E  3004               	movlw	4
  3506  1D4F  0279               	subwf	merge@row,w
  3507  1D50  1803               	btfsc	3,0
  3508  1D51  0008               	return
  3509                           
  3510                           ;teris_16f886.c: 825: {
  3511                           ;teris_16f886.c: 826: for(uint8_t col = 0; col < 4; col++)
  3512  1D52  01FA               	clrf	merge@col
  3513  1D53  3004               	movlw	4
  3514  1D54  027A               	subwf	merge@col,w
  3515  1D55  1803               	btfsc	3,0
  3516  1D56  2D97               	goto	l4277
  3517  1D57                     l4269:	
  3518                           
  3519                           ;teris_16f886.c: 827: {
  3520                           ;teris_16f886.c: 828: if(matrix44->data[row][col] == 1)
  3521  1D57  0879               	movf	merge@row,w
  3522  1D58  00F4               	movwf	??_merge
  3523  1D59  01F5               	clrf	??_merge+1
  3524  1D5A  1003               	clrc
  3525  1D5B  0DF4               	rlf	??_merge,f
  3526  1D5C  0DF5               	rlf	??_merge+1,f
  3527  1D5D  1003               	clrc
  3528  1D5E  0DF4               	rlf	??_merge,f
  3529  1D5F  0DF5               	rlf	??_merge+1,f
  3530  1D60  0874               	movf	??_merge,w
  3531  1D61  0771               	addwf	merge@matrix44,w
  3532  1D62  00F6               	movwf	??_merge+2
  3533  1D63  0875               	movf	??_merge+1,w
  3534  1D64  1803               	skipnc
  3535  1D65  0A75               	incf	??_merge+1,w
  3536  1D66  0772               	addwf	merge@matrix44+1,w
  3537  1D67  00F7               	movwf	??_merge+3
  3538  1D68  087A               	movf	merge@col,w
  3539  1D69  0776               	addwf	??_merge+2,w
  3540  1D6A  0084               	movwf	4
  3541  1D6B  0877               	movf	??_merge+3,w
  3542  1D6C  1803               	skipnc
  3543  1D6D  0A77               	incf	??_merge+3,w
  3544  1D6E  1283               	bcf	3,5	;RP0=0, select bank0
  3545  1D6F  1303               	bcf	3,6	;RP1=0, select bank0
  3546  1D70  00FF               	movwf	127
  3547  1D71  120A  158A  2000  160A  158A  	fcall	stringtab
  3548  1D76  3A01               	xorlw	1
  3549  1D77  1D03               	skipz
  3550  1D78  2D8F               	goto	l4273
  3551                           
  3552                           ;teris_16f886.c: 829: {
  3553                           ;teris_16f886.c: 830: matrix88->data[y + row][x + col] = 1;
  3554  1D79  087A               	movf	merge@col,w
  3555  1D7A  0778               	addwf	merge@x,w
  3556  1D7B  0773               	addwf	merge@matrix88,w
  3557  1D7C  00F4               	movwf	??_merge
  3558  1D7D  0879               	movf	merge@row,w
  3559  1D7E  0770               	addwf	merge@y,w
  3560  1D7F  00F5               	movwf	??_merge+1
  3561  1D80  3002               	movlw	2
  3562  1D81                     u6055:	
  3563  1D81  1003               	clrc
  3564  1D82  0DF5               	rlf	??_merge+1,f
  3565  1D83  3EFF               	addlw	-1
  3566  1D84  1D03               	skipz
  3567  1D85  2D81               	goto	u6055
  3568  1D86  1003               	clrc
  3569  1D87  0D75               	rlf	??_merge+1,w
  3570  1D88  0774               	addwf	??_merge,w
  3571  1D89  00F6               	movwf	??_merge+2
  3572  1D8A  0876               	movf	??_merge+2,w
  3573  1D8B  0084               	movwf	4
  3574  1D8C  1783               	bsf	3,7	;select IRP bank2
  3575  1D8D  0180               	clrf	0
  3576  1D8E  0A80               	incf	0,f
  3577  1D8F                     l4273:	
  3578  1D8F  3001               	movlw	1
  3579  1D90  00F4               	movwf	??_merge
  3580  1D91  0874               	movf	??_merge,w
  3581  1D92  07FA               	addwf	merge@col,f
  3582  1D93  3004               	movlw	4
  3583  1D94  027A               	subwf	merge@col,w
  3584  1D95  1C03               	skipc
  3585  1D96  2D57               	goto	l4269
  3586  1D97                     l4277:	
  3587  1D97  3001               	movlw	1
  3588  1D98  00F4               	movwf	??_merge
  3589  1D99  0874               	movf	??_merge,w
  3590  1D9A  07F9               	addwf	merge@row,f
  3591  1D9B  2D4E               	goto	L1
  3592  1D9C                     __end_of_merge:	
  3593                           
  3594                           	psect	text3
  3595  11A8                     __ptext3:	
  3596 ;; *************** function _hit_land *****************
  3597 ;; Defined at:
  3598 ;;		line 684 in file "teris_16f886.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;  x               1    wreg     char 
  3601 ;;  y               1   38[BANK0 ] char 
  3602 ;;  matrix44        2   39[BANK0 ] PTR const struct .
  3603 ;;		 -> NULL(0), g_matrix44(384), 
  3604 ;;  matrix88        1   41[BANK0 ] PTR const struct .
  3605 ;;		 -> g_matrix88(64), 
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;  x               1   46[BANK0 ] char 
  3608 ;;  col             1   47[BANK0 ] char 
  3609 ;;  row             1   48[BANK0 ] char 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  1    wreg      unsigned char 
  3612 ;; Registers used:
  3613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3619 ;;      Params:         0       4       0       0       0
  3620 ;;      Locals:         0       3       0       0       0
  3621 ;;      Temps:          0       4       0       0       0
  3622 ;;      Totals:         0      11       0       0       0
  3623 ;;Total ram usage:       11 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    3
  3626 ;; This function calls:
  3627 ;;		_debug_int2
  3628 ;;		_debug_line
  3629 ;; This function is called by:
  3630 ;;		_main
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           
  3635                           ;psect for function _hit_land
  3636  11A8                     _hit_land:	
  3637                           
  3638                           ;incstack = 0
  3639                           ; Regs used in _hit_land: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3640                           ;hit_land@x stored from wreg
  3641  11A8  1283               	bcf	3,5	;RP0=0, select bank0
  3642  11A9  1303               	bcf	3,6	;RP1=0, select bank0
  3643  11AA  00CE               	movwf	hit_land@x
  3644                           
  3645                           ;teris_16f886.c: 686: debug_line(0, "==============hit_land============");
  3646  11AB  3000               	movlw	low (STR_29| (0+32768))
  3647  11AC  00F3               	movwf	debug_line@str
  3648  11AD  308A               	movlw	high (STR_29| (0+32768))
  3649  11AE  00F4               	movwf	debug_line@str+1
  3650  11AF  3000               	movlw	0
  3651  11B0  160A  158A  20DB  160A  118A  	fcall	_debug_line
  3652                           
  3653                           ;teris_16f886.c: 688: for(int8_t row = 4 - 1; row >= 0; row--)
  3654  11B5  3003               	movlw	3
  3655  11B6  1283               	bcf	3,5	;RP0=0, select bank0
  3656  11B7  1303               	bcf	3,6	;RP1=0, select bank0
  3657  11B8  00CA               	movwf	??_hit_land
  3658  11B9  084A               	movf	??_hit_land,w
  3659  11BA  00D0               	movwf	hit_land@row
  3660  11BB  1BD0               	btfsc	hit_land@row,7
  3661  11BC  2A4F               	goto	l5431
  3662  11BD                     l5399:	
  3663                           
  3664                           ;teris_16f886.c: 689: {
  3665                           ;teris_16f886.c: 690: for(int8_t col = 0; col < 4; col++)
  3666  11BD  01CF               	clrf	hit_land@col
  3667  11BE  084F               	movf	hit_land@col,w
  3668  11BF  3A80               	xorlw	128
  3669  11C0  3E7C               	addlw	-132
  3670  11C1  1803               	btfsc	3,0
  3671  11C2  2A49               	goto	l5427
  3672  11C3                     l5405:	
  3673                           
  3674                           ;teris_16f886.c: 691: {
  3675                           ;teris_16f886.c: 692: if(matrix44->data[row][col] == 1)
  3676  11C3  0850               	movf	hit_land@row,w
  3677  11C4  00CA               	movwf	??_hit_land
  3678  11C5  01CB               	clrf	??_hit_land+1
  3679  11C6  1003               	clrc
  3680  11C7  0DCA               	rlf	??_hit_land,f
  3681  11C8  0DCB               	rlf	??_hit_land+1,f
  3682  11C9  1003               	clrc
  3683  11CA  0DCA               	rlf	??_hit_land,f
  3684  11CB  0DCB               	rlf	??_hit_land+1,f
  3685  11CC  084A               	movf	??_hit_land,w
  3686  11CD  0747               	addwf	hit_land@matrix44,w
  3687  11CE  00CC               	movwf	??_hit_land+2
  3688  11CF  084B               	movf	??_hit_land+1,w
  3689  11D0  1803               	skipnc
  3690  11D1  0A4B               	incf	??_hit_land+1,w
  3691  11D2  0748               	addwf	hit_land@matrix44+1,w
  3692  11D3  00CD               	movwf	??_hit_land+3
  3693  11D4  084F               	movf	hit_land@col,w
  3694  11D5  074C               	addwf	??_hit_land+2,w
  3695  11D6  0084               	movwf	4
  3696  11D7  084D               	movf	??_hit_land+3,w
  3697  11D8  1803               	skipnc
  3698  11D9  0A4D               	incf	??_hit_land+3,w
  3699  11DA  00FF               	movwf	127
  3700  11DB  120A  158A  2000  160A  118A  	fcall	stringtab
  3701  11E0  3A01               	xorlw	1
  3702  11E1  1D03               	skipz
  3703  11E2  2A3E               	goto	l5423
  3704                           
  3705                           ;teris_16f886.c: 693: {
  3706                           ;teris_16f886.c: 694: if((y + row) >= (8 - 1))
  3707  11E3  0846               	movf	hit_land@y,w
  3708  11E4  0750               	addwf	hit_land@row,w
  3709  11E5  00CA               	movwf	??_hit_land
  3710  11E6  01CB               	clrf	??_hit_land+1
  3711  11E7  1803               	skipnc
  3712  11E8  0ACB               	incf	??_hit_land+1,f
  3713  11E9  1BC6               	btfsc	hit_land@y,7
  3714  11EA  03CB               	decf	??_hit_land+1,f
  3715  11EB  1BD0               	btfsc	hit_land@row,7
  3716  11EC  03CB               	decf	??_hit_land+1,f
  3717  11ED  1283               	bcf	3,5	;RP0=0, select bank0
  3718  11EE  1303               	bcf	3,6	;RP1=0, select bank0
  3719  11EF  084B               	movf	??_hit_land+1,w
  3720  11F0  3A80               	xorlw	128
  3721  11F1  00FF               	movwf	127
  3722  11F2  3080               	movlw	128
  3723  11F3  027F               	subwf	127,w
  3724  11F4  1D03               	skipz
  3725  11F5  29F8               	goto	u8065
  3726  11F6  3007               	movlw	7
  3727  11F7  024A               	subwf	??_hit_land,w
  3728  11F8                     u8065:	
  3729  11F8  1C03               	skipc
  3730  11F9  2A10               	goto	l5415
  3731                           
  3732                           ;teris_16f886.c: 695: {
  3733                           ;teris_16f886.c: 696: debug_int2(0, "hit1 row = %d, col = %d", row, col);
  3734  11FA  3091               	movlw	low (STR_30| (0+32768))
  3735  11FB  1283               	bcf	3,5	;RP0=0, select bank0
  3736  11FC  1303               	bcf	3,6	;RP1=0, select bank0
  3737  11FD  00BF               	movwf	debug_int2@f
  3738  11FE  308A               	movlw	high (STR_30| (0+32768))
  3739  11FF  00C0               	movwf	debug_int2@f+1
  3740  1200  0850               	movf	hit_land@row,w
  3741  1201  00C1               	movwf	debug_int2@i1
  3742  1202  01C2               	clrf	debug_int2@i1+1
  3743  1203  1BC1               	btfsc	debug_int2@i1,7
  3744  1204  03C2               	decf	debug_int2@i1+1,f
  3745  1205  084F               	movf	hit_land@col,w
  3746  1206  00C3               	movwf	debug_int2@i2
  3747  1207  01C4               	clrf	debug_int2@i2+1
  3748  1208  1BC3               	btfsc	debug_int2@i2,7
  3749  1209  03C4               	decf	debug_int2@i2+1,f
  3750  120A  3000               	movlw	0
  3751  120B  160A  158A  21CC   	fcall	_debug_int2
  3752                           
  3753                           ;teris_16f886.c: 697: return 1;
  3754  120E  3001               	movlw	1
  3755  120F  0008               	return
  3756  1210                     l5415:	
  3757                           
  3758                           ;teris_16f886.c: 698: }
  3759                           ;teris_16f886.c: 700: if(matrix88->data[y + row + 1][x + col] == 1)
  3760  1210  1283               	bcf	3,5	;RP0=0, select bank0
  3761  1211  1303               	bcf	3,6	;RP1=0, select bank0
  3762  1212  084F               	movf	hit_land@col,w
  3763  1213  074E               	addwf	hit_land@x,w
  3764  1214  0749               	addwf	hit_land@matrix88,w
  3765  1215  00CA               	movwf	??_hit_land
  3766  1216  0850               	movf	hit_land@row,w
  3767  1217  0746               	addwf	hit_land@y,w
  3768  1218  00CB               	movwf	??_hit_land+1
  3769  1219  3002               	movlw	2
  3770  121A                     u8075:	
  3771  121A  1003               	clrc
  3772  121B  0DCB               	rlf	??_hit_land+1,f
  3773  121C  3EFF               	addlw	-1
  3774  121D  1D03               	skipz
  3775  121E  2A1A               	goto	u8075
  3776  121F  1003               	clrc
  3777  1220  0D4B               	rlf	??_hit_land+1,w
  3778  1221  3E08               	addlw	8
  3779  1222  074A               	addwf	??_hit_land,w
  3780  1223  00CC               	movwf	??_hit_land+2
  3781  1224  084C               	movf	??_hit_land+2,w
  3782  1225  0084               	movwf	4
  3783  1226  1783               	bsf	3,7	;select IRP bank2
  3784  1227  0300               	decf	0,w
  3785  1228  1D03               	btfss	3,2
  3786  1229  2A3E               	goto	l5423
  3787                           
  3788                           ;teris_16f886.c: 701: {
  3789                           ;teris_16f886.c: 702: debug_int2(0, "hit2 row = %d, col = %d", row, col);
  3790  122A  30A9               	movlw	low (STR_31| (0+32768))
  3791  122B  00BF               	movwf	debug_int2@f
  3792  122C  308A               	movlw	high (STR_31| (0+32768))
  3793  122D  00C0               	movwf	debug_int2@f+1
  3794  122E  0850               	movf	hit_land@row,w
  3795  122F  00C1               	movwf	debug_int2@i1
  3796  1230  01C2               	clrf	debug_int2@i1+1
  3797  1231  1BC1               	btfsc	debug_int2@i1,7
  3798  1232  03C2               	decf	debug_int2@i1+1,f
  3799  1233  084F               	movf	hit_land@col,w
  3800  1234  00C3               	movwf	debug_int2@i2
  3801  1235  01C4               	clrf	debug_int2@i2+1
  3802  1236  1BC3               	btfsc	debug_int2@i2,7
  3803  1237  03C4               	decf	debug_int2@i2+1,f
  3804  1238  3000               	movlw	0
  3805  1239  160A  158A  21CC   	fcall	_debug_int2
  3806                           
  3807                           ;teris_16f886.c: 703: return 1;
  3808  123C  3001               	movlw	1
  3809  123D  0008               	return
  3810  123E                     l5423:	
  3811  123E  3001               	movlw	1
  3812  123F  1283               	bcf	3,5	;RP0=0, select bank0
  3813  1240  1303               	bcf	3,6	;RP1=0, select bank0
  3814  1241  00CA               	movwf	??_hit_land
  3815  1242  084A               	movf	??_hit_land,w
  3816  1243  07CF               	addwf	hit_land@col,f
  3817  1244  084F               	movf	hit_land@col,w
  3818  1245  3A80               	xorlw	128
  3819  1246  3E7C               	addlw	-132
  3820  1247  1C03               	skipc
  3821  1248  29C3               	goto	l5405
  3822  1249                     l5427:	
  3823  1249  30FF               	movlw	255
  3824  124A  00CA               	movwf	??_hit_land
  3825  124B  084A               	movf	??_hit_land,w
  3826  124C  07D0               	addwf	hit_land@row,f
  3827  124D  1FD0               	btfss	hit_land@row,7
  3828  124E  29BD               	goto	l5399
  3829  124F                     l5431:	
  3830                           
  3831                           ;teris_16f886.c: 704: }
  3832                           ;teris_16f886.c: 705: }
  3833                           ;teris_16f886.c: 706: }
  3834                           ;teris_16f886.c: 707: }
  3835                           ;teris_16f886.c: 708: debug_line(0, "not hit");
  3836  124F  308B               	movlw	low (STR_32| (0+32768))
  3837  1250  00F3               	movwf	debug_line@str
  3838  1251  308D               	movlw	high (STR_32| (0+32768))
  3839  1252  00F4               	movwf	debug_line@str+1
  3840  1253  3000               	movlw	0
  3841  1254  160A  158A  20DB   	fcall	_debug_line
  3842                           
  3843                           ;teris_16f886.c: 709: return 0;
  3844  1257  3000               	movlw	0
  3845  1258  0008               	return
  3846  1259                     __end_of_hit_land:	
  3847                           
  3848                           	psect	text4
  3849  1311                     __ptext4:	
  3850 ;; *************** function _find_best_solution *****************
  3851 ;; Defined at:
  3852 ;;		line 1020 in file "teris_16f886.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;		None
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;  temp_x          1   70[BANK1 ] char 
  3857 ;;  tem_sub_inde    1   69[BANK1 ] unsigned char 
  3858 ;;  temp_matrix8   64    3[BANK1 ] struct .
  3859 ;;  temp_cur_mat    2   67[BANK1 ] PTR struct .
  3860 ;;		 -> g_matrix44(384), 
  3861 ;;  res             1    2[BANK1 ] unsigned char 
  3862 ;;  right_most_i    1    1[BANK1 ] char 
  3863 ;;  left_most_in    1    0[BANK1 ] char 
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  1    wreg      unsigned char 
  3866 ;; Registers used:
  3867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3873 ;;      Params:         0       0       0       0       0
  3874 ;;      Locals:         0       0      71       0       0
  3875 ;;      Temps:          0       7       0       0       0
  3876 ;;      Totals:         0       7      71       0       0
  3877 ;;Total ram usage:       78 bytes
  3878 ;; Hardware stack levels used:    1
  3879 ;; Hardware stack levels required when called:    5
  3880 ;; This function calls:
  3881 ;;		___bmul
  3882 ;;		_debug_int1
  3883 ;;		_debug_int2
  3884 ;;		_debug_line
  3885 ;;		_delete_matrix
  3886 ;;		_evaluate
  3887 ;;		_fall_off
  3888 ;;		_get_high
  3889 ;;		_get_high_after_merge
  3890 ;;		_get_holes_after_merge
  3891 ;;		_is_valid
  3892 ;;		_left_most
  3893 ;;		_merge1
  3894 ;;		_printf_debug_MATRIX44
  3895 ;;		_printf_debug_MATRIX88
  3896 ;;		_printf_debug_Screen
  3897 ;;		_printf_debug_cur_MATRIX44
  3898 ;;		_right_most
  3899 ;; This function is called by:
  3900 ;;		_main
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           
  3905                           ;psect for function _find_best_solution
  3906  1311                     _find_best_solution:	
  3907                           
  3908                           ;teris_16f886.c: 1022: debug_line(1, "==============find_best_solution============");
  3909                           
  3910                           ;incstack = 0
  3911                           ; Regs used in _find_best_solution: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3912  1311  30B0               	movlw	low (STR_59| (0+32768))
  3913  1312  00F3               	movwf	debug_line@str
  3914  1313  3089               	movlw	high (STR_59| (0+32768))
  3915  1314  00F4               	movwf	debug_line@str+1
  3916  1315  3001               	movlw	1
  3917  1316  160A  158A  20DB  160A  118A  	fcall	_debug_line
  3918                           
  3919                           ;teris_16f886.c: 1026: _delay((unsigned long)((3000)*(20000000/4000.0)));
  3920  131B  304D               	movlw	77
  3921  131C  1283               	bcf	3,5	;RP0=0, select bank0
  3922  131D  1303               	bcf	3,6	;RP1=0, select bank0
  3923  131E  00D3               	movwf	??_find_best_solution+2
  3924  131F  3019               	movlw	25
  3925  1320  00D2               	movwf	??_find_best_solution+1
  3926  1321  309A               	movlw	154
  3927  1322  00D1               	movwf	??_find_best_solution
  3928  1323                     u8537:	
  3929  1323  0BD1               	decfsz	??_find_best_solution,f
  3930  1324  2B23               	goto	u8537
  3931  1325  0BD2               	decfsz	??_find_best_solution+1,f
  3932  1326  2B23               	goto	u8537
  3933  1327  0BD3               	decfsz	??_find_best_solution+2,f
  3934  1328  2B23               	goto	u8537
  3935  1329  2B2A               	nop2
  3936                           
  3937                           ;teris_16f886.c: 1029: MATRIX44* temp_cur_matrix44;
  3938                           ;teris_16f886.c: 1030: MATRIX88 temp_matrix88;
  3939                           ;teris_16f886.c: 1031: uint8_t res = 0;
  3940  132A  1683               	bsf	3,5	;RP0=1, select bank1
  3941  132B  1303               	bcf	3,6	;RP1=0, select bank1
  3942  132C  01A2               	clrf	find_best_solution@res^(0+128)
  3943                           
  3944                           ;teris_16f886.c: 1032: int8_t left_most_index, right_most_index;
  3945                           ;teris_16f886.c: 1035: for(uint8_t tem_sub_index = 0; tem_sub_index < g_char_info[g_char
      +                          _info_index].num; tem_sub_index++)
  3946  132D  01E5               	clrf	find_best_solution@tem_sub_index^(0+128)
  3947  132E                     l5601:	
  3948  132E  3003               	movlw	3
  3949  132F  1283               	bcf	3,5	;RP0=0, select bank0
  3950  1330  1303               	bcf	3,6	;RP1=0, select bank0
  3951  1331  00D1               	movwf	??_find_best_solution
  3952  1332  0851               	movf	??_find_best_solution,w
  3953  1333  00F0               	movwf	___bmul@multiplicand
  3954  1334  0869               	movf	_g_char_info_index,w
  3955  1335  160A  158A  2081  160A  118A  	fcall	___bmul
  3956  133A  3E02               	addlw	2
  3957  133B  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3958  133C  0084               	movwf	4
  3959  133D  1783               	bsf	3,7	;select IRP bank3
  3960  133E  0800               	movf	0,w
  3961  133F  1683               	bsf	3,5	;RP0=1, select bank1
  3962  1340  1303               	bcf	3,6	;RP1=0, select bank1
  3963  1341  0265               	subwf	find_best_solution@tem_sub_index^(0+128),w
  3964  1342  1803               	btfsc	3,0
  3965  1343  2F35               	goto	l5603
  3966                           
  3967                           ;teris_16f886.c: 1036: {
  3968                           ;teris_16f886.c: 1037: temp_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].st
      +                          art_index + tem_sub_index];
  3969  1344  3003               	movlw	3
  3970  1345  1283               	bcf	3,5	;RP0=0, select bank0
  3971  1346  1303               	bcf	3,6	;RP1=0, select bank0
  3972  1347  00D1               	movwf	??_find_best_solution
  3973  1348  0851               	movf	??_find_best_solution,w
  3974  1349  00F0               	movwf	___bmul@multiplicand
  3975  134A  0869               	movf	_g_char_info_index,w
  3976  134B  160A  158A  2081  160A  118A  	fcall	___bmul
  3977  1350  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3978  1351  0084               	movwf	4
  3979  1352  1783               	bsf	3,7	;select IRP bank3
  3980  1353  0800               	movf	0,w
  3981  1354  1683               	bsf	3,5	;RP0=1, select bank1
  3982  1355  1303               	bcf	3,6	;RP1=0, select bank1
  3983  1356  0765               	addwf	find_best_solution@tem_sub_index^(0+128),w
  3984  1357  1283               	bcf	3,5	;RP0=0, select bank0
  3985  1358  1303               	bcf	3,6	;RP1=0, select bank0
  3986  1359  00D2               	movwf	??_find_best_solution+1
  3987  135A  01D3               	clrf	??_find_best_solution+2
  3988  135B  0DD3               	rlf	??_find_best_solution+2,f
  3989  135C  0ED2               	swapf	??_find_best_solution+1,f
  3990  135D  0ED3               	swapf	??_find_best_solution+2,f
  3991  135E  30F0               	movlw	240
  3992  135F  05D3               	andwf	??_find_best_solution+2,f
  3993  1360  0852               	movf	??_find_best_solution+1,w
  3994  1361  390F               	andlw	15
  3995  1362  04D3               	iorwf	??_find_best_solution+2,f
  3996  1363  30F0               	movlw	240
  3997  1364  05D2               	andwf	??_find_best_solution+1,f
  3998  1365  3030               	movlw	low (_g_matrix44| (0+32768))
  3999  1366  00D4               	movwf	??_find_best_solution+3
  4000  1367  3088               	movlw	high (_g_matrix44| (0+32768))
  4001  1368  00D5               	movwf	??_find_best_solution+4
  4002  1369  0852               	movf	??_find_best_solution+1,w
  4003  136A  0754               	addwf	??_find_best_solution+3,w
  4004  136B  00D6               	movwf	??_find_best_solution+5
  4005  136C  0853               	movf	??_find_best_solution+2,w
  4006  136D  1803               	skipnc
  4007  136E  0A53               	incf	??_find_best_solution+2,w
  4008  136F  0755               	addwf	??_find_best_solution+4,w
  4009  1370  00D7               	movwf	??_find_best_solution+6
  4010  1371  0856               	movf	??_find_best_solution+5,w
  4011  1372  1683               	bsf	3,5	;RP0=1, select bank1
  4012  1373  1303               	bcf	3,6	;RP1=0, select bank1
  4013  1374  00E3               	movwf	find_best_solution@temp_cur_matrix44^(0+128)
  4014  1375  1283               	bcf	3,5	;RP0=0, select bank0
  4015  1376  1303               	bcf	3,6	;RP1=0, select bank0
  4016  1377  0857               	movf	??_find_best_solution+6,w
  4017  1378  1683               	bsf	3,5	;RP0=1, select bank1
  4018  1379  1303               	bcf	3,6	;RP1=0, select bank1
  4019  137A  00E4               	movwf	(find_best_solution@temp_cur_matrix44+1)^(0+128)
  4020                           
  4021                           ;teris_16f886.c: 1038: left_most_index = left_most(cur_x, temp_cur_matrix44, &g_matrix88
      +                          );
  4022  137B  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4023  137C  1283               	bcf	3,5	;RP0=0, select bank0
  4024  137D  1303               	bcf	3,6	;RP1=0, select bank0
  4025  137E  00C4               	movwf	left_most@matrix44
  4026  137F  1683               	bsf	3,5	;RP0=1, select bank1
  4027  1380  1303               	bcf	3,6	;RP1=0, select bank1
  4028  1381  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4029  1382  1283               	bcf	3,5	;RP0=0, select bank0
  4030  1383  1303               	bcf	3,6	;RP1=0, select bank0
  4031  1384  00C5               	movwf	left_most@matrix44+1
  4032  1385  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4033  1386  00D1               	movwf	??_find_best_solution
  4034  1387  0851               	movf	??_find_best_solution,w
  4035  1388  00C6               	movwf	left_most@matrix88
  4036  1389  1683               	bsf	3,5	;RP0=1, select bank1
  4037  138A  1303               	bcf	3,6	;RP1=0, select bank1
  4038  138B  086D               	movf	_cur_x^(0+128),w
  4039  138C  160A  158A  22AB  160A  118A  	fcall	_left_most
  4040  1391  1283               	bcf	3,5	;RP0=0, select bank0
  4041  1392  1303               	bcf	3,6	;RP1=0, select bank0
  4042  1393  00D2               	movwf	??_find_best_solution+1
  4043  1394  0852               	movf	??_find_best_solution+1,w
  4044  1395  1683               	bsf	3,5	;RP0=1, select bank1
  4045  1396  1303               	bcf	3,6	;RP1=0, select bank1
  4046  1397  00A0               	movwf	find_best_solution@left_most_index^(0+128)
  4047                           
  4048                           ;teris_16f886.c: 1039: right_most_index = right_most(cur_x, temp_cur_matrix44, &g_matrix
      +                          88);
  4049  1398  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4050  1399  1283               	bcf	3,5	;RP0=0, select bank0
  4051  139A  1303               	bcf	3,6	;RP1=0, select bank0
  4052  139B  00C4               	movwf	right_most@matrix44
  4053  139C  1683               	bsf	3,5	;RP0=1, select bank1
  4054  139D  1303               	bcf	3,6	;RP1=0, select bank1
  4055  139E  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4056  139F  1283               	bcf	3,5	;RP0=0, select bank0
  4057  13A0  1303               	bcf	3,6	;RP1=0, select bank0
  4058  13A1  00C5               	movwf	right_most@matrix44+1
  4059  13A2  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4060  13A3  00D1               	movwf	??_find_best_solution
  4061  13A4  0851               	movf	??_find_best_solution,w
  4062  13A5  00C6               	movwf	right_most@matrix88
  4063  13A6  1683               	bsf	3,5	;RP0=1, select bank1
  4064  13A7  1303               	bcf	3,6	;RP1=0, select bank1
  4065  13A8  086D               	movf	_cur_x^(0+128),w
  4066  13A9  160A  158A  22DD  160A  118A  	fcall	_right_most
  4067  13AE  1283               	bcf	3,5	;RP0=0, select bank0
  4068  13AF  1303               	bcf	3,6	;RP1=0, select bank0
  4069  13B0  00D2               	movwf	??_find_best_solution+1
  4070  13B1  0852               	movf	??_find_best_solution+1,w
  4071  13B2  1683               	bsf	3,5	;RP0=1, select bank1
  4072  13B3  1303               	bcf	3,6	;RP1=0, select bank1
  4073  13B4  00A1               	movwf	find_best_solution@right_most_index^(0+128)
  4074                           
  4075                           ;teris_16f886.c: 1041: for(int8_t temp_x = left_most_index; temp_x <= right_most_index; 
      +                          temp_x++)
  4076  13B5  0820               	movf	find_best_solution@left_most_index^(0+128),w
  4077  13B6  1283               	bcf	3,5	;RP0=0, select bank0
  4078  13B7  1303               	bcf	3,6	;RP1=0, select bank0
  4079  13B8  00D1               	movwf	??_find_best_solution
  4080  13B9  0851               	movf	??_find_best_solution,w
  4081  13BA  1683               	bsf	3,5	;RP0=1, select bank1
  4082  13BB  1303               	bcf	3,6	;RP1=0, select bank1
  4083  13BC  00E6               	movwf	find_best_solution@temp_x^(0+128)
  4084  13BD                     l5597:	
  4085  13BD  0821               	movf	find_best_solution@right_most_index^(0+128),w
  4086  13BE  3A80               	xorlw	128
  4087  13BF  1283               	bcf	3,5	;RP0=0, select bank0
  4088  13C0  1303               	bcf	3,6	;RP1=0, select bank0
  4089  13C1  00D1               	movwf	??_find_best_solution
  4090  13C2  1683               	bsf	3,5	;RP0=1, select bank1
  4091  13C3  1303               	bcf	3,6	;RP1=0, select bank1
  4092  13C4  0866               	movf	find_best_solution@temp_x^(0+128),w
  4093  13C5  3A80               	xorlw	128
  4094  13C6  1283               	bcf	3,5	;RP0=0, select bank0
  4095  13C7  1303               	bcf	3,6	;RP1=0, select bank0
  4096  13C8  02D1               	subwf	??_find_best_solution,f
  4097  13C9  1C03               	btfss	3,0
  4098  13CA  2F2E               	goto	l5599
  4099                           
  4100                           ;teris_16f886.c: 1042: {
  4101                           ;teris_16f886.c: 1043: temp_y = fall_off(temp_x, cur_y, temp_cur_matrix44, &g_matrix88);
  4102  13CB  1283               	bcf	3,5	;RP0=0, select bank0
  4103  13CC  0868               	movf	_cur_y,w
  4104  13CD  00D1               	movwf	??_find_best_solution
  4105  13CE  0851               	movf	??_find_best_solution,w
  4106  13CF  00C6               	movwf	fall_off@y
  4107  13D0  1683               	bsf	3,5	;RP0=1, select bank1
  4108  13D1  1303               	bcf	3,6	;RP1=0, select bank1
  4109  13D2  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4110  13D3  1283               	bcf	3,5	;RP0=0, select bank0
  4111  13D4  1303               	bcf	3,6	;RP1=0, select bank0
  4112  13D5  00C7               	movwf	fall_off@matrix44
  4113  13D6  1683               	bsf	3,5	;RP0=1, select bank1
  4114  13D7  1303               	bcf	3,6	;RP1=0, select bank1
  4115  13D8  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4116  13D9  1283               	bcf	3,5	;RP0=0, select bank0
  4117  13DA  1303               	bcf	3,6	;RP1=0, select bank0
  4118  13DB  00C8               	movwf	fall_off@matrix44+1
  4119  13DC  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4120  13DD  00D2               	movwf	??_find_best_solution+1
  4121  13DE  0852               	movf	??_find_best_solution+1,w
  4122  13DF  00C9               	movwf	fall_off@matrix88
  4123  13E0  1683               	bsf	3,5	;RP0=1, select bank1
  4124  13E1  1303               	bcf	3,6	;RP1=0, select bank1
  4125  13E2  0866               	movf	find_best_solution@temp_x^(0+128),w
  4126  13E3  160A  118A  2259  160A  118A  	fcall	_fall_off
  4127  13E8  1283               	bcf	3,5	;RP0=0, select bank0
  4128  13E9  1303               	bcf	3,6	;RP1=0, select bank0
  4129  13EA  00D3               	movwf	??_find_best_solution+2
  4130  13EB  0853               	movf	??_find_best_solution+2,w
  4131  13EC  00EA               	movwf	_temp_y
  4132                           
  4133                           ;teris_16f886.c: 1045: printf_debug_MATRIX44(1, "After fall off", temp_x, temp_y, temp_c
      +                          ur_matrix44);
  4134  13ED  30EB               	movlw	low (STR_60| (0+32768))
  4135  13EE  00F6               	movwf	printf_debug_MATRIX44@lable
  4136  13EF  308C               	movlw	high (STR_60| (0+32768))
  4137  13F0  00F7               	movwf	printf_debug_MATRIX44@lable+1
  4138  13F1  1683               	bsf	3,5	;RP0=1, select bank1
  4139  13F2  1303               	bcf	3,6	;RP1=0, select bank1
  4140  13F3  0866               	movf	find_best_solution@temp_x^(0+128),w
  4141  13F4  1283               	bcf	3,5	;RP0=0, select bank0
  4142  13F5  1303               	bcf	3,6	;RP1=0, select bank0
  4143  13F6  00D1               	movwf	??_find_best_solution
  4144  13F7  0851               	movf	??_find_best_solution,w
  4145  13F8  00F8               	movwf	printf_debug_MATRIX44@x
  4146  13F9  086A               	movf	_temp_y,w
  4147  13FA  00D2               	movwf	??_find_best_solution+1
  4148  13FB  0852               	movf	??_find_best_solution+1,w
  4149  13FC  00F9               	movwf	printf_debug_MATRIX44@y
  4150  13FD  1683               	bsf	3,5	;RP0=1, select bank1
  4151  13FE  1303               	bcf	3,6	;RP1=0, select bank1
  4152  13FF  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4153  1400  00FA               	movwf	printf_debug_MATRIX44@matrix
  4154  1401  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4155  1402  00FB               	movwf	printf_debug_MATRIX44@matrix+1
  4156  1403  3001               	movlw	1
  4157  1404  120A  158A  26E0  160A  118A  	fcall	_printf_debug_MATRIX44
  4158                           
  4159                           ;teris_16f886.c: 1046: printf_debug_Screen(1, "After fall off");
  4160  1409  30EB               	movlw	low (STR_60| (0+32768))
  4161  140A  1283               	bcf	3,5	;RP0=0, select bank0
  4162  140B  1303               	bcf	3,6	;RP1=0, select bank0
  4163  140C  00A5               	movwf	printf_debug_Screen@lable
  4164  140D  308C               	movlw	high (STR_60| (0+32768))
  4165  140E  00A6               	movwf	printf_debug_Screen@lable+1
  4166  140F  3001               	movlw	1
  4167  1410  160A  158A  221F  160A  118A  	fcall	_printf_debug_Screen
  4168                           
  4169                           ;teris_16f886.c: 1048: if(is_valid(temp_x, temp_y, temp_cur_matrix44, &g_matrix88) == 0)
  4170  1415  1283               	bcf	3,5	;RP0=0, select bank0
  4171  1416  1303               	bcf	3,6	;RP1=0, select bank0
  4172  1417  086A               	movf	_temp_y,w
  4173  1418  00D1               	movwf	??_find_best_solution
  4174  1419  0851               	movf	??_find_best_solution,w
  4175  141A  00C6               	movwf	is_valid@y
  4176  141B  1683               	bsf	3,5	;RP0=1, select bank1
  4177  141C  1303               	bcf	3,6	;RP1=0, select bank1
  4178  141D  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4179  141E  1283               	bcf	3,5	;RP0=0, select bank0
  4180  141F  1303               	bcf	3,6	;RP1=0, select bank0
  4181  1420  00C7               	movwf	is_valid@matrix44
  4182  1421  1683               	bsf	3,5	;RP0=1, select bank1
  4183  1422  1303               	bcf	3,6	;RP1=0, select bank1
  4184  1423  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4185  1424  1283               	bcf	3,5	;RP0=0, select bank0
  4186  1425  1303               	bcf	3,6	;RP1=0, select bank0
  4187  1426  00C8               	movwf	is_valid@matrix44+1
  4188  1427  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4189  1428  00D2               	movwf	??_find_best_solution+1
  4190  1429  0852               	movf	??_find_best_solution+1,w
  4191  142A  00C9               	movwf	is_valid@matrix88
  4192  142B  1683               	bsf	3,5	;RP0=1, select bank1
  4193  142C  1303               	bcf	3,6	;RP1=0, select bank1
  4194  142D  0866               	movf	find_best_solution@temp_x^(0+128),w
  4195  142E  120A  158A  25D3  160A  118A  	fcall	_is_valid
  4196  1433  3A00               	xorlw	0
  4197  1434  1903               	btfsc	3,2
  4198  1435  2F25               	goto	l5595
  4199                           
  4200                           ;teris_16f886.c: 1051: }
  4201                           ;teris_16f886.c: 1052: res = 1;
  4202                           
  4203                           ;teris_16f886.c: 1049: {
  4204                           ;teris_16f886.c: 1050: continue;
  4205  1436  1683               	bsf	3,5	;RP0=1, select bank1
  4206  1437  1303               	bcf	3,6	;RP1=0, select bank1
  4207  1438  01A2               	clrf	find_best_solution@res^(0+128)
  4208  1439  0AA2               	incf	find_best_solution@res^(0+128),f
  4209                           
  4210                           ;teris_16f886.c: 1053: merge1(temp_x, temp_y, temp_cur_matrix44, &g_matrix88, &temp_matr
      +                          ix88);
  4211  143A  1283               	bcf	3,5	;RP0=0, select bank0
  4212  143B  1303               	bcf	3,6	;RP1=0, select bank0
  4213  143C  086A               	movf	_temp_y,w
  4214  143D  00D1               	movwf	??_find_best_solution
  4215  143E  0851               	movf	??_find_best_solution,w
  4216  143F  00A0               	movwf	merge1@y
  4217  1440  1683               	bsf	3,5	;RP0=1, select bank1
  4218  1441  1303               	bcf	3,6	;RP1=0, select bank1
  4219  1442  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4220  1443  1283               	bcf	3,5	;RP0=0, select bank0
  4221  1444  1303               	bcf	3,6	;RP1=0, select bank0
  4222  1445  00A1               	movwf	merge1@matrix44
  4223  1446  1683               	bsf	3,5	;RP0=1, select bank1
  4224  1447  1303               	bcf	3,6	;RP1=0, select bank1
  4225  1448  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4226  1449  1283               	bcf	3,5	;RP0=0, select bank0
  4227  144A  1303               	bcf	3,6	;RP1=0, select bank0
  4228  144B  00A2               	movwf	merge1@matrix44+1
  4229  144C  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4230  144D  00D2               	movwf	??_find_best_solution+1
  4231  144E  0852               	movf	??_find_best_solution+1,w
  4232  144F  00A3               	movwf	merge1@matrix88_in
  4233  1450  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4234  1451  00D3               	movwf	??_find_best_solution+2
  4235  1452  0853               	movf	??_find_best_solution+2,w
  4236  1453  00A4               	movwf	merge1@matrix88_out
  4237  1454  1683               	bsf	3,5	;RP0=1, select bank1
  4238  1455  1303               	bcf	3,6	;RP1=0, select bank1
  4239  1456  0866               	movf	find_best_solution@temp_x^(0+128),w
  4240  1457  160A  158A  26B1  160A  118A  	fcall	_merge1
  4241                           
  4242                           ;teris_16f886.c: 1054: temp_count = delete_matrix(&temp_matrix88);
  4243  145C  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4244  145D  1283               	bcf	3,5	;RP0=0, select bank0
  4245  145E  1303               	bcf	3,6	;RP1=0, select bank0
  4246  145F  00C4               	movwf	delete_matrix@matrix
  4247  1460  3000               	movlw	0
  4248  1461  00C5               	movwf	delete_matrix@matrix+1
  4249  1462  160A  158A  241E  160A  118A  	fcall	_delete_matrix
  4250  1467  1283               	bcf	3,5	;RP0=0, select bank0
  4251  1468  1303               	bcf	3,6	;RP1=0, select bank0
  4252  1469  00D1               	movwf	??_find_best_solution
  4253  146A  0851               	movf	??_find_best_solution,w
  4254  146B  1683               	bsf	3,5	;RP0=1, select bank1
  4255  146C  1303               	bcf	3,6	;RP1=0, select bank1
  4256  146D  00E9               	movwf	_temp_count^(0+128)
  4257                           
  4258                           ;teris_16f886.c: 1055: temp_risk = evaluate(&temp_matrix88);
  4259  146E  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4260  146F  160A  118A  200C  160A  118A  	fcall	_evaluate
  4261  1474  1283               	bcf	3,5	;RP0=0, select bank0
  4262  1475  1303               	bcf	3,6	;RP1=0, select bank0
  4263  1476  0845               	movf	?_evaluate+1,w
  4264  1477  1683               	bsf	3,5	;RP0=1, select bank1
  4265  1478  1303               	bcf	3,6	;RP1=0, select bank1
  4266  1479  00E8               	movwf	(_temp_risk+1)^(0+128)
  4267  147A  1283               	bcf	3,5	;RP0=0, select bank0
  4268  147B  1303               	bcf	3,6	;RP1=0, select bank0
  4269  147C  0844               	movf	?_evaluate,w
  4270  147D  1683               	bsf	3,5	;RP0=1, select bank1
  4271  147E  1303               	bcf	3,6	;RP1=0, select bank1
  4272  147F  00E7               	movwf	_temp_risk^(0+128)
  4273                           
  4274                           ;teris_16f886.c: 1056: temp_high = get_high_after_merge(temp_y, temp_cur_matrix44);
  4275  1480  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4276  1481  1283               	bcf	3,5	;RP0=0, select bank0
  4277  1482  1303               	bcf	3,6	;RP1=0, select bank0
  4278  1483  00C4               	movwf	get_high_after_merge@matrix
  4279  1484  1683               	bsf	3,5	;RP0=1, select bank1
  4280  1485  1303               	bcf	3,6	;RP1=0, select bank1
  4281  1486  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4282  1487  1283               	bcf	3,5	;RP0=0, select bank0
  4283  1488  1303               	bcf	3,6	;RP1=0, select bank0
  4284  1489  00C5               	movwf	get_high_after_merge@matrix+1
  4285  148A  086A               	movf	_temp_y,w
  4286  148B  160A  118A  2114  160A  118A  	fcall	_get_high_after_merge
  4287  1490  1283               	bcf	3,5	;RP0=0, select bank0
  4288  1491  1303               	bcf	3,6	;RP1=0, select bank0
  4289  1492  00D1               	movwf	??_find_best_solution
  4290  1493  0851               	movf	??_find_best_solution,w
  4291  1494  1683               	bsf	3,5	;RP0=1, select bank1
  4292  1495  1303               	bcf	3,6	;RP1=0, select bank1
  4293  1496  00EA               	movwf	_temp_high^(0+128)
  4294                           
  4295                           ;teris_16f886.c: 1057: temp_hole = get_holes_after_merge(&temp_matrix88);
  4296  1497  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4297  1498  120A  118A  2003  160A  118A  	fcall	_get_holes_after_merge
  4298  149D  1283               	bcf	3,5	;RP0=0, select bank0
  4299  149E  1303               	bcf	3,6	;RP1=0, select bank0
  4300  149F  00D1               	movwf	??_find_best_solution
  4301  14A0  0851               	movf	??_find_best_solution,w
  4302  14A1  1683               	bsf	3,5	;RP0=1, select bank1
  4303  14A2  1303               	bcf	3,6	;RP1=0, select bank1
  4304  14A3  00EB               	movwf	_temp_hole^(0+128)
  4305                           
  4306                           ;teris_16f886.c: 1059: printf_debug_MATRIX88(1, "Valid instance", &temp_matrix88);
  4307  14A4  30DC               	movlw	low (STR_62| (0+32768))
  4308  14A5  00F6               	movwf	printf_debug_MATRIX88@lable
  4309  14A6  308C               	movlw	high (STR_62| (0+32768))
  4310  14A7  00F7               	movwf	printf_debug_MATRIX88@lable+1
  4311  14A8  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4312  14A9  00F8               	movwf	printf_debug_MATRIX88@matrix
  4313  14AA  3000               	movlw	0
  4314  14AB  00F9               	movwf	printf_debug_MATRIX88@matrix+1
  4315  14AC  3001               	movlw	1
  4316  14AD  160A  118A  208E  160A  118A  	fcall	_printf_debug_MATRIX88
  4317                           
  4318                           ;teris_16f886.c: 1061: if(temp_count > temp_pre_count)
  4319  14B2  1683               	bsf	3,5	;RP0=1, select bank1
  4320  14B3  1303               	bcf	3,6	;RP1=0, select bank1
  4321  14B4  0869               	movf	_temp_count^(0+128),w
  4322  14B5  026C               	subwf	_temp_pre_count^(0+128),w
  4323  14B6  1803               	skipnc
  4324  14B7  2CCD               	goto	l5475
  4325                           
  4326                           ;teris_16f886.c: 1062: {
  4327                           ;teris_16f886.c: 1063: debug_int2(1, "count: (%d) > (%d)", temp_count, temp_pre_count);
  4328  14B8  30CB               	movlw	low (STR_63| (0+32768))
  4329  14B9  1283               	bcf	3,5	;RP0=0, select bank0
  4330  14BA  1303               	bcf	3,6	;RP1=0, select bank0
  4331  14BB  00BF               	movwf	debug_int2@f
  4332  14BC  308B               	movlw	high (STR_63| (0+32768))
  4333  14BD  00C0               	movwf	debug_int2@f+1
  4334  14BE  1683               	bsf	3,5	;RP0=1, select bank1
  4335  14BF  1303               	bcf	3,6	;RP1=0, select bank1
  4336  14C0  0869               	movf	_temp_count^(0+128),w
  4337  14C1  1283               	bcf	3,5	;RP0=0, select bank0
  4338  14C2  1303               	bcf	3,6	;RP1=0, select bank0
  4339  14C3  00D1               	movwf	??_find_best_solution
  4340  14C4  01D2               	clrf	??_find_best_solution+1
  4341  14C5  0851               	movf	??_find_best_solution,w
  4342  14C6  00C1               	movwf	debug_int2@i1
  4343  14C7  0852               	movf	??_find_best_solution+1,w
  4344  14C8  00C2               	movwf	debug_int2@i1+1
  4345  14C9  1683               	bsf	3,5	;RP0=1, select bank1
  4346  14CA  1303               	bcf	3,6	;RP1=0, select bank1
  4347  14CB  086C               	movf	_temp_pre_count^(0+128),w
  4348  14CC  2E0D               	goto	L5
  4349  14CD                     l5475:	
  4350                           ;teris_16f886.c: 1070: }
  4351                           
  4352                           ;teris_16f886.c: 1069: temp_pre_x = temp_x;
  4353                           
  4354                           ;teris_16f886.c: 1068: tem_pre_sub_index = tem_sub_index;
  4355                           
  4356                           ;teris_16f886.c: 1067: temp_pre_hole = temp_hole;
  4357                           
  4358                           ;teris_16f886.c: 1066: temp_pre_high = temp_high;
  4359                           
  4360                           ;teris_16f886.c: 1065: temp_pre_risk = temp_risk;
  4361                           
  4362                           ;teris_16f886.c: 1064: temp_pre_count = temp_count;
  4363                           
  4364                           
  4365                           ;teris_16f886.c: 1071: else if(temp_count == temp_pre_count)
  4366  14CD  1683               	bsf	3,5	;RP0=1, select bank1
  4367  14CE  1303               	bcf	3,6	;RP1=0, select bank1
  4368  14CF  0869               	movf	_temp_count^(0+128),w
  4369  14D0  066C               	xorwf	_temp_pre_count^(0+128),w
  4370  14D1  1D03               	skipz
  4371  14D2  2EA0               	goto	l470
  4372                           
  4373                           ;teris_16f886.c: 1072: {
  4374                           ;teris_16f886.c: 1073: if(get_high(&g_matrix88) <= 8/2 + 1)
  4375  14D3  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4376  14D4  160A  158A  2467  160A  118A  	fcall	_get_high
  4377  14D9  1283               	bcf	3,5	;RP0=0, select bank0
  4378  14DA  1303               	bcf	3,6	;RP1=0, select bank0
  4379  14DB  00D1               	movwf	??_find_best_solution
  4380  14DC  3006               	movlw	6
  4381  14DD  0251               	subwf	??_find_best_solution,w
  4382  14DE  1803               	skipnc
  4383  14DF  2D80               	goto	l5537
  4384                           
  4385                           ;teris_16f886.c: 1074: {
  4386                           ;teris_16f886.c: 1075: debug_int1(1, "height <= (%d)", 8/2 + 1);
  4387  14E0  30A0               	movlw	low (STR_64| (0+32768))
  4388  14E1  00BF               	movwf	debug_int1@f
  4389  14E2  308C               	movlw	high (STR_64| (0+32768))
  4390  14E3  00C0               	movwf	debug_int1@f+1
  4391  14E4  3005               	movlw	5
  4392  14E5  00C1               	movwf	debug_int1@i
  4393  14E6  3000               	movlw	0
  4394  14E7  00C2               	movwf	debug_int1@i+1
  4395  14E8  3001               	movlw	1
  4396  14E9  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  4397                           
  4398                           ;teris_16f886.c: 1076: debug_int2(1, "count: (%d) == (%d)", temp_count, temp_pre_count);
  4399  14EE  3042               	movlw	low (STR_65| (0+32768))
  4400  14EF  1283               	bcf	3,5	;RP0=0, select bank0
  4401  14F0  1303               	bcf	3,6	;RP1=0, select bank0
  4402  14F1  00BF               	movwf	debug_int2@f
  4403  14F2  308B               	movlw	high (STR_65| (0+32768))
  4404  14F3  00C0               	movwf	debug_int2@f+1
  4405  14F4  1683               	bsf	3,5	;RP0=1, select bank1
  4406  14F5  1303               	bcf	3,6	;RP1=0, select bank1
  4407  14F6  0869               	movf	_temp_count^(0+128),w
  4408  14F7  1283               	bcf	3,5	;RP0=0, select bank0
  4409  14F8  1303               	bcf	3,6	;RP1=0, select bank0
  4410  14F9  00D1               	movwf	??_find_best_solution
  4411  14FA  01D2               	clrf	??_find_best_solution+1
  4412  14FB  0851               	movf	??_find_best_solution,w
  4413  14FC  00C1               	movwf	debug_int2@i1
  4414  14FD  0852               	movf	??_find_best_solution+1,w
  4415  14FE  00C2               	movwf	debug_int2@i1+1
  4416  14FF  1683               	bsf	3,5	;RP0=1, select bank1
  4417  1500  1303               	bcf	3,6	;RP1=0, select bank1
  4418  1501  086C               	movf	_temp_pre_count^(0+128),w
  4419  1502  1283               	bcf	3,5	;RP0=0, select bank0
  4420  1503  1303               	bcf	3,6	;RP1=0, select bank0
  4421  1504  00D3               	movwf	??_find_best_solution+2
  4422  1505  01D4               	clrf	??_find_best_solution+3
  4423  1506  0853               	movf	??_find_best_solution+2,w
  4424  1507  00C3               	movwf	debug_int2@i2
  4425  1508  0854               	movf	??_find_best_solution+3,w
  4426  1509  00C4               	movwf	debug_int2@i2+1
  4427  150A  3001               	movlw	1
  4428  150B  160A  158A  21CC  160A  118A  	fcall	_debug_int2
  4429                           
  4430                           ;teris_16f886.c: 1077: if(temp_risk < temp_pre_risk)
  4431  1510  1283               	bcf	3,5	;RP0=0, select bank0
  4432  1511  1303               	bcf	3,6	;RP1=0, select bank0
  4433  1512  086C               	movf	_temp_pre_risk+1,w
  4434  1513  1683               	bsf	3,5	;RP0=1, select bank1
  4435  1514  1303               	bcf	3,6	;RP1=0, select bank1
  4436  1515  0268               	subwf	(_temp_risk+1)^(0+128),w
  4437  1516  1D03               	skipz
  4438  1517  2D1E               	goto	u8155
  4439  1518  1283               	bcf	3,5	;RP0=0, select bank0
  4440  1519  1303               	bcf	3,6	;RP1=0, select bank0
  4441  151A  086B               	movf	_temp_pre_risk,w
  4442  151B  1683               	bsf	3,5	;RP0=1, select bank1
  4443  151C  1303               	bcf	3,6	;RP1=0, select bank1
  4444  151D  0267               	subwf	_temp_risk^(0+128),w
  4445  151E                     u8155:	
  4446  151E  1C03               	btfss	3,0
  4447  151F  2E4E               	goto	L6
  4448                           
  4449                           ;teris_16f886.c: 1087: else if(temp_risk == temp_pre_risk)
  4450                           
  4451                           ;teris_16f886.c: 1086: }
  4452                           
  4453                           ;teris_16f886.c: 1085: temp_pre_x = temp_x;
  4454                           
  4455                           ;teris_16f886.c: 1084: tem_pre_sub_index = tem_sub_index;
  4456                           
  4457                           ;teris_16f886.c: 1083: temp_pre_hole = temp_hole;
  4458                           
  4459                           ;teris_16f886.c: 1082: temp_pre_high = temp_high;
  4460                           
  4461                           ;teris_16f886.c: 1081: temp_pre_risk = temp_risk;
  4462                           
  4463                           ;teris_16f886.c: 1080: temp_pre_count = temp_count;
  4464                           
  4465                           ;teris_16f886.c: 1078: {
  4466                           ;teris_16f886.c: 1079: debug_int2(1, "risk: (%d) < (%d)", temp_risk, temp_pre_risk);
  4467  1520  1283               	bcf	3,5	;RP0=0, select bank0
  4468  1521  086C               	movf	_temp_pre_risk+1,w
  4469  1522  1683               	bsf	3,5	;RP0=1, select bank1
  4470  1523  1303               	bcf	3,6	;RP1=0, select bank1
  4471  1524  0668               	xorwf	(_temp_risk+1)^(0+128),w
  4472  1525  1D03               	skipz
  4473  1526  2D2D               	goto	u8165
  4474  1527  1283               	bcf	3,5	;RP0=0, select bank0
  4475  1528  1303               	bcf	3,6	;RP1=0, select bank0
  4476  1529  086B               	movf	_temp_pre_risk,w
  4477  152A  1683               	bsf	3,5	;RP0=1, select bank1
  4478  152B  1303               	bcf	3,6	;RP1=0, select bank1
  4479  152C  0667               	xorwf	_temp_risk^(0+128),w
  4480  152D                     u8165:	
  4481  152D  1D03               	skipz
  4482  152E  2EA0               	goto	l470
  4483                           
  4484                           ;teris_16f886.c: 1088: {
  4485                           ;teris_16f886.c: 1089: debug_int2(1, "risk: (%d) == (%d)", temp_risk, temp_pre_risk);
  4486  152F  30B8               	movlw	low (STR_67| (0+32768))
  4487  1530  1283               	bcf	3,5	;RP0=0, select bank0
  4488  1531  1303               	bcf	3,6	;RP1=0, select bank0
  4489  1532  00BF               	movwf	debug_int2@f
  4490  1533  308B               	movlw	high (STR_67| (0+32768))
  4491  1534  00C0               	movwf	debug_int2@f+1
  4492  1535  1683               	bsf	3,5	;RP0=1, select bank1
  4493  1536  1303               	bcf	3,6	;RP1=0, select bank1
  4494  1537  0868               	movf	(_temp_risk+1)^(0+128),w
  4495  1538  1283               	bcf	3,5	;RP0=0, select bank0
  4496  1539  1303               	bcf	3,6	;RP1=0, select bank0
  4497  153A  00C2               	movwf	debug_int2@i1+1
  4498  153B  1683               	bsf	3,5	;RP0=1, select bank1
  4499  153C  1303               	bcf	3,6	;RP1=0, select bank1
  4500  153D  0867               	movf	_temp_risk^(0+128),w
  4501  153E  1283               	bcf	3,5	;RP0=0, select bank0
  4502  153F  1303               	bcf	3,6	;RP1=0, select bank0
  4503  1540  00C1               	movwf	debug_int2@i1
  4504  1541  086C               	movf	_temp_pre_risk+1,w
  4505  1542  00C4               	movwf	debug_int2@i2+1
  4506  1543  086B               	movf	_temp_pre_risk,w
  4507  1544  00C3               	movwf	debug_int2@i2
  4508  1545  3001               	movlw	1
  4509  1546  160A  158A  21CC  160A  118A  	fcall	_debug_int2
  4510                           
  4511                           ;teris_16f886.c: 1090: if(temp_high < temp_pre_high)
  4512  154B  1683               	bsf	3,5	;RP0=1, select bank1
  4513  154C  1303               	bcf	3,6	;RP1=0, select bank1
  4514  154D  086E               	movf	_temp_pre_high^(0+128),w
  4515  154E  026A               	subwf	_temp_high^(0+128),w
  4516  154F  1C03               	btfss	3,0
  4517  1550  2DB6               	goto	L8
  4518                           
  4519                           ;teris_16f886.c: 1100: else if(temp_high == temp_pre_high)
  4520                           
  4521                           ;teris_16f886.c: 1099: }
  4522                           
  4523                           ;teris_16f886.c: 1098: temp_pre_x = temp_x;
  4524                           
  4525                           ;teris_16f886.c: 1097: tem_pre_sub_index = tem_sub_index;
  4526                           
  4527                           ;teris_16f886.c: 1096: temp_pre_hole = temp_hole;
  4528                           
  4529                           ;teris_16f886.c: 1095: temp_pre_high = temp_high;
  4530                           
  4531                           ;teris_16f886.c: 1094: temp_pre_risk = temp_risk;
  4532                           
  4533                           ;teris_16f886.c: 1093: temp_pre_count = temp_count;
  4534                           
  4535                           ;teris_16f886.c: 1091: {
  4536                           ;teris_16f886.c: 1092: debug_int2(1, "high: (%d) < (%d)", temp_high, temp_pre_high);
  4537  1551  1683               	bsf	3,5	;RP0=1, select bank1
  4538  1552  1303               	bcf	3,6	;RP1=0, select bank1
  4539  1553  086A               	movf	_temp_high^(0+128),w
  4540  1554  066E               	xorwf	_temp_pre_high^(0+128),w
  4541  1555  1D03               	skipz
  4542  1556  2EA0               	goto	l470
  4543                           
  4544                           ;teris_16f886.c: 1101: {
  4545                           ;teris_16f886.c: 1102: debug_int2(1, "high: (%d) == (%d)", temp_high, temp_pre_high);
  4546  1557  30A5               	movlw	low (STR_69| (0+32768))
  4547  1558  1283               	bcf	3,5	;RP0=0, select bank0
  4548  1559  1303               	bcf	3,6	;RP1=0, select bank0
  4549  155A  00BF               	movwf	debug_int2@f
  4550  155B  308B               	movlw	high (STR_69| (0+32768))
  4551  155C  00C0               	movwf	debug_int2@f+1
  4552  155D  1683               	bsf	3,5	;RP0=1, select bank1
  4553  155E  1303               	bcf	3,6	;RP1=0, select bank1
  4554  155F  086A               	movf	_temp_high^(0+128),w
  4555  1560  1283               	bcf	3,5	;RP0=0, select bank0
  4556  1561  1303               	bcf	3,6	;RP1=0, select bank0
  4557  1562  00D1               	movwf	??_find_best_solution
  4558  1563  01D2               	clrf	??_find_best_solution+1
  4559  1564  0851               	movf	??_find_best_solution,w
  4560  1565  00C1               	movwf	debug_int2@i1
  4561  1566  0852               	movf	??_find_best_solution+1,w
  4562  1567  00C2               	movwf	debug_int2@i1+1
  4563  1568  1683               	bsf	3,5	;RP0=1, select bank1
  4564  1569  1303               	bcf	3,6	;RP1=0, select bank1
  4565  156A  086E               	movf	_temp_pre_high^(0+128),w
  4566  156B  1283               	bcf	3,5	;RP0=0, select bank0
  4567  156C  1303               	bcf	3,6	;RP1=0, select bank0
  4568  156D  00D3               	movwf	??_find_best_solution+2
  4569  156E  01D4               	clrf	??_find_best_solution+3
  4570  156F  0853               	movf	??_find_best_solution+2,w
  4571  1570  00C3               	movwf	debug_int2@i2
  4572  1571  0854               	movf	??_find_best_solution+3,w
  4573  1572  00C4               	movwf	debug_int2@i2+1
  4574  1573  3001               	movlw	1
  4575  1574  160A  158A  21CC  160A  118A  	fcall	_debug_int2
  4576                           
  4577                           ;teris_16f886.c: 1103: if(temp_hole < temp_pre_hole)
  4578  1579  1683               	bsf	3,5	;RP0=1, select bank1
  4579  157A  1303               	bcf	3,6	;RP1=0, select bank1
  4580  157B  086F               	movf	_temp_pre_hole^(0+128),w
  4581  157C  026B               	subwf	_temp_hole^(0+128),w
  4582  157D  1803               	skipnc
  4583  157E  2EA0               	goto	l470
  4584  157F  2DF9               	goto	L7
  4585  1580                     l5537:	
  4586                           ;teris_16f886.c: 1112: }
  4587                           ;teris_16f886.c: 1114: }
  4588                           ;teris_16f886.c: 1116: }
  4589                           ;teris_16f886.c: 1117: }
  4590                           
  4591                           ;teris_16f886.c: 1111: temp_pre_x = temp_x;
  4592                           
  4593                           ;teris_16f886.c: 1110: tem_pre_sub_index = tem_sub_index;
  4594                           
  4595                           ;teris_16f886.c: 1109: temp_pre_hole = temp_hole;
  4596                           
  4597                           ;teris_16f886.c: 1108: temp_pre_high = temp_high;
  4598                           
  4599                           ;teris_16f886.c: 1107: temp_pre_risk = temp_risk;
  4600                           
  4601                           ;teris_16f886.c: 1106: temp_pre_count = temp_count;
  4602                           
  4603                           ;teris_16f886.c: 1104: {
  4604                           ;teris_16f886.c: 1105: debug_int2(1, "hole: (%d) < (%d)", temp_hole, temp_pre_hole);
  4605                           
  4606                           
  4607                           ;teris_16f886.c: 1118: else
  4608                           ;teris_16f886.c: 1119: {
  4609                           ;teris_16f886.c: 1120: debug_int1(1, "WARNING height > (%d)", 8/2 + 1);
  4610  1580  30D8               	movlw	low (STR_71| (0+32768))
  4611  1581  00BF               	movwf	debug_int1@f
  4612  1582  308A               	movlw	high (STR_71| (0+32768))
  4613  1583  00C0               	movwf	debug_int1@f+1
  4614  1584  3005               	movlw	5
  4615  1585  00C1               	movwf	debug_int1@i
  4616  1586  3000               	movlw	0
  4617  1587  00C2               	movwf	debug_int1@i+1
  4618  1588  3001               	movlw	1
  4619  1589  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  4620                           
  4621                           ;teris_16f886.c: 1121: debug_int2(1, "high: (%d), (%d)", temp_high, temp_pre_high);
  4622  158E  306F               	movlw	low (STR_72| (0+32768))
  4623  158F  1283               	bcf	3,5	;RP0=0, select bank0
  4624  1590  1303               	bcf	3,6	;RP1=0, select bank0
  4625  1591  00BF               	movwf	debug_int2@f
  4626  1592  308C               	movlw	high (STR_72| (0+32768))
  4627  1593  00C0               	movwf	debug_int2@f+1
  4628  1594  1683               	bsf	3,5	;RP0=1, select bank1
  4629  1595  1303               	bcf	3,6	;RP1=0, select bank1
  4630  1596  086A               	movf	_temp_high^(0+128),w
  4631  1597  1283               	bcf	3,5	;RP0=0, select bank0
  4632  1598  1303               	bcf	3,6	;RP1=0, select bank0
  4633  1599  00D1               	movwf	??_find_best_solution
  4634  159A  01D2               	clrf	??_find_best_solution+1
  4635  159B  0851               	movf	??_find_best_solution,w
  4636  159C  00C1               	movwf	debug_int2@i1
  4637  159D  0852               	movf	??_find_best_solution+1,w
  4638  159E  00C2               	movwf	debug_int2@i1+1
  4639  159F  1683               	bsf	3,5	;RP0=1, select bank1
  4640  15A0  1303               	bcf	3,6	;RP1=0, select bank1
  4641  15A1  086E               	movf	_temp_pre_high^(0+128),w
  4642  15A2  1283               	bcf	3,5	;RP0=0, select bank0
  4643  15A3  1303               	bcf	3,6	;RP1=0, select bank0
  4644  15A4  00D3               	movwf	??_find_best_solution+2
  4645  15A5  01D4               	clrf	??_find_best_solution+3
  4646  15A6  0853               	movf	??_find_best_solution+2,w
  4647  15A7  00C3               	movwf	debug_int2@i2
  4648  15A8  0854               	movf	??_find_best_solution+3,w
  4649  15A9  00C4               	movwf	debug_int2@i2+1
  4650  15AA  3001               	movlw	1
  4651  15AB  160A  158A  21CC  160A  118A  	fcall	_debug_int2
  4652                           
  4653                           ;teris_16f886.c: 1122: if(temp_high < temp_pre_high)
  4654  15B0  1683               	bsf	3,5	;RP0=1, select bank1
  4655  15B1  1303               	bcf	3,6	;RP1=0, select bank1
  4656  15B2  086E               	movf	_temp_pre_high^(0+128),w
  4657  15B3  026A               	subwf	_temp_high^(0+128),w
  4658  15B4  1803               	skipnc
  4659  15B5  2DCB               	goto	l5555
  4660  15B6                     L8:	
  4661                           
  4662                           ;teris_16f886.c: 1123: {
  4663                           ;teris_16f886.c: 1124: debug_int2(1, "high: (%d) < (%d)", temp_high, temp_pre_high);
  4664  15B6  3029               	movlw	low (STR_68| (0+32768))
  4665  15B7  1283               	bcf	3,5	;RP0=0, select bank0
  4666  15B8  1303               	bcf	3,6	;RP1=0, select bank0
  4667  15B9  00BF               	movwf	debug_int2@f
  4668  15BA  308C               	movlw	high (STR_68| (0+32768))
  4669  15BB  00C0               	movwf	debug_int2@f+1
  4670  15BC  1683               	bsf	3,5	;RP0=1, select bank1
  4671  15BD  1303               	bcf	3,6	;RP1=0, select bank1
  4672  15BE  086A               	movf	_temp_high^(0+128),w
  4673  15BF  1283               	bcf	3,5	;RP0=0, select bank0
  4674  15C0  1303               	bcf	3,6	;RP1=0, select bank0
  4675  15C1  00D1               	movwf	??_find_best_solution
  4676  15C2  01D2               	clrf	??_find_best_solution+1
  4677  15C3  0851               	movf	??_find_best_solution,w
  4678  15C4  00C1               	movwf	debug_int2@i1
  4679  15C5  0852               	movf	??_find_best_solution+1,w
  4680  15C6  00C2               	movwf	debug_int2@i1+1
  4681  15C7  1683               	bsf	3,5	;RP0=1, select bank1
  4682  15C8  1303               	bcf	3,6	;RP1=0, select bank1
  4683  15C9  086E               	movf	_temp_pre_high^(0+128),w
  4684  15CA  2E0D               	goto	L5
  4685  15CB                     l5555:	
  4686                           ;teris_16f886.c: 1131: }
  4687                           
  4688                           ;teris_16f886.c: 1130: temp_pre_x = temp_x;
  4689                           
  4690                           ;teris_16f886.c: 1129: tem_pre_sub_index = tem_sub_index;
  4691                           
  4692                           ;teris_16f886.c: 1128: temp_pre_hole = temp_hole;
  4693                           
  4694                           ;teris_16f886.c: 1127: temp_pre_high = temp_high;
  4695                           
  4696                           ;teris_16f886.c: 1126: temp_pre_risk = temp_risk;
  4697                           
  4698                           ;teris_16f886.c: 1125: temp_pre_count = temp_count;
  4699                           
  4700                           
  4701                           ;teris_16f886.c: 1132: else if(temp_high == temp_pre_high)
  4702  15CB  1683               	bsf	3,5	;RP0=1, select bank1
  4703  15CC  1303               	bcf	3,6	;RP1=0, select bank1
  4704  15CD  086A               	movf	_temp_high^(0+128),w
  4705  15CE  066E               	xorwf	_temp_pre_high^(0+128),w
  4706  15CF  1D03               	skipz
  4707  15D0  2EA0               	goto	l470
  4708                           
  4709                           ;teris_16f886.c: 1133: {
  4710                           ;teris_16f886.c: 1134: debug_int2(1, "high: (%d) == (%d)", temp_high, temp_pre_high);
  4711  15D1  30A5               	movlw	low (STR_69| (0+32768))
  4712  15D2  1283               	bcf	3,5	;RP0=0, select bank0
  4713  15D3  1303               	bcf	3,6	;RP1=0, select bank0
  4714  15D4  00BF               	movwf	debug_int2@f
  4715  15D5  308B               	movlw	high (STR_69| (0+32768))
  4716  15D6  00C0               	movwf	debug_int2@f+1
  4717  15D7  1683               	bsf	3,5	;RP0=1, select bank1
  4718  15D8  1303               	bcf	3,6	;RP1=0, select bank1
  4719  15D9  086A               	movf	_temp_high^(0+128),w
  4720  15DA  1283               	bcf	3,5	;RP0=0, select bank0
  4721  15DB  1303               	bcf	3,6	;RP1=0, select bank0
  4722  15DC  00D1               	movwf	??_find_best_solution
  4723  15DD  01D2               	clrf	??_find_best_solution+1
  4724  15DE  0851               	movf	??_find_best_solution,w
  4725  15DF  00C1               	movwf	debug_int2@i1
  4726  15E0  0852               	movf	??_find_best_solution+1,w
  4727  15E1  00C2               	movwf	debug_int2@i1+1
  4728  15E2  1683               	bsf	3,5	;RP0=1, select bank1
  4729  15E3  1303               	bcf	3,6	;RP1=0, select bank1
  4730  15E4  086E               	movf	_temp_pre_high^(0+128),w
  4731  15E5  1283               	bcf	3,5	;RP0=0, select bank0
  4732  15E6  1303               	bcf	3,6	;RP1=0, select bank0
  4733  15E7  00D3               	movwf	??_find_best_solution+2
  4734  15E8  01D4               	clrf	??_find_best_solution+3
  4735  15E9  0853               	movf	??_find_best_solution+2,w
  4736  15EA  00C3               	movwf	debug_int2@i2
  4737  15EB  0854               	movf	??_find_best_solution+3,w
  4738  15EC  00C4               	movwf	debug_int2@i2+1
  4739  15ED  3001               	movlw	1
  4740  15EE  160A  158A  21CC  160A  118A  	fcall	_debug_int2
  4741                           
  4742                           ;teris_16f886.c: 1135: if(temp_hole < temp_pre_hole)
  4743  15F3  1683               	bsf	3,5	;RP0=1, select bank1
  4744  15F4  1303               	bcf	3,6	;RP1=0, select bank1
  4745  15F5  086F               	movf	_temp_pre_hole^(0+128),w
  4746  15F6  026B               	subwf	_temp_hole^(0+128),w
  4747  15F7  1803               	skipnc
  4748  15F8  2E16               	goto	l5575
  4749  15F9                     L7:	
  4750                           
  4751                           ;teris_16f886.c: 1136: {
  4752                           ;teris_16f886.c: 1137: debug_int2(1, "hole: (%d) < (%d)", temp_hole, temp_pre_hole);
  4753  15F9  3017               	movlw	low (STR_70| (0+32768))
  4754  15FA  1283               	bcf	3,5	;RP0=0, select bank0
  4755  15FB  1303               	bcf	3,6	;RP1=0, select bank0
  4756  15FC  00BF               	movwf	debug_int2@f
  4757  15FD  308C               	movlw	high (STR_70| (0+32768))
  4758  15FE  00C0               	movwf	debug_int2@f+1
  4759  15FF  1683               	bsf	3,5	;RP0=1, select bank1
  4760  1600  1303               	bcf	3,6	;RP1=0, select bank1
  4761  1601  086B               	movf	_temp_hole^(0+128),w
  4762  1602  1283               	bcf	3,5	;RP0=0, select bank0
  4763  1603  1303               	bcf	3,6	;RP1=0, select bank0
  4764  1604  00D1               	movwf	??_find_best_solution
  4765  1605  01D2               	clrf	??_find_best_solution+1
  4766  1606  0851               	movf	??_find_best_solution,w
  4767  1607  00C1               	movwf	debug_int2@i1
  4768  1608  0852               	movf	??_find_best_solution+1,w
  4769  1609  00C2               	movwf	debug_int2@i1+1
  4770  160A  1683               	bsf	3,5	;RP0=1, select bank1
  4771  160B  1303               	bcf	3,6	;RP1=0, select bank1
  4772  160C  086F               	movf	_temp_pre_hole^(0+128),w
  4773  160D                     L5:	
  4774  160D  1283               	bcf	3,5	;RP0=0, select bank0
  4775  160E  1303               	bcf	3,6	;RP1=0, select bank0
  4776  160F  00D3               	movwf	??_find_best_solution+2
  4777  1610  01D4               	clrf	??_find_best_solution+3
  4778  1611  0853               	movf	??_find_best_solution+2,w
  4779  1612  00C3               	movwf	debug_int2@i2
  4780  1613  0854               	movf	??_find_best_solution+3,w
  4781  1614  00C4               	movwf	debug_int2@i2+1
  4782  1615  2E64               	goto	L2
  4783  1616                     l5575:	
  4784                           ;teris_16f886.c: 1144: }
  4785                           
  4786                           ;teris_16f886.c: 1143: temp_pre_x = temp_x;
  4787                           
  4788                           ;teris_16f886.c: 1142: tem_pre_sub_index = tem_sub_index;
  4789                           
  4790                           ;teris_16f886.c: 1141: temp_pre_hole = temp_hole;
  4791                           
  4792                           ;teris_16f886.c: 1140: temp_pre_high = temp_high;
  4793                           
  4794                           ;teris_16f886.c: 1139: temp_pre_risk = temp_risk;
  4795                           
  4796                           ;teris_16f886.c: 1138: temp_pre_count = temp_count;
  4797                           
  4798                           
  4799                           ;teris_16f886.c: 1145: else if(temp_hole == temp_pre_hole)
  4800  1616  1683               	bsf	3,5	;RP0=1, select bank1
  4801  1617  1303               	bcf	3,6	;RP1=0, select bank1
  4802  1618  086B               	movf	_temp_hole^(0+128),w
  4803  1619  066F               	xorwf	_temp_pre_hole^(0+128),w
  4804  161A  1D03               	skipz
  4805  161B  2EA0               	goto	l470
  4806                           
  4807                           ;teris_16f886.c: 1146: {
  4808                           ;teris_16f886.c: 1147: debug_int2(1, "hole: (%d) == (%d)", temp_hole, temp_pre_hole);
  4809  161C  3092               	movlw	low (STR_76| (0+32768))
  4810  161D  1283               	bcf	3,5	;RP0=0, select bank0
  4811  161E  1303               	bcf	3,6	;RP1=0, select bank0
  4812  161F  00BF               	movwf	debug_int2@f
  4813  1620  308B               	movlw	high (STR_76| (0+32768))
  4814  1621  00C0               	movwf	debug_int2@f+1
  4815  1622  1683               	bsf	3,5	;RP0=1, select bank1
  4816  1623  1303               	bcf	3,6	;RP1=0, select bank1
  4817  1624  086B               	movf	_temp_hole^(0+128),w
  4818  1625  1283               	bcf	3,5	;RP0=0, select bank0
  4819  1626  1303               	bcf	3,6	;RP1=0, select bank0
  4820  1627  00D1               	movwf	??_find_best_solution
  4821  1628  01D2               	clrf	??_find_best_solution+1
  4822  1629  0851               	movf	??_find_best_solution,w
  4823  162A  00C1               	movwf	debug_int2@i1
  4824  162B  0852               	movf	??_find_best_solution+1,w
  4825  162C  00C2               	movwf	debug_int2@i1+1
  4826  162D  1683               	bsf	3,5	;RP0=1, select bank1
  4827  162E  1303               	bcf	3,6	;RP1=0, select bank1
  4828  162F  086F               	movf	_temp_pre_hole^(0+128),w
  4829  1630  1283               	bcf	3,5	;RP0=0, select bank0
  4830  1631  1303               	bcf	3,6	;RP1=0, select bank0
  4831  1632  00D3               	movwf	??_find_best_solution+2
  4832  1633  01D4               	clrf	??_find_best_solution+3
  4833  1634  0853               	movf	??_find_best_solution+2,w
  4834  1635  00C3               	movwf	debug_int2@i2
  4835  1636  0854               	movf	??_find_best_solution+3,w
  4836  1637  00C4               	movwf	debug_int2@i2+1
  4837  1638  3001               	movlw	1
  4838  1639  160A  158A  21CC  160A  118A  	fcall	_debug_int2
  4839                           
  4840                           ;teris_16f886.c: 1148: if(temp_risk < temp_pre_risk)
  4841  163E  1283               	bcf	3,5	;RP0=0, select bank0
  4842  163F  1303               	bcf	3,6	;RP1=0, select bank0
  4843  1640  086C               	movf	_temp_pre_risk+1,w
  4844  1641  1683               	bsf	3,5	;RP0=1, select bank1
  4845  1642  1303               	bcf	3,6	;RP1=0, select bank1
  4846  1643  0268               	subwf	(_temp_risk+1)^(0+128),w
  4847  1644  1D03               	skipz
  4848  1645  2E4C               	goto	u8245
  4849  1646  1283               	bcf	3,5	;RP0=0, select bank0
  4850  1647  1303               	bcf	3,6	;RP1=0, select bank0
  4851  1648  086B               	movf	_temp_pre_risk,w
  4852  1649  1683               	bsf	3,5	;RP0=1, select bank1
  4853  164A  1303               	bcf	3,6	;RP1=0, select bank1
  4854  164B  0267               	subwf	_temp_risk^(0+128),w
  4855  164C                     u8245:	
  4856  164C  1803               	skipnc
  4857  164D  2EA0               	goto	l470
  4858  164E                     L6:	
  4859                           
  4860                           ;teris_16f886.c: 1149: {
  4861                           ;teris_16f886.c: 1150: debug_int2(1, "risk: (%d) < (%d)", temp_risk, temp_pre_risk);
  4862  164E  303B               	movlw	low (STR_66| (0+32768))
  4863  164F  1283               	bcf	3,5	;RP0=0, select bank0
  4864  1650  1303               	bcf	3,6	;RP1=0, select bank0
  4865  1651  00BF               	movwf	debug_int2@f
  4866  1652  308C               	movlw	high (STR_66| (0+32768))
  4867  1653  00C0               	movwf	debug_int2@f+1
  4868  1654  1683               	bsf	3,5	;RP0=1, select bank1
  4869  1655  1303               	bcf	3,6	;RP1=0, select bank1
  4870  1656  0868               	movf	(_temp_risk+1)^(0+128),w
  4871  1657  1283               	bcf	3,5	;RP0=0, select bank0
  4872  1658  1303               	bcf	3,6	;RP1=0, select bank0
  4873  1659  00C2               	movwf	debug_int2@i1+1
  4874  165A  1683               	bsf	3,5	;RP0=1, select bank1
  4875  165B  1303               	bcf	3,6	;RP1=0, select bank1
  4876  165C  0867               	movf	_temp_risk^(0+128),w
  4877  165D  1283               	bcf	3,5	;RP0=0, select bank0
  4878  165E  1303               	bcf	3,6	;RP1=0, select bank0
  4879  165F  00C1               	movwf	debug_int2@i1
  4880  1660  086C               	movf	_temp_pre_risk+1,w
  4881  1661  00C4               	movwf	debug_int2@i2+1
  4882  1662  086B               	movf	_temp_pre_risk,w
  4883  1663  00C3               	movwf	debug_int2@i2
  4884  1664                     L2:	
  4885  1664  3001               	movlw	1
  4886  1665  160A  158A  21CC  160A  118A  	fcall	_debug_int2
  4887                           
  4888                           ;teris_16f886.c: 1151: temp_pre_count = temp_count;
  4889  166A  1683               	bsf	3,5	;RP0=1, select bank1
  4890  166B  1303               	bcf	3,6	;RP1=0, select bank1
  4891  166C  0869               	movf	_temp_count^(0+128),w
  4892  166D  1283               	bcf	3,5	;RP0=0, select bank0
  4893  166E  1303               	bcf	3,6	;RP1=0, select bank0
  4894  166F  00D1               	movwf	??_find_best_solution
  4895  1670  0851               	movf	??_find_best_solution,w
  4896  1671  1683               	bsf	3,5	;RP0=1, select bank1
  4897  1672  1303               	bcf	3,6	;RP1=0, select bank1
  4898  1673  00EC               	movwf	_temp_pre_count^(0+128)
  4899                           
  4900                           ;teris_16f886.c: 1152: temp_pre_risk = temp_risk;
  4901  1674  0868               	movf	(_temp_risk+1)^(0+128),w
  4902  1675  1283               	bcf	3,5	;RP0=0, select bank0
  4903  1676  1303               	bcf	3,6	;RP1=0, select bank0
  4904  1677  00EC               	movwf	_temp_pre_risk+1
  4905  1678  1683               	bsf	3,5	;RP0=1, select bank1
  4906  1679  1303               	bcf	3,6	;RP1=0, select bank1
  4907  167A  0867               	movf	_temp_risk^(0+128),w
  4908  167B  1283               	bcf	3,5	;RP0=0, select bank0
  4909  167C  1303               	bcf	3,6	;RP1=0, select bank0
  4910  167D  00EB               	movwf	_temp_pre_risk
  4911                           
  4912                           ;teris_16f886.c: 1153: temp_pre_high = temp_high;
  4913  167E  1683               	bsf	3,5	;RP0=1, select bank1
  4914  167F  1303               	bcf	3,6	;RP1=0, select bank1
  4915  1680  086A               	movf	_temp_high^(0+128),w
  4916  1681  1283               	bcf	3,5	;RP0=0, select bank0
  4917  1682  1303               	bcf	3,6	;RP1=0, select bank0
  4918  1683  00D1               	movwf	??_find_best_solution
  4919  1684  0851               	movf	??_find_best_solution,w
  4920  1685  1683               	bsf	3,5	;RP0=1, select bank1
  4921  1686  1303               	bcf	3,6	;RP1=0, select bank1
  4922  1687  00EE               	movwf	_temp_pre_high^(0+128)
  4923                           
  4924                           ;teris_16f886.c: 1154: temp_pre_hole = temp_hole;
  4925  1688  086B               	movf	_temp_hole^(0+128),w
  4926  1689  1283               	bcf	3,5	;RP0=0, select bank0
  4927  168A  1303               	bcf	3,6	;RP1=0, select bank0
  4928  168B  00D1               	movwf	??_find_best_solution
  4929  168C  0851               	movf	??_find_best_solution,w
  4930  168D  1683               	bsf	3,5	;RP0=1, select bank1
  4931  168E  1303               	bcf	3,6	;RP1=0, select bank1
  4932  168F  00EF               	movwf	_temp_pre_hole^(0+128)
  4933                           
  4934                           ;teris_16f886.c: 1155: tem_pre_sub_index = tem_sub_index;
  4935  1690  0865               	movf	find_best_solution@tem_sub_index^(0+128),w
  4936  1691  1283               	bcf	3,5	;RP0=0, select bank0
  4937  1692  1303               	bcf	3,6	;RP1=0, select bank0
  4938  1693  00D1               	movwf	??_find_best_solution
  4939  1694  0851               	movf	??_find_best_solution,w
  4940  1695  1683               	bsf	3,5	;RP0=1, select bank3
  4941  1696  1703               	bsf	3,6	;RP1=1, select bank3
  4942  1697  00D6               	movwf	_tem_pre_sub_index^(0+384)
  4943                           
  4944                           ;teris_16f886.c: 1156: temp_pre_x = temp_x;
  4945  1698  1683               	bsf	3,5	;RP0=1, select bank1
  4946  1699  1303               	bcf	3,6	;RP1=0, select bank1
  4947  169A  0866               	movf	find_best_solution@temp_x^(0+128),w
  4948  169B  1283               	bcf	3,5	;RP0=0, select bank0
  4949  169C  1303               	bcf	3,6	;RP1=0, select bank0
  4950  169D  00D1               	movwf	??_find_best_solution
  4951  169E  0851               	movf	??_find_best_solution,w
  4952  169F  00ED               	movwf	_temp_pre_x
  4953  16A0                     l470:	
  4954                           
  4955                           ;teris_16f886.c: 1157: }
  4956                           ;teris_16f886.c: 1158: }
  4957                           ;teris_16f886.c: 1159: }
  4958                           ;teris_16f886.c: 1160: }
  4959                           ;teris_16f886.c: 1161: }
  4960                           ;teris_16f886.c: 1167: debug_line(1, "Loop");
  4961  16A0  30A0               	movlw	low (STR_78| (0+32768))
  4962  16A1  00F3               	movwf	debug_line@str
  4963  16A2  308D               	movlw	high (STR_78| (0+32768))
  4964  16A3  00F4               	movwf	debug_line@str+1
  4965  16A4  3001               	movlw	1
  4966  16A5  160A  158A  20DB  160A  118A  	fcall	_debug_line
  4967                           
  4968                           ;teris_16f886.c: 1168: debug_int1(1, "sub_index = %d", tem_pre_sub_index);
  4969  16AA  3069               	movlw	low ((STR_14+12)| (0+32768))
  4970  16AB  1283               	bcf	3,5	;RP0=0, select bank0
  4971  16AC  1303               	bcf	3,6	;RP1=0, select bank0
  4972  16AD  00BF               	movwf	debug_int1@f
  4973  16AE  308A               	movlw	high ((STR_14+12)| (0+32768))
  4974  16AF  00C0               	movwf	debug_int1@f+1
  4975  16B0  1683               	bsf	3,5	;RP0=1, select bank3
  4976  16B1  1703               	bsf	3,6	;RP1=1, select bank3
  4977  16B2  0856               	movf	_tem_pre_sub_index^(0+384),w
  4978  16B3  1283               	bcf	3,5	;RP0=0, select bank0
  4979  16B4  1303               	bcf	3,6	;RP1=0, select bank0
  4980  16B5  00C1               	movwf	debug_int1@i
  4981  16B6  01C2               	clrf	debug_int1@i+1
  4982  16B7  1BC1               	btfsc	debug_int1@i,7
  4983  16B8  03C2               	decf	debug_int1@i+1,f
  4984  16B9  3001               	movlw	1
  4985  16BA  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  4986                           
  4987                           ;teris_16f886.c: 1169: debug_int1(1, "temp_pre_x = %d", temp_pre_x);
  4988  16BF  3090               	movlw	low (STR_80| (0+32768))
  4989  16C0  1283               	bcf	3,5	;RP0=0, select bank0
  4990  16C1  1303               	bcf	3,6	;RP1=0, select bank0
  4991  16C2  00BF               	movwf	debug_int1@f
  4992  16C3  308C               	movlw	high (STR_80| (0+32768))
  4993  16C4  00C0               	movwf	debug_int1@f+1
  4994  16C5  086D               	movf	_temp_pre_x,w
  4995  16C6  00C1               	movwf	debug_int1@i
  4996  16C7  01C2               	clrf	debug_int1@i+1
  4997  16C8  1BC1               	btfsc	debug_int1@i,7
  4998  16C9  03C2               	decf	debug_int1@i+1,f
  4999  16CA  3001               	movlw	1
  5000  16CB  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  5001                           
  5002                           ;teris_16f886.c: 1170: debug_int1(1, "temp_pre_count = %d", temp_pre_count);
  5003  16D0  307E               	movlw	low (STR_81| (0+32768))
  5004  16D1  1283               	bcf	3,5	;RP0=0, select bank0
  5005  16D2  1303               	bcf	3,6	;RP1=0, select bank0
  5006  16D3  00BF               	movwf	debug_int1@f
  5007  16D4  308B               	movlw	high (STR_81| (0+32768))
  5008  16D5  00C0               	movwf	debug_int1@f+1
  5009  16D6  1683               	bsf	3,5	;RP0=1, select bank1
  5010  16D7  1303               	bcf	3,6	;RP1=0, select bank1
  5011  16D8  086C               	movf	_temp_pre_count^(0+128),w
  5012  16D9  1283               	bcf	3,5	;RP0=0, select bank0
  5013  16DA  1303               	bcf	3,6	;RP1=0, select bank0
  5014  16DB  00D1               	movwf	??_find_best_solution
  5015  16DC  01D2               	clrf	??_find_best_solution+1
  5016  16DD  0851               	movf	??_find_best_solution,w
  5017  16DE  00C1               	movwf	debug_int1@i
  5018  16DF  0852               	movf	??_find_best_solution+1,w
  5019  16E0  00C2               	movwf	debug_int1@i+1
  5020  16E1  3001               	movlw	1
  5021  16E2  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  5022                           
  5023                           ;teris_16f886.c: 1171: debug_int1(1, "temp_pre_risk = %d", temp_pre_risk);
  5024  16E7  3004               	movlw	low (STR_82| (0+32768))
  5025  16E8  1283               	bcf	3,5	;RP0=0, select bank0
  5026  16E9  1303               	bcf	3,6	;RP1=0, select bank0
  5027  16EA  00BF               	movwf	debug_int1@f
  5028  16EB  308C               	movlw	high (STR_82| (0+32768))
  5029  16EC  00C0               	movwf	debug_int1@f+1
  5030  16ED  086C               	movf	_temp_pre_risk+1,w
  5031  16EE  00C2               	movwf	debug_int1@i+1
  5032  16EF  086B               	movf	_temp_pre_risk,w
  5033  16F0  00C1               	movwf	debug_int1@i
  5034  16F1  3001               	movlw	1
  5035  16F2  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  5036                           
  5037                           ;teris_16f886.c: 1172: debug_int1(1, "temp_pre_high = %d", temp_pre_high);
  5038  16F7  30F1               	movlw	low (STR_83| (0+32768))
  5039  16F8  1283               	bcf	3,5	;RP0=0, select bank0
  5040  16F9  1303               	bcf	3,6	;RP1=0, select bank0
  5041  16FA  00BF               	movwf	debug_int1@f
  5042  16FB  308B               	movlw	high (STR_83| (0+32768))
  5043  16FC  00C0               	movwf	debug_int1@f+1
  5044  16FD  1683               	bsf	3,5	;RP0=1, select bank1
  5045  16FE  1303               	bcf	3,6	;RP1=0, select bank1
  5046  16FF  086E               	movf	_temp_pre_high^(0+128),w
  5047  1700  1283               	bcf	3,5	;RP0=0, select bank0
  5048  1701  1303               	bcf	3,6	;RP1=0, select bank0
  5049  1702  00D1               	movwf	??_find_best_solution
  5050  1703  01D2               	clrf	??_find_best_solution+1
  5051  1704  0851               	movf	??_find_best_solution,w
  5052  1705  00C1               	movwf	debug_int1@i
  5053  1706  0852               	movf	??_find_best_solution+1,w
  5054  1707  00C2               	movwf	debug_int1@i+1
  5055  1708  3001               	movlw	1
  5056  1709  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  5057                           
  5058                           ;teris_16f886.c: 1173: debug_int1(1, "temp_hole = %d", temp_hole);
  5059  170E  30AF               	movlw	low (STR_84| (0+32768))
  5060  170F  1283               	bcf	3,5	;RP0=0, select bank0
  5061  1710  1303               	bcf	3,6	;RP1=0, select bank0
  5062  1711  00BF               	movwf	debug_int1@f
  5063  1712  308C               	movlw	high (STR_84| (0+32768))
  5064  1713  00C0               	movwf	debug_int1@f+1
  5065  1714  1683               	bsf	3,5	;RP0=1, select bank1
  5066  1715  1303               	bcf	3,6	;RP1=0, select bank1
  5067  1716  086B               	movf	_temp_hole^(0+128),w
  5068  1717  1283               	bcf	3,5	;RP0=0, select bank0
  5069  1718  1303               	bcf	3,6	;RP1=0, select bank0
  5070  1719  00D1               	movwf	??_find_best_solution
  5071  171A  01D2               	clrf	??_find_best_solution+1
  5072  171B  0851               	movf	??_find_best_solution,w
  5073  171C  00C1               	movwf	debug_int1@i
  5074  171D  0852               	movf	??_find_best_solution+1,w
  5075  171E  00C2               	movwf	debug_int1@i+1
  5076  171F  3001               	movlw	1
  5077  1720  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  5078  1725                     l5595:	
  5079  1725  3001               	movlw	1
  5080  1726  1283               	bcf	3,5	;RP0=0, select bank0
  5081  1727  1303               	bcf	3,6	;RP1=0, select bank0
  5082  1728  00D1               	movwf	??_find_best_solution
  5083  1729  0851               	movf	??_find_best_solution,w
  5084  172A  1683               	bsf	3,5	;RP0=1, select bank1
  5085  172B  1303               	bcf	3,6	;RP1=0, select bank1
  5086  172C  07E6               	addwf	find_best_solution@temp_x^(0+128),f
  5087  172D  2BBD               	goto	l5597
  5088  172E                     l5599:	
  5089  172E  3001               	movlw	1
  5090  172F  00D1               	movwf	??_find_best_solution
  5091  1730  0851               	movf	??_find_best_solution,w
  5092  1731  1683               	bsf	3,5	;RP0=1, select bank1
  5093  1732  1303               	bcf	3,6	;RP1=0, select bank1
  5094  1733  07E5               	addwf	find_best_solution@tem_sub_index^(0+128),f
  5095  1734  2B2E               	goto	l5601
  5096  1735                     l5603:	
  5097                           
  5098                           ;teris_16f886.c: 1175: }
  5099                           ;teris_16f886.c: 1176: }
  5100                           ;teris_16f886.c: 1177: if(res == 1)
  5101  1735  0322               	decf	find_best_solution@res^(0+128),w
  5102  1736  1D03               	btfss	3,2
  5103  1737  2FF4               	goto	l5625
  5104                           
  5105                           ;teris_16f886.c: 1178: {
  5106                           ;teris_16f886.c: 1179: g_char_info[g_char_info_index].cur_index = tem_pre_sub_index;
  5107  1738  1683               	bsf	3,5	;RP0=1, select bank3
  5108  1739  1703               	bsf	3,6	;RP1=1, select bank3
  5109  173A  0856               	movf	_tem_pre_sub_index^(0+384),w
  5110  173B  1283               	bcf	3,5	;RP0=0, select bank0
  5111  173C  1303               	bcf	3,6	;RP1=0, select bank0
  5112  173D  00D1               	movwf	??_find_best_solution
  5113  173E  3003               	movlw	3
  5114  173F  00D2               	movwf	??_find_best_solution+1
  5115  1740  0852               	movf	??_find_best_solution+1,w
  5116  1741  00F0               	movwf	___bmul@multiplicand
  5117  1742  0869               	movf	_g_char_info_index,w
  5118  1743  160A  158A  2081  160A  118A  	fcall	___bmul
  5119  1748  3E01               	addlw	1
  5120  1749  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5121  174A  0084               	movwf	4
  5122  174B  1283               	bcf	3,5	;RP0=0, select bank0
  5123  174C  1303               	bcf	3,6	;RP1=0, select bank0
  5124  174D  0851               	movf	??_find_best_solution,w
  5125  174E  1783               	bsf	3,7	;select IRP bank3
  5126  174F  0080               	movwf	0
  5127                           
  5128                           ;teris_16f886.c: 1180: cur_x = temp_pre_x;
  5129  1750  086D               	movf	_temp_pre_x,w
  5130  1751  00D1               	movwf	??_find_best_solution
  5131  1752  0851               	movf	??_find_best_solution,w
  5132  1753  1683               	bsf	3,5	;RP0=1, select bank1
  5133  1754  1303               	bcf	3,6	;RP1=0, select bank1
  5134  1755  00ED               	movwf	_cur_x^(0+128)
  5135                           
  5136                           ;teris_16f886.c: 1181: printf_debug_cur_MATRIX44(1, "Chosen", cur_x, cur_y);
  5137  1756  3093               	movlw	low (STR_85| (0+32768))
  5138  1757  1283               	bcf	3,5	;RP0=0, select bank0
  5139  1758  1303               	bcf	3,6	;RP1=0, select bank0
  5140  1759  00AC               	movwf	printf_debug_cur_MATRIX44@lable
  5141  175A  308D               	movlw	high (STR_85| (0+32768))
  5142  175B  00AD               	movwf	printf_debug_cur_MATRIX44@lable+1
  5143  175C  1683               	bsf	3,5	;RP0=1, select bank1
  5144  175D  1303               	bcf	3,6	;RP1=0, select bank1
  5145  175E  086D               	movf	_cur_x^(0+128),w
  5146  175F  1283               	bcf	3,5	;RP0=0, select bank0
  5147  1760  1303               	bcf	3,6	;RP1=0, select bank0
  5148  1761  00D1               	movwf	??_find_best_solution
  5149  1762  0851               	movf	??_find_best_solution,w
  5150  1763  00AE               	movwf	printf_debug_cur_MATRIX44@x
  5151  1764  0868               	movf	_cur_y,w
  5152  1765  00D2               	movwf	??_find_best_solution+1
  5153  1766  0852               	movf	??_find_best_solution+1,w
  5154  1767  00AF               	movwf	printf_debug_cur_MATRIX44@y
  5155  1768  3001               	movlw	1
  5156  1769  160A  158A  2718  160A  118A  	fcall	_printf_debug_cur_MATRIX44
  5157                           
  5158                           ;teris_16f886.c: 1187: debug_line(1, "Chosen");
  5159  176E  3093               	movlw	low (STR_85| (0+32768))
  5160  176F  00F3               	movwf	debug_line@str
  5161  1770  308D               	movlw	high (STR_85| (0+32768))
  5162  1771  00F4               	movwf	debug_line@str+1
  5163  1772  3001               	movlw	1
  5164  1773  160A  158A  20DB  160A  118A  	fcall	_debug_line
  5165                           
  5166                           ;teris_16f886.c: 1188: debug_int1(1, "sub_index = %d", tem_pre_sub_index);
  5167  1778  3069               	movlw	low ((STR_14+12)| (0+32768))
  5168  1779  1283               	bcf	3,5	;RP0=0, select bank0
  5169  177A  1303               	bcf	3,6	;RP1=0, select bank0
  5170  177B  00BF               	movwf	debug_int1@f
  5171  177C  308A               	movlw	high ((STR_14+12)| (0+32768))
  5172  177D  00C0               	movwf	debug_int1@f+1
  5173  177E  1683               	bsf	3,5	;RP0=1, select bank3
  5174  177F  1703               	bsf	3,6	;RP1=1, select bank3
  5175  1780  0856               	movf	_tem_pre_sub_index^(0+384),w
  5176  1781  1283               	bcf	3,5	;RP0=0, select bank0
  5177  1782  1303               	bcf	3,6	;RP1=0, select bank0
  5178  1783  00C1               	movwf	debug_int1@i
  5179  1784  01C2               	clrf	debug_int1@i+1
  5180  1785  1BC1               	btfsc	debug_int1@i,7
  5181  1786  03C2               	decf	debug_int1@i+1,f
  5182  1787  3001               	movlw	1
  5183  1788  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  5184                           
  5185                           ;teris_16f886.c: 1189: debug_int1(1, "temp_pre_x = %d", temp_pre_x);
  5186  178D  3090               	movlw	low (STR_80| (0+32768))
  5187  178E  1283               	bcf	3,5	;RP0=0, select bank0
  5188  178F  1303               	bcf	3,6	;RP1=0, select bank0
  5189  1790  00BF               	movwf	debug_int1@f
  5190  1791  308C               	movlw	high (STR_80| (0+32768))
  5191  1792  00C0               	movwf	debug_int1@f+1
  5192  1793  086D               	movf	_temp_pre_x,w
  5193  1794  00C1               	movwf	debug_int1@i
  5194  1795  01C2               	clrf	debug_int1@i+1
  5195  1796  1BC1               	btfsc	debug_int1@i,7
  5196  1797  03C2               	decf	debug_int1@i+1,f
  5197  1798  3001               	movlw	1
  5198  1799  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  5199                           
  5200                           ;teris_16f886.c: 1190: debug_int1(1, "temp_pre_count = %d", temp_pre_count);
  5201  179E  307E               	movlw	low (STR_81| (0+32768))
  5202  179F  1283               	bcf	3,5	;RP0=0, select bank0
  5203  17A0  1303               	bcf	3,6	;RP1=0, select bank0
  5204  17A1  00BF               	movwf	debug_int1@f
  5205  17A2  308B               	movlw	high (STR_81| (0+32768))
  5206  17A3  00C0               	movwf	debug_int1@f+1
  5207  17A4  1683               	bsf	3,5	;RP0=1, select bank1
  5208  17A5  1303               	bcf	3,6	;RP1=0, select bank1
  5209  17A6  086C               	movf	_temp_pre_count^(0+128),w
  5210  17A7  1283               	bcf	3,5	;RP0=0, select bank0
  5211  17A8  1303               	bcf	3,6	;RP1=0, select bank0
  5212  17A9  00D1               	movwf	??_find_best_solution
  5213  17AA  01D2               	clrf	??_find_best_solution+1
  5214  17AB  0851               	movf	??_find_best_solution,w
  5215  17AC  00C1               	movwf	debug_int1@i
  5216  17AD  0852               	movf	??_find_best_solution+1,w
  5217  17AE  00C2               	movwf	debug_int1@i+1
  5218  17AF  3001               	movlw	1
  5219  17B0  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  5220                           
  5221                           ;teris_16f886.c: 1191: debug_int1(1, "temp_pre_risk = %d", temp_pre_risk);
  5222  17B5  3004               	movlw	low (STR_82| (0+32768))
  5223  17B6  1283               	bcf	3,5	;RP0=0, select bank0
  5224  17B7  1303               	bcf	3,6	;RP1=0, select bank0
  5225  17B8  00BF               	movwf	debug_int1@f
  5226  17B9  308C               	movlw	high (STR_82| (0+32768))
  5227  17BA  00C0               	movwf	debug_int1@f+1
  5228  17BB  086C               	movf	_temp_pre_risk+1,w
  5229  17BC  00C2               	movwf	debug_int1@i+1
  5230  17BD  086B               	movf	_temp_pre_risk,w
  5231  17BE  00C1               	movwf	debug_int1@i
  5232  17BF  3001               	movlw	1
  5233  17C0  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  5234                           
  5235                           ;teris_16f886.c: 1192: debug_int1(1, "temp_pre_high = %d", temp_pre_high);
  5236  17C5  30F1               	movlw	low (STR_83| (0+32768))
  5237  17C6  1283               	bcf	3,5	;RP0=0, select bank0
  5238  17C7  1303               	bcf	3,6	;RP1=0, select bank0
  5239  17C8  00BF               	movwf	debug_int1@f
  5240  17C9  308B               	movlw	high (STR_83| (0+32768))
  5241  17CA  00C0               	movwf	debug_int1@f+1
  5242  17CB  1683               	bsf	3,5	;RP0=1, select bank1
  5243  17CC  1303               	bcf	3,6	;RP1=0, select bank1
  5244  17CD  086E               	movf	_temp_pre_high^(0+128),w
  5245  17CE  1283               	bcf	3,5	;RP0=0, select bank0
  5246  17CF  1303               	bcf	3,6	;RP1=0, select bank0
  5247  17D0  00D1               	movwf	??_find_best_solution
  5248  17D1  01D2               	clrf	??_find_best_solution+1
  5249  17D2  0851               	movf	??_find_best_solution,w
  5250  17D3  00C1               	movwf	debug_int1@i
  5251  17D4  0852               	movf	??_find_best_solution+1,w
  5252  17D5  00C2               	movwf	debug_int1@i+1
  5253  17D6  3001               	movlw	1
  5254  17D7  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  5255                           
  5256                           ;teris_16f886.c: 1193: debug_int1(1, "temp_hole = %d", temp_hole);
  5257  17DC  30AF               	movlw	low (STR_84| (0+32768))
  5258  17DD  1283               	bcf	3,5	;RP0=0, select bank0
  5259  17DE  1303               	bcf	3,6	;RP1=0, select bank0
  5260  17DF  00BF               	movwf	debug_int1@f
  5261  17E0  308C               	movlw	high (STR_84| (0+32768))
  5262  17E1  00C0               	movwf	debug_int1@f+1
  5263  17E2  1683               	bsf	3,5	;RP0=1, select bank1
  5264  17E3  1303               	bcf	3,6	;RP1=0, select bank1
  5265  17E4  086B               	movf	_temp_hole^(0+128),w
  5266  17E5  1283               	bcf	3,5	;RP0=0, select bank0
  5267  17E6  1303               	bcf	3,6	;RP1=0, select bank0
  5268  17E7  00D1               	movwf	??_find_best_solution
  5269  17E8  01D2               	clrf	??_find_best_solution+1
  5270  17E9  0851               	movf	??_find_best_solution,w
  5271  17EA  00C1               	movwf	debug_int1@i
  5272  17EB  0852               	movf	??_find_best_solution+1,w
  5273  17EC  00C2               	movwf	debug_int1@i+1
  5274  17ED  3001               	movlw	1
  5275  17EE  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  5276                           
  5277                           ;teris_16f886.c: 1195: }
  5278  17F3  2FFC               	goto	l5627
  5279  17F4                     l5625:	
  5280                           
  5281                           ;teris_16f886.c: 1196: else
  5282                           ;teris_16f886.c: 1197: {
  5283                           ;teris_16f886.c: 1198: debug_line(1, "GAME OVER!!!");
  5284  17F4  3008               	movlw	low (STR_93| (0+32768))
  5285  17F5  00F3               	movwf	debug_line@str
  5286  17F6  308D               	movlw	high (STR_93| (0+32768))
  5287  17F7  00F4               	movwf	debug_line@str+1
  5288  17F8  3001               	movlw	1
  5289  17F9  160A  158A  20DB   	fcall	_debug_line
  5290  17FC                     l5627:	
  5291                           
  5292                           ;teris_16f886.c: 1199: }
  5293                           ;teris_16f886.c: 1200: return res;
  5294  17FC  1683               	bsf	3,5	;RP0=1, select bank1
  5295  17FD  1303               	bcf	3,6	;RP1=0, select bank1
  5296  17FE  0822               	movf	find_best_solution@res^(0+128),w
  5297  17FF  0008               	return
  5298  1800                     __end_of_find_best_solution:	
  5299                           
  5300                           	psect	text5
  5301  1ADD                     __ptext5:	
  5302 ;; *************** function _right_most *****************
  5303 ;; Defined at:
  5304 ;;		line 902 in file "teris_16f886.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;  x               1    wreg     char 
  5307 ;;  matrix44        2   36[BANK0 ] PTR const struct .
  5308 ;;		 -> g_matrix44(384), 
  5309 ;;  matrix88        1   38[BANK0 ] PTR const struct .
  5310 ;;		 -> g_matrix88(64), 
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;  x               1   41[BANK0 ] char 
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  1    wreg      char 
  5315 ;; Registers used:
  5316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5322 ;;      Params:         0       3       0       0       0
  5323 ;;      Locals:         0       1       0       0       0
  5324 ;;      Temps:          0       2       0       0       0
  5325 ;;      Totals:         0       6       0       0       0
  5326 ;;Total ram usage:        6 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:    4
  5329 ;; This function calls:
  5330 ;;		_debug_int1
  5331 ;;		_is_right_boundary
  5332 ;; This function is called by:
  5333 ;;		_find_best_solution
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           
  5338                           ;psect for function _right_most
  5339  1ADD                     _right_most:	
  5340                           
  5341                           ;incstack = 0
  5342                           ; Regs used in _right_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5343                           ;right_most@x stored from wreg
  5344  1ADD  1283               	bcf	3,5	;RP0=0, select bank0
  5345  1ADE  1303               	bcf	3,6	;RP1=0, select bank0
  5346  1ADF  00C9               	movwf	right_most@x
  5347  1AE0                     l396:	
  5348                           ;teris_16f886.c: 904: while(1)
  5349                           
  5350                           
  5351                           ;teris_16f886.c: 905: {
  5352                           ;teris_16f886.c: 906: if(is_right_boundary(x, matrix44, matrix88) == RIGHT_OVER_BOUNDARY
      +                          )
  5353  1AE0  0844               	movf	right_most@matrix44,w
  5354  1AE1  00F6               	movwf	is_right_boundary@matrix44
  5355  1AE2  0845               	movf	right_most@matrix44+1,w
  5356  1AE3  00F7               	movwf	is_right_boundary@matrix44+1
  5357  1AE4  0846               	movf	right_most@matrix88,w
  5358  1AE5  00C7               	movwf	??_right_most
  5359  1AE6  0847               	movf	??_right_most,w
  5360  1AE7  00F8               	movwf	is_right_boundary@matrix88
  5361  1AE8  0849               	movf	right_most@x,w
  5362  1AE9  160A  158A  2650  160A  158A  	fcall	_is_right_boundary
  5363  1AEE  3A03               	xorlw	3
  5364  1AEF  1D03               	skipz
  5365  1AF0  2B0D               	goto	l5257
  5366                           
  5367                           ;teris_16f886.c: 907: {
  5368                           ;teris_16f886.c: 908: debug_int1(0, "right_most = %d", x - 1);
  5369  1AF1  3080               	movlw	low (STR_49| (0+32768))
  5370  1AF2  1283               	bcf	3,5	;RP0=0, select bank0
  5371  1AF3  1303               	bcf	3,6	;RP1=0, select bank0
  5372  1AF4  00BF               	movwf	debug_int1@f
  5373  1AF5  308C               	movlw	high (STR_49| (0+32768))
  5374  1AF6  00C0               	movwf	debug_int1@f+1
  5375  1AF7  0849               	movf	right_most@x,w
  5376  1AF8  00C7               	movwf	??_right_most
  5377  1AF9  01C8               	clrf	??_right_most+1
  5378  1AFA  1BC7               	btfsc	??_right_most,7
  5379  1AFB  03C8               	decf	??_right_most+1,f
  5380  1AFC  0847               	movf	??_right_most,w
  5381  1AFD  3EFF               	addlw	255
  5382  1AFE  00C1               	movwf	debug_int1@i
  5383  1AFF  0848               	movf	??_right_most+1,w
  5384  1B00  1803               	skipnc
  5385  1B01  3E01               	addlw	1
  5386  1B02  3EFF               	addlw	255
  5387  1B03  00C2               	movwf	debug_int1@i+1
  5388  1B04  3000               	movlw	0
  5389  1B05  120A  158A  25AE   	fcall	_debug_int1
  5390                           
  5391                           ;teris_16f886.c: 909: return x - 1;
  5392  1B08  1283               	bcf	3,5	;RP0=0, select bank0
  5393  1B09  1303               	bcf	3,6	;RP1=0, select bank0
  5394  1B0A  0849               	movf	right_most@x,w
  5395  1B0B  3EFF               	addlw	-1
  5396  1B0C  0008               	return
  5397  1B0D                     l5257:	
  5398                           
  5399                           ;teris_16f886.c: 910: }
  5400                           ;teris_16f886.c: 911: x++;
  5401  1B0D  3001               	movlw	1
  5402  1B0E  1283               	bcf	3,5	;RP0=0, select bank0
  5403  1B0F  1303               	bcf	3,6	;RP1=0, select bank0
  5404  1B10  00C7               	movwf	??_right_most
  5405  1B11  0847               	movf	??_right_most,w
  5406  1B12  07C9               	addwf	right_most@x,f
  5407  1B13  2AE0               	goto	l396
  5408  1B14                     __end_of_right_most:	
  5409                           
  5410                           	psect	text6
  5411  1E50                     __ptext6:	
  5412 ;; *************** function _is_right_boundary *****************
  5413 ;; Defined at:
  5414 ;;		line 763 in file "teris_16f886.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;  x               1    wreg     char 
  5417 ;;  matrix44        2    6[COMMON] PTR const struct .
  5418 ;;		 -> g_matrix44(384), 
  5419 ;;  matrix88        1    8[COMMON] PTR const struct .
  5420 ;;		 -> g_matrix88(64), 
  5421 ;; Auto vars:     Size  Location     Type
  5422 ;;  x               1    0[BANK0 ] char 
  5423 ;;  col             1    2[BANK0 ] char 
  5424 ;;  row             1    1[BANK0 ] char 
  5425 ;; Return value:  Size  Location     Type
  5426 ;;                  1    wreg      unsigned char 
  5427 ;; Registers used:
  5428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5429 ;; Tracked objects:
  5430 ;;		On entry : 0/0
  5431 ;;		On exit  : 0/0
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5434 ;;      Params:         3       0       0       0       0
  5435 ;;      Locals:         0       3       0       0       0
  5436 ;;      Temps:          4       0       0       0       0
  5437 ;;      Totals:         7       3       0       0       0
  5438 ;;Total ram usage:       10 bytes
  5439 ;; Hardware stack levels used:    1
  5440 ;; Hardware stack levels required when called:    3
  5441 ;; This function calls:
  5442 ;;		_debug_line
  5443 ;; This function is called by:
  5444 ;;		_right_most
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           
  5449                           ;psect for function _is_right_boundary
  5450  1E50                     _is_right_boundary:	
  5451                           
  5452                           ;incstack = 0
  5453                           ; Regs used in _is_right_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5454                           ;is_right_boundary@x stored from wreg
  5455  1E50  1283               	bcf	3,5	;RP0=0, select bank0
  5456  1E51  1303               	bcf	3,6	;RP1=0, select bank0
  5457  1E52  00A0               	movwf	is_right_boundary@x
  5458                           
  5459                           ;teris_16f886.c: 765: for(int8_t row = 4 - 1; row >= 0; row--)
  5460  1E53  3003               	movlw	3
  5461  1E54  00F9               	movwf	??_is_right_boundary
  5462  1E55  0879               	movf	??_is_right_boundary,w
  5463  1E56  00A1               	movwf	is_right_boundary@row
  5464  1E57  1BA1               	btfsc	is_right_boundary@row,7
  5465  1E58  2EAF               	goto	l5035
  5466  1E59                     l5011:	
  5467                           
  5468                           ;teris_16f886.c: 766: {
  5469                           ;teris_16f886.c: 767: for(int8_t col = 0; col < 4; col++)
  5470  1E59  01A2               	clrf	is_right_boundary@col
  5471  1E5A  0822               	movf	is_right_boundary@col,w
  5472  1E5B  3A80               	xorlw	128
  5473  1E5C  3E7C               	addlw	-132
  5474  1E5D  1803               	btfsc	3,0
  5475  1E5E  2EA9               	goto	l5031
  5476  1E5F                     l5017:	
  5477                           
  5478                           ;teris_16f886.c: 768: {
  5479                           ;teris_16f886.c: 769: if(matrix44->data[row][col] == 1)
  5480  1E5F  0821               	movf	is_right_boundary@row,w
  5481  1E60  00F9               	movwf	??_is_right_boundary
  5482  1E61  01FA               	clrf	??_is_right_boundary+1
  5483  1E62  1003               	clrc
  5484  1E63  0DF9               	rlf	??_is_right_boundary,f
  5485  1E64  0DFA               	rlf	??_is_right_boundary+1,f
  5486  1E65  1003               	clrc
  5487  1E66  0DF9               	rlf	??_is_right_boundary,f
  5488  1E67  0DFA               	rlf	??_is_right_boundary+1,f
  5489  1E68  0879               	movf	??_is_right_boundary,w
  5490  1E69  0776               	addwf	is_right_boundary@matrix44,w
  5491  1E6A  00FB               	movwf	??_is_right_boundary+2
  5492  1E6B  087A               	movf	??_is_right_boundary+1,w
  5493  1E6C  1803               	skipnc
  5494  1E6D  0A7A               	incf	??_is_right_boundary+1,w
  5495  1E6E  0777               	addwf	is_right_boundary@matrix44+1,w
  5496  1E6F  00FC               	movwf	??_is_right_boundary+3
  5497  1E70  0822               	movf	is_right_boundary@col,w
  5498  1E71  077B               	addwf	??_is_right_boundary+2,w
  5499  1E72  0084               	movwf	4
  5500  1E73  087C               	movf	??_is_right_boundary+3,w
  5501  1E74  1803               	skipnc
  5502  1E75  0A7C               	incf	??_is_right_boundary+3,w
  5503  1E76  00FF               	movwf	127
  5504  1E77  120A  158A  2000  160A  158A  	fcall	stringtab
  5505  1E7C  3A01               	xorlw	1
  5506  1E7D  1D03               	skipz
  5507  1E7E  2E9E               	goto	l5027
  5508                           
  5509                           ;teris_16f886.c: 770: {
  5510                           ;teris_16f886.c: 771: if(x + col > 8 - 1)
  5511  1E7F  0820               	movf	is_right_boundary@x,w
  5512  1E80  0722               	addwf	is_right_boundary@col,w
  5513  1E81  00F9               	movwf	??_is_right_boundary
  5514  1E82  01FA               	clrf	??_is_right_boundary+1
  5515  1E83  1803               	skipnc
  5516  1E84  0AFA               	incf	??_is_right_boundary+1,f
  5517  1E85  1BA0               	btfsc	is_right_boundary@x,7
  5518  1E86  03FA               	decf	??_is_right_boundary+1,f
  5519  1E87  1BA2               	btfsc	is_right_boundary@col,7
  5520  1E88  03FA               	decf	??_is_right_boundary+1,f
  5521  1E89  087A               	movf	??_is_right_boundary+1,w
  5522  1E8A  3A80               	xorlw	128
  5523  1E8B  00FF               	movwf	127
  5524  1E8C  3080               	movlw	128
  5525  1E8D  027F               	subwf	127,w
  5526  1E8E  1D03               	skipz
  5527  1E8F  2E92               	goto	u7105
  5528  1E90  3008               	movlw	8
  5529  1E91  0279               	subwf	??_is_right_boundary,w
  5530  1E92                     u7105:	
  5531  1E92  1C03               	skipc
  5532  1E93  2E9E               	goto	l5027
  5533                           
  5534                           ;teris_16f886.c: 772: {
  5535                           ;teris_16f886.c: 773: debug_line(0, "RIGHT_OVER_BOUNDARY");
  5536  1E94  306A               	movlw	low (STR_42| (0+32768))
  5537  1E95  00F3               	movwf	debug_line@str
  5538  1E96  308B               	movlw	high (STR_42| (0+32768))
  5539  1E97  00F4               	movwf	debug_line@str+1
  5540  1E98  3000               	movlw	0
  5541  1E99  160A  158A  20DB   	fcall	_debug_line
  5542                           
  5543                           ;teris_16f886.c: 774: return RIGHT_OVER_BOUNDARY;
  5544  1E9C  3003               	movlw	3
  5545  1E9D  0008               	return
  5546  1E9E                     l5027:	
  5547  1E9E  3001               	movlw	1
  5548  1E9F  00F9               	movwf	??_is_right_boundary
  5549  1EA0  0879               	movf	??_is_right_boundary,w
  5550  1EA1  1283               	bcf	3,5	;RP0=0, select bank0
  5551  1EA2  1303               	bcf	3,6	;RP1=0, select bank0
  5552  1EA3  07A2               	addwf	is_right_boundary@col,f
  5553  1EA4  0822               	movf	is_right_boundary@col,w
  5554  1EA5  3A80               	xorlw	128
  5555  1EA6  3E7C               	addlw	-132
  5556  1EA7  1C03               	skipc
  5557  1EA8  2E5F               	goto	l5017
  5558  1EA9                     l5031:	
  5559  1EA9  30FF               	movlw	255
  5560  1EAA  00F9               	movwf	??_is_right_boundary
  5561  1EAB  0879               	movf	??_is_right_boundary,w
  5562  1EAC  07A1               	addwf	is_right_boundary@row,f
  5563  1EAD  1FA1               	btfss	is_right_boundary@row,7
  5564  1EAE  2E59               	goto	l5011
  5565  1EAF                     l5035:	
  5566                           
  5567                           ;teris_16f886.c: 775: }
  5568                           ;teris_16f886.c: 776: }
  5569                           ;teris_16f886.c: 777: }
  5570                           ;teris_16f886.c: 778: }
  5571                           ;teris_16f886.c: 779: return OK;
  5572  1EAF  3000               	movlw	0
  5573  1EB0  0008               	return
  5574  1EB1                     __end_of_is_right_boundary:	
  5575                           
  5576                           	psect	text7
  5577  1F18                     __ptext7:	
  5578 ;; *************** function _printf_debug_cur_MATRIX44 *****************
  5579 ;; Defined at:
  5580 ;;		line 386 in file "teris_16f886.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  enable          1    wreg     unsigned char 
  5583 ;;  lable           2   12[BANK0 ] PTR const unsigned char 
  5584 ;;		 -> STR_85(7), 
  5585 ;;  x               1   14[BANK0 ] char 
  5586 ;;  y               1   15[BANK0 ] char 
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;  enable          1   25[BANK0 ] unsigned char 
  5589 ;;  matrix          2   26[BANK0 ] PTR struct .
  5590 ;;		 -> g_matrix44(384), 
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      void 
  5593 ;; Registers used:
  5594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5600 ;;      Params:         0       4       0       0       0
  5601 ;;      Locals:         0       3       0       0       0
  5602 ;;      Temps:          0       9       0       0       0
  5603 ;;      Totals:         0      16       0       0       0
  5604 ;;Total ram usage:       16 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:    4
  5607 ;; This function calls:
  5608 ;;		___bmul
  5609 ;;		_debug_line
  5610 ;;		_debug_str
  5611 ;;		_printf_debug_MATRIX44
  5612 ;; This function is called by:
  5613 ;;		_find_best_solution
  5614 ;; This function uses a non-reentrant model
  5615 ;;
  5616                           
  5617                           
  5618                           ;psect for function _printf_debug_cur_MATRIX44
  5619  1F18                     _printf_debug_cur_MATRIX44:	
  5620                           
  5621                           ;incstack = 0
  5622                           ; Regs used in _printf_debug_cur_MATRIX44: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  5623                           ;printf_debug_cur_MATRIX44@enable stored from wreg
  5624  1F18  1283               	bcf	3,5	;RP0=0, select bank0
  5625  1F19  1303               	bcf	3,6	;RP1=0, select bank0
  5626  1F1A  00B9               	movwf	printf_debug_cur_MATRIX44@enable
  5627                           
  5628                           ;teris_16f886.c: 388: if(enable == 1)
  5629  1F1B  0339               	decf	printf_debug_cur_MATRIX44@enable,w
  5630  1F1C  1D03               	btfss	3,2
  5631  1F1D  0008               	return
  5632                           
  5633                           ;teris_16f886.c: 389: {
  5634                           ;teris_16f886.c: 390: if(lable != (0))
  5635  1F1E  082C               	movf	printf_debug_cur_MATRIX44@lable,w
  5636  1F1F  042D               	iorwf	printf_debug_cur_MATRIX44@lable+1,w
  5637  1F20  1903               	btfsc	3,2
  5638  1F21  2F36               	goto	l5045
  5639                           
  5640                           ;teris_16f886.c: 391: {
  5641                           ;teris_16f886.c: 392: debug_str(1, lable);
  5642  1F22  082C               	movf	printf_debug_cur_MATRIX44@lable,w
  5643  1F23  00F3               	movwf	debug_str@str
  5644  1F24  082D               	movf	printf_debug_cur_MATRIX44@lable+1,w
  5645  1F25  00F4               	movwf	debug_str@str+1
  5646  1F26  3001               	movlw	1
  5647  1F27  160A  118A  2000  160A  158A  	fcall	_debug_str
  5648                           
  5649                           ;teris_16f886.c: 393: debug_line(1, ":");
  5650  1F2C  30AA               	movlw	low (STR_5| (0+32768))
  5651  1F2D  00F3               	movwf	debug_line@str
  5652  1F2E  308D               	movlw	high (STR_5| (0+32768))
  5653  1F2F  00F4               	movwf	debug_line@str+1
  5654  1F30  3001               	movlw	1
  5655  1F31  160A  158A  20DB  160A  158A  	fcall	_debug_line
  5656  1F36                     l5045:	
  5657                           
  5658                           ;teris_16f886.c: 394: }
  5659                           ;teris_16f886.c: 395: MATRIX44* matrix = &g_matrix44[g_char_info[g_char_info_index].star
      +                          t_index + g_char_info[g_char_info_index].cur_index];
  5660  1F36  3003               	movlw	3
  5661  1F37  1283               	bcf	3,5	;RP0=0, select bank0
  5662  1F38  1303               	bcf	3,6	;RP1=0, select bank0
  5663  1F39  00B0               	movwf	??_printf_debug_cur_MATRIX44
  5664  1F3A  0830               	movf	??_printf_debug_cur_MATRIX44,w
  5665  1F3B  00F0               	movwf	___bmul@multiplicand
  5666  1F3C  0869               	movf	_g_char_info_index,w
  5667  1F3D  160A  158A  2081  160A  158A  	fcall	___bmul
  5668  1F42  3E01               	addlw	1
  5669  1F43  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5670  1F44  0084               	movwf	4
  5671  1F45  1783               	bsf	3,7	;select IRP bank3
  5672  1F46  0800               	movf	0,w
  5673  1F47  1283               	bcf	3,5	;RP0=0, select bank0
  5674  1F48  1303               	bcf	3,6	;RP1=0, select bank0
  5675  1F49  00B1               	movwf	??_printf_debug_cur_MATRIX44+1
  5676  1F4A  3003               	movlw	3
  5677  1F4B  00B2               	movwf	??_printf_debug_cur_MATRIX44+2
  5678  1F4C  0832               	movf	??_printf_debug_cur_MATRIX44+2,w
  5679  1F4D  00F0               	movwf	___bmul@multiplicand
  5680  1F4E  0869               	movf	_g_char_info_index,w
  5681  1F4F  160A  158A  2081  160A  158A  	fcall	___bmul
  5682  1F54  3EB7               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5683  1F55  0084               	movwf	4
  5684  1F56  1783               	bsf	3,7	;select IRP bank3
  5685  1F57  0800               	movf	0,w
  5686  1F58  1283               	bcf	3,5	;RP0=0, select bank0
  5687  1F59  1303               	bcf	3,6	;RP1=0, select bank0
  5688  1F5A  0731               	addwf	??_printf_debug_cur_MATRIX44+1,w
  5689  1F5B  00B3               	movwf	??_printf_debug_cur_MATRIX44+3
  5690  1F5C  01B4               	clrf	??_printf_debug_cur_MATRIX44+4
  5691  1F5D  0DB4               	rlf	??_printf_debug_cur_MATRIX44+4,f
  5692  1F5E  0EB3               	swapf	??_printf_debug_cur_MATRIX44+3,f
  5693  1F5F  0EB4               	swapf	??_printf_debug_cur_MATRIX44+4,f
  5694  1F60  30F0               	movlw	240
  5695  1F61  05B4               	andwf	??_printf_debug_cur_MATRIX44+4,f
  5696  1F62  0833               	movf	??_printf_debug_cur_MATRIX44+3,w
  5697  1F63  390F               	andlw	15
  5698  1F64  04B4               	iorwf	??_printf_debug_cur_MATRIX44+4,f
  5699  1F65  30F0               	movlw	240
  5700  1F66  05B3               	andwf	??_printf_debug_cur_MATRIX44+3,f
  5701  1F67  3030               	movlw	low (_g_matrix44| (0+32768))
  5702  1F68  00B5               	movwf	??_printf_debug_cur_MATRIX44+5
  5703  1F69  3088               	movlw	high (_g_matrix44| (0+32768))
  5704  1F6A  00B6               	movwf	??_printf_debug_cur_MATRIX44+6
  5705  1F6B  0833               	movf	??_printf_debug_cur_MATRIX44+3,w
  5706  1F6C  0735               	addwf	??_printf_debug_cur_MATRIX44+5,w
  5707  1F6D  00B7               	movwf	??_printf_debug_cur_MATRIX44+7
  5708  1F6E  0834               	movf	??_printf_debug_cur_MATRIX44+4,w
  5709  1F6F  1803               	skipnc
  5710  1F70  0A34               	incf	??_printf_debug_cur_MATRIX44+4,w
  5711  1F71  0736               	addwf	??_printf_debug_cur_MATRIX44+6,w
  5712  1F72  00B8               	movwf	??_printf_debug_cur_MATRIX44+8
  5713  1F73  0837               	movf	??_printf_debug_cur_MATRIX44+7,w
  5714  1F74  00BA               	movwf	printf_debug_cur_MATRIX44@matrix
  5715  1F75  0838               	movf	??_printf_debug_cur_MATRIX44+8,w
  5716  1F76  00BB               	movwf	printf_debug_cur_MATRIX44@matrix+1
  5717                           
  5718                           ;teris_16f886.c: 396: printf_debug_MATRIX44(1, (0), x, y, matrix);
  5719  1F77  3000               	movlw	0
  5720  1F78  00F6               	movwf	printf_debug_MATRIX44@lable
  5721  1F79  00F7               	movwf	printf_debug_MATRIX44@lable+1
  5722  1F7A  082E               	movf	printf_debug_cur_MATRIX44@x,w
  5723  1F7B  00B0               	movwf	??_printf_debug_cur_MATRIX44
  5724  1F7C  0830               	movf	??_printf_debug_cur_MATRIX44,w
  5725  1F7D  00F8               	movwf	printf_debug_MATRIX44@x
  5726  1F7E  082F               	movf	printf_debug_cur_MATRIX44@y,w
  5727  1F7F  00B1               	movwf	??_printf_debug_cur_MATRIX44+1
  5728  1F80  0831               	movf	??_printf_debug_cur_MATRIX44+1,w
  5729  1F81  00F9               	movwf	printf_debug_MATRIX44@y
  5730  1F82  083A               	movf	printf_debug_cur_MATRIX44@matrix,w
  5731  1F83  00FA               	movwf	printf_debug_MATRIX44@matrix
  5732  1F84  083B               	movf	printf_debug_cur_MATRIX44@matrix+1,w
  5733  1F85  00FB               	movwf	printf_debug_MATRIX44@matrix+1
  5734  1F86  3001               	movlw	1
  5735  1F87  120A  158A  26E0   	fcall	_printf_debug_MATRIX44
  5736  1F8A  0008               	return
  5737  1F8B                     __end_of_printf_debug_cur_MATRIX44:	
  5738                           
  5739                           	psect	text8
  5740  0EE0                     __ptext8:	
  5741 ;; *************** function _printf_debug_MATRIX44 *****************
  5742 ;; Defined at:
  5743 ;;		line 356 in file "teris_16f886.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;  enable          1    wreg     unsigned char 
  5746 ;;  lable           2    6[COMMON] PTR const unsigned char 
  5747 ;;		 -> STR_60(15), ROM(8192), 
  5748 ;;  x               1    8[COMMON] char 
  5749 ;;  y               1    9[COMMON] char 
  5750 ;;  matrix          2   10[COMMON] PTR const struct .
  5751 ;;		 -> g_matrix44(384), 
  5752 ;; Auto vars:     Size  Location     Type
  5753 ;;  enable          1    9[BANK0 ] unsigned char 
  5754 ;;  col             1   11[BANK0 ] char 
  5755 ;;  row             1   10[BANK0 ] char 
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      void 
  5758 ;; Registers used:
  5759 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5765 ;;      Params:         6       0       0       0       0
  5766 ;;      Locals:         0       3       0       0       0
  5767 ;;      Temps:          0       9       0       0       0
  5768 ;;      Totals:         6      12       0       0       0
  5769 ;;Total ram usage:       18 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    3
  5772 ;; This function calls:
  5773 ;;		_debug_line
  5774 ;;		_debug_str
  5775 ;; This function is called by:
  5776 ;;		_printf_debug_cur_MATRIX44
  5777 ;;		_find_best_solution
  5778 ;;		_printf_debug_all_MATRIX44
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           
  5783                           ;psect for function _printf_debug_MATRIX44
  5784  0EE0                     _printf_debug_MATRIX44:	
  5785                           
  5786                           ;incstack = 0
  5787                           ; Regs used in _printf_debug_MATRIX44: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  5788                           ;printf_debug_MATRIX44@enable stored from wreg
  5789  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
  5790  0EE1  1303               	bcf	3,6	;RP1=0, select bank0
  5791  0EE2  00A9               	movwf	printf_debug_MATRIX44@enable
  5792                           
  5793                           ;teris_16f886.c: 358: if(enable == 1)
  5794  0EE3  0329               	decf	printf_debug_MATRIX44@enable,w
  5795  0EE4  1D03               	btfss	3,2
  5796  0EE5  0008               	return
  5797                           
  5798                           ;teris_16f886.c: 359: {
  5799                           ;teris_16f886.c: 360: if(lable != (0))
  5800  0EE6  0876               	movf	printf_debug_MATRIX44@lable,w
  5801  0EE7  0477               	iorwf	printf_debug_MATRIX44@lable+1,w
  5802  0EE8  1903               	btfsc	3,2
  5803  0EE9  2EFE               	goto	l178
  5804                           
  5805                           ;teris_16f886.c: 361: {
  5806                           ;teris_16f886.c: 362: debug_str(1, lable);
  5807  0EEA  0876               	movf	printf_debug_MATRIX44@lable,w
  5808  0EEB  00F3               	movwf	debug_str@str
  5809  0EEC  0877               	movf	printf_debug_MATRIX44@lable+1,w
  5810  0EED  00F4               	movwf	debug_str@str+1
  5811  0EEE  3001               	movlw	1
  5812  0EEF  160A  118A  2000  120A  158A  	fcall	_debug_str
  5813                           
  5814                           ;teris_16f886.c: 363: debug_line(1, ":");
  5815  0EF4  30AA               	movlw	low (STR_5| (0+32768))
  5816  0EF5  00F3               	movwf	debug_line@str
  5817  0EF6  308D               	movlw	high (STR_5| (0+32768))
  5818  0EF7  00F4               	movwf	debug_line@str+1
  5819  0EF8  3001               	movlw	1
  5820  0EF9  160A  158A  20DB  120A  158A  	fcall	_debug_line
  5821  0EFE                     l178:	
  5822                           
  5823                           ;teris_16f886.c: 364: }
  5824                           ;teris_16f886.c: 365: debug_line(1, "<<<<<<<<<<<<<<<<<<<<MATRIX44");
  5825  0EFE  3023               	movlw	low (STR_6| (0+32768))
  5826  0EFF  00F3               	movwf	debug_line@str
  5827  0F00  308A               	movlw	high (STR_6| (0+32768))
  5828  0F01  00F4               	movwf	debug_line@str+1
  5829  0F02  3001               	movlw	1
  5830  0F03  160A  158A  20DB  120A  158A  	fcall	_debug_line
  5831                           
  5832                           ;teris_16f886.c: 366: for(int8_t row = 0; row < 8; row++)
  5833  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  5834  0F09  1303               	bcf	3,6	;RP1=0, select bank0
  5835  0F0A  01AA               	clrf	printf_debug_MATRIX44@row
  5836  0F0B  082A               	movf	printf_debug_MATRIX44@row,w
  5837  0F0C  3A80               	xorlw	128
  5838  0F0D  3E78               	addlw	-136
  5839  0F0E  1803               	btfsc	3,0
  5840  0F0F  2FF7               	goto	l4913
  5841  0F10                     l4883:	
  5842                           
  5843                           ;teris_16f886.c: 367: {
  5844                           ;teris_16f886.c: 368: for(int8_t col = 0; col < 8; col++)
  5845  0F10  01AB               	clrf	printf_debug_MATRIX44@col
  5846  0F11  082B               	movf	printf_debug_MATRIX44@col,w
  5847  0F12  3A80               	xorlw	128
  5848  0F13  3E78               	addlw	-136
  5849  0F14  1803               	btfsc	3,0
  5850  0F15  2FE2               	goto	l4907
  5851  0F16                     l4889:	
  5852                           
  5853                           ;teris_16f886.c: 369: {
  5854                           ;teris_16f886.c: 370: if((row - y >= 0) && (row - y < 4)
  5855                           ;teris_16f886.c: 371: && (col - x >= 0) && (col - x < 4)
  5856                           ;teris_16f886.c: 372: && (matrix->data[row - y][col - x] == 1))
  5857  0F16  0879               	movf	printf_debug_MATRIX44@y,w
  5858  0F17  00A0               	movwf	??_printf_debug_MATRIX44
  5859  0F18  01A1               	clrf	??_printf_debug_MATRIX44+1
  5860  0F19  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  5861  0F1A  03A1               	decf	??_printf_debug_MATRIX44+1,f
  5862  0F1B  09A0               	comf	??_printf_debug_MATRIX44,f
  5863  0F1C  09A1               	comf	??_printf_debug_MATRIX44+1,f
  5864  0F1D  0AA0               	incf	??_printf_debug_MATRIX44,f
  5865  0F1E  1903               	skipnz
  5866  0F1F  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  5867  0F20  082A               	movf	printf_debug_MATRIX44@row,w
  5868  0F21  00A2               	movwf	??_printf_debug_MATRIX44+2
  5869  0F22  01A3               	clrf	??_printf_debug_MATRIX44+3
  5870  0F23  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  5871  0F24  03A3               	decf	??_printf_debug_MATRIX44+3,f
  5872  0F25  0820               	movf	??_printf_debug_MATRIX44,w
  5873  0F26  0722               	addwf	??_printf_debug_MATRIX44+2,w
  5874  0F27  00A4               	movwf	??_printf_debug_MATRIX44+4
  5875  0F28  0821               	movf	??_printf_debug_MATRIX44+1,w
  5876  0F29  1803               	skipnc
  5877  0F2A  0A21               	incf	??_printf_debug_MATRIX44+1,w
  5878  0F2B  0723               	addwf	??_printf_debug_MATRIX44+3,w
  5879  0F2C  00A5               	movwf	??_printf_debug_MATRIX44+5
  5880  0F2D  1BA5               	btfsc	??_printf_debug_MATRIX44+5,7
  5881  0F2E  2FCD               	goto	l4901
  5882  0F2F  0879               	movf	printf_debug_MATRIX44@y,w
  5883  0F30  00A0               	movwf	??_printf_debug_MATRIX44
  5884  0F31  01A1               	clrf	??_printf_debug_MATRIX44+1
  5885  0F32  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  5886  0F33  03A1               	decf	??_printf_debug_MATRIX44+1,f
  5887  0F34  09A0               	comf	??_printf_debug_MATRIX44,f
  5888  0F35  09A1               	comf	??_printf_debug_MATRIX44+1,f
  5889  0F36  0AA0               	incf	??_printf_debug_MATRIX44,f
  5890  0F37  1903               	skipnz
  5891  0F38  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  5892  0F39  082A               	movf	printf_debug_MATRIX44@row,w
  5893  0F3A  00A2               	movwf	??_printf_debug_MATRIX44+2
  5894  0F3B  01A3               	clrf	??_printf_debug_MATRIX44+3
  5895  0F3C  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  5896  0F3D  03A3               	decf	??_printf_debug_MATRIX44+3,f
  5897  0F3E  0820               	movf	??_printf_debug_MATRIX44,w
  5898  0F3F  0722               	addwf	??_printf_debug_MATRIX44+2,w
  5899  0F40  00A4               	movwf	??_printf_debug_MATRIX44+4
  5900  0F41  0821               	movf	??_printf_debug_MATRIX44+1,w
  5901  0F42  1803               	skipnc
  5902  0F43  0A21               	incf	??_printf_debug_MATRIX44+1,w
  5903  0F44  0723               	addwf	??_printf_debug_MATRIX44+3,w
  5904  0F45  00A5               	movwf	??_printf_debug_MATRIX44+5
  5905  0F46  0825               	movf	??_printf_debug_MATRIX44+5,w
  5906  0F47  3A80               	xorlw	128
  5907  0F48  00FF               	movwf	127
  5908  0F49  3080               	movlw	128
  5909  0F4A  027F               	subwf	127,w
  5910  0F4B  1D03               	skipz
  5911  0F4C  2F4F               	goto	u6785
  5912  0F4D  3004               	movlw	4
  5913  0F4E  0224               	subwf	??_printf_debug_MATRIX44+4,w
  5914  0F4F                     u6785:	
  5915  0F4F  1803               	skipnc
  5916  0F50  2FCD               	goto	l4901
  5917  0F51  0878               	movf	printf_debug_MATRIX44@x,w
  5918  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  5919  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  5920  0F54  00A0               	movwf	??_printf_debug_MATRIX44
  5921  0F55  01A1               	clrf	??_printf_debug_MATRIX44+1
  5922  0F56  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  5923  0F57  03A1               	decf	??_printf_debug_MATRIX44+1,f
  5924  0F58  09A0               	comf	??_printf_debug_MATRIX44,f
  5925  0F59  09A1               	comf	??_printf_debug_MATRIX44+1,f
  5926  0F5A  0AA0               	incf	??_printf_debug_MATRIX44,f
  5927  0F5B  1903               	skipnz
  5928  0F5C  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  5929  0F5D  082B               	movf	printf_debug_MATRIX44@col,w
  5930  0F5E  00A2               	movwf	??_printf_debug_MATRIX44+2
  5931  0F5F  01A3               	clrf	??_printf_debug_MATRIX44+3
  5932  0F60  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  5933  0F61  03A3               	decf	??_printf_debug_MATRIX44+3,f
  5934  0F62  0820               	movf	??_printf_debug_MATRIX44,w
  5935  0F63  0722               	addwf	??_printf_debug_MATRIX44+2,w
  5936  0F64  00A4               	movwf	??_printf_debug_MATRIX44+4
  5937  0F65  0821               	movf	??_printf_debug_MATRIX44+1,w
  5938  0F66  1803               	skipnc
  5939  0F67  0A21               	incf	??_printf_debug_MATRIX44+1,w
  5940  0F68  0723               	addwf	??_printf_debug_MATRIX44+3,w
  5941  0F69  00A5               	movwf	??_printf_debug_MATRIX44+5
  5942  0F6A  1BA5               	btfsc	??_printf_debug_MATRIX44+5,7
  5943  0F6B  2FCD               	goto	l4901
  5944  0F6C  0878               	movf	printf_debug_MATRIX44@x,w
  5945  0F6D  00A0               	movwf	??_printf_debug_MATRIX44
  5946  0F6E  01A1               	clrf	??_printf_debug_MATRIX44+1
  5947  0F6F  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  5948  0F70  03A1               	decf	??_printf_debug_MATRIX44+1,f
  5949  0F71  09A0               	comf	??_printf_debug_MATRIX44,f
  5950  0F72  09A1               	comf	??_printf_debug_MATRIX44+1,f
  5951  0F73  0AA0               	incf	??_printf_debug_MATRIX44,f
  5952  0F74  1903               	skipnz
  5953  0F75  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  5954  0F76  082B               	movf	printf_debug_MATRIX44@col,w
  5955  0F77  00A2               	movwf	??_printf_debug_MATRIX44+2
  5956  0F78  01A3               	clrf	??_printf_debug_MATRIX44+3
  5957  0F79  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  5958  0F7A  03A3               	decf	??_printf_debug_MATRIX44+3,f
  5959  0F7B  0820               	movf	??_printf_debug_MATRIX44,w
  5960  0F7C  0722               	addwf	??_printf_debug_MATRIX44+2,w
  5961  0F7D  00A4               	movwf	??_printf_debug_MATRIX44+4
  5962  0F7E  0821               	movf	??_printf_debug_MATRIX44+1,w
  5963  0F7F  1803               	skipnc
  5964  0F80  0A21               	incf	??_printf_debug_MATRIX44+1,w
  5965  0F81  0723               	addwf	??_printf_debug_MATRIX44+3,w
  5966  0F82  00A5               	movwf	??_printf_debug_MATRIX44+5
  5967  0F83  0825               	movf	??_printf_debug_MATRIX44+5,w
  5968  0F84  3A80               	xorlw	128
  5969  0F85  00FF               	movwf	127
  5970  0F86  3080               	movlw	128
  5971  0F87  027F               	subwf	127,w
  5972  0F88  1D03               	skipz
  5973  0F89  2F8C               	goto	u6805
  5974  0F8A  3004               	movlw	4
  5975  0F8B  0224               	subwf	??_printf_debug_MATRIX44+4,w
  5976  0F8C                     u6805:	
  5977  0F8C  1803               	skipnc
  5978  0F8D  2FCD               	goto	l4901
  5979  0F8E  0878               	movf	printf_debug_MATRIX44@x,w
  5980  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  5981  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  5982  0F91  00A0               	movwf	??_printf_debug_MATRIX44
  5983  0F92  01A1               	clrf	??_printf_debug_MATRIX44+1
  5984  0F93  1BA0               	btfsc	??_printf_debug_MATRIX44,7
  5985  0F94  03A1               	decf	??_printf_debug_MATRIX44+1,f
  5986  0F95  09A0               	comf	??_printf_debug_MATRIX44,f
  5987  0F96  09A1               	comf	??_printf_debug_MATRIX44+1,f
  5988  0F97  0AA0               	incf	??_printf_debug_MATRIX44,f
  5989  0F98  1903               	skipnz
  5990  0F99  0AA1               	incf	??_printf_debug_MATRIX44+1,f
  5991  0F9A  082B               	movf	printf_debug_MATRIX44@col,w
  5992  0F9B  00A2               	movwf	??_printf_debug_MATRIX44+2
  5993  0F9C  01A3               	clrf	??_printf_debug_MATRIX44+3
  5994  0F9D  1BA2               	btfsc	??_printf_debug_MATRIX44+2,7
  5995  0F9E  03A3               	decf	??_printf_debug_MATRIX44+3,f
  5996  0F9F  0820               	movf	??_printf_debug_MATRIX44,w
  5997  0FA0  0722               	addwf	??_printf_debug_MATRIX44+2,w
  5998  0FA1  00A4               	movwf	??_printf_debug_MATRIX44+4
  5999  0FA2  0821               	movf	??_printf_debug_MATRIX44+1,w
  6000  0FA3  1803               	skipnc
  6001  0FA4  0A21               	incf	??_printf_debug_MATRIX44+1,w
  6002  0FA5  0723               	addwf	??_printf_debug_MATRIX44+3,w
  6003  0FA6  00A5               	movwf	??_printf_debug_MATRIX44+5
  6004  0FA7  0824               	movf	??_printf_debug_MATRIX44+4,w
  6005  0FA8  077A               	addwf	printf_debug_MATRIX44@matrix,w
  6006  0FA9  00A6               	movwf	??_printf_debug_MATRIX44+6
  6007  0FAA  0825               	movf	??_printf_debug_MATRIX44+5,w
  6008  0FAB  1803               	skipnc
  6009  0FAC  0A25               	incf	??_printf_debug_MATRIX44+5,w
  6010  0FAD  077B               	addwf	printf_debug_MATRIX44@matrix+1,w
  6011  0FAE  00A7               	movwf	??_printf_debug_MATRIX44+7
  6012  0FAF  0379               	decf	printf_debug_MATRIX44@y,w
  6013  0FB0  3AFF               	xorlw	255
  6014  0FB1  072A               	addwf	printf_debug_MATRIX44@row,w
  6015  0FB2  00A8               	movwf	??_printf_debug_MATRIX44+8
  6016  0FB3  3001               	movlw	1
  6017  0FB4                     u6815:	
  6018  0FB4  1003               	clrc
  6019  0FB5  0DA8               	rlf	??_printf_debug_MATRIX44+8,f
  6020  0FB6  3EFF               	addlw	-1
  6021  0FB7  1D03               	skipz
  6022  0FB8  2FB4               	goto	u6815
  6023  0FB9  1003               	clrc
  6024  0FBA  0D28               	rlf	??_printf_debug_MATRIX44+8,w
  6025  0FBB  0726               	addwf	??_printf_debug_MATRIX44+6,w
  6026  0FBC  0084               	movwf	4
  6027  0FBD  0827               	movf	??_printf_debug_MATRIX44+7,w
  6028  0FBE  1803               	skipnc
  6029  0FBF  0A27               	incf	??_printf_debug_MATRIX44+7,w
  6030  0FC0  00FF               	movwf	127
  6031  0FC1  120A  158A  2000  120A  158A  	fcall	stringtab
  6032  0FC6  3A01               	xorlw	1
  6033  0FC7  1D03               	skipz
  6034  0FC8  2FCD               	goto	l4901
  6035                           
  6036                           ;teris_16f886.c: 373: {
  6037                           ;teris_16f886.c: 374: debug_str(1, "*");
  6038  0FC9  30A8               	movlw	low (STR_7| (0+32768))
  6039  0FCA  00F3               	movwf	debug_str@str
  6040  0FCB  308D               	movlw	high (STR_7| (0+32768))
  6041  0FCC  2FD0               	goto	L9
  6042  0FCD                     l4901:	
  6043                           ;teris_16f886.c: 375: }
  6044                           
  6045                           
  6046                           ;teris_16f886.c: 376: else
  6047                           ;teris_16f886.c: 377: {
  6048                           ;teris_16f886.c: 378: debug_str(1, "_");
  6049  0FCD  30AC               	movlw	low (STR_8| (0+32768))
  6050  0FCE  00F3               	movwf	debug_str@str
  6051  0FCF  308D               	movlw	high (STR_8| (0+32768))
  6052  0FD0                     L9:	
  6053  0FD0  00F4               	movwf	debug_str@str+1
  6054  0FD1  3001               	movlw	1
  6055  0FD2  160A  118A  2000  120A  158A  	fcall	_debug_str
  6056  0FD7  3001               	movlw	1
  6057  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  6058  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  6059  0FDA  00A0               	movwf	??_printf_debug_MATRIX44
  6060  0FDB  0820               	movf	??_printf_debug_MATRIX44,w
  6061  0FDC  07AB               	addwf	printf_debug_MATRIX44@col,f
  6062  0FDD  082B               	movf	printf_debug_MATRIX44@col,w
  6063  0FDE  3A80               	xorlw	128
  6064  0FDF  3E78               	addlw	-136
  6065  0FE0  1C03               	skipc
  6066  0FE1  2F16               	goto	l4889
  6067  0FE2                     l4907:	
  6068                           
  6069                           ;teris_16f886.c: 379: }
  6070                           ;teris_16f886.c: 380: }
  6071                           ;teris_16f886.c: 381: debug_line(1, "");
  6072  0FE2  30A7               	movlw	low ((STR_1+2)| (0+32768))
  6073  0FE3  00F3               	movwf	debug_line@str
  6074  0FE4  308D               	movlw	high ((STR_1+2)| (0+32768))
  6075  0FE5  00F4               	movwf	debug_line@str+1
  6076  0FE6  3001               	movlw	1
  6077  0FE7  160A  158A  20DB  120A  158A  	fcall	_debug_line
  6078  0FEC  3001               	movlw	1
  6079  0FED  1283               	bcf	3,5	;RP0=0, select bank0
  6080  0FEE  1303               	bcf	3,6	;RP1=0, select bank0
  6081  0FEF  00A0               	movwf	??_printf_debug_MATRIX44
  6082  0FF0  0820               	movf	??_printf_debug_MATRIX44,w
  6083  0FF1  07AA               	addwf	printf_debug_MATRIX44@row,f
  6084  0FF2  082A               	movf	printf_debug_MATRIX44@row,w
  6085  0FF3  3A80               	xorlw	128
  6086  0FF4  3E78               	addlw	-136
  6087  0FF5  1C03               	skipc
  6088  0FF6  2F10               	goto	l4883
  6089  0FF7                     l4913:	
  6090                           
  6091                           ;teris_16f886.c: 382: }
  6092                           ;teris_16f886.c: 383: debug_line(1, ">>>>>>>>>>>>>>>>>>>>");
  6093  0FF7  3003               	movlw	low (STR_10| (0+32768))
  6094  0FF8  00F3               	movwf	debug_line@str
  6095  0FF9  308B               	movlw	high (STR_10| (0+32768))
  6096  0FFA  00F4               	movwf	debug_line@str+1
  6097  0FFB  3001               	movlw	1
  6098  0FFC  160A  158A  20DB   	fcall	_debug_line
  6099  0FFF  0008               	return
  6100  1000                     __end_of_printf_debug_MATRIX44:	
  6101                           
  6102                           	psect	text9
  6103  1A1F                     __ptext9:	
  6104 ;; *************** function _printf_debug_Screen *****************
  6105 ;; Defined at:
  6106 ;;		line 588 in file "teris_16f886.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  enable          1    wreg     unsigned char 
  6109 ;;  lable           2    5[BANK0 ] PTR const unsigned char 
  6110 ;;		 -> STR_61(15), 
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;  enable          1   13[COMMON] unsigned char 
  6113 ;; Return value:  Size  Location     Type
  6114 ;;                  1    wreg      void 
  6115 ;; Registers used:
  6116 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6122 ;;      Params:         0       2       0       0       0
  6123 ;;      Locals:         1       0       0       0       0
  6124 ;;      Temps:          0       0       0       0       0
  6125 ;;      Totals:         1       2       0       0       0
  6126 ;;Total ram usage:        3 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    4
  6129 ;; This function calls:
  6130 ;;		_debug_line
  6131 ;;		_debug_str
  6132 ;;		_printf_debug_MATRIX88
  6133 ;; This function is called by:
  6134 ;;		_find_best_solution
  6135 ;; This function uses a non-reentrant model
  6136 ;;
  6137                           
  6138                           
  6139                           ;psect for function _printf_debug_Screen
  6140  1A1F                     _printf_debug_Screen:	
  6141                           
  6142                           ;incstack = 0
  6143                           ; Regs used in _printf_debug_Screen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  6144                           ;printf_debug_Screen@enable stored from wreg
  6145  1A1F  00FD               	movwf	printf_debug_Screen@enable
  6146                           
  6147                           ;teris_16f886.c: 590: if(enable == 1)
  6148  1A20  037D               	decf	printf_debug_Screen@enable,w
  6149  1A21  1D03               	btfss	3,2
  6150  1A22  0008               	return
  6151                           
  6152                           ;teris_16f886.c: 591: {
  6153                           ;teris_16f886.c: 592: if(lable != (0))
  6154  1A23  1283               	bcf	3,5	;RP0=0, select bank0
  6155  1A24  1303               	bcf	3,6	;RP1=0, select bank0
  6156  1A25  0825               	movf	printf_debug_Screen@lable,w
  6157  1A26  0426               	iorwf	printf_debug_Screen@lable+1,w
  6158  1A27  1903               	btfsc	3,2
  6159  1A28  2A3D               	goto	l256
  6160                           
  6161                           ;teris_16f886.c: 593: {
  6162                           ;teris_16f886.c: 594: debug_str(1, lable);
  6163  1A29  0825               	movf	printf_debug_Screen@lable,w
  6164  1A2A  00F3               	movwf	debug_str@str
  6165  1A2B  0826               	movf	printf_debug_Screen@lable+1,w
  6166  1A2C  00F4               	movwf	debug_str@str+1
  6167  1A2D  3001               	movlw	1
  6168  1A2E  160A  118A  2000  160A  158A  	fcall	_debug_str
  6169                           
  6170                           ;teris_16f886.c: 595: debug_line(1, ":");
  6171  1A33  30AA               	movlw	low (STR_5| (0+32768))
  6172  1A34  00F3               	movwf	debug_line@str
  6173  1A35  308D               	movlw	high (STR_5| (0+32768))
  6174  1A36  00F4               	movwf	debug_line@str+1
  6175  1A37  3001               	movlw	1
  6176  1A38  160A  158A  20DB  160A  158A  	fcall	_debug_line
  6177  1A3D                     l256:	
  6178                           
  6179                           ;teris_16f886.c: 596: }
  6180                           ;teris_16f886.c: 597: printf_debug_MATRIX88(1, (0), &g_matrix88);
  6181  1A3D  3000               	movlw	0
  6182  1A3E  00F6               	movwf	printf_debug_MATRIX88@lable
  6183  1A3F  00F7               	movwf	printf_debug_MATRIX88@lable+1
  6184  1A40  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  6185  1A41  00F8               	movwf	printf_debug_MATRIX88@matrix
  6186  1A42  3001               	movlw	1
  6187  1A43  00F9               	movwf	printf_debug_MATRIX88@matrix+1
  6188  1A44  3001               	movlw	1
  6189  1A45  160A  118A  208E   	fcall	_printf_debug_MATRIX88
  6190  1A48  0008               	return
  6191  1A49                     __end_of_printf_debug_Screen:	
  6192                           
  6193                           	psect	text10
  6194  108E                     __ptext10:	
  6195 ;; *************** function _printf_debug_MATRIX88 *****************
  6196 ;; Defined at:
  6197 ;;		line 550 in file "teris_16f886.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  enable          1    wreg     unsigned char 
  6200 ;;  lable           2    6[COMMON] PTR const unsigned char 
  6201 ;;		 -> STR_97(12), STR_62(15), ROM(8192), 
  6202 ;;  matrix          2    8[COMMON] PTR const struct .
  6203 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;  enable          1   10[COMMON] unsigned char 
  6206 ;;  col             1   12[COMMON] unsigned char 
  6207 ;;  row             1   11[COMMON] unsigned char 
  6208 ;; Return value:  Size  Location     Type
  6209 ;;                  1    wreg      void 
  6210 ;; Registers used:
  6211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6212 ;; Tracked objects:
  6213 ;;		On entry : 0/0
  6214 ;;		On exit  : 0/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6217 ;;      Params:         4       0       0       0       0
  6218 ;;      Locals:         3       0       0       0       0
  6219 ;;      Temps:          0       5       0       0       0
  6220 ;;      Totals:         7       5       0       0       0
  6221 ;;Total ram usage:       12 bytes
  6222 ;; Hardware stack levels used:    1
  6223 ;; Hardware stack levels required when called:    3
  6224 ;; This function calls:
  6225 ;;		_debug_line
  6226 ;;		_debug_str
  6227 ;; This function is called by:
  6228 ;;		_printf_debug_Screen
  6229 ;;		_find_best_solution
  6230 ;;		_main
  6231 ;; This function uses a non-reentrant model
  6232 ;;
  6233                           
  6234                           
  6235                           ;psect for function _printf_debug_MATRIX88
  6236  108E                     _printf_debug_MATRIX88:	
  6237                           
  6238                           ;incstack = 0
  6239                           ; Regs used in _printf_debug_MATRIX88: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  6240                           ;printf_debug_MATRIX88@enable stored from wreg
  6241  108E  00FA               	movwf	printf_debug_MATRIX88@enable
  6242                           
  6243                           ;teris_16f886.c: 552: if(enable == 1)
  6244  108F  037A               	decf	printf_debug_MATRIX88@enable,w
  6245  1090  1D03               	btfss	3,2
  6246  1091  0008               	return
  6247                           
  6248                           ;teris_16f886.c: 553: {
  6249                           ;teris_16f886.c: 554: if(lable != (0))
  6250  1092  0876               	movf	printf_debug_MATRIX88@lable,w
  6251  1093  0477               	iorwf	printf_debug_MATRIX88@lable+1,w
  6252  1094  1903               	btfsc	3,2
  6253  1095  28AA               	goto	l239
  6254                           
  6255                           ;teris_16f886.c: 555: {
  6256                           ;teris_16f886.c: 556: debug_str(1, lable);
  6257  1096  0876               	movf	printf_debug_MATRIX88@lable,w
  6258  1097  00F3               	movwf	debug_str@str
  6259  1098  0877               	movf	printf_debug_MATRIX88@lable+1,w
  6260  1099  00F4               	movwf	debug_str@str+1
  6261  109A  3001               	movlw	1
  6262  109B  160A  118A  2000  160A  118A  	fcall	_debug_str
  6263                           
  6264                           ;teris_16f886.c: 557: debug_line(1, ":");
  6265  10A0  30AA               	movlw	low (STR_5| (0+32768))
  6266  10A1  00F3               	movwf	debug_line@str
  6267  10A2  308D               	movlw	high (STR_5| (0+32768))
  6268  10A3  00F4               	movwf	debug_line@str+1
  6269  10A4  3001               	movlw	1
  6270  10A5  160A  158A  20DB  160A  118A  	fcall	_debug_line
  6271  10AA                     l239:	
  6272                           
  6273                           ;teris_16f886.c: 558: }
  6274                           ;teris_16f886.c: 559: debug_line(1, "<<<<<<<<<<<<<<<<<<<<MATRIX88");
  6275  10AA  3040               	movlw	low (STR_22| (0+32768))
  6276  10AB  00F3               	movwf	debug_line@str
  6277  10AC  308A               	movlw	high (STR_22| (0+32768))
  6278  10AD  00F4               	movwf	debug_line@str+1
  6279  10AE  3001               	movlw	1
  6280  10AF  160A  158A  20DB  160A  118A  	fcall	_debug_line
  6281                           
  6282                           ;teris_16f886.c: 560: for(uint8_t row = 0; row < 8; row++)
  6283  10B4  01FB               	clrf	printf_debug_MATRIX88@row
  6284  10B5  3008               	movlw	8
  6285  10B6  027B               	subwf	printf_debug_MATRIX88@row,w
  6286  10B7  1803               	btfsc	3,0
  6287  10B8  290B               	goto	l4949
  6288  10B9                     l4927:	
  6289                           
  6290                           ;teris_16f886.c: 561: {
  6291                           ;teris_16f886.c: 562: for(uint8_t col = 0; col < 8; col++)
  6292  10B9  01FC               	clrf	printf_debug_MATRIX88@col
  6293  10BA  3008               	movlw	8
  6294  10BB  027C               	subwf	printf_debug_MATRIX88@col,w
  6295  10BC  1803               	btfsc	3,0
  6296  10BD  28F7               	goto	l4943
  6297  10BE                     l4933:	
  6298                           
  6299                           ;teris_16f886.c: 563: {
  6300                           ;teris_16f886.c: 564: if(matrix->data[row][col] == 1)
  6301  10BE  087B               	movf	printf_debug_MATRIX88@row,w
  6302  10BF  1283               	bcf	3,5	;RP0=0, select bank0
  6303  10C0  1303               	bcf	3,6	;RP1=0, select bank0
  6304  10C1  00A0               	movwf	??_printf_debug_MATRIX88
  6305  10C2  3002               	movlw	2
  6306  10C3                     u6895:	
  6307  10C3  1003               	clrc
  6308  10C4  0DA0               	rlf	??_printf_debug_MATRIX88,f
  6309  10C5  3EFF               	addlw	-1
  6310  10C6  1D03               	skipz
  6311  10C7  28C3               	goto	u6895
  6312  10C8  1003               	clrc
  6313  10C9  0D20               	rlf	??_printf_debug_MATRIX88,w
  6314  10CA  0778               	addwf	printf_debug_MATRIX88@matrix,w
  6315  10CB  00A1               	movwf	??_printf_debug_MATRIX88+1
  6316  10CC  0879               	movf	printf_debug_MATRIX88@matrix+1,w
  6317  10CD  1803               	skipnc
  6318  10CE  3E01               	addlw	1
  6319  10CF  00A2               	movwf	??_printf_debug_MATRIX88+2
  6320  10D0  087C               	movf	printf_debug_MATRIX88@col,w
  6321  10D1  0721               	addwf	??_printf_debug_MATRIX88+1,w
  6322  10D2  00A3               	movwf	??_printf_debug_MATRIX88+3
  6323  10D3  0822               	movf	??_printf_debug_MATRIX88+2,w
  6324  10D4  1803               	skipnc
  6325  10D5  3E01               	addlw	1
  6326  10D6  00A4               	movwf	??_printf_debug_MATRIX88+4
  6327  10D7  0823               	movf	??_printf_debug_MATRIX88+3,w
  6328  10D8  0084               	movwf	4
  6329  10D9  1783               	bsf	3,7
  6330  10DA  1C24               	btfss	??_printf_debug_MATRIX88+4,0
  6331  10DB  1383               	bcf	3,7
  6332  10DC  0300               	decf	0,w
  6333  10DD  1D03               	btfss	3,2
  6334  10DE  28E3               	goto	l4937
  6335                           
  6336                           ;teris_16f886.c: 565: {
  6337                           ;teris_16f886.c: 566: debug_str(1, "*");
  6338  10DF  30A8               	movlw	low (STR_7| (0+32768))
  6339  10E0  00F3               	movwf	debug_str@str
  6340  10E1  308D               	movlw	high (STR_7| (0+32768))
  6341  10E2  28E6               	goto	L10
  6342  10E3                     l4937:	
  6343                           ;teris_16f886.c: 567: }
  6344                           
  6345                           
  6346                           ;teris_16f886.c: 568: else
  6347                           ;teris_16f886.c: 569: {
  6348                           ;teris_16f886.c: 570: debug_str(1, "_");
  6349  10E3  30AC               	movlw	low (STR_8| (0+32768))
  6350  10E4  00F3               	movwf	debug_str@str
  6351  10E5  308D               	movlw	high (STR_8| (0+32768))
  6352  10E6                     L10:	
  6353  10E6  00F4               	movwf	debug_str@str+1
  6354  10E7  3001               	movlw	1
  6355  10E8  160A  118A  2000  160A  118A  	fcall	_debug_str
  6356  10ED  3001               	movlw	1
  6357  10EE  1283               	bcf	3,5	;RP0=0, select bank0
  6358  10EF  1303               	bcf	3,6	;RP1=0, select bank0
  6359  10F0  00A0               	movwf	??_printf_debug_MATRIX88
  6360  10F1  0820               	movf	??_printf_debug_MATRIX88,w
  6361  10F2  07FC               	addwf	printf_debug_MATRIX88@col,f
  6362  10F3  3008               	movlw	8
  6363  10F4  027C               	subwf	printf_debug_MATRIX88@col,w
  6364  10F5  1C03               	skipc
  6365  10F6  28BE               	goto	l4933
  6366  10F7                     l4943:	
  6367                           
  6368                           ;teris_16f886.c: 571: }
  6369                           ;teris_16f886.c: 572: }
  6370                           ;teris_16f886.c: 573: debug_line(1, "");
  6371  10F7  30A7               	movlw	low ((STR_1+2)| (0+32768))
  6372  10F8  00F3               	movwf	debug_line@str
  6373  10F9  308D               	movlw	high ((STR_1+2)| (0+32768))
  6374  10FA  00F4               	movwf	debug_line@str+1
  6375  10FB  3001               	movlw	1
  6376  10FC  160A  158A  20DB  160A  118A  	fcall	_debug_line
  6377  1101  3001               	movlw	1
  6378  1102  1283               	bcf	3,5	;RP0=0, select bank0
  6379  1103  1303               	bcf	3,6	;RP1=0, select bank0
  6380  1104  00A0               	movwf	??_printf_debug_MATRIX88
  6381  1105  0820               	movf	??_printf_debug_MATRIX88,w
  6382  1106  07FB               	addwf	printf_debug_MATRIX88@row,f
  6383  1107  3008               	movlw	8
  6384  1108  027B               	subwf	printf_debug_MATRIX88@row,w
  6385  1109  1C03               	skipc
  6386  110A  28B9               	goto	l4927
  6387  110B                     l4949:	
  6388                           
  6389                           ;teris_16f886.c: 574: }
  6390                           ;teris_16f886.c: 575: debug_line(1, ">>>>>>>>>>>>>>>>>>>>");
  6391  110B  3003               	movlw	low (STR_10| (0+32768))
  6392  110C  00F3               	movwf	debug_line@str
  6393  110D  308B               	movlw	high (STR_10| (0+32768))
  6394  110E  00F4               	movwf	debug_line@str+1
  6395  110F  3001               	movlw	1
  6396  1110  160A  158A  20DB   	fcall	_debug_line
  6397  1113  0008               	return
  6398  1114                     __end_of_printf_debug_MATRIX88:	
  6399                           
  6400                           	psect	text11
  6401  1000                     __ptext11:	
  6402 ;; *************** function _debug_str *****************
  6403 ;; Defined at:
  6404 ;;		line 288 in file "teris_16f886.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;  enable          1    wreg     unsigned char 
  6407 ;;  str             2    3[COMMON] PTR const unsigned char 
  6408 ;;		 -> STR_97(12), STR_85(7), STR_62(15), STR_61(15), 
  6409 ;;		 -> STR_60(15), STR_24(2), STR_23(2), STR_18(2), 
  6410 ;;		 -> STR_17(2), STR_8(2), STR_7(2), ROM(8192), 
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;  enable          1    5[COMMON] unsigned char 
  6413 ;; Return value:  Size  Location     Type
  6414 ;;                  1    wreg      void 
  6415 ;; Registers used:
  6416 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6422 ;;      Params:         2       0       0       0       0
  6423 ;;      Locals:         1       0       0       0       0
  6424 ;;      Temps:          0       0       0       0       0
  6425 ;;      Totals:         3       0       0       0       0
  6426 ;;Total ram usage:        3 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    2
  6429 ;; This function calls:
  6430 ;;		_USARTWriteString
  6431 ;; This function is called by:
  6432 ;;		_printf_debug_MATRIX44
  6433 ;;		_printf_debug_cur_MATRIX44
  6434 ;;		_printf_debug_MATRIX88
  6435 ;;		_printf_debug_Screen
  6436 ;;		_printf_debug_MATRIX7219
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           
  6441                           ;psect for function _debug_str
  6442  1000                     _debug_str:	
  6443                           
  6444                           ;incstack = 0
  6445                           ; Regs used in _debug_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6446                           ;debug_str@enable stored from wreg
  6447  1000  00F5               	movwf	debug_str@enable
  6448                           
  6449                           ;teris_16f886.c: 290: if(enable == 1)
  6450  1001  0375               	decf	debug_str@enable,w
  6451  1002  1D03               	btfss	3,2
  6452  1003  0008               	return
  6453                           
  6454                           ;teris_16f886.c: 291: {
  6455                           ;teris_16f886.c: 295: USARTWriteString(str);
  6456  1004  0873               	movf	debug_str@str,w
  6457  1005  00F1               	movwf	USARTWriteString@str
  6458  1006  0874               	movf	debug_str@str+1,w
  6459  1007  00F2               	movwf	USARTWriteString@str+1
  6460  1008  160A  158A  2180   	fcall	_USARTWriteString
  6461  100B  0008               	return
  6462  100C                     __end_of_debug_str:	
  6463                           
  6464                           	psect	text12
  6465  1EB1                     __ptext12:	
  6466 ;; *************** function _merge1 *****************
  6467 ;; Defined at:
  6468 ;;		line 835 in file "teris_16f886.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  x               1    wreg     char 
  6471 ;;  y               1    0[BANK0 ] char 
  6472 ;;  matrix44        2    1[BANK0 ] PTR const struct .
  6473 ;;		 -> g_matrix44(384), 
  6474 ;;  matrix88_in     1    3[BANK0 ] PTR const struct .
  6475 ;;		 -> g_matrix88(64), 
  6476 ;;  matrix88_out    1    4[BANK0 ] PTR struct .
  6477 ;;		 -> find_best_solution@temp_matrix88(64), 
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;  x               1    9[BANK0 ] char 
  6480 ;;  col             1   13[BANK0 ] unsigned char 
  6481 ;;  row             1   12[BANK0 ] unsigned char 
  6482 ;;  len             2   10[BANK0 ] unsigned int 
  6483 ;; Return value:  Size  Location     Type
  6484 ;;                  1    wreg      void 
  6485 ;; Registers used:
  6486 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6487 ;; Tracked objects:
  6488 ;;		On entry : 0/0
  6489 ;;		On exit  : 0/0
  6490 ;;		Unchanged: 0/0
  6491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6492 ;;      Params:         0       5       0       0       0
  6493 ;;      Locals:         0       5       0       0       0
  6494 ;;      Temps:          0       4       0       0       0
  6495 ;;      Totals:         0      14       0       0       0
  6496 ;;Total ram usage:       14 bytes
  6497 ;; Hardware stack levels used:    1
  6498 ;; Hardware stack levels required when called:    1
  6499 ;; This function calls:
  6500 ;;		_memcpy
  6501 ;; This function is called by:
  6502 ;;		_find_best_solution
  6503 ;; This function uses a non-reentrant model
  6504 ;;
  6505                           
  6506                           
  6507                           ;psect for function _merge1
  6508  1EB1                     _merge1:	
  6509                           
  6510                           ;incstack = 0
  6511                           ; Regs used in _merge1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6512                           ;merge1@x stored from wreg
  6513  1EB1  1283               	bcf	3,5	;RP0=0, select bank0
  6514  1EB2  1303               	bcf	3,6	;RP1=0, select bank0
  6515  1EB3  00A9               	movwf	merge1@x
  6516                           
  6517                           ;teris_16f886.c: 840: register size_t len;
  6518                           ;teris_16f886.c: 842: len = sizeof(MATRIX88);
  6519  1EB4  3040               	movlw	64
  6520  1EB5  00AA               	movwf	merge1@len
  6521  1EB6  3000               	movlw	0
  6522  1EB7  00AB               	movwf	merge1@len+1
  6523                           
  6524                           ;teris_16f886.c: 843: memcpy(matrix88_out, matrix88_in, len);
  6525  1EB8  0824               	movf	merge1@matrix88_out,w
  6526  1EB9  00F0               	movwf	memcpy@d1
  6527  1EBA  3000               	movlw	0
  6528  1EBB  00F1               	movwf	memcpy@d1+1
  6529  1EBC  0823               	movf	merge1@matrix88_in,w
  6530  1EBD  00F2               	movwf	memcpy@s1
  6531  1EBE  3001               	movlw	1
  6532  1EBF  00F3               	movwf	memcpy@s1+1
  6533  1EC0  082B               	movf	merge1@len+1,w
  6534  1EC1  00F5               	movwf	memcpy@n+1
  6535  1EC2  082A               	movf	merge1@len,w
  6536  1EC3  00F4               	movwf	memcpy@n
  6537  1EC4  160A  158A  21F5  160A  158A  	fcall	_memcpy
  6538                           
  6539                           ;teris_16f886.c: 845: for(uint8_t row = 0; row < 4; row++)
  6540  1EC9  1283               	bcf	3,5	;RP0=0, select bank0
  6541  1ECA  1303               	bcf	3,6	;RP1=0, select bank0
  6542  1ECB  01AC               	clrf	merge1@row
  6543  1ECC                     L11:	
  6544  1ECC  3004               	movlw	4
  6545  1ECD  022C               	subwf	merge1@row,w
  6546  1ECE  1803               	btfsc	3,0
  6547  1ECF  0008               	return
  6548                           
  6549                           ;teris_16f886.c: 846: {
  6550                           ;teris_16f886.c: 847: for(uint8_t col = 0; col < 4; col++)
  6551  1ED0  01AD               	clrf	merge1@col
  6552  1ED1  3004               	movlw	4
  6553  1ED2  022D               	subwf	merge1@col,w
  6554  1ED3  1803               	btfsc	3,0
  6555  1ED4  2F13               	goto	l5195
  6556  1ED5                     l5187:	
  6557                           
  6558                           ;teris_16f886.c: 848: {
  6559                           ;teris_16f886.c: 849: if(matrix44->data[row][col] == 1)
  6560  1ED5  082C               	movf	merge1@row,w
  6561  1ED6  00A5               	movwf	??_merge1
  6562  1ED7  01A6               	clrf	??_merge1+1
  6563  1ED8  1003               	clrc
  6564  1ED9  0DA5               	rlf	??_merge1,f
  6565  1EDA  0DA6               	rlf	??_merge1+1,f
  6566  1EDB  1003               	clrc
  6567  1EDC  0DA5               	rlf	??_merge1,f
  6568  1EDD  0DA6               	rlf	??_merge1+1,f
  6569  1EDE  0825               	movf	??_merge1,w
  6570  1EDF  0721               	addwf	merge1@matrix44,w
  6571  1EE0  00A7               	movwf	??_merge1+2
  6572  1EE1  0826               	movf	??_merge1+1,w
  6573  1EE2  1803               	skipnc
  6574  1EE3  0A26               	incf	??_merge1+1,w
  6575  1EE4  0722               	addwf	merge1@matrix44+1,w
  6576  1EE5  00A8               	movwf	??_merge1+3
  6577  1EE6  082D               	movf	merge1@col,w
  6578  1EE7  0727               	addwf	??_merge1+2,w
  6579  1EE8  0084               	movwf	4
  6580  1EE9  0828               	movf	??_merge1+3,w
  6581  1EEA  1803               	skipnc
  6582  1EEB  0A28               	incf	??_merge1+3,w
  6583  1EEC  00FF               	movwf	127
  6584  1EED  120A  158A  2000  160A  158A  	fcall	stringtab
  6585  1EF2  3A01               	xorlw	1
  6586  1EF3  1D03               	skipz
  6587  1EF4  2F0B               	goto	l5191
  6588                           
  6589                           ;teris_16f886.c: 850: {
  6590                           ;teris_16f886.c: 851: matrix88_out->data[y + row][x + col] = 1;
  6591  1EF5  082D               	movf	merge1@col,w
  6592  1EF6  0729               	addwf	merge1@x,w
  6593  1EF7  0724               	addwf	merge1@matrix88_out,w
  6594  1EF8  00A5               	movwf	??_merge1
  6595  1EF9  082C               	movf	merge1@row,w
  6596  1EFA  0720               	addwf	merge1@y,w
  6597  1EFB  00A6               	movwf	??_merge1+1
  6598  1EFC  3002               	movlw	2
  6599  1EFD                     u7445:	
  6600  1EFD  1003               	clrc
  6601  1EFE  0DA6               	rlf	??_merge1+1,f
  6602  1EFF  3EFF               	addlw	-1
  6603  1F00  1D03               	skipz
  6604  1F01  2EFD               	goto	u7445
  6605  1F02  1003               	clrc
  6606  1F03  0D26               	rlf	??_merge1+1,w
  6607  1F04  0725               	addwf	??_merge1,w
  6608  1F05  00A7               	movwf	??_merge1+2
  6609  1F06  0827               	movf	??_merge1+2,w
  6610  1F07  0084               	movwf	4
  6611  1F08  1383               	bcf	3,7	;select IRP bank0
  6612  1F09  0180               	clrf	0
  6613  1F0A  0A80               	incf	0,f
  6614  1F0B                     l5191:	
  6615  1F0B  3001               	movlw	1
  6616  1F0C  00A5               	movwf	??_merge1
  6617  1F0D  0825               	movf	??_merge1,w
  6618  1F0E  07AD               	addwf	merge1@col,f
  6619  1F0F  3004               	movlw	4
  6620  1F10  022D               	subwf	merge1@col,w
  6621  1F11  1C03               	skipc
  6622  1F12  2ED5               	goto	l5187
  6623  1F13                     l5195:	
  6624  1F13  3001               	movlw	1
  6625  1F14  00A5               	movwf	??_merge1
  6626  1F15  0825               	movf	??_merge1,w
  6627  1F16  07AC               	addwf	merge1@row,f
  6628  1F17  2ECC               	goto	L11
  6629  1F18                     __end_of_merge1:	
  6630                           
  6631                           	psect	text13
  6632  1AAB                     __ptext13:	
  6633 ;; *************** function _left_most *****************
  6634 ;; Defined at:
  6635 ;;		line 890 in file "teris_16f886.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;  x               1    wreg     char 
  6638 ;;  matrix44        2   36[BANK0 ] PTR const struct .
  6639 ;;		 -> g_matrix44(384), 
  6640 ;;  matrix88        1   38[BANK0 ] PTR const struct .
  6641 ;;		 -> g_matrix88(64), 
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;  x               1   40[BANK0 ] char 
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  1    wreg      char 
  6646 ;; Registers used:
  6647 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6653 ;;      Params:         0       3       0       0       0
  6654 ;;      Locals:         0       1       0       0       0
  6655 ;;      Temps:          0       1       0       0       0
  6656 ;;      Totals:         0       5       0       0       0
  6657 ;;Total ram usage:        5 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    4
  6660 ;; This function calls:
  6661 ;;		_debug_int1
  6662 ;;		_is_left_boundary
  6663 ;; This function is called by:
  6664 ;;		_find_best_solution
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           
  6669                           ;psect for function _left_most
  6670  1AAB                     _left_most:	
  6671                           
  6672                           ;incstack = 0
  6673                           ; Regs used in _left_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6674                           ;left_most@x stored from wreg
  6675  1AAB  1283               	bcf	3,5	;RP0=0, select bank0
  6676  1AAC  1303               	bcf	3,6	;RP1=0, select bank0
  6677  1AAD  00C8               	movwf	left_most@x
  6678  1AAE                     l389:	
  6679                           ;teris_16f886.c: 892: while(1)
  6680                           
  6681                           
  6682                           ;teris_16f886.c: 893: {
  6683                           ;teris_16f886.c: 894: if(is_left_boundary(x, matrix44, matrix88) == LEFT_OVER_BOUNDARY)
  6684  1AAE  0844               	movf	left_most@matrix44,w
  6685  1AAF  00F6               	movwf	is_left_boundary@matrix44
  6686  1AB0  0845               	movf	left_most@matrix44+1,w
  6687  1AB1  00F7               	movwf	is_left_boundary@matrix44+1
  6688  1AB2  0846               	movf	left_most@matrix88,w
  6689  1AB3  00C7               	movwf	??_left_most
  6690  1AB4  0847               	movf	??_left_most,w
  6691  1AB5  00F8               	movwf	is_left_boundary@matrix88
  6692  1AB6  0848               	movf	left_most@x,w
  6693  1AB7  160A  158A  25F1  160A  158A  	fcall	_is_left_boundary
  6694  1ABC  3A02               	xorlw	2
  6695  1ABD  1D03               	skipz
  6696  1ABE  2AD6               	goto	l5247
  6697                           
  6698                           ;teris_16f886.c: 895: {
  6699                           ;teris_16f886.c: 896: debug_int1(0, "left_most = %d", x + 1);
  6700  1ABF  30BE               	movlw	low (STR_48| (0+32768))
  6701  1AC0  1283               	bcf	3,5	;RP0=0, select bank0
  6702  1AC1  1303               	bcf	3,6	;RP1=0, select bank0
  6703  1AC2  00BF               	movwf	debug_int1@f
  6704  1AC3  308C               	movlw	high (STR_48| (0+32768))
  6705  1AC4  00C0               	movwf	debug_int1@f+1
  6706  1AC5  3001               	movlw	1
  6707  1AC6  0748               	addwf	left_most@x,w
  6708  1AC7  00C1               	movwf	debug_int1@i
  6709  1AC8  01C2               	clrf	debug_int1@i+1
  6710  1AC9  1803               	skipnc
  6711  1ACA  0AC2               	incf	debug_int1@i+1,f
  6712  1ACB  1BC8               	btfsc	left_most@x,7
  6713  1ACC  03C2               	decf	debug_int1@i+1,f
  6714  1ACD  3000               	movlw	0
  6715  1ACE  120A  158A  25AE   	fcall	_debug_int1
  6716                           
  6717                           ;teris_16f886.c: 897: return x + 1;
  6718  1AD1  1283               	bcf	3,5	;RP0=0, select bank0
  6719  1AD2  1303               	bcf	3,6	;RP1=0, select bank0
  6720  1AD3  0848               	movf	left_most@x,w
  6721  1AD4  3E01               	addlw	1
  6722  1AD5  0008               	return
  6723  1AD6                     l5247:	
  6724                           
  6725                           ;teris_16f886.c: 898: }
  6726                           ;teris_16f886.c: 899: x--;
  6727  1AD6  30FF               	movlw	255
  6728  1AD7  1283               	bcf	3,5	;RP0=0, select bank0
  6729  1AD8  1303               	bcf	3,6	;RP1=0, select bank0
  6730  1AD9  00C7               	movwf	??_left_most
  6731  1ADA  0847               	movf	??_left_most,w
  6732  1ADB  07C8               	addwf	left_most@x,f
  6733  1ADC  2AAE               	goto	l389
  6734  1ADD                     __end_of_left_most:	
  6735                           
  6736                           	psect	text14
  6737  1DF1                     __ptext14:	
  6738 ;; *************** function _is_left_boundary *****************
  6739 ;; Defined at:
  6740 ;;		line 745 in file "teris_16f886.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;  x               1    wreg     char 
  6743 ;;  matrix44        2    6[COMMON] PTR const struct .
  6744 ;;		 -> g_matrix44(384), 
  6745 ;;  matrix88        1    8[COMMON] PTR const struct .
  6746 ;;		 -> g_matrix88(64), 
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;  x               1    0[BANK0 ] char 
  6749 ;;  col             1    2[BANK0 ] char 
  6750 ;;  row             1    1[BANK0 ] char 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  1    wreg      unsigned char 
  6753 ;; Registers used:
  6754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6760 ;;      Params:         3       0       0       0       0
  6761 ;;      Locals:         0       3       0       0       0
  6762 ;;      Temps:          5       0       0       0       0
  6763 ;;      Totals:         8       3       0       0       0
  6764 ;;Total ram usage:       11 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    3
  6767 ;; This function calls:
  6768 ;;		_debug_line
  6769 ;; This function is called by:
  6770 ;;		_left_most
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           
  6775                           ;psect for function _is_left_boundary
  6776  1DF1                     _is_left_boundary:	
  6777                           
  6778                           ;incstack = 0
  6779                           ; Regs used in _is_left_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6780                           ;is_left_boundary@x stored from wreg
  6781  1DF1  1283               	bcf	3,5	;RP0=0, select bank0
  6782  1DF2  1303               	bcf	3,6	;RP1=0, select bank0
  6783  1DF3  00A0               	movwf	is_left_boundary@x
  6784                           
  6785                           ;teris_16f886.c: 747: for(int8_t row = 4 - 1; row >= 0; row--)
  6786  1DF4  3003               	movlw	3
  6787  1DF5  00F9               	movwf	??_is_left_boundary
  6788  1DF6  0879               	movf	??_is_left_boundary,w
  6789  1DF7  00A1               	movwf	is_left_boundary@row
  6790  1DF8  1BA1               	btfsc	is_left_boundary@row,7
  6791  1DF9  2E4E               	goto	l5001
  6792  1DFA                     l4977:	
  6793                           
  6794                           ;teris_16f886.c: 748: {
  6795                           ;teris_16f886.c: 749: for(int8_t col = 0; col < 4; col++)
  6796  1DFA  01A2               	clrf	is_left_boundary@col
  6797  1DFB  0822               	movf	is_left_boundary@col,w
  6798  1DFC  3A80               	xorlw	128
  6799  1DFD  3E7C               	addlw	-132
  6800  1DFE  1803               	btfsc	3,0
  6801  1DFF  2E48               	goto	l4997
  6802  1E00                     l4983:	
  6803                           
  6804                           ;teris_16f886.c: 750: {
  6805                           ;teris_16f886.c: 751: if(matrix44->data[row][col] == 1)
  6806  1E00  0821               	movf	is_left_boundary@row,w
  6807  1E01  00F9               	movwf	??_is_left_boundary
  6808  1E02  01FA               	clrf	??_is_left_boundary+1
  6809  1E03  1003               	clrc
  6810  1E04  0DF9               	rlf	??_is_left_boundary,f
  6811  1E05  0DFA               	rlf	??_is_left_boundary+1,f
  6812  1E06  1003               	clrc
  6813  1E07  0DF9               	rlf	??_is_left_boundary,f
  6814  1E08  0DFA               	rlf	??_is_left_boundary+1,f
  6815  1E09  0879               	movf	??_is_left_boundary,w
  6816  1E0A  0776               	addwf	is_left_boundary@matrix44,w
  6817  1E0B  00FB               	movwf	??_is_left_boundary+2
  6818  1E0C  087A               	movf	??_is_left_boundary+1,w
  6819  1E0D  1803               	skipnc
  6820  1E0E  0A7A               	incf	??_is_left_boundary+1,w
  6821  1E0F  0777               	addwf	is_left_boundary@matrix44+1,w
  6822  1E10  00FC               	movwf	??_is_left_boundary+3
  6823  1E11  0822               	movf	is_left_boundary@col,w
  6824  1E12  077B               	addwf	??_is_left_boundary+2,w
  6825  1E13  0084               	movwf	4
  6826  1E14  087C               	movf	??_is_left_boundary+3,w
  6827  1E15  1803               	skipnc
  6828  1E16  0A7C               	incf	??_is_left_boundary+3,w
  6829  1E17  00FF               	movwf	127
  6830  1E18  120A  158A  2000  160A  158A  	fcall	stringtab
  6831  1E1D  3A01               	xorlw	1
  6832  1E1E  1D03               	skipz
  6833  1E1F  2E3D               	goto	l4993
  6834                           
  6835                           ;teris_16f886.c: 752: {
  6836                           ;teris_16f886.c: 753: if( x + col < 0)
  6837  1E20  0822               	movf	is_left_boundary@col,w
  6838  1E21  00F9               	movwf	??_is_left_boundary
  6839  1E22  01FA               	clrf	??_is_left_boundary+1
  6840  1E23  1BF9               	btfsc	??_is_left_boundary,7
  6841  1E24  03FA               	decf	??_is_left_boundary+1,f
  6842  1E25  0820               	movf	is_left_boundary@x,w
  6843  1E26  00FB               	movwf	??_is_left_boundary+2
  6844  1E27  01FC               	clrf	??_is_left_boundary+3
  6845  1E28  1BFB               	btfsc	??_is_left_boundary+2,7
  6846  1E29  03FC               	decf	??_is_left_boundary+3,f
  6847  1E2A  0879               	movf	??_is_left_boundary,w
  6848  1E2B  077B               	addwf	??_is_left_boundary+2,w
  6849  1E2C  087C               	movf	??_is_left_boundary+3,w
  6850  1E2D  1803               	skipnc
  6851  1E2E  0A7C               	incf	??_is_left_boundary+3,w
  6852  1E2F  077A               	addwf	??_is_left_boundary+1,w
  6853  1E30  00FD               	movwf	??_is_left_boundary+4
  6854  1E31  1FFD               	btfss	??_is_left_boundary+4,7
  6855  1E32  2E3D               	goto	l4993
  6856                           
  6857                           ;teris_16f886.c: 754: {
  6858                           ;teris_16f886.c: 755: debug_line(0, "LEFT_OVER_BOUNDARY");
  6859  1E33  30DE               	movlw	low (STR_41| (0+32768))
  6860  1E34  00F3               	movwf	debug_line@str
  6861  1E35  308B               	movlw	high (STR_41| (0+32768))
  6862  1E36  00F4               	movwf	debug_line@str+1
  6863  1E37  3000               	movlw	0
  6864  1E38  160A  158A  20DB   	fcall	_debug_line
  6865                           
  6866                           ;teris_16f886.c: 756: return LEFT_OVER_BOUNDARY;
  6867  1E3B  3002               	movlw	2
  6868  1E3C  0008               	return
  6869  1E3D                     l4993:	
  6870  1E3D  3001               	movlw	1
  6871  1E3E  00F9               	movwf	??_is_left_boundary
  6872  1E3F  0879               	movf	??_is_left_boundary,w
  6873  1E40  1283               	bcf	3,5	;RP0=0, select bank0
  6874  1E41  1303               	bcf	3,6	;RP1=0, select bank0
  6875  1E42  07A2               	addwf	is_left_boundary@col,f
  6876  1E43  0822               	movf	is_left_boundary@col,w
  6877  1E44  3A80               	xorlw	128
  6878  1E45  3E7C               	addlw	-132
  6879  1E46  1C03               	skipc
  6880  1E47  2E00               	goto	l4983
  6881  1E48                     l4997:	
  6882  1E48  30FF               	movlw	255
  6883  1E49  00F9               	movwf	??_is_left_boundary
  6884  1E4A  0879               	movf	??_is_left_boundary,w
  6885  1E4B  07A1               	addwf	is_left_boundary@row,f
  6886  1E4C  1FA1               	btfss	is_left_boundary@row,7
  6887  1E4D  2DFA               	goto	l4977
  6888  1E4E                     l5001:	
  6889                           
  6890                           ;teris_16f886.c: 757: }
  6891                           ;teris_16f886.c: 758: }
  6892                           ;teris_16f886.c: 759: }
  6893                           ;teris_16f886.c: 760: }
  6894                           ;teris_16f886.c: 761: return OK;
  6895  1E4E  3000               	movlw	0
  6896  1E4F  0008               	return
  6897  1E50                     __end_of_is_left_boundary:	
  6898                           
  6899                           	psect	text15
  6900  0DD3                     __ptext15:	
  6901 ;; *************** function _is_valid *****************
  6902 ;; Defined at:
  6903 ;;		line 711 in file "teris_16f886.c"
  6904 ;; Parameters:    Size  Location     Type
  6905 ;;  x               1    wreg     char 
  6906 ;;  y               1   38[BANK0 ] char 
  6907 ;;  matrix44        2   39[BANK0 ] PTR const struct .
  6908 ;;		 -> g_matrix44(384), 
  6909 ;;  matrix88        1   41[BANK0 ] PTR const struct .
  6910 ;;		 -> g_matrix88(64), 
  6911 ;; Auto vars:     Size  Location     Type
  6912 ;;  x               1   46[BANK0 ] char 
  6913 ;;  col             1   48[BANK0 ] char 
  6914 ;;  row             1   47[BANK0 ] char 
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  1    wreg      unsigned char 
  6917 ;; Registers used:
  6918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6924 ;;      Params:         0       4       0       0       0
  6925 ;;      Locals:         0       3       0       0       0
  6926 ;;      Temps:          0       4       0       0       0
  6927 ;;      Totals:         0      11       0       0       0
  6928 ;;Total ram usage:       11 bytes
  6929 ;; Hardware stack levels used:    1
  6930 ;; Hardware stack levels required when called:    3
  6931 ;; This function calls:
  6932 ;;		_debug_int2
  6933 ;;		_debug_line
  6934 ;; This function is called by:
  6935 ;;		_find_best_solution
  6936 ;; This function uses a non-reentrant model
  6937 ;;
  6938                           
  6939                           
  6940                           ;psect for function _is_valid
  6941  0DD3                     _is_valid:	
  6942                           
  6943                           ;incstack = 0
  6944                           ; Regs used in _is_valid: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6945                           ;is_valid@x stored from wreg
  6946  0DD3  1283               	bcf	3,5	;RP0=0, select bank0
  6947  0DD4  1303               	bcf	3,6	;RP1=0, select bank0
  6948  0DD5  00CE               	movwf	is_valid@x
  6949                           
  6950                           ;teris_16f886.c: 713: debug_line(0, "==============is_valid============");
  6951  0DD6  30DD               	movlw	low (STR_33| (0+32768))
  6952  0DD7  00F3               	movwf	debug_line@str
  6953  0DD8  3089               	movlw	high (STR_33| (0+32768))
  6954  0DD9  00F4               	movwf	debug_line@str+1
  6955  0DDA  3000               	movlw	0
  6956  0DDB  160A  158A  20DB  120A  158A  	fcall	_debug_line
  6957                           
  6958                           ;teris_16f886.c: 714: for(int8_t row = 4 - 1; row >= 0; row--)
  6959  0DE0  3003               	movlw	3
  6960  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  6961  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  6962  0DE3  00CA               	movwf	??_is_valid
  6963  0DE4  084A               	movf	??_is_valid,w
  6964  0DE5  00CF               	movwf	is_valid@row
  6965  0DE6  1BCF               	btfsc	is_valid@row,7
  6966  0DE7  2ED6               	goto	l5125
  6967  0DE8                     l5083:	
  6968                           
  6969                           ;teris_16f886.c: 715: {
  6970                           ;teris_16f886.c: 716: for(int8_t col = 0; col < 4; col++)
  6971  0DE8  01D0               	clrf	is_valid@col
  6972  0DE9  0850               	movf	is_valid@col,w
  6973  0DEA  3A80               	xorlw	128
  6974  0DEB  3E7C               	addlw	-132
  6975  0DEC  1803               	btfsc	3,0
  6976  0DED  2ED0               	goto	l5121
  6977  0DEE                     l5089:	
  6978                           
  6979                           ;teris_16f886.c: 717: {
  6980                           ;teris_16f886.c: 718: if(matrix44->data[row][col] == 1)
  6981  0DEE  084F               	movf	is_valid@row,w
  6982  0DEF  00CA               	movwf	??_is_valid
  6983  0DF0  01CB               	clrf	??_is_valid+1
  6984  0DF1  1003               	clrc
  6985  0DF2  0DCA               	rlf	??_is_valid,f
  6986  0DF3  0DCB               	rlf	??_is_valid+1,f
  6987  0DF4  1003               	clrc
  6988  0DF5  0DCA               	rlf	??_is_valid,f
  6989  0DF6  0DCB               	rlf	??_is_valid+1,f
  6990  0DF7  084A               	movf	??_is_valid,w
  6991  0DF8  0747               	addwf	is_valid@matrix44,w
  6992  0DF9  00CC               	movwf	??_is_valid+2
  6993  0DFA  084B               	movf	??_is_valid+1,w
  6994  0DFB  1803               	skipnc
  6995  0DFC  0A4B               	incf	??_is_valid+1,w
  6996  0DFD  0748               	addwf	is_valid@matrix44+1,w
  6997  0DFE  00CD               	movwf	??_is_valid+3
  6998  0DFF  0850               	movf	is_valid@col,w
  6999  0E00  074C               	addwf	??_is_valid+2,w
  7000  0E01  0084               	movwf	4
  7001  0E02  084D               	movf	??_is_valid+3,w
  7002  0E03  1803               	skipnc
  7003  0E04  0A4D               	incf	??_is_valid+3,w
  7004  0E05  00FF               	movwf	127
  7005  0E06  120A  158A  2000  120A  158A  	fcall	stringtab
  7006  0E0B  3A01               	xorlw	1
  7007  0E0C  1D03               	skipz
  7008  0E0D  2EC5               	goto	l5117
  7009                           
  7010                           ;teris_16f886.c: 719: {
  7011                           ;teris_16f886.c: 720: if(matrix88->data[y + row][x + col] == 1)
  7012  0E0E  0850               	movf	is_valid@col,w
  7013  0E0F  074E               	addwf	is_valid@x,w
  7014  0E10  0749               	addwf	is_valid@matrix88,w
  7015  0E11  00CA               	movwf	??_is_valid
  7016  0E12  084F               	movf	is_valid@row,w
  7017  0E13  0746               	addwf	is_valid@y,w
  7018  0E14  00CB               	movwf	??_is_valid+1
  7019  0E15  3002               	movlw	2
  7020  0E16                     u7225:	
  7021  0E16  1003               	clrc
  7022  0E17  0DCB               	rlf	??_is_valid+1,f
  7023  0E18  3EFF               	addlw	-1
  7024  0E19  1D03               	skipz
  7025  0E1A  2E16               	goto	u7225
  7026  0E1B  1003               	clrc
  7027  0E1C  0D4B               	rlf	??_is_valid+1,w
  7028  0E1D  074A               	addwf	??_is_valid,w
  7029  0E1E  00CC               	movwf	??_is_valid+2
  7030  0E1F  084C               	movf	??_is_valid+2,w
  7031  0E20  0084               	movwf	4
  7032  0E21  1783               	bsf	3,7	;select IRP bank2
  7033  0E22  0300               	decf	0,w
  7034  0E23  1D03               	btfss	3,2
  7035  0E24  2E45               	goto	l5099
  7036                           
  7037                           ;teris_16f886.c: 721: {
  7038                           ;teris_16f886.c: 722: debug_line(0, "not valid1");
  7039  0E25  302E               	movlw	low (STR_34| (0+32768))
  7040  0E26  00F3               	movwf	debug_line@str
  7041  0E27  308D               	movlw	high (STR_34| (0+32768))
  7042  0E28  00F4               	movwf	debug_line@str+1
  7043  0E29  3000               	movlw	0
  7044  0E2A  160A  158A  20DB  120A  158A  	fcall	_debug_line
  7045                           
  7046                           ;teris_16f886.c: 723: debug_int2(0, "row = %d, col = %d", row, col);
  7047  0E2F  3096               	movlw	low ((STR_30+5)| (0+32768))
  7048  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  7049  0E31  1303               	bcf	3,6	;RP1=0, select bank0
  7050  0E32  00BF               	movwf	debug_int2@f
  7051  0E33  308A               	movlw	high ((STR_30+5)| (0+32768))
  7052  0E34  00C0               	movwf	debug_int2@f+1
  7053  0E35  084F               	movf	is_valid@row,w
  7054  0E36  00C1               	movwf	debug_int2@i1
  7055  0E37  01C2               	clrf	debug_int2@i1+1
  7056  0E38  1BC1               	btfsc	debug_int2@i1,7
  7057  0E39  03C2               	decf	debug_int2@i1+1,f
  7058  0E3A  0850               	movf	is_valid@col,w
  7059  0E3B  00C3               	movwf	debug_int2@i2
  7060  0E3C  01C4               	clrf	debug_int2@i2+1
  7061  0E3D  1BC3               	btfsc	debug_int2@i2,7
  7062  0E3E  03C4               	decf	debug_int2@i2+1,f
  7063  0E3F  3000               	movlw	0
  7064  0E40  160A  158A  21CC   	fcall	_debug_int2
  7065                           
  7066                           ;teris_16f886.c: 724: return 0;
  7067  0E43  3000               	movlw	0
  7068  0E44  0008               	return
  7069  0E45                     l5099:	
  7070                           
  7071                           ;teris_16f886.c: 725: }
  7072                           ;teris_16f886.c: 727: if(( x + col < 0) || (x + col >= 8))
  7073  0E45  1283               	bcf	3,5	;RP0=0, select bank0
  7074  0E46  1303               	bcf	3,6	;RP1=0, select bank0
  7075  0E47  084E               	movf	is_valid@x,w
  7076  0E48  0750               	addwf	is_valid@col,w
  7077  0E49  00CA               	movwf	??_is_valid
  7078  0E4A  01CB               	clrf	??_is_valid+1
  7079  0E4B  1803               	skipnc
  7080  0E4C  0ACB               	incf	??_is_valid+1,f
  7081  0E4D  1BCE               	btfsc	is_valid@x,7
  7082  0E4E  03CB               	decf	??_is_valid+1,f
  7083  0E4F  1BD0               	btfsc	is_valid@col,7
  7084  0E50  03CB               	decf	??_is_valid+1,f
  7085  0E51  1283               	bcf	3,5	;RP0=0, select bank0
  7086  0E52  1303               	bcf	3,6	;RP1=0, select bank0
  7087  0E53  1BCB               	btfsc	??_is_valid+1,7
  7088  0E54  2E6C               	goto	l5103
  7089  0E55  084E               	movf	is_valid@x,w
  7090  0E56  0750               	addwf	is_valid@col,w
  7091  0E57  00CA               	movwf	??_is_valid
  7092  0E58  01CB               	clrf	??_is_valid+1
  7093  0E59  1803               	skipnc
  7094  0E5A  0ACB               	incf	??_is_valid+1,f
  7095  0E5B  1BCE               	btfsc	is_valid@x,7
  7096  0E5C  03CB               	decf	??_is_valid+1,f
  7097  0E5D  1BD0               	btfsc	is_valid@col,7
  7098  0E5E  03CB               	decf	??_is_valid+1,f
  7099  0E5F  1283               	bcf	3,5	;RP0=0, select bank0
  7100  0E60  1303               	bcf	3,6	;RP1=0, select bank0
  7101  0E61  084B               	movf	??_is_valid+1,w
  7102  0E62  3A80               	xorlw	128
  7103  0E63  00FF               	movwf	127
  7104  0E64  3080               	movlw	128
  7105  0E65  027F               	subwf	127,w
  7106  0E66  1D03               	skipz
  7107  0E67  2E6A               	goto	u7275
  7108  0E68  3008               	movlw	8
  7109  0E69  024A               	subwf	??_is_valid,w
  7110  0E6A                     u7275:	
  7111  0E6A  1C03               	skipc
  7112  0E6B  2E8C               	goto	l5109
  7113  0E6C                     l5103:	
  7114                           
  7115                           ;teris_16f886.c: 728: {
  7116                           ;teris_16f886.c: 729: debug_line(0, "not valid2");
  7117  0E6C  3039               	movlw	low (STR_36| (0+32768))
  7118  0E6D  00F3               	movwf	debug_line@str
  7119  0E6E  308D               	movlw	high (STR_36| (0+32768))
  7120  0E6F  00F4               	movwf	debug_line@str+1
  7121  0E70  3000               	movlw	0
  7122  0E71  160A  158A  20DB  120A  158A  	fcall	_debug_line
  7123                           
  7124                           ;teris_16f886.c: 730: debug_int2(0, "row = %d, col = %d", row, col);
  7125  0E76  3096               	movlw	low ((STR_30+5)| (0+32768))
  7126  0E77  1283               	bcf	3,5	;RP0=0, select bank0
  7127  0E78  1303               	bcf	3,6	;RP1=0, select bank0
  7128  0E79  00BF               	movwf	debug_int2@f
  7129  0E7A  308A               	movlw	high ((STR_30+5)| (0+32768))
  7130  0E7B  00C0               	movwf	debug_int2@f+1
  7131  0E7C  084F               	movf	is_valid@row,w
  7132  0E7D  00C1               	movwf	debug_int2@i1
  7133  0E7E  01C2               	clrf	debug_int2@i1+1
  7134  0E7F  1BC1               	btfsc	debug_int2@i1,7
  7135  0E80  03C2               	decf	debug_int2@i1+1,f
  7136  0E81  0850               	movf	is_valid@col,w
  7137  0E82  00C3               	movwf	debug_int2@i2
  7138  0E83  01C4               	clrf	debug_int2@i2+1
  7139  0E84  1BC3               	btfsc	debug_int2@i2,7
  7140  0E85  03C4               	decf	debug_int2@i2+1,f
  7141  0E86  3000               	movlw	0
  7142  0E87  160A  158A  21CC   	fcall	_debug_int2
  7143                           
  7144                           ;teris_16f886.c: 731: return 0;
  7145  0E8A  3000               	movlw	0
  7146  0E8B  0008               	return
  7147  0E8C                     l5109:	
  7148                           
  7149                           ;teris_16f886.c: 732: }
  7150                           ;teris_16f886.c: 733: if((y + row) > (8 - 1))
  7151  0E8C  1283               	bcf	3,5	;RP0=0, select bank0
  7152  0E8D  1303               	bcf	3,6	;RP1=0, select bank0
  7153  0E8E  0846               	movf	is_valid@y,w
  7154  0E8F  074F               	addwf	is_valid@row,w
  7155  0E90  00CA               	movwf	??_is_valid
  7156  0E91  01CB               	clrf	??_is_valid+1
  7157  0E92  1803               	skipnc
  7158  0E93  0ACB               	incf	??_is_valid+1,f
  7159  0E94  1BC6               	btfsc	is_valid@y,7
  7160  0E95  03CB               	decf	??_is_valid+1,f
  7161  0E96  1BCF               	btfsc	is_valid@row,7
  7162  0E97  03CB               	decf	??_is_valid+1,f
  7163  0E98  1283               	bcf	3,5	;RP0=0, select bank0
  7164  0E99  1303               	bcf	3,6	;RP1=0, select bank0
  7165  0E9A  084B               	movf	??_is_valid+1,w
  7166  0E9B  3A80               	xorlw	128
  7167  0E9C  00FF               	movwf	127
  7168  0E9D  3080               	movlw	128
  7169  0E9E  027F               	subwf	127,w
  7170  0E9F  1D03               	skipz
  7171  0EA0  2EA3               	goto	u7295
  7172  0EA1  3008               	movlw	8
  7173  0EA2  024A               	subwf	??_is_valid,w
  7174  0EA3                     u7295:	
  7175  0EA3  1C03               	skipc
  7176  0EA4  2EC5               	goto	l5117
  7177                           
  7178                           ;teris_16f886.c: 734: {
  7179                           ;teris_16f886.c: 735: debug_line(0, "not valid3");
  7180  0EA5  3044               	movlw	low (STR_38| (0+32768))
  7181  0EA6  00F3               	movwf	debug_line@str
  7182  0EA7  308D               	movlw	high (STR_38| (0+32768))
  7183  0EA8  00F4               	movwf	debug_line@str+1
  7184  0EA9  3000               	movlw	0
  7185  0EAA  160A  158A  20DB  120A  158A  	fcall	_debug_line
  7186                           
  7187                           ;teris_16f886.c: 736: debug_int2(0, "row = %d, col = %d", row, col);
  7188  0EAF  3096               	movlw	low ((STR_30+5)| (0+32768))
  7189  0EB0  1283               	bcf	3,5	;RP0=0, select bank0
  7190  0EB1  1303               	bcf	3,6	;RP1=0, select bank0
  7191  0EB2  00BF               	movwf	debug_int2@f
  7192  0EB3  308A               	movlw	high ((STR_30+5)| (0+32768))
  7193  0EB4  00C0               	movwf	debug_int2@f+1
  7194  0EB5  084F               	movf	is_valid@row,w
  7195  0EB6  00C1               	movwf	debug_int2@i1
  7196  0EB7  01C2               	clrf	debug_int2@i1+1
  7197  0EB8  1BC1               	btfsc	debug_int2@i1,7
  7198  0EB9  03C2               	decf	debug_int2@i1+1,f
  7199  0EBA  0850               	movf	is_valid@col,w
  7200  0EBB  00C3               	movwf	debug_int2@i2
  7201  0EBC  01C4               	clrf	debug_int2@i2+1
  7202  0EBD  1BC3               	btfsc	debug_int2@i2,7
  7203  0EBE  03C4               	decf	debug_int2@i2+1,f
  7204  0EBF  3000               	movlw	0
  7205  0EC0  160A  158A  21CC   	fcall	_debug_int2
  7206                           
  7207                           ;teris_16f886.c: 737: return 0;
  7208  0EC3  3000               	movlw	0
  7209  0EC4  0008               	return
  7210  0EC5                     l5117:	
  7211  0EC5  3001               	movlw	1
  7212  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  7213  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  7214  0EC8  00CA               	movwf	??_is_valid
  7215  0EC9  084A               	movf	??_is_valid,w
  7216  0ECA  07D0               	addwf	is_valid@col,f
  7217  0ECB  0850               	movf	is_valid@col,w
  7218  0ECC  3A80               	xorlw	128
  7219  0ECD  3E7C               	addlw	-132
  7220  0ECE  1C03               	skipc
  7221  0ECF  2DEE               	goto	l5089
  7222  0ED0                     l5121:	
  7223  0ED0  30FF               	movlw	255
  7224  0ED1  00CA               	movwf	??_is_valid
  7225  0ED2  084A               	movf	??_is_valid,w
  7226  0ED3  07CF               	addwf	is_valid@row,f
  7227  0ED4  1FCF               	btfss	is_valid@row,7
  7228  0ED5  2DE8               	goto	l5083
  7229  0ED6                     l5125:	
  7230                           
  7231                           ;teris_16f886.c: 738: }
  7232                           ;teris_16f886.c: 739: }
  7233                           ;teris_16f886.c: 740: }
  7234                           ;teris_16f886.c: 741: }
  7235                           ;teris_16f886.c: 742: debug_line(0, "valid");
  7236  0ED6  309A               	movlw	low (STR_40| (0+32768))
  7237  0ED7  00F3               	movwf	debug_line@str
  7238  0ED8  308D               	movlw	high (STR_40| (0+32768))
  7239  0ED9  00F4               	movwf	debug_line@str+1
  7240  0EDA  3000               	movlw	0
  7241  0EDB  160A  158A  20DB   	fcall	_debug_line
  7242                           
  7243                           ;teris_16f886.c: 743: return 1;
  7244  0EDE  3001               	movlw	1
  7245  0EDF  0008               	return
  7246  0EE0                     __end_of_is_valid:	
  7247                           
  7248                           	psect	text16
  7249  0003                     __ptext16:	
  7250 ;; *************** function _get_holes_after_merge *****************
  7251 ;; Defined at:
  7252 ;;		line 943 in file "teris_16f886.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;  matrix          1    wreg     PTR struct .
  7255 ;;		 -> find_best_solution@temp_matrix88(64), 
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;  matrix          1   44[BANK0 ] PTR struct .
  7258 ;;		 -> find_best_solution@temp_matrix88(64), 
  7259 ;;  row             1   47[BANK0 ] char 
  7260 ;;  col             1   46[BANK0 ] char 
  7261 ;;  start           1   45[BANK0 ] char 
  7262 ;;  stop            1   43[BANK0 ] char 
  7263 ;;  num_hole        1   42[BANK0 ] unsigned char 
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  1    wreg      unsigned char 
  7266 ;; Registers used:
  7267 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7273 ;;      Params:         0       0       0       0       0
  7274 ;;      Locals:         0       6       0       0       0
  7275 ;;      Temps:          0       6       0       0       0
  7276 ;;      Totals:         0      12       0       0       0
  7277 ;;Total ram usage:       12 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:    3
  7280 ;; This function calls:
  7281 ;;		_debug_int1
  7282 ;; This function is called by:
  7283 ;;		_find_best_solution
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           
  7288                           ;psect for function _get_holes_after_merge
  7289  0003                     _get_holes_after_merge:	
  7290                           
  7291                           ;incstack = 0
  7292                           ; Regs used in _get_holes_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  7293                           ;get_holes_after_merge@matrix stored from wreg
  7294  0003  1283               	bcf	3,5	;RP0=0, select bank0
  7295  0004  1303               	bcf	3,6	;RP1=0, select bank0
  7296  0005  00CC               	movwf	get_holes_after_merge@matrix
  7297                           
  7298                           ;teris_16f886.c: 945: int8_t start = -1;
  7299  0006  01CD               	clrf	get_holes_after_merge@start
  7300  0007  03CD               	decf	get_holes_after_merge@start,f
  7301                           
  7302                           ;teris_16f886.c: 946: int8_t stop = -1;
  7303  0008  01CB               	clrf	get_holes_after_merge@stop
  7304  0009  03CB               	decf	get_holes_after_merge@stop,f
  7305                           
  7306                           ;teris_16f886.c: 947: uint8_t num_hole = 0;
  7307  000A  01CA               	clrf	get_holes_after_merge@num_hole
  7308                           
  7309                           ;teris_16f886.c: 948: for(int8_t col = 0; col < 8; col++)
  7310  000B  01CE               	clrf	get_holes_after_merge@col
  7311  000C  084E               	movf	get_holes_after_merge@col,w
  7312  000D  3A80               	xorlw	128
  7313  000E  3E78               	addlw	-136
  7314  000F  1803               	btfsc	3,0
  7315  0010  2947               	goto	l5385
  7316  0011                     l5319:	
  7317                           
  7318                           ;teris_16f886.c: 949: {
  7319                           ;teris_16f886.c: 950: start = stop = -1;
  7320  0011  30FF               	movlw	255
  7321  0012  00CB               	movwf	get_holes_after_merge@stop
  7322  0013  00C4               	movwf	??_get_holes_after_merge
  7323  0014  0844               	movf	??_get_holes_after_merge,w
  7324  0015  00CD               	movwf	get_holes_after_merge@start
  7325                           
  7326                           ;teris_16f886.c: 951: for(int8_t row = 0; row < 8; row++)
  7327  0016  01CF               	clrf	get_holes_after_merge@row
  7328  0017  084F               	movf	get_holes_after_merge@row,w
  7329  0018  3A80               	xorlw	128
  7330  0019  3E78               	addlw	-136
  7331  001A  1803               	btfsc	3,0
  7332  001B  28DE               	goto	l420
  7333  001C                     l5327:	
  7334                           
  7335                           ;teris_16f886.c: 952: {
  7336                           ;teris_16f886.c: 953: if(col == 0)
  7337  001C  084E               	movf	get_holes_after_merge@col,w
  7338  001D  1D03               	btfss	3,2
  7339  001E  2841               	goto	l5337
  7340                           
  7341                           ;teris_16f886.c: 954: {
  7342                           ;teris_16f886.c: 955: if((matrix->data[row][col] == 0) && (matrix->data[row][col + 1] ==
      +                           1))
  7343  001F  084F               	movf	get_holes_after_merge@row,w
  7344  0020  00C4               	movwf	??_get_holes_after_merge
  7345  0021  3002               	movlw	2
  7346  0022                     u7735:	
  7347  0022  1003               	clrc
  7348  0023  0DC4               	rlf	??_get_holes_after_merge,f
  7349  0024  3EFF               	addlw	-1
  7350  0025  1D03               	skipz
  7351  0026  2822               	goto	u7735
  7352  0027  1003               	clrc
  7353  0028  0D44               	rlf	??_get_holes_after_merge,w
  7354  0029  074C               	addwf	get_holes_after_merge@matrix,w
  7355  002A  00C5               	movwf	??_get_holes_after_merge+1
  7356  002B  084E               	movf	get_holes_after_merge@col,w
  7357  002C  0745               	addwf	??_get_holes_after_merge+1,w
  7358  002D  00C6               	movwf	??_get_holes_after_merge+2
  7359  002E  0846               	movf	??_get_holes_after_merge+2,w
  7360  002F  0084               	movwf	4
  7361  0030  1383               	bcf	3,7	;select IRP bank0
  7362  0031  0800               	movf	0,w
  7363  0032  1D03               	btfss	3,2
  7364  0033  28AD               	goto	l5357
  7365  0034  084E               	movf	get_holes_after_merge@col,w
  7366  0035  3E01               	addlw	1
  7367  0036  074C               	addwf	get_holes_after_merge@matrix,w
  7368  0037  00C4               	movwf	??_get_holes_after_merge
  7369  0038  084F               	movf	get_holes_after_merge@row,w
  7370  0039  00C5               	movwf	??_get_holes_after_merge+1
  7371  003A  3002               	movlw	2
  7372  003B                     u7755:	
  7373  003B  1003               	clrc
  7374  003C  0DC5               	rlf	??_get_holes_after_merge+1,f
  7375  003D  3EFF               	addlw	-1
  7376  003E  1D03               	skipz
  7377  003F  283B               	goto	u7755
  7378  0040  289D               	goto	L13
  7379  0041                     l5337:	
  7380                           ;teris_16f886.c: 960: }
  7381                           ;teris_16f886.c: 961: }
  7382                           ;teris_16f886.c: 962: }
  7383                           
  7384                           ;teris_16f886.c: 958: {
  7385                           ;teris_16f886.c: 959: start = row;
  7386                           
  7387                           ;teris_16f886.c: 956: {
  7388                           ;teris_16f886.c: 957: if(start == -1)
  7389                           
  7390                           
  7391                           ;teris_16f886.c: 963: else if(col == 8 - 1)
  7392  0041  3007               	movlw	7
  7393  0042  064E               	xorwf	get_holes_after_merge@col,w
  7394  0043  1D03               	btfss	3,2
  7395  0044  2867               	goto	l5347
  7396                           
  7397                           ;teris_16f886.c: 964: {
  7398                           ;teris_16f886.c: 965: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] ==
      +                           1))
  7399  0045  084F               	movf	get_holes_after_merge@row,w
  7400  0046  00C4               	movwf	??_get_holes_after_merge
  7401  0047  3002               	movlw	2
  7402  0048                     u7795:	
  7403  0048  1003               	clrc
  7404  0049  0DC4               	rlf	??_get_holes_after_merge,f
  7405  004A  3EFF               	addlw	-1
  7406  004B  1D03               	skipz
  7407  004C  2848               	goto	u7795
  7408  004D  1003               	clrc
  7409  004E  0D44               	rlf	??_get_holes_after_merge,w
  7410  004F  074C               	addwf	get_holes_after_merge@matrix,w
  7411  0050  00C5               	movwf	??_get_holes_after_merge+1
  7412  0051  084E               	movf	get_holes_after_merge@col,w
  7413  0052  0745               	addwf	??_get_holes_after_merge+1,w
  7414  0053  00C6               	movwf	??_get_holes_after_merge+2
  7415  0054  0846               	movf	??_get_holes_after_merge+2,w
  7416  0055  0084               	movwf	4
  7417  0056  1383               	bcf	3,7	;select IRP bank0
  7418  0057  0800               	movf	0,w
  7419  0058  1D03               	btfss	3,2
  7420  0059  28AD               	goto	l5357
  7421  005A  084E               	movf	get_holes_after_merge@col,w
  7422  005B  3EFF               	addlw	255
  7423  005C  074C               	addwf	get_holes_after_merge@matrix,w
  7424  005D  00C4               	movwf	??_get_holes_after_merge
  7425  005E  084F               	movf	get_holes_after_merge@row,w
  7426  005F  00C5               	movwf	??_get_holes_after_merge+1
  7427  0060  3002               	movlw	2
  7428  0061                     u7815:	
  7429  0061  1003               	clrc
  7430  0062  0DC5               	rlf	??_get_holes_after_merge+1,f
  7431  0063  3EFF               	addlw	-1
  7432  0064  1D03               	skipz
  7433  0065  2861               	goto	u7815
  7434  0066  289D               	goto	L13
  7435  0067                     l5347:	
  7436                           ;teris_16f886.c: 970: }
  7437                           ;teris_16f886.c: 971: }
  7438                           ;teris_16f886.c: 972: }
  7439                           
  7440                           ;teris_16f886.c: 968: {
  7441                           ;teris_16f886.c: 969: start = row;
  7442                           
  7443                           ;teris_16f886.c: 966: {
  7444                           ;teris_16f886.c: 967: if(start == -1)
  7445                           
  7446                           
  7447                           ;teris_16f886.c: 973: else
  7448                           ;teris_16f886.c: 974: {
  7449                           ;teris_16f886.c: 975: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] ==
      +                           1) && (matrix->data[row][col + 1] == 1))
  7450  0067  084F               	movf	get_holes_after_merge@row,w
  7451  0068  00C4               	movwf	??_get_holes_after_merge
  7452  0069  3002               	movlw	2
  7453  006A                     u7845:	
  7454  006A  1003               	clrc
  7455  006B  0DC4               	rlf	??_get_holes_after_merge,f
  7456  006C  3EFF               	addlw	-1
  7457  006D  1D03               	skipz
  7458  006E  286A               	goto	u7845
  7459  006F  1003               	clrc
  7460  0070  0D44               	rlf	??_get_holes_after_merge,w
  7461  0071  074C               	addwf	get_holes_after_merge@matrix,w
  7462  0072  00C5               	movwf	??_get_holes_after_merge+1
  7463  0073  084E               	movf	get_holes_after_merge@col,w
  7464  0074  0745               	addwf	??_get_holes_after_merge+1,w
  7465  0075  00C6               	movwf	??_get_holes_after_merge+2
  7466  0076  0846               	movf	??_get_holes_after_merge+2,w
  7467  0077  0084               	movwf	4
  7468  0078  1383               	bcf	3,7	;select IRP bank0
  7469  0079  0800               	movf	0,w
  7470  007A  1D03               	btfss	3,2
  7471  007B  28AD               	goto	l5357
  7472  007C  084E               	movf	get_holes_after_merge@col,w
  7473  007D  3EFF               	addlw	255
  7474  007E  074C               	addwf	get_holes_after_merge@matrix,w
  7475  007F  00C4               	movwf	??_get_holes_after_merge
  7476  0080  084F               	movf	get_holes_after_merge@row,w
  7477  0081  00C5               	movwf	??_get_holes_after_merge+1
  7478  0082  3002               	movlw	2
  7479  0083                     u7865:	
  7480  0083  1003               	clrc
  7481  0084  0DC5               	rlf	??_get_holes_after_merge+1,f
  7482  0085  3EFF               	addlw	-1
  7483  0086  1D03               	skipz
  7484  0087  2883               	goto	u7865
  7485  0088  1003               	clrc
  7486  0089  0D45               	rlf	??_get_holes_after_merge+1,w
  7487  008A  0744               	addwf	??_get_holes_after_merge,w
  7488  008B  00C6               	movwf	??_get_holes_after_merge+2
  7489  008C  0846               	movf	??_get_holes_after_merge+2,w
  7490  008D  0084               	movwf	4
  7491  008E  0300               	decf	0,w
  7492  008F  1D03               	btfss	3,2
  7493  0090  28AD               	goto	l5357
  7494  0091  084E               	movf	get_holes_after_merge@col,w
  7495  0092  3E01               	addlw	1
  7496  0093  074C               	addwf	get_holes_after_merge@matrix,w
  7497  0094  00C4               	movwf	??_get_holes_after_merge
  7498  0095  084F               	movf	get_holes_after_merge@row,w
  7499  0096  00C5               	movwf	??_get_holes_after_merge+1
  7500  0097  3002               	movlw	2
  7501  0098                     u7885:	
  7502  0098  1003               	clrc
  7503  0099  0DC5               	rlf	??_get_holes_after_merge+1,f
  7504  009A  3EFF               	addlw	-1
  7505  009B  1D03               	skipz
  7506  009C  2898               	goto	u7885
  7507  009D                     L13:	
  7508  009D  1003               	clrc
  7509  009E  0D45               	rlf	??_get_holes_after_merge+1,w
  7510  009F  0744               	addwf	??_get_holes_after_merge,w
  7511  00A0  00C6               	movwf	??_get_holes_after_merge+2
  7512  00A1  0846               	movf	??_get_holes_after_merge+2,w
  7513  00A2  0084               	movwf	4
  7514  00A3  0300               	decf	0,w
  7515  00A4  1D03               	btfss	3,2
  7516  00A5  28AD               	goto	l5357
  7517                           
  7518                           ;teris_16f886.c: 976: {
  7519                           ;teris_16f886.c: 977: if(start == -1)
  7520  00A6  0A4D               	incf	get_holes_after_merge@start,w
  7521  00A7  1D03               	btfss	3,2
  7522  00A8  28AD               	goto	l5357
  7523                           
  7524                           ;teris_16f886.c: 978: {
  7525                           ;teris_16f886.c: 979: start = row;
  7526  00A9  084F               	movf	get_holes_after_merge@row,w
  7527  00AA  00C4               	movwf	??_get_holes_after_merge
  7528  00AB  0844               	movf	??_get_holes_after_merge,w
  7529  00AC  00CD               	movwf	get_holes_after_merge@start
  7530  00AD                     l5357:	
  7531                           
  7532                           ;teris_16f886.c: 980: }
  7533                           ;teris_16f886.c: 981: }
  7534                           ;teris_16f886.c: 982: }
  7535                           ;teris_16f886.c: 983: if(start >= 0)
  7536  00AD  1BCD               	btfsc	get_holes_after_merge@start,7
  7537  00AE  28D5               	goto	l431
  7538                           
  7539                           ;teris_16f886.c: 984: {
  7540                           ;teris_16f886.c: 985: if(row == 8 - 1)
  7541  00AF  3007               	movlw	7
  7542  00B0  064F               	xorwf	get_holes_after_merge@row,w
  7543  00B1  1D03               	btfss	3,2
  7544  00B2  28B8               	goto	l5365
  7545                           
  7546                           ;teris_16f886.c: 986: {
  7547                           ;teris_16f886.c: 987: if(stop == -1)
  7548  00B3  0A4B               	incf	get_holes_after_merge@stop,w
  7549  00B4  1D03               	btfss	3,2
  7550  00B5  28D5               	goto	l431
  7551                           
  7552                           ;teris_16f886.c: 988: {
  7553                           ;teris_16f886.c: 989: stop = 8;
  7554  00B6  3008               	movlw	8
  7555  00B7  28D2               	goto	L12
  7556  00B8                     l5365:	
  7557                           ;teris_16f886.c: 990: }
  7558                           ;teris_16f886.c: 991: }
  7559                           
  7560                           
  7561                           ;teris_16f886.c: 992: else if(matrix->data[row + 1][col] == 1)
  7562  00B8  084F               	movf	get_holes_after_merge@row,w
  7563  00B9  00C4               	movwf	??_get_holes_after_merge
  7564  00BA  3002               	movlw	2
  7565  00BB                     u7945:	
  7566  00BB  1003               	clrc
  7567  00BC  0DC4               	rlf	??_get_holes_after_merge,f
  7568  00BD  3EFF               	addlw	-1
  7569  00BE  1D03               	skipz
  7570  00BF  28BB               	goto	u7945
  7571  00C0  1003               	clrc
  7572  00C1  0D44               	rlf	??_get_holes_after_merge,w
  7573  00C2  3E08               	addlw	8
  7574  00C3  074C               	addwf	get_holes_after_merge@matrix,w
  7575  00C4  00C5               	movwf	??_get_holes_after_merge+1
  7576  00C5  084E               	movf	get_holes_after_merge@col,w
  7577  00C6  0745               	addwf	??_get_holes_after_merge+1,w
  7578  00C7  00C6               	movwf	??_get_holes_after_merge+2
  7579  00C8  0846               	movf	??_get_holes_after_merge+2,w
  7580  00C9  0084               	movwf	4
  7581  00CA  0300               	decf	0,w
  7582  00CB  1D03               	btfss	3,2
  7583  00CC  28D5               	goto	l431
  7584                           
  7585                           ;teris_16f886.c: 993: {
  7586                           ;teris_16f886.c: 994: if(stop == -1)
  7587  00CD  0A4B               	incf	get_holes_after_merge@stop,w
  7588  00CE  1D03               	btfss	3,2
  7589  00CF  28D5               	goto	l431
  7590                           
  7591                           ;teris_16f886.c: 995: {
  7592                           ;teris_16f886.c: 996: stop = row + 1;
  7593  00D0  084F               	movf	get_holes_after_merge@row,w
  7594  00D1  3E01               	addlw	1
  7595  00D2                     L12:	
  7596  00D2  00C4               	movwf	??_get_holes_after_merge
  7597  00D3  0844               	movf	??_get_holes_after_merge,w
  7598  00D4  00CB               	movwf	get_holes_after_merge@stop
  7599  00D5                     l431:	
  7600  00D5  3001               	movlw	1
  7601  00D6  00C4               	movwf	??_get_holes_after_merge
  7602  00D7  0844               	movf	??_get_holes_after_merge,w
  7603  00D8  07CF               	addwf	get_holes_after_merge@row,f
  7604  00D9  084F               	movf	get_holes_after_merge@row,w
  7605  00DA  3A80               	xorlw	128
  7606  00DB  3E78               	addlw	-136
  7607  00DC  1C03               	skipc
  7608  00DD  281C               	goto	l5327
  7609  00DE                     l420:	
  7610                           
  7611                           ;teris_16f886.c: 997: }
  7612                           ;teris_16f886.c: 998: }
  7613                           ;teris_16f886.c: 999: }
  7614                           ;teris_16f886.c: 1001: }
  7615                           ;teris_16f886.c: 1002: if((start >= 0) && (stop >= 0) && (stop - start >= 3))
  7616  00DE  1FCD               	btfss	get_holes_after_merge@start,7
  7617  00DF  1BCB               	btfsc	get_holes_after_merge@stop,7
  7618  00E0  293C               	goto	l5381
  7619  00E1  084D               	movf	get_holes_after_merge@start,w
  7620  00E2  00C4               	movwf	??_get_holes_after_merge
  7621  00E3  01C5               	clrf	??_get_holes_after_merge+1
  7622  00E4  1BC4               	btfsc	??_get_holes_after_merge,7
  7623  00E5  03C5               	decf	??_get_holes_after_merge+1,f
  7624  00E6  09C4               	comf	??_get_holes_after_merge,f
  7625  00E7  09C5               	comf	??_get_holes_after_merge+1,f
  7626  00E8  0AC4               	incf	??_get_holes_after_merge,f
  7627  00E9  1903               	skipnz
  7628  00EA  0AC5               	incf	??_get_holes_after_merge+1,f
  7629  00EB  084B               	movf	get_holes_after_merge@stop,w
  7630  00EC  00C6               	movwf	??_get_holes_after_merge+2
  7631  00ED  01C7               	clrf	??_get_holes_after_merge+3
  7632  00EE  1BC6               	btfsc	??_get_holes_after_merge+2,7
  7633  00EF  03C7               	decf	??_get_holes_after_merge+3,f
  7634  00F0  0844               	movf	??_get_holes_after_merge,w
  7635  00F1  0746               	addwf	??_get_holes_after_merge+2,w
  7636  00F2  00C8               	movwf	??_get_holes_after_merge+4
  7637  00F3  0845               	movf	??_get_holes_after_merge+1,w
  7638  00F4  1803               	skipnc
  7639  00F5  0A45               	incf	??_get_holes_after_merge+1,w
  7640  00F6  0747               	addwf	??_get_holes_after_merge+3,w
  7641  00F7  00C9               	movwf	??_get_holes_after_merge+5
  7642  00F8  0849               	movf	??_get_holes_after_merge+5,w
  7643  00F9  3A80               	xorlw	128
  7644  00FA  00FF               	movwf	127
  7645  00FB  3080               	movlw	128
  7646  00FC  027F               	subwf	127,w
  7647  00FD  1D03               	skipz
  7648  00FE  2901               	goto	u8005
  7649  00FF  3003               	movlw	3
  7650  0100  0248               	subwf	??_get_holes_after_merge+4,w
  7651  0101                     u8005:	
  7652  0101  1C03               	skipc
  7653  0102  293C               	goto	l5381
  7654                           
  7655                           ;teris_16f886.c: 1003: {
  7656                           ;teris_16f886.c: 1004: debug_int1(0, "col = %d", col);
  7657  0103  30A0               	movlw	low ((STR_30+15)| (0+32768))
  7658  0104  1283               	bcf	3,5	;RP0=0, select bank0
  7659  0105  1303               	bcf	3,6	;RP1=0, select bank0
  7660  0106  00BF               	movwf	debug_int1@f
  7661  0107  308A               	movlw	high ((STR_30+15)| (0+32768))
  7662  0108  00C0               	movwf	debug_int1@f+1
  7663  0109  084E               	movf	get_holes_after_merge@col,w
  7664  010A  00C1               	movwf	debug_int1@i
  7665  010B  01C2               	clrf	debug_int1@i+1
  7666  010C  1BC1               	btfsc	debug_int1@i,7
  7667  010D  03C2               	decf	debug_int1@i+1,f
  7668  010E  3000               	movlw	0
  7669  010F  120A  158A  25AE  120A  118A  	fcall	_debug_int1
  7670                           
  7671                           ;teris_16f886.c: 1005: debug_int1(0, "start = %d", start);
  7672  0114  304F               	movlw	low (STR_56| (0+32768))
  7673  0115  1283               	bcf	3,5	;RP0=0, select bank0
  7674  0116  1303               	bcf	3,6	;RP1=0, select bank0
  7675  0117  00BF               	movwf	debug_int1@f
  7676  0118  308D               	movlw	high (STR_56| (0+32768))
  7677  0119  00C0               	movwf	debug_int1@f+1
  7678  011A  084D               	movf	get_holes_after_merge@start,w
  7679  011B  00C1               	movwf	debug_int1@i
  7680  011C  01C2               	clrf	debug_int1@i+1
  7681  011D  1BC1               	btfsc	debug_int1@i,7
  7682  011E  03C2               	decf	debug_int1@i+1,f
  7683  011F  3000               	movlw	0
  7684  0120  120A  158A  25AE  120A  118A  	fcall	_debug_int1
  7685                           
  7686                           ;teris_16f886.c: 1006: debug_int1(0, "stop = %d", stop);
  7687  0125  3078               	movlw	low (STR_57| (0+32768))
  7688  0126  1283               	bcf	3,5	;RP0=0, select bank0
  7689  0127  1303               	bcf	3,6	;RP1=0, select bank0
  7690  0128  00BF               	movwf	debug_int1@f
  7691  0129  308D               	movlw	high (STR_57| (0+32768))
  7692  012A  00C0               	movwf	debug_int1@f+1
  7693  012B  084B               	movf	get_holes_after_merge@stop,w
  7694  012C  00C1               	movwf	debug_int1@i
  7695  012D  01C2               	clrf	debug_int1@i+1
  7696  012E  1BC1               	btfsc	debug_int1@i,7
  7697  012F  03C2               	decf	debug_int1@i+1,f
  7698  0130  3000               	movlw	0
  7699  0131  120A  158A  25AE  120A  118A  	fcall	_debug_int1
  7700                           
  7701                           ;teris_16f886.c: 1007: num_hole++;
  7702  0136  3001               	movlw	1
  7703  0137  1283               	bcf	3,5	;RP0=0, select bank0
  7704  0138  1303               	bcf	3,6	;RP1=0, select bank0
  7705  0139  00C4               	movwf	??_get_holes_after_merge
  7706  013A  0844               	movf	??_get_holes_after_merge,w
  7707  013B  07CA               	addwf	get_holes_after_merge@num_hole,f
  7708  013C                     l5381:	
  7709  013C  3001               	movlw	1
  7710  013D  1283               	bcf	3,5	;RP0=0, select bank0
  7711  013E  1303               	bcf	3,6	;RP1=0, select bank0
  7712  013F  00C4               	movwf	??_get_holes_after_merge
  7713  0140  0844               	movf	??_get_holes_after_merge,w
  7714  0141  07CE               	addwf	get_holes_after_merge@col,f
  7715  0142  084E               	movf	get_holes_after_merge@col,w
  7716  0143  3A80               	xorlw	128
  7717  0144  3E78               	addlw	-136
  7718  0145  1C03               	skipc
  7719  0146  2811               	goto	l5319
  7720  0147                     l5385:	
  7721                           
  7722                           ;teris_16f886.c: 1008: }
  7723                           ;teris_16f886.c: 1009: }
  7724                           ;teris_16f886.c: 1010: debug_int1(1, "num_hole = %d", num_hole);
  7725  0147  30FA               	movlw	low (STR_58| (0+32768))
  7726  0148  00BF               	movwf	debug_int1@f
  7727  0149  308C               	movlw	high (STR_58| (0+32768))
  7728  014A  00C0               	movwf	debug_int1@f+1
  7729  014B  084A               	movf	get_holes_after_merge@num_hole,w
  7730  014C  00C4               	movwf	??_get_holes_after_merge
  7731  014D  01C5               	clrf	??_get_holes_after_merge+1
  7732  014E  0844               	movf	??_get_holes_after_merge,w
  7733  014F  00C1               	movwf	debug_int1@i
  7734  0150  0845               	movf	??_get_holes_after_merge+1,w
  7735  0151  00C2               	movwf	debug_int1@i+1
  7736  0152  3001               	movlw	1
  7737  0153  120A  158A  25AE   	fcall	_debug_int1
  7738                           
  7739                           ;teris_16f886.c: 1011: return num_hole;
  7740  0156  1283               	bcf	3,5	;RP0=0, select bank0
  7741  0157  1303               	bcf	3,6	;RP1=0, select bank0
  7742  0158  084A               	movf	get_holes_after_merge@num_hole,w
  7743  0159  0008               	return
  7744  015A                     __end_of_get_holes_after_merge:	
  7745                           
  7746                           	psect	text17
  7747  1114                     __ptext17:	
  7748 ;; *************** function _get_high_after_merge *****************
  7749 ;; Defined at:
  7750 ;;		line 926 in file "teris_16f886.c"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;  y               1    wreg     char 
  7753 ;;  matrix          2   36[BANK0 ] PTR struct .
  7754 ;;		 -> g_matrix44(384), 
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;  y               1   42[BANK0 ] char 
  7757 ;;  col             1   43[BANK0 ] char 
  7758 ;;  row             1   44[BANK0 ] char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;                  1    wreg      unsigned char 
  7761 ;; Registers used:
  7762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7768 ;;      Params:         0       2       0       0       0
  7769 ;;      Locals:         0       3       0       0       0
  7770 ;;      Temps:          0       4       0       0       0
  7771 ;;      Totals:         0       9       0       0       0
  7772 ;;Total ram usage:        9 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    3
  7775 ;; This function calls:
  7776 ;;		_debug_int1
  7777 ;;		_debug_line
  7778 ;; This function is called by:
  7779 ;;		_find_best_solution
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           
  7784                           ;psect for function _get_high_after_merge
  7785  1114                     _get_high_after_merge:	
  7786                           
  7787                           ;incstack = 0
  7788                           ; Regs used in _get_high_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  7789                           ;get_high_after_merge@y stored from wreg
  7790  1114  1283               	bcf	3,5	;RP0=0, select bank0
  7791  1115  1303               	bcf	3,6	;RP1=0, select bank0
  7792  1116  00CA               	movwf	get_high_after_merge@y
  7793                           
  7794                           ;teris_16f886.c: 928: debug_line(0, "get_high_after_merge");
  7795  1117  302D               	movlw	low (STR_51| (0+32768))
  7796  1118  00F3               	movwf	debug_line@str
  7797  1119  308B               	movlw	high (STR_51| (0+32768))
  7798  111A  00F4               	movwf	debug_line@str+1
  7799  111B  3000               	movlw	0
  7800  111C  160A  158A  20DB  160A  118A  	fcall	_debug_line
  7801                           
  7802                           ;teris_16f886.c: 929: for(int8_t row = 0; row < 4; row++)
  7803  1121  1283               	bcf	3,5	;RP0=0, select bank0
  7804  1122  1303               	bcf	3,6	;RP1=0, select bank0
  7805  1123  01CC               	clrf	get_high_after_merge@row
  7806  1124                     L14:	
  7807  1124  084C               	movf	get_high_after_merge@row,w
  7808  1125  3A80               	xorlw	128
  7809  1126  3E7C               	addlw	-132
  7810  1127  1803               	btfsc	3,0
  7811  1128  0008               	return
  7812                           
  7813                           ;teris_16f886.c: 930: {
  7814                           ;teris_16f886.c: 931: for(int8_t col = 0; col < 4; col++)
  7815  1129  01CB               	clrf	get_high_after_merge@col
  7816  112A  084B               	movf	get_high_after_merge@col,w
  7817  112B  3A80               	xorlw	128
  7818  112C  3E7C               	addlw	-132
  7819  112D  1803               	btfsc	3,0
  7820  112E  29A3               	goto	l5307
  7821  112F                     l5295:	
  7822                           
  7823                           ;teris_16f886.c: 932: {
  7824                           ;teris_16f886.c: 933: if(matrix->data[row][col] == 1)
  7825  112F  084C               	movf	get_high_after_merge@row,w
  7826  1130  00C6               	movwf	??_get_high_after_merge
  7827  1131  01C7               	clrf	??_get_high_after_merge+1
  7828  1132  1003               	clrc
  7829  1133  0DC6               	rlf	??_get_high_after_merge,f
  7830  1134  0DC7               	rlf	??_get_high_after_merge+1,f
  7831  1135  1003               	clrc
  7832  1136  0DC6               	rlf	??_get_high_after_merge,f
  7833  1137  0DC7               	rlf	??_get_high_after_merge+1,f
  7834  1138  0846               	movf	??_get_high_after_merge,w
  7835  1139  0744               	addwf	get_high_after_merge@matrix,w
  7836  113A  00C8               	movwf	??_get_high_after_merge+2
  7837  113B  0847               	movf	??_get_high_after_merge+1,w
  7838  113C  1803               	skipnc
  7839  113D  0A47               	incf	??_get_high_after_merge+1,w
  7840  113E  0745               	addwf	get_high_after_merge@matrix+1,w
  7841  113F  00C9               	movwf	??_get_high_after_merge+3
  7842  1140  084B               	movf	get_high_after_merge@col,w
  7843  1141  0748               	addwf	??_get_high_after_merge+2,w
  7844  1142  0084               	movwf	4
  7845  1143  0849               	movf	??_get_high_after_merge+3,w
  7846  1144  1803               	skipnc
  7847  1145  0A49               	incf	??_get_high_after_merge+3,w
  7848  1146  00FF               	movwf	127
  7849  1147  120A  158A  2000  160A  118A  	fcall	stringtab
  7850  114C  3A01               	xorlw	1
  7851  114D  1D03               	skipz
  7852  114E  299A               	goto	l5303
  7853                           
  7854                           ;teris_16f886.c: 934: {
  7855                           ;teris_16f886.c: 935: debug_int1(0, "y = %d", y);
  7856  114F  30D5               	movlw	low ((STR_44+8)| (0+32768))
  7857  1150  00BF               	movwf	debug_int1@f
  7858  1151  308C               	movlw	high ((STR_44+8)| (0+32768))
  7859  1152  00C0               	movwf	debug_int1@f+1
  7860  1153  084A               	movf	get_high_after_merge@y,w
  7861  1154  00C1               	movwf	debug_int1@i
  7862  1155  01C2               	clrf	debug_int1@i+1
  7863  1156  1BC1               	btfsc	debug_int1@i,7
  7864  1157  03C2               	decf	debug_int1@i+1,f
  7865  1158  3000               	movlw	0
  7866  1159  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  7867                           
  7868                           ;teris_16f886.c: 936: debug_int1(0, "row = %d", row);
  7869  115E  3082               	movlw	low (STR_53| (0+32768))
  7870  115F  1283               	bcf	3,5	;RP0=0, select bank0
  7871  1160  1303               	bcf	3,6	;RP1=0, select bank0
  7872  1161  00BF               	movwf	debug_int1@f
  7873  1162  308D               	movlw	high (STR_53| (0+32768))
  7874  1163  00C0               	movwf	debug_int1@f+1
  7875  1164  084C               	movf	get_high_after_merge@row,w
  7876  1165  00C1               	movwf	debug_int1@i
  7877  1166  01C2               	clrf	debug_int1@i+1
  7878  1167  1BC1               	btfsc	debug_int1@i,7
  7879  1168  03C2               	decf	debug_int1@i+1,f
  7880  1169  3000               	movlw	0
  7881  116A  120A  158A  25AE  160A  118A  	fcall	_debug_int1
  7882                           
  7883                           ;teris_16f886.c: 937: debug_int1(1, "height = %d", 8 - y - row);
  7884  116F  3021               	movlw	low ((STR_50+9)| (0+32768))
  7885  1170  1283               	bcf	3,5	;RP0=0, select bank0
  7886  1171  1303               	bcf	3,6	;RP1=0, select bank0
  7887  1172  00BF               	movwf	debug_int1@f
  7888  1173  308B               	movlw	high ((STR_50+9)| (0+32768))
  7889  1174  00C0               	movwf	debug_int1@f+1
  7890  1175  084A               	movf	get_high_after_merge@y,w
  7891  1176  074C               	addwf	get_high_after_merge@row,w
  7892  1177  00C6               	movwf	??_get_high_after_merge
  7893  1178  01C7               	clrf	??_get_high_after_merge+1
  7894  1179  1803               	skipnc
  7895  117A  0AC7               	incf	??_get_high_after_merge+1,f
  7896  117B  1BCA               	btfsc	get_high_after_merge@y,7
  7897  117C  03C7               	decf	??_get_high_after_merge+1,f
  7898  117D  1BCC               	btfsc	get_high_after_merge@row,7
  7899  117E  03C7               	decf	??_get_high_after_merge+1,f
  7900  117F  1283               	bcf	3,5	;RP0=0, select bank0
  7901  1180  1303               	bcf	3,6	;RP1=0, select bank0
  7902  1181  09C6               	comf	??_get_high_after_merge,f
  7903  1182  09C7               	comf	??_get_high_after_merge+1,f
  7904  1183  0AC6               	incf	??_get_high_after_merge,f
  7905  1184  1903               	skipnz
  7906  1185  0AC7               	incf	??_get_high_after_merge+1,f
  7907  1186  0846               	movf	??_get_high_after_merge,w
  7908  1187  3E08               	addlw	8
  7909  1188  00C1               	movwf	debug_int1@i
  7910  1189  0847               	movf	??_get_high_after_merge+1,w
  7911  118A  1803               	skipnc
  7912  118B  3E01               	addlw	1
  7913  118C  3E00               	addlw	0
  7914  118D  00C2               	movwf	debug_int1@i+1
  7915  118E  3001               	movlw	1
  7916  118F  120A  158A  25AE   	fcall	_debug_int1
  7917                           
  7918                           ;teris_16f886.c: 938: return (uint8_t)(8 - y - row);
  7919  1192  1283               	bcf	3,5	;RP0=0, select bank0
  7920  1193  1303               	bcf	3,6	;RP1=0, select bank0
  7921  1194  084C               	movf	get_high_after_merge@row,w
  7922  1195  074A               	addwf	get_high_after_merge@y,w
  7923  1196  3AFF               	xorlw	255
  7924  1197  3E01               	addlw	1
  7925  1198  3E08               	addlw	8
  7926  1199  0008               	return
  7927  119A                     l5303:	
  7928  119A  3001               	movlw	1
  7929  119B  00C6               	movwf	??_get_high_after_merge
  7930  119C  0846               	movf	??_get_high_after_merge,w
  7931  119D  07CB               	addwf	get_high_after_merge@col,f
  7932  119E  084B               	movf	get_high_after_merge@col,w
  7933  119F  3A80               	xorlw	128
  7934  11A0  3E7C               	addlw	-132
  7935  11A1  1C03               	skipc
  7936  11A2  292F               	goto	l5295
  7937  11A3                     l5307:	
  7938  11A3  3001               	movlw	1
  7939  11A4  00C6               	movwf	??_get_high_after_merge
  7940  11A5  0846               	movf	??_get_high_after_merge,w
  7941  11A6  07CC               	addwf	get_high_after_merge@row,f
  7942  11A7  2924               	goto	L14
  7943  11A8                     __end_of_get_high_after_merge:	
  7944                           
  7945                           	psect	text18
  7946  1C67                     __ptext18:	
  7947 ;; *************** function _get_high *****************
  7948 ;; Defined at:
  7949 ;;		line 914 in file "teris_16f886.c"
  7950 ;; Parameters:    Size  Location     Type
  7951 ;;  matrix          1    wreg     PTR struct .
  7952 ;;		 -> g_matrix88(64), 
  7953 ;; Auto vars:     Size  Location     Type
  7954 ;;  matrix          1   38[BANK0 ] PTR struct .
  7955 ;;		 -> g_matrix88(64), 
  7956 ;;  row             1   39[BANK0 ] char 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;                  1    wreg      unsigned char 
  7959 ;; Registers used:
  7960 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7966 ;;      Params:         0       0       0       0       0
  7967 ;;      Locals:         0       2       0       0       0
  7968 ;;      Temps:          0       2       0       0       0
  7969 ;;      Totals:         0       4       0       0       0
  7970 ;;Total ram usage:        4 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    3
  7973 ;; This function calls:
  7974 ;;		_debug_int1
  7975 ;;		_is_row_empty
  7976 ;; This function is called by:
  7977 ;;		_find_best_solution
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           
  7982                           ;psect for function _get_high
  7983  1C67                     _get_high:	
  7984                           
  7985                           ;incstack = 0
  7986                           ; Regs used in _get_high: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7987                           ;get_high@matrix stored from wreg
  7988  1C67  1283               	bcf	3,5	;RP0=0, select bank0
  7989  1C68  1303               	bcf	3,6	;RP1=0, select bank0
  7990  1C69  00C6               	movwf	get_high@matrix
  7991                           
  7992                           ;teris_16f886.c: 916: for(int8_t row = 8 - 1; row >= 0; row--)
  7993  1C6A  3007               	movlw	7
  7994  1C6B  00C4               	movwf	??_get_high
  7995  1C6C  0844               	movf	??_get_high,w
  7996  1C6D  00C7               	movwf	get_high@row
  7997  1C6E  1BC7               	btfsc	get_high@row,7
  7998  1C6F  2CAE               	goto	l5277
  7999  1C70                     l5265:	
  8000                           
  8001                           ;teris_16f886.c: 917: {
  8002                           ;teris_16f886.c: 918: if(is_row_empty(matrix, row) == 1)
  8003  1C70  0847               	movf	get_high@row,w
  8004  1C71  00C4               	movwf	??_get_high
  8005  1C72  0844               	movf	??_get_high,w
  8006  1C73  00F0               	movwf	is_row_empty@row
  8007  1C74  0846               	movf	get_high@matrix,w
  8008  1C75  160A  158A  21A5  160A  158A  	fcall	_is_row_empty
  8009  1C7A  3A01               	xorlw	1
  8010  1C7B  1D03               	skipz
  8011  1C7C  2CA6               	goto	l5273
  8012                           
  8013                           ;teris_16f886.c: 919: {
  8014                           ;teris_16f886.c: 920: debug_int1(0, "get_high height = %d", 8 - row - 1);
  8015  1C7D  3018               	movlw	low (STR_50| (0+32768))
  8016  1C7E  1283               	bcf	3,5	;RP0=0, select bank0
  8017  1C7F  1303               	bcf	3,6	;RP1=0, select bank0
  8018  1C80  00BF               	movwf	debug_int1@f
  8019  1C81  308B               	movlw	high (STR_50| (0+32768))
  8020  1C82  00C0               	movwf	debug_int1@f+1
  8021  1C83  3001               	movlw	1
  8022  1C84  0747               	addwf	get_high@row,w
  8023  1C85  00C4               	movwf	??_get_high
  8024  1C86  01C5               	clrf	??_get_high+1
  8025  1C87  1803               	skipnc
  8026  1C88  0AC5               	incf	??_get_high+1,f
  8027  1C89  1BC7               	btfsc	get_high@row,7
  8028  1C8A  03C5               	decf	??_get_high+1,f
  8029  1C8B  1283               	bcf	3,5	;RP0=0, select bank0
  8030  1C8C  1303               	bcf	3,6	;RP1=0, select bank0
  8031  1C8D  09C4               	comf	??_get_high,f
  8032  1C8E  09C5               	comf	??_get_high+1,f
  8033  1C8F  0AC4               	incf	??_get_high,f
  8034  1C90  1903               	skipnz
  8035  1C91  0AC5               	incf	??_get_high+1,f
  8036  1C92  0844               	movf	??_get_high,w
  8037  1C93  3E08               	addlw	8
  8038  1C94  00C1               	movwf	debug_int1@i
  8039  1C95  0845               	movf	??_get_high+1,w
  8040  1C96  1803               	skipnc
  8041  1C97  3E01               	addlw	1
  8042  1C98  3E00               	addlw	0
  8043  1C99  00C2               	movwf	debug_int1@i+1
  8044  1C9A  3000               	movlw	0
  8045  1C9B  120A  158A  25AE   	fcall	_debug_int1
  8046                           
  8047                           ;teris_16f886.c: 921: return (uint8_t)(8 - row - 1);
  8048  1C9E  1283               	bcf	3,5	;RP0=0, select bank0
  8049  1C9F  1303               	bcf	3,6	;RP1=0, select bank0
  8050  1CA0  0847               	movf	get_high@row,w
  8051  1CA1  3E01               	addlw	1
  8052  1CA2  3AFF               	xorlw	255
  8053  1CA3  3E01               	addlw	1
  8054  1CA4  3E08               	addlw	8
  8055  1CA5  0008               	return
  8056  1CA6                     l5273:	
  8057  1CA6  30FF               	movlw	255
  8058  1CA7  1283               	bcf	3,5	;RP0=0, select bank0
  8059  1CA8  1303               	bcf	3,6	;RP1=0, select bank0
  8060  1CA9  00C4               	movwf	??_get_high
  8061  1CAA  0844               	movf	??_get_high,w
  8062  1CAB  07C7               	addwf	get_high@row,f
  8063  1CAC  1FC7               	btfss	get_high@row,7
  8064  1CAD  2C70               	goto	l5265
  8065  1CAE                     l5277:	
  8066                           
  8067                           ;teris_16f886.c: 922: }
  8068                           ;teris_16f886.c: 923: }
  8069                           ;teris_16f886.c: 924: return 8;
  8070  1CAE  3008               	movlw	8
  8071  1CAF  0008               	return
  8072  1CB0                     __end_of_get_high:	
  8073                           
  8074                           	psect	text19
  8075  19A5                     __ptext19:	
  8076 ;; *************** function _is_row_empty *****************
  8077 ;; Defined at:
  8078 ;;		line 662 in file "teris_16f886.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;  matrix          1    wreg     PTR const struct .
  8081 ;;		 -> g_matrix88(64), 
  8082 ;;  row             1    0[COMMON] unsigned char 
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  matrix          1    4[COMMON] PTR const struct .
  8085 ;;		 -> g_matrix88(64), 
  8086 ;;  col             1    5[COMMON] unsigned char 
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  1    wreg      unsigned char 
  8089 ;; Registers used:
  8090 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8096 ;;      Params:         1       0       0       0       0
  8097 ;;      Locals:         2       0       0       0       0
  8098 ;;      Temps:          3       0       0       0       0
  8099 ;;      Totals:         6       0       0       0       0
  8100 ;;Total ram usage:        6 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; This function calls:
  8103 ;;		Nothing
  8104 ;; This function is called by:
  8105 ;;		_get_high
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           
  8110                           ;psect for function _is_row_empty
  8111  19A5                     _is_row_empty:	
  8112                           
  8113                           ;incstack = 0
  8114                           ; Regs used in _is_row_empty: [wreg-fsr0h+status,2+status,0]
  8115                           ;is_row_empty@matrix stored from wreg
  8116  19A5  00F4               	movwf	is_row_empty@matrix
  8117                           
  8118                           ;teris_16f886.c: 664: for(uint8_t col = 0; col < 8; col++)
  8119  19A6  01F5               	clrf	is_row_empty@col
  8120  19A7  3008               	movlw	8
  8121  19A8  0275               	subwf	is_row_empty@col,w
  8122  19A9  1803               	btfsc	3,0
  8123  19AA  29CA               	goto	l3619
  8124  19AB                     l3609:	
  8125                           
  8126                           ;teris_16f886.c: 665: {
  8127                           ;teris_16f886.c: 666: if(matrix->data[row][col] == 1)
  8128  19AB  0870               	movf	is_row_empty@row,w
  8129  19AC  00F1               	movwf	??_is_row_empty
  8130  19AD  3002               	movlw	2
  8131  19AE                     u4615:	
  8132  19AE  1003               	clrc
  8133  19AF  0DF1               	rlf	??_is_row_empty,f
  8134  19B0  3EFF               	addlw	-1
  8135  19B1  1D03               	skipz
  8136  19B2  29AE               	goto	u4615
  8137  19B3  1003               	clrc
  8138  19B4  0D71               	rlf	??_is_row_empty,w
  8139  19B5  0774               	addwf	is_row_empty@matrix,w
  8140  19B6  00F2               	movwf	??_is_row_empty+1
  8141  19B7  0875               	movf	is_row_empty@col,w
  8142  19B8  0772               	addwf	??_is_row_empty+1,w
  8143  19B9  00F3               	movwf	??_is_row_empty+2
  8144  19BA  0873               	movf	??_is_row_empty+2,w
  8145  19BB  0084               	movwf	4
  8146  19BC  1783               	bsf	3,7	;select IRP bank2
  8147  19BD  0300               	decf	0,w
  8148  19BE  1D03               	btfss	3,2
  8149  19BF  29C2               	goto	l3615
  8150                           
  8151                           ;teris_16f886.c: 667: {
  8152                           ;teris_16f886.c: 668: return 0;
  8153  19C0  3000               	movlw	0
  8154  19C1  0008               	return
  8155  19C2                     l3615:	
  8156  19C2  3001               	movlw	1
  8157  19C3  00F1               	movwf	??_is_row_empty
  8158  19C4  0871               	movf	??_is_row_empty,w
  8159  19C5  07F5               	addwf	is_row_empty@col,f
  8160  19C6  3008               	movlw	8
  8161  19C7  0275               	subwf	is_row_empty@col,w
  8162  19C8  1C03               	skipc
  8163  19C9  29AB               	goto	l3609
  8164  19CA                     l3619:	
  8165                           
  8166                           ;teris_16f886.c: 669: }
  8167                           ;teris_16f886.c: 670: }
  8168                           ;teris_16f886.c: 671: return 1;
  8169  19CA  3001               	movlw	1
  8170  19CB  0008               	return
  8171  19CC                     __end_of_is_row_empty:	
  8172                           
  8173                           	psect	text20
  8174  1259                     __ptext20:	
  8175 ;; *************** function _fall_off *****************
  8176 ;; Defined at:
  8177 ;;		line 781 in file "teris_16f886.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;  x               1    wreg     char 
  8180 ;;  y               1   38[BANK0 ] char 
  8181 ;;  matrix44        2   39[BANK0 ] PTR const struct .
  8182 ;;		 -> g_matrix44(384), 
  8183 ;;  matrix88        1   41[BANK0 ] PTR const struct .
  8184 ;;		 -> g_matrix88(64), 
  8185 ;; Auto vars:     Size  Location     Type
  8186 ;;  x               1   46[BANK0 ] char 
  8187 ;;  col             1   47[BANK0 ] char 
  8188 ;;  row             1   48[BANK0 ] char 
  8189 ;; Return value:  Size  Location     Type
  8190 ;;                  1    wreg      unsigned char 
  8191 ;; Registers used:
  8192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8193 ;; Tracked objects:
  8194 ;;		On entry : 0/0
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8198 ;;      Params:         0       4       0       0       0
  8199 ;;      Locals:         0       3       0       0       0
  8200 ;;      Temps:          0       4       0       0       0
  8201 ;;      Totals:         0      11       0       0       0
  8202 ;;Total ram usage:       11 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; Hardware stack levels required when called:    3
  8205 ;; This function calls:
  8206 ;;		_debug_int2
  8207 ;;		_debug_line
  8208 ;; This function is called by:
  8209 ;;		_find_best_solution
  8210 ;; This function uses a non-reentrant model
  8211 ;;
  8212                           
  8213                           
  8214                           ;psect for function _fall_off
  8215  1259                     _fall_off:	
  8216                           
  8217                           ;incstack = 0
  8218                           ; Regs used in _fall_off: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8219                           ;fall_off@x stored from wreg
  8220  1259  1283               	bcf	3,5	;RP0=0, select bank0
  8221  125A  1303               	bcf	3,6	;RP1=0, select bank0
  8222  125B  00CE               	movwf	fall_off@x
  8223  125C                     l338:	
  8224                           ;teris_16f886.c: 783: while(1)
  8225                           
  8226                           
  8227                           ;teris_16f886.c: 784: {
  8228                           ;teris_16f886.c: 785: for(int8_t row = 4 - 1; row >= 0; row--)
  8229  125C  3003               	movlw	3
  8230  125D  00CA               	movwf	??_fall_off
  8231  125E  084A               	movf	??_fall_off,w
  8232  125F  00D0               	movwf	fall_off@row
  8233  1260  1BD0               	btfsc	fall_off@row,7
  8234  1261  2B0C               	goto	l5169
  8235  1262                     l5137:	
  8236                           
  8237                           ;teris_16f886.c: 786: {
  8238                           ;teris_16f886.c: 787: for(int8_t col = 0; col < 4; col++)
  8239  1262  01CF               	clrf	fall_off@col
  8240  1263  084F               	movf	fall_off@col,w
  8241  1264  3A80               	xorlw	128
  8242  1265  3E7C               	addlw	-132
  8243  1266  1803               	btfsc	3,0
  8244  1267  2B06               	goto	l5165
  8245  1268                     l5143:	
  8246                           
  8247                           ;teris_16f886.c: 788: {
  8248                           ;teris_16f886.c: 789: if(matrix44->data[row][col] == 1)
  8249  1268  0850               	movf	fall_off@row,w
  8250  1269  00CA               	movwf	??_fall_off
  8251  126A  01CB               	clrf	??_fall_off+1
  8252  126B  1003               	clrc
  8253  126C  0DCA               	rlf	??_fall_off,f
  8254  126D  0DCB               	rlf	??_fall_off+1,f
  8255  126E  1003               	clrc
  8256  126F  0DCA               	rlf	??_fall_off,f
  8257  1270  0DCB               	rlf	??_fall_off+1,f
  8258  1271  084A               	movf	??_fall_off,w
  8259  1272  0747               	addwf	fall_off@matrix44,w
  8260  1273  00CC               	movwf	??_fall_off+2
  8261  1274  084B               	movf	??_fall_off+1,w
  8262  1275  1803               	skipnc
  8263  1276  0A4B               	incf	??_fall_off+1,w
  8264  1277  0748               	addwf	fall_off@matrix44+1,w
  8265  1278  00CD               	movwf	??_fall_off+3
  8266  1279  084F               	movf	fall_off@col,w
  8267  127A  074C               	addwf	??_fall_off+2,w
  8268  127B  0084               	movwf	4
  8269  127C  084D               	movf	??_fall_off+3,w
  8270  127D  1803               	skipnc
  8271  127E  0A4D               	incf	??_fall_off+3,w
  8272  127F  00FF               	movwf	127
  8273  1280  120A  158A  2000  160A  118A  	fcall	stringtab
  8274  1285  3A01               	xorlw	1
  8275  1286  1D03               	skipz
  8276  1287  2AFB               	goto	l5161
  8277                           
  8278                           ;teris_16f886.c: 790: {
  8279                           ;teris_16f886.c: 791: if(matrix88->data[y + row + 1][x + col] == 1)
  8280  1288  084F               	movf	fall_off@col,w
  8281  1289  074E               	addwf	fall_off@x,w
  8282  128A  0749               	addwf	fall_off@matrix88,w
  8283  128B  00CA               	movwf	??_fall_off
  8284  128C  0850               	movf	fall_off@row,w
  8285  128D  0746               	addwf	fall_off@y,w
  8286  128E  00CB               	movwf	??_fall_off+1
  8287  128F  3002               	movlw	2
  8288  1290                     u7355:	
  8289  1290  1003               	clrc
  8290  1291  0DCB               	rlf	??_fall_off+1,f
  8291  1292  3EFF               	addlw	-1
  8292  1293  1D03               	skipz
  8293  1294  2A90               	goto	u7355
  8294  1295  1003               	clrc
  8295  1296  0D4B               	rlf	??_fall_off+1,w
  8296  1297  3E08               	addlw	8
  8297  1298  074A               	addwf	??_fall_off,w
  8298  1299  00CC               	movwf	??_fall_off+2
  8299  129A  084C               	movf	??_fall_off+2,w
  8300  129B  0084               	movwf	4
  8301  129C  1783               	bsf	3,7	;select IRP bank2
  8302  129D  0300               	decf	0,w
  8303  129E  1D03               	btfss	3,2
  8304  129F  2AC2               	goto	l5153
  8305                           
  8306                           ;teris_16f886.c: 792: {
  8307                           ;teris_16f886.c: 793: debug_line(0, "fall_off1");
  8308  12A0  305A               	movlw	low (STR_43| (0+32768))
  8309  12A1  00F3               	movwf	debug_line@str
  8310  12A2  308D               	movlw	high (STR_43| (0+32768))
  8311  12A3  00F4               	movwf	debug_line@str+1
  8312  12A4  3000               	movlw	0
  8313  12A5  160A  158A  20DB  160A  118A  	fcall	_debug_line
  8314                           
  8315                           ;teris_16f886.c: 794: debug_int2(0, "x = %d, y = %d", x, y);
  8316  12AA  30CD               	movlw	low (STR_44| (0+32768))
  8317  12AB  1283               	bcf	3,5	;RP0=0, select bank0
  8318  12AC  1303               	bcf	3,6	;RP1=0, select bank0
  8319  12AD  00BF               	movwf	debug_int2@f
  8320  12AE  308C               	movlw	high (STR_44| (0+32768))
  8321  12AF  00C0               	movwf	debug_int2@f+1
  8322  12B0  084E               	movf	fall_off@x,w
  8323  12B1  00C1               	movwf	debug_int2@i1
  8324  12B2  01C2               	clrf	debug_int2@i1+1
  8325  12B3  1BC1               	btfsc	debug_int2@i1,7
  8326  12B4  03C2               	decf	debug_int2@i1+1,f
  8327  12B5  0846               	movf	fall_off@y,w
  8328  12B6  00C3               	movwf	debug_int2@i2
  8329  12B7  01C4               	clrf	debug_int2@i2+1
  8330  12B8  1BC3               	btfsc	debug_int2@i2,7
  8331  12B9  03C4               	decf	debug_int2@i2+1,f
  8332  12BA  3000               	movlw	0
  8333  12BB  160A  158A  21CC   	fcall	_debug_int2
  8334                           
  8335                           ;teris_16f886.c: 795: return y;
  8336  12BE  1283               	bcf	3,5	;RP0=0, select bank0
  8337  12BF  1303               	bcf	3,6	;RP1=0, select bank0
  8338  12C0  0846               	movf	fall_off@y,w
  8339  12C1  0008               	return
  8340  12C2                     l5153:	
  8341                           
  8342                           ;teris_16f886.c: 796: }
  8343                           ;teris_16f886.c: 797: if((y + row) >= (8 - 1))
  8344  12C2  0846               	movf	fall_off@y,w
  8345  12C3  0750               	addwf	fall_off@row,w
  8346  12C4  00CA               	movwf	??_fall_off
  8347  12C5  01CB               	clrf	??_fall_off+1
  8348  12C6  1803               	skipnc
  8349  12C7  0ACB               	incf	??_fall_off+1,f
  8350  12C8  1BC6               	btfsc	fall_off@y,7
  8351  12C9  03CB               	decf	??_fall_off+1,f
  8352  12CA  1BD0               	btfsc	fall_off@row,7
  8353  12CB  03CB               	decf	??_fall_off+1,f
  8354  12CC  1283               	bcf	3,5	;RP0=0, select bank0
  8355  12CD  1303               	bcf	3,6	;RP1=0, select bank0
  8356  12CE  084B               	movf	??_fall_off+1,w
  8357  12CF  3A80               	xorlw	128
  8358  12D0  00FF               	movwf	127
  8359  12D1  3080               	movlw	128
  8360  12D2  027F               	subwf	127,w
  8361  12D3  1D03               	skipz
  8362  12D4  2AD7               	goto	u7385
  8363  12D5  3007               	movlw	7
  8364  12D6  024A               	subwf	??_fall_off,w
  8365  12D7                     u7385:	
  8366  12D7  1C03               	skipc
  8367  12D8  2AFB               	goto	l5161
  8368                           
  8369                           ;teris_16f886.c: 798: {
  8370                           ;teris_16f886.c: 799: debug_line(0, "fall_off2");
  8371  12D9  3064               	movlw	low (STR_45| (0+32768))
  8372  12DA  00F3               	movwf	debug_line@str
  8373  12DB  308D               	movlw	high (STR_45| (0+32768))
  8374  12DC  00F4               	movwf	debug_line@str+1
  8375  12DD  3000               	movlw	0
  8376  12DE  160A  158A  20DB  160A  118A  	fcall	_debug_line
  8377                           
  8378                           ;teris_16f886.c: 800: debug_int2(0, "x = %d, y = %d", x, y);
  8379  12E3  30CD               	movlw	low (STR_44| (0+32768))
  8380  12E4  1283               	bcf	3,5	;RP0=0, select bank0
  8381  12E5  1303               	bcf	3,6	;RP1=0, select bank0
  8382  12E6  00BF               	movwf	debug_int2@f
  8383  12E7  308C               	movlw	high (STR_44| (0+32768))
  8384  12E8  00C0               	movwf	debug_int2@f+1
  8385  12E9  084E               	movf	fall_off@x,w
  8386  12EA  00C1               	movwf	debug_int2@i1
  8387  12EB  01C2               	clrf	debug_int2@i1+1
  8388  12EC  1BC1               	btfsc	debug_int2@i1,7
  8389  12ED  03C2               	decf	debug_int2@i1+1,f
  8390  12EE  0846               	movf	fall_off@y,w
  8391  12EF  00C3               	movwf	debug_int2@i2
  8392  12F0  01C4               	clrf	debug_int2@i2+1
  8393  12F1  1BC3               	btfsc	debug_int2@i2,7
  8394  12F2  03C4               	decf	debug_int2@i2+1,f
  8395  12F3  3000               	movlw	0
  8396  12F4  160A  158A  21CC   	fcall	_debug_int2
  8397                           
  8398                           ;teris_16f886.c: 801: return y;
  8399  12F7  1283               	bcf	3,5	;RP0=0, select bank0
  8400  12F8  1303               	bcf	3,6	;RP1=0, select bank0
  8401  12F9  0846               	movf	fall_off@y,w
  8402  12FA  0008               	return
  8403  12FB                     l5161:	
  8404  12FB  3001               	movlw	1
  8405  12FC  1283               	bcf	3,5	;RP0=0, select bank0
  8406  12FD  1303               	bcf	3,6	;RP1=0, select bank0
  8407  12FE  00CA               	movwf	??_fall_off
  8408  12FF  084A               	movf	??_fall_off,w
  8409  1300  07CF               	addwf	fall_off@col,f
  8410  1301  084F               	movf	fall_off@col,w
  8411  1302  3A80               	xorlw	128
  8412  1303  3E7C               	addlw	-132
  8413  1304  1C03               	skipc
  8414  1305  2A68               	goto	l5143
  8415  1306                     l5165:	
  8416  1306  30FF               	movlw	255
  8417  1307  00CA               	movwf	??_fall_off
  8418  1308  084A               	movf	??_fall_off,w
  8419  1309  07D0               	addwf	fall_off@row,f
  8420  130A  1FD0               	btfss	fall_off@row,7
  8421  130B  2A62               	goto	l5137
  8422  130C                     l5169:	
  8423                           
  8424                           ;teris_16f886.c: 802: }
  8425                           ;teris_16f886.c: 803: }
  8426                           ;teris_16f886.c: 804: }
  8427                           ;teris_16f886.c: 805: }
  8428                           ;teris_16f886.c: 806: y++;
  8429  130C  3001               	movlw	1
  8430  130D  00CA               	movwf	??_fall_off
  8431  130E  084A               	movf	??_fall_off,w
  8432  130F  07C6               	addwf	fall_off@y,f
  8433  1310  2A5C               	goto	l338
  8434  1311                     __end_of_fall_off:	
  8435                           
  8436                           	psect	text21
  8437  18DB                     __ptext21:	
  8438 ;; *************** function _debug_line *****************
  8439 ;; Defined at:
  8440 ;;		line 300 in file "teris_16f886.c"
  8441 ;; Parameters:    Size  Location     Type
  8442 ;;  enable          1    wreg     unsigned char 
  8443 ;;  str             2    3[COMMON] PTR const unsigned char 
  8444 ;;		 -> STR_95(13), STR_93(13), STR_86(7), STR_78(5), 
  8445 ;;		 -> STR_59(45), STR_51(21), STR_45(10), STR_43(10), 
  8446 ;;		 -> STR_42(20), STR_41(19), STR_40(6), STR_38(11), 
  8447 ;;		 -> STR_36(11), STR_34(11), STR_33(35), STR_32(8), 
  8448 ;;		 -> STR_29(35), STR_27(2), STR_26(21), STR_25(1), 
  8449 ;;		 -> STR_22(29), STR_21(2), STR_20(21), STR_19(1), 
  8450 ;;		 -> STR_16(21), STR_15(2), STR_12(20), STR_11(2), 
  8451 ;;		 -> STR_10(21), STR_9(1), STR_6(29), STR_5(2), 
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;  enable          1    5[COMMON] unsigned char 
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  1    wreg      void 
  8456 ;; Registers used:
  8457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8463 ;;      Params:         2       0       0       0       0
  8464 ;;      Locals:         1       0       0       0       0
  8465 ;;      Temps:          0       0       0       0       0
  8466 ;;      Totals:         3       0       0       0       0
  8467 ;;Total ram usage:        3 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    2
  8470 ;; This function calls:
  8471 ;;		_USARTWriteString
  8472 ;; This function is called by:
  8473 ;;		_printf_debug_MATRIX44
  8474 ;;		_printf_debug_cur_MATRIX44
  8475 ;;		_printf_debug_MATRIX88
  8476 ;;		_printf_debug_Screen
  8477 ;;		_hit_land
  8478 ;;		_is_valid
  8479 ;;		_is_left_boundary
  8480 ;;		_is_right_boundary
  8481 ;;		_fall_off
  8482 ;;		_get_high_after_merge
  8483 ;;		_find_best_solution
  8484 ;;		_main
  8485 ;;		_printf_debug_all_MATRIX44
  8486 ;;		_printf_debug_MATRIX7219
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           
  8491                           ;psect for function _debug_line
  8492  18DB                     _debug_line:	
  8493                           
  8494                           ;incstack = 0
  8495                           ; Regs used in _debug_line: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8496                           ;debug_line@enable stored from wreg
  8497  18DB  00F5               	movwf	debug_line@enable
  8498                           
  8499                           ;teris_16f886.c: 302: if(enable == 1)
  8500  18DC  0375               	decf	debug_line@enable,w
  8501  18DD  1D03               	btfss	3,2
  8502  18DE  0008               	return
  8503                           
  8504                           ;teris_16f886.c: 303: {
  8505                           ;teris_16f886.c: 308: USARTWriteString(str);
  8506  18DF  0873               	movf	debug_line@str,w
  8507  18E0  00F1               	movwf	USARTWriteString@str
  8508  18E1  0874               	movf	debug_line@str+1,w
  8509  18E2  00F2               	movwf	USARTWriteString@str+1
  8510  18E3  160A  158A  2180  160A  158A  	fcall	_USARTWriteString
  8511                           
  8512                           ;teris_16f886.c: 309: USARTWriteString("\r\n");
  8513  18E8  30A5               	movlw	low (STR_1| (0+32768))
  8514  18E9  00F1               	movwf	USARTWriteString@str
  8515  18EA  308D               	movlw	high (STR_1| (0+32768))
  8516  18EB  00F2               	movwf	USARTWriteString@str+1
  8517  18EC  160A  158A  2180   	fcall	_USARTWriteString
  8518  18EF  0008               	return
  8519  18F0                     __end_of_debug_line:	
  8520                           
  8521                           	psect	text22
  8522  19CC                     __ptext22:	
  8523 ;; *************** function _debug_int2 *****************
  8524 ;; Defined at:
  8525 ;;		line 328 in file "teris_16f886.c"
  8526 ;; Parameters:    Size  Location     Type
  8527 ;;  enable          1    wreg     unsigned char 
  8528 ;;  f               2   31[BANK0 ] PTR const unsigned char 
  8529 ;;		 -> STR_77(18), STR_76(19), STR_75(18), STR_74(19), 
  8530 ;;		 -> STR_73(18), STR_72(17), STR_70(18), STR_69(19), 
  8531 ;;		 -> STR_68(18), STR_67(19), STR_66(18), STR_65(20), 
  8532 ;;		 -> STR_63(19), STR_46(15), STR_44(15), STR_39(19), 
  8533 ;;		 -> STR_37(19), STR_35(19), STR_31(24), STR_30(24), 
  8534 ;;		 -> STR_14(27), 
  8535 ;;  i1              2   33[BANK0 ] int 
  8536 ;;  i2              2   35[BANK0 ] int 
  8537 ;; Auto vars:     Size  Location     Type
  8538 ;;  enable          1   37[BANK0 ] unsigned char 
  8539 ;; Return value:  Size  Location     Type
  8540 ;;                  1    wreg      void 
  8541 ;; Registers used:
  8542 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8543 ;; Tracked objects:
  8544 ;;		On entry : 0/0
  8545 ;;		On exit  : 0/0
  8546 ;;		Unchanged: 0/0
  8547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8548 ;;      Params:         0       6       0       0       0
  8549 ;;      Locals:         0       1       0       0       0
  8550 ;;      Temps:          0       0       0       0       0
  8551 ;;      Totals:         0       7       0       0       0
  8552 ;;Total ram usage:        7 bytes
  8553 ;; Hardware stack levels used:    1
  8554 ;; Hardware stack levels required when called:    2
  8555 ;; This function calls:
  8556 ;;		_USARTWriteString
  8557 ;;		_sprintf
  8558 ;; This function is called by:
  8559 ;;		_hit_land
  8560 ;;		_is_valid
  8561 ;;		_fall_off
  8562 ;;		_find_best_solution
  8563 ;;		_printf_debug_all_MATRIX44
  8564 ;; This function uses a non-reentrant model
  8565 ;;
  8566                           
  8567                           
  8568                           ;psect for function _debug_int2
  8569  19CC                     _debug_int2:	
  8570                           
  8571                           ;incstack = 0
  8572                           ; Regs used in _debug_int2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8573                           ;debug_int2@enable stored from wreg
  8574  19CC  1283               	bcf	3,5	;RP0=0, select bank0
  8575  19CD  1303               	bcf	3,6	;RP1=0, select bank0
  8576  19CE  00C5               	movwf	debug_int2@enable
  8577                           
  8578                           ;teris_16f886.c: 330: if(enable == 1)
  8579  19CF  0345               	decf	debug_int2@enable,w
  8580  19D0  1D03               	btfss	3,2
  8581  19D1  0008               	return
  8582                           
  8583                           ;teris_16f886.c: 331: {
  8584                           ;teris_16f886.c: 336: sprintf(g_debug, f, i1, i2);
  8585  19D2  083F               	movf	debug_int2@f,w
  8586  19D3  00A0               	movwf	sprintf@f
  8587  19D4  0840               	movf	debug_int2@f+1,w
  8588  19D5  00A1               	movwf	sprintf@f+1
  8589  19D6  0842               	movf	debug_int2@i1+1,w
  8590  19D7  00A3               	movwf	?_sprintf+3
  8591  19D8  0841               	movf	debug_int2@i1,w
  8592  19D9  00A2               	movwf	?_sprintf+2
  8593  19DA  0844               	movf	debug_int2@i2+1,w
  8594  19DB  00A5               	movwf	?_sprintf+5
  8595  19DC  0843               	movf	debug_int2@i2,w
  8596  19DD  00A4               	movwf	?_sprintf+4
  8597  19DE  3097               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8598  19DF  120A  118A  22BA  160A  158A  	fcall	_sprintf
  8599                           
  8600                           ;teris_16f886.c: 337: USARTWriteString(g_debug);
  8601  19E4  3097               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8602  19E5  00F1               	movwf	USARTWriteString@str
  8603  19E6  3001               	movlw	1
  8604  19E7  00F2               	movwf	USARTWriteString@str+1
  8605  19E8  160A  158A  2180  160A  158A  	fcall	_USARTWriteString
  8606                           
  8607                           ;teris_16f886.c: 338: USARTWriteString("\r\n");
  8608  19ED  30A5               	movlw	low (STR_1| (0+32768))
  8609  19EE  00F1               	movwf	USARTWriteString@str
  8610  19EF  308D               	movlw	high (STR_1| (0+32768))
  8611  19F0  00F2               	movwf	USARTWriteString@str+1
  8612  19F1  160A  158A  2180   	fcall	_USARTWriteString
  8613  19F4  0008               	return
  8614  19F5                     __end_of_debug_int2:	
  8615                           
  8616                           	psect	text23
  8617  100C                     __ptext23:	
  8618 ;; *************** function _evaluate *****************
  8619 ;; Defined at:
  8620 ;;		line 856 in file "teris_16f886.c"
  8621 ;; Parameters:    Size  Location     Type
  8622 ;;  matrix          1    wreg     PTR const struct .
  8623 ;;		 -> find_best_solution@temp_matrix88(64), 
  8624 ;; Auto vars:     Size  Location     Type
  8625 ;;  matrix          1   45[BANK0 ] PTR const struct .
  8626 ;;		 -> find_best_solution@temp_matrix88(64), 
  8627 ;;  row             1   47[BANK0 ] char 
  8628 ;;  col             1   46[BANK0 ] unsigned char 
  8629 ;;  risk            2   42[BANK0 ] unsigned int 
  8630 ;;  full            1   44[BANK0 ] unsigned char 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  2   36[BANK0 ] unsigned int 
  8633 ;; Registers used:
  8634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8640 ;;      Params:         0       2       0       0       0
  8641 ;;      Locals:         0       6       0       0       0
  8642 ;;      Temps:          0       4       0       0       0
  8643 ;;      Totals:         0      12       0       0       0
  8644 ;;Total ram usage:       12 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:    3
  8647 ;; This function calls:
  8648 ;;		_debug_int1
  8649 ;; This function is called by:
  8650 ;;		_find_best_solution
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           
  8655                           ;psect for function _evaluate
  8656  100C                     _evaluate:	
  8657                           
  8658                           ;incstack = 0
  8659                           ; Regs used in _evaluate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8660                           ;evaluate@matrix stored from wreg
  8661  100C  1283               	bcf	3,5	;RP0=0, select bank0
  8662  100D  1303               	bcf	3,6	;RP1=0, select bank0
  8663  100E  00CD               	movwf	evaluate@matrix
  8664                           
  8665                           ;teris_16f886.c: 858: uint16_t risk = 0;
  8666  100F  01CA               	clrf	evaluate@risk
  8667  1010  01CB               	clrf	evaluate@risk+1
  8668                           
  8669                           ;teris_16f886.c: 859: uint8_t full = 0xFF;
  8670  1011  30FF               	movlw	255
  8671  1012  00C6               	movwf	??_evaluate
  8672  1013  0846               	movf	??_evaluate,w
  8673  1014  00CC               	movwf	evaluate@full
  8674                           
  8675                           ;teris_16f886.c: 860: for(uint8_t col = 0; col < 8; col++)
  8676  1015  01CE               	clrf	evaluate@col
  8677  1016  3008               	movlw	8
  8678  1017  024E               	subwf	evaluate@col,w
  8679  1018  1803               	btfsc	3,0
  8680  1019  287B               	goto	l5233
  8681  101A                     l5207:	
  8682                           
  8683                           ;teris_16f886.c: 861: {
  8684                           ;teris_16f886.c: 862: full = 0xFF;
  8685  101A  30FF               	movlw	255
  8686  101B  00C6               	movwf	??_evaluate
  8687  101C  0846               	movf	??_evaluate,w
  8688  101D  00CC               	movwf	evaluate@full
  8689                           
  8690                           ;teris_16f886.c: 863: for(int8_t row = 8 - 1; row >= 0; row--)
  8691  101E  3007               	movlw	7
  8692  101F  00C6               	movwf	??_evaluate
  8693  1020  0846               	movf	??_evaluate,w
  8694  1021  00CF               	movwf	evaluate@row
  8695  1022  1BCF               	btfsc	evaluate@row,7
  8696  1023  2873               	goto	l5229
  8697  1024                     l5213:	
  8698                           
  8699                           ;teris_16f886.c: 864: {
  8700                           ;teris_16f886.c: 865: if(full == 0xFF)
  8701  1024  0A4C               	incf	evaluate@full,w
  8702  1025  1D03               	btfss	3,2
  8703  1026  283A               	goto	l5217
  8704                           
  8705                           ;teris_16f886.c: 866: {
  8706                           ;teris_16f886.c: 867: full = matrix->data[row][col];
  8707  1027  084F               	movf	evaluate@row,w
  8708  1028  00C6               	movwf	??_evaluate
  8709  1029  3002               	movlw	2
  8710  102A                     u7505:	
  8711  102A  1003               	clrc
  8712  102B  0DC6               	rlf	??_evaluate,f
  8713  102C  3EFF               	addlw	-1
  8714  102D  1D03               	skipz
  8715  102E  282A               	goto	u7505
  8716  102F  1003               	clrc
  8717  1030  0D46               	rlf	??_evaluate,w
  8718  1031  074D               	addwf	evaluate@matrix,w
  8719  1032  00C7               	movwf	??_evaluate+1
  8720  1033  084E               	movf	evaluate@col,w
  8721  1034  0747               	addwf	??_evaluate+1,w
  8722  1035  00C8               	movwf	??_evaluate+2
  8723  1036  0848               	movf	??_evaluate+2,w
  8724  1037  0084               	movwf	4
  8725  1038  1383               	bcf	3,7	;select IRP bank0
  8726  1039  2869               	goto	L15
  8727  103A                     l5217:	
  8728                           ;teris_16f886.c: 868: }
  8729                           
  8730                           
  8731                           ;teris_16f886.c: 869: else
  8732                           ;teris_16f886.c: 870: {
  8733                           ;teris_16f886.c: 871: if(matrix->data[row][col] == 1)
  8734  103A  084F               	movf	evaluate@row,w
  8735  103B  00C6               	movwf	??_evaluate
  8736  103C  3002               	movlw	2
  8737  103D                     u7515:	
  8738  103D  1003               	clrc
  8739  103E  0DC6               	rlf	??_evaluate,f
  8740  103F  3EFF               	addlw	-1
  8741  1040  1D03               	skipz
  8742  1041  283D               	goto	u7515
  8743  1042  1003               	clrc
  8744  1043  0D46               	rlf	??_evaluate,w
  8745  1044  074D               	addwf	evaluate@matrix,w
  8746  1045  00C7               	movwf	??_evaluate+1
  8747  1046  084E               	movf	evaluate@col,w
  8748  1047  0747               	addwf	??_evaluate+1,w
  8749  1048  00C8               	movwf	??_evaluate+2
  8750  1049  0848               	movf	??_evaluate+2,w
  8751  104A  0084               	movwf	4
  8752  104B  1383               	bcf	3,7	;select IRP bank0
  8753  104C  0300               	decf	0,w
  8754  104D  1D03               	btfss	3,2
  8755  104E  2858               	goto	l5223
  8756                           
  8757                           ;teris_16f886.c: 872: {
  8758                           ;teris_16f886.c: 873: if(full == 0)
  8759  104F  084C               	movf	evaluate@full,w
  8760  1050  1D03               	btfss	3,2
  8761  1051  2858               	goto	l5223
  8762                           
  8763                           ;teris_16f886.c: 874: {
  8764                           ;teris_16f886.c: 875: risk++;
  8765  1052  3001               	movlw	1
  8766  1053  07CA               	addwf	evaluate@risk,f
  8767  1054  1803               	skipnc
  8768  1055  0ACB               	incf	evaluate@risk+1,f
  8769  1056  3000               	movlw	0
  8770  1057  07CB               	addwf	evaluate@risk+1,f
  8771  1058                     l5223:	
  8772                           
  8773                           ;teris_16f886.c: 876: }
  8774                           ;teris_16f886.c: 877: }
  8775                           ;teris_16f886.c: 878: full = matrix->data[row][col];
  8776  1058  084F               	movf	evaluate@row,w
  8777  1059  00C6               	movwf	??_evaluate
  8778  105A  3002               	movlw	2
  8779  105B                     u7545:	
  8780  105B  1003               	clrc
  8781  105C  0DC6               	rlf	??_evaluate,f
  8782  105D  3EFF               	addlw	-1
  8783  105E  1D03               	skipz
  8784  105F  285B               	goto	u7545
  8785  1060  1003               	clrc
  8786  1061  0D46               	rlf	??_evaluate,w
  8787  1062  074D               	addwf	evaluate@matrix,w
  8788  1063  00C7               	movwf	??_evaluate+1
  8789  1064  084E               	movf	evaluate@col,w
  8790  1065  0747               	addwf	??_evaluate+1,w
  8791  1066  00C8               	movwf	??_evaluate+2
  8792  1067  0848               	movf	??_evaluate+2,w
  8793  1068  0084               	movwf	4
  8794  1069                     L15:	
  8795  1069  0800               	movf	0,w
  8796  106A  00C9               	movwf	??_evaluate+3
  8797  106B  0849               	movf	??_evaluate+3,w
  8798  106C  00CC               	movwf	evaluate@full
  8799  106D  30FF               	movlw	255
  8800  106E  00C6               	movwf	??_evaluate
  8801  106F  0846               	movf	??_evaluate,w
  8802  1070  07CF               	addwf	evaluate@row,f
  8803  1071  1FCF               	btfss	evaluate@row,7
  8804  1072  2824               	goto	l5213
  8805  1073                     l5229:	
  8806  1073  3001               	movlw	1
  8807  1074  00C6               	movwf	??_evaluate
  8808  1075  0846               	movf	??_evaluate,w
  8809  1076  07CE               	addwf	evaluate@col,f
  8810  1077  3008               	movlw	8
  8811  1078  024E               	subwf	evaluate@col,w
  8812  1079  1C03               	skipc
  8813  107A  281A               	goto	l5207
  8814  107B                     l5233:	
  8815                           
  8816                           ;teris_16f886.c: 879: }
  8817                           ;teris_16f886.c: 880: }
  8818                           ;teris_16f886.c: 881: }
  8819                           ;teris_16f886.c: 882: debug_int1(1, "risk = %d", risk);
  8820  107B  300D               	movlw	low ((STR_82+9)| (0+32768))
  8821  107C  00BF               	movwf	debug_int1@f
  8822  107D  308C               	movlw	high ((STR_82+9)| (0+32768))
  8823  107E  00C0               	movwf	debug_int1@f+1
  8824  107F  084B               	movf	evaluate@risk+1,w
  8825  1080  00C2               	movwf	debug_int1@i+1
  8826  1081  084A               	movf	evaluate@risk,w
  8827  1082  00C1               	movwf	debug_int1@i
  8828  1083  3001               	movlw	1
  8829  1084  120A  158A  25AE   	fcall	_debug_int1
  8830                           
  8831                           ;teris_16f886.c: 884: return risk;
  8832  1087  1283               	bcf	3,5	;RP0=0, select bank0
  8833  1088  1303               	bcf	3,6	;RP1=0, select bank0
  8834  1089  084B               	movf	evaluate@risk+1,w
  8835  108A  00C5               	movwf	?_evaluate+1
  8836  108B  084A               	movf	evaluate@risk,w
  8837  108C  00C4               	movwf	?_evaluate
  8838  108D  0008               	return
  8839  108E                     __end_of_evaluate:	
  8840                           
  8841                           	psect	text24
  8842  1C1E                     __ptext24:	
  8843 ;; *************** function _delete_matrix *****************
  8844 ;; Defined at:
  8845 ;;		line 641 in file "teris_16f886.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;  matrix          2   36[BANK0 ] PTR struct .
  8848 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  8849 ;; Auto vars:     Size  Location     Type
  8850 ;;  row             1   41[BANK0 ] char 
  8851 ;;  count           1   40[BANK0 ] unsigned char 
  8852 ;; Return value:  Size  Location     Type
  8853 ;;                  1    wreg      unsigned char 
  8854 ;; Registers used:
  8855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8861 ;;      Params:         0       2       0       0       0
  8862 ;;      Locals:         0       2       0       0       0
  8863 ;;      Temps:          0       2       0       0       0
  8864 ;;      Totals:         0       6       0       0       0
  8865 ;;Total ram usage:        6 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; Hardware stack levels required when called:    3
  8868 ;; This function calls:
  8869 ;;		_debug_int1
  8870 ;;		_delete_row
  8871 ;;		_is_row_full
  8872 ;; This function is called by:
  8873 ;;		_find_best_solution
  8874 ;;		_main
  8875 ;; This function uses a non-reentrant model
  8876 ;;
  8877                           
  8878                           
  8879                           ;psect for function _delete_matrix
  8880  1C1E                     _delete_matrix:	
  8881                           
  8882                           ;teris_16f886.c: 643: uint8_t count = 0;
  8883                           
  8884                           ;incstack = 0
  8885                           ; Regs used in _delete_matrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8886  1C1E  1283               	bcf	3,5	;RP0=0, select bank0
  8887  1C1F  1303               	bcf	3,6	;RP1=0, select bank0
  8888  1C20  01C8               	clrf	delete_matrix@count
  8889                           
  8890                           ;teris_16f886.c: 644: int8_t row = 8 - 1;
  8891  1C21  3007               	movlw	7
  8892  1C22  00C6               	movwf	??_delete_matrix
  8893  1C23  0846               	movf	??_delete_matrix,w
  8894  1C24  00C9               	movwf	delete_matrix@row
  8895  1C25                     l5067:	
  8896                           ;teris_16f886.c: 645: while(row >= 0)
  8897                           
  8898  1C25  1BC9               	btfsc	delete_matrix@row,7
  8899  1C26  2C54               	goto	l5069
  8900                           
  8901                           ;teris_16f886.c: 646: {
  8902                           ;teris_16f886.c: 647: if(is_row_full(matrix, row))
  8903  1C27  0844               	movf	delete_matrix@matrix,w
  8904  1C28  00F0               	movwf	is_row_full@matrix
  8905  1C29  0845               	movf	delete_matrix@matrix+1,w
  8906  1C2A  00F1               	movwf	is_row_full@matrix+1
  8907  1C2B  0849               	movf	delete_matrix@row,w
  8908  1C2C  00C6               	movwf	??_delete_matrix
  8909  1C2D  0846               	movf	??_delete_matrix,w
  8910  1C2E  00F2               	movwf	is_row_full@row
  8911  1C2F  160A  158A  2249  160A  158A  	fcall	_is_row_full
  8912  1C34  3A00               	xorlw	0
  8913  1C35  1903               	skipnz
  8914  1C36  2C4D               	goto	l5065
  8915                           
  8916                           ;teris_16f886.c: 648: {
  8917                           ;teris_16f886.c: 649: delete_row(matrix, row);
  8918  1C37  1283               	bcf	3,5	;RP0=0, select bank0
  8919  1C38  1303               	bcf	3,6	;RP1=0, select bank0
  8920  1C39  0844               	movf	delete_matrix@matrix,w
  8921  1C3A  00FB               	movwf	delete_row@matrix
  8922  1C3B  0845               	movf	delete_matrix@matrix+1,w
  8923  1C3C  00FC               	movwf	delete_row@matrix+1
  8924  1C3D  0849               	movf	delete_matrix@row,w
  8925  1C3E  00C6               	movwf	??_delete_matrix
  8926  1C3F  0846               	movf	??_delete_matrix,w
  8927  1C40  00FD               	movwf	delete_row@row
  8928  1C41  160A  158A  278B  160A  158A  	fcall	_delete_row
  8929                           
  8930                           ;teris_16f886.c: 650: count++;
  8931  1C46  3001               	movlw	1
  8932  1C47  1283               	bcf	3,5	;RP0=0, select bank0
  8933  1C48  1303               	bcf	3,6	;RP1=0, select bank0
  8934  1C49  00C6               	movwf	??_delete_matrix
  8935  1C4A  0846               	movf	??_delete_matrix,w
  8936  1C4B  07C8               	addwf	delete_matrix@count,f
  8937                           
  8938                           ;teris_16f886.c: 651: }
  8939  1C4C  2C25               	goto	l5067
  8940  1C4D                     l5065:	
  8941                           
  8942                           ;teris_16f886.c: 652: else
  8943                           ;teris_16f886.c: 653: {
  8944                           ;teris_16f886.c: 654: row--;
  8945  1C4D  30FF               	movlw	255
  8946  1C4E  1283               	bcf	3,5	;RP0=0, select bank0
  8947  1C4F  1303               	bcf	3,6	;RP1=0, select bank0
  8948  1C50  00C6               	movwf	??_delete_matrix
  8949  1C51  0846               	movf	??_delete_matrix,w
  8950  1C52  07C9               	addwf	delete_matrix@row,f
  8951  1C53  2C25               	goto	l5067
  8952  1C54                     l5069:	
  8953                           
  8954                           ;teris_16f886.c: 655: }
  8955                           ;teris_16f886.c: 656: }
  8956                           ;teris_16f886.c: 657: debug_int1(1, "delete_matrix count = %d", count);
  8957  1C54  3078               	movlw	low (STR_28| (0+32768))
  8958  1C55  00BF               	movwf	debug_int1@f
  8959  1C56  308A               	movlw	high (STR_28| (0+32768))
  8960  1C57  00C0               	movwf	debug_int1@f+1
  8961  1C58  0848               	movf	delete_matrix@count,w
  8962  1C59  00C6               	movwf	??_delete_matrix
  8963  1C5A  01C7               	clrf	??_delete_matrix+1
  8964  1C5B  0846               	movf	??_delete_matrix,w
  8965  1C5C  00C1               	movwf	debug_int1@i
  8966  1C5D  0847               	movf	??_delete_matrix+1,w
  8967  1C5E  00C2               	movwf	debug_int1@i+1
  8968  1C5F  3001               	movlw	1
  8969  1C60  120A  158A  25AE   	fcall	_debug_int1
  8970                           
  8971                           ;teris_16f886.c: 659: return count;
  8972  1C63  1283               	bcf	3,5	;RP0=0, select bank0
  8973  1C64  1303               	bcf	3,6	;RP1=0, select bank0
  8974  1C65  0848               	movf	delete_matrix@count,w
  8975  1C66  0008               	return
  8976  1C67                     __end_of_delete_matrix:	
  8977                           
  8978                           	psect	text25
  8979  1A49                     __ptext25:	
  8980 ;; *************** function _is_row_full *****************
  8981 ;; Defined at:
  8982 ;;		line 607 in file "teris_16f886.c"
  8983 ;; Parameters:    Size  Location     Type
  8984 ;;  matrix          2    0[COMMON] PTR const struct .
  8985 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  8986 ;;  row             1    2[COMMON] unsigned char 
  8987 ;; Auto vars:     Size  Location     Type
  8988 ;;  col             1    8[COMMON] unsigned char 
  8989 ;; Return value:  Size  Location     Type
  8990 ;;                  1    wreg      unsigned char 
  8991 ;; Registers used:
  8992 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8993 ;; Tracked objects:
  8994 ;;		On entry : 0/0
  8995 ;;		On exit  : 0/0
  8996 ;;		Unchanged: 0/0
  8997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8998 ;;      Params:         3       0       0       0       0
  8999 ;;      Locals:         1       0       0       0       0
  9000 ;;      Temps:          5       0       0       0       0
  9001 ;;      Totals:         9       0       0       0       0
  9002 ;;Total ram usage:        9 bytes
  9003 ;; Hardware stack levels used:    1
  9004 ;; This function calls:
  9005 ;;		Nothing
  9006 ;; This function is called by:
  9007 ;;		_delete_matrix
  9008 ;; This function uses a non-reentrant model
  9009 ;;
  9010                           
  9011                           
  9012                           ;psect for function _is_row_full
  9013  1A49                     _is_row_full:	
  9014                           
  9015                           ;teris_16f886.c: 609: for(uint8_t col = 0; col < 8; col++)
  9016                           
  9017                           ;incstack = 0
  9018                           ; Regs used in _is_row_full: [wreg-fsr0h+status,2+status,0]
  9019  1A49  01F8               	clrf	is_row_full@col
  9020  1A4A  3008               	movlw	8
  9021  1A4B  0278               	subwf	is_row_full@col,w
  9022  1A4C  1803               	btfsc	3,0
  9023  1A4D  2A77               	goto	l3579
  9024  1A4E                     l3569:	
  9025                           
  9026                           ;teris_16f886.c: 610: {
  9027                           ;teris_16f886.c: 611: if(matrix->data[row][col] == 0)
  9028  1A4E  0872               	movf	is_row_full@row,w
  9029  1A4F  00F3               	movwf	??_is_row_full
  9030  1A50  3002               	movlw	2
  9031  1A51                     u4505:	
  9032  1A51  1003               	clrc
  9033  1A52  0DF3               	rlf	??_is_row_full,f
  9034  1A53  3EFF               	addlw	-1
  9035  1A54  1D03               	skipz
  9036  1A55  2A51               	goto	u4505
  9037  1A56  1003               	clrc
  9038  1A57  0D73               	rlf	??_is_row_full,w
  9039  1A58  0770               	addwf	is_row_full@matrix,w
  9040  1A59  00F4               	movwf	??_is_row_full+1
  9041  1A5A  0871               	movf	is_row_full@matrix+1,w
  9042  1A5B  1803               	skipnc
  9043  1A5C  3E01               	addlw	1
  9044  1A5D  00F5               	movwf	??_is_row_full+2
  9045  1A5E  0878               	movf	is_row_full@col,w
  9046  1A5F  0774               	addwf	??_is_row_full+1,w
  9047  1A60  00F6               	movwf	??_is_row_full+3
  9048  1A61  0875               	movf	??_is_row_full+2,w
  9049  1A62  1803               	skipnc
  9050  1A63  3E01               	addlw	1
  9051  1A64  00F7               	movwf	??_is_row_full+4
  9052  1A65  0876               	movf	??_is_row_full+3,w
  9053  1A66  0084               	movwf	4
  9054  1A67  1783               	bsf	3,7
  9055  1A68  1C77               	btfss	??_is_row_full+4,0
  9056  1A69  1383               	bcf	3,7
  9057  1A6A  0800               	movf	0,w
  9058  1A6B  1D03               	btfss	3,2
  9059  1A6C  2A6F               	goto	l3575
  9060                           
  9061                           ;teris_16f886.c: 612: {
  9062                           ;teris_16f886.c: 613: return 0;
  9063  1A6D  3000               	movlw	0
  9064  1A6E  0008               	return
  9065  1A6F                     l3575:	
  9066  1A6F  3001               	movlw	1
  9067  1A70  00F3               	movwf	??_is_row_full
  9068  1A71  0873               	movf	??_is_row_full,w
  9069  1A72  07F8               	addwf	is_row_full@col,f
  9070  1A73  3008               	movlw	8
  9071  1A74  0278               	subwf	is_row_full@col,w
  9072  1A75  1C03               	skipc
  9073  1A76  2A4E               	goto	l3569
  9074  1A77                     l3579:	
  9075                           
  9076                           ;teris_16f886.c: 614: }
  9077                           ;teris_16f886.c: 615: }
  9078                           ;teris_16f886.c: 616: return 1;
  9079  1A77  3001               	movlw	1
  9080  1A78  0008               	return
  9081  1A79                     __end_of_is_row_full:	
  9082                           
  9083                           	psect	text26
  9084  1F8B                     __ptext26:	
  9085 ;; *************** function _delete_row *****************
  9086 ;; Defined at:
  9087 ;;		line 618 in file "teris_16f886.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;  matrix          2   11[COMMON] PTR struct .
  9090 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  9091 ;;  row             1   13[COMMON] unsigned char 
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;  len             2    4[BANK0 ] unsigned int 
  9094 ;;  i               1    6[BANK0 ] char 
  9095 ;; Return value:  Size  Location     Type
  9096 ;;                  1    wreg      void 
  9097 ;; Registers used:
  9098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9099 ;; Tracked objects:
  9100 ;;		On entry : 0/0
  9101 ;;		On exit  : 0/0
  9102 ;;		Unchanged: 0/0
  9103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9104 ;;      Params:         3       0       0       0       0
  9105 ;;      Locals:         0       3       0       0       0
  9106 ;;      Temps:          0       4       0       0       0
  9107 ;;      Totals:         3       7       0       0       0
  9108 ;;Total ram usage:       10 bytes
  9109 ;; Hardware stack levels used:    1
  9110 ;; Hardware stack levels required when called:    1
  9111 ;; This function calls:
  9112 ;;		_memcpy
  9113 ;;		_memset
  9114 ;; This function is called by:
  9115 ;;		_delete_matrix
  9116 ;; This function uses a non-reentrant model
  9117 ;;
  9118                           
  9119                           
  9120                           ;psect for function _delete_row
  9121  1F8B                     _delete_row:	
  9122                           
  9123                           ;teris_16f886.c: 620: for(int8_t i = 8 - 1; i >= 0; i--)
  9124                           
  9125                           ;incstack = 0
  9126                           ; Regs used in _delete_row: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9127  1F8B  3007               	movlw	7
  9128  1F8C  1283               	bcf	3,5	;RP0=0, select bank0
  9129  1F8D  1303               	bcf	3,6	;RP1=0, select bank0
  9130  1F8E  00A0               	movwf	??_delete_row
  9131  1F8F  0820               	movf	??_delete_row,w
  9132  1F90  00A6               	movwf	delete_row@i
  9133  1F91                     L16:	
  9134  1F91  1BA6               	btfsc	delete_row@i,7
  9135  1F92  0008               	return
  9136                           
  9137                           ;teris_16f886.c: 621: {
  9138                           ;teris_16f886.c: 622: if(i <= row)
  9139  1F93  0826               	movf	delete_row@i,w
  9140  1F94  00A0               	movwf	??_delete_row
  9141  1F95  01A1               	clrf	??_delete_row+1
  9142  1F96  1BA0               	btfsc	??_delete_row,7
  9143  1F97  03A1               	decf	??_delete_row+1,f
  9144  1F98  0821               	movf	??_delete_row+1,w
  9145  1F99  3A80               	xorlw	128
  9146  1F9A  3C80               	sublw	128
  9147  1F9B  1D03               	skipz
  9148  1F9C  2F9F               	goto	u6945
  9149  1F9D  0820               	movf	??_delete_row,w
  9150  1F9E  027D               	subwf	delete_row@row,w
  9151  1F9F                     u6945:	
  9152  1F9F  1C03               	skipc
  9153  1FA0  2FF9               	goto	l4967
  9154                           
  9155                           ;teris_16f886.c: 623: {
  9156                           ;teris_16f886.c: 624: if(i > 0)
  9157  1FA1  1283               	bcf	3,5	;RP0=0, select bank0
  9158  1FA2  1303               	bcf	3,6	;RP1=0, select bank0
  9159  1FA3  0826               	movf	delete_row@i,w
  9160  1FA4  3A80               	xorlw	128
  9161  1FA5  3E7F               	addlw	-129
  9162  1FA6  1C03               	skipc
  9163  1FA7  2FDB               	goto	l4965
  9164                           
  9165                           ;teris_16f886.c: 625: {
  9166                           ;teris_16f886.c: 629: register size_t len;
  9167                           ;teris_16f886.c: 631: len = 8*sizeof(uint8_t);
  9168  1FA8  3008               	movlw	8
  9169  1FA9  00A4               	movwf	delete_row@len
  9170  1FAA  3000               	movlw	0
  9171  1FAB  00A5               	movwf	delete_row@len+1
  9172                           
  9173                           ;teris_16f886.c: 632: memcpy(matrix->data[i], matrix->data[i - 1], len);
  9174  1FAC  0826               	movf	delete_row@i,w
  9175  1FAD  00A0               	movwf	??_delete_row
  9176  1FAE  3002               	movlw	2
  9177  1FAF                     u6965:	
  9178  1FAF  1003               	clrc
  9179  1FB0  0DA0               	rlf	??_delete_row,f
  9180  1FB1  3EFF               	addlw	-1
  9181  1FB2  1D03               	skipz
  9182  1FB3  2FAF               	goto	u6965
  9183  1FB4  1003               	clrc
  9184  1FB5  0D20               	rlf	??_delete_row,w
  9185  1FB6  077B               	addwf	delete_row@matrix,w
  9186  1FB7  00F0               	movwf	memcpy@d1
  9187  1FB8  087C               	movf	delete_row@matrix+1,w
  9188  1FB9  1803               	skipnc
  9189  1FBA  3E01               	addlw	1
  9190  1FBB  00F1               	movwf	memcpy@d1+1
  9191  1FBC  0826               	movf	delete_row@i,w
  9192  1FBD  00A1               	movwf	??_delete_row+1
  9193  1FBE  3002               	movlw	2
  9194  1FBF                     u6975:	
  9195  1FBF  1003               	clrc
  9196  1FC0  0DA1               	rlf	??_delete_row+1,f
  9197  1FC1  3EFF               	addlw	-1
  9198  1FC2  1D03               	skipz
  9199  1FC3  2FBF               	goto	u6975
  9200  1FC4  1003               	clrc
  9201  1FC5  0D21               	rlf	??_delete_row+1,w
  9202  1FC6  3EF8               	addlw	248
  9203  1FC7  077B               	addwf	delete_row@matrix,w
  9204  1FC8  00A2               	movwf	??_delete_row+2
  9205  1FC9  087C               	movf	delete_row@matrix+1,w
  9206  1FCA  1803               	skipnc
  9207  1FCB  3E01               	addlw	1
  9208  1FCC  00A3               	movwf	??_delete_row+3
  9209  1FCD  0822               	movf	??_delete_row+2,w
  9210  1FCE  00F2               	movwf	memcpy@s1
  9211  1FCF  0823               	movf	??_delete_row+3,w
  9212  1FD0  00F3               	movwf	memcpy@s1+1
  9213  1FD1  0825               	movf	delete_row@len+1,w
  9214  1FD2  00F5               	movwf	memcpy@n+1
  9215  1FD3  0824               	movf	delete_row@len,w
  9216  1FD4  00F4               	movwf	memcpy@n
  9217  1FD5  160A  158A  21F5  160A  158A  	fcall	_memcpy
  9218                           
  9219                           ;teris_16f886.c: 633: }
  9220  1FDA  2FF9               	goto	l4967
  9221  1FDB                     l4965:	
  9222                           
  9223                           ;teris_16f886.c: 634: else
  9224                           ;teris_16f886.c: 635: {
  9225                           ;teris_16f886.c: 636: memset(matrix->data[i], 0, 8*sizeof(uint8_t));
  9226  1FDB  1283               	bcf	3,5	;RP0=0, select bank0
  9227  1FDC  1303               	bcf	3,6	;RP1=0, select bank0
  9228  1FDD  0826               	movf	delete_row@i,w
  9229  1FDE  00A0               	movwf	??_delete_row
  9230  1FDF  3002               	movlw	2
  9231  1FE0                     u6985:	
  9232  1FE0  1003               	clrc
  9233  1FE1  0DA0               	rlf	??_delete_row,f
  9234  1FE2  3EFF               	addlw	-1
  9235  1FE3  1D03               	skipz
  9236  1FE4  2FE0               	goto	u6985
  9237  1FE5  1003               	clrc
  9238  1FE6  0D20               	rlf	??_delete_row,w
  9239  1FE7  077B               	addwf	delete_row@matrix,w
  9240  1FE8  00F0               	movwf	memset@p1
  9241  1FE9  087C               	movf	delete_row@matrix+1,w
  9242  1FEA  1803               	skipnc
  9243  1FEB  3E01               	addlw	1
  9244  1FEC  00F1               	movwf	memset@p1+1
  9245  1FED  3000               	movlw	0
  9246  1FEE  00F2               	movwf	memset@c
  9247  1FEF  00F3               	movwf	memset@c+1
  9248  1FF0  3008               	movlw	8
  9249  1FF1  00F4               	movwf	memset@n
  9250  1FF2  3000               	movlw	0
  9251  1FF3  00F5               	movwf	memset@n+1
  9252  1FF4  160A  158A  2108  160A  158A  	fcall	_memset
  9253  1FF9                     l4967:	
  9254  1FF9  30FF               	movlw	255
  9255  1FFA  1283               	bcf	3,5	;RP0=0, select bank0
  9256  1FFB  1303               	bcf	3,6	;RP1=0, select bank0
  9257  1FFC  00A0               	movwf	??_delete_row
  9258  1FFD  0820               	movf	??_delete_row,w
  9259  1FFE  07A6               	addwf	delete_row@i,f
  9260  1FFF  2F91               	goto	L16
  9261  2000                     __end_of_delete_row:	
  9262                           
  9263                           	psect	text27
  9264  19F5                     __ptext27:	
  9265 ;; *************** function _memcpy *****************
  9266 ;; Defined at:
  9267 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  9268 ;; Parameters:    Size  Location     Type
  9269 ;;  d1              2    0[COMMON] PTR void 
  9270 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9271 ;;  s1              2    2[COMMON] PTR const void 
  9272 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9273 ;;  n               2    4[COMMON] unsigned int 
  9274 ;; Auto vars:     Size  Location     Type
  9275 ;;  s               2    9[COMMON] PTR const unsigned char 
  9276 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9277 ;;  d               2    7[COMMON] PTR unsigned char 
  9278 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9279 ;; Return value:  Size  Location     Type
  9280 ;;                  2    0[COMMON] PTR void 
  9281 ;; Registers used:
  9282 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9283 ;; Tracked objects:
  9284 ;;		On entry : 0/0
  9285 ;;		On exit  : 0/0
  9286 ;;		Unchanged: 0/0
  9287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9288 ;;      Params:         6       0       0       0       0
  9289 ;;      Locals:         4       0       0       0       0
  9290 ;;      Temps:          1       0       0       0       0
  9291 ;;      Totals:        11       0       0       0       0
  9292 ;;Total ram usage:       11 bytes
  9293 ;; Hardware stack levels used:    1
  9294 ;; This function calls:
  9295 ;;		Nothing
  9296 ;; This function is called by:
  9297 ;;		_delete_row
  9298 ;;		_merge1
  9299 ;; This function uses a non-reentrant model
  9300 ;;
  9301                           
  9302                           
  9303                           ;psect for function _memcpy
  9304  19F5                     _memcpy:	
  9305                           
  9306                           ;incstack = 0
  9307                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  9308  19F5  0872               	movf	memcpy@s1,w
  9309  19F6  00F9               	movwf	memcpy@s
  9310  19F7  0873               	movf	memcpy@s1+1,w
  9311  19F8  00FA               	movwf	memcpy@s+1
  9312  19F9  0870               	movf	memcpy@d1,w
  9313  19FA  00F7               	movwf	memcpy@d
  9314  19FB  0871               	movf	memcpy@d1+1,w
  9315  19FC  00F8               	movwf	memcpy@d+1
  9316  19FD                     l3471:	
  9317  19FD  3001               	movlw	1
  9318  19FE  02F4               	subwf	memcpy@n,f
  9319  19FF  3000               	movlw	0
  9320  1A00  1C03               	skipc
  9321  1A01  03F5               	decf	memcpy@n+1,f
  9322  1A02  02F5               	subwf	memcpy@n+1,f
  9323  1A03  0A74               	incf	memcpy@n,w
  9324  1A04  1903               	btfsc	3,2
  9325  1A05  0A75               	incf	memcpy@n+1,w
  9326  1A06  1903               	btfsc	3,2
  9327  1A07  0008               	return
  9328  1A08  0879               	movf	memcpy@s,w
  9329  1A09  0084               	movwf	4
  9330  1A0A  1783               	bsf	3,7
  9331  1A0B  1C7A               	btfss	memcpy@s+1,0
  9332  1A0C  1383               	bcf	3,7
  9333  1A0D  0800               	movf	0,w
  9334  1A0E  00F6               	movwf	??_memcpy
  9335  1A0F  0877               	movf	memcpy@d,w
  9336  1A10  0084               	movwf	4
  9337  1A11  1383               	bcf	3,7
  9338  1A12  1878               	btfsc	memcpy@d+1,0
  9339  1A13  1783               	bsf	3,7
  9340  1A14  0876               	movf	??_memcpy,w
  9341  1A15  0080               	movwf	0
  9342  1A16  3001               	movlw	1
  9343  1A17  07F9               	addwf	memcpy@s,f
  9344  1A18  1803               	skipnc
  9345  1A19  0AFA               	incf	memcpy@s+1,f
  9346  1A1A  3001               	movlw	1
  9347  1A1B  07F7               	addwf	memcpy@d,f
  9348  1A1C  1803               	skipnc
  9349  1A1D  0AF8               	incf	memcpy@d+1,f
  9350  1A1E  29FD               	goto	l3471
  9351  1A1F                     __end_of_memcpy:	
  9352                           ;	Return value of _memcpy is never used
  9353                           
  9354                           
  9355                           	psect	text28
  9356  0DAE                     __ptext28:	
  9357 ;; *************** function _debug_int1 *****************
  9358 ;; Defined at:
  9359 ;;		line 314 in file "teris_16f886.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;  enable          1    wreg     unsigned char 
  9362 ;;  f               2   31[BANK0 ] PTR const unsigned char 
  9363 ;;		 -> STR_96(13), STR_94(23), STR_92(15), STR_91(19), 
  9364 ;;		 -> STR_90(19), STR_89(20), STR_88(16), STR_87(15), 
  9365 ;;		 -> STR_84(15), STR_83(19), STR_82(19), STR_81(20), 
  9366 ;;		 -> STR_80(16), STR_79(15), STR_71(22), STR_64(15), 
  9367 ;;		 -> STR_58(14), STR_57(10), STR_56(11), STR_55(9), 
  9368 ;;		 -> STR_54(12), STR_53(9), STR_52(7), STR_50(21), 
  9369 ;;		 -> STR_49(16), STR_48(15), STR_47(10), STR_28(25), 
  9370 ;;		 -> STR_13(10), 
  9371 ;;  i               2   33[BANK0 ] int 
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;  enable          1   35[BANK0 ] unsigned char 
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  1    wreg      void 
  9376 ;; Registers used:
  9377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9383 ;;      Params:         0       4       0       0       0
  9384 ;;      Locals:         0       1       0       0       0
  9385 ;;      Temps:          0       0       0       0       0
  9386 ;;      Totals:         0       5       0       0       0
  9387 ;;Total ram usage:        5 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    2
  9390 ;; This function calls:
  9391 ;;		_USARTWriteString
  9392 ;;		_sprintf
  9393 ;; This function is called by:
  9394 ;;		_delete_matrix
  9395 ;;		_evaluate
  9396 ;;		_left_most
  9397 ;;		_right_most
  9398 ;;		_get_high
  9399 ;;		_get_high_after_merge
  9400 ;;		_get_holes_after_merge
  9401 ;;		_find_best_solution
  9402 ;;		_main
  9403 ;;		_printf_debug_all_MATRIX44
  9404 ;; This function uses a non-reentrant model
  9405 ;;
  9406                           
  9407                           
  9408                           ;psect for function _debug_int1
  9409  0DAE                     _debug_int1:	
  9410                           
  9411                           ;incstack = 0
  9412                           ; Regs used in _debug_int1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9413                           ;debug_int1@enable stored from wreg
  9414  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  9415  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  9416  0DB0  00C3               	movwf	debug_int1@enable
  9417                           
  9418                           ;teris_16f886.c: 316: if(enable == 1)
  9419  0DB1  0343               	decf	debug_int1@enable,w
  9420  0DB2  1D03               	btfss	3,2
  9421  0DB3  0008               	return
  9422                           
  9423                           ;teris_16f886.c: 317: {
  9424                           ;teris_16f886.c: 322: sprintf(g_debug, f, i);
  9425  0DB4  083F               	movf	debug_int1@f,w
  9426  0DB5  00A0               	movwf	sprintf@f
  9427  0DB6  0840               	movf	debug_int1@f+1,w
  9428  0DB7  00A1               	movwf	sprintf@f+1
  9429  0DB8  0842               	movf	debug_int1@i+1,w
  9430  0DB9  00A3               	movwf	?_sprintf+3
  9431  0DBA  0841               	movf	debug_int1@i,w
  9432  0DBB  00A2               	movwf	?_sprintf+2
  9433  0DBC  3097               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9434  0DBD  120A  118A  22BA  120A  158A  	fcall	_sprintf
  9435                           
  9436                           ;teris_16f886.c: 323: USARTWriteString(g_debug);
  9437  0DC2  3097               	movlw	(low (_g_debug| (0+256)))& (0+255)
  9438  0DC3  00F1               	movwf	USARTWriteString@str
  9439  0DC4  3001               	movlw	1
  9440  0DC5  00F2               	movwf	USARTWriteString@str+1
  9441  0DC6  160A  158A  2180  120A  158A  	fcall	_USARTWriteString
  9442                           
  9443                           ;teris_16f886.c: 324: USARTWriteString("\r\n");
  9444  0DCB  30A5               	movlw	low (STR_1| (0+32768))
  9445  0DCC  00F1               	movwf	USARTWriteString@str
  9446  0DCD  308D               	movlw	high (STR_1| (0+32768))
  9447  0DCE  00F2               	movwf	USARTWriteString@str+1
  9448  0DCF  160A  158A  2180   	fcall	_USARTWriteString
  9449  0DD2  0008               	return
  9450  0DD3                     __end_of_debug_int1:	
  9451                           
  9452                           	psect	text29
  9453  02BA                     __ptext29:	
  9454 ;; *************** function _sprintf *****************
  9455 ;; Defined at:
  9456 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  9457 ;; Parameters:    Size  Location     Type
  9458 ;;  sp              1    wreg     PTR unsigned char 
  9459 ;;		 -> g_debug(32), 
  9460 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  9461 ;;		 -> STR_96(13), STR_94(23), STR_92(15), STR_91(19), 
  9462 ;;		 -> STR_90(19), STR_89(20), STR_88(16), STR_87(15), 
  9463 ;;		 -> STR_84(15), STR_83(19), STR_82(19), STR_81(20), 
  9464 ;;		 -> STR_80(16), STR_79(15), STR_77(18), STR_76(19), 
  9465 ;;		 -> STR_75(18), STR_74(19), STR_73(18), STR_72(17), 
  9466 ;;		 -> STR_71(22), STR_70(18), STR_69(19), STR_68(18), 
  9467 ;;		 -> STR_67(19), STR_66(18), STR_65(20), STR_64(15), 
  9468 ;;		 -> STR_63(19), STR_58(14), STR_57(10), STR_56(11), 
  9469 ;;		 -> STR_55(9), STR_54(12), STR_53(9), STR_52(7), 
  9470 ;;		 -> STR_50(21), STR_49(16), STR_48(15), STR_47(10), 
  9471 ;;		 -> STR_46(15), STR_44(15), STR_39(19), STR_37(19), 
  9472 ;;		 -> STR_35(19), STR_31(24), STR_30(24), STR_28(25), 
  9473 ;;		 -> STR_14(27), STR_13(10), 
  9474 ;; Auto vars:     Size  Location     Type
  9475 ;;  sp              1   28[BANK0 ] PTR unsigned char 
  9476 ;;		 -> g_debug(32), 
  9477 ;;  idx             1   17[BANK0 ] unsigned char 
  9478 ;;  tmpval          4    0        struct .
  9479 ;;  flag            2   29[BANK0 ] unsigned short 
  9480 ;;  width           2   25[BANK0 ] int 
  9481 ;;  val             2   22[BANK0 ] unsigned int 
  9482 ;;  len             2   19[BANK0 ] unsigned int 
  9483 ;;  c               1   27[BANK0 ] char 
  9484 ;;  prec            1   24[BANK0 ] char 
  9485 ;;  ap              1   21[BANK0 ] PTR void [1]
  9486 ;;		 -> ?_sprintf(2), 
  9487 ;;  cp              1   18[BANK0 ] PTR const unsigned char 
  9488 ;;		 -> sprintf@c(1), 
  9489 ;; Return value:  Size  Location     Type
  9490 ;;                  2    0[BANK0 ] int 
  9491 ;; Registers used:
  9492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9493 ;; Tracked objects:
  9494 ;;		On entry : 0/0
  9495 ;;		On exit  : 0/0
  9496 ;;		Unchanged: 0/0
  9497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9498 ;;      Params:         0       8       0       0       0
  9499 ;;      Locals:         0      20       0       0       0
  9500 ;;      Temps:          0       3       0       0       0
  9501 ;;      Totals:         0      31       0       0       0
  9502 ;;Total ram usage:       31 bytes
  9503 ;; Hardware stack levels used:    1
  9504 ;; Hardware stack levels required when called:    1
  9505 ;; This function calls:
  9506 ;;		___bmul
  9507 ;;		___lwdiv
  9508 ;;		___lwmod
  9509 ;;		___wmul
  9510 ;;		_isdigit
  9511 ;; This function is called by:
  9512 ;;		_debug_int1
  9513 ;;		_debug_int2
  9514 ;;		_debug_int3
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           
  9519                           ;psect for function _sprintf
  9520  02BA                     _sprintf:	
  9521                           
  9522                           ;incstack = 0
  9523                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9524                           ;sprintf@sp stored from wreg
  9525  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  9526  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  9527  02BC  00BC               	movwf	sprintf@sp
  9528                           
  9529                           ;doprnt.c: 494: va_list ap;
  9530                           ;doprnt.c: 499: signed char c;
  9531                           ;doprnt.c: 501: int width;
  9532                           ;doprnt.c: 506: signed char prec;
  9533                           ;doprnt.c: 508: unsigned short flag;
  9534                           ;doprnt.c: 523: union {
  9535                           ;doprnt.c: 524: unsigned long vd;
  9536                           ;doprnt.c: 525: double integ;
  9537                           ;doprnt.c: 526: } tmpval;
  9538                           ;doprnt.c: 528: unsigned int val;
  9539                           ;doprnt.c: 529: unsigned len;
  9540                           ;doprnt.c: 530: const char * cp;
  9541                           ;doprnt.c: 533: *ap = __va_start();
  9542  02BD  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  9543  02BE  00A8               	movwf	??_sprintf
  9544  02BF  0828               	movf	??_sprintf,w
  9545  02C0  00B5               	movwf	sprintf@ap
  9546  02C1                     l3405:	
  9547                           ;doprnt.c: 536: while(c = *f++) {
  9548                           
  9549  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  9550  02C2  1303               	bcf	3,6	;RP1=0, select bank0
  9551  02C3  0821               	movf	sprintf@f+1,w
  9552  02C4  00A9               	movwf	??_sprintf+1
  9553  02C5  0820               	movf	sprintf@f,w
  9554  02C6  00A8               	movwf	??_sprintf
  9555  02C7  0AA0               	incf	sprintf@f,f
  9556  02C8  1903               	skipnz
  9557  02C9  0AA1               	incf	sprintf@f+1,f
  9558  02CA  0829               	movf	??_sprintf+1,w
  9559  02CB  00FF               	movwf	127
  9560  02CC  0828               	movf	??_sprintf,w
  9561  02CD  0084               	movwf	4
  9562  02CE  120A  158A  2000  120A  118A  	fcall	stringtab
  9563  02D3  00AA               	movwf	??_sprintf+2
  9564  02D4  082A               	movf	??_sprintf+2,w
  9565  02D5  00BB               	movwf	sprintf@c
  9566  02D6  083B               	movf	sprintf@c,w
  9567  02D7  1903               	btfsc	3,2
  9568  02D8  2FB5               	goto	l3407
  9569                           
  9570                           ;doprnt.c: 538: if(c != '%')
  9571  02D9  3025               	movlw	37
  9572  02DA  063B               	xorwf	sprintf@c,w
  9573  02DB  1903               	btfsc	3,2
  9574  02DC  2AE9               	goto	l3097
  9575                           
  9576                           ;doprnt.c: 540: {
  9577                           ;doprnt.c: 541: ((*sp++ = (c)));
  9578  02DD  083B               	movf	sprintf@c,w
  9579  02DE  00A8               	movwf	??_sprintf
  9580  02DF  083C               	movf	sprintf@sp,w
  9581  02E0  0084               	movwf	4
  9582  02E1  0828               	movf	??_sprintf,w
  9583  02E2  1783               	bsf	3,7	;select IRP bank2
  9584  02E3  0080               	movwf	0
  9585  02E4  3001               	movlw	1
  9586  02E5  00A8               	movwf	??_sprintf
  9587  02E6  0828               	movf	??_sprintf,w
  9588  02E7  07BC               	addwf	sprintf@sp,f
  9589                           
  9590                           ;doprnt.c: 542: continue;
  9591  02E8  2AC1               	goto	l3405
  9592  02E9                     l3097:	
  9593                           
  9594                           ;doprnt.c: 543: }
  9595                           ;doprnt.c: 546: width = 0;
  9596  02E9  01B9               	clrf	sprintf@width
  9597  02EA  01BA               	clrf	sprintf@width+1
  9598                           
  9599                           ;doprnt.c: 548: flag = 0;
  9600  02EB  01BD               	clrf	sprintf@flag
  9601  02EC  01BE               	clrf	sprintf@flag+1
  9602                           
  9603                           ;doprnt.c: 551: switch(*f) {
  9604                           
  9605                           ;doprnt.c: 550: for(;;) {
  9606  02ED  2AF9               	goto	l3101
  9607  02EE                     l527:	
  9608                           ;doprnt.c: 553: case '-':
  9609                           
  9610                           
  9611                           ;doprnt.c: 554: flag |= 0x08;
  9612  02EE  15BD               	bsf	sprintf@flag,3
  9613  02EF  2AF5               	goto	L19
  9614  02F0                     l529:	
  9615                           ;doprnt.c: 560: case ' ':
  9616                           
  9617                           ;doprnt.c: 556: continue;
  9618                           
  9619                           ;doprnt.c: 555: f++;
  9620                           
  9621                           
  9622                           ;doprnt.c: 561: flag |= 0x01;
  9623  02F0  143D               	bsf	sprintf@flag,0
  9624  02F1  2AF5               	goto	L19
  9625  02F2                     l530:	
  9626                           ;doprnt.c: 573: case '#':
  9627                           
  9628                           ;doprnt.c: 563: continue;
  9629                           
  9630                           ;doprnt.c: 562: f++;
  9631                           
  9632                           
  9633                           ;doprnt.c: 574: flag |= 0x800;
  9634  02F2  15BE               	bsf	sprintf@flag+1,3
  9635  02F3  2AF5               	goto	L19
  9636  02F4                     l531:	
  9637                           ;doprnt.c: 579: case '0':
  9638                           
  9639                           ;doprnt.c: 576: continue;
  9640                           
  9641                           ;doprnt.c: 575: f++;
  9642                           
  9643                           
  9644                           ;doprnt.c: 580: flag |= 0x04;
  9645  02F4  153D               	bsf	sprintf@flag,2
  9646  02F5                     L19:	
  9647                           
  9648                           ;doprnt.c: 581: f++;
  9649  02F5  3001               	movlw	1
  9650  02F6  07A0               	addwf	sprintf@f,f
  9651  02F7  1803               	skipnc
  9652  02F8  0AA1               	incf	sprintf@f+1,f
  9653  02F9                     l3101:	
  9654                           ;doprnt.c: 584: }
  9655                           
  9656                           ;doprnt.c: 582: continue;
  9657                           
  9658  02F9  0821               	movf	sprintf@f+1,w
  9659  02FA  00FF               	movwf	127
  9660  02FB  0820               	movf	sprintf@f,w
  9661  02FC  0084               	movwf	4
  9662  02FD  120A  158A  2000  120A  118A  	fcall	stringtab
  9663                           
  9664                           ; Switch size 1, requested type "space"
  9665                           ; Number of cases is 4, Range of values is 32 to 48
  9666                           ; switch strategies available:
  9667                           ; Name         Instructions Cycles
  9668                           ; simple_byte           13     7 (average)
  9669                           ; direct_byte           62    11 (fixed)
  9670                           ; jumptable            263     9 (fixed)
  9671                           ;	Chosen strategy is simple_byte
  9672  0302  3A20               	xorlw	32	; case 32
  9673  0303  1903               	skipnz
  9674  0304  2AF0               	goto	l529
  9675  0305  3A03               	xorlw	3	; case 35
  9676  0306  1903               	skipnz
  9677  0307  2AF2               	goto	l530
  9678  0308  3A0E               	xorlw	14	; case 45
  9679  0309  1903               	skipnz
  9680  030A  2AEE               	goto	l527
  9681  030B  3A1D               	xorlw	29	; case 48
  9682  030C  1903               	skipnz
  9683  030D  2AF4               	goto	l531
  9684  030E  2B0F               	goto	l533
  9685  030F                     l533:	
  9686                           ;doprnt.c: 586: }
  9687                           
  9688                           ;doprnt.c: 585: break;
  9689                           
  9690                           
  9691                           ;doprnt.c: 593: if(flag & 0x08)
  9692  030F  1DBD               	btfss	sprintf@flag,3
  9693  0310  2B15               	goto	l3105
  9694                           
  9695                           ;doprnt.c: 594: flag &= ~0x04;
  9696  0311  30FB               	movlw	251
  9697  0312  05BD               	andwf	sprintf@flag,f
  9698  0313  30FF               	movlw	255
  9699  0314  05BE               	andwf	sprintf@flag+1,f
  9700  0315                     l3105:	
  9701                           
  9702                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9703  0315  0821               	movf	sprintf@f+1,w
  9704  0316  00FF               	movwf	127
  9705  0317  0820               	movf	sprintf@f,w
  9706  0318  0084               	movwf	4
  9707  0319  120A  158A  2000  120A  118A  	fcall	stringtab
  9708  031E  160A  158A  2073  120A  118A  	fcall	_isdigit
  9709  0323  1C03               	btfss	3,0
  9710  0324  2B68               	goto	l3117
  9711                           
  9712                           ;doprnt.c: 598: width = 0;
  9713  0325  1283               	bcf	3,5	;RP0=0, select bank0
  9714  0326  1303               	bcf	3,6	;RP1=0, select bank0
  9715  0327  01B9               	clrf	sprintf@width
  9716  0328  01BA               	clrf	sprintf@width+1
  9717  0329                     l3109:	
  9718                           ;doprnt.c: 599: do {
  9719                           
  9720                           
  9721                           ;doprnt.c: 600: width *= 10;
  9722  0329  300A               	movlw	10
  9723  032A  00F0               	movwf	___wmul@multiplier
  9724  032B  3000               	movlw	0
  9725  032C  00F1               	movwf	___wmul@multiplier+1
  9726  032D  1283               	bcf	3,5	;RP0=0, select bank0
  9727  032E  1303               	bcf	3,6	;RP1=0, select bank0
  9728  032F  083A               	movf	sprintf@width+1,w
  9729  0330  00F3               	movwf	___wmul@multiplicand+1
  9730  0331  0839               	movf	sprintf@width,w
  9731  0332  00F2               	movwf	___wmul@multiplicand
  9732  0333  160A  158A  215F  120A  118A  	fcall	___wmul
  9733  0338  0871               	movf	?___wmul+1,w
  9734  0339  1283               	bcf	3,5	;RP0=0, select bank0
  9735  033A  1303               	bcf	3,6	;RP1=0, select bank0
  9736  033B  00BA               	movwf	sprintf@width+1
  9737  033C  0870               	movf	?___wmul,w
  9738  033D  00B9               	movwf	sprintf@width
  9739                           
  9740                           ;doprnt.c: 601: width += *f++ - '0';
  9741  033E  0821               	movf	sprintf@f+1,w
  9742  033F  00FF               	movwf	127
  9743  0340  0820               	movf	sprintf@f,w
  9744  0341  0084               	movwf	4
  9745  0342  120A  158A  2000  120A  118A  	fcall	stringtab
  9746  0347  3ED0               	addlw	208
  9747  0348  00A8               	movwf	??_sprintf
  9748  0349  30FF               	movlw	255
  9749  034A  1803               	skipnc
  9750  034B  3000               	movlw	0
  9751  034C  00A9               	movwf	??_sprintf+1
  9752  034D  0828               	movf	??_sprintf,w
  9753  034E  07B9               	addwf	sprintf@width,f
  9754  034F  1803               	skipnc
  9755  0350  0ABA               	incf	sprintf@width+1,f
  9756  0351  0829               	movf	??_sprintf+1,w
  9757  0352  07BA               	addwf	sprintf@width+1,f
  9758  0353  3001               	movlw	1
  9759  0354  07A0               	addwf	sprintf@f,f
  9760  0355  1803               	skipnc
  9761  0356  0AA1               	incf	sprintf@f+1,f
  9762                           
  9763                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9764  0357  0821               	movf	sprintf@f+1,w
  9765  0358  00FF               	movwf	127
  9766  0359  0820               	movf	sprintf@f,w
  9767  035A  0084               	movwf	4
  9768  035B  120A  158A  2000  120A  118A  	fcall	stringtab
  9769  0360  160A  158A  2073  120A  118A  	fcall	_isdigit
  9770  0365  1C03               	btfss	3,0
  9771  0366  2B86               	goto	l3125
  9772  0367  2B29               	goto	l3109
  9773  0368                     l3117:	
  9774                           ;doprnt.c: 604: } else if(*f == '*') {
  9775                           
  9776  0368  1283               	bcf	3,5	;RP0=0, select bank0
  9777  0369  1303               	bcf	3,6	;RP1=0, select bank0
  9778  036A  0821               	movf	sprintf@f+1,w
  9779  036B  00FF               	movwf	127
  9780  036C  0820               	movf	sprintf@f,w
  9781  036D  0084               	movwf	4
  9782  036E  120A  158A  2000  120A  118A  	fcall	stringtab
  9783  0373  3A2A               	xorlw	42
  9784  0374  1D03               	skipz
  9785  0375  2B86               	goto	l3125
  9786                           
  9787                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  9788  0376  0835               	movf	sprintf@ap,w
  9789  0377  0084               	movwf	4
  9790  0378  1383               	bcf	3,7	;select IRP bank0
  9791  0379  0800               	movf	0,w
  9792  037A  00B9               	movwf	sprintf@width
  9793  037B  0A84               	incf	4,f
  9794  037C  0800               	movf	0,w
  9795  037D  00BA               	movwf	sprintf@width+1
  9796  037E  3002               	movlw	2
  9797  037F  00A8               	movwf	??_sprintf
  9798  0380  0828               	movf	??_sprintf,w
  9799  0381  07B5               	addwf	sprintf@ap,f
  9800                           
  9801                           ;doprnt.c: 606: f++;
  9802  0382  3001               	movlw	1
  9803  0383  07A0               	addwf	sprintf@f,f
  9804  0384  1803               	skipnc
  9805  0385  0AA1               	incf	sprintf@f+1,f
  9806  0386                     l3125:	
  9807                           
  9808                           ;doprnt.c: 608: }
  9809                           ;doprnt.c: 611: if(*f == '.') {
  9810  0386  1283               	bcf	3,5	;RP0=0, select bank0
  9811  0387  1303               	bcf	3,6	;RP1=0, select bank0
  9812  0388  0821               	movf	sprintf@f+1,w
  9813  0389  00FF               	movwf	127
  9814  038A  0820               	movf	sprintf@f,w
  9815  038B  0084               	movwf	4
  9816  038C  120A  158A  2000  120A  118A  	fcall	stringtab
  9817  0391  3A2E               	xorlw	46
  9818  0392  1D03               	skipz
  9819  0393  2BE8               	goto	l3143
  9820                           
  9821                           ;doprnt.c: 612: flag |= 0x4000;
  9822  0394  173E               	bsf	sprintf@flag+1,6
  9823                           
  9824                           ;doprnt.c: 613: f++;
  9825  0395  3001               	movlw	1
  9826  0396  07A0               	addwf	sprintf@f,f
  9827  0397  1803               	skipnc
  9828  0398  0AA1               	incf	sprintf@f+1,f
  9829                           
  9830                           ;doprnt.c: 615: if(*f == '*') {
  9831  0399  0821               	movf	sprintf@f+1,w
  9832  039A  00FF               	movwf	127
  9833  039B  0820               	movf	sprintf@f,w
  9834  039C  0084               	movwf	4
  9835  039D  120A  158A  2000  120A  118A  	fcall	stringtab
  9836  03A2  3A2A               	xorlw	42
  9837  03A3  1D03               	skipz
  9838  03A4  2BB5               	goto	l3137
  9839                           
  9840                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  9841  03A5  0835               	movf	sprintf@ap,w
  9842  03A6  0084               	movwf	4
  9843  03A7  1383               	bcf	3,7	;select IRP bank0
  9844  03A8  0800               	movf	0,w
  9845  03A9  00A8               	movwf	??_sprintf
  9846  03AA  0828               	movf	??_sprintf,w
  9847  03AB  00B8               	movwf	sprintf@prec
  9848  03AC  3002               	movlw	2
  9849  03AD  00A8               	movwf	??_sprintf
  9850  03AE  0828               	movf	??_sprintf,w
  9851  03AF  07B5               	addwf	sprintf@ap,f
  9852                           
  9853                           ;doprnt.c: 617: f++;
  9854  03B0  3001               	movlw	1
  9855  03B1  07A0               	addwf	sprintf@f,f
  9856  03B2  1803               	skipnc
  9857  03B3  0AA1               	incf	sprintf@f+1,f
  9858                           
  9859                           ;doprnt.c: 618: } else
  9860  03B4  2C84               	goto	l3195
  9861  03B5                     l3137:	
  9862                           
  9863                           ;doprnt.c: 620: {
  9864                           ;doprnt.c: 621: prec = 0;
  9865  03B5  01B8               	clrf	sprintf@prec
  9866  03B6                     l543:	
  9867                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  9868                           
  9869  03B6  0821               	movf	sprintf@f+1,w
  9870  03B7  00FF               	movwf	127
  9871  03B8  0820               	movf	sprintf@f,w
  9872  03B9  0084               	movwf	4
  9873  03BA  120A  158A  2000  120A  118A  	fcall	stringtab
  9874  03BF  160A  158A  2073  120A  118A  	fcall	_isdigit
  9875  03C4  1C03               	btfss	3,0
  9876  03C5  2C84               	goto	l3195
  9877                           
  9878                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  9879  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  9880  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  9881  03C8  0821               	movf	sprintf@f+1,w
  9882  03C9  00FF               	movwf	127
  9883  03CA  0820               	movf	sprintf@f,w
  9884  03CB  0084               	movwf	4
  9885  03CC  120A  158A  2000  120A  118A  	fcall	stringtab
  9886  03D1  00A8               	movwf	??_sprintf
  9887  03D2  300A               	movlw	10
  9888  03D3  00A9               	movwf	??_sprintf+1
  9889  03D4  0829               	movf	??_sprintf+1,w
  9890  03D5  00F0               	movwf	___bmul@multiplicand
  9891  03D6  0838               	movf	sprintf@prec,w
  9892  03D7  160A  158A  2081  120A  118A  	fcall	___bmul
  9893  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  9894  03DD  1303               	bcf	3,6	;RP1=0, select bank0
  9895  03DE  0728               	addwf	??_sprintf,w
  9896  03DF  3ED0               	addlw	-48
  9897  03E0  00AA               	movwf	??_sprintf+2
  9898  03E1  082A               	movf	??_sprintf+2,w
  9899  03E2  00B8               	movwf	sprintf@prec
  9900  03E3  3001               	movlw	1
  9901  03E4  07A0               	addwf	sprintf@f,f
  9902  03E5  1803               	skipnc
  9903  03E6  0AA1               	incf	sprintf@f+1,f
  9904  03E7  2BB6               	goto	l543
  9905  03E8                     l3143:	
  9906                           ;doprnt.c: 624: }
  9907                           ;doprnt.c: 625: } else {
  9908                           
  9909                           
  9910                           ;doprnt.c: 626: prec = 0;
  9911  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  9912  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  9913  03EA  01B8               	clrf	sprintf@prec
  9914                           
  9915                           ;doprnt.c: 630: }
  9916                           ;doprnt.c: 635: switch(c = *f++) {
  9917  03EB  2C84               	goto	l3195
  9918  03EC                     l550:	
  9919                           ;doprnt.c: 689: case 'o':
  9920                           
  9921                           ;doprnt.c: 638: goto alldone;
  9922                           
  9923                           ;doprnt.c: 637: case 0:
  9924                           
  9925                           
  9926                           ;doprnt.c: 691: flag |= 0x40;
  9927  03EC  173D               	bsf	sprintf@flag,6
  9928                           
  9929                           ;doprnt.c: 698: case 'i':
  9930                           ;doprnt.c: 699: break;
  9931                           
  9932                           ;doprnt.c: 697: case 'd':
  9933                           
  9934                           ;doprnt.c: 693: break;
  9935  03ED  2CB0               	goto	l3197
  9936  03EE                     l554:	
  9937                           ;doprnt.c: 712: case 'X':
  9938                           
  9939                           
  9940                           ;doprnt.c: 714: flag |= 0x20;
  9941  03EE  16BD               	bsf	sprintf@flag,5
  9942  03EF                     l555:	
  9943                           ;doprnt.c: 718: case 'x':
  9944                           
  9945                           
  9946                           ;doprnt.c: 721: flag |= 0x80;
  9947  03EF  17BD               	bsf	sprintf@flag,7
  9948                           
  9949                           ;doprnt.c: 723: break;
  9950  03F0  2CB0               	goto	l3197
  9951  03F1                     l3145:	
  9952                           ;doprnt.c: 750: dostring:
  9953                           
  9954                           
  9955                           ;doprnt.c: 753: if(prec && prec < len)
  9956  03F1  0838               	movf	sprintf@prec,w
  9957  03F2  1903               	btfsc	3,2
  9958  03F3  2C06               	goto	l3151
  9959  03F4  0838               	movf	sprintf@prec,w
  9960  03F5  00A8               	movwf	??_sprintf
  9961  03F6  01A9               	clrf	??_sprintf+1
  9962  03F7  1BA8               	btfsc	??_sprintf,7
  9963  03F8  03A9               	decf	??_sprintf+1,f
  9964  03F9  0834               	movf	sprintf@len+1,w
  9965  03FA  0229               	subwf	??_sprintf+1,w
  9966  03FB  1D03               	skipz
  9967  03FC  2BFF               	goto	u3655
  9968  03FD  0833               	movf	sprintf@len,w
  9969  03FE  0228               	subwf	??_sprintf,w
  9970  03FF                     u3655:	
  9971  03FF  1803               	skipnc
  9972  0400  2C06               	goto	l3151
  9973                           
  9974                           ;doprnt.c: 754: len = prec;
  9975  0401  0838               	movf	sprintf@prec,w
  9976  0402  00B3               	movwf	sprintf@len
  9977  0403  01B4               	clrf	sprintf@len+1
  9978  0404  1BB3               	btfsc	sprintf@len,7
  9979  0405  03B4               	decf	sprintf@len+1,f
  9980  0406                     l3151:	
  9981                           
  9982                           ;doprnt.c: 757: if(width > len)
  9983  0406  083A               	movf	sprintf@width+1,w
  9984  0407  0234               	subwf	sprintf@len+1,w
  9985  0408  1D03               	skipz
  9986  0409  2C0C               	goto	u3665
  9987  040A  0839               	movf	sprintf@width,w
  9988  040B  0233               	subwf	sprintf@len,w
  9989  040C                     u3665:	
  9990  040C  1803               	skipnc
  9991  040D  2C15               	goto	l3155
  9992                           
  9993                           ;doprnt.c: 758: width -= len;
  9994  040E  0833               	movf	sprintf@len,w
  9995  040F  02B9               	subwf	sprintf@width,f
  9996  0410  0834               	movf	sprintf@len+1,w
  9997  0411  1C03               	skipc
  9998  0412  03BA               	decf	sprintf@width+1,f
  9999  0413  02BA               	subwf	sprintf@width+1,f
 10000  0414  2C17               	goto	l3157
 10001  0415                     l3155:	
 10002                           
 10003                           ;doprnt.c: 759: else
 10004                           ;doprnt.c: 760: width = 0;
 10005  0415  01B9               	clrf	sprintf@width
 10006  0416  01BA               	clrf	sprintf@width+1
 10007  0417                     l3157:	
 10008                           
 10009                           ;doprnt.c: 762: if(!(flag & 0x08))
 10010  0417  1DBD               	btfss	sprintf@flag,3
 10011  0418  2C25               	goto	l3165
 10012  0419  2C44               	goto	l3173
 10013  041A                     l3161:	
 10014                           ;doprnt.c: 764: while(width--)
 10015                           
 10016                           
 10017                           ;doprnt.c: 765: ((*sp++ = (' ')));
 10018  041A  3020               	movlw	32
 10019  041B  00A8               	movwf	??_sprintf
 10020  041C  083C               	movf	sprintf@sp,w
 10021  041D  0084               	movwf	4
 10022  041E  0828               	movf	??_sprintf,w
 10023  041F  1783               	bsf	3,7	;select IRP bank2
 10024  0420  0080               	movwf	0
 10025  0421  3001               	movlw	1
 10026  0422  00A8               	movwf	??_sprintf
 10027  0423  0828               	movf	??_sprintf,w
 10028  0424  07BC               	addwf	sprintf@sp,f
 10029  0425                     l3165:	
 10030  0425  30FF               	movlw	255
 10031  0426  07B9               	addwf	sprintf@width,f
 10032  0427  1803               	skipnc
 10033  0428  0ABA               	incf	sprintf@width+1,f
 10034  0429  30FF               	movlw	255
 10035  042A  07BA               	addwf	sprintf@width+1,f
 10036  042B  0A39               	incf	sprintf@width,w
 10037  042C  1D03               	skipz
 10038  042D  2C1A               	goto	l3161
 10039  042E  0A3A               	incf	sprintf@width+1,w
 10040  042F  1903               	btfsc	3,2
 10041  0430  2C44               	goto	l3173
 10042  0431  2C1A               	goto	l3161
 10043  0432                     l3167:	
 10044                           ;doprnt.c: 767: while(len--)
 10045                           
 10046                           
 10047                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
 10048  0432  0832               	movf	sprintf@cp,w
 10049  0433  0084               	movwf	4
 10050  0434  1383               	bcf	3,7	;select IRP bank0
 10051  0435  0800               	movf	0,w
 10052  0436  00A8               	movwf	??_sprintf
 10053  0437  083C               	movf	sprintf@sp,w
 10054  0438  0084               	movwf	4
 10055  0439  0828               	movf	??_sprintf,w
 10056  043A  1783               	bsf	3,7	;select IRP bank2
 10057  043B  0080               	movwf	0
 10058  043C  3001               	movlw	1
 10059  043D  00A8               	movwf	??_sprintf
 10060  043E  0828               	movf	??_sprintf,w
 10061  043F  07B2               	addwf	sprintf@cp,f
 10062  0440  3001               	movlw	1
 10063  0441  00A8               	movwf	??_sprintf
 10064  0442  0828               	movf	??_sprintf,w
 10065  0443  07BC               	addwf	sprintf@sp,f
 10066  0444                     l3173:	
 10067  0444  3001               	movlw	1
 10068  0445  02B3               	subwf	sprintf@len,f
 10069  0446  3000               	movlw	0
 10070  0447  1C03               	skipc
 10071  0448  03B4               	decf	sprintf@len+1,f
 10072  0449  02B4               	subwf	sprintf@len+1,f
 10073  044A  0A33               	incf	sprintf@len,w
 10074  044B  1D03               	skipz
 10075  044C  2C32               	goto	l3167
 10076  044D  0A34               	incf	sprintf@len+1,w
 10077  044E  1D03               	btfss	3,2
 10078  044F  2C32               	goto	l3167
 10079                           
 10080                           ;doprnt.c: 770: if(flag & 0x08)
 10081  0450  19BD               	btfsc	sprintf@flag,3
 10082  0451  2C5E               	goto	l3181
 10083  0452  2AC1               	goto	l3405
 10084  0453                     l3177:	
 10085                           ;doprnt.c: 771: while(width--)
 10086                           
 10087                           
 10088                           ;doprnt.c: 772: ((*sp++ = (' ')));
 10089  0453  3020               	movlw	32
 10090  0454  00A8               	movwf	??_sprintf
 10091  0455  083C               	movf	sprintf@sp,w
 10092  0456  0084               	movwf	4
 10093  0457  0828               	movf	??_sprintf,w
 10094  0458  1783               	bsf	3,7	;select IRP bank2
 10095  0459  0080               	movwf	0
 10096  045A  3001               	movlw	1
 10097  045B  00A8               	movwf	??_sprintf
 10098  045C  0828               	movf	??_sprintf,w
 10099  045D  07BC               	addwf	sprintf@sp,f
 10100  045E                     l3181:	
 10101  045E  30FF               	movlw	255
 10102  045F  07B9               	addwf	sprintf@width,f
 10103  0460  1803               	skipnc
 10104  0461  0ABA               	incf	sprintf@width+1,f
 10105  0462  30FF               	movlw	255
 10106  0463  07BA               	addwf	sprintf@width+1,f
 10107  0464  0A39               	incf	sprintf@width,w
 10108  0465  1D03               	skipz
 10109  0466  2C53               	goto	l3177
 10110  0467  0A3A               	incf	sprintf@width+1,w
 10111  0468  1903               	btfsc	3,2
 10112  0469  2AC1               	goto	l3405
 10113  046A  2C53               	goto	l3177
 10114  046B                     l3183:	
 10115                           ;doprnt.c: 784: case 'c':
 10116                           
 10117                           ;doprnt.c: 774: continue;
 10118                           
 10119                           
 10120                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 10121  046B  0835               	movf	sprintf@ap,w
 10122  046C  0084               	movwf	4
 10123  046D  1383               	bcf	3,7	;select IRP bank0
 10124  046E  0800               	movf	0,w
 10125  046F  00A8               	movwf	??_sprintf
 10126  0470  0828               	movf	??_sprintf,w
 10127  0471  00BB               	movwf	sprintf@c
 10128  0472  3002               	movlw	2
 10129  0473  00A8               	movwf	??_sprintf
 10130  0474  0828               	movf	??_sprintf,w
 10131  0475  07B5               	addwf	sprintf@ap,f
 10132  0476                     l3187:	
 10133                           ;doprnt.c: 802: default:
 10134                           
 10135                           
 10136                           ;doprnt.c: 805: cp = (char *)&c;
 10137  0476  303B               	movlw	(low (sprintf@c| 0))& (0+255)
 10138  0477  00A8               	movwf	??_sprintf
 10139  0478  0828               	movf	??_sprintf,w
 10140  0479  00B2               	movwf	sprintf@cp
 10141                           
 10142                           ;doprnt.c: 806: len = 1;
 10143  047A  3001               	movlw	1
 10144  047B  00B3               	movwf	sprintf@len
 10145  047C  3000               	movlw	0
 10146  047D  00B4               	movwf	sprintf@len+1
 10147                           
 10148                           ;doprnt.c: 807: goto dostring;
 10149  047E  2BF1               	goto	l3145
 10150  047F                     l3191:	
 10151                           ;doprnt.c: 817: case 'u':
 10152                           
 10153                           
 10154                           ;doprnt.c: 818: flag |= 0xC0;
 10155  047F  30C0               	movlw	192
 10156  0480  04BD               	iorwf	sprintf@flag,f
 10157  0481  3000               	movlw	0
 10158  0482  04BE               	iorwf	sprintf@flag+1,f
 10159                           
 10160                           ;doprnt.c: 822: }
 10161                           
 10162                           ;doprnt.c: 819: break;
 10163  0483  2CB0               	goto	l3197
 10164  0484                     l3195:	
 10165  0484  1283               	bcf	3,5	;RP0=0, select bank0
 10166  0485  1303               	bcf	3,6	;RP1=0, select bank0
 10167  0486  0821               	movf	sprintf@f+1,w
 10168  0487  00A9               	movwf	??_sprintf+1
 10169  0488  0820               	movf	sprintf@f,w
 10170  0489  00A8               	movwf	??_sprintf
 10171  048A  0AA0               	incf	sprintf@f,f
 10172  048B  1903               	skipnz
 10173  048C  0AA1               	incf	sprintf@f+1,f
 10174  048D  0829               	movf	??_sprintf+1,w
 10175  048E  00FF               	movwf	127
 10176  048F  0828               	movf	??_sprintf,w
 10177  0490  0084               	movwf	4
 10178  0491  120A  158A  2000  120A  118A  	fcall	stringtab
 10179  0496  00BB               	movwf	sprintf@c
 10180                           
 10181                           ; Switch size 1, requested type "space"
 10182                           ; Number of cases is 8, Range of values is 0 to 120
 10183                           ; switch strategies available:
 10184                           ; Name         Instructions Cycles
 10185                           ; simple_byte           25    13 (average)
 10186                           ; jumptable            260     6 (fixed)
 10187                           ;	Chosen strategy is simple_byte
 10188  0497  3A00               	xorlw	0	; case 0
 10189  0498  1903               	skipnz
 10190  0499  2FB5               	goto	l3407
 10191  049A  3A58               	xorlw	88	; case 88
 10192  049B  1903               	skipnz
 10193  049C  2BEE               	goto	l554
 10194  049D  3A3B               	xorlw	59	; case 99
 10195  049E  1903               	skipnz
 10196  049F  2C6B               	goto	l3183
 10197  04A0  3A07               	xorlw	7	; case 100
 10198  04A1  1903               	skipnz
 10199  04A2  2CB0               	goto	l3197
 10200  04A3  3A0D               	xorlw	13	; case 105
 10201  04A4  1903               	skipnz
 10202  04A5  2CB0               	goto	l3197
 10203  04A6  3A06               	xorlw	6	; case 111
 10204  04A7  1903               	skipnz
 10205  04A8  2BEC               	goto	l550
 10206  04A9  3A1A               	xorlw	26	; case 117
 10207  04AA  1903               	skipnz
 10208  04AB  2C7F               	goto	l3191
 10209  04AC  3A0D               	xorlw	13	; case 120
 10210  04AD  1903               	skipnz
 10211  04AE  2BEF               	goto	l555
 10212  04AF  2C76               	goto	l3187
 10213  04B0                     l3197:	
 10214                           
 10215                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 10216  04B0  30C0               	movlw	192
 10217  04B1  053D               	andwf	sprintf@flag,w
 10218  04B2  00A8               	movwf	??_sprintf
 10219  04B3  3000               	movlw	0
 10220  04B4  053E               	andwf	sprintf@flag+1,w
 10221  04B5  00A9               	movwf	??_sprintf+1
 10222  04B6  0828               	movf	??_sprintf,w
 10223  04B7  0429               	iorwf	??_sprintf+1,w
 10224  04B8  1D03               	btfss	3,2
 10225  04B9  2CD2               	goto	l3209
 10226                           
 10227                           ;doprnt.c: 1253: {
 10228                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10229  04BA  0835               	movf	sprintf@ap,w
 10230  04BB  0084               	movwf	4
 10231  04BC  1383               	bcf	3,7	;select IRP bank0
 10232  04BD  0800               	movf	0,w
 10233  04BE  00B6               	movwf	sprintf@val
 10234  04BF  0A84               	incf	4,f
 10235  04C0  0800               	movf	0,w
 10236  04C1  00B7               	movwf	sprintf@val+1
 10237  04C2  3002               	movlw	2
 10238  04C3  00A8               	movwf	??_sprintf
 10239  04C4  0828               	movf	??_sprintf,w
 10240  04C5  07B5               	addwf	sprintf@ap,f
 10241                           
 10242                           ;doprnt.c: 1261: if((int)val < 0) {
 10243  04C6  1FB7               	btfss	sprintf@val+1,7
 10244  04C7  2CDE               	goto	l3213
 10245                           
 10246                           ;doprnt.c: 1262: flag |= 0x03;
 10247  04C8  3003               	movlw	3
 10248  04C9  04BD               	iorwf	sprintf@flag,f
 10249  04CA  3000               	movlw	0
 10250  04CB  04BE               	iorwf	sprintf@flag+1,f
 10251                           
 10252                           ;doprnt.c: 1263: val = -val;
 10253  04CC  09B6               	comf	sprintf@val,f
 10254  04CD  09B7               	comf	sprintf@val+1,f
 10255  04CE  0AB6               	incf	sprintf@val,f
 10256  04CF  1903               	skipnz
 10257  04D0  0AB7               	incf	sprintf@val+1,f
 10258                           
 10259                           ;doprnt.c: 1264: }
 10260                           ;doprnt.c: 1266: }
 10261  04D1  2CDE               	goto	l3213
 10262  04D2                     l3209:	
 10263                           
 10264                           ;doprnt.c: 1268: else
 10265                           ;doprnt.c: 1273: {
 10266                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10267  04D2  0835               	movf	sprintf@ap,w
 10268  04D3  0084               	movwf	4
 10269  04D4  1383               	bcf	3,7	;select IRP bank0
 10270  04D5  0800               	movf	0,w
 10271  04D6  00B6               	movwf	sprintf@val
 10272  04D7  0A84               	incf	4,f
 10273  04D8  0800               	movf	0,w
 10274  04D9  00B7               	movwf	sprintf@val+1
 10275  04DA  3002               	movlw	2
 10276  04DB  00A8               	movwf	??_sprintf
 10277  04DC  0828               	movf	??_sprintf,w
 10278  04DD  07B5               	addwf	sprintf@ap,f
 10279  04DE                     l3213:	
 10280                           
 10281                           ;doprnt.c: 1287: }
 10282                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 10283  04DE  0838               	movf	sprintf@prec,w
 10284  04DF  1D03               	btfss	3,2
 10285  04E0  2D62               	goto	l3251
 10286  04E1  0836               	movf	sprintf@val,w
 10287  04E2  0437               	iorwf	sprintf@val+1,w
 10288  04E3  1D03               	btfss	3,2
 10289  04E4  2D62               	goto	l3251
 10290                           
 10291                           ;doprnt.c: 1291: prec++;
 10292  04E5  3001               	movlw	1
 10293  04E6  00A8               	movwf	??_sprintf
 10294  04E7  0828               	movf	??_sprintf,w
 10295  04E8  07B8               	addwf	sprintf@prec,f
 10296                           
 10297                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 10298  04E9  2D62               	goto	l3251
 10299  04EA                     l580:	
 10300                           ;doprnt.c: 1299: case 0x00:
 10301                           
 10302                           
 10303                           ;doprnt.c: 1302: case 0xC0:
 10304                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10305  04EA  01BB               	clrf	sprintf@c
 10306  04EB  0ABB               	incf	sprintf@c,f
 10307  04EC                     L26:	
 10308  04EC  3005               	movlw	5
 10309  04ED  063B               	xorwf	sprintf@c,w
 10310  04EE  1903               	btfsc	3,2
 10311  04EF  2D71               	goto	l3253
 10312                           
 10313                           ;doprnt.c: 1306: if(val < dpowers[c])
 10314  04F0  083B               	movf	sprintf@c,w
 10315  04F1  00A8               	movwf	??_sprintf
 10316  04F2  0728               	addwf	??_sprintf,w
 10317  04F3  3E1E               	addlw	low (_dpowers| (0+32768))
 10318  04F4  0084               	movwf	4
 10319  04F5  3088               	movlw	high (_dpowers| (0+32768))
 10320  04F6  1803               	skipnc
 10321  04F7  3E01               	addlw	1
 10322  04F8  00FF               	movwf	127
 10323  04F9  120A  158A  2000  120A  118A  	fcall	stringtab
 10324  04FE  00A9               	movwf	??_sprintf+1
 10325  04FF  120A  158A  2000  120A  118A  	fcall	stringtab
 10326  0504  00AA               	movwf	??_sprintf+2
 10327  0505  082A               	movf	??_sprintf+2,w
 10328  0506  0237               	subwf	sprintf@val+1,w
 10329  0507  1D03               	skipz
 10330  0508  2D0B               	goto	u3775
 10331  0509  0829               	movf	??_sprintf+1,w
 10332  050A  0236               	subwf	sprintf@val,w
 10333  050B                     u3775:	
 10334  050B  1C03               	btfss	3,0
 10335  050C  2D71               	goto	l3253
 10336                           
 10337                           ;doprnt.c: 1307: break;
 10338  050D  3001               	movlw	1
 10339  050E  00A8               	movwf	??_sprintf
 10340  050F  0828               	movf	??_sprintf,w
 10341  0510  07BB               	addwf	sprintf@c,f
 10342  0511  2CEC               	goto	L26
 10343  0512                     l585:	
 10344                           ;doprnt.c: 1314: case 0x80:
 10345                           
 10346                           ;doprnt.c: 1309: break;
 10347                           
 10348                           
 10349                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10350  0512  01BB               	clrf	sprintf@c
 10351  0513  0ABB               	incf	sprintf@c,f
 10352  0514                     L27:	
 10353  0514  3004               	movlw	4
 10354  0515  063B               	xorwf	sprintf@c,w
 10355  0516  1903               	btfsc	3,2
 10356  0517  2D71               	goto	l3253
 10357                           
 10358                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10359  0518  083B               	movf	sprintf@c,w
 10360  0519  00A8               	movwf	??_sprintf
 10361  051A  0728               	addwf	??_sprintf,w
 10362  051B  3E28               	addlw	low (_hexpowers| (0+32768))
 10363  051C  0084               	movwf	4
 10364  051D  3088               	movlw	high (_hexpowers| (0+32768))
 10365  051E  1803               	skipnc
 10366  051F  3E01               	addlw	1
 10367  0520  00FF               	movwf	127
 10368  0521  120A  158A  2000  120A  118A  	fcall	stringtab
 10369  0526  00A9               	movwf	??_sprintf+1
 10370  0527  120A  158A  2000  120A  118A  	fcall	stringtab
 10371  052C  00AA               	movwf	??_sprintf+2
 10372  052D  082A               	movf	??_sprintf+2,w
 10373  052E  0237               	subwf	sprintf@val+1,w
 10374  052F  1D03               	skipz
 10375  0530  2D33               	goto	u3805
 10376  0531  0829               	movf	??_sprintf+1,w
 10377  0532  0236               	subwf	sprintf@val,w
 10378  0533                     u3805:	
 10379  0533  1C03               	btfss	3,0
 10380  0534  2D71               	goto	l3253
 10381                           
 10382                           ;doprnt.c: 1318: break;
 10383  0535  3001               	movlw	1
 10384  0536  00A8               	movwf	??_sprintf
 10385  0537  0828               	movf	??_sprintf,w
 10386  0538  07BB               	addwf	sprintf@c,f
 10387  0539  2D14               	goto	L27
 10388  053A                     l589:	
 10389                           ;doprnt.c: 1326: case 0x40:
 10390                           
 10391                           ;doprnt.c: 1320: break;
 10392                           
 10393                           
 10394                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 10395  053A  01BB               	clrf	sprintf@c
 10396  053B  0ABB               	incf	sprintf@c,f
 10397  053C                     L28:	
 10398  053C  3006               	movlw	6
 10399  053D  063B               	xorwf	sprintf@c,w
 10400  053E  1903               	btfsc	3,2
 10401  053F  2D71               	goto	l3253
 10402                           
 10403                           ;doprnt.c: 1329: if(val < octpowers[c])
 10404  0540  083B               	movf	sprintf@c,w
 10405  0541  00A8               	movwf	??_sprintf
 10406  0542  0728               	addwf	??_sprintf,w
 10407  0543  3E12               	addlw	low (_octpowers| (0+32768))
 10408  0544  0084               	movwf	4
 10409  0545  3088               	movlw	high (_octpowers| (0+32768))
 10410  0546  1803               	skipnc
 10411  0547  3E01               	addlw	1
 10412  0548  00FF               	movwf	127
 10413  0549  120A  158A  2000  120A  118A  	fcall	stringtab
 10414  054E  00A9               	movwf	??_sprintf+1
 10415  054F  120A  158A  2000  120A  118A  	fcall	stringtab
 10416  0554  00AA               	movwf	??_sprintf+2
 10417  0555  082A               	movf	??_sprintf+2,w
 10418  0556  0237               	subwf	sprintf@val+1,w
 10419  0557  1D03               	skipz
 10420  0558  2D5B               	goto	u3835
 10421  0559  0829               	movf	??_sprintf+1,w
 10422  055A  0236               	subwf	sprintf@val,w
 10423  055B                     u3835:	
 10424  055B  1C03               	btfss	3,0
 10425  055C  2D71               	goto	l3253
 10426                           
 10427                           ;doprnt.c: 1330: break;
 10428  055D  3001               	movlw	1
 10429  055E  00A8               	movwf	??_sprintf
 10430  055F  0828               	movf	??_sprintf,w
 10431  0560  07BB               	addwf	sprintf@c,f
 10432  0561  2D3C               	goto	L28
 10433  0562                     l3251:	
 10434                           ;doprnt.c: 1336: }
 10435                           
 10436                           ;doprnt.c: 1332: break;
 10437                           
 10438  0562  083D               	movf	sprintf@flag,w
 10439  0563  39C0               	andlw	192
 10440                           
 10441                           ; Switch size 1, requested type "space"
 10442                           ; Number of cases is 4, Range of values is 0 to 192
 10443                           ; switch strategies available:
 10444                           ; Name         Instructions Cycles
 10445                           ; simple_byte           13     7 (average)
 10446                           ; jumptable            260     6 (fixed)
 10447                           ;	Chosen strategy is simple_byte
 10448  0564  3A00               	xorlw	0	; case 0
 10449  0565  1903               	skipnz
 10450  0566  2CEA               	goto	l580
 10451  0567  3A40               	xorlw	64	; case 64
 10452  0568  1903               	skipnz
 10453  0569  2D3A               	goto	l589
 10454  056A  3AC0               	xorlw	192	; case 128
 10455  056B  1903               	skipnz
 10456  056C  2D12               	goto	l585
 10457  056D  3A40               	xorlw	64	; case 192
 10458  056E  1903               	skipnz
 10459  056F  2CEA               	goto	l580
 10460  0570  2D71               	goto	l3253
 10461  0571                     l3253:	
 10462                           
 10463                           ;doprnt.c: 1339: if(c < prec)
 10464  0571  083B               	movf	sprintf@c,w
 10465  0572  3A80               	xorlw	128
 10466  0573  00A8               	movwf	??_sprintf
 10467  0574  0838               	movf	sprintf@prec,w
 10468  0575  3A80               	xorlw	128
 10469  0576  02A8               	subwf	??_sprintf,f
 10470  0577  1803               	skipnc
 10471  0578  2D7E               	goto	l3257
 10472                           
 10473                           ;doprnt.c: 1340: c = prec;
 10474  0579  0838               	movf	sprintf@prec,w
 10475  057A  00A8               	movwf	??_sprintf
 10476  057B  0828               	movf	??_sprintf,w
 10477  057C  00BB               	movwf	sprintf@c
 10478  057D  2D8A               	goto	l3261
 10479  057E                     l3257:	
 10480                           
 10481                           ;doprnt.c: 1341: else if(prec < c)
 10482  057E  0838               	movf	sprintf@prec,w
 10483  057F  3A80               	xorlw	128
 10484  0580  00A8               	movwf	??_sprintf
 10485  0581  083B               	movf	sprintf@c,w
 10486  0582  3A80               	xorlw	128
 10487  0583  02A8               	subwf	??_sprintf,f
 10488  0584  1803               	skipnc
 10489  0585  2D8A               	goto	l3261
 10490                           
 10491                           ;doprnt.c: 1342: prec = c;
 10492  0586  083B               	movf	sprintf@c,w
 10493  0587  00A8               	movwf	??_sprintf
 10494  0588  0828               	movf	??_sprintf,w
 10495  0589  00B8               	movwf	sprintf@prec
 10496  058A                     l3261:	
 10497                           
 10498                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10499  058A  0839               	movf	sprintf@width,w
 10500  058B  043A               	iorwf	sprintf@width+1,w
 10501  058C  1903               	btfsc	3,2
 10502  058D  2D9E               	goto	l3267
 10503  058E  3003               	movlw	3
 10504  058F  053D               	andwf	sprintf@flag,w
 10505  0590  00A8               	movwf	??_sprintf
 10506  0591  3000               	movlw	0
 10507  0592  053E               	andwf	sprintf@flag+1,w
 10508  0593  00A9               	movwf	??_sprintf+1
 10509  0594  0828               	movf	??_sprintf,w
 10510  0595  0429               	iorwf	??_sprintf+1,w
 10511  0596  1903               	btfsc	3,2
 10512  0597  2D9E               	goto	l3267
 10513                           
 10514                           ;doprnt.c: 1346: width--;
 10515  0598  30FF               	movlw	255
 10516  0599  07B9               	addwf	sprintf@width,f
 10517  059A  1803               	skipnc
 10518  059B  0ABA               	incf	sprintf@width+1,f
 10519  059C  30FF               	movlw	255
 10520  059D  07BA               	addwf	sprintf@width+1,f
 10521  059E                     l3267:	
 10522                           
 10523                           ;doprnt.c: 1348: if(flag & 0x4000) {
 10524  059E  1F3E               	btfss	sprintf@flag+1,6
 10525  059F  2DC3               	goto	l3275
 10526                           
 10527                           ;doprnt.c: 1349: if(width > prec)
 10528  05A0  0838               	movf	sprintf@prec,w
 10529  05A1  00A8               	movwf	??_sprintf
 10530  05A2  01A9               	clrf	??_sprintf+1
 10531  05A3  1BA8               	btfsc	??_sprintf,7
 10532  05A4  03A9               	decf	??_sprintf+1,f
 10533  05A5  0829               	movf	??_sprintf+1,w
 10534  05A6  3A80               	xorlw	128
 10535  05A7  00AA               	movwf	??_sprintf+2
 10536  05A8  083A               	movf	sprintf@width+1,w
 10537  05A9  3A80               	xorlw	128
 10538  05AA  022A               	subwf	??_sprintf+2,w
 10539  05AB  1D03               	skipz
 10540  05AC  2DAF               	goto	u3905
 10541  05AD  0839               	movf	sprintf@width,w
 10542  05AE  0228               	subwf	??_sprintf,w
 10543  05AF                     u3905:	
 10544  05AF  1803               	skipnc
 10545  05B0  2DBF               	goto	l3273
 10546                           
 10547                           ;doprnt.c: 1350: width -= prec;
 10548  05B1  1283               	bcf	3,5	;RP0=0, select bank0
 10549  05B2  1303               	bcf	3,6	;RP1=0, select bank0
 10550  05B3  0838               	movf	sprintf@prec,w
 10551  05B4  00A8               	movwf	??_sprintf
 10552  05B5  01A9               	clrf	??_sprintf+1
 10553  05B6  1BA8               	btfsc	??_sprintf,7
 10554  05B7  03A9               	decf	??_sprintf+1,f
 10555  05B8  0828               	movf	??_sprintf,w
 10556  05B9  02B9               	subwf	sprintf@width,f
 10557  05BA  0829               	movf	??_sprintf+1,w
 10558  05BB  1C03               	skipc
 10559  05BC  03BA               	decf	sprintf@width+1,f
 10560  05BD  02BA               	subwf	sprintf@width+1,f
 10561  05BE  2DC3               	goto	l3275
 10562  05BF                     l3273:	
 10563                           
 10564                           ;doprnt.c: 1351: else
 10565                           ;doprnt.c: 1352: width = 0;
 10566  05BF  1283               	bcf	3,5	;RP0=0, select bank0
 10567  05C0  1303               	bcf	3,6	;RP1=0, select bank0
 10568  05C1  01B9               	clrf	sprintf@width
 10569  05C2  01BA               	clrf	sprintf@width+1
 10570  05C3                     l3275:	
 10571                           
 10572                           ;doprnt.c: 1353: }
 10573                           ;doprnt.c: 1357: if((flag & (
 10574                           ;doprnt.c: 1359: 0x04|
 10575                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
 10576  05C3  30C4               	movlw	196
 10577  05C4  053D               	andwf	sprintf@flag,w
 10578  05C5  00A8               	movwf	??_sprintf
 10579  05C6  3008               	movlw	8
 10580  05C7  053E               	andwf	sprintf@flag+1,w
 10581  05C8  00A9               	movwf	??_sprintf+1
 10582  05C9  3040               	movlw	64
 10583  05CA  0628               	xorwf	??_sprintf,w
 10584  05CB  3008               	movlw	8
 10585  05CC  1903               	skipnz
 10586  05CD  0629               	xorwf	??_sprintf+1,w
 10587  05CE  1D03               	btfss	3,2
 10588  05CF  2DD6               	goto	l3281
 10589                           
 10590                           ;doprnt.c: 1362: if(width)
 10591  05D0  0839               	movf	sprintf@width,w
 10592  05D1  043A               	iorwf	sprintf@width+1,w
 10593  05D2  1903               	btfsc	3,2
 10594  05D3  2DFB               	goto	l3289
 10595                           
 10596                           ;doprnt.c: 1363: width--;
 10597  05D4  30FF               	movlw	255
 10598  05D5  2DF1               	goto	L20
 10599  05D6                     l3281:	
 10600                           ;doprnt.c: 1364: } else
 10601                           
 10602                           
 10603                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10604  05D6  30C0               	movlw	192
 10605  05D7  053D               	andwf	sprintf@flag,w
 10606  05D8  00A8               	movwf	??_sprintf
 10607  05D9  3008               	movlw	8
 10608  05DA  053E               	andwf	sprintf@flag+1,w
 10609  05DB  00A9               	movwf	??_sprintf+1
 10610  05DC  3080               	movlw	128
 10611  05DD  0628               	xorwf	??_sprintf,w
 10612  05DE  3008               	movlw	8
 10613  05DF  1903               	skipnz
 10614  05E0  0629               	xorwf	??_sprintf+1,w
 10615  05E1  1D03               	btfss	3,2
 10616  05E2  2DFB               	goto	l3289
 10617                           
 10618                           ;doprnt.c: 1372: if(width > 2)
 10619  05E3  083A               	movf	sprintf@width+1,w
 10620  05E4  3A80               	xorlw	128
 10621  05E5  00FF               	movwf	127
 10622  05E6  3080               	movlw	128
 10623  05E7  027F               	subwf	127,w
 10624  05E8  1D03               	skipz
 10625  05E9  2DEC               	goto	u3945
 10626  05EA  3003               	movlw	3
 10627  05EB  0239               	subwf	sprintf@width,w
 10628  05EC                     u3945:	
 10629  05EC  1C03               	skipc
 10630  05ED  2DF7               	goto	l3287
 10631                           
 10632                           ;doprnt.c: 1373: width -= 2;
 10633  05EE  30FE               	movlw	254
 10634  05EF  1283               	bcf	3,5	;RP0=0, select bank0
 10635  05F0  1303               	bcf	3,6	;RP1=0, select bank0
 10636  05F1                     L20:	
 10637  05F1  07B9               	addwf	sprintf@width,f
 10638  05F2  1803               	skipnc
 10639  05F3  0ABA               	incf	sprintf@width+1,f
 10640  05F4  30FF               	movlw	255
 10641  05F5  07BA               	addwf	sprintf@width+1,f
 10642  05F6  2DFB               	goto	l3289
 10643  05F7                     l3287:	
 10644                           
 10645                           ;doprnt.c: 1374: else
 10646                           ;doprnt.c: 1375: width = 0;
 10647  05F7  1283               	bcf	3,5	;RP0=0, select bank0
 10648  05F8  1303               	bcf	3,6	;RP1=0, select bank0
 10649  05F9  01B9               	clrf	sprintf@width
 10650  05FA  01BA               	clrf	sprintf@width+1
 10651  05FB                     l3289:	
 10652                           
 10653                           ;doprnt.c: 1376: }
 10654                           ;doprnt.c: 1381: if(width > c)
 10655  05FB  083B               	movf	sprintf@c,w
 10656  05FC  00A8               	movwf	??_sprintf
 10657  05FD  01A9               	clrf	??_sprintf+1
 10658  05FE  1BA8               	btfsc	??_sprintf,7
 10659  05FF  03A9               	decf	??_sprintf+1,f
 10660  0600  0829               	movf	??_sprintf+1,w
 10661  0601  3A80               	xorlw	128
 10662  0602  00AA               	movwf	??_sprintf+2
 10663  0603  083A               	movf	sprintf@width+1,w
 10664  0604  3A80               	xorlw	128
 10665  0605  022A               	subwf	??_sprintf+2,w
 10666  0606  1D03               	skipz
 10667  0607  2E0A               	goto	u3955
 10668  0608  0839               	movf	sprintf@width,w
 10669  0609  0228               	subwf	??_sprintf,w
 10670  060A                     u3955:	
 10671  060A  1803               	skipnc
 10672  060B  2E1A               	goto	l3293
 10673                           
 10674                           ;doprnt.c: 1382: width -= c;
 10675  060C  1283               	bcf	3,5	;RP0=0, select bank0
 10676  060D  1303               	bcf	3,6	;RP1=0, select bank0
 10677  060E  083B               	movf	sprintf@c,w
 10678  060F  00A8               	movwf	??_sprintf
 10679  0610  01A9               	clrf	??_sprintf+1
 10680  0611  1BA8               	btfsc	??_sprintf,7
 10681  0612  03A9               	decf	??_sprintf+1,f
 10682  0613  0828               	movf	??_sprintf,w
 10683  0614  02B9               	subwf	sprintf@width,f
 10684  0615  0829               	movf	??_sprintf+1,w
 10685  0616  1C03               	skipc
 10686  0617  03BA               	decf	sprintf@width+1,f
 10687  0618  02BA               	subwf	sprintf@width+1,f
 10688  0619  2E1E               	goto	l3295
 10689  061A                     l3293:	
 10690                           
 10691                           ;doprnt.c: 1383: else
 10692                           ;doprnt.c: 1384: width = 0;
 10693  061A  1283               	bcf	3,5	;RP0=0, select bank0
 10694  061B  1303               	bcf	3,6	;RP1=0, select bank0
 10695  061C  01B9               	clrf	sprintf@width
 10696  061D  01BA               	clrf	sprintf@width+1
 10697  061E                     l3295:	
 10698                           
 10699                           ;doprnt.c: 1387: if(flag & 0x04) {
 10700  061E  1D3D               	btfss	sprintf@flag,2
 10701  061F  2E75               	goto	l3331
 10702                           
 10703                           ;doprnt.c: 1392: if(flag & 0x03)
 10704  0620  3003               	movlw	3
 10705  0621  053D               	andwf	sprintf@flag,w
 10706  0622  00A8               	movwf	??_sprintf
 10707  0623  3000               	movlw	0
 10708  0624  053E               	andwf	sprintf@flag+1,w
 10709  0625  00A9               	movwf	??_sprintf+1
 10710  0626  0828               	movf	??_sprintf,w
 10711  0627  0429               	iorwf	??_sprintf+1,w
 10712  0628  1903               	btfsc	3,2
 10713  0629  2E2C               	goto	l609
 10714                           
 10715                           ;doprnt.c: 1393: ((*sp++ = ('-')));
 10716  062A  302D               	movlw	45
 10717  062B  2E2F               	goto	L33
 10718  062C                     l609:	
 10719                           
 10720                           ;doprnt.c: 1396: else
 10721                           ;doprnt.c: 1399: if(flag & 0x01)
 10722  062C  1C3D               	btfss	sprintf@flag,0
 10723  062D  2E35               	goto	l3307
 10724                           
 10725                           ;doprnt.c: 1400: ((*sp++ = (' ')));
 10726  062E  3020               	movlw	32
 10727  062F                     L33:	
 10728  062F  00A8               	movwf	??_sprintf
 10729  0630  083C               	movf	sprintf@sp,w
 10730  0631  0084               	movwf	4
 10731  0632  0828               	movf	??_sprintf,w
 10732  0633  1783               	bsf	3,7	;select IRP bank2
 10733  0634  2E5A               	goto	L29
 10734  0635                     l3307:	
 10735                           
 10736                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10737  0635  30C0               	movlw	192
 10738  0636  053D               	andwf	sprintf@flag,w
 10739  0637  00A8               	movwf	??_sprintf
 10740  0638  3008               	movlw	8
 10741  0639  053E               	andwf	sprintf@flag+1,w
 10742  063A  00A9               	movwf	??_sprintf+1
 10743  063B  3080               	movlw	128
 10744  063C  0628               	xorwf	??_sprintf,w
 10745  063D  3008               	movlw	8
 10746  063E  1903               	skipnz
 10747  063F  0629               	xorwf	??_sprintf+1,w
 10748  0640  1D03               	btfss	3,2
 10749  0641  2E5F               	goto	l3323
 10750                           
 10751                           ;doprnt.c: 1404: ((*sp++ = ('0')));
 10752  0642  3030               	movlw	48
 10753  0643  00A8               	movwf	??_sprintf
 10754  0644  083C               	movf	sprintf@sp,w
 10755  0645  0084               	movwf	4
 10756  0646  0828               	movf	??_sprintf,w
 10757  0647  1783               	bsf	3,7	;select IRP bank2
 10758  0648  0080               	movwf	0
 10759  0649  3001               	movlw	1
 10760  064A  00A8               	movwf	??_sprintf
 10761  064B  0828               	movf	??_sprintf,w
 10762  064C  07BC               	addwf	sprintf@sp,f
 10763                           
 10764                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 10765  064D  1ABD               	btfsc	sprintf@flag,5
 10766  064E  2E51               	goto	l3317
 10767  064F  3078               	movlw	120
 10768  0650  2E52               	goto	L21
 10769  0651                     l3317:	
 10770  0651  3058               	movlw	88
 10771  0652                     L21:	
 10772  0652  00AB               	movwf	_sprintf$712
 10773  0653  3000               	movlw	0
 10774  0654  00AC               	movwf	_sprintf$712+1
 10775  0655  082B               	movf	_sprintf$712,w
 10776  0656  00A8               	movwf	??_sprintf
 10777  0657  083C               	movf	sprintf@sp,w
 10778  0658  0084               	movwf	4
 10779  0659  0828               	movf	??_sprintf,w
 10780  065A                     L29:	
 10781  065A  0080               	movwf	0
 10782  065B  3001               	movlw	1
 10783  065C  00A8               	movwf	??_sprintf
 10784  065D  0828               	movf	??_sprintf,w
 10785  065E  07BC               	addwf	sprintf@sp,f
 10786  065F                     l3323:	
 10787                           
 10788                           ;doprnt.c: 1412: }
 10789                           ;doprnt.c: 1415: if(width)
 10790  065F  0839               	movf	sprintf@width,w
 10791  0660  043A               	iorwf	sprintf@width+1,w
 10792  0661  1903               	btfsc	3,2
 10793  0662  2F79               	goto	l3395
 10794                           
 10795                           ;doprnt.c: 1417: ((*sp++ = ('0')));
 10796                           
 10797                           ;doprnt.c: 1416: do
 10798  0663  3030               	movlw	48
 10799  0664  00A8               	movwf	??_sprintf
 10800  0665  083C               	movf	sprintf@sp,w
 10801  0666  0084               	movwf	4
 10802  0667  0828               	movf	??_sprintf,w
 10803  0668  1783               	bsf	3,7	;select IRP bank2
 10804  0669  0080               	movwf	0
 10805  066A  3001               	movlw	1
 10806  066B  00A8               	movwf	??_sprintf
 10807  066C  0828               	movf	??_sprintf,w
 10808  066D  07BC               	addwf	sprintf@sp,f
 10809                           
 10810                           ;doprnt.c: 1418: while(--width);
 10811  066E  30FF               	movlw	255
 10812  066F  07B9               	addwf	sprintf@width,f
 10813  0670  1803               	skipnc
 10814  0671  0ABA               	incf	sprintf@width+1,f
 10815  0672  30FF               	movlw	255
 10816  0673  07BA               	addwf	sprintf@width+1,f
 10817  0674  2E5F               	goto	l3323
 10818  0675                     l3331:	
 10819                           ;doprnt.c: 1420: } else
 10820                           
 10821                           
 10822                           ;doprnt.c: 1422: {
 10823                           ;doprnt.c: 1424: if(width
 10824                           ;doprnt.c: 1426: && !(flag & 0x08)
 10825                           ;doprnt.c: 1428: )
 10826  0675  0839               	movf	sprintf@width,w
 10827  0676  043A               	iorwf	sprintf@width+1,w
 10828  0677  1D03               	btfss	3,2
 10829  0678  19BD               	btfsc	sprintf@flag,3
 10830  0679  2E8F               	goto	l3341
 10831  067A                     l3335:	
 10832                           ;doprnt.c: 1429: do
 10833                           
 10834                           
 10835                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 10836  067A  3020               	movlw	32
 10837  067B  00A8               	movwf	??_sprintf
 10838  067C  083C               	movf	sprintf@sp,w
 10839  067D  0084               	movwf	4
 10840  067E  0828               	movf	??_sprintf,w
 10841  067F  1783               	bsf	3,7	;select IRP bank2
 10842  0680  0080               	movwf	0
 10843  0681  3001               	movlw	1
 10844  0682  00A8               	movwf	??_sprintf
 10845  0683  0828               	movf	??_sprintf,w
 10846  0684  07BC               	addwf	sprintf@sp,f
 10847                           
 10848                           ;doprnt.c: 1431: while(--width);
 10849  0685  30FF               	movlw	255
 10850  0686  07B9               	addwf	sprintf@width,f
 10851  0687  1803               	skipnc
 10852  0688  0ABA               	incf	sprintf@width+1,f
 10853  0689  30FF               	movlw	255
 10854  068A  07BA               	addwf	sprintf@width+1,f
 10855  068B  0839               	movf	sprintf@width,w
 10856  068C  043A               	iorwf	sprintf@width+1,w
 10857  068D  1D03               	btfss	3,2
 10858  068E  2E7A               	goto	l3335
 10859  068F                     l3341:	
 10860                           
 10861                           ;doprnt.c: 1438: if(flag & 0x03)
 10862  068F  3003               	movlw	3
 10863  0690  053D               	andwf	sprintf@flag,w
 10864  0691  00A8               	movwf	??_sprintf
 10865  0692  3000               	movlw	0
 10866  0693  053E               	andwf	sprintf@flag+1,w
 10867  0694  00A9               	movwf	??_sprintf+1
 10868  0695  0828               	movf	??_sprintf,w
 10869  0696  0429               	iorwf	??_sprintf+1,w
 10870  0697  1903               	btfsc	3,2
 10871  0698  2E9B               	goto	l625
 10872                           
 10873                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10874  0699  302D               	movlw	45
 10875  069A  2E9E               	goto	L30
 10876  069B                     l625:	
 10877                           
 10878                           ;doprnt.c: 1443: else if(flag & 0x01)
 10879  069B  1C3D               	btfss	sprintf@flag,0
 10880  069C  2EA8               	goto	l3351
 10881                           
 10882                           ;doprnt.c: 1444: ((*sp++ = (' ')));
 10883  069D  3020               	movlw	32
 10884  069E                     L30:	
 10885  069E  00A8               	movwf	??_sprintf
 10886  069F  083C               	movf	sprintf@sp,w
 10887  06A0  0084               	movwf	4
 10888  06A1  0828               	movf	??_sprintf,w
 10889  06A2  1783               	bsf	3,7	;select IRP bank2
 10890  06A3  0080               	movwf	0
 10891  06A4  3001               	movlw	1
 10892  06A5  00A8               	movwf	??_sprintf
 10893  06A6  0828               	movf	??_sprintf,w
 10894  06A7  07BC               	addwf	sprintf@sp,f
 10895  06A8                     l3351:	
 10896                           
 10897                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 10898  06A8  30C0               	movlw	192
 10899  06A9  053D               	andwf	sprintf@flag,w
 10900  06AA  00A8               	movwf	??_sprintf
 10901  06AB  3008               	movlw	8
 10902  06AC  053E               	andwf	sprintf@flag+1,w
 10903  06AD  00A9               	movwf	??_sprintf+1
 10904  06AE  3040               	movlw	64
 10905  06AF  0628               	xorwf	??_sprintf,w
 10906  06B0  3008               	movlw	8
 10907  06B1  1903               	skipnz
 10908  06B2  0629               	xorwf	??_sprintf+1,w
 10909  06B3  1D03               	btfss	3,2
 10910  06B4  2EB7               	goto	l3357
 10911                           
 10912                           ;doprnt.c: 1449: ((*sp++ = ('0')));
 10913  06B5  3030               	movlw	48
 10914  06B6  2F6F               	goto	L34
 10915  06B7                     l3357:	
 10916                           
 10917                           ;doprnt.c: 1450: else
 10918                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 10919  06B7  30C0               	movlw	192
 10920  06B8  053D               	andwf	sprintf@flag,w
 10921  06B9  00A8               	movwf	??_sprintf
 10922  06BA  3008               	movlw	8
 10923  06BB  053E               	andwf	sprintf@flag+1,w
 10924  06BC  00A9               	movwf	??_sprintf+1
 10925  06BD  3080               	movlw	128
 10926  06BE  0628               	xorwf	??_sprintf,w
 10927  06BF  3008               	movlw	8
 10928  06C0  1903               	skipnz
 10929  06C1  0629               	xorwf	??_sprintf+1,w
 10930  06C2  1D03               	btfss	3,2
 10931  06C3  2F79               	goto	l3395
 10932                           
 10933                           ;doprnt.c: 1458: ((*sp++ = ('0')));
 10934  06C4  3030               	movlw	48
 10935  06C5  00A8               	movwf	??_sprintf
 10936  06C6  083C               	movf	sprintf@sp,w
 10937  06C7  0084               	movwf	4
 10938  06C8  0828               	movf	??_sprintf,w
 10939  06C9  1783               	bsf	3,7	;select IRP bank2
 10940  06CA  0080               	movwf	0
 10941  06CB  3001               	movlw	1
 10942  06CC  00A8               	movwf	??_sprintf
 10943  06CD  0828               	movf	??_sprintf,w
 10944  06CE  07BC               	addwf	sprintf@sp,f
 10945                           
 10946                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 10947  06CF  1ABD               	btfsc	sprintf@flag,5
 10948  06D0  2ED3               	goto	l3367
 10949  06D1  3078               	movlw	120
 10950  06D2  2ED4               	goto	L22
 10951  06D3                     l3367:	
 10952  06D3  3058               	movlw	88
 10953  06D4                     L22:	
 10954  06D4  00AD               	movwf	_sprintf$713
 10955  06D5  3000               	movlw	0
 10956  06D6  00AE               	movwf	_sprintf$713+1
 10957  06D7  082D               	movf	_sprintf$713,w
 10958  06D8  00A8               	movwf	??_sprintf
 10959  06D9  083C               	movf	sprintf@sp,w
 10960  06DA  0084               	movwf	4
 10961  06DB  0828               	movf	??_sprintf,w
 10962  06DC  2F74               	goto	L31
 10963  06DD                     l3373:	
 10964                           ;doprnt.c: 1478: {
 10965                           ;doprnt.c: 1483: case 0x00:
 10966                           
 10967                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
 10968                           
 10969                           ;doprnt.c: 1466: }
 10970                           ;doprnt.c: 1469: }
 10971                           ;doprnt.c: 1474: while(prec--) {
 10972                           
 10973                           
 10974                           ;doprnt.c: 1486: case 0xC0:
 10975                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10976  06DD  300A               	movlw	10
 10977  06DE  00F8               	movwf	___lwmod@divisor
 10978  06DF  3000               	movlw	0
 10979  06E0  00F9               	movwf	___lwmod@divisor+1
 10980  06E1  0838               	movf	sprintf@prec,w
 10981  06E2  00A8               	movwf	??_sprintf
 10982  06E3  0728               	addwf	??_sprintf,w
 10983  06E4  3E1E               	addlw	low (_dpowers| (0+32768))
 10984  06E5  0084               	movwf	4
 10985  06E6  3088               	movlw	high (_dpowers| (0+32768))
 10986  06E7  1803               	skipnc
 10987  06E8  3E01               	addlw	1
 10988  06E9  00FF               	movwf	127
 10989  06EA  120A  158A  2000  120A  118A  	fcall	stringtab
 10990  06EF  00F0               	movwf	___lwdiv@divisor
 10991  06F0  120A  158A  2000  120A  118A  	fcall	stringtab
 10992  06F5  00F1               	movwf	___lwdiv@divisor+1
 10993  06F6  0837               	movf	sprintf@val+1,w
 10994  06F7  00F3               	movwf	___lwdiv@dividend+1
 10995  06F8  0836               	movf	sprintf@val,w
 10996  06F9  00F2               	movwf	___lwdiv@dividend
 10997  06FA  160A  158A  2314  120A  118A  	fcall	___lwdiv
 10998  06FF  0871               	movf	?___lwdiv+1,w
 10999  0700  00FB               	movwf	___lwmod@dividend+1
 11000  0701  0870               	movf	?___lwdiv,w
 11001  0702  00FA               	movwf	___lwmod@dividend
 11002  0703  160A  158A  2279  120A  118A  	fcall	___lwmod
 11003  0708  0878               	movf	?___lwmod,w
 11004  0709  2F68               	goto	L32
 11005  070A                     l3375:	
 11006                           ;doprnt.c: 1497: case 0x80:
 11007                           
 11008                           ;doprnt.c: 1491: break;
 11009                           
 11010                           
 11011                           ;doprnt.c: 1499: {
 11012                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11013  070A  0838               	movf	sprintf@prec,w
 11014  070B  00A8               	movwf	??_sprintf
 11015  070C  0728               	addwf	??_sprintf,w
 11016  070D  3E28               	addlw	low (_hexpowers| (0+32768))
 11017  070E  0084               	movwf	4
 11018  070F  3088               	movlw	high (_hexpowers| (0+32768))
 11019  0710  1803               	skipnc
 11020  0711  3E01               	addlw	1
 11021  0712  00FF               	movwf	127
 11022  0713  120A  158A  2000  120A  118A  	fcall	stringtab
 11023  0718  00F0               	movwf	___lwdiv@divisor
 11024  0719  120A  158A  2000  120A  118A  	fcall	stringtab
 11025  071E  00F1               	movwf	___lwdiv@divisor+1
 11026  071F  0837               	movf	sprintf@val+1,w
 11027  0720  00F3               	movwf	___lwdiv@dividend+1
 11028  0721  0836               	movf	sprintf@val,w
 11029  0722  00F2               	movwf	___lwdiv@dividend
 11030  0723  160A  158A  2314  120A  118A  	fcall	___lwdiv
 11031  0728  0870               	movf	?___lwdiv,w
 11032  0729  390F               	andlw	15
 11033  072A  1283               	bcf	3,5	;RP0=0, select bank0
 11034  072B  1303               	bcf	3,6	;RP1=0, select bank0
 11035  072C  00A9               	movwf	??_sprintf+1
 11036  072D  0829               	movf	??_sprintf+1,w
 11037  072E  00B1               	movwf	sprintf@idx
 11038                           
 11039                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 11040  072F  1ABD               	btfsc	sprintf@flag,5
 11041  0730  2F35               	goto	l3381
 11042  0731  305E               	movlw	low (STR_99| (0+32768))
 11043  0732  00AF               	movwf	_sprintf$719
 11044  0733  308C               	movlw	high (STR_99| (0+32768))
 11045  0734  2F38               	goto	L24
 11046  0735                     l3381:	
 11047  0735  304D               	movlw	low (STR_98| (0+32768))
 11048  0736  00AF               	movwf	_sprintf$719
 11049  0737  308C               	movlw	high (STR_98| (0+32768))
 11050  0738                     L24:	
 11051  0738  00B0               	movwf	_sprintf$719+1
 11052  0739  0831               	movf	sprintf@idx,w
 11053  073A  072F               	addwf	_sprintf$719,w
 11054  073B  0084               	movwf	4
 11055  073C  0830               	movf	_sprintf$719+1,w
 11056  073D  1803               	skipnc
 11057  073E  0A30               	incf	_sprintf$719+1,w
 11058  073F  00FF               	movwf	127
 11059  0740  120A  158A  2000  120A  118A  	fcall	stringtab
 11060  0745  00A8               	movwf	??_sprintf
 11061  0746  0828               	movf	??_sprintf,w
 11062  0747  2F6D               	goto	L25
 11063  0748                     l3385:	
 11064                           ;doprnt.c: 1516: case 0x40:
 11065                           
 11066                           ;doprnt.c: 1508: }
 11067                           ;doprnt.c: 1510: break;
 11068                           
 11069                           
 11070                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
 11071  0748  0838               	movf	sprintf@prec,w
 11072  0749  00A8               	movwf	??_sprintf
 11073  074A  0728               	addwf	??_sprintf,w
 11074  074B  3E12               	addlw	low (_octpowers| (0+32768))
 11075  074C  0084               	movwf	4
 11076  074D  3088               	movlw	high (_octpowers| (0+32768))
 11077  074E  1803               	skipnc
 11078  074F  3E01               	addlw	1
 11079  0750  00FF               	movwf	127
 11080  0751  120A  158A  2000  120A  118A  	fcall	stringtab
 11081  0756  00F0               	movwf	___lwdiv@divisor
 11082  0757  120A  158A  2000  120A  118A  	fcall	stringtab
 11083  075C  00F1               	movwf	___lwdiv@divisor+1
 11084  075D  0837               	movf	sprintf@val+1,w
 11085  075E  00F3               	movwf	___lwdiv@dividend+1
 11086  075F  0836               	movf	sprintf@val,w
 11087  0760  00F2               	movwf	___lwdiv@dividend
 11088  0761  160A  158A  2314  120A  118A  	fcall	___lwdiv
 11089  0766  0870               	movf	?___lwdiv,w
 11090  0767  3907               	andlw	7
 11091  0768                     L32:	
 11092  0768  3E30               	addlw	48
 11093  0769  1283               	bcf	3,5	;RP0=0, select bank0
 11094  076A  1303               	bcf	3,6	;RP1=0, select bank0
 11095  076B  00A9               	movwf	??_sprintf+1
 11096  076C  0829               	movf	??_sprintf+1,w
 11097  076D                     L25:	
 11098  076D  00BB               	movwf	sprintf@c
 11099  076E                     l3391:	
 11100                           ;doprnt.c: 1523: }
 11101                           
 11102                           ;doprnt.c: 1520: break;
 11103                           
 11104                           
 11105                           ;doprnt.c: 1524: ((*sp++ = (c)));
 11106  076E  083B               	movf	sprintf@c,w
 11107  076F                     L34:	
 11108  076F  00A8               	movwf	??_sprintf
 11109  0770  083C               	movf	sprintf@sp,w
 11110  0771  0084               	movwf	4
 11111  0772  0828               	movf	??_sprintf,w
 11112  0773  1783               	bsf	3,7	;select IRP bank2
 11113  0774                     L31:	
 11114  0774  0080               	movwf	0
 11115  0775  3001               	movlw	1
 11116  0776  00A8               	movwf	??_sprintf
 11117  0777  0828               	movf	??_sprintf,w
 11118  0778  07BC               	addwf	sprintf@sp,f
 11119  0779                     l3395:	
 11120  0779  30FF               	movlw	255
 11121  077A  00A8               	movwf	??_sprintf
 11122  077B  0828               	movf	??_sprintf,w
 11123  077C  07B8               	addwf	sprintf@prec,f
 11124  077D  0A38               	incf	sprintf@prec,w
 11125  077E  1903               	btfsc	3,2
 11126  077F  2F90               	goto	l647
 11127  0780  083D               	movf	sprintf@flag,w
 11128  0781  39C0               	andlw	192
 11129                           
 11130                           ; Switch size 1, requested type "space"
 11131                           ; Number of cases is 4, Range of values is 0 to 192
 11132                           ; switch strategies available:
 11133                           ; Name         Instructions Cycles
 11134                           ; simple_byte           13     7 (average)
 11135                           ; jumptable            260     6 (fixed)
 11136                           ;	Chosen strategy is simple_byte
 11137  0782  3A00               	xorlw	0	; case 0
 11138  0783  1903               	skipnz
 11139  0784  2EDD               	goto	l3373
 11140  0785  3A40               	xorlw	64	; case 64
 11141  0786  1903               	skipnz
 11142  0787  2F48               	goto	l3385
 11143  0788  3AC0               	xorlw	192	; case 128
 11144  0789  1903               	skipnz
 11145  078A  2F0A               	goto	l3375
 11146  078B  3A40               	xorlw	64	; case 192
 11147  078C  1903               	skipnz
 11148  078D  2EDD               	goto	l3373
 11149  078E  2F6E               	goto	l3391
 11150  078F  2F6E               	goto	l3391
 11151  0790                     l647:	
 11152                           
 11153                           ;doprnt.c: 1525: }
 11154                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
 11155  0790  1DBD               	btfss	sprintf@flag,3
 11156  0791  2AC1               	goto	l3405
 11157  0792  083A               	movf	sprintf@width+1,w
 11158  0793  3A80               	xorlw	128
 11159  0794  00FF               	movwf	127
 11160  0795  3080               	movlw	128
 11161  0796  027F               	subwf	127,w
 11162  0797  1D03               	skipz
 11163  0798  2F9B               	goto	u4145
 11164  0799  3001               	movlw	1
 11165  079A  0239               	subwf	sprintf@width,w
 11166  079B                     u4145:	
 11167  079B  1C03               	skipc
 11168  079C  2AC1               	goto	l3405
 11169  079D                     l3399:	
 11170                           ;doprnt.c: 1529: do
 11171                           
 11172                           
 11173                           ;doprnt.c: 1530: ((*sp++ = (' ')));
 11174  079D  3020               	movlw	32
 11175  079E  1283               	bcf	3,5	;RP0=0, select bank0
 11176  079F  1303               	bcf	3,6	;RP1=0, select bank0
 11177  07A0  00A8               	movwf	??_sprintf
 11178  07A1  083C               	movf	sprintf@sp,w
 11179  07A2  0084               	movwf	4
 11180  07A3  0828               	movf	??_sprintf,w
 11181  07A4  1783               	bsf	3,7	;select IRP bank2
 11182  07A5  0080               	movwf	0
 11183  07A6  3001               	movlw	1
 11184  07A7  00A8               	movwf	??_sprintf
 11185  07A8  0828               	movf	??_sprintf,w
 11186  07A9  07BC               	addwf	sprintf@sp,f
 11187                           
 11188                           ;doprnt.c: 1531: while(--width);
 11189  07AA  30FF               	movlw	255
 11190  07AB  07B9               	addwf	sprintf@width,f
 11191  07AC  1803               	skipnc
 11192  07AD  0ABA               	incf	sprintf@width+1,f
 11193  07AE  30FF               	movlw	255
 11194  07AF  07BA               	addwf	sprintf@width+1,f
 11195  07B0  0839               	movf	sprintf@width,w
 11196  07B1  043A               	iorwf	sprintf@width+1,w
 11197  07B2  1903               	btfsc	3,2
 11198  07B3  2AC1               	goto	l3405
 11199  07B4  2F9D               	goto	l3399
 11200  07B5                     l3407:	
 11201                           ;doprnt.c: 1533: }
 11202                           ;doprnt.c: 1535: alldone:
 11203                           
 11204                           
 11205                           ;doprnt.c: 1538: *sp = 0;
 11206  07B5  083C               	movf	sprintf@sp,w
 11207  07B6  0084               	movwf	4
 11208  07B7  1783               	bsf	3,7	;select IRP bank2
 11209  07B8  0180               	clrf	0
 11210  07B9  0008               	return
 11211  07BA                     __end_of_sprintf:	
 11212                           ;doprnt.c: 1540: return 0;
 11213                           ;	Return value of _sprintf is never used
 11214                           
 11215                           
 11216                           	psect	text30
 11217  1873                     __ptext30:	
 11218 ;; *************** function _isdigit *****************
 11219 ;; Defined at:
 11220 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
 11221 ;; Parameters:    Size  Location     Type
 11222 ;;  c               1    wreg     unsigned char 
 11223 ;; Auto vars:     Size  Location     Type
 11224 ;;  c               1    1[COMMON] unsigned char 
 11225 ;; Return value:  Size  Location     Type
 11226 ;;		None               void
 11227 ;; Registers used:
 11228 ;;		wreg, status,2, status,0
 11229 ;; Tracked objects:
 11230 ;;		On entry : 0/0
 11231 ;;		On exit  : 0/0
 11232 ;;		Unchanged: 0/0
 11233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11234 ;;      Params:         0       0       0       0       0
 11235 ;;      Locals:         2       0       0       0       0
 11236 ;;      Temps:          0       0       0       0       0
 11237 ;;      Totals:         2       0       0       0       0
 11238 ;;Total ram usage:        2 bytes
 11239 ;; Hardware stack levels used:    1
 11240 ;; This function calls:
 11241 ;;		Nothing
 11242 ;; This function is called by:
 11243 ;;		_sprintf
 11244 ;; This function uses a non-reentrant model
 11245 ;;
 11246                           
 11247                           
 11248                           ;psect for function _isdigit
 11249  1873                     _isdigit:	
 11250                           
 11251                           ;incstack = 0
 11252                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 11253                           ;isdigit@c stored from wreg
 11254  1873  00F1               	movwf	isdigit@c
 11255  1874  01F0               	clrf	_isdigit$905
 11256  1875  303A               	movlw	58
 11257  1876  0271               	subwf	isdigit@c,w
 11258  1877  1803               	skipnc
 11259  1878  287F               	goto	l3001
 11260  1879  3030               	movlw	48
 11261  187A  0271               	subwf	isdigit@c,w
 11262  187B  1C03               	skipc
 11263  187C  287F               	goto	l3001
 11264  187D  01F0               	clrf	_isdigit$905
 11265  187E  0AF0               	incf	_isdigit$905,f
 11266  187F                     l3001:	
 11267  187F  0C70               	rrf	_isdigit$905,w
 11268  1880  0008               	return
 11269  1881                     __end_of_isdigit:	
 11270                           
 11271                           	psect	text31
 11272  195F                     __ptext31:	
 11273 ;; *************** function ___wmul *****************
 11274 ;; Defined at:
 11275 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 11276 ;; Parameters:    Size  Location     Type
 11277 ;;  multiplier      2    0[COMMON] unsigned int 
 11278 ;;  multiplicand    2    2[COMMON] unsigned int 
 11279 ;; Auto vars:     Size  Location     Type
 11280 ;;  product         2    4[COMMON] unsigned int 
 11281 ;; Return value:  Size  Location     Type
 11282 ;;                  2    0[COMMON] unsigned int 
 11283 ;; Registers used:
 11284 ;;		wreg, status,2, status,0
 11285 ;; Tracked objects:
 11286 ;;		On entry : 0/0
 11287 ;;		On exit  : 0/0
 11288 ;;		Unchanged: 0/0
 11289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11290 ;;      Params:         4       0       0       0       0
 11291 ;;      Locals:         2       0       0       0       0
 11292 ;;      Temps:          0       0       0       0       0
 11293 ;;      Totals:         6       0       0       0       0
 11294 ;;Total ram usage:        6 bytes
 11295 ;; Hardware stack levels used:    1
 11296 ;; This function calls:
 11297 ;;		Nothing
 11298 ;; This function is called by:
 11299 ;;		_sprintf
 11300 ;; This function uses a non-reentrant model
 11301 ;;
 11302                           
 11303                           
 11304                           ;psect for function ___wmul
 11305  195F                     ___wmul:	
 11306                           
 11307                           ;incstack = 0
 11308                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11309  195F  01F4               	clrf	___wmul@product
 11310  1960  01F5               	clrf	___wmul@product+1
 11311  1961                     l3007:	
 11312  1961  1C70               	btfss	___wmul@multiplier,0
 11313  1962  2969               	goto	l736
 11314  1963  0872               	movf	___wmul@multiplicand,w
 11315  1964  07F4               	addwf	___wmul@product,f
 11316  1965  1803               	skipnc
 11317  1966  0AF5               	incf	___wmul@product+1,f
 11318  1967  0873               	movf	___wmul@multiplicand+1,w
 11319  1968  07F5               	addwf	___wmul@product+1,f
 11320  1969                     l736:	
 11321  1969  3001               	movlw	1
 11322  196A                     u3365:	
 11323  196A  1003               	clrc
 11324  196B  0DF2               	rlf	___wmul@multiplicand,f
 11325  196C  0DF3               	rlf	___wmul@multiplicand+1,f
 11326  196D  3EFF               	addlw	-1
 11327  196E  1D03               	skipz
 11328  196F  296A               	goto	u3365
 11329  1970  3001               	movlw	1
 11330  1971                     u3375:	
 11331  1971  1003               	clrc
 11332  1972  0CF1               	rrf	___wmul@multiplier+1,f
 11333  1973  0CF0               	rrf	___wmul@multiplier,f
 11334  1974  3EFF               	addlw	-1
 11335  1975  1D03               	skipz
 11336  1976  2971               	goto	u3375
 11337  1977  0870               	movf	___wmul@multiplier,w
 11338  1978  0471               	iorwf	___wmul@multiplier+1,w
 11339  1979  1D03               	btfss	3,2
 11340  197A  2961               	goto	l3007
 11341  197B  0875               	movf	___wmul@product+1,w
 11342  197C  00F1               	movwf	?___wmul+1
 11343  197D  0874               	movf	___wmul@product,w
 11344  197E  00F0               	movwf	?___wmul
 11345  197F  0008               	return
 11346  1980                     __end_of___wmul:	
 11347                           
 11348                           	psect	text32
 11349  1A79                     __ptext32:	
 11350 ;; *************** function ___lwmod *****************
 11351 ;; Defined at:
 11352 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 11353 ;; Parameters:    Size  Location     Type
 11354 ;;  divisor         2    8[COMMON] unsigned int 
 11355 ;;  dividend        2   10[COMMON] unsigned int 
 11356 ;; Auto vars:     Size  Location     Type
 11357 ;;  counter         1   13[COMMON] unsigned char 
 11358 ;; Return value:  Size  Location     Type
 11359 ;;                  2    8[COMMON] unsigned int 
 11360 ;; Registers used:
 11361 ;;		wreg, status,2, status,0
 11362 ;; Tracked objects:
 11363 ;;		On entry : 0/0
 11364 ;;		On exit  : 0/0
 11365 ;;		Unchanged: 0/0
 11366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11367 ;;      Params:         4       0       0       0       0
 11368 ;;      Locals:         1       0       0       0       0
 11369 ;;      Temps:          1       0       0       0       0
 11370 ;;      Totals:         6       0       0       0       0
 11371 ;;Total ram usage:        6 bytes
 11372 ;; Hardware stack levels used:    1
 11373 ;; This function calls:
 11374 ;;		Nothing
 11375 ;; This function is called by:
 11376 ;;		_sprintf
 11377 ;; This function uses a non-reentrant model
 11378 ;;
 11379                           
 11380                           
 11381                           ;psect for function ___lwmod
 11382  1A79                     ___lwmod:	
 11383                           
 11384                           ;incstack = 0
 11385                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11386  1A79  0878               	movf	___lwmod@divisor,w
 11387  1A7A  0479               	iorwf	___lwmod@divisor+1,w
 11388  1A7B  1903               	btfsc	3,2
 11389  1A7C  2AA6               	goto	l3077
 11390  1A7D  01FD               	clrf	___lwmod@counter
 11391  1A7E  0AFD               	incf	___lwmod@counter,f
 11392  1A7F                     l3067:	
 11393  1A7F  1BF9               	btfsc	___lwmod@divisor+1,7
 11394  1A80  2A8D               	goto	l3069
 11395  1A81  3001               	movlw	1
 11396  1A82                     u3495:	
 11397  1A82  1003               	clrc
 11398  1A83  0DF8               	rlf	___lwmod@divisor,f
 11399  1A84  0DF9               	rlf	___lwmod@divisor+1,f
 11400  1A85  3EFF               	addlw	-1
 11401  1A86  1D03               	skipz
 11402  1A87  2A82               	goto	u3495
 11403  1A88  3001               	movlw	1
 11404  1A89  00FC               	movwf	??___lwmod
 11405  1A8A  087C               	movf	??___lwmod,w
 11406  1A8B  07FD               	addwf	___lwmod@counter,f
 11407  1A8C  2A7F               	goto	l3067
 11408  1A8D                     l3069:	
 11409  1A8D  0879               	movf	___lwmod@divisor+1,w
 11410  1A8E  027B               	subwf	___lwmod@dividend+1,w
 11411  1A8F  1D03               	skipz
 11412  1A90  2A93               	goto	u3515
 11413  1A91  0878               	movf	___lwmod@divisor,w
 11414  1A92  027A               	subwf	___lwmod@dividend,w
 11415  1A93                     u3515:	
 11416  1A93  1C03               	skipc
 11417  1A94  2A9B               	goto	l3073
 11418  1A95  0878               	movf	___lwmod@divisor,w
 11419  1A96  02FA               	subwf	___lwmod@dividend,f
 11420  1A97  0879               	movf	___lwmod@divisor+1,w
 11421  1A98  1C03               	skipc
 11422  1A99  03FB               	decf	___lwmod@dividend+1,f
 11423  1A9A  02FB               	subwf	___lwmod@dividend+1,f
 11424  1A9B                     l3073:	
 11425  1A9B  3001               	movlw	1
 11426  1A9C                     u3525:	
 11427  1A9C  1003               	clrc
 11428  1A9D  0CF9               	rrf	___lwmod@divisor+1,f
 11429  1A9E  0CF8               	rrf	___lwmod@divisor,f
 11430  1A9F  3EFF               	addlw	-1
 11431  1AA0  1D03               	skipz
 11432  1AA1  2A9C               	goto	u3525
 11433  1AA2  3001               	movlw	1
 11434  1AA3  02FD               	subwf	___lwmod@counter,f
 11435  1AA4  1D03               	btfss	3,2
 11436  1AA5  2A8D               	goto	l3069
 11437  1AA6                     l3077:	
 11438  1AA6  087B               	movf	___lwmod@dividend+1,w
 11439  1AA7  00F9               	movwf	?___lwmod+1
 11440  1AA8  087A               	movf	___lwmod@dividend,w
 11441  1AA9  00F8               	movwf	?___lwmod
 11442  1AAA  0008               	return
 11443  1AAB                     __end_of___lwmod:	
 11444                           
 11445                           	psect	text33
 11446  1B14                     __ptext33:	
 11447 ;; *************** function ___lwdiv *****************
 11448 ;; Defined at:
 11449 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 11450 ;; Parameters:    Size  Location     Type
 11451 ;;  divisor         2    0[COMMON] unsigned int 
 11452 ;;  dividend        2    2[COMMON] unsigned int 
 11453 ;; Auto vars:     Size  Location     Type
 11454 ;;  quotient        2    5[COMMON] unsigned int 
 11455 ;;  counter         1    7[COMMON] unsigned char 
 11456 ;; Return value:  Size  Location     Type
 11457 ;;                  2    0[COMMON] unsigned int 
 11458 ;; Registers used:
 11459 ;;		wreg, status,2, status,0
 11460 ;; Tracked objects:
 11461 ;;		On entry : 0/0
 11462 ;;		On exit  : 0/0
 11463 ;;		Unchanged: 0/0
 11464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11465 ;;      Params:         4       0       0       0       0
 11466 ;;      Locals:         3       0       0       0       0
 11467 ;;      Temps:          1       0       0       0       0
 11468 ;;      Totals:         8       0       0       0       0
 11469 ;;Total ram usage:        8 bytes
 11470 ;; Hardware stack levels used:    1
 11471 ;; This function calls:
 11472 ;;		Nothing
 11473 ;; This function is called by:
 11474 ;;		_sprintf
 11475 ;; This function uses a non-reentrant model
 11476 ;;
 11477                           
 11478                           
 11479                           ;psect for function ___lwdiv
 11480  1B14                     ___lwdiv:	
 11481                           
 11482                           ;incstack = 0
 11483                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11484  1B14  01F5               	clrf	___lwdiv@quotient
 11485  1B15  01F6               	clrf	___lwdiv@quotient+1
 11486  1B16  0870               	movf	___lwdiv@divisor,w
 11487  1B17  0471               	iorwf	___lwdiv@divisor+1,w
 11488  1B18  1903               	btfsc	3,2
 11489  1B19  2B4B               	goto	l3055
 11490  1B1A  01F7               	clrf	___lwdiv@counter
 11491  1B1B  0AF7               	incf	___lwdiv@counter,f
 11492  1B1C                     l3043:	
 11493  1B1C  1BF1               	btfsc	___lwdiv@divisor+1,7
 11494  1B1D  2B2A               	goto	l3045
 11495  1B1E  3001               	movlw	1
 11496  1B1F                     u3425:	
 11497  1B1F  1003               	clrc
 11498  1B20  0DF0               	rlf	___lwdiv@divisor,f
 11499  1B21  0DF1               	rlf	___lwdiv@divisor+1,f
 11500  1B22  3EFF               	addlw	-1
 11501  1B23  1D03               	skipz
 11502  1B24  2B1F               	goto	u3425
 11503  1B25  3001               	movlw	1
 11504  1B26  00F4               	movwf	??___lwdiv
 11505  1B27  0874               	movf	??___lwdiv,w
 11506  1B28  07F7               	addwf	___lwdiv@counter,f
 11507  1B29  2B1C               	goto	l3043
 11508  1B2A                     l3045:	
 11509  1B2A  3001               	movlw	1
 11510  1B2B                     u3445:	
 11511  1B2B  1003               	clrc
 11512  1B2C  0DF5               	rlf	___lwdiv@quotient,f
 11513  1B2D  0DF6               	rlf	___lwdiv@quotient+1,f
 11514  1B2E  3EFF               	addlw	-1
 11515  1B2F  1D03               	skipz
 11516  1B30  2B2B               	goto	u3445
 11517  1B31  0871               	movf	___lwdiv@divisor+1,w
 11518  1B32  0273               	subwf	___lwdiv@dividend+1,w
 11519  1B33  1D03               	skipz
 11520  1B34  2B37               	goto	u3455
 11521  1B35  0870               	movf	___lwdiv@divisor,w
 11522  1B36  0272               	subwf	___lwdiv@dividend,w
 11523  1B37                     u3455:	
 11524  1B37  1C03               	skipc
 11525  1B38  2B40               	goto	l3051
 11526  1B39  0870               	movf	___lwdiv@divisor,w
 11527  1B3A  02F2               	subwf	___lwdiv@dividend,f
 11528  1B3B  0871               	movf	___lwdiv@divisor+1,w
 11529  1B3C  1C03               	skipc
 11530  1B3D  03F3               	decf	___lwdiv@dividend+1,f
 11531  1B3E  02F3               	subwf	___lwdiv@dividend+1,f
 11532  1B3F  1475               	bsf	___lwdiv@quotient,0
 11533  1B40                     l3051:	
 11534  1B40  3001               	movlw	1
 11535  1B41                     u3465:	
 11536  1B41  1003               	clrc
 11537  1B42  0CF1               	rrf	___lwdiv@divisor+1,f
 11538  1B43  0CF0               	rrf	___lwdiv@divisor,f
 11539  1B44  3EFF               	addlw	-1
 11540  1B45  1D03               	skipz
 11541  1B46  2B41               	goto	u3465
 11542  1B47  3001               	movlw	1
 11543  1B48  02F7               	subwf	___lwdiv@counter,f
 11544  1B49  1D03               	btfss	3,2
 11545  1B4A  2B2A               	goto	l3045
 11546  1B4B                     l3055:	
 11547  1B4B  0876               	movf	___lwdiv@quotient+1,w
 11548  1B4C  00F1               	movwf	?___lwdiv+1
 11549  1B4D  0875               	movf	___lwdiv@quotient,w
 11550  1B4E  00F0               	movwf	?___lwdiv
 11551  1B4F  0008               	return
 11552  1B50                     __end_of___lwdiv:	
 11553                           
 11554                           	psect	text34
 11555  1881                     __ptext34:	
 11556 ;; *************** function ___bmul *****************
 11557 ;; Defined at:
 11558 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
 11559 ;; Parameters:    Size  Location     Type
 11560 ;;  multiplier      1    wreg     unsigned char 
 11561 ;;  multiplicand    1    0[COMMON] unsigned char 
 11562 ;; Auto vars:     Size  Location     Type
 11563 ;;  multiplier      1    3[COMMON] unsigned char 
 11564 ;;  product         1    2[COMMON] unsigned char 
 11565 ;; Return value:  Size  Location     Type
 11566 ;;                  1    wreg      unsigned char 
 11567 ;; Registers used:
 11568 ;;		wreg, status,2, status,0
 11569 ;; Tracked objects:
 11570 ;;		On entry : 0/0
 11571 ;;		On exit  : 0/0
 11572 ;;		Unchanged: 0/0
 11573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11574 ;;      Params:         1       0       0       0       0
 11575 ;;      Locals:         2       0       0       0       0
 11576 ;;      Temps:          1       0       0       0       0
 11577 ;;      Totals:         4       0       0       0       0
 11578 ;;Total ram usage:        4 bytes
 11579 ;; Hardware stack levels used:    1
 11580 ;; This function calls:
 11581 ;;		Nothing
 11582 ;; This function is called by:
 11583 ;;		_printf_debug_cur_MATRIX44
 11584 ;;		_find_best_solution
 11585 ;;		_main
 11586 ;;		_sprintf
 11587 ;;		_get_MATRIX44
 11588 ;;		_printf_debug_all_MATRIX44
 11589 ;; This function uses a non-reentrant model
 11590 ;;
 11591                           
 11592                           
 11593                           ;psect for function ___bmul
 11594  1881                     ___bmul:	
 11595                           
 11596                           ;incstack = 0
 11597                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11598                           ;___bmul@multiplier stored from wreg
 11599  1881  00F3               	movwf	___bmul@multiplier
 11600  1882  01F2               	clrf	___bmul@product
 11601  1883                     l3021:	
 11602  1883  1C73               	btfss	___bmul@multiplier,0
 11603  1884  2889               	goto	l3025
 11604  1885  0870               	movf	___bmul@multiplicand,w
 11605  1886  00F1               	movwf	??___bmul
 11606  1887  0871               	movf	??___bmul,w
 11607  1888  07F2               	addwf	___bmul@product,f
 11608  1889                     l3025:	
 11609  1889  1003               	clrc
 11610  188A  0DF0               	rlf	___bmul@multiplicand,f
 11611  188B  1003               	clrc
 11612  188C  0CF3               	rrf	___bmul@multiplier,f
 11613  188D  0873               	movf	___bmul@multiplier,w
 11614  188E  1D03               	btfss	3,2
 11615  188F  2883               	goto	l3021
 11616  1890  0872               	movf	___bmul@product,w
 11617  1891  0008               	return
 11618  1892                     __end_of___bmul:	
 11619                           
 11620                           	psect	text35
 11621  1980                     __ptext35:	
 11622 ;; *************** function _USARTWriteString *****************
 11623 ;; Defined at:
 11624 ;;		line 76 in file "usart_pic16.c"
 11625 ;; Parameters:    Size  Location     Type
 11626 ;;  str             2    1[COMMON] PTR const unsigned char 
 11627 ;;		 -> STR_97(12), STR_95(13), STR_93(13), STR_86(7), 
 11628 ;;		 -> STR_85(7), STR_78(5), STR_62(15), STR_61(15), 
 11629 ;;		 -> STR_60(15), STR_59(45), STR_51(21), STR_45(10), 
 11630 ;;		 -> STR_43(10), STR_42(20), STR_41(19), STR_40(6), 
 11631 ;;		 -> STR_38(11), STR_36(11), STR_34(11), STR_33(35), 
 11632 ;;		 -> STR_32(8), STR_29(35), STR_27(2), STR_26(21), 
 11633 ;;		 -> STR_25(1), STR_24(2), STR_23(2), STR_22(29), 
 11634 ;;		 -> STR_21(2), STR_20(21), STR_19(1), STR_18(2), 
 11635 ;;		 -> STR_17(2), STR_16(21), STR_15(2), STR_12(20), 
 11636 ;;		 -> STR_11(2), STR_10(21), STR_9(1), STR_8(2), 
 11637 ;;		 -> STR_7(2), STR_6(29), STR_5(2), ROM(8192), 
 11638 ;;		 -> STR_4(3), STR_3(3), STR_2(3), g_debug(32), 
 11639 ;;		 -> STR_1(3), 
 11640 ;; Auto vars:     Size  Location     Type
 11641 ;;		None
 11642 ;; Return value:  Size  Location     Type
 11643 ;;                  1    wreg      void 
 11644 ;; Registers used:
 11645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 11646 ;; Tracked objects:
 11647 ;;		On entry : 0/0
 11648 ;;		On exit  : 0/0
 11649 ;;		Unchanged: 0/0
 11650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11651 ;;      Params:         2       0       0       0       0
 11652 ;;      Locals:         0       0       0       0       0
 11653 ;;      Temps:          0       0       0       0       0
 11654 ;;      Totals:         2       0       0       0       0
 11655 ;;Total ram usage:        2 bytes
 11656 ;; Hardware stack levels used:    1
 11657 ;; Hardware stack levels required when called:    1
 11658 ;; This function calls:
 11659 ;;		_USARTWriteChar
 11660 ;; This function is called by:
 11661 ;;		_debug_str
 11662 ;;		_debug_line
 11663 ;;		_debug_int1
 11664 ;;		_debug_int2
 11665 ;;		_USARTWriteLine
 11666 ;;		_debug_int3
 11667 ;; This function uses a non-reentrant model
 11668 ;;
 11669                           
 11670                           
 11671                           ;psect for function _USARTWriteString
 11672  1980                     _USARTWriteString:	
 11673  1980                     l4853:	
 11674                           ;usart_pic16.c: 77: while (*str != '\0') {
 11675                           
 11676                           ;incstack = 0
 11677                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 11678                           
 11679  1980  0872               	movf	USARTWriteString@str+1,w
 11680  1981  1283               	bcf	3,5	;RP0=0, select bank0
 11681  1982  1303               	bcf	3,6	;RP1=0, select bank0
 11682  1983  00FF               	movwf	127
 11683  1984  0871               	movf	USARTWriteString@str,w
 11684  1985  0084               	movwf	4
 11685  1986  120A  158A  2000  160A  158A  	fcall	stringtab
 11686  198B  3A00               	xorlw	0
 11687  198C  1903               	btfsc	3,2
 11688  198D  0008               	return
 11689                           
 11690                           ;usart_pic16.c: 78: USARTWriteChar(*str);
 11691  198E  0872               	movf	USARTWriteString@str+1,w
 11692  198F  1283               	bcf	3,5	;RP0=0, select bank0
 11693  1990  1303               	bcf	3,6	;RP1=0, select bank0
 11694  1991  00FF               	movwf	127
 11695  1992  0871               	movf	USARTWriteString@str,w
 11696  1993  0084               	movwf	4
 11697  1994  120A  158A  2000  160A  158A  	fcall	stringtab
 11698  1999  160A  158A  205A  160A  158A  	fcall	_USARTWriteChar
 11699                           
 11700                           ;usart_pic16.c: 79: str++;
 11701  199E  3001               	movlw	1
 11702  199F  07F1               	addwf	USARTWriteString@str,f
 11703  19A0  1803               	skipnc
 11704  19A1  0AF2               	incf	USARTWriteString@str+1,f
 11705  19A2  3000               	movlw	0
 11706  19A3  07F2               	addwf	USARTWriteString@str+1,f
 11707  19A4  2980               	goto	l4853
 11708  19A5                     __end_of_USARTWriteString:	
 11709                           
 11710                           	psect	text36
 11711  185A                     __ptext36:	
 11712 ;; *************** function _USARTWriteChar *****************
 11713 ;; Defined at:
 11714 ;;		line 70 in file "usart_pic16.c"
 11715 ;; Parameters:    Size  Location     Type
 11716 ;;  ch              1    wreg     unsigned char 
 11717 ;; Auto vars:     Size  Location     Type
 11718 ;;  ch              1    0[COMMON] unsigned char 
 11719 ;; Return value:  Size  Location     Type
 11720 ;;                  1    wreg      void 
 11721 ;; Registers used:
 11722 ;;		wreg
 11723 ;; Tracked objects:
 11724 ;;		On entry : 0/0
 11725 ;;		On exit  : 0/0
 11726 ;;		Unchanged: 0/0
 11727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11728 ;;      Params:         0       0       0       0       0
 11729 ;;      Locals:         1       0       0       0       0
 11730 ;;      Temps:          0       0       0       0       0
 11731 ;;      Totals:         1       0       0       0       0
 11732 ;;Total ram usage:        1 bytes
 11733 ;; Hardware stack levels used:    1
 11734 ;; This function calls:
 11735 ;;		Nothing
 11736 ;; This function is called by:
 11737 ;;		_USARTWriteString
 11738 ;;		_USARTWriteLine
 11739 ;;		_USARTWriteInt
 11740 ;;		_USARTGotoNewLine
 11741 ;; This function uses a non-reentrant model
 11742 ;;
 11743                           
 11744                           
 11745                           ;psect for function _USARTWriteChar
 11746  185A                     _USARTWriteChar:	
 11747                           
 11748                           ;incstack = 0
 11749                           ; Regs used in _USARTWriteChar: [wreg]
 11750                           ;USARTWriteChar@ch stored from wreg
 11751  185A  00F0               	movwf	USARTWriteChar@ch
 11752  185B                     l36:	
 11753                           ;usart_pic16.c: 71: while (!PIR1bits.TXIF);
 11754                           
 11755  185B  1283               	bcf	3,5	;RP0=0, select bank0
 11756  185C  1303               	bcf	3,6	;RP1=0, select bank0
 11757  185D  1E0C               	btfss	12,4	;volatile
 11758  185E  285B               	goto	l36
 11759                           
 11760                           ;usart_pic16.c: 73: TXREG = ch;
 11761  185F  0870               	movf	USARTWriteChar@ch,w
 11762  1860  0099               	movwf	25	;volatile
 11763  1861  0008               	return
 11764  1862                     __end_of_USARTWriteChar:	
 11765                           
 11766                           	psect	text37
 11767  1CFD                     __ptext37:	
 11768 ;; *************** function _clear *****************
 11769 ;; Defined at:
 11770 ;;		line 809 in file "teris_16f886.c"
 11771 ;; Parameters:    Size  Location     Type
 11772 ;;  x               1    wreg     char 
 11773 ;;  y               1    0[COMMON] char 
 11774 ;;  matrix44        2    1[COMMON] PTR const struct .
 11775 ;;		 -> NULL(0), g_matrix44(384), 
 11776 ;;  matrix88        1    3[COMMON] PTR struct .
 11777 ;;		 -> g_matrix88(64), 
 11778 ;; Auto vars:     Size  Location     Type
 11779 ;;  x               1    8[COMMON] char 
 11780 ;;  col             1   10[COMMON] unsigned char 
 11781 ;;  row             1    9[COMMON] unsigned char 
 11782 ;; Return value:  Size  Location     Type
 11783 ;;                  1    wreg      void 
 11784 ;; Registers used:
 11785 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
 11786 ;; Tracked objects:
 11787 ;;		On entry : 0/0
 11788 ;;		On exit  : 0/0
 11789 ;;		Unchanged: 0/0
 11790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11791 ;;      Params:         4       0       0       0       0
 11792 ;;      Locals:         3       0       0       0       0
 11793 ;;      Temps:          4       0       0       0       0
 11794 ;;      Totals:        11       0       0       0       0
 11795 ;;Total ram usage:       11 bytes
 11796 ;; Hardware stack levels used:    2
 11797 ;; This function calls:
 11798 ;;		Nothing
 11799 ;; This function is called by:
 11800 ;;		_main
 11801 ;; This function uses a non-reentrant model
 11802 ;;
 11803                           
 11804                           
 11805                           ;psect for function _clear
 11806  1CFD                     _clear:	
 11807                           
 11808                           ;incstack = 0
 11809                           ; Regs used in _clear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
 11810                           ;clear@x stored from wreg
 11811  1CFD  00F8               	movwf	clear@x
 11812                           
 11813                           ;teris_16f886.c: 811: for(uint8_t row = 0; row < 4; row++)
 11814  1CFE  01F9               	clrf	clear@row
 11815  1CFF                     L35:	
 11816  1CFF  3004               	movlw	4
 11817  1D00  0279               	subwf	clear@row,w
 11818  1D01  1803               	btfsc	3,0
 11819  1D02  0008               	return
 11820                           
 11821                           ;teris_16f886.c: 812: {
 11822                           ;teris_16f886.c: 813: for(uint8_t col = 0; col < 4; col++)
 11823  1D03  01FA               	clrf	clear@col
 11824  1D04  3004               	movlw	4
 11825  1D05  027A               	subwf	clear@col,w
 11826  1D06  1803               	btfsc	3,0
 11827  1D07  2D47               	goto	l4253
 11828  1D08                     l4245:	
 11829                           
 11830                           ;teris_16f886.c: 814: {
 11831                           ;teris_16f886.c: 815: if(matrix44->data[row][col] == 1)
 11832  1D08  0879               	movf	clear@row,w
 11833  1D09  00F4               	movwf	??_clear
 11834  1D0A  01F5               	clrf	??_clear+1
 11835  1D0B  1003               	clrc
 11836  1D0C  0DF4               	rlf	??_clear,f
 11837  1D0D  0DF5               	rlf	??_clear+1,f
 11838  1D0E  1003               	clrc
 11839  1D0F  0DF4               	rlf	??_clear,f
 11840  1D10  0DF5               	rlf	??_clear+1,f
 11841  1D11  0874               	movf	??_clear,w
 11842  1D12  0771               	addwf	clear@matrix44,w
 11843  1D13  00F6               	movwf	??_clear+2
 11844  1D14  0875               	movf	??_clear+1,w
 11845  1D15  1803               	skipnc
 11846  1D16  0A75               	incf	??_clear+1,w
 11847  1D17  0772               	addwf	clear@matrix44+1,w
 11848  1D18  00F7               	movwf	??_clear+3
 11849  1D19  087A               	movf	clear@col,w
 11850  1D1A  0776               	addwf	??_clear+2,w
 11851  1D1B  0084               	movwf	4
 11852  1D1C  0877               	movf	??_clear+3,w
 11853  1D1D  1803               	skipnc
 11854  1D1E  0A77               	incf	??_clear+3,w
 11855  1D1F  1283               	bcf	3,5	;RP0=0, select bank0
 11856  1D20  1303               	bcf	3,6	;RP1=0, select bank0
 11857  1D21  00FF               	movwf	127
 11858  1D22  120A  158A  2000  160A  158A  	fcall	stringtab
 11859  1D27  3A01               	xorlw	1
 11860  1D28  1D03               	skipz
 11861  1D29  2D3F               	goto	l4249
 11862                           
 11863                           ;teris_16f886.c: 816: {
 11864                           ;teris_16f886.c: 817: matrix88->data[y + row][x + col] = 0;
 11865  1D2A  087A               	movf	clear@col,w
 11866  1D2B  0778               	addwf	clear@x,w
 11867  1D2C  0773               	addwf	clear@matrix88,w
 11868  1D2D  00F4               	movwf	??_clear
 11869  1D2E  0879               	movf	clear@row,w
 11870  1D2F  0770               	addwf	clear@y,w
 11871  1D30  00F5               	movwf	??_clear+1
 11872  1D31  3002               	movlw	2
 11873  1D32                     u5995:	
 11874  1D32  1003               	clrc
 11875  1D33  0DF5               	rlf	??_clear+1,f
 11876  1D34  3EFF               	addlw	-1
 11877  1D35  1D03               	skipz
 11878  1D36  2D32               	goto	u5995
 11879  1D37  1003               	clrc
 11880  1D38  0D75               	rlf	??_clear+1,w
 11881  1D39  0774               	addwf	??_clear,w
 11882  1D3A  00F6               	movwf	??_clear+2
 11883  1D3B  0876               	movf	??_clear+2,w
 11884  1D3C  0084               	movwf	4
 11885  1D3D  1783               	bsf	3,7	;select IRP bank2
 11886  1D3E  0180               	clrf	0
 11887  1D3F                     l4249:	
 11888  1D3F  3001               	movlw	1
 11889  1D40  00F4               	movwf	??_clear
 11890  1D41  0874               	movf	??_clear,w
 11891  1D42  07FA               	addwf	clear@col,f
 11892  1D43  3004               	movlw	4
 11893  1D44  027A               	subwf	clear@col,w
 11894  1D45  1C03               	skipc
 11895  1D46  2D08               	goto	l4245
 11896  1D47                     l4253:	
 11897  1D47  3001               	movlw	1
 11898  1D48  00F4               	movwf	??_clear
 11899  1D49  0874               	movf	??_clear,w
 11900  1D4A  07F9               	addwf	clear@row,f
 11901  1D4B  2CFF               	goto	L35
 11902  1D4C                     __end_of_clear:	
 11903                           
 11904                           	psect	text38
 11905  18F0                     __ptext38:	
 11906 ;; *************** function _char_info_index_rand *****************
 11907 ;; Defined at:
 11908 ;;		line 886 in file "teris_16f886.c"
 11909 ;; Parameters:    Size  Location     Type
 11910 ;;		None
 11911 ;; Auto vars:     Size  Location     Type
 11912 ;;		None
 11913 ;; Return value:  Size  Location     Type
 11914 ;;                  1    wreg      unsigned char 
 11915 ;; Registers used:
 11916 ;;		wreg, status,2, status,0, pclath, cstack
 11917 ;; Tracked objects:
 11918 ;;		On entry : 0/0
 11919 ;;		On exit  : 0/0
 11920 ;;		Unchanged: 0/0
 11921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11922 ;;      Params:         0       0       0       0       0
 11923 ;;      Locals:         0       0       0       0       0
 11924 ;;      Temps:          0       0       0       0       0
 11925 ;;      Totals:         0       0       0       0       0
 11926 ;;Total ram usage:        0 bytes
 11927 ;; Hardware stack levels used:    1
 11928 ;; Hardware stack levels required when called:    2
 11929 ;; This function calls:
 11930 ;;		___awmod
 11931 ;;		_rand
 11932 ;; This function is called by:
 11933 ;;		_main
 11934 ;; This function uses a non-reentrant model
 11935 ;;
 11936                           
 11937                           
 11938                           ;psect for function _char_info_index_rand
 11939  18F0                     _char_info_index_rand:	
 11940                           
 11941                           ;teris_16f886.c: 888: return (uint8_t)(rand()%9);
 11942                           
 11943                           ;incstack = 0
 11944                           ; Regs used in _char_info_index_rand: [wreg+status,2+status,0+pclath+cstack]
 11945  18F0  3009               	movlw	9
 11946  18F1  1283               	bcf	3,5	;RP0=0, select bank0
 11947  18F2  1303               	bcf	3,6	;RP1=0, select bank0
 11948  18F3  00A7               	movwf	___awmod@divisor
 11949  18F4  3000               	movlw	0
 11950  18F5  00A8               	movwf	___awmod@divisor+1
 11951  18F6  160A  158A  259C  160A  158A  	fcall	_rand
 11952  18FB  1283               	bcf	3,5	;RP0=0, select bank0
 11953  18FC  1303               	bcf	3,6	;RP1=0, select bank0
 11954  18FD  0821               	movf	?_rand+1,w
 11955  18FE  00AA               	movwf	___awmod@dividend+1
 11956  18FF  0820               	movf	?_rand,w
 11957  1900  00A9               	movwf	___awmod@dividend
 11958  1901  160A  158A  24B0   	fcall	___awmod
 11959  1904  1283               	bcf	3,5	;RP0=0, select bank0
 11960  1905  1303               	bcf	3,6	;RP1=0, select bank0
 11961  1906  0827               	movf	?___awmod,w
 11962  1907  0008               	return
 11963  1908                     __end_of_char_info_index_rand:	
 11964                           
 11965                           	psect	text39
 11966  1D9C                     __ptext39:	
 11967 ;; *************** function _rand *****************
 11968 ;; Defined at:
 11969 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
 11970 ;; Parameters:    Size  Location     Type
 11971 ;;		None
 11972 ;; Auto vars:     Size  Location     Type
 11973 ;;		None
 11974 ;; Return value:  Size  Location     Type
 11975 ;;                  2    0[BANK0 ] int 
 11976 ;; Registers used:
 11977 ;;		wreg, status,2, status,0, pclath, cstack
 11978 ;; Tracked objects:
 11979 ;;		On entry : 0/0
 11980 ;;		On exit  : 0/0
 11981 ;;		Unchanged: 0/0
 11982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11983 ;;      Params:         0       2       0       0       0
 11984 ;;      Locals:         0       0       0       0       0
 11985 ;;      Temps:          0       5       0       0       0
 11986 ;;      Totals:         0       7       0       0       0
 11987 ;;Total ram usage:        7 bytes
 11988 ;; Hardware stack levels used:    1
 11989 ;; Hardware stack levels required when called:    1
 11990 ;; This function calls:
 11991 ;;		___lmul
 11992 ;; This function is called by:
 11993 ;;		_char_info_index_rand
 11994 ;; This function uses a non-reentrant model
 11995 ;;
 11996                           
 11997                           
 11998                           ;psect for function _rand
 11999  1D9C                     _rand:	
 12000                           
 12001                           ;incstack = 0
 12002                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
 12003  1D9C  1683               	bsf	3,5	;RP0=1, select bank3
 12004  1D9D  1703               	bsf	3,6	;RP1=1, select bank3
 12005  1D9E  0855               	movf	(_randx+3)^(0+384),w
 12006  1D9F  00F3               	movwf	___lmul@multiplier+3
 12007  1DA0  0854               	movf	(_randx+2)^(0+384),w
 12008  1DA1  00F2               	movwf	___lmul@multiplier+2
 12009  1DA2  0853               	movf	(_randx+1)^(0+384),w
 12010  1DA3  00F1               	movwf	___lmul@multiplier+1
 12011  1DA4  0852               	movf	_randx^(0+384),w
 12012  1DA5  00F0               	movwf	___lmul@multiplier
 12013  1DA6  3041               	movlw	65
 12014  1DA7  00F7               	movwf	___lmul@multiplicand+3
 12015  1DA8  30C6               	movlw	198
 12016  1DA9  00F6               	movwf	___lmul@multiplicand+2
 12017  1DAA  304E               	movlw	78
 12018  1DAB  00F5               	movwf	___lmul@multiplicand+1
 12019  1DAC  306D               	movlw	109
 12020  1DAD  00F4               	movwf	___lmul@multiplicand
 12021  1DAE  160A  158A  2350  160A  158A  	fcall	___lmul
 12022  1DB3  0873               	movf	?___lmul+3,w
 12023  1DB4  1683               	bsf	3,5	;RP0=1, select bank3
 12024  1DB5  1703               	bsf	3,6	;RP1=1, select bank3
 12025  1DB6  00D5               	movwf	(_randx+3)^(0+384)
 12026  1DB7  0872               	movf	?___lmul+2,w
 12027  1DB8  00D4               	movwf	(_randx+2)^(0+384)
 12028  1DB9  0871               	movf	?___lmul+1,w
 12029  1DBA  00D3               	movwf	(_randx+1)^(0+384)
 12030  1DBB  0870               	movf	?___lmul,w
 12031  1DBC  00D2               	movwf	_randx^(0+384)
 12032  1DBD  3039               	movlw	57
 12033  1DBE  07D2               	addwf	_randx^(0+384),f
 12034  1DBF  3030               	movlw	48
 12035  1DC0  1803               	skipnc
 12036  1DC1  3031               	movlw	49
 12037  1DC2  07D3               	addwf	(_randx+1)^(0+384),f
 12038  1DC3  3000               	movlw	0
 12039  1DC4  1803               	skipnc
 12040  1DC5  3001               	movlw	1
 12041  1DC6  07D4               	addwf	(_randx+2)^(0+384),f
 12042  1DC7  3000               	movlw	0
 12043  1DC8  1803               	skipnc
 12044  1DC9  3001               	movlw	1
 12045  1DCA  07D5               	addwf	(_randx+3)^(0+384),f
 12046  1DCB  0852               	movf	_randx^(0+384),w
 12047  1DCC  1283               	bcf	3,5	;RP0=0, select bank0
 12048  1DCD  1303               	bcf	3,6	;RP1=0, select bank0
 12049  1DCE  00A2               	movwf	??_rand
 12050  1DCF  1683               	bsf	3,5	;RP0=1, select bank3
 12051  1DD0  1703               	bsf	3,6	;RP1=1, select bank3
 12052  1DD1  0853               	movf	(_randx+1)^(0+384),w
 12053  1DD2  1283               	bcf	3,5	;RP0=0, select bank0
 12054  1DD3  1303               	bcf	3,6	;RP1=0, select bank0
 12055  1DD4  00A3               	movwf	??_rand+1
 12056  1DD5  1683               	bsf	3,5	;RP0=1, select bank3
 12057  1DD6  1703               	bsf	3,6	;RP1=1, select bank3
 12058  1DD7  0854               	movf	(_randx+2)^(0+384),w
 12059  1DD8  1283               	bcf	3,5	;RP0=0, select bank0
 12060  1DD9  1303               	bcf	3,6	;RP1=0, select bank0
 12061  1DDA  00A4               	movwf	??_rand+2
 12062  1DDB  1683               	bsf	3,5	;RP0=1, select bank3
 12063  1DDC  1703               	bsf	3,6	;RP1=1, select bank3
 12064  1DDD  0855               	movf	(_randx+3)^(0+384),w
 12065  1DDE  1283               	bcf	3,5	;RP0=0, select bank0
 12066  1DDF  1303               	bcf	3,6	;RP1=0, select bank0
 12067  1DE0  00A5               	movwf	??_rand+3
 12068  1DE1  3010               	movlw	16
 12069  1DE2  00A6               	movwf	??_rand+4
 12070  1DE3                     u5265:	
 12071  1DE3  0D25               	rlf	??_rand+3,w
 12072  1DE4  0CA5               	rrf	??_rand+3,f
 12073  1DE5  0CA4               	rrf	??_rand+2,f
 12074  1DE6  0CA3               	rrf	??_rand+1,f
 12075  1DE7  0CA2               	rrf	??_rand,f
 12076  1DE8  0BA6               	decfsz	??_rand+4,f
 12077  1DE9  2DE3               	goto	u5265
 12078  1DEA  30FF               	movlw	255
 12079  1DEB  0522               	andwf	??_rand,w
 12080  1DEC  00A0               	movwf	?_rand
 12081  1DED  307F               	movlw	127
 12082  1DEE  0523               	andwf	??_rand+1,w
 12083  1DEF  00A1               	movwf	?_rand+1
 12084  1DF0  0008               	return
 12085  1DF1                     __end_of_rand:	
 12086                           
 12087                           	psect	text40
 12088  1B50                     __ptext40:	
 12089 ;; *************** function ___lmul *****************
 12090 ;; Defined at:
 12091 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 12092 ;; Parameters:    Size  Location     Type
 12093 ;;  multiplier      4    0[COMMON] unsigned long 
 12094 ;;  multiplicand    4    4[COMMON] unsigned long 
 12095 ;; Auto vars:     Size  Location     Type
 12096 ;;  product         4    9[COMMON] unsigned long 
 12097 ;; Return value:  Size  Location     Type
 12098 ;;                  4    0[COMMON] unsigned long 
 12099 ;; Registers used:
 12100 ;;		wreg, status,2, status,0
 12101 ;; Tracked objects:
 12102 ;;		On entry : 0/0
 12103 ;;		On exit  : 0/0
 12104 ;;		Unchanged: 0/0
 12105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12106 ;;      Params:         8       0       0       0       0
 12107 ;;      Locals:         4       0       0       0       0
 12108 ;;      Temps:          1       0       0       0       0
 12109 ;;      Totals:        13       0       0       0       0
 12110 ;;Total ram usage:       13 bytes
 12111 ;; Hardware stack levels used:    1
 12112 ;; This function calls:
 12113 ;;		Nothing
 12114 ;; This function is called by:
 12115 ;;		_rand
 12116 ;; This function uses a non-reentrant model
 12117 ;;
 12118                           
 12119                           
 12120                           ;psect for function ___lmul
 12121  1B50                     ___lmul:	
 12122                           
 12123                           ;incstack = 0
 12124                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 12125  1B50  3000               	movlw	0
 12126  1B51  00FC               	movwf	___lmul@product+3
 12127  1B52  3000               	movlw	0
 12128  1B53  00FB               	movwf	___lmul@product+2
 12129  1B54  3000               	movlw	0
 12130  1B55  00FA               	movwf	___lmul@product+1
 12131  1B56  3000               	movlw	0
 12132  1B57  00F9               	movwf	___lmul@product
 12133  1B58                     l3693:	
 12134  1B58  1C70               	btfss	___lmul@multiplier,0
 12135  1B59  2B6E               	goto	l3697
 12136  1B5A  0874               	movf	___lmul@multiplicand,w
 12137  1B5B  07F9               	addwf	___lmul@product,f
 12138  1B5C  0875               	movf	___lmul@multiplicand+1,w
 12139  1B5D  1103               	clrz
 12140  1B5E  1803               	skipnc
 12141  1B5F  3E01               	addlw	1
 12142  1B60  1D03               	btfss	3,2
 12143  1B61  07FA               	addwf	___lmul@product+1,f
 12144  1B62  0876               	movf	___lmul@multiplicand+2,w
 12145  1B63  1103               	clrz
 12146  1B64  1803               	skipnc
 12147  1B65  3E01               	addlw	1
 12148  1B66  1D03               	btfss	3,2
 12149  1B67  07FB               	addwf	___lmul@product+2,f
 12150  1B68  0877               	movf	___lmul@multiplicand+3,w
 12151  1B69  1103               	clrz
 12152  1B6A  1803               	skipnc
 12153  1B6B  3E01               	addlw	1
 12154  1B6C  1D03               	btfss	3,2
 12155  1B6D  07FC               	addwf	___lmul@product+3,f
 12156  1B6E                     l3697:	
 12157  1B6E  3001               	movlw	1
 12158  1B6F  00F8               	movwf	??___lmul
 12159  1B70                     u4795:	
 12160  1B70  1003               	clrc
 12161  1B71  0DF4               	rlf	___lmul@multiplicand,f
 12162  1B72  0DF5               	rlf	___lmul@multiplicand+1,f
 12163  1B73  0DF6               	rlf	___lmul@multiplicand+2,f
 12164  1B74  0DF7               	rlf	___lmul@multiplicand+3,f
 12165  1B75  0BF8               	decfsz	??___lmul,f
 12166  1B76  2B70               	goto	u4795
 12167  1B77  3001               	movlw	1
 12168  1B78                     u4805:	
 12169  1B78  1003               	clrc
 12170  1B79  0CF3               	rrf	___lmul@multiplier+3,f
 12171  1B7A  0CF2               	rrf	___lmul@multiplier+2,f
 12172  1B7B  0CF1               	rrf	___lmul@multiplier+1,f
 12173  1B7C  0CF0               	rrf	___lmul@multiplier,f
 12174  1B7D  3EFF               	addlw	-1
 12175  1B7E  1D03               	skipz
 12176  1B7F  2B78               	goto	u4805
 12177  1B80  0873               	movf	___lmul@multiplier+3,w
 12178  1B81  0472               	iorwf	___lmul@multiplier+2,w
 12179  1B82  0471               	iorwf	___lmul@multiplier+1,w
 12180  1B83  0470               	iorwf	___lmul@multiplier,w
 12181  1B84  1D03               	skipz
 12182  1B85  2B58               	goto	l3693
 12183  1B86  087C               	movf	___lmul@product+3,w
 12184  1B87  00F3               	movwf	?___lmul+3
 12185  1B88  087B               	movf	___lmul@product+2,w
 12186  1B89  00F2               	movwf	?___lmul+2
 12187  1B8A  087A               	movf	___lmul@product+1,w
 12188  1B8B  00F1               	movwf	?___lmul+1
 12189  1B8C  0879               	movf	___lmul@product,w
 12190  1B8D  00F0               	movwf	?___lmul
 12191  1B8E  0008               	return
 12192  1B8F                     __end_of___lmul:	
 12193                           
 12194                           	psect	text41
 12195  1CB0                     __ptext41:	
 12196 ;; *************** function ___awmod *****************
 12197 ;; Defined at:
 12198 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 12199 ;; Parameters:    Size  Location     Type
 12200 ;;  divisor         2    7[BANK0 ] int 
 12201 ;;  dividend        2    9[BANK0 ] int 
 12202 ;; Auto vars:     Size  Location     Type
 12203 ;;  sign            1   12[BANK0 ] unsigned char 
 12204 ;;  counter         1   11[BANK0 ] unsigned char 
 12205 ;; Return value:  Size  Location     Type
 12206 ;;                  2    7[BANK0 ] int 
 12207 ;; Registers used:
 12208 ;;		wreg, status,2, status,0
 12209 ;; Tracked objects:
 12210 ;;		On entry : 0/0
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12214 ;;      Params:         0       4       0       0       0
 12215 ;;      Locals:         0       2       0       0       0
 12216 ;;      Temps:          1       0       0       0       0
 12217 ;;      Totals:         1       6       0       0       0
 12218 ;;Total ram usage:        7 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; This function calls:
 12221 ;;		Nothing
 12222 ;; This function is called by:
 12223 ;;		_char_info_index_rand
 12224 ;;		_USARTWriteInt
 12225 ;; This function uses a non-reentrant model
 12226 ;;
 12227                           
 12228                           
 12229                           ;psect for function ___awmod
 12230  1CB0                     ___awmod:	
 12231                           
 12232                           ;incstack = 0
 12233                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 12234  1CB0  1283               	bcf	3,5	;RP0=0, select bank0
 12235  1CB1  1303               	bcf	3,6	;RP1=0, select bank0
 12236  1CB2  01AC               	clrf	___awmod@sign
 12237  1CB3  1FAA               	btfss	___awmod@dividend+1,7
 12238  1CB4  2CBC               	goto	l4075
 12239  1CB5  09A9               	comf	___awmod@dividend,f
 12240  1CB6  09AA               	comf	___awmod@dividend+1,f
 12241  1CB7  0AA9               	incf	___awmod@dividend,f
 12242  1CB8  1903               	skipnz
 12243  1CB9  0AAA               	incf	___awmod@dividend+1,f
 12244  1CBA  01AC               	clrf	___awmod@sign
 12245  1CBB  0AAC               	incf	___awmod@sign,f
 12246  1CBC                     l4075:	
 12247  1CBC  1FA8               	btfss	___awmod@divisor+1,7
 12248  1CBD  2CC3               	goto	l4079
 12249  1CBE  09A7               	comf	___awmod@divisor,f
 12250  1CBF  09A8               	comf	___awmod@divisor+1,f
 12251  1CC0  0AA7               	incf	___awmod@divisor,f
 12252  1CC1  1903               	skipnz
 12253  1CC2  0AA8               	incf	___awmod@divisor+1,f
 12254  1CC3                     l4079:	
 12255  1CC3  0827               	movf	___awmod@divisor,w
 12256  1CC4  0428               	iorwf	___awmod@divisor+1,w
 12257  1CC5  1903               	btfsc	3,2
 12258  1CC6  2CF0               	goto	l4097
 12259  1CC7  01AB               	clrf	___awmod@counter
 12260  1CC8  0AAB               	incf	___awmod@counter,f
 12261  1CC9                     l4087:	
 12262  1CC9  1BA8               	btfsc	___awmod@divisor+1,7
 12263  1CCA  2CD7               	goto	l4089
 12264  1CCB  3001               	movlw	1
 12265  1CCC                     u5755:	
 12266  1CCC  1003               	clrc
 12267  1CCD  0DA7               	rlf	___awmod@divisor,f
 12268  1CCE  0DA8               	rlf	___awmod@divisor+1,f
 12269  1CCF  3EFF               	addlw	-1
 12270  1CD0  1D03               	skipz
 12271  1CD1  2CCC               	goto	u5755
 12272  1CD2  3001               	movlw	1
 12273  1CD3  00FD               	movwf	??___awmod
 12274  1CD4  087D               	movf	??___awmod,w
 12275  1CD5  07AB               	addwf	___awmod@counter,f
 12276  1CD6  2CC9               	goto	l4087
 12277  1CD7                     l4089:	
 12278  1CD7  0828               	movf	___awmod@divisor+1,w
 12279  1CD8  022A               	subwf	___awmod@dividend+1,w
 12280  1CD9  1D03               	skipz
 12281  1CDA  2CDD               	goto	u5775
 12282  1CDB  0827               	movf	___awmod@divisor,w
 12283  1CDC  0229               	subwf	___awmod@dividend,w
 12284  1CDD                     u5775:	
 12285  1CDD  1C03               	skipc
 12286  1CDE  2CE5               	goto	l4093
 12287  1CDF  0827               	movf	___awmod@divisor,w
 12288  1CE0  02A9               	subwf	___awmod@dividend,f
 12289  1CE1  0828               	movf	___awmod@divisor+1,w
 12290  1CE2  1C03               	skipc
 12291  1CE3  03AA               	decf	___awmod@dividend+1,f
 12292  1CE4  02AA               	subwf	___awmod@dividend+1,f
 12293  1CE5                     l4093:	
 12294  1CE5  3001               	movlw	1
 12295  1CE6                     u5785:	
 12296  1CE6  1003               	clrc
 12297  1CE7  0CA8               	rrf	___awmod@divisor+1,f
 12298  1CE8  0CA7               	rrf	___awmod@divisor,f
 12299  1CE9  3EFF               	addlw	-1
 12300  1CEA  1D03               	skipz
 12301  1CEB  2CE6               	goto	u5785
 12302  1CEC  3001               	movlw	1
 12303  1CED  02AB               	subwf	___awmod@counter,f
 12304  1CEE  1D03               	btfss	3,2
 12305  1CEF  2CD7               	goto	l4089
 12306  1CF0                     l4097:	
 12307  1CF0  082C               	movf	___awmod@sign,w
 12308  1CF1  1903               	btfsc	3,2
 12309  1CF2  2CF8               	goto	l4101
 12310  1CF3  09A9               	comf	___awmod@dividend,f
 12311  1CF4  09AA               	comf	___awmod@dividend+1,f
 12312  1CF5  0AA9               	incf	___awmod@dividend,f
 12313  1CF6  1903               	skipnz
 12314  1CF7  0AAA               	incf	___awmod@dividend+1,f
 12315  1CF8                     l4101:	
 12316  1CF8  082A               	movf	___awmod@dividend+1,w
 12317  1CF9  00A8               	movwf	?___awmod+1
 12318  1CFA  0829               	movf	___awmod@dividend,w
 12319  1CFB  00A7               	movwf	?___awmod
 12320  1CFC  0008               	return
 12321  1CFD                     __end_of___awmod:	
 12322                           
 12323                           	psect	text42
 12324  1B8F                     __ptext42:	
 12325 ;; *************** function _USARTInit *****************
 12326 ;; Defined at:
 12327 ;;		line 31 in file "usart_pic16.c"
 12328 ;; Parameters:    Size  Location     Type
 12329 ;;  baud_rate       2    0[COMMON] unsigned int 
 12330 ;; Auto vars:     Size  Location     Type
 12331 ;;		None
 12332 ;; Return value:  Size  Location     Type
 12333 ;;                  1    wreg      void 
 12334 ;; Registers used:
 12335 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12336 ;; Tracked objects:
 12337 ;;		On entry : 0/0
 12338 ;;		On exit  : 0/0
 12339 ;;		Unchanged: 0/0
 12340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12341 ;;      Params:         2       0       0       0       0
 12342 ;;      Locals:         0       0       0       0       0
 12343 ;;      Temps:          1       0       0       0       0
 12344 ;;      Totals:         3       0       0       0       0
 12345 ;;Total ram usage:        3 bytes
 12346 ;; Hardware stack levels used:    1
 12347 ;; This function calls:
 12348 ;;		Nothing
 12349 ;; This function is called by:
 12350 ;;		_main
 12351 ;; This function uses a non-reentrant model
 12352 ;;
 12353                           
 12354                           
 12355                           ;psect for function _USARTInit
 12356  1B8F                     _USARTInit:	
 12357                           
 12358                           ;usart_pic16.c: 33: UQFront = UQEnd = -1;
 12359                           
 12360                           ;incstack = 0
 12361                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
 12362  1B8F  30FF               	movlw	255
 12363  1B90  1283               	bcf	3,5	;RP0=0, select bank0
 12364  1B91  1303               	bcf	3,6	;RP1=0, select bank0
 12365  1B92  00EE               	movwf	_UQEnd	;volatile
 12366  1B93  00F2               	movwf	??_USARTInit
 12367  1B94  0872               	movf	??_USARTInit,w
 12368  1B95  00EF               	movwf	_UQFront	;volatile
 12369                           
 12370                           ;usart_pic16.c: 36: switch (baud_rate) {
 12371  1B96  2BA2               	goto	l4117
 12372  1B97                     l4107:	
 12373                           ;usart_pic16.c: 37: case 9600:
 12374                           
 12375                           
 12376                           ;usart_pic16.c: 38: SPBRG = 129;
 12377  1B97  3081               	movlw	129
 12378  1B98  2B9E               	goto	L38
 12379  1B99                     l4109:	
 12380                           ;usart_pic16.c: 40: case 19200:
 12381                           
 12382                           ;usart_pic16.c: 39: break;
 12383                           
 12384                           
 12385                           ;usart_pic16.c: 41: SPBRG = 64;
 12386  1B99  3040               	movlw	64
 12387  1B9A  2B9E               	goto	L38
 12388  1B9B                     l4111:	
 12389                           ;usart_pic16.c: 43: case 28800:
 12390                           
 12391                           ;usart_pic16.c: 42: break;
 12392                           
 12393                           
 12394                           ;usart_pic16.c: 44: SPBRG = 42;
 12395  1B9B  302A               	movlw	42
 12396  1B9C  2B9E               	goto	L38
 12397  1B9D                     l4113:	
 12398                           ;usart_pic16.c: 46: case 33600:
 12399                           
 12400                           ;usart_pic16.c: 45: break;
 12401                           
 12402                           
 12403                           ;usart_pic16.c: 47: SPBRG = 36;
 12404  1B9D  3024               	movlw	36
 12405  1B9E                     L38:	
 12406  1B9E  1683               	bsf	3,5	;RP0=1, select bank1
 12407  1B9F  1303               	bcf	3,6	;RP1=0, select bank1
 12408  1BA0  0099               	movwf	25	;volatile
 12409                           
 12410                           ;usart_pic16.c: 49: }
 12411                           
 12412                           ;usart_pic16.c: 48: break;
 12413  1BA1  2BC4               	goto	l29
 12414  1BA2                     l4117:	
 12415                           
 12416                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 12417                           ; Switch size 1, requested type "space"
 12418                           ; Number of cases is 4, Range of values is 37 to 131
 12419                           ; switch strategies available:
 12420                           ; Name         Instructions Cycles
 12421                           ; simple_byte           13     7 (average)
 12422                           ; jumptable            263     9 (fixed)
 12423                           ;	Chosen strategy is simple_byte
 12424  1BA2  0871               	movf	USARTInit@baud_rate+1,w
 12425  1BA3  3A25               	xorlw	37	; case 37
 12426  1BA4  1903               	skipnz
 12427  1BA5  2BB0               	goto	l5889
 12428  1BA6  3A6E               	xorlw	110	; case 75
 12429  1BA7  1903               	skipnz
 12430  1BA8  2BB5               	goto	l5891
 12431  1BA9  3A3B               	xorlw	59	; case 112
 12432  1BAA  1903               	skipnz
 12433  1BAB  2BBA               	goto	l5893
 12434  1BAC  3AF3               	xorlw	243	; case 131
 12435  1BAD  1903               	skipnz
 12436  1BAE  2BBF               	goto	l5895
 12437  1BAF  2BC4               	goto	l29
 12438  1BB0                     l5889:	
 12439                           
 12440                           ; Switch size 1, requested type "space"
 12441                           ; Number of cases is 1, Range of values is 128 to 128
 12442                           ; switch strategies available:
 12443                           ; Name         Instructions Cycles
 12444                           ; simple_byte            4     3 (average)
 12445                           ; direct_byte           14    11 (fixed)
 12446                           ; jumptable            263     9 (fixed)
 12447                           ;	Chosen strategy is simple_byte
 12448  1BB0  0870               	movf	USARTInit@baud_rate,w
 12449  1BB1  3A80               	xorlw	128	; case 128
 12450  1BB2  1903               	skipnz
 12451  1BB3  2B97               	goto	l4107
 12452  1BB4  2BC4               	goto	l29
 12453  1BB5                     l5891:	
 12454                           
 12455                           ; Switch size 1, requested type "space"
 12456                           ; Number of cases is 1, Range of values is 0 to 0
 12457                           ; switch strategies available:
 12458                           ; Name         Instructions Cycles
 12459                           ; simple_byte            4     3 (average)
 12460                           ; direct_byte           11     8 (fixed)
 12461                           ; jumptable            260     6 (fixed)
 12462                           ;	Chosen strategy is simple_byte
 12463  1BB5  0870               	movf	USARTInit@baud_rate,w
 12464  1BB6  3A00               	xorlw	0	; case 0
 12465  1BB7  1903               	skipnz
 12466  1BB8  2B99               	goto	l4109
 12467  1BB9  2BC4               	goto	l29
 12468  1BBA                     l5893:	
 12469                           
 12470                           ; Switch size 1, requested type "space"
 12471                           ; Number of cases is 1, Range of values is 128 to 128
 12472                           ; switch strategies available:
 12473                           ; Name         Instructions Cycles
 12474                           ; simple_byte            4     3 (average)
 12475                           ; direct_byte           14    11 (fixed)
 12476                           ; jumptable            263     9 (fixed)
 12477                           ;	Chosen strategy is simple_byte
 12478  1BBA  0870               	movf	USARTInit@baud_rate,w
 12479  1BBB  3A80               	xorlw	128	; case 128
 12480  1BBC  1903               	skipnz
 12481  1BBD  2B9B               	goto	l4111
 12482  1BBE  2BC4               	goto	l29
 12483  1BBF                     l5895:	
 12484                           
 12485                           ; Switch size 1, requested type "space"
 12486                           ; Number of cases is 1, Range of values is 64 to 64
 12487                           ; switch strategies available:
 12488                           ; Name         Instructions Cycles
 12489                           ; simple_byte            4     3 (average)
 12490                           ; direct_byte           14    11 (fixed)
 12491                           ; jumptable            263     9 (fixed)
 12492                           ;	Chosen strategy is simple_byte
 12493  1BBF  0870               	movf	USARTInit@baud_rate,w
 12494  1BC0  3A40               	xorlw	64	; case 64
 12495  1BC1  1903               	skipnz
 12496  1BC2  2B9D               	goto	l4113
 12497  1BC3  2BC4               	goto	l29
 12498  1BC4                     l29:	
 12499                           
 12500                           ;usart_pic16.c: 52: TXSTAbits.TX9 = 0;
 12501  1BC4  1683               	bsf	3,5	;RP0=1, select bank1
 12502  1BC5  1303               	bcf	3,6	;RP1=0, select bank1
 12503  1BC6  1318               	bcf	24,6	;volatile
 12504                           
 12505                           ;usart_pic16.c: 53: TXSTAbits.TXEN = 1;
 12506  1BC7  1698               	bsf	24,5	;volatile
 12507                           
 12508                           ;usart_pic16.c: 54: TXSTAbits.SYNC = 0;
 12509  1BC8  1218               	bcf	24,4	;volatile
 12510                           
 12511                           ;usart_pic16.c: 55: TXSTAbits.BRGH = 1;
 12512  1BC9  1518               	bsf	24,2	;volatile
 12513                           
 12514                           ;usart_pic16.c: 58: RCSTAbits.SPEN = 1;
 12515  1BCA  1283               	bcf	3,5	;RP0=0, select bank0
 12516  1BCB  1303               	bcf	3,6	;RP1=0, select bank0
 12517  1BCC  1798               	bsf	24,7	;volatile
 12518                           
 12519                           ;usart_pic16.c: 59: RCSTAbits.RX9 = 0;
 12520  1BCD  1318               	bcf	24,6	;volatile
 12521                           
 12522                           ;usart_pic16.c: 60: RCSTAbits.CREN = 1;
 12523  1BCE  1618               	bsf	24,4	;volatile
 12524                           
 12525                           ;usart_pic16.c: 61: RCSTAbits.ADDEN = 0;
 12526  1BCF  1198               	bcf	24,3	;volatile
 12527                           
 12528                           ;usart_pic16.c: 64: RCIE = 1;
 12529  1BD0  1683               	bsf	3,5	;RP0=1, select bank1
 12530  1BD1  1303               	bcf	3,6	;RP1=0, select bank1
 12531  1BD2  168C               	bsf	12,5	;volatile
 12532                           
 12533                           ;usart_pic16.c: 65: PEIE = 1;
 12534  1BD3  170B               	bsf	11,6	;volatile
 12535                           
 12536                           ;usart_pic16.c: 67: (GIE = 1);
 12537  1BD4  178B               	bsf	11,7	;volatile
 12538  1BD5  0008               	return
 12539  1BD6                     __end_of_USARTInit:	
 12540                           
 12541                           	psect	text43
 12542  18C7                     __ptext43:	
 12543 ;; *************** function _Clear_Matrix *****************
 12544 ;; Defined at:
 12545 ;;		line 601 in file "teris_16f886.c"
 12546 ;; Parameters:    Size  Location     Type
 12547 ;;		None
 12548 ;; Auto vars:     Size  Location     Type
 12549 ;;		None
 12550 ;; Return value:  Size  Location     Type
 12551 ;;                  1    wreg      void 
 12552 ;; Registers used:
 12553 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12554 ;; Tracked objects:
 12555 ;;		On entry : 0/0
 12556 ;;		On exit  : 0/0
 12557 ;;		Unchanged: 0/0
 12558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12559 ;;      Params:         0       0       0       0       0
 12560 ;;      Locals:         0       0       0       0       0
 12561 ;;      Temps:          0       0       0       0       0
 12562 ;;      Totals:         0       0       0       0       0
 12563 ;;Total ram usage:        0 bytes
 12564 ;; Hardware stack levels used:    1
 12565 ;; Hardware stack levels required when called:    5
 12566 ;; This function calls:
 12567 ;;		_memset
 12568 ;;		_printf_Screen
 12569 ;; This function is called by:
 12570 ;;		_main
 12571 ;; This function uses a non-reentrant model
 12572 ;;
 12573                           
 12574                           
 12575                           ;psect for function _Clear_Matrix
 12576  18C7                     _Clear_Matrix:	
 12577                           
 12578                           ;teris_16f886.c: 603: memset(&g_matrix88, 0, sizeof(MATRIX88));
 12579                           
 12580                           ;incstack = 0
 12581                           ; Regs used in _Clear_Matrix: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12582  18C7  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
 12583  18C8  00F0               	movwf	memset@p1
 12584  18C9  3001               	movlw	1
 12585  18CA  00F1               	movwf	memset@p1+1
 12586  18CB  3000               	movlw	0
 12587  18CC  00F2               	movwf	memset@c
 12588  18CD  00F3               	movwf	memset@c+1
 12589  18CE  3040               	movlw	64
 12590  18CF  00F4               	movwf	memset@n
 12591  18D0  3000               	movlw	0
 12592  18D1  00F5               	movwf	memset@n+1
 12593  18D2  160A  158A  2108  160A  158A  	fcall	_memset
 12594                           
 12595                           ;teris_16f886.c: 604: printf_Screen();
 12596  18D7  160A  158A  2055   	fcall	_printf_Screen
 12597  18DA  0008               	return
 12598  18DB                     __end_of_Clear_Matrix:	
 12599                           
 12600                           	psect	text44
 12601  1855                     __ptext44:	
 12602 ;; *************** function _printf_Screen *****************
 12603 ;; Defined at:
 12604 ;;		line 584 in file "teris_16f886.c"
 12605 ;; Parameters:    Size  Location     Type
 12606 ;;		None
 12607 ;; Auto vars:     Size  Location     Type
 12608 ;;		None
 12609 ;; Return value:  Size  Location     Type
 12610 ;;                  1    wreg      void 
 12611 ;; Registers used:
 12612 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12613 ;; Tracked objects:
 12614 ;;		On entry : 0/0
 12615 ;;		On exit  : 0/0
 12616 ;;		Unchanged: 0/0
 12617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12618 ;;      Params:         0       0       0       0       0
 12619 ;;      Locals:         0       0       0       0       0
 12620 ;;      Temps:          0       0       0       0       0
 12621 ;;      Totals:         0       0       0       0       0
 12622 ;;Total ram usage:        0 bytes
 12623 ;; Hardware stack levels used:    1
 12624 ;; Hardware stack levels required when called:    4
 12625 ;; This function calls:
 12626 ;;		_printf_MATRIX88
 12627 ;; This function is called by:
 12628 ;;		_Clear_Matrix
 12629 ;;		_main
 12630 ;; This function uses a non-reentrant model
 12631 ;;
 12632                           
 12633                           
 12634                           ;psect for function _printf_Screen
 12635  1855                     _printf_Screen:	
 12636                           
 12637                           ;teris_16f886.c: 586: printf_MATRIX88(&g_matrix88);
 12638                           
 12639                           ;incstack = 0
 12640                           ; Regs used in _printf_Screen: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12641  1855  3030               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
 12642  1856  160A  158A  20B5   	fcall	_printf_MATRIX88
 12643  1859  0008               	return
 12644  185A                     __end_of_printf_Screen:	
 12645                           
 12646                           	psect	text45
 12647  18B5                     __ptext45:	
 12648 ;; *************** function _printf_MATRIX88 *****************
 12649 ;; Defined at:
 12650 ;;		line 578 in file "teris_16f886.c"
 12651 ;; Parameters:    Size  Location     Type
 12652 ;;  matrix88        1    wreg     PTR const struct .
 12653 ;;		 -> g_matrix88(64), 
 12654 ;; Auto vars:     Size  Location     Type
 12655 ;;  matrix88        1    0[BANK0 ] PTR const struct .
 12656 ;;		 -> g_matrix88(64), 
 12657 ;;  matrix7219      8    1[BANK0 ] struct .
 12658 ;; Return value:  Size  Location     Type
 12659 ;;                  1    wreg      void 
 12660 ;; Registers used:
 12661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12662 ;; Tracked objects:
 12663 ;;		On entry : 0/0
 12664 ;;		On exit  : 0/0
 12665 ;;		Unchanged: 0/0
 12666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12667 ;;      Params:         0       0       0       0       0
 12668 ;;      Locals:         0       9       0       0       0
 12669 ;;      Temps:          1       0       0       0       0
 12670 ;;      Totals:         1       9       0       0       0
 12671 ;;Total ram usage:       10 bytes
 12672 ;; Hardware stack levels used:    1
 12673 ;; Hardware stack levels required when called:    3
 12674 ;; This function calls:
 12675 ;;		_MATRIX88_to_MATRIX7219
 12676 ;;		_printf_MATRIX7219
 12677 ;; This function is called by:
 12678 ;;		_printf_Screen
 12679 ;; This function uses a non-reentrant model
 12680 ;;
 12681                           
 12682                           
 12683                           ;psect for function _printf_MATRIX88
 12684  18B5                     _printf_MATRIX88:	
 12685                           
 12686                           ;incstack = 0
 12687                           ; Regs used in _printf_MATRIX88: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12688                           ;printf_MATRIX88@matrix88 stored from wreg
 12689  18B5  1283               	bcf	3,5	;RP0=0, select bank0
 12690  18B6  1303               	bcf	3,6	;RP1=0, select bank0
 12691  18B7  00A0               	movwf	printf_MATRIX88@matrix88
 12692                           
 12693                           ;teris_16f886.c: 580: MATRIX7219 matrix7219;
 12694                           ;teris_16f886.c: 581: MATRIX88_to_MATRIX7219(matrix88, &matrix7219);
 12695  18B8  3021               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
 12696  18B9  00F8               	movwf	??_printf_MATRIX88
 12697  18BA  0878               	movf	??_printf_MATRIX88,w
 12698  18BB  00F0               	movwf	MATRIX88_to_MATRIX7219@matrix7219
 12699  18BC  0820               	movf	printf_MATRIX88@matrix88,w
 12700  18BD  160A  158A  23D6  160A  158A  	fcall	_MATRIX88_to_MATRIX7219
 12701                           
 12702                           ;teris_16f886.c: 582: printf_MATRIX7219(&matrix7219);
 12703  18C2  3021               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
 12704  18C3  160A  158A  2123   	fcall	_printf_MATRIX7219
 12705  18C6  0008               	return
 12706  18C7                     __end_of_printf_MATRIX88:	
 12707                           
 12708                           	psect	text46
 12709  1923                     __ptext46:	
 12710 ;; *************** function _printf_MATRIX7219 *****************
 12711 ;; Defined at:
 12712 ;;		line 522 in file "teris_16f886.c"
 12713 ;; Parameters:    Size  Location     Type
 12714 ;;  matrix          1    wreg     PTR const struct .
 12715 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;  matrix          1    4[COMMON] PTR const struct .
 12718 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12719 ;;  col             1    5[COMMON] unsigned char 
 12720 ;; Return value:  Size  Location     Type
 12721 ;;                  1    wreg      void 
 12722 ;; Registers used:
 12723 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12724 ;; Tracked objects:
 12725 ;;		On entry : 0/0
 12726 ;;		On exit  : 0/0
 12727 ;;		Unchanged: 0/0
 12728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12729 ;;      Params:         0       0       0       0       0
 12730 ;;      Locals:         2       0       0       0       0
 12731 ;;      Temps:          2       0       0       0       0
 12732 ;;      Totals:         4       0       0       0       0
 12733 ;;Total ram usage:        4 bytes
 12734 ;; Hardware stack levels used:    1
 12735 ;; Hardware stack levels required when called:    2
 12736 ;; This function calls:
 12737 ;;		_Write_Byte
 12738 ;; This function is called by:
 12739 ;;		_printf_MATRIX88
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743                           
 12744                           ;psect for function _printf_MATRIX7219
 12745  1923                     _printf_MATRIX7219:	
 12746                           
 12747                           ;incstack = 0
 12748                           ; Regs used in _printf_MATRIX7219: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12749                           ;printf_MATRIX7219@matrix stored from wreg
 12750  1923  00F4               	movwf	printf_MATRIX7219@matrix
 12751                           
 12752                           ;teris_16f886.c: 524: uint8_t col;
 12753                           ;teris_16f886.c: 526: for (col = 0; col < 8; col++)
 12754  1924  01F5               	clrf	printf_MATRIX7219@col
 12755  1925                     L39:	
 12756  1925  3008               	movlw	8
 12757  1926  0275               	subwf	printf_MATRIX7219@col,w
 12758  1927  1803               	btfsc	3,0
 12759  1928  0008               	return
 12760                           
 12761                           ;teris_16f886.c: 527: {
 12762                           ;teris_16f886.c: 528: Write_Byte(col + 1, matrix->col[col]);
 12763  1929  0875               	movf	printf_MATRIX7219@col,w
 12764  192A  0774               	addwf	printf_MATRIX7219@matrix,w
 12765  192B  00F2               	movwf	??_printf_MATRIX7219
 12766  192C  0872               	movf	??_printf_MATRIX7219,w
 12767  192D  0084               	movwf	4
 12768  192E  1383               	bcf	3,7	;select IRP bank0
 12769  192F  0800               	movf	0,w
 12770  1930  00F3               	movwf	??_printf_MATRIX7219+1
 12771  1931  0873               	movf	??_printf_MATRIX7219+1,w
 12772  1932  00F0               	movwf	Write_Byte@myValue
 12773  1933  0875               	movf	printf_MATRIX7219@col,w
 12774  1934  3E01               	addlw	1
 12775  1935  160A  158A  20A3  160A  158A  	fcall	_Write_Byte
 12776  193A  3001               	movlw	1
 12777  193B  00F2               	movwf	??_printf_MATRIX7219
 12778  193C  0872               	movf	??_printf_MATRIX7219,w
 12779  193D  07F5               	addwf	printf_MATRIX7219@col,f
 12780  193E  2925               	goto	L39
 12781  193F                     __end_of_printf_MATRIX7219:	
 12782                           
 12783                           	psect	text47
 12784  18A3                     __ptext47:	
 12785 ;; *************** function _Write_Byte *****************
 12786 ;; Defined at:
 12787 ;;		line 482 in file "teris_16f886.c"
 12788 ;; Parameters:    Size  Location     Type
 12789 ;;  myColumn        1    wreg     unsigned char 
 12790 ;;  myValue         1    0[COMMON] unsigned char 
 12791 ;; Auto vars:     Size  Location     Type
 12792 ;;  myColumn        1    1[COMMON] unsigned char 
 12793 ;; Return value:  Size  Location     Type
 12794 ;;                  1    wreg      void 
 12795 ;; Registers used:
 12796 ;;		wreg, status,2, status,0, pclath, cstack
 12797 ;; Tracked objects:
 12798 ;;		On entry : 0/0
 12799 ;;		On exit  : 0/0
 12800 ;;		Unchanged: 0/0
 12801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12802 ;;      Params:         1       0       0       0       0
 12803 ;;      Locals:         1       0       0       0       0
 12804 ;;      Temps:          0       0       0       0       0
 12805 ;;      Totals:         2       0       0       0       0
 12806 ;;Total ram usage:        2 bytes
 12807 ;; Hardware stack levels used:    1
 12808 ;; Hardware stack levels required when called:    1
 12809 ;; This function calls:
 12810 ;;		_SPI1_write
 12811 ;; This function is called by:
 12812 ;;		_printf_MATRIX7219
 12813 ;; This function uses a non-reentrant model
 12814 ;;
 12815                           
 12816                           
 12817                           ;psect for function _Write_Byte
 12818  18A3                     _Write_Byte:	
 12819                           
 12820                           ;incstack = 0
 12821                           ; Regs used in _Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 12822                           ;Write_Byte@myColumn stored from wreg
 12823  18A3  00F1               	movwf	Write_Byte@myColumn
 12824                           
 12825                           ;teris_16f886.c: 483: RA2 = 0;
 12826  18A4  1283               	bcf	3,5	;RP0=0, select bank0
 12827  18A5  1303               	bcf	3,6	;RP1=0, select bank0
 12828  18A6  1105               	bcf	5,2	;volatile
 12829                           
 12830                           ;teris_16f886.c: 484: SPI1_write(myColumn);
 12831  18A7  0871               	movf	Write_Byte@myColumn,w
 12832  18A8  160A  158A  204E  160A  158A  	fcall	_SPI1_write
 12833                           
 12834                           ;teris_16f886.c: 485: SPI1_write(myValue);
 12835  18AD  0870               	movf	Write_Byte@myValue,w
 12836  18AE  160A  158A  204E   	fcall	_SPI1_write
 12837                           
 12838                           ;teris_16f886.c: 486: RA2 = 1;
 12839  18B1  1283               	bcf	3,5	;RP0=0, select bank0
 12840  18B2  1303               	bcf	3,6	;RP1=0, select bank0
 12841  18B3  1505               	bsf	5,2	;volatile
 12842  18B4  0008               	return
 12843  18B5                     __end_of_Write_Byte:	
 12844                           
 12845                           	psect	text48
 12846  184E                     __ptext48:	
 12847 ;; *************** function _SPI1_write *****************
 12848 ;; Defined at:
 12849 ;;		line 424 in file "teris_16f886.c"
 12850 ;; Parameters:    Size  Location     Type
 12851 ;;  data            1    wreg     unsigned char 
 12852 ;; Auto vars:     Size  Location     Type
 12853 ;;  data            1    0[COMMON] unsigned char 
 12854 ;; Return value:  Size  Location     Type
 12855 ;;                  1    wreg      void 
 12856 ;; Registers used:
 12857 ;;		wreg
 12858 ;; Tracked objects:
 12859 ;;		On entry : 0/0
 12860 ;;		On exit  : 0/0
 12861 ;;		Unchanged: 0/0
 12862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12863 ;;      Params:         0       0       0       0       0
 12864 ;;      Locals:         0       0       0       0       0
 12865 ;;      Temps:          0       0       0       0       0
 12866 ;;      Totals:         0       0       0       0       0
 12867 ;;Total ram usage:        0 bytes
 12868 ;; Hardware stack levels used:    1
 12869 ;; This function calls:
 12870 ;;		Nothing
 12871 ;; This function is called by:
 12872 ;;		_Write_Byte
 12873 ;;		_max7219_init1
 12874 ;; This function uses a non-reentrant model
 12875 ;;
 12876                           
 12877                           
 12878                           ;psect for function _SPI1_write
 12879  184E                     _SPI1_write:	
 12880                           
 12881                           ;incstack = 0
 12882                           ; Regs used in _SPI1_write: [wreg]
 12883  184E  0008               	return
 12884  184F                     __end_of_SPI1_write:	
 12885                           
 12886                           	psect	text49
 12887  1BD6                     __ptext49:	
 12888 ;; *************** function _MATRIX88_to_MATRIX7219 *****************
 12889 ;; Defined at:
 12890 ;;		line 531 in file "teris_16f886.c"
 12891 ;; Parameters:    Size  Location     Type
 12892 ;;  matrix88        1    wreg     PTR const struct .
 12893 ;;		 -> g_matrix88(64), 
 12894 ;;  matrix7219      1    0[COMMON] PTR struct .
 12895 ;;		 -> printf_MATRIX88@matrix7219(8), 
 12896 ;; Auto vars:     Size  Location     Type
 12897 ;;  matrix88        1    4[COMMON] PTR const struct .
 12898 ;;		 -> g_matrix88(64), 
 12899 ;;  row             1    6[COMMON] unsigned char 
 12900 ;;  col             1    7[COMMON] unsigned char 
 12901 ;;  mask            1    5[COMMON] unsigned char 
 12902 ;; Return value:  Size  Location     Type
 12903 ;;                  1    wreg      void 
 12904 ;; Registers used:
 12905 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12906 ;; Tracked objects:
 12907 ;;		On entry : 0/0
 12908 ;;		On exit  : 0/0
 12909 ;;		Unchanged: 0/0
 12910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12911 ;;      Params:         1       0       0       0       0
 12912 ;;      Locals:         4       0       0       0       0
 12913 ;;      Temps:          3       0       0       0       0
 12914 ;;      Totals:         8       0       0       0       0
 12915 ;;Total ram usage:        8 bytes
 12916 ;; Hardware stack levels used:    1
 12917 ;; This function calls:
 12918 ;;		Nothing
 12919 ;; This function is called by:
 12920 ;;		_printf_MATRIX88
 12921 ;; This function uses a non-reentrant model
 12922 ;;
 12923                           
 12924                           
 12925                           ;psect for function _MATRIX88_to_MATRIX7219
 12926  1BD6                     _MATRIX88_to_MATRIX7219:	
 12927                           
 12928                           ;incstack = 0
 12929                           ; Regs used in _MATRIX88_to_MATRIX7219: [wreg-fsr0h+status,2+status,0]
 12930                           ;MATRIX88_to_MATRIX7219@matrix88 stored from wreg
 12931  1BD6  00F4               	movwf	MATRIX88_to_MATRIX7219@matrix88
 12932                           
 12933                           ;teris_16f886.c: 533: uint8_t mask = 0x80;
 12934  1BD7  3080               	movlw	128
 12935  1BD8  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12936  1BD9  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12937  1BDA  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
 12938                           
 12939                           ;teris_16f886.c: 535: for(uint8_t col = 0; col < 8; col++)
 12940  1BDB  01F7               	clrf	MATRIX88_to_MATRIX7219@col
 12941  1BDC                     L40:	
 12942  1BDC  3008               	movlw	8
 12943  1BDD  0277               	subwf	MATRIX88_to_MATRIX7219@col,w
 12944  1BDE  1803               	btfsc	3,0
 12945  1BDF  0008               	return
 12946                           
 12947                           ;teris_16f886.c: 536: {
 12948                           ;teris_16f886.c: 537: mask = 0x80;
 12949  1BE0  3080               	movlw	128
 12950  1BE1  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12951  1BE2  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12952  1BE3  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
 12953                           
 12954                           ;teris_16f886.c: 538: matrix7219->col[col] = 0;
 12955  1BE4  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 12956  1BE5  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
 12957  1BE6  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12958  1BE7  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 12959  1BE8  0084               	movwf	4
 12960  1BE9  1383               	bcf	3,7	;select IRP bank0
 12961  1BEA  0180               	clrf	0
 12962                           
 12963                           ;teris_16f886.c: 539: for(uint8_t row = 0; row < 8; row++)
 12964  1BEB  01F6               	clrf	MATRIX88_to_MATRIX7219@row
 12965  1BEC  3008               	movlw	8
 12966  1BED  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
 12967  1BEE  1803               	btfsc	3,0
 12968  1BEF  2C19               	goto	l3451
 12969  1BF0                     l3441:	
 12970                           
 12971                           ;teris_16f886.c: 540: {
 12972                           ;teris_16f886.c: 541: if(matrix88->data[row][col] == 1)
 12973  1BF0  0876               	movf	MATRIX88_to_MATRIX7219@row,w
 12974  1BF1  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 12975  1BF2  3002               	movlw	2
 12976  1BF3                     u4215:	
 12977  1BF3  1003               	clrc
 12978  1BF4  0DF1               	rlf	??_MATRIX88_to_MATRIX7219,f
 12979  1BF5  3EFF               	addlw	-1
 12980  1BF6  1D03               	skipz
 12981  1BF7  2BF3               	goto	u4215
 12982  1BF8  1003               	clrc
 12983  1BF9  0D71               	rlf	??_MATRIX88_to_MATRIX7219,w
 12984  1BFA  0774               	addwf	MATRIX88_to_MATRIX7219@matrix88,w
 12985  1BFB  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
 12986  1BFC  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 12987  1BFD  0772               	addwf	??_MATRIX88_to_MATRIX7219+1,w
 12988  1BFE  00F3               	movwf	??_MATRIX88_to_MATRIX7219+2
 12989  1BFF  0873               	movf	??_MATRIX88_to_MATRIX7219+2,w
 12990  1C00  0084               	movwf	4
 12991  1C01  1783               	bsf	3,7	;select IRP bank2
 12992  1C02  0300               	decf	0,w
 12993  1C03  1D03               	btfss	3,2
 12994  1C04  2C0F               	goto	l3445
 12995                           
 12996                           ;teris_16f886.c: 542: {
 12997                           ;teris_16f886.c: 543: matrix7219->col[col] |= mask;
 12998  1C05  0875               	movf	MATRIX88_to_MATRIX7219@mask,w
 12999  1C06  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13000  1C07  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 13001  1C08  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
 13002  1C09  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
 13003  1C0A  0872               	movf	??_MATRIX88_to_MATRIX7219+1,w
 13004  1C0B  0084               	movwf	4
 13005  1C0C  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13006  1C0D  1383               	bcf	3,7	;select IRP bank0
 13007  1C0E  0480               	iorwf	0,f
 13008  1C0F                     l3445:	
 13009                           
 13010                           ;teris_16f886.c: 544: }
 13011                           ;teris_16f886.c: 545: mask >>= 1;
 13012  1C0F  1003               	clrc
 13013  1C10  0CF5               	rrf	MATRIX88_to_MATRIX7219@mask,f
 13014  1C11  3001               	movlw	1
 13015  1C12  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13016  1C13  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13017  1C14  07F6               	addwf	MATRIX88_to_MATRIX7219@row,f
 13018  1C15  3008               	movlw	8
 13019  1C16  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
 13020  1C17  1C03               	skipc
 13021  1C18  2BF0               	goto	l3441
 13022  1C19                     l3451:	
 13023  1C19  3001               	movlw	1
 13024  1C1A  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 13025  1C1B  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 13026  1C1C  07F7               	addwf	MATRIX88_to_MATRIX7219@col,f
 13027  1C1D  2BDC               	goto	L40
 13028  1C1E                     __end_of_MATRIX88_to_MATRIX7219:	
 13029                           
 13030                           	psect	text50
 13031  1908                     __ptext50:	
 13032 ;; *************** function _memset *****************
 13033 ;; Defined at:
 13034 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
 13035 ;; Parameters:    Size  Location     Type
 13036 ;;  p1              2    0[COMMON] PTR void 
 13037 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
 13038 ;;  c               2    2[COMMON] int 
 13039 ;;  n               2    4[COMMON] unsigned int 
 13040 ;; Auto vars:     Size  Location     Type
 13041 ;;  p               2    6[COMMON] PTR unsigned char 
 13042 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
 13043 ;; Return value:  Size  Location     Type
 13044 ;;                  2    0[COMMON] PTR void 
 13045 ;; Registers used:
 13046 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13047 ;; Tracked objects:
 13048 ;;		On entry : 0/0
 13049 ;;		On exit  : 0/0
 13050 ;;		Unchanged: 0/0
 13051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13052 ;;      Params:         6       0       0       0       0
 13053 ;;      Locals:         2       0       0       0       0
 13054 ;;      Temps:          0       0       0       0       0
 13055 ;;      Totals:         8       0       0       0       0
 13056 ;;Total ram usage:        8 bytes
 13057 ;; Hardware stack levels used:    1
 13058 ;; This function calls:
 13059 ;;		Nothing
 13060 ;; This function is called by:
 13061 ;;		_Clear_Matrix
 13062 ;;		_delete_row
 13063 ;; This function uses a non-reentrant model
 13064 ;;
 13065                           
 13066                           
 13067                           ;psect for function _memset
 13068  1908                     _memset:	
 13069                           
 13070                           ;incstack = 0
 13071                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
 13072  1908  0870               	movf	memset@p1,w
 13073  1909  00F6               	movwf	memset@p
 13074  190A  0871               	movf	memset@p1+1,w
 13075  190B  00F7               	movwf	memset@p+1
 13076  190C                     l3461:	
 13077  190C  3001               	movlw	1
 13078  190D  02F4               	subwf	memset@n,f
 13079  190E  3000               	movlw	0
 13080  190F  1C03               	skipc
 13081  1910  03F5               	decf	memset@n+1,f
 13082  1911  02F5               	subwf	memset@n+1,f
 13083  1912  0A74               	incf	memset@n,w
 13084  1913  1903               	btfsc	3,2
 13085  1914  0A75               	incf	memset@n+1,w
 13086  1915  1903               	btfsc	3,2
 13087  1916  0008               	return
 13088  1917  0876               	movf	memset@p,w
 13089  1918  0084               	movwf	4
 13090  1919  1383               	bcf	3,7
 13091  191A  1877               	btfsc	memset@p+1,0
 13092  191B  1783               	bsf	3,7
 13093  191C  0872               	movf	memset@c,w
 13094  191D  0080               	movwf	0
 13095  191E  3001               	movlw	1
 13096  191F  07F6               	addwf	memset@p,f
 13097  1920  1803               	skipnc
 13098  1921  0AF7               	incf	memset@p+1,f
 13099  1922  290C               	goto	l3461
 13100  1923                     __end_of_memset:	
 13101                           ;	Return value of _memset is never used
 13102                           
 13103  007E                     btemp	set	126	;btemp
 13104  007E                     wtemp	set	126
 13105  007E                     wtemp0	set	126
 13106  0080                     wtemp1	set	128
 13107  0082                     wtemp2	set	130
 13108  0084                     wtemp3	set	132
 13109  0086                     wtemp4	set	134
 13110  0088                     wtemp5	set	136
 13111  007F                     wtemp6	set	127
 13112  007E                     ttemp	set	126
 13113  007E                     ttemp0	set	126
 13114  0081                     ttemp1	set	129
 13115  0084                     ttemp2	set	132
 13116  0087                     ttemp3	set	135
 13117  007F                     ttemp4	set	127
 13118  007E                     ltemp	set	126
 13119  007E                     ltemp0	set	126
 13120  0082                     ltemp1	set	130
 13121  0086                     ltemp2	set	134
 13122  0080                     ltemp3	set	128


Data Sizes:
    Strings     1022
    Constant    414
    Data        38
    BSS         144
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     72      80
    BANK1            80     71      80
    BANK3            96      0      71
    BANK2            96      0      96

Pointer List with Targets:

    is_right_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_left_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    memset@p1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memset@p	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    sprintf$719	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_99(CODE[17]), STR_98(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_96(CODE[13]), STR_94(CODE[23]), STR_92(CODE[15]), STR_91(CODE[19]), 
		 -> STR_90(CODE[19]), STR_89(CODE[20]), STR_88(CODE[16]), STR_87(CODE[15]), 
		 -> STR_84(CODE[15]), STR_83(CODE[19]), STR_82(CODE[19]), STR_81(CODE[20]), 
		 -> STR_80(CODE[16]), STR_79(CODE[15]), STR_77(CODE[18]), STR_76(CODE[19]), 
		 -> STR_75(CODE[18]), STR_74(CODE[19]), STR_73(CODE[18]), STR_72(CODE[17]), 
		 -> STR_71(CODE[22]), STR_70(CODE[18]), STR_69(CODE[19]), STR_68(CODE[18]), 
		 -> STR_67(CODE[19]), STR_66(CODE[18]), STR_65(CODE[20]), STR_64(CODE[15]), 
		 -> STR_63(CODE[19]), STR_58(CODE[14]), STR_57(CODE[10]), STR_56(CODE[11]), 
		 -> STR_55(CODE[9]), STR_54(CODE[12]), STR_53(CODE[9]), STR_52(CODE[7]), 
		 -> STR_50(CODE[21]), STR_49(CODE[16]), STR_48(CODE[15]), STR_47(CODE[10]), 
		 -> STR_46(CODE[15]), STR_44(CODE[15]), STR_39(CODE[19]), STR_37(CODE[19]), 
		 -> STR_35(CODE[19]), STR_31(CODE[24]), STR_30(CODE[24]), STR_28(CODE[25]), 
		 -> STR_14(CODE[27]), STR_13(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 32
		 -> g_debug(BANK3[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    g_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    find_best_solution@temp_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_holes_after_merge@matrix	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    get_high_after_merge@matrix	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_high@matrix	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    left_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    left_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    evaluate@matrix	PTR const struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge1@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    merge1@matrix88_in	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge1@matrix88_out	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    clear@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    clear@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    fall_off@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    fall_off@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_right_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_left_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_valid@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_valid@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    hit_land@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    hit_land@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    is_row_empty@matrix	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    delete_matrix@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memcpy	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    delete_row@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    is_row_full@matrix	PTR const struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memset	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    printf_debug_Screen@lable	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_61(CODE[15]), 

    printf_MATRIX88@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    printf_debug_MATRIX88@matrix	PTR const struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    printf_debug_MATRIX88@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_97(CODE[12]), STR_62(CODE[15]), ROM(CODE[8192]), 

    MATRIX88_to_MATRIX7219@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    MATRIX88_to_MATRIX7219@matrix7219	PTR struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    printf_MATRIX7219@matrix	PTR const struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    sp__get_MATRIX44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_debug_cur_MATRIX44@matrix	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_debug_cur_MATRIX44@lable	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_85(CODE[7]), 

    printf_debug_MATRIX44@matrix	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_debug_MATRIX44@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_60(CODE[15]), ROM(CODE[8192]), 

    debug_int2@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_77(CODE[18]), STR_76(CODE[19]), STR_75(CODE[18]), STR_74(CODE[19]), 
		 -> STR_73(CODE[18]), STR_72(CODE[17]), STR_70(CODE[18]), STR_69(CODE[19]), 
		 -> STR_68(CODE[18]), STR_67(CODE[19]), STR_66(CODE[18]), STR_65(CODE[20]), 
		 -> STR_63(CODE[19]), STR_46(CODE[15]), STR_44(CODE[15]), STR_39(CODE[19]), 
		 -> STR_37(CODE[19]), STR_35(CODE[19]), STR_31(CODE[24]), STR_30(CODE[24]), 
		 -> STR_14(CODE[27]), 

    debug_int1@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_96(CODE[13]), STR_94(CODE[23]), STR_92(CODE[15]), STR_91(CODE[19]), 
		 -> STR_90(CODE[19]), STR_89(CODE[20]), STR_88(CODE[16]), STR_87(CODE[15]), 
		 -> STR_84(CODE[15]), STR_83(CODE[19]), STR_82(CODE[19]), STR_81(CODE[20]), 
		 -> STR_80(CODE[16]), STR_79(CODE[15]), STR_71(CODE[22]), STR_64(CODE[15]), 
		 -> STR_58(CODE[14]), STR_57(CODE[10]), STR_56(CODE[11]), STR_55(CODE[9]), 
		 -> STR_54(CODE[12]), STR_53(CODE[9]), STR_52(CODE[7]), STR_50(CODE[21]), 
		 -> STR_49(CODE[16]), STR_48(CODE[15]), STR_47(CODE[10]), STR_28(CODE[25]), 
		 -> STR_13(CODE[10]), 

    debug_line@str	PTR const unsigned char  size(2) Largest target is 45
		 -> STR_95(CODE[13]), STR_93(CODE[13]), STR_86(CODE[7]), STR_78(CODE[5]), 
		 -> STR_59(CODE[45]), STR_51(CODE[21]), STR_45(CODE[10]), STR_43(CODE[10]), 
		 -> STR_42(CODE[20]), STR_41(CODE[19]), STR_40(CODE[6]), STR_38(CODE[11]), 
		 -> STR_36(CODE[11]), STR_34(CODE[11]), STR_33(CODE[35]), STR_32(CODE[8]), 
		 -> STR_29(CODE[35]), STR_27(CODE[2]), STR_26(CODE[21]), STR_25(CODE[1]), 
		 -> STR_22(CODE[29]), STR_21(CODE[2]), STR_20(CODE[21]), STR_19(CODE[1]), 
		 -> STR_16(CODE[21]), STR_15(CODE[2]), STR_12(CODE[20]), STR_11(CODE[2]), 
		 -> STR_10(CODE[21]), STR_9(CODE[1]), STR_6(CODE[29]), STR_5(CODE[2]), 

    debug_str@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_97(CODE[12]), STR_85(CODE[7]), STR_62(CODE[15]), STR_61(CODE[15]), 
		 -> STR_60(CODE[15]), STR_24(CODE[2]), STR_23(CODE[2]), STR_18(CODE[2]), 
		 -> STR_17(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), ROM(CODE[8192]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_97(CODE[12]), STR_95(CODE[13]), STR_93(CODE[13]), STR_86(CODE[7]), 
		 -> STR_85(CODE[7]), STR_78(CODE[5]), STR_62(CODE[15]), STR_61(CODE[15]), 
		 -> STR_60(CODE[15]), STR_59(CODE[45]), STR_51(CODE[21]), STR_45(CODE[10]), 
		 -> STR_43(CODE[10]), STR_42(CODE[20]), STR_41(CODE[19]), STR_40(CODE[6]), 
		 -> STR_38(CODE[11]), STR_36(CODE[11]), STR_34(CODE[11]), STR_33(CODE[35]), 
		 -> STR_32(CODE[8]), STR_29(CODE[35]), STR_27(CODE[2]), STR_26(CODE[21]), 
		 -> STR_25(CODE[1]), STR_24(CODE[2]), STR_23(CODE[2]), STR_22(CODE[29]), 
		 -> STR_21(CODE[2]), STR_20(CODE[21]), STR_19(CODE[1]), STR_18(CODE[2]), 
		 -> STR_17(CODE[2]), STR_16(CODE[21]), STR_15(CODE[2]), STR_12(CODE[20]), 
		 -> STR_11(CODE[2]), STR_10(CODE[21]), STR_9(CODE[1]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[29]), STR_5(CODE[2]), ROM(CODE[8192]), 
		 -> STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), g_debug(BANK3[32]), 
		 -> STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    _find_best_solution->_printf_debug_Screen
    _is_right_boundary->_debug_line
    _printf_debug_cur_MATRIX44->_printf_debug_MATRIX44
    _printf_debug_MATRIX44->_debug_line
    _printf_debug_MATRIX44->_debug_str
    _printf_debug_Screen->_printf_debug_MATRIX88
    _printf_debug_MATRIX88->_debug_line
    _printf_debug_MATRIX88->_debug_str
    _debug_str->_USARTWriteString
    _merge1->_memcpy
    _left_most->_is_left_boundary
    _is_left_boundary->_debug_line
    _debug_line->_USARTWriteString
    _delete_matrix->_delete_row
    _delete_row->_memcpy
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USARTWriteString->_USARTWriteChar
    _char_info_index_rand->___awmod
    _rand->___lmul
    _printf_Screen->_printf_MATRIX88
    _printf_MATRIX88->_MATRIX88_to_MATRIX7219
    _printf_MATRIX7219->_Write_Byte

Critical Paths under _main in BANK0

    _main->_find_best_solution
    _hit_land->_debug_int2
    _find_best_solution->_fall_off
    _find_best_solution->_is_valid
    _right_most->_debug_int1
    _printf_debug_cur_MATRIX44->_printf_debug_MATRIX44
    _printf_debug_Screen->_printf_debug_MATRIX88
    _left_most->_debug_int1
    _is_valid->_debug_int2
    _get_holes_after_merge->_debug_int1
    _get_high_after_merge->_debug_int1
    _get_high->_debug_int1
    _fall_off->_debug_int2
    _debug_int2->_sprintf
    _evaluate->_debug_int1
    _delete_matrix->_debug_int1
    _debug_int1->_sprintf
    _char_info_index_rand->___awmod
    ___awmod->_rand
    _printf_Screen->_printf_MATRIX88

Critical Paths under _main in BANK1

    _main->_find_best_solution

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    12      4  211470
                                             56 BANK0     16    12      4
                       _Clear_Matrix
                          _USARTInit
                             ___bmul
               _char_info_index_rand
                              _clear
                         _debug_int1
                         _debug_line
                      _delete_matrix
                 _find_best_solution
                           _hit_land
                              _merge
                      _printf_Screen
              _printf_debug_MATRIX88
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _merge                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _hit_land                                            11     7      4   13511
                                             38 BANK0     11     7      4
                         _debug_int2
                         _debug_line
 ---------------------------------------------------------------------------------
 (1) _find_best_solution                                  78    78      0  165276
                                             49 BANK0      7     7      0
                                              0 BANK1     71    71      0
                             ___bmul
                         _debug_int1
                         _debug_int2
                         _debug_line
                      _delete_matrix
                           _evaluate
                           _fall_off
                           _get_high
               _get_high_after_merge
              _get_holes_after_merge
                           _is_valid
                          _left_most
                             _merge1
              _printf_debug_MATRIX44
              _printf_debug_MATRIX88
                _printf_debug_Screen
          _printf_debug_cur_MATRIX44
                         _right_most
 ---------------------------------------------------------------------------------
 (2) _right_most                                           6     3      3   13099
                                             36 BANK0      6     3      3
                         _debug_int1
                  _is_right_boundary
 ---------------------------------------------------------------------------------
 (3) _is_right_boundary                                   10     7      3    3309
                                              6 COMMON     7     4      3
                                              0 BANK0      3     3      0
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _printf_debug_cur_MATRIX44                           16    12      4   10997
                                             12 BANK0     16    12      4
                             ___bmul
                         _debug_line
                          _debug_str
              _printf_debug_MATRIX44
 ---------------------------------------------------------------------------------
 (3) _printf_debug_MATRIX44                               18    12      6    5823
                                              6 COMMON     6     0      6
                                              0 BANK0     12    12      0
                         _debug_line
                          _debug_str
 ---------------------------------------------------------------------------------
 (2) _printf_debug_Screen                                  3     1      2    9692
                                             13 COMMON     1     1      0
                                              5 BANK0      2     0      2
                         _debug_line
                          _debug_str
              _printf_debug_MATRIX88
 ---------------------------------------------------------------------------------
 (1) _printf_debug_MATRIX88                               12     8      4    5123
                                              6 COMMON     7     3      4
                                              0 BANK0      5     5      0
                         _debug_line
                          _debug_str
 ---------------------------------------------------------------------------------
 (2) _debug_str                                            3     1      2    1523
                                              3 COMMON     3     1      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _merge1                                              14     9      5    1128
                                              0 BANK0     14     9      5
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _left_most                                            5     2      3   13099
                                             36 BANK0      5     2      3
                         _debug_int1
                   _is_left_boundary
 ---------------------------------------------------------------------------------
 (3) _is_left_boundary                                    11     8      3    3309
                                              6 COMMON     8     5      3
                                              0 BANK0      3     3      0
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _is_valid                                            11     7      4   13697
                                             38 BANK0     11     7      4
                         _debug_int2
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _get_holes_after_merge                               12    12      0   11127
                                             36 BANK0     12    12      0
                         _debug_int1
 ---------------------------------------------------------------------------------
 (2) _get_high_after_merge                                 9     7      2   12870
                                             36 BANK0      9     7      2
                         _debug_int1
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _get_high                                             4     4      0    9916
                                             36 BANK0      4     4      0
                         _debug_int1
                       _is_row_empty
 ---------------------------------------------------------------------------------
 (3) _is_row_empty                                         6     5      1     192
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (2) _fall_off                                            11     7      4   13576
                                             38 BANK0     11     7      4
                         _debug_int2
                         _debug_line
 ---------------------------------------------------------------------------------
 (2) _debug_line                                           3     1      2    2888
                                              3 COMMON     3     1      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _debug_int2                                           7     1      6    9858
                                             31 BANK0      7     1      6
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _evaluate                                            12    10      2   10089
                                             36 BANK0     12    10      2
                         _debug_int1
 ---------------------------------------------------------------------------------
 (2) _delete_matrix                                        6     4      2   11224
                                             36 BANK0      6     4      2
                         _debug_int1
                         _delete_row
                        _is_row_full
 ---------------------------------------------------------------------------------
 (3) _is_row_full                                          9     6      3     193
                                              0 COMMON     9     6      3
 ---------------------------------------------------------------------------------
 (3) _delete_row                                          10     7      3    1232
                                             11 COMMON     3     0      3
                                              0 BANK0      7     7      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6     388
                                              0 COMMON    11     5      6
 ---------------------------------------------------------------------------------
 (3) _debug_int1                                           5     1      4    9502
                                             31 BANK0      5     1      4
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             35    27      8    4893
                                              0 BANK0     31    23      8
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     684
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     480
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     379
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     0      2     746
                                              1 COMMON     2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _clear                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _char_info_index_rand                                 0     0      0     706
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     198
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     508
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      75
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Clear_Matrix                                         0     0      0    1047
                             _memset
                      _printf_Screen
 ---------------------------------------------------------------------------------
 (1) _printf_Screen                                        0     0      0     683
                    _printf_MATRIX88
 ---------------------------------------------------------------------------------
 (2) _printf_MATRIX88                                     10    10      0     683
                                              8 COMMON     1     1      0
                                              0 BANK0      9     9      0
             _MATRIX88_to_MATRIX7219
                  _printf_MATRIX7219
 ---------------------------------------------------------------------------------
 (3) _printf_MATRIX7219                                    4     4      0     236
                                              2 COMMON     4     4      0
                         _Write_Byte
 ---------------------------------------------------------------------------------
 (4) _Write_Byte                                           2     1      1      97
                                              0 COMMON     2     1      1
                         _SPI1_write
 ---------------------------------------------------------------------------------
 (5) _SPI1_write                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _MATRIX88_to_MATRIX7219                               8     7      1     351
                                              0 COMMON     8     7      1
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     364
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Clear_Matrix
     _memset
     _printf_Screen
       _printf_MATRIX88
         _MATRIX88_to_MATRIX7219
         _printf_MATRIX7219
           _Write_Byte
             _SPI1_write
   _USARTInit
   ___bmul
   _char_info_index_rand
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _clear
   _debug_int1
     _USARTWriteString
       _USARTWriteChar
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _debug_line
     _USARTWriteString
       _USARTWriteChar
   _delete_matrix
     _debug_int1
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _delete_row
       _memcpy
       _memset
     _is_row_full
   _find_best_solution
     ___bmul
     _debug_int1
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_int2
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _delete_matrix
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _delete_row
         _memcpy
         _memset
       _is_row_full
     _evaluate
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _fall_off
       _debug_int2
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _debug_line
         _USARTWriteString
           _USARTWriteChar
     _get_high
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_row_empty
     _get_high_after_merge
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _debug_line
         _USARTWriteString
           _USARTWriteChar
     _get_holes_after_merge
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _is_valid
       _debug_int2
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _debug_line
         _USARTWriteString
           _USARTWriteChar
     _left_most
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_left_boundary
         _debug_line
           _USARTWriteString
             _USARTWriteChar
     _merge1
       _memcpy
     _printf_debug_MATRIX44
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
     _printf_debug_MATRIX88
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
     _printf_debug_Screen
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
       _printf_debug_MATRIX88
         _debug_line
           _USARTWriteString
             _USARTWriteChar
         _debug_str
           _USARTWriteString
             _USARTWriteChar
     _printf_debug_cur_MATRIX44
       ___bmul
       _debug_line
         _USARTWriteString
           _USARTWriteChar
       _debug_str
         _USARTWriteString
           _USARTWriteChar
       _printf_debug_MATRIX44
         _debug_line
           _USARTWriteString
             _USARTWriteChar
         _debug_str
           _USARTWriteString
             _USARTWriteChar
     _right_most
       _debug_int1
         _USARTWriteString
           _USARTWriteChar
         _sprintf
           ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _is_right_boundary
         _debug_line
           _USARTWriteString
             _USARTWriteChar
   _hit_land
     _debug_int2
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _debug_line
       _USARTWriteString
         _USARTWriteChar
   _merge
   _printf_Screen
     _printf_MATRIX88
       _MATRIX88_to_MATRIX7219
       _printf_MATRIX7219
         _Write_Byte
           _SPI1_write
   _printf_debug_MATRIX88
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _debug_str
       _USARTWriteString
         _USARTWriteChar
   _srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      47       9       74.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      60      11      100.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     47      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     48      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     155      12        0.0%
ABS                  0      0     155       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Aug 27 14:17:47 2016

                         __CFG_CP$ON 0000                                    pc 0002  
                     ___bmul@product 0072        get_holes_after_merge@num_hole 004A  
                                 l36 185B                                   l29 1BC4  
                        __CFG_CPD$ON 0000                    merge1@matrix88_in 0023  
     __end_of_MATRIX88_to_MATRIX7219 1C1E                                   fsr 0004  
                ___wmul@multiplicand 0072                   USARTInit@baud_rate 0070  
              ?_char_info_index_rand 0070                          get_high@row 0047  
                        __CFG_LVP$ON 0000                                  l420 00DE  
                                l431 00D5                                  l239 10AA  
                                l256 1A3D                                  l530 02F2  
                                l338 125C                                  l178 0EFE  
                                l531 02F4                                  l533 030F  
                                l550 03EC                                  l470 16A0  
                                l543 03B6                                  l527 02EE  
                                l625 069B                                  l609 062C  
                                l529 02F0                                  l554 03EE  
                                l555 03EF                                  l580 04EA  
                                l396 1AE0                                  l389 1AAE  
                                l647 0790                                  l736 1969  
                                l585 0512                                  l589 053A  
                                _GIE 005F                                  _RA1 0029  
                                _RA2 002A                   merge1@matrix88_out 0024  
                                fsr0 0004                                  indf 0000  
                       ___awmod@sign 002C                         __CFG_IESO$ON 0000  
                        _sprintf$712 002B                          _sprintf$713 002D  
                        _sprintf$719 002F                       is_row_full@col 0078  
                     is_row_full@row 0072                                 l3001 187F  
                               l3021 1883                                 l3101 02F9  
                               l3007 1961                                 l3025 1889  
                               l3105 0315                                 l3051 1B40  
                               l3043 1B1C                                 l4101 1CF8  
                               l3045 1B2A                                 l3213 04DE  
                               l3125 0386                                 l3109 0329  
                               l3117 0368                                 l4111 1B9B  
                               l3055 1B4B                                 l3151 0406  
                               l3143 03E8                                 l4113 1B9D  
                               l3073 1A9B                                 l3209 04D2  
                               l3161 041A                                 l3145 03F1  
                               l3137 03B5                                 l5001 1E4E  
                               l4107 1B97                                 l3067 1A7F  
                               l3307 0635                                 l3323 065F  
                               l3331 0675                                 l3251 0562  
                               l3155 0415                                 l5011 1E59  
                               l4109 1B99                                 l4117 1BA2  
                               l3069 1A8D                                 l3077 1AA6  
                               l3341 068F                                 l3317 0651  
                               l3261 058A                                 l3253 0571  
                               l3181 045E                                 l3165 0425  
                               l3173 0444                                 l3157 0417  
                               l3405 02C1                                 l3351 06A8  
                               l3335 067A                                 l3191 047F  
                               l3183 046B                                 l3167 0432  
                               l3407 07B5                                 l5103 0E6C  
                               l5031 1EA9                                 l3441 1BF0  
                               l3281 05D6                                 l3273 05BF  
                               l3257 057E                                 l3177 0453  
                               l3097 02E9                                 l5121 0ED0  
                               l5017 1E5F                                 l3451 1C19  
                               l4075 1CBC                                 l3275 05C3  
                               l3267 059E                                 l3187 0476  
                               l3195 0484                                 l5027 1E9E  
                               l5035 1EAF                                 l3461 190C  
                               l3445 1C0F                                 l4093 1CE5  
                               l4253 1D47                                 l4245 1D08  
                               l3381 0735                                 l3373 06DD  
                               l3357 06B7                                 l3293 061A  
                               l3197 04B0                                 l5213 1024  
                               l5109 0E8C                                 l5117 0EC5  
                               l5125 0ED6                                 l5045 1F36  
                               l4087 1CC9                                 l4079 1CC3  
                               l3375 070A                                 l3391 076E  
                               l3367 06D3                                 l3295 061E  
                               l3287 05F7                                 l3471 19FD  
                               l5223 1058                                 l5207 101A  
                               l5143 1268                                 l3615 19C2  
                               l5303 119A                                 l4089 1CD7  
                               l4097 1CF0                                 l4249 1D3F  
                               l3385 0748                                 l3289 05FB  
                               l5065 1C4D                                 l5217 103A  
                               l5233 107B                                 l5153 12C2  
                               l5161 12FB                                 l5137 1262  
                               l3609 19AB                                 l4273 1D8F  
                               l3395 0779                                 l5067 1C25  
                               l3619 19CA                                 l5307 11A3  
                               l5083 0DE8                                 l5069 1C54  
                               l5229 1073                                 l5165 1306  
                               l5405 11C3                                 l4277 1D97  
                               l4269 1D57                                 l3399 079D  
                               l3575 1A6F                                 l5327 001C  
                               l5319 0011                                 l5247 1AD6  
                               l5191 1F0B                                 l5415 1210  
                               l5423 123E                                 l5431 124F  
                               l3569 1A4E                                 l5169 130C  
                               l5273 1CA6                                 l5265 1C70  
                               l5337 0041                                 l5089 0DEE  
                               l5257 1B0D                                 l5601 132E  
                               l3579 1A77                                 l5347 0067  
                               l5099 0E45                                 l5195 1F13  
                               l5187 1ED5                                 l5603 1735  
                               l5427 1249                                 l3693 1B58  
                               l5277 1CAE                                 l5381 013C  
                               l5365 00B8                                 l5357 00AD  
                               l4901 0FCD                                 l5295 112F  
                               l3697 1B6E                                 l5385 0147  
                               l4913 0FF7                                 l5625 17F4  
                               l5537 1580                                 l4907 0FE2  
                               l5627 17FC                                 l5555 15CB  
                               l5475 14CD                                 l4853 1980  
                               l4933 10BE                                 l4943 10F7  
                               l4927 10B9                                 l5575 1616  
                               l5399 11BD                                 l4937 10E3  
                               l4883 0F10                                 l5595 1725  
                               l4965 1FDB                                 l4949 110B  
                               l5597 13BD                                 l5765 0187  
                               l4967 1FF9                                 l4983 1E00  
                               l5599 172E                                 l5783 0202  
                               l5767 018C                                 l4993 1E3D  
                               l4977 1DFA                                 l4889 0F16  
                               l5891 1BB5                                 l5779 017D  
                               l5893 1BBA                                 l4997 1E48  
                               l5797 0274                                 l5895 1BBF  
                               l5889 1BB0                                 STR_1 0DA5  
                       __CFG_WDTE$ON 0000                                 STR_2 0DA5  
                               STR_3 0DA5                                 STR_5 0DAA  
                               STR_6 0A23                                 STR_7 0DA8  
                               STR_8 0DAC                                 STR_9 0DA7  
                        main@hit_res 0067                                 u4215 1BF3  
                               u3425 1B1F                                 u4145 079B  
                               u3515 1A93                                 u3445 1B2B  
                               u3525 1A9C                                 u3365 196A  
                               u3455 1B37                                 u3375 1971  
                               u3465 1B41                                 u4505 1A51  
                               _PEIE 005E                                 u3805 0533  
                               u3495 1A82                                 u3655 03FF  
                               u4615 19AE                                 u6055 1D81  
                               u5265 1DE3                                 u3905 05AF  
                               u3665 040C                                 u7105 1E92  
                               u3835 055B                                 _RCIE 0465  
                               u4805 1B78                                 u8005 0101  
                               u3775 050B                                 u3945 05EC  
                               u7225 0E16                                 u3955 060A  
                               u7505 102A                                 u8065 11F8  
                               u5755 1CCC                                 u4795 1B70  
                               u7515 103D                                 u7355 1290  
                               u7275 0E6A                                 u8155 151E  
                               u8075 121A                                 u7445 1EFD  
                               u6805 0F8C                                 u8245 164C  
                               u8165 152D                                 u5775 1CDD  
                               u7295 0EA3                                 u6815 0FB4  
                               u5785 1CE6                                 u7545 105B  
                               u7385 12D7                                 u8517 0262  
                               u7815 0061                                 u7735 0022  
                               u8527 02AC                                 u6945 1F9F  
                               u6785 0F4F                                 u8537 1323  
                               u5995 1D32                                 u7755 003B  
                               u6965 1FAF                                 u7845 006A  
                               u6975 1FBF                                 u6895 10C3  
                               u6985 1FE0                                 u7945 00BB  
                               u7865 0083                                 u7795 0048  
                               u7885 0098                         __CFG_WRT$OFF 0000  
             __end_of_USARTWriteChar 1862                        __CFG_FCMEN$ON 0000  
                               _main 015A                                 _rand 1D9C  
                               btemp 007E                        __CFG_BOREN$ON 0000  
                               ltemp 007E                                 start 0000  
                               ttemp 007E                                 wtemp 007E  
                  ___bmul@multiplier 0073                        __CFG_MCLRE$ON 0000  
    find_best_solution@tem_sub_index 00E5                      is_row_empty@col 0075  
                    is_row_empty@row 0070           get_high_after_merge@matrix 0044  
                              ?_main 0058                                ?_rand 0020  
                              STR_10 0B03                                STR_11 0DAA  
                              STR_12 0B56                                STR_21 0DAA  
                              STR_13 0D6E                                STR_30 0A91  
                              STR_14 0A5D                                STR_22 0A40  
                              STR_23 0DA8                                STR_31 0AA9  
                              STR_24 0DAC                                STR_40 0D9A  
                              STR_32 0D8B                                STR_16 0AEE  
                              STR_25 0DA7                                STR_41 0BDE  
                              STR_33 09DD                                STR_26 0B03  
                              STR_34 0D2E                                STR_42 0B6A  
                              STR_50 0B18                                STR_27 0DAA  
                              STR_35 0A96                                STR_43 0D5A  
                              STR_51 0B2D                                STR_52 0CD5  
                              STR_36 0D39                                STR_60 0CEB  
                              STR_44 0CCD                                STR_28 0A78  
                    __end_of___awmod 1CFD                                STR_37 0A96  
                              STR_61 0CEB                                STR_53 0D82  
                              STR_45 0D64                                STR_29 0A00  
                              STR_54 0B21                                STR_46 0CCD  
                              STR_38 0D44                                STR_62 0CDC  
                              STR_70 0C17                                STR_47 0C0D  
                              STR_55 0AA0                                STR_39 0A96  
                              STR_63 0BCB                                STR_71 0AD8  
                              STR_56 0D4F                                STR_48 0CBE  
                              STR_64 0CA0                                STR_80 0C90  
                              STR_72 0C6F                                STR_73 0C29  
                              STR_57 0D78                                STR_49 0C80  
                              STR_81 0B7E                                STR_65 0B42  
                              STR_74 0BA5                                STR_90 0C04  
                              STR_58 0CFA                                STR_66 0C3B  
                              STR_82 0C04                                STR_75 0C17  
                              STR_91 0BF1                                STR_83 0BF1  
                              STR_67 0BB8                                STR_59 09B0  
                              STR_92 0CAF                                STR_84 0CAF  
                              STR_68 0C29                                STR_76 0B92  
                              STR_77 0C3B                                STR_85 0D93  
                              STR_93 0D08                                STR_69 0BA5  
                              STR_86 0D93                                STR_78 0DA0  
                              STR_94 0AC1                                STR_95 0D08  
                              STR_87 0A69                                STR_79 0A69  
                              STR_88 0C90                                STR_96 0D15  
                              STR_89 0B7E                                STR_97 0D22  
                              STR_98 0C4D                                STR_99 0C5E  
                   USARTWriteChar@ch 0070                      __end_of___lwdiv 1B50  
                    __end_of___lwmod 1AAB                                _RCREG 001A  
                              _SPBRG 0099                     _is_left_boundary 1DF1  
                              _TXREG 0019                                _UQEnd 006E  
                ___lmul@multiplicand 0074                          ?_SPI1_write 0070  
                   debug_int1@enable 0043                                _clear 1CFD  
                   debug_int2@enable 0045                      __end_of_dpowers 0828  
                              _cur_x 00ED                                _cur_y 0068  
                              _merge 1D4C                      __end_of_isdigit 1881  
                              _randx 01D2                                _srand 186A  
                       ?_is_row_full 0070                      ??_printf_Screen 0079  
                              pclath 000A                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080             printf_debug_MATRIX44@col 002B  
           printf_debug_MATRIX44@row 002A                   __size_of_USARTInit 0047  
                    ?_USARTWriteChar 0070             printf_debug_MATRIX88@col 007C  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F             printf_debug_MATRIX88@row 007B  
                              status 0003                          hit_land@col 004F  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                      __end_of_sprintf 07BA  
    find_best_solution@temp_matrix88 00A3                          hit_land@row 0050  
              _printf_debug_MATRIX44 0EE0                _printf_debug_MATRIX88 108E  
                     get_high@matrix 0046                      __initialization 07BA  
                       __end_of_main 02BA                         __end_of_rand 1DF1  
             ??_char_info_index_rand 007E                               ??_main 005C  
                             ??_rand 0022           ?_printf_debug_cur_MATRIX44 002C  
                        evaluate@col 004E                          evaluate@row 004F  
           find_best_solution@temp_x 00E6                               ?_clear 0070  
                             ?_merge 0070                               ?_srand 0070  
              __size_of_Clear_Matrix 0014                __end_of_delete_matrix 1C67  
                             _URBuff 0110                     __end_of_fall_off 1311  
                     __CFG_PWRTE$OFF 0000                     debug_line@enable 0075  
              get_high_after_merge@y 004A                     __end_of_get_high 1CB0  
                             ___bmul 1881                  __size_of_SPI1_write 0001  
                             ___lmul 1B50                               ___wmul 195F  
                          ??___awmod 007D                     __end_of_hit_land 1259  
                          ??___lwdiv 0074                     __end_of_evaluate 108E  
                          ??___lwmod 007C                               _merge1 1EB1  
           __end_of_USARTWriteString 19A5                               _memcpy 19F5  
                             _memset 1908                     __end_of_is_valid 0EE0  
                             clear@x 0078                               clear@y 0070  
                    ___awmod@divisor 0027                               _temp_y 006A  
           __size_of_printf_MATRIX88 0012                      ___awmod@counter 002B  
                  __end_of_USARTInit 1BD6                        ?_is_row_empty 0070  
        __size_of_find_best_solution 04EF                               merge@x 0078  
                             merge@y 0070                            ??_isdigit 0070  
                        is_valid@col 0050                          is_valid@row 004F  
         printf_debug_MATRIX44@lable 0076                         _Clear_Matrix 18C7  
                             srand@x 0070                    _is_right_boundary 1E50  
                          ??_sprintf 0028              ??_get_holes_after_merge 0044  
         printf_debug_MATRIX88@lable 0076                   ?_is_right_boundary 0076  
                     evaluate@matrix 004D              __end_of__initialization 07FC  
                     merge1@matrix44 0021               ?_printf_debug_MATRIX44 0076  
             ?_printf_debug_MATRIX88 0076                       _g_cur_matrix44 0195  
          printf_debug_Screen@enable 007D                  ??_is_right_boundary 0079  
                ___bmul@multiplicand 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 1852                         __pidataBANK1 184F  
                       __pidataBANK3 193F                        __end_of_clear 1D4C  
                         _Write_Byte 18A3                        __end_of_merge 1D9C  
                      __end_of_srand 1873                   __size_of_debug_str 000C  
                     ??_is_row_empty 0071            __end_of_is_right_boundary 1EB1  
      __size_of_get_high_after_merge 0094           get_holes_after_merge@start 004D  
                            ??_clear 0074                              ??_merge 0074  
                       sprintf@width 0039                              ??_srand 0072  
                       evaluate@full 004C                           __pbssBANK0 0068  
                         __pbssBANK1 00E7                           __pbssBANK2 0110  
                         __pbssBANK3 0190                         evaluate@risk 004A  
       __size_of_printf_debug_Screen 002A                   __size_of_left_most 0032  
                  is_row_full@matrix 0070                 __size_of_is_row_full 0030  
                         _debug_int1 0DAE                           _debug_int2 19CC  
                         _debug_line 18DB                  delete_matrix@matrix 0044  
                   is_valid@matrix44 0047                     is_valid@matrix88 0049  
           __end_of_is_left_boundary 1E50                           _g_matrix44 0830  
                         _delete_row 1F8B                           _g_matrix88 0130  
                         __pmaintext 015A             printf_debug_Screen@lable 0025  
                            ?___bmul 0070                              ?___lmul 0070  
                            ?___wmul 0070                              ?_merge1 0020  
                            ?_memcpy 0070                              ?_memset 0070  
                     ___lmul@product 0079            get_holes_after_merge@stop 004B  
                       ??_SPI1_write 0070                            ?_fall_off 0046  
                  ??_printf_MATRIX88 0078            printf_MATRIX88@matrix7219 0021  
                   ??_USARTWriteChar 0070                 is_right_boundary@col 0022  
               is_right_boundary@row 0021                            ?_get_high 0070  
                 USARTWriteInt@F1617 0190                           __stringtab 0800  
                          ?_hit_land 0046                    __end_of_debug_str 100C  
                            _UQFront 006F                            ?_evaluate 0044  
                          ?_is_valid 0046                        debug_line@str 0073  
find_best_solution@temp_cur_matrix44 00E3                      __size_of___bmul 0011  
                    __size_of___lmul 003F                          ?_Write_Byte 0070  
                            ___awmod 1CB0                   __end_of_SPI1_write 184F  
                    __size_of___wmul 0021                              ___lwdiv 1B14  
                            ___lwmod 1A79                          right_most@x 0049  
                            _g_debug 0197                      __size_of_merge1 0067  
                    __size_of_memcpy 002A                            _ANSELbits 0188  
                    __size_of_memset 001B                    __end_of_left_most 1ADD  
                            __ptext1 186A                              __ptext2 1D4C  
                            __ptext3 11A8                              __ptext4 1311  
                            __ptext5 1ADD                              __ptext6 1E50  
                            __ptext7 1F18                              __ptext8 0EE0  
                            __ptext9 1A1F          ??_printf_debug_cur_MATRIX44 0030  
                  __end_of_hexpowers 0830                     fall_off@matrix44 0047  
                   fall_off@matrix88 0049                              _dpowers 081E  
                            _isdigit 1873                     ___awmod@dividend 0029  
         __size_of_is_right_boundary 0061                           ??_fall_off 004A  
                            _sprintf 02BA                           ??_get_high 0044  
                            clrloop0 1863                 end_of_initialization 07FC  
                  __end_of_octpowers 081E                    _printf_MATRIX7219 1923  
                         ??_hit_land 004A                              merge1@x 0029  
                            merge1@y 0020                           ??_evaluate 0046  
                            memcpy@d 0077                              memcpy@n 0074  
                            memcpy@s 0079                __end_of_printf_Screen 185A  
                            memset@c 0072                 __end_of_is_row_empty 19CC  
                            memset@n 0074                              memset@p 0076  
                        ?_debug_int1 003F                          ?_debug_int2 003F  
                         ??_is_valid 004A                          ?_debug_line 0073  
                 ?_printf_MATRIX7219 0070                       SPI1_write@data 0070  
        printf_debug_MATRIX44@enable 0029                           _right_most 1ADD  
           ??_MATRIX88_to_MATRIX7219 0071          printf_debug_MATRIX44@matrix 007A  
                        ?_delete_row 007B                        clear@matrix44 0071  
                      clear@matrix88 0073                            _RCSTAbits 0018  
                  Write_Byte@myValue 0070                  ??_printf_MATRIX7219 0072  
                         _temp_count 00E9                           _temp_pre_x 006D  
                       __pstringtext 0800                    ?_USARTWriteString 0071  
      __size_of_char_info_index_rand 0018          printf_debug_MATRIX88@enable 007A  
        printf_debug_MATRIX88@matrix 0078                   ??_USARTWriteString 0073  
          is_right_boundary@matrix44 0076            is_right_boundary@matrix88 0078  
                          _USARTInit 1B8F                            _TRISAbits 0085  
          __end_of_printf_MATRIX7219 193F                    _tem_pre_sub_index 01D6  
            ??_printf_debug_MATRIX44 0020              ??_printf_debug_MATRIX88 0020  
                __size_of_Write_Byte 0012                   right_most@matrix44 0044  
                 right_most@matrix88 0046       __size_of_get_holes_after_merge 0157  
      __end_of_get_holes_after_merge 015A                find_best_solution@res 00A2  
          _printf_debug_cur_MATRIX44 1F18                            _TXSTAbits 0098  
                     __end_of___bmul 1892           __end_of_find_best_solution 1800  
                     __end_of___lmul 1B8F                       __end_of___wmul 1980  
                _printf_debug_Screen 1A1F                       __end_of_merge1 1F18  
                     __end_of_memcpy 1A1F                       __end_of_memset 1923  
   MATRIX88_to_MATRIX7219@matrix7219 0070                  __size_of_debug_int1 0025  
                __size_of_debug_int2 0029               __size_of_delete_matrix 0049  
                __size_of_debug_line 0015                  start_initialization 07BA  
                         ?_USARTInit 0070                  __size_of_delete_row 0075  
                         left_most@x 0048                 ?_printf_debug_Screen 0025  
    printf_debug_cur_MATRIX44@enable 0039                        delete_row@len 0024  
    printf_debug_cur_MATRIX44@matrix 003A                        delete_row@row 007D  
           __CFG_FOSC$INTRC_NOCLKOUT 0000                   is_right_boundary@x 0020  
       __end_of_get_high_after_merge 11A8                          ?_right_most 0044  
                     _temp_pre_count 00EC                    ?_is_left_boundary 0076  
    __size_of_MATRIX88_to_MATRIX7219 0048          get_holes_after_merge@matrix 004C  
                           ??___bmul 0071                             ??___lmul 0078  
                 ??_is_left_boundary 0079                             ??___wmul 0074  
                         init_fetch0 1892                   is_row_empty@matrix 0074  
                        __pdataBANK0 006B                          __pdataBANK1 00ED  
                        __pdataBANK3 01B7                    _g_char_info_index 0069  
                    _printf_MATRIX88 18B5                             ??_merge1 0025  
                           ??_memcpy 0076                             ??_memset 0076  
                        _g_char_info 01B7    find_best_solution@left_most_index 00A0  
                          ___latbits 0002                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0           __size_of_printf_MATRIX7219 001C  
              __size_of_is_row_empty 0027                        ??_is_row_full 0073  
                  __size_of_fall_off 00B8                ??_printf_debug_Screen 007D  
                  __size_of_get_high 0049                          sprintf@flag 003D  
                        sprintf@prec 0038                    __size_of_hit_land 00B1  
                      _delete_matrix 1C1E                            __pnvBANK0 006E  
                  __size_of_evaluate 0082                            _debug_str 1000  
                 delete_matrix@count 0048                    __size_of_is_valid 010D  
                   ___lwdiv@dividend 0072              printf_MATRIX7219@matrix 0074  
                   delete_matrix@row 0049                         ??_Write_Byte 0071  
                           ?___awmod 0027                             ?___lwdiv 0070  
                           ?___lwmod 0078                         _is_row_empty 19A5  
                       debug_int2@i1 0041                         debug_int2@i2 0043  
                    debug_str@enable 0075                             ?_isdigit 0070  
                  is_left_boundary@x 0020                          ??_USARTInit 0072  
             _MATRIX88_to_MATRIX7219 1BD6                            _left_most 1AAB  
                __size_of_right_most 0037                            _hexpowers 0828  
                   ___lwdiv@quotient 0075                       __size_of_clear 004F  
                           ?_sprintf 0020                 printf_MATRIX7219@col 0075  
                     __size_of_merge 0050                       __size_of_srand 0009  
                       debug_str@str 0073                   __end_of_Write_Byte 18B5  
                       ??_debug_int1 007E                         ??_debug_int2 007E  
                       ??_debug_line 0075                       ?_delete_matrix 0044  
                     ___wmul@product 0074                            fall_off@x 004E  
                          fall_off@y 0046                     delete_row@matrix 007B  
                          clear_ram0 1862                            _octpowers 0812  
                __end_of_is_row_full 1A79                           ?_debug_str 0073  
            __end_of_printf_MATRIX88 18C7                         ??_delete_row 0020  
                           _PIR1bits 000C                            _temp_high 00EA  
                          _temp_hole 00EB                            _temp_risk 00E7  
 __size_of_printf_debug_cur_MATRIX44 0073                    left_most@matrix44 0044  
                  left_most@matrix88 0046                          __stringbase 0812  
                  ___wmul@multiplier 0070                   __end_of_debug_int1 0DD3  
                 __end_of_debug_int2 19F5                   __end_of_debug_line 18F0  
                      ?_Clear_Matrix 0070                 _get_high_after_merge 1114  
                         ?_left_most 0044                   __end_of_g_matrix44 09B0  
                 __end_of_delete_row 2000                    ___lmul@multiplier 0070  
                is_left_boundary@col 0022                  is_left_boundary@row 0021  
             printf_debug_MATRIX44@x 0078               printf_debug_MATRIX44@y 0079  
                      merge@matrix44 0071                        merge@matrix88 0073  
          __size_of_USARTWriteString 0025                            hit_land@x 004E  
                          hit_land@y 0046       __size_of_printf_debug_MATRIX44 0120  
     __size_of_printf_debug_MATRIX88 0086         __end_of_char_info_index_rand 1908  
      __end_of_printf_debug_MATRIX44 1000        __end_of_printf_debug_MATRIX88 1114  
            get_high_after_merge@col 004B                            merge1@col 002D  
                          merge1@len 002A              get_high_after_merge@row 004C  
                          merge1@row 002C              __size_of_USARTWriteChar 0008  
                      _temp_pre_high 00EE                        _temp_pre_hole 00EF  
                      _temp_pre_risk 006B                            is_valid@x 004E  
                          is_valid@y 0046                     __size_of___awmod 004D  
                   __size_of___lwdiv 003C                     __size_of___lwmod 0032  
  __end_of_printf_debug_cur_MATRIX44 1F8B                   __end_of__stringtab 0812  
                        _isdigit$905 0070               __size_of_printf_Screen 0005  
                         sprintf@idx 0031                           sprintf@len 0033  
                         sprintf@val 0036                       ??_Clear_Matrix 0079  
              ?_get_high_after_merge 0044             is_left_boundary@matrix44 0076  
           is_left_boundary@matrix88 0078                     __size_of_isdigit 000E  
                           _fall_off 1259                      ___lwdiv@divisor 0070  
                    ___lwdiv@counter 0077                   _find_best_solution 1311  
                           __ptext10 108E                             __ptext11 1000  
                           __ptext20 1259                             __ptext12 1EB1  
                           __ptext21 18DB                             __ptext13 1AAB  
                           __ptext30 1873                             __ptext22 19CC  
                           __ptext14 1DF1                             __ptext31 195F  
                           __ptext23 100C                             __ptext15 0DD3  
                           __ptext40 1B50                             __ptext32 1A79  
                           __ptext24 1C1E                             __ptext16 0003  
                           __ptext41 1CB0                             __ptext33 1B14  
                           __ptext25 1A49                             __ptext17 1114  
                           __ptext50 1908                             __ptext42 1B8F  
                           __ptext34 1881                             __ptext26 1F8B  
                           __ptext18 1C67                             __ptext43 18C7  
                           __ptext35 1980                             __ptext27 19F5  
                           __ptext19 19A5                             __ptext44 1855  
                           __ptext36 185A                             __ptext28 0DAE  
                           __ptext45 18B5                             __ptext37 1CFD  
                           __ptext29 02BA                             __ptext46 1923  
                           __ptext38 18F0                             __ptext47 18A3  
                           __ptext39 1D9C                             __ptext48 184E  
                           __ptext49 1BD6                    __CFG_BOR4V$BOR21V 0000  
                           _get_high 1C67                          _is_row_full 1A49  
     MATRIX88_to_MATRIX7219@matrix88 0074                     __size_of_sprintf 0500  
                    ??_delete_matrix 0046                          debug_int1@f 003F  
                        debug_int1@i 0041                          debug_int2@f 003F  
                           _hit_land 11A8                             _evaluate 100C  
                ?_find_best_solution 0070                        __size_of_main 0160  
                           _is_valid 0DD3                        __size_of_rand 0055  
                   hit_land@matrix44 0047                     hit_land@matrix88 0049  
                           clear@col 007A                             clear@row 0079  
                       ??_right_most 0047                _get_holes_after_merge 0003  
                        ??_debug_str 0075                     ?_printf_MATRIX88 0070  
                           main@Seed 0065                             main@argc 0058  
                           main@argv 005A             get_holes_after_merge@col 004E  
           get_holes_after_merge@row 004F                 ??_find_best_solution 0051  
                        fall_off@col 004F                          fall_off@row 0050  
          __size_of_is_left_boundary 005F                          delete_row@i 0026  
                        ??_left_most 0047                             memcpy@d1 0070  
                           memcpy@s1 0072                             merge@col 007A  
                           merge@row 0079                   __end_of_right_most 1B14  
                           init_ram0 1896                             isdigit@c 0071  
                           memset@p1 0070                            sprintf@ap 0035  
                          sprintf@cp 0032                            sprintf@sp 003C  
                   ___lwmod@dividend 007A                        _printf_Screen 1855  
                          stringcode 080A                   Write_Byte@myColumn 0071  
                USARTWriteString@str 0071              printf_MATRIX88@matrix88 0020  
               _char_info_index_rand 18F0              ?_MATRIX88_to_MATRIX7219 0070  
             ??_get_high_after_merge 0046                             sprintf@c 003B  
                           sprintf@f 0020   find_best_solution@right_most_index 00A1  
                    ___lwmod@divisor 0078                      ___lwmod@counter 007D  
        __end_of_printf_debug_Screen 1A49                             stringtab 0800  
                         _SPI1_write 184E                     _USARTWriteString 1980  
                     ?_printf_Screen 0070               ?_get_holes_after_merge 0070  
                     _USARTWriteChar 185A           printf_debug_cur_MATRIX44@x 002E  
         printf_debug_cur_MATRIX44@y 002F           MATRIX88_to_MATRIX7219@mask 0075  
          MATRIX88_to_MATRIX7219@col 0077                 __end_of_Clear_Matrix 18DB  
          MATRIX88_to_MATRIX7219@row 0076       printf_debug_cur_MATRIX44@lable 002C  
