
_max7219_init1:

;Teris.c,92 :: 		void max7219_init1()
;Teris.c,94 :: 		Chip_Select = 0;       // SELECT MAX
	BCF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,95 :: 		SPI1_write(0x09);      // BCD mode for digit decoding
	MOVLW      9
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,96 :: 		SPI1_write(0x00);
	CLRF       FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,97 :: 		Chip_Select = 1;       // DESELECT MAX
	BSF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,99 :: 		Chip_Select = 0;       // SELECT MAX
	BCF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,100 :: 		SPI1_write(0x0A);
	MOVLW      10
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,101 :: 		SPI1_write(0x0F);      // Segment luminosity intensity
	MOVLW      15
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,102 :: 		Chip_Select = 1;       // DESELECT MAX
	BSF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,104 :: 		Chip_Select = 0;       // SELECT MAX
	BCF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,105 :: 		SPI1_write(0x0B);
	MOVLW      11
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,106 :: 		SPI1_write(0x07);      // Display refresh
	MOVLW      7
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,107 :: 		Chip_Select = 1;       // DESELECT MAX
	BSF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,109 :: 		Chip_Select = 0;       // SELECT MAX
	BCF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,110 :: 		SPI1_write(0x0C);
	MOVLW      12
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,111 :: 		SPI1_write(0x01);      // Turn on the display
	MOVLW      1
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,112 :: 		Chip_Select = 1;       // DESELECT MAX
	BSF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,114 :: 		Chip_Select = 0;       // SELECT MAX
	BCF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,115 :: 		SPI1_write(0x00);
	CLRF       FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,116 :: 		SPI1_write(0xFF);      // No test
	MOVLW      255
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,117 :: 		Chip_Select = 1;       // DESELECT MAX
	BSF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,118 :: 		}
L_end_max7219_init1:
	RETURN
; end of _max7219_init1

_Write_Byte:

;Teris.c,121 :: 		void Write_Byte(unsigned short myColumn, unsigned short myValue)
;Teris.c,123 :: 		Chip_Select = 0;       // select max7219.
	BCF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,124 :: 		SPI1_write(myColumn);  // send myColumn value to max7219 (digit place).
	MOVF       FARG_Write_Byte_myColumn+0, 0
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,125 :: 		SPI1_write(myValue);   // send myValue value to max7219 (digit place).
	MOVF       FARG_Write_Byte_myValue+0, 0
	MOVWF      FARG_SPI1_Write_data_+0
	CALL       _SPI1_Write+0
;Teris.c,126 :: 		Chip_Select = 1;       // deselect max7219.
	BSF        RA2_bit+0, BitPos(RA2_bit+0)
;Teris.c,127 :: 		}
L_end_Write_Byte:
	RETURN
; end of _Write_Byte

_Clear_Matrix:

;Teris.c,130 :: 		void Clear_Matrix(void)
;Teris.c,134 :: 		for(x=1;x<9;x++)
	MOVLW      1
	MOVWF      Clear_Matrix_x_L0+0
L_Clear_Matrix0:
	MOVLW      9
	SUBWF      Clear_Matrix_x_L0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_Clear_Matrix1
;Teris.c,136 :: 		Write_Byte(x,0x00);
	MOVF       Clear_Matrix_x_L0+0, 0
	MOVWF      FARG_Write_Byte_myColumn+0
	CLRF       FARG_Write_Byte_myValue+0
	CALL       _Write_Byte+0
;Teris.c,134 :: 		for(x=1;x<9;x++)
	INCF       Clear_Matrix_x_L0+0, 1
;Teris.c,137 :: 		}
	GOTO       L_Clear_Matrix0
L_Clear_Matrix1:
;Teris.c,138 :: 		}
L_end_Clear_Matrix:
	RETURN
; end of _Clear_Matrix

_Write_Char:

;Teris.c,140 :: 		void Write_Char(char myChar)
;Teris.c,148 :: 		Clear_Matrix();
	CALL       _Clear_Matrix+0
;Teris.c,151 :: 		Start_Byte = (myChar - 65) * 6;     // 65 represents the letter "A" in ASCII code.
	MOVLW      65
	SUBWF      FARG_Write_Char_myChar+0, 0
	MOVWF      R0+0
	MOVLW      6
	MOVWF      R4+0
	CALL       _Mul_8X8_U+0
	MOVF       R0+0, 0
	MOVWF      Write_Char_Start_Byte_L0+0
;Teris.c,154 :: 		for(Column=2;Column<8;Column++)
	MOVLW      2
	MOVWF      Write_Char_Column_L0+0
L_Write_Char3:
	MOVLW      8
	SUBWF      Write_Char_Column_L0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_Write_Char4
;Teris.c,156 :: 		Write_Byte(Column, Alphabet[Start_Byte++]);
	MOVF       Write_Char_Column_L0+0, 0
	MOVWF      FARG_Write_Byte_myColumn+0
	MOVF       Write_Char_Start_Byte_L0+0, 0
	ADDLW      _Alphabet+0
	MOVWF      R0+0
	MOVLW      hi_addr(_Alphabet+0)
	BTFSC      STATUS+0, 0
	ADDLW      1
	MOVWF      R0+1
	MOVF       R0+0, 0
	MOVWF      ___DoICPAddr+0
	MOVF       R0+1, 0
	MOVWF      ___DoICPAddr+1
	CALL       _____DoICP+0
	MOVWF      FARG_Write_Byte_myValue+0
	CALL       _Write_Byte+0
	INCF       Write_Char_Start_Byte_L0+0, 1
;Teris.c,154 :: 		for(Column=2;Column<8;Column++)
	INCF       Write_Char_Column_L0+0, 1
;Teris.c,157 :: 		}
	GOTO       L_Write_Char3
L_Write_Char4:
;Teris.c,158 :: 		}
L_end_Write_Char:
	RETURN
; end of _Write_Char

_Write_Symbol:

;Teris.c,161 :: 		void Write_Symbol(char mysymbols)
;Teris.c,169 :: 		Clear_Matrix();
	CALL       _Clear_Matrix+0
;Teris.c,172 :: 		Start_Byte1 = (mysymbols-0) * 6 ;
	MOVF       FARG_Write_Symbol_mysymbols+0, 0
	MOVWF      R0+0
	MOVLW      6
	MOVWF      R4+0
	CALL       _Mul_8X8_U+0
	MOVF       R0+0, 0
	MOVWF      Write_Symbol_Start_Byte1_L0+0
;Teris.c,175 :: 		for(Column1=2;Column1<8;Column1++)
	MOVLW      2
	MOVWF      Write_Symbol_Column1_L0+0
L_Write_Symbol6:
	MOVLW      8
	SUBWF      Write_Symbol_Column1_L0+0, 0
	BTFSC      STATUS+0, 0
	GOTO       L_Write_Symbol7
;Teris.c,177 :: 		Write_Byte(Column1, Symbols[Start_Byte1++]);
	MOVF       Write_Symbol_Column1_L0+0, 0
	MOVWF      FARG_Write_Byte_myColumn+0
	MOVF       Write_Symbol_Start_Byte1_L0+0, 0
	ADDLW      _Symbols+0
	MOVWF      R0+0
	MOVLW      hi_addr(_Symbols+0)
	BTFSC      STATUS+0, 0
	ADDLW      1
	MOVWF      R0+1
	MOVF       R0+0, 0
	MOVWF      ___DoICPAddr+0
	MOVF       R0+1, 0
	MOVWF      ___DoICPAddr+1
	CALL       _____DoICP+0
	MOVWF      FARG_Write_Byte_myValue+0
	CALL       _Write_Byte+0
	INCF       Write_Symbol_Start_Byte1_L0+0, 1
;Teris.c,175 :: 		for(Column1=2;Column1<8;Column1++)
	INCF       Write_Symbol_Column1_L0+0, 1
;Teris.c,178 :: 		}
	GOTO       L_Write_Symbol6
L_Write_Symbol7:
;Teris.c,179 :: 		}
L_end_Write_Symbol:
	RETURN
; end of _Write_Symbol

_main:

;Teris.c,182 :: 		void main()
;Teris.c,186 :: 		Chip_Select_Direction = 0;    // Set RA2 pin as output.
	BCF        TRISA2_bit+0, BitPos(TRISA2_bit+0)
;Teris.c,187 :: 		SPI1_init();                  // Initialize SPI1 module.
	CALL       _SPI1_Init+0
;Teris.c,189 :: 		max7219_init1();              // initialize  max7219.
	CALL       _max7219_init1+0
;Teris.c,191 :: 		do                            // infinite loop.
L_main9:
;Teris.c,207 :: 		for(x=65;x<=90;x++)    // Increment with 1, from 65 until 90.
	MOVLW      65
	MOVWF      main_x_L0+0
	MOVLW      0
	MOVWF      main_x_L0+1
L_main12:
	MOVF       main_x_L0+1, 0
	SUBLW      0
	BTFSS      STATUS+0, 2
	GOTO       L__main27
	MOVF       main_x_L0+0, 0
	SUBLW      90
L__main27:
	BTFSS      STATUS+0, 0
	GOTO       L_main13
;Teris.c,209 :: 		Write_Char(x);
	MOVF       main_x_L0+0, 0
	MOVWF      FARG_Write_Char_myChar+0
	CALL       _Write_Char+0
;Teris.c,210 :: 		Delay_ms(1000);      // This is our delay, between two consecutive character.
	MOVLW      26
	MOVWF      R11+0
	MOVLW      94
	MOVWF      R12+0
	MOVLW      110
	MOVWF      R13+0
L_main15:
	DECFSZ     R13+0, 1
	GOTO       L_main15
	DECFSZ     R12+0, 1
	GOTO       L_main15
	DECFSZ     R11+0, 1
	GOTO       L_main15
	NOP
;Teris.c,207 :: 		for(x=65;x<=90;x++)    // Increment with 1, from 65 until 90.
	INCF       main_x_L0+0, 1
	BTFSC      STATUS+0, 2
	INCF       main_x_L0+1, 1
;Teris.c,211 :: 		}
	GOTO       L_main12
L_main13:
;Teris.c,213 :: 		Clear_Matrix();       // Clear the Matrix display;
	CALL       _Clear_Matrix+0
;Teris.c,214 :: 		delay_ms(500);
	MOVLW      13
	MOVWF      R11+0
	MOVLW      175
	MOVWF      R12+0
	MOVLW      182
	MOVWF      R13+0
L_main16:
	DECFSZ     R13+0, 1
	GOTO       L_main16
	DECFSZ     R12+0, 1
	GOTO       L_main16
	DECFSZ     R11+0, 1
	GOTO       L_main16
	NOP
;Teris.c,216 :: 		for(y=0;y<=18;y++)
	CLRF       main_y_L0+0
	CLRF       main_y_L0+1
L_main17:
	MOVF       main_y_L0+1, 0
	SUBLW      0
	BTFSS      STATUS+0, 2
	GOTO       L__main28
	MOVF       main_y_L0+0, 0
	SUBLW      18
L__main28:
	BTFSS      STATUS+0, 0
	GOTO       L_main18
;Teris.c,218 :: 		Write_Symbol(y);     // This is our delay, between two consecutive character.
	MOVF       main_y_L0+0, 0
	MOVWF      FARG_Write_Symbol_mysymbols+0
	CALL       _Write_Symbol+0
;Teris.c,219 :: 		Delay_ms(1000);
	MOVLW      26
	MOVWF      R11+0
	MOVLW      94
	MOVWF      R12+0
	MOVLW      110
	MOVWF      R13+0
L_main20:
	DECFSZ     R13+0, 1
	GOTO       L_main20
	DECFSZ     R12+0, 1
	GOTO       L_main20
	DECFSZ     R11+0, 1
	GOTO       L_main20
	NOP
;Teris.c,216 :: 		for(y=0;y<=18;y++)
	INCF       main_y_L0+0, 1
	BTFSC      STATUS+0, 2
	INCF       main_y_L0+1, 1
;Teris.c,220 :: 		}
	GOTO       L_main17
L_main18:
;Teris.c,222 :: 		}while(1);            // do forever.
	GOTO       L_main9
;Teris.c,223 :: 		}
L_end_main:
	GOTO       $+0
; end of _main
