

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Aug 27 14:54:17 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	dabs	1,0x7E,2
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  008F                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  0105                     	;# 
   126  0107                     	;# 
   127  0108                     	;# 
   128  0109                     	;# 
   129  010C                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  0185                     	;# 
   135  0187                     	;# 
   136  0188                     	;# 
   137  0189                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0089                     	;# 
   179  008C                     	;# 
   180  008D                     	;# 
   181  008E                     	;# 
   182  008F                     	;# 
   183  0090                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0093                     	;# 
   187  0093                     	;# 
   188  0093                     	;# 
   189  0094                     	;# 
   190  0095                     	;# 
   191  0096                     	;# 
   192  0097                     	;# 
   193  0098                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  009F                     	;# 
   201  0105                     	;# 
   202  0107                     	;# 
   203  0108                     	;# 
   204  0109                     	;# 
   205  010C                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  010F                     	;# 
   210  0185                     	;# 
   211  0187                     	;# 
   212  0188                     	;# 
   213  0189                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216                           
   217                           	psect	idataBANK0
   218  0BA8                     __pidataBANK0:	
   219                           
   220                           ;initializer for _g_char_info
   221  0BA8  3400               	retlw	0
   222  0BA9  3400               	retlw	0
   223  0BAA  3402               	retlw	2
   224  0BAB  3402               	retlw	2
   225  0BAC  3400               	retlw	0
   226  0BAD  3402               	retlw	2
   227  0BAE  3404               	retlw	4
   228  0BAF  3400               	retlw	0
   229  0BB0  3402               	retlw	2
   230  0BB1  3406               	retlw	6
   231  0BB2  3400               	retlw	0
   232  0BB3  3404               	retlw	4
   233  0BB4  340A               	retlw	10
   234  0BB5  3400               	retlw	0
   235  0BB6  3404               	retlw	4
   236  0BB7  340E               	retlw	14
   237  0BB8  3400               	retlw	0
   238  0BB9  3401               	retlw	1
   239  0BBA  340F               	retlw	15
   240  0BBB  3400               	retlw	0
   241  0BBC  3404               	retlw	4
   242  0BBD  3413               	retlw	19
   243  0BBE  3400               	retlw	0
   244  0BBF  3401               	retlw	1
   245  0BC0  3414               	retlw	20
   246  0BC1  3400               	retlw	0
   247  0BC2  3404               	retlw	4
   248                           
   249                           ;initializer for _randx
   250  0BC3  3401               	retlw	1
   251  0BC4  3400               	retlw	0
   252  0BC5  3400               	retlw	0
   253  0BC6  3400               	retlw	0
   254                           
   255                           ;initializer for _temp_pre_risk
   256  0BC7  34FF               	retlw	255
   257  0BC8  34FF               	retlw	255
   258                           
   259                           ;initializer for _tem_pre_sub_index
   260  0BC9  340F               	retlw	15
   261                           
   262                           ;initializer for _temp_pre_hole
   263  0BCA  34FF               	retlw	255
   264                           
   265                           ;initializer for _temp_pre_x
   266  0BCB  340F               	retlw	15
   267                           
   268                           	psect	idataBANK1
   269  0003                     __pidataBANK1:	
   270                           
   271                           ;initializer for _cur_x
   272  0003  3402               	retlw	2
   273                           
   274                           ;initializer for _temp_pre_high
   275  0004  34FF               	retlw	255
   276                           
   277                           	psect	stringtext
   278  0800                     __pstringtext:	
   279  0800                     stringtab:	
   280  0800                     __stringtab:	
   281                           
   282                           ;	String table - string pointers are 2 bytes each
   283  0800  1BFF               	btfsc	btemp+1,7
   284  0801  280A               	ljmp	stringcode
   285  0802  1383               	bcf	3,7
   286  0803  187F               	btfsc	btemp+1,0
   287  0804  1783               	bsf	3,7
   288  0805  0800               	movf	0,w
   289  0806  0A84               	incf	4,f
   290  0807  1903               	skipnz
   291  0808  0AFF               	incf	btemp+1,f
   292  0809  0008               	return
   293  080A                     stringcode:	
   294  080A  087F               	movf	btemp+1,w
   295  080B  397F               	andlw	127
   296  080C  008A               	movwf	10
   297  080D  0804               	movf	4,w
   298  080E  0A84               	incf	4,f
   299  080F  1903               	skipnz
   300  0810  0AFF               	incf	btemp+1,f
   301  0811  0082               	movwf	2
   302  0812                     __stringbase:	
   303  0812                     __end_of__stringtab:	
   304  0812                     _octpowers:	
   305  0812  3401               	retlw	1
   306  0813  3400               	retlw	0
   307  0814  3408               	retlw	8
   308  0815  3400               	retlw	0
   309  0816  3440               	retlw	64
   310  0817  3400               	retlw	0
   311  0818  3400               	retlw	0
   312  0819  3402               	retlw	2
   313  081A  3400               	retlw	0
   314  081B  3410               	retlw	16
   315  081C  3400               	retlw	0
   316  081D  3480               	retlw	128
   317  081E                     __end_of_octpowers:	
   318  081E                     _dpowers:	
   319  081E  3401               	retlw	1
   320  081F  3400               	retlw	0
   321  0820  340A               	retlw	10
   322  0821  3400               	retlw	0
   323  0822  3464               	retlw	100
   324  0823  3400               	retlw	0
   325  0824  34E8               	retlw	232
   326  0825  3403               	retlw	3
   327  0826  3410               	retlw	16
   328  0827  3427               	retlw	39
   329  0828                     __end_of_dpowers:	
   330  0828                     _hexpowers:	
   331  0828  3401               	retlw	1
   332  0829  3400               	retlw	0
   333  082A  3410               	retlw	16
   334  082B  3400               	retlw	0
   335  082C  3400               	retlw	0
   336  082D  3401               	retlw	1
   337  082E  3400               	retlw	0
   338  082F  3410               	retlw	16
   339  0830                     __end_of_hexpowers:	
   340  0830                     _g_matrix44:	
   341  0830  3400               	retlw	0
   342  0831  3401               	retlw	1
   343  0832  3400               	retlw	0
   344  0833  3400               	retlw	0
   345  0834  3400               	retlw	0
   346  0835  3401               	retlw	1
   347  0836  3400               	retlw	0
   348  0837  3400               	retlw	0
   349  0838  3400               	retlw	0
   350  0839  3401               	retlw	1
   351  083A  3400               	retlw	0
   352  083B  3400               	retlw	0
   353  083C  3400               	retlw	0
   354  083D  3401               	retlw	1
   355  083E  3400               	retlw	0
   356  083F  3400               	retlw	0
   357  0840  3400               	retlw	0
   358  0841  3400               	retlw	0
   359  0842  3400               	retlw	0
   360  0843  3400               	retlw	0
   361  0844  3401               	retlw	1
   362  0845  3401               	retlw	1
   363  0846  3401               	retlw	1
   364  0847  3401               	retlw	1
   365  0848  3400               	retlw	0
   366  0849  3400               	retlw	0
   367  084A  3400               	retlw	0
   368  084B  3400               	retlw	0
   369  084C  3400               	retlw	0
   370  084D  3400               	retlw	0
   371  084E  3400               	retlw	0
   372  084F  3400               	retlw	0
   373  0850  3400               	retlw	0
   374  0851  3401               	retlw	1
   375  0852  3401               	retlw	1
   376  0853  3400               	retlw	0
   377  0854  3401               	retlw	1
   378  0855  3401               	retlw	1
   379  0856  3400               	retlw	0
   380  0857  3400               	retlw	0
   381  0858  3400               	retlw	0
   382  0859  3400               	retlw	0
   383  085A  3400               	retlw	0
   384  085B  3400               	retlw	0
   385  085C  3400               	retlw	0
   386  085D  3400               	retlw	0
   387  085E  3400               	retlw	0
   388  085F  3400               	retlw	0
   389  0860  3400               	retlw	0
   390  0861  3401               	retlw	1
   391  0862  3400               	retlw	0
   392  0863  3400               	retlw	0
   393  0864  3400               	retlw	0
   394  0865  3401               	retlw	1
   395  0866  3401               	retlw	1
   396  0867  3400               	retlw	0
   397  0868  3400               	retlw	0
   398  0869  3400               	retlw	0
   399  086A  3401               	retlw	1
   400  086B  3400               	retlw	0
   401  086C  3400               	retlw	0
   402  086D  3400               	retlw	0
   403  086E  3400               	retlw	0
   404  086F  3400               	retlw	0
   405  0870  3401               	retlw	1
   406  0871  3401               	retlw	1
   407  0872  3400               	retlw	0
   408  0873  3400               	retlw	0
   409  0874  3400               	retlw	0
   410  0875  3401               	retlw	1
   411  0876  3401               	retlw	1
   412  0877  3400               	retlw	0
   413  0878  3400               	retlw	0
   414  0879  3400               	retlw	0
   415  087A  3400               	retlw	0
   416  087B  3400               	retlw	0
   417  087C  3400               	retlw	0
   418  087D  3400               	retlw	0
   419  087E  3400               	retlw	0
   420  087F  3400               	retlw	0
   421  0880  3400               	retlw	0
   422  0881  3401               	retlw	1
   423  0882  3400               	retlw	0
   424  0883  3400               	retlw	0
   425  0884  3401               	retlw	1
   426  0885  3401               	retlw	1
   427  0886  3400               	retlw	0
   428  0887  3400               	retlw	0
   429  0888  3401               	retlw	1
   430  0889  3400               	retlw	0
   431  088A  3400               	retlw	0
   432  088B  3400               	retlw	0
   433  088C  3400               	retlw	0
   434  088D  3400               	retlw	0
   435  088E  3400               	retlw	0
   436  088F  3400               	retlw	0
   437  0890  3400               	retlw	0
   438  0891  3400               	retlw	0
   439  0892  3400               	retlw	0
   440  0893  3400               	retlw	0
   441  0894  3401               	retlw	1
   442  0895  3401               	retlw	1
   443  0896  3401               	retlw	1
   444  0897  3400               	retlw	0
   445  0898  3400               	retlw	0
   446  0899  3400               	retlw	0
   447  089A  3401               	retlw	1
   448  089B  3400               	retlw	0
   449  089C  3400               	retlw	0
   450  089D  3400               	retlw	0
   451  089E  3400               	retlw	0
   452  089F  3400               	retlw	0
   453  08A0  3400               	retlw	0
   454  08A1  3401               	retlw	1
   455  08A2  3401               	retlw	1
   456  08A3  3400               	retlw	0
   457  08A4  3400               	retlw	0
   458  08A5  3401               	retlw	1
   459  08A6  3400               	retlw	0
   460  08A7  3400               	retlw	0
   461  08A8  3400               	retlw	0
   462  08A9  3401               	retlw	1
   463  08AA  3400               	retlw	0
   464  08AB  3400               	retlw	0
   465  08AC  3400               	retlw	0
   466  08AD  3400               	retlw	0
   467  08AE  3400               	retlw	0
   468  08AF  3400               	retlw	0
   469  08B0  3401               	retlw	1
   470  08B1  3400               	retlw	0
   471  08B2  3400               	retlw	0
   472  08B3  3400               	retlw	0
   473  08B4  3401               	retlw	1
   474  08B5  3401               	retlw	1
   475  08B6  3401               	retlw	1
   476  08B7  3400               	retlw	0
   477  08B8  3400               	retlw	0
   478  08B9  3400               	retlw	0
   479  08BA  3400               	retlw	0
   480  08BB  3400               	retlw	0
   481  08BC  3400               	retlw	0
   482  08BD  3400               	retlw	0
   483  08BE  3400               	retlw	0
   484  08BF  3400               	retlw	0
   485  08C0  3400               	retlw	0
   486  08C1  3401               	retlw	1
   487  08C2  3400               	retlw	0
   488  08C3  3400               	retlw	0
   489  08C4  3400               	retlw	0
   490  08C5  3401               	retlw	1
   491  08C6  3400               	retlw	0
   492  08C7  3400               	retlw	0
   493  08C8  3401               	retlw	1
   494  08C9  3401               	retlw	1
   495  08CA  3400               	retlw	0
   496  08CB  3400               	retlw	0
   497  08CC  3400               	retlw	0
   498  08CD  3400               	retlw	0
   499  08CE  3400               	retlw	0
   500  08CF  3400               	retlw	0
   501  08D0  3400               	retlw	0
   502  08D1  3400               	retlw	0
   503  08D2  3400               	retlw	0
   504  08D3  3400               	retlw	0
   505  08D4  3401               	retlw	1
   506  08D5  3401               	retlw	1
   507  08D6  3401               	retlw	1
   508  08D7  3400               	retlw	0
   509  08D8  3401               	retlw	1
   510  08D9  3400               	retlw	0
   511  08DA  3400               	retlw	0
   512  08DB  3400               	retlw	0
   513  08DC  3400               	retlw	0
   514  08DD  3400               	retlw	0
   515  08DE  3400               	retlw	0
   516  08DF  3400               	retlw	0
   517  08E0  3401               	retlw	1
   518  08E1  3401               	retlw	1
   519  08E2  3400               	retlw	0
   520  08E3  3400               	retlw	0
   521  08E4  3400               	retlw	0
   522  08E5  3401               	retlw	1
   523  08E6  3400               	retlw	0
   524  08E7  3400               	retlw	0
   525  08E8  3400               	retlw	0
   526  08E9  3401               	retlw	1
   527  08EA  3400               	retlw	0
   528  08EB  3400               	retlw	0
   529  08EC  3400               	retlw	0
   530  08ED  3400               	retlw	0
   531  08EE  3400               	retlw	0
   532  08EF  3400               	retlw	0
   533  08F0  3400               	retlw	0
   534  08F1  3400               	retlw	0
   535  08F2  3401               	retlw	1
   536  08F3  3400               	retlw	0
   537  08F4  3401               	retlw	1
   538  08F5  3401               	retlw	1
   539  08F6  3401               	retlw	1
   540  08F7  3400               	retlw	0
   541  08F8  3400               	retlw	0
   542  08F9  3400               	retlw	0
   543  08FA  3400               	retlw	0
   544  08FB  3400               	retlw	0
   545  08FC  3400               	retlw	0
   546  08FD  3400               	retlw	0
   547  08FE  3400               	retlw	0
   548  08FF  3400               	retlw	0
   549  0900  3400               	retlw	0
   550  0901  3401               	retlw	1
   551  0902  3400               	retlw	0
   552  0903  3400               	retlw	0
   553  0904  3400               	retlw	0
   554  0905  3401               	retlw	1
   555  0906  3400               	retlw	0
   556  0907  3400               	retlw	0
   557  0908  3400               	retlw	0
   558  0909  3401               	retlw	1
   559  090A  3401               	retlw	1
   560  090B  3400               	retlw	0
   561  090C  3400               	retlw	0
   562  090D  3400               	retlw	0
   563  090E  3400               	retlw	0
   564  090F  3400               	retlw	0
   565  0910  3400               	retlw	0
   566  0911  3401               	retlw	1
   567  0912  3401               	retlw	1
   568  0913  3400               	retlw	0
   569  0914  3400               	retlw	0
   570  0915  3401               	retlw	1
   571  0916  3401               	retlw	1
   572  0917  3400               	retlw	0
   573  0918  3400               	retlw	0
   574  0919  3400               	retlw	0
   575  091A  3400               	retlw	0
   576  091B  3400               	retlw	0
   577  091C  3400               	retlw	0
   578  091D  3400               	retlw	0
   579  091E  3400               	retlw	0
   580  091F  3400               	retlw	0
   581  0920  3400               	retlw	0
   582  0921  3400               	retlw	0
   583  0922  3400               	retlw	0
   584  0923  3400               	retlw	0
   585  0924  3400               	retlw	0
   586  0925  3401               	retlw	1
   587  0926  3401               	retlw	1
   588  0927  3400               	retlw	0
   589  0928  3400               	retlw	0
   590  0929  3401               	retlw	1
   591  092A  3400               	retlw	0
   592  092B  3400               	retlw	0
   593  092C  3400               	retlw	0
   594  092D  3400               	retlw	0
   595  092E  3400               	retlw	0
   596  092F  3400               	retlw	0
   597  0930  3400               	retlw	0
   598  0931  3400               	retlw	0
   599  0932  3400               	retlw	0
   600  0933  3400               	retlw	0
   601  0934  3401               	retlw	1
   602  0935  3401               	retlw	1
   603  0936  3400               	retlw	0
   604  0937  3400               	retlw	0
   605  0938  3400               	retlw	0
   606  0939  3401               	retlw	1
   607  093A  3400               	retlw	0
   608  093B  3400               	retlw	0
   609  093C  3400               	retlw	0
   610  093D  3400               	retlw	0
   611  093E  3400               	retlw	0
   612  093F  3400               	retlw	0
   613  0940  3400               	retlw	0
   614  0941  3401               	retlw	1
   615  0942  3400               	retlw	0
   616  0943  3400               	retlw	0
   617  0944  3401               	retlw	1
   618  0945  3401               	retlw	1
   619  0946  3400               	retlw	0
   620  0947  3400               	retlw	0
   621  0948  3400               	retlw	0
   622  0949  3400               	retlw	0
   623  094A  3400               	retlw	0
   624  094B  3400               	retlw	0
   625  094C  3400               	retlw	0
   626  094D  3400               	retlw	0
   627  094E  3400               	retlw	0
   628  094F  3400               	retlw	0
   629  0950  3400               	retlw	0
   630  0951  3401               	retlw	1
   631  0952  3400               	retlw	0
   632  0953  3400               	retlw	0
   633  0954  3400               	retlw	0
   634  0955  3401               	retlw	1
   635  0956  3401               	retlw	1
   636  0957  3400               	retlw	0
   637  0958  3400               	retlw	0
   638  0959  3400               	retlw	0
   639  095A  3400               	retlw	0
   640  095B  3400               	retlw	0
   641  095C  3400               	retlw	0
   642  095D  3400               	retlw	0
   643  095E  3400               	retlw	0
   644  095F  3400               	retlw	0
   645  0960  3400               	retlw	0
   646  0961  3401               	retlw	1
   647  0962  3400               	retlw	0
   648  0963  3400               	retlw	0
   649  0964  3401               	retlw	1
   650  0965  3401               	retlw	1
   651  0966  3401               	retlw	1
   652  0967  3400               	retlw	0
   653  0968  3400               	retlw	0
   654  0969  3401               	retlw	1
   655  096A  3400               	retlw	0
   656  096B  3400               	retlw	0
   657  096C  3400               	retlw	0
   658  096D  3400               	retlw	0
   659  096E  3400               	retlw	0
   660  096F  3400               	retlw	0
   661  0970  3401               	retlw	1
   662  0971  3401               	retlw	1
   663  0972  3401               	retlw	1
   664  0973  3400               	retlw	0
   665  0974  3400               	retlw	0
   666  0975  3401               	retlw	1
   667  0976  3400               	retlw	0
   668  0977  3400               	retlw	0
   669  0978  3400               	retlw	0
   670  0979  3401               	retlw	1
   671  097A  3400               	retlw	0
   672  097B  3400               	retlw	0
   673  097C  3400               	retlw	0
   674  097D  3400               	retlw	0
   675  097E  3400               	retlw	0
   676  097F  3400               	retlw	0
   677  0980  3400               	retlw	0
   678  0981  3400               	retlw	0
   679  0982  3401               	retlw	1
   680  0983  3400               	retlw	0
   681  0984  3401               	retlw	1
   682  0985  3401               	retlw	1
   683  0986  3401               	retlw	1
   684  0987  3400               	retlw	0
   685  0988  3400               	retlw	0
   686  0989  3400               	retlw	0
   687  098A  3401               	retlw	1
   688  098B  3400               	retlw	0
   689  098C  3400               	retlw	0
   690  098D  3400               	retlw	0
   691  098E  3400               	retlw	0
   692  098F  3400               	retlw	0
   693  0990  3400               	retlw	0
   694  0991  3401               	retlw	1
   695  0992  3400               	retlw	0
   696  0993  3400               	retlw	0
   697  0994  3400               	retlw	0
   698  0995  3401               	retlw	1
   699  0996  3400               	retlw	0
   700  0997  3400               	retlw	0
   701  0998  3401               	retlw	1
   702  0999  3401               	retlw	1
   703  099A  3401               	retlw	1
   704  099B  3400               	retlw	0
   705  099C  3400               	retlw	0
   706  099D  3400               	retlw	0
   707  099E  3400               	retlw	0
   708  099F  3400               	retlw	0
   709  09A0  3401               	retlw	1
   710  09A1  3400               	retlw	0
   711  09A2  3400               	retlw	0
   712  09A3  3400               	retlw	0
   713  09A4  3401               	retlw	1
   714  09A5  3401               	retlw	1
   715  09A6  3401               	retlw	1
   716  09A7  3400               	retlw	0
   717  09A8  3401               	retlw	1
   718  09A9  3400               	retlw	0
   719  09AA  3400               	retlw	0
   720  09AB  3400               	retlw	0
   721  09AC  3400               	retlw	0
   722  09AD  3400               	retlw	0
   723  09AE  3400               	retlw	0
   724  09AF  3400               	retlw	0
   725  09B0                     __end_of_g_matrix44:	
   726  09B0                     STR_6:	
   727  09B0  343C               	retlw	60	;'<'
   728  09B1  343C               	retlw	60	;'<'
   729  09B2  343C               	retlw	60	;'<'
   730  09B3  343C               	retlw	60	;'<'
   731  09B4  343C               	retlw	60	;'<'
   732  09B5  343C               	retlw	60	;'<'
   733  09B6  343C               	retlw	60	;'<'
   734  09B7  343C               	retlw	60	;'<'
   735  09B8  343C               	retlw	60	;'<'
   736  09B9  343C               	retlw	60	;'<'
   737  09BA  343C               	retlw	60	;'<'
   738  09BB  343C               	retlw	60	;'<'
   739  09BC  343C               	retlw	60	;'<'
   740  09BD  343C               	retlw	60	;'<'
   741  09BE  343C               	retlw	60	;'<'
   742  09BF  343C               	retlw	60	;'<'
   743  09C0  343C               	retlw	60	;'<'
   744  09C1  343C               	retlw	60	;'<'
   745  09C2  343C               	retlw	60	;'<'
   746  09C3  343C               	retlw	60	;'<'
   747  09C4  344D               	retlw	77	;'M'
   748  09C5  3441               	retlw	65	;'A'
   749  09C6  3454               	retlw	84	;'T'
   750  09C7  3452               	retlw	82	;'R'
   751  09C8  3449               	retlw	73	;'I'
   752  09C9  3458               	retlw	88	;'X'
   753  09CA  3438               	retlw	56	;'8'
   754  09CB  3438               	retlw	56	;'8'
   755  09CC  3400               	retlw	0
   756  09CD                     STR_10:	
   757  09CD  343E               	retlw	62	;'>'
   758  09CE  343E               	retlw	62	;'>'
   759  09CF  343E               	retlw	62	;'>'
   760  09D0  343E               	retlw	62	;'>'
   761  09D1  343E               	retlw	62	;'>'
   762  09D2  343E               	retlw	62	;'>'
   763  09D3  343E               	retlw	62	;'>'
   764  09D4  343E               	retlw	62	;'>'
   765  09D5  343E               	retlw	62	;'>'
   766  09D6  343E               	retlw	62	;'>'
   767  09D7  343E               	retlw	62	;'>'
   768  09D8  343E               	retlw	62	;'>'
   769  09D9  343E               	retlw	62	;'>'
   770  09DA  343E               	retlw	62	;'>'
   771  09DB  343E               	retlw	62	;'>'
   772  09DC  343E               	retlw	62	;'>'
   773  09DD  343E               	retlw	62	;'>'
   774  09DE  343E               	retlw	62	;'>'
   775  09DF  343E               	retlw	62	;'>'
   776  09E0  343E               	retlw	62	;'>'
   777  09E1  3400               	retlw	0
   778  09E2                     STR_12:	
   779  09E2  3430               	retlw	48	;'0'
   780  09E3  3431               	retlw	49	;'1'
   781  09E4  3432               	retlw	50	;'2'
   782  09E5  3433               	retlw	51	;'3'
   783  09E6  3434               	retlw	52	;'4'
   784  09E7  3435               	retlw	53	;'5'
   785  09E8  3436               	retlw	54	;'6'
   786  09E9  3437               	retlw	55	;'7'
   787  09EA  3438               	retlw	56	;'8'
   788  09EB  3439               	retlw	57	;'9'
   789  09EC  3441               	retlw	65	;'A'
   790  09ED  3442               	retlw	66	;'B'
   791  09EE  3443               	retlw	67	;'C'
   792  09EF  3444               	retlw	68	;'D'
   793  09F0  3445               	retlw	69	;'E'
   794  09F1  3446               	retlw	70	;'F'
   795  09F2  3400               	retlw	0
   796  09F3                     STR_13:	
   797  09F3  3430               	retlw	48	;'0'
   798  09F4  3431               	retlw	49	;'1'
   799  09F5  3432               	retlw	50	;'2'
   800  09F6  3433               	retlw	51	;'3'
   801  09F7  3434               	retlw	52	;'4'
   802  09F8  3435               	retlw	53	;'5'
   803  09F9  3436               	retlw	54	;'6'
   804  09FA  3437               	retlw	55	;'7'
   805  09FB  3438               	retlw	56	;'8'
   806  09FC  3439               	retlw	57	;'9'
   807  09FD  3461               	retlw	97	;'a'
   808  09FE  3462               	retlw	98	;'b'
   809  09FF  3463               	retlw	99	;'c'
   810  0A00  3464               	retlw	100	;'d'
   811  0A01  3465               	retlw	101	;'e'
   812  0A02  3466               	retlw	102	;'f'
   813  0A03  3400               	retlw	0
   814  0A04                     STR_11:	
   815  0A04  344D               	retlw	77	;'M'
   816  0A05  3461               	retlw	97	;'a'
   817  0A06  3469               	retlw	105	;'i'
   818  0A07  346E               	retlw	110	;'n'
   819  0A08  3420               	retlw	32	;' '
   820  0A09  3473               	retlw	115	;'s'
   821  0A0A  3463               	retlw	99	;'c'
   822  0A0B  3472               	retlw	114	;'r'
   823  0A0C  3465               	retlw	101	;'e'
   824  0A0D  3465               	retlw	101	;'e'
   825  0A0E  346E               	retlw	110	;'n'
   826  0A0F  3400               	retlw	0
   827  0A10                     STR_1:	
   828  0A10  340D               	retlw	13
   829  0A11  340A               	retlw	10
   830  0A12  3400               	retlw	0
   831  0A13                     STR_7:	
   832  0A13  342A               	retlw	42	;'*'
   833  0A14  3400               	retlw	0
   834  0A15                     STR_5:	
   835  0A15  343A               	retlw	58	;':'
   836  0A16  3400               	retlw	0
   837  0A17                     STR_8:	
   838  0A17  345F               	retlw	95	;'_'
   839  0A18  3400               	retlw	0
   840  0A12                     
   841                           ; #config settings
   842  0000                     
   843                           	psect	nvBANK0
   844  0069                     __pnvBANK0:	
   845  0069                     _UQEnd:	
   846  0069                     	ds	1
   847  006A                     _UQFront:	
   848  006A                     	ds	1
   849  000C                     _PIR1bits	set	12
   850  001A                     _RCREG	set	26
   851  0018                     _RCSTAbits	set	24
   852  0019                     _TXREG	set	25
   853  005F                     _GIE	set	95
   854  005E                     _PEIE	set	94
   855  0029                     _RA1	set	41
   856  002A                     _RA2	set	42
   857  002B                     _RA3	set	43
   858  0099                     _SPBRG	set	153
   859  0085                     _TRISAbits	set	133
   860  0098                     _TXSTAbits	set	152
   861  0465                     _RCIE	set	1125
   862  0188                     _ANSELbits	set	392
   863                           
   864                           	psect	cinit
   865  07C1                     start_initialization:	
   866  07C1                     __initialization:	
   867                           
   868                           ; Clear objects allocated to BANK0
   869  07C1  1383               	bcf	3,7	;select IRP bank0
   870  07C2  3060               	movlw	low __pbssBANK0
   871  07C3  0084               	movwf	4
   872  07C4  3069               	movlw	low (__pbssBANK0+9)
   873  07C5  120A  158A  2248  120A  118A  	fcall	clear_ram0
   874                           
   875                           ; Clear objects allocated to BANK1
   876  07CA  1683               	bsf	3,5	;RP0=1, select bank1
   877  07CB  1303               	bcf	3,6	;RP1=0, select bank1
   878  07CC  01E7               	clrf	__pbssBANK1& (0+127)
   879  07CD  01E8               	clrf	(__pbssBANK1+1)& (0+127)
   880  07CE  01E9               	clrf	(__pbssBANK1+2)& (0+127)
   881  07CF  01EA               	clrf	(__pbssBANK1+3)& (0+127)
   882  07D0  01EB               	clrf	(__pbssBANK1+4)& (0+127)
   883  07D1  01EC               	clrf	(__pbssBANK1+5)& (0+127)
   884  07D2  01ED               	clrf	(__pbssBANK1+6)& (0+127)
   885                           
   886                           ; Clear objects allocated to BANK3
   887  07D3  1783               	bsf	3,7	;select IRP bank2
   888  07D4  3090               	movlw	low __pbssBANK3
   889  07D5  0084               	movwf	4
   890  07D6  30D0               	movlw	low (__pbssBANK3+64)
   891  07D7  120A  158A  2248  120A  118A  	fcall	clear_ram0
   892                           
   893                           ; Clear objects allocated to BANK2
   894  07DC  3010               	movlw	low __pbssBANK2
   895  07DD  0084               	movwf	4
   896  07DE  3050               	movlw	low (__pbssBANK2+64)
   897  07DF  120A  158A  2248  120A  118A  	fcall	clear_ram0
   898                           
   899                           ; Initialize objects allocated to BANK1
   900  07E4  120A  118A  2003  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   901  07E9  00EE               	movwf	__pdataBANK1& (0+127)
   902  07EA  120A  118A  2004  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   903  07EF  00EF               	movwf	(__pdataBANK1+1)& (0+127)
   904                           
   905                           ; Initialize objects allocated to BANK0
   906  07F0  1383               	bcf	3,7	;select IRP bank0
   907  07F1  3044               	movlw	low (__pdataBANK0+36)
   908  07F2  00FD               	movwf	btemp+-1
   909  07F3  300B               	movlw	high __pidataBANK0
   910  07F4  00FE               	movwf	btemp
   911  07F5  30A8               	movlw	low __pidataBANK0
   912  07F6  00FF               	movwf	btemp+1
   913  07F7  3020               	movlw	low __pdataBANK0
   914  07F8  0084               	movwf	4
   915  07F9  120A  158A  227A   	fcall	init_ram0
   916  07FC                     end_of_initialization:	
   917                           ;End of C runtime variable initialization code
   918                           
   919  07FC                     __end_of__initialization:	
   920  07FC  0183               	clrf	3
   921  07FD  120A  118A  2C46   	ljmp	_main	;jump to C main() function
   922                           
   923                           	psect	bssBANK0
   924  0060                     __pbssBANK0:	
   925  0060                     USARTWriteInt@F1617:	
   926  0060                     	ds	5
   927  0065                     _g_cur_matrix44:	
   928  0065                     	ds	2
   929  0067                     _temp_pre_count:	
   930  0067                     	ds	1
   931  0068                     _temp_y:	
   932  0068                     	ds	1
   933                           
   934                           	psect	dataBANK0
   935  0020                     __pdataBANK0:	
   936  0020                     _g_char_info:	
   937  0020                     	ds	27
   938  003B                     _randx:	
   939  003B                     	ds	4
   940  003F                     _temp_pre_risk:	
   941  003F                     	ds	2
   942  0041                     _tem_pre_sub_index:	
   943  0041                     	ds	1
   944  0042                     _temp_pre_hole:	
   945  0042                     	ds	1
   946  0043                     _temp_pre_x:	
   947  0043                     	ds	1
   948                           
   949                           	psect	bssBANK1
   950  00E7                     __pbssBANK1:	
   951  00E7                     _temp_risk:	
   952  00E7                     	ds	2
   953  00E9                     _cur_y:	
   954  00E9                     	ds	1
   955  00EA                     _g_char_info_index:	
   956  00EA                     	ds	1
   957  00EB                     _temp_count:	
   958  00EB                     	ds	1
   959  00EC                     _temp_high:	
   960  00EC                     	ds	1
   961  00ED                     _temp_hole:	
   962  00ED                     	ds	1
   963                           
   964                           	psect	dataBANK1
   965  00EE                     __pdataBANK1:	
   966  00EE                     _cur_x:	
   967  00EE                     	ds	1
   968  00EF                     _temp_pre_high:	
   969  00EF                     	ds	1
   970                           
   971                           	psect	bssBANK3
   972  0190                     __pbssBANK3:	
   973  0190                     _URBuff:	
   974  0190                     	ds	32
   975  01B0                     _g_debug:	
   976  01B0                     	ds	32
   977                           
   978                           	psect	bssBANK2
   979  0110                     __pbssBANK2:	
   980  0110                     _g_matrix88:	
   981  0110                     	ds	64
   982                           
   983                           	psect	clrtext
   984  0A48                     clear_ram0:	
   985                           ;	Called with FSR containing the base address, and
   986                           ;	W with the last address+1
   987                           
   988  0A48  0064               	clrwdt	;clear the watchdog before getting into this loop
   989  0A49                     clrloop0:	
   990  0A49  0180               	clrf	0	;clear RAM location pointed to by FSR
   991  0A4A  0A84               	incf	4,f	;increment pointer
   992  0A4B  0604               	xorwf	4,w	;XOR with final address
   993  0A4C  1903               	btfsc	3,2	;have we reached the end yet?
   994  0A4D  3400               	retlw	0	;all done for this memory range, return
   995  0A4E  0604               	xorwf	4,w	;XOR again to restore value
   996  0A4F  2A49               	goto	clrloop0	;do the next byte
   997                           
   998                           	psect	inittext
   999  0A76                     init_fetch0:	
  1000                           ;	Called with low address in FSR and high address in W
  1001                           
  1002  0A76  087E               	movf	126,w
  1003  0A77  008A               	movwf	10
  1004  0A78  087F               	movf	127,w
  1005  0A79  0082               	movwf	2
  1006  0A7A                     init_ram0:	
  1007                           ;Called with:
  1008                           ;	high address of idata address in btemp 
  1009                           ;	low address of idata address in btemp+1 
  1010                           ;	low address of data in FSR
  1011                           ;	high address + 1 of data in btemp-1
  1012                           
  1013  0A7A  2276  120A  158A   	fcall	init_fetch0
  1014  0A7D  0080               	movwf	0
  1015  0A7E  0A84               	incf	4,f
  1016  0A7F  0804               	movf	4,w
  1017  0A80  067D               	xorwf	125,w
  1018  0A81  1903               	btfsc	3,2
  1019  0A82  3400               	retlw	0
  1020  0A83  0AFF               	incf	127,f
  1021  0A84  1903               	btfsc	3,2
  1022  0A85  0AFE               	incf	126,f
  1023  0A86  2A7A               	goto	init_ram0
  1024                           
  1025                           	psect	cstackBANK3
  1026  01D0                     __pcstackBANK3:	
  1027  01D0                     ??_main:	
  1028                           
  1029                           ; 1 bytes @ 0x0
  1030  01D0                     	ds	9
  1031                           
  1032                           	psect	cstackBANK1
  1033  00A0                     __pcstackBANK1:	
  1034  00A0                     find_best_solution@left_most_index:	
  1035                           
  1036                           ; 1 bytes @ 0x0
  1037  00A0                     	ds	1
  1038  00A1                     find_best_solution@right_most_index:	
  1039                           
  1040                           ; 1 bytes @ 0x1
  1041  00A1                     	ds	1
  1042  00A2                     find_best_solution@res:	
  1043                           
  1044                           ; 1 bytes @ 0x2
  1045  00A2                     	ds	1
  1046  00A3                     find_best_solution@temp_matrix88:	
  1047                           
  1048                           ; 64 bytes @ 0x3
  1049  00A3                     	ds	64
  1050  00E3                     find_best_solution@temp_cur_matrix44:	
  1051                           
  1052                           ; 2 bytes @ 0x43
  1053  00E3                     	ds	2
  1054  00E5                     find_best_solution@tem_sub_index:	
  1055                           
  1056                           ; 1 bytes @ 0x45
  1057  00E5                     	ds	1
  1058  00E6                     find_best_solution@temp_x:	
  1059                           
  1060                           ; 1 bytes @ 0x46
  1061  00E6                     	ds	1
  1062                           
  1063                           	psect	cstackCOMMON
  1064  0070                     __pcstackCOMMON:	
  1065  0070                     ?_srand:	
  1066  0070                     ?_USARTInit:	
  1067                           ; 1 bytes @ 0x0
  1068                           
  1069  0070                     ?_USARTWriteChar:	
  1070                           ; 1 bytes @ 0x0
  1071                           
  1072  0070                     ??_USARTWriteChar:	
  1073                           ; 1 bytes @ 0x0
  1074                           
  1075  0070                     ?_SPI1_write:	
  1076                           ; 1 bytes @ 0x0
  1077                           
  1078  0070                     ??_SPI1_write:	
  1079                           ; 1 bytes @ 0x0
  1080                           
  1081  0070                     ?_max7219_init1:	
  1082                           ; 1 bytes @ 0x0
  1083                           
  1084  0070                     ?_printf_MATRIX7219:	
  1085                           ; 1 bytes @ 0x0
  1086                           
  1087  0070                     ?_MATRIX88_to_MATRIX7219:	
  1088                           ; 1 bytes @ 0x0
  1089                           
  1090  0070                     ?_printf_MATRIX88:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0070                     ?_printf_Screen:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096  0070                     ?_Clear_Matrix:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099  0070                     ?_is_row_full:	
  1100                           ; 1 bytes @ 0x0
  1101                           
  1102  0070                     ?_is_row_empty:	
  1103                           ; 1 bytes @ 0x0
  1104                           
  1105  0070                     ?_hit_land:	
  1106                           ; 1 bytes @ 0x0
  1107                           
  1108  0070                     ?_is_valid:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111  0070                     ?_is_left_boundary:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114  0070                     ?_is_right_boundary:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0070                     ?_fall_off:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0070                     ?_clear:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0070                     ?_merge:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0070                     ?_char_info_index_rand:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0070                     ?_get_high:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132  0070                     ?_get_high_after_merge:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135  0070                     ?_get_holes_after_merge:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138  0070                     ??_get_holes_after_merge:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0070                     ?_find_best_solution:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0070                     ?___bmul:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147  0070                     ?_memset:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150  0070                     ?_memcpy:	
  1151                           ; 2 bytes @ 0x0
  1152                           
  1153  0070                     ?_evaluate:	
  1154                           ; 2 bytes @ 0x0
  1155                           
  1156  0070                     ?___lmul:	
  1157                           ; 2 bytes @ 0x0
  1158                           
  1159  0070                     USARTWriteChar@ch:	
  1160                           ; 4 bytes @ 0x0
  1161                           
  1162  0070                     MATRIX88_to_MATRIX7219@matrix7219:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0070                     is_row_empty@row:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0070                     hit_land@y:	
  1169                           ; 1 bytes @ 0x0
  1170                           
  1171  0070                     is_valid@y:	
  1172                           ; 1 bytes @ 0x0
  1173                           
  1174  0070                     fall_off@y:	
  1175                           ; 1 bytes @ 0x0
  1176                           
  1177  0070                     clear@y:	
  1178                           ; 1 bytes @ 0x0
  1179                           
  1180  0070                     merge@y:	
  1181                           ; 1 bytes @ 0x0
  1182                           
  1183  0070                     ___bmul@multiplicand:	
  1184                           ; 1 bytes @ 0x0
  1185                           
  1186  0070                     USARTInit@baud_rate:	
  1187                           ; 1 bytes @ 0x0
  1188                           
  1189  0070                     is_row_full@matrix:	
  1190                           ; 2 bytes @ 0x0
  1191                           
  1192  0070                     is_left_boundary@matrix44:	
  1193                           ; 2 bytes @ 0x0
  1194                           
  1195  0070                     is_right_boundary@matrix44:	
  1196                           ; 2 bytes @ 0x0
  1197                           
  1198  0070                     get_high_after_merge@matrix:	
  1199                           ; 2 bytes @ 0x0
  1200                           
  1201  0070                     memcpy@d1:	
  1202                           ; 2 bytes @ 0x0
  1203                           
  1204  0070                     memset@p1:	
  1205                           ; 2 bytes @ 0x0
  1206                           
  1207  0070                     srand@x:	
  1208                           ; 2 bytes @ 0x0
  1209                           
  1210  0070                     ___lmul@multiplier:	
  1211                           ; 2 bytes @ 0x0
  1212                           
  1213                           
  1214                           ; 4 bytes @ 0x0
  1215  0070                     	ds	1
  1216  0071                     ?_USARTWriteString:	
  1217  0071                     ??_MATRIX88_to_MATRIX7219:	
  1218                           ; 1 bytes @ 0x1
  1219                           
  1220  0071                     ??_is_row_empty:	
  1221                           ; 1 bytes @ 0x1
  1222                           
  1223  0071                     ??___bmul:	
  1224                           ; 1 bytes @ 0x1
  1225                           
  1226  0071                     SPI1_write@data:	
  1227                           ; 1 bytes @ 0x1
  1228                           
  1229  0071                     USARTWriteString@str:	
  1230                           ; 1 bytes @ 0x1
  1231                           
  1232  0071                     hit_land@matrix44:	
  1233                           ; 2 bytes @ 0x1
  1234                           
  1235  0071                     is_valid@matrix44:	
  1236                           ; 2 bytes @ 0x1
  1237                           
  1238  0071                     fall_off@matrix44:	
  1239                           ; 2 bytes @ 0x1
  1240                           
  1241  0071                     clear@matrix44:	
  1242                           ; 2 bytes @ 0x1
  1243                           
  1244  0071                     merge@matrix44:	
  1245                           ; 2 bytes @ 0x1
  1246                           
  1247                           
  1248                           ; 2 bytes @ 0x1
  1249  0071                     	ds	1
  1250  0072                     ??_srand:	
  1251  0072                     ??_USARTInit:	
  1252                           ; 1 bytes @ 0x2
  1253                           
  1254  0072                     ??_evaluate:	
  1255                           ; 1 bytes @ 0x2
  1256                           
  1257  0072                     ??_get_high_after_merge:	
  1258                           ; 1 bytes @ 0x2
  1259                           
  1260  0072                     SPI1_write@mask:	
  1261                           ; 1 bytes @ 0x2
  1262                           
  1263  0072                     is_row_full@row:	
  1264                           ; 1 bytes @ 0x2
  1265                           
  1266  0072                     is_left_boundary@matrix88:	
  1267                           ; 1 bytes @ 0x2
  1268                           
  1269  0072                     is_right_boundary@matrix88:	
  1270                           ; 1 bytes @ 0x2
  1271                           
  1272  0072                     ___bmul@product:	
  1273                           ; 1 bytes @ 0x2
  1274                           
  1275  0072                     memcpy@s1:	
  1276                           ; 1 bytes @ 0x2
  1277                           
  1278  0072                     memset@c:	
  1279                           ; 2 bytes @ 0x2
  1280                           
  1281                           
  1282                           ; 2 bytes @ 0x2
  1283  0072                     	ds	1
  1284  0073                     ??_USARTWriteString:	
  1285  0073                     ?_debug_str:	
  1286                           ; 1 bytes @ 0x3
  1287                           
  1288  0073                     ?_debug_line:	
  1289                           ; 1 bytes @ 0x3
  1290                           
  1291  0073                     ??_is_row_full:	
  1292                           ; 1 bytes @ 0x3
  1293                           
  1294  0073                     ??_is_left_boundary:	
  1295                           ; 1 bytes @ 0x3
  1296                           
  1297  0073                     ??_is_right_boundary:	
  1298                           ; 1 bytes @ 0x3
  1299                           
  1300  0073                     SPI1_write@i:	
  1301                           ; 1 bytes @ 0x3
  1302                           
  1303  0073                     hit_land@matrix88:	
  1304                           ; 1 bytes @ 0x3
  1305                           
  1306  0073                     is_valid@matrix88:	
  1307                           ; 1 bytes @ 0x3
  1308                           
  1309  0073                     fall_off@matrix88:	
  1310                           ; 1 bytes @ 0x3
  1311                           
  1312  0073                     clear@matrix88:	
  1313                           ; 1 bytes @ 0x3
  1314                           
  1315  0073                     merge@matrix88:	
  1316                           ; 1 bytes @ 0x3
  1317                           
  1318  0073                     ___bmul@multiplier:	
  1319                           ; 1 bytes @ 0x3
  1320                           
  1321  0073                     debug_str@str:	
  1322                           ; 1 bytes @ 0x3
  1323                           
  1324  0073                     debug_line@str:	
  1325                           ; 2 bytes @ 0x3
  1326                           
  1327                           
  1328                           ; 2 bytes @ 0x3
  1329  0073                     	ds	1
  1330  0074                     ??_max7219_init1:	
  1331  0074                     ?_Write_Byte:	
  1332                           ; 1 bytes @ 0x4
  1333                           
  1334  0074                     ??_hit_land:	
  1335                           ; 1 bytes @ 0x4
  1336                           
  1337  0074                     ??_is_valid:	
  1338                           ; 1 bytes @ 0x4
  1339                           
  1340  0074                     ??_fall_off:	
  1341                           ; 1 bytes @ 0x4
  1342                           
  1343  0074                     ??_clear:	
  1344                           ; 1 bytes @ 0x4
  1345                           
  1346  0074                     ??_merge:	
  1347                           ; 1 bytes @ 0x4
  1348                           
  1349  0074                     Write_Byte@myValue:	
  1350                           ; 1 bytes @ 0x4
  1351                           
  1352  0074                     MATRIX88_to_MATRIX7219@matrix88:	
  1353                           ; 1 bytes @ 0x4
  1354                           
  1355  0074                     is_row_empty@matrix:	
  1356                           ; 1 bytes @ 0x4
  1357                           
  1358  0074                     memcpy@n:	
  1359                           ; 1 bytes @ 0x4
  1360                           
  1361  0074                     memset@n:	
  1362                           ; 2 bytes @ 0x4
  1363                           
  1364  0074                     ___lmul@multiplicand:	
  1365                           ; 2 bytes @ 0x4
  1366                           
  1367                           
  1368                           ; 4 bytes @ 0x4
  1369  0074                     	ds	1
  1370  0075                     ??_debug_str:	
  1371  0075                     ??_debug_line:	
  1372                           ; 1 bytes @ 0x5
  1373                           
  1374  0075                     ??_Write_Byte:	
  1375                           ; 1 bytes @ 0x5
  1376                           
  1377  0075                     debug_str@enable:	
  1378                           ; 1 bytes @ 0x5
  1379                           
  1380  0075                     debug_line@enable:	
  1381                           ; 1 bytes @ 0x5
  1382                           
  1383  0075                     Write_Byte@myColumn:	
  1384                           ; 1 bytes @ 0x5
  1385                           
  1386  0075                     MATRIX88_to_MATRIX7219@mask:	
  1387                           ; 1 bytes @ 0x5
  1388                           
  1389  0075                     is_row_empty@col:	
  1390                           ; 1 bytes @ 0x5
  1391                           
  1392                           
  1393                           ; 1 bytes @ 0x5
  1394  0075                     	ds	1
  1395  0076                     ??_memset:	
  1396  0076                     ??_memcpy:	
  1397                           ; 1 bytes @ 0x6
  1398                           
  1399  0076                     ??_printf_MATRIX7219:	
  1400                           ; 1 bytes @ 0x6
  1401                           
  1402  0076                     ?_printf_debug_MATRIX88:	
  1403                           ; 1 bytes @ 0x6
  1404                           
  1405  0076                     ??_get_high:	
  1406                           ; 1 bytes @ 0x6
  1407                           
  1408  0076                     MATRIX88_to_MATRIX7219@row:	
  1409                           ; 1 bytes @ 0x6
  1410                           
  1411  0076                     get_high_after_merge@y:	
  1412                           ; 1 bytes @ 0x6
  1413                           
  1414  0076                     get_holes_after_merge@num_hole:	
  1415                           ; 1 bytes @ 0x6
  1416                           
  1417  0076                     printf_debug_MATRIX88@lable:	
  1418                           ; 1 bytes @ 0x6
  1419                           
  1420  0076                     evaluate@risk:	
  1421                           ; 2 bytes @ 0x6
  1422                           
  1423  0076                     memset@p:	
  1424                           ; 2 bytes @ 0x6
  1425                           
  1426                           
  1427                           ; 2 bytes @ 0x6
  1428  0076                     	ds	1
  1429  0077                     MATRIX88_to_MATRIX7219@col:	
  1430  0077                     is_right_boundary@x:	
  1431                           ; 1 bytes @ 0x7
  1432                           
  1433  0077                     get_high@matrix:	
  1434                           ; 1 bytes @ 0x7
  1435                           
  1436  0077                     get_high_after_merge@col:	
  1437                           ; 1 bytes @ 0x7
  1438                           
  1439  0077                     get_holes_after_merge@stop:	
  1440                           ; 1 bytes @ 0x7
  1441                           
  1442  0077                     memcpy@d:	
  1443                           ; 1 bytes @ 0x7
  1444                           
  1445                           
  1446                           ; 2 bytes @ 0x7
  1447  0077                     	ds	1
  1448  0078                     ??___lmul:	
  1449  0078                     printf_MATRIX7219@matrix:	
  1450                           ; 1 bytes @ 0x8
  1451                           
  1452  0078                     printf_debug_MATRIX88@matrix:	
  1453                           ; 1 bytes @ 0x8
  1454                           
  1455  0078                     is_row_full@col:	
  1456                           ; 1 bytes @ 0x8
  1457                           
  1458  0078                     hit_land@x:	
  1459                           ; 1 bytes @ 0x8
  1460                           
  1461  0078                     is_valid@x:	
  1462                           ; 1 bytes @ 0x8
  1463                           
  1464  0078                     is_left_boundary@x:	
  1465                           ; 1 bytes @ 0x8
  1466                           
  1467  0078                     is_right_boundary@row:	
  1468                           ; 1 bytes @ 0x8
  1469                           
  1470  0078                     fall_off@x:	
  1471                           ; 1 bytes @ 0x8
  1472                           
  1473  0078                     clear@x:	
  1474                           ; 1 bytes @ 0x8
  1475                           
  1476  0078                     merge@x:	
  1477                           ; 1 bytes @ 0x8
  1478                           
  1479  0078                     evaluate@full:	
  1480                           ; 1 bytes @ 0x8
  1481                           
  1482  0078                     get_high@row:	
  1483                           ; 1 bytes @ 0x8
  1484                           
  1485  0078                     get_high_after_merge@row:	
  1486                           ; 1 bytes @ 0x8
  1487                           
  1488  0078                     get_holes_after_merge@start:	
  1489                           ; 1 bytes @ 0x8
  1490                           
  1491                           
  1492                           ; 1 bytes @ 0x8
  1493  0078                     	ds	1
  1494  0079                     ??_printf_debug_MATRIX88:	
  1495  0079                     printf_MATRIX7219@col:	
  1496                           ; 1 bytes @ 0x9
  1497                           
  1498  0079                     hit_land@col:	
  1499                           ; 1 bytes @ 0x9
  1500                           
  1501  0079                     is_valid@row:	
  1502                           ; 1 bytes @ 0x9
  1503                           
  1504  0079                     is_left_boundary@row:	
  1505                           ; 1 bytes @ 0x9
  1506                           
  1507  0079                     is_right_boundary@col:	
  1508                           ; 1 bytes @ 0x9
  1509                           
  1510  0079                     fall_off@col:	
  1511                           ; 1 bytes @ 0x9
  1512                           
  1513  0079                     clear@row:	
  1514                           ; 1 bytes @ 0x9
  1515                           
  1516  0079                     merge@row:	
  1517                           ; 1 bytes @ 0x9
  1518                           
  1519  0079                     evaluate@matrix:	
  1520                           ; 1 bytes @ 0x9
  1521                           
  1522  0079                     get_holes_after_merge@matrix:	
  1523                           ; 1 bytes @ 0x9
  1524                           
  1525  0079                     memcpy@s:	
  1526                           ; 1 bytes @ 0x9
  1527                           
  1528  0079                     ___lmul@product:	
  1529                           ; 2 bytes @ 0x9
  1530                           
  1531                           
  1532                           ; 4 bytes @ 0x9
  1533  0079                     	ds	1
  1534  007A                     ??_printf_MATRIX88:	
  1535  007A                     ?_right_most:	
  1536                           ; 1 bytes @ 0xA
  1537                           
  1538  007A                     hit_land@row:	
  1539                           ; 1 bytes @ 0xA
  1540                           
  1541  007A                     is_valid@col:	
  1542                           ; 1 bytes @ 0xA
  1543                           
  1544  007A                     is_left_boundary@col:	
  1545                           ; 1 bytes @ 0xA
  1546                           
  1547  007A                     fall_off@row:	
  1548                           ; 1 bytes @ 0xA
  1549                           
  1550  007A                     clear@col:	
  1551                           ; 1 bytes @ 0xA
  1552                           
  1553  007A                     merge@col:	
  1554                           ; 1 bytes @ 0xA
  1555                           
  1556  007A                     evaluate@col:	
  1557                           ; 1 bytes @ 0xA
  1558                           
  1559  007A                     get_holes_after_merge@col:	
  1560                           ; 1 bytes @ 0xA
  1561                           
  1562  007A                     right_most@matrix44:	
  1563                           ; 1 bytes @ 0xA
  1564                           
  1565                           
  1566                           ; 2 bytes @ 0xA
  1567  007A                     	ds	1
  1568  007B                     ??_printf_Screen:	
  1569  007B                     ??_Clear_Matrix:	
  1570                           ; 1 bytes @ 0xB
  1571                           
  1572  007B                     ?_delete_row:	
  1573                           ; 1 bytes @ 0xB
  1574                           
  1575  007B                     ?_left_most:	
  1576                           ; 1 bytes @ 0xB
  1577                           
  1578  007B                     evaluate@row:	
  1579                           ; 1 bytes @ 0xB
  1580                           
  1581  007B                     get_holes_after_merge@row:	
  1582                           ; 1 bytes @ 0xB
  1583                           
  1584  007B                     delete_row@matrix:	
  1585                           ; 1 bytes @ 0xB
  1586                           
  1587  007B                     left_most@matrix44:	
  1588                           ; 2 bytes @ 0xB
  1589                           
  1590                           
  1591                           ; 2 bytes @ 0xB
  1592  007B                     	ds	1
  1593  007C                     right_most@matrix88:	
  1594                           
  1595                           ; 1 bytes @ 0xC
  1596  007C                     	ds	1
  1597  007D                     ??_right_most:	
  1598  007D                     ??___awmod:	
  1599                           ; 1 bytes @ 0xD
  1600                           
  1601  007D                     delete_row@row:	
  1602                           ; 1 bytes @ 0xD
  1603                           
  1604  007D                     left_most@matrix88:	
  1605                           ; 1 bytes @ 0xD
  1606                           
  1607                           
  1608                           ; 1 bytes @ 0xD
  1609  007D                     	ds	1
  1610  007E                     ??_char_info_index_rand:	
  1611                           
  1612                           	psect	cstackBANK0
  1613  0044                     __pcstackBANK0:	
  1614                           ; 1 bytes @ 0xE
  1615                           
  1616  0044                     ??_delete_row:	
  1617  0044                     ?_merge1:	
  1618                           ; 1 bytes @ 0x0
  1619                           
  1620  0044                     ??_left_most:	
  1621                           ; 1 bytes @ 0x0
  1622                           
  1623  0044                     ?_rand:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0044                     printf_debug_MATRIX88@enable:	
  1627                           ; 2 bytes @ 0x0
  1628                           
  1629  0044                     printf_MATRIX88@matrix88:	
  1630                           ; 1 bytes @ 0x0
  1631                           
  1632  0044                     merge1@y:	
  1633                           ; 1 bytes @ 0x0
  1634                           
  1635  0044                     right_most@x:	
  1636                           ; 1 bytes @ 0x0
  1637                           
  1638                           
  1639                           ; 1 bytes @ 0x0
  1640  0044                     	ds	1
  1641  0045                     printf_debug_MATRIX88@row:	
  1642  0045                     left_most@x:	
  1643                           ; 1 bytes @ 0x1
  1644                           
  1645  0045                     merge1@matrix44:	
  1646                           ; 1 bytes @ 0x1
  1647                           
  1648  0045                     printf_MATRIX88@matrix7219:	
  1649                           ; 2 bytes @ 0x1
  1650                           
  1651                           
  1652                           ; 8 bytes @ 0x1
  1653  0045                     	ds	1
  1654  0046                     ??_rand:	
  1655  0046                     printf_debug_MATRIX88@col:	
  1656                           ; 1 bytes @ 0x2
  1657                           
  1658                           
  1659                           ; 1 bytes @ 0x2
  1660  0046                     	ds	1
  1661  0047                     merge1@matrix88_in:	
  1662                           
  1663                           ; 1 bytes @ 0x3
  1664  0047                     	ds	1
  1665  0048                     merge1@matrix88_out:	
  1666  0048                     delete_row@len:	
  1667                           ; 1 bytes @ 0x4
  1668                           
  1669                           
  1670                           ; 2 bytes @ 0x4
  1671  0048                     	ds	1
  1672  0049                     ??_merge1:	
  1673                           
  1674                           ; 1 bytes @ 0x5
  1675  0049                     	ds	1
  1676  004A                     delete_row@i:	
  1677                           
  1678                           ; 1 bytes @ 0x6
  1679  004A                     	ds	1
  1680  004B                     ?_delete_matrix:	
  1681  004B                     ?___awmod:	
  1682                           ; 1 bytes @ 0x7
  1683                           
  1684  004B                     delete_matrix@matrix:	
  1685                           ; 2 bytes @ 0x7
  1686                           
  1687  004B                     ___awmod@divisor:	
  1688                           ; 2 bytes @ 0x7
  1689                           
  1690                           
  1691                           ; 2 bytes @ 0x7
  1692  004B                     	ds	2
  1693  004D                     ??_delete_matrix:	
  1694  004D                     merge1@x:	
  1695                           ; 1 bytes @ 0x9
  1696                           
  1697  004D                     ___awmod@dividend:	
  1698                           ; 1 bytes @ 0x9
  1699                           
  1700                           
  1701                           ; 2 bytes @ 0x9
  1702  004D                     	ds	1
  1703  004E                     delete_matrix@count:	
  1704  004E                     merge1@len:	
  1705                           ; 1 bytes @ 0xA
  1706                           
  1707                           
  1708                           ; 2 bytes @ 0xA
  1709  004E                     	ds	1
  1710  004F                     delete_matrix@row:	
  1711  004F                     ___awmod@counter:	
  1712                           ; 1 bytes @ 0xB
  1713                           
  1714                           
  1715                           ; 1 bytes @ 0xB
  1716  004F                     	ds	1
  1717  0050                     merge1@row:	
  1718  0050                     ___awmod@sign:	
  1719                           ; 1 bytes @ 0xC
  1720                           
  1721                           
  1722                           ; 1 bytes @ 0xC
  1723  0050                     	ds	1
  1724  0051                     merge1@col:	
  1725                           
  1726                           ; 1 bytes @ 0xD
  1727  0051                     	ds	1
  1728  0052                     ??_find_best_solution:	
  1729                           
  1730                           ; 1 bytes @ 0xE
  1731  0052                     	ds	7
  1732  0059                     ?_main:	
  1733  0059                     main@argc:	
  1734                           ; 2 bytes @ 0x15
  1735                           
  1736                           
  1737                           ; 2 bytes @ 0x15
  1738  0059                     	ds	2
  1739  005B                     main@argv:	
  1740                           
  1741                           ; 2 bytes @ 0x17
  1742  005B                     	ds	2
  1743  005D                     main@Seed:	
  1744                           
  1745                           ; 2 bytes @ 0x19
  1746  005D                     	ds	2
  1747  005F                     main@hit_res:	
  1748                           
  1749                           ; 1 bytes @ 0x1B
  1750  005F                     	ds	1
  1751                           
  1752                           	psect	maintext
  1753  0446                     __pmaintext:	
  1754 ;;
  1755 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
  1756 ;;
  1757 ;; *************** function _main *****************
  1758 ;; Defined at:
  1759 ;;		line 1292 in file "teris_16f886.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;  argc            2   21[BANK0 ] int 
  1762 ;;  argv            2   23[BANK0 ] PTR PTR unsigned char 
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;  Seed            2   25[BANK0 ] unsigned int 
  1765 ;;  hit_res         1   27[BANK0 ] unsigned char 
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  2   21[BANK0 ] int 
  1768 ;; Registers used:
  1769 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1770 ;; Tracked objects:
  1771 ;;		On entry : B00/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1775 ;;      Params:         0       4       0       0       0
  1776 ;;      Locals:         0       3       0       0       0
  1777 ;;      Temps:          0       0       0       9       0
  1778 ;;      Totals:         0       7       0       9       0
  1779 ;;Total ram usage:       16 bytes
  1780 ;; Hardware stack levels required when called:    6
  1781 ;; This function calls:
  1782 ;;		_Clear_Matrix
  1783 ;;		_USARTInit
  1784 ;;		___bmul
  1785 ;;		_char_info_index_rand
  1786 ;;		_clear
  1787 ;;		_delete_matrix
  1788 ;;		_find_best_solution
  1789 ;;		_hit_land
  1790 ;;		_max7219_init1
  1791 ;;		_merge
  1792 ;;		_printf_Screen
  1793 ;;		_printf_debug_MATRIX88
  1794 ;;		_srand
  1795 ;; This function is called by:
  1796 ;;		Startup code after reset
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           
  1801                           ;psect for function _main
  1802  0446                     _main:	
  1803                           
  1804                           ;teris_16f886.c: 1294: uint8_t hit_res;
  1805                           ;teris_16f886.c: 1319: (TRISAbits.TRISA3 = 0);
  1806                           
  1807                           ;incstack = 0
  1808                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1809  0446  1683               	bsf	3,5	;RP0=1, select bank1
  1810  0447  1303               	bcf	3,6	;RP1=0, select bank1
  1811  0448  1185               	bcf	5,3	;volatile
  1812                           
  1813                           ;teris_16f886.c: 1321: (TRISAbits.TRISA2 = 0);
  1814  0449  1105               	bcf	5,2	;volatile
  1815                           
  1816                           ;teris_16f886.c: 1323: (TRISAbits.TRISA1 = 0);
  1817  044A  1085               	bcf	5,1	;volatile
  1818                           
  1819                           ;teris_16f886.c: 1325: ANSELbits.ANS1 = 0;
  1820  044B  1683               	bsf	3,5	;RP0=1, select bank3
  1821  044C  1703               	bsf	3,6	;RP1=1, select bank3
  1822  044D  1088               	bcf	8,1	;volatile
  1823                           
  1824                           ;teris_16f886.c: 1326: ANSELbits.ANS2 = 0;
  1825  044E  1108               	bcf	8,2	;volatile
  1826                           
  1827                           ;teris_16f886.c: 1327: ANSELbits.ANS3 = 0;
  1828  044F  1188               	bcf	8,3	;volatile
  1829                           
  1830                           ;teris_16f886.c: 1328: RA2 = 1;
  1831  0450  1283               	bcf	3,5	;RP0=0, select bank0
  1832  0451  1303               	bcf	3,6	;RP1=0, select bank0
  1833  0452  1505               	bsf	5,2	;volatile
  1834                           
  1835                           ;teris_16f886.c: 1329: RA1 = 0;
  1836  0453  1085               	bcf	5,1	;volatile
  1837                           
  1838                           ;teris_16f886.c: 1332: USARTInit(9600);
  1839  0454  3080               	movlw	128
  1840  0455  00F0               	movwf	USARTInit@baud_rate
  1841  0456  3025               	movlw	37
  1842  0457  00F1               	movwf	USARTInit@baud_rate+1
  1843  0458  120A  158A  2531  120A  118A  	fcall	_USARTInit
  1844                           
  1845                           ;teris_16f886.c: 1334: max7219_init1();
  1846  045D  120A  158A  26F3  120A  118A  	fcall	_max7219_init1
  1847                           
  1848                           ;teris_16f886.c: 1335: unsigned Seed;
  1849                           ;teris_16f886.c: 1336: srand(Seed);
  1850  0462  1283               	bcf	3,5	;RP0=0, select bank0
  1851  0463  1303               	bcf	3,6	;RP1=0, select bank0
  1852  0464  085E               	movf	main@Seed+1,w
  1853  0465  00F1               	movwf	srand@x+1
  1854  0466  085D               	movf	main@Seed,w
  1855  0467  00F0               	movwf	srand@x
  1856  0468  120A  158A  2250  120A  118A  	fcall	_srand
  1857  046D                     l501:	
  1858                           ;teris_16f886.c: 1338: __start:
  1859                           
  1860                           ;teris_16f886.c: 1348: {
  1861                           ;teris_16f886.c: 1350: goto __start;
  1862                           
  1863                           
  1864                           ;teris_16f886.c: 1339: Clear_Matrix();
  1865  046D  120A  158A  22AB  120A  118A  	fcall	_Clear_Matrix
  1866  0472                     l4601:	
  1867                           ;teris_16f886.c: 1340: while(1)
  1868                           
  1869                           
  1870                           ;teris_16f886.c: 1341: {
  1871                           ;teris_16f886.c: 1342: cur_y = 0;
  1872  0472  1683               	bsf	3,5	;RP0=1, select bank1
  1873  0473  1303               	bcf	3,6	;RP1=0, select bank1
  1874  0474  01E9               	clrf	_cur_y^(0+128)
  1875                           
  1876                           ;teris_16f886.c: 1343: cur_x = 2, cur_y = 0;
  1877  0475  3002               	movlw	2
  1878  0476  1683               	bsf	3,5	;RP0=1, select bank3
  1879  0477  1703               	bsf	3,6	;RP1=1, select bank3
  1880  0478  00D0               	movwf	??_main^(0+384)
  1881  0479  0850               	movf	??_main^(0+384),w
  1882  047A  1683               	bsf	3,5	;RP0=1, select bank1
  1883  047B  1303               	bcf	3,6	;RP1=0, select bank1
  1884  047C  00EE               	movwf	_cur_x^(0+128)
  1885  047D  01E9               	clrf	_cur_y^(0+128)
  1886                           
  1887                           ;teris_16f886.c: 1344: g_char_info_index = char_info_index_rand();
  1888  047E  120A  158A  22D4  120A  118A  	fcall	_char_info_index_rand
  1889  0483  1683               	bsf	3,5	;RP0=1, select bank3
  1890  0484  1703               	bsf	3,6	;RP1=1, select bank3
  1891  0485  00D0               	movwf	??_main^(0+384)
  1892  0486  0850               	movf	??_main^(0+384),w
  1893  0487  1683               	bsf	3,5	;RP0=1, select bank1
  1894  0488  1303               	bcf	3,6	;RP1=0, select bank1
  1895  0489  00EA               	movwf	_g_char_info_index^(0+128)
  1896                           
  1897                           ;teris_16f886.c: 1347: if(find_best_solution() == 0)
  1898  048A  120A  118A  258E  120A  118A  	fcall	_find_best_solution
  1899  048F  3A00               	xorlw	0
  1900  0490  1903               	btfsc	3,2
  1901  0491  2C6D               	goto	l501
  1902                           
  1903                           ;teris_16f886.c: 1351: }
  1904                           ;teris_16f886.c: 1352: g_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].start
      +                          _index + g_char_info[g_char_info_index].cur_index];
  1905  0492  3003               	movlw	3
  1906  0493  1683               	bsf	3,5	;RP0=1, select bank3
  1907  0494  1703               	bsf	3,6	;RP1=1, select bank3
  1908  0495  00D0               	movwf	??_main^(0+384)
  1909  0496  0850               	movf	??_main^(0+384),w
  1910  0497  00F0               	movwf	___bmul@multiplicand
  1911  0498  1683               	bsf	3,5	;RP0=1, select bank1
  1912  0499  1303               	bcf	3,6	;RP1=0, select bank1
  1913  049A  086A               	movf	_g_char_info_index^(0+128),w
  1914  049B  120A  158A  2265  120A  118A  	fcall	___bmul
  1915  04A0  3E01               	addlw	1
  1916  04A1  3E20               	addlw	(low (_g_char_info| 0))& (0+255)
  1917  04A2  0084               	movwf	4
  1918  04A3  1383               	bcf	3,7	;select IRP bank0
  1919  04A4  0800               	movf	0,w
  1920  04A5  1683               	bsf	3,5	;RP0=1, select bank3
  1921  04A6  1703               	bsf	3,6	;RP1=1, select bank3
  1922  04A7  00D1               	movwf	(??_main+1)^(0+384)
  1923  04A8  3003               	movlw	3
  1924  04A9  00D2               	movwf	(??_main+2)^(0+384)
  1925  04AA  0852               	movf	(??_main+2)^(0+384),w
  1926  04AB  00F0               	movwf	___bmul@multiplicand
  1927  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  1928  04AD  1303               	bcf	3,6	;RP1=0, select bank1
  1929  04AE  086A               	movf	_g_char_info_index^(0+128),w
  1930  04AF  120A  158A  2265  120A  118A  	fcall	___bmul
  1931  04B4  3E20               	addlw	(low (_g_char_info| 0))& (0+255)
  1932  04B5  0084               	movwf	4
  1933  04B6  1383               	bcf	3,7	;select IRP bank0
  1934  04B7  0800               	movf	0,w
  1935  04B8  1683               	bsf	3,5	;RP0=1, select bank3
  1936  04B9  1703               	bsf	3,6	;RP1=1, select bank3
  1937  04BA  0751               	addwf	(??_main+1)^(0+384),w
  1938  04BB  00D3               	movwf	(??_main+3)^(0+384)
  1939  04BC  01D4               	clrf	((??_main+3)^(0+384)+1)
  1940  04BD  0DD4               	rlf	(??_main+4)^(0+384),f
  1941  04BE  0ED3               	swapf	(??_main+3)^(0+384),f
  1942  04BF  0ED4               	swapf	((??_main+3)^(0+384)+1),f
  1943  04C0  30F0               	movlw	240
  1944  04C1  05D4               	andwf	((??_main+3)^(0+384)+1),f
  1945  04C2  0853               	movf	(??_main+3)^(0+384),w
  1946  04C3  390F               	andlw	15
  1947  04C4  04D4               	iorwf	((??_main+3)^(0+384)+1),f
  1948  04C5  30F0               	movlw	240
  1949  04C6  05D3               	andwf	(??_main+3)^(0+384),f
  1950  04C7  3030               	movlw	low (_g_matrix44| (0+32768))
  1951  04C8  00D5               	movwf	(??_main+5)^(0+384)
  1952  04C9  3088               	movlw	high (_g_matrix44| (0+32768))
  1953  04CA  00D6               	movwf	((??_main+5)^(0+384)+1)
  1954  04CB  0853               	movf	(??_main+3)^(0+384),w
  1955  04CC  0755               	addwf	(??_main+5)^(0+384),w
  1956  04CD  00D7               	movwf	(??_main+7)^(0+384)
  1957  04CE  0854               	movf	(??_main+4)^(0+384),w
  1958  04CF  1803               	skipnc
  1959  04D0  0A54               	incf	(??_main+4)^(0+384),w
  1960  04D1  0756               	addwf	(??_main+6)^(0+384),w
  1961  04D2  00D8               	movwf	(??_main+8)^(0+384)
  1962  04D3  0857               	movf	(??_main+7)^(0+384),w
  1963  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  1964  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  1965  04D6  00E5               	movwf	_g_cur_matrix44
  1966  04D7  1683               	bsf	3,5	;RP0=1, select bank3
  1967  04D8  1703               	bsf	3,6	;RP1=1, select bank3
  1968  04D9  0858               	movf	((??_main+7)^(0+384)+1),w
  1969  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  1970  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  1971  04DC  00E6               	movwf	_g_cur_matrix44+1
  1972  04DD                     l4615:	
  1973                           ;teris_16f886.c: 1353: while(1)
  1974                           
  1975                           
  1976                           ;teris_16f886.c: 1354: {
  1977                           ;teris_16f886.c: 1355: hit_res = hit_land(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  1978  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  1979  04DE  1303               	bcf	3,6	;RP1=0, select bank1
  1980  04DF  0869               	movf	_cur_y^(0+128),w
  1981  04E0  1683               	bsf	3,5	;RP0=1, select bank3
  1982  04E1  1703               	bsf	3,6	;RP1=1, select bank3
  1983  04E2  00D0               	movwf	??_main^(0+384)
  1984  04E3  0850               	movf	??_main^(0+384),w
  1985  04E4  00F0               	movwf	hit_land@y
  1986  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  1987  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  1988  04E7  0865               	movf	_g_cur_matrix44,w
  1989  04E8  00F1               	movwf	hit_land@matrix44
  1990  04E9  0866               	movf	_g_cur_matrix44+1,w
  1991  04EA  00F2               	movwf	hit_land@matrix44+1
  1992  04EB  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  1993  04EC  1683               	bsf	3,5	;RP0=1, select bank3
  1994  04ED  1703               	bsf	3,6	;RP1=1, select bank3
  1995  04EE  00D1               	movwf	(??_main+1)^(0+384)
  1996  04EF  0851               	movf	(??_main+1)^(0+384),w
  1997  04F0  00F3               	movwf	hit_land@matrix88
  1998  04F1  1683               	bsf	3,5	;RP0=1, select bank1
  1999  04F2  1303               	bcf	3,6	;RP1=0, select bank1
  2000  04F3  086E               	movf	_cur_x^(0+128),w
  2001  04F4  120A  118A  205C  120A  118A  	fcall	_hit_land
  2002  04F9  1683               	bsf	3,5	;RP0=1, select bank3
  2003  04FA  1703               	bsf	3,6	;RP1=1, select bank3
  2004  04FB  00D2               	movwf	(??_main+2)^(0+384)
  2005  04FC  0852               	movf	(??_main+2)^(0+384),w
  2006  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  2007  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  2008  04FF  00DF               	movwf	main@hit_res
  2009                           
  2010                           ;teris_16f886.c: 1357: merge(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  2011  0500  1683               	bsf	3,5	;RP0=1, select bank1
  2012  0501  1303               	bcf	3,6	;RP1=0, select bank1
  2013  0502  0869               	movf	_cur_y^(0+128),w
  2014  0503  1683               	bsf	3,5	;RP0=1, select bank3
  2015  0504  1703               	bsf	3,6	;RP1=1, select bank3
  2016  0505  00D0               	movwf	??_main^(0+384)
  2017  0506  0850               	movf	??_main^(0+384),w
  2018  0507  00F0               	movwf	merge@y
  2019  0508  1283               	bcf	3,5	;RP0=0, select bank0
  2020  0509  1303               	bcf	3,6	;RP1=0, select bank0
  2021  050A  0865               	movf	_g_cur_matrix44,w
  2022  050B  00F1               	movwf	merge@matrix44
  2023  050C  0866               	movf	_g_cur_matrix44+1,w
  2024  050D  00F2               	movwf	merge@matrix44+1
  2025  050E  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  2026  050F  1683               	bsf	3,5	;RP0=1, select bank3
  2027  0510  1703               	bsf	3,6	;RP1=1, select bank3
  2028  0511  00D1               	movwf	(??_main+1)^(0+384)
  2029  0512  0851               	movf	(??_main+1)^(0+384),w
  2030  0513  00F3               	movwf	merge@matrix88
  2031  0514  1683               	bsf	3,5	;RP0=1, select bank1
  2032  0515  1303               	bcf	3,6	;RP1=0, select bank1
  2033  0516  086E               	movf	_cur_x^(0+128),w
  2034  0517  120A  158A  26A3  120A  118A  	fcall	_merge
  2035                           
  2036                           ;teris_16f886.c: 1358: if(hit_res == 1)
  2037  051C  1283               	bcf	3,5	;RP0=0, select bank0
  2038  051D  1303               	bcf	3,6	;RP1=0, select bank0
  2039  051E  035F               	decf	main@hit_res,w
  2040  051F  1D03               	btfss	3,2
  2041  0520  2D40               	goto	l4627
  2042                           
  2043                           ;teris_16f886.c: 1359: {
  2044                           ;teris_16f886.c: 1360: printf_Screen();
  2045  0521  120A  158A  223B  120A  118A  	fcall	_printf_Screen
  2046                           
  2047                           ;teris_16f886.c: 1364: _delay((unsigned long)((100)*(20000000/4000.0)));
  2048  0526  3003               	movlw	3
  2049  0527  1683               	bsf	3,5	;RP0=1, select bank3
  2050  0528  1703               	bsf	3,6	;RP1=1, select bank3
  2051  0529  00D2               	movwf	(??_main^(0+384)+2)
  2052  052A  308A               	movlw	138
  2053  052B  00D1               	movwf	(??_main^(0+384)+1)
  2054  052C  3056               	movlw	86
  2055  052D  00D0               	movwf	??_main^(0+384)
  2056  052E                     u6527:	
  2057  052E  0BD0               	decfsz	??_main^(0+384),f
  2058  052F  2D2E               	goto	u6527
  2059  0530  0BD1               	decfsz	(??_main^(0+384)+1),f
  2060  0531  2D2E               	goto	u6527
  2061  0532  0BD2               	decfsz	(??_main^(0+384)+2),f
  2062  0533  2D2E               	goto	u6527
  2063  0534  2D35               	nop2
  2064                           
  2065                           ;teris_16f886.c: 1366: delete_matrix(&g_matrix88);
  2066  0535  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  2067  0536  1283               	bcf	3,5	;RP0=0, select bank0
  2068  0537  1303               	bcf	3,6	;RP1=0, select bank0
  2069  0538  00CB               	movwf	delete_matrix@matrix
  2070  0539  3001               	movlw	1
  2071  053A  00CC               	movwf	delete_matrix@matrix+1
  2072  053B  120A  158A  2477  120A  118A  	fcall	_delete_matrix
  2073  0540                     l4627:	
  2074                           
  2075                           ;teris_16f886.c: 1367: }
  2076                           ;teris_16f886.c: 1368: printf_debug_MATRIX88(1, "Main screen", &g_matrix88);
  2077  0540  3004               	movlw	low (STR_11| (0+32768))
  2078  0541  00F6               	movwf	printf_debug_MATRIX88@lable
  2079  0542  308A               	movlw	high (STR_11| (0+32768))
  2080  0543  00F7               	movwf	printf_debug_MATRIX88@lable+1
  2081  0544  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  2082  0545  1683               	bsf	3,5	;RP0=1, select bank3
  2083  0546  1703               	bsf	3,6	;RP1=1, select bank3
  2084  0547  00D0               	movwf	??_main^(0+384)
  2085  0548  0850               	movf	??_main^(0+384),w
  2086  0549  00F8               	movwf	printf_debug_MATRIX88@matrix
  2087  054A  3001               	movlw	1
  2088  054B  120A  118A  2228  120A  118A  	fcall	_printf_debug_MATRIX88
  2089                           
  2090                           ;teris_16f886.c: 1369: printf_Screen();
  2091  0550  120A  158A  223B  120A  118A  	fcall	_printf_Screen
  2092                           
  2093                           ;teris_16f886.c: 1370: if(hit_res == 0)
  2094  0555  1283               	bcf	3,5	;RP0=0, select bank0
  2095  0556  1303               	bcf	3,6	;RP1=0, select bank0
  2096  0557  085F               	movf	main@hit_res,w
  2097  0558  1D03               	btfss	3,2
  2098  0559  2C72               	goto	l4601
  2099                           
  2100                           ;teris_16f886.c: 1371: {
  2101                           ;teris_16f886.c: 1372: clear(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  2102  055A  1683               	bsf	3,5	;RP0=1, select bank1
  2103  055B  1303               	bcf	3,6	;RP1=0, select bank1
  2104  055C  0869               	movf	_cur_y^(0+128),w
  2105  055D  1683               	bsf	3,5	;RP0=1, select bank3
  2106  055E  1703               	bsf	3,6	;RP1=1, select bank3
  2107  055F  00D0               	movwf	??_main^(0+384)
  2108  0560  0850               	movf	??_main^(0+384),w
  2109  0561  00F0               	movwf	clear@y
  2110  0562  1283               	bcf	3,5	;RP0=0, select bank0
  2111  0563  1303               	bcf	3,6	;RP1=0, select bank0
  2112  0564  0865               	movf	_g_cur_matrix44,w
  2113  0565  00F1               	movwf	clear@matrix44
  2114  0566  0866               	movf	_g_cur_matrix44+1,w
  2115  0567  00F2               	movwf	clear@matrix44+1
  2116  0568  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  2117  0569  1683               	bsf	3,5	;RP0=1, select bank3
  2118  056A  1703               	bsf	3,6	;RP1=1, select bank3
  2119  056B  00D1               	movwf	(??_main+1)^(0+384)
  2120  056C  0851               	movf	(??_main+1)^(0+384),w
  2121  056D  00F3               	movwf	clear@matrix88
  2122  056E  1683               	bsf	3,5	;RP0=1, select bank1
  2123  056F  1303               	bcf	3,6	;RP1=0, select bank1
  2124  0570  086E               	movf	_cur_x^(0+128),w
  2125  0571  120A  158A  2654  120A  118A  	fcall	_clear
  2126                           
  2127                           ;teris_16f886.c: 1377: }
  2128                           ;teris_16f886.c: 1381: _delay((unsigned long)((1000)*(20000000/4000.0)));
  2129                           
  2130                           ;teris_16f886.c: 1374: else
  2131                           ;teris_16f886.c: 1375: {
  2132                           ;teris_16f886.c: 1376: break;
  2133                           
  2134                           ;teris_16f886.c: 1373: }
  2135  0576  301A               	movlw	26
  2136  0577  1683               	bsf	3,5	;RP0=1, select bank3
  2137  0578  1703               	bsf	3,6	;RP1=1, select bank3
  2138  0579  00D2               	movwf	(??_main^(0+384)+2)
  2139  057A  305E               	movlw	94
  2140  057B  00D1               	movwf	(??_main^(0+384)+1)
  2141  057C  3086               	movlw	134
  2142  057D  00D0               	movwf	??_main^(0+384)
  2143  057E                     u6537:	
  2144  057E  0BD0               	decfsz	??_main^(0+384),f
  2145  057F  2D7E               	goto	u6537
  2146  0580  0BD1               	decfsz	(??_main^(0+384)+1),f
  2147  0581  2D7E               	goto	u6537
  2148  0582  0BD2               	decfsz	(??_main^(0+384)+2),f
  2149  0583  2D7E               	goto	u6537
  2150  0584  0000               	nop
  2151                           
  2152                           ;teris_16f886.c: 1383: cur_y++;
  2153  0585  3001               	movlw	1
  2154  0586  1683               	bsf	3,5	;RP0=1, select bank3
  2155  0587  1703               	bsf	3,6	;RP1=1, select bank3
  2156  0588  00D0               	movwf	??_main^(0+384)
  2157  0589  0850               	movf	??_main^(0+384),w
  2158  058A  1683               	bsf	3,5	;RP0=1, select bank1
  2159  058B  1303               	bcf	3,6	;RP1=0, select bank1
  2160  058C  07E9               	addwf	_cur_y^(0+128),f
  2161  058D  2CDD               	goto	l4615
  2162  058E                     __end_of_main:	
  2163                           ;teris_16f886.c: 1393: return 0;
  2164                           ;	Return value of _main is never used
  2165                           
  2166                           ;teris_16f886.c: 1384: }
  2167                           ;teris_16f886.c: 1385: }
  2168                           ;teris_16f886.c: 1386: __exit:
  2169                           
  2170                           
  2171                           	psect	text1
  2172  0A50                     __ptext1:	
  2173 ;; *************** function _srand *****************
  2174 ;; Defined at:
  2175 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;  x               2    0[COMMON] unsigned int 
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2189 ;;      Params:         2       0       0       0       0
  2190 ;;      Locals:         0       0       0       0       0
  2191 ;;      Temps:          0       0       0       0       0
  2192 ;;      Totals:         2       0       0       0       0
  2193 ;;Total ram usage:        2 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; This function calls:
  2196 ;;		Nothing
  2197 ;; This function is called by:
  2198 ;;		_main
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           
  2203                           ;psect for function _srand
  2204  0A50                     _srand:	
  2205                           
  2206                           ;incstack = 0
  2207                           ; Regs used in _srand: [wreg]
  2208  0A50  0870               	movf	srand@x,w
  2209  0A51  1283               	bcf	3,5	;RP0=0, select bank0
  2210  0A52  1303               	bcf	3,6	;RP1=0, select bank0
  2211  0A53  00BB               	movwf	_randx
  2212  0A54  0871               	movf	srand@x+1,w
  2213  0A55  00BC               	movwf	_randx+1
  2214  0A56  01BD               	clrf	_randx+2
  2215  0A57  01BE               	clrf	_randx+3
  2216  0A58  0008               	return
  2217  0A59                     __end_of_srand:	
  2218                           
  2219                           	psect	text2
  2220  0228                     __ptext2:	
  2221 ;; *************** function _printf_debug_MATRIX88 *****************
  2222 ;; Defined at:
  2223 ;;		line 546 in file "teris_16f886.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;  enable          1    wreg     unsigned char 
  2226 ;;  lable           2    6[COMMON] PTR const unsigned char 
  2227 ;;		 -> STR_11(12), 
  2228 ;;  matrix          1    8[COMMON] PTR const struct .
  2229 ;;		 -> g_matrix88(64), 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;  enable          1    0[BANK0 ] unsigned char 
  2232 ;;  col             1    2[BANK0 ] unsigned char 
  2233 ;;  row             1    1[BANK0 ] unsigned char 
  2234 ;; Return value:  Size  Location     Type
  2235 ;;                  1    wreg      void 
  2236 ;; Registers used:
  2237 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2238 ;; Tracked objects:
  2239 ;;		On entry : 0/0
  2240 ;;		On exit  : 0/0
  2241 ;;		Unchanged: 0/0
  2242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2243 ;;      Params:         3       0       0       0       0
  2244 ;;      Locals:         0       3       0       0       0
  2245 ;;      Temps:          3       0       0       0       0
  2246 ;;      Totals:         6       3       0       0       0
  2247 ;;Total ram usage:        9 bytes
  2248 ;; Hardware stack levels used:    1
  2249 ;; Hardware stack levels required when called:    3
  2250 ;; This function calls:
  2251 ;;		_debug_line
  2252 ;;		_debug_str
  2253 ;; This function is called by:
  2254 ;;		_main
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           
  2259                           ;psect for function _printf_debug_MATRIX88
  2260  0228                     _printf_debug_MATRIX88:	
  2261                           
  2262                           ;incstack = 0
  2263                           ; Regs used in _printf_debug_MATRIX88: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  2264                           ;printf_debug_MATRIX88@enable stored from wreg
  2265  0228  1283               	bcf	3,5	;RP0=0, select bank0
  2266  0229  1303               	bcf	3,6	;RP1=0, select bank0
  2267  022A  00C4               	movwf	printf_debug_MATRIX88@enable
  2268                           
  2269                           ;teris_16f886.c: 548: if(enable == 1)
  2270  022B  0344               	decf	printf_debug_MATRIX88@enable,w
  2271  022C  1D03               	btfss	3,2
  2272  022D  0008               	return
  2273                           
  2274                           ;teris_16f886.c: 549: {
  2275                           ;teris_16f886.c: 550: if(lable != (0))
  2276  022E  0876               	movf	printf_debug_MATRIX88@lable,w
  2277  022F  0477               	iorwf	printf_debug_MATRIX88@lable+1,w
  2278  0230  1903               	btfsc	3,2
  2279  0231  2A46               	goto	l245
  2280                           
  2281                           ;teris_16f886.c: 551: {
  2282                           ;teris_16f886.c: 552: debug_str(1, lable);
  2283  0232  0876               	movf	printf_debug_MATRIX88@lable,w
  2284  0233  00F3               	movwf	debug_str@str
  2285  0234  0877               	movf	printf_debug_MATRIX88@lable+1,w
  2286  0235  00F4               	movwf	debug_str@str+1
  2287  0236  3001               	movlw	1
  2288  0237  120A  158A  2259  120A  118A  	fcall	_debug_str
  2289                           
  2290                           ;teris_16f886.c: 553: debug_line(1, ":");
  2291  023C  3015               	movlw	low (STR_5| (0+32768))
  2292  023D  00F3               	movwf	debug_line@str
  2293  023E  308A               	movlw	high (STR_5| (0+32768))
  2294  023F  00F4               	movwf	debug_line@str+1
  2295  0240  3001               	movlw	1
  2296  0241  120A  158A  22BF  120A  118A  	fcall	_debug_line
  2297  0246                     l245:	
  2298                           
  2299                           ;teris_16f886.c: 554: }
  2300                           ;teris_16f886.c: 555: debug_line(1, "<<<<<<<<<<<<<<<<<<<<MATRIX88");
  2301  0246  30B0               	movlw	low (STR_6| (0+32768))
  2302  0247  00F3               	movwf	debug_line@str
  2303  0248  3089               	movlw	high (STR_6| (0+32768))
  2304  0249  00F4               	movwf	debug_line@str+1
  2305  024A  3001               	movlw	1
  2306  024B  120A  158A  22BF  120A  118A  	fcall	_debug_line
  2307                           
  2308                           ;teris_16f886.c: 556: for(uint8_t row = 0; row < 8; row++)
  2309  0250  1283               	bcf	3,5	;RP0=0, select bank0
  2310  0251  1303               	bcf	3,6	;RP1=0, select bank0
  2311  0252  01C5               	clrf	printf_debug_MATRIX88@row
  2312  0253  3008               	movlw	8
  2313  0254  0245               	subwf	printf_debug_MATRIX88@row,w
  2314  0255  1803               	btfsc	3,0
  2315  0256  2A9D               	goto	l3185
  2316  0257                     l3163:	
  2317                           
  2318                           ;teris_16f886.c: 557: {
  2319                           ;teris_16f886.c: 558: for(uint8_t col = 0; col < 8; col++)
  2320  0257  01C6               	clrf	printf_debug_MATRIX88@col
  2321  0258  3008               	movlw	8
  2322  0259  0246               	subwf	printf_debug_MATRIX88@col,w
  2323  025A  1803               	btfsc	3,0
  2324  025B  2A89               	goto	l3179
  2325  025C                     l3169:	
  2326                           
  2327                           ;teris_16f886.c: 559: {
  2328                           ;teris_16f886.c: 560: if(matrix->data[row][col] == 1)
  2329  025C  0845               	movf	printf_debug_MATRIX88@row,w
  2330  025D  00F9               	movwf	??_printf_debug_MATRIX88
  2331  025E  3002               	movlw	2
  2332  025F                     u3935:	
  2333  025F  1003               	clrc
  2334  0260  0DF9               	rlf	??_printf_debug_MATRIX88,f
  2335  0261  3EFF               	addlw	-1
  2336  0262  1D03               	skipz
  2337  0263  2A5F               	goto	u3935
  2338  0264  1003               	clrc
  2339  0265  0D79               	rlf	??_printf_debug_MATRIX88,w
  2340  0266  0778               	addwf	printf_debug_MATRIX88@matrix,w
  2341  0267  00FA               	movwf	??_printf_debug_MATRIX88+1
  2342  0268  0846               	movf	printf_debug_MATRIX88@col,w
  2343  0269  077A               	addwf	??_printf_debug_MATRIX88+1,w
  2344  026A  00FB               	movwf	??_printf_debug_MATRIX88+2
  2345  026B  087B               	movf	??_printf_debug_MATRIX88+2,w
  2346  026C  0084               	movwf	4
  2347  026D  1783               	bsf	3,7	;select IRP bank2
  2348  026E  0300               	decf	0,w
  2349  026F  1D03               	btfss	3,2
  2350  0270  2A75               	goto	l3173
  2351                           
  2352                           ;teris_16f886.c: 561: {
  2353                           ;teris_16f886.c: 562: debug_str(1, "*");
  2354  0271  3013               	movlw	low (STR_7| (0+32768))
  2355  0272  00F3               	movwf	debug_str@str
  2356  0273  308A               	movlw	high (STR_7| (0+32768))
  2357  0274  2A78               	goto	L1
  2358  0275                     l3173:	
  2359                           ;teris_16f886.c: 563: }
  2360                           
  2361                           
  2362                           ;teris_16f886.c: 564: else
  2363                           ;teris_16f886.c: 565: {
  2364                           ;teris_16f886.c: 566: debug_str(1, "_");
  2365  0275  3017               	movlw	low (STR_8| (0+32768))
  2366  0276  00F3               	movwf	debug_str@str
  2367  0277  308A               	movlw	high (STR_8| (0+32768))
  2368  0278                     L1:	
  2369  0278  00F4               	movwf	debug_str@str+1
  2370  0279  3001               	movlw	1
  2371  027A  120A  158A  2259  120A  118A  	fcall	_debug_str
  2372  027F  3001               	movlw	1
  2373  0280  00F9               	movwf	??_printf_debug_MATRIX88
  2374  0281  0879               	movf	??_printf_debug_MATRIX88,w
  2375  0282  1283               	bcf	3,5	;RP0=0, select bank0
  2376  0283  1303               	bcf	3,6	;RP1=0, select bank0
  2377  0284  07C6               	addwf	printf_debug_MATRIX88@col,f
  2378  0285  3008               	movlw	8
  2379  0286  0246               	subwf	printf_debug_MATRIX88@col,w
  2380  0287  1C03               	skipc
  2381  0288  2A5C               	goto	l3169
  2382  0289                     l3179:	
  2383                           
  2384                           ;teris_16f886.c: 567: }
  2385                           ;teris_16f886.c: 568: }
  2386                           ;teris_16f886.c: 569: debug_line(1, "");
  2387  0289  3012               	movlw	low ((STR_1+2)| (0+32768))
  2388  028A  00F3               	movwf	debug_line@str
  2389  028B  308A               	movlw	high ((STR_1+2)| (0+32768))
  2390  028C  00F4               	movwf	debug_line@str+1
  2391  028D  3001               	movlw	1
  2392  028E  120A  158A  22BF  120A  118A  	fcall	_debug_line
  2393  0293  3001               	movlw	1
  2394  0294  00F9               	movwf	??_printf_debug_MATRIX88
  2395  0295  0879               	movf	??_printf_debug_MATRIX88,w
  2396  0296  1283               	bcf	3,5	;RP0=0, select bank0
  2397  0297  1303               	bcf	3,6	;RP1=0, select bank0
  2398  0298  07C5               	addwf	printf_debug_MATRIX88@row,f
  2399  0299  3008               	movlw	8
  2400  029A  0245               	subwf	printf_debug_MATRIX88@row,w
  2401  029B  1C03               	skipc
  2402  029C  2A57               	goto	l3163
  2403  029D                     l3185:	
  2404                           
  2405                           ;teris_16f886.c: 570: }
  2406                           ;teris_16f886.c: 571: debug_line(1, ">>>>>>>>>>>>>>>>>>>>");
  2407  029D  30CD               	movlw	low (STR_10| (0+32768))
  2408  029E  00F3               	movwf	debug_line@str
  2409  029F  3089               	movlw	high (STR_10| (0+32768))
  2410  02A0  00F4               	movwf	debug_line@str+1
  2411  02A1  3001               	movlw	1
  2412  02A2  120A  158A  22BF   	fcall	_debug_line
  2413  02A5  0008               	return
  2414  02A6                     __end_of_printf_debug_MATRIX88:	
  2415                           
  2416                           	psect	text3
  2417  0A59                     __ptext3:	
  2418 ;; *************** function _debug_str *****************
  2419 ;; Defined at:
  2420 ;;		line 288 in file "teris_16f886.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;  enable          1    wreg     unsigned char 
  2423 ;;  str             2    3[COMMON] PTR const unsigned char 
  2424 ;;		 -> STR_11(12), STR_8(2), STR_7(2), 
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  enable          1    5[COMMON] unsigned char 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      void 
  2429 ;; Registers used:
  2430 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2436 ;;      Params:         2       0       0       0       0
  2437 ;;      Locals:         1       0       0       0       0
  2438 ;;      Temps:          0       0       0       0       0
  2439 ;;      Totals:         3       0       0       0       0
  2440 ;;Total ram usage:        3 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    2
  2443 ;; This function calls:
  2444 ;;		_USARTWriteString
  2445 ;; This function is called by:
  2446 ;;		_printf_debug_MATRIX88
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           
  2451                           ;psect for function _debug_str
  2452  0A59                     _debug_str:	
  2453                           
  2454                           ;incstack = 0
  2455                           ; Regs used in _debug_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2456                           ;debug_str@enable stored from wreg
  2457  0A59  00F5               	movwf	debug_str@enable
  2458                           
  2459                           ;teris_16f886.c: 290: if(enable == 1)
  2460  0A5A  0375               	decf	debug_str@enable,w
  2461  0A5B  1D03               	btfss	3,2
  2462  0A5C  0008               	return
  2463                           
  2464                           ;teris_16f886.c: 291: {
  2465                           ;teris_16f886.c: 295: USARTWriteString(str);
  2466  0A5D  0873               	movf	debug_str@str,w
  2467  0A5E  00F1               	movwf	USARTWriteString@str
  2468  0A5F  0874               	movf	debug_str@str+1,w
  2469  0A60  00F2               	movwf	USARTWriteString@str+1
  2470  0A61  120A  158A  2385   	fcall	_USARTWriteString
  2471  0A64  0008               	return
  2472  0A65                     __end_of_debug_str:	
  2473                           
  2474                           	psect	text4
  2475  0ABF                     __ptext4:	
  2476 ;; *************** function _debug_line *****************
  2477 ;; Defined at:
  2478 ;;		line 300 in file "teris_16f886.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;  enable          1    wreg     unsigned char 
  2481 ;;  str             2    3[COMMON] PTR const unsigned char 
  2482 ;;		 -> STR_10(21), STR_9(1), STR_6(29), STR_5(2), 
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  enable          1    5[COMMON] unsigned char 
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  1    wreg      void 
  2487 ;; Registers used:
  2488 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2494 ;;      Params:         2       0       0       0       0
  2495 ;;      Locals:         1       0       0       0       0
  2496 ;;      Temps:          0       0       0       0       0
  2497 ;;      Totals:         3       0       0       0       0
  2498 ;;Total ram usage:        3 bytes
  2499 ;; Hardware stack levels used:    1
  2500 ;; Hardware stack levels required when called:    2
  2501 ;; This function calls:
  2502 ;;		_USARTWriteString
  2503 ;; This function is called by:
  2504 ;;		_printf_debug_MATRIX88
  2505 ;; This function uses a non-reentrant model
  2506 ;;
  2507                           
  2508                           
  2509                           ;psect for function _debug_line
  2510  0ABF                     _debug_line:	
  2511                           
  2512                           ;incstack = 0
  2513                           ; Regs used in _debug_line: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2514                           ;debug_line@enable stored from wreg
  2515  0ABF  00F5               	movwf	debug_line@enable
  2516                           
  2517                           ;teris_16f886.c: 302: if(enable == 1)
  2518  0AC0  0375               	decf	debug_line@enable,w
  2519  0AC1  1D03               	btfss	3,2
  2520  0AC2  0008               	return
  2521                           
  2522                           ;teris_16f886.c: 303: {
  2523                           ;teris_16f886.c: 308: USARTWriteString(str);
  2524  0AC3  0873               	movf	debug_line@str,w
  2525  0AC4  00F1               	movwf	USARTWriteString@str
  2526  0AC5  0874               	movf	debug_line@str+1,w
  2527  0AC6  00F2               	movwf	USARTWriteString@str+1
  2528  0AC7  120A  158A  2385  120A  158A  	fcall	_USARTWriteString
  2529                           
  2530                           ;teris_16f886.c: 309: USARTWriteString("\r\n");
  2531  0ACC  3010               	movlw	low (STR_1| (0+32768))
  2532  0ACD  00F1               	movwf	USARTWriteString@str
  2533  0ACE  308A               	movlw	high (STR_1| (0+32768))
  2534  0ACF  00F2               	movwf	USARTWriteString@str+1
  2535  0AD0  120A  158A  2385   	fcall	_USARTWriteString
  2536  0AD3  0008               	return
  2537  0AD4                     __end_of_debug_line:	
  2538                           
  2539                           	psect	text5
  2540  0B85                     __ptext5:	
  2541 ;; *************** function _USARTWriteString *****************
  2542 ;; Defined at:
  2543 ;;		line 76 in file "usart_pic16.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;  str             2    1[COMMON] PTR const unsigned char 
  2546 ;;		 -> STR_11(12), STR_10(21), STR_9(1), STR_8(2), 
  2547 ;;		 -> STR_7(2), STR_6(29), STR_5(2), STR_4(3), 
  2548 ;;		 -> STR_3(3), STR_2(3), g_debug(32), STR_1(3), 
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;		None
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2560 ;;      Params:         2       0       0       0       0
  2561 ;;      Locals:         0       0       0       0       0
  2562 ;;      Temps:          0       0       0       0       0
  2563 ;;      Totals:         2       0       0       0       0
  2564 ;;Total ram usage:        2 bytes
  2565 ;; Hardware stack levels used:    1
  2566 ;; Hardware stack levels required when called:    1
  2567 ;; This function calls:
  2568 ;;		_USARTWriteChar
  2569 ;; This function is called by:
  2570 ;;		_debug_str
  2571 ;;		_debug_line
  2572 ;;		_USARTWriteLine
  2573 ;;		_debug_int1
  2574 ;;		_debug_int2
  2575 ;;		_debug_int3
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578                           
  2579                           
  2580                           ;psect for function _USARTWriteString
  2581  0B85                     _USARTWriteString:	
  2582  0B85                     l2535:	
  2583                           ;usart_pic16.c: 77: while (*str != '\0') {
  2584                           
  2585                           ;incstack = 0
  2586                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2587                           
  2588  0B85  0872               	movf	USARTWriteString@str+1,w
  2589  0B86  1283               	bcf	3,5	;RP0=0, select bank0
  2590  0B87  1303               	bcf	3,6	;RP1=0, select bank0
  2591  0B88  00FF               	movwf	127
  2592  0B89  0871               	movf	USARTWriteString@str,w
  2593  0B8A  0084               	movwf	4
  2594  0B8B  120A  158A  2000  120A  158A  	fcall	stringtab
  2595  0B90  3A00               	xorlw	0
  2596  0B91  1903               	btfsc	3,2
  2597  0B92  0008               	return
  2598                           
  2599                           ;usart_pic16.c: 78: USARTWriteChar(*str);
  2600  0B93  0872               	movf	USARTWriteString@str+1,w
  2601  0B94  1283               	bcf	3,5	;RP0=0, select bank0
  2602  0B95  1303               	bcf	3,6	;RP1=0, select bank0
  2603  0B96  00FF               	movwf	127
  2604  0B97  0871               	movf	USARTWriteString@str,w
  2605  0B98  0084               	movwf	4
  2606  0B99  120A  158A  2000  120A  158A  	fcall	stringtab
  2607  0B9E  120A  158A  2240  120A  158A  	fcall	_USARTWriteChar
  2608                           
  2609                           ;usart_pic16.c: 79: str++;
  2610  0BA3  3001               	movlw	1
  2611  0BA4  07F1               	addwf	USARTWriteString@str,f
  2612  0BA5  1803               	skipnc
  2613  0BA6  0AF2               	incf	USARTWriteString@str+1,f
  2614  0BA7  2B85               	goto	l2535
  2615  0BA8                     __end_of_USARTWriteString:	
  2616                           
  2617                           	psect	text6
  2618  0A40                     __ptext6:	
  2619 ;; *************** function _USARTWriteChar *****************
  2620 ;; Defined at:
  2621 ;;		line 70 in file "usart_pic16.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;  ch              1    wreg     unsigned char 
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;  ch              1    0[COMMON] unsigned char 
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  1    wreg      void 
  2628 ;; Registers used:
  2629 ;;		wreg
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2635 ;;      Params:         0       0       0       0       0
  2636 ;;      Locals:         1       0       0       0       0
  2637 ;;      Temps:          0       0       0       0       0
  2638 ;;      Totals:         1       0       0       0       0
  2639 ;;Total ram usage:        1 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; This function calls:
  2642 ;;		Nothing
  2643 ;; This function is called by:
  2644 ;;		_USARTWriteString
  2645 ;;		_USARTWriteLine
  2646 ;;		_USARTWriteInt
  2647 ;;		_USARTGotoNewLine
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           
  2652                           ;psect for function _USARTWriteChar
  2653  0A40                     _USARTWriteChar:	
  2654                           
  2655                           ;incstack = 0
  2656                           ; Regs used in _USARTWriteChar: [wreg]
  2657                           ;USARTWriteChar@ch stored from wreg
  2658  0A40  00F0               	movwf	USARTWriteChar@ch
  2659  0A41                     l36:	
  2660                           ;usart_pic16.c: 71: while (!PIR1bits.TXIF);
  2661                           
  2662  0A41  1283               	bcf	3,5	;RP0=0, select bank0
  2663  0A42  1303               	bcf	3,6	;RP1=0, select bank0
  2664  0A43  1E0C               	btfss	12,4	;volatile
  2665  0A44  2A41               	goto	l36
  2666                           
  2667                           ;usart_pic16.c: 73: TXREG = ch;
  2668  0A45  0870               	movf	USARTWriteChar@ch,w
  2669  0A46  0099               	movwf	25	;volatile
  2670  0A47  0008               	return
  2671  0A48                     __end_of_USARTWriteChar:	
  2672                           
  2673                           	psect	text7
  2674  0EA3                     __ptext7:	
  2675 ;; *************** function _merge *****************
  2676 ;; Defined at:
  2677 ;;		line 818 in file "teris_16f886.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;  x               1    wreg     char 
  2680 ;;  y               1    0[COMMON] char 
  2681 ;;  matrix44        2    1[COMMON] PTR const struct .
  2682 ;;		 -> NULL(0), g_matrix44(384), 
  2683 ;;  matrix88        1    3[COMMON] PTR struct .
  2684 ;;		 -> g_matrix88(64), 
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  x               1    8[COMMON] char 
  2687 ;;  col             1   10[COMMON] unsigned char 
  2688 ;;  row             1    9[COMMON] unsigned char 
  2689 ;; Return value:  Size  Location     Type
  2690 ;;                  1    wreg      void 
  2691 ;; Registers used:
  2692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2693 ;; Tracked objects:
  2694 ;;		On entry : 0/0
  2695 ;;		On exit  : 0/0
  2696 ;;		Unchanged: 0/0
  2697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2698 ;;      Params:         4       0       0       0       0
  2699 ;;      Locals:         3       0       0       0       0
  2700 ;;      Temps:          4       0       0       0       0
  2701 ;;      Totals:        11       0       0       0       0
  2702 ;;Total ram usage:       11 bytes
  2703 ;; Hardware stack levels used:    2
  2704 ;; This function calls:
  2705 ;;		Nothing
  2706 ;; This function is called by:
  2707 ;;		_main
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           
  2712                           ;psect for function _merge
  2713  0EA3                     _merge:	
  2714                           
  2715                           ;incstack = 0
  2716                           ; Regs used in _merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2717                           ;merge@x stored from wreg
  2718  0EA3  00F8               	movwf	merge@x
  2719                           
  2720                           ;teris_16f886.c: 820: for(uint8_t row = 0; row < 4; row++)
  2721  0EA4  01F9               	clrf	merge@row
  2722  0EA5                     L2:	
  2723  0EA5  3004               	movlw	4
  2724  0EA6  0279               	subwf	merge@row,w
  2725  0EA7  1803               	btfsc	3,0
  2726  0EA8  0008               	return
  2727                           
  2728                           ;teris_16f886.c: 821: {
  2729                           ;teris_16f886.c: 822: for(uint8_t col = 0; col < 4; col++)
  2730  0EA9  01FA               	clrf	merge@col
  2731  0EAA  3004               	movlw	4
  2732  0EAB  027A               	subwf	merge@col,w
  2733  0EAC  1803               	btfsc	3,0
  2734  0EAD  2EEE               	goto	l3271
  2735  0EAE                     l3263:	
  2736                           
  2737                           ;teris_16f886.c: 823: {
  2738                           ;teris_16f886.c: 824: if(matrix44->data[row][col] == 1)
  2739  0EAE  0879               	movf	merge@row,w
  2740  0EAF  00F4               	movwf	??_merge
  2741  0EB0  01F5               	clrf	??_merge+1
  2742  0EB1  1003               	clrc
  2743  0EB2  0DF4               	rlf	??_merge,f
  2744  0EB3  0DF5               	rlf	??_merge+1,f
  2745  0EB4  1003               	clrc
  2746  0EB5  0DF4               	rlf	??_merge,f
  2747  0EB6  0DF5               	rlf	??_merge+1,f
  2748  0EB7  0874               	movf	??_merge,w
  2749  0EB8  0771               	addwf	merge@matrix44,w
  2750  0EB9  00F6               	movwf	??_merge+2
  2751  0EBA  0875               	movf	??_merge+1,w
  2752  0EBB  1803               	skipnc
  2753  0EBC  0A75               	incf	??_merge+1,w
  2754  0EBD  0772               	addwf	merge@matrix44+1,w
  2755  0EBE  00F7               	movwf	??_merge+3
  2756  0EBF  087A               	movf	merge@col,w
  2757  0EC0  0776               	addwf	??_merge+2,w
  2758  0EC1  0084               	movwf	4
  2759  0EC2  0877               	movf	??_merge+3,w
  2760  0EC3  1803               	skipnc
  2761  0EC4  0A77               	incf	??_merge+3,w
  2762  0EC5  1283               	bcf	3,5	;RP0=0, select bank0
  2763  0EC6  1303               	bcf	3,6	;RP1=0, select bank0
  2764  0EC7  00FF               	movwf	127
  2765  0EC8  120A  158A  2000  120A  158A  	fcall	stringtab
  2766  0ECD  3A01               	xorlw	1
  2767  0ECE  1D03               	skipz
  2768  0ECF  2EE6               	goto	l3267
  2769                           
  2770                           ;teris_16f886.c: 825: {
  2771                           ;teris_16f886.c: 826: matrix88->data[y + row][x + col] = 1;
  2772  0ED0  087A               	movf	merge@col,w
  2773  0ED1  0778               	addwf	merge@x,w
  2774  0ED2  0773               	addwf	merge@matrix88,w
  2775  0ED3  00F4               	movwf	??_merge
  2776  0ED4  0879               	movf	merge@row,w
  2777  0ED5  0770               	addwf	merge@y,w
  2778  0ED6  00F5               	movwf	??_merge+1
  2779  0ED7  3002               	movlw	2
  2780  0ED8                     u4155:	
  2781  0ED8  1003               	clrc
  2782  0ED9  0DF5               	rlf	??_merge+1,f
  2783  0EDA  3EFF               	addlw	-1
  2784  0EDB  1D03               	skipz
  2785  0EDC  2ED8               	goto	u4155
  2786  0EDD  1003               	clrc
  2787  0EDE  0D75               	rlf	??_merge+1,w
  2788  0EDF  0774               	addwf	??_merge,w
  2789  0EE0  00F6               	movwf	??_merge+2
  2790  0EE1  0876               	movf	??_merge+2,w
  2791  0EE2  0084               	movwf	4
  2792  0EE3  1783               	bsf	3,7	;select IRP bank2
  2793  0EE4  0180               	clrf	0
  2794  0EE5  0A80               	incf	0,f
  2795  0EE6                     l3267:	
  2796  0EE6  3001               	movlw	1
  2797  0EE7  00F4               	movwf	??_merge
  2798  0EE8  0874               	movf	??_merge,w
  2799  0EE9  07FA               	addwf	merge@col,f
  2800  0EEA  3004               	movlw	4
  2801  0EEB  027A               	subwf	merge@col,w
  2802  0EEC  1C03               	skipc
  2803  0EED  2EAE               	goto	l3263
  2804  0EEE                     l3271:	
  2805  0EEE  3001               	movlw	1
  2806  0EEF  00F4               	movwf	??_merge
  2807  0EF0  0874               	movf	??_merge,w
  2808  0EF1  07F9               	addwf	merge@row,f
  2809  0EF2  2EA5               	goto	L2
  2810  0EF3                     __end_of_merge:	
  2811                           
  2812                           	psect	text8
  2813  0EF3                     __ptext8:	
  2814 ;; *************** function _max7219_init1 *****************
  2815 ;; Defined at:
  2816 ;;		line 448 in file "teris_16f886.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;		None
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;		None
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg, status,2, status,0, pclath, cstack
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2830 ;;      Params:         0       0       0       0       0
  2831 ;;      Locals:         0       0       0       0       0
  2832 ;;      Temps:          0       0       0       0       0
  2833 ;;      Totals:         0       0       0       0       0
  2834 ;;Total ram usage:        0 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    1
  2837 ;; This function calls:
  2838 ;;		_SPI1_write
  2839 ;; This function is called by:
  2840 ;;		_main
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           
  2845                           ;psect for function _max7219_init1
  2846  0EF3                     _max7219_init1:	
  2847                           
  2848                           ;teris_16f886.c: 450: RA2 = 0;
  2849                           
  2850                           ;incstack = 0
  2851                           ; Regs used in _max7219_init1: [wreg+status,2+status,0+pclath+cstack]
  2852  0EF3  1283               	bcf	3,5	;RP0=0, select bank0
  2853  0EF4  1303               	bcf	3,6	;RP1=0, select bank0
  2854  0EF5  1105               	bcf	5,2	;volatile
  2855                           
  2856                           ;teris_16f886.c: 451: SPI1_write(0x09);
  2857  0EF6  3009               	movlw	9
  2858  0EF7  120A  158A  23F3  120A  158A  	fcall	_SPI1_write
  2859                           
  2860                           ;teris_16f886.c: 452: SPI1_write(0x00);
  2861  0EFC  3000               	movlw	0
  2862  0EFD  120A  158A  23F3  120A  158A  	fcall	_SPI1_write
  2863                           
  2864                           ;teris_16f886.c: 453: RA2 = 1;
  2865  0F02  1283               	bcf	3,5	;RP0=0, select bank0
  2866  0F03  1303               	bcf	3,6	;RP1=0, select bank0
  2867  0F04  1505               	bsf	5,2	;volatile
  2868                           
  2869                           ;teris_16f886.c: 455: RA2 = 0;
  2870  0F05  1105               	bcf	5,2	;volatile
  2871                           
  2872                           ;teris_16f886.c: 456: SPI1_write(0x0A);
  2873  0F06  300A               	movlw	10
  2874  0F07  120A  158A  23F3  120A  158A  	fcall	_SPI1_write
  2875                           
  2876                           ;teris_16f886.c: 457: SPI1_write(0x0F);
  2877  0F0C  300F               	movlw	15
  2878  0F0D  120A  158A  23F3  120A  158A  	fcall	_SPI1_write
  2879                           
  2880                           ;teris_16f886.c: 458: RA2 = 1;
  2881  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  2882  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  2883  0F14  1505               	bsf	5,2	;volatile
  2884                           
  2885                           ;teris_16f886.c: 460: RA2 = 0;
  2886  0F15  1105               	bcf	5,2	;volatile
  2887                           
  2888                           ;teris_16f886.c: 461: SPI1_write(0x0B);
  2889  0F16  300B               	movlw	11
  2890  0F17  120A  158A  23F3  120A  158A  	fcall	_SPI1_write
  2891                           
  2892                           ;teris_16f886.c: 462: SPI1_write(0x07);
  2893  0F1C  3007               	movlw	7
  2894  0F1D  120A  158A  23F3  120A  158A  	fcall	_SPI1_write
  2895                           
  2896                           ;teris_16f886.c: 463: RA2 = 1;
  2897  0F22  1283               	bcf	3,5	;RP0=0, select bank0
  2898  0F23  1303               	bcf	3,6	;RP1=0, select bank0
  2899  0F24  1505               	bsf	5,2	;volatile
  2900                           
  2901                           ;teris_16f886.c: 465: RA2 = 0;
  2902  0F25  1105               	bcf	5,2	;volatile
  2903                           
  2904                           ;teris_16f886.c: 466: SPI1_write(0x0C);
  2905  0F26  300C               	movlw	12
  2906  0F27  120A  158A  23F3  120A  158A  	fcall	_SPI1_write
  2907                           
  2908                           ;teris_16f886.c: 467: SPI1_write(0x01);
  2909  0F2C  3001               	movlw	1
  2910  0F2D  120A  158A  23F3  120A  158A  	fcall	_SPI1_write
  2911                           
  2912                           ;teris_16f886.c: 468: RA2 = 1;
  2913  0F32  1283               	bcf	3,5	;RP0=0, select bank0
  2914  0F33  1303               	bcf	3,6	;RP1=0, select bank0
  2915  0F34  1505               	bsf	5,2	;volatile
  2916                           
  2917                           ;teris_16f886.c: 470: RA2 = 0;
  2918  0F35  1105               	bcf	5,2	;volatile
  2919                           
  2920                           ;teris_16f886.c: 471: SPI1_write(0x00);
  2921  0F36  3000               	movlw	0
  2922  0F37  120A  158A  23F3  120A  158A  	fcall	_SPI1_write
  2923                           
  2924                           ;teris_16f886.c: 472: SPI1_write(0xFF);
  2925  0F3C  30FF               	movlw	255
  2926  0F3D  120A  158A  23F3   	fcall	_SPI1_write
  2927                           
  2928                           ;teris_16f886.c: 473: RA2 = 1;
  2929  0F40  1283               	bcf	3,5	;RP0=0, select bank0
  2930  0F41  1303               	bcf	3,6	;RP1=0, select bank0
  2931  0F42  1505               	bsf	5,2	;volatile
  2932  0F43  0008               	return
  2933  0F44                     __end_of_max7219_init1:	
  2934                           
  2935                           	psect	text9
  2936  005C                     __ptext9:	
  2937 ;; *************** function _hit_land *****************
  2938 ;; Defined at:
  2939 ;;		line 680 in file "teris_16f886.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  x               1    wreg     char 
  2942 ;;  y               1    0[COMMON] char 
  2943 ;;  matrix44        2    1[COMMON] PTR const struct .
  2944 ;;		 -> NULL(0), g_matrix44(384), 
  2945 ;;  matrix88        1    3[COMMON] PTR const struct .
  2946 ;;		 -> g_matrix88(64), 
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;  x               1    8[COMMON] char 
  2949 ;;  col             1    9[COMMON] char 
  2950 ;;  row             1   10[COMMON] char 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  1    wreg      unsigned char 
  2953 ;; Registers used:
  2954 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2960 ;;      Params:         4       0       0       0       0
  2961 ;;      Locals:         3       0       0       0       0
  2962 ;;      Temps:          4       0       0       0       0
  2963 ;;      Totals:        11       0       0       0       0
  2964 ;;Total ram usage:       11 bytes
  2965 ;; Hardware stack levels used:    2
  2966 ;; This function calls:
  2967 ;;		Nothing
  2968 ;; This function is called by:
  2969 ;;		_main
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           
  2974                           ;psect for function _hit_land
  2975  005C                     _hit_land:	
  2976                           
  2977                           ;incstack = 0
  2978                           ; Regs used in _hit_land: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2979                           ;hit_land@x stored from wreg
  2980  005C  00F8               	movwf	hit_land@x
  2981                           
  2982                           ;teris_16f886.c: 684: for(int8_t row = 4 - 1; row >= 0; row--)
  2983  005D  3003               	movlw	3
  2984  005E  00F4               	movwf	??_hit_land
  2985  005F  0874               	movf	??_hit_land,w
  2986  0060  00FA               	movwf	hit_land@row
  2987  0061  1BFA               	btfsc	hit_land@row,7
  2988  0062  28CB               	goto	l3223
  2989  0063                     l3195:	
  2990                           
  2991                           ;teris_16f886.c: 685: {
  2992                           ;teris_16f886.c: 686: for(int8_t col = 0; col < 4; col++)
  2993  0063  01F9               	clrf	hit_land@col
  2994  0064  0879               	movf	hit_land@col,w
  2995  0065  3A80               	xorlw	128
  2996  0066  3E7C               	addlw	-132
  2997  0067  1803               	btfsc	3,0
  2998  0068  28C5               	goto	l3219
  2999  0069                     l3201:	
  3000                           
  3001                           ;teris_16f886.c: 687: {
  3002                           ;teris_16f886.c: 688: if(matrix44->data[row][col] == 1)
  3003  0069  087A               	movf	hit_land@row,w
  3004  006A  00F4               	movwf	??_hit_land
  3005  006B  01F5               	clrf	??_hit_land+1
  3006  006C  1003               	clrc
  3007  006D  0DF4               	rlf	??_hit_land,f
  3008  006E  0DF5               	rlf	??_hit_land+1,f
  3009  006F  1003               	clrc
  3010  0070  0DF4               	rlf	??_hit_land,f
  3011  0071  0DF5               	rlf	??_hit_land+1,f
  3012  0072  0874               	movf	??_hit_land,w
  3013  0073  0771               	addwf	hit_land@matrix44,w
  3014  0074  00F6               	movwf	??_hit_land+2
  3015  0075  0875               	movf	??_hit_land+1,w
  3016  0076  1803               	skipnc
  3017  0077  0A75               	incf	??_hit_land+1,w
  3018  0078  0772               	addwf	hit_land@matrix44+1,w
  3019  0079  00F7               	movwf	??_hit_land+3
  3020  007A  0879               	movf	hit_land@col,w
  3021  007B  0776               	addwf	??_hit_land+2,w
  3022  007C  0084               	movwf	4
  3023  007D  0877               	movf	??_hit_land+3,w
  3024  007E  1803               	skipnc
  3025  007F  0A77               	incf	??_hit_land+3,w
  3026  0080  1283               	bcf	3,5	;RP0=0, select bank0
  3027  0081  1303               	bcf	3,6	;RP1=0, select bank0
  3028  0082  00FF               	movwf	127
  3029  0083  120A  158A  2000  120A  118A  	fcall	stringtab
  3030  0088  3A01               	xorlw	1
  3031  0089  1D03               	skipz
  3032  008A  28BC               	goto	l3215
  3033                           
  3034                           ;teris_16f886.c: 689: {
  3035                           ;teris_16f886.c: 690: if((y + row) >= (8 - 1))
  3036  008B  0870               	movf	hit_land@y,w
  3037  008C  077A               	addwf	hit_land@row,w
  3038  008D  00F4               	movwf	??_hit_land
  3039  008E  01F5               	clrf	??_hit_land+1
  3040  008F  1803               	skipnc
  3041  0090  0AF5               	incf	??_hit_land+1,f
  3042  0091  1BF0               	btfsc	hit_land@y,7
  3043  0092  03F5               	decf	??_hit_land+1,f
  3044  0093  1BFA               	btfsc	hit_land@row,7
  3045  0094  03F5               	decf	??_hit_land+1,f
  3046  0095  0875               	movf	??_hit_land+1,w
  3047  0096  3A80               	xorlw	128
  3048  0097  00FF               	movwf	127
  3049  0098  3080               	movlw	128
  3050  0099  027F               	subwf	127,w
  3051  009A  1D03               	skipz
  3052  009B  289E               	goto	u4015
  3053  009C  3007               	movlw	7
  3054  009D  0274               	subwf	??_hit_land,w
  3055  009E                     u4015:	
  3056  009E  1C03               	skipc
  3057  009F  28A2               	goto	l3209
  3058                           
  3059                           ;teris_16f886.c: 691: {
  3060                           ;teris_16f886.c: 693: return 1;
  3061  00A0  3001               	movlw	1
  3062  00A1  0008               	return
  3063  00A2                     l3209:	
  3064                           
  3065                           ;teris_16f886.c: 694: }
  3066                           ;teris_16f886.c: 696: if(matrix88->data[y + row + 1][x + col] == 1)
  3067  00A2  0879               	movf	hit_land@col,w
  3068  00A3  0778               	addwf	hit_land@x,w
  3069  00A4  0773               	addwf	hit_land@matrix88,w
  3070  00A5  00F4               	movwf	??_hit_land
  3071  00A6  087A               	movf	hit_land@row,w
  3072  00A7  0770               	addwf	hit_land@y,w
  3073  00A8  00F5               	movwf	??_hit_land+1
  3074  00A9  3002               	movlw	2
  3075  00AA                     u4025:	
  3076  00AA  1003               	clrc
  3077  00AB  0DF5               	rlf	??_hit_land+1,f
  3078  00AC  3EFF               	addlw	-1
  3079  00AD  1D03               	skipz
  3080  00AE  28AA               	goto	u4025
  3081  00AF  1003               	clrc
  3082  00B0  0D75               	rlf	??_hit_land+1,w
  3083  00B1  3E08               	addlw	8
  3084  00B2  0774               	addwf	??_hit_land,w
  3085  00B3  00F6               	movwf	??_hit_land+2
  3086  00B4  0876               	movf	??_hit_land+2,w
  3087  00B5  0084               	movwf	4
  3088  00B6  1783               	bsf	3,7	;select IRP bank2
  3089  00B7  0300               	decf	0,w
  3090  00B8  1D03               	btfss	3,2
  3091  00B9  28BC               	goto	l3215
  3092                           
  3093                           ;teris_16f886.c: 697: {
  3094                           ;teris_16f886.c: 699: return 1;
  3095  00BA  3001               	movlw	1
  3096  00BB  0008               	return
  3097  00BC                     l3215:	
  3098  00BC  3001               	movlw	1
  3099  00BD  00F4               	movwf	??_hit_land
  3100  00BE  0874               	movf	??_hit_land,w
  3101  00BF  07F9               	addwf	hit_land@col,f
  3102  00C0  0879               	movf	hit_land@col,w
  3103  00C1  3A80               	xorlw	128
  3104  00C2  3E7C               	addlw	-132
  3105  00C3  1C03               	skipc
  3106  00C4  2869               	goto	l3201
  3107  00C5                     l3219:	
  3108  00C5  30FF               	movlw	255
  3109  00C6  00F4               	movwf	??_hit_land
  3110  00C7  0874               	movf	??_hit_land,w
  3111  00C8  07FA               	addwf	hit_land@row,f
  3112  00C9  1FFA               	btfss	hit_land@row,7
  3113  00CA  2863               	goto	l3195
  3114  00CB                     l3223:	
  3115                           
  3116                           ;teris_16f886.c: 700: }
  3117                           ;teris_16f886.c: 701: }
  3118                           ;teris_16f886.c: 702: }
  3119                           ;teris_16f886.c: 703: }
  3120                           ;teris_16f886.c: 705: return 0;
  3121  00CB  3000               	movlw	0
  3122  00CC  0008               	return
  3123  00CD                     __end_of_hit_land:	
  3124                           
  3125                           	psect	text10
  3126  058E                     __ptext10:	
  3127 ;; *************** function _find_best_solution *****************
  3128 ;; Defined at:
  3129 ;;		line 1016 in file "teris_16f886.c"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;		None
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;  temp_x          1   70[BANK1 ] char 
  3134 ;;  tem_sub_inde    1   69[BANK1 ] unsigned char 
  3135 ;;  temp_matrix8   64    3[BANK1 ] struct .
  3136 ;;  temp_cur_mat    2   67[BANK1 ] PTR struct .
  3137 ;;		 -> g_matrix44(384), 
  3138 ;;  res             1    2[BANK1 ] unsigned char 
  3139 ;;  right_most_i    1    1[BANK1 ] char 
  3140 ;;  left_most_in    1    0[BANK1 ] char 
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  1    wreg      unsigned char 
  3143 ;; Registers used:
  3144 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3150 ;;      Params:         0       0       0       0       0
  3151 ;;      Locals:         0       0      71       0       0
  3152 ;;      Temps:          0       7       0       0       0
  3153 ;;      Totals:         0       7      71       0       0
  3154 ;;Total ram usage:       78 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; Hardware stack levels required when called:    3
  3157 ;; This function calls:
  3158 ;;		___bmul
  3159 ;;		_delete_matrix
  3160 ;;		_evaluate
  3161 ;;		_fall_off
  3162 ;;		_get_high
  3163 ;;		_get_high_after_merge
  3164 ;;		_get_holes_after_merge
  3165 ;;		_is_valid
  3166 ;;		_left_most
  3167 ;;		_merge1
  3168 ;;		_right_most
  3169 ;; This function is called by:
  3170 ;;		_main
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           
  3175                           ;psect for function _find_best_solution
  3176  058E                     _find_best_solution:	
  3177                           
  3178                           ;teris_16f886.c: 1025: MATRIX44* temp_cur_matrix44;
  3179                           ;teris_16f886.c: 1026: MATRIX88 temp_matrix88;
  3180                           ;teris_16f886.c: 1027: uint8_t res = 0;
  3181                           
  3182                           ;incstack = 0
  3183                           ; Regs used in _find_best_solution: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3184  058E  1683               	bsf	3,5	;RP0=1, select bank1
  3185  058F  1303               	bcf	3,6	;RP1=0, select bank1
  3186  0590  01A2               	clrf	find_best_solution@res^(0+128)
  3187                           
  3188                           ;teris_16f886.c: 1028: int8_t left_most_index, right_most_index;
  3189                           ;teris_16f886.c: 1030: temp_pre_x = 0xF;
  3190  0591  300F               	movlw	15
  3191  0592  1283               	bcf	3,5	;RP0=0, select bank0
  3192  0593  1303               	bcf	3,6	;RP1=0, select bank0
  3193  0594  00D2               	movwf	??_find_best_solution
  3194  0595  0852               	movf	??_find_best_solution,w
  3195  0596  00C3               	movwf	_temp_pre_x
  3196                           
  3197                           ;teris_16f886.c: 1031: tem_pre_sub_index = 0xF;
  3198  0597  300F               	movlw	15
  3199  0598  00D2               	movwf	??_find_best_solution
  3200  0599  0852               	movf	??_find_best_solution,w
  3201  059A  00C1               	movwf	_tem_pre_sub_index
  3202                           
  3203                           ;teris_16f886.c: 1032: temp_pre_risk = 0xFFFF;
  3204  059B  30FF               	movlw	255
  3205  059C  00BF               	movwf	_temp_pre_risk
  3206  059D  30FF               	movlw	255
  3207  059E  00C0               	movwf	_temp_pre_risk+1
  3208                           
  3209                           ;teris_16f886.c: 1033: temp_pre_count = 0;
  3210  059F  01E7               	clrf	_temp_pre_count
  3211                           
  3212                           ;teris_16f886.c: 1034: temp_pre_high = 0xFF;
  3213  05A0  30FF               	movlw	255
  3214  05A1  00D2               	movwf	??_find_best_solution
  3215  05A2  0852               	movf	??_find_best_solution,w
  3216  05A3  1683               	bsf	3,5	;RP0=1, select bank1
  3217  05A4  1303               	bcf	3,6	;RP1=0, select bank1
  3218  05A5  00EF               	movwf	_temp_pre_high^(0+128)
  3219                           
  3220                           ;teris_16f886.c: 1035: temp_pre_hole = 0xFF;
  3221  05A6  30FF               	movlw	255
  3222  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  3223  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  3224  05A9  00D2               	movwf	??_find_best_solution
  3225  05AA  0852               	movf	??_find_best_solution,w
  3226  05AB  00C2               	movwf	_temp_pre_hole
  3227                           
  3228                           ;teris_16f886.c: 1038: for(uint8_t tem_sub_index = 0; tem_sub_index < g_char_info[g_char
      +                          _info_index].num; tem_sub_index++)
  3229  05AC  1683               	bsf	3,5	;RP0=1, select bank1
  3230  05AD  1303               	bcf	3,6	;RP1=0, select bank1
  3231  05AE  01E5               	clrf	find_best_solution@tem_sub_index^(0+128)
  3232  05AF                     l4233:	
  3233  05AF  3003               	movlw	3
  3234  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  3235  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  3236  05B2  00D2               	movwf	??_find_best_solution
  3237  05B3  0852               	movf	??_find_best_solution,w
  3238  05B4  00F0               	movwf	___bmul@multiplicand
  3239  05B5  1683               	bsf	3,5	;RP0=1, select bank1
  3240  05B6  1303               	bcf	3,6	;RP1=0, select bank1
  3241  05B7  086A               	movf	_g_char_info_index^(0+128),w
  3242  05B8  120A  158A  2265  120A  118A  	fcall	___bmul
  3243  05BD  3E02               	addlw	2
  3244  05BE  3E20               	addlw	(low (_g_char_info| 0))& (0+255)
  3245  05BF  0084               	movwf	4
  3246  05C0  1383               	bcf	3,7	;select IRP bank0
  3247  05C1  0800               	movf	0,w
  3248  05C2  1683               	bsf	3,5	;RP0=1, select bank1
  3249  05C3  1303               	bcf	3,6	;RP1=0, select bank1
  3250  05C4  0265               	subwf	find_best_solution@tem_sub_index^(0+128),w
  3251  05C5  1803               	btfsc	3,0
  3252  05C6  2FA0               	goto	l4235
  3253                           
  3254                           ;teris_16f886.c: 1039: {
  3255                           ;teris_16f886.c: 1040: temp_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].st
      +                          art_index + tem_sub_index];
  3256  05C7  3003               	movlw	3
  3257  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  3258  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  3259  05CA  00D2               	movwf	??_find_best_solution
  3260  05CB  0852               	movf	??_find_best_solution,w
  3261  05CC  00F0               	movwf	___bmul@multiplicand
  3262  05CD  1683               	bsf	3,5	;RP0=1, select bank1
  3263  05CE  1303               	bcf	3,6	;RP1=0, select bank1
  3264  05CF  086A               	movf	_g_char_info_index^(0+128),w
  3265  05D0  120A  158A  2265  120A  118A  	fcall	___bmul
  3266  05D5  3E20               	addlw	(low (_g_char_info| 0))& (0+255)
  3267  05D6  0084               	movwf	4
  3268  05D7  1383               	bcf	3,7	;select IRP bank0
  3269  05D8  0800               	movf	0,w
  3270  05D9  1683               	bsf	3,5	;RP0=1, select bank1
  3271  05DA  1303               	bcf	3,6	;RP1=0, select bank1
  3272  05DB  0765               	addwf	find_best_solution@tem_sub_index^(0+128),w
  3273  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  3274  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  3275  05DE  00D3               	movwf	??_find_best_solution+1
  3276  05DF  01D4               	clrf	??_find_best_solution+2
  3277  05E0  0DD4               	rlf	??_find_best_solution+2,f
  3278  05E1  0ED3               	swapf	??_find_best_solution+1,f
  3279  05E2  0ED4               	swapf	??_find_best_solution+2,f
  3280  05E3  30F0               	movlw	240
  3281  05E4  05D4               	andwf	??_find_best_solution+2,f
  3282  05E5  0853               	movf	??_find_best_solution+1,w
  3283  05E6  390F               	andlw	15
  3284  05E7  04D4               	iorwf	??_find_best_solution+2,f
  3285  05E8  30F0               	movlw	240
  3286  05E9  05D3               	andwf	??_find_best_solution+1,f
  3287  05EA  3030               	movlw	low (_g_matrix44| (0+32768))
  3288  05EB  00D5               	movwf	??_find_best_solution+3
  3289  05EC  3088               	movlw	high (_g_matrix44| (0+32768))
  3290  05ED  00D6               	movwf	??_find_best_solution+4
  3291  05EE  0853               	movf	??_find_best_solution+1,w
  3292  05EF  0755               	addwf	??_find_best_solution+3,w
  3293  05F0  00D7               	movwf	??_find_best_solution+5
  3294  05F1  0854               	movf	??_find_best_solution+2,w
  3295  05F2  1803               	skipnc
  3296  05F3  0A54               	incf	??_find_best_solution+2,w
  3297  05F4  0756               	addwf	??_find_best_solution+4,w
  3298  05F5  00D8               	movwf	??_find_best_solution+6
  3299  05F6  0857               	movf	??_find_best_solution+5,w
  3300  05F7  1683               	bsf	3,5	;RP0=1, select bank1
  3301  05F8  1303               	bcf	3,6	;RP1=0, select bank1
  3302  05F9  00E3               	movwf	find_best_solution@temp_cur_matrix44^(0+128)
  3303  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  3304  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  3305  05FC  0858               	movf	??_find_best_solution+6,w
  3306  05FD  1683               	bsf	3,5	;RP0=1, select bank1
  3307  05FE  1303               	bcf	3,6	;RP1=0, select bank1
  3308  05FF  00E4               	movwf	(find_best_solution@temp_cur_matrix44+1)^(0+128)
  3309                           
  3310                           ;teris_16f886.c: 1041: left_most_index = left_most(cur_x, temp_cur_matrix44, &g_matrix88
      +                          );
  3311  0600  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  3312  0601  00FB               	movwf	left_most@matrix44
  3313  0602  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  3314  0603  00FC               	movwf	left_most@matrix44+1
  3315  0604  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3316  0605  1283               	bcf	3,5	;RP0=0, select bank0
  3317  0606  1303               	bcf	3,6	;RP1=0, select bank0
  3318  0607  00D2               	movwf	??_find_best_solution
  3319  0608  0852               	movf	??_find_best_solution,w
  3320  0609  00FD               	movwf	left_most@matrix88
  3321  060A  1683               	bsf	3,5	;RP0=1, select bank1
  3322  060B  1303               	bcf	3,6	;RP1=0, select bank1
  3323  060C  086E               	movf	_cur_x^(0+128),w
  3324  060D  120A  158A  2323  120A  118A  	fcall	_left_most
  3325  0612  1283               	bcf	3,5	;RP0=0, select bank0
  3326  0613  1303               	bcf	3,6	;RP1=0, select bank0
  3327  0614  00D3               	movwf	??_find_best_solution+1
  3328  0615  0853               	movf	??_find_best_solution+1,w
  3329  0616  1683               	bsf	3,5	;RP0=1, select bank1
  3330  0617  1303               	bcf	3,6	;RP1=0, select bank1
  3331  0618  00A0               	movwf	find_best_solution@left_most_index^(0+128)
  3332                           
  3333                           ;teris_16f886.c: 1042: right_most_index = right_most(cur_x, temp_cur_matrix44, &g_matrix
      +                          88);
  3334  0619  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  3335  061A  00FA               	movwf	right_most@matrix44
  3336  061B  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  3337  061C  00FB               	movwf	right_most@matrix44+1
  3338  061D  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3339  061E  1283               	bcf	3,5	;RP0=0, select bank0
  3340  061F  1303               	bcf	3,6	;RP1=0, select bank0
  3341  0620  00D2               	movwf	??_find_best_solution
  3342  0621  0852               	movf	??_find_best_solution,w
  3343  0622  00FC               	movwf	right_most@matrix88
  3344  0623  1683               	bsf	3,5	;RP0=1, select bank1
  3345  0624  1303               	bcf	3,6	;RP1=0, select bank1
  3346  0625  086E               	movf	_cur_x^(0+128),w
  3347  0626  120A  158A  2343  120A  118A  	fcall	_right_most
  3348  062B  1283               	bcf	3,5	;RP0=0, select bank0
  3349  062C  1303               	bcf	3,6	;RP1=0, select bank0
  3350  062D  00D3               	movwf	??_find_best_solution+1
  3351  062E  0853               	movf	??_find_best_solution+1,w
  3352  062F  1683               	bsf	3,5	;RP0=1, select bank1
  3353  0630  1303               	bcf	3,6	;RP1=0, select bank1
  3354  0631  00A1               	movwf	find_best_solution@right_most_index^(0+128)
  3355                           
  3356                           ;teris_16f886.c: 1044: for(int8_t temp_x = left_most_index; temp_x <= right_most_index; 
      +                          temp_x++)
  3357  0632  0820               	movf	find_best_solution@left_most_index^(0+128),w
  3358  0633  1283               	bcf	3,5	;RP0=0, select bank0
  3359  0634  1303               	bcf	3,6	;RP1=0, select bank0
  3360  0635  00D2               	movwf	??_find_best_solution
  3361  0636  0852               	movf	??_find_best_solution,w
  3362  0637  1683               	bsf	3,5	;RP0=1, select bank1
  3363  0638  1303               	bcf	3,6	;RP1=0, select bank1
  3364  0639  00E6               	movwf	find_best_solution@temp_x^(0+128)
  3365  063A                     l4229:	
  3366  063A  0821               	movf	find_best_solution@right_most_index^(0+128),w
  3367  063B  3A80               	xorlw	128
  3368  063C  1283               	bcf	3,5	;RP0=0, select bank0
  3369  063D  1303               	bcf	3,6	;RP1=0, select bank0
  3370  063E  00D2               	movwf	??_find_best_solution
  3371  063F  1683               	bsf	3,5	;RP0=1, select bank1
  3372  0640  1303               	bcf	3,6	;RP1=0, select bank1
  3373  0641  0866               	movf	find_best_solution@temp_x^(0+128),w
  3374  0642  3A80               	xorlw	128
  3375  0643  1283               	bcf	3,5	;RP0=0, select bank0
  3376  0644  1303               	bcf	3,6	;RP1=0, select bank0
  3377  0645  02D2               	subwf	??_find_best_solution,f
  3378  0646  1C03               	btfss	3,0
  3379  0647  2F99               	goto	l4231
  3380                           
  3381                           ;teris_16f886.c: 1045: {
  3382                           ;teris_16f886.c: 1046: temp_y = fall_off(temp_x, cur_y, temp_cur_matrix44, &g_matrix88);
  3383  0648  1683               	bsf	3,5	;RP0=1, select bank1
  3384  0649  1303               	bcf	3,6	;RP1=0, select bank1
  3385  064A  0869               	movf	_cur_y^(0+128),w
  3386  064B  1283               	bcf	3,5	;RP0=0, select bank0
  3387  064C  1303               	bcf	3,6	;RP1=0, select bank0
  3388  064D  00D2               	movwf	??_find_best_solution
  3389  064E  0852               	movf	??_find_best_solution,w
  3390  064F  00F0               	movwf	fall_off@y
  3391  0650  1683               	bsf	3,5	;RP0=1, select bank1
  3392  0651  1303               	bcf	3,6	;RP1=0, select bank1
  3393  0652  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  3394  0653  00F1               	movwf	fall_off@matrix44
  3395  0654  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  3396  0655  00F2               	movwf	fall_off@matrix44+1
  3397  0656  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3398  0657  1283               	bcf	3,5	;RP0=0, select bank0
  3399  0658  1303               	bcf	3,6	;RP1=0, select bank0
  3400  0659  00D3               	movwf	??_find_best_solution+1
  3401  065A  0853               	movf	??_find_best_solution+1,w
  3402  065B  00F3               	movwf	fall_off@matrix88
  3403  065C  1683               	bsf	3,5	;RP0=1, select bank1
  3404  065D  1303               	bcf	3,6	;RP1=0, select bank1
  3405  065E  0866               	movf	find_best_solution@temp_x^(0+128),w
  3406  065F  120A  118A  213F  120A  118A  	fcall	_fall_off
  3407  0664  1283               	bcf	3,5	;RP0=0, select bank0
  3408  0665  1303               	bcf	3,6	;RP1=0, select bank0
  3409  0666  00D4               	movwf	??_find_best_solution+2
  3410  0667  0854               	movf	??_find_best_solution+2,w
  3411  0668  00E8               	movwf	_temp_y
  3412                           
  3413                           ;teris_16f886.c: 1051: if(is_valid(temp_x, temp_y, temp_cur_matrix44, &g_matrix88) == 0)
  3414  0669  0868               	movf	_temp_y,w
  3415  066A  00D2               	movwf	??_find_best_solution
  3416  066B  0852               	movf	??_find_best_solution,w
  3417  066C  00F0               	movwf	is_valid@y
  3418  066D  1683               	bsf	3,5	;RP0=1, select bank1
  3419  066E  1303               	bcf	3,6	;RP1=0, select bank1
  3420  066F  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  3421  0670  00F1               	movwf	is_valid@matrix44
  3422  0671  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  3423  0672  00F2               	movwf	is_valid@matrix44+1
  3424  0673  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3425  0674  1283               	bcf	3,5	;RP0=0, select bank0
  3426  0675  1303               	bcf	3,6	;RP1=0, select bank0
  3427  0676  00D3               	movwf	??_find_best_solution+1
  3428  0677  0853               	movf	??_find_best_solution+1,w
  3429  0678  00F3               	movwf	is_valid@matrix88
  3430  0679  1683               	bsf	3,5	;RP0=1, select bank1
  3431  067A  1303               	bcf	3,6	;RP1=0, select bank1
  3432  067B  0866               	movf	find_best_solution@temp_x^(0+128),w
  3433  067C  120A  118A  22A6  120A  118A  	fcall	_is_valid
  3434  0681  3A00               	xorlw	0
  3435  0682  1903               	btfsc	3,2
  3436  0683  2F90               	goto	l4227
  3437                           
  3438                           ;teris_16f886.c: 1054: }
  3439                           ;teris_16f886.c: 1055: res = 1;
  3440                           
  3441                           ;teris_16f886.c: 1052: {
  3442                           ;teris_16f886.c: 1053: continue;
  3443  0684  1683               	bsf	3,5	;RP0=1, select bank1
  3444  0685  1303               	bcf	3,6	;RP1=0, select bank1
  3445  0686  01A2               	clrf	find_best_solution@res^(0+128)
  3446  0687  0AA2               	incf	find_best_solution@res^(0+128),f
  3447                           
  3448                           ;teris_16f886.c: 1056: merge1(temp_x, temp_y, temp_cur_matrix44, &g_matrix88, &temp_matr
      +                          ix88);
  3449  0688  1283               	bcf	3,5	;RP0=0, select bank0
  3450  0689  1303               	bcf	3,6	;RP1=0, select bank0
  3451  068A  0868               	movf	_temp_y,w
  3452  068B  00D2               	movwf	??_find_best_solution
  3453  068C  0852               	movf	??_find_best_solution,w
  3454  068D  00C4               	movwf	merge1@y
  3455  068E  1683               	bsf	3,5	;RP0=1, select bank1
  3456  068F  1303               	bcf	3,6	;RP1=0, select bank1
  3457  0690  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  3458  0691  1283               	bcf	3,5	;RP0=0, select bank0
  3459  0692  1303               	bcf	3,6	;RP1=0, select bank0
  3460  0693  00C5               	movwf	merge1@matrix44
  3461  0694  1683               	bsf	3,5	;RP0=1, select bank1
  3462  0695  1303               	bcf	3,6	;RP1=0, select bank1
  3463  0696  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  3464  0697  1283               	bcf	3,5	;RP0=0, select bank0
  3465  0698  1303               	bcf	3,6	;RP1=0, select bank0
  3466  0699  00C6               	movwf	merge1@matrix44+1
  3467  069A  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3468  069B  00D3               	movwf	??_find_best_solution+1
  3469  069C  0853               	movf	??_find_best_solution+1,w
  3470  069D  00C7               	movwf	merge1@matrix88_in
  3471  069E  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  3472  069F  00D4               	movwf	??_find_best_solution+2
  3473  06A0  0854               	movf	??_find_best_solution+2,w
  3474  06A1  00C8               	movwf	merge1@matrix88_out
  3475  06A2  1683               	bsf	3,5	;RP0=1, select bank1
  3476  06A3  1303               	bcf	3,6	;RP1=0, select bank1
  3477  06A4  0866               	movf	find_best_solution@temp_x^(0+128),w
  3478  06A5  120A  158A  2799  120A  118A  	fcall	_merge1
  3479                           
  3480                           ;teris_16f886.c: 1057: temp_count = delete_matrix(&temp_matrix88);
  3481  06AA  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  3482  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  3483  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  3484  06AD  00CB               	movwf	delete_matrix@matrix
  3485  06AE  3000               	movlw	0
  3486  06AF  00CC               	movwf	delete_matrix@matrix+1
  3487  06B0  120A  158A  2477  120A  118A  	fcall	_delete_matrix
  3488  06B5  1283               	bcf	3,5	;RP0=0, select bank0
  3489  06B6  1303               	bcf	3,6	;RP1=0, select bank0
  3490  06B7  00D2               	movwf	??_find_best_solution
  3491  06B8  0852               	movf	??_find_best_solution,w
  3492  06B9  1683               	bsf	3,5	;RP0=1, select bank1
  3493  06BA  1303               	bcf	3,6	;RP1=0, select bank1
  3494  06BB  00EB               	movwf	_temp_count^(0+128)
  3495                           
  3496                           ;teris_16f886.c: 1058: temp_risk = evaluate(&temp_matrix88);
  3497  06BC  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  3498  06BD  120A  118A  20CD  120A  118A  	fcall	_evaluate
  3499  06C2  0871               	movf	?_evaluate+1,w
  3500  06C3  1683               	bsf	3,5	;RP0=1, select bank1
  3501  06C4  1303               	bcf	3,6	;RP1=0, select bank1
  3502  06C5  00E8               	movwf	(_temp_risk+1)^(0+128)
  3503  06C6  0870               	movf	?_evaluate,w
  3504  06C7  00E7               	movwf	_temp_risk^(0+128)
  3505                           
  3506                           ;teris_16f886.c: 1059: temp_high = get_high_after_merge(temp_y, temp_cur_matrix44);
  3507  06C8  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  3508  06C9  00F0               	movwf	get_high_after_merge@matrix
  3509  06CA  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  3510  06CB  00F1               	movwf	get_high_after_merge@matrix+1
  3511  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  3512  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  3513  06CE  0868               	movf	_temp_y,w
  3514  06CF  120A  158A  24EE  120A  118A  	fcall	_get_high_after_merge
  3515  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  3516  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  3517  06D6  00D2               	movwf	??_find_best_solution
  3518  06D7  0852               	movf	??_find_best_solution,w
  3519  06D8  1683               	bsf	3,5	;RP0=1, select bank1
  3520  06D9  1303               	bcf	3,6	;RP1=0, select bank1
  3521  06DA  00EC               	movwf	_temp_high^(0+128)
  3522                           
  3523                           ;teris_16f886.c: 1060: temp_hole = get_holes_after_merge(&temp_matrix88);
  3524  06DB  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  3525  06DC  120A  118A  2339  120A  118A  	fcall	_get_holes_after_merge
  3526  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  3527  06E2  1303               	bcf	3,6	;RP1=0, select bank0
  3528  06E3  00D2               	movwf	??_find_best_solution
  3529  06E4  0852               	movf	??_find_best_solution,w
  3530  06E5  1683               	bsf	3,5	;RP0=1, select bank1
  3531  06E6  1303               	bcf	3,6	;RP1=0, select bank1
  3532  06E7  00ED               	movwf	_temp_hole^(0+128)
  3533                           
  3534                           ;teris_16f886.c: 1065: if(temp_count > temp_pre_count)
  3535  06E8  086B               	movf	_temp_count^(0+128),w
  3536  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  3537  06EA  1303               	bcf	3,6	;RP1=0, select bank0
  3538  06EB  0267               	subwf	_temp_pre_count,w
  3539  06EC  1803               	skipnc
  3540  06ED  2EF1               	goto	l4191
  3541                           
  3542                           ;teris_16f886.c: 1066: {
  3543                           ;teris_16f886.c: 1068: temp_pre_count = temp_count;
  3544  06EE  1683               	bsf	3,5	;RP0=1, select bank1
  3545  06EF  1303               	bcf	3,6	;RP1=0, select bank1
  3546  06F0  2F5E               	goto	l4225
  3547  06F1                     l4191:	
  3548                           ;teris_16f886.c: 1074: }
  3549                           
  3550                           ;teris_16f886.c: 1073: temp_pre_x = temp_x;
  3551                           
  3552                           ;teris_16f886.c: 1072: tem_pre_sub_index = tem_sub_index;
  3553                           
  3554                           ;teris_16f886.c: 1071: temp_pre_hole = temp_hole;
  3555                           
  3556                           ;teris_16f886.c: 1070: temp_pre_high = temp_high;
  3557                           
  3558                           ;teris_16f886.c: 1069: temp_pre_risk = temp_risk;
  3559                           
  3560                           
  3561                           ;teris_16f886.c: 1075: else if(temp_count == temp_pre_count)
  3562  06F1  1683               	bsf	3,5	;RP0=1, select bank1
  3563  06F2  1303               	bcf	3,6	;RP1=0, select bank1
  3564  06F3  086B               	movf	_temp_count^(0+128),w
  3565  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  3566  06F5  1303               	bcf	3,6	;RP1=0, select bank0
  3567  06F6  0667               	xorwf	_temp_pre_count,w
  3568  06F7  1D03               	skipz
  3569  06F8  2F90               	goto	l4227
  3570                           
  3571                           ;teris_16f886.c: 1076: {
  3572                           ;teris_16f886.c: 1077: if(get_high(&g_matrix88) <= 8/2 + 1)
  3573  06F9  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3574  06FA  120A  158A  2363  120A  118A  	fcall	_get_high
  3575  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  3576  0700  1303               	bcf	3,6	;RP1=0, select bank0
  3577  0701  00D2               	movwf	??_find_best_solution
  3578  0702  3006               	movlw	6
  3579  0703  0252               	subwf	??_find_best_solution,w
  3580  0704  1803               	skipnc
  3581  0705  2F34               	goto	l4211
  3582                           
  3583                           ;teris_16f886.c: 1078: {
  3584                           ;teris_16f886.c: 1081: if(temp_risk < temp_pre_risk)
  3585  0706  0840               	movf	_temp_pre_risk+1,w
  3586  0707  1683               	bsf	3,5	;RP0=1, select bank1
  3587  0708  1303               	bcf	3,6	;RP1=0, select bank1
  3588  0709  0268               	subwf	(_temp_risk+1)^(0+128),w
  3589  070A  1D03               	skipz
  3590  070B  2F12               	goto	u5725
  3591  070C  1283               	bcf	3,5	;RP0=0, select bank0
  3592  070D  1303               	bcf	3,6	;RP1=0, select bank0
  3593  070E  083F               	movf	_temp_pre_risk,w
  3594  070F  1683               	bsf	3,5	;RP0=1, select bank1
  3595  0710  1303               	bcf	3,6	;RP1=0, select bank1
  3596  0711  0267               	subwf	_temp_risk^(0+128),w
  3597  0712                     u5725:	
  3598  0712  1C03               	btfss	3,0
  3599  0713  2F5E               	goto	l4225
  3600                           
  3601                           ;teris_16f886.c: 1091: else if(temp_risk == temp_pre_risk)
  3602                           
  3603                           ;teris_16f886.c: 1090: }
  3604                           
  3605                           ;teris_16f886.c: 1089: temp_pre_x = temp_x;
  3606                           
  3607                           ;teris_16f886.c: 1088: tem_pre_sub_index = tem_sub_index;
  3608                           
  3609                           ;teris_16f886.c: 1087: temp_pre_hole = temp_hole;
  3610                           
  3611                           ;teris_16f886.c: 1086: temp_pre_high = temp_high;
  3612                           
  3613                           ;teris_16f886.c: 1085: temp_pre_risk = temp_risk;
  3614                           
  3615                           ;teris_16f886.c: 1082: {
  3616                           ;teris_16f886.c: 1084: temp_pre_count = temp_count;
  3617  0714  1283               	bcf	3,5	;RP0=0, select bank0
  3618  0715  0840               	movf	_temp_pre_risk+1,w
  3619  0716  1683               	bsf	3,5	;RP0=1, select bank1
  3620  0717  1303               	bcf	3,6	;RP1=0, select bank1
  3621  0718  0668               	xorwf	(_temp_risk+1)^(0+128),w
  3622  0719  1D03               	skipz
  3623  071A  2F21               	goto	u5735
  3624  071B  1283               	bcf	3,5	;RP0=0, select bank0
  3625  071C  1303               	bcf	3,6	;RP1=0, select bank0
  3626  071D  083F               	movf	_temp_pre_risk,w
  3627  071E  1683               	bsf	3,5	;RP0=1, select bank1
  3628  071F  1303               	bcf	3,6	;RP1=0, select bank1
  3629  0720  0667               	xorwf	_temp_risk^(0+128),w
  3630  0721                     u5735:	
  3631  0721  1D03               	skipz
  3632  0722  2F90               	goto	l4227
  3633                           
  3634                           ;teris_16f886.c: 1092: {
  3635                           ;teris_16f886.c: 1094: if(temp_high < temp_pre_high)
  3636  0723  086F               	movf	_temp_pre_high^(0+128),w
  3637  0724  026C               	subwf	_temp_high^(0+128),w
  3638  0725  1C03               	btfss	3,0
  3639  0726  2F5E               	goto	l4225
  3640                           
  3641                           ;teris_16f886.c: 1104: else if(temp_high == temp_pre_high)
  3642                           
  3643                           ;teris_16f886.c: 1103: }
  3644                           
  3645                           ;teris_16f886.c: 1102: temp_pre_x = temp_x;
  3646                           
  3647                           ;teris_16f886.c: 1101: tem_pre_sub_index = tem_sub_index;
  3648                           
  3649                           ;teris_16f886.c: 1100: temp_pre_hole = temp_hole;
  3650                           
  3651                           ;teris_16f886.c: 1099: temp_pre_high = temp_high;
  3652                           
  3653                           ;teris_16f886.c: 1098: temp_pre_risk = temp_risk;
  3654                           
  3655                           ;teris_16f886.c: 1095: {
  3656                           ;teris_16f886.c: 1097: temp_pre_count = temp_count;
  3657  0727  1683               	bsf	3,5	;RP0=1, select bank1
  3658  0728  1303               	bcf	3,6	;RP1=0, select bank1
  3659  0729  086C               	movf	_temp_high^(0+128),w
  3660  072A  066F               	xorwf	_temp_pre_high^(0+128),w
  3661  072B  1D03               	skipz
  3662  072C  2F90               	goto	l4227
  3663                           
  3664                           ;teris_16f886.c: 1105: {
  3665                           ;teris_16f886.c: 1107: if(temp_hole < temp_pre_hole)
  3666  072D  1283               	bcf	3,5	;RP0=0, select bank0
  3667  072E  1303               	bcf	3,6	;RP1=0, select bank0
  3668  072F  0842               	movf	_temp_pre_hole,w
  3669  0730  1683               	bsf	3,5	;RP0=1, select bank1
  3670  0731  1303               	bcf	3,6	;RP1=0, select bank1
  3671  0732  026D               	subwf	_temp_hole^(0+128),w
  3672  0733  2F5C               	goto	u5815
  3673  0734                     l4211:	
  3674                           ;teris_16f886.c: 1116: }
  3675                           ;teris_16f886.c: 1118: }
  3676                           ;teris_16f886.c: 1120: }
  3677                           ;teris_16f886.c: 1121: }
  3678                           
  3679                           ;teris_16f886.c: 1115: temp_pre_x = temp_x;
  3680                           
  3681                           ;teris_16f886.c: 1114: tem_pre_sub_index = tem_sub_index;
  3682                           
  3683                           ;teris_16f886.c: 1113: temp_pre_hole = temp_hole;
  3684                           
  3685                           ;teris_16f886.c: 1112: temp_pre_high = temp_high;
  3686                           
  3687                           ;teris_16f886.c: 1111: temp_pre_risk = temp_risk;
  3688                           
  3689                           ;teris_16f886.c: 1108: {
  3690                           ;teris_16f886.c: 1110: temp_pre_count = temp_count;
  3691                           
  3692                           
  3693                           ;teris_16f886.c: 1122: else
  3694                           ;teris_16f886.c: 1123: {
  3695                           ;teris_16f886.c: 1126: if(temp_high < temp_pre_high)
  3696  0734  1683               	bsf	3,5	;RP0=1, select bank1
  3697  0735  1303               	bcf	3,6	;RP1=0, select bank1
  3698  0736  086F               	movf	_temp_pre_high^(0+128),w
  3699  0737  026C               	subwf	_temp_high^(0+128),w
  3700  0738  1C03               	btfss	3,0
  3701  0739  2F5E               	goto	l4225
  3702                           
  3703                           ;teris_16f886.c: 1136: else if(temp_high == temp_pre_high)
  3704                           
  3705                           ;teris_16f886.c: 1135: }
  3706                           
  3707                           ;teris_16f886.c: 1134: temp_pre_x = temp_x;
  3708                           
  3709                           ;teris_16f886.c: 1133: tem_pre_sub_index = tem_sub_index;
  3710                           
  3711                           ;teris_16f886.c: 1132: temp_pre_hole = temp_hole;
  3712                           
  3713                           ;teris_16f886.c: 1131: temp_pre_high = temp_high;
  3714                           
  3715                           ;teris_16f886.c: 1130: temp_pre_risk = temp_risk;
  3716                           
  3717                           ;teris_16f886.c: 1127: {
  3718                           ;teris_16f886.c: 1129: temp_pre_count = temp_count;
  3719  073A  1683               	bsf	3,5	;RP0=1, select bank1
  3720  073B  1303               	bcf	3,6	;RP1=0, select bank1
  3721  073C  086C               	movf	_temp_high^(0+128),w
  3722  073D  066F               	xorwf	_temp_pre_high^(0+128),w
  3723  073E  1D03               	skipz
  3724  073F  2F90               	goto	l4227
  3725                           
  3726                           ;teris_16f886.c: 1137: {
  3727                           ;teris_16f886.c: 1139: if(temp_hole < temp_pre_hole)
  3728  0740  1283               	bcf	3,5	;RP0=0, select bank0
  3729  0741  1303               	bcf	3,6	;RP1=0, select bank0
  3730  0742  0842               	movf	_temp_pre_hole,w
  3731  0743  1683               	bsf	3,5	;RP0=1, select bank1
  3732  0744  1303               	bcf	3,6	;RP1=0, select bank1
  3733  0745  026D               	subwf	_temp_hole^(0+128),w
  3734  0746  1C03               	btfss	3,0
  3735  0747  2F5E               	goto	l4225
  3736                           
  3737                           ;teris_16f886.c: 1149: else if(temp_hole == temp_pre_hole)
  3738                           
  3739                           ;teris_16f886.c: 1148: }
  3740                           
  3741                           ;teris_16f886.c: 1147: temp_pre_x = temp_x;
  3742                           
  3743                           ;teris_16f886.c: 1146: tem_pre_sub_index = tem_sub_index;
  3744                           
  3745                           ;teris_16f886.c: 1145: temp_pre_hole = temp_hole;
  3746                           
  3747                           ;teris_16f886.c: 1144: temp_pre_high = temp_high;
  3748                           
  3749                           ;teris_16f886.c: 1143: temp_pre_risk = temp_risk;
  3750                           
  3751                           ;teris_16f886.c: 1140: {
  3752                           ;teris_16f886.c: 1142: temp_pre_count = temp_count;
  3753  0748  1683               	bsf	3,5	;RP0=1, select bank1
  3754  0749  1303               	bcf	3,6	;RP1=0, select bank1
  3755  074A  086D               	movf	_temp_hole^(0+128),w
  3756  074B  1283               	bcf	3,5	;RP0=0, select bank0
  3757  074C  1303               	bcf	3,6	;RP1=0, select bank0
  3758  074D  0642               	xorwf	_temp_pre_hole,w
  3759  074E  1D03               	skipz
  3760  074F  2F90               	goto	l4227
  3761                           
  3762                           ;teris_16f886.c: 1150: {
  3763                           ;teris_16f886.c: 1152: if(temp_risk < temp_pre_risk)
  3764  0750  0840               	movf	_temp_pre_risk+1,w
  3765  0751  1683               	bsf	3,5	;RP0=1, select bank1
  3766  0752  1303               	bcf	3,6	;RP1=0, select bank1
  3767  0753  0268               	subwf	(_temp_risk+1)^(0+128),w
  3768  0754  1D03               	skipz
  3769  0755  2F5C               	goto	u5815
  3770  0756  1283               	bcf	3,5	;RP0=0, select bank0
  3771  0757  1303               	bcf	3,6	;RP1=0, select bank0
  3772  0758  083F               	movf	_temp_pre_risk,w
  3773  0759  1683               	bsf	3,5	;RP0=1, select bank1
  3774  075A  1303               	bcf	3,6	;RP1=0, select bank1
  3775  075B  0267               	subwf	_temp_risk^(0+128),w
  3776  075C                     u5815:	
  3777  075C  1803               	skipnc
  3778  075D  2F90               	goto	l4227
  3779  075E                     l4225:	
  3780                           
  3781                           ;teris_16f886.c: 1153: {
  3782                           ;teris_16f886.c: 1155: temp_pre_count = temp_count;
  3783  075E  086B               	movf	_temp_count^(0+128),w
  3784  075F  1283               	bcf	3,5	;RP0=0, select bank0
  3785  0760  1303               	bcf	3,6	;RP1=0, select bank0
  3786  0761  00D2               	movwf	??_find_best_solution
  3787  0762  0852               	movf	??_find_best_solution,w
  3788  0763  00E7               	movwf	_temp_pre_count
  3789                           
  3790                           ;teris_16f886.c: 1156: temp_pre_risk = temp_risk;
  3791  0764  1683               	bsf	3,5	;RP0=1, select bank1
  3792  0765  1303               	bcf	3,6	;RP1=0, select bank1
  3793  0766  0868               	movf	(_temp_risk+1)^(0+128),w
  3794  0767  1283               	bcf	3,5	;RP0=0, select bank0
  3795  0768  1303               	bcf	3,6	;RP1=0, select bank0
  3796  0769  00C0               	movwf	_temp_pre_risk+1
  3797  076A  1683               	bsf	3,5	;RP0=1, select bank1
  3798  076B  1303               	bcf	3,6	;RP1=0, select bank1
  3799  076C  0867               	movf	_temp_risk^(0+128),w
  3800  076D  1283               	bcf	3,5	;RP0=0, select bank0
  3801  076E  1303               	bcf	3,6	;RP1=0, select bank0
  3802  076F  00BF               	movwf	_temp_pre_risk
  3803                           
  3804                           ;teris_16f886.c: 1157: temp_pre_high = temp_high;
  3805  0770  1683               	bsf	3,5	;RP0=1, select bank1
  3806  0771  1303               	bcf	3,6	;RP1=0, select bank1
  3807  0772  086C               	movf	_temp_high^(0+128),w
  3808  0773  1283               	bcf	3,5	;RP0=0, select bank0
  3809  0774  1303               	bcf	3,6	;RP1=0, select bank0
  3810  0775  00D2               	movwf	??_find_best_solution
  3811  0776  0852               	movf	??_find_best_solution,w
  3812  0777  1683               	bsf	3,5	;RP0=1, select bank1
  3813  0778  1303               	bcf	3,6	;RP1=0, select bank1
  3814  0779  00EF               	movwf	_temp_pre_high^(0+128)
  3815                           
  3816                           ;teris_16f886.c: 1158: temp_pre_hole = temp_hole;
  3817  077A  086D               	movf	_temp_hole^(0+128),w
  3818  077B  1283               	bcf	3,5	;RP0=0, select bank0
  3819  077C  1303               	bcf	3,6	;RP1=0, select bank0
  3820  077D  00D2               	movwf	??_find_best_solution
  3821  077E  0852               	movf	??_find_best_solution,w
  3822  077F  00C2               	movwf	_temp_pre_hole
  3823                           
  3824                           ;teris_16f886.c: 1159: tem_pre_sub_index = tem_sub_index;
  3825  0780  1683               	bsf	3,5	;RP0=1, select bank1
  3826  0781  1303               	bcf	3,6	;RP1=0, select bank1
  3827  0782  0865               	movf	find_best_solution@tem_sub_index^(0+128),w
  3828  0783  1283               	bcf	3,5	;RP0=0, select bank0
  3829  0784  1303               	bcf	3,6	;RP1=0, select bank0
  3830  0785  00D2               	movwf	??_find_best_solution
  3831  0786  0852               	movf	??_find_best_solution,w
  3832  0787  00C1               	movwf	_tem_pre_sub_index
  3833                           
  3834                           ;teris_16f886.c: 1160: temp_pre_x = temp_x;
  3835  0788  1683               	bsf	3,5	;RP0=1, select bank1
  3836  0789  1303               	bcf	3,6	;RP1=0, select bank1
  3837  078A  0866               	movf	find_best_solution@temp_x^(0+128),w
  3838  078B  1283               	bcf	3,5	;RP0=0, select bank0
  3839  078C  1303               	bcf	3,6	;RP1=0, select bank0
  3840  078D  00D2               	movwf	??_find_best_solution
  3841  078E  0852               	movf	??_find_best_solution,w
  3842  078F  00C3               	movwf	_temp_pre_x
  3843  0790                     l4227:	
  3844  0790  3001               	movlw	1
  3845  0791  1283               	bcf	3,5	;RP0=0, select bank0
  3846  0792  1303               	bcf	3,6	;RP1=0, select bank0
  3847  0793  00D2               	movwf	??_find_best_solution
  3848  0794  0852               	movf	??_find_best_solution,w
  3849  0795  1683               	bsf	3,5	;RP0=1, select bank1
  3850  0796  1303               	bcf	3,6	;RP1=0, select bank1
  3851  0797  07E6               	addwf	find_best_solution@temp_x^(0+128),f
  3852  0798  2E3A               	goto	l4229
  3853  0799                     l4231:	
  3854  0799  3001               	movlw	1
  3855  079A  00D2               	movwf	??_find_best_solution
  3856  079B  0852               	movf	??_find_best_solution,w
  3857  079C  1683               	bsf	3,5	;RP0=1, select bank1
  3858  079D  1303               	bcf	3,6	;RP1=0, select bank1
  3859  079E  07E5               	addwf	find_best_solution@tem_sub_index^(0+128),f
  3860  079F  2DAF               	goto	l4233
  3861  07A0                     l4235:	
  3862                           
  3863                           ;teris_16f886.c: 1161: }
  3864                           ;teris_16f886.c: 1162: }
  3865                           ;teris_16f886.c: 1163: }
  3866                           ;teris_16f886.c: 1164: }
  3867                           ;teris_16f886.c: 1165: }
  3868                           ;teris_16f886.c: 1179: }
  3869                           ;teris_16f886.c: 1180: }
  3870                           ;teris_16f886.c: 1181: if(res == 1)
  3871  07A0  0322               	decf	find_best_solution@res^(0+128),w
  3872  07A1  1D03               	btfss	3,2
  3873  07A2  2FBF               	goto	l4241
  3874                           
  3875                           ;teris_16f886.c: 1182: {
  3876                           ;teris_16f886.c: 1183: g_char_info[g_char_info_index].cur_index = tem_pre_sub_index;
  3877  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  3878  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  3879  07A5  0841               	movf	_tem_pre_sub_index,w
  3880  07A6  00D2               	movwf	??_find_best_solution
  3881  07A7  3003               	movlw	3
  3882  07A8  00D3               	movwf	??_find_best_solution+1
  3883  07A9  0853               	movf	??_find_best_solution+1,w
  3884  07AA  00F0               	movwf	___bmul@multiplicand
  3885  07AB  1683               	bsf	3,5	;RP0=1, select bank1
  3886  07AC  1303               	bcf	3,6	;RP1=0, select bank1
  3887  07AD  086A               	movf	_g_char_info_index^(0+128),w
  3888  07AE  120A  158A  2265   	fcall	___bmul
  3889  07B1  3E01               	addlw	1
  3890  07B2  3E20               	addlw	(low (_g_char_info| 0))& (0+255)
  3891  07B3  0084               	movwf	4
  3892  07B4  1283               	bcf	3,5	;RP0=0, select bank0
  3893  07B5  1303               	bcf	3,6	;RP1=0, select bank0
  3894  07B6  0852               	movf	??_find_best_solution,w
  3895  07B7  1383               	bcf	3,7	;select IRP bank0
  3896  07B8  0080               	movwf	0
  3897                           
  3898                           ;teris_16f886.c: 1184: cur_x = temp_pre_x;
  3899  07B9  0843               	movf	_temp_pre_x,w
  3900  07BA  00D2               	movwf	??_find_best_solution
  3901  07BB  0852               	movf	??_find_best_solution,w
  3902  07BC  1683               	bsf	3,5	;RP0=1, select bank1
  3903  07BD  1303               	bcf	3,6	;RP1=0, select bank1
  3904  07BE  00EE               	movwf	_cur_x^(0+128)
  3905  07BF                     l4241:	
  3906                           ;teris_16f886.c: 1200: else
  3907                           ;teris_16f886.c: 1201: {
  3908                           
  3909                           ;teris_16f886.c: 1199: }
  3910                           
  3911                           
  3912                           ;teris_16f886.c: 1203: }
  3913                           ;teris_16f886.c: 1204: return res;
  3914  07BF  0822               	movf	find_best_solution@res^(0+128),w
  3915  07C0  0008               	return
  3916  07C1                     __end_of_find_best_solution:	
  3917                           
  3918                           	psect	text11
  3919  0B43                     __ptext11:	
  3920 ;; *************** function _right_most *****************
  3921 ;; Defined at:
  3922 ;;		line 898 in file "teris_16f886.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  x               1    wreg     char 
  3925 ;;  matrix44        2   10[COMMON] PTR const struct .
  3926 ;;		 -> g_matrix44(384), 
  3927 ;;  matrix88        1   12[COMMON] PTR const struct .
  3928 ;;		 -> g_matrix88(64), 
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;  x               1    0[BANK0 ] char 
  3931 ;; Return value:  Size  Location     Type
  3932 ;;                  1    wreg      char 
  3933 ;; Registers used:
  3934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3935 ;; Tracked objects:
  3936 ;;		On entry : 0/0
  3937 ;;		On exit  : 0/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3940 ;;      Params:         3       0       0       0       0
  3941 ;;      Locals:         0       1       0       0       0
  3942 ;;      Temps:          1       0       0       0       0
  3943 ;;      Totals:         4       1       0       0       0
  3944 ;;Total ram usage:        5 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    2
  3947 ;; This function calls:
  3948 ;;		_is_right_boundary
  3949 ;; This function is called by:
  3950 ;;		_find_best_solution
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           
  3955                           ;psect for function _right_most
  3956  0B43                     _right_most:	
  3957                           
  3958                           ;incstack = 0
  3959                           ; Regs used in _right_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3960                           ;right_most@x stored from wreg
  3961  0B43  1283               	bcf	3,5	;RP0=0, select bank0
  3962  0B44  1303               	bcf	3,6	;RP1=0, select bank0
  3963  0B45  00C4               	movwf	right_most@x
  3964  0B46                     l402:	
  3965                           ;teris_16f886.c: 900: while(1)
  3966                           
  3967                           
  3968                           ;teris_16f886.c: 901: {
  3969                           ;teris_16f886.c: 902: if(is_right_boundary(x, matrix44, matrix88) == RIGHT_OVER_BOUNDARY
      +                          )
  3970  0B46  087A               	movf	right_most@matrix44,w
  3971  0B47  00F0               	movwf	is_right_boundary@matrix44
  3972  0B48  087B               	movf	right_most@matrix44+1,w
  3973  0B49  00F1               	movwf	is_right_boundary@matrix44+1
  3974  0B4A  087C               	movf	right_most@matrix88,w
  3975  0B4B  00FD               	movwf	??_right_most
  3976  0B4C  087D               	movf	??_right_most,w
  3977  0B4D  00F2               	movwf	is_right_boundary@matrix88
  3978  0B4E  0844               	movf	right_most@x,w
  3979  0B4F  120A  118A  2005  120A  158A  	fcall	_is_right_boundary
  3980  0B54  3A03               	xorlw	3
  3981  0B55  1D03               	skipz
  3982  0B56  2B5C               	goto	l2875
  3983                           
  3984                           ;teris_16f886.c: 903: {
  3985                           ;teris_16f886.c: 905: return x - 1;
  3986  0B57  1283               	bcf	3,5	;RP0=0, select bank0
  3987  0B58  1303               	bcf	3,6	;RP1=0, select bank0
  3988  0B59  0844               	movf	right_most@x,w
  3989  0B5A  3EFF               	addlw	-1
  3990  0B5B  0008               	return
  3991  0B5C                     l2875:	
  3992                           
  3993                           ;teris_16f886.c: 906: }
  3994                           ;teris_16f886.c: 907: x++;
  3995  0B5C  3001               	movlw	1
  3996  0B5D  00FD               	movwf	??_right_most
  3997  0B5E  087D               	movf	??_right_most,w
  3998  0B5F  1283               	bcf	3,5	;RP0=0, select bank0
  3999  0B60  1303               	bcf	3,6	;RP1=0, select bank0
  4000  0B61  07C4               	addwf	right_most@x,f
  4001  0B62  2B46               	goto	l402
  4002  0B63                     __end_of_right_most:	
  4003                           
  4004                           	psect	text12
  4005  0005                     __ptext12:	
  4006 ;; *************** function _is_right_boundary *****************
  4007 ;; Defined at:
  4008 ;;		line 759 in file "teris_16f886.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;  x               1    wreg     char 
  4011 ;;  matrix44        2    0[COMMON] PTR const struct .
  4012 ;;		 -> g_matrix44(384), 
  4013 ;;  matrix88        1    2[COMMON] PTR const struct .
  4014 ;;		 -> g_matrix88(64), 
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;  x               1    7[COMMON] char 
  4017 ;;  col             1    9[COMMON] char 
  4018 ;;  row             1    8[COMMON] char 
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  1    wreg      unsigned char 
  4021 ;; Registers used:
  4022 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4028 ;;      Params:         3       0       0       0       0
  4029 ;;      Locals:         3       0       0       0       0
  4030 ;;      Temps:          4       0       0       0       0
  4031 ;;      Totals:        10       0       0       0       0
  4032 ;;Total ram usage:       10 bytes
  4033 ;; Hardware stack levels used:    2
  4034 ;; This function calls:
  4035 ;;		Nothing
  4036 ;; This function is called by:
  4037 ;;		_right_most
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           
  4042                           ;psect for function _is_right_boundary
  4043  0005                     _is_right_boundary:	
  4044                           
  4045                           ;incstack = 0
  4046                           ; Regs used in _is_right_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  4047                           ;is_right_boundary@x stored from wreg
  4048  0005  00F7               	movwf	is_right_boundary@x
  4049                           
  4050                           ;teris_16f886.c: 761: for(int8_t row = 4 - 1; row >= 0; row--)
  4051  0006  3003               	movlw	3
  4052  0007  00F3               	movwf	??_is_right_boundary
  4053  0008  0873               	movf	??_is_right_boundary,w
  4054  0009  00F8               	movwf	is_right_boundary@row
  4055  000A  1BF8               	btfsc	is_right_boundary@row,7
  4056  000B  285A               	goto	l2659
  4057  000C                     l2637:	
  4058                           
  4059                           ;teris_16f886.c: 762: {
  4060                           ;teris_16f886.c: 763: for(int8_t col = 0; col < 4; col++)
  4061  000C  01F9               	clrf	is_right_boundary@col
  4062  000D  0879               	movf	is_right_boundary@col,w
  4063  000E  3A80               	xorlw	128
  4064  000F  3E7C               	addlw	-132
  4065  0010  1803               	btfsc	3,0
  4066  0011  2854               	goto	l2655
  4067  0012                     l2643:	
  4068                           
  4069                           ;teris_16f886.c: 764: {
  4070                           ;teris_16f886.c: 765: if(matrix44->data[row][col] == 1)
  4071  0012  0878               	movf	is_right_boundary@row,w
  4072  0013  00F3               	movwf	??_is_right_boundary
  4073  0014  01F4               	clrf	??_is_right_boundary+1
  4074  0015  1003               	clrc
  4075  0016  0DF3               	rlf	??_is_right_boundary,f
  4076  0017  0DF4               	rlf	??_is_right_boundary+1,f
  4077  0018  1003               	clrc
  4078  0019  0DF3               	rlf	??_is_right_boundary,f
  4079  001A  0DF4               	rlf	??_is_right_boundary+1,f
  4080  001B  0873               	movf	??_is_right_boundary,w
  4081  001C  0770               	addwf	is_right_boundary@matrix44,w
  4082  001D  00F5               	movwf	??_is_right_boundary+2
  4083  001E  0874               	movf	??_is_right_boundary+1,w
  4084  001F  1803               	skipnc
  4085  0020  0A74               	incf	??_is_right_boundary+1,w
  4086  0021  0771               	addwf	is_right_boundary@matrix44+1,w
  4087  0022  00F6               	movwf	??_is_right_boundary+3
  4088  0023  0879               	movf	is_right_boundary@col,w
  4089  0024  0775               	addwf	??_is_right_boundary+2,w
  4090  0025  0084               	movwf	4
  4091  0026  0876               	movf	??_is_right_boundary+3,w
  4092  0027  1803               	skipnc
  4093  0028  0A76               	incf	??_is_right_boundary+3,w
  4094  0029  1283               	bcf	3,5	;RP0=0, select bank0
  4095  002A  1303               	bcf	3,6	;RP1=0, select bank0
  4096  002B  00FF               	movwf	127
  4097  002C  120A  158A  2000  120A  118A  	fcall	stringtab
  4098  0031  3A01               	xorlw	1
  4099  0032  1D03               	skipz
  4100  0033  284B               	goto	l2651
  4101                           
  4102                           ;teris_16f886.c: 766: {
  4103                           ;teris_16f886.c: 767: if(x + col > 8 - 1)
  4104  0034  0877               	movf	is_right_boundary@x,w
  4105  0035  0779               	addwf	is_right_boundary@col,w
  4106  0036  00F3               	movwf	??_is_right_boundary
  4107  0037  01F4               	clrf	??_is_right_boundary+1
  4108  0038  1803               	skipnc
  4109  0039  0AF4               	incf	??_is_right_boundary+1,f
  4110  003A  1BF7               	btfsc	is_right_boundary@x,7
  4111  003B  03F4               	decf	??_is_right_boundary+1,f
  4112  003C  1BF9               	btfsc	is_right_boundary@col,7
  4113  003D  03F4               	decf	??_is_right_boundary+1,f
  4114  003E  0874               	movf	??_is_right_boundary+1,w
  4115  003F  3A80               	xorlw	128
  4116  0040  00FF               	movwf	127
  4117  0041  3080               	movlw	128
  4118  0042  027F               	subwf	127,w
  4119  0043  1D03               	skipz
  4120  0044  2847               	goto	u2795
  4121  0045  3008               	movlw	8
  4122  0046  0273               	subwf	??_is_right_boundary,w
  4123  0047                     u2795:	
  4124  0047  1C03               	skipc
  4125  0048  284B               	goto	l2651
  4126                           
  4127                           ;teris_16f886.c: 768: {
  4128                           ;teris_16f886.c: 770: return RIGHT_OVER_BOUNDARY;
  4129  0049  3003               	movlw	3
  4130  004A  0008               	return
  4131  004B                     l2651:	
  4132  004B  3001               	movlw	1
  4133  004C  00F3               	movwf	??_is_right_boundary
  4134  004D  0873               	movf	??_is_right_boundary,w
  4135  004E  07F9               	addwf	is_right_boundary@col,f
  4136  004F  0879               	movf	is_right_boundary@col,w
  4137  0050  3A80               	xorlw	128
  4138  0051  3E7C               	addlw	-132
  4139  0052  1C03               	skipc
  4140  0053  2812               	goto	l2643
  4141  0054                     l2655:	
  4142  0054  30FF               	movlw	255
  4143  0055  00F3               	movwf	??_is_right_boundary
  4144  0056  0873               	movf	??_is_right_boundary,w
  4145  0057  07F8               	addwf	is_right_boundary@row,f
  4146  0058  1FF8               	btfss	is_right_boundary@row,7
  4147  0059  280C               	goto	l2637
  4148  005A                     l2659:	
  4149                           
  4150                           ;teris_16f886.c: 771: }
  4151                           ;teris_16f886.c: 772: }
  4152                           ;teris_16f886.c: 773: }
  4153                           ;teris_16f886.c: 774: }
  4154                           ;teris_16f886.c: 775: return OK;
  4155  005A  3000               	movlw	0
  4156  005B  0008               	return
  4157  005C                     __end_of_is_right_boundary:	
  4158                           
  4159                           	psect	text13
  4160  0F99                     __ptext13:	
  4161 ;; *************** function _merge1 *****************
  4162 ;; Defined at:
  4163 ;;		line 831 in file "teris_16f886.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;  x               1    wreg     char 
  4166 ;;  y               1    0[BANK0 ] char 
  4167 ;;  matrix44        2    1[BANK0 ] PTR const struct .
  4168 ;;		 -> g_matrix44(384), 
  4169 ;;  matrix88_in     1    3[BANK0 ] PTR const struct .
  4170 ;;		 -> g_matrix88(64), 
  4171 ;;  matrix88_out    1    4[BANK0 ] PTR struct .
  4172 ;;		 -> find_best_solution@temp_matrix88(64), 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;  x               1    9[BANK0 ] char 
  4175 ;;  col             1   13[BANK0 ] unsigned char 
  4176 ;;  row             1   12[BANK0 ] unsigned char 
  4177 ;;  len             2   10[BANK0 ] unsigned int 
  4178 ;; Return value:  Size  Location     Type
  4179 ;;                  1    wreg      void 
  4180 ;; Registers used:
  4181 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4187 ;;      Params:         0       5       0       0       0
  4188 ;;      Locals:         0       5       0       0       0
  4189 ;;      Temps:          0       4       0       0       0
  4190 ;;      Totals:         0      14       0       0       0
  4191 ;;Total ram usage:       14 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:    1
  4194 ;; This function calls:
  4195 ;;		_memcpy
  4196 ;; This function is called by:
  4197 ;;		_find_best_solution
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           
  4202                           ;psect for function _merge1
  4203  0F99                     _merge1:	
  4204                           
  4205                           ;incstack = 0
  4206                           ; Regs used in _merge1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4207                           ;merge1@x stored from wreg
  4208  0F99  1283               	bcf	3,5	;RP0=0, select bank0
  4209  0F9A  1303               	bcf	3,6	;RP1=0, select bank0
  4210  0F9B  00CD               	movwf	merge1@x
  4211                           
  4212                           ;teris_16f886.c: 836: register size_t len;
  4213                           ;teris_16f886.c: 838: len = sizeof(MATRIX88);
  4214  0F9C  3040               	movlw	64
  4215  0F9D  00CE               	movwf	merge1@len
  4216  0F9E  3000               	movlw	0
  4217  0F9F  00CF               	movwf	merge1@len+1
  4218                           
  4219                           ;teris_16f886.c: 839: memcpy(matrix88_out, matrix88_in, len);
  4220  0FA0  0848               	movf	merge1@matrix88_out,w
  4221  0FA1  00F0               	movwf	memcpy@d1
  4222  0FA2  3000               	movlw	0
  4223  0FA3  00F1               	movwf	memcpy@d1+1
  4224  0FA4  0847               	movf	merge1@matrix88_in,w
  4225  0FA5  00F2               	movwf	memcpy@s1
  4226  0FA6  3001               	movlw	1
  4227  0FA7  00F3               	movwf	memcpy@s1+1
  4228  0FA8  084F               	movf	merge1@len+1,w
  4229  0FA9  00F5               	movwf	memcpy@n+1
  4230  0FAA  084E               	movf	merge1@len,w
  4231  0FAB  00F4               	movwf	memcpy@n
  4232  0FAC  120A  158A  241D  120A  158A  	fcall	_memcpy
  4233                           
  4234                           ;teris_16f886.c: 841: for(uint8_t row = 0; row < 4; row++)
  4235  0FB1  1283               	bcf	3,5	;RP0=0, select bank0
  4236  0FB2  1303               	bcf	3,6	;RP1=0, select bank0
  4237  0FB3  01D0               	clrf	merge1@row
  4238  0FB4                     L3:	
  4239  0FB4  3004               	movlw	4
  4240  0FB5  0250               	subwf	merge1@row,w
  4241  0FB6  1803               	btfsc	3,0
  4242  0FB7  0008               	return
  4243                           
  4244                           ;teris_16f886.c: 842: {
  4245                           ;teris_16f886.c: 843: for(uint8_t col = 0; col < 4; col++)
  4246  0FB8  01D1               	clrf	merge1@col
  4247  0FB9  3004               	movlw	4
  4248  0FBA  0251               	subwf	merge1@col,w
  4249  0FBB  1803               	btfsc	3,0
  4250  0FBC  2FFB               	goto	l4153
  4251  0FBD                     l4145:	
  4252                           
  4253                           ;teris_16f886.c: 844: {
  4254                           ;teris_16f886.c: 845: if(matrix44->data[row][col] == 1)
  4255  0FBD  0850               	movf	merge1@row,w
  4256  0FBE  00C9               	movwf	??_merge1
  4257  0FBF  01CA               	clrf	??_merge1+1
  4258  0FC0  1003               	clrc
  4259  0FC1  0DC9               	rlf	??_merge1,f
  4260  0FC2  0DCA               	rlf	??_merge1+1,f
  4261  0FC3  1003               	clrc
  4262  0FC4  0DC9               	rlf	??_merge1,f
  4263  0FC5  0DCA               	rlf	??_merge1+1,f
  4264  0FC6  0849               	movf	??_merge1,w
  4265  0FC7  0745               	addwf	merge1@matrix44,w
  4266  0FC8  00CB               	movwf	??_merge1+2
  4267  0FC9  084A               	movf	??_merge1+1,w
  4268  0FCA  1803               	skipnc
  4269  0FCB  0A4A               	incf	??_merge1+1,w
  4270  0FCC  0746               	addwf	merge1@matrix44+1,w
  4271  0FCD  00CC               	movwf	??_merge1+3
  4272  0FCE  0851               	movf	merge1@col,w
  4273  0FCF  074B               	addwf	??_merge1+2,w
  4274  0FD0  0084               	movwf	4
  4275  0FD1  084C               	movf	??_merge1+3,w
  4276  0FD2  1803               	skipnc
  4277  0FD3  0A4C               	incf	??_merge1+3,w
  4278  0FD4  00FF               	movwf	127
  4279  0FD5  120A  158A  2000  120A  158A  	fcall	stringtab
  4280  0FDA  3A01               	xorlw	1
  4281  0FDB  1D03               	skipz
  4282  0FDC  2FF3               	goto	l4149
  4283                           
  4284                           ;teris_16f886.c: 846: {
  4285                           ;teris_16f886.c: 847: matrix88_out->data[y + row][x + col] = 1;
  4286  0FDD  0851               	movf	merge1@col,w
  4287  0FDE  074D               	addwf	merge1@x,w
  4288  0FDF  0748               	addwf	merge1@matrix88_out,w
  4289  0FE0  00C9               	movwf	??_merge1
  4290  0FE1  0850               	movf	merge1@row,w
  4291  0FE2  0744               	addwf	merge1@y,w
  4292  0FE3  00CA               	movwf	??_merge1+1
  4293  0FE4  3002               	movlw	2
  4294  0FE5                     u5655:	
  4295  0FE5  1003               	clrc
  4296  0FE6  0DCA               	rlf	??_merge1+1,f
  4297  0FE7  3EFF               	addlw	-1
  4298  0FE8  1D03               	skipz
  4299  0FE9  2FE5               	goto	u5655
  4300  0FEA  1003               	clrc
  4301  0FEB  0D4A               	rlf	??_merge1+1,w
  4302  0FEC  0749               	addwf	??_merge1,w
  4303  0FED  00CB               	movwf	??_merge1+2
  4304  0FEE  084B               	movf	??_merge1+2,w
  4305  0FEF  0084               	movwf	4
  4306  0FF0  1383               	bcf	3,7	;select IRP bank0
  4307  0FF1  0180               	clrf	0
  4308  0FF2  0A80               	incf	0,f
  4309  0FF3                     l4149:	
  4310  0FF3  3001               	movlw	1
  4311  0FF4  00C9               	movwf	??_merge1
  4312  0FF5  0849               	movf	??_merge1,w
  4313  0FF6  07D1               	addwf	merge1@col,f
  4314  0FF7  3004               	movlw	4
  4315  0FF8  0251               	subwf	merge1@col,w
  4316  0FF9  1C03               	skipc
  4317  0FFA  2FBD               	goto	l4145
  4318  0FFB                     l4153:	
  4319  0FFB  3001               	movlw	1
  4320  0FFC  00C9               	movwf	??_merge1
  4321  0FFD  0849               	movf	??_merge1,w
  4322  0FFE  07D0               	addwf	merge1@row,f
  4323  0FFF  2FB4               	goto	L3
  4324  1000                     __end_of_merge1:	
  4325                           
  4326                           	psect	text14
  4327  0B23                     __ptext14:	
  4328 ;; *************** function _left_most *****************
  4329 ;; Defined at:
  4330 ;;		line 886 in file "teris_16f886.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  x               1    wreg     char 
  4333 ;;  matrix44        2   11[COMMON] PTR const struct .
  4334 ;;		 -> g_matrix44(384), 
  4335 ;;  matrix88        1   13[COMMON] PTR const struct .
  4336 ;;		 -> g_matrix88(64), 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;  x               1    1[BANK0 ] char 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      char 
  4341 ;; Registers used:
  4342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4348 ;;      Params:         3       0       0       0       0
  4349 ;;      Locals:         0       1       0       0       0
  4350 ;;      Temps:          0       1       0       0       0
  4351 ;;      Totals:         3       2       0       0       0
  4352 ;;Total ram usage:        5 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    2
  4355 ;; This function calls:
  4356 ;;		_is_left_boundary
  4357 ;; This function is called by:
  4358 ;;		_find_best_solution
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           
  4363                           ;psect for function _left_most
  4364  0B23                     _left_most:	
  4365                           
  4366                           ;incstack = 0
  4367                           ; Regs used in _left_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4368                           ;left_most@x stored from wreg
  4369  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  4370  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  4371  0B25  00C5               	movwf	left_most@x
  4372  0B26                     l395:	
  4373                           ;teris_16f886.c: 888: while(1)
  4374                           
  4375                           
  4376                           ;teris_16f886.c: 889: {
  4377                           ;teris_16f886.c: 890: if(is_left_boundary(x, matrix44, matrix88) == LEFT_OVER_BOUNDARY)
  4378  0B26  087B               	movf	left_most@matrix44,w
  4379  0B27  00F0               	movwf	is_left_boundary@matrix44
  4380  0B28  087C               	movf	left_most@matrix44+1,w
  4381  0B29  00F1               	movwf	is_left_boundary@matrix44+1
  4382  0B2A  087D               	movf	left_most@matrix88,w
  4383  0B2B  00C4               	movwf	??_left_most
  4384  0B2C  0844               	movf	??_left_most,w
  4385  0B2D  00F2               	movwf	is_left_boundary@matrix88
  4386  0B2E  0845               	movf	left_most@x,w
  4387  0B2F  120A  158A  2744  120A  158A  	fcall	_is_left_boundary
  4388  0B34  3A02               	xorlw	2
  4389  0B35  1D03               	skipz
  4390  0B36  2B3C               	goto	l2867
  4391                           
  4392                           ;teris_16f886.c: 891: {
  4393                           ;teris_16f886.c: 893: return x + 1;
  4394  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  4395  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  4396  0B39  0845               	movf	left_most@x,w
  4397  0B3A  3E01               	addlw	1
  4398  0B3B  0008               	return
  4399  0B3C                     l2867:	
  4400                           
  4401                           ;teris_16f886.c: 894: }
  4402                           ;teris_16f886.c: 895: x--;
  4403  0B3C  30FF               	movlw	255
  4404  0B3D  1283               	bcf	3,5	;RP0=0, select bank0
  4405  0B3E  1303               	bcf	3,6	;RP1=0, select bank0
  4406  0B3F  00C4               	movwf	??_left_most
  4407  0B40  0844               	movf	??_left_most,w
  4408  0B41  07C5               	addwf	left_most@x,f
  4409  0B42  2B26               	goto	l395
  4410  0B43                     __end_of_left_most:	
  4411                           
  4412                           	psect	text15
  4413  0F44                     __ptext15:	
  4414 ;; *************** function _is_left_boundary *****************
  4415 ;; Defined at:
  4416 ;;		line 741 in file "teris_16f886.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;  x               1    wreg     char 
  4419 ;;  matrix44        2    0[COMMON] PTR const struct .
  4420 ;;		 -> g_matrix44(384), 
  4421 ;;  matrix88        1    2[COMMON] PTR const struct .
  4422 ;;		 -> g_matrix88(64), 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  x               1    8[COMMON] char 
  4425 ;;  col             1   10[COMMON] char 
  4426 ;;  row             1    9[COMMON] char 
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  1    wreg      unsigned char 
  4429 ;; Registers used:
  4430 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4436 ;;      Params:         3       0       0       0       0
  4437 ;;      Locals:         3       0       0       0       0
  4438 ;;      Temps:          5       0       0       0       0
  4439 ;;      Totals:        11       0       0       0       0
  4440 ;;Total ram usage:       11 bytes
  4441 ;; Hardware stack levels used:    2
  4442 ;; This function calls:
  4443 ;;		Nothing
  4444 ;; This function is called by:
  4445 ;;		_left_most
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           
  4450                           ;psect for function _is_left_boundary
  4451  0F44                     _is_left_boundary:	
  4452                           
  4453                           ;incstack = 0
  4454                           ; Regs used in _is_left_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  4455                           ;is_left_boundary@x stored from wreg
  4456  0F44  00F8               	movwf	is_left_boundary@x
  4457                           
  4458                           ;teris_16f886.c: 743: for(int8_t row = 4 - 1; row >= 0; row--)
  4459  0F45  3003               	movlw	3
  4460  0F46  00F3               	movwf	??_is_left_boundary
  4461  0F47  0873               	movf	??_is_left_boundary,w
  4462  0F48  00F9               	movwf	is_left_boundary@row
  4463  0F49  1BF9               	btfsc	is_left_boundary@row,7
  4464  0F4A  2F97               	goto	l2627
  4465  0F4B                     l2605:	
  4466                           
  4467                           ;teris_16f886.c: 744: {
  4468                           ;teris_16f886.c: 745: for(int8_t col = 0; col < 4; col++)
  4469  0F4B  01FA               	clrf	is_left_boundary@col
  4470  0F4C  087A               	movf	is_left_boundary@col,w
  4471  0F4D  3A80               	xorlw	128
  4472  0F4E  3E7C               	addlw	-132
  4473  0F4F  1803               	btfsc	3,0
  4474  0F50  2F91               	goto	l2623
  4475  0F51                     l2611:	
  4476                           
  4477                           ;teris_16f886.c: 746: {
  4478                           ;teris_16f886.c: 747: if(matrix44->data[row][col] == 1)
  4479  0F51  0879               	movf	is_left_boundary@row,w
  4480  0F52  00F3               	movwf	??_is_left_boundary
  4481  0F53  01F4               	clrf	??_is_left_boundary+1
  4482  0F54  1003               	clrc
  4483  0F55  0DF3               	rlf	??_is_left_boundary,f
  4484  0F56  0DF4               	rlf	??_is_left_boundary+1,f
  4485  0F57  1003               	clrc
  4486  0F58  0DF3               	rlf	??_is_left_boundary,f
  4487  0F59  0DF4               	rlf	??_is_left_boundary+1,f
  4488  0F5A  0873               	movf	??_is_left_boundary,w
  4489  0F5B  0770               	addwf	is_left_boundary@matrix44,w
  4490  0F5C  00F5               	movwf	??_is_left_boundary+2
  4491  0F5D  0874               	movf	??_is_left_boundary+1,w
  4492  0F5E  1803               	skipnc
  4493  0F5F  0A74               	incf	??_is_left_boundary+1,w
  4494  0F60  0771               	addwf	is_left_boundary@matrix44+1,w
  4495  0F61  00F6               	movwf	??_is_left_boundary+3
  4496  0F62  087A               	movf	is_left_boundary@col,w
  4497  0F63  0775               	addwf	??_is_left_boundary+2,w
  4498  0F64  0084               	movwf	4
  4499  0F65  0876               	movf	??_is_left_boundary+3,w
  4500  0F66  1803               	skipnc
  4501  0F67  0A76               	incf	??_is_left_boundary+3,w
  4502  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  4503  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  4504  0F6A  00FF               	movwf	127
  4505  0F6B  120A  158A  2000  120A  158A  	fcall	stringtab
  4506  0F70  3A01               	xorlw	1
  4507  0F71  1D03               	skipz
  4508  0F72  2F88               	goto	l2619
  4509                           
  4510                           ;teris_16f886.c: 748: {
  4511                           ;teris_16f886.c: 749: if( x + col < 0)
  4512  0F73  087A               	movf	is_left_boundary@col,w
  4513  0F74  00F3               	movwf	??_is_left_boundary
  4514  0F75  01F4               	clrf	??_is_left_boundary+1
  4515  0F76  1BF3               	btfsc	??_is_left_boundary,7
  4516  0F77  03F4               	decf	??_is_left_boundary+1,f
  4517  0F78  0878               	movf	is_left_boundary@x,w
  4518  0F79  00F5               	movwf	??_is_left_boundary+2
  4519  0F7A  01F6               	clrf	??_is_left_boundary+3
  4520  0F7B  1BF5               	btfsc	??_is_left_boundary+2,7
  4521  0F7C  03F6               	decf	??_is_left_boundary+3,f
  4522  0F7D  0873               	movf	??_is_left_boundary,w
  4523  0F7E  0775               	addwf	??_is_left_boundary+2,w
  4524  0F7F  0876               	movf	??_is_left_boundary+3,w
  4525  0F80  1803               	skipnc
  4526  0F81  0A76               	incf	??_is_left_boundary+3,w
  4527  0F82  0774               	addwf	??_is_left_boundary+1,w
  4528  0F83  00F7               	movwf	??_is_left_boundary+4
  4529  0F84  1FF7               	btfss	??_is_left_boundary+4,7
  4530  0F85  2F88               	goto	l2619
  4531                           
  4532                           ;teris_16f886.c: 750: {
  4533                           ;teris_16f886.c: 752: return LEFT_OVER_BOUNDARY;
  4534  0F86  3002               	movlw	2
  4535  0F87  0008               	return
  4536  0F88                     l2619:	
  4537  0F88  3001               	movlw	1
  4538  0F89  00F3               	movwf	??_is_left_boundary
  4539  0F8A  0873               	movf	??_is_left_boundary,w
  4540  0F8B  07FA               	addwf	is_left_boundary@col,f
  4541  0F8C  087A               	movf	is_left_boundary@col,w
  4542  0F8D  3A80               	xorlw	128
  4543  0F8E  3E7C               	addlw	-132
  4544  0F8F  1C03               	skipc
  4545  0F90  2F51               	goto	l2611
  4546  0F91                     l2623:	
  4547  0F91  30FF               	movlw	255
  4548  0F92  00F3               	movwf	??_is_left_boundary
  4549  0F93  0873               	movf	??_is_left_boundary,w
  4550  0F94  07F9               	addwf	is_left_boundary@row,f
  4551  0F95  1FF9               	btfss	is_left_boundary@row,7
  4552  0F96  2F4B               	goto	l2605
  4553  0F97                     l2627:	
  4554                           
  4555                           ;teris_16f886.c: 753: }
  4556                           ;teris_16f886.c: 754: }
  4557                           ;teris_16f886.c: 755: }
  4558                           ;teris_16f886.c: 756: }
  4559                           ;teris_16f886.c: 757: return OK;
  4560  0F97  3000               	movlw	0
  4561  0F98  0008               	return
  4562  0F99                     __end_of_is_left_boundary:	
  4563                           
  4564                           	psect	text16
  4565  02A6                     __ptext16:	
  4566 ;; *************** function _is_valid *****************
  4567 ;; Defined at:
  4568 ;;		line 707 in file "teris_16f886.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  x               1    wreg     char 
  4571 ;;  y               1    0[COMMON] char 
  4572 ;;  matrix44        2    1[COMMON] PTR const struct .
  4573 ;;		 -> g_matrix44(384), 
  4574 ;;  matrix88        1    3[COMMON] PTR const struct .
  4575 ;;		 -> g_matrix88(64), 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  x               1    8[COMMON] char 
  4578 ;;  col             1   10[COMMON] char 
  4579 ;;  row             1    9[COMMON] char 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      unsigned char 
  4582 ;; Registers used:
  4583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4589 ;;      Params:         4       0       0       0       0
  4590 ;;      Locals:         3       0       0       0       0
  4591 ;;      Temps:          4       0       0       0       0
  4592 ;;      Totals:        11       0       0       0       0
  4593 ;;Total ram usage:       11 bytes
  4594 ;; Hardware stack levels used:    2
  4595 ;; This function calls:
  4596 ;;		Nothing
  4597 ;; This function is called by:
  4598 ;;		_find_best_solution
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           
  4603                           ;psect for function _is_valid
  4604  02A6                     _is_valid:	
  4605                           
  4606                           ;incstack = 0
  4607                           ; Regs used in _is_valid: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  4608                           ;is_valid@x stored from wreg
  4609  02A6  00F8               	movwf	is_valid@x
  4610                           
  4611                           ;teris_16f886.c: 710: for(int8_t row = 4 - 1; row >= 0; row--)
  4612  02A7  3003               	movlw	3
  4613  02A8  00F4               	movwf	??_is_valid
  4614  02A9  0874               	movf	??_is_valid,w
  4615  02AA  00F9               	movwf	is_valid@row
  4616  02AB  1BF9               	btfsc	is_valid@row,7
  4617  02AC  2B37               	goto	l2747
  4618  02AD                     l2711:	
  4619                           
  4620                           ;teris_16f886.c: 711: {
  4621                           ;teris_16f886.c: 712: for(int8_t col = 0; col < 4; col++)
  4622  02AD  01FA               	clrf	is_valid@col
  4623  02AE  087A               	movf	is_valid@col,w
  4624  02AF  3A80               	xorlw	128
  4625  02B0  3E7C               	addlw	-132
  4626  02B1  1803               	btfsc	3,0
  4627  02B2  2B31               	goto	l2743
  4628  02B3                     l2717:	
  4629                           
  4630                           ;teris_16f886.c: 713: {
  4631                           ;teris_16f886.c: 714: if(matrix44->data[row][col] == 1)
  4632  02B3  0879               	movf	is_valid@row,w
  4633  02B4  00F4               	movwf	??_is_valid
  4634  02B5  01F5               	clrf	??_is_valid+1
  4635  02B6  1003               	clrc
  4636  02B7  0DF4               	rlf	??_is_valid,f
  4637  02B8  0DF5               	rlf	??_is_valid+1,f
  4638  02B9  1003               	clrc
  4639  02BA  0DF4               	rlf	??_is_valid,f
  4640  02BB  0DF5               	rlf	??_is_valid+1,f
  4641  02BC  0874               	movf	??_is_valid,w
  4642  02BD  0771               	addwf	is_valid@matrix44,w
  4643  02BE  00F6               	movwf	??_is_valid+2
  4644  02BF  0875               	movf	??_is_valid+1,w
  4645  02C0  1803               	skipnc
  4646  02C1  0A75               	incf	??_is_valid+1,w
  4647  02C2  0772               	addwf	is_valid@matrix44+1,w
  4648  02C3  00F7               	movwf	??_is_valid+3
  4649  02C4  087A               	movf	is_valid@col,w
  4650  02C5  0776               	addwf	??_is_valid+2,w
  4651  02C6  0084               	movwf	4
  4652  02C7  0877               	movf	??_is_valid+3,w
  4653  02C8  1803               	skipnc
  4654  02C9  0A77               	incf	??_is_valid+3,w
  4655  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  4656  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  4657  02CC  00FF               	movwf	127
  4658  02CD  120A  158A  2000  120A  118A  	fcall	stringtab
  4659  02D2  3A01               	xorlw	1
  4660  02D3  1D03               	skipz
  4661  02D4  2B28               	goto	l2739
  4662                           
  4663                           ;teris_16f886.c: 715: {
  4664                           ;teris_16f886.c: 716: if(matrix88->data[y + row][x + col] == 1)
  4665  02D5  087A               	movf	is_valid@col,w
  4666  02D6  0778               	addwf	is_valid@x,w
  4667  02D7  0773               	addwf	is_valid@matrix88,w
  4668  02D8  00F4               	movwf	??_is_valid
  4669  02D9  0879               	movf	is_valid@row,w
  4670  02DA  0770               	addwf	is_valid@y,w
  4671  02DB  00F5               	movwf	??_is_valid+1
  4672  02DC  3002               	movlw	2
  4673  02DD                     u2945:	
  4674  02DD  1003               	clrc
  4675  02DE  0DF5               	rlf	??_is_valid+1,f
  4676  02DF  3EFF               	addlw	-1
  4677  02E0  1D03               	skipz
  4678  02E1  2ADD               	goto	u2945
  4679  02E2  1003               	clrc
  4680  02E3  0D75               	rlf	??_is_valid+1,w
  4681  02E4  0774               	addwf	??_is_valid,w
  4682  02E5  00F6               	movwf	??_is_valid+2
  4683  02E6  0876               	movf	??_is_valid+2,w
  4684  02E7  0084               	movwf	4
  4685  02E8  1783               	bsf	3,7	;select IRP bank2
  4686  02E9  0300               	decf	0,w
  4687  02EA  1D03               	btfss	3,2
  4688  02EB  2AEE               	goto	l2725
  4689                           
  4690                           ;teris_16f886.c: 717: {
  4691                           ;teris_16f886.c: 720: return 0;
  4692  02EC  3000               	movlw	0
  4693  02ED  0008               	return
  4694  02EE                     l2725:	
  4695                           
  4696                           ;teris_16f886.c: 721: }
  4697                           ;teris_16f886.c: 723: if(( x + col < 0) || (x + col >= 8))
  4698  02EE  0878               	movf	is_valid@x,w
  4699  02EF  077A               	addwf	is_valid@col,w
  4700  02F0  00F4               	movwf	??_is_valid
  4701  02F1  01F5               	clrf	??_is_valid+1
  4702  02F2  1803               	skipnc
  4703  02F3  0AF5               	incf	??_is_valid+1,f
  4704  02F4  1BF8               	btfsc	is_valid@x,7
  4705  02F5  03F5               	decf	??_is_valid+1,f
  4706  02F6  1BFA               	btfsc	is_valid@col,7
  4707  02F7  03F5               	decf	??_is_valid+1,f
  4708  02F8  1BF5               	btfsc	??_is_valid+1,7
  4709  02F9  2B0F               	goto	l2729
  4710  02FA  0878               	movf	is_valid@x,w
  4711  02FB  077A               	addwf	is_valid@col,w
  4712  02FC  00F4               	movwf	??_is_valid
  4713  02FD  01F5               	clrf	??_is_valid+1
  4714  02FE  1803               	skipnc
  4715  02FF  0AF5               	incf	??_is_valid+1,f
  4716  0300  1BF8               	btfsc	is_valid@x,7
  4717  0301  03F5               	decf	??_is_valid+1,f
  4718  0302  1BFA               	btfsc	is_valid@col,7
  4719  0303  03F5               	decf	??_is_valid+1,f
  4720  0304  0875               	movf	??_is_valid+1,w
  4721  0305  3A80               	xorlw	128
  4722  0306  00FF               	movwf	127
  4723  0307  3080               	movlw	128
  4724  0308  027F               	subwf	127,w
  4725  0309  1D03               	skipz
  4726  030A  2B0D               	goto	u2995
  4727  030B  3008               	movlw	8
  4728  030C  0274               	subwf	??_is_valid,w
  4729  030D                     u2995:	
  4730  030D  1C03               	skipc
  4731  030E  2B11               	goto	l2733
  4732  030F                     l2729:	
  4733                           
  4734                           ;teris_16f886.c: 724: {
  4735                           ;teris_16f886.c: 727: return 0;
  4736  030F  3000               	movlw	0
  4737  0310  0008               	return
  4738  0311                     l2733:	
  4739                           
  4740                           ;teris_16f886.c: 728: }
  4741                           ;teris_16f886.c: 729: if((y + row) > (8 - 1))
  4742  0311  0870               	movf	is_valid@y,w
  4743  0312  0779               	addwf	is_valid@row,w
  4744  0313  00F4               	movwf	??_is_valid
  4745  0314  01F5               	clrf	??_is_valid+1
  4746  0315  1803               	skipnc
  4747  0316  0AF5               	incf	??_is_valid+1,f
  4748  0317  1BF0               	btfsc	is_valid@y,7
  4749  0318  03F5               	decf	??_is_valid+1,f
  4750  0319  1BF9               	btfsc	is_valid@row,7
  4751  031A  03F5               	decf	??_is_valid+1,f
  4752  031B  0875               	movf	??_is_valid+1,w
  4753  031C  3A80               	xorlw	128
  4754  031D  00FF               	movwf	127
  4755  031E  3080               	movlw	128
  4756  031F  027F               	subwf	127,w
  4757  0320  1D03               	skipz
  4758  0321  2B24               	goto	u3015
  4759  0322  3008               	movlw	8
  4760  0323  0274               	subwf	??_is_valid,w
  4761  0324                     u3015:	
  4762  0324  1C03               	skipc
  4763  0325  2B28               	goto	l2739
  4764                           
  4765                           ;teris_16f886.c: 730: {
  4766                           ;teris_16f886.c: 733: return 0;
  4767  0326  3000               	movlw	0
  4768  0327  0008               	return
  4769  0328                     l2739:	
  4770  0328  3001               	movlw	1
  4771  0329  00F4               	movwf	??_is_valid
  4772  032A  0874               	movf	??_is_valid,w
  4773  032B  07FA               	addwf	is_valid@col,f
  4774  032C  087A               	movf	is_valid@col,w
  4775  032D  3A80               	xorlw	128
  4776  032E  3E7C               	addlw	-132
  4777  032F  1C03               	skipc
  4778  0330  2AB3               	goto	l2717
  4779  0331                     l2743:	
  4780  0331  30FF               	movlw	255
  4781  0332  00F4               	movwf	??_is_valid
  4782  0333  0874               	movf	??_is_valid,w
  4783  0334  07F9               	addwf	is_valid@row,f
  4784  0335  1FF9               	btfss	is_valid@row,7
  4785  0336  2AAD               	goto	l2711
  4786  0337                     l2747:	
  4787                           
  4788                           ;teris_16f886.c: 734: }
  4789                           ;teris_16f886.c: 735: }
  4790                           ;teris_16f886.c: 736: }
  4791                           ;teris_16f886.c: 737: }
  4792                           ;teris_16f886.c: 739: return 1;
  4793  0337  3001               	movlw	1
  4794  0338  0008               	return
  4795  0339                     __end_of_is_valid:	
  4796                           
  4797                           	psect	text17
  4798  0339                     __ptext17:	
  4799 ;; *************** function _get_holes_after_merge *****************
  4800 ;; Defined at:
  4801 ;;		line 939 in file "teris_16f886.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  matrix          1    wreg     PTR struct .
  4804 ;;		 -> find_best_solution@temp_matrix88(64), 
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;  matrix          1    9[COMMON] PTR struct .
  4807 ;;		 -> find_best_solution@temp_matrix88(64), 
  4808 ;;  row             1   11[COMMON] char 
  4809 ;;  col             1   10[COMMON] char 
  4810 ;;  start           1    8[COMMON] char 
  4811 ;;  stop            1    7[COMMON] char 
  4812 ;;  num_hole        1    6[COMMON] unsigned char 
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  1    wreg      unsigned char 
  4815 ;; Registers used:
  4816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4822 ;;      Params:         0       0       0       0       0
  4823 ;;      Locals:         6       0       0       0       0
  4824 ;;      Temps:          6       0       0       0       0
  4825 ;;      Totals:        12       0       0       0       0
  4826 ;;Total ram usage:       12 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; This function calls:
  4829 ;;		Nothing
  4830 ;; This function is called by:
  4831 ;;		_find_best_solution
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           
  4836                           ;psect for function _get_holes_after_merge
  4837  0339                     _get_holes_after_merge:	
  4838                           
  4839                           ;incstack = 0
  4840                           ; Regs used in _get_holes_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1]
  4841                           ;get_holes_after_merge@matrix stored from wreg
  4842  0339  00F9               	movwf	get_holes_after_merge@matrix
  4843                           
  4844                           ;teris_16f886.c: 941: int8_t start = -1;
  4845  033A  01F8               	clrf	get_holes_after_merge@start
  4846  033B  03F8               	decf	get_holes_after_merge@start,f
  4847                           
  4848                           ;teris_16f886.c: 942: int8_t stop = -1;
  4849  033C  01F7               	clrf	get_holes_after_merge@stop
  4850  033D  03F7               	decf	get_holes_after_merge@stop,f
  4851                           
  4852                           ;teris_16f886.c: 943: uint8_t num_hole = 0;
  4853  033E  01F6               	clrf	get_holes_after_merge@num_hole
  4854                           
  4855                           ;teris_16f886.c: 944: for(int8_t col = 0; col < 8; col++)
  4856  033F  01FA               	clrf	get_holes_after_merge@col
  4857  0340  087A               	movf	get_holes_after_merge@col,w
  4858  0341  3A80               	xorlw	128
  4859  0342  3E78               	addlw	-136
  4860  0343  1803               	btfsc	3,0
  4861  0344  2C44               	goto	l2993
  4862  0345                     l2931:	
  4863                           
  4864                           ;teris_16f886.c: 945: {
  4865                           ;teris_16f886.c: 946: start = stop = -1;
  4866  0345  30FF               	movlw	255
  4867  0346  00F7               	movwf	get_holes_after_merge@stop
  4868  0347  00F0               	movwf	??_get_holes_after_merge
  4869  0348  0870               	movf	??_get_holes_after_merge,w
  4870  0349  00F8               	movwf	get_holes_after_merge@start
  4871                           
  4872                           ;teris_16f886.c: 947: for(int8_t row = 0; row < 8; row++)
  4873  034A  01FB               	clrf	get_holes_after_merge@row
  4874  034B  087B               	movf	get_holes_after_merge@row,w
  4875  034C  3A80               	xorlw	128
  4876  034D  3E78               	addlw	-136
  4877  034E  1803               	btfsc	3,0
  4878  034F  2C12               	goto	l426
  4879  0350                     l2939:	
  4880                           
  4881                           ;teris_16f886.c: 948: {
  4882                           ;teris_16f886.c: 949: if(col == 0)
  4883  0350  087A               	movf	get_holes_after_merge@col,w
  4884  0351  1D03               	btfss	3,2
  4885  0352  2B75               	goto	l2949
  4886                           
  4887                           ;teris_16f886.c: 950: {
  4888                           ;teris_16f886.c: 951: if((matrix->data[row][col] == 0) && (matrix->data[row][col + 1] ==
      +                           1))
  4889  0353  087B               	movf	get_holes_after_merge@row,w
  4890  0354  00F0               	movwf	??_get_holes_after_merge
  4891  0355  3002               	movlw	2
  4892  0356                     u3435:	
  4893  0356  1003               	clrc
  4894  0357  0DF0               	rlf	??_get_holes_after_merge,f
  4895  0358  3EFF               	addlw	-1
  4896  0359  1D03               	skipz
  4897  035A  2B56               	goto	u3435
  4898  035B  1003               	clrc
  4899  035C  0D70               	rlf	??_get_holes_after_merge,w
  4900  035D  0779               	addwf	get_holes_after_merge@matrix,w
  4901  035E  00F1               	movwf	??_get_holes_after_merge+1
  4902  035F  087A               	movf	get_holes_after_merge@col,w
  4903  0360  0771               	addwf	??_get_holes_after_merge+1,w
  4904  0361  00F2               	movwf	??_get_holes_after_merge+2
  4905  0362  0872               	movf	??_get_holes_after_merge+2,w
  4906  0363  0084               	movwf	4
  4907  0364  1383               	bcf	3,7	;select IRP bank0
  4908  0365  0800               	movf	0,w
  4909  0366  1D03               	btfss	3,2
  4910  0367  2BE1               	goto	l2969
  4911  0368  087A               	movf	get_holes_after_merge@col,w
  4912  0369  3E01               	addlw	1
  4913  036A  0779               	addwf	get_holes_after_merge@matrix,w
  4914  036B  00F0               	movwf	??_get_holes_after_merge
  4915  036C  087B               	movf	get_holes_after_merge@row,w
  4916  036D  00F1               	movwf	??_get_holes_after_merge+1
  4917  036E  3002               	movlw	2
  4918  036F                     u3455:	
  4919  036F  1003               	clrc
  4920  0370  0DF1               	rlf	??_get_holes_after_merge+1,f
  4921  0371  3EFF               	addlw	-1
  4922  0372  1D03               	skipz
  4923  0373  2B6F               	goto	u3455
  4924  0374  2BD1               	goto	L5
  4925  0375                     l2949:	
  4926                           ;teris_16f886.c: 956: }
  4927                           ;teris_16f886.c: 957: }
  4928                           ;teris_16f886.c: 958: }
  4929                           
  4930                           ;teris_16f886.c: 954: {
  4931                           ;teris_16f886.c: 955: start = row;
  4932                           
  4933                           ;teris_16f886.c: 952: {
  4934                           ;teris_16f886.c: 953: if(start == -1)
  4935                           
  4936                           
  4937                           ;teris_16f886.c: 959: else if(col == 8 - 1)
  4938  0375  3007               	movlw	7
  4939  0376  067A               	xorwf	get_holes_after_merge@col,w
  4940  0377  1D03               	btfss	3,2
  4941  0378  2B9B               	goto	l2959
  4942                           
  4943                           ;teris_16f886.c: 960: {
  4944                           ;teris_16f886.c: 961: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] ==
      +                           1))
  4945  0379  087B               	movf	get_holes_after_merge@row,w
  4946  037A  00F0               	movwf	??_get_holes_after_merge
  4947  037B  3002               	movlw	2
  4948  037C                     u3495:	
  4949  037C  1003               	clrc
  4950  037D  0DF0               	rlf	??_get_holes_after_merge,f
  4951  037E  3EFF               	addlw	-1
  4952  037F  1D03               	skipz
  4953  0380  2B7C               	goto	u3495
  4954  0381  1003               	clrc
  4955  0382  0D70               	rlf	??_get_holes_after_merge,w
  4956  0383  0779               	addwf	get_holes_after_merge@matrix,w
  4957  0384  00F1               	movwf	??_get_holes_after_merge+1
  4958  0385  087A               	movf	get_holes_after_merge@col,w
  4959  0386  0771               	addwf	??_get_holes_after_merge+1,w
  4960  0387  00F2               	movwf	??_get_holes_after_merge+2
  4961  0388  0872               	movf	??_get_holes_after_merge+2,w
  4962  0389  0084               	movwf	4
  4963  038A  1383               	bcf	3,7	;select IRP bank0
  4964  038B  0800               	movf	0,w
  4965  038C  1D03               	btfss	3,2
  4966  038D  2BE1               	goto	l2969
  4967  038E  087A               	movf	get_holes_after_merge@col,w
  4968  038F  3EFF               	addlw	255
  4969  0390  0779               	addwf	get_holes_after_merge@matrix,w
  4970  0391  00F0               	movwf	??_get_holes_after_merge
  4971  0392  087B               	movf	get_holes_after_merge@row,w
  4972  0393  00F1               	movwf	??_get_holes_after_merge+1
  4973  0394  3002               	movlw	2
  4974  0395                     u3515:	
  4975  0395  1003               	clrc
  4976  0396  0DF1               	rlf	??_get_holes_after_merge+1,f
  4977  0397  3EFF               	addlw	-1
  4978  0398  1D03               	skipz
  4979  0399  2B95               	goto	u3515
  4980  039A  2BD1               	goto	L5
  4981  039B                     l2959:	
  4982                           ;teris_16f886.c: 966: }
  4983                           ;teris_16f886.c: 967: }
  4984                           ;teris_16f886.c: 968: }
  4985                           
  4986                           ;teris_16f886.c: 964: {
  4987                           ;teris_16f886.c: 965: start = row;
  4988                           
  4989                           ;teris_16f886.c: 962: {
  4990                           ;teris_16f886.c: 963: if(start == -1)
  4991                           
  4992                           
  4993                           ;teris_16f886.c: 969: else
  4994                           ;teris_16f886.c: 970: {
  4995                           ;teris_16f886.c: 971: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] ==
      +                           1) && (matrix->data[row][col + 1] == 1))
  4996  039B  087B               	movf	get_holes_after_merge@row,w
  4997  039C  00F0               	movwf	??_get_holes_after_merge
  4998  039D  3002               	movlw	2
  4999  039E                     u3545:	
  5000  039E  1003               	clrc
  5001  039F  0DF0               	rlf	??_get_holes_after_merge,f
  5002  03A0  3EFF               	addlw	-1
  5003  03A1  1D03               	skipz
  5004  03A2  2B9E               	goto	u3545
  5005  03A3  1003               	clrc
  5006  03A4  0D70               	rlf	??_get_holes_after_merge,w
  5007  03A5  0779               	addwf	get_holes_after_merge@matrix,w
  5008  03A6  00F1               	movwf	??_get_holes_after_merge+1
  5009  03A7  087A               	movf	get_holes_after_merge@col,w
  5010  03A8  0771               	addwf	??_get_holes_after_merge+1,w
  5011  03A9  00F2               	movwf	??_get_holes_after_merge+2
  5012  03AA  0872               	movf	??_get_holes_after_merge+2,w
  5013  03AB  0084               	movwf	4
  5014  03AC  1383               	bcf	3,7	;select IRP bank0
  5015  03AD  0800               	movf	0,w
  5016  03AE  1D03               	btfss	3,2
  5017  03AF  2BE1               	goto	l2969
  5018  03B0  087A               	movf	get_holes_after_merge@col,w
  5019  03B1  3EFF               	addlw	255
  5020  03B2  0779               	addwf	get_holes_after_merge@matrix,w
  5021  03B3  00F0               	movwf	??_get_holes_after_merge
  5022  03B4  087B               	movf	get_holes_after_merge@row,w
  5023  03B5  00F1               	movwf	??_get_holes_after_merge+1
  5024  03B6  3002               	movlw	2
  5025  03B7                     u3565:	
  5026  03B7  1003               	clrc
  5027  03B8  0DF1               	rlf	??_get_holes_after_merge+1,f
  5028  03B9  3EFF               	addlw	-1
  5029  03BA  1D03               	skipz
  5030  03BB  2BB7               	goto	u3565
  5031  03BC  1003               	clrc
  5032  03BD  0D71               	rlf	??_get_holes_after_merge+1,w
  5033  03BE  0770               	addwf	??_get_holes_after_merge,w
  5034  03BF  00F2               	movwf	??_get_holes_after_merge+2
  5035  03C0  0872               	movf	??_get_holes_after_merge+2,w
  5036  03C1  0084               	movwf	4
  5037  03C2  0300               	decf	0,w
  5038  03C3  1D03               	btfss	3,2
  5039  03C4  2BE1               	goto	l2969
  5040  03C5  087A               	movf	get_holes_after_merge@col,w
  5041  03C6  3E01               	addlw	1
  5042  03C7  0779               	addwf	get_holes_after_merge@matrix,w
  5043  03C8  00F0               	movwf	??_get_holes_after_merge
  5044  03C9  087B               	movf	get_holes_after_merge@row,w
  5045  03CA  00F1               	movwf	??_get_holes_after_merge+1
  5046  03CB  3002               	movlw	2
  5047  03CC                     u3585:	
  5048  03CC  1003               	clrc
  5049  03CD  0DF1               	rlf	??_get_holes_after_merge+1,f
  5050  03CE  3EFF               	addlw	-1
  5051  03CF  1D03               	skipz
  5052  03D0  2BCC               	goto	u3585
  5053  03D1                     L5:	
  5054  03D1  1003               	clrc
  5055  03D2  0D71               	rlf	??_get_holes_after_merge+1,w
  5056  03D3  0770               	addwf	??_get_holes_after_merge,w
  5057  03D4  00F2               	movwf	??_get_holes_after_merge+2
  5058  03D5  0872               	movf	??_get_holes_after_merge+2,w
  5059  03D6  0084               	movwf	4
  5060  03D7  0300               	decf	0,w
  5061  03D8  1D03               	btfss	3,2
  5062  03D9  2BE1               	goto	l2969
  5063                           
  5064                           ;teris_16f886.c: 972: {
  5065                           ;teris_16f886.c: 973: if(start == -1)
  5066  03DA  0A78               	incf	get_holes_after_merge@start,w
  5067  03DB  1D03               	btfss	3,2
  5068  03DC  2BE1               	goto	l2969
  5069                           
  5070                           ;teris_16f886.c: 974: {
  5071                           ;teris_16f886.c: 975: start = row;
  5072  03DD  087B               	movf	get_holes_after_merge@row,w
  5073  03DE  00F0               	movwf	??_get_holes_after_merge
  5074  03DF  0870               	movf	??_get_holes_after_merge,w
  5075  03E0  00F8               	movwf	get_holes_after_merge@start
  5076  03E1                     l2969:	
  5077                           
  5078                           ;teris_16f886.c: 976: }
  5079                           ;teris_16f886.c: 977: }
  5080                           ;teris_16f886.c: 978: }
  5081                           ;teris_16f886.c: 979: if(start >= 0)
  5082  03E1  1BF8               	btfsc	get_holes_after_merge@start,7
  5083  03E2  2C09               	goto	l437
  5084                           
  5085                           ;teris_16f886.c: 980: {
  5086                           ;teris_16f886.c: 981: if(row == 8 - 1)
  5087  03E3  3007               	movlw	7
  5088  03E4  067B               	xorwf	get_holes_after_merge@row,w
  5089  03E5  1D03               	btfss	3,2
  5090  03E6  2BEC               	goto	l2977
  5091                           
  5092                           ;teris_16f886.c: 982: {
  5093                           ;teris_16f886.c: 983: if(stop == -1)
  5094  03E7  0A77               	incf	get_holes_after_merge@stop,w
  5095  03E8  1D03               	btfss	3,2
  5096  03E9  2C09               	goto	l437
  5097                           
  5098                           ;teris_16f886.c: 984: {
  5099                           ;teris_16f886.c: 985: stop = 8;
  5100  03EA  3008               	movlw	8
  5101  03EB  2C06               	goto	L4
  5102  03EC                     l2977:	
  5103                           ;teris_16f886.c: 986: }
  5104                           ;teris_16f886.c: 987: }
  5105                           
  5106                           
  5107                           ;teris_16f886.c: 988: else if(matrix->data[row + 1][col] == 1)
  5108  03EC  087B               	movf	get_holes_after_merge@row,w
  5109  03ED  00F0               	movwf	??_get_holes_after_merge
  5110  03EE  3002               	movlw	2
  5111  03EF                     u3645:	
  5112  03EF  1003               	clrc
  5113  03F0  0DF0               	rlf	??_get_holes_after_merge,f
  5114  03F1  3EFF               	addlw	-1
  5115  03F2  1D03               	skipz
  5116  03F3  2BEF               	goto	u3645
  5117  03F4  1003               	clrc
  5118  03F5  0D70               	rlf	??_get_holes_after_merge,w
  5119  03F6  3E08               	addlw	8
  5120  03F7  0779               	addwf	get_holes_after_merge@matrix,w
  5121  03F8  00F1               	movwf	??_get_holes_after_merge+1
  5122  03F9  087A               	movf	get_holes_after_merge@col,w
  5123  03FA  0771               	addwf	??_get_holes_after_merge+1,w
  5124  03FB  00F2               	movwf	??_get_holes_after_merge+2
  5125  03FC  0872               	movf	??_get_holes_after_merge+2,w
  5126  03FD  0084               	movwf	4
  5127  03FE  0300               	decf	0,w
  5128  03FF  1D03               	btfss	3,2
  5129  0400  2C09               	goto	l437
  5130                           
  5131                           ;teris_16f886.c: 989: {
  5132                           ;teris_16f886.c: 990: if(stop == -1)
  5133  0401  0A77               	incf	get_holes_after_merge@stop,w
  5134  0402  1D03               	btfss	3,2
  5135  0403  2C09               	goto	l437
  5136                           
  5137                           ;teris_16f886.c: 991: {
  5138                           ;teris_16f886.c: 992: stop = row + 1;
  5139  0404  087B               	movf	get_holes_after_merge@row,w
  5140  0405  3E01               	addlw	1
  5141  0406                     L4:	
  5142  0406  00F0               	movwf	??_get_holes_after_merge
  5143  0407  0870               	movf	??_get_holes_after_merge,w
  5144  0408  00F7               	movwf	get_holes_after_merge@stop
  5145  0409                     l437:	
  5146  0409  3001               	movlw	1
  5147  040A  00F0               	movwf	??_get_holes_after_merge
  5148  040B  0870               	movf	??_get_holes_after_merge,w
  5149  040C  07FB               	addwf	get_holes_after_merge@row,f
  5150  040D  087B               	movf	get_holes_after_merge@row,w
  5151  040E  3A80               	xorlw	128
  5152  040F  3E78               	addlw	-136
  5153  0410  1C03               	skipc
  5154  0411  2B50               	goto	l2939
  5155  0412                     l426:	
  5156                           
  5157                           ;teris_16f886.c: 993: }
  5158                           ;teris_16f886.c: 994: }
  5159                           ;teris_16f886.c: 995: }
  5160                           ;teris_16f886.c: 997: }
  5161                           ;teris_16f886.c: 998: if((start >= 0) && (stop >= 0) && (stop - start >= 3))
  5162  0412  1FF8               	btfss	get_holes_after_merge@start,7
  5163  0413  1BF7               	btfsc	get_holes_after_merge@stop,7
  5164  0414  2C3B               	goto	l443
  5165  0415  0878               	movf	get_holes_after_merge@start,w
  5166  0416  00F0               	movwf	??_get_holes_after_merge
  5167  0417  01F1               	clrf	??_get_holes_after_merge+1
  5168  0418  1BF0               	btfsc	??_get_holes_after_merge,7
  5169  0419  03F1               	decf	??_get_holes_after_merge+1,f
  5170  041A  09F0               	comf	??_get_holes_after_merge,f
  5171  041B  09F1               	comf	??_get_holes_after_merge+1,f
  5172  041C  0AF0               	incf	??_get_holes_after_merge,f
  5173  041D  1903               	skipnz
  5174  041E  0AF1               	incf	??_get_holes_after_merge+1,f
  5175  041F  0877               	movf	get_holes_after_merge@stop,w
  5176  0420  00F2               	movwf	??_get_holes_after_merge+2
  5177  0421  01F3               	clrf	??_get_holes_after_merge+3
  5178  0422  1BF2               	btfsc	??_get_holes_after_merge+2,7
  5179  0423  03F3               	decf	??_get_holes_after_merge+3,f
  5180  0424  0870               	movf	??_get_holes_after_merge,w
  5181  0425  0772               	addwf	??_get_holes_after_merge+2,w
  5182  0426  00F4               	movwf	??_get_holes_after_merge+4
  5183  0427  0871               	movf	??_get_holes_after_merge+1,w
  5184  0428  1803               	skipnc
  5185  0429  0A71               	incf	??_get_holes_after_merge+1,w
  5186  042A  0773               	addwf	??_get_holes_after_merge+3,w
  5187  042B  00F5               	movwf	??_get_holes_after_merge+5
  5188  042C  0875               	movf	??_get_holes_after_merge+5,w
  5189  042D  3A80               	xorlw	128
  5190  042E  00FF               	movwf	127
  5191  042F  3080               	movlw	128
  5192  0430  027F               	subwf	127,w
  5193  0431  1D03               	skipz
  5194  0432  2C35               	goto	u3705
  5195  0433  3003               	movlw	3
  5196  0434  0274               	subwf	??_get_holes_after_merge+4,w
  5197  0435                     u3705:	
  5198  0435  1C03               	skipc
  5199  0436  2C3B               	goto	l443
  5200                           
  5201                           ;teris_16f886.c: 999: {
  5202                           ;teris_16f886.c: 1003: num_hole++;
  5203  0437  3001               	movlw	1
  5204  0438  00F0               	movwf	??_get_holes_after_merge
  5205  0439  0870               	movf	??_get_holes_after_merge,w
  5206  043A  07F6               	addwf	get_holes_after_merge@num_hole,f
  5207  043B                     l443:	
  5208  043B  3001               	movlw	1
  5209  043C  00F0               	movwf	??_get_holes_after_merge
  5210  043D  0870               	movf	??_get_holes_after_merge,w
  5211  043E  07FA               	addwf	get_holes_after_merge@col,f
  5212  043F  087A               	movf	get_holes_after_merge@col,w
  5213  0440  3A80               	xorlw	128
  5214  0441  3E78               	addlw	-136
  5215  0442  1C03               	skipc
  5216  0443  2B45               	goto	l2931
  5217  0444                     l2993:	
  5218                           
  5219                           ;teris_16f886.c: 1004: }
  5220                           ;teris_16f886.c: 1005: }
  5221                           ;teris_16f886.c: 1007: return num_hole;
  5222  0444  0876               	movf	get_holes_after_merge@num_hole,w
  5223  0445  0008               	return
  5224  0446                     __end_of_get_holes_after_merge:	
  5225                           
  5226                           	psect	text18
  5227  0CEE                     __ptext18:	
  5228 ;; *************** function _get_high_after_merge *****************
  5229 ;; Defined at:
  5230 ;;		line 922 in file "teris_16f886.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;  y               1    wreg     char 
  5233 ;;  matrix          2    0[COMMON] PTR struct .
  5234 ;;		 -> g_matrix44(384), 
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;  y               1    6[COMMON] char 
  5237 ;;  col             1    7[COMMON] char 
  5238 ;;  row             1    8[COMMON] char 
  5239 ;; Return value:  Size  Location     Type
  5240 ;;                  1    wreg      unsigned char 
  5241 ;; Registers used:
  5242 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5248 ;;      Params:         2       0       0       0       0
  5249 ;;      Locals:         3       0       0       0       0
  5250 ;;      Temps:          4       0       0       0       0
  5251 ;;      Totals:         9       0       0       0       0
  5252 ;;Total ram usage:        9 bytes
  5253 ;; Hardware stack levels used:    2
  5254 ;; This function calls:
  5255 ;;		Nothing
  5256 ;; This function is called by:
  5257 ;;		_find_best_solution
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           
  5262                           ;psect for function _get_high_after_merge
  5263  0CEE                     _get_high_after_merge:	
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in _get_high_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5267                           ;get_high_after_merge@y stored from wreg
  5268  0CEE  00F6               	movwf	get_high_after_merge@y
  5269                           
  5270                           ;teris_16f886.c: 925: for(int8_t row = 0; row < 4; row++)
  5271  0CEF  01F8               	clrf	get_high_after_merge@row
  5272  0CF0                     L6:	
  5273  0CF0  0878               	movf	get_high_after_merge@row,w
  5274  0CF1  3A80               	xorlw	128
  5275  0CF2  3E7C               	addlw	-132
  5276  0CF3  1803               	btfsc	3,0
  5277  0CF4  0008               	return
  5278                           
  5279                           ;teris_16f886.c: 926: {
  5280                           ;teris_16f886.c: 927: for(int8_t col = 0; col < 4; col++)
  5281  0CF5  01F7               	clrf	get_high_after_merge@col
  5282  0CF6  0877               	movf	get_high_after_merge@col,w
  5283  0CF7  3A80               	xorlw	128
  5284  0CF8  3E7C               	addlw	-132
  5285  0CF9  1803               	btfsc	3,0
  5286  0CFA  2D2C               	goto	l2919
  5287  0CFB                     l2909:	
  5288                           
  5289                           ;teris_16f886.c: 928: {
  5290                           ;teris_16f886.c: 929: if(matrix->data[row][col] == 1)
  5291  0CFB  0878               	movf	get_high_after_merge@row,w
  5292  0CFC  00F2               	movwf	??_get_high_after_merge
  5293  0CFD  01F3               	clrf	??_get_high_after_merge+1
  5294  0CFE  1003               	clrc
  5295  0CFF  0DF2               	rlf	??_get_high_after_merge,f
  5296  0D00  0DF3               	rlf	??_get_high_after_merge+1,f
  5297  0D01  1003               	clrc
  5298  0D02  0DF2               	rlf	??_get_high_after_merge,f
  5299  0D03  0DF3               	rlf	??_get_high_after_merge+1,f
  5300  0D04  0872               	movf	??_get_high_after_merge,w
  5301  0D05  0770               	addwf	get_high_after_merge@matrix,w
  5302  0D06  00F4               	movwf	??_get_high_after_merge+2
  5303  0D07  0873               	movf	??_get_high_after_merge+1,w
  5304  0D08  1803               	skipnc
  5305  0D09  0A73               	incf	??_get_high_after_merge+1,w
  5306  0D0A  0771               	addwf	get_high_after_merge@matrix+1,w
  5307  0D0B  00F5               	movwf	??_get_high_after_merge+3
  5308  0D0C  0877               	movf	get_high_after_merge@col,w
  5309  0D0D  0774               	addwf	??_get_high_after_merge+2,w
  5310  0D0E  0084               	movwf	4
  5311  0D0F  0875               	movf	??_get_high_after_merge+3,w
  5312  0D10  1803               	skipnc
  5313  0D11  0A75               	incf	??_get_high_after_merge+3,w
  5314  0D12  1283               	bcf	3,5	;RP0=0, select bank0
  5315  0D13  1303               	bcf	3,6	;RP1=0, select bank0
  5316  0D14  00FF               	movwf	127
  5317  0D15  120A  158A  2000  120A  158A  	fcall	stringtab
  5318  0D1A  3A01               	xorlw	1
  5319  0D1B  1D03               	skipz
  5320  0D1C  2D23               	goto	l2915
  5321                           
  5322                           ;teris_16f886.c: 930: {
  5323                           ;teris_16f886.c: 934: return (uint8_t)(8 - y - row);
  5324  0D1D  0878               	movf	get_high_after_merge@row,w
  5325  0D1E  0776               	addwf	get_high_after_merge@y,w
  5326  0D1F  3AFF               	xorlw	255
  5327  0D20  3E01               	addlw	1
  5328  0D21  3E08               	addlw	8
  5329  0D22  0008               	return
  5330  0D23                     l2915:	
  5331  0D23  3001               	movlw	1
  5332  0D24  00F2               	movwf	??_get_high_after_merge
  5333  0D25  0872               	movf	??_get_high_after_merge,w
  5334  0D26  07F7               	addwf	get_high_after_merge@col,f
  5335  0D27  0877               	movf	get_high_after_merge@col,w
  5336  0D28  3A80               	xorlw	128
  5337  0D29  3E7C               	addlw	-132
  5338  0D2A  1C03               	skipc
  5339  0D2B  2CFB               	goto	l2909
  5340  0D2C                     l2919:	
  5341  0D2C  3001               	movlw	1
  5342  0D2D  00F2               	movwf	??_get_high_after_merge
  5343  0D2E  0872               	movf	??_get_high_after_merge,w
  5344  0D2F  07F8               	addwf	get_high_after_merge@row,f
  5345  0D30  2CF0               	goto	L6
  5346  0D31                     __end_of_get_high_after_merge:	
  5347                           
  5348                           	psect	text19
  5349  0B63                     __ptext19:	
  5350 ;; *************** function _get_high *****************
  5351 ;; Defined at:
  5352 ;;		line 910 in file "teris_16f886.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;  matrix          1    wreg     PTR struct .
  5355 ;;		 -> g_matrix88(64), 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  matrix          1    7[COMMON] PTR struct .
  5358 ;;		 -> g_matrix88(64), 
  5359 ;;  row             1    8[COMMON] char 
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      unsigned char 
  5362 ;; Registers used:
  5363 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5369 ;;      Params:         0       0       0       0       0
  5370 ;;      Locals:         2       0       0       0       0
  5371 ;;      Temps:          1       0       0       0       0
  5372 ;;      Totals:         3       0       0       0       0
  5373 ;;Total ram usage:        3 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    1
  5376 ;; This function calls:
  5377 ;;		_is_row_empty
  5378 ;; This function is called by:
  5379 ;;		_find_best_solution
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           
  5384                           ;psect for function _get_high
  5385  0B63                     _get_high:	
  5386                           
  5387                           ;incstack = 0
  5388                           ; Regs used in _get_high: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5389                           ;get_high@matrix stored from wreg
  5390  0B63  00F7               	movwf	get_high@matrix
  5391                           
  5392                           ;teris_16f886.c: 912: for(int8_t row = 8 - 1; row >= 0; row--)
  5393  0B64  3007               	movlw	7
  5394  0B65  00F6               	movwf	??_get_high
  5395  0B66  0876               	movf	??_get_high,w
  5396  0B67  00F8               	movwf	get_high@row
  5397  0B68  1BF8               	btfsc	get_high@row,7
  5398  0B69  2B83               	goto	l2893
  5399  0B6A                     l2883:	
  5400                           
  5401                           ;teris_16f886.c: 913: {
  5402                           ;teris_16f886.c: 914: if(is_row_empty(matrix, row) == 1)
  5403  0B6A  0878               	movf	get_high@row,w
  5404  0B6B  00F6               	movwf	??_get_high
  5405  0B6C  0876               	movf	??_get_high,w
  5406  0B6D  00F0               	movwf	is_row_empty@row
  5407  0B6E  0877               	movf	get_high@matrix,w
  5408  0B6F  120A  158A  23CC  120A  158A  	fcall	_is_row_empty
  5409  0B74  3A01               	xorlw	1
  5410  0B75  1D03               	skipz
  5411  0B76  2B7D               	goto	l2889
  5412                           
  5413                           ;teris_16f886.c: 915: {
  5414                           ;teris_16f886.c: 917: return (uint8_t)(8 - row - 1);
  5415  0B77  0878               	movf	get_high@row,w
  5416  0B78  3E01               	addlw	1
  5417  0B79  3AFF               	xorlw	255
  5418  0B7A  3E01               	addlw	1
  5419  0B7B  3E08               	addlw	8
  5420  0B7C  0008               	return
  5421  0B7D                     l2889:	
  5422  0B7D  30FF               	movlw	255
  5423  0B7E  00F6               	movwf	??_get_high
  5424  0B7F  0876               	movf	??_get_high,w
  5425  0B80  07F8               	addwf	get_high@row,f
  5426  0B81  1FF8               	btfss	get_high@row,7
  5427  0B82  2B6A               	goto	l2883
  5428  0B83                     l2893:	
  5429                           
  5430                           ;teris_16f886.c: 918: }
  5431                           ;teris_16f886.c: 919: }
  5432                           ;teris_16f886.c: 920: return 8;
  5433  0B83  3008               	movlw	8
  5434  0B84  0008               	return
  5435  0B85                     __end_of_get_high:	
  5436                           
  5437                           	psect	text20
  5438  0BCC                     __ptext20:	
  5439 ;; *************** function _is_row_empty *****************
  5440 ;; Defined at:
  5441 ;;		line 658 in file "teris_16f886.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  matrix          1    wreg     PTR const struct .
  5444 ;;		 -> g_matrix88(64), 
  5445 ;;  row             1    0[COMMON] unsigned char 
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;  matrix          1    4[COMMON] PTR const struct .
  5448 ;;		 -> g_matrix88(64), 
  5449 ;;  col             1    5[COMMON] unsigned char 
  5450 ;; Return value:  Size  Location     Type
  5451 ;;                  1    wreg      unsigned char 
  5452 ;; Registers used:
  5453 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5454 ;; Tracked objects:
  5455 ;;		On entry : 0/0
  5456 ;;		On exit  : 0/0
  5457 ;;		Unchanged: 0/0
  5458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5459 ;;      Params:         1       0       0       0       0
  5460 ;;      Locals:         2       0       0       0       0
  5461 ;;      Temps:          3       0       0       0       0
  5462 ;;      Totals:         6       0       0       0       0
  5463 ;;Total ram usage:        6 bytes
  5464 ;; Hardware stack levels used:    1
  5465 ;; This function calls:
  5466 ;;		Nothing
  5467 ;; This function is called by:
  5468 ;;		_get_high
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           
  5473                           ;psect for function _is_row_empty
  5474  0BCC                     _is_row_empty:	
  5475                           
  5476                           ;incstack = 0
  5477                           ; Regs used in _is_row_empty: [wreg-fsr0h+status,2+status,0]
  5478                           ;is_row_empty@matrix stored from wreg
  5479  0BCC  00F4               	movwf	is_row_empty@matrix
  5480                           
  5481                           ;teris_16f886.c: 660: for(uint8_t col = 0; col < 8; col++)
  5482  0BCD  01F5               	clrf	is_row_empty@col
  5483  0BCE  3008               	movlw	8
  5484  0BCF  0275               	subwf	is_row_empty@col,w
  5485  0BD0  1803               	btfsc	3,0
  5486  0BD1  2BF1               	goto	l2595
  5487  0BD2                     l2585:	
  5488                           
  5489                           ;teris_16f886.c: 661: {
  5490                           ;teris_16f886.c: 662: if(matrix->data[row][col] == 1)
  5491  0BD2  0870               	movf	is_row_empty@row,w
  5492  0BD3  00F1               	movwf	??_is_row_empty
  5493  0BD4  3002               	movlw	2
  5494  0BD5                     u2665:	
  5495  0BD5  1003               	clrc
  5496  0BD6  0DF1               	rlf	??_is_row_empty,f
  5497  0BD7  3EFF               	addlw	-1
  5498  0BD8  1D03               	skipz
  5499  0BD9  2BD5               	goto	u2665
  5500  0BDA  1003               	clrc
  5501  0BDB  0D71               	rlf	??_is_row_empty,w
  5502  0BDC  0774               	addwf	is_row_empty@matrix,w
  5503  0BDD  00F2               	movwf	??_is_row_empty+1
  5504  0BDE  0875               	movf	is_row_empty@col,w
  5505  0BDF  0772               	addwf	??_is_row_empty+1,w
  5506  0BE0  00F3               	movwf	??_is_row_empty+2
  5507  0BE1  0873               	movf	??_is_row_empty+2,w
  5508  0BE2  0084               	movwf	4
  5509  0BE3  1783               	bsf	3,7	;select IRP bank2
  5510  0BE4  0300               	decf	0,w
  5511  0BE5  1D03               	btfss	3,2
  5512  0BE6  2BE9               	goto	l2591
  5513                           
  5514                           ;teris_16f886.c: 663: {
  5515                           ;teris_16f886.c: 664: return 0;
  5516  0BE7  3000               	movlw	0
  5517  0BE8  0008               	return
  5518  0BE9                     l2591:	
  5519  0BE9  3001               	movlw	1
  5520  0BEA  00F1               	movwf	??_is_row_empty
  5521  0BEB  0871               	movf	??_is_row_empty,w
  5522  0BEC  07F5               	addwf	is_row_empty@col,f
  5523  0BED  3008               	movlw	8
  5524  0BEE  0275               	subwf	is_row_empty@col,w
  5525  0BEF  1C03               	skipc
  5526  0BF0  2BD2               	goto	l2585
  5527  0BF1                     l2595:	
  5528                           
  5529                           ;teris_16f886.c: 665: }
  5530                           ;teris_16f886.c: 666: }
  5531                           ;teris_16f886.c: 667: return 1;
  5532  0BF1  3001               	movlw	1
  5533  0BF2  0008               	return
  5534  0BF3                     __end_of_is_row_empty:	
  5535                           
  5536                           	psect	text21
  5537  013F                     __ptext21:	
  5538 ;; *************** function _fall_off *****************
  5539 ;; Defined at:
  5540 ;;		line 777 in file "teris_16f886.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;  x               1    wreg     char 
  5543 ;;  y               1    0[COMMON] char 
  5544 ;;  matrix44        2    1[COMMON] PTR const struct .
  5545 ;;		 -> g_matrix44(384), 
  5546 ;;  matrix88        1    3[COMMON] PTR const struct .
  5547 ;;		 -> g_matrix88(64), 
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;  x               1    8[COMMON] char 
  5550 ;;  col             1    9[COMMON] char 
  5551 ;;  row             1   10[COMMON] char 
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  1    wreg      unsigned char 
  5554 ;; Registers used:
  5555 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5561 ;;      Params:         4       0       0       0       0
  5562 ;;      Locals:         3       0       0       0       0
  5563 ;;      Temps:          4       0       0       0       0
  5564 ;;      Totals:        11       0       0       0       0
  5565 ;;Total ram usage:       11 bytes
  5566 ;; Hardware stack levels used:    2
  5567 ;; This function calls:
  5568 ;;		Nothing
  5569 ;; This function is called by:
  5570 ;;		_find_best_solution
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           
  5575                           ;psect for function _fall_off
  5576  013F                     _fall_off:	
  5577                           
  5578                           ;incstack = 0
  5579                           ; Regs used in _fall_off: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5580                           ;fall_off@x stored from wreg
  5581  013F  00F8               	movwf	fall_off@x
  5582  0140                     l344:	
  5583                           ;teris_16f886.c: 779: while(1)
  5584                           
  5585                           
  5586                           ;teris_16f886.c: 780: {
  5587                           ;teris_16f886.c: 781: for(int8_t row = 4 - 1; row >= 0; row--)
  5588  0140  3003               	movlw	3
  5589  0141  00F4               	movwf	??_fall_off
  5590  0142  0874               	movf	??_fall_off,w
  5591  0143  00FA               	movwf	fall_off@row
  5592  0144  1BFA               	btfsc	fall_off@row,7
  5593  0145  29AE               	goto	l2785
  5594  0146                     l2757:	
  5595                           
  5596                           ;teris_16f886.c: 782: {
  5597                           ;teris_16f886.c: 783: for(int8_t col = 0; col < 4; col++)
  5598  0146  01F9               	clrf	fall_off@col
  5599  0147  0879               	movf	fall_off@col,w
  5600  0148  3A80               	xorlw	128
  5601  0149  3E7C               	addlw	-132
  5602  014A  1803               	btfsc	3,0
  5603  014B  29A8               	goto	l2781
  5604  014C                     l2763:	
  5605                           
  5606                           ;teris_16f886.c: 784: {
  5607                           ;teris_16f886.c: 785: if(matrix44->data[row][col] == 1)
  5608  014C  087A               	movf	fall_off@row,w
  5609  014D  00F4               	movwf	??_fall_off
  5610  014E  01F5               	clrf	??_fall_off+1
  5611  014F  1003               	clrc
  5612  0150  0DF4               	rlf	??_fall_off,f
  5613  0151  0DF5               	rlf	??_fall_off+1,f
  5614  0152  1003               	clrc
  5615  0153  0DF4               	rlf	??_fall_off,f
  5616  0154  0DF5               	rlf	??_fall_off+1,f
  5617  0155  0874               	movf	??_fall_off,w
  5618  0156  0771               	addwf	fall_off@matrix44,w
  5619  0157  00F6               	movwf	??_fall_off+2
  5620  0158  0875               	movf	??_fall_off+1,w
  5621  0159  1803               	skipnc
  5622  015A  0A75               	incf	??_fall_off+1,w
  5623  015B  0772               	addwf	fall_off@matrix44+1,w
  5624  015C  00F7               	movwf	??_fall_off+3
  5625  015D  0879               	movf	fall_off@col,w
  5626  015E  0776               	addwf	??_fall_off+2,w
  5627  015F  0084               	movwf	4
  5628  0160  0877               	movf	??_fall_off+3,w
  5629  0161  1803               	skipnc
  5630  0162  0A77               	incf	??_fall_off+3,w
  5631  0163  1283               	bcf	3,5	;RP0=0, select bank0
  5632  0164  1303               	bcf	3,6	;RP1=0, select bank0
  5633  0165  00FF               	movwf	127
  5634  0166  120A  158A  2000  120A  118A  	fcall	stringtab
  5635  016B  3A01               	xorlw	1
  5636  016C  1D03               	skipz
  5637  016D  299F               	goto	l2777
  5638                           
  5639                           ;teris_16f886.c: 786: {
  5640                           ;teris_16f886.c: 787: if(matrix88->data[y + row + 1][x + col] == 1)
  5641  016E  0879               	movf	fall_off@col,w
  5642  016F  0778               	addwf	fall_off@x,w
  5643  0170  0773               	addwf	fall_off@matrix88,w
  5644  0171  00F4               	movwf	??_fall_off
  5645  0172  087A               	movf	fall_off@row,w
  5646  0173  0770               	addwf	fall_off@y,w
  5647  0174  00F5               	movwf	??_fall_off+1
  5648  0175  3002               	movlw	2
  5649  0176                     u3075:	
  5650  0176  1003               	clrc
  5651  0177  0DF5               	rlf	??_fall_off+1,f
  5652  0178  3EFF               	addlw	-1
  5653  0179  1D03               	skipz
  5654  017A  2976               	goto	u3075
  5655  017B  1003               	clrc
  5656  017C  0D75               	rlf	??_fall_off+1,w
  5657  017D  3E08               	addlw	8
  5658  017E  0774               	addwf	??_fall_off,w
  5659  017F  00F6               	movwf	??_fall_off+2
  5660  0180  0876               	movf	??_fall_off+2,w
  5661  0181  0084               	movwf	4
  5662  0182  1783               	bsf	3,7	;select IRP bank2
  5663  0183  0300               	decf	0,w
  5664  0184  1D03               	btfss	3,2
  5665  0185  2988               	goto	l2771
  5666                           
  5667                           ;teris_16f886.c: 788: {
  5668                           ;teris_16f886.c: 791: return y;
  5669  0186  0870               	movf	fall_off@y,w
  5670  0187  0008               	return
  5671  0188                     l2771:	
  5672                           
  5673                           ;teris_16f886.c: 792: }
  5674                           ;teris_16f886.c: 793: if((y + row) >= (8 - 1))
  5675  0188  0870               	movf	fall_off@y,w
  5676  0189  077A               	addwf	fall_off@row,w
  5677  018A  00F4               	movwf	??_fall_off
  5678  018B  01F5               	clrf	??_fall_off+1
  5679  018C  1803               	skipnc
  5680  018D  0AF5               	incf	??_fall_off+1,f
  5681  018E  1BF0               	btfsc	fall_off@y,7
  5682  018F  03F5               	decf	??_fall_off+1,f
  5683  0190  1BFA               	btfsc	fall_off@row,7
  5684  0191  03F5               	decf	??_fall_off+1,f
  5685  0192  0875               	movf	??_fall_off+1,w
  5686  0193  3A80               	xorlw	128
  5687  0194  00FF               	movwf	127
  5688  0195  3080               	movlw	128
  5689  0196  027F               	subwf	127,w
  5690  0197  1D03               	skipz
  5691  0198  299B               	goto	u3105
  5692  0199  3007               	movlw	7
  5693  019A  0274               	subwf	??_fall_off,w
  5694  019B                     u3105:	
  5695  019B  1C03               	skipc
  5696  019C  299F               	goto	l2777
  5697                           
  5698                           ;teris_16f886.c: 794: {
  5699                           ;teris_16f886.c: 797: return y;
  5700  019D  0870               	movf	fall_off@y,w
  5701  019E  0008               	return
  5702  019F                     l2777:	
  5703  019F  3001               	movlw	1
  5704  01A0  00F4               	movwf	??_fall_off
  5705  01A1  0874               	movf	??_fall_off,w
  5706  01A2  07F9               	addwf	fall_off@col,f
  5707  01A3  0879               	movf	fall_off@col,w
  5708  01A4  3A80               	xorlw	128
  5709  01A5  3E7C               	addlw	-132
  5710  01A6  1C03               	skipc
  5711  01A7  294C               	goto	l2763
  5712  01A8                     l2781:	
  5713  01A8  30FF               	movlw	255
  5714  01A9  00F4               	movwf	??_fall_off
  5715  01AA  0874               	movf	??_fall_off,w
  5716  01AB  07FA               	addwf	fall_off@row,f
  5717  01AC  1FFA               	btfss	fall_off@row,7
  5718  01AD  2946               	goto	l2757
  5719  01AE                     l2785:	
  5720                           
  5721                           ;teris_16f886.c: 798: }
  5722                           ;teris_16f886.c: 799: }
  5723                           ;teris_16f886.c: 800: }
  5724                           ;teris_16f886.c: 801: }
  5725                           ;teris_16f886.c: 802: y++;
  5726  01AE  3001               	movlw	1
  5727  01AF  00F4               	movwf	??_fall_off
  5728  01B0  0874               	movf	??_fall_off,w
  5729  01B1  07F0               	addwf	fall_off@y,f
  5730  01B2  2940               	goto	l344
  5731  01B3                     __end_of_fall_off:	
  5732                           
  5733                           	psect	text22
  5734  00CD                     __ptext22:	
  5735 ;; *************** function _evaluate *****************
  5736 ;; Defined at:
  5737 ;;		line 852 in file "teris_16f886.c"
  5738 ;; Parameters:    Size  Location     Type
  5739 ;;  matrix          1    wreg     PTR const struct .
  5740 ;;		 -> find_best_solution@temp_matrix88(64), 
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;  matrix          1    9[COMMON] PTR const struct .
  5743 ;;		 -> find_best_solution@temp_matrix88(64), 
  5744 ;;  row             1   11[COMMON] char 
  5745 ;;  col             1   10[COMMON] unsigned char 
  5746 ;;  risk            2    6[COMMON] unsigned int 
  5747 ;;  full            1    8[COMMON] unsigned char 
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  2    0[COMMON] unsigned int 
  5750 ;; Registers used:
  5751 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5757 ;;      Params:         2       0       0       0       0
  5758 ;;      Locals:         6       0       0       0       0
  5759 ;;      Temps:          4       0       0       0       0
  5760 ;;      Totals:        12       0       0       0       0
  5761 ;;Total ram usage:       12 bytes
  5762 ;; Hardware stack levels used:    1
  5763 ;; This function calls:
  5764 ;;		Nothing
  5765 ;; This function is called by:
  5766 ;;		_find_best_solution
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           
  5771                           ;psect for function _evaluate
  5772  00CD                     _evaluate:	
  5773                           
  5774                           ;incstack = 0
  5775                           ; Regs used in _evaluate: [wreg-fsr0h+status,2+status,0]
  5776                           ;evaluate@matrix stored from wreg
  5777  00CD  00F9               	movwf	evaluate@matrix
  5778                           
  5779                           ;teris_16f886.c: 854: uint16_t risk = 0;
  5780  00CE  01F6               	clrf	evaluate@risk
  5781  00CF  01F7               	clrf	evaluate@risk+1
  5782                           
  5783                           ;teris_16f886.c: 855: uint8_t full = 0xFF;
  5784  00D0  30FF               	movlw	255
  5785  00D1  00F2               	movwf	??_evaluate
  5786  00D2  0872               	movf	??_evaluate,w
  5787  00D3  00F8               	movwf	evaluate@full
  5788                           
  5789                           ;teris_16f886.c: 856: for(uint8_t col = 0; col < 8; col++)
  5790  00D4  01FA               	clrf	evaluate@col
  5791  00D5  3008               	movlw	8
  5792  00D6  027A               	subwf	evaluate@col,w
  5793  00D7  1803               	btfsc	3,0
  5794  00D8  293A               	goto	l2849
  5795  00D9                     l2823:	
  5796                           
  5797                           ;teris_16f886.c: 857: {
  5798                           ;teris_16f886.c: 858: full = 0xFF;
  5799  00D9  30FF               	movlw	255
  5800  00DA  00F2               	movwf	??_evaluate
  5801  00DB  0872               	movf	??_evaluate,w
  5802  00DC  00F8               	movwf	evaluate@full
  5803                           
  5804                           ;teris_16f886.c: 859: for(int8_t row = 8 - 1; row >= 0; row--)
  5805  00DD  3007               	movlw	7
  5806  00DE  00F2               	movwf	??_evaluate
  5807  00DF  0872               	movf	??_evaluate,w
  5808  00E0  00FB               	movwf	evaluate@row
  5809  00E1  1BFB               	btfsc	evaluate@row,7
  5810  00E2  2932               	goto	l2845
  5811  00E3                     l2829:	
  5812                           
  5813                           ;teris_16f886.c: 860: {
  5814                           ;teris_16f886.c: 861: if(full == 0xFF)
  5815  00E3  0A78               	incf	evaluate@full,w
  5816  00E4  1D03               	btfss	3,2
  5817  00E5  28F9               	goto	l2833
  5818                           
  5819                           ;teris_16f886.c: 862: {
  5820                           ;teris_16f886.c: 863: full = matrix->data[row][col];
  5821  00E6  087B               	movf	evaluate@row,w
  5822  00E7  00F2               	movwf	??_evaluate
  5823  00E8  3002               	movlw	2
  5824  00E9                     u3225:	
  5825  00E9  1003               	clrc
  5826  00EA  0DF2               	rlf	??_evaluate,f
  5827  00EB  3EFF               	addlw	-1
  5828  00EC  1D03               	skipz
  5829  00ED  28E9               	goto	u3225
  5830  00EE  1003               	clrc
  5831  00EF  0D72               	rlf	??_evaluate,w
  5832  00F0  0779               	addwf	evaluate@matrix,w
  5833  00F1  00F3               	movwf	??_evaluate+1
  5834  00F2  087A               	movf	evaluate@col,w
  5835  00F3  0773               	addwf	??_evaluate+1,w
  5836  00F4  00F4               	movwf	??_evaluate+2
  5837  00F5  0874               	movf	??_evaluate+2,w
  5838  00F6  0084               	movwf	4
  5839  00F7  1383               	bcf	3,7	;select IRP bank0
  5840  00F8  2928               	goto	L7
  5841  00F9                     l2833:	
  5842                           ;teris_16f886.c: 864: }
  5843                           
  5844                           
  5845                           ;teris_16f886.c: 865: else
  5846                           ;teris_16f886.c: 866: {
  5847                           ;teris_16f886.c: 867: if(matrix->data[row][col] == 1)
  5848  00F9  087B               	movf	evaluate@row,w
  5849  00FA  00F2               	movwf	??_evaluate
  5850  00FB  3002               	movlw	2
  5851  00FC                     u3235:	
  5852  00FC  1003               	clrc
  5853  00FD  0DF2               	rlf	??_evaluate,f
  5854  00FE  3EFF               	addlw	-1
  5855  00FF  1D03               	skipz
  5856  0100  28FC               	goto	u3235
  5857  0101  1003               	clrc
  5858  0102  0D72               	rlf	??_evaluate,w
  5859  0103  0779               	addwf	evaluate@matrix,w
  5860  0104  00F3               	movwf	??_evaluate+1
  5861  0105  087A               	movf	evaluate@col,w
  5862  0106  0773               	addwf	??_evaluate+1,w
  5863  0107  00F4               	movwf	??_evaluate+2
  5864  0108  0874               	movf	??_evaluate+2,w
  5865  0109  0084               	movwf	4
  5866  010A  1383               	bcf	3,7	;select IRP bank0
  5867  010B  0300               	decf	0,w
  5868  010C  1D03               	btfss	3,2
  5869  010D  2917               	goto	l2839
  5870                           
  5871                           ;teris_16f886.c: 868: {
  5872                           ;teris_16f886.c: 869: if(full == 0)
  5873  010E  0878               	movf	evaluate@full,w
  5874  010F  1D03               	btfss	3,2
  5875  0110  2917               	goto	l2839
  5876                           
  5877                           ;teris_16f886.c: 870: {
  5878                           ;teris_16f886.c: 871: risk++;
  5879  0111  3001               	movlw	1
  5880  0112  07F6               	addwf	evaluate@risk,f
  5881  0113  1803               	skipnc
  5882  0114  0AF7               	incf	evaluate@risk+1,f
  5883  0115  3000               	movlw	0
  5884  0116  07F7               	addwf	evaluate@risk+1,f
  5885  0117                     l2839:	
  5886                           
  5887                           ;teris_16f886.c: 872: }
  5888                           ;teris_16f886.c: 873: }
  5889                           ;teris_16f886.c: 874: full = matrix->data[row][col];
  5890  0117  087B               	movf	evaluate@row,w
  5891  0118  00F2               	movwf	??_evaluate
  5892  0119  3002               	movlw	2
  5893  011A                     u3265:	
  5894  011A  1003               	clrc
  5895  011B  0DF2               	rlf	??_evaluate,f
  5896  011C  3EFF               	addlw	-1
  5897  011D  1D03               	skipz
  5898  011E  291A               	goto	u3265
  5899  011F  1003               	clrc
  5900  0120  0D72               	rlf	??_evaluate,w
  5901  0121  0779               	addwf	evaluate@matrix,w
  5902  0122  00F3               	movwf	??_evaluate+1
  5903  0123  087A               	movf	evaluate@col,w
  5904  0124  0773               	addwf	??_evaluate+1,w
  5905  0125  00F4               	movwf	??_evaluate+2
  5906  0126  0874               	movf	??_evaluate+2,w
  5907  0127  0084               	movwf	4
  5908  0128                     L7:	
  5909  0128  0800               	movf	0,w
  5910  0129  00F5               	movwf	??_evaluate+3
  5911  012A  0875               	movf	??_evaluate+3,w
  5912  012B  00F8               	movwf	evaluate@full
  5913  012C  30FF               	movlw	255
  5914  012D  00F2               	movwf	??_evaluate
  5915  012E  0872               	movf	??_evaluate,w
  5916  012F  07FB               	addwf	evaluate@row,f
  5917  0130  1FFB               	btfss	evaluate@row,7
  5918  0131  28E3               	goto	l2829
  5919  0132                     l2845:	
  5920  0132  3001               	movlw	1
  5921  0133  00F2               	movwf	??_evaluate
  5922  0134  0872               	movf	??_evaluate,w
  5923  0135  07FA               	addwf	evaluate@col,f
  5924  0136  3008               	movlw	8
  5925  0137  027A               	subwf	evaluate@col,w
  5926  0138  1C03               	skipc
  5927  0139  28D9               	goto	l2823
  5928  013A                     l2849:	
  5929                           
  5930                           ;teris_16f886.c: 875: }
  5931                           ;teris_16f886.c: 876: }
  5932                           ;teris_16f886.c: 877: }
  5933                           ;teris_16f886.c: 880: return risk;
  5934  013A  0877               	movf	evaluate@risk+1,w
  5935  013B  00F1               	movwf	?_evaluate+1
  5936  013C  0876               	movf	evaluate@risk,w
  5937  013D  00F0               	movwf	?_evaluate
  5938  013E  0008               	return
  5939  013F                     __end_of_evaluate:	
  5940                           
  5941                           	psect	text23
  5942  0C77                     __ptext23:	
  5943 ;; *************** function _delete_matrix *****************
  5944 ;; Defined at:
  5945 ;;		line 637 in file "teris_16f886.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  matrix          2    7[BANK0 ] PTR struct .
  5948 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;  row             1   11[BANK0 ] char 
  5951 ;;  count           1   10[BANK0 ] unsigned char 
  5952 ;; Return value:  Size  Location     Type
  5953 ;;                  1    wreg      unsigned char 
  5954 ;; Registers used:
  5955 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5961 ;;      Params:         0       2       0       0       0
  5962 ;;      Locals:         0       2       0       0       0
  5963 ;;      Temps:          0       1       0       0       0
  5964 ;;      Totals:         0       5       0       0       0
  5965 ;;Total ram usage:        5 bytes
  5966 ;; Hardware stack levels used:    1
  5967 ;; Hardware stack levels required when called:    2
  5968 ;; This function calls:
  5969 ;;		_delete_row
  5970 ;;		_is_row_full
  5971 ;; This function is called by:
  5972 ;;		_find_best_solution
  5973 ;;		_main
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           
  5978                           ;psect for function _delete_matrix
  5979  0C77                     _delete_matrix:	
  5980                           
  5981                           ;teris_16f886.c: 639: uint8_t count = 0;
  5982                           
  5983                           ;incstack = 0
  5984                           ; Regs used in _delete_matrix: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5985  0C77  1283               	bcf	3,5	;RP0=0, select bank0
  5986  0C78  1303               	bcf	3,6	;RP1=0, select bank0
  5987  0C79  01CE               	clrf	delete_matrix@count
  5988                           
  5989                           ;teris_16f886.c: 640: int8_t row = 8 - 1;
  5990  0C7A  3007               	movlw	7
  5991  0C7B  00CD               	movwf	??_delete_matrix
  5992  0C7C  084D               	movf	??_delete_matrix,w
  5993  0C7D  00CF               	movwf	delete_matrix@row
  5994  0C7E                     l4123:	
  5995                           ;teris_16f886.c: 641: while(row >= 0)
  5996                           
  5997  0C7E  1BCF               	btfsc	delete_matrix@row,7
  5998  0C7F  2CAD               	goto	l4125
  5999                           
  6000                           ;teris_16f886.c: 642: {
  6001                           ;teris_16f886.c: 643: if(is_row_full(matrix, row))
  6002  0C80  084B               	movf	delete_matrix@matrix,w
  6003  0C81  00F0               	movwf	is_row_full@matrix
  6004  0C82  084C               	movf	delete_matrix@matrix+1,w
  6005  0C83  00F1               	movwf	is_row_full@matrix+1
  6006  0C84  084F               	movf	delete_matrix@row,w
  6007  0C85  00CD               	movwf	??_delete_matrix
  6008  0C86  084D               	movf	??_delete_matrix,w
  6009  0C87  00F2               	movwf	is_row_full@row
  6010  0C88  120A  158A  2447  120A  158A  	fcall	_is_row_full
  6011  0C8D  3A00               	xorlw	0
  6012  0C8E  1903               	skipnz
  6013  0C8F  2CA6               	goto	l4121
  6014                           
  6015                           ;teris_16f886.c: 644: {
  6016                           ;teris_16f886.c: 645: delete_row(matrix, row);
  6017  0C90  1283               	bcf	3,5	;RP0=0, select bank0
  6018  0C91  1303               	bcf	3,6	;RP1=0, select bank0
  6019  0C92  084B               	movf	delete_matrix@matrix,w
  6020  0C93  00FB               	movwf	delete_row@matrix
  6021  0C94  084C               	movf	delete_matrix@matrix+1,w
  6022  0C95  00FC               	movwf	delete_row@matrix+1
  6023  0C96  084F               	movf	delete_matrix@row,w
  6024  0C97  00CD               	movwf	??_delete_matrix
  6025  0C98  084D               	movf	??_delete_matrix,w
  6026  0C99  00FD               	movwf	delete_row@row
  6027  0C9A  120A  118A  21B3  120A  158A  	fcall	_delete_row
  6028                           
  6029                           ;teris_16f886.c: 646: count++;
  6030  0C9F  3001               	movlw	1
  6031  0CA0  1283               	bcf	3,5	;RP0=0, select bank0
  6032  0CA1  1303               	bcf	3,6	;RP1=0, select bank0
  6033  0CA2  00CD               	movwf	??_delete_matrix
  6034  0CA3  084D               	movf	??_delete_matrix,w
  6035  0CA4  07CE               	addwf	delete_matrix@count,f
  6036                           
  6037                           ;teris_16f886.c: 647: }
  6038  0CA5  2C7E               	goto	l4123
  6039  0CA6                     l4121:	
  6040                           
  6041                           ;teris_16f886.c: 648: else
  6042                           ;teris_16f886.c: 649: {
  6043                           ;teris_16f886.c: 650: row--;
  6044  0CA6  30FF               	movlw	255
  6045  0CA7  1283               	bcf	3,5	;RP0=0, select bank0
  6046  0CA8  1303               	bcf	3,6	;RP1=0, select bank0
  6047  0CA9  00CD               	movwf	??_delete_matrix
  6048  0CAA  084D               	movf	??_delete_matrix,w
  6049  0CAB  07CF               	addwf	delete_matrix@row,f
  6050  0CAC  2C7E               	goto	l4123
  6051  0CAD                     l4125:	
  6052                           
  6053                           ;teris_16f886.c: 651: }
  6054                           ;teris_16f886.c: 652: }
  6055                           ;teris_16f886.c: 655: return count;
  6056  0CAD  084E               	movf	delete_matrix@count,w
  6057  0CAE  0008               	return
  6058  0CAF                     __end_of_delete_matrix:	
  6059                           
  6060                           	psect	text24
  6061  0C47                     __ptext24:	
  6062 ;; *************** function _is_row_full *****************
  6063 ;; Defined at:
  6064 ;;		line 603 in file "teris_16f886.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;  matrix          2    0[COMMON] PTR const struct .
  6067 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  6068 ;;  row             1    2[COMMON] unsigned char 
  6069 ;; Auto vars:     Size  Location     Type
  6070 ;;  col             1    8[COMMON] unsigned char 
  6071 ;; Return value:  Size  Location     Type
  6072 ;;                  1    wreg      unsigned char 
  6073 ;; Registers used:
  6074 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6075 ;; Tracked objects:
  6076 ;;		On entry : 0/0
  6077 ;;		On exit  : 0/0
  6078 ;;		Unchanged: 0/0
  6079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6080 ;;      Params:         3       0       0       0       0
  6081 ;;      Locals:         1       0       0       0       0
  6082 ;;      Temps:          5       0       0       0       0
  6083 ;;      Totals:         9       0       0       0       0
  6084 ;;Total ram usage:        9 bytes
  6085 ;; Hardware stack levels used:    1
  6086 ;; This function calls:
  6087 ;;		Nothing
  6088 ;; This function is called by:
  6089 ;;		_delete_matrix
  6090 ;; This function uses a non-reentrant model
  6091 ;;
  6092                           
  6093                           
  6094                           ;psect for function _is_row_full
  6095  0C47                     _is_row_full:	
  6096                           
  6097                           ;teris_16f886.c: 605: for(uint8_t col = 0; col < 8; col++)
  6098                           
  6099                           ;incstack = 0
  6100                           ; Regs used in _is_row_full: [wreg-fsr0h+status,2+status,0]
  6101  0C47  01F8               	clrf	is_row_full@col
  6102  0C48  3008               	movlw	8
  6103  0C49  0278               	subwf	is_row_full@col,w
  6104  0C4A  1803               	btfsc	3,0
  6105  0C4B  2C75               	goto	l2555
  6106  0C4C                     l2545:	
  6107                           
  6108                           ;teris_16f886.c: 606: {
  6109                           ;teris_16f886.c: 607: if(matrix->data[row][col] == 0)
  6110  0C4C  0872               	movf	is_row_full@row,w
  6111  0C4D  00F3               	movwf	??_is_row_full
  6112  0C4E  3002               	movlw	2
  6113  0C4F                     u2555:	
  6114  0C4F  1003               	clrc
  6115  0C50  0DF3               	rlf	??_is_row_full,f
  6116  0C51  3EFF               	addlw	-1
  6117  0C52  1D03               	skipz
  6118  0C53  2C4F               	goto	u2555
  6119  0C54  1003               	clrc
  6120  0C55  0D73               	rlf	??_is_row_full,w
  6121  0C56  0770               	addwf	is_row_full@matrix,w
  6122  0C57  00F4               	movwf	??_is_row_full+1
  6123  0C58  0871               	movf	is_row_full@matrix+1,w
  6124  0C59  1803               	skipnc
  6125  0C5A  3E01               	addlw	1
  6126  0C5B  00F5               	movwf	??_is_row_full+2
  6127  0C5C  0878               	movf	is_row_full@col,w
  6128  0C5D  0774               	addwf	??_is_row_full+1,w
  6129  0C5E  00F6               	movwf	??_is_row_full+3
  6130  0C5F  0875               	movf	??_is_row_full+2,w
  6131  0C60  1803               	skipnc
  6132  0C61  3E01               	addlw	1
  6133  0C62  00F7               	movwf	??_is_row_full+4
  6134  0C63  0876               	movf	??_is_row_full+3,w
  6135  0C64  0084               	movwf	4
  6136  0C65  1783               	bsf	3,7
  6137  0C66  1C77               	btfss	??_is_row_full+4,0
  6138  0C67  1383               	bcf	3,7
  6139  0C68  0800               	movf	0,w
  6140  0C69  1D03               	btfss	3,2
  6141  0C6A  2C6D               	goto	l2551
  6142                           
  6143                           ;teris_16f886.c: 608: {
  6144                           ;teris_16f886.c: 609: return 0;
  6145  0C6B  3000               	movlw	0
  6146  0C6C  0008               	return
  6147  0C6D                     l2551:	
  6148  0C6D  3001               	movlw	1
  6149  0C6E  00F3               	movwf	??_is_row_full
  6150  0C6F  0873               	movf	??_is_row_full,w
  6151  0C70  07F8               	addwf	is_row_full@col,f
  6152  0C71  3008               	movlw	8
  6153  0C72  0278               	subwf	is_row_full@col,w
  6154  0C73  1C03               	skipc
  6155  0C74  2C4C               	goto	l2545
  6156  0C75                     l2555:	
  6157                           
  6158                           ;teris_16f886.c: 610: }
  6159                           ;teris_16f886.c: 611: }
  6160                           ;teris_16f886.c: 612: return 1;
  6161  0C75  3001               	movlw	1
  6162  0C76  0008               	return
  6163  0C77                     __end_of_is_row_full:	
  6164                           
  6165                           	psect	text25
  6166  01B3                     __ptext25:	
  6167 ;; *************** function _delete_row *****************
  6168 ;; Defined at:
  6169 ;;		line 614 in file "teris_16f886.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;  matrix          2   11[COMMON] PTR struct .
  6172 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  6173 ;;  row             1   13[COMMON] unsigned char 
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;  len             2    4[BANK0 ] unsigned int 
  6176 ;;  i               1    6[BANK0 ] char 
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  1    wreg      void 
  6179 ;; Registers used:
  6180 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6186 ;;      Params:         3       0       0       0       0
  6187 ;;      Locals:         0       3       0       0       0
  6188 ;;      Temps:          0       4       0       0       0
  6189 ;;      Totals:         3       7       0       0       0
  6190 ;;Total ram usage:       10 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:    1
  6193 ;; This function calls:
  6194 ;;		_memcpy
  6195 ;;		_memset
  6196 ;; This function is called by:
  6197 ;;		_delete_matrix
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           
  6202                           ;psect for function _delete_row
  6203  01B3                     _delete_row:	
  6204                           
  6205                           ;teris_16f886.c: 616: for(int8_t i = 8 - 1; i >= 0; i--)
  6206                           
  6207                           ;incstack = 0
  6208                           ; Regs used in _delete_row: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6209  01B3  3007               	movlw	7
  6210  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  6211  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  6212  01B6  00C4               	movwf	??_delete_row
  6213  01B7  0844               	movf	??_delete_row,w
  6214  01B8  00CA               	movwf	delete_row@i
  6215  01B9                     L8:	
  6216  01B9  1BCA               	btfsc	delete_row@i,7
  6217  01BA  0008               	return
  6218                           
  6219                           ;teris_16f886.c: 617: {
  6220                           ;teris_16f886.c: 618: if(i <= row)
  6221  01BB  084A               	movf	delete_row@i,w
  6222  01BC  00C4               	movwf	??_delete_row
  6223  01BD  01C5               	clrf	??_delete_row+1
  6224  01BE  1BC4               	btfsc	??_delete_row,7
  6225  01BF  03C5               	decf	??_delete_row+1,f
  6226  01C0  0845               	movf	??_delete_row+1,w
  6227  01C1  3A80               	xorlw	128
  6228  01C2  3C80               	sublw	128
  6229  01C3  1D03               	skipz
  6230  01C4  29C7               	goto	u5545
  6231  01C5  0844               	movf	??_delete_row,w
  6232  01C6  027D               	subwf	delete_row@row,w
  6233  01C7                     u5545:	
  6234  01C7  1C03               	skipc
  6235  01C8  2A21               	goto	l4107
  6236                           
  6237                           ;teris_16f886.c: 619: {
  6238                           ;teris_16f886.c: 620: if(i > 0)
  6239  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  6240  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  6241  01CB  084A               	movf	delete_row@i,w
  6242  01CC  3A80               	xorlw	128
  6243  01CD  3E7F               	addlw	-129
  6244  01CE  1C03               	skipc
  6245  01CF  2A03               	goto	l4105
  6246                           
  6247                           ;teris_16f886.c: 621: {
  6248                           ;teris_16f886.c: 625: register size_t len;
  6249                           ;teris_16f886.c: 627: len = 8*sizeof(uint8_t);
  6250  01D0  3008               	movlw	8
  6251  01D1  00C8               	movwf	delete_row@len
  6252  01D2  3000               	movlw	0
  6253  01D3  00C9               	movwf	delete_row@len+1
  6254                           
  6255                           ;teris_16f886.c: 628: memcpy(matrix->data[i], matrix->data[i - 1], len);
  6256  01D4  084A               	movf	delete_row@i,w
  6257  01D5  00C4               	movwf	??_delete_row
  6258  01D6  3002               	movlw	2
  6259  01D7                     u5565:	
  6260  01D7  1003               	clrc
  6261  01D8  0DC4               	rlf	??_delete_row,f
  6262  01D9  3EFF               	addlw	-1
  6263  01DA  1D03               	skipz
  6264  01DB  29D7               	goto	u5565
  6265  01DC  1003               	clrc
  6266  01DD  0D44               	rlf	??_delete_row,w
  6267  01DE  077B               	addwf	delete_row@matrix,w
  6268  01DF  00F0               	movwf	memcpy@d1
  6269  01E0  087C               	movf	delete_row@matrix+1,w
  6270  01E1  1803               	skipnc
  6271  01E2  3E01               	addlw	1
  6272  01E3  00F1               	movwf	memcpy@d1+1
  6273  01E4  084A               	movf	delete_row@i,w
  6274  01E5  00C5               	movwf	??_delete_row+1
  6275  01E6  3002               	movlw	2
  6276  01E7                     u5575:	
  6277  01E7  1003               	clrc
  6278  01E8  0DC5               	rlf	??_delete_row+1,f
  6279  01E9  3EFF               	addlw	-1
  6280  01EA  1D03               	skipz
  6281  01EB  29E7               	goto	u5575
  6282  01EC  1003               	clrc
  6283  01ED  0D45               	rlf	??_delete_row+1,w
  6284  01EE  3EF8               	addlw	248
  6285  01EF  077B               	addwf	delete_row@matrix,w
  6286  01F0  00C6               	movwf	??_delete_row+2
  6287  01F1  087C               	movf	delete_row@matrix+1,w
  6288  01F2  1803               	skipnc
  6289  01F3  3E01               	addlw	1
  6290  01F4  00C7               	movwf	??_delete_row+3
  6291  01F5  0846               	movf	??_delete_row+2,w
  6292  01F6  00F2               	movwf	memcpy@s1
  6293  01F7  0847               	movf	??_delete_row+3,w
  6294  01F8  00F3               	movwf	memcpy@s1+1
  6295  01F9  0849               	movf	delete_row@len+1,w
  6296  01FA  00F5               	movwf	memcpy@n+1
  6297  01FB  0848               	movf	delete_row@len,w
  6298  01FC  00F4               	movwf	memcpy@n
  6299  01FD  120A  158A  241D  120A  118A  	fcall	_memcpy
  6300                           
  6301                           ;teris_16f886.c: 629: }
  6302  0202  2A21               	goto	l4107
  6303  0203                     l4105:	
  6304                           
  6305                           ;teris_16f886.c: 630: else
  6306                           ;teris_16f886.c: 631: {
  6307                           ;teris_16f886.c: 632: memset(matrix->data[i], 0, 8*sizeof(uint8_t));
  6308  0203  1283               	bcf	3,5	;RP0=0, select bank0
  6309  0204  1303               	bcf	3,6	;RP1=0, select bank0
  6310  0205  084A               	movf	delete_row@i,w
  6311  0206  00C4               	movwf	??_delete_row
  6312  0207  3002               	movlw	2
  6313  0208                     u5585:	
  6314  0208  1003               	clrc
  6315  0209  0DC4               	rlf	??_delete_row,f
  6316  020A  3EFF               	addlw	-1
  6317  020B  1D03               	skipz
  6318  020C  2A08               	goto	u5585
  6319  020D  1003               	clrc
  6320  020E  0D44               	rlf	??_delete_row,w
  6321  020F  077B               	addwf	delete_row@matrix,w
  6322  0210  00F0               	movwf	memset@p1
  6323  0211  087C               	movf	delete_row@matrix+1,w
  6324  0212  1803               	skipnc
  6325  0213  3E01               	addlw	1
  6326  0214  00F1               	movwf	memset@p1+1
  6327  0215  3000               	movlw	0
  6328  0216  00F2               	movwf	memset@c
  6329  0217  00F3               	movwf	memset@c+1
  6330  0218  3008               	movlw	8
  6331  0219  00F4               	movwf	memset@n
  6332  021A  3000               	movlw	0
  6333  021B  00F5               	movwf	memset@n+1
  6334  021C  120A  158A  22EC  120A  118A  	fcall	_memset
  6335  0221                     l4107:	
  6336  0221  30FF               	movlw	255
  6337  0222  1283               	bcf	3,5	;RP0=0, select bank0
  6338  0223  1303               	bcf	3,6	;RP1=0, select bank0
  6339  0224  00C4               	movwf	??_delete_row
  6340  0225  0844               	movf	??_delete_row,w
  6341  0226  07CA               	addwf	delete_row@i,f
  6342  0227  29B9               	goto	L8
  6343  0228                     __end_of_delete_row:	
  6344                           
  6345                           	psect	text26
  6346  0C1D                     __ptext26:	
  6347 ;; *************** function _memcpy *****************
  6348 ;; Defined at:
  6349 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  6350 ;; Parameters:    Size  Location     Type
  6351 ;;  d1              2    0[COMMON] PTR void 
  6352 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  6353 ;;  s1              2    2[COMMON] PTR const void 
  6354 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  6355 ;;  n               2    4[COMMON] unsigned int 
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;  s               2    9[COMMON] PTR const unsigned char 
  6358 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  6359 ;;  d               2    7[COMMON] PTR unsigned char 
  6360 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  6361 ;; Return value:  Size  Location     Type
  6362 ;;                  2    0[COMMON] PTR void 
  6363 ;; Registers used:
  6364 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6370 ;;      Params:         6       0       0       0       0
  6371 ;;      Locals:         4       0       0       0       0
  6372 ;;      Temps:          1       0       0       0       0
  6373 ;;      Totals:        11       0       0       0       0
  6374 ;;Total ram usage:       11 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; This function calls:
  6377 ;;		Nothing
  6378 ;; This function is called by:
  6379 ;;		_delete_row
  6380 ;;		_merge1
  6381 ;; This function uses a non-reentrant model
  6382 ;;
  6383                           
  6384                           
  6385                           ;psect for function _memcpy
  6386  0C1D                     _memcpy:	
  6387                           
  6388                           ;incstack = 0
  6389                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  6390  0C1D  0872               	movf	memcpy@s1,w
  6391  0C1E  00F9               	movwf	memcpy@s
  6392  0C1F  0873               	movf	memcpy@s1+1,w
  6393  0C20  00FA               	movwf	memcpy@s+1
  6394  0C21  0870               	movf	memcpy@d1,w
  6395  0C22  00F7               	movwf	memcpy@d
  6396  0C23  0871               	movf	memcpy@d1+1,w
  6397  0C24  00F8               	movwf	memcpy@d+1
  6398  0C25                     l2527:	
  6399  0C25  3001               	movlw	1
  6400  0C26  02F4               	subwf	memcpy@n,f
  6401  0C27  3000               	movlw	0
  6402  0C28  1C03               	skipc
  6403  0C29  03F5               	decf	memcpy@n+1,f
  6404  0C2A  02F5               	subwf	memcpy@n+1,f
  6405  0C2B  0A74               	incf	memcpy@n,w
  6406  0C2C  1903               	btfsc	3,2
  6407  0C2D  0A75               	incf	memcpy@n+1,w
  6408  0C2E  1903               	btfsc	3,2
  6409  0C2F  0008               	return
  6410  0C30  0879               	movf	memcpy@s,w
  6411  0C31  0084               	movwf	4
  6412  0C32  1783               	bsf	3,7
  6413  0C33  1C7A               	btfss	memcpy@s+1,0
  6414  0C34  1383               	bcf	3,7
  6415  0C35  0800               	movf	0,w
  6416  0C36  00F6               	movwf	??_memcpy
  6417  0C37  0877               	movf	memcpy@d,w
  6418  0C38  0084               	movwf	4
  6419  0C39  1383               	bcf	3,7
  6420  0C3A  1878               	btfsc	memcpy@d+1,0
  6421  0C3B  1783               	bsf	3,7
  6422  0C3C  0876               	movf	??_memcpy,w
  6423  0C3D  0080               	movwf	0
  6424  0C3E  3001               	movlw	1
  6425  0C3F  07F9               	addwf	memcpy@s,f
  6426  0C40  1803               	skipnc
  6427  0C41  0AFA               	incf	memcpy@s+1,f
  6428  0C42  3001               	movlw	1
  6429  0C43  07F7               	addwf	memcpy@d,f
  6430  0C44  1803               	skipnc
  6431  0C45  0AF8               	incf	memcpy@d+1,f
  6432  0C46  2C25               	goto	l2527
  6433  0C47                     __end_of_memcpy:	
  6434                           ;	Return value of _memcpy is never used
  6435                           
  6436                           
  6437                           	psect	text27
  6438  0A65                     __ptext27:	
  6439 ;; *************** function ___bmul *****************
  6440 ;; Defined at:
  6441 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;  multiplier      1    wreg     unsigned char 
  6444 ;;  multiplicand    1    0[COMMON] unsigned char 
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;  multiplier      1    3[COMMON] unsigned char 
  6447 ;;  product         1    2[COMMON] unsigned char 
  6448 ;; Return value:  Size  Location     Type
  6449 ;;                  1    wreg      unsigned char 
  6450 ;; Registers used:
  6451 ;;		wreg, status,2, status,0
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6457 ;;      Params:         1       0       0       0       0
  6458 ;;      Locals:         2       0       0       0       0
  6459 ;;      Temps:          1       0       0       0       0
  6460 ;;      Totals:         4       0       0       0       0
  6461 ;;Total ram usage:        4 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; This function calls:
  6464 ;;		Nothing
  6465 ;; This function is called by:
  6466 ;;		_find_best_solution
  6467 ;;		_main
  6468 ;;		_printf_debug_cur_MATRIX44
  6469 ;;		_get_MATRIX44
  6470 ;;		_printf_debug_all_MATRIX44
  6471 ;;		_sprintf
  6472 ;; This function uses a non-reentrant model
  6473 ;;
  6474                           
  6475                           
  6476                           ;psect for function ___bmul
  6477  0A65                     ___bmul:	
  6478                           
  6479                           ;incstack = 0
  6480                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6481                           ;___bmul@multiplier stored from wreg
  6482  0A65  00F3               	movwf	___bmul@multiplier
  6483  0A66  01F2               	clrf	___bmul@product
  6484  0A67                     l2999:	
  6485  0A67  1C73               	btfss	___bmul@multiplier,0
  6486  0A68  2A6D               	goto	l3003
  6487  0A69  0870               	movf	___bmul@multiplicand,w
  6488  0A6A  00F1               	movwf	??___bmul
  6489  0A6B  0871               	movf	??___bmul,w
  6490  0A6C  07F2               	addwf	___bmul@product,f
  6491  0A6D                     l3003:	
  6492  0A6D  1003               	clrc
  6493  0A6E  0DF0               	rlf	___bmul@multiplicand,f
  6494  0A6F  1003               	clrc
  6495  0A70  0CF3               	rrf	___bmul@multiplier,f
  6496  0A71  0873               	movf	___bmul@multiplier,w
  6497  0A72  1D03               	btfss	3,2
  6498  0A73  2A67               	goto	l2999
  6499  0A74  0872               	movf	___bmul@product,w
  6500  0A75  0008               	return
  6501  0A76                     __end_of___bmul:	
  6502                           
  6503                           	psect	text28
  6504  0E54                     __ptext28:	
  6505 ;; *************** function _clear *****************
  6506 ;; Defined at:
  6507 ;;		line 805 in file "teris_16f886.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;  x               1    wreg     char 
  6510 ;;  y               1    0[COMMON] char 
  6511 ;;  matrix44        2    1[COMMON] PTR const struct .
  6512 ;;		 -> NULL(0), g_matrix44(384), 
  6513 ;;  matrix88        1    3[COMMON] PTR struct .
  6514 ;;		 -> g_matrix88(64), 
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;  x               1    8[COMMON] char 
  6517 ;;  col             1   10[COMMON] unsigned char 
  6518 ;;  row             1    9[COMMON] unsigned char 
  6519 ;; Return value:  Size  Location     Type
  6520 ;;                  1    wreg      void 
  6521 ;; Registers used:
  6522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6528 ;;      Params:         4       0       0       0       0
  6529 ;;      Locals:         3       0       0       0       0
  6530 ;;      Temps:          4       0       0       0       0
  6531 ;;      Totals:        11       0       0       0       0
  6532 ;;Total ram usage:       11 bytes
  6533 ;; Hardware stack levels used:    2
  6534 ;; This function calls:
  6535 ;;		Nothing
  6536 ;; This function is called by:
  6537 ;;		_main
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           
  6542                           ;psect for function _clear
  6543  0E54                     _clear:	
  6544                           
  6545                           ;incstack = 0
  6546                           ; Regs used in _clear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  6547                           ;clear@x stored from wreg
  6548  0E54  00F8               	movwf	clear@x
  6549                           
  6550                           ;teris_16f886.c: 807: for(uint8_t row = 0; row < 4; row++)
  6551  0E55  01F9               	clrf	clear@row
  6552  0E56                     L9:	
  6553  0E56  3004               	movlw	4
  6554  0E57  0279               	subwf	clear@row,w
  6555  0E58  1803               	btfsc	3,0
  6556  0E59  0008               	return
  6557                           
  6558                           ;teris_16f886.c: 808: {
  6559                           ;teris_16f886.c: 809: for(uint8_t col = 0; col < 4; col++)
  6560  0E5A  01FA               	clrf	clear@col
  6561  0E5B  3004               	movlw	4
  6562  0E5C  027A               	subwf	clear@col,w
  6563  0E5D  1803               	btfsc	3,0
  6564  0E5E  2E9E               	goto	l3247
  6565  0E5F                     l3239:	
  6566                           
  6567                           ;teris_16f886.c: 810: {
  6568                           ;teris_16f886.c: 811: if(matrix44->data[row][col] == 1)
  6569  0E5F  0879               	movf	clear@row,w
  6570  0E60  00F4               	movwf	??_clear
  6571  0E61  01F5               	clrf	??_clear+1
  6572  0E62  1003               	clrc
  6573  0E63  0DF4               	rlf	??_clear,f
  6574  0E64  0DF5               	rlf	??_clear+1,f
  6575  0E65  1003               	clrc
  6576  0E66  0DF4               	rlf	??_clear,f
  6577  0E67  0DF5               	rlf	??_clear+1,f
  6578  0E68  0874               	movf	??_clear,w
  6579  0E69  0771               	addwf	clear@matrix44,w
  6580  0E6A  00F6               	movwf	??_clear+2
  6581  0E6B  0875               	movf	??_clear+1,w
  6582  0E6C  1803               	skipnc
  6583  0E6D  0A75               	incf	??_clear+1,w
  6584  0E6E  0772               	addwf	clear@matrix44+1,w
  6585  0E6F  00F7               	movwf	??_clear+3
  6586  0E70  087A               	movf	clear@col,w
  6587  0E71  0776               	addwf	??_clear+2,w
  6588  0E72  0084               	movwf	4
  6589  0E73  0877               	movf	??_clear+3,w
  6590  0E74  1803               	skipnc
  6591  0E75  0A77               	incf	??_clear+3,w
  6592  0E76  1283               	bcf	3,5	;RP0=0, select bank0
  6593  0E77  1303               	bcf	3,6	;RP1=0, select bank0
  6594  0E78  00FF               	movwf	127
  6595  0E79  120A  158A  2000  120A  158A  	fcall	stringtab
  6596  0E7E  3A01               	xorlw	1
  6597  0E7F  1D03               	skipz
  6598  0E80  2E96               	goto	l3243
  6599                           
  6600                           ;teris_16f886.c: 812: {
  6601                           ;teris_16f886.c: 813: matrix88->data[y + row][x + col] = 0;
  6602  0E81  087A               	movf	clear@col,w
  6603  0E82  0778               	addwf	clear@x,w
  6604  0E83  0773               	addwf	clear@matrix88,w
  6605  0E84  00F4               	movwf	??_clear
  6606  0E85  0879               	movf	clear@row,w
  6607  0E86  0770               	addwf	clear@y,w
  6608  0E87  00F5               	movwf	??_clear+1
  6609  0E88  3002               	movlw	2
  6610  0E89                     u4095:	
  6611  0E89  1003               	clrc
  6612  0E8A  0DF5               	rlf	??_clear+1,f
  6613  0E8B  3EFF               	addlw	-1
  6614  0E8C  1D03               	skipz
  6615  0E8D  2E89               	goto	u4095
  6616  0E8E  1003               	clrc
  6617  0E8F  0D75               	rlf	??_clear+1,w
  6618  0E90  0774               	addwf	??_clear,w
  6619  0E91  00F6               	movwf	??_clear+2
  6620  0E92  0876               	movf	??_clear+2,w
  6621  0E93  0084               	movwf	4
  6622  0E94  1783               	bsf	3,7	;select IRP bank2
  6623  0E95  0180               	clrf	0
  6624  0E96                     l3243:	
  6625  0E96  3001               	movlw	1
  6626  0E97  00F4               	movwf	??_clear
  6627  0E98  0874               	movf	??_clear,w
  6628  0E99  07FA               	addwf	clear@col,f
  6629  0E9A  3004               	movlw	4
  6630  0E9B  027A               	subwf	clear@col,w
  6631  0E9C  1C03               	skipc
  6632  0E9D  2E5F               	goto	l3239
  6633  0E9E                     l3247:	
  6634  0E9E  3001               	movlw	1
  6635  0E9F  00F4               	movwf	??_clear
  6636  0EA0  0874               	movf	??_clear,w
  6637  0EA1  07F9               	addwf	clear@row,f
  6638  0EA2  2E56               	goto	L9
  6639  0EA3                     __end_of_clear:	
  6640                           
  6641                           	psect	text29
  6642  0AD4                     __ptext29:	
  6643 ;; *************** function _char_info_index_rand *****************
  6644 ;; Defined at:
  6645 ;;		line 882 in file "teris_16f886.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;		None
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;		None
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  1    wreg      unsigned char 
  6652 ;; Registers used:
  6653 ;;		wreg, status,2, status,0, pclath, cstack
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6659 ;;      Params:         0       0       0       0       0
  6660 ;;      Locals:         0       0       0       0       0
  6661 ;;      Temps:          0       0       0       0       0
  6662 ;;      Totals:         0       0       0       0       0
  6663 ;;Total ram usage:        0 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; Hardware stack levels required when called:    2
  6666 ;; This function calls:
  6667 ;;		___awmod
  6668 ;;		_rand
  6669 ;; This function is called by:
  6670 ;;		_main
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           
  6675                           ;psect for function _char_info_index_rand
  6676  0AD4                     _char_info_index_rand:	
  6677                           
  6678                           ;teris_16f886.c: 884: return (uint8_t)(rand()%9);
  6679                           
  6680                           ;incstack = 0
  6681                           ; Regs used in _char_info_index_rand: [wreg+status,2+status,0+pclath+cstack]
  6682  0AD4  3009               	movlw	9
  6683  0AD5  1283               	bcf	3,5	;RP0=0, select bank0
  6684  0AD6  1303               	bcf	3,6	;RP1=0, select bank0
  6685  0AD7  00CB               	movwf	___awmod@divisor
  6686  0AD8  3000               	movlw	0
  6687  0AD9  00CC               	movwf	___awmod@divisor+1
  6688  0ADA  120A  158A  2578  120A  158A  	fcall	_rand
  6689  0ADF  1283               	bcf	3,5	;RP0=0, select bank0
  6690  0AE0  1303               	bcf	3,6	;RP1=0, select bank0
  6691  0AE1  0845               	movf	?_rand+1,w
  6692  0AE2  00CE               	movwf	___awmod@dividend+1
  6693  0AE3  0844               	movf	?_rand,w
  6694  0AE4  00CD               	movwf	___awmod@dividend
  6695  0AE5  120A  158A  2607   	fcall	___awmod
  6696  0AE8  1283               	bcf	3,5	;RP0=0, select bank0
  6697  0AE9  1303               	bcf	3,6	;RP1=0, select bank0
  6698  0AEA  084B               	movf	?___awmod,w
  6699  0AEB  0008               	return
  6700  0AEC                     __end_of_char_info_index_rand:	
  6701                           
  6702                           	psect	text30
  6703  0D78                     __ptext30:	
  6704 ;; *************** function _rand *****************
  6705 ;; Defined at:
  6706 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  6707 ;; Parameters:    Size  Location     Type
  6708 ;;		None
  6709 ;; Auto vars:     Size  Location     Type
  6710 ;;		None
  6711 ;; Return value:  Size  Location     Type
  6712 ;;                  2    0[BANK0 ] int 
  6713 ;; Registers used:
  6714 ;;		wreg, status,2, status,0, pclath, cstack
  6715 ;; Tracked objects:
  6716 ;;		On entry : 0/0
  6717 ;;		On exit  : 0/0
  6718 ;;		Unchanged: 0/0
  6719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6720 ;;      Params:         0       2       0       0       0
  6721 ;;      Locals:         0       0       0       0       0
  6722 ;;      Temps:          0       5       0       0       0
  6723 ;;      Totals:         0       7       0       0       0
  6724 ;;Total ram usage:        7 bytes
  6725 ;; Hardware stack levels used:    1
  6726 ;; Hardware stack levels required when called:    1
  6727 ;; This function calls:
  6728 ;;		___lmul
  6729 ;; This function is called by:
  6730 ;;		_char_info_index_rand
  6731 ;; This function uses a non-reentrant model
  6732 ;;
  6733                           
  6734                           
  6735                           ;psect for function _rand
  6736  0D78                     _rand:	
  6737                           
  6738                           ;incstack = 0
  6739                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  6740  0D78  1283               	bcf	3,5	;RP0=0, select bank0
  6741  0D79  1303               	bcf	3,6	;RP1=0, select bank0
  6742  0D7A  083E               	movf	_randx+3,w
  6743  0D7B  00F3               	movwf	___lmul@multiplier+3
  6744  0D7C  083D               	movf	_randx+2,w
  6745  0D7D  00F2               	movwf	___lmul@multiplier+2
  6746  0D7E  083C               	movf	_randx+1,w
  6747  0D7F  00F1               	movwf	___lmul@multiplier+1
  6748  0D80  083B               	movf	_randx,w
  6749  0D81  00F0               	movwf	___lmul@multiplier
  6750  0D82  3041               	movlw	65
  6751  0D83  00F7               	movwf	___lmul@multiplicand+3
  6752  0D84  30C6               	movlw	198
  6753  0D85  00F6               	movwf	___lmul@multiplicand+2
  6754  0D86  304E               	movlw	78
  6755  0D87  00F5               	movwf	___lmul@multiplicand+1
  6756  0D88  306D               	movlw	109
  6757  0D89  00F4               	movwf	___lmul@multiplicand
  6758  0D8A  120A  158A  24AF  120A  158A  	fcall	___lmul
  6759  0D8F  0873               	movf	?___lmul+3,w
  6760  0D90  1283               	bcf	3,5	;RP0=0, select bank0
  6761  0D91  1303               	bcf	3,6	;RP1=0, select bank0
  6762  0D92  00BE               	movwf	_randx+3
  6763  0D93  0872               	movf	?___lmul+2,w
  6764  0D94  00BD               	movwf	_randx+2
  6765  0D95  0871               	movf	?___lmul+1,w
  6766  0D96  00BC               	movwf	_randx+1
  6767  0D97  0870               	movf	?___lmul,w
  6768  0D98  00BB               	movwf	_randx
  6769  0D99  3039               	movlw	57
  6770  0D9A  07BB               	addwf	_randx,f
  6771  0D9B  3030               	movlw	48
  6772  0D9C  1803               	skipnc
  6773  0D9D  3031               	movlw	49
  6774  0D9E  07BC               	addwf	_randx+1,f
  6775  0D9F  3000               	movlw	0
  6776  0DA0  1803               	skipnc
  6777  0DA1  3001               	movlw	1
  6778  0DA2  07BD               	addwf	_randx+2,f
  6779  0DA3  3000               	movlw	0
  6780  0DA4  1803               	skipnc
  6781  0DA5  3001               	movlw	1
  6782  0DA6  07BE               	addwf	_randx+3,f
  6783  0DA7  083B               	movf	_randx,w
  6784  0DA8  00C6               	movwf	??_rand
  6785  0DA9  083C               	movf	_randx+1,w
  6786  0DAA  00C7               	movwf	??_rand+1
  6787  0DAB  083D               	movf	_randx+2,w
  6788  0DAC  00C8               	movwf	??_rand+2
  6789  0DAD  083E               	movf	_randx+3,w
  6790  0DAE  00C9               	movwf	??_rand+3
  6791  0DAF  3010               	movlw	16
  6792  0DB0  00CA               	movwf	??_rand+4
  6793  0DB1                     u3295:	
  6794  0DB1  0D49               	rlf	??_rand+3,w
  6795  0DB2  0CC9               	rrf	??_rand+3,f
  6796  0DB3  0CC8               	rrf	??_rand+2,f
  6797  0DB4  0CC7               	rrf	??_rand+1,f
  6798  0DB5  0CC6               	rrf	??_rand,f
  6799  0DB6  0BCA               	decfsz	??_rand+4,f
  6800  0DB7  2DB1               	goto	u3295
  6801  0DB8  30FF               	movlw	255
  6802  0DB9  0546               	andwf	??_rand,w
  6803  0DBA  00C4               	movwf	?_rand
  6804  0DBB  307F               	movlw	127
  6805  0DBC  0547               	andwf	??_rand+1,w
  6806  0DBD  00C5               	movwf	?_rand+1
  6807  0DBE  0008               	return
  6808  0DBF                     __end_of_rand:	
  6809                           
  6810                           	psect	text31
  6811  0CAF                     __ptext31:	
  6812 ;; *************** function ___lmul *****************
  6813 ;; Defined at:
  6814 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;  multiplier      4    0[COMMON] unsigned long 
  6817 ;;  multiplicand    4    4[COMMON] unsigned long 
  6818 ;; Auto vars:     Size  Location     Type
  6819 ;;  product         4    9[COMMON] unsigned long 
  6820 ;; Return value:  Size  Location     Type
  6821 ;;                  4    0[COMMON] unsigned long 
  6822 ;; Registers used:
  6823 ;;		wreg, status,2, status,0
  6824 ;; Tracked objects:
  6825 ;;		On entry : 0/0
  6826 ;;		On exit  : 0/0
  6827 ;;		Unchanged: 0/0
  6828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6829 ;;      Params:         8       0       0       0       0
  6830 ;;      Locals:         4       0       0       0       0
  6831 ;;      Temps:          1       0       0       0       0
  6832 ;;      Totals:        13       0       0       0       0
  6833 ;;Total ram usage:       13 bytes
  6834 ;; Hardware stack levels used:    1
  6835 ;; This function calls:
  6836 ;;		Nothing
  6837 ;; This function is called by:
  6838 ;;		_rand
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           
  6843                           ;psect for function ___lmul
  6844  0CAF                     ___lmul:	
  6845                           
  6846                           ;incstack = 0
  6847                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6848  0CAF  3000               	movlw	0
  6849  0CB0  00FC               	movwf	___lmul@product+3
  6850  0CB1  3000               	movlw	0
  6851  0CB2  00FB               	movwf	___lmul@product+2
  6852  0CB3  3000               	movlw	0
  6853  0CB4  00FA               	movwf	___lmul@product+1
  6854  0CB5  3000               	movlw	0
  6855  0CB6  00F9               	movwf	___lmul@product
  6856  0CB7                     l2665:	
  6857  0CB7  1C70               	btfss	___lmul@multiplier,0
  6858  0CB8  2CCD               	goto	l2669
  6859  0CB9  0874               	movf	___lmul@multiplicand,w
  6860  0CBA  07F9               	addwf	___lmul@product,f
  6861  0CBB  0875               	movf	___lmul@multiplicand+1,w
  6862  0CBC  1103               	clrz
  6863  0CBD  1803               	skipnc
  6864  0CBE  3E01               	addlw	1
  6865  0CBF  1D03               	btfss	3,2
  6866  0CC0  07FA               	addwf	___lmul@product+1,f
  6867  0CC1  0876               	movf	___lmul@multiplicand+2,w
  6868  0CC2  1103               	clrz
  6869  0CC3  1803               	skipnc
  6870  0CC4  3E01               	addlw	1
  6871  0CC5  1D03               	btfss	3,2
  6872  0CC6  07FB               	addwf	___lmul@product+2,f
  6873  0CC7  0877               	movf	___lmul@multiplicand+3,w
  6874  0CC8  1103               	clrz
  6875  0CC9  1803               	skipnc
  6876  0CCA  3E01               	addlw	1
  6877  0CCB  1D03               	btfss	3,2
  6878  0CCC  07FC               	addwf	___lmul@product+3,f
  6879  0CCD                     l2669:	
  6880  0CCD  3001               	movlw	1
  6881  0CCE  00F8               	movwf	??___lmul
  6882  0CCF                     u2845:	
  6883  0CCF  1003               	clrc
  6884  0CD0  0DF4               	rlf	___lmul@multiplicand,f
  6885  0CD1  0DF5               	rlf	___lmul@multiplicand+1,f
  6886  0CD2  0DF6               	rlf	___lmul@multiplicand+2,f
  6887  0CD3  0DF7               	rlf	___lmul@multiplicand+3,f
  6888  0CD4  0BF8               	decfsz	??___lmul,f
  6889  0CD5  2CCF               	goto	u2845
  6890  0CD6  3001               	movlw	1
  6891  0CD7                     u2855:	
  6892  0CD7  1003               	clrc
  6893  0CD8  0CF3               	rrf	___lmul@multiplier+3,f
  6894  0CD9  0CF2               	rrf	___lmul@multiplier+2,f
  6895  0CDA  0CF1               	rrf	___lmul@multiplier+1,f
  6896  0CDB  0CF0               	rrf	___lmul@multiplier,f
  6897  0CDC  3EFF               	addlw	-1
  6898  0CDD  1D03               	skipz
  6899  0CDE  2CD7               	goto	u2855
  6900  0CDF  0873               	movf	___lmul@multiplier+3,w
  6901  0CE0  0472               	iorwf	___lmul@multiplier+2,w
  6902  0CE1  0471               	iorwf	___lmul@multiplier+1,w
  6903  0CE2  0470               	iorwf	___lmul@multiplier,w
  6904  0CE3  1D03               	skipz
  6905  0CE4  2CB7               	goto	l2665
  6906  0CE5  087C               	movf	___lmul@product+3,w
  6907  0CE6  00F3               	movwf	?___lmul+3
  6908  0CE7  087B               	movf	___lmul@product+2,w
  6909  0CE8  00F2               	movwf	?___lmul+2
  6910  0CE9  087A               	movf	___lmul@product+1,w
  6911  0CEA  00F1               	movwf	?___lmul+1
  6912  0CEB  0879               	movf	___lmul@product,w
  6913  0CEC  00F0               	movwf	?___lmul
  6914  0CED  0008               	return
  6915  0CEE                     __end_of___lmul:	
  6916                           
  6917                           	psect	text32
  6918  0E07                     __ptext32:	
  6919 ;; *************** function ___awmod *****************
  6920 ;; Defined at:
  6921 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  6922 ;; Parameters:    Size  Location     Type
  6923 ;;  divisor         2    7[BANK0 ] int 
  6924 ;;  dividend        2    9[BANK0 ] int 
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;  sign            1   12[BANK0 ] unsigned char 
  6927 ;;  counter         1   11[BANK0 ] unsigned char 
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  2    7[BANK0 ] int 
  6930 ;; Registers used:
  6931 ;;		wreg, status,2, status,0
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6937 ;;      Params:         0       4       0       0       0
  6938 ;;      Locals:         0       2       0       0       0
  6939 ;;      Temps:          1       0       0       0       0
  6940 ;;      Totals:         1       6       0       0       0
  6941 ;;Total ram usage:        7 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; This function calls:
  6944 ;;		Nothing
  6945 ;; This function is called by:
  6946 ;;		_char_info_index_rand
  6947 ;;		_USARTWriteInt
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951                           
  6952                           ;psect for function ___awmod
  6953  0E07                     ___awmod:	
  6954                           
  6955                           ;incstack = 0
  6956                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6957  0E07  1283               	bcf	3,5	;RP0=0, select bank0
  6958  0E08  1303               	bcf	3,6	;RP1=0, select bank0
  6959  0E09  01D0               	clrf	___awmod@sign
  6960  0E0A  1FCE               	btfss	___awmod@dividend+1,7
  6961  0E0B  2E13               	goto	l3019
  6962  0E0C  09CD               	comf	___awmod@dividend,f
  6963  0E0D  09CE               	comf	___awmod@dividend+1,f
  6964  0E0E  0ACD               	incf	___awmod@dividend,f
  6965  0E0F  1903               	skipnz
  6966  0E10  0ACE               	incf	___awmod@dividend+1,f
  6967  0E11  01D0               	clrf	___awmod@sign
  6968  0E12  0AD0               	incf	___awmod@sign,f
  6969  0E13                     l3019:	
  6970  0E13  1FCC               	btfss	___awmod@divisor+1,7
  6971  0E14  2E1A               	goto	l3023
  6972  0E15  09CB               	comf	___awmod@divisor,f
  6973  0E16  09CC               	comf	___awmod@divisor+1,f
  6974  0E17  0ACB               	incf	___awmod@divisor,f
  6975  0E18  1903               	skipnz
  6976  0E19  0ACC               	incf	___awmod@divisor+1,f
  6977  0E1A                     l3023:	
  6978  0E1A  084B               	movf	___awmod@divisor,w
  6979  0E1B  044C               	iorwf	___awmod@divisor+1,w
  6980  0E1C  1903               	btfsc	3,2
  6981  0E1D  2E47               	goto	l3041
  6982  0E1E  01CF               	clrf	___awmod@counter
  6983  0E1F  0ACF               	incf	___awmod@counter,f
  6984  0E20                     l3031:	
  6985  0E20  1BCC               	btfsc	___awmod@divisor+1,7
  6986  0E21  2E2E               	goto	l3033
  6987  0E22  3001               	movlw	1
  6988  0E23                     u3775:	
  6989  0E23  1003               	clrc
  6990  0E24  0DCB               	rlf	___awmod@divisor,f
  6991  0E25  0DCC               	rlf	___awmod@divisor+1,f
  6992  0E26  3EFF               	addlw	-1
  6993  0E27  1D03               	skipz
  6994  0E28  2E23               	goto	u3775
  6995  0E29  3001               	movlw	1
  6996  0E2A  00FD               	movwf	??___awmod
  6997  0E2B  087D               	movf	??___awmod,w
  6998  0E2C  07CF               	addwf	___awmod@counter,f
  6999  0E2D  2E20               	goto	l3031
  7000  0E2E                     l3033:	
  7001  0E2E  084C               	movf	___awmod@divisor+1,w
  7002  0E2F  024E               	subwf	___awmod@dividend+1,w
  7003  0E30  1D03               	skipz
  7004  0E31  2E34               	goto	u3795
  7005  0E32  084B               	movf	___awmod@divisor,w
  7006  0E33  024D               	subwf	___awmod@dividend,w
  7007  0E34                     u3795:	
  7008  0E34  1C03               	skipc
  7009  0E35  2E3C               	goto	l3037
  7010  0E36  084B               	movf	___awmod@divisor,w
  7011  0E37  02CD               	subwf	___awmod@dividend,f
  7012  0E38  084C               	movf	___awmod@divisor+1,w
  7013  0E39  1C03               	skipc
  7014  0E3A  03CE               	decf	___awmod@dividend+1,f
  7015  0E3B  02CE               	subwf	___awmod@dividend+1,f
  7016  0E3C                     l3037:	
  7017  0E3C  3001               	movlw	1
  7018  0E3D                     u3805:	
  7019  0E3D  1003               	clrc
  7020  0E3E  0CCC               	rrf	___awmod@divisor+1,f
  7021  0E3F  0CCB               	rrf	___awmod@divisor,f
  7022  0E40  3EFF               	addlw	-1
  7023  0E41  1D03               	skipz
  7024  0E42  2E3D               	goto	u3805
  7025  0E43  3001               	movlw	1
  7026  0E44  02CF               	subwf	___awmod@counter,f
  7027  0E45  1D03               	btfss	3,2
  7028  0E46  2E2E               	goto	l3033
  7029  0E47                     l3041:	
  7030  0E47  0850               	movf	___awmod@sign,w
  7031  0E48  1903               	btfsc	3,2
  7032  0E49  2E4F               	goto	l3045
  7033  0E4A  09CD               	comf	___awmod@dividend,f
  7034  0E4B  09CE               	comf	___awmod@dividend+1,f
  7035  0E4C  0ACD               	incf	___awmod@dividend,f
  7036  0E4D  1903               	skipnz
  7037  0E4E  0ACE               	incf	___awmod@dividend+1,f
  7038  0E4F                     l3045:	
  7039  0E4F  084E               	movf	___awmod@dividend+1,w
  7040  0E50  00CC               	movwf	?___awmod+1
  7041  0E51  084D               	movf	___awmod@dividend,w
  7042  0E52  00CB               	movwf	?___awmod
  7043  0E53  0008               	return
  7044  0E54                     __end_of___awmod:	
  7045                           
  7046                           	psect	text33
  7047  0D31                     __ptext33:	
  7048 ;; *************** function _USARTInit *****************
  7049 ;; Defined at:
  7050 ;;		line 31 in file "usart_pic16.c"
  7051 ;; Parameters:    Size  Location     Type
  7052 ;;  baud_rate       2    0[COMMON] unsigned int 
  7053 ;; Auto vars:     Size  Location     Type
  7054 ;;		None
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  1    wreg      void 
  7057 ;; Registers used:
  7058 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7064 ;;      Params:         2       0       0       0       0
  7065 ;;      Locals:         0       0       0       0       0
  7066 ;;      Temps:          1       0       0       0       0
  7067 ;;      Totals:         3       0       0       0       0
  7068 ;;Total ram usage:        3 bytes
  7069 ;; Hardware stack levels used:    1
  7070 ;; This function calls:
  7071 ;;		Nothing
  7072 ;; This function is called by:
  7073 ;;		_main
  7074 ;; This function uses a non-reentrant model
  7075 ;;
  7076                           
  7077                           
  7078                           ;psect for function _USARTInit
  7079  0D31                     _USARTInit:	
  7080                           
  7081                           ;usart_pic16.c: 33: UQFront = UQEnd = -1;
  7082                           
  7083                           ;incstack = 0
  7084                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  7085  0D31  30FF               	movlw	255
  7086  0D32  1283               	bcf	3,5	;RP0=0, select bank0
  7087  0D33  1303               	bcf	3,6	;RP1=0, select bank0
  7088  0D34  00E9               	movwf	_UQEnd	;volatile
  7089  0D35  00F2               	movwf	??_USARTInit
  7090  0D36  0872               	movf	??_USARTInit,w
  7091  0D37  00EA               	movwf	_UQFront	;volatile
  7092                           
  7093                           ;usart_pic16.c: 36: switch (baud_rate) {
  7094  0D38  2D44               	goto	l3061
  7095  0D39                     l3051:	
  7096                           ;usart_pic16.c: 37: case 9600:
  7097                           
  7098                           
  7099                           ;usart_pic16.c: 38: SPBRG = 129;
  7100  0D39  3081               	movlw	129
  7101  0D3A  2D40               	goto	L12
  7102  0D3B                     l3053:	
  7103                           ;usart_pic16.c: 40: case 19200:
  7104                           
  7105                           ;usart_pic16.c: 39: break;
  7106                           
  7107                           
  7108                           ;usart_pic16.c: 41: SPBRG = 64;
  7109  0D3B  3040               	movlw	64
  7110  0D3C  2D40               	goto	L12
  7111  0D3D                     l3055:	
  7112                           ;usart_pic16.c: 43: case 28800:
  7113                           
  7114                           ;usart_pic16.c: 42: break;
  7115                           
  7116                           
  7117                           ;usart_pic16.c: 44: SPBRG = 42;
  7118  0D3D  302A               	movlw	42
  7119  0D3E  2D40               	goto	L12
  7120  0D3F                     l3057:	
  7121                           ;usart_pic16.c: 46: case 33600:
  7122                           
  7123                           ;usart_pic16.c: 45: break;
  7124                           
  7125                           
  7126                           ;usart_pic16.c: 47: SPBRG = 36;
  7127  0D3F  3024               	movlw	36
  7128  0D40                     L12:	
  7129  0D40  1683               	bsf	3,5	;RP0=1, select bank1
  7130  0D41  1303               	bcf	3,6	;RP1=0, select bank1
  7131  0D42  0099               	movwf	25	;volatile
  7132                           
  7133                           ;usart_pic16.c: 49: }
  7134                           
  7135                           ;usart_pic16.c: 48: break;
  7136  0D43  2D66               	goto	l29
  7137  0D44                     l3061:	
  7138                           
  7139                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  7140                           ; Switch size 1, requested type "space"
  7141                           ; Number of cases is 4, Range of values is 37 to 131
  7142                           ; switch strategies available:
  7143                           ; Name         Instructions Cycles
  7144                           ; simple_byte           13     7 (average)
  7145                           ; jumptable            263     9 (fixed)
  7146                           ;	Chosen strategy is simple_byte
  7147  0D44  0871               	movf	USARTInit@baud_rate+1,w
  7148  0D45  3A25               	xorlw	37	; case 37
  7149  0D46  1903               	skipnz
  7150  0D47  2D52               	goto	l4719
  7151  0D48  3A6E               	xorlw	110	; case 75
  7152  0D49  1903               	skipnz
  7153  0D4A  2D57               	goto	l4721
  7154  0D4B  3A3B               	xorlw	59	; case 112
  7155  0D4C  1903               	skipnz
  7156  0D4D  2D5C               	goto	l4723
  7157  0D4E  3AF3               	xorlw	243	; case 131
  7158  0D4F  1903               	skipnz
  7159  0D50  2D61               	goto	l4725
  7160  0D51  2D66               	goto	l29
  7161  0D52                     l4719:	
  7162                           
  7163                           ; Switch size 1, requested type "space"
  7164                           ; Number of cases is 1, Range of values is 128 to 128
  7165                           ; switch strategies available:
  7166                           ; Name         Instructions Cycles
  7167                           ; simple_byte            4     3 (average)
  7168                           ; direct_byte           14    11 (fixed)
  7169                           ; jumptable            263     9 (fixed)
  7170                           ;	Chosen strategy is simple_byte
  7171  0D52  0870               	movf	USARTInit@baud_rate,w
  7172  0D53  3A80               	xorlw	128	; case 128
  7173  0D54  1903               	skipnz
  7174  0D55  2D39               	goto	l3051
  7175  0D56  2D66               	goto	l29
  7176  0D57                     l4721:	
  7177                           
  7178                           ; Switch size 1, requested type "space"
  7179                           ; Number of cases is 1, Range of values is 0 to 0
  7180                           ; switch strategies available:
  7181                           ; Name         Instructions Cycles
  7182                           ; simple_byte            4     3 (average)
  7183                           ; direct_byte           11     8 (fixed)
  7184                           ; jumptable            260     6 (fixed)
  7185                           ;	Chosen strategy is simple_byte
  7186  0D57  0870               	movf	USARTInit@baud_rate,w
  7187  0D58  3A00               	xorlw	0	; case 0
  7188  0D59  1903               	skipnz
  7189  0D5A  2D3B               	goto	l3053
  7190  0D5B  2D66               	goto	l29
  7191  0D5C                     l4723:	
  7192                           
  7193                           ; Switch size 1, requested type "space"
  7194                           ; Number of cases is 1, Range of values is 128 to 128
  7195                           ; switch strategies available:
  7196                           ; Name         Instructions Cycles
  7197                           ; simple_byte            4     3 (average)
  7198                           ; direct_byte           14    11 (fixed)
  7199                           ; jumptable            263     9 (fixed)
  7200                           ;	Chosen strategy is simple_byte
  7201  0D5C  0870               	movf	USARTInit@baud_rate,w
  7202  0D5D  3A80               	xorlw	128	; case 128
  7203  0D5E  1903               	skipnz
  7204  0D5F  2D3D               	goto	l3055
  7205  0D60  2D66               	goto	l29
  7206  0D61                     l4725:	
  7207                           
  7208                           ; Switch size 1, requested type "space"
  7209                           ; Number of cases is 1, Range of values is 64 to 64
  7210                           ; switch strategies available:
  7211                           ; Name         Instructions Cycles
  7212                           ; simple_byte            4     3 (average)
  7213                           ; direct_byte           14    11 (fixed)
  7214                           ; jumptable            263     9 (fixed)
  7215                           ;	Chosen strategy is simple_byte
  7216  0D61  0870               	movf	USARTInit@baud_rate,w
  7217  0D62  3A40               	xorlw	64	; case 64
  7218  0D63  1903               	skipnz
  7219  0D64  2D3F               	goto	l3057
  7220  0D65  2D66               	goto	l29
  7221  0D66                     l29:	
  7222                           
  7223                           ;usart_pic16.c: 52: TXSTAbits.TX9 = 0;
  7224  0D66  1683               	bsf	3,5	;RP0=1, select bank1
  7225  0D67  1303               	bcf	3,6	;RP1=0, select bank1
  7226  0D68  1318               	bcf	24,6	;volatile
  7227                           
  7228                           ;usart_pic16.c: 53: TXSTAbits.TXEN = 1;
  7229  0D69  1698               	bsf	24,5	;volatile
  7230                           
  7231                           ;usart_pic16.c: 54: TXSTAbits.SYNC = 0;
  7232  0D6A  1218               	bcf	24,4	;volatile
  7233                           
  7234                           ;usart_pic16.c: 55: TXSTAbits.BRGH = 1;
  7235  0D6B  1518               	bsf	24,2	;volatile
  7236                           
  7237                           ;usart_pic16.c: 58: RCSTAbits.SPEN = 1;
  7238  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  7239  0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  7240  0D6E  1798               	bsf	24,7	;volatile
  7241                           
  7242                           ;usart_pic16.c: 59: RCSTAbits.RX9 = 0;
  7243  0D6F  1318               	bcf	24,6	;volatile
  7244                           
  7245                           ;usart_pic16.c: 60: RCSTAbits.CREN = 1;
  7246  0D70  1618               	bsf	24,4	;volatile
  7247                           
  7248                           ;usart_pic16.c: 61: RCSTAbits.ADDEN = 0;
  7249  0D71  1198               	bcf	24,3	;volatile
  7250                           
  7251                           ;usart_pic16.c: 64: RCIE = 1;
  7252  0D72  1683               	bsf	3,5	;RP0=1, select bank1
  7253  0D73  1303               	bcf	3,6	;RP1=0, select bank1
  7254  0D74  168C               	bsf	12,5	;volatile
  7255                           
  7256                           ;usart_pic16.c: 65: PEIE = 1;
  7257  0D75  170B               	bsf	11,6	;volatile
  7258                           
  7259                           ;usart_pic16.c: 67: (GIE = 1);
  7260  0D76  178B               	bsf	11,7	;volatile
  7261  0D77  0008               	return
  7262  0D78                     __end_of_USARTInit:	
  7263                           
  7264                           	psect	text34
  7265  0AAB                     __ptext34:	
  7266 ;; *************** function _Clear_Matrix *****************
  7267 ;; Defined at:
  7268 ;;		line 597 in file "teris_16f886.c"
  7269 ;; Parameters:    Size  Location     Type
  7270 ;;		None
  7271 ;; Auto vars:     Size  Location     Type
  7272 ;;		None
  7273 ;; Return value:  Size  Location     Type
  7274 ;;                  1    wreg      void 
  7275 ;; Registers used:
  7276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7277 ;; Tracked objects:
  7278 ;;		On entry : 0/0
  7279 ;;		On exit  : 0/0
  7280 ;;		Unchanged: 0/0
  7281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7282 ;;      Params:         0       0       0       0       0
  7283 ;;      Locals:         0       0       0       0       0
  7284 ;;      Temps:          0       0       0       0       0
  7285 ;;      Totals:         0       0       0       0       0
  7286 ;;Total ram usage:        0 bytes
  7287 ;; Hardware stack levels used:    1
  7288 ;; Hardware stack levels required when called:    5
  7289 ;; This function calls:
  7290 ;;		_memset
  7291 ;;		_printf_Screen
  7292 ;; This function is called by:
  7293 ;;		_main
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           
  7298                           ;psect for function _Clear_Matrix
  7299  0AAB                     _Clear_Matrix:	
  7300                           
  7301                           ;teris_16f886.c: 599: memset(&g_matrix88, 0, sizeof(MATRIX88));
  7302                           
  7303                           ;incstack = 0
  7304                           ; Regs used in _Clear_Matrix: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7305  0AAB  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  7306  0AAC  00F0               	movwf	memset@p1
  7307  0AAD  3001               	movlw	1
  7308  0AAE  00F1               	movwf	memset@p1+1
  7309  0AAF  3000               	movlw	0
  7310  0AB0  00F2               	movwf	memset@c
  7311  0AB1  00F3               	movwf	memset@c+1
  7312  0AB2  3040               	movlw	64
  7313  0AB3  00F4               	movwf	memset@n
  7314  0AB4  3000               	movlw	0
  7315  0AB5  00F5               	movwf	memset@n+1
  7316  0AB6  120A  158A  22EC  120A  158A  	fcall	_memset
  7317                           
  7318                           ;teris_16f886.c: 600: printf_Screen();
  7319  0ABB  120A  158A  223B   	fcall	_printf_Screen
  7320  0ABE  0008               	return
  7321  0ABF                     __end_of_Clear_Matrix:	
  7322                           
  7323                           	psect	text35
  7324  0A3B                     __ptext35:	
  7325 ;; *************** function _printf_Screen *****************
  7326 ;; Defined at:
  7327 ;;		line 580 in file "teris_16f886.c"
  7328 ;; Parameters:    Size  Location     Type
  7329 ;;		None
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;		None
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  1    wreg      void 
  7334 ;; Registers used:
  7335 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7341 ;;      Params:         0       0       0       0       0
  7342 ;;      Locals:         0       0       0       0       0
  7343 ;;      Temps:          0       0       0       0       0
  7344 ;;      Totals:         0       0       0       0       0
  7345 ;;Total ram usage:        0 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:    4
  7348 ;; This function calls:
  7349 ;;		_printf_MATRIX88
  7350 ;; This function is called by:
  7351 ;;		_Clear_Matrix
  7352 ;;		_main
  7353 ;; This function uses a non-reentrant model
  7354 ;;
  7355                           
  7356                           
  7357                           ;psect for function _printf_Screen
  7358  0A3B                     _printf_Screen:	
  7359                           
  7360                           ;teris_16f886.c: 582: printf_MATRIX88(&g_matrix88);
  7361                           
  7362                           ;incstack = 0
  7363                           ; Regs used in _printf_Screen: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7364  0A3B  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  7365  0A3C  120A  158A  2299   	fcall	_printf_MATRIX88
  7366  0A3F  0008               	return
  7367  0A40                     __end_of_printf_Screen:	
  7368                           
  7369                           	psect	text36
  7370  0A99                     __ptext36:	
  7371 ;; *************** function _printf_MATRIX88 *****************
  7372 ;; Defined at:
  7373 ;;		line 574 in file "teris_16f886.c"
  7374 ;; Parameters:    Size  Location     Type
  7375 ;;  matrix88        1    wreg     PTR const struct .
  7376 ;;		 -> g_matrix88(64), 
  7377 ;; Auto vars:     Size  Location     Type
  7378 ;;  matrix88        1    0[BANK0 ] PTR const struct .
  7379 ;;		 -> g_matrix88(64), 
  7380 ;;  matrix7219      8    1[BANK0 ] struct .
  7381 ;; Return value:  Size  Location     Type
  7382 ;;                  1    wreg      void 
  7383 ;; Registers used:
  7384 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7385 ;; Tracked objects:
  7386 ;;		On entry : 0/0
  7387 ;;		On exit  : 0/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7390 ;;      Params:         0       0       0       0       0
  7391 ;;      Locals:         0       9       0       0       0
  7392 ;;      Temps:          1       0       0       0       0
  7393 ;;      Totals:         1       9       0       0       0
  7394 ;;Total ram usage:       10 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; Hardware stack levels required when called:    3
  7397 ;; This function calls:
  7398 ;;		_MATRIX88_to_MATRIX7219
  7399 ;;		_printf_MATRIX7219
  7400 ;; This function is called by:
  7401 ;;		_printf_Screen
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           
  7406                           ;psect for function _printf_MATRIX88
  7407  0A99                     _printf_MATRIX88:	
  7408                           
  7409                           ;incstack = 0
  7410                           ; Regs used in _printf_MATRIX88: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7411                           ;printf_MATRIX88@matrix88 stored from wreg
  7412  0A99  1283               	bcf	3,5	;RP0=0, select bank0
  7413  0A9A  1303               	bcf	3,6	;RP1=0, select bank0
  7414  0A9B  00C4               	movwf	printf_MATRIX88@matrix88
  7415                           
  7416                           ;teris_16f886.c: 576: MATRIX7219 matrix7219;
  7417                           ;teris_16f886.c: 577: MATRIX88_to_MATRIX7219(matrix88, &matrix7219);
  7418  0A9C  3045               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
  7419  0A9D  00FA               	movwf	??_printf_MATRIX88
  7420  0A9E  087A               	movf	??_printf_MATRIX88,w
  7421  0A9F  00F0               	movwf	MATRIX88_to_MATRIX7219@matrix7219
  7422  0AA0  0844               	movf	printf_MATRIX88@matrix88,w
  7423  0AA1  120A  158A  25BF  120A  158A  	fcall	_MATRIX88_to_MATRIX7219
  7424                           
  7425                           ;teris_16f886.c: 578: printf_MATRIX7219(&matrix7219);
  7426  0AA6  3045               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
  7427  0AA7  120A  158A  2307   	fcall	_printf_MATRIX7219
  7428  0AAA  0008               	return
  7429  0AAB                     __end_of_printf_MATRIX88:	
  7430                           
  7431                           	psect	text37
  7432  0B07                     __ptext37:	
  7433 ;; *************** function _printf_MATRIX7219 *****************
  7434 ;; Defined at:
  7435 ;;		line 518 in file "teris_16f886.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;  matrix          1    wreg     PTR const struct .
  7438 ;;		 -> printf_MATRIX88@matrix7219(8), 
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;  matrix          1    8[COMMON] PTR const struct .
  7441 ;;		 -> printf_MATRIX88@matrix7219(8), 
  7442 ;;  col             1    9[COMMON] unsigned char 
  7443 ;; Return value:  Size  Location     Type
  7444 ;;                  1    wreg      void 
  7445 ;; Registers used:
  7446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7447 ;; Tracked objects:
  7448 ;;		On entry : 0/0
  7449 ;;		On exit  : 0/0
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7452 ;;      Params:         0       0       0       0       0
  7453 ;;      Locals:         2       0       0       0       0
  7454 ;;      Temps:          2       0       0       0       0
  7455 ;;      Totals:         4       0       0       0       0
  7456 ;;Total ram usage:        4 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; Hardware stack levels required when called:    2
  7459 ;; This function calls:
  7460 ;;		_Write_Byte
  7461 ;; This function is called by:
  7462 ;;		_printf_MATRIX88
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           
  7467                           ;psect for function _printf_MATRIX7219
  7468  0B07                     _printf_MATRIX7219:	
  7469                           
  7470                           ;incstack = 0
  7471                           ; Regs used in _printf_MATRIX7219: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7472                           ;printf_MATRIX7219@matrix stored from wreg
  7473  0B07  00F8               	movwf	printf_MATRIX7219@matrix
  7474                           
  7475                           ;teris_16f886.c: 520: uint8_t col;
  7476                           ;teris_16f886.c: 522: for (col = 0; col < 8; col++)
  7477  0B08  01F9               	clrf	printf_MATRIX7219@col
  7478  0B09                     L13:	
  7479  0B09  3008               	movlw	8
  7480  0B0A  0279               	subwf	printf_MATRIX7219@col,w
  7481  0B0B  1803               	btfsc	3,0
  7482  0B0C  0008               	return
  7483                           
  7484                           ;teris_16f886.c: 523: {
  7485                           ;teris_16f886.c: 524: Write_Byte(col + 1, matrix->col[col]);
  7486  0B0D  0879               	movf	printf_MATRIX7219@col,w
  7487  0B0E  0778               	addwf	printf_MATRIX7219@matrix,w
  7488  0B0F  00F6               	movwf	??_printf_MATRIX7219
  7489  0B10  0876               	movf	??_printf_MATRIX7219,w
  7490  0B11  0084               	movwf	4
  7491  0B12  1383               	bcf	3,7	;select IRP bank0
  7492  0B13  0800               	movf	0,w
  7493  0B14  00F7               	movwf	??_printf_MATRIX7219+1
  7494  0B15  0877               	movf	??_printf_MATRIX7219+1,w
  7495  0B16  00F4               	movwf	Write_Byte@myValue
  7496  0B17  0879               	movf	printf_MATRIX7219@col,w
  7497  0B18  3E01               	addlw	1
  7498  0B19  120A  158A  2287  120A  158A  	fcall	_Write_Byte
  7499  0B1E  3001               	movlw	1
  7500  0B1F  00F6               	movwf	??_printf_MATRIX7219
  7501  0B20  0876               	movf	??_printf_MATRIX7219,w
  7502  0B21  07F9               	addwf	printf_MATRIX7219@col,f
  7503  0B22  2B09               	goto	L13
  7504  0B23                     __end_of_printf_MATRIX7219:	
  7505                           
  7506                           	psect	text38
  7507  0A87                     __ptext38:	
  7508 ;; *************** function _Write_Byte *****************
  7509 ;; Defined at:
  7510 ;;		line 478 in file "teris_16f886.c"
  7511 ;; Parameters:    Size  Location     Type
  7512 ;;  myColumn        1    wreg     unsigned char 
  7513 ;;  myValue         1    4[COMMON] unsigned char 
  7514 ;; Auto vars:     Size  Location     Type
  7515 ;;  myColumn        1    5[COMMON] unsigned char 
  7516 ;; Return value:  Size  Location     Type
  7517 ;;                  1    wreg      void 
  7518 ;; Registers used:
  7519 ;;		wreg, status,2, status,0, pclath, cstack
  7520 ;; Tracked objects:
  7521 ;;		On entry : 0/0
  7522 ;;		On exit  : 0/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7525 ;;      Params:         1       0       0       0       0
  7526 ;;      Locals:         1       0       0       0       0
  7527 ;;      Temps:          0       0       0       0       0
  7528 ;;      Totals:         2       0       0       0       0
  7529 ;;Total ram usage:        2 bytes
  7530 ;; Hardware stack levels used:    1
  7531 ;; Hardware stack levels required when called:    1
  7532 ;; This function calls:
  7533 ;;		_SPI1_write
  7534 ;; This function is called by:
  7535 ;;		_printf_MATRIX7219
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           
  7540                           ;psect for function _Write_Byte
  7541  0A87                     _Write_Byte:	
  7542                           
  7543                           ;incstack = 0
  7544                           ; Regs used in _Write_Byte: [wreg+status,2+status,0+pclath+cstack]
  7545                           ;Write_Byte@myColumn stored from wreg
  7546  0A87  00F5               	movwf	Write_Byte@myColumn
  7547                           
  7548                           ;teris_16f886.c: 479: RA2 = 0;
  7549  0A88  1283               	bcf	3,5	;RP0=0, select bank0
  7550  0A89  1303               	bcf	3,6	;RP1=0, select bank0
  7551  0A8A  1105               	bcf	5,2	;volatile
  7552                           
  7553                           ;teris_16f886.c: 480: SPI1_write(myColumn);
  7554  0A8B  0875               	movf	Write_Byte@myColumn,w
  7555  0A8C  120A  158A  23F3  120A  158A  	fcall	_SPI1_write
  7556                           
  7557                           ;teris_16f886.c: 481: SPI1_write(myValue);
  7558  0A91  0874               	movf	Write_Byte@myValue,w
  7559  0A92  120A  158A  23F3   	fcall	_SPI1_write
  7560                           
  7561                           ;teris_16f886.c: 482: RA2 = 1;
  7562  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  7563  0A96  1303               	bcf	3,6	;RP1=0, select bank0
  7564  0A97  1505               	bsf	5,2	;volatile
  7565  0A98  0008               	return
  7566  0A99                     __end_of_Write_Byte:	
  7567                           
  7568                           	psect	text39
  7569  0BF3                     __ptext39:	
  7570 ;; *************** function _SPI1_write *****************
  7571 ;; Defined at:
  7572 ;;		line 424 in file "teris_16f886.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;  data            1    wreg     unsigned char 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;  data            1    1[COMMON] unsigned char 
  7577 ;;  i               1    3[COMMON] unsigned char 
  7578 ;;  mask            1    2[COMMON] unsigned char 
  7579 ;; Return value:  Size  Location     Type
  7580 ;;                  1    wreg      void 
  7581 ;; Registers used:
  7582 ;;		wreg, status,2, status,0
  7583 ;; Tracked objects:
  7584 ;;		On entry : 0/0
  7585 ;;		On exit  : 0/0
  7586 ;;		Unchanged: 0/0
  7587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7588 ;;      Params:         0       0       0       0       0
  7589 ;;      Locals:         3       0       0       0       0
  7590 ;;      Temps:          1       0       0       0       0
  7591 ;;      Totals:         4       0       0       0       0
  7592 ;;Total ram usage:        4 bytes
  7593 ;; Hardware stack levels used:    1
  7594 ;; This function calls:
  7595 ;;		Nothing
  7596 ;; This function is called by:
  7597 ;;		_max7219_init1
  7598 ;;		_Write_Byte
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           
  7603                           ;psect for function _SPI1_write
  7604  0BF3                     _SPI1_write:	
  7605                           
  7606                           ;incstack = 0
  7607                           ; Regs used in _SPI1_write: [wreg+status,2+status,0]
  7608                           ;SPI1_write@data stored from wreg
  7609  0BF3  00F1               	movwf	SPI1_write@data
  7610                           
  7611                           ;teris_16f886.c: 426: uint8_t mask = 0b10000000;
  7612  0BF4  3080               	movlw	128
  7613  0BF5  00F0               	movwf	??_SPI1_write
  7614  0BF6  0870               	movf	??_SPI1_write,w
  7615  0BF7  00F2               	movwf	SPI1_write@mask
  7616                           
  7617                           ;teris_16f886.c: 427: for(uint8_t i = 0; i < 8; i++)
  7618  0BF8  01F3               	clrf	SPI1_write@i
  7619  0BF9                     L14:	
  7620  0BF9  3008               	movlw	8
  7621  0BFA  0273               	subwf	SPI1_write@i,w
  7622  0BFB  1803               	btfsc	3,0
  7623  0BFC  0008               	return
  7624                           
  7625                           ;teris_16f886.c: 428: {
  7626                           ;teris_16f886.c: 429: if((data & mask) > 0)
  7627  0BFD  0871               	movf	SPI1_write@data,w
  7628  0BFE  0572               	andwf	SPI1_write@mask,w
  7629  0BFF  1903               	btfsc	3,2
  7630  0C00  2C05               	goto	l209
  7631                           
  7632                           ;teris_16f886.c: 430: {
  7633                           ;teris_16f886.c: 431: RA3 = 1;
  7634  0C01  1283               	bcf	3,5	;RP0=0, select bank0
  7635  0C02  1303               	bcf	3,6	;RP1=0, select bank0
  7636  0C03  1585               	bsf	5,3	;volatile
  7637                           
  7638                           ;teris_16f886.c: 433: }
  7639  0C04  2C08               	goto	l2447
  7640  0C05                     l209:	
  7641                           
  7642                           ;teris_16f886.c: 434: else
  7643                           ;teris_16f886.c: 435: {
  7644                           ;teris_16f886.c: 436: RA3 = 0;
  7645  0C05  1283               	bcf	3,5	;RP0=0, select bank0
  7646  0C06  1303               	bcf	3,6	;RP1=0, select bank0
  7647  0C07  1185               	bcf	5,3	;volatile
  7648  0C08                     l2447:	
  7649                           
  7650                           ;teris_16f886.c: 438: }
  7651                           ;teris_16f886.c: 439: mask >>= 1;
  7652  0C08  1003               	clrc
  7653  0C09  0CF2               	rrf	SPI1_write@mask,f
  7654                           
  7655                           ;teris_16f886.c: 440: RA1 = 1;
  7656  0C0A  1485               	bsf	5,1	;volatile
  7657                           
  7658                           ;teris_16f886.c: 441: _delay((unsigned long)((10)*(20000000/4000000.0)));
  7659  0C0B  3010               	movlw	16
  7660  0C0C  00F0               	movwf	??_SPI1_write
  7661  0C0D                     u6547:	
  7662  0C0D  0BF0               	decfsz	??_SPI1_write,f
  7663  0C0E  2C0D               	goto	u6547
  7664  0C0F  0000               	nop
  7665                           
  7666                           ;teris_16f886.c: 442: RA1 = 0;
  7667  0C10  1283               	bcf	3,5	;RP0=0, select bank0
  7668  0C11  1303               	bcf	3,6	;RP1=0, select bank0
  7669  0C12  1085               	bcf	5,1	;volatile
  7670                           
  7671                           ;teris_16f886.c: 443: _delay((unsigned long)((10)*(20000000/4000000.0)));
  7672  0C13  3010               	movlw	16
  7673  0C14  00F0               	movwf	??_SPI1_write
  7674  0C15                     u6557:	
  7675  0C15  0BF0               	decfsz	??_SPI1_write,f
  7676  0C16  2C15               	goto	u6557
  7677  0C17  0000               	nop
  7678  0C18  3001               	movlw	1
  7679  0C19  00F0               	movwf	??_SPI1_write
  7680  0C1A  0870               	movf	??_SPI1_write,w
  7681  0C1B  07F3               	addwf	SPI1_write@i,f
  7682  0C1C  2BF9               	goto	L14
  7683  0C1D                     __end_of_SPI1_write:	
  7684                           
  7685                           	psect	text40
  7686  0DBF                     __ptext40:	
  7687 ;; *************** function _MATRIX88_to_MATRIX7219 *****************
  7688 ;; Defined at:
  7689 ;;		line 527 in file "teris_16f886.c"
  7690 ;; Parameters:    Size  Location     Type
  7691 ;;  matrix88        1    wreg     PTR const struct .
  7692 ;;		 -> g_matrix88(64), 
  7693 ;;  matrix7219      1    0[COMMON] PTR struct .
  7694 ;;		 -> printf_MATRIX88@matrix7219(8), 
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;  matrix88        1    4[COMMON] PTR const struct .
  7697 ;;		 -> g_matrix88(64), 
  7698 ;;  row             1    6[COMMON] unsigned char 
  7699 ;;  col             1    7[COMMON] unsigned char 
  7700 ;;  mask            1    5[COMMON] unsigned char 
  7701 ;; Return value:  Size  Location     Type
  7702 ;;                  1    wreg      void 
  7703 ;; Registers used:
  7704 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7705 ;; Tracked objects:
  7706 ;;		On entry : 0/0
  7707 ;;		On exit  : 0/0
  7708 ;;		Unchanged: 0/0
  7709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7710 ;;      Params:         1       0       0       0       0
  7711 ;;      Locals:         4       0       0       0       0
  7712 ;;      Temps:          3       0       0       0       0
  7713 ;;      Totals:         8       0       0       0       0
  7714 ;;Total ram usage:        8 bytes
  7715 ;; Hardware stack levels used:    1
  7716 ;; This function calls:
  7717 ;;		Nothing
  7718 ;; This function is called by:
  7719 ;;		_printf_MATRIX88
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           
  7724                           ;psect for function _MATRIX88_to_MATRIX7219
  7725  0DBF                     _MATRIX88_to_MATRIX7219:	
  7726                           
  7727                           ;incstack = 0
  7728                           ; Regs used in _MATRIX88_to_MATRIX7219: [wreg-fsr0h+status,2+status,0]
  7729                           ;MATRIX88_to_MATRIX7219@matrix88 stored from wreg
  7730  0DBF  00F4               	movwf	MATRIX88_to_MATRIX7219@matrix88
  7731                           
  7732                           ;teris_16f886.c: 529: uint8_t mask = 0x80;
  7733  0DC0  3080               	movlw	128
  7734  0DC1  00F1               	movwf	??_MATRIX88_to_MATRIX7219
  7735  0DC2  0871               	movf	??_MATRIX88_to_MATRIX7219,w
  7736  0DC3  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
  7737                           
  7738                           ;teris_16f886.c: 531: for(uint8_t col = 0; col < 8; col++)
  7739  0DC4  01F7               	clrf	MATRIX88_to_MATRIX7219@col
  7740  0DC5                     L15:	
  7741  0DC5  3008               	movlw	8
  7742  0DC6  0277               	subwf	MATRIX88_to_MATRIX7219@col,w
  7743  0DC7  1803               	btfsc	3,0
  7744  0DC8  0008               	return
  7745                           
  7746                           ;teris_16f886.c: 532: {
  7747                           ;teris_16f886.c: 533: mask = 0x80;
  7748  0DC9  3080               	movlw	128
  7749  0DCA  00F1               	movwf	??_MATRIX88_to_MATRIX7219
  7750  0DCB  0871               	movf	??_MATRIX88_to_MATRIX7219,w
  7751  0DCC  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
  7752                           
  7753                           ;teris_16f886.c: 534: matrix7219->col[col] = 0;
  7754  0DCD  0877               	movf	MATRIX88_to_MATRIX7219@col,w
  7755  0DCE  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
  7756  0DCF  00F1               	movwf	??_MATRIX88_to_MATRIX7219
  7757  0DD0  0871               	movf	??_MATRIX88_to_MATRIX7219,w
  7758  0DD1  0084               	movwf	4
  7759  0DD2  1383               	bcf	3,7	;select IRP bank0
  7760  0DD3  0180               	clrf	0
  7761                           
  7762                           ;teris_16f886.c: 535: for(uint8_t row = 0; row < 8; row++)
  7763  0DD4  01F6               	clrf	MATRIX88_to_MATRIX7219@row
  7764  0DD5  3008               	movlw	8
  7765  0DD6  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
  7766  0DD7  1803               	btfsc	3,0
  7767  0DD8  2E02               	goto	l2507
  7768  0DD9                     l2497:	
  7769                           
  7770                           ;teris_16f886.c: 536: {
  7771                           ;teris_16f886.c: 537: if(matrix88->data[row][col] == 1)
  7772  0DD9  0876               	movf	MATRIX88_to_MATRIX7219@row,w
  7773  0DDA  00F1               	movwf	??_MATRIX88_to_MATRIX7219
  7774  0DDB  3002               	movlw	2
  7775  0DDC                     u2475:	
  7776  0DDC  1003               	clrc
  7777  0DDD  0DF1               	rlf	??_MATRIX88_to_MATRIX7219,f
  7778  0DDE  3EFF               	addlw	-1
  7779  0DDF  1D03               	skipz
  7780  0DE0  2DDC               	goto	u2475
  7781  0DE1  1003               	clrc
  7782  0DE2  0D71               	rlf	??_MATRIX88_to_MATRIX7219,w
  7783  0DE3  0774               	addwf	MATRIX88_to_MATRIX7219@matrix88,w
  7784  0DE4  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
  7785  0DE5  0877               	movf	MATRIX88_to_MATRIX7219@col,w
  7786  0DE6  0772               	addwf	??_MATRIX88_to_MATRIX7219+1,w
  7787  0DE7  00F3               	movwf	??_MATRIX88_to_MATRIX7219+2
  7788  0DE8  0873               	movf	??_MATRIX88_to_MATRIX7219+2,w
  7789  0DE9  0084               	movwf	4
  7790  0DEA  1783               	bsf	3,7	;select IRP bank2
  7791  0DEB  0300               	decf	0,w
  7792  0DEC  1D03               	btfss	3,2
  7793  0DED  2DF8               	goto	l2501
  7794                           
  7795                           ;teris_16f886.c: 538: {
  7796                           ;teris_16f886.c: 539: matrix7219->col[col] |= mask;
  7797  0DEE  0875               	movf	MATRIX88_to_MATRIX7219@mask,w
  7798  0DEF  00F1               	movwf	??_MATRIX88_to_MATRIX7219
  7799  0DF0  0877               	movf	MATRIX88_to_MATRIX7219@col,w
  7800  0DF1  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
  7801  0DF2  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
  7802  0DF3  0872               	movf	??_MATRIX88_to_MATRIX7219+1,w
  7803  0DF4  0084               	movwf	4
  7804  0DF5  0871               	movf	??_MATRIX88_to_MATRIX7219,w
  7805  0DF6  1383               	bcf	3,7	;select IRP bank0
  7806  0DF7  0480               	iorwf	0,f
  7807  0DF8                     l2501:	
  7808                           
  7809                           ;teris_16f886.c: 540: }
  7810                           ;teris_16f886.c: 541: mask >>= 1;
  7811  0DF8  1003               	clrc
  7812  0DF9  0CF5               	rrf	MATRIX88_to_MATRIX7219@mask,f
  7813  0DFA  3001               	movlw	1
  7814  0DFB  00F1               	movwf	??_MATRIX88_to_MATRIX7219
  7815  0DFC  0871               	movf	??_MATRIX88_to_MATRIX7219,w
  7816  0DFD  07F6               	addwf	MATRIX88_to_MATRIX7219@row,f
  7817  0DFE  3008               	movlw	8
  7818  0DFF  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
  7819  0E00  1C03               	skipc
  7820  0E01  2DD9               	goto	l2497
  7821  0E02                     l2507:	
  7822  0E02  3001               	movlw	1
  7823  0E03  00F1               	movwf	??_MATRIX88_to_MATRIX7219
  7824  0E04  0871               	movf	??_MATRIX88_to_MATRIX7219,w
  7825  0E05  07F7               	addwf	MATRIX88_to_MATRIX7219@col,f
  7826  0E06  2DC5               	goto	L15
  7827  0E07                     __end_of_MATRIX88_to_MATRIX7219:	
  7828                           
  7829                           	psect	text41
  7830  0AEC                     __ptext41:	
  7831 ;; *************** function _memset *****************
  7832 ;; Defined at:
  7833 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  p1              2    0[COMMON] PTR void 
  7836 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  7837 ;;  c               2    2[COMMON] int 
  7838 ;;  n               2    4[COMMON] unsigned int 
  7839 ;; Auto vars:     Size  Location     Type
  7840 ;;  p               2    6[COMMON] PTR unsigned char 
  7841 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  7842 ;; Return value:  Size  Location     Type
  7843 ;;                  2    0[COMMON] PTR void 
  7844 ;; Registers used:
  7845 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7846 ;; Tracked objects:
  7847 ;;		On entry : 0/0
  7848 ;;		On exit  : 0/0
  7849 ;;		Unchanged: 0/0
  7850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7851 ;;      Params:         6       0       0       0       0
  7852 ;;      Locals:         2       0       0       0       0
  7853 ;;      Temps:          0       0       0       0       0
  7854 ;;      Totals:         8       0       0       0       0
  7855 ;;Total ram usage:        8 bytes
  7856 ;; Hardware stack levels used:    1
  7857 ;; This function calls:
  7858 ;;		Nothing
  7859 ;; This function is called by:
  7860 ;;		_Clear_Matrix
  7861 ;;		_delete_row
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           
  7866                           ;psect for function _memset
  7867  0AEC                     _memset:	
  7868                           
  7869                           ;incstack = 0
  7870                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  7871  0AEC  0870               	movf	memset@p1,w
  7872  0AED  00F6               	movwf	memset@p
  7873  0AEE  0871               	movf	memset@p1+1,w
  7874  0AEF  00F7               	movwf	memset@p+1
  7875  0AF0                     l2517:	
  7876  0AF0  3001               	movlw	1
  7877  0AF1  02F4               	subwf	memset@n,f
  7878  0AF2  3000               	movlw	0
  7879  0AF3  1C03               	skipc
  7880  0AF4  03F5               	decf	memset@n+1,f
  7881  0AF5  02F5               	subwf	memset@n+1,f
  7882  0AF6  0A74               	incf	memset@n,w
  7883  0AF7  1903               	btfsc	3,2
  7884  0AF8  0A75               	incf	memset@n+1,w
  7885  0AF9  1903               	btfsc	3,2
  7886  0AFA  0008               	return
  7887  0AFB  0876               	movf	memset@p,w
  7888  0AFC  0084               	movwf	4
  7889  0AFD  1383               	bcf	3,7
  7890  0AFE  1877               	btfsc	memset@p+1,0
  7891  0AFF  1783               	bsf	3,7
  7892  0B00  0872               	movf	memset@c,w
  7893  0B01  0080               	movwf	0
  7894  0B02  3001               	movlw	1
  7895  0B03  07F6               	addwf	memset@p,f
  7896  0B04  1803               	skipnc
  7897  0B05  0AF7               	incf	memset@p+1,f
  7898  0B06  2AF0               	goto	l2517
  7899  0B07                     __end_of_memset:	
  7900                           ;	Return value of _memset is never used
  7901                           
  7902  007E                     btemp	set	126	;btemp
  7903  007E                     wtemp	set	126
  7904  007E                     wtemp0	set	126
  7905  0080                     wtemp1	set	128
  7906  0082                     wtemp2	set	130
  7907  0084                     wtemp3	set	132
  7908  0086                     wtemp4	set	134
  7909  0088                     wtemp5	set	136
  7910  007F                     wtemp6	set	127
  7911  007E                     ttemp	set	126
  7912  007E                     ttemp0	set	126
  7913  0081                     ttemp1	set	129
  7914  0084                     ttemp2	set	132
  7915  0087                     ttemp3	set	135
  7916  007F                     ttemp4	set	127
  7917  007E                     ltemp	set	126
  7918  007E                     ltemp0	set	126
  7919  0082                     ltemp1	set	130
  7920  0086                     ltemp2	set	134
  7921  0080                     ltemp3	set	128


Data Sizes:
    Strings     105
    Constant    414
    Data        38
    BSS         144
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      75
    BANK1            80     71      80
    BANK3            96      9      73
    BANK2            96      0      64

Pointer List with Targets:

    is_right_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_left_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    memset@p1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memset@p	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    g_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    find_best_solution@temp_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_holes_after_merge@matrix	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    get_high_after_merge@matrix	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_high@matrix	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    left_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    left_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    evaluate@matrix	PTR const struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge1@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    merge1@matrix88_in	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge1@matrix88_out	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    clear@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    clear@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    fall_off@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    fall_off@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_right_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_left_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_valid@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_valid@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    hit_land@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    hit_land@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    is_row_empty@matrix	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    delete_matrix@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memcpy	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    delete_row@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    is_row_full@matrix	PTR const struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memset	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    printf_MATRIX88@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    printf_debug_MATRIX88@matrix	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    printf_debug_MATRIX88@lable	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_11(CODE[12]), 

    MATRIX88_to_MATRIX7219@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    MATRIX88_to_MATRIX7219@matrix7219	PTR struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    printf_MATRIX7219@matrix	PTR const struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    sp__get_MATRIX44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    debug_line@str	PTR const unsigned char  size(2) Largest target is 29
		 -> STR_10(CODE[21]), STR_9(CODE[1]), STR_6(CODE[29]), STR_5(CODE[2]), 

    debug_str@str	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_11(CODE[12]), STR_8(CODE[2]), STR_7(CODE[2]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_11(CODE[12]), STR_10(CODE[21]), STR_9(CODE[1]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[29]), STR_5(CODE[2]), STR_4(CODE[3]), 
		 -> STR_3(CODE[3]), STR_2(CODE[3]), g_debug(BANK3[32]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    _printf_debug_MATRIX88->_debug_line
    _printf_debug_MATRIX88->_debug_str
    _debug_str->_USARTWriteString
    _debug_line->_USARTWriteString
    _USARTWriteString->_USARTWriteChar
    _max7219_init1->_SPI1_write
    _find_best_solution->_left_most
    _find_best_solution->_right_most
    _right_most->_is_right_boundary
    _merge1->_memcpy
    _left_most->_is_left_boundary
    _get_high->_is_row_empty
    _delete_matrix->_delete_row
    _delete_row->_memcpy
    _char_info_index_rand->___awmod
    _rand->___lmul
    _printf_Screen->_printf_MATRIX88
    _printf_MATRIX88->_printf_MATRIX7219
    _printf_MATRIX7219->_Write_Byte
    _Write_Byte->_SPI1_write

Critical Paths under _main in BANK0

    _main->_find_best_solution
    _find_best_solution->_merge1
    _delete_matrix->_delete_row
    _char_info_index_rand->___awmod
    ___awmod->_rand
    _printf_Screen->_printf_MATRIX88

Critical Paths under _main in BANK1

    _main->_find_best_solution

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    12      4   16716
                                             21 BANK0      7     3      4
                                              0 BANK3      9     9      0
                       _Clear_Matrix
                          _USARTInit
                             ___bmul
               _char_info_index_rand
                              _clear
                      _delete_matrix
                 _find_best_solution
                           _hit_land
                      _max7219_init1
                              _merge
                      _printf_Screen
              _printf_debug_MATRIX88
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _printf_debug_MATRIX88                                9     6      3    1983
                                              6 COMMON     6     3      3
                                              0 BANK0      3     3      0
                         _debug_line
                          _debug_str
 ---------------------------------------------------------------------------------
 (2) _debug_str                                            3     1      2     800
                                              3 COMMON     3     1      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _debug_line                                           3     1      2     853
                                              3 COMMON     3     1      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     0      2     597
                                              1 COMMON     2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _merge                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _max7219_init1                                        0     0      0      92
                         _SPI1_write
 ---------------------------------------------------------------------------------
 (2) _hit_land                                            11     7      4     471
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _find_best_solution                                  78    78      0    8392
                                             14 BANK0      7     7      0
                                              0 BANK1     71    71      0
                             ___bmul
                      _delete_matrix
                           _evaluate
                           _fall_off
                           _get_high
               _get_high_after_merge
              _get_holes_after_merge
                           _is_valid
                          _left_most
                             _merge1
                         _right_most
 ---------------------------------------------------------------------------------
 (2) _right_most                                           5     2      3     503
                                             10 COMMON     4     1      3
                                              0 BANK0      1     1      0
                  _is_right_boundary
 ---------------------------------------------------------------------------------
 (4) _is_right_boundary                                   10     7      3     308
                                              0 COMMON    10     7      3
 ---------------------------------------------------------------------------------
 (2) _merge1                                              14     9      5    1128
                                              0 BANK0     14     9      5
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _left_most                                            5     2      3     503
                                             11 COMMON     3     0      3
                                              0 BANK0      2     2      0
                   _is_left_boundary
 ---------------------------------------------------------------------------------
 (4) _is_left_boundary                                    11     8      3     308
                                              0 COMMON    11     8      3
 ---------------------------------------------------------------------------------
 (3) _is_valid                                            11     7      4     559
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (2) _get_holes_after_merge                               12    12      0    1054
                                              0 COMMON    12    12      0
 ---------------------------------------------------------------------------------
 (3) _get_high_after_merge                                 9     7      2     255
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (2) _get_high                                             3     3      0     331
                                              6 COMMON     3     3      0
                       _is_row_empty
 ---------------------------------------------------------------------------------
 (3) _is_row_empty                                         6     5      1     192
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (3) _fall_off                                            11     7      4     516
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (2) _evaluate                                            12    10      2     389
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (2) _delete_matrix                                        5     3      2    1691
                                              7 BANK0      5     3      2
                         _delete_row
                        _is_row_full
 ---------------------------------------------------------------------------------
 (3) _is_row_full                                          9     6      3     193
                                              0 COMMON     9     6      3
 ---------------------------------------------------------------------------------
 (3) _delete_row                                          10     7      3    1232
                                             11 COMMON     3     0      3
                                              0 BANK0      7     7      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6     388
                                              0 COMMON    11     5      6
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     367
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _clear                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _char_info_index_rand                                 0     0      0     706
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     198
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     508
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      75
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Clear_Matrix                                         0     0      0    1139
                             _memset
                      _printf_Screen
 ---------------------------------------------------------------------------------
 (1) _printf_Screen                                        0     0      0     775
                    _printf_MATRIX88
 ---------------------------------------------------------------------------------
 (2) _printf_MATRIX88                                     10    10      0     775
                                             10 COMMON     1     1      0
                                              0 BANK0      9     9      0
             _MATRIX88_to_MATRIX7219
                  _printf_MATRIX7219
 ---------------------------------------------------------------------------------
 (3) _printf_MATRIX7219                                    4     4      0     328
                                              6 COMMON     4     4      0
                         _Write_Byte
 ---------------------------------------------------------------------------------
 (4) _Write_Byte                                           2     1      1     189
                                              4 COMMON     2     1      1
                         _SPI1_write
 ---------------------------------------------------------------------------------
 (5) _SPI1_write                                           4     4      0      92
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MATRIX88_to_MATRIX7219                               8     7      1     351
                                              0 COMMON     8     7      1
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     364
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Clear_Matrix
     _memset
     _printf_Screen
       _printf_MATRIX88
         _MATRIX88_to_MATRIX7219
         _printf_MATRIX7219
           _Write_Byte
             _SPI1_write
   _USARTInit
   ___bmul
   _char_info_index_rand
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _clear
   _delete_matrix
     _delete_row
       _memcpy
       _memset
     _is_row_full
   _find_best_solution
     ___bmul
     _delete_matrix
       _delete_row
         _memcpy
         _memset
       _is_row_full
     _evaluate
     _fall_off
     _get_high
       _is_row_empty
     _get_high_after_merge
     _get_holes_after_merge
     _is_valid
     _left_most
       _is_left_boundary
     _merge1
       _memcpy
     _right_most
       _is_right_boundary
   _hit_land
   _max7219_init1
     _SPI1_write
   _merge
   _printf_Screen
     _printf_MATRIX88
       _MATRIX88_to_MATRIX7219
       _printf_MATRIX7219
         _Write_Byte
           _SPI1_write
   _printf_debug_MATRIX88
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _debug_str
       _USARTWriteString
         _USARTWriteChar
   _srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      9      49       9       76.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      40      11       66.7%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     47      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1C      4B       5       93.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     132      12        0.0%
ABS                  0      0     132       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Aug 27 14:54:17 2016

                         __CFG_CP$ON 0000                                    pc 0002  
                     ___bmul@product 0072        get_holes_after_merge@num_hole 0076  
                                 l36 0A41                                   l29 0D66  
                        __CFG_CPD$ON 0000                    merge1@matrix88_in 0047  
     __end_of_MATRIX88_to_MATRIX7219 0E07                                   fsr 0004  
                 USARTInit@baud_rate 0070                ?_char_info_index_rand 0070  
                        get_high@row 0078                          __CFG_LVP$ON 0000  
                                l209 0C05                                  l402 0B46  
                                l245 0246                                  l501 046D  
                                l344 0140                                  l426 0412  
                                l443 043B                                  l437 0409  
                                l395 0B26                                  _GIE 005F  
                                _RA1 0029                                  _RA2 002A  
                                _RA3 002B                   merge1@matrix88_out 0048  
                                fsr0 0004                                  indf 0000  
                       ___awmod@sign 0050                         __CFG_IESO$ON 0000  
              __end_of_max7219_init1 0F44                       is_row_full@col 0078  
                     is_row_full@row 0072                                 l3003 0A6D  
                               l3031 0E20                                 l3023 0E1A  
                               l3033 0E2E                                 l3041 0E47  
                               l3201 0069                                 l3051 0D39  
                               l3019 0E13                                 l2501 0DF8  
                               l3053 0D3B                                 l3061 0D44  
                               l3045 0E4F                                 l3037 0E3C  
                               l3055 0D3D                                 l3215 00BC  
                               l3223 00CB                                 l3057 0D3F  
                               l4105 0203                                 l4121 0CA6  
                               l3209 00A2                                 l2507 0E02  
                               l3243 0E96                                 l4107 0221  
                               l4123 0C7E                                 l2611 0F51  
                               l4211 0734                                 l3219 00C5  
                               l3163 0257                                 l2517 0AF0  
                               l4125 0CAD                                 l2605 0F4B  
                               l3173 0275                                 l2447 0C08  
                               l3247 0E9E                                 l3239 0E5F  
                               l2527 0C25                                 l2551 0C6D  
                               l2711 02AD                                 l2623 0F91  
                               l4231 0799                                 l3271 0EEE  
                               l3263 0EAE                                 l2535 0B85  
                               l2545 0C4C                                 l4153 0FFB  
                               l4145 0FBD                                 l4241 07BF  
                               l4225 075E                                 l4233 05AF  
                               l3169 025C                                 l3185 029D  
                               l2555 0C75                                 l2619 0F88  
                               l2627 0F97                                 l2651 004B  
                               l2643 0012                                 l4235 07A0  
                               l4227 0790                                 l3195 0063  
                               l3267 0EE6                                 l3179 0289  
                               l2733 0311                                 l2725 02EE  
                               l2717 02B3                                 l4149 0FF3  
                               l2637 000C                                 l4229 063A  
                               l2823 00D9                                 l2591 0BE9  
                               l2743 0331                                 l2655 0054  
                               l4191 06F1                                 l2497 0DD9  
                               l2665 0CB7                                 l2833 00F9  
                               l2585 0BD2                                 l2729 030F  
                               l4601 0472                                 l2771 0188  
                               l2763 014C                                 l2595 0BF1  
                               l2915 0D23                                 l2931 0345  
                               l2739 0328                                 l2747 0337  
                               l2659 005A                                 l2669 0CCD  
                               l2845 0132                                 l2829 00E3  
                               l2781 01A8                                 l2757 0146  
                               l2909 0CFB                                 l2839 0117  
                               l2919 0D2C                                 l4615 04DD  
                               l4721 0D57                                 l2849 013A  
                               l2777 019F                                 l2785 01AE  
                               l4723 0D5C                                 l2883 0B6A  
                               l2939 0350                                 l2867 0B3C  
                               l2875 0B5C                                 l4627 0540  
                               l4725 0D61                                 l2893 0B83  
                               l2949 0375                                 l4719 0D52  
                               l2959 039B                                 l2889 0B7D  
                               l2977 03EC                                 l2969 03E1  
                               l2993 0444                                 l2999 0A67  
                               STR_1 0A10                         __CFG_WDTE$ON 0000  
                               STR_5 0A15                                 STR_6 09B0  
                               STR_7 0A13                                 STR_8 0A17  
                               STR_9 0A12                                 u3015 0324  
                               u3105 019B                          main@hit_res 005F  
                               u4015 009E                                 u3225 00E9  
                               u4025 00AA                                 u3235 00FC  
                               u3075 0176                                 u3265 011A  
                               u2475 0DDC                                 u2555 0C4F  
                               u3515 0395                                 u3435 0356  
                               u4155 0ED8                                 u3295 0DB1  
                               u4095 0E89                                 u3455 036F  
                               u2665 0BD5                                 u3705 0435  
                               u3545 039E                                 _PEIE 005E  
                               u3805 0E3D                                 u2845 0CCF  
                               u3645 03EF                                 u3565 03B7  
                               u2855 0CD7                                 u3495 037C  
                               u3585 03CC                                 u2945 02DD  
                               u2795 0047                                 _RCIE 0465  
                               u3775 0E23                                 u3935 025F  
                               u5545 01C7                                 u3795 0E34  
                               u2995 030D                                 u5565 01D7  
                               u5725 0712                                 u5575 01E7  
                               u5655 0FE5                                 u5815 075C  
                               u5735 0721                                 u6527 052E  
                               u5585 0208                                 u6537 057E  
                               u6547 0C0D                                 u6557 0C15  
                       __CFG_WRT$OFF 0000               __end_of_USARTWriteChar 0A48  
                      __CFG_FCMEN$ON 0000                                 _main 0446  
                               _rand 0D78                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 ltemp 007E  
                               start 0000                                 ttemp 007E  
                               wtemp 007E                    ___bmul@multiplier 0073  
                      __CFG_MCLRE$ON 0000      find_best_solution@tem_sub_index 00E5  
                    is_row_empty@col 0075                      is_row_empty@row 0070  
         get_high_after_merge@matrix 0070                                ?_main 0059  
                              ?_rand 0044                                STR_10 09CD  
                              STR_11 0A04                                STR_12 09E2  
                              STR_13 09F3                      __end_of___awmod 0E54  
                   USARTWriteChar@ch 0070                                _RCREG 001A  
                              _SPBRG 0099                     _is_left_boundary 0F44  
                              _TXREG 0019                                _UQEnd 0069  
                ___lmul@multiplicand 0074                          ?_SPI1_write 0070  
                              _clear 0E54                      __end_of_dpowers 0828  
                              _cur_x 00EE                                _cur_y 00E9  
                              _merge 0EA3                                _randx 003B  
                              _srand 0A50                         ?_is_row_full 0070  
                    ??_printf_Screen 007B                                pclath 000A  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                 __size_of_USARTInit 0047                      ?_USARTWriteChar 0070  
           printf_debug_MATRIX88@col 0046                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
           printf_debug_MATRIX88@row 0045                                status 0003  
                        hit_land@col 0079                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
    find_best_solution@temp_matrix88 00A3                          hit_land@row 007A  
              _printf_debug_MATRIX88 0228                       get_high@matrix 0077  
                    __initialization 07C1                         __end_of_main 058E  
                       __end_of_rand 0DBF               ??_char_info_index_rand 007E  
                             ??_main 01D0                               ??_rand 0046  
                        evaluate@col 007A                          evaluate@row 007B  
           find_best_solution@temp_x 00E6                               ?_clear 0070  
                             ?_merge 0070                               ?_srand 0070  
              __size_of_Clear_Matrix 0014                __end_of_delete_matrix 0CAF  
                             _URBuff 0190                     __end_of_fall_off 01B3  
                     __CFG_PWRTE$OFF 0000                     debug_line@enable 0075  
              get_high_after_merge@y 0076                     __end_of_get_high 0B85  
                             ___bmul 0A65                  __size_of_SPI1_write 002A  
                             ___lmul 0CAF                            ??___awmod 007D  
                   __end_of_hit_land 00CD                     __end_of_evaluate 013F  
                             _merge1 0F99             __end_of_USARTWriteString 0BA8  
                             _memcpy 0C1D                               _memset 0AEC  
                   __end_of_is_valid 0339                               clear@x 0078  
                             clear@y 0070                      ___awmod@divisor 004B  
                             _temp_y 0068             __size_of_printf_MATRIX88 0012  
                    ___awmod@counter 004F                    __end_of_USARTInit 0D78  
                      ?_is_row_empty 0070          __size_of_find_best_solution 0233  
                             merge@x 0078                               merge@y 0070  
                        is_valid@col 007A                          is_valid@row 0079  
                       _Clear_Matrix 0AAB                               srand@x 0070  
                  _is_right_boundary 0005              ??_get_holes_after_merge 0070  
         printf_debug_MATRIX88@lable 0076                   ?_is_right_boundary 0070  
                     evaluate@matrix 0079              __end_of__initialization 07FC  
                     merge1@matrix44 0045               ?_printf_debug_MATRIX88 0076  
                     _g_cur_matrix44 0065                  ??_is_right_boundary 0073  
                ___bmul@multiplicand 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 0BA8                         __pidataBANK1 0003  
                      __end_of_clear 0EA3                           _Write_Byte 0A87  
                      __end_of_merge 0EF3                        __end_of_srand 0A59  
                 __size_of_debug_str 000C                       ??_is_row_empty 0071  
          __end_of_is_right_boundary 005C        __size_of_get_high_after_merge 0043  
         get_holes_after_merge@start 0078                              ??_clear 0074  
                            ??_merge 0074                              ??_srand 0072  
                       evaluate@full 0078                           __pbssBANK0 0060  
                         __pbssBANK1 00E7                           __pbssBANK2 0110  
                         __pbssBANK3 0190                         evaluate@risk 0076  
                 __size_of_left_most 0020                    is_row_full@matrix 0070  
               __size_of_is_row_full 0030                           _debug_line 0ABF  
                delete_matrix@matrix 004B                     is_valid@matrix44 0071  
                   is_valid@matrix88 0073             __end_of_is_left_boundary 0F99  
                         _g_matrix44 0830                           _delete_row 01B3  
                         _g_matrix88 0110                           __pmaintext 0446  
                            ?___bmul 0070                              ?___lmul 0070  
                            ?_merge1 0044                              ?_memcpy 0070  
                            ?_memset 0070                       ___lmul@product 0079  
          get_holes_after_merge@stop 0077                         ??_SPI1_write 0070  
                          ?_fall_off 0070                    ??_printf_MATRIX88 007A  
          printf_MATRIX88@matrix7219 0045                     ??_USARTWriteChar 0070  
               is_right_boundary@col 0079                 is_right_boundary@row 0078  
                          ?_get_high 0070                   USARTWriteInt@F1617 0060  
                         __stringtab 0800                            ?_hit_land 0070  
                  __end_of_debug_str 0A65                              _UQFront 006A  
                          ?_evaluate 0070                            ?_is_valid 0070  
                      debug_line@str 0073  find_best_solution@temp_cur_matrix44 00E3  
                    __size_of___bmul 0011                      __size_of___lmul 003F  
                        ?_Write_Byte 0074                              ___awmod 0E07  
                 __end_of_SPI1_write 0C1D               __size_of_max7219_init1 0051  
                        right_most@x 0044                              _g_debug 01B0  
                    __size_of_merge1 0067                      __size_of_memcpy 002A  
                          _ANSELbits 0188                      __size_of_memset 001B  
                  __end_of_left_most 0B43                              __ptext1 0A50  
                            __ptext2 0228                              __ptext3 0A59  
                            __ptext4 0ABF                              __ptext5 0B85  
                            __ptext6 0A40                              __ptext7 0EA3  
                            __ptext8 0EF3                              __ptext9 005C  
                  __end_of_hexpowers 0830                     fall_off@matrix44 0071  
                   fall_off@matrix88 0073                              _dpowers 081E  
                   ___awmod@dividend 004D           __size_of_is_right_boundary 0057  
                        SPI1_write@i 0073                           ??_fall_off 0074  
                         ??_get_high 0076                              clrloop0 0A49  
               end_of_initialization 07FC                    __end_of_octpowers 081E  
                  _printf_MATRIX7219 0B07                           ??_hit_land 0074  
                            merge1@x 004D                              merge1@y 0044  
                         ??_evaluate 0072                              memcpy@d 0077  
                            memcpy@n 0074                              memcpy@s 0079  
              __end_of_printf_Screen 0A40                              memset@c 0072  
               __end_of_is_row_empty 0BF3                              memset@n 0074  
                            memset@p 0076                           ??_is_valid 0074  
                        ?_debug_line 0073                   ?_printf_MATRIX7219 0070  
                     SPI1_write@data 0071                       SPI1_write@mask 0072  
                         _right_most 0B43             ??_MATRIX88_to_MATRIX7219 0071  
                        ?_delete_row 007B                        clear@matrix44 0071  
                      clear@matrix88 0073                            _RCSTAbits 0018  
                  Write_Byte@myValue 0074                  ??_printf_MATRIX7219 0076  
                         _temp_count 00EB                           _temp_pre_x 0043  
                       __pstringtext 0800                    ?_USARTWriteString 0071  
      __size_of_char_info_index_rand 0018          printf_debug_MATRIX88@enable 0044  
        printf_debug_MATRIX88@matrix 0078                   ??_USARTWriteString 0073  
          is_right_boundary@matrix44 0070            is_right_boundary@matrix88 0072  
                          _USARTInit 0D31                            _TRISAbits 0085  
          __end_of_printf_MATRIX7219 0B23                    _tem_pre_sub_index 0041  
                      _max7219_init1 0EF3              ??_printf_debug_MATRIX88 0079  
                __size_of_Write_Byte 0012                   right_most@matrix44 007A  
                 right_most@matrix88 007C       __size_of_get_holes_after_merge 010D  
      __end_of_get_holes_after_merge 0446                find_best_solution@res 00A2  
                          _TXSTAbits 0098                       __end_of___bmul 0A76  
         __end_of_find_best_solution 07C1                       __end_of___lmul 0CEE  
                     __end_of_merge1 1000                       __end_of_memcpy 0C47  
                     __end_of_memset 0B07     MATRIX88_to_MATRIX7219@matrix7219 0070  
             __size_of_delete_matrix 0038                  __size_of_debug_line 0015  
                start_initialization 07C1                           ?_USARTInit 0070  
                __size_of_delete_row 0075                       ?_max7219_init1 0070  
                         left_most@x 0045                        delete_row@len 0048  
                      delete_row@row 007D             __CFG_FOSC$INTRC_NOCLKOUT 0000  
                 is_right_boundary@x 0077         __end_of_get_high_after_merge 0D31  
                        ?_right_most 007A                       _temp_pre_count 0067  
                  ?_is_left_boundary 0070      __size_of_MATRIX88_to_MATRIX7219 0048  
        get_holes_after_merge@matrix 0079                             ??___bmul 0071  
                           ??___lmul 0078                   ??_is_left_boundary 0073  
                         init_fetch0 0A76                   is_row_empty@matrix 0074  
                        __pdataBANK0 0020                          __pdataBANK1 00EE  
                  _g_char_info_index 00EA                      _printf_MATRIX88 0A99  
                           ??_merge1 0049                             ??_memcpy 0076  
                           ??_memset 0076                          _g_char_info 0020  
  find_best_solution@left_most_index 00A0                            ___latbits 0002  
                      __pcstackBANK0 0044                        __pcstackBANK1 00A0  
                      __pcstackBANK3 01D0           __size_of_printf_MATRIX7219 001C  
              __size_of_is_row_empty 0027                        ??_is_row_full 0073  
                  __size_of_fall_off 0074                    __size_of_get_high 0022  
                  __size_of_hit_land 0071                        _delete_matrix 0C77  
                          __pnvBANK0 0069                    __size_of_evaluate 0072  
                          _debug_str 0A59                   delete_matrix@count 004E  
                  __size_of_is_valid 0093              printf_MATRIX7219@matrix 0078  
                   delete_matrix@row 004F                         ??_Write_Byte 0075  
                           ?___awmod 004B                         _is_row_empty 0BCC  
                    debug_str@enable 0075                    is_left_boundary@x 0078  
                    ??_max7219_init1 0074                          ??_USARTInit 0072  
             _MATRIX88_to_MATRIX7219 0DBF                            _left_most 0B23  
                __size_of_right_most 0020                            _hexpowers 0828  
                     __size_of_clear 004F                 printf_MATRIX7219@col 0079  
                     __size_of_merge 0050                       __size_of_srand 0009  
                       debug_str@str 0073                   __end_of_Write_Byte 0A99  
                       ??_debug_line 0075                       ?_delete_matrix 004B  
                          fall_off@x 0078                            fall_off@y 0070  
                   delete_row@matrix 007B                            clear_ram0 0A48  
                          _octpowers 0812                  __end_of_is_row_full 0C77  
                         ?_debug_str 0073              __end_of_printf_MATRIX88 0AAB  
                       ??_delete_row 0044                             _PIR1bits 000C  
                          _temp_high 00EC                            _temp_hole 00ED  
                          _temp_risk 00E7                    left_most@matrix44 007B  
                  left_most@matrix88 007D                          __stringbase 0812  
                 __end_of_debug_line 0AD4                        ?_Clear_Matrix 0070  
               _get_high_after_merge 0CEE                           ?_left_most 007B  
                 __end_of_g_matrix44 09B0                   __end_of_delete_row 0228  
                  ___lmul@multiplier 0070                  is_left_boundary@col 007A  
                is_left_boundary@row 0079                        merge@matrix44 0071  
                      merge@matrix88 0073            __size_of_USARTWriteString 0023  
                          hit_land@x 0078                            hit_land@y 0070  
     __size_of_printf_debug_MATRIX88 007E         __end_of_char_info_index_rand 0AEC  
      __end_of_printf_debug_MATRIX88 02A6              get_high_after_merge@col 0077  
                          merge1@col 0051                            merge1@len 004E  
            get_high_after_merge@row 0078                            merge1@row 0050  
            __size_of_USARTWriteChar 0008                        _temp_pre_high 00EF  
                      _temp_pre_hole 0042                        _temp_pre_risk 003F  
                          is_valid@x 0078                            is_valid@y 0070  
                   __size_of___awmod 004D                   __end_of__stringtab 0812  
             __size_of_printf_Screen 0005                       ??_Clear_Matrix 007B  
              ?_get_high_after_merge 0070             is_left_boundary@matrix44 0070  
           is_left_boundary@matrix88 0072                             _fall_off 013F  
                 _find_best_solution 058E                             __ptext10 058E  
                           __ptext11 0B43                             __ptext20 0BCC  
                           __ptext12 0005                             __ptext21 013F  
                           __ptext13 0F99                             __ptext30 0D78  
                           __ptext22 00CD                             __ptext14 0B23  
                           __ptext31 0CAF                             __ptext23 0C77  
                           __ptext15 0F44                             __ptext40 0DBF  
                           __ptext32 0E07                             __ptext24 0C47  
                           __ptext16 02A6                             __ptext41 0AEC  
                           __ptext33 0D31                             __ptext25 01B3  
                           __ptext17 0339                             __ptext34 0AAB  
                           __ptext26 0C1D                             __ptext18 0CEE  
                           __ptext35 0A3B                             __ptext27 0A65  
                           __ptext19 0B63                             __ptext36 0A99  
                           __ptext28 0E54                             __ptext37 0B07  
                           __ptext29 0AD4                             __ptext38 0A87  
                           __ptext39 0BF3                    __CFG_BOR4V$BOR21V 0000  
                           _get_high 0B63                          _is_row_full 0C47  
     MATRIX88_to_MATRIX7219@matrix88 0074                      ??_delete_matrix 004D  
                           _hit_land 005C                             _evaluate 00CD  
                ?_find_best_solution 0070                        __size_of_main 0148  
                           _is_valid 02A6                        __size_of_rand 0047  
                   hit_land@matrix44 0071                     hit_land@matrix88 0073  
                           clear@col 007A                             clear@row 0079  
                       ??_right_most 007D                _get_holes_after_merge 0339  
                        ??_debug_str 0075                     ?_printf_MATRIX88 0070  
                           main@Seed 005D                             main@argc 0059  
                           main@argv 005B             get_holes_after_merge@col 007A  
           get_holes_after_merge@row 007B                 ??_find_best_solution 0052  
                        fall_off@col 0079                          fall_off@row 007A  
          __size_of_is_left_boundary 0055                          delete_row@i 004A  
                        ??_left_most 0044                             memcpy@d1 0070  
                           memcpy@s1 0072                             merge@col 007A  
                           merge@row 0079                   __end_of_right_most 0B63  
                           init_ram0 0A7A                             memset@p1 0070  
                      _printf_Screen 0A3B                            stringcode 080A  
                 Write_Byte@myColumn 0075                  USARTWriteString@str 0071  
            printf_MATRIX88@matrix88 0044                 _char_info_index_rand 0AD4  
            ?_MATRIX88_to_MATRIX7219 0070               ??_get_high_after_merge 0072  
 find_best_solution@right_most_index 00A1                             stringtab 0800  
                         _SPI1_write 0BF3                     _USARTWriteString 0B85  
                     ?_printf_Screen 0070               ?_get_holes_after_merge 0070  
                     _USARTWriteChar 0A40           MATRIX88_to_MATRIX7219@mask 0075  
          MATRIX88_to_MATRIX7219@col 0077                 __end_of_Clear_Matrix 0ABF  
          MATRIX88_to_MATRIX7219@row 0076  
