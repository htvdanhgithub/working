

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Aug 27 01:46:23 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	dabs	1,0x7E,2
    67  0000                     	;# 
    68  0001                     	;# 
    69  0002                     	;# 
    70  0003                     	;# 
    71  0004                     	;# 
    72  0005                     	;# 
    73  0006                     	;# 
    74  0007                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  0089                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  008F                     	;# 
   110  0090                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0093                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0094                     	;# 
   117  0095                     	;# 
   118  0096                     	;# 
   119  0097                     	;# 
   120  0098                     	;# 
   121  0099                     	;# 
   122  009A                     	;# 
   123  009B                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  0105                     	;# 
   129  0107                     	;# 
   130  0108                     	;# 
   131  0109                     	;# 
   132  010C                     	;# 
   133  010C                     	;# 
   134  010D                     	;# 
   135  010E                     	;# 
   136  010F                     	;# 
   137  0185                     	;# 
   138  0187                     	;# 
   139  0188                     	;# 
   140  0189                     	;# 
   141  018C                     	;# 
   142  018D                     	;# 
   143  0000                     	;# 
   144  0001                     	;# 
   145  0002                     	;# 
   146  0003                     	;# 
   147  0004                     	;# 
   148  0005                     	;# 
   149  0006                     	;# 
   150  0007                     	;# 
   151  0009                     	;# 
   152  000A                     	;# 
   153  000B                     	;# 
   154  000C                     	;# 
   155  000D                     	;# 
   156  000E                     	;# 
   157  000E                     	;# 
   158  000F                     	;# 
   159  0010                     	;# 
   160  0011                     	;# 
   161  0012                     	;# 
   162  0013                     	;# 
   163  0014                     	;# 
   164  0015                     	;# 
   165  0015                     	;# 
   166  0016                     	;# 
   167  0017                     	;# 
   168  0018                     	;# 
   169  0019                     	;# 
   170  001A                     	;# 
   171  001B                     	;# 
   172  001B                     	;# 
   173  001C                     	;# 
   174  001D                     	;# 
   175  001E                     	;# 
   176  001F                     	;# 
   177  0081                     	;# 
   178  0085                     	;# 
   179  0086                     	;# 
   180  0087                     	;# 
   181  0089                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  008F                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0093                     	;# 
   190  0093                     	;# 
   191  0093                     	;# 
   192  0094                     	;# 
   193  0095                     	;# 
   194  0096                     	;# 
   195  0097                     	;# 
   196  0098                     	;# 
   197  0099                     	;# 
   198  009A                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  0105                     	;# 
   205  0107                     	;# 
   206  0108                     	;# 
   207  0109                     	;# 
   208  010C                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  0185                     	;# 
   214  0187                     	;# 
   215  0188                     	;# 
   216  0189                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219                           
   220                           	psect	idataBANK0
   221  1E40                     __pidataBANK0:	
   222                           
   223                           ;initializer for _randx
   224  1E40  3401               	retlw	1
   225  1E41  3400               	retlw	0
   226  1E42  3400               	retlw	0
   227  1E43  3400               	retlw	0
   228                           
   229                           ;initializer for _temp_pre_risk
   230  1E44  34FF               	retlw	255
   231  1E45  34FF               	retlw	255
   232                           
   233                           ;initializer for _tem_pre_sub_index
   234  1E46  34FF               	retlw	-1
   235                           
   236                           ;initializer for _temp_pre_x
   237  1E47  34FF               	retlw	-1
   238                           
   239                           	psect	idataBANK1
   240  1003                     __pidataBANK1:	
   241                           
   242                           ;initializer for _cur_x
   243  1003  3402               	retlw	2
   244                           
   245                           ;initializer for _temp_pre_high
   246  1004  34FF               	retlw	255
   247                           
   248                           ;initializer for _temp_pre_hole
   249  1005  34FF               	retlw	255
   250                           
   251                           	psect	idataBANK3
   252  1ED5                     __pidataBANK3:	
   253                           
   254                           ;initializer for _g_char_info
   255  1ED5  3400               	retlw	0
   256  1ED6  3400               	retlw	0
   257  1ED7  3402               	retlw	2
   258  1ED8  3402               	retlw	2
   259  1ED9  3400               	retlw	0
   260  1EDA  3402               	retlw	2
   261  1EDB  3404               	retlw	4
   262  1EDC  3400               	retlw	0
   263  1EDD  3402               	retlw	2
   264  1EDE  3406               	retlw	6
   265  1EDF  3400               	retlw	0
   266  1EE0  3404               	retlw	4
   267  1EE1  340A               	retlw	10
   268  1EE2  3400               	retlw	0
   269  1EE3  3404               	retlw	4
   270  1EE4  340E               	retlw	14
   271  1EE5  3400               	retlw	0
   272  1EE6  3401               	retlw	1
   273  1EE7  340F               	retlw	15
   274  1EE8  3400               	retlw	0
   275  1EE9  3404               	retlw	4
   276  1EEA  3413               	retlw	19
   277  1EEB  3400               	retlw	0
   278  1EEC  3401               	retlw	1
   279  1EED  3414               	retlw	20
   280  1EEE  3400               	retlw	0
   281  1EEF  3404               	retlw	4
   282                           
   283                           	psect	stringtext
   284  0800                     __pstringtext:	
   285  0800                     stringtab:	
   286  0800                     __stringtab:	
   287                           
   288                           ;	String table - string pointers are 2 bytes each
   289  0800  1BFF               	btfsc	btemp+1,7
   290  0801  280A               	ljmp	stringcode
   291  0802  1383               	bcf	3,7
   292  0803  187F               	btfsc	btemp+1,0
   293  0804  1783               	bsf	3,7
   294  0805  0800               	movf	0,w
   295  0806  0A84               	incf	4,f
   296  0807  1903               	skipnz
   297  0808  0AFF               	incf	btemp+1,f
   298  0809  0008               	return
   299  080A                     stringcode:	
   300  080A  087F               	movf	btemp+1,w
   301  080B  397F               	andlw	127
   302  080C  008A               	movwf	10
   303  080D  0804               	movf	4,w
   304  080E  0A84               	incf	4,f
   305  080F  1903               	skipnz
   306  0810  0AFF               	incf	btemp+1,f
   307  0811  0082               	movwf	2
   308  0812                     __stringbase:	
   309  0812                     __end_of__stringtab:	
   310  0812                     _dpowers:	
   311  0812  3401               	retlw	1
   312  0813  3400               	retlw	0
   313  0814  340A               	retlw	10
   314  0815  3400               	retlw	0
   315  0816  3464               	retlw	100
   316  0817  3400               	retlw	0
   317  0818  34E8               	retlw	232
   318  0819  3403               	retlw	3
   319  081A  3410               	retlw	16
   320  081B  3427               	retlw	39
   321  081C                     __end_of_dpowers:	
   322  081C                     _g_matrix44:	
   323  081C  3400               	retlw	0
   324  081D  3401               	retlw	1
   325  081E  3400               	retlw	0
   326  081F  3400               	retlw	0
   327  0820  3400               	retlw	0
   328  0821  3401               	retlw	1
   329  0822  3400               	retlw	0
   330  0823  3400               	retlw	0
   331  0824  3400               	retlw	0
   332  0825  3401               	retlw	1
   333  0826  3400               	retlw	0
   334  0827  3400               	retlw	0
   335  0828  3400               	retlw	0
   336  0829  3401               	retlw	1
   337  082A  3400               	retlw	0
   338  082B  3400               	retlw	0
   339  082C  3400               	retlw	0
   340  082D  3400               	retlw	0
   341  082E  3400               	retlw	0
   342  082F  3400               	retlw	0
   343  0830  3401               	retlw	1
   344  0831  3401               	retlw	1
   345  0832  3401               	retlw	1
   346  0833  3401               	retlw	1
   347  0834  3400               	retlw	0
   348  0835  3400               	retlw	0
   349  0836  3400               	retlw	0
   350  0837  3400               	retlw	0
   351  0838  3400               	retlw	0
   352  0839  3400               	retlw	0
   353  083A  3400               	retlw	0
   354  083B  3400               	retlw	0
   355  083C  3400               	retlw	0
   356  083D  3401               	retlw	1
   357  083E  3401               	retlw	1
   358  083F  3400               	retlw	0
   359  0840  3401               	retlw	1
   360  0841  3401               	retlw	1
   361  0842  3400               	retlw	0
   362  0843  3400               	retlw	0
   363  0844  3400               	retlw	0
   364  0845  3400               	retlw	0
   365  0846  3400               	retlw	0
   366  0847  3400               	retlw	0
   367  0848  3400               	retlw	0
   368  0849  3400               	retlw	0
   369  084A  3400               	retlw	0
   370  084B  3400               	retlw	0
   371  084C  3400               	retlw	0
   372  084D  3401               	retlw	1
   373  084E  3400               	retlw	0
   374  084F  3400               	retlw	0
   375  0850  3400               	retlw	0
   376  0851  3401               	retlw	1
   377  0852  3401               	retlw	1
   378  0853  3400               	retlw	0
   379  0854  3400               	retlw	0
   380  0855  3400               	retlw	0
   381  0856  3401               	retlw	1
   382  0857  3400               	retlw	0
   383  0858  3400               	retlw	0
   384  0859  3400               	retlw	0
   385  085A  3400               	retlw	0
   386  085B  3400               	retlw	0
   387  085C  3401               	retlw	1
   388  085D  3401               	retlw	1
   389  085E  3400               	retlw	0
   390  085F  3400               	retlw	0
   391  0860  3400               	retlw	0
   392  0861  3401               	retlw	1
   393  0862  3401               	retlw	1
   394  0863  3400               	retlw	0
   395  0864  3400               	retlw	0
   396  0865  3400               	retlw	0
   397  0866  3400               	retlw	0
   398  0867  3400               	retlw	0
   399  0868  3400               	retlw	0
   400  0869  3400               	retlw	0
   401  086A  3400               	retlw	0
   402  086B  3400               	retlw	0
   403  086C  3400               	retlw	0
   404  086D  3401               	retlw	1
   405  086E  3400               	retlw	0
   406  086F  3400               	retlw	0
   407  0870  3401               	retlw	1
   408  0871  3401               	retlw	1
   409  0872  3400               	retlw	0
   410  0873  3400               	retlw	0
   411  0874  3401               	retlw	1
   412  0875  3400               	retlw	0
   413  0876  3400               	retlw	0
   414  0877  3400               	retlw	0
   415  0878  3400               	retlw	0
   416  0879  3400               	retlw	0
   417  087A  3400               	retlw	0
   418  087B  3400               	retlw	0
   419  087C  3400               	retlw	0
   420  087D  3400               	retlw	0
   421  087E  3400               	retlw	0
   422  087F  3400               	retlw	0
   423  0880  3401               	retlw	1
   424  0881  3401               	retlw	1
   425  0882  3401               	retlw	1
   426  0883  3400               	retlw	0
   427  0884  3400               	retlw	0
   428  0885  3400               	retlw	0
   429  0886  3401               	retlw	1
   430  0887  3400               	retlw	0
   431  0888  3400               	retlw	0
   432  0889  3400               	retlw	0
   433  088A  3400               	retlw	0
   434  088B  3400               	retlw	0
   435  088C  3400               	retlw	0
   436  088D  3401               	retlw	1
   437  088E  3401               	retlw	1
   438  088F  3400               	retlw	0
   439  0890  3400               	retlw	0
   440  0891  3401               	retlw	1
   441  0892  3400               	retlw	0
   442  0893  3400               	retlw	0
   443  0894  3400               	retlw	0
   444  0895  3401               	retlw	1
   445  0896  3400               	retlw	0
   446  0897  3400               	retlw	0
   447  0898  3400               	retlw	0
   448  0899  3400               	retlw	0
   449  089A  3400               	retlw	0
   450  089B  3400               	retlw	0
   451  089C  3401               	retlw	1
   452  089D  3400               	retlw	0
   453  089E  3400               	retlw	0
   454  089F  3400               	retlw	0
   455  08A0  3401               	retlw	1
   456  08A1  3401               	retlw	1
   457  08A2  3401               	retlw	1
   458  08A3  3400               	retlw	0
   459  08A4  3400               	retlw	0
   460  08A5  3400               	retlw	0
   461  08A6  3400               	retlw	0
   462  08A7  3400               	retlw	0
   463  08A8  3400               	retlw	0
   464  08A9  3400               	retlw	0
   465  08AA  3400               	retlw	0
   466  08AB  3400               	retlw	0
   467  08AC  3400               	retlw	0
   468  08AD  3401               	retlw	1
   469  08AE  3400               	retlw	0
   470  08AF  3400               	retlw	0
   471  08B0  3400               	retlw	0
   472  08B1  3401               	retlw	1
   473  08B2  3400               	retlw	0
   474  08B3  3400               	retlw	0
   475  08B4  3401               	retlw	1
   476  08B5  3401               	retlw	1
   477  08B6  3400               	retlw	0
   478  08B7  3400               	retlw	0
   479  08B8  3400               	retlw	0
   480  08B9  3400               	retlw	0
   481  08BA  3400               	retlw	0
   482  08BB  3400               	retlw	0
   483  08BC  3400               	retlw	0
   484  08BD  3400               	retlw	0
   485  08BE  3400               	retlw	0
   486  08BF  3400               	retlw	0
   487  08C0  3401               	retlw	1
   488  08C1  3401               	retlw	1
   489  08C2  3401               	retlw	1
   490  08C3  3400               	retlw	0
   491  08C4  3401               	retlw	1
   492  08C5  3400               	retlw	0
   493  08C6  3400               	retlw	0
   494  08C7  3400               	retlw	0
   495  08C8  3400               	retlw	0
   496  08C9  3400               	retlw	0
   497  08CA  3400               	retlw	0
   498  08CB  3400               	retlw	0
   499  08CC  3401               	retlw	1
   500  08CD  3401               	retlw	1
   501  08CE  3400               	retlw	0
   502  08CF  3400               	retlw	0
   503  08D0  3400               	retlw	0
   504  08D1  3401               	retlw	1
   505  08D2  3400               	retlw	0
   506  08D3  3400               	retlw	0
   507  08D4  3400               	retlw	0
   508  08D5  3401               	retlw	1
   509  08D6  3400               	retlw	0
   510  08D7  3400               	retlw	0
   511  08D8  3400               	retlw	0
   512  08D9  3400               	retlw	0
   513  08DA  3400               	retlw	0
   514  08DB  3400               	retlw	0
   515  08DC  3400               	retlw	0
   516  08DD  3400               	retlw	0
   517  08DE  3401               	retlw	1
   518  08DF  3400               	retlw	0
   519  08E0  3401               	retlw	1
   520  08E1  3401               	retlw	1
   521  08E2  3401               	retlw	1
   522  08E3  3400               	retlw	0
   523  08E4  3400               	retlw	0
   524  08E5  3400               	retlw	0
   525  08E6  3400               	retlw	0
   526  08E7  3400               	retlw	0
   527  08E8  3400               	retlw	0
   528  08E9  3400               	retlw	0
   529  08EA  3400               	retlw	0
   530  08EB  3400               	retlw	0
   531  08EC  3400               	retlw	0
   532  08ED  3401               	retlw	1
   533  08EE  3400               	retlw	0
   534  08EF  3400               	retlw	0
   535  08F0  3400               	retlw	0
   536  08F1  3401               	retlw	1
   537  08F2  3400               	retlw	0
   538  08F3  3400               	retlw	0
   539  08F4  3400               	retlw	0
   540  08F5  3401               	retlw	1
   541  08F6  3401               	retlw	1
   542  08F7  3400               	retlw	0
   543  08F8  3400               	retlw	0
   544  08F9  3400               	retlw	0
   545  08FA  3400               	retlw	0
   546  08FB  3400               	retlw	0
   547  08FC  3400               	retlw	0
   548  08FD  3401               	retlw	1
   549  08FE  3401               	retlw	1
   550  08FF  3400               	retlw	0
   551  0900  3400               	retlw	0
   552  0901  3401               	retlw	1
   553  0902  3401               	retlw	1
   554  0903  3400               	retlw	0
   555  0904  3400               	retlw	0
   556  0905  3400               	retlw	0
   557  0906  3400               	retlw	0
   558  0907  3400               	retlw	0
   559  0908  3400               	retlw	0
   560  0909  3400               	retlw	0
   561  090A  3400               	retlw	0
   562  090B  3400               	retlw	0
   563  090C  3400               	retlw	0
   564  090D  3400               	retlw	0
   565  090E  3400               	retlw	0
   566  090F  3400               	retlw	0
   567  0910  3400               	retlw	0
   568  0911  3401               	retlw	1
   569  0912  3401               	retlw	1
   570  0913  3400               	retlw	0
   571  0914  3400               	retlw	0
   572  0915  3401               	retlw	1
   573  0916  3400               	retlw	0
   574  0917  3400               	retlw	0
   575  0918  3400               	retlw	0
   576  0919  3400               	retlw	0
   577  091A  3400               	retlw	0
   578  091B  3400               	retlw	0
   579  091C  3400               	retlw	0
   580  091D  3400               	retlw	0
   581  091E  3400               	retlw	0
   582  091F  3400               	retlw	0
   583  0920  3401               	retlw	1
   584  0921  3401               	retlw	1
   585  0922  3400               	retlw	0
   586  0923  3400               	retlw	0
   587  0924  3400               	retlw	0
   588  0925  3401               	retlw	1
   589  0926  3400               	retlw	0
   590  0927  3400               	retlw	0
   591  0928  3400               	retlw	0
   592  0929  3400               	retlw	0
   593  092A  3400               	retlw	0
   594  092B  3400               	retlw	0
   595  092C  3400               	retlw	0
   596  092D  3401               	retlw	1
   597  092E  3400               	retlw	0
   598  092F  3400               	retlw	0
   599  0930  3401               	retlw	1
   600  0931  3401               	retlw	1
   601  0932  3400               	retlw	0
   602  0933  3400               	retlw	0
   603  0934  3400               	retlw	0
   604  0935  3400               	retlw	0
   605  0936  3400               	retlw	0
   606  0937  3400               	retlw	0
   607  0938  3400               	retlw	0
   608  0939  3400               	retlw	0
   609  093A  3400               	retlw	0
   610  093B  3400               	retlw	0
   611  093C  3400               	retlw	0
   612  093D  3401               	retlw	1
   613  093E  3400               	retlw	0
   614  093F  3400               	retlw	0
   615  0940  3400               	retlw	0
   616  0941  3401               	retlw	1
   617  0942  3401               	retlw	1
   618  0943  3400               	retlw	0
   619  0944  3400               	retlw	0
   620  0945  3400               	retlw	0
   621  0946  3400               	retlw	0
   622  0947  3400               	retlw	0
   623  0948  3400               	retlw	0
   624  0949  3400               	retlw	0
   625  094A  3400               	retlw	0
   626  094B  3400               	retlw	0
   627  094C  3400               	retlw	0
   628  094D  3401               	retlw	1
   629  094E  3400               	retlw	0
   630  094F  3400               	retlw	0
   631  0950  3401               	retlw	1
   632  0951  3401               	retlw	1
   633  0952  3401               	retlw	1
   634  0953  3400               	retlw	0
   635  0954  3400               	retlw	0
   636  0955  3401               	retlw	1
   637  0956  3400               	retlw	0
   638  0957  3400               	retlw	0
   639  0958  3400               	retlw	0
   640  0959  3400               	retlw	0
   641  095A  3400               	retlw	0
   642  095B  3400               	retlw	0
   643  095C  3401               	retlw	1
   644  095D  3401               	retlw	1
   645  095E  3401               	retlw	1
   646  095F  3400               	retlw	0
   647  0960  3400               	retlw	0
   648  0961  3401               	retlw	1
   649  0962  3400               	retlw	0
   650  0963  3400               	retlw	0
   651  0964  3400               	retlw	0
   652  0965  3401               	retlw	1
   653  0966  3400               	retlw	0
   654  0967  3400               	retlw	0
   655  0968  3400               	retlw	0
   656  0969  3400               	retlw	0
   657  096A  3400               	retlw	0
   658  096B  3400               	retlw	0
   659  096C  3400               	retlw	0
   660  096D  3400               	retlw	0
   661  096E  3401               	retlw	1
   662  096F  3400               	retlw	0
   663  0970  3401               	retlw	1
   664  0971  3401               	retlw	1
   665  0972  3401               	retlw	1
   666  0973  3400               	retlw	0
   667  0974  3400               	retlw	0
   668  0975  3400               	retlw	0
   669  0976  3401               	retlw	1
   670  0977  3400               	retlw	0
   671  0978  3400               	retlw	0
   672  0979  3400               	retlw	0
   673  097A  3400               	retlw	0
   674  097B  3400               	retlw	0
   675  097C  3400               	retlw	0
   676  097D  3401               	retlw	1
   677  097E  3400               	retlw	0
   678  097F  3400               	retlw	0
   679  0980  3400               	retlw	0
   680  0981  3401               	retlw	1
   681  0982  3400               	retlw	0
   682  0983  3400               	retlw	0
   683  0984  3401               	retlw	1
   684  0985  3401               	retlw	1
   685  0986  3401               	retlw	1
   686  0987  3400               	retlw	0
   687  0988  3400               	retlw	0
   688  0989  3400               	retlw	0
   689  098A  3400               	retlw	0
   690  098B  3400               	retlw	0
   691  098C  3401               	retlw	1
   692  098D  3400               	retlw	0
   693  098E  3400               	retlw	0
   694  098F  3400               	retlw	0
   695  0990  3401               	retlw	1
   696  0991  3401               	retlw	1
   697  0992  3401               	retlw	1
   698  0993  3400               	retlw	0
   699  0994  3401               	retlw	1
   700  0995  3400               	retlw	0
   701  0996  3400               	retlw	0
   702  0997  3400               	retlw	0
   703  0998  3400               	retlw	0
   704  0999  3400               	retlw	0
   705  099A  3400               	retlw	0
   706  099B  3400               	retlw	0
   707  099C                     __end_of_g_matrix44:	
   708  099C                     STR_36:	
   709  099C  3467               	retlw	103	;'g'
   710  099D  3465               	retlw	101	;'e'
   711  099E  3474               	retlw	116	;'t'
   712  099F  345F               	retlw	95	;'_'
   713  09A0  3468               	retlw	104	;'h'
   714  09A1  3469               	retlw	105	;'i'
   715  09A2  3467               	retlw	103	;'g'
   716  09A3  3468               	retlw	104	;'h'
   717  09A4  345F               	retlw	95	;'_'
   718  09A5  3461               	retlw	97	;'a'
   719  09A6  3466               	retlw	102	;'f'
   720  09A7  3474               	retlw	116	;'t'
   721  09A8  3465               	retlw	101	;'e'
   722  09A9  3472               	retlw	114	;'r'
   723  09AA  345F               	retlw	95	;'_'
   724  09AB  346D               	retlw	109	;'m'
   725  09AC  3465               	retlw	101	;'e'
   726  09AD  3472               	retlw	114	;'r'
   727  09AE  3467               	retlw	103	;'g'
   728  09AF  3465               	retlw	101	;'e'
   729  09B0  3420               	retlw	32	;' '
   730  09B1  3479               	retlw	121	;'y'
   731  09B2  3420               	retlw	32	;' '
   732  09B3  343D               	retlw	61	;'='
   733  09B4  3420               	retlw	32	;' '
   734  09B5  3425               	retlw	37	;'%'
   735  09B6  3464               	retlw	100	;'d'
   736  09B7  342C               	retlw	44	;','
   737  09B8  3420               	retlw	32	;' '
   738  09B9  3472               	retlw	114	;'r'
   739  09BA  346F               	retlw	111	;'o'
   740  09BB  3477               	retlw	119	;'w'
   741  09BC  3420               	retlw	32	;' '
   742  09BD  343D               	retlw	61	;'='
   743  09BE  3420               	retlw	32	;' '
   744  09BF  3425               	retlw	37	;'%'
   745  09C0  3464               	retlw	100	;'d'
   746  09C1  342C               	retlw	44	;','
   747  09C2  3420               	retlw	32	;' '
   748  09C3  3468               	retlw	104	;'h'
   749  09C4  3465               	retlw	101	;'e'
   750  09C5  3469               	retlw	105	;'i'
   751  09C6  3467               	retlw	103	;'g'
   752  09C7  3468               	retlw	104	;'h'
   753  09C8  3474               	retlw	116	;'t'
   754  09C9  3420               	retlw	32	;' '
   755  09CA  343D               	retlw	61	;'='
   756  09CB  3420               	retlw	32	;' '
   757  09CC  3425               	retlw	37	;'%'
   758  09CD  3464               	retlw	100	;'d'
   759  09CE  340A               	retlw	10
   760  09CF  3400               	retlw	0
   761  09D0                     STR_39:	
   762  09D0  343D               	retlw	61	;'='
   763  09D1  343D               	retlw	61	;'='
   764  09D2  343D               	retlw	61	;'='
   765  09D3  343D               	retlw	61	;'='
   766  09D4  343D               	retlw	61	;'='
   767  09D5  343D               	retlw	61	;'='
   768  09D6  343D               	retlw	61	;'='
   769  09D7  343D               	retlw	61	;'='
   770  09D8  343D               	retlw	61	;'='
   771  09D9  343D               	retlw	61	;'='
   772  09DA  343D               	retlw	61	;'='
   773  09DB  343D               	retlw	61	;'='
   774  09DC  343D               	retlw	61	;'='
   775  09DD  343D               	retlw	61	;'='
   776  09DE  3466               	retlw	102	;'f'
   777  09DF  3469               	retlw	105	;'i'
   778  09E0  346E               	retlw	110	;'n'
   779  09E1  3464               	retlw	100	;'d'
   780  09E2  345F               	retlw	95	;'_'
   781  09E3  3462               	retlw	98	;'b'
   782  09E4  3465               	retlw	101	;'e'
   783  09E5  3473               	retlw	115	;'s'
   784  09E6  3474               	retlw	116	;'t'
   785  09E7  345F               	retlw	95	;'_'
   786  09E8  3473               	retlw	115	;'s'
   787  09E9  346F               	retlw	111	;'o'
   788  09EA  346C               	retlw	108	;'l'
   789  09EB  3475               	retlw	117	;'u'
   790  09EC  3474               	retlw	116	;'t'
   791  09ED  3469               	retlw	105	;'i'
   792  09EE  346F               	retlw	111	;'o'
   793  09EF  346E               	retlw	110	;'n'
   794  09F0  343D               	retlw	61	;'='
   795  09F1  343D               	retlw	61	;'='
   796  09F2  343D               	retlw	61	;'='
   797  09F3  343D               	retlw	61	;'='
   798  09F4  343D               	retlw	61	;'='
   799  09F5  343D               	retlw	61	;'='
   800  09F6  343D               	retlw	61	;'='
   801  09F7  343D               	retlw	61	;'='
   802  09F8  343D               	retlw	61	;'='
   803  09F9  343D               	retlw	61	;'='
   804  09FA  343D               	retlw	61	;'='
   805  09FB  343D               	retlw	61	;'='
   806  09FC  340D               	retlw	13
   807  09FD  340A               	retlw	10
   808  09FE  3400               	retlw	0
   809  09FF                     STR_7:	
   810  09FF  3470               	retlw	112	;'p'
   811  0A00  3472               	retlw	114	;'r'
   812  0A01  3469               	retlw	105	;'i'
   813  0A02  346E               	retlw	110	;'n'
   814  0A03  3474               	retlw	116	;'t'
   815  0A04  3466               	retlw	102	;'f'
   816  0A05  344D               	retlw	77	;'M'
   817  0A06  3441               	retlw	65	;'A'
   818  0A07  3454               	retlw	84	;'T'
   819  0A08  3452               	retlw	82	;'R'
   820  0A09  3449               	retlw	73	;'I'
   821  0A0A  3458               	retlw	88	;'X'
   822  0A0B  3434               	retlw	52	;'4'
   823  0A0C  3434               	retlw	52	;'4'
   824  0A0D  3420               	retlw	32	;' '
   825  0A0E  3469               	retlw	105	;'i'
   826  0A0F  346E               	retlw	110	;'n'
   827  0A10  3464               	retlw	100	;'d'
   828  0A11  3465               	retlw	101	;'e'
   829  0A12  3478               	retlw	120	;'x'
   830  0A13  3420               	retlw	32	;' '
   831  0A14  343D               	retlw	61	;'='
   832  0A15  3420               	retlw	32	;' '
   833  0A16  3425               	retlw	37	;'%'
   834  0A17  3464               	retlw	100	;'d'
   835  0A18  342C               	retlw	44	;','
   836  0A19  3420               	retlw	32	;' '
   837  0A1A  3473               	retlw	115	;'s'
   838  0A1B  3475               	retlw	117	;'u'
   839  0A1C  3462               	retlw	98	;'b'
   840  0A1D  345F               	retlw	95	;'_'
   841  0A1E  3469               	retlw	105	;'i'
   842  0A1F  346E               	retlw	110	;'n'
   843  0A20  3464               	retlw	100	;'d'
   844  0A21  3465               	retlw	101	;'e'
   845  0A22  3478               	retlw	120	;'x'
   846  0A23  3420               	retlw	32	;' '
   847  0A24  343D               	retlw	61	;'='
   848  0A25  3420               	retlw	32	;' '
   849  0A26  3425               	retlw	37	;'%'
   850  0A27  3464               	retlw	100	;'d'
   851  0A28  340A               	retlw	10
   852  0A29  3400               	retlw	0
   853  0A2A                     STR_43:	
   854  0A2A  3474               	retlw	116	;'t'
   855  0A2B  3465               	retlw	101	;'e'
   856  0A2C  346D               	retlw	109	;'m'
   857  0A2D  3470               	retlw	112	;'p'
   858  0A2E  345F               	retlw	95	;'_'
   859  0A2F  3463               	retlw	99	;'c'
   860  0A30  346F               	retlw	111	;'o'
   861  0A31  3475               	retlw	117	;'u'
   862  0A32  346E               	retlw	110	;'n'
   863  0A33  3474               	retlw	116	;'t'
   864  0A34  3428               	retlw	40	;'('
   865  0A35  3425               	retlw	37	;'%'
   866  0A36  3464               	retlw	100	;'d'
   867  0A37  3429               	retlw	41	;')'
   868  0A38  3420               	retlw	32	;' '
   869  0A39  343D               	retlw	61	;'='
   870  0A3A  343D               	retlw	61	;'='
   871  0A3B  3420               	retlw	32	;' '
   872  0A3C  3474               	retlw	116	;'t'
   873  0A3D  3465               	retlw	101	;'e'
   874  0A3E  346D               	retlw	109	;'m'
   875  0A3F  3470               	retlw	112	;'p'
   876  0A40  345F               	retlw	95	;'_'
   877  0A41  3470               	retlw	112	;'p'
   878  0A42  3472               	retlw	114	;'r'
   879  0A43  3465               	retlw	101	;'e'
   880  0A44  345F               	retlw	95	;'_'
   881  0A45  3463               	retlw	99	;'c'
   882  0A46  346F               	retlw	111	;'o'
   883  0A47  3475               	retlw	117	;'u'
   884  0A48  346E               	retlw	110	;'n'
   885  0A49  3474               	retlw	116	;'t'
   886  0A4A  3428               	retlw	40	;'('
   887  0A4B  3425               	retlw	37	;'%'
   888  0A4C  3464               	retlw	100	;'d'
   889  0A4D  3429               	retlw	41	;')'
   890  0A4E  340A               	retlw	10
   891  0A4F  3400               	retlw	0
   892  0A50                     STR_23:	
   893  0A50  343D               	retlw	61	;'='
   894  0A51  343D               	retlw	61	;'='
   895  0A52  343D               	retlw	61	;'='
   896  0A53  343D               	retlw	61	;'='
   897  0A54  343D               	retlw	61	;'='
   898  0A55  343D               	retlw	61	;'='
   899  0A56  343D               	retlw	61	;'='
   900  0A57  343D               	retlw	61	;'='
   901  0A58  343D               	retlw	61	;'='
   902  0A59  343D               	retlw	61	;'='
   903  0A5A  343D               	retlw	61	;'='
   904  0A5B  343D               	retlw	61	;'='
   905  0A5C  343D               	retlw	61	;'='
   906  0A5D  343D               	retlw	61	;'='
   907  0A5E  3469               	retlw	105	;'i'
   908  0A5F  3473               	retlw	115	;'s'
   909  0A60  345F               	retlw	95	;'_'
   910  0A61  3476               	retlw	118	;'v'
   911  0A62  3461               	retlw	97	;'a'
   912  0A63  346C               	retlw	108	;'l'
   913  0A64  3469               	retlw	105	;'i'
   914  0A65  3464               	retlw	100	;'d'
   915  0A66  343D               	retlw	61	;'='
   916  0A67  343D               	retlw	61	;'='
   917  0A68  343D               	retlw	61	;'='
   918  0A69  343D               	retlw	61	;'='
   919  0A6A  343D               	retlw	61	;'='
   920  0A6B  343D               	retlw	61	;'='
   921  0A6C  343D               	retlw	61	;'='
   922  0A6D  343D               	retlw	61	;'='
   923  0A6E  343D               	retlw	61	;'='
   924  0A6F  343D               	retlw	61	;'='
   925  0A70  343D               	retlw	61	;'='
   926  0A71  343D               	retlw	61	;'='
   927  0A72  340D               	retlw	13
   928  0A73  340A               	retlw	10
   929  0A74  3400               	retlw	0
   930  0A75                     STR_19:	
   931  0A75  343D               	retlw	61	;'='
   932  0A76  343D               	retlw	61	;'='
   933  0A77  343D               	retlw	61	;'='
   934  0A78  343D               	retlw	61	;'='
   935  0A79  343D               	retlw	61	;'='
   936  0A7A  343D               	retlw	61	;'='
   937  0A7B  343D               	retlw	61	;'='
   938  0A7C  343D               	retlw	61	;'='
   939  0A7D  343D               	retlw	61	;'='
   940  0A7E  343D               	retlw	61	;'='
   941  0A7F  343D               	retlw	61	;'='
   942  0A80  343D               	retlw	61	;'='
   943  0A81  343D               	retlw	61	;'='
   944  0A82  343D               	retlw	61	;'='
   945  0A83  3468               	retlw	104	;'h'
   946  0A84  3469               	retlw	105	;'i'
   947  0A85  3474               	retlw	116	;'t'
   948  0A86  345F               	retlw	95	;'_'
   949  0A87  346C               	retlw	108	;'l'
   950  0A88  3461               	retlw	97	;'a'
   951  0A89  346E               	retlw	110	;'n'
   952  0A8A  3464               	retlw	100	;'d'
   953  0A8B  343D               	retlw	61	;'='
   954  0A8C  343D               	retlw	61	;'='
   955  0A8D  343D               	retlw	61	;'='
   956  0A8E  343D               	retlw	61	;'='
   957  0A8F  343D               	retlw	61	;'='
   958  0A90  343D               	retlw	61	;'='
   959  0A91  343D               	retlw	61	;'='
   960  0A92  343D               	retlw	61	;'='
   961  0A93  343D               	retlw	61	;'='
   962  0A94  343D               	retlw	61	;'='
   963  0A95  343D               	retlw	61	;'='
   964  0A96  343D               	retlw	61	;'='
   965  0A97  340D               	retlw	13
   966  0A98  340A               	retlw	10
   967  0A99  3400               	retlw	0
   968  0A9A                     STR_41:	
   969  0A9A  3474               	retlw	116	;'t'
   970  0A9B  3465               	retlw	101	;'e'
   971  0A9C  346D               	retlw	109	;'m'
   972  0A9D  3470               	retlw	112	;'p'
   973  0A9E  345F               	retlw	95	;'_'
   974  0A9F  3463               	retlw	99	;'c'
   975  0AA0  346F               	retlw	111	;'o'
   976  0AA1  3475               	retlw	117	;'u'
   977  0AA2  346E               	retlw	110	;'n'
   978  0AA3  3474               	retlw	116	;'t'
   979  0AA4  3428               	retlw	40	;'('
   980  0AA5  3425               	retlw	37	;'%'
   981  0AA6  3464               	retlw	100	;'d'
   982  0AA7  3429               	retlw	41	;')'
   983  0AA8  3420               	retlw	32	;' '
   984  0AA9  343E               	retlw	62	;'>'
   985  0AAA  3420               	retlw	32	;' '
   986  0AAB  3474               	retlw	116	;'t'
   987  0AAC  3465               	retlw	101	;'e'
   988  0AAD  346D               	retlw	109	;'m'
   989  0AAE  3470               	retlw	112	;'p'
   990  0AAF  345F               	retlw	95	;'_'
   991  0AB0  3470               	retlw	112	;'p'
   992  0AB1  3472               	retlw	114	;'r'
   993  0AB2  3465               	retlw	101	;'e'
   994  0AB3  345F               	retlw	95	;'_'
   995  0AB4  3463               	retlw	99	;'c'
   996  0AB5  346F               	retlw	111	;'o'
   997  0AB6  3475               	retlw	117	;'u'
   998  0AB7  346E               	retlw	110	;'n'
   999  0AB8  3474               	retlw	116	;'t'
  1000  0AB9  3428               	retlw	40	;'('
  1001  0ABA  3425               	retlw	37	;'%'
  1002  0ABB  3464               	retlw	100	;'d'
  1003  0ABC  3429               	retlw	41	;')'
  1004  0ABD  340A               	retlw	10
  1005  0ABE  3400               	retlw	0
  1006  0ABF                     STR_54:	
  1007  0ABF  3474               	retlw	116	;'t'
  1008  0AC0  3465               	retlw	101	;'e'
  1009  0AC1  346D               	retlw	109	;'m'
  1010  0AC2  3470               	retlw	112	;'p'
  1011  0AC3  345F               	retlw	95	;'_'
  1012  0AC4  3468               	retlw	104	;'h'
  1013  0AC5  346F               	retlw	111	;'o'
  1014  0AC6  346C               	retlw	108	;'l'
  1015  0AC7  3465               	retlw	101	;'e'
  1016  0AC8  3428               	retlw	40	;'('
  1017  0AC9  3425               	retlw	37	;'%'
  1018  0ACA  3464               	retlw	100	;'d'
  1019  0ACB  3429               	retlw	41	;')'
  1020  0ACC  3420               	retlw	32	;' '
  1021  0ACD  343D               	retlw	61	;'='
  1022  0ACE  343D               	retlw	61	;'='
  1023  0ACF  3420               	retlw	32	;' '
  1024  0AD0  3474               	retlw	116	;'t'
  1025  0AD1  3465               	retlw	101	;'e'
  1026  0AD2  346D               	retlw	109	;'m'
  1027  0AD3  3470               	retlw	112	;'p'
  1028  0AD4  345F               	retlw	95	;'_'
  1029  0AD5  3470               	retlw	112	;'p'
  1030  0AD6  3472               	retlw	114	;'r'
  1031  0AD7  3465               	retlw	101	;'e'
  1032  0AD8  345F               	retlw	95	;'_'
  1033  0AD9  3468               	retlw	104	;'h'
  1034  0ADA  346F               	retlw	111	;'o'
  1035  0ADB  346C               	retlw	108	;'l'
  1036  0ADC  3465               	retlw	101	;'e'
  1037  0ADD  3428               	retlw	40	;'('
  1038  0ADE  3425               	retlw	37	;'%'
  1039  0ADF  3464               	retlw	100	;'d'
  1040  0AE0  3429               	retlw	41	;')'
  1041  0AE1  340A               	retlw	10
  1042  0AE2  3400               	retlw	0
  1043  0AE3                     STR_47:	
  1044  0AE3  3474               	retlw	116	;'t'
  1045  0AE4  3465               	retlw	101	;'e'
  1046  0AE5  346D               	retlw	109	;'m'
  1047  0AE6  3470               	retlw	112	;'p'
  1048  0AE7  345F               	retlw	95	;'_'
  1049  0AE8  3468               	retlw	104	;'h'
  1050  0AE9  3469               	retlw	105	;'i'
  1051  0AEA  3467               	retlw	103	;'g'
  1052  0AEB  3468               	retlw	104	;'h'
  1053  0AEC  3428               	retlw	40	;'('
  1054  0AED  3425               	retlw	37	;'%'
  1055  0AEE  3464               	retlw	100	;'d'
  1056  0AEF  3429               	retlw	41	;')'
  1057  0AF0  3420               	retlw	32	;' '
  1058  0AF1  343D               	retlw	61	;'='
  1059  0AF2  343D               	retlw	61	;'='
  1060  0AF3  3420               	retlw	32	;' '
  1061  0AF4  3474               	retlw	116	;'t'
  1062  0AF5  3465               	retlw	101	;'e'
  1063  0AF6  346D               	retlw	109	;'m'
  1064  0AF7  3470               	retlw	112	;'p'
  1065  0AF8  345F               	retlw	95	;'_'
  1066  0AF9  3470               	retlw	112	;'p'
  1067  0AFA  3472               	retlw	114	;'r'
  1068  0AFB  3465               	retlw	101	;'e'
  1069  0AFC  345F               	retlw	95	;'_'
  1070  0AFD  3468               	retlw	104	;'h'
  1071  0AFE  3469               	retlw	105	;'i'
  1072  0AFF  3467               	retlw	103	;'g'
  1073  0B00  3468               	retlw	104	;'h'
  1074  0B01  3428               	retlw	40	;'('
  1075  0B02  3425               	retlw	37	;'%'
  1076  0B03  3464               	retlw	100	;'d'
  1077  0B04  3429               	retlw	41	;')'
  1078  0B05  340A               	retlw	10
  1079  0B06  3400               	retlw	0
  1080  0B07                     STR_45:	
  1081  0B07  3474               	retlw	116	;'t'
  1082  0B08  3465               	retlw	101	;'e'
  1083  0B09  346D               	retlw	109	;'m'
  1084  0B0A  3470               	retlw	112	;'p'
  1085  0B0B  345F               	retlw	95	;'_'
  1086  0B0C  3472               	retlw	114	;'r'
  1087  0B0D  3469               	retlw	105	;'i'
  1088  0B0E  3473               	retlw	115	;'s'
  1089  0B0F  346B               	retlw	107	;'k'
  1090  0B10  3428               	retlw	40	;'('
  1091  0B11  3425               	retlw	37	;'%'
  1092  0B12  3464               	retlw	100	;'d'
  1093  0B13  3429               	retlw	41	;')'
  1094  0B14  3420               	retlw	32	;' '
  1095  0B15  343D               	retlw	61	;'='
  1096  0B16  343D               	retlw	61	;'='
  1097  0B17  3420               	retlw	32	;' '
  1098  0B18  3474               	retlw	116	;'t'
  1099  0B19  3465               	retlw	101	;'e'
  1100  0B1A  346D               	retlw	109	;'m'
  1101  0B1B  3470               	retlw	112	;'p'
  1102  0B1C  345F               	retlw	95	;'_'
  1103  0B1D  3470               	retlw	112	;'p'
  1104  0B1E  3472               	retlw	114	;'r'
  1105  0B1F  3465               	retlw	101	;'e'
  1106  0B20  345F               	retlw	95	;'_'
  1107  0B21  3472               	retlw	114	;'r'
  1108  0B22  3469               	retlw	105	;'i'
  1109  0B23  3473               	retlw	115	;'s'
  1110  0B24  346B               	retlw	107	;'k'
  1111  0B25  3428               	retlw	40	;'('
  1112  0B26  3425               	retlw	37	;'%'
  1113  0B27  3464               	retlw	100	;'d'
  1114  0B28  3429               	retlw	41	;')'
  1115  0B29  340A               	retlw	10
  1116  0B2A  3400               	retlw	0
  1117  0B2B                     STR_50:	
  1118  0B2B  3474               	retlw	116	;'t'
  1119  0B2C  3465               	retlw	101	;'e'
  1120  0B2D  346D               	retlw	109	;'m'
  1121  0B2E  3470               	retlw	112	;'p'
  1122  0B2F  345F               	retlw	95	;'_'
  1123  0B30  3468               	retlw	104	;'h'
  1124  0B31  3469               	retlw	105	;'i'
  1125  0B32  3467               	retlw	103	;'g'
  1126  0B33  3468               	retlw	104	;'h'
  1127  0B34  3420               	retlw	32	;' '
  1128  0B35  343D               	retlw	61	;'='
  1129  0B36  3420               	retlw	32	;' '
  1130  0B37  3425               	retlw	37	;'%'
  1131  0B38  3464               	retlw	100	;'d'
  1132  0B39  342C               	retlw	44	;','
  1133  0B3A  3420               	retlw	32	;' '
  1134  0B3B  3474               	retlw	116	;'t'
  1135  0B3C  3465               	retlw	101	;'e'
  1136  0B3D  346D               	retlw	109	;'m'
  1137  0B3E  3470               	retlw	112	;'p'
  1138  0B3F  345F               	retlw	95	;'_'
  1139  0B40  3470               	retlw	112	;'p'
  1140  0B41  3472               	retlw	114	;'r'
  1141  0B42  3465               	retlw	101	;'e'
  1142  0B43  345F               	retlw	95	;'_'
  1143  0B44  3468               	retlw	104	;'h'
  1144  0B45  3469               	retlw	105	;'i'
  1145  0B46  3467               	retlw	103	;'g'
  1146  0B47  3468               	retlw	104	;'h'
  1147  0B48  3420               	retlw	32	;' '
  1148  0B49  343D               	retlw	61	;'='
  1149  0B4A  3420               	retlw	32	;' '
  1150  0B4B  3425               	retlw	37	;'%'
  1151  0B4C  3464               	retlw	100	;'d'
  1152  0B4D  340A               	retlw	10
  1153  0B4E  3400               	retlw	0
  1154  0B4F                     STR_40:	
  1155  0B4F  3467               	retlw	103	;'g'
  1156  0B50  345F               	retlw	95	;'_'
  1157  0B51  3463               	retlw	99	;'c'
  1158  0B52  3468               	retlw	104	;'h'
  1159  0B53  3461               	retlw	97	;'a'
  1160  0B54  3472               	retlw	114	;'r'
  1161  0B55  345F               	retlw	95	;'_'
  1162  0B56  3469               	retlw	105	;'i'
  1163  0B57  346E               	retlw	110	;'n'
  1164  0B58  3466               	retlw	102	;'f'
  1165  0B59  346F               	retlw	111	;'o'
  1166  0B5A  345F               	retlw	95	;'_'
  1167  0B5B  3469               	retlw	105	;'i'
  1168  0B5C  346E               	retlw	110	;'n'
  1169  0B5D  3464               	retlw	100	;'d'
  1170  0B5E  3465               	retlw	101	;'e'
  1171  0B5F  3478               	retlw	120	;'x'
  1172  0B60  3420               	retlw	32	;' '
  1173  0B61  343D               	retlw	61	;'='
  1174  0B62  3420               	retlw	32	;' '
  1175  0B63  3428               	retlw	40	;'('
  1176  0B64  3425               	retlw	37	;'%'
  1177  0B65  3464               	retlw	100	;'d'
  1178  0B66  3429               	retlw	41	;')'
  1179  0B67  342C               	retlw	44	;','
  1180  0B68  3420               	retlw	32	;' '
  1181  0B69  346E               	retlw	110	;'n'
  1182  0B6A  3475               	retlw	117	;'u'
  1183  0B6B  346D               	retlw	109	;'m'
  1184  0B6C  3420               	retlw	32	;' '
  1185  0B6D  343D               	retlw	61	;'='
  1186  0B6E  3420               	retlw	32	;' '
  1187  0B6F  3425               	retlw	37	;'%'
  1188  0B70  3464               	retlw	100	;'d'
  1189  0B71  340A               	retlw	10
  1190  0B72  3400               	retlw	0
  1191  0B73                     STR_48:	
  1192  0B73  3474               	retlw	116	;'t'
  1193  0B74  3465               	retlw	101	;'e'
  1194  0B75  346D               	retlw	109	;'m'
  1195  0B76  3470               	retlw	112	;'p'
  1196  0B77  345F               	retlw	95	;'_'
  1197  0B78  3468               	retlw	104	;'h'
  1198  0B79  346F               	retlw	111	;'o'
  1199  0B7A  346C               	retlw	108	;'l'
  1200  0B7B  3465               	retlw	101	;'e'
  1201  0B7C  3428               	retlw	40	;'('
  1202  0B7D  3425               	retlw	37	;'%'
  1203  0B7E  3464               	retlw	100	;'d'
  1204  0B7F  3429               	retlw	41	;')'
  1205  0B80  3420               	retlw	32	;' '
  1206  0B81  343C               	retlw	60	;'<'
  1207  0B82  3420               	retlw	32	;' '
  1208  0B83  3474               	retlw	116	;'t'
  1209  0B84  3465               	retlw	101	;'e'
  1210  0B85  346D               	retlw	109	;'m'
  1211  0B86  3470               	retlw	112	;'p'
  1212  0B87  345F               	retlw	95	;'_'
  1213  0B88  3470               	retlw	112	;'p'
  1214  0B89  3472               	retlw	114	;'r'
  1215  0B8A  3465               	retlw	101	;'e'
  1216  0B8B  345F               	retlw	95	;'_'
  1217  0B8C  3468               	retlw	104	;'h'
  1218  0B8D  346F               	retlw	111	;'o'
  1219  0B8E  346C               	retlw	108	;'l'
  1220  0B8F  3465               	retlw	101	;'e'
  1221  0B90  3428               	retlw	40	;'('
  1222  0B91  3425               	retlw	37	;'%'
  1223  0B92  3464               	retlw	100	;'d'
  1224  0B93  3429               	retlw	41	;')'
  1225  0B94  340A               	retlw	10
  1226  0B95  3400               	retlw	0
  1227  0B96                     STR_46:	
  1228  0B96  3474               	retlw	116	;'t'
  1229  0B97  3465               	retlw	101	;'e'
  1230  0B98  346D               	retlw	109	;'m'
  1231  0B99  3470               	retlw	112	;'p'
  1232  0B9A  345F               	retlw	95	;'_'
  1233  0B9B  3468               	retlw	104	;'h'
  1234  0B9C  3469               	retlw	105	;'i'
  1235  0B9D  3467               	retlw	103	;'g'
  1236  0B9E  3468               	retlw	104	;'h'
  1237  0B9F  3428               	retlw	40	;'('
  1238  0BA0  3425               	retlw	37	;'%'
  1239  0BA1  3464               	retlw	100	;'d'
  1240  0BA2  3429               	retlw	41	;')'
  1241  0BA3  3420               	retlw	32	;' '
  1242  0BA4  343C               	retlw	60	;'<'
  1243  0BA5  3420               	retlw	32	;' '
  1244  0BA6  3474               	retlw	116	;'t'
  1245  0BA7  3465               	retlw	101	;'e'
  1246  0BA8  346D               	retlw	109	;'m'
  1247  0BA9  3470               	retlw	112	;'p'
  1248  0BAA  345F               	retlw	95	;'_'
  1249  0BAB  3470               	retlw	112	;'p'
  1250  0BAC  3472               	retlw	114	;'r'
  1251  0BAD  3465               	retlw	101	;'e'
  1252  0BAE  345F               	retlw	95	;'_'
  1253  0BAF  3468               	retlw	104	;'h'
  1254  0BB0  3469               	retlw	105	;'i'
  1255  0BB1  3467               	retlw	103	;'g'
  1256  0BB2  3468               	retlw	104	;'h'
  1257  0BB3  3428               	retlw	40	;'('
  1258  0BB4  3425               	retlw	37	;'%'
  1259  0BB5  3464               	retlw	100	;'d'
  1260  0BB6  3429               	retlw	41	;')'
  1261  0BB7  340A               	retlw	10
  1262  0BB8  3400               	retlw	0
  1263  0BB9                     STR_44:	
  1264  0BB9  3474               	retlw	116	;'t'
  1265  0BBA  3465               	retlw	101	;'e'
  1266  0BBB  346D               	retlw	109	;'m'
  1267  0BBC  3470               	retlw	112	;'p'
  1268  0BBD  345F               	retlw	95	;'_'
  1269  0BBE  3472               	retlw	114	;'r'
  1270  0BBF  3469               	retlw	105	;'i'
  1271  0BC0  3473               	retlw	115	;'s'
  1272  0BC1  346B               	retlw	107	;'k'
  1273  0BC2  3428               	retlw	40	;'('
  1274  0BC3  3425               	retlw	37	;'%'
  1275  0BC4  3464               	retlw	100	;'d'
  1276  0BC5  3429               	retlw	41	;')'
  1277  0BC6  3420               	retlw	32	;' '
  1278  0BC7  343C               	retlw	60	;'<'
  1279  0BC8  3420               	retlw	32	;' '
  1280  0BC9  3474               	retlw	116	;'t'
  1281  0BCA  3465               	retlw	101	;'e'
  1282  0BCB  346D               	retlw	109	;'m'
  1283  0BCC  3470               	retlw	112	;'p'
  1284  0BCD  345F               	retlw	95	;'_'
  1285  0BCE  3470               	retlw	112	;'p'
  1286  0BCF  3472               	retlw	114	;'r'
  1287  0BD0  3465               	retlw	101	;'e'
  1288  0BD1  345F               	retlw	95	;'_'
  1289  0BD2  3472               	retlw	114	;'r'
  1290  0BD3  3469               	retlw	105	;'i'
  1291  0BD4  3473               	retlw	115	;'s'
  1292  0BD5  346B               	retlw	107	;'k'
  1293  0BD6  3428               	retlw	40	;'('
  1294  0BD7  3425               	retlw	37	;'%'
  1295  0BD8  3464               	retlw	100	;'d'
  1296  0BD9  3429               	retlw	41	;')'
  1297  0BDA  340A               	retlw	10
  1298  0BDB  3400               	retlw	0
  1299  0BDC                     STR_37:	
  1300  0BDC  3463               	retlw	99	;'c'
  1301  0BDD  346F               	retlw	111	;'o'
  1302  0BDE  346C               	retlw	108	;'l'
  1303  0BDF  3420               	retlw	32	;' '
  1304  0BE0  343D               	retlw	61	;'='
  1305  0BE1  3420               	retlw	32	;' '
  1306  0BE2  3425               	retlw	37	;'%'
  1307  0BE3  3464               	retlw	100	;'d'
  1308  0BE4  342C               	retlw	44	;','
  1309  0BE5  3420               	retlw	32	;' '
  1310  0BE6  3473               	retlw	115	;'s'
  1311  0BE7  3474               	retlw	116	;'t'
  1312  0BE8  3461               	retlw	97	;'a'
  1313  0BE9  3472               	retlw	114	;'r'
  1314  0BEA  3474               	retlw	116	;'t'
  1315  0BEB  3420               	retlw	32	;' '
  1316  0BEC  343D               	retlw	61	;'='
  1317  0BED  3420               	retlw	32	;' '
  1318  0BEE  3425               	retlw	37	;'%'
  1319  0BEF  3464               	retlw	100	;'d'
  1320  0BF0  342C               	retlw	44	;','
  1321  0BF1  3420               	retlw	32	;' '
  1322  0BF2  3473               	retlw	115	;'s'
  1323  0BF3  3474               	retlw	116	;'t'
  1324  0BF4  346F               	retlw	111	;'o'
  1325  0BF5  3470               	retlw	112	;'p'
  1326  0BF6  3420               	retlw	32	;' '
  1327  0BF7  343D               	retlw	61	;'='
  1328  0BF8  3420               	retlw	32	;' '
  1329  0BF9  3425               	retlw	37	;'%'
  1330  0BFA  3464               	retlw	100	;'d'
  1331  0BFB  340A               	retlw	10
  1332  0BFC  3400               	retlw	0
  1333  0BFD                     STR_6:	
  1334  0BFD  3470               	retlw	112	;'p'
  1335  0BFE  3472               	retlw	114	;'r'
  1336  0BFF  3469               	retlw	105	;'i'
  1337  0C00  346E               	retlw	110	;'n'
  1338  0C01  3474               	retlw	116	;'t'
  1339  0C02  3466               	retlw	102	;'f'
  1340  0C03  345F               	retlw	95	;'_'
  1341  0C04  3461               	retlw	97	;'a'
  1342  0C05  346C               	retlw	108	;'l'
  1343  0C06  346C               	retlw	108	;'l'
  1344  0C07  345F               	retlw	95	;'_'
  1345  0C08  344D               	retlw	77	;'M'
  1346  0C09  3441               	retlw	65	;'A'
  1347  0C0A  3454               	retlw	84	;'T'
  1348  0C0B  3452               	retlw	82	;'R'
  1349  0C0C  3449               	retlw	73	;'I'
  1350  0C0D  3458               	retlw	88	;'X'
  1351  0C0E  3434               	retlw	52	;'4'
  1352  0C0F  3434               	retlw	52	;'4'
  1353  0C10  3420               	retlw	32	;' '
  1354  0C11  3473               	retlw	115	;'s'
  1355  0C12  3469               	retlw	105	;'i'
  1356  0C13  347A               	retlw	122	;'z'
  1357  0C14  3465               	retlw	101	;'e'
  1358  0C15  3420               	retlw	32	;' '
  1359  0C16  343D               	retlw	61	;'='
  1360  0C17  3420               	retlw	32	;' '
  1361  0C18  3425               	retlw	37	;'%'
  1362  0C19  3464               	retlw	100	;'d'
  1363  0C1A  340D               	retlw	13
  1364  0C1B  340A               	retlw	10
  1365  0C1C  3400               	retlw	0
  1366  0C1D                     STR_1:	
  1367  0C1D  343C               	retlw	60	;'<'
  1368  0C1E  343C               	retlw	60	;'<'
  1369  0C1F  343C               	retlw	60	;'<'
  1370  0C20  343C               	retlw	60	;'<'
  1371  0C21  343C               	retlw	60	;'<'
  1372  0C22  343C               	retlw	60	;'<'
  1373  0C23  343C               	retlw	60	;'<'
  1374  0C24  343C               	retlw	60	;'<'
  1375  0C25  343C               	retlw	60	;'<'
  1376  0C26  343C               	retlw	60	;'<'
  1377  0C27  343C               	retlw	60	;'<'
  1378  0C28  343C               	retlw	60	;'<'
  1379  0C29  343C               	retlw	60	;'<'
  1380  0C2A  343C               	retlw	60	;'<'
  1381  0C2B  343C               	retlw	60	;'<'
  1382  0C2C  343C               	retlw	60	;'<'
  1383  0C2D  343C               	retlw	60	;'<'
  1384  0C2E  343C               	retlw	60	;'<'
  1385  0C2F  343C               	retlw	60	;'<'
  1386  0C30  343C               	retlw	60	;'<'
  1387  0C31  344D               	retlw	77	;'M'
  1388  0C32  3441               	retlw	65	;'A'
  1389  0C33  3454               	retlw	84	;'T'
  1390  0C34  3452               	retlw	82	;'R'
  1391  0C35  3449               	retlw	73	;'I'
  1392  0C36  3458               	retlw	88	;'X'
  1393  0C37  3434               	retlw	52	;'4'
  1394  0C38  3434               	retlw	52	;'4'
  1395  0C39  340D               	retlw	13
  1396  0C3A  340A               	retlw	10
  1397  0C3B  3400               	retlw	0
  1398  0C3C                     STR_13:	
  1399  0C3C  343C               	retlw	60	;'<'
  1400  0C3D  343C               	retlw	60	;'<'
  1401  0C3E  343C               	retlw	60	;'<'
  1402  0C3F  343C               	retlw	60	;'<'
  1403  0C40  343C               	retlw	60	;'<'
  1404  0C41  343C               	retlw	60	;'<'
  1405  0C42  343C               	retlw	60	;'<'
  1406  0C43  343C               	retlw	60	;'<'
  1407  0C44  343C               	retlw	60	;'<'
  1408  0C45  343C               	retlw	60	;'<'
  1409  0C46  343C               	retlw	60	;'<'
  1410  0C47  343C               	retlw	60	;'<'
  1411  0C48  343C               	retlw	60	;'<'
  1412  0C49  343C               	retlw	60	;'<'
  1413  0C4A  343C               	retlw	60	;'<'
  1414  0C4B  343C               	retlw	60	;'<'
  1415  0C4C  343C               	retlw	60	;'<'
  1416  0C4D  343C               	retlw	60	;'<'
  1417  0C4E  343C               	retlw	60	;'<'
  1418  0C4F  343C               	retlw	60	;'<'
  1419  0C50  344D               	retlw	77	;'M'
  1420  0C51  3441               	retlw	65	;'A'
  1421  0C52  3454               	retlw	84	;'T'
  1422  0C53  3452               	retlw	82	;'R'
  1423  0C54  3449               	retlw	73	;'I'
  1424  0C55  3458               	retlw	88	;'X'
  1425  0C56  3438               	retlw	56	;'8'
  1426  0C57  3438               	retlw	56	;'8'
  1427  0C58  340D               	retlw	13
  1428  0C59  340A               	retlw	10
  1429  0C5A  3400               	retlw	0
  1430  0C5B                     STR_24:	
  1431  0C5B  346E               	retlw	110	;'n'
  1432  0C5C  346F               	retlw	111	;'o'
  1433  0C5D  3474               	retlw	116	;'t'
  1434  0C5E  3420               	retlw	32	;' '
  1435  0C5F  3476               	retlw	118	;'v'
  1436  0C60  3461               	retlw	97	;'a'
  1437  0C61  346C               	retlw	108	;'l'
  1438  0C62  3469               	retlw	105	;'i'
  1439  0C63  3464               	retlw	100	;'d'
  1440  0C64  3431               	retlw	49	;'1'
  1441  0C65  3420               	retlw	32	;' '
  1442  0C66  3472               	retlw	114	;'r'
  1443  0C67  346F               	retlw	111	;'o'
  1444  0C68  3477               	retlw	119	;'w'
  1445  0C69  3420               	retlw	32	;' '
  1446  0C6A  343D               	retlw	61	;'='
  1447  0C6B  3420               	retlw	32	;' '
  1448  0C6C  3425               	retlw	37	;'%'
  1449  0C6D  3464               	retlw	100	;'d'
  1450  0C6E  342C               	retlw	44	;','
  1451  0C6F  3420               	retlw	32	;' '
  1452  0C70  3463               	retlw	99	;'c'
  1453  0C71  346F               	retlw	111	;'o'
  1454  0C72  346C               	retlw	108	;'l'
  1455  0C73  3420               	retlw	32	;' '
  1456  0C74  343D               	retlw	61	;'='
  1457  0C75  3420               	retlw	32	;' '
  1458  0C76  3425               	retlw	37	;'%'
  1459  0C77  3464               	retlw	100	;'d'
  1460  0C78  340A               	retlw	10
  1461  0C79  3400               	retlw	0
  1462  0C7A                     STR_25:	
  1463  0C7A  346E               	retlw	110	;'n'
  1464  0C7B  346F               	retlw	111	;'o'
  1465  0C7C  3474               	retlw	116	;'t'
  1466  0C7D  3420               	retlw	32	;' '
  1467  0C7E  3476               	retlw	118	;'v'
  1468  0C7F  3461               	retlw	97	;'a'
  1469  0C80  346C               	retlw	108	;'l'
  1470  0C81  3469               	retlw	105	;'i'
  1471  0C82  3464               	retlw	100	;'d'
  1472  0C83  3432               	retlw	50	;'2'
  1473  0C84  3420               	retlw	32	;' '
  1474  0C85  3472               	retlw	114	;'r'
  1475  0C86  346F               	retlw	111	;'o'
  1476  0C87  3477               	retlw	119	;'w'
  1477  0C88  3420               	retlw	32	;' '
  1478  0C89  343D               	retlw	61	;'='
  1479  0C8A  3420               	retlw	32	;' '
  1480  0C8B  3425               	retlw	37	;'%'
  1481  0C8C  3464               	retlw	100	;'d'
  1482  0C8D  342C               	retlw	44	;','
  1483  0C8E  3420               	retlw	32	;' '
  1484  0C8F  3463               	retlw	99	;'c'
  1485  0C90  346F               	retlw	111	;'o'
  1486  0C91  346C               	retlw	108	;'l'
  1487  0C92  3420               	retlw	32	;' '
  1488  0C93  343D               	retlw	61	;'='
  1489  0C94  3420               	retlw	32	;' '
  1490  0C95  3425               	retlw	37	;'%'
  1491  0C96  3464               	retlw	100	;'d'
  1492  0C97  340A               	retlw	10
  1493  0C98  3400               	retlw	0
  1494  0C99                     STR_26:	
  1495  0C99  346E               	retlw	110	;'n'
  1496  0C9A  346F               	retlw	111	;'o'
  1497  0C9B  3474               	retlw	116	;'t'
  1498  0C9C  3420               	retlw	32	;' '
  1499  0C9D  3476               	retlw	118	;'v'
  1500  0C9E  3461               	retlw	97	;'a'
  1501  0C9F  346C               	retlw	108	;'l'
  1502  0CA0  3469               	retlw	105	;'i'
  1503  0CA1  3464               	retlw	100	;'d'
  1504  0CA2  3433               	retlw	51	;'3'
  1505  0CA3  3420               	retlw	32	;' '
  1506  0CA4  3472               	retlw	114	;'r'
  1507  0CA5  346F               	retlw	111	;'o'
  1508  0CA6  3477               	retlw	119	;'w'
  1509  0CA7  3420               	retlw	32	;' '
  1510  0CA8  343D               	retlw	61	;'='
  1511  0CA9  3420               	retlw	32	;' '
  1512  0CAA  3425               	retlw	37	;'%'
  1513  0CAB  3464               	retlw	100	;'d'
  1514  0CAC  342C               	retlw	44	;','
  1515  0CAD  3420               	retlw	32	;' '
  1516  0CAE  3463               	retlw	99	;'c'
  1517  0CAF  346F               	retlw	111	;'o'
  1518  0CB0  346C               	retlw	108	;'l'
  1519  0CB1  3420               	retlw	32	;' '
  1520  0CB2  343D               	retlw	61	;'='
  1521  0CB3  3420               	retlw	32	;' '
  1522  0CB4  3425               	retlw	37	;'%'
  1523  0CB5  3464               	retlw	100	;'d'
  1524  0CB6  340A               	retlw	10
  1525  0CB7  3400               	retlw	0
  1526  0CB8                     STR_18:	
  1527  0CB8  3464               	retlw	100	;'d'
  1528  0CB9  3465               	retlw	101	;'e'
  1529  0CBA  346C               	retlw	108	;'l'
  1530  0CBB  3465               	retlw	101	;'e'
  1531  0CBC  3474               	retlw	116	;'t'
  1532  0CBD  3465               	retlw	101	;'e'
  1533  0CBE  345F               	retlw	95	;'_'
  1534  0CBF  346D               	retlw	109	;'m'
  1535  0CC0  3461               	retlw	97	;'a'
  1536  0CC1  3474               	retlw	116	;'t'
  1537  0CC2  3472               	retlw	114	;'r'
  1538  0CC3  3469               	retlw	105	;'i'
  1539  0CC4  3478               	retlw	120	;'x'
  1540  0CC5  3420               	retlw	32	;' '
  1541  0CC6  3463               	retlw	99	;'c'
  1542  0CC7  346F               	retlw	111	;'o'
  1543  0CC8  3475               	retlw	117	;'u'
  1544  0CC9  346E               	retlw	110	;'n'
  1545  0CCA  3474               	retlw	116	;'t'
  1546  0CCB  3420               	retlw	32	;' '
  1547  0CCC  343D               	retlw	61	;'='
  1548  0CCD  3420               	retlw	32	;' '
  1549  0CCE  3425               	retlw	37	;'%'
  1550  0CCF  3464               	retlw	100	;'d'
  1551  0CD0  340A               	retlw	10
  1552  0CD1  3400               	retlw	0
  1553  0CD2                     STR_30:	
  1554  0CD2  3466               	retlw	102	;'f'
  1555  0CD3  3461               	retlw	97	;'a'
  1556  0CD4  346C               	retlw	108	;'l'
  1557  0CD5  346C               	retlw	108	;'l'
  1558  0CD6  345F               	retlw	95	;'_'
  1559  0CD7  346F               	retlw	111	;'o'
  1560  0CD8  3466               	retlw	102	;'f'
  1561  0CD9  3466               	retlw	102	;'f'
  1562  0CDA  3431               	retlw	49	;'1'
  1563  0CDB  3420               	retlw	32	;' '
  1564  0CDC  3478               	retlw	120	;'x'
  1565  0CDD  3420               	retlw	32	;' '
  1566  0CDE  343D               	retlw	61	;'='
  1567  0CDF  3420               	retlw	32	;' '
  1568  0CE0  3425               	retlw	37	;'%'
  1569  0CE1  3464               	retlw	100	;'d'
  1570  0CE2  342C               	retlw	44	;','
  1571  0CE3  3420               	retlw	32	;' '
  1572  0CE4  3479               	retlw	121	;'y'
  1573  0CE5  3420               	retlw	32	;' '
  1574  0CE6  343D               	retlw	61	;'='
  1575  0CE7  3420               	retlw	32	;' '
  1576  0CE8  3425               	retlw	37	;'%'
  1577  0CE9  3464               	retlw	100	;'d'
  1578  0CEA  340A               	retlw	10
  1579  0CEB  3400               	retlw	0
  1580  0CEC                     STR_31:	
  1581  0CEC  3466               	retlw	102	;'f'
  1582  0CED  3461               	retlw	97	;'a'
  1583  0CEE  346C               	retlw	108	;'l'
  1584  0CEF  346C               	retlw	108	;'l'
  1585  0CF0  345F               	retlw	95	;'_'
  1586  0CF1  346F               	retlw	111	;'o'
  1587  0CF2  3466               	retlw	102	;'f'
  1588  0CF3  3466               	retlw	102	;'f'
  1589  0CF4  3432               	retlw	50	;'2'
  1590  0CF5  3420               	retlw	32	;' '
  1591  0CF6  3478               	retlw	120	;'x'
  1592  0CF7  3420               	retlw	32	;' '
  1593  0CF8  343D               	retlw	61	;'='
  1594  0CF9  3420               	retlw	32	;' '
  1595  0CFA  3425               	retlw	37	;'%'
  1596  0CFB  3464               	retlw	100	;'d'
  1597  0CFC  342C               	retlw	44	;','
  1598  0CFD  3420               	retlw	32	;' '
  1599  0CFE  3479               	retlw	121	;'y'
  1600  0CFF  3420               	retlw	32	;' '
  1601  0D00  343D               	retlw	61	;'='
  1602  0D01  3420               	retlw	32	;' '
  1603  0D02  3425               	retlw	37	;'%'
  1604  0D03  3464               	retlw	100	;'d'
  1605  0D04  340A               	retlw	10
  1606  0D05  3400               	retlw	0
  1607  0D06                     STR_20:	
  1608  0D06  3468               	retlw	104	;'h'
  1609  0D07  3469               	retlw	105	;'i'
  1610  0D08  3474               	retlw	116	;'t'
  1611  0D09  3431               	retlw	49	;'1'
  1612  0D0A  3420               	retlw	32	;' '
  1613  0D0B  3472               	retlw	114	;'r'
  1614  0D0C  346F               	retlw	111	;'o'
  1615  0D0D  3477               	retlw	119	;'w'
  1616  0D0E  3420               	retlw	32	;' '
  1617  0D0F  343D               	retlw	61	;'='
  1618  0D10  3420               	retlw	32	;' '
  1619  0D11  3425               	retlw	37	;'%'
  1620  0D12  3464               	retlw	100	;'d'
  1621  0D13  342C               	retlw	44	;','
  1622  0D14  3420               	retlw	32	;' '
  1623  0D15  3463               	retlw	99	;'c'
  1624  0D16  346F               	retlw	111	;'o'
  1625  0D17  346C               	retlw	108	;'l'
  1626  0D18  3420               	retlw	32	;' '
  1627  0D19  343D               	retlw	61	;'='
  1628  0D1A  3420               	retlw	32	;' '
  1629  0D1B  3425               	retlw	37	;'%'
  1630  0D1C  3464               	retlw	100	;'d'
  1631  0D1D  340A               	retlw	10
  1632  0D1E  3400               	retlw	0
  1633  0D1F                     STR_21:	
  1634  0D1F  3468               	retlw	104	;'h'
  1635  0D20  3469               	retlw	105	;'i'
  1636  0D21  3474               	retlw	116	;'t'
  1637  0D22  3432               	retlw	50	;'2'
  1638  0D23  3420               	retlw	32	;' '
  1639  0D24  3472               	retlw	114	;'r'
  1640  0D25  346F               	retlw	111	;'o'
  1641  0D26  3477               	retlw	119	;'w'
  1642  0D27  3420               	retlw	32	;' '
  1643  0D28  343D               	retlw	61	;'='
  1644  0D29  3420               	retlw	32	;' '
  1645  0D2A  3425               	retlw	37	;'%'
  1646  0D2B  3464               	retlw	100	;'d'
  1647  0D2C  342C               	retlw	44	;','
  1648  0D2D  3420               	retlw	32	;' '
  1649  0D2E  3463               	retlw	99	;'c'
  1650  0D2F  346F               	retlw	111	;'o'
  1651  0D30  346C               	retlw	108	;'l'
  1652  0D31  3420               	retlw	32	;' '
  1653  0D32  343D               	retlw	61	;'='
  1654  0D33  3420               	retlw	32	;' '
  1655  0D34  3425               	retlw	37	;'%'
  1656  0D35  3464               	retlw	100	;'d'
  1657  0D36  340A               	retlw	10
  1658  0D37  3400               	retlw	0
  1659  0D38                     STR_57:	
  1660  0D38  3467               	retlw	103	;'g'
  1661  0D39  345F               	retlw	95	;'_'
  1662  0D3A  3463               	retlw	99	;'c'
  1663  0D3B  3468               	retlw	104	;'h'
  1664  0D3C  3461               	retlw	97	;'a'
  1665  0D3D  3472               	retlw	114	;'r'
  1666  0D3E  345F               	retlw	95	;'_'
  1667  0D3F  3469               	retlw	105	;'i'
  1668  0D40  346E               	retlw	110	;'n'
  1669  0D41  3466               	retlw	102	;'f'
  1670  0D42  346F               	retlw	111	;'o'
  1671  0D43  345F               	retlw	95	;'_'
  1672  0D44  3469               	retlw	105	;'i'
  1673  0D45  346E               	retlw	110	;'n'
  1674  0D46  3464               	retlw	100	;'d'
  1675  0D47  3465               	retlw	101	;'e'
  1676  0D48  3478               	retlw	120	;'x'
  1677  0D49  3420               	retlw	32	;' '
  1678  0D4A  343D               	retlw	61	;'='
  1679  0D4B  3420               	retlw	32	;' '
  1680  0D4C  3425               	retlw	37	;'%'
  1681  0D4D  3464               	retlw	100	;'d'
  1682  0D4E  340A               	retlw	10
  1683  0D4F  3400               	retlw	0
  1684  0D50                     STR_8:	
  1685  0D50  343C               	retlw	60	;'<'
  1686  0D51  343C               	retlw	60	;'<'
  1687  0D52  343C               	retlw	60	;'<'
  1688  0D53  343C               	retlw	60	;'<'
  1689  0D54  343C               	retlw	60	;'<'
  1690  0D55  343C               	retlw	60	;'<'
  1691  0D56  343C               	retlw	60	;'<'
  1692  0D57  343C               	retlw	60	;'<'
  1693  0D58  343C               	retlw	60	;'<'
  1694  0D59  343C               	retlw	60	;'<'
  1695  0D5A  343C               	retlw	60	;'<'
  1696  0D5B  343C               	retlw	60	;'<'
  1697  0D5C  343C               	retlw	60	;'<'
  1698  0D5D  343C               	retlw	60	;'<'
  1699  0D5E  343C               	retlw	60	;'<'
  1700  0D5F  343C               	retlw	60	;'<'
  1701  0D60  343C               	retlw	60	;'<'
  1702  0D61  343C               	retlw	60	;'<'
  1703  0D62  343C               	retlw	60	;'<'
  1704  0D63  343C               	retlw	60	;'<'
  1705  0D64  340D               	retlw	13
  1706  0D65  340A               	retlw	10
  1707  0D66  3400               	retlw	0
  1708  0D67                     STR_5:	
  1709  0D67  343E               	retlw	62	;'>'
  1710  0D68  343E               	retlw	62	;'>'
  1711  0D69  343E               	retlw	62	;'>'
  1712  0D6A  343E               	retlw	62	;'>'
  1713  0D6B  343E               	retlw	62	;'>'
  1714  0D6C  343E               	retlw	62	;'>'
  1715  0D6D  343E               	retlw	62	;'>'
  1716  0D6E  343E               	retlw	62	;'>'
  1717  0D6F  343E               	retlw	62	;'>'
  1718  0D70  343E               	retlw	62	;'>'
  1719  0D71  343E               	retlw	62	;'>'
  1720  0D72  343E               	retlw	62	;'>'
  1721  0D73  343E               	retlw	62	;'>'
  1722  0D74  343E               	retlw	62	;'>'
  1723  0D75  343E               	retlw	62	;'>'
  1724  0D76  343E               	retlw	62	;'>'
  1725  0D77  343E               	retlw	62	;'>'
  1726  0D78  343E               	retlw	62	;'>'
  1727  0D79  343E               	retlw	62	;'>'
  1728  0D7A  343E               	retlw	62	;'>'
  1729  0D7B  340D               	retlw	13
  1730  0D7C  340A               	retlw	10
  1731  0D7D  3400               	retlw	0
  1732  0D7E                     STR_49:	
  1733  0D7E  3457               	retlw	87	;'W'
  1734  0D7F  3441               	retlw	65	;'A'
  1735  0D80  3452               	retlw	82	;'R'
  1736  0D81  344E               	retlw	78	;'N'
  1737  0D82  3449               	retlw	73	;'I'
  1738  0D83  344E               	retlw	78	;'N'
  1739  0D84  3447               	retlw	71	;'G'
  1740  0D85  3420               	retlw	32	;' '
  1741  0D86  3468               	retlw	104	;'h'
  1742  0D87  3465               	retlw	101	;'e'
  1743  0D88  3469               	retlw	105	;'i'
  1744  0D89  3467               	retlw	103	;'g'
  1745  0D8A  3468               	retlw	104	;'h'
  1746  0D8B  3474               	retlw	116	;'t'
  1747  0D8C  3420               	retlw	32	;' '
  1748  0D8D  343E               	retlw	62	;'>'
  1749  0D8E  3420               	retlw	32	;' '
  1750  0D8F  3428               	retlw	40	;'('
  1751  0D90  3425               	retlw	37	;'%'
  1752  0D91  3464               	retlw	100	;'d'
  1753  0D92  3429               	retlw	41	;')'
  1754  0D93  340A               	retlw	10
  1755  0D94  3400               	retlw	0
  1756  0D95                     STR_29:	
  1757  0D95  3452               	retlw	82	;'R'
  1758  0D96  3449               	retlw	73	;'I'
  1759  0D97  3447               	retlw	71	;'G'
  1760  0D98  3448               	retlw	72	;'H'
  1761  0D99  3454               	retlw	84	;'T'
  1762  0D9A  345F               	retlw	95	;'_'
  1763  0D9B  344F               	retlw	79	;'O'
  1764  0D9C  3456               	retlw	86	;'V'
  1765  0D9D  3445               	retlw	69	;'E'
  1766  0D9E  3452               	retlw	82	;'R'
  1767  0D9F  345F               	retlw	95	;'_'
  1768  0DA0  3442               	retlw	66	;'B'
  1769  0DA1  344F               	retlw	79	;'O'
  1770  0DA2  3455               	retlw	85	;'U'
  1771  0DA3  344E               	retlw	78	;'N'
  1772  0DA4  3444               	retlw	68	;'D'
  1773  0DA5  3441               	retlw	65	;'A'
  1774  0DA6  3452               	retlw	82	;'R'
  1775  0DA7  3459               	retlw	89	;'Y'
  1776  0DA8  340D               	retlw	13
  1777  0DA9  340A               	retlw	10
  1778  0DAA  3400               	retlw	0
  1779  0DAB                     STR_35:	
  1780  0DAB  3467               	retlw	103	;'g'
  1781  0DAC  3465               	retlw	101	;'e'
  1782  0DAD  3474               	retlw	116	;'t'
  1783  0DAE  345F               	retlw	95	;'_'
  1784  0DAF  3468               	retlw	104	;'h'
  1785  0DB0  3469               	retlw	105	;'i'
  1786  0DB1  3467               	retlw	103	;'g'
  1787  0DB2  3468               	retlw	104	;'h'
  1788  0DB3  3420               	retlw	32	;' '
  1789  0DB4  3468               	retlw	104	;'h'
  1790  0DB5  3465               	retlw	101	;'e'
  1791  0DB6  3469               	retlw	105	;'i'
  1792  0DB7  3467               	retlw	103	;'g'
  1793  0DB8  3468               	retlw	104	;'h'
  1794  0DB9  3474               	retlw	116	;'t'
  1795  0DBA  3420               	retlw	32	;' '
  1796  0DBB  343D               	retlw	61	;'='
  1797  0DBC  3420               	retlw	32	;' '
  1798  0DBD  3425               	retlw	37	;'%'
  1799  0DBE  3464               	retlw	100	;'d'
  1800  0DBF  340A               	retlw	10
  1801  0DC0  3400               	retlw	0
  1802  0DC1                     STR_28:	
  1803  0DC1  344C               	retlw	76	;'L'
  1804  0DC2  3445               	retlw	69	;'E'
  1805  0DC3  3446               	retlw	70	;'F'
  1806  0DC4  3454               	retlw	84	;'T'
  1807  0DC5  345F               	retlw	95	;'_'
  1808  0DC6  344F               	retlw	79	;'O'
  1809  0DC7  3456               	retlw	86	;'V'
  1810  0DC8  3445               	retlw	69	;'E'
  1811  0DC9  3452               	retlw	82	;'R'
  1812  0DCA  345F               	retlw	95	;'_'
  1813  0DCB  3442               	retlw	66	;'B'
  1814  0DCC  344F               	retlw	79	;'O'
  1815  0DCD  3455               	retlw	85	;'U'
  1816  0DCE  344E               	retlw	78	;'N'
  1817  0DCF  3444               	retlw	68	;'D'
  1818  0DD0  3441               	retlw	65	;'A'
  1819  0DD1  3452               	retlw	82	;'R'
  1820  0DD2  3459               	retlw	89	;'Y'
  1821  0DD3  340D               	retlw	13
  1822  0DD4  340A               	retlw	10
  1823  0DD5  3400               	retlw	0
  1824  0DD6                     STR_38:	
  1825  0DD6  346E               	retlw	110	;'n'
  1826  0DD7  3475               	retlw	117	;'u'
  1827  0DD8  346D               	retlw	109	;'m'
  1828  0DD9  345F               	retlw	95	;'_'
  1829  0DDA  3468               	retlw	104	;'h'
  1830  0DDB  346F               	retlw	111	;'o'
  1831  0DDC  346C               	retlw	108	;'l'
  1832  0DDD  3465               	retlw	101	;'e'
  1833  0DDE  3420               	retlw	32	;' '
  1834  0DDF  343D               	retlw	61	;'='
  1835  0DE0  3420               	retlw	32	;' '
  1836  0DE1  3428               	retlw	40	;'('
  1837  0DE2  3425               	retlw	37	;'%'
  1838  0DE3  3464               	retlw	100	;'d'
  1839  0DE4  3429               	retlw	41	;')'
  1840  0DE5  340A               	retlw	10
  1841  0DE6  3400               	retlw	0
  1842  0DE7                     STR_34:	
  1843  0DE7  3472               	retlw	114	;'r'
  1844  0DE8  3469               	retlw	105	;'i'
  1845  0DE9  3467               	retlw	103	;'g'
  1846  0DEA  3468               	retlw	104	;'h'
  1847  0DEB  3474               	retlw	116	;'t'
  1848  0DEC  345F               	retlw	95	;'_'
  1849  0DED  346D               	retlw	109	;'m'
  1850  0DEE  346F               	retlw	111	;'o'
  1851  0DEF  3473               	retlw	115	;'s'
  1852  0DF0  3474               	retlw	116	;'t'
  1853  0DF1  3420               	retlw	32	;' '
  1854  0DF2  343D               	retlw	61	;'='
  1855  0DF3  3420               	retlw	32	;' '
  1856  0DF4  3425               	retlw	37	;'%'
  1857  0DF5  3464               	retlw	100	;'d'
  1858  0DF6  340A               	retlw	10
  1859  0DF7  3400               	retlw	0
  1860  0DF8                     STR_42:	
  1861  0DF8  3468               	retlw	104	;'h'
  1862  0DF9  3465               	retlw	101	;'e'
  1863  0DFA  3469               	retlw	105	;'i'
  1864  0DFB  3467               	retlw	103	;'g'
  1865  0DFC  3468               	retlw	104	;'h'
  1866  0DFD  3474               	retlw	116	;'t'
  1867  0DFE  3420               	retlw	32	;' '
  1868  0DFF  343C               	retlw	60	;'<'
  1869  0E00  343D               	retlw	61	;'='
  1870  0E01  3420               	retlw	32	;' '
  1871  0E02  3428               	retlw	40	;'('
  1872  0E03  3425               	retlw	37	;'%'
  1873  0E04  3464               	retlw	100	;'d'
  1874  0E05  3429               	retlw	41	;')'
  1875  0E06  340A               	retlw	10
  1876  0E07  3400               	retlw	0
  1877  0E08                     STR_33:	
  1878  0E08  346C               	retlw	108	;'l'
  1879  0E09  3465               	retlw	101	;'e'
  1880  0E0A  3466               	retlw	102	;'f'
  1881  0E0B  3474               	retlw	116	;'t'
  1882  0E0C  345F               	retlw	95	;'_'
  1883  0E0D  346D               	retlw	109	;'m'
  1884  0E0E  346F               	retlw	111	;'o'
  1885  0E0F  3473               	retlw	115	;'s'
  1886  0E10  3474               	retlw	116	;'t'
  1887  0E11  3420               	retlw	32	;' '
  1888  0E12  343D               	retlw	61	;'='
  1889  0E13  3420               	retlw	32	;' '
  1890  0E14  3425               	retlw	37	;'%'
  1891  0E15  3464               	retlw	100	;'d'
  1892  0E16  340A               	retlw	10
  1893  0E17  3400               	retlw	0
  1894  0E18                     STR_56:	
  1895  0E18  3447               	retlw	71	;'G'
  1896  0E19  3441               	retlw	65	;'A'
  1897  0E1A  344D               	retlw	77	;'M'
  1898  0E1B  3445               	retlw	69	;'E'
  1899  0E1C  3420               	retlw	32	;' '
  1900  0E1D  344F               	retlw	79	;'O'
  1901  0E1E  3456               	retlw	86	;'V'
  1902  0E1F  3445               	retlw	69	;'E'
  1903  0E20  3452               	retlw	82	;'R'
  1904  0E21  3421               	retlw	33	;'!'
  1905  0E22  3421               	retlw	33	;'!'
  1906  0E23  3421               	retlw	33	;'!'
  1907  0E24  340D               	retlw	13
  1908  0E25  340A               	retlw	10
  1909  0E26  3400               	retlw	0
  1910  0E27                     STR_32:	
  1911  0E27  3472               	retlw	114	;'r'
  1912  0E28  3469               	retlw	105	;'i'
  1913  0E29  3473               	retlw	115	;'s'
  1914  0E2A  346B               	retlw	107	;'k'
  1915  0E2B  3420               	retlw	32	;' '
  1916  0E2C  343D               	retlw	61	;'='
  1917  0E2D  3420               	retlw	32	;' '
  1918  0E2E  3425               	retlw	37	;'%'
  1919  0E2F  3464               	retlw	100	;'d'
  1920  0E30  340A               	retlw	10
  1921  0E31  3400               	retlw	0
  1922  0E32                     STR_22:	
  1923  0E32  346E               	retlw	110	;'n'
  1924  0E33  346F               	retlw	111	;'o'
  1925  0E34  3474               	retlw	116	;'t'
  1926  0E35  3420               	retlw	32	;' '
  1927  0E36  3468               	retlw	104	;'h'
  1928  0E37  3469               	retlw	105	;'i'
  1929  0E38  3474               	retlw	116	;'t'
  1930  0E39  340D               	retlw	13
  1931  0E3A  340A               	retlw	10
  1932  0E3B  3400               	retlw	0
  1933  0E3C                     STR_27:	
  1934  0E3C  3476               	retlw	118	;'v'
  1935  0E3D  3461               	retlw	97	;'a'
  1936  0E3E  346C               	retlw	108	;'l'
  1937  0E3F  3469               	retlw	105	;'i'
  1938  0E40  3464               	retlw	100	;'d'
  1939  0E41  340D               	retlw	13
  1940  0E42  340A               	retlw	10
  1941  0E43  3400               	retlw	0
  1942  0E44                     STR_2:	
  1943  0E44  342A               	retlw	42	;'*'
  1944  0E45  3400               	retlw	0
  1945  0E46                     STR_3:	
  1946  0E46  345F               	retlw	95	;'_'
  1947  0E47  3400               	retlw	0
  1948  0E24                     
  1949                           ; #config settings
  1950  0000                     
  1951                           	psect	nvBANK0
  1952  0067                     __pnvBANK0:	
  1953  0067                     _UQEnd:	
  1954  0067                     	ds	1
  1955  0068                     _UQFront:	
  1956  0068                     	ds	1
  1957  000C                     _PIR1bits	set	12
  1958  001A                     _RCREG	set	26
  1959  0018                     _RCSTAbits	set	24
  1960  0019                     _TXREG	set	25
  1961  005F                     _GIE	set	95
  1962  005E                     _PEIE	set	94
  1963  0029                     _RA1	set	41
  1964  002A                     _RA2	set	42
  1965  0099                     _SPBRG	set	153
  1966  0085                     _TRISAbits	set	133
  1967  0098                     _TXSTAbits	set	152
  1968  0465                     _RCIE	set	1125
  1969  0188                     _ANSELbits	set	392
  1970                           
  1971                           	psect	cinit
  1972  07B4                     start_initialization:	
  1973  07B4                     __initialization:	
  1974                           
  1975                           ; Clear objects allocated to BANK0
  1976  07B4  1383               	bcf	3,7	;select IRP bank0
  1977  07B5  3055               	movlw	low __pbssBANK0
  1978  07B6  0084               	movwf	4
  1979  07B7  305F               	movlw	low (__pbssBANK0+10)
  1980  07B8  160A  158A  2638  120A  118A  	fcall	clear_ram0
  1981                           
  1982                           ; Clear objects allocated to BANK1
  1983  07BD  1683               	bsf	3,5	;RP0=1, select bank1
  1984  07BE  1303               	bcf	3,6	;RP1=0, select bank1
  1985  07BF  01E7               	clrf	__pbssBANK1& (0+127)
  1986  07C0  01E8               	clrf	(__pbssBANK1+1)& (0+127)
  1987  07C1  01E9               	clrf	(__pbssBANK1+2)& (0+127)
  1988  07C2  01EA               	clrf	(__pbssBANK1+3)& (0+127)
  1989  07C3  01EB               	clrf	(__pbssBANK1+4)& (0+127)
  1990  07C4  01EC               	clrf	(__pbssBANK1+5)& (0+127)
  1991                           
  1992                           ; Clear objects allocated to BANK3
  1993  07C5  1783               	bsf	3,7	;select IRP bank2
  1994  07C6  3090               	movlw	low __pbssBANK3
  1995  07C7  0084               	movwf	4
  1996  07C8  30D0               	movlw	low (__pbssBANK3+64)
  1997  07C9  160A  158A  2638  120A  118A  	fcall	clear_ram0
  1998                           
  1999                           ; Clear objects allocated to BANK2
  2000  07CE  3010               	movlw	low __pbssBANK2
  2001  07CF  0084               	movwf	4
  2002  07D0  3050               	movlw	low (__pbssBANK2+64)
  2003  07D1  160A  158A  2638  120A  118A  	fcall	clear_ram0
  2004                           
  2005                           ; Initialize objects allocated to BANK3
  2006  07D6  30EB               	movlw	low (__pdataBANK3+27)
  2007  07D7  00FD               	movwf	btemp+-1
  2008  07D8  301E               	movlw	high __pidataBANK3
  2009  07D9  00FE               	movwf	btemp
  2010  07DA  30D5               	movlw	low __pidataBANK3
  2011  07DB  00FF               	movwf	btemp+1
  2012  07DC  30D0               	movlw	low __pdataBANK3
  2013  07DD  0084               	movwf	4
  2014  07DE  160A  158A  265D  120A  118A  	fcall	init_ram0
  2015                           
  2016                           ; Initialize objects allocated to BANK1
  2017  07E3  1383               	bcf	3,7	;select IRP bank0
  2018  07E4  30F0               	movlw	low (__pdataBANK1+3)
  2019  07E5  00FD               	movwf	btemp+-1
  2020  07E6  3010               	movlw	high __pidataBANK1
  2021  07E7  00FE               	movwf	btemp
  2022  07E8  3003               	movlw	low __pidataBANK1
  2023  07E9  00FF               	movwf	btemp+1
  2024  07EA  30ED               	movlw	low __pdataBANK1
  2025  07EB  0084               	movwf	4
  2026  07EC  160A  158A  265D  120A  118A  	fcall	init_ram0
  2027                           
  2028                           ; Initialize objects allocated to BANK0
  2029  07F1  3067               	movlw	low (__pdataBANK0+8)
  2030  07F2  00FD               	movwf	btemp+-1
  2031  07F3  301E               	movlw	high __pidataBANK0
  2032  07F4  00FE               	movwf	btemp
  2033  07F5  3040               	movlw	low __pidataBANK0
  2034  07F6  00FF               	movwf	btemp+1
  2035  07F7  305F               	movlw	low __pdataBANK0
  2036  07F8  0084               	movwf	4
  2037  07F9  160A  158A  265D   	fcall	init_ram0
  2038  07FC                     end_of_initialization:	
  2039                           ;End of C runtime variable initialization code
  2040                           
  2041  07FC                     __end_of__initialization:	
  2042  07FC  0183               	clrf	3
  2043  07FD  120A  118A  28FA   	ljmp	_main	;jump to C main() function
  2044                           
  2045                           	psect	bssBANK0
  2046  0055                     __pbssBANK0:	
  2047  0055                     USARTWriteInt@F1617:	
  2048  0055                     	ds	5
  2049  005A                     _g_cur_matrix44:	
  2050  005A                     	ds	2
  2051  005C                     _cur_y:	
  2052  005C                     	ds	1
  2053  005D                     _temp_pre_count:	
  2054  005D                     	ds	1
  2055  005E                     _temp_y:	
  2056  005E                     	ds	1
  2057                           
  2058                           	psect	dataBANK0
  2059  005F                     __pdataBANK0:	
  2060  005F                     _randx:	
  2061  005F                     	ds	4
  2062  0063                     _temp_pre_risk:	
  2063  0063                     	ds	2
  2064  0065                     _tem_pre_sub_index:	
  2065  0065                     	ds	1
  2066  0066                     _temp_pre_x:	
  2067  0066                     	ds	1
  2068                           
  2069                           	psect	bssBANK1
  2070  00E7                     __pbssBANK1:	
  2071  00E7                     _temp_risk:	
  2072  00E7                     	ds	2
  2073  00E9                     _g_char_info_index:	
  2074  00E9                     	ds	1
  2075  00EA                     _temp_count:	
  2076  00EA                     	ds	1
  2077  00EB                     _temp_high:	
  2078  00EB                     	ds	1
  2079  00EC                     _temp_hole:	
  2080  00EC                     	ds	1
  2081                           
  2082                           	psect	dataBANK1
  2083  00ED                     __pdataBANK1:	
  2084  00ED                     _cur_x:	
  2085  00ED                     	ds	1
  2086  00EE                     _temp_pre_high:	
  2087  00EE                     	ds	1
  2088  00EF                     _temp_pre_hole:	
  2089  00EF                     	ds	1
  2090                           
  2091                           	psect	bssBANK3
  2092  0190                     __pbssBANK3:	
  2093  0190                     _URBuff:	
  2094  0190                     	ds	32
  2095  01B0                     _g_debug:	
  2096  01B0                     	ds	32
  2097                           
  2098                           	psect	dataBANK3
  2099  01D0                     __pdataBANK3:	
  2100  01D0                     _g_char_info:	
  2101  01D0                     	ds	27
  2102                           
  2103                           	psect	bssBANK2
  2104  0110                     __pbssBANK2:	
  2105  0110                     _g_matrix88:	
  2106  0110                     	ds	64
  2107                           
  2108                           	psect	clrtext
  2109  1E38                     clear_ram0:	
  2110                           ;	Called with FSR containing the base address, and
  2111                           ;	W with the last address+1
  2112                           
  2113  1E38  0064               	clrwdt	;clear the watchdog before getting into this loop
  2114  1E39                     clrloop0:	
  2115  1E39  0180               	clrf	0	;clear RAM location pointed to by FSR
  2116  1E3A  0A84               	incf	4,f	;increment pointer
  2117  1E3B  0604               	xorwf	4,w	;XOR with final address
  2118  1E3C  1903               	btfsc	3,2	;have we reached the end yet?
  2119  1E3D  3400               	retlw	0	;all done for this memory range, return
  2120  1E3E  0604               	xorwf	4,w	;XOR again to restore value
  2121  1E3F  2E39               	goto	clrloop0	;do the next byte
  2122                           
  2123                           	psect	inittext
  2124  1E59                     init_fetch0:	
  2125                           ;	Called with low address in FSR and high address in W
  2126                           
  2127  1E59  087E               	movf	126,w
  2128  1E5A  008A               	movwf	10
  2129  1E5B  087F               	movf	127,w
  2130  1E5C  0082               	movwf	2
  2131  1E5D                     init_ram0:	
  2132                           ;Called with:
  2133                           ;	high address of idata address in btemp 
  2134                           ;	low address of idata address in btemp+1 
  2135                           ;	low address of data in FSR
  2136                           ;	high address + 1 of data in btemp-1
  2137                           
  2138  1E5D  2659  160A  158A   	fcall	init_fetch0
  2139  1E60  0080               	movwf	0
  2140  1E61  0A84               	incf	4,f
  2141  1E62  0804               	movf	4,w
  2142  1E63  067D               	xorwf	125,w
  2143  1E64  1903               	btfsc	3,2
  2144  1E65  3400               	retlw	0
  2145  1E66  0AFF               	incf	127,f
  2146  1E67  1903               	btfsc	3,2
  2147  1E68  0AFE               	incf	126,f
  2148  1E69  2E5D               	goto	init_ram0
  2149                           
  2150                           	psect	cstackBANK1
  2151  00A0                     __pcstackBANK1:	
  2152  00A0                     find_best_solution@left_most_index:	
  2153                           
  2154                           ; 1 bytes @ 0x0
  2155  00A0                     	ds	1
  2156  00A1                     find_best_solution@right_most_index:	
  2157                           
  2158                           ; 1 bytes @ 0x1
  2159  00A1                     	ds	1
  2160  00A2                     find_best_solution@res:	
  2161                           
  2162                           ; 1 bytes @ 0x2
  2163  00A2                     	ds	1
  2164  00A3                     find_best_solution@temp_matrix88:	
  2165                           
  2166                           ; 64 bytes @ 0x3
  2167  00A3                     	ds	64
  2168  00E3                     find_best_solution@temp_cur_matrix44:	
  2169                           
  2170                           ; 2 bytes @ 0x43
  2171  00E3                     	ds	2
  2172  00E5                     find_best_solution@tem_sub_index:	
  2173                           
  2174                           ; 1 bytes @ 0x45
  2175  00E5                     	ds	1
  2176  00E6                     find_best_solution@temp_x:	
  2177                           
  2178                           ; 1 bytes @ 0x46
  2179  00E6                     	ds	1
  2180                           
  2181                           	psect	cstackCOMMON
  2182  0070                     __pcstackCOMMON:	
  2183  0070                     ?_srand:	
  2184  0070                     ?_USARTInit:	
  2185                           ; 1 bytes @ 0x0
  2186                           
  2187  0070                     ?_USARTWriteChar:	
  2188                           ; 1 bytes @ 0x0
  2189                           
  2190  0070                     ??_USARTWriteChar:	
  2191                           ; 1 bytes @ 0x0
  2192                           
  2193  0070                     ?_SPI1_write:	
  2194                           ; 1 bytes @ 0x0
  2195                           
  2196  0070                     ??_SPI1_write:	
  2197                           ; 1 bytes @ 0x0
  2198                           
  2199  0070                     ?_Write_Byte:	
  2200                           ; 1 bytes @ 0x0
  2201                           
  2202  0070                     ?_printf_MATRIX7219:	
  2203                           ; 1 bytes @ 0x0
  2204                           
  2205  0070                     ?_MATRIX88_to_MATRIX7219:	
  2206                           ; 1 bytes @ 0x0
  2207                           
  2208  0070                     ?_printf_MATRIX88:	
  2209                           ; 1 bytes @ 0x0
  2210                           
  2211  0070                     ?_printf_Screen:	
  2212                           ; 1 bytes @ 0x0
  2213                           
  2214  0070                     ?_printf_console_Screen:	
  2215                           ; 1 bytes @ 0x0
  2216                           
  2217  0070                     ?_Clear_Matrix:	
  2218                           ; 1 bytes @ 0x0
  2219                           
  2220  0070                     ?_is_row_full:	
  2221                           ; 1 bytes @ 0x0
  2222                           
  2223  0070                     ?_is_row_empty:	
  2224                           ; 1 bytes @ 0x0
  2225                           
  2226  0070                     ?_clear:	
  2227                           ; 1 bytes @ 0x0
  2228                           
  2229  0070                     ?_merge:	
  2230                           ; 1 bytes @ 0x0
  2231                           
  2232  0070                     ?_char_info_index_rand:	
  2233                           ; 1 bytes @ 0x0
  2234                           
  2235  0070                     ?_get_high:	
  2236                           ; 1 bytes @ 0x0
  2237                           
  2238  0070                     ?_get_holes_after_merge:	
  2239                           ; 1 bytes @ 0x0
  2240                           
  2241  0070                     ?_find_best_solution:	
  2242                           ; 1 bytes @ 0x0
  2243                           
  2244  0070                     ?___bmul:	
  2245                           ; 1 bytes @ 0x0
  2246                           
  2247  0070                     ?_memset:	
  2248                           ; 1 bytes @ 0x0
  2249                           
  2250  0070                     ?_memcpy:	
  2251                           ; 2 bytes @ 0x0
  2252                           
  2253  0070                     ?___lwdiv:	
  2254                           ; 2 bytes @ 0x0
  2255                           
  2256  0070                     ?___lmul:	
  2257                           ; 2 bytes @ 0x0
  2258                           
  2259  0070                     USARTWriteChar@ch:	
  2260                           ; 4 bytes @ 0x0
  2261                           
  2262  0070                     SPI1_write@data:	
  2263                           ; 1 bytes @ 0x0
  2264                           
  2265  0070                     Write_Byte@myValue:	
  2266                           ; 1 bytes @ 0x0
  2267                           
  2268  0070                     MATRIX88_to_MATRIX7219@matrix7219:	
  2269                           ; 1 bytes @ 0x0
  2270                           
  2271  0070                     is_row_empty@row:	
  2272                           ; 1 bytes @ 0x0
  2273                           
  2274  0070                     clear@y:	
  2275                           ; 1 bytes @ 0x0
  2276                           
  2277  0070                     merge@y:	
  2278                           ; 1 bytes @ 0x0
  2279                           
  2280  0070                     ___bmul@multiplicand:	
  2281                           ; 1 bytes @ 0x0
  2282                           
  2283  0070                     USARTInit@baud_rate:	
  2284                           ; 1 bytes @ 0x0
  2285                           
  2286  0070                     is_row_full@matrix:	
  2287                           ; 2 bytes @ 0x0
  2288                           
  2289  0070                     ___lwdiv@divisor:	
  2290                           ; 2 bytes @ 0x0
  2291                           
  2292  0070                     memcpy@d1:	
  2293                           ; 2 bytes @ 0x0
  2294                           
  2295  0070                     memset@p1:	
  2296                           ; 2 bytes @ 0x0
  2297                           
  2298  0070                     srand@x:	
  2299                           ; 2 bytes @ 0x0
  2300                           
  2301  0070                     ___lmul@multiplier:	
  2302                           ; 2 bytes @ 0x0
  2303                           
  2304                           
  2305                           ; 4 bytes @ 0x0
  2306  0070                     	ds	1
  2307  0071                     ?_USARTWriteString:	
  2308  0071                     ??_Write_Byte:	
  2309                           ; 1 bytes @ 0x1
  2310                           
  2311  0071                     ??_MATRIX88_to_MATRIX7219:	
  2312                           ; 1 bytes @ 0x1
  2313                           
  2314  0071                     ??_is_row_empty:	
  2315                           ; 1 bytes @ 0x1
  2316                           
  2317  0071                     ??___bmul:	
  2318                           ; 1 bytes @ 0x1
  2319                           
  2320  0071                     Write_Byte@myColumn:	
  2321                           ; 1 bytes @ 0x1
  2322                           
  2323  0071                     USARTWriteString@str:	
  2324                           ; 1 bytes @ 0x1
  2325                           
  2326  0071                     clear@matrix44:	
  2327                           ; 2 bytes @ 0x1
  2328                           
  2329  0071                     merge@matrix44:	
  2330                           ; 2 bytes @ 0x1
  2331                           
  2332                           
  2333                           ; 2 bytes @ 0x1
  2334  0071                     	ds	1
  2335  0072                     ??_srand:	
  2336  0072                     ??_USARTInit:	
  2337                           ; 1 bytes @ 0x2
  2338                           
  2339  0072                     ??_printf_MATRIX7219:	
  2340                           ; 1 bytes @ 0x2
  2341                           
  2342  0072                     is_row_full@row:	
  2343                           ; 1 bytes @ 0x2
  2344                           
  2345  0072                     ___bmul@product:	
  2346                           ; 1 bytes @ 0x2
  2347                           
  2348  0072                     ___lwdiv@dividend:	
  2349                           ; 1 bytes @ 0x2
  2350                           
  2351  0072                     memcpy@s1:	
  2352                           ; 2 bytes @ 0x2
  2353                           
  2354  0072                     memset@c:	
  2355                           ; 2 bytes @ 0x2
  2356                           
  2357                           
  2358                           ; 2 bytes @ 0x2
  2359  0072                     	ds	1
  2360  0073                     ??_USARTWriteString:	
  2361  0073                     ?_printf_console_MATRIX44:	
  2362                           ; 1 bytes @ 0x3
  2363                           
  2364  0073                     ?_printf_console_MATRIX88:	
  2365                           ; 1 bytes @ 0x3
  2366                           
  2367  0073                     ??_is_row_full:	
  2368                           ; 1 bytes @ 0x3
  2369                           
  2370  0073                     ?_is_left_boundary:	
  2371                           ; 1 bytes @ 0x3
  2372                           
  2373  0073                     ?_is_right_boundary:	
  2374                           ; 1 bytes @ 0x3
  2375                           
  2376  0073                     printf_console_MATRIX44@y:	
  2377                           ; 1 bytes @ 0x3
  2378                           
  2379  0073                     clear@matrix88:	
  2380                           ; 1 bytes @ 0x3
  2381                           
  2382  0073                     merge@matrix88:	
  2383                           ; 1 bytes @ 0x3
  2384                           
  2385  0073                     ___bmul@multiplier:	
  2386                           ; 1 bytes @ 0x3
  2387                           
  2388  0073                     printf_console_MATRIX88@matrix:	
  2389                           ; 1 bytes @ 0x3
  2390                           
  2391  0073                     is_left_boundary@matrix44:	
  2392                           ; 2 bytes @ 0x3
  2393                           
  2394  0073                     is_right_boundary@matrix44:	
  2395                           ; 2 bytes @ 0x3
  2396                           
  2397                           
  2398                           ; 2 bytes @ 0x3
  2399  0073                     	ds	1
  2400  0074                     ??_clear:	
  2401  0074                     ??_merge:	
  2402                           ; 1 bytes @ 0x4
  2403                           
  2404  0074                     ??___lwdiv:	
  2405                           ; 1 bytes @ 0x4
  2406                           
  2407  0074                     printf_MATRIX7219@matrix:	
  2408                           ; 1 bytes @ 0x4
  2409                           
  2410  0074                     MATRIX88_to_MATRIX7219@matrix88:	
  2411                           ; 1 bytes @ 0x4
  2412                           
  2413  0074                     is_row_empty@matrix:	
  2414                           ; 1 bytes @ 0x4
  2415                           
  2416  0074                     printf_console_MATRIX44@matrix:	
  2417                           ; 1 bytes @ 0x4
  2418                           
  2419  0074                     memcpy@n:	
  2420                           ; 2 bytes @ 0x4
  2421                           
  2422  0074                     memset@n:	
  2423                           ; 2 bytes @ 0x4
  2424                           
  2425  0074                     ___lmul@multiplicand:	
  2426                           ; 2 bytes @ 0x4
  2427                           
  2428                           
  2429                           ; 4 bytes @ 0x4
  2430  0074                     	ds	1
  2431  0075                     ??_printf_console_MATRIX88:	
  2432  0075                     printf_MATRIX7219@col:	
  2433                           ; 1 bytes @ 0x5
  2434                           
  2435  0075                     MATRIX88_to_MATRIX7219@mask:	
  2436                           ; 1 bytes @ 0x5
  2437                           
  2438  0075                     is_row_empty@col:	
  2439                           ; 1 bytes @ 0x5
  2440                           
  2441  0075                     is_left_boundary@matrix88:	
  2442                           ; 1 bytes @ 0x5
  2443                           
  2444  0075                     is_right_boundary@matrix88:	
  2445                           ; 1 bytes @ 0x5
  2446                           
  2447  0075                     ___lwdiv@quotient:	
  2448                           ; 1 bytes @ 0x5
  2449                           
  2450                           
  2451                           ; 2 bytes @ 0x5
  2452  0075                     	ds	1
  2453  0076                     ??_memset:	
  2454  0076                     ??_memcpy:	
  2455                           ; 1 bytes @ 0x6
  2456                           
  2457  0076                     ??_is_left_boundary:	
  2458                           ; 1 bytes @ 0x6
  2459                           
  2460  0076                     ??_is_right_boundary:	
  2461                           ; 1 bytes @ 0x6
  2462                           
  2463  0076                     printf_console_MATRIX44@x:	
  2464                           ; 1 bytes @ 0x6
  2465                           
  2466  0076                     MATRIX88_to_MATRIX7219@row:	
  2467                           ; 1 bytes @ 0x6
  2468                           
  2469  0076                     memset@p:	
  2470                           ; 1 bytes @ 0x6
  2471                           
  2472                           
  2473                           ; 2 bytes @ 0x6
  2474  0076                     	ds	1
  2475  0077                     printf_console_MATRIX44@row:	
  2476  0077                     MATRIX88_to_MATRIX7219@col:	
  2477                           ; 1 bytes @ 0x7
  2478                           
  2479  0077                     ___lwdiv@counter:	
  2480                           ; 1 bytes @ 0x7
  2481                           
  2482  0077                     memcpy@d:	
  2483                           ; 1 bytes @ 0x7
  2484                           
  2485                           
  2486                           ; 2 bytes @ 0x7
  2487  0077                     	ds	1
  2488  0078                     ??_printf_MATRIX88:	
  2489  0078                     ??___lmul:	
  2490                           ; 1 bytes @ 0x8
  2491                           
  2492  0078                     ?___lwmod:	
  2493                           ; 1 bytes @ 0x8
  2494                           
  2495  0078                     printf_console_MATRIX44@col:	
  2496                           ; 2 bytes @ 0x8
  2497                           
  2498  0078                     is_row_full@col:	
  2499                           ; 1 bytes @ 0x8
  2500                           
  2501  0078                     clear@x:	
  2502                           ; 1 bytes @ 0x8
  2503                           
  2504  0078                     merge@x:	
  2505                           ; 1 bytes @ 0x8
  2506                           
  2507  0078                     ___lwmod@divisor:	
  2508                           ; 1 bytes @ 0x8
  2509                           
  2510                           
  2511                           ; 2 bytes @ 0x8
  2512  0078                     	ds	1
  2513  0079                     ??_printf_Screen:	
  2514  0079                     ??_Clear_Matrix:	
  2515                           ; 1 bytes @ 0x9
  2516                           
  2517  0079                     clear@row:	
  2518                           ; 1 bytes @ 0x9
  2519                           
  2520  0079                     merge@row:	
  2521                           ; 1 bytes @ 0x9
  2522                           
  2523  0079                     memcpy@s:	
  2524                           ; 1 bytes @ 0x9
  2525                           
  2526  0079                     ___lmul@product:	
  2527                           ; 2 bytes @ 0x9
  2528                           
  2529                           
  2530                           ; 4 bytes @ 0x9
  2531  0079                     	ds	1
  2532  007A                     printf_console_MATRIX88@row:	
  2533  007A                     is_right_boundary@x:	
  2534                           ; 1 bytes @ 0xA
  2535                           
  2536  007A                     clear@col:	
  2537                           ; 1 bytes @ 0xA
  2538                           
  2539  007A                     merge@col:	
  2540                           ; 1 bytes @ 0xA
  2541                           
  2542  007A                     ___lwmod@dividend:	
  2543                           ; 1 bytes @ 0xA
  2544                           
  2545                           
  2546                           ; 2 bytes @ 0xA
  2547  007A                     	ds	1
  2548  007B                     ?_delete_row:	
  2549  007B                     printf_console_MATRIX88@col:	
  2550                           ; 1 bytes @ 0xB
  2551                           
  2552  007B                     is_left_boundary@x:	
  2553                           ; 1 bytes @ 0xB
  2554                           
  2555  007B                     is_right_boundary@row:	
  2556                           ; 1 bytes @ 0xB
  2557                           
  2558  007B                     delete_row@matrix:	
  2559                           ; 1 bytes @ 0xB
  2560                           
  2561                           
  2562                           ; 2 bytes @ 0xB
  2563  007B                     	ds	1
  2564  007C                     ??_printf_console_Screen:	
  2565  007C                     ??___lwmod:	
  2566                           ; 1 bytes @ 0xC
  2567                           
  2568  007C                     is_left_boundary@row:	
  2569                           ; 1 bytes @ 0xC
  2570                           
  2571  007C                     is_right_boundary@col:	
  2572                           ; 1 bytes @ 0xC
  2573                           
  2574                           
  2575                           ; 1 bytes @ 0xC
  2576  007C                     	ds	1
  2577  007D                     ??___awmod:	
  2578  007D                     delete_row@row:	
  2579                           ; 1 bytes @ 0xD
  2580                           
  2581  007D                     is_left_boundary@col:	
  2582                           ; 1 bytes @ 0xD
  2583                           
  2584  007D                     ___lwmod@counter:	
  2585                           ; 1 bytes @ 0xD
  2586                           
  2587                           
  2588                           ; 1 bytes @ 0xD
  2589  007D                     	ds	1
  2590  007E                     ??_char_info_index_rand:	
  2591                           
  2592                           	psect	cstackBANK0
  2593  0020                     __pcstackBANK0:	
  2594                           ; 1 bytes @ 0xE
  2595                           
  2596  0020                     ??_printf_console_MATRIX44:	
  2597  0020                     ??_delete_row:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0020                     ?_merge1:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0020                     ?_sprintf:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0020                     ?_rand:	
  2607                           ; 2 bytes @ 0x0
  2608                           
  2609  0020                     printf_MATRIX88@matrix88:	
  2610                           ; 2 bytes @ 0x0
  2611                           
  2612  0020                     merge1@y:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0020                     sprintf@f:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618                           
  2619                           ; 2 bytes @ 0x0
  2620  0020                     	ds	1
  2621  0021                     merge1@matrix44:	
  2622  0021                     printf_MATRIX88@matrix7219:	
  2623                           ; 2 bytes @ 0x1
  2624                           
  2625                           
  2626                           ; 8 bytes @ 0x1
  2627  0021                     	ds	1
  2628  0022                     ??_rand:	
  2629                           
  2630                           ; 1 bytes @ 0x2
  2631  0022                     	ds	1
  2632  0023                     merge1@matrix88_in:	
  2633                           
  2634                           ; 1 bytes @ 0x3
  2635  0023                     	ds	1
  2636  0024                     merge1@matrix88_out:	
  2637  0024                     delete_row@len:	
  2638                           ; 1 bytes @ 0x4
  2639                           
  2640                           
  2641                           ; 2 bytes @ 0x4
  2642  0024                     	ds	1
  2643  0025                     ??_merge1:	
  2644                           
  2645                           ; 1 bytes @ 0x5
  2646  0025                     	ds	1
  2647  0026                     delete_row@i:	
  2648                           
  2649                           ; 1 bytes @ 0x6
  2650  0026                     	ds	1
  2651  0027                     ?___awmod:	
  2652  0027                     ___awmod@divisor:	
  2653                           ; 2 bytes @ 0x7
  2654                           
  2655                           
  2656                           ; 2 bytes @ 0x7
  2657  0027                     	ds	1
  2658  0028                     ??_sprintf:	
  2659                           
  2660                           ; 1 bytes @ 0x8
  2661  0028                     	ds	1
  2662  0029                     merge1@x:	
  2663  0029                     ___awmod@dividend:	
  2664                           ; 1 bytes @ 0x9
  2665                           
  2666                           
  2667                           ; 2 bytes @ 0x9
  2668  0029                     	ds	1
  2669  002A                     merge1@len:	
  2670                           
  2671                           ; 2 bytes @ 0xA
  2672  002A                     	ds	1
  2673  002B                     sprintf@ap:	
  2674  002B                     ___awmod@counter:	
  2675                           ; 1 bytes @ 0xB
  2676                           
  2677                           
  2678                           ; 1 bytes @ 0xB
  2679  002B                     	ds	1
  2680  002C                     merge1@row:	
  2681  002C                     sprintf@flag:	
  2682                           ; 1 bytes @ 0xC
  2683                           
  2684  002C                     ___awmod@sign:	
  2685                           ; 1 bytes @ 0xC
  2686                           
  2687                           
  2688                           ; 1 bytes @ 0xC
  2689  002C                     	ds	1
  2690  002D                     merge1@col:	
  2691  002D                     sprintf@prec:	
  2692                           ; 1 bytes @ 0xD
  2693                           
  2694                           
  2695                           ; 1 bytes @ 0xD
  2696  002D                     	ds	1
  2697  002E                     sprintf@val:	
  2698                           
  2699                           ; 2 bytes @ 0xE
  2700  002E                     	ds	2
  2701  0030                     sprintf@c:	
  2702                           
  2703                           ; 1 bytes @ 0x10
  2704  0030                     	ds	1
  2705  0031                     sprintf@sp:	
  2706                           
  2707                           ; 1 bytes @ 0x11
  2708  0031                     	ds	1
  2709  0032                     ?_delete_matrix:	
  2710  0032                     ?_hit_land:	
  2711                           ; 1 bytes @ 0x12
  2712                           
  2713  0032                     ?_is_valid:	
  2714                           ; 1 bytes @ 0x12
  2715                           
  2716  0032                     ?_fall_off:	
  2717                           ; 1 bytes @ 0x12
  2718                           
  2719  0032                     ?_left_most:	
  2720                           ; 1 bytes @ 0x12
  2721                           
  2722  0032                     ?_right_most:	
  2723                           ; 1 bytes @ 0x12
  2724                           
  2725  0032                     ??_get_high:	
  2726                           ; 1 bytes @ 0x12
  2727                           
  2728  0032                     ?_get_high_after_merge:	
  2729                           ; 1 bytes @ 0x12
  2730                           
  2731  0032                     ??_get_holes_after_merge:	
  2732                           ; 1 bytes @ 0x12
  2733                           
  2734  0032                     ?_evaluate:	
  2735                           ; 1 bytes @ 0x12
  2736                           
  2737  0032                     hit_land@y:	
  2738                           ; 2 bytes @ 0x12
  2739                           
  2740  0032                     is_valid@y:	
  2741                           ; 1 bytes @ 0x12
  2742                           
  2743  0032                     fall_off@y:	
  2744                           ; 1 bytes @ 0x12
  2745                           
  2746  0032                     delete_matrix@matrix:	
  2747                           ; 1 bytes @ 0x12
  2748                           
  2749  0032                     left_most@matrix44:	
  2750                           ; 2 bytes @ 0x12
  2751                           
  2752  0032                     right_most@matrix44:	
  2753                           ; 2 bytes @ 0x12
  2754                           
  2755  0032                     get_high_after_merge@matrix:	
  2756                           ; 2 bytes @ 0x12
  2757                           
  2758                           
  2759                           ; 2 bytes @ 0x12
  2760  0032                     	ds	1
  2761  0033                     hit_land@matrix44:	
  2762  0033                     is_valid@matrix44:	
  2763                           ; 2 bytes @ 0x13
  2764                           
  2765  0033                     fall_off@matrix44:	
  2766                           ; 2 bytes @ 0x13
  2767                           
  2768                           
  2769                           ; 2 bytes @ 0x13
  2770  0033                     	ds	1
  2771  0034                     ??_delete_matrix:	
  2772  0034                     ??_evaluate:	
  2773                           ; 1 bytes @ 0x14
  2774                           
  2775  0034                     ??_get_high_after_merge:	
  2776                           ; 1 bytes @ 0x14
  2777                           
  2778  0034                     left_most@matrix88:	
  2779                           ; 1 bytes @ 0x14
  2780                           
  2781  0034                     right_most@matrix88:	
  2782                           ; 1 bytes @ 0x14
  2783                           
  2784  0034                     get_high@matrix:	
  2785                           ; 1 bytes @ 0x14
  2786                           
  2787                           
  2788                           ; 1 bytes @ 0x14
  2789  0034                     	ds	1
  2790  0035                     ??_left_most:	
  2791  0035                     ??_right_most:	
  2792                           ; 1 bytes @ 0x15
  2793                           
  2794  0035                     hit_land@matrix88:	
  2795                           ; 1 bytes @ 0x15
  2796                           
  2797  0035                     is_valid@matrix88:	
  2798                           ; 1 bytes @ 0x15
  2799                           
  2800  0035                     fall_off@matrix88:	
  2801                           ; 1 bytes @ 0x15
  2802                           
  2803  0035                     get_high@row:	
  2804                           ; 1 bytes @ 0x15
  2805                           
  2806                           
  2807                           ; 1 bytes @ 0x15
  2808  0035                     	ds	1
  2809  0036                     ??_hit_land:	
  2810  0036                     ??_is_valid:	
  2811                           ; 1 bytes @ 0x16
  2812                           
  2813  0036                     ??_fall_off:	
  2814                           ; 1 bytes @ 0x16
  2815                           
  2816  0036                     delete_matrix@count:	
  2817                           ; 1 bytes @ 0x16
  2818                           
  2819  0036                     left_most@x:	
  2820                           ; 1 bytes @ 0x16
  2821                           
  2822                           
  2823                           ; 1 bytes @ 0x16
  2824  0036                     	ds	1
  2825  0037                     delete_matrix@row:	
  2826  0037                     right_most@x:	
  2827                           ; 1 bytes @ 0x17
  2828                           
  2829                           
  2830                           ; 1 bytes @ 0x17
  2831  0037                     	ds	1
  2832  0038                     get_high_after_merge@y:	
  2833  0038                     get_holes_after_merge@num_hole:	
  2834                           ; 1 bytes @ 0x18
  2835                           
  2836  0038                     evaluate@risk:	
  2837                           ; 1 bytes @ 0x18
  2838                           
  2839                           
  2840                           ; 2 bytes @ 0x18
  2841  0038                     	ds	1
  2842  0039                     get_high_after_merge@col:	
  2843  0039                     get_holes_after_merge@stop:	
  2844                           ; 1 bytes @ 0x19
  2845                           
  2846                           
  2847                           ; 1 bytes @ 0x19
  2848  0039                     	ds	1
  2849  003A                     hit_land@x:	
  2850  003A                     is_valid@x:	
  2851                           ; 1 bytes @ 0x1A
  2852                           
  2853  003A                     fall_off@x:	
  2854                           ; 1 bytes @ 0x1A
  2855                           
  2856  003A                     evaluate@full:	
  2857                           ; 1 bytes @ 0x1A
  2858                           
  2859  003A                     get_high_after_merge@row:	
  2860                           ; 1 bytes @ 0x1A
  2861                           
  2862  003A                     get_holes_after_merge@start:	
  2863                           ; 1 bytes @ 0x1A
  2864                           
  2865                           
  2866                           ; 1 bytes @ 0x1A
  2867  003A                     	ds	1
  2868  003B                     hit_land@col:	
  2869  003B                     is_valid@row:	
  2870                           ; 1 bytes @ 0x1B
  2871                           
  2872  003B                     fall_off@col:	
  2873                           ; 1 bytes @ 0x1B
  2874                           
  2875  003B                     evaluate@matrix:	
  2876                           ; 1 bytes @ 0x1B
  2877                           
  2878  003B                     get_holes_after_merge@matrix:	
  2879                           ; 1 bytes @ 0x1B
  2880                           
  2881                           
  2882                           ; 1 bytes @ 0x1B
  2883  003B                     	ds	1
  2884  003C                     hit_land@row:	
  2885  003C                     is_valid@col:	
  2886                           ; 1 bytes @ 0x1C
  2887                           
  2888  003C                     fall_off@row:	
  2889                           ; 1 bytes @ 0x1C
  2890                           
  2891  003C                     evaluate@col:	
  2892                           ; 1 bytes @ 0x1C
  2893                           
  2894  003C                     get_holes_after_merge@col:	
  2895                           ; 1 bytes @ 0x1C
  2896                           
  2897                           
  2898                           ; 1 bytes @ 0x1C
  2899  003C                     	ds	1
  2900  003D                     evaluate@row:	
  2901  003D                     get_holes_after_merge@row:	
  2902                           ; 1 bytes @ 0x1D
  2903                           
  2904                           
  2905                           ; 1 bytes @ 0x1D
  2906  003D                     	ds	1
  2907  003E                     ??_find_best_solution:	
  2908                           
  2909                           ; 1 bytes @ 0x1E
  2910  003E                     	ds	7
  2911  0045                     ?_main:	
  2912  0045                     main@argc:	
  2913                           ; 2 bytes @ 0x25
  2914                           
  2915                           
  2916                           ; 2 bytes @ 0x25
  2917  0045                     	ds	2
  2918  0047                     main@argv:	
  2919                           
  2920                           ; 2 bytes @ 0x27
  2921  0047                     	ds	2
  2922  0049                     ??_main:	
  2923                           
  2924                           ; 1 bytes @ 0x29
  2925  0049                     	ds	9
  2926  0052                     main@Seed:	
  2927                           
  2928                           ; 2 bytes @ 0x32
  2929  0052                     	ds	2
  2930  0054                     main@hit_res:	
  2931                           
  2932                           ; 1 bytes @ 0x34
  2933  0054                     	ds	1
  2934                           
  2935                           	psect	maintext
  2936  00FA                     __pmaintext:	
  2937 ;;
  2938 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
  2939 ;;
  2940 ;; *************** function _main *****************
  2941 ;; Defined at:
  2942 ;;		line 1390 in file "teris_16f886.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;  argc            2   37[BANK0 ] int 
  2945 ;;  argv            2   39[BANK0 ] PTR PTR unsigned char 
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;  Seed            2   50[BANK0 ] unsigned int 
  2948 ;;  hit_res         1   52[BANK0 ] unsigned char 
  2949 ;; Return value:  Size  Location     Type
  2950 ;;                  2   37[BANK0 ] int 
  2951 ;; Registers used:
  2952 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2953 ;; Tracked objects:
  2954 ;;		On entry : B00/0
  2955 ;;		On exit  : 0/0
  2956 ;;		Unchanged: 0/0
  2957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2958 ;;      Params:         0       4       0       0       0
  2959 ;;      Locals:         0       3       0       0       0
  2960 ;;      Temps:          0       9       0       0       0
  2961 ;;      Totals:         0      16       0       0       0
  2962 ;;Total ram usage:       16 bytes
  2963 ;; Hardware stack levels required when called:    6
  2964 ;; This function calls:
  2965 ;;		_Clear_Matrix
  2966 ;;		_USARTInit
  2967 ;;		_USARTWriteString
  2968 ;;		___bmul
  2969 ;;		_char_info_index_rand
  2970 ;;		_clear
  2971 ;;		_delete_matrix
  2972 ;;		_find_best_solution
  2973 ;;		_hit_land
  2974 ;;		_merge
  2975 ;;		_printf_Screen
  2976 ;;		_sprintf
  2977 ;;		_srand
  2978 ;; This function is called by:
  2979 ;;		Startup code after reset
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           
  2984                           ;psect for function _main
  2985  00FA                     _main:	
  2986                           
  2987                           ;teris_16f886.c: 1392: uint8_t hit_res;
  2988                           ;teris_16f886.c: 1417: (TRISAbits.TRISA3 = 0);
  2989                           
  2990                           ;incstack = 0
  2991                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2992  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  2993  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  2994  00FC  1185               	bcf	5,3	;volatile
  2995                           
  2996                           ;teris_16f886.c: 1419: (TRISAbits.TRISA2 = 0);
  2997  00FD  1105               	bcf	5,2	;volatile
  2998                           
  2999                           ;teris_16f886.c: 1421: (TRISAbits.TRISA1 = 0);
  3000  00FE  1085               	bcf	5,1	;volatile
  3001                           
  3002                           ;teris_16f886.c: 1423: ANSELbits.ANS1 = 0;
  3003  00FF  1683               	bsf	3,5	;RP0=1, select bank3
  3004  0100  1703               	bsf	3,6	;RP1=1, select bank3
  3005  0101  1088               	bcf	8,1	;volatile
  3006                           
  3007                           ;teris_16f886.c: 1424: ANSELbits.ANS2 = 0;
  3008  0102  1108               	bcf	8,2	;volatile
  3009                           
  3010                           ;teris_16f886.c: 1425: ANSELbits.ANS3 = 0;
  3011  0103  1188               	bcf	8,3	;volatile
  3012                           
  3013                           ;teris_16f886.c: 1426: RA2 = 1;
  3014  0104  1283               	bcf	3,5	;RP0=0, select bank0
  3015  0105  1303               	bcf	3,6	;RP1=0, select bank0
  3016  0106  1505               	bsf	5,2	;volatile
  3017                           
  3018                           ;teris_16f886.c: 1427: RA1 = 0;
  3019  0107  1085               	bcf	5,1	;volatile
  3020                           
  3021                           ;teris_16f886.c: 1430: USARTInit(9600);
  3022  0108  3080               	movlw	128
  3023  0109  00F0               	movwf	USARTInit@baud_rate
  3024  010A  3025               	movlw	37
  3025  010B  00F1               	movwf	USARTInit@baud_rate+1
  3026  010C  160A  118A  20B7  120A  118A  	fcall	_USARTInit
  3027                           
  3028                           ;teris_16f886.c: 1433: unsigned Seed;
  3029                           ;teris_16f886.c: 1434: srand(Seed);
  3030  0111  1283               	bcf	3,5	;RP0=0, select bank0
  3031  0112  1303               	bcf	3,6	;RP1=0, select bank0
  3032  0113  0853               	movf	main@Seed+1,w
  3033  0114  00F1               	movwf	srand@x+1
  3034  0115  0852               	movf	main@Seed,w
  3035  0116  00F0               	movwf	srand@x
  3036  0117  120A  118A  2009  120A  118A  	fcall	_srand
  3037  011C  2926               	goto	l4274
  3038  011D                     l4290:	
  3039                           
  3040                           ;teris_16f886.c: 1451: {
  3041                           ;teris_16f886.c: 1455: USARTWriteString("GAME OVER!!!\r\n");
  3042  011D  3018               	movlw	low (STR_56| (0+32768))
  3043  011E  00F1               	movwf	USARTWriteString@str
  3044  011F  308E               	movlw	high (STR_56| (0+32768))
  3045  0120  00F2               	movwf	USARTWriteString@str+1
  3046  0121  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  3047  0126                     l4274:	
  3048                           ;teris_16f886.c: 1436: __start:
  3049                           
  3050                           ;teris_16f886.c: 1457: goto __start;
  3051                           
  3052                           
  3053                           ;teris_16f886.c: 1437: Clear_Matrix();
  3054  0126  160A  158A  268E  120A  118A  	fcall	_Clear_Matrix
  3055  012B                     l4276:	
  3056                           ;teris_16f886.c: 1438: while(1)
  3057                           
  3058                           
  3059                           ;teris_16f886.c: 1439: {
  3060                           ;teris_16f886.c: 1440: cur_y = 0;
  3061  012B  1283               	bcf	3,5	;RP0=0, select bank0
  3062  012C  1303               	bcf	3,6	;RP1=0, select bank0
  3063  012D  01DC               	clrf	_cur_y
  3064                           
  3065                           ;teris_16f886.c: 1441: cur_x = 2, cur_y = 0;
  3066  012E  3002               	movlw	2
  3067  012F  00C9               	movwf	??_main
  3068  0130  0849               	movf	??_main,w
  3069  0131  1683               	bsf	3,5	;RP0=1, select bank1
  3070  0132  1303               	bcf	3,6	;RP1=0, select bank1
  3071  0133  00ED               	movwf	_cur_x^(0+128)
  3072  0134  1283               	bcf	3,5	;RP0=0, select bank0
  3073  0135  1303               	bcf	3,6	;RP1=0, select bank0
  3074  0136  01DC               	clrf	_cur_y
  3075                           
  3076                           ;teris_16f886.c: 1442: g_char_info_index = char_info_index_rand();
  3077  0137  160A  158A  26A2  120A  118A  	fcall	_char_info_index_rand
  3078  013C  1283               	bcf	3,5	;RP0=0, select bank0
  3079  013D  1303               	bcf	3,6	;RP1=0, select bank0
  3080  013E  00C9               	movwf	??_main
  3081  013F  0849               	movf	??_main,w
  3082  0140  1683               	bsf	3,5	;RP0=1, select bank1
  3083  0141  1303               	bcf	3,6	;RP1=0, select bank1
  3084  0142  00E9               	movwf	_g_char_info_index^(0+128)
  3085                           
  3086                           ;teris_16f886.c: 1447: sprintf(g_debug, "g_char_info_index = %d\n", g_char_info_index);
  3087  0143  3038               	movlw	low (STR_57| (0+32768))
  3088  0144  1283               	bcf	3,5	;RP0=0, select bank0
  3089  0145  1303               	bcf	3,6	;RP1=0, select bank0
  3090  0146  00A0               	movwf	sprintf@f
  3091  0147  308D               	movlw	high (STR_57| (0+32768))
  3092  0148  00A1               	movwf	sprintf@f+1
  3093  0149  1683               	bsf	3,5	;RP0=1, select bank1
  3094  014A  1303               	bcf	3,6	;RP1=0, select bank1
  3095  014B  0869               	movf	_g_char_info_index^(0+128),w
  3096  014C  1283               	bcf	3,5	;RP0=0, select bank0
  3097  014D  1303               	bcf	3,6	;RP1=0, select bank0
  3098  014E  00C9               	movwf	??_main
  3099  014F  01CA               	clrf	??_main+1
  3100  0150  0849               	movf	??_main,w
  3101  0151  00A2               	movwf	?_sprintf+2
  3102  0152  084A               	movf	??_main+1,w
  3103  0153  00A3               	movwf	?_sprintf+3
  3104  0154  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  3105  0155  120A  118A  2012  120A  118A  	fcall	_sprintf
  3106                           
  3107                           ;teris_16f886.c: 1448: USARTWriteString(g_debug);
  3108  015A  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  3109  015B  00F1               	movwf	USARTWriteString@str
  3110  015C  3001               	movlw	1
  3111  015D  00F2               	movwf	USARTWriteString@str+1
  3112  015E  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  3113                           
  3114                           ;teris_16f886.c: 1450: if(find_best_solution() == 0)
  3115  0163  120A  118A  2386  120A  118A  	fcall	_find_best_solution
  3116  0168  3A00               	xorlw	0
  3117  0169  1903               	btfsc	3,2
  3118  016A  291D               	goto	l4290
  3119                           
  3120                           ;teris_16f886.c: 1458: }
  3121                           ;teris_16f886.c: 1459: g_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].start
      +                          _index + g_char_info[g_char_info_index].cur_index];
  3122  016B  3003               	movlw	3
  3123  016C  1283               	bcf	3,5	;RP0=0, select bank0
  3124  016D  1303               	bcf	3,6	;RP1=0, select bank0
  3125  016E  00C9               	movwf	??_main
  3126  016F  0849               	movf	??_main,w
  3127  0170  00F0               	movwf	___bmul@multiplicand
  3128  0171  1683               	bsf	3,5	;RP0=1, select bank1
  3129  0172  1303               	bcf	3,6	;RP1=0, select bank1
  3130  0173  0869               	movf	_g_char_info_index^(0+128),w
  3131  0174  160A  158A  2648  120A  118A  	fcall	___bmul
  3132  0179  3E01               	addlw	1
  3133  017A  3ED0               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3134  017B  0084               	movwf	4
  3135  017C  1783               	bsf	3,7	;select IRP bank3
  3136  017D  0800               	movf	0,w
  3137  017E  1283               	bcf	3,5	;RP0=0, select bank0
  3138  017F  1303               	bcf	3,6	;RP1=0, select bank0
  3139  0180  00CA               	movwf	??_main+1
  3140  0181  3003               	movlw	3
  3141  0182  00CB               	movwf	??_main+2
  3142  0183  084B               	movf	??_main+2,w
  3143  0184  00F0               	movwf	___bmul@multiplicand
  3144  0185  1683               	bsf	3,5	;RP0=1, select bank1
  3145  0186  1303               	bcf	3,6	;RP1=0, select bank1
  3146  0187  0869               	movf	_g_char_info_index^(0+128),w
  3147  0188  160A  158A  2648  120A  118A  	fcall	___bmul
  3148  018D  3ED0               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3149  018E  0084               	movwf	4
  3150  018F  1783               	bsf	3,7	;select IRP bank3
  3151  0190  0800               	movf	0,w
  3152  0191  1283               	bcf	3,5	;RP0=0, select bank0
  3153  0192  1303               	bcf	3,6	;RP1=0, select bank0
  3154  0193  074A               	addwf	??_main+1,w
  3155  0194  00CC               	movwf	??_main+3
  3156  0195  01CD               	clrf	??_main+4
  3157  0196  0DCD               	rlf	??_main+4,f
  3158  0197  0ECC               	swapf	??_main+3,f
  3159  0198  0ECD               	swapf	??_main+4,f
  3160  0199  30F0               	movlw	240
  3161  019A  05CD               	andwf	??_main+4,f
  3162  019B  084C               	movf	??_main+3,w
  3163  019C  390F               	andlw	15
  3164  019D  04CD               	iorwf	??_main+4,f
  3165  019E  30F0               	movlw	240
  3166  019F  05CC               	andwf	??_main+3,f
  3167  01A0  301C               	movlw	low (_g_matrix44| (0+32768))
  3168  01A1  00CE               	movwf	??_main+5
  3169  01A2  3088               	movlw	high (_g_matrix44| (0+32768))
  3170  01A3  00CF               	movwf	??_main+6
  3171  01A4  084C               	movf	??_main+3,w
  3172  01A5  074E               	addwf	??_main+5,w
  3173  01A6  00D0               	movwf	??_main+7
  3174  01A7  084D               	movf	??_main+4,w
  3175  01A8  1803               	skipnc
  3176  01A9  0A4D               	incf	??_main+4,w
  3177  01AA  074F               	addwf	??_main+6,w
  3178  01AB  00D1               	movwf	??_main+8
  3179  01AC  0850               	movf	??_main+7,w
  3180  01AD  00DA               	movwf	_g_cur_matrix44
  3181  01AE  0851               	movf	??_main+8,w
  3182  01AF  00DB               	movwf	_g_cur_matrix44+1
  3183  01B0                     l4294:	
  3184                           ;teris_16f886.c: 1460: while(1)
  3185                           
  3186                           
  3187                           ;teris_16f886.c: 1461: {
  3188                           ;teris_16f886.c: 1462: hit_res = hit_land(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3189  01B0  085C               	movf	_cur_y,w
  3190  01B1  00C9               	movwf	??_main
  3191  01B2  0849               	movf	??_main,w
  3192  01B3  00B2               	movwf	hit_land@y
  3193  01B4  085A               	movf	_g_cur_matrix44,w
  3194  01B5  00B3               	movwf	hit_land@matrix44
  3195  01B6  085B               	movf	_g_cur_matrix44+1,w
  3196  01B7  00B4               	movwf	hit_land@matrix44+1
  3197  01B8  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3198  01B9  00CA               	movwf	??_main+1
  3199  01BA  084A               	movf	??_main+1,w
  3200  01BB  00B5               	movwf	hit_land@matrix88
  3201  01BC  1683               	bsf	3,5	;RP0=1, select bank1
  3202  01BD  1303               	bcf	3,6	;RP1=0, select bank1
  3203  01BE  086D               	movf	_cur_x^(0+128),w
  3204  01BF  160A  118A  2640  120A  118A  	fcall	_hit_land
  3205  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  3206  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  3207  01C6  00CB               	movwf	??_main+2
  3208  01C7  084B               	movf	??_main+2,w
  3209  01C8  00D4               	movwf	main@hit_res
  3210                           
  3211                           ;teris_16f886.c: 1467: merge(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3212  01C9  085C               	movf	_cur_y,w
  3213  01CA  00C9               	movwf	??_main
  3214  01CB  0849               	movf	??_main,w
  3215  01CC  00F0               	movwf	merge@y
  3216  01CD  085A               	movf	_g_cur_matrix44,w
  3217  01CE  00F1               	movwf	merge@matrix44
  3218  01CF  085B               	movf	_g_cur_matrix44+1,w
  3219  01D0  00F2               	movwf	merge@matrix44+1
  3220  01D1  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3221  01D2  00CA               	movwf	??_main+1
  3222  01D3  084A               	movf	??_main+1,w
  3223  01D4  00F3               	movwf	merge@matrix88
  3224  01D5  1683               	bsf	3,5	;RP0=1, select bank1
  3225  01D6  1303               	bcf	3,6	;RP1=0, select bank1
  3226  01D7  086D               	movf	_cur_x^(0+128),w
  3227  01D8  160A  118A  2229  120A  118A  	fcall	_merge
  3228                           
  3229                           ;teris_16f886.c: 1468: if(hit_res == 1)
  3230  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  3231  01DE  1303               	bcf	3,6	;RP1=0, select bank0
  3232  01DF  0354               	decf	main@hit_res,w
  3233  01E0  1D03               	btfss	3,2
  3234  01E1  2A01               	goto	l4306
  3235                           
  3236                           ;teris_16f886.c: 1469: {
  3237                           ;teris_16f886.c: 1470: printf_Screen();
  3238  01E2  120A  118A  2004  120A  118A  	fcall	_printf_Screen
  3239                           
  3240                           ;teris_16f886.c: 1474: _delay((unsigned long)((100)*(20000000/4000.0)));
  3241  01E7  3003               	movlw	3
  3242  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  3243  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  3244  01EA  00CB               	movwf	??_main+2
  3245  01EB  308A               	movlw	138
  3246  01EC  00CA               	movwf	??_main+1
  3247  01ED  3056               	movlw	86
  3248  01EE  00C9               	movwf	??_main
  3249  01EF                     u5587:	
  3250  01EF  0BC9               	decfsz	??_main,f
  3251  01F0  29EF               	goto	u5587
  3252  01F1  0BCA               	decfsz	??_main+1,f
  3253  01F2  29EF               	goto	u5587
  3254  01F3  0BCB               	decfsz	??_main+2,f
  3255  01F4  29EF               	goto	u5587
  3256  01F5  29F6               	nop2
  3257                           
  3258                           ;teris_16f886.c: 1476: delete_matrix(&g_matrix88);
  3259  01F6  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3260  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  3261  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  3262  01F9  00B2               	movwf	delete_matrix@matrix
  3263  01FA  3001               	movlw	1
  3264  01FB  00B3               	movwf	delete_matrix@matrix+1
  3265  01FC  160A  118A  2279  120A  118A  	fcall	_delete_matrix
  3266  0201                     l4306:	
  3267                           
  3268                           ;teris_16f886.c: 1477: }
  3269                           ;teris_16f886.c: 1483: printf_Screen();
  3270  0201  120A  118A  2004  120A  118A  	fcall	_printf_Screen
  3271                           
  3272                           ;teris_16f886.c: 1484: if(hit_res == 0)
  3273  0206  1283               	bcf	3,5	;RP0=0, select bank0
  3274  0207  1303               	bcf	3,6	;RP1=0, select bank0
  3275  0208  0854               	movf	main@hit_res,w
  3276  0209  1D03               	btfss	3,2
  3277  020A  292B               	goto	l4276
  3278                           
  3279                           ;teris_16f886.c: 1485: {
  3280                           ;teris_16f886.c: 1486: clear(cur_x, cur_y, g_cur_matrix44, &g_matrix88);
  3281  020B  085C               	movf	_cur_y,w
  3282  020C  00C9               	movwf	??_main
  3283  020D  0849               	movf	??_main,w
  3284  020E  00F0               	movwf	clear@y
  3285  020F  085A               	movf	_g_cur_matrix44,w
  3286  0210  00F1               	movwf	clear@matrix44
  3287  0211  085B               	movf	_g_cur_matrix44+1,w
  3288  0212  00F2               	movwf	clear@matrix44+1
  3289  0213  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  3290  0214  00CA               	movwf	??_main+1
  3291  0215  084A               	movf	??_main+1,w
  3292  0216  00F3               	movwf	clear@matrix88
  3293  0217  1683               	bsf	3,5	;RP0=1, select bank1
  3294  0218  1303               	bcf	3,6	;RP1=0, select bank1
  3295  0219  086D               	movf	_cur_x^(0+128),w
  3296  021A  160A  118A  21DA  120A  118A  	fcall	_clear
  3297                           
  3298                           ;teris_16f886.c: 1491: }
  3299                           ;teris_16f886.c: 1495: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3300                           
  3301                           ;teris_16f886.c: 1488: else
  3302                           ;teris_16f886.c: 1489: {
  3303                           ;teris_16f886.c: 1490: break;
  3304                           
  3305                           ;teris_16f886.c: 1487: }
  3306  021F  301A               	movlw	26
  3307  0220  1283               	bcf	3,5	;RP0=0, select bank0
  3308  0221  1303               	bcf	3,6	;RP1=0, select bank0
  3309  0222  00CB               	movwf	??_main+2
  3310  0223  305E               	movlw	94
  3311  0224  00CA               	movwf	??_main+1
  3312  0225  3086               	movlw	134
  3313  0226  00C9               	movwf	??_main
  3314  0227                     u5597:	
  3315  0227  0BC9               	decfsz	??_main,f
  3316  0228  2A27               	goto	u5597
  3317  0229  0BCA               	decfsz	??_main+1,f
  3318  022A  2A27               	goto	u5597
  3319  022B  0BCB               	decfsz	??_main+2,f
  3320  022C  2A27               	goto	u5597
  3321  022D  0000               	nop
  3322                           
  3323                           ;teris_16f886.c: 1497: cur_y++;
  3324  022E  3001               	movlw	1
  3325  022F  1283               	bcf	3,5	;RP0=0, select bank0
  3326  0230  1303               	bcf	3,6	;RP1=0, select bank0
  3327  0231  00C9               	movwf	??_main
  3328  0232  0849               	movf	??_main,w
  3329  0233  07DC               	addwf	_cur_y,f
  3330  0234  29B0               	goto	l4294
  3331  0235                     __end_of_main:	
  3332                           ;teris_16f886.c: 1507: return 0;
  3333                           ;	Return value of _main is never used
  3334                           
  3335                           ;teris_16f886.c: 1498: }
  3336                           ;teris_16f886.c: 1499: }
  3337                           ;teris_16f886.c: 1500: __exit:
  3338                           
  3339                           
  3340                           	psect	text1
  3341  0009                     __ptext1:	
  3342 ;; *************** function _srand *****************
  3343 ;; Defined at:
  3344 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;  x               2    0[COMMON] unsigned int 
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;		None
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  1    wreg      void 
  3351 ;; Registers used:
  3352 ;;		wreg
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3358 ;;      Params:         2       0       0       0       0
  3359 ;;      Locals:         0       0       0       0       0
  3360 ;;      Temps:          0       0       0       0       0
  3361 ;;      Totals:         2       0       0       0       0
  3362 ;;Total ram usage:        2 bytes
  3363 ;; Hardware stack levels used:    1
  3364 ;; This function calls:
  3365 ;;		Nothing
  3366 ;; This function is called by:
  3367 ;;		_main
  3368 ;; This function uses a non-reentrant model
  3369 ;;
  3370                           
  3371                           
  3372                           ;psect for function _srand
  3373  0009                     _srand:	
  3374                           
  3375                           ;incstack = 0
  3376                           ; Regs used in _srand: [wreg]
  3377  0009  0870               	movf	srand@x,w
  3378  000A  1283               	bcf	3,5	;RP0=0, select bank0
  3379  000B  1303               	bcf	3,6	;RP1=0, select bank0
  3380  000C  00DF               	movwf	_randx
  3381  000D  0871               	movf	srand@x+1,w
  3382  000E  00E0               	movwf	_randx+1
  3383  000F  01E1               	clrf	_randx+2
  3384  0010  01E2               	clrf	_randx+3
  3385  0011  0008               	return
  3386  0012                     __end_of_srand:	
  3387                           
  3388                           	psect	text2
  3389  1229                     __ptext2:	
  3390 ;; *************** function _merge *****************
  3391 ;; Defined at:
  3392 ;;		line 829 in file "teris_16f886.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;  x               1    wreg     char 
  3395 ;;  y               1    0[COMMON] char 
  3396 ;;  matrix44        2    1[COMMON] PTR const struct .
  3397 ;;		 -> NULL(0), g_matrix44(384), 
  3398 ;;  matrix88        1    3[COMMON] PTR struct .
  3399 ;;		 -> g_matrix88(64), 
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;  x               1    8[COMMON] char 
  3402 ;;  col             1   10[COMMON] unsigned char 
  3403 ;;  row             1    9[COMMON] unsigned char 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      void 
  3406 ;; Registers used:
  3407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3413 ;;      Params:         4       0       0       0       0
  3414 ;;      Locals:         3       0       0       0       0
  3415 ;;      Temps:          4       0       0       0       0
  3416 ;;      Totals:        11       0       0       0       0
  3417 ;;Total ram usage:       11 bytes
  3418 ;; Hardware stack levels used:    2
  3419 ;; This function calls:
  3420 ;;		Nothing
  3421 ;; This function is called by:
  3422 ;;		_main
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           
  3427                           ;psect for function _merge
  3428  1229                     _merge:	
  3429                           
  3430                           ;incstack = 0
  3431                           ; Regs used in _merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3432                           ;merge@x stored from wreg
  3433  1229  00F8               	movwf	merge@x
  3434                           
  3435                           ;teris_16f886.c: 831: for(uint8_t row = 0; row < 4; row++)
  3436  122A  01F9               	clrf	merge@row
  3437  122B                     L1:	
  3438  122B  3004               	movlw	4
  3439  122C  0279               	subwf	merge@row,w
  3440  122D  1803               	btfsc	3,0
  3441  122E  0008               	return
  3442                           
  3443                           ;teris_16f886.c: 832: {
  3444                           ;teris_16f886.c: 833: for(uint8_t col = 0; col < 4; col++)
  3445  122F  01FA               	clrf	merge@col
  3446  1230  3004               	movlw	4
  3447  1231  027A               	subwf	merge@col,w
  3448  1232  1803               	btfsc	3,0
  3449  1233  2A74               	goto	l3442
  3450  1234                     l3434:	
  3451                           
  3452                           ;teris_16f886.c: 834: {
  3453                           ;teris_16f886.c: 835: if(matrix44->data[row][col] == 1)
  3454  1234  0879               	movf	merge@row,w
  3455  1235  00F4               	movwf	??_merge
  3456  1236  01F5               	clrf	??_merge+1
  3457  1237  1003               	clrc
  3458  1238  0DF4               	rlf	??_merge,f
  3459  1239  0DF5               	rlf	??_merge+1,f
  3460  123A  1003               	clrc
  3461  123B  0DF4               	rlf	??_merge,f
  3462  123C  0DF5               	rlf	??_merge+1,f
  3463  123D  0874               	movf	??_merge,w
  3464  123E  0771               	addwf	merge@matrix44,w
  3465  123F  00F6               	movwf	??_merge+2
  3466  1240  0875               	movf	??_merge+1,w
  3467  1241  1803               	skipnc
  3468  1242  0A75               	incf	??_merge+1,w
  3469  1243  0772               	addwf	merge@matrix44+1,w
  3470  1244  00F7               	movwf	??_merge+3
  3471  1245  087A               	movf	merge@col,w
  3472  1246  0776               	addwf	??_merge+2,w
  3473  1247  0084               	movwf	4
  3474  1248  0877               	movf	??_merge+3,w
  3475  1249  1803               	skipnc
  3476  124A  0A77               	incf	??_merge+3,w
  3477  124B  1283               	bcf	3,5	;RP0=0, select bank0
  3478  124C  1303               	bcf	3,6	;RP1=0, select bank0
  3479  124D  00FF               	movwf	127
  3480  124E  120A  158A  2000  160A  118A  	fcall	stringtab
  3481  1253  3A01               	xorlw	1
  3482  1254  1D03               	skipz
  3483  1255  2A6C               	goto	l3438
  3484                           
  3485                           ;teris_16f886.c: 836: {
  3486                           ;teris_16f886.c: 837: matrix88->data[y + row][x + col] = 1;
  3487  1256  087A               	movf	merge@col,w
  3488  1257  0778               	addwf	merge@x,w
  3489  1258  0773               	addwf	merge@matrix88,w
  3490  1259  00F4               	movwf	??_merge
  3491  125A  0879               	movf	merge@row,w
  3492  125B  0770               	addwf	merge@y,w
  3493  125C  00F5               	movwf	??_merge+1
  3494  125D  3002               	movlw	2
  3495  125E                     u4595:	
  3496  125E  1003               	clrc
  3497  125F  0DF5               	rlf	??_merge+1,f
  3498  1260  3EFF               	addlw	-1
  3499  1261  1D03               	skipz
  3500  1262  2A5E               	goto	u4595
  3501  1263  1003               	clrc
  3502  1264  0D75               	rlf	??_merge+1,w
  3503  1265  0774               	addwf	??_merge,w
  3504  1266  00F6               	movwf	??_merge+2
  3505  1267  0876               	movf	??_merge+2,w
  3506  1268  0084               	movwf	4
  3507  1269  1783               	bsf	3,7	;select IRP bank2
  3508  126A  0180               	clrf	0
  3509  126B  0A80               	incf	0,f
  3510  126C                     l3438:	
  3511  126C  3001               	movlw	1
  3512  126D  00F4               	movwf	??_merge
  3513  126E  0874               	movf	??_merge,w
  3514  126F  07FA               	addwf	merge@col,f
  3515  1270  3004               	movlw	4
  3516  1271  027A               	subwf	merge@col,w
  3517  1272  1C03               	skipc
  3518  1273  2A34               	goto	l3434
  3519  1274                     l3442:	
  3520  1274  3001               	movlw	1
  3521  1275  00F4               	movwf	??_merge
  3522  1276  0874               	movf	??_merge,w
  3523  1277  07F9               	addwf	merge@row,f
  3524  1278  2A2B               	goto	L1
  3525  1279                     __end_of_merge:	
  3526                           
  3527                           	psect	text3
  3528  1640                     __ptext3:	
  3529 ;; *************** function _hit_land *****************
  3530 ;; Defined at:
  3531 ;;		line 637 in file "teris_16f886.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;  x               1    wreg     char 
  3534 ;;  y               1   18[BANK0 ] char 
  3535 ;;  matrix44        2   19[BANK0 ] PTR const struct .
  3536 ;;		 -> NULL(0), g_matrix44(384), 
  3537 ;;  matrix88        1   21[BANK0 ] PTR const struct .
  3538 ;;		 -> g_matrix88(64), 
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;  x               1   26[BANK0 ] char 
  3541 ;;  col             1   27[BANK0 ] char 
  3542 ;;  row             1   28[BANK0 ] char 
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  1    wreg      unsigned char 
  3545 ;; Registers used:
  3546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3547 ;; Tracked objects:
  3548 ;;		On entry : 0/0
  3549 ;;		On exit  : 0/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3552 ;;      Params:         0       4       0       0       0
  3553 ;;      Locals:         0       3       0       0       0
  3554 ;;      Temps:          0       4       0       0       0
  3555 ;;      Totals:         0      11       0       0       0
  3556 ;;Total ram usage:       11 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; Hardware stack levels required when called:    2
  3559 ;; This function calls:
  3560 ;;		_USARTWriteString
  3561 ;;		_sprintf
  3562 ;; This function is called by:
  3563 ;;		_main
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           
  3568                           ;psect for function _hit_land
  3569  1640                     _hit_land:	
  3570                           
  3571                           ;incstack = 0
  3572                           ; Regs used in _hit_land: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3573                           ;hit_land@x stored from wreg
  3574  1640  1283               	bcf	3,5	;RP0=0, select bank0
  3575  1641  1303               	bcf	3,6	;RP1=0, select bank0
  3576  1642  00BA               	movwf	hit_land@x
  3577                           
  3578                           ;teris_16f886.c: 642: USARTWriteString("==============hit_land============\r\n");
  3579  1643  3075               	movlw	low (STR_19| (0+32768))
  3580  1644  00F1               	movwf	USARTWriteString@str
  3581  1645  308A               	movlw	high (STR_19| (0+32768))
  3582  1646  00F2               	movwf	USARTWriteString@str+1
  3583  1647  160A  158A  270C  160A  118A  	fcall	_USARTWriteString
  3584                           
  3585                           ;teris_16f886.c: 645: for(int8_t row = 4 - 1; row >= 0; row--)
  3586  164C  3003               	movlw	3
  3587  164D  1283               	bcf	3,5	;RP0=0, select bank0
  3588  164E  1303               	bcf	3,6	;RP1=0, select bank0
  3589  164F  00B6               	movwf	??_hit_land
  3590  1650  0836               	movf	??_hit_land,w
  3591  1651  00BC               	movwf	hit_land@row
  3592  1652  1BBC               	btfsc	hit_land@row,7
  3593  1653  2EF8               	goto	l3392
  3594  1654                     l3360:	
  3595                           
  3596                           ;teris_16f886.c: 646: {
  3597                           ;teris_16f886.c: 647: for(int8_t col = 0; col < 4; col++)
  3598  1654  01BB               	clrf	hit_land@col
  3599  1655  083B               	movf	hit_land@col,w
  3600  1656  3A80               	xorlw	128
  3601  1657  3E7C               	addlw	-132
  3602  1658  1803               	btfsc	3,0
  3603  1659  2EF2               	goto	l3388
  3604  165A                     l3366:	
  3605                           
  3606                           ;teris_16f886.c: 648: {
  3607                           ;teris_16f886.c: 649: if(matrix44->data[row][col] == 1)
  3608  165A  083C               	movf	hit_land@row,w
  3609  165B  00B6               	movwf	??_hit_land
  3610  165C  01B7               	clrf	??_hit_land+1
  3611  165D  1003               	clrc
  3612  165E  0DB6               	rlf	??_hit_land,f
  3613  165F  0DB7               	rlf	??_hit_land+1,f
  3614  1660  1003               	clrc
  3615  1661  0DB6               	rlf	??_hit_land,f
  3616  1662  0DB7               	rlf	??_hit_land+1,f
  3617  1663  0836               	movf	??_hit_land,w
  3618  1664  0733               	addwf	hit_land@matrix44,w
  3619  1665  00B8               	movwf	??_hit_land+2
  3620  1666  0837               	movf	??_hit_land+1,w
  3621  1667  1803               	skipnc
  3622  1668  0A37               	incf	??_hit_land+1,w
  3623  1669  0734               	addwf	hit_land@matrix44+1,w
  3624  166A  00B9               	movwf	??_hit_land+3
  3625  166B  083B               	movf	hit_land@col,w
  3626  166C  0738               	addwf	??_hit_land+2,w
  3627  166D  0084               	movwf	4
  3628  166E  0839               	movf	??_hit_land+3,w
  3629  166F  1803               	skipnc
  3630  1670  0A39               	incf	??_hit_land+3,w
  3631  1671  00FF               	movwf	127
  3632  1672  120A  158A  2000  160A  118A  	fcall	stringtab
  3633  1677  3A01               	xorlw	1
  3634  1678  1D03               	skipz
  3635  1679  2EE7               	goto	l3384
  3636                           
  3637                           ;teris_16f886.c: 650: {
  3638                           ;teris_16f886.c: 651: if((y + row) >= (8 - 1))
  3639  167A  0832               	movf	hit_land@y,w
  3640  167B  073C               	addwf	hit_land@row,w
  3641  167C  00B6               	movwf	??_hit_land
  3642  167D  01B7               	clrf	??_hit_land+1
  3643  167E  1803               	skipnc
  3644  167F  0AB7               	incf	??_hit_land+1,f
  3645  1680  1BB2               	btfsc	hit_land@y,7
  3646  1681  03B7               	decf	??_hit_land+1,f
  3647  1682  1BBC               	btfsc	hit_land@row,7
  3648  1683  03B7               	decf	??_hit_land+1,f
  3649  1684  1283               	bcf	3,5	;RP0=0, select bank0
  3650  1685  1303               	bcf	3,6	;RP1=0, select bank0
  3651  1686  0837               	movf	??_hit_land+1,w
  3652  1687  3A80               	xorlw	128
  3653  1688  00FF               	movwf	127
  3654  1689  3080               	movlw	128
  3655  168A  027F               	subwf	127,w
  3656  168B  1D03               	skipz
  3657  168C  2E8F               	goto	u4455
  3658  168D  3007               	movlw	7
  3659  168E  0236               	subwf	??_hit_land,w
  3660  168F                     u4455:	
  3661  168F  1C03               	skipc
  3662  1690  2EB0               	goto	l3376
  3663                           
  3664                           ;teris_16f886.c: 652: {
  3665                           ;teris_16f886.c: 656: sprintf(g_debug, "hit1 row = %d, col = %d\n", row, col);
  3666  1691  3006               	movlw	low (STR_20| (0+32768))
  3667  1692  1283               	bcf	3,5	;RP0=0, select bank0
  3668  1693  1303               	bcf	3,6	;RP1=0, select bank0
  3669  1694  00A0               	movwf	sprintf@f
  3670  1695  308D               	movlw	high (STR_20| (0+32768))
  3671  1696  00A1               	movwf	sprintf@f+1
  3672  1697  083C               	movf	hit_land@row,w
  3673  1698  00A2               	movwf	?_sprintf+2
  3674  1699  01A3               	clrf	?_sprintf+3
  3675  169A  1BA2               	btfsc	?_sprintf+2,7
  3676  169B  03A3               	decf	?_sprintf+3,f
  3677  169C  083B               	movf	hit_land@col,w
  3678  169D  00A4               	movwf	?_sprintf+4
  3679  169E  01A5               	clrf	?_sprintf+5
  3680  169F  1BA4               	btfsc	?_sprintf+4,7
  3681  16A0  03A5               	decf	?_sprintf+5,f
  3682  16A1  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  3683  16A2  120A  118A  2012  160A  118A  	fcall	_sprintf
  3684                           
  3685                           ;teris_16f886.c: 657: USARTWriteString(g_debug);
  3686  16A7  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  3687  16A8  00F1               	movwf	USARTWriteString@str
  3688  16A9  3001               	movlw	1
  3689  16AA  00F2               	movwf	USARTWriteString@str+1
  3690  16AB  160A  158A  270C   	fcall	_USARTWriteString
  3691                           
  3692                           ;teris_16f886.c: 659: return 1;
  3693  16AE  3001               	movlw	1
  3694  16AF  0008               	return
  3695  16B0                     l3376:	
  3696                           
  3697                           ;teris_16f886.c: 660: }
  3698                           ;teris_16f886.c: 662: if(matrix88->data[y + row + 1][x + col] == 1)
  3699  16B0  1283               	bcf	3,5	;RP0=0, select bank0
  3700  16B1  1303               	bcf	3,6	;RP1=0, select bank0
  3701  16B2  083B               	movf	hit_land@col,w
  3702  16B3  073A               	addwf	hit_land@x,w
  3703  16B4  0735               	addwf	hit_land@matrix88,w
  3704  16B5  00B6               	movwf	??_hit_land
  3705  16B6  083C               	movf	hit_land@row,w
  3706  16B7  0732               	addwf	hit_land@y,w
  3707  16B8  00B7               	movwf	??_hit_land+1
  3708  16B9  3002               	movlw	2
  3709  16BA                     u4465:	
  3710  16BA  1003               	clrc
  3711  16BB  0DB7               	rlf	??_hit_land+1,f
  3712  16BC  3EFF               	addlw	-1
  3713  16BD  1D03               	skipz
  3714  16BE  2EBA               	goto	u4465
  3715  16BF  1003               	clrc
  3716  16C0  0D37               	rlf	??_hit_land+1,w
  3717  16C1  3E08               	addlw	8
  3718  16C2  0736               	addwf	??_hit_land,w
  3719  16C3  00B8               	movwf	??_hit_land+2
  3720  16C4  0838               	movf	??_hit_land+2,w
  3721  16C5  0084               	movwf	4
  3722  16C6  1783               	bsf	3,7	;select IRP bank2
  3723  16C7  0300               	decf	0,w
  3724  16C8  1D03               	btfss	3,2
  3725  16C9  2EE7               	goto	l3384
  3726                           
  3727                           ;teris_16f886.c: 663: {
  3728                           ;teris_16f886.c: 667: sprintf(g_debug, "hit2 row = %d, col = %d\n", row, col);
  3729  16CA  301F               	movlw	low (STR_21| (0+32768))
  3730  16CB  00A0               	movwf	sprintf@f
  3731  16CC  308D               	movlw	high (STR_21| (0+32768))
  3732  16CD  00A1               	movwf	sprintf@f+1
  3733  16CE  083C               	movf	hit_land@row,w
  3734  16CF  00A2               	movwf	?_sprintf+2
  3735  16D0  01A3               	clrf	?_sprintf+3
  3736  16D1  1BA2               	btfsc	?_sprintf+2,7
  3737  16D2  03A3               	decf	?_sprintf+3,f
  3738  16D3  083B               	movf	hit_land@col,w
  3739  16D4  00A4               	movwf	?_sprintf+4
  3740  16D5  01A5               	clrf	?_sprintf+5
  3741  16D6  1BA4               	btfsc	?_sprintf+4,7
  3742  16D7  03A5               	decf	?_sprintf+5,f
  3743  16D8  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  3744  16D9  120A  118A  2012  160A  118A  	fcall	_sprintf
  3745                           
  3746                           ;teris_16f886.c: 668: USARTWriteString(g_debug);
  3747  16DE  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  3748  16DF  00F1               	movwf	USARTWriteString@str
  3749  16E0  3001               	movlw	1
  3750  16E1  00F2               	movwf	USARTWriteString@str+1
  3751  16E2  160A  158A  270C   	fcall	_USARTWriteString
  3752                           
  3753                           ;teris_16f886.c: 670: return 1;
  3754  16E5  3001               	movlw	1
  3755  16E6  0008               	return
  3756  16E7                     l3384:	
  3757  16E7  3001               	movlw	1
  3758  16E8  1283               	bcf	3,5	;RP0=0, select bank0
  3759  16E9  1303               	bcf	3,6	;RP1=0, select bank0
  3760  16EA  00B6               	movwf	??_hit_land
  3761  16EB  0836               	movf	??_hit_land,w
  3762  16EC  07BB               	addwf	hit_land@col,f
  3763  16ED  083B               	movf	hit_land@col,w
  3764  16EE  3A80               	xorlw	128
  3765  16EF  3E7C               	addlw	-132
  3766  16F0  1C03               	skipc
  3767  16F1  2E5A               	goto	l3366
  3768  16F2                     l3388:	
  3769  16F2  30FF               	movlw	255
  3770  16F3  00B6               	movwf	??_hit_land
  3771  16F4  0836               	movf	??_hit_land,w
  3772  16F5  07BC               	addwf	hit_land@row,f
  3773  16F6  1FBC               	btfss	hit_land@row,7
  3774  16F7  2E54               	goto	l3360
  3775  16F8                     l3392:	
  3776                           
  3777                           ;teris_16f886.c: 671: }
  3778                           ;teris_16f886.c: 672: }
  3779                           ;teris_16f886.c: 673: }
  3780                           ;teris_16f886.c: 674: }
  3781                           ;teris_16f886.c: 678: USARTWriteString("not hit\r\n");
  3782  16F8  3032               	movlw	low (STR_22| (0+32768))
  3783  16F9  00F1               	movwf	USARTWriteString@str
  3784  16FA  308E               	movlw	high (STR_22| (0+32768))
  3785  16FB  00F2               	movwf	USARTWriteString@str+1
  3786  16FC  160A  158A  270C   	fcall	_USARTWriteString
  3787                           
  3788                           ;teris_16f886.c: 680: return 0;
  3789  16FF  3000               	movlw	0
  3790  1700  0008               	return
  3791  1701                     __end_of_hit_land:	
  3792                           
  3793                           	psect	text4
  3794  0386                     __ptext4:	
  3795 ;; *************** function _find_best_solution *****************
  3796 ;; Defined at:
  3797 ;;		line 1057 in file "teris_16f886.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;		None
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;  temp_x          1   70[BANK1 ] char 
  3802 ;;  tem_sub_inde    1   69[BANK1 ] unsigned char 
  3803 ;;  temp_matrix8   64    3[BANK1 ] struct .
  3804 ;;  temp_cur_mat    2   67[BANK1 ] PTR struct .
  3805 ;;		 -> g_matrix44(384), 
  3806 ;;  res             1    2[BANK1 ] unsigned char 
  3807 ;;  right_most_i    1    1[BANK1 ] char 
  3808 ;;  left_most_in    1    0[BANK1 ] char 
  3809 ;; Return value:  Size  Location     Type
  3810 ;;                  1    wreg      unsigned char 
  3811 ;; Registers used:
  3812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3818 ;;      Params:         0       0       0       0       0
  3819 ;;      Locals:         0       0      71       0       0
  3820 ;;      Temps:          0       7       0       0       0
  3821 ;;      Totals:         0       7      71       0       0
  3822 ;;Total ram usage:       78 bytes
  3823 ;; Hardware stack levels used:    1
  3824 ;; Hardware stack levels required when called:    4
  3825 ;; This function calls:
  3826 ;;		_USARTWriteString
  3827 ;;		___bmul
  3828 ;;		_delete_matrix
  3829 ;;		_evaluate
  3830 ;;		_fall_off
  3831 ;;		_get_high
  3832 ;;		_get_high_after_merge
  3833 ;;		_get_holes_after_merge
  3834 ;;		_is_valid
  3835 ;;		_left_most
  3836 ;;		_merge1
  3837 ;;		_printf_console_MATRIX44
  3838 ;;		_printf_console_MATRIX88
  3839 ;;		_printf_console_Screen
  3840 ;;		_right_most
  3841 ;;		_sprintf
  3842 ;; This function is called by:
  3843 ;;		_main
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           
  3848                           ;psect for function _find_best_solution
  3849  0386                     _find_best_solution:	
  3850                           
  3851                           ;teris_16f886.c: 1062: USARTWriteString("==============find_best_solution============\r\
      +                          n");
  3852                           
  3853                           ;incstack = 0
  3854                           ; Regs used in _find_best_solution: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3855  0386  30D0               	movlw	low (STR_39| (0+32768))
  3856  0387  00F1               	movwf	USARTWriteString@str
  3857  0388  3089               	movlw	high (STR_39| (0+32768))
  3858  0389  00F2               	movwf	USARTWriteString@str+1
  3859  038A  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  3860                           
  3861                           ;teris_16f886.c: 1064: MATRIX44* temp_cur_matrix44;
  3862                           ;teris_16f886.c: 1065: MATRIX88 temp_matrix88;
  3863                           ;teris_16f886.c: 1066: uint8_t res = 0;
  3864  038F  1683               	bsf	3,5	;RP0=1, select bank1
  3865  0390  1303               	bcf	3,6	;RP1=0, select bank1
  3866  0391  01A2               	clrf	find_best_solution@res^(0+128)
  3867                           
  3868                           ;teris_16f886.c: 1067: int8_t left_most_index, right_most_index;
  3869                           ;teris_16f886.c: 1072: sprintf(g_debug, "g_char_info_index = (%d), num = %d\n", g_char_i
      +                          nfo_index, g_char_info[g_char_info_index].num);
  3870  0392  304F               	movlw	low (STR_40| (0+32768))
  3871  0393  1283               	bcf	3,5	;RP0=0, select bank0
  3872  0394  1303               	bcf	3,6	;RP1=0, select bank0
  3873  0395  00A0               	movwf	sprintf@f
  3874  0396  308B               	movlw	high (STR_40| (0+32768))
  3875  0397  00A1               	movwf	sprintf@f+1
  3876  0398  1683               	bsf	3,5	;RP0=1, select bank1
  3877  0399  1303               	bcf	3,6	;RP1=0, select bank1
  3878  039A  0869               	movf	_g_char_info_index^(0+128),w
  3879  039B  1283               	bcf	3,5	;RP0=0, select bank0
  3880  039C  1303               	bcf	3,6	;RP1=0, select bank0
  3881  039D  00BE               	movwf	??_find_best_solution
  3882  039E  01BF               	clrf	??_find_best_solution+1
  3883  039F  083E               	movf	??_find_best_solution,w
  3884  03A0  00A2               	movwf	?_sprintf+2
  3885  03A1  083F               	movf	??_find_best_solution+1,w
  3886  03A2  00A3               	movwf	?_sprintf+3
  3887  03A3  3003               	movlw	3
  3888  03A4  00C0               	movwf	??_find_best_solution+2
  3889  03A5  0840               	movf	??_find_best_solution+2,w
  3890  03A6  00F0               	movwf	___bmul@multiplicand
  3891  03A7  1683               	bsf	3,5	;RP0=1, select bank1
  3892  03A8  1303               	bcf	3,6	;RP1=0, select bank1
  3893  03A9  0869               	movf	_g_char_info_index^(0+128),w
  3894  03AA  160A  158A  2648  120A  118A  	fcall	___bmul
  3895  03AF  3E02               	addlw	2
  3896  03B0  3ED0               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3897  03B1  0084               	movwf	4
  3898  03B2  1783               	bsf	3,7	;select IRP bank3
  3899  03B3  0800               	movf	0,w
  3900  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  3901  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  3902  03B6  00C1               	movwf	??_find_best_solution+3
  3903  03B7  01C2               	clrf	??_find_best_solution+4
  3904  03B8  0841               	movf	??_find_best_solution+3,w
  3905  03B9  00A4               	movwf	?_sprintf+4
  3906  03BA  0842               	movf	??_find_best_solution+4,w
  3907  03BB  00A5               	movwf	?_sprintf+5
  3908  03BC  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  3909  03BD  120A  118A  2012  120A  118A  	fcall	_sprintf
  3910                           
  3911                           ;teris_16f886.c: 1073: USARTWriteString(g_debug);
  3912  03C2  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  3913  03C3  00F1               	movwf	USARTWriteString@str
  3914  03C4  3001               	movlw	1
  3915  03C5  00F2               	movwf	USARTWriteString@str+1
  3916  03C6  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  3917                           
  3918                           ;teris_16f886.c: 1075: for(uint8_t tem_sub_index = 0; tem_sub_index < g_char_info[g_char
      +                          _info_index].num; tem_sub_index++)
  3919  03CB  1683               	bsf	3,5	;RP0=1, select bank1
  3920  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  3921  03CD  01E5               	clrf	find_best_solution@tem_sub_index^(0+128)
  3922  03CE                     l4254:	
  3923  03CE  3003               	movlw	3
  3924  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  3925  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  3926  03D1  00BE               	movwf	??_find_best_solution
  3927  03D2  083E               	movf	??_find_best_solution,w
  3928  03D3  00F0               	movwf	___bmul@multiplicand
  3929  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  3930  03D5  1303               	bcf	3,6	;RP1=0, select bank1
  3931  03D6  0869               	movf	_g_char_info_index^(0+128),w
  3932  03D7  160A  158A  2648  120A  118A  	fcall	___bmul
  3933  03DC  3E02               	addlw	2
  3934  03DD  3ED0               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3935  03DE  0084               	movwf	4
  3936  03DF  1783               	bsf	3,7	;select IRP bank3
  3937  03E0  0800               	movf	0,w
  3938  03E1  1683               	bsf	3,5	;RP0=1, select bank1
  3939  03E2  1303               	bcf	3,6	;RP1=0, select bank1
  3940  03E3  0265               	subwf	find_best_solution@tem_sub_index^(0+128),w
  3941  03E4  1803               	btfsc	3,0
  3942  03E5  2F87               	goto	l4256
  3943                           
  3944                           ;teris_16f886.c: 1076: {
  3945                           ;teris_16f886.c: 1077: temp_cur_matrix44 = &g_matrix44[g_char_info[g_char_info_index].st
      +                          art_index + tem_sub_index];
  3946  03E6  3003               	movlw	3
  3947  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  3948  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  3949  03E9  00BE               	movwf	??_find_best_solution
  3950  03EA  083E               	movf	??_find_best_solution,w
  3951  03EB  00F0               	movwf	___bmul@multiplicand
  3952  03EC  1683               	bsf	3,5	;RP0=1, select bank1
  3953  03ED  1303               	bcf	3,6	;RP1=0, select bank1
  3954  03EE  0869               	movf	_g_char_info_index^(0+128),w
  3955  03EF  160A  158A  2648  120A  118A  	fcall	___bmul
  3956  03F4  3ED0               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  3957  03F5  0084               	movwf	4
  3958  03F6  1783               	bsf	3,7	;select IRP bank3
  3959  03F7  0800               	movf	0,w
  3960  03F8  1683               	bsf	3,5	;RP0=1, select bank1
  3961  03F9  1303               	bcf	3,6	;RP1=0, select bank1
  3962  03FA  0765               	addwf	find_best_solution@tem_sub_index^(0+128),w
  3963  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  3964  03FC  1303               	bcf	3,6	;RP1=0, select bank0
  3965  03FD  00BF               	movwf	??_find_best_solution+1
  3966  03FE  01C0               	clrf	??_find_best_solution+2
  3967  03FF  0DC0               	rlf	??_find_best_solution+2,f
  3968  0400  0EBF               	swapf	??_find_best_solution+1,f
  3969  0401  0EC0               	swapf	??_find_best_solution+2,f
  3970  0402  30F0               	movlw	240
  3971  0403  05C0               	andwf	??_find_best_solution+2,f
  3972  0404  083F               	movf	??_find_best_solution+1,w
  3973  0405  390F               	andlw	15
  3974  0406  04C0               	iorwf	??_find_best_solution+2,f
  3975  0407  30F0               	movlw	240
  3976  0408  05BF               	andwf	??_find_best_solution+1,f
  3977  0409  301C               	movlw	low (_g_matrix44| (0+32768))
  3978  040A  00C1               	movwf	??_find_best_solution+3
  3979  040B  3088               	movlw	high (_g_matrix44| (0+32768))
  3980  040C  00C2               	movwf	??_find_best_solution+4
  3981  040D  083F               	movf	??_find_best_solution+1,w
  3982  040E  0741               	addwf	??_find_best_solution+3,w
  3983  040F  00C3               	movwf	??_find_best_solution+5
  3984  0410  0840               	movf	??_find_best_solution+2,w
  3985  0411  1803               	skipnc
  3986  0412  0A40               	incf	??_find_best_solution+2,w
  3987  0413  0742               	addwf	??_find_best_solution+4,w
  3988  0414  00C4               	movwf	??_find_best_solution+6
  3989  0415  0843               	movf	??_find_best_solution+5,w
  3990  0416  1683               	bsf	3,5	;RP0=1, select bank1
  3991  0417  1303               	bcf	3,6	;RP1=0, select bank1
  3992  0418  00E3               	movwf	find_best_solution@temp_cur_matrix44^(0+128)
  3993  0419  1283               	bcf	3,5	;RP0=0, select bank0
  3994  041A  1303               	bcf	3,6	;RP1=0, select bank0
  3995  041B  0844               	movf	??_find_best_solution+6,w
  3996  041C  1683               	bsf	3,5	;RP0=1, select bank1
  3997  041D  1303               	bcf	3,6	;RP1=0, select bank1
  3998  041E  00E4               	movwf	(find_best_solution@temp_cur_matrix44+1)^(0+128)
  3999                           
  4000                           ;teris_16f886.c: 1078: left_most_index = left_most(cur_x, temp_cur_matrix44, &g_matrix88
      +                          );
  4001  041F  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4002  0420  1283               	bcf	3,5	;RP0=0, select bank0
  4003  0421  1303               	bcf	3,6	;RP1=0, select bank0
  4004  0422  00B2               	movwf	left_most@matrix44
  4005  0423  1683               	bsf	3,5	;RP0=1, select bank1
  4006  0424  1303               	bcf	3,6	;RP1=0, select bank1
  4007  0425  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4008  0426  1283               	bcf	3,5	;RP0=0, select bank0
  4009  0427  1303               	bcf	3,6	;RP1=0, select bank0
  4010  0428  00B3               	movwf	left_most@matrix44+1
  4011  0429  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4012  042A  00BE               	movwf	??_find_best_solution
  4013  042B  083E               	movf	??_find_best_solution,w
  4014  042C  00B4               	movwf	left_most@matrix88
  4015  042D  1683               	bsf	3,5	;RP0=1, select bank1
  4016  042E  1303               	bcf	3,6	;RP1=0, select bank1
  4017  042F  086D               	movf	_cur_x^(0+128),w
  4018  0430  160A  158A  2789  120A  118A  	fcall	_left_most
  4019  0435  1283               	bcf	3,5	;RP0=0, select bank0
  4020  0436  1303               	bcf	3,6	;RP1=0, select bank0
  4021  0437  00BF               	movwf	??_find_best_solution+1
  4022  0438  083F               	movf	??_find_best_solution+1,w
  4023  0439  1683               	bsf	3,5	;RP0=1, select bank1
  4024  043A  1303               	bcf	3,6	;RP1=0, select bank1
  4025  043B  00A0               	movwf	find_best_solution@left_most_index^(0+128)
  4026                           
  4027                           ;teris_16f886.c: 1079: right_most_index = right_most(cur_x, temp_cur_matrix44, &g_matrix
      +                          88);
  4028  043C  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4029  043D  1283               	bcf	3,5	;RP0=0, select bank0
  4030  043E  1303               	bcf	3,6	;RP1=0, select bank0
  4031  043F  00B2               	movwf	right_most@matrix44
  4032  0440  1683               	bsf	3,5	;RP0=1, select bank1
  4033  0441  1303               	bcf	3,6	;RP1=0, select bank1
  4034  0442  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4035  0443  1283               	bcf	3,5	;RP0=0, select bank0
  4036  0444  1303               	bcf	3,6	;RP1=0, select bank0
  4037  0445  00B3               	movwf	right_most@matrix44+1
  4038  0446  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4039  0447  00BE               	movwf	??_find_best_solution
  4040  0448  083E               	movf	??_find_best_solution,w
  4041  0449  00B4               	movwf	right_most@matrix88
  4042  044A  1683               	bsf	3,5	;RP0=1, select bank1
  4043  044B  1303               	bcf	3,6	;RP1=0, select bank1
  4044  044C  086D               	movf	_cur_x^(0+128),w
  4045  044D  160A  118A  2077  120A  118A  	fcall	_right_most
  4046  0452  1283               	bcf	3,5	;RP0=0, select bank0
  4047  0453  1303               	bcf	3,6	;RP1=0, select bank0
  4048  0454  00BF               	movwf	??_find_best_solution+1
  4049  0455  083F               	movf	??_find_best_solution+1,w
  4050  0456  1683               	bsf	3,5	;RP0=1, select bank1
  4051  0457  1303               	bcf	3,6	;RP1=0, select bank1
  4052  0458  00A1               	movwf	find_best_solution@right_most_index^(0+128)
  4053                           
  4054                           ;teris_16f886.c: 1081: for(int8_t temp_x = left_most_index; temp_x <= right_most_index; 
      +                          temp_x++)
  4055  0459  0820               	movf	find_best_solution@left_most_index^(0+128),w
  4056  045A  1283               	bcf	3,5	;RP0=0, select bank0
  4057  045B  1303               	bcf	3,6	;RP1=0, select bank0
  4058  045C  00BE               	movwf	??_find_best_solution
  4059  045D  083E               	movf	??_find_best_solution,w
  4060  045E  1683               	bsf	3,5	;RP0=1, select bank1
  4061  045F  1303               	bcf	3,6	;RP1=0, select bank1
  4062  0460  00E6               	movwf	find_best_solution@temp_x^(0+128)
  4063  0461                     l4250:	
  4064  0461  0821               	movf	find_best_solution@right_most_index^(0+128),w
  4065  0462  3A80               	xorlw	128
  4066  0463  1283               	bcf	3,5	;RP0=0, select bank0
  4067  0464  1303               	bcf	3,6	;RP1=0, select bank0
  4068  0465  00BE               	movwf	??_find_best_solution
  4069  0466  1683               	bsf	3,5	;RP0=1, select bank1
  4070  0467  1303               	bcf	3,6	;RP1=0, select bank1
  4071  0468  0866               	movf	find_best_solution@temp_x^(0+128),w
  4072  0469  3A80               	xorlw	128
  4073  046A  1283               	bcf	3,5	;RP0=0, select bank0
  4074  046B  1303               	bcf	3,6	;RP1=0, select bank0
  4075  046C  02BE               	subwf	??_find_best_solution,f
  4076  046D  1C03               	btfss	3,0
  4077  046E  2F80               	goto	l4252
  4078                           
  4079                           ;teris_16f886.c: 1082: {
  4080                           ;teris_16f886.c: 1083: temp_y = fall_off(temp_x, cur_y, temp_cur_matrix44, &g_matrix88);
  4081  046F  1283               	bcf	3,5	;RP0=0, select bank0
  4082  0470  085C               	movf	_cur_y,w
  4083  0471  00BE               	movwf	??_find_best_solution
  4084  0472  083E               	movf	??_find_best_solution,w
  4085  0473  00B2               	movwf	fall_off@y
  4086  0474  1683               	bsf	3,5	;RP0=1, select bank1
  4087  0475  1303               	bcf	3,6	;RP1=0, select bank1
  4088  0476  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4089  0477  1283               	bcf	3,5	;RP0=0, select bank0
  4090  0478  1303               	bcf	3,6	;RP1=0, select bank0
  4091  0479  00B3               	movwf	fall_off@matrix44
  4092  047A  1683               	bsf	3,5	;RP0=1, select bank1
  4093  047B  1303               	bcf	3,6	;RP1=0, select bank1
  4094  047C  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4095  047D  1283               	bcf	3,5	;RP0=0, select bank0
  4096  047E  1303               	bcf	3,6	;RP1=0, select bank0
  4097  047F  00B4               	movwf	fall_off@matrix44+1
  4098  0480  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4099  0481  00BF               	movwf	??_find_best_solution+1
  4100  0482  083F               	movf	??_find_best_solution+1,w
  4101  0483  00B5               	movwf	fall_off@matrix88
  4102  0484  1683               	bsf	3,5	;RP0=1, select bank1
  4103  0485  1303               	bcf	3,6	;RP1=0, select bank1
  4104  0486  0866               	movf	find_best_solution@temp_x^(0+128),w
  4105  0487  160A  118A  258C  120A  118A  	fcall	_fall_off
  4106  048C  1283               	bcf	3,5	;RP0=0, select bank0
  4107  048D  1303               	bcf	3,6	;RP1=0, select bank0
  4108  048E  00C0               	movwf	??_find_best_solution+2
  4109  048F  0840               	movf	??_find_best_solution+2,w
  4110  0490  00DE               	movwf	_temp_y
  4111                           
  4112                           ;teris_16f886.c: 1085: printf_console_MATRIX44(temp_x, temp_y, temp_cur_matrix44);
  4113  0491  085E               	movf	_temp_y,w
  4114  0492  00BE               	movwf	??_find_best_solution
  4115  0493  083E               	movf	??_find_best_solution,w
  4116  0494  00F3               	movwf	printf_console_MATRIX44@y
  4117  0495  1683               	bsf	3,5	;RP0=1, select bank1
  4118  0496  1303               	bcf	3,6	;RP1=0, select bank1
  4119  0497  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4120  0498  00F4               	movwf	printf_console_MATRIX44@matrix
  4121  0499  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4122  049A  00F5               	movwf	printf_console_MATRIX44@matrix+1
  4123  049B  0866               	movf	find_best_solution@temp_x^(0+128),w
  4124  049C  160A  118A  2701  120A  118A  	fcall	_printf_console_MATRIX44
  4125                           
  4126                           ;teris_16f886.c: 1086: printf_console_Screen();
  4127  04A1  160A  158A  2630  120A  118A  	fcall	_printf_console_Screen
  4128                           
  4129                           ;teris_16f886.c: 1088: if(is_valid(temp_x, temp_y, temp_cur_matrix44, &g_matrix88) == 0)
  4130  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  4131  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  4132  04A8  085E               	movf	_temp_y,w
  4133  04A9  00BE               	movwf	??_find_best_solution
  4134  04AA  083E               	movf	??_find_best_solution,w
  4135  04AB  00B2               	movwf	is_valid@y
  4136  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  4137  04AD  1303               	bcf	3,6	;RP1=0, select bank1
  4138  04AE  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4139  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  4140  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  4141  04B1  00B3               	movwf	is_valid@matrix44
  4142  04B2  1683               	bsf	3,5	;RP0=1, select bank1
  4143  04B3  1303               	bcf	3,6	;RP1=0, select bank1
  4144  04B4  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4145  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  4146  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  4147  04B7  00B4               	movwf	is_valid@matrix44+1
  4148  04B8  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4149  04B9  00BF               	movwf	??_find_best_solution+1
  4150  04BA  083F               	movf	??_find_best_solution+1,w
  4151  04BB  00B5               	movwf	is_valid@matrix88
  4152  04BC  1683               	bsf	3,5	;RP0=1, select bank1
  4153  04BD  1303               	bcf	3,6	;RP1=0, select bank1
  4154  04BE  0866               	movf	find_best_solution@temp_x^(0+128),w
  4155  04BF  120A  158A  26FA  120A  118A  	fcall	_is_valid
  4156  04C4  3A00               	xorlw	0
  4157  04C5  1903               	btfsc	3,2
  4158  04C6  2F77               	goto	l4248
  4159                           
  4160                           ;teris_16f886.c: 1091: }
  4161                           ;teris_16f886.c: 1092: res = 1;
  4162                           
  4163                           ;teris_16f886.c: 1089: {
  4164                           ;teris_16f886.c: 1090: continue;
  4165  04C7  1683               	bsf	3,5	;RP0=1, select bank1
  4166  04C8  1303               	bcf	3,6	;RP1=0, select bank1
  4167  04C9  01A2               	clrf	find_best_solution@res^(0+128)
  4168  04CA  0AA2               	incf	find_best_solution@res^(0+128),f
  4169                           
  4170                           ;teris_16f886.c: 1093: merge1(temp_x, temp_y, temp_cur_matrix44, &g_matrix88, &temp_matr
      +                          ix88);
  4171  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  4172  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  4173  04CD  085E               	movf	_temp_y,w
  4174  04CE  00BE               	movwf	??_find_best_solution
  4175  04CF  083E               	movf	??_find_best_solution,w
  4176  04D0  00A0               	movwf	merge1@y
  4177  04D1  1683               	bsf	3,5	;RP0=1, select bank1
  4178  04D2  1303               	bcf	3,6	;RP1=0, select bank1
  4179  04D3  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4180  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  4181  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  4182  04D6  00A1               	movwf	merge1@matrix44
  4183  04D7  1683               	bsf	3,5	;RP0=1, select bank1
  4184  04D8  1303               	bcf	3,6	;RP1=0, select bank1
  4185  04D9  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4186  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  4187  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  4188  04DC  00A2               	movwf	merge1@matrix44+1
  4189  04DD  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4190  04DE  00BF               	movwf	??_find_best_solution+1
  4191  04DF  083F               	movf	??_find_best_solution+1,w
  4192  04E0  00A3               	movwf	merge1@matrix88_in
  4193  04E1  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4194  04E2  00C0               	movwf	??_find_best_solution+2
  4195  04E3  0840               	movf	??_find_best_solution+2,w
  4196  04E4  00A4               	movwf	merge1@matrix88_out
  4197  04E5  1683               	bsf	3,5	;RP0=1, select bank1
  4198  04E6  1303               	bcf	3,6	;RP1=0, select bank1
  4199  04E7  0866               	movf	find_best_solution@temp_x^(0+128),w
  4200  04E8  160A  118A  2437  120A  118A  	fcall	_merge1
  4201                           
  4202                           ;teris_16f886.c: 1094: temp_count = delete_matrix(&temp_matrix88);
  4203  04ED  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4204  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  4205  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  4206  04F0  00B2               	movwf	delete_matrix@matrix
  4207  04F1  3000               	movlw	0
  4208  04F2  00B3               	movwf	delete_matrix@matrix+1
  4209  04F3  160A  118A  2279  120A  118A  	fcall	_delete_matrix
  4210  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  4211  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  4212  04FA  00BE               	movwf	??_find_best_solution
  4213  04FB  083E               	movf	??_find_best_solution,w
  4214  04FC  1683               	bsf	3,5	;RP0=1, select bank1
  4215  04FD  1303               	bcf	3,6	;RP1=0, select bank1
  4216  04FE  00EA               	movwf	_temp_count^(0+128)
  4217                           
  4218                           ;teris_16f886.c: 1095: temp_risk = evaluate(&temp_matrix88);
  4219  04FF  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4220  0500  120A  158A  266F  120A  118A  	fcall	_evaluate
  4221  0505  1283               	bcf	3,5	;RP0=0, select bank0
  4222  0506  1303               	bcf	3,6	;RP1=0, select bank0
  4223  0507  0833               	movf	?_evaluate+1,w
  4224  0508  1683               	bsf	3,5	;RP0=1, select bank1
  4225  0509  1303               	bcf	3,6	;RP1=0, select bank1
  4226  050A  00E8               	movwf	(_temp_risk+1)^(0+128)
  4227  050B  1283               	bcf	3,5	;RP0=0, select bank0
  4228  050C  1303               	bcf	3,6	;RP1=0, select bank0
  4229  050D  0832               	movf	?_evaluate,w
  4230  050E  1683               	bsf	3,5	;RP0=1, select bank1
  4231  050F  1303               	bcf	3,6	;RP1=0, select bank1
  4232  0510  00E7               	movwf	_temp_risk^(0+128)
  4233                           
  4234                           ;teris_16f886.c: 1096: temp_high = get_high_after_merge(temp_y, temp_cur_matrix44);
  4235  0511  0863               	movf	find_best_solution@temp_cur_matrix44^(0+128),w
  4236  0512  1283               	bcf	3,5	;RP0=0, select bank0
  4237  0513  1303               	bcf	3,6	;RP1=0, select bank0
  4238  0514  00B2               	movwf	get_high_after_merge@matrix
  4239  0515  1683               	bsf	3,5	;RP0=1, select bank1
  4240  0516  1303               	bcf	3,6	;RP1=0, select bank1
  4241  0517  0864               	movf	(find_best_solution@temp_cur_matrix44+1)^(0+128),w
  4242  0518  1283               	bcf	3,5	;RP0=0, select bank0
  4243  0519  1303               	bcf	3,6	;RP1=0, select bank0
  4244  051A  00B3               	movwf	get_high_after_merge@matrix+1
  4245  051B  085E               	movf	_temp_y,w
  4246  051C  160A  118A  2513  120A  118A  	fcall	_get_high_after_merge
  4247  0521  1283               	bcf	3,5	;RP0=0, select bank0
  4248  0522  1303               	bcf	3,6	;RP1=0, select bank0
  4249  0523  00BE               	movwf	??_find_best_solution
  4250  0524  083E               	movf	??_find_best_solution,w
  4251  0525  1683               	bsf	3,5	;RP0=1, select bank1
  4252  0526  1303               	bcf	3,6	;RP1=0, select bank1
  4253  0527  00EB               	movwf	_temp_high^(0+128)
  4254                           
  4255                           ;teris_16f886.c: 1097: temp_hole = get_holes_after_merge(&temp_matrix88);
  4256  0528  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4257  0529  120A  118A  2235  120A  118A  	fcall	_get_holes_after_merge
  4258  052E  1283               	bcf	3,5	;RP0=0, select bank0
  4259  052F  1303               	bcf	3,6	;RP1=0, select bank0
  4260  0530  00BE               	movwf	??_find_best_solution
  4261  0531  083E               	movf	??_find_best_solution,w
  4262  0532  1683               	bsf	3,5	;RP0=1, select bank1
  4263  0533  1303               	bcf	3,6	;RP1=0, select bank1
  4264  0534  00EC               	movwf	_temp_hole^(0+128)
  4265                           
  4266                           ;teris_16f886.c: 1099: printf_console_MATRIX88(&temp_matrix88);
  4267  0535  30A3               	movlw	(low (find_best_solution@temp_matrix88| 0))& (0+255)
  4268  0536  00F3               	movwf	printf_console_MATRIX88@matrix
  4269  0537  3000               	movlw	0
  4270  0538  00F4               	movwf	printf_console_MATRIX88@matrix+1
  4271  0539  160A  118A  23D7  120A  118A  	fcall	_printf_console_MATRIX88
  4272                           
  4273                           ;teris_16f886.c: 1101: if(temp_count > temp_pre_count)
  4274  053E  1683               	bsf	3,5	;RP0=1, select bank1
  4275  053F  1303               	bcf	3,6	;RP1=0, select bank1
  4276  0540  086A               	movf	_temp_count^(0+128),w
  4277  0541  1283               	bcf	3,5	;RP0=0, select bank0
  4278  0542  1303               	bcf	3,6	;RP1=0, select bank0
  4279  0543  025D               	subwf	_temp_pre_count,w
  4280  0544  1803               	skipnc
  4281  0545  2D57               	goto	l4128
  4282                           
  4283                           ;teris_16f886.c: 1102: {
  4284                           ;teris_16f886.c: 1106: sprintf(g_debug, "temp_count(%d) > temp_pre_count(%d)\n", temp_co
      +                          unt, temp_pre_count);
  4285  0546  309A               	movlw	low (STR_41| (0+32768))
  4286  0547  00A0               	movwf	sprintf@f
  4287  0548  308A               	movlw	high (STR_41| (0+32768))
  4288  0549  00A1               	movwf	sprintf@f+1
  4289  054A  1683               	bsf	3,5	;RP0=1, select bank1
  4290  054B  1303               	bcf	3,6	;RP1=0, select bank1
  4291  054C  086A               	movf	_temp_count^(0+128),w
  4292  054D  1283               	bcf	3,5	;RP0=0, select bank0
  4293  054E  1303               	bcf	3,6	;RP1=0, select bank0
  4294  054F  00BE               	movwf	??_find_best_solution
  4295  0550  01BF               	clrf	??_find_best_solution+1
  4296  0551  083E               	movf	??_find_best_solution,w
  4297  0552  00A2               	movwf	?_sprintf+2
  4298  0553  083F               	movf	??_find_best_solution+1,w
  4299  0554  00A3               	movwf	?_sprintf+3
  4300  0555  085D               	movf	_temp_pre_count,w
  4301  0556  2ED6               	goto	L6
  4302  0557                     l4128:	
  4303                           ;teris_16f886.c: 1115: }
  4304                           
  4305                           ;teris_16f886.c: 1114: temp_pre_x = temp_x;
  4306                           
  4307                           ;teris_16f886.c: 1113: tem_pre_sub_index = tem_sub_index;
  4308                           
  4309                           ;teris_16f886.c: 1112: temp_pre_hole = temp_hole;
  4310                           
  4311                           ;teris_16f886.c: 1111: temp_pre_high = temp_high;
  4312                           
  4313                           ;teris_16f886.c: 1110: temp_pre_risk = temp_risk;
  4314                           
  4315                           ;teris_16f886.c: 1109: temp_pre_count = temp_count;
  4316                           
  4317                           ;teris_16f886.c: 1107: USARTWriteString(g_debug);
  4318                           
  4319                           
  4320                           ;teris_16f886.c: 1116: else if(temp_count == temp_pre_count)
  4321  0557  1683               	bsf	3,5	;RP0=1, select bank1
  4322  0558  1303               	bcf	3,6	;RP1=0, select bank1
  4323  0559  086A               	movf	_temp_count^(0+128),w
  4324  055A  1283               	bcf	3,5	;RP0=0, select bank0
  4325  055B  1303               	bcf	3,6	;RP1=0, select bank0
  4326  055C  065D               	xorwf	_temp_pre_count,w
  4327  055D  1D03               	skipz
  4328  055E  2F77               	goto	l4248
  4329                           
  4330                           ;teris_16f886.c: 1117: {
  4331                           ;teris_16f886.c: 1118: if(get_high(&g_matrix88) <= 8/2 + 1)
  4332  055F  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  4333  0560  160A  118A  22CB  120A  118A  	fcall	_get_high
  4334  0565  1283               	bcf	3,5	;RP0=0, select bank0
  4335  0566  1303               	bcf	3,6	;RP1=0, select bank0
  4336  0567  00BE               	movwf	??_find_best_solution
  4337  0568  3006               	movlw	6
  4338  0569  023E               	subwf	??_find_best_solution,w
  4339  056A  1803               	skipnc
  4340  056B  2E2C               	goto	l4190
  4341                           
  4342                           ;teris_16f886.c: 1119: {
  4343                           ;teris_16f886.c: 1125: sprintf(g_debug, "height <= (%d)\n", 8/2 + 1);
  4344  056C  30F8               	movlw	low (STR_42| (0+32768))
  4345  056D  00A0               	movwf	sprintf@f
  4346  056E  308D               	movlw	high (STR_42| (0+32768))
  4347  056F  00A1               	movwf	sprintf@f+1
  4348  0570  3005               	movlw	5
  4349  0571  00A2               	movwf	?_sprintf+2
  4350  0572  3000               	movlw	0
  4351  0573  00A3               	movwf	?_sprintf+3
  4352  0574  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4353  0575  120A  118A  2012  120A  118A  	fcall	_sprintf
  4354                           
  4355                           ;teris_16f886.c: 1126: USARTWriteString(g_debug);
  4356  057A  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4357  057B  00F1               	movwf	USARTWriteString@str
  4358  057C  3001               	movlw	1
  4359  057D  00F2               	movwf	USARTWriteString@str+1
  4360  057E  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  4361                           
  4362                           ;teris_16f886.c: 1128: sprintf(g_debug, "temp_count(%d) == temp_pre_count(%d)\n", temp_c
      +                          ount, temp_pre_count);
  4363  0583  302A               	movlw	low (STR_43| (0+32768))
  4364  0584  1283               	bcf	3,5	;RP0=0, select bank0
  4365  0585  1303               	bcf	3,6	;RP1=0, select bank0
  4366  0586  00A0               	movwf	sprintf@f
  4367  0587  308A               	movlw	high (STR_43| (0+32768))
  4368  0588  00A1               	movwf	sprintf@f+1
  4369  0589  1683               	bsf	3,5	;RP0=1, select bank1
  4370  058A  1303               	bcf	3,6	;RP1=0, select bank1
  4371  058B  086A               	movf	_temp_count^(0+128),w
  4372  058C  1283               	bcf	3,5	;RP0=0, select bank0
  4373  058D  1303               	bcf	3,6	;RP1=0, select bank0
  4374  058E  00BE               	movwf	??_find_best_solution
  4375  058F  01BF               	clrf	??_find_best_solution+1
  4376  0590  083E               	movf	??_find_best_solution,w
  4377  0591  00A2               	movwf	?_sprintf+2
  4378  0592  083F               	movf	??_find_best_solution+1,w
  4379  0593  00A3               	movwf	?_sprintf+3
  4380  0594  085D               	movf	_temp_pre_count,w
  4381  0595  00C0               	movwf	??_find_best_solution+2
  4382  0596  01C1               	clrf	??_find_best_solution+3
  4383  0597  0840               	movf	??_find_best_solution+2,w
  4384  0598  00A4               	movwf	?_sprintf+4
  4385  0599  0841               	movf	??_find_best_solution+3,w
  4386  059A  00A5               	movwf	?_sprintf+5
  4387  059B  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4388  059C  120A  118A  2012  120A  118A  	fcall	_sprintf
  4389                           
  4390                           ;teris_16f886.c: 1129: USARTWriteString(g_debug);
  4391  05A1  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4392  05A2  00F1               	movwf	USARTWriteString@str
  4393  05A3  3001               	movlw	1
  4394  05A4  00F2               	movwf	USARTWriteString@str+1
  4395  05A5  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  4396                           
  4397                           ;teris_16f886.c: 1131: if(temp_risk < temp_pre_risk)
  4398  05AA  1283               	bcf	3,5	;RP0=0, select bank0
  4399  05AB  1303               	bcf	3,6	;RP1=0, select bank0
  4400  05AC  0864               	movf	_temp_pre_risk+1,w
  4401  05AD  1683               	bsf	3,5	;RP0=1, select bank1
  4402  05AE  1303               	bcf	3,6	;RP1=0, select bank1
  4403  05AF  0268               	subwf	(_temp_risk+1)^(0+128),w
  4404  05B0  1D03               	skipz
  4405  05B1  2DB8               	goto	u5425
  4406  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  4407  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  4408  05B4  0863               	movf	_temp_pre_risk,w
  4409  05B5  1683               	bsf	3,5	;RP0=1, select bank1
  4410  05B6  1303               	bcf	3,6	;RP1=0, select bank1
  4411  05B7  0267               	subwf	_temp_risk^(0+128),w
  4412  05B8                     u5425:	
  4413  05B8  1C03               	btfss	3,0
  4414  05B9  2F1E               	goto	L7
  4415                           
  4416                           ;teris_16f886.c: 1146: else if(temp_risk == temp_pre_risk)
  4417                           
  4418                           ;teris_16f886.c: 1145: }
  4419                           
  4420                           ;teris_16f886.c: 1144: temp_pre_x = temp_x;
  4421                           
  4422                           ;teris_16f886.c: 1143: tem_pre_sub_index = tem_sub_index;
  4423                           
  4424                           ;teris_16f886.c: 1142: temp_pre_hole = temp_hole;
  4425                           
  4426                           ;teris_16f886.c: 1141: temp_pre_high = temp_high;
  4427                           
  4428                           ;teris_16f886.c: 1140: temp_pre_risk = temp_risk;
  4429                           
  4430                           ;teris_16f886.c: 1139: temp_pre_count = temp_count;
  4431                           
  4432                           ;teris_16f886.c: 1137: USARTWriteString(g_debug);
  4433                           
  4434                           ;teris_16f886.c: 1132: {
  4435                           ;teris_16f886.c: 1136: sprintf(g_debug, "temp_risk(%d) < temp_pre_risk(%d)\n", temp_risk
      +                          , temp_pre_risk);
  4436  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  4437  05BB  0864               	movf	_temp_pre_risk+1,w
  4438  05BC  1683               	bsf	3,5	;RP0=1, select bank1
  4439  05BD  1303               	bcf	3,6	;RP1=0, select bank1
  4440  05BE  0668               	xorwf	(_temp_risk+1)^(0+128),w
  4441  05BF  1D03               	skipz
  4442  05C0  2DC7               	goto	u5435
  4443  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  4444  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  4445  05C3  0863               	movf	_temp_pre_risk,w
  4446  05C4  1683               	bsf	3,5	;RP0=1, select bank1
  4447  05C5  1303               	bcf	3,6	;RP1=0, select bank1
  4448  05C6  0667               	xorwf	_temp_risk^(0+128),w
  4449  05C7                     u5435:	
  4450  05C7  1D03               	skipz
  4451  05C8  2F77               	goto	l4248
  4452                           
  4453                           ;teris_16f886.c: 1147: {
  4454                           ;teris_16f886.c: 1151: sprintf(g_debug, "temp_risk(%d) == temp_pre_risk(%d)\n", temp_ris
      +                          k, temp_pre_risk);
  4455  05C9  3007               	movlw	low (STR_45| (0+32768))
  4456  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  4457  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  4458  05CC  00A0               	movwf	sprintf@f
  4459  05CD  308B               	movlw	high (STR_45| (0+32768))
  4460  05CE  00A1               	movwf	sprintf@f+1
  4461  05CF  1683               	bsf	3,5	;RP0=1, select bank1
  4462  05D0  1303               	bcf	3,6	;RP1=0, select bank1
  4463  05D1  0868               	movf	(_temp_risk+1)^(0+128),w
  4464  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  4465  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  4466  05D4  00A3               	movwf	?_sprintf+3
  4467  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  4468  05D6  1303               	bcf	3,6	;RP1=0, select bank1
  4469  05D7  0867               	movf	_temp_risk^(0+128),w
  4470  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  4471  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  4472  05DA  00A2               	movwf	?_sprintf+2
  4473  05DB  0864               	movf	_temp_pre_risk+1,w
  4474  05DC  00A5               	movwf	?_sprintf+5
  4475  05DD  0863               	movf	_temp_pre_risk,w
  4476  05DE  00A4               	movwf	?_sprintf+4
  4477  05DF  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4478  05E0  120A  118A  2012  120A  118A  	fcall	_sprintf
  4479                           
  4480                           ;teris_16f886.c: 1152: USARTWriteString(g_debug);
  4481  05E5  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4482  05E6  00F1               	movwf	USARTWriteString@str
  4483  05E7  3001               	movlw	1
  4484  05E8  00F2               	movwf	USARTWriteString@str+1
  4485  05E9  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  4486                           
  4487                           ;teris_16f886.c: 1154: if(temp_high < temp_pre_high)
  4488  05EE  1683               	bsf	3,5	;RP0=1, select bank1
  4489  05EF  1303               	bcf	3,6	;RP1=0, select bank1
  4490  05F0  086E               	movf	_temp_pre_high^(0+128),w
  4491  05F1  026B               	subwf	_temp_high^(0+128),w
  4492  05F2  1C03               	btfss	3,0
  4493  05F3  2E74               	goto	L9
  4494                           
  4495                           ;teris_16f886.c: 1169: else if(temp_high == temp_pre_high)
  4496                           
  4497                           ;teris_16f886.c: 1168: }
  4498                           
  4499                           ;teris_16f886.c: 1167: temp_pre_x = temp_x;
  4500                           
  4501                           ;teris_16f886.c: 1166: tem_pre_sub_index = tem_sub_index;
  4502                           
  4503                           ;teris_16f886.c: 1165: temp_pre_hole = temp_hole;
  4504                           
  4505                           ;teris_16f886.c: 1164: temp_pre_high = temp_high;
  4506                           
  4507                           ;teris_16f886.c: 1163: temp_pre_risk = temp_risk;
  4508                           
  4509                           ;teris_16f886.c: 1162: temp_pre_count = temp_count;
  4510                           
  4511                           ;teris_16f886.c: 1160: USARTWriteString(g_debug);
  4512                           
  4513                           ;teris_16f886.c: 1155: {
  4514                           ;teris_16f886.c: 1159: sprintf(g_debug, "temp_high(%d) < temp_pre_high(%d)\n", temp_high
      +                          , temp_pre_high);
  4515  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  4516  05F5  1303               	bcf	3,6	;RP1=0, select bank1
  4517  05F6  086B               	movf	_temp_high^(0+128),w
  4518  05F7  066E               	xorwf	_temp_pre_high^(0+128),w
  4519  05F8  1D03               	skipz
  4520  05F9  2F77               	goto	l4248
  4521                           
  4522                           ;teris_16f886.c: 1170: {
  4523                           ;teris_16f886.c: 1174: sprintf(g_debug, "temp_high(%d) == temp_pre_high(%d)\n", temp_hig
      +                          h, temp_pre_high);
  4524  05FA  30E3               	movlw	low (STR_47| (0+32768))
  4525  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  4526  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  4527  05FD  00A0               	movwf	sprintf@f
  4528  05FE  308A               	movlw	high (STR_47| (0+32768))
  4529  05FF  00A1               	movwf	sprintf@f+1
  4530  0600  1683               	bsf	3,5	;RP0=1, select bank1
  4531  0601  1303               	bcf	3,6	;RP1=0, select bank1
  4532  0602  086B               	movf	_temp_high^(0+128),w
  4533  0603  1283               	bcf	3,5	;RP0=0, select bank0
  4534  0604  1303               	bcf	3,6	;RP1=0, select bank0
  4535  0605  00BE               	movwf	??_find_best_solution
  4536  0606  01BF               	clrf	??_find_best_solution+1
  4537  0607  083E               	movf	??_find_best_solution,w
  4538  0608  00A2               	movwf	?_sprintf+2
  4539  0609  083F               	movf	??_find_best_solution+1,w
  4540  060A  00A3               	movwf	?_sprintf+3
  4541  060B  1683               	bsf	3,5	;RP0=1, select bank1
  4542  060C  1303               	bcf	3,6	;RP1=0, select bank1
  4543  060D  086E               	movf	_temp_pre_high^(0+128),w
  4544  060E  1283               	bcf	3,5	;RP0=0, select bank0
  4545  060F  1303               	bcf	3,6	;RP1=0, select bank0
  4546  0610  00C0               	movwf	??_find_best_solution+2
  4547  0611  01C1               	clrf	??_find_best_solution+3
  4548  0612  0840               	movf	??_find_best_solution+2,w
  4549  0613  00A4               	movwf	?_sprintf+4
  4550  0614  0841               	movf	??_find_best_solution+3,w
  4551  0615  00A5               	movwf	?_sprintf+5
  4552  0616  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4553  0617  120A  118A  2012  120A  118A  	fcall	_sprintf
  4554                           
  4555                           ;teris_16f886.c: 1175: USARTWriteString(g_debug);
  4556  061C  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4557  061D  00F1               	movwf	USARTWriteString@str
  4558  061E  3001               	movlw	1
  4559  061F  00F2               	movwf	USARTWriteString@str+1
  4560  0620  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  4561                           
  4562                           ;teris_16f886.c: 1177: if(temp_hole < temp_pre_hole)
  4563  0625  1683               	bsf	3,5	;RP0=1, select bank1
  4564  0626  1303               	bcf	3,6	;RP1=0, select bank1
  4565  0627  086F               	movf	_temp_pre_hole^(0+128),w
  4566  0628  026C               	subwf	_temp_hole^(0+128),w
  4567  0629  1803               	skipnc
  4568  062A  2F77               	goto	l4248
  4569  062B  2EC0               	goto	L8
  4570  062C                     l4190:	
  4571                           ;teris_16f886.c: 1191: }
  4572                           ;teris_16f886.c: 1193: }
  4573                           ;teris_16f886.c: 1195: }
  4574                           ;teris_16f886.c: 1196: }
  4575                           
  4576                           ;teris_16f886.c: 1190: temp_pre_x = temp_x;
  4577                           
  4578                           ;teris_16f886.c: 1189: tem_pre_sub_index = tem_sub_index;
  4579                           
  4580                           ;teris_16f886.c: 1188: temp_pre_hole = temp_hole;
  4581                           
  4582                           ;teris_16f886.c: 1187: temp_pre_high = temp_high;
  4583                           
  4584                           ;teris_16f886.c: 1186: temp_pre_risk = temp_risk;
  4585                           
  4586                           ;teris_16f886.c: 1185: temp_pre_count = temp_count;
  4587                           
  4588                           ;teris_16f886.c: 1183: USARTWriteString(g_debug);
  4589                           
  4590                           ;teris_16f886.c: 1178: {
  4591                           ;teris_16f886.c: 1182: sprintf(g_debug, "temp_hole(%d) < temp_pre_hole(%d)\n", temp_hole
      +                          , temp_pre_hole);
  4592                           
  4593                           
  4594                           ;teris_16f886.c: 1197: else
  4595                           ;teris_16f886.c: 1198: {
  4596                           ;teris_16f886.c: 1203: sprintf(g_debug, "WARNING height > (%d)\n", 8/2 + 1);
  4597  062C  307E               	movlw	low (STR_49| (0+32768))
  4598  062D  00A0               	movwf	sprintf@f
  4599  062E  308D               	movlw	high (STR_49| (0+32768))
  4600  062F  00A1               	movwf	sprintf@f+1
  4601  0630  3005               	movlw	5
  4602  0631  00A2               	movwf	?_sprintf+2
  4603  0632  3000               	movlw	0
  4604  0633  00A3               	movwf	?_sprintf+3
  4605  0634  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4606  0635  120A  118A  2012  120A  118A  	fcall	_sprintf
  4607                           
  4608                           ;teris_16f886.c: 1204: USARTWriteString(g_debug);
  4609  063A  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4610  063B  00F1               	movwf	USARTWriteString@str
  4611  063C  3001               	movlw	1
  4612  063D  00F2               	movwf	USARTWriteString@str+1
  4613  063E  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  4614                           
  4615                           ;teris_16f886.c: 1206: sprintf(g_debug, "temp_high = %d, temp_pre_high = %d\n", temp_hig
      +                          h, temp_pre_high);
  4616  0643  302B               	movlw	low (STR_50| (0+32768))
  4617  0644  1283               	bcf	3,5	;RP0=0, select bank0
  4618  0645  1303               	bcf	3,6	;RP1=0, select bank0
  4619  0646  00A0               	movwf	sprintf@f
  4620  0647  308B               	movlw	high (STR_50| (0+32768))
  4621  0648  00A1               	movwf	sprintf@f+1
  4622  0649  1683               	bsf	3,5	;RP0=1, select bank1
  4623  064A  1303               	bcf	3,6	;RP1=0, select bank1
  4624  064B  086B               	movf	_temp_high^(0+128),w
  4625  064C  1283               	bcf	3,5	;RP0=0, select bank0
  4626  064D  1303               	bcf	3,6	;RP1=0, select bank0
  4627  064E  00BE               	movwf	??_find_best_solution
  4628  064F  01BF               	clrf	??_find_best_solution+1
  4629  0650  083E               	movf	??_find_best_solution,w
  4630  0651  00A2               	movwf	?_sprintf+2
  4631  0652  083F               	movf	??_find_best_solution+1,w
  4632  0653  00A3               	movwf	?_sprintf+3
  4633  0654  1683               	bsf	3,5	;RP0=1, select bank1
  4634  0655  1303               	bcf	3,6	;RP1=0, select bank1
  4635  0656  086E               	movf	_temp_pre_high^(0+128),w
  4636  0657  1283               	bcf	3,5	;RP0=0, select bank0
  4637  0658  1303               	bcf	3,6	;RP1=0, select bank0
  4638  0659  00C0               	movwf	??_find_best_solution+2
  4639  065A  01C1               	clrf	??_find_best_solution+3
  4640  065B  0840               	movf	??_find_best_solution+2,w
  4641  065C  00A4               	movwf	?_sprintf+4
  4642  065D  0841               	movf	??_find_best_solution+3,w
  4643  065E  00A5               	movwf	?_sprintf+5
  4644  065F  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4645  0660  120A  118A  2012  120A  118A  	fcall	_sprintf
  4646                           
  4647                           ;teris_16f886.c: 1207: USARTWriteString(g_debug);
  4648  0665  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4649  0666  00F1               	movwf	USARTWriteString@str
  4650  0667  3001               	movlw	1
  4651  0668  00F2               	movwf	USARTWriteString@str+1
  4652  0669  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  4653                           
  4654                           ;teris_16f886.c: 1209: if(temp_high < temp_pre_high)
  4655  066E  1683               	bsf	3,5	;RP0=1, select bank1
  4656  066F  1303               	bcf	3,6	;RP1=0, select bank1
  4657  0670  086E               	movf	_temp_pre_high^(0+128),w
  4658  0671  026B               	subwf	_temp_high^(0+128),w
  4659  0672  1803               	skipnc
  4660  0673  2E89               	goto	l4208
  4661  0674                     L9:	
  4662                           
  4663                           ;teris_16f886.c: 1210: {
  4664                           ;teris_16f886.c: 1214: sprintf(g_debug, "temp_high(%d) < temp_pre_high(%d)\n", temp_high
      +                          , temp_pre_high);
  4665  0674  3096               	movlw	low (STR_46| (0+32768))
  4666  0675  1283               	bcf	3,5	;RP0=0, select bank0
  4667  0676  1303               	bcf	3,6	;RP1=0, select bank0
  4668  0677  00A0               	movwf	sprintf@f
  4669  0678  308B               	movlw	high (STR_46| (0+32768))
  4670  0679  00A1               	movwf	sprintf@f+1
  4671  067A  1683               	bsf	3,5	;RP0=1, select bank1
  4672  067B  1303               	bcf	3,6	;RP1=0, select bank1
  4673  067C  086B               	movf	_temp_high^(0+128),w
  4674  067D  1283               	bcf	3,5	;RP0=0, select bank0
  4675  067E  1303               	bcf	3,6	;RP1=0, select bank0
  4676  067F  00BE               	movwf	??_find_best_solution
  4677  0680  01BF               	clrf	??_find_best_solution+1
  4678  0681  083E               	movf	??_find_best_solution,w
  4679  0682  00A2               	movwf	?_sprintf+2
  4680  0683  083F               	movf	??_find_best_solution+1,w
  4681  0684  00A3               	movwf	?_sprintf+3
  4682  0685  1683               	bsf	3,5	;RP0=1, select bank1
  4683  0686  1303               	bcf	3,6	;RP1=0, select bank1
  4684  0687  086E               	movf	_temp_pre_high^(0+128),w
  4685  0688  2ED4               	goto	L5
  4686  0689                     l4208:	
  4687                           ;teris_16f886.c: 1223: }
  4688                           
  4689                           ;teris_16f886.c: 1222: temp_pre_x = temp_x;
  4690                           
  4691                           ;teris_16f886.c: 1221: tem_pre_sub_index = tem_sub_index;
  4692                           
  4693                           ;teris_16f886.c: 1220: temp_pre_hole = temp_hole;
  4694                           
  4695                           ;teris_16f886.c: 1219: temp_pre_high = temp_high;
  4696                           
  4697                           ;teris_16f886.c: 1218: temp_pre_risk = temp_risk;
  4698                           
  4699                           ;teris_16f886.c: 1217: temp_pre_count = temp_count;
  4700                           
  4701                           ;teris_16f886.c: 1215: USARTWriteString(g_debug);
  4702                           
  4703                           
  4704                           ;teris_16f886.c: 1224: else if(temp_high == temp_pre_high)
  4705  0689  1683               	bsf	3,5	;RP0=1, select bank1
  4706  068A  1303               	bcf	3,6	;RP1=0, select bank1
  4707  068B  086B               	movf	_temp_high^(0+128),w
  4708  068C  066E               	xorwf	_temp_pre_high^(0+128),w
  4709  068D  1D03               	skipz
  4710  068E  2F77               	goto	l4248
  4711                           
  4712                           ;teris_16f886.c: 1225: {
  4713                           ;teris_16f886.c: 1229: sprintf(g_debug, "temp_high(%d) == temp_pre_high(%d)\n", temp_hig
      +                          h, temp_pre_high);
  4714  068F  30E3               	movlw	low (STR_47| (0+32768))
  4715  0690  1283               	bcf	3,5	;RP0=0, select bank0
  4716  0691  1303               	bcf	3,6	;RP1=0, select bank0
  4717  0692  00A0               	movwf	sprintf@f
  4718  0693  308A               	movlw	high (STR_47| (0+32768))
  4719  0694  00A1               	movwf	sprintf@f+1
  4720  0695  1683               	bsf	3,5	;RP0=1, select bank1
  4721  0696  1303               	bcf	3,6	;RP1=0, select bank1
  4722  0697  086B               	movf	_temp_high^(0+128),w
  4723  0698  1283               	bcf	3,5	;RP0=0, select bank0
  4724  0699  1303               	bcf	3,6	;RP1=0, select bank0
  4725  069A  00BE               	movwf	??_find_best_solution
  4726  069B  01BF               	clrf	??_find_best_solution+1
  4727  069C  083E               	movf	??_find_best_solution,w
  4728  069D  00A2               	movwf	?_sprintf+2
  4729  069E  083F               	movf	??_find_best_solution+1,w
  4730  069F  00A3               	movwf	?_sprintf+3
  4731  06A0  1683               	bsf	3,5	;RP0=1, select bank1
  4732  06A1  1303               	bcf	3,6	;RP1=0, select bank1
  4733  06A2  086E               	movf	_temp_pre_high^(0+128),w
  4734  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  4735  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  4736  06A5  00C0               	movwf	??_find_best_solution+2
  4737  06A6  01C1               	clrf	??_find_best_solution+3
  4738  06A7  0840               	movf	??_find_best_solution+2,w
  4739  06A8  00A4               	movwf	?_sprintf+4
  4740  06A9  0841               	movf	??_find_best_solution+3,w
  4741  06AA  00A5               	movwf	?_sprintf+5
  4742  06AB  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4743  06AC  120A  118A  2012  120A  118A  	fcall	_sprintf
  4744                           
  4745                           ;teris_16f886.c: 1230: USARTWriteString(g_debug);
  4746  06B1  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4747  06B2  00F1               	movwf	USARTWriteString@str
  4748  06B3  3001               	movlw	1
  4749  06B4  00F2               	movwf	USARTWriteString@str+1
  4750  06B5  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  4751                           
  4752                           ;teris_16f886.c: 1232: if(temp_hole < temp_pre_hole)
  4753  06BA  1683               	bsf	3,5	;RP0=1, select bank1
  4754  06BB  1303               	bcf	3,6	;RP1=0, select bank1
  4755  06BC  086F               	movf	_temp_pre_hole^(0+128),w
  4756  06BD  026C               	subwf	_temp_hole^(0+128),w
  4757  06BE  1803               	skipnc
  4758  06BF  2EDD               	goto	l4228
  4759  06C0                     L8:	
  4760                           
  4761                           ;teris_16f886.c: 1233: {
  4762                           ;teris_16f886.c: 1237: sprintf(g_debug, "temp_hole(%d) < temp_pre_hole(%d)\n", temp_hole
      +                          , temp_pre_hole);
  4763  06C0  3073               	movlw	low (STR_48| (0+32768))
  4764  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  4765  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  4766  06C3  00A0               	movwf	sprintf@f
  4767  06C4  308B               	movlw	high (STR_48| (0+32768))
  4768  06C5  00A1               	movwf	sprintf@f+1
  4769  06C6  1683               	bsf	3,5	;RP0=1, select bank1
  4770  06C7  1303               	bcf	3,6	;RP1=0, select bank1
  4771  06C8  086C               	movf	_temp_hole^(0+128),w
  4772  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  4773  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  4774  06CB  00BE               	movwf	??_find_best_solution
  4775  06CC  01BF               	clrf	??_find_best_solution+1
  4776  06CD  083E               	movf	??_find_best_solution,w
  4777  06CE  00A2               	movwf	?_sprintf+2
  4778  06CF  083F               	movf	??_find_best_solution+1,w
  4779  06D0  00A3               	movwf	?_sprintf+3
  4780  06D1  1683               	bsf	3,5	;RP0=1, select bank1
  4781  06D2  1303               	bcf	3,6	;RP1=0, select bank1
  4782  06D3  086F               	movf	_temp_pre_hole^(0+128),w
  4783  06D4                     L5:	
  4784  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  4785  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  4786  06D6                     L6:	
  4787  06D6  00C0               	movwf	??_find_best_solution+2
  4788  06D7  01C1               	clrf	??_find_best_solution+3
  4789  06D8  0840               	movf	??_find_best_solution+2,w
  4790  06D9  00A4               	movwf	?_sprintf+4
  4791  06DA  0841               	movf	??_find_best_solution+3,w
  4792  06DB  00A5               	movwf	?_sprintf+5
  4793  06DC  2F34               	goto	L2
  4794  06DD                     l4228:	
  4795                           ;teris_16f886.c: 1246: }
  4796                           
  4797                           ;teris_16f886.c: 1245: temp_pre_x = temp_x;
  4798                           
  4799                           ;teris_16f886.c: 1244: tem_pre_sub_index = tem_sub_index;
  4800                           
  4801                           ;teris_16f886.c: 1243: temp_pre_hole = temp_hole;
  4802                           
  4803                           ;teris_16f886.c: 1242: temp_pre_high = temp_high;
  4804                           
  4805                           ;teris_16f886.c: 1241: temp_pre_risk = temp_risk;
  4806                           
  4807                           ;teris_16f886.c: 1240: temp_pre_count = temp_count;
  4808                           
  4809                           ;teris_16f886.c: 1238: USARTWriteString(g_debug);
  4810                           
  4811                           
  4812                           ;teris_16f886.c: 1247: else if(temp_hole == temp_pre_hole)
  4813  06DD  1683               	bsf	3,5	;RP0=1, select bank1
  4814  06DE  1303               	bcf	3,6	;RP1=0, select bank1
  4815  06DF  086C               	movf	_temp_hole^(0+128),w
  4816  06E0  066F               	xorwf	_temp_pre_hole^(0+128),w
  4817  06E1  1D03               	skipz
  4818  06E2  2F77               	goto	l4248
  4819                           
  4820                           ;teris_16f886.c: 1248: {
  4821                           ;teris_16f886.c: 1252: sprintf(g_debug, "temp_hole(%d) == temp_pre_hole(%d)\n", temp_hol
      +                          e, temp_pre_hole);
  4822  06E3  30BF               	movlw	low (STR_54| (0+32768))
  4823  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  4824  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  4825  06E6  00A0               	movwf	sprintf@f
  4826  06E7  308A               	movlw	high (STR_54| (0+32768))
  4827  06E8  00A1               	movwf	sprintf@f+1
  4828  06E9  1683               	bsf	3,5	;RP0=1, select bank1
  4829  06EA  1303               	bcf	3,6	;RP1=0, select bank1
  4830  06EB  086C               	movf	_temp_hole^(0+128),w
  4831  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  4832  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  4833  06EE  00BE               	movwf	??_find_best_solution
  4834  06EF  01BF               	clrf	??_find_best_solution+1
  4835  06F0  083E               	movf	??_find_best_solution,w
  4836  06F1  00A2               	movwf	?_sprintf+2
  4837  06F2  083F               	movf	??_find_best_solution+1,w
  4838  06F3  00A3               	movwf	?_sprintf+3
  4839  06F4  1683               	bsf	3,5	;RP0=1, select bank1
  4840  06F5  1303               	bcf	3,6	;RP1=0, select bank1
  4841  06F6  086F               	movf	_temp_pre_hole^(0+128),w
  4842  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  4843  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  4844  06F9  00C0               	movwf	??_find_best_solution+2
  4845  06FA  01C1               	clrf	??_find_best_solution+3
  4846  06FB  0840               	movf	??_find_best_solution+2,w
  4847  06FC  00A4               	movwf	?_sprintf+4
  4848  06FD  0841               	movf	??_find_best_solution+3,w
  4849  06FE  00A5               	movwf	?_sprintf+5
  4850  06FF  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4851  0700  120A  118A  2012  120A  118A  	fcall	_sprintf
  4852                           
  4853                           ;teris_16f886.c: 1253: USARTWriteString(g_debug);
  4854  0705  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4855  0706  00F1               	movwf	USARTWriteString@str
  4856  0707  3001               	movlw	1
  4857  0708  00F2               	movwf	USARTWriteString@str+1
  4858  0709  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  4859                           
  4860                           ;teris_16f886.c: 1255: if(temp_risk < temp_pre_risk)
  4861  070E  1283               	bcf	3,5	;RP0=0, select bank0
  4862  070F  1303               	bcf	3,6	;RP1=0, select bank0
  4863  0710  0864               	movf	_temp_pre_risk+1,w
  4864  0711  1683               	bsf	3,5	;RP0=1, select bank1
  4865  0712  1303               	bcf	3,6	;RP1=0, select bank1
  4866  0713  0268               	subwf	(_temp_risk+1)^(0+128),w
  4867  0714  1D03               	skipz
  4868  0715  2F1C               	goto	u5515
  4869  0716  1283               	bcf	3,5	;RP0=0, select bank0
  4870  0717  1303               	bcf	3,6	;RP1=0, select bank0
  4871  0718  0863               	movf	_temp_pre_risk,w
  4872  0719  1683               	bsf	3,5	;RP0=1, select bank1
  4873  071A  1303               	bcf	3,6	;RP1=0, select bank1
  4874  071B  0267               	subwf	_temp_risk^(0+128),w
  4875  071C                     u5515:	
  4876  071C  1803               	skipnc
  4877  071D  2F77               	goto	l4248
  4878  071E                     L7:	
  4879                           
  4880                           ;teris_16f886.c: 1256: {
  4881                           ;teris_16f886.c: 1260: sprintf(g_debug, "temp_risk(%d) < temp_pre_risk(%d)\n", temp_risk
      +                          , temp_pre_risk);
  4882  071E  30B9               	movlw	low (STR_44| (0+32768))
  4883  071F  1283               	bcf	3,5	;RP0=0, select bank0
  4884  0720  1303               	bcf	3,6	;RP1=0, select bank0
  4885  0721  00A0               	movwf	sprintf@f
  4886  0722  308B               	movlw	high (STR_44| (0+32768))
  4887  0723  00A1               	movwf	sprintf@f+1
  4888  0724  1683               	bsf	3,5	;RP0=1, select bank1
  4889  0725  1303               	bcf	3,6	;RP1=0, select bank1
  4890  0726  0868               	movf	(_temp_risk+1)^(0+128),w
  4891  0727  1283               	bcf	3,5	;RP0=0, select bank0
  4892  0728  1303               	bcf	3,6	;RP1=0, select bank0
  4893  0729  00A3               	movwf	?_sprintf+3
  4894  072A  1683               	bsf	3,5	;RP0=1, select bank1
  4895  072B  1303               	bcf	3,6	;RP1=0, select bank1
  4896  072C  0867               	movf	_temp_risk^(0+128),w
  4897  072D  1283               	bcf	3,5	;RP0=0, select bank0
  4898  072E  1303               	bcf	3,6	;RP1=0, select bank0
  4899  072F  00A2               	movwf	?_sprintf+2
  4900  0730  0864               	movf	_temp_pre_risk+1,w
  4901  0731  00A5               	movwf	?_sprintf+5
  4902  0732  0863               	movf	_temp_pre_risk,w
  4903  0733  00A4               	movwf	?_sprintf+4
  4904  0734                     L2:	
  4905  0734  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4906  0735  120A  118A  2012  120A  118A  	fcall	_sprintf
  4907                           
  4908                           ;teris_16f886.c: 1261: USARTWriteString(g_debug);
  4909  073A  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  4910  073B  00F1               	movwf	USARTWriteString@str
  4911  073C  3001               	movlw	1
  4912  073D  00F2               	movwf	USARTWriteString@str+1
  4913  073E  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  4914                           
  4915                           ;teris_16f886.c: 1263: temp_pre_count = temp_count;
  4916  0743  1683               	bsf	3,5	;RP0=1, select bank1
  4917  0744  1303               	bcf	3,6	;RP1=0, select bank1
  4918  0745  086A               	movf	_temp_count^(0+128),w
  4919  0746  1283               	bcf	3,5	;RP0=0, select bank0
  4920  0747  1303               	bcf	3,6	;RP1=0, select bank0
  4921  0748  00BE               	movwf	??_find_best_solution
  4922  0749  083E               	movf	??_find_best_solution,w
  4923  074A  00DD               	movwf	_temp_pre_count
  4924                           
  4925                           ;teris_16f886.c: 1264: temp_pre_risk = temp_risk;
  4926  074B  1683               	bsf	3,5	;RP0=1, select bank1
  4927  074C  1303               	bcf	3,6	;RP1=0, select bank1
  4928  074D  0868               	movf	(_temp_risk+1)^(0+128),w
  4929  074E  1283               	bcf	3,5	;RP0=0, select bank0
  4930  074F  1303               	bcf	3,6	;RP1=0, select bank0
  4931  0750  00E4               	movwf	_temp_pre_risk+1
  4932  0751  1683               	bsf	3,5	;RP0=1, select bank1
  4933  0752  1303               	bcf	3,6	;RP1=0, select bank1
  4934  0753  0867               	movf	_temp_risk^(0+128),w
  4935  0754  1283               	bcf	3,5	;RP0=0, select bank0
  4936  0755  1303               	bcf	3,6	;RP1=0, select bank0
  4937  0756  00E3               	movwf	_temp_pre_risk
  4938                           
  4939                           ;teris_16f886.c: 1265: temp_pre_high = temp_high;
  4940  0757  1683               	bsf	3,5	;RP0=1, select bank1
  4941  0758  1303               	bcf	3,6	;RP1=0, select bank1
  4942  0759  086B               	movf	_temp_high^(0+128),w
  4943  075A  1283               	bcf	3,5	;RP0=0, select bank0
  4944  075B  1303               	bcf	3,6	;RP1=0, select bank0
  4945  075C  00BE               	movwf	??_find_best_solution
  4946  075D  083E               	movf	??_find_best_solution,w
  4947  075E  1683               	bsf	3,5	;RP0=1, select bank1
  4948  075F  1303               	bcf	3,6	;RP1=0, select bank1
  4949  0760  00EE               	movwf	_temp_pre_high^(0+128)
  4950                           
  4951                           ;teris_16f886.c: 1266: temp_pre_hole = temp_hole;
  4952  0761  086C               	movf	_temp_hole^(0+128),w
  4953  0762  1283               	bcf	3,5	;RP0=0, select bank0
  4954  0763  1303               	bcf	3,6	;RP1=0, select bank0
  4955  0764  00BE               	movwf	??_find_best_solution
  4956  0765  083E               	movf	??_find_best_solution,w
  4957  0766  1683               	bsf	3,5	;RP0=1, select bank1
  4958  0767  1303               	bcf	3,6	;RP1=0, select bank1
  4959  0768  00EF               	movwf	_temp_pre_hole^(0+128)
  4960                           
  4961                           ;teris_16f886.c: 1267: tem_pre_sub_index = tem_sub_index;
  4962  0769  0865               	movf	find_best_solution@tem_sub_index^(0+128),w
  4963  076A  1283               	bcf	3,5	;RP0=0, select bank0
  4964  076B  1303               	bcf	3,6	;RP1=0, select bank0
  4965  076C  00BE               	movwf	??_find_best_solution
  4966  076D  083E               	movf	??_find_best_solution,w
  4967  076E  00E5               	movwf	_tem_pre_sub_index
  4968                           
  4969                           ;teris_16f886.c: 1268: temp_pre_x = temp_x;
  4970  076F  1683               	bsf	3,5	;RP0=1, select bank1
  4971  0770  1303               	bcf	3,6	;RP1=0, select bank1
  4972  0771  0866               	movf	find_best_solution@temp_x^(0+128),w
  4973  0772  1283               	bcf	3,5	;RP0=0, select bank0
  4974  0773  1303               	bcf	3,6	;RP1=0, select bank0
  4975  0774  00BE               	movwf	??_find_best_solution
  4976  0775  083E               	movf	??_find_best_solution,w
  4977  0776  00E6               	movwf	_temp_pre_x
  4978  0777                     l4248:	
  4979  0777  3001               	movlw	1
  4980  0778  1283               	bcf	3,5	;RP0=0, select bank0
  4981  0779  1303               	bcf	3,6	;RP1=0, select bank0
  4982  077A  00BE               	movwf	??_find_best_solution
  4983  077B  083E               	movf	??_find_best_solution,w
  4984  077C  1683               	bsf	3,5	;RP0=1, select bank1
  4985  077D  1303               	bcf	3,6	;RP1=0, select bank1
  4986  077E  07E6               	addwf	find_best_solution@temp_x^(0+128),f
  4987  077F  2C61               	goto	l4250
  4988  0780                     l4252:	
  4989  0780  3001               	movlw	1
  4990  0781  00BE               	movwf	??_find_best_solution
  4991  0782  083E               	movf	??_find_best_solution,w
  4992  0783  1683               	bsf	3,5	;RP0=1, select bank1
  4993  0784  1303               	bcf	3,6	;RP1=0, select bank1
  4994  0785  07E5               	addwf	find_best_solution@tem_sub_index^(0+128),f
  4995  0786  2BCE               	goto	l4254
  4996  0787                     l4256:	
  4997                           
  4998                           ;teris_16f886.c: 1269: }
  4999                           ;teris_16f886.c: 1270: }
  5000                           ;teris_16f886.c: 1271: }
  5001                           ;teris_16f886.c: 1272: }
  5002                           ;teris_16f886.c: 1273: }
  5003                           ;teris_16f886.c: 1280: }
  5004                           ;teris_16f886.c: 1281: }
  5005                           ;teris_16f886.c: 1282: if(res == 1)
  5006  0787  0322               	decf	find_best_solution@res^(0+128),w
  5007  0788  1D03               	btfss	3,2
  5008  0789  2FA9               	goto	l4262
  5009                           
  5010                           ;teris_16f886.c: 1283: {
  5011                           ;teris_16f886.c: 1284: g_char_info[g_char_info_index].cur_index = tem_pre_sub_index;
  5012  078A  1283               	bcf	3,5	;RP0=0, select bank0
  5013  078B  1303               	bcf	3,6	;RP1=0, select bank0
  5014  078C  0865               	movf	_tem_pre_sub_index,w
  5015  078D  00BE               	movwf	??_find_best_solution
  5016  078E  3003               	movlw	3
  5017  078F  00BF               	movwf	??_find_best_solution+1
  5018  0790  083F               	movf	??_find_best_solution+1,w
  5019  0791  00F0               	movwf	___bmul@multiplicand
  5020  0792  1683               	bsf	3,5	;RP0=1, select bank1
  5021  0793  1303               	bcf	3,6	;RP1=0, select bank1
  5022  0794  0869               	movf	_g_char_info_index^(0+128),w
  5023  0795  160A  158A  2648  120A  118A  	fcall	___bmul
  5024  079A  3E01               	addlw	1
  5025  079B  3ED0               	addlw	(low (_g_char_info| (0+256)))& (0+255)
  5026  079C  0084               	movwf	4
  5027  079D  1283               	bcf	3,5	;RP0=0, select bank0
  5028  079E  1303               	bcf	3,6	;RP1=0, select bank0
  5029  079F  083E               	movf	??_find_best_solution,w
  5030  07A0  1783               	bsf	3,7	;select IRP bank3
  5031  07A1  0080               	movwf	0
  5032                           
  5033                           ;teris_16f886.c: 1285: cur_x = temp_pre_x;
  5034  07A2  0866               	movf	_temp_pre_x,w
  5035  07A3  00BE               	movwf	??_find_best_solution
  5036  07A4  083E               	movf	??_find_best_solution,w
  5037  07A5  1683               	bsf	3,5	;RP0=1, select bank1
  5038  07A6  1303               	bcf	3,6	;RP1=0, select bank1
  5039  07A7  00ED               	movwf	_cur_x^(0+128)
  5040                           
  5041                           ;teris_16f886.c: 1293: }
  5042  07A8  2FB0               	goto	l4264
  5043  07A9                     l4262:	
  5044                           
  5045                           ;teris_16f886.c: 1294: else
  5046                           ;teris_16f886.c: 1295: {
  5047                           ;teris_16f886.c: 1299: USARTWriteString("GAME OVER!!!\r\n");
  5048  07A9  3018               	movlw	low (STR_56| (0+32768))
  5049  07AA  00F1               	movwf	USARTWriteString@str
  5050  07AB  308E               	movlw	high (STR_56| (0+32768))
  5051  07AC  00F2               	movwf	USARTWriteString@str+1
  5052  07AD  160A  158A  270C   	fcall	_USARTWriteString
  5053  07B0                     l4264:	
  5054                           
  5055                           ;teris_16f886.c: 1301: }
  5056                           ;teris_16f886.c: 1302: return res;
  5057  07B0  1683               	bsf	3,5	;RP0=1, select bank1
  5058  07B1  1303               	bcf	3,6	;RP1=0, select bank1
  5059  07B2  0822               	movf	find_best_solution@res^(0+128),w
  5060  07B3  0008               	return
  5061  07B4                     __end_of_find_best_solution:	
  5062                           
  5063                           	psect	text5
  5064  1077                     __ptext5:	
  5065 ;; *************** function _right_most *****************
  5066 ;; Defined at:
  5067 ;;		line 919 in file "teris_16f886.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;  x               1    wreg     char 
  5070 ;;  matrix44        2   18[BANK0 ] PTR const struct .
  5071 ;;		 -> g_matrix44(384), 
  5072 ;;  matrix88        1   20[BANK0 ] PTR const struct .
  5073 ;;		 -> g_matrix88(64), 
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;  x               1   23[BANK0 ] char 
  5076 ;; Return value:  Size  Location     Type
  5077 ;;                  1    wreg      char 
  5078 ;; Registers used:
  5079 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5085 ;;      Params:         0       3       0       0       0
  5086 ;;      Locals:         0       1       0       0       0
  5087 ;;      Temps:          0       2       0       0       0
  5088 ;;      Totals:         0       6       0       0       0
  5089 ;;Total ram usage:        6 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; Hardware stack levels required when called:    3
  5092 ;; This function calls:
  5093 ;;		_USARTWriteString
  5094 ;;		_is_right_boundary
  5095 ;;		_sprintf
  5096 ;; This function is called by:
  5097 ;;		_find_best_solution
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           
  5102                           ;psect for function _right_most
  5103  1077                     _right_most:	
  5104                           
  5105                           ;incstack = 0
  5106                           ; Regs used in _right_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5107                           ;right_most@x stored from wreg
  5108  1077  1283               	bcf	3,5	;RP0=0, select bank0
  5109  1078  1303               	bcf	3,6	;RP1=0, select bank0
  5110  1079  00B7               	movwf	right_most@x
  5111  107A                     l365:	
  5112                           ;teris_16f886.c: 921: while(1)
  5113                           
  5114                           
  5115                           ;teris_16f886.c: 922: {
  5116                           ;teris_16f886.c: 923: if(is_right_boundary(x, matrix44, matrix88) == RIGHT_OVER_BOUNDARY
      +                          )
  5117  107A  0832               	movf	right_most@matrix44,w
  5118  107B  00F3               	movwf	is_right_boundary@matrix44
  5119  107C  0833               	movf	right_most@matrix44+1,w
  5120  107D  00F4               	movwf	is_right_boundary@matrix44+1
  5121  107E  0834               	movf	right_most@matrix88,w
  5122  107F  00B5               	movwf	??_right_most
  5123  1080  0835               	movf	??_right_most,w
  5124  1081  00F5               	movwf	is_right_boundary@matrix88
  5125  1082  0837               	movf	right_most@x,w
  5126  1083  160A  118A  2379  160A  118A  	fcall	_is_right_boundary
  5127  1088  3A03               	xorlw	3
  5128  1089  1D03               	skipz
  5129  108A  28B0               	goto	l3086
  5130                           
  5131                           ;teris_16f886.c: 924: {
  5132                           ;teris_16f886.c: 928: sprintf(g_debug, "right_most = %d\n", x - 1);
  5133  108B  30E7               	movlw	low (STR_34| (0+32768))
  5134  108C  1283               	bcf	3,5	;RP0=0, select bank0
  5135  108D  1303               	bcf	3,6	;RP1=0, select bank0
  5136  108E  00A0               	movwf	sprintf@f
  5137  108F  308D               	movlw	high (STR_34| (0+32768))
  5138  1090  00A1               	movwf	sprintf@f+1
  5139  1091  0837               	movf	right_most@x,w
  5140  1092  00B5               	movwf	??_right_most
  5141  1093  01B6               	clrf	??_right_most+1
  5142  1094  1BB5               	btfsc	??_right_most,7
  5143  1095  03B6               	decf	??_right_most+1,f
  5144  1096  0835               	movf	??_right_most,w
  5145  1097  3EFF               	addlw	255
  5146  1098  00A2               	movwf	?_sprintf+2
  5147  1099  0836               	movf	??_right_most+1,w
  5148  109A  1803               	skipnc
  5149  109B  3E01               	addlw	1
  5150  109C  3EFF               	addlw	255
  5151  109D  00A3               	movwf	?_sprintf+3
  5152  109E  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  5153  109F  120A  118A  2012  160A  118A  	fcall	_sprintf
  5154                           
  5155                           ;teris_16f886.c: 929: USARTWriteString(g_debug);
  5156  10A4  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  5157  10A5  00F1               	movwf	USARTWriteString@str
  5158  10A6  3001               	movlw	1
  5159  10A7  00F2               	movwf	USARTWriteString@str+1
  5160  10A8  160A  158A  270C   	fcall	_USARTWriteString
  5161                           
  5162                           ;teris_16f886.c: 931: return x - 1;
  5163  10AB  1283               	bcf	3,5	;RP0=0, select bank0
  5164  10AC  1303               	bcf	3,6	;RP1=0, select bank0
  5165  10AD  0837               	movf	right_most@x,w
  5166  10AE  3EFF               	addlw	-1
  5167  10AF  0008               	return
  5168  10B0                     l3086:	
  5169                           
  5170                           ;teris_16f886.c: 932: }
  5171                           ;teris_16f886.c: 933: x++;
  5172  10B0  3001               	movlw	1
  5173  10B1  1283               	bcf	3,5	;RP0=0, select bank0
  5174  10B2  1303               	bcf	3,6	;RP1=0, select bank0
  5175  10B3  00B5               	movwf	??_right_most
  5176  10B4  0835               	movf	??_right_most,w
  5177  10B5  07B7               	addwf	right_most@x,f
  5178  10B6  287A               	goto	l365
  5179  10B7                     __end_of_right_most:	
  5180                           
  5181                           	psect	text6
  5182  1379                     __ptext6:	
  5183 ;; *************** function _is_right_boundary *****************
  5184 ;; Defined at:
  5185 ;;		line 758 in file "teris_16f886.c"
  5186 ;; Parameters:    Size  Location     Type
  5187 ;;  x               1    wreg     char 
  5188 ;;  matrix44        2    3[COMMON] PTR const struct .
  5189 ;;		 -> g_matrix44(384), 
  5190 ;;  matrix88        1    5[COMMON] PTR const struct .
  5191 ;;		 -> g_matrix88(64), 
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;  x               1   10[COMMON] char 
  5194 ;;  col             1   12[COMMON] char 
  5195 ;;  row             1   11[COMMON] char 
  5196 ;; Return value:  Size  Location     Type
  5197 ;;                  1    wreg      unsigned char 
  5198 ;; Registers used:
  5199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5205 ;;      Params:         3       0       0       0       0
  5206 ;;      Locals:         3       0       0       0       0
  5207 ;;      Temps:          4       0       0       0       0
  5208 ;;      Totals:        10       0       0       0       0
  5209 ;;Total ram usage:       10 bytes
  5210 ;; Hardware stack levels used:    1
  5211 ;; Hardware stack levels required when called:    2
  5212 ;; This function calls:
  5213 ;;		_USARTWriteString
  5214 ;; This function is called by:
  5215 ;;		_right_most
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           
  5220                           ;psect for function _is_right_boundary
  5221  1379                     _is_right_boundary:	
  5222                           
  5223                           ;incstack = 0
  5224                           ; Regs used in _is_right_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5225                           ;is_right_boundary@x stored from wreg
  5226  1379  00FA               	movwf	is_right_boundary@x
  5227                           
  5228                           ;teris_16f886.c: 760: for(int8_t row = 4 - 1; row >= 0; row--)
  5229  137A  3003               	movlw	3
  5230  137B  00F6               	movwf	??_is_right_boundary
  5231  137C  0876               	movf	??_is_right_boundary,w
  5232  137D  00FB               	movwf	is_right_boundary@row
  5233  137E  1BFB               	btfsc	is_right_boundary@row,7
  5234  137F  2BD5               	goto	l2814
  5235  1380                     l2790:	
  5236                           
  5237                           ;teris_16f886.c: 761: {
  5238                           ;teris_16f886.c: 762: for(int8_t col = 0; col < 4; col++)
  5239  1380  01FC               	clrf	is_right_boundary@col
  5240  1381  087C               	movf	is_right_boundary@col,w
  5241  1382  3A80               	xorlw	128
  5242  1383  3E7C               	addlw	-132
  5243  1384  1803               	btfsc	3,0
  5244  1385  2BCF               	goto	l2810
  5245  1386                     l2796:	
  5246                           
  5247                           ;teris_16f886.c: 763: {
  5248                           ;teris_16f886.c: 764: if(matrix44->data[row][col] == 1)
  5249  1386  087B               	movf	is_right_boundary@row,w
  5250  1387  00F6               	movwf	??_is_right_boundary
  5251  1388  01F7               	clrf	??_is_right_boundary+1
  5252  1389  1003               	clrc
  5253  138A  0DF6               	rlf	??_is_right_boundary,f
  5254  138B  0DF7               	rlf	??_is_right_boundary+1,f
  5255  138C  1003               	clrc
  5256  138D  0DF6               	rlf	??_is_right_boundary,f
  5257  138E  0DF7               	rlf	??_is_right_boundary+1,f
  5258  138F  0876               	movf	??_is_right_boundary,w
  5259  1390  0773               	addwf	is_right_boundary@matrix44,w
  5260  1391  00F8               	movwf	??_is_right_boundary+2
  5261  1392  0877               	movf	??_is_right_boundary+1,w
  5262  1393  1803               	skipnc
  5263  1394  0A77               	incf	??_is_right_boundary+1,w
  5264  1395  0774               	addwf	is_right_boundary@matrix44+1,w
  5265  1396  00F9               	movwf	??_is_right_boundary+3
  5266  1397  087C               	movf	is_right_boundary@col,w
  5267  1398  0778               	addwf	??_is_right_boundary+2,w
  5268  1399  0084               	movwf	4
  5269  139A  0879               	movf	??_is_right_boundary+3,w
  5270  139B  1803               	skipnc
  5271  139C  0A79               	incf	??_is_right_boundary+3,w
  5272  139D  1283               	bcf	3,5	;RP0=0, select bank0
  5273  139E  1303               	bcf	3,6	;RP1=0, select bank0
  5274  139F  00FF               	movwf	127
  5275  13A0  120A  158A  2000  160A  118A  	fcall	stringtab
  5276  13A5  3A01               	xorlw	1
  5277  13A6  1D03               	skipz
  5278  13A7  2BC6               	goto	l2806
  5279                           
  5280                           ;teris_16f886.c: 765: {
  5281                           ;teris_16f886.c: 766: if(x + col > 8 - 1)
  5282  13A8  087A               	movf	is_right_boundary@x,w
  5283  13A9  077C               	addwf	is_right_boundary@col,w
  5284  13AA  00F6               	movwf	??_is_right_boundary
  5285  13AB  01F7               	clrf	??_is_right_boundary+1
  5286  13AC  1803               	skipnc
  5287  13AD  0AF7               	incf	??_is_right_boundary+1,f
  5288  13AE  1BFA               	btfsc	is_right_boundary@x,7
  5289  13AF  03F7               	decf	??_is_right_boundary+1,f
  5290  13B0  1BFC               	btfsc	is_right_boundary@col,7
  5291  13B1  03F7               	decf	??_is_right_boundary+1,f
  5292  13B2  0877               	movf	??_is_right_boundary+1,w
  5293  13B3  3A80               	xorlw	128
  5294  13B4  00FF               	movwf	127
  5295  13B5  3080               	movlw	128
  5296  13B6  027F               	subwf	127,w
  5297  13B7  1D03               	skipz
  5298  13B8  2BBB               	goto	u3205
  5299  13B9  3008               	movlw	8
  5300  13BA  0276               	subwf	??_is_right_boundary,w
  5301  13BB                     u3205:	
  5302  13BB  1C03               	skipc
  5303  13BC  2BC6               	goto	l2806
  5304                           
  5305                           ;teris_16f886.c: 767: {
  5306                           ;teris_16f886.c: 771: USARTWriteString("RIGHT_OVER_BOUNDARY\r\n");
  5307  13BD  3095               	movlw	low (STR_29| (0+32768))
  5308  13BE  00F1               	movwf	USARTWriteString@str
  5309  13BF  308D               	movlw	high (STR_29| (0+32768))
  5310  13C0  00F2               	movwf	USARTWriteString@str+1
  5311  13C1  160A  158A  270C   	fcall	_USARTWriteString
  5312                           
  5313                           ;teris_16f886.c: 773: return RIGHT_OVER_BOUNDARY;
  5314  13C4  3003               	movlw	3
  5315  13C5  0008               	return
  5316  13C6                     l2806:	
  5317  13C6  3001               	movlw	1
  5318  13C7  00F6               	movwf	??_is_right_boundary
  5319  13C8  0876               	movf	??_is_right_boundary,w
  5320  13C9  07FC               	addwf	is_right_boundary@col,f
  5321  13CA  087C               	movf	is_right_boundary@col,w
  5322  13CB  3A80               	xorlw	128
  5323  13CC  3E7C               	addlw	-132
  5324  13CD  1C03               	skipc
  5325  13CE  2B86               	goto	l2796
  5326  13CF                     l2810:	
  5327  13CF  30FF               	movlw	255
  5328  13D0  00F6               	movwf	??_is_right_boundary
  5329  13D1  0876               	movf	??_is_right_boundary,w
  5330  13D2  07FB               	addwf	is_right_boundary@row,f
  5331  13D3  1FFB               	btfss	is_right_boundary@row,7
  5332  13D4  2B80               	goto	l2790
  5333  13D5                     l2814:	
  5334                           
  5335                           ;teris_16f886.c: 774: }
  5336                           ;teris_16f886.c: 775: }
  5337                           ;teris_16f886.c: 776: }
  5338                           ;teris_16f886.c: 777: }
  5339                           ;teris_16f886.c: 778: return OK;
  5340  13D5  3000               	movlw	0
  5341  13D6  0008               	return
  5342  13D7                     __end_of_is_right_boundary:	
  5343                           
  5344                           	psect	text7
  5345  1E30                     __ptext7:	
  5346 ;; *************** function _printf_console_Screen *****************
  5347 ;; Defined at:
  5348 ;;		line 546 in file "teris_16f886.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;		None
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;		None
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  1    wreg      void 
  5355 ;; Registers used:
  5356 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5362 ;;      Params:         0       0       0       0       0
  5363 ;;      Locals:         0       0       0       0       0
  5364 ;;      Temps:          0       0       0       0       0
  5365 ;;      Totals:         0       0       0       0       0
  5366 ;;Total ram usage:        0 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    3
  5369 ;; This function calls:
  5370 ;;		_printf_console_MATRIX88
  5371 ;; This function is called by:
  5372 ;;		_find_best_solution
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           
  5377                           ;psect for function _printf_console_Screen
  5378  1E30                     _printf_console_Screen:	
  5379                           
  5380                           ;teris_16f886.c: 548: printf_console_MATRIX88(&g_matrix88);
  5381                           
  5382                           ;incstack = 0
  5383                           ; Regs used in _printf_console_Screen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  5384  1E30  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
  5385  1E31  00F3               	movwf	printf_console_MATRIX88@matrix
  5386  1E32  3001               	movlw	1
  5387  1E33  00F4               	movwf	printf_console_MATRIX88@matrix+1
  5388  1E34  160A  118A  23D7   	fcall	_printf_console_MATRIX88
  5389  1E37  0008               	return
  5390  1E38                     __end_of_printf_console_Screen:	
  5391                           
  5392                           	psect	text8
  5393  13D7                     __ptext8:	
  5394 ;; *************** function _printf_console_MATRIX88 *****************
  5395 ;; Defined at:
  5396 ;;		line 496 in file "teris_16f886.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;  matrix          2    3[COMMON] PTR const struct .
  5399 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;  col             1   11[COMMON] unsigned char 
  5402 ;;  row             1   10[COMMON] unsigned char 
  5403 ;; Return value:  Size  Location     Type
  5404 ;;                  1    wreg      void 
  5405 ;; Registers used:
  5406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5412 ;;      Params:         2       0       0       0       0
  5413 ;;      Locals:         2       0       0       0       0
  5414 ;;      Temps:          5       0       0       0       0
  5415 ;;      Totals:         9       0       0       0       0
  5416 ;;Total ram usage:        9 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; Hardware stack levels required when called:    2
  5419 ;; This function calls:
  5420 ;;		_USARTWriteString
  5421 ;; This function is called by:
  5422 ;;		_printf_console_Screen
  5423 ;;		_find_best_solution
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           
  5428                           ;psect for function _printf_console_MATRIX88
  5429  13D7                     _printf_console_MATRIX88:	
  5430                           
  5431                           ;teris_16f886.c: 501: USARTWriteString("<<<<<<<<<<<<<<<<<<<<MATRIX88\r\n");
  5432                           
  5433                           ;incstack = 0
  5434                           ; Regs used in _printf_console_MATRIX88: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  5435  13D7  303C               	movlw	low (STR_13| (0+32768))
  5436  13D8  00F1               	movwf	USARTWriteString@str
  5437  13D9  308C               	movlw	high (STR_13| (0+32768))
  5438  13DA  00F2               	movwf	USARTWriteString@str+1
  5439  13DB  160A  158A  270C  160A  118A  	fcall	_USARTWriteString
  5440                           
  5441                           ;teris_16f886.c: 503: for(uint8_t row = 0; row < 8; row++)
  5442  13E0  01FA               	clrf	printf_console_MATRIX88@row
  5443  13E1  3008               	movlw	8
  5444  13E2  027A               	subwf	printf_console_MATRIX88@row,w
  5445  13E3  1803               	btfsc	3,0
  5446  13E4  2C2F               	goto	l4016
  5447  13E5                     l3994:	
  5448                           
  5449                           ;teris_16f886.c: 504: {
  5450                           ;teris_16f886.c: 505: for(uint8_t col = 0; col < 8; col++)
  5451  13E5  01FB               	clrf	printf_console_MATRIX88@col
  5452  13E6  3008               	movlw	8
  5453  13E7  027B               	subwf	printf_console_MATRIX88@col,w
  5454  13E8  1803               	btfsc	3,0
  5455  13E9  2C1E               	goto	l4010
  5456  13EA                     l4000:	
  5457                           
  5458                           ;teris_16f886.c: 506: {
  5459                           ;teris_16f886.c: 507: if(matrix->data[row][col] == 1)
  5460  13EA  087A               	movf	printf_console_MATRIX88@row,w
  5461  13EB  00F5               	movwf	??_printf_console_MATRIX88
  5462  13EC  3002               	movlw	2
  5463  13ED                     u5195:	
  5464  13ED  1003               	clrc
  5465  13EE  0DF5               	rlf	??_printf_console_MATRIX88,f
  5466  13EF  3EFF               	addlw	-1
  5467  13F0  1D03               	skipz
  5468  13F1  2BED               	goto	u5195
  5469  13F2  1003               	clrc
  5470  13F3  0D75               	rlf	??_printf_console_MATRIX88,w
  5471  13F4  0773               	addwf	printf_console_MATRIX88@matrix,w
  5472  13F5  00F6               	movwf	??_printf_console_MATRIX88+1
  5473  13F6  0874               	movf	printf_console_MATRIX88@matrix+1,w
  5474  13F7  1803               	skipnc
  5475  13F8  3E01               	addlw	1
  5476  13F9  00F7               	movwf	??_printf_console_MATRIX88+2
  5477  13FA  087B               	movf	printf_console_MATRIX88@col,w
  5478  13FB  0776               	addwf	??_printf_console_MATRIX88+1,w
  5479  13FC  00F8               	movwf	??_printf_console_MATRIX88+3
  5480  13FD  0877               	movf	??_printf_console_MATRIX88+2,w
  5481  13FE  1803               	skipnc
  5482  13FF  3E01               	addlw	1
  5483  1400  00F9               	movwf	??_printf_console_MATRIX88+4
  5484  1401  0878               	movf	??_printf_console_MATRIX88+3,w
  5485  1402  0084               	movwf	4
  5486  1403  1783               	bsf	3,7
  5487  1404  1C79               	btfss	??_printf_console_MATRIX88+4,0
  5488  1405  1383               	bcf	3,7
  5489  1406  0300               	decf	0,w
  5490  1407  1D03               	btfss	3,2
  5491  1408  2C0D               	goto	l4004
  5492                           
  5493                           ;teris_16f886.c: 508: {
  5494                           ;teris_16f886.c: 512: USARTWriteString("*");
  5495  1409  3044               	movlw	low (STR_2| (0+32768))
  5496  140A  00F1               	movwf	USARTWriteString@str
  5497  140B  308E               	movlw	high (STR_2| (0+32768))
  5498  140C  2C10               	goto	L10
  5499  140D                     l4004:	
  5500                           ;teris_16f886.c: 514: }
  5501                           
  5502                           
  5503                           ;teris_16f886.c: 515: else
  5504                           ;teris_16f886.c: 516: {
  5505                           ;teris_16f886.c: 520: USARTWriteString("_");
  5506  140D  3046               	movlw	low (STR_3| (0+32768))
  5507  140E  00F1               	movwf	USARTWriteString@str
  5508  140F  308E               	movlw	high (STR_3| (0+32768))
  5509  1410                     L10:	
  5510  1410  00F2               	movwf	USARTWriteString@str+1
  5511  1411  160A  158A  270C  160A  118A  	fcall	_USARTWriteString
  5512  1416  3001               	movlw	1
  5513  1417  00F5               	movwf	??_printf_console_MATRIX88
  5514  1418  0875               	movf	??_printf_console_MATRIX88,w
  5515  1419  07FB               	addwf	printf_console_MATRIX88@col,f
  5516  141A  3008               	movlw	8
  5517  141B  027B               	subwf	printf_console_MATRIX88@col,w
  5518  141C  1C03               	skipc
  5519  141D  2BEA               	goto	l4000
  5520  141E                     l4010:	
  5521                           
  5522                           ;teris_16f886.c: 522: }
  5523                           ;teris_16f886.c: 523: }
  5524                           ;teris_16f886.c: 527: USARTWriteString("\r\n");
  5525  141E  3024               	movlw	low ((STR_56+12)| (0+32768))
  5526  141F  00F1               	movwf	USARTWriteString@str
  5527  1420  308E               	movlw	high ((STR_56+12)| (0+32768))
  5528  1421  00F2               	movwf	USARTWriteString@str+1
  5529  1422  160A  158A  270C  160A  118A  	fcall	_USARTWriteString
  5530  1427  3001               	movlw	1
  5531  1428  00F5               	movwf	??_printf_console_MATRIX88
  5532  1429  0875               	movf	??_printf_console_MATRIX88,w
  5533  142A  07FA               	addwf	printf_console_MATRIX88@row,f
  5534  142B  3008               	movlw	8
  5535  142C  027A               	subwf	printf_console_MATRIX88@row,w
  5536  142D  1C03               	skipc
  5537  142E  2BE5               	goto	l3994
  5538  142F                     l4016:	
  5539                           
  5540                           ;teris_16f886.c: 529: }
  5541                           ;teris_16f886.c: 533: USARTWriteString(">>>>>>>>>>>>>>>>>>>>\r\n");
  5542  142F  3067               	movlw	low (STR_5| (0+32768))
  5543  1430  00F1               	movwf	USARTWriteString@str
  5544  1431  308D               	movlw	high (STR_5| (0+32768))
  5545  1432  00F2               	movwf	USARTWriteString@str+1
  5546  1433  160A  158A  270C   	fcall	_USARTWriteString
  5547  1436  0008               	return
  5548  1437                     __end_of_printf_console_MATRIX88:	
  5549                           
  5550                           	psect	text9
  5551  1701                     __ptext9:	
  5552 ;; *************** function _printf_console_MATRIX44 *****************
  5553 ;; Defined at:
  5554 ;;		line 284 in file "teris_16f886.c"
  5555 ;; Parameters:    Size  Location     Type
  5556 ;;  x               1    wreg     char 
  5557 ;;  y               1    3[COMMON] char 
  5558 ;;  matrix          2    4[COMMON] PTR const struct .
  5559 ;;		 -> g_matrix44(384), 
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;  x               1    6[COMMON] char 
  5562 ;;  col             1    8[COMMON] char 
  5563 ;;  row             1    7[COMMON] char 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      void 
  5566 ;; Registers used:
  5567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5573 ;;      Params:         3       0       0       0       0
  5574 ;;      Locals:         3       0       0       0       0
  5575 ;;      Temps:          0       9       0       0       0
  5576 ;;      Totals:         6       9       0       0       0
  5577 ;;Total ram usage:       15 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    2
  5580 ;; This function calls:
  5581 ;;		_USARTWriteString
  5582 ;; This function is called by:
  5583 ;;		_find_best_solution
  5584 ;;		_printf_console_cur_MATRIX44
  5585 ;;		_printf_console_all_MATRIX44
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           
  5590                           ;psect for function _printf_console_MATRIX44
  5591  1701                     _printf_console_MATRIX44:	
  5592                           
  5593                           ;incstack = 0
  5594                           ; Regs used in _printf_console_MATRIX44: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  5595                           ;printf_console_MATRIX44@x stored from wreg
  5596  1701  00F6               	movwf	printf_console_MATRIX44@x
  5597                           
  5598                           ;teris_16f886.c: 289: USARTWriteString("<<<<<<<<<<<<<<<<<<<<MATRIX44\r\n");
  5599  1702  301D               	movlw	low (STR_1| (0+32768))
  5600  1703  00F1               	movwf	USARTWriteString@str
  5601  1704  308C               	movlw	high (STR_1| (0+32768))
  5602  1705  00F2               	movwf	USARTWriteString@str+1
  5603  1706  160A  158A  270C  160A  118A  	fcall	_USARTWriteString
  5604                           
  5605                           ;teris_16f886.c: 291: for(int8_t row = 0; row < 8; row++)
  5606  170B  01F7               	clrf	printf_console_MATRIX44@row
  5607  170C  0877               	movf	printf_console_MATRIX44@row,w
  5608  170D  3A80               	xorlw	128
  5609  170E  3E78               	addlw	-136
  5610  170F  1803               	btfsc	3,0
  5611  1710  2FF8               	goto	l2870
  5612  1711                     l2840:	
  5613                           
  5614                           ;teris_16f886.c: 292: {
  5615                           ;teris_16f886.c: 293: for(int8_t col = 0; col < 8; col++)
  5616  1711  01F8               	clrf	printf_console_MATRIX44@col
  5617  1712  0878               	movf	printf_console_MATRIX44@col,w
  5618  1713  3A80               	xorlw	128
  5619  1714  3E78               	addlw	-136
  5620  1715  1803               	btfsc	3,0
  5621  1716  2FE4               	goto	l2864
  5622  1717                     l2846:	
  5623                           
  5624                           ;teris_16f886.c: 294: {
  5625                           ;teris_16f886.c: 295: if((row - y >= 0) && (row - y < 4)
  5626                           ;teris_16f886.c: 296: && (col - x >= 0) && (col - x < 4)
  5627                           ;teris_16f886.c: 297: && (matrix->data[row - y][col - x] == 1))
  5628  1717  0873               	movf	printf_console_MATRIX44@y,w
  5629  1718  1283               	bcf	3,5	;RP0=0, select bank0
  5630  1719  1303               	bcf	3,6	;RP1=0, select bank0
  5631  171A  00A0               	movwf	??_printf_console_MATRIX44
  5632  171B  01A1               	clrf	??_printf_console_MATRIX44+1
  5633  171C  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5634  171D  03A1               	decf	??_printf_console_MATRIX44+1,f
  5635  171E  09A0               	comf	??_printf_console_MATRIX44,f
  5636  171F  09A1               	comf	??_printf_console_MATRIX44+1,f
  5637  1720  0AA0               	incf	??_printf_console_MATRIX44,f
  5638  1721  1903               	skipnz
  5639  1722  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5640  1723  0877               	movf	printf_console_MATRIX44@row,w
  5641  1724  00A2               	movwf	??_printf_console_MATRIX44+2
  5642  1725  01A3               	clrf	??_printf_console_MATRIX44+3
  5643  1726  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5644  1727  03A3               	decf	??_printf_console_MATRIX44+3,f
  5645  1728  0820               	movf	??_printf_console_MATRIX44,w
  5646  1729  0722               	addwf	??_printf_console_MATRIX44+2,w
  5647  172A  00A4               	movwf	??_printf_console_MATRIX44+4
  5648  172B  0821               	movf	??_printf_console_MATRIX44+1,w
  5649  172C  1803               	skipnc
  5650  172D  0A21               	incf	??_printf_console_MATRIX44+1,w
  5651  172E  0723               	addwf	??_printf_console_MATRIX44+3,w
  5652  172F  00A5               	movwf	??_printf_console_MATRIX44+5
  5653  1730  1BA5               	btfsc	??_printf_console_MATRIX44+5,7
  5654  1731  2FD0               	goto	l2858
  5655  1732  0873               	movf	printf_console_MATRIX44@y,w
  5656  1733  00A0               	movwf	??_printf_console_MATRIX44
  5657  1734  01A1               	clrf	??_printf_console_MATRIX44+1
  5658  1735  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5659  1736  03A1               	decf	??_printf_console_MATRIX44+1,f
  5660  1737  09A0               	comf	??_printf_console_MATRIX44,f
  5661  1738  09A1               	comf	??_printf_console_MATRIX44+1,f
  5662  1739  0AA0               	incf	??_printf_console_MATRIX44,f
  5663  173A  1903               	skipnz
  5664  173B  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5665  173C  0877               	movf	printf_console_MATRIX44@row,w
  5666  173D  00A2               	movwf	??_printf_console_MATRIX44+2
  5667  173E  01A3               	clrf	??_printf_console_MATRIX44+3
  5668  173F  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5669  1740  03A3               	decf	??_printf_console_MATRIX44+3,f
  5670  1741  0820               	movf	??_printf_console_MATRIX44,w
  5671  1742  0722               	addwf	??_printf_console_MATRIX44+2,w
  5672  1743  00A4               	movwf	??_printf_console_MATRIX44+4
  5673  1744  0821               	movf	??_printf_console_MATRIX44+1,w
  5674  1745  1803               	skipnc
  5675  1746  0A21               	incf	??_printf_console_MATRIX44+1,w
  5676  1747  0723               	addwf	??_printf_console_MATRIX44+3,w
  5677  1748  00A5               	movwf	??_printf_console_MATRIX44+5
  5678  1749  0825               	movf	??_printf_console_MATRIX44+5,w
  5679  174A  3A80               	xorlw	128
  5680  174B  00FF               	movwf	127
  5681  174C  3080               	movlw	128
  5682  174D  027F               	subwf	127,w
  5683  174E  1D03               	skipz
  5684  174F  2F52               	goto	u3315
  5685  1750  3004               	movlw	4
  5686  1751  0224               	subwf	??_printf_console_MATRIX44+4,w
  5687  1752                     u3315:	
  5688  1752  1803               	skipnc
  5689  1753  2FD0               	goto	l2858
  5690  1754  0876               	movf	printf_console_MATRIX44@x,w
  5691  1755  1283               	bcf	3,5	;RP0=0, select bank0
  5692  1756  1303               	bcf	3,6	;RP1=0, select bank0
  5693  1757  00A0               	movwf	??_printf_console_MATRIX44
  5694  1758  01A1               	clrf	??_printf_console_MATRIX44+1
  5695  1759  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5696  175A  03A1               	decf	??_printf_console_MATRIX44+1,f
  5697  175B  09A0               	comf	??_printf_console_MATRIX44,f
  5698  175C  09A1               	comf	??_printf_console_MATRIX44+1,f
  5699  175D  0AA0               	incf	??_printf_console_MATRIX44,f
  5700  175E  1903               	skipnz
  5701  175F  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5702  1760  0878               	movf	printf_console_MATRIX44@col,w
  5703  1761  00A2               	movwf	??_printf_console_MATRIX44+2
  5704  1762  01A3               	clrf	??_printf_console_MATRIX44+3
  5705  1763  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5706  1764  03A3               	decf	??_printf_console_MATRIX44+3,f
  5707  1765  0820               	movf	??_printf_console_MATRIX44,w
  5708  1766  0722               	addwf	??_printf_console_MATRIX44+2,w
  5709  1767  00A4               	movwf	??_printf_console_MATRIX44+4
  5710  1768  0821               	movf	??_printf_console_MATRIX44+1,w
  5711  1769  1803               	skipnc
  5712  176A  0A21               	incf	??_printf_console_MATRIX44+1,w
  5713  176B  0723               	addwf	??_printf_console_MATRIX44+3,w
  5714  176C  00A5               	movwf	??_printf_console_MATRIX44+5
  5715  176D  1BA5               	btfsc	??_printf_console_MATRIX44+5,7
  5716  176E  2FD0               	goto	l2858
  5717  176F  0876               	movf	printf_console_MATRIX44@x,w
  5718  1770  00A0               	movwf	??_printf_console_MATRIX44
  5719  1771  01A1               	clrf	??_printf_console_MATRIX44+1
  5720  1772  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5721  1773  03A1               	decf	??_printf_console_MATRIX44+1,f
  5722  1774  09A0               	comf	??_printf_console_MATRIX44,f
  5723  1775  09A1               	comf	??_printf_console_MATRIX44+1,f
  5724  1776  0AA0               	incf	??_printf_console_MATRIX44,f
  5725  1777  1903               	skipnz
  5726  1778  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5727  1779  0878               	movf	printf_console_MATRIX44@col,w
  5728  177A  00A2               	movwf	??_printf_console_MATRIX44+2
  5729  177B  01A3               	clrf	??_printf_console_MATRIX44+3
  5730  177C  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5731  177D  03A3               	decf	??_printf_console_MATRIX44+3,f
  5732  177E  0820               	movf	??_printf_console_MATRIX44,w
  5733  177F  0722               	addwf	??_printf_console_MATRIX44+2,w
  5734  1780  00A4               	movwf	??_printf_console_MATRIX44+4
  5735  1781  0821               	movf	??_printf_console_MATRIX44+1,w
  5736  1782  1803               	skipnc
  5737  1783  0A21               	incf	??_printf_console_MATRIX44+1,w
  5738  1784  0723               	addwf	??_printf_console_MATRIX44+3,w
  5739  1785  00A5               	movwf	??_printf_console_MATRIX44+5
  5740  1786  0825               	movf	??_printf_console_MATRIX44+5,w
  5741  1787  3A80               	xorlw	128
  5742  1788  00FF               	movwf	127
  5743  1789  3080               	movlw	128
  5744  178A  027F               	subwf	127,w
  5745  178B  1D03               	skipz
  5746  178C  2F8F               	goto	u3335
  5747  178D  3004               	movlw	4
  5748  178E  0224               	subwf	??_printf_console_MATRIX44+4,w
  5749  178F                     u3335:	
  5750  178F  1803               	skipnc
  5751  1790  2FD0               	goto	l2858
  5752  1791  0876               	movf	printf_console_MATRIX44@x,w
  5753  1792  1283               	bcf	3,5	;RP0=0, select bank0
  5754  1793  1303               	bcf	3,6	;RP1=0, select bank0
  5755  1794  00A0               	movwf	??_printf_console_MATRIX44
  5756  1795  01A1               	clrf	??_printf_console_MATRIX44+1
  5757  1796  1BA0               	btfsc	??_printf_console_MATRIX44,7
  5758  1797  03A1               	decf	??_printf_console_MATRIX44+1,f
  5759  1798  09A0               	comf	??_printf_console_MATRIX44,f
  5760  1799  09A1               	comf	??_printf_console_MATRIX44+1,f
  5761  179A  0AA0               	incf	??_printf_console_MATRIX44,f
  5762  179B  1903               	skipnz
  5763  179C  0AA1               	incf	??_printf_console_MATRIX44+1,f
  5764  179D  0878               	movf	printf_console_MATRIX44@col,w
  5765  179E  00A2               	movwf	??_printf_console_MATRIX44+2
  5766  179F  01A3               	clrf	??_printf_console_MATRIX44+3
  5767  17A0  1BA2               	btfsc	??_printf_console_MATRIX44+2,7
  5768  17A1  03A3               	decf	??_printf_console_MATRIX44+3,f
  5769  17A2  0820               	movf	??_printf_console_MATRIX44,w
  5770  17A3  0722               	addwf	??_printf_console_MATRIX44+2,w
  5771  17A4  00A4               	movwf	??_printf_console_MATRIX44+4
  5772  17A5  0821               	movf	??_printf_console_MATRIX44+1,w
  5773  17A6  1803               	skipnc
  5774  17A7  0A21               	incf	??_printf_console_MATRIX44+1,w
  5775  17A8  0723               	addwf	??_printf_console_MATRIX44+3,w
  5776  17A9  00A5               	movwf	??_printf_console_MATRIX44+5
  5777  17AA  0824               	movf	??_printf_console_MATRIX44+4,w
  5778  17AB  0774               	addwf	printf_console_MATRIX44@matrix,w
  5779  17AC  00A6               	movwf	??_printf_console_MATRIX44+6
  5780  17AD  0825               	movf	??_printf_console_MATRIX44+5,w
  5781  17AE  1803               	skipnc
  5782  17AF  0A25               	incf	??_printf_console_MATRIX44+5,w
  5783  17B0  0775               	addwf	printf_console_MATRIX44@matrix+1,w
  5784  17B1  00A7               	movwf	??_printf_console_MATRIX44+7
  5785  17B2  0373               	decf	printf_console_MATRIX44@y,w
  5786  17B3  3AFF               	xorlw	255
  5787  17B4  0777               	addwf	printf_console_MATRIX44@row,w
  5788  17B5  00A8               	movwf	??_printf_console_MATRIX44+8
  5789  17B6  3001               	movlw	1
  5790  17B7                     u3345:	
  5791  17B7  1003               	clrc
  5792  17B8  0DA8               	rlf	??_printf_console_MATRIX44+8,f
  5793  17B9  3EFF               	addlw	-1
  5794  17BA  1D03               	skipz
  5795  17BB  2FB7               	goto	u3345
  5796  17BC  1003               	clrc
  5797  17BD  0D28               	rlf	??_printf_console_MATRIX44+8,w
  5798  17BE  0726               	addwf	??_printf_console_MATRIX44+6,w
  5799  17BF  0084               	movwf	4
  5800  17C0  0827               	movf	??_printf_console_MATRIX44+7,w
  5801  17C1  1803               	skipnc
  5802  17C2  0A27               	incf	??_printf_console_MATRIX44+7,w
  5803  17C3  00FF               	movwf	127
  5804  17C4  120A  158A  2000  160A  118A  	fcall	stringtab
  5805  17C9  3A01               	xorlw	1
  5806  17CA  1D03               	skipz
  5807  17CB  2FD0               	goto	l2858
  5808                           
  5809                           ;teris_16f886.c: 298: {
  5810                           ;teris_16f886.c: 302: USARTWriteString("*");
  5811  17CC  3044               	movlw	low (STR_2| (0+32768))
  5812  17CD  00F1               	movwf	USARTWriteString@str
  5813  17CE  308E               	movlw	high (STR_2| (0+32768))
  5814  17CF  2FD3               	goto	L11
  5815  17D0                     l2858:	
  5816                           ;teris_16f886.c: 304: }
  5817                           
  5818                           
  5819                           ;teris_16f886.c: 305: else
  5820                           ;teris_16f886.c: 306: {
  5821                           ;teris_16f886.c: 310: USARTWriteString("_");
  5822  17D0  3046               	movlw	low (STR_3| (0+32768))
  5823  17D1  00F1               	movwf	USARTWriteString@str
  5824  17D2  308E               	movlw	high (STR_3| (0+32768))
  5825  17D3                     L11:	
  5826  17D3  00F2               	movwf	USARTWriteString@str+1
  5827  17D4  160A  158A  270C  160A  118A  	fcall	_USARTWriteString
  5828  17D9  3001               	movlw	1
  5829  17DA  1283               	bcf	3,5	;RP0=0, select bank0
  5830  17DB  1303               	bcf	3,6	;RP1=0, select bank0
  5831  17DC  00A0               	movwf	??_printf_console_MATRIX44
  5832  17DD  0820               	movf	??_printf_console_MATRIX44,w
  5833  17DE  07F8               	addwf	printf_console_MATRIX44@col,f
  5834  17DF  0878               	movf	printf_console_MATRIX44@col,w
  5835  17E0  3A80               	xorlw	128
  5836  17E1  3E78               	addlw	-136
  5837  17E2  1C03               	skipc
  5838  17E3  2F17               	goto	l2846
  5839  17E4                     l2864:	
  5840                           
  5841                           ;teris_16f886.c: 312: }
  5842                           ;teris_16f886.c: 313: }
  5843                           ;teris_16f886.c: 317: USARTWriteString("\r\n");
  5844  17E4  3024               	movlw	low ((STR_56+12)| (0+32768))
  5845  17E5  00F1               	movwf	USARTWriteString@str
  5846  17E6  308E               	movlw	high ((STR_56+12)| (0+32768))
  5847  17E7  00F2               	movwf	USARTWriteString@str+1
  5848  17E8  160A  158A  270C  160A  118A  	fcall	_USARTWriteString
  5849  17ED  3001               	movlw	1
  5850  17EE  1283               	bcf	3,5	;RP0=0, select bank0
  5851  17EF  1303               	bcf	3,6	;RP1=0, select bank0
  5852  17F0  00A0               	movwf	??_printf_console_MATRIX44
  5853  17F1  0820               	movf	??_printf_console_MATRIX44,w
  5854  17F2  07F7               	addwf	printf_console_MATRIX44@row,f
  5855  17F3  0877               	movf	printf_console_MATRIX44@row,w
  5856  17F4  3A80               	xorlw	128
  5857  17F5  3E78               	addlw	-136
  5858  17F6  1C03               	skipc
  5859  17F7  2F11               	goto	l2840
  5860  17F8                     l2870:	
  5861                           
  5862                           ;teris_16f886.c: 319: }
  5863                           ;teris_16f886.c: 323: USARTWriteString(">>>>>>>>>>>>>>>>>>>>\r\n");
  5864  17F8  3067               	movlw	low (STR_5| (0+32768))
  5865  17F9  00F1               	movwf	USARTWriteString@str
  5866  17FA  308D               	movlw	high (STR_5| (0+32768))
  5867  17FB  00F2               	movwf	USARTWriteString@str+1
  5868  17FC  160A  158A  270C   	fcall	_USARTWriteString
  5869  17FF  0008               	return
  5870  1800                     __end_of_printf_console_MATRIX44:	
  5871                           
  5872                           	psect	text10
  5873  1437                     __ptext10:	
  5874 ;; *************** function _merge1 *****************
  5875 ;; Defined at:
  5876 ;;		line 842 in file "teris_16f886.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;  x               1    wreg     char 
  5879 ;;  y               1    0[BANK0 ] char 
  5880 ;;  matrix44        2    1[BANK0 ] PTR const struct .
  5881 ;;		 -> g_matrix44(384), 
  5882 ;;  matrix88_in     1    3[BANK0 ] PTR const struct .
  5883 ;;		 -> g_matrix88(64), 
  5884 ;;  matrix88_out    1    4[BANK0 ] PTR struct .
  5885 ;;		 -> find_best_solution@temp_matrix88(64), 
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;  x               1    9[BANK0 ] char 
  5888 ;;  col             1   13[BANK0 ] unsigned char 
  5889 ;;  row             1   12[BANK0 ] unsigned char 
  5890 ;;  len             2   10[BANK0 ] unsigned int 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      void 
  5893 ;; Registers used:
  5894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5900 ;;      Params:         0       5       0       0       0
  5901 ;;      Locals:         0       5       0       0       0
  5902 ;;      Temps:          0       4       0       0       0
  5903 ;;      Totals:         0      14       0       0       0
  5904 ;;Total ram usage:       14 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    1
  5907 ;; This function calls:
  5908 ;;		_memcpy
  5909 ;; This function is called by:
  5910 ;;		_find_best_solution
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           
  5915                           ;psect for function _merge1
  5916  1437                     _merge1:	
  5917                           
  5918                           ;incstack = 0
  5919                           ; Regs used in _merge1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5920                           ;merge1@x stored from wreg
  5921  1437  1283               	bcf	3,5	;RP0=0, select bank0
  5922  1438  1303               	bcf	3,6	;RP1=0, select bank0
  5923  1439  00A9               	movwf	merge1@x
  5924                           
  5925                           ;teris_16f886.c: 847: register size_t len;
  5926                           ;teris_16f886.c: 849: len = sizeof(MATRIX88);
  5927  143A  3040               	movlw	64
  5928  143B  00AA               	movwf	merge1@len
  5929  143C  3000               	movlw	0
  5930  143D  00AB               	movwf	merge1@len+1
  5931                           
  5932                           ;teris_16f886.c: 850: memcpy(matrix88_out, matrix88_in, len);
  5933  143E  0824               	movf	merge1@matrix88_out,w
  5934  143F  00F0               	movwf	memcpy@d1
  5935  1440  3000               	movlw	0
  5936  1441  00F1               	movwf	memcpy@d1+1
  5937  1442  0823               	movf	merge1@matrix88_in,w
  5938  1443  00F2               	movwf	memcpy@s1
  5939  1444  3001               	movlw	1
  5940  1445  00F3               	movwf	memcpy@s1+1
  5941  1446  082B               	movf	merge1@len+1,w
  5942  1447  00F5               	movwf	memcpy@n+1
  5943  1448  082A               	movf	merge1@len,w
  5944  1449  00F4               	movwf	memcpy@n
  5945  144A  160A  158A  272F  160A  118A  	fcall	_memcpy
  5946                           
  5947                           ;teris_16f886.c: 852: for(uint8_t row = 0; row < 4; row++)
  5948  144F  1283               	bcf	3,5	;RP0=0, select bank0
  5949  1450  1303               	bcf	3,6	;RP1=0, select bank0
  5950  1451  01AC               	clrf	merge1@row
  5951  1452                     L12:	
  5952  1452  3004               	movlw	4
  5953  1453  022C               	subwf	merge1@row,w
  5954  1454  1803               	btfsc	3,0
  5955  1455  0008               	return
  5956                           
  5957                           ;teris_16f886.c: 853: {
  5958                           ;teris_16f886.c: 854: for(uint8_t col = 0; col < 4; col++)
  5959  1456  01AD               	clrf	merge1@col
  5960  1457  3004               	movlw	4
  5961  1458  022D               	subwf	merge1@col,w
  5962  1459  1803               	btfsc	3,0
  5963  145A  2C99               	goto	l4084
  5964  145B                     l4076:	
  5965                           
  5966                           ;teris_16f886.c: 855: {
  5967                           ;teris_16f886.c: 856: if(matrix44->data[row][col] == 1)
  5968  145B  082C               	movf	merge1@row,w
  5969  145C  00A5               	movwf	??_merge1
  5970  145D  01A6               	clrf	??_merge1+1
  5971  145E  1003               	clrc
  5972  145F  0DA5               	rlf	??_merge1,f
  5973  1460  0DA6               	rlf	??_merge1+1,f
  5974  1461  1003               	clrc
  5975  1462  0DA5               	rlf	??_merge1,f
  5976  1463  0DA6               	rlf	??_merge1+1,f
  5977  1464  0825               	movf	??_merge1,w
  5978  1465  0721               	addwf	merge1@matrix44,w
  5979  1466  00A7               	movwf	??_merge1+2
  5980  1467  0826               	movf	??_merge1+1,w
  5981  1468  1803               	skipnc
  5982  1469  0A26               	incf	??_merge1+1,w
  5983  146A  0722               	addwf	merge1@matrix44+1,w
  5984  146B  00A8               	movwf	??_merge1+3
  5985  146C  082D               	movf	merge1@col,w
  5986  146D  0727               	addwf	??_merge1+2,w
  5987  146E  0084               	movwf	4
  5988  146F  0828               	movf	??_merge1+3,w
  5989  1470  1803               	skipnc
  5990  1471  0A28               	incf	??_merge1+3,w
  5991  1472  00FF               	movwf	127
  5992  1473  120A  158A  2000  160A  118A  	fcall	stringtab
  5993  1478  3A01               	xorlw	1
  5994  1479  1D03               	skipz
  5995  147A  2C91               	goto	l4080
  5996                           
  5997                           ;teris_16f886.c: 857: {
  5998                           ;teris_16f886.c: 858: matrix88_out->data[y + row][x + col] = 1;
  5999  147B  082D               	movf	merge1@col,w
  6000  147C  0729               	addwf	merge1@x,w
  6001  147D  0724               	addwf	merge1@matrix88_out,w
  6002  147E  00A5               	movwf	??_merge1
  6003  147F  082C               	movf	merge1@row,w
  6004  1480  0720               	addwf	merge1@y,w
  6005  1481  00A6               	movwf	??_merge1+1
  6006  1482  3002               	movlw	2
  6007  1483                     u5355:	
  6008  1483  1003               	clrc
  6009  1484  0DA6               	rlf	??_merge1+1,f
  6010  1485  3EFF               	addlw	-1
  6011  1486  1D03               	skipz
  6012  1487  2C83               	goto	u5355
  6013  1488  1003               	clrc
  6014  1489  0D26               	rlf	??_merge1+1,w
  6015  148A  0725               	addwf	??_merge1,w
  6016  148B  00A7               	movwf	??_merge1+2
  6017  148C  0827               	movf	??_merge1+2,w
  6018  148D  0084               	movwf	4
  6019  148E  1383               	bcf	3,7	;select IRP bank0
  6020  148F  0180               	clrf	0
  6021  1490  0A80               	incf	0,f
  6022  1491                     l4080:	
  6023  1491  3001               	movlw	1
  6024  1492  00A5               	movwf	??_merge1
  6025  1493  0825               	movf	??_merge1,w
  6026  1494  07AD               	addwf	merge1@col,f
  6027  1495  3004               	movlw	4
  6028  1496  022D               	subwf	merge1@col,w
  6029  1497  1C03               	skipc
  6030  1498  2C5B               	goto	l4076
  6031  1499                     l4084:	
  6032  1499  3001               	movlw	1
  6033  149A  00A5               	movwf	??_merge1
  6034  149B  0825               	movf	??_merge1,w
  6035  149C  07AC               	addwf	merge1@row,f
  6036  149D  2C52               	goto	L12
  6037  149E                     __end_of_merge1:	
  6038                           
  6039                           	psect	text11
  6040  1F89                     __ptext11:	
  6041 ;; *************** function _left_most *****************
  6042 ;; Defined at:
  6043 ;;		line 902 in file "teris_16f886.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;  x               1    wreg     char 
  6046 ;;  matrix44        2   18[BANK0 ] PTR const struct .
  6047 ;;		 -> g_matrix44(384), 
  6048 ;;  matrix88        1   20[BANK0 ] PTR const struct .
  6049 ;;		 -> g_matrix88(64), 
  6050 ;; Auto vars:     Size  Location     Type
  6051 ;;  x               1   22[BANK0 ] char 
  6052 ;; Return value:  Size  Location     Type
  6053 ;;                  1    wreg      char 
  6054 ;; Registers used:
  6055 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6056 ;; Tracked objects:
  6057 ;;		On entry : 0/0
  6058 ;;		On exit  : 0/0
  6059 ;;		Unchanged: 0/0
  6060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6061 ;;      Params:         0       3       0       0       0
  6062 ;;      Locals:         0       1       0       0       0
  6063 ;;      Temps:          0       1       0       0       0
  6064 ;;      Totals:         0       5       0       0       0
  6065 ;;Total ram usage:        5 bytes
  6066 ;; Hardware stack levels used:    1
  6067 ;; Hardware stack levels required when called:    3
  6068 ;; This function calls:
  6069 ;;		_USARTWriteString
  6070 ;;		_is_left_boundary
  6071 ;;		_sprintf
  6072 ;; This function is called by:
  6073 ;;		_find_best_solution
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           
  6078                           ;psect for function _left_most
  6079  1F89                     _left_most:	
  6080                           
  6081                           ;incstack = 0
  6082                           ; Regs used in _left_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6083                           ;left_most@x stored from wreg
  6084  1F89  1283               	bcf	3,5	;RP0=0, select bank0
  6085  1F8A  1303               	bcf	3,6	;RP1=0, select bank0
  6086  1F8B  00B6               	movwf	left_most@x
  6087  1F8C                     l358:	
  6088                           ;teris_16f886.c: 904: while(1)
  6089                           
  6090                           
  6091                           ;teris_16f886.c: 905: {
  6092                           ;teris_16f886.c: 906: if(is_left_boundary(x, matrix44, matrix88) == LEFT_OVER_BOUNDARY)
  6093  1F8C  0832               	movf	left_most@matrix44,w
  6094  1F8D  00F3               	movwf	is_left_boundary@matrix44
  6095  1F8E  0833               	movf	left_most@matrix44+1,w
  6096  1F8F  00F4               	movwf	is_left_boundary@matrix44+1
  6097  1F90  0834               	movf	left_most@matrix88,w
  6098  1F91  00B5               	movwf	??_left_most
  6099  1F92  0835               	movf	??_left_most,w
  6100  1F93  00F5               	movwf	is_left_boundary@matrix88
  6101  1F94  0836               	movf	left_most@x,w
  6102  1F95  160A  118A  231D  160A  158A  	fcall	_is_left_boundary
  6103  1F9A  3A02               	xorlw	2
  6104  1F9B  1D03               	skipz
  6105  1F9C  2FBD               	goto	l3076
  6106                           
  6107                           ;teris_16f886.c: 907: {
  6108                           ;teris_16f886.c: 911: sprintf(g_debug, "left_most = %d\n", x + 1);
  6109  1F9D  3008               	movlw	low (STR_33| (0+32768))
  6110  1F9E  1283               	bcf	3,5	;RP0=0, select bank0
  6111  1F9F  1303               	bcf	3,6	;RP1=0, select bank0
  6112  1FA0  00A0               	movwf	sprintf@f
  6113  1FA1  308E               	movlw	high (STR_33| (0+32768))
  6114  1FA2  00A1               	movwf	sprintf@f+1
  6115  1FA3  3001               	movlw	1
  6116  1FA4  0736               	addwf	left_most@x,w
  6117  1FA5  00A2               	movwf	?_sprintf+2
  6118  1FA6  01A3               	clrf	?_sprintf+3
  6119  1FA7  1803               	skipnc
  6120  1FA8  0AA3               	incf	?_sprintf+3,f
  6121  1FA9  1BB6               	btfsc	left_most@x,7
  6122  1FAA  03A3               	decf	?_sprintf+3,f
  6123  1FAB  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  6124  1FAC  120A  118A  2012  160A  158A  	fcall	_sprintf
  6125                           
  6126                           ;teris_16f886.c: 912: USARTWriteString(g_debug);
  6127  1FB1  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  6128  1FB2  00F1               	movwf	USARTWriteString@str
  6129  1FB3  3001               	movlw	1
  6130  1FB4  00F2               	movwf	USARTWriteString@str+1
  6131  1FB5  160A  158A  270C   	fcall	_USARTWriteString
  6132                           
  6133                           ;teris_16f886.c: 914: return x + 1;
  6134  1FB8  1283               	bcf	3,5	;RP0=0, select bank0
  6135  1FB9  1303               	bcf	3,6	;RP1=0, select bank0
  6136  1FBA  0836               	movf	left_most@x,w
  6137  1FBB  3E01               	addlw	1
  6138  1FBC  0008               	return
  6139  1FBD                     l3076:	
  6140                           
  6141                           ;teris_16f886.c: 915: }
  6142                           ;teris_16f886.c: 916: x--;
  6143  1FBD  30FF               	movlw	255
  6144  1FBE  1283               	bcf	3,5	;RP0=0, select bank0
  6145  1FBF  1303               	bcf	3,6	;RP1=0, select bank0
  6146  1FC0  00B5               	movwf	??_left_most
  6147  1FC1  0835               	movf	??_left_most,w
  6148  1FC2  07B6               	addwf	left_most@x,f
  6149  1FC3  2F8C               	goto	l358
  6150  1FC4                     __end_of_left_most:	
  6151                           
  6152                           	psect	text12
  6153  131D                     __ptext12:	
  6154 ;; *************** function _is_left_boundary *****************
  6155 ;; Defined at:
  6156 ;;		line 736 in file "teris_16f886.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;  x               1    wreg     char 
  6159 ;;  matrix44        2    3[COMMON] PTR const struct .
  6160 ;;		 -> g_matrix44(384), 
  6161 ;;  matrix88        1    5[COMMON] PTR const struct .
  6162 ;;		 -> g_matrix88(64), 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  x               1   11[COMMON] char 
  6165 ;;  col             1   13[COMMON] char 
  6166 ;;  row             1   12[COMMON] char 
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  1    wreg      unsigned char 
  6169 ;; Registers used:
  6170 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6176 ;;      Params:         3       0       0       0       0
  6177 ;;      Locals:         3       0       0       0       0
  6178 ;;      Temps:          5       0       0       0       0
  6179 ;;      Totals:        11       0       0       0       0
  6180 ;;Total ram usage:       11 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:    2
  6183 ;; This function calls:
  6184 ;;		_USARTWriteString
  6185 ;; This function is called by:
  6186 ;;		_left_most
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           
  6191                           ;psect for function _is_left_boundary
  6192  131D                     _is_left_boundary:	
  6193                           
  6194                           ;incstack = 0
  6195                           ; Regs used in _is_left_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6196                           ;is_left_boundary@x stored from wreg
  6197  131D  00FB               	movwf	is_left_boundary@x
  6198                           
  6199                           ;teris_16f886.c: 738: for(int8_t row = 4 - 1; row >= 0; row--)
  6200  131E  3003               	movlw	3
  6201  131F  00F6               	movwf	??_is_left_boundary
  6202  1320  0876               	movf	??_is_left_boundary,w
  6203  1321  00FC               	movwf	is_left_boundary@row
  6204  1322  1BFC               	btfsc	is_left_boundary@row,7
  6205  1323  2B77               	goto	l2780
  6206  1324                     l2756:	
  6207                           
  6208                           ;teris_16f886.c: 739: {
  6209                           ;teris_16f886.c: 740: for(int8_t col = 0; col < 4; col++)
  6210  1324  01FD               	clrf	is_left_boundary@col
  6211  1325  087D               	movf	is_left_boundary@col,w
  6212  1326  3A80               	xorlw	128
  6213  1327  3E7C               	addlw	-132
  6214  1328  1803               	btfsc	3,0
  6215  1329  2B71               	goto	l2776
  6216  132A                     l2762:	
  6217                           
  6218                           ;teris_16f886.c: 741: {
  6219                           ;teris_16f886.c: 742: if(matrix44->data[row][col] == 1)
  6220  132A  087C               	movf	is_left_boundary@row,w
  6221  132B  00F6               	movwf	??_is_left_boundary
  6222  132C  01F7               	clrf	??_is_left_boundary+1
  6223  132D  1003               	clrc
  6224  132E  0DF6               	rlf	??_is_left_boundary,f
  6225  132F  0DF7               	rlf	??_is_left_boundary+1,f
  6226  1330  1003               	clrc
  6227  1331  0DF6               	rlf	??_is_left_boundary,f
  6228  1332  0DF7               	rlf	??_is_left_boundary+1,f
  6229  1333  0876               	movf	??_is_left_boundary,w
  6230  1334  0773               	addwf	is_left_boundary@matrix44,w
  6231  1335  00F8               	movwf	??_is_left_boundary+2
  6232  1336  0877               	movf	??_is_left_boundary+1,w
  6233  1337  1803               	skipnc
  6234  1338  0A77               	incf	??_is_left_boundary+1,w
  6235  1339  0774               	addwf	is_left_boundary@matrix44+1,w
  6236  133A  00F9               	movwf	??_is_left_boundary+3
  6237  133B  087D               	movf	is_left_boundary@col,w
  6238  133C  0778               	addwf	??_is_left_boundary+2,w
  6239  133D  0084               	movwf	4
  6240  133E  0879               	movf	??_is_left_boundary+3,w
  6241  133F  1803               	skipnc
  6242  1340  0A79               	incf	??_is_left_boundary+3,w
  6243  1341  1283               	bcf	3,5	;RP0=0, select bank0
  6244  1342  1303               	bcf	3,6	;RP1=0, select bank0
  6245  1343  00FF               	movwf	127
  6246  1344  120A  158A  2000  160A  118A  	fcall	stringtab
  6247  1349  3A01               	xorlw	1
  6248  134A  1D03               	skipz
  6249  134B  2B68               	goto	l2772
  6250                           
  6251                           ;teris_16f886.c: 743: {
  6252                           ;teris_16f886.c: 744: if( x + col < 0)
  6253  134C  087D               	movf	is_left_boundary@col,w
  6254  134D  00F6               	movwf	??_is_left_boundary
  6255  134E  01F7               	clrf	??_is_left_boundary+1
  6256  134F  1BF6               	btfsc	??_is_left_boundary,7
  6257  1350  03F7               	decf	??_is_left_boundary+1,f
  6258  1351  087B               	movf	is_left_boundary@x,w
  6259  1352  00F8               	movwf	??_is_left_boundary+2
  6260  1353  01F9               	clrf	??_is_left_boundary+3
  6261  1354  1BF8               	btfsc	??_is_left_boundary+2,7
  6262  1355  03F9               	decf	??_is_left_boundary+3,f
  6263  1356  0876               	movf	??_is_left_boundary,w
  6264  1357  0778               	addwf	??_is_left_boundary+2,w
  6265  1358  0879               	movf	??_is_left_boundary+3,w
  6266  1359  1803               	skipnc
  6267  135A  0A79               	incf	??_is_left_boundary+3,w
  6268  135B  0777               	addwf	??_is_left_boundary+1,w
  6269  135C  00FA               	movwf	??_is_left_boundary+4
  6270  135D  1FFA               	btfss	??_is_left_boundary+4,7
  6271  135E  2B68               	goto	l2772
  6272                           
  6273                           ;teris_16f886.c: 745: {
  6274                           ;teris_16f886.c: 749: USARTWriteString("LEFT_OVER_BOUNDARY\r\n");
  6275  135F  30C1               	movlw	low (STR_28| (0+32768))
  6276  1360  00F1               	movwf	USARTWriteString@str
  6277  1361  308D               	movlw	high (STR_28| (0+32768))
  6278  1362  00F2               	movwf	USARTWriteString@str+1
  6279  1363  160A  158A  270C   	fcall	_USARTWriteString
  6280                           
  6281                           ;teris_16f886.c: 751: return LEFT_OVER_BOUNDARY;
  6282  1366  3002               	movlw	2
  6283  1367  0008               	return
  6284  1368                     l2772:	
  6285  1368  3001               	movlw	1
  6286  1369  00F6               	movwf	??_is_left_boundary
  6287  136A  0876               	movf	??_is_left_boundary,w
  6288  136B  07FD               	addwf	is_left_boundary@col,f
  6289  136C  087D               	movf	is_left_boundary@col,w
  6290  136D  3A80               	xorlw	128
  6291  136E  3E7C               	addlw	-132
  6292  136F  1C03               	skipc
  6293  1370  2B2A               	goto	l2762
  6294  1371                     l2776:	
  6295  1371  30FF               	movlw	255
  6296  1372  00F6               	movwf	??_is_left_boundary
  6297  1373  0876               	movf	??_is_left_boundary,w
  6298  1374  07FC               	addwf	is_left_boundary@row,f
  6299  1375  1FFC               	btfss	is_left_boundary@row,7
  6300  1376  2B24               	goto	l2756
  6301  1377                     l2780:	
  6302                           
  6303                           ;teris_16f886.c: 752: }
  6304                           ;teris_16f886.c: 753: }
  6305                           ;teris_16f886.c: 754: }
  6306                           ;teris_16f886.c: 755: }
  6307                           ;teris_16f886.c: 756: return OK;
  6308  1377  3000               	movlw	0
  6309  1378  0008               	return
  6310  1379                     __end_of_is_left_boundary:	
  6311                           
  6312                           	psect	text13
  6313  0EFA                     __ptext13:	
  6314 ;; *************** function _is_valid *****************
  6315 ;; Defined at:
  6316 ;;		line 682 in file "teris_16f886.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;  x               1    wreg     char 
  6319 ;;  y               1   18[BANK0 ] char 
  6320 ;;  matrix44        2   19[BANK0 ] PTR const struct .
  6321 ;;		 -> g_matrix44(384), 
  6322 ;;  matrix88        1   21[BANK0 ] PTR const struct .
  6323 ;;		 -> g_matrix88(64), 
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;  x               1   26[BANK0 ] char 
  6326 ;;  col             1   28[BANK0 ] char 
  6327 ;;  row             1   27[BANK0 ] char 
  6328 ;; Return value:  Size  Location     Type
  6329 ;;                  1    wreg      unsigned char 
  6330 ;; Registers used:
  6331 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6332 ;; Tracked objects:
  6333 ;;		On entry : 0/0
  6334 ;;		On exit  : 0/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6337 ;;      Params:         0       4       0       0       0
  6338 ;;      Locals:         0       3       0       0       0
  6339 ;;      Temps:          0       4       0       0       0
  6340 ;;      Totals:         0      11       0       0       0
  6341 ;;Total ram usage:       11 bytes
  6342 ;; Hardware stack levels used:    1
  6343 ;; Hardware stack levels required when called:    2
  6344 ;; This function calls:
  6345 ;;		_USARTWriteString
  6346 ;;		_sprintf
  6347 ;; This function is called by:
  6348 ;;		_find_best_solution
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           
  6353                           ;psect for function _is_valid
  6354  0EFA                     _is_valid:	
  6355                           
  6356                           ;incstack = 0
  6357                           ; Regs used in _is_valid: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6358                           ;is_valid@x stored from wreg
  6359  0EFA  1283               	bcf	3,5	;RP0=0, select bank0
  6360  0EFB  1303               	bcf	3,6	;RP1=0, select bank0
  6361  0EFC  00BA               	movwf	is_valid@x
  6362                           
  6363                           ;teris_16f886.c: 687: USARTWriteString("==============is_valid============\r\n");
  6364  0EFD  3050               	movlw	low (STR_23| (0+32768))
  6365  0EFE  00F1               	movwf	USARTWriteString@str
  6366  0EFF  308A               	movlw	high (STR_23| (0+32768))
  6367  0F00  00F2               	movwf	USARTWriteString@str+1
  6368  0F01  160A  158A  270C  120A  158A  	fcall	_USARTWriteString
  6369                           
  6370                           ;teris_16f886.c: 689: for(int8_t row = 4 - 1; row >= 0; row--)
  6371  0F06  3003               	movlw	3
  6372  0F07  1283               	bcf	3,5	;RP0=0, select bank0
  6373  0F08  1303               	bcf	3,6	;RP1=0, select bank0
  6374  0F09  00B6               	movwf	??_is_valid
  6375  0F0A  0836               	movf	??_is_valid,w
  6376  0F0B  00BB               	movwf	is_valid@row
  6377  0F0C  1BBB               	btfsc	is_valid@row,7
  6378  0F0D  2FF7               	goto	l2946
  6379  0F0E                     l2904:	
  6380                           
  6381                           ;teris_16f886.c: 690: {
  6382                           ;teris_16f886.c: 691: for(int8_t col = 0; col < 4; col++)
  6383  0F0E  01BC               	clrf	is_valid@col
  6384  0F0F  083C               	movf	is_valid@col,w
  6385  0F10  3A80               	xorlw	128
  6386  0F11  3E7C               	addlw	-132
  6387  0F12  1803               	btfsc	3,0
  6388  0F13  2FF1               	goto	l2942
  6389  0F14                     l2910:	
  6390                           
  6391                           ;teris_16f886.c: 692: {
  6392                           ;teris_16f886.c: 693: if(matrix44->data[row][col] == 1)
  6393  0F14  083B               	movf	is_valid@row,w
  6394  0F15  00B6               	movwf	??_is_valid
  6395  0F16  01B7               	clrf	??_is_valid+1
  6396  0F17  1003               	clrc
  6397  0F18  0DB6               	rlf	??_is_valid,f
  6398  0F19  0DB7               	rlf	??_is_valid+1,f
  6399  0F1A  1003               	clrc
  6400  0F1B  0DB6               	rlf	??_is_valid,f
  6401  0F1C  0DB7               	rlf	??_is_valid+1,f
  6402  0F1D  0836               	movf	??_is_valid,w
  6403  0F1E  0733               	addwf	is_valid@matrix44,w
  6404  0F1F  00B8               	movwf	??_is_valid+2
  6405  0F20  0837               	movf	??_is_valid+1,w
  6406  0F21  1803               	skipnc
  6407  0F22  0A37               	incf	??_is_valid+1,w
  6408  0F23  0734               	addwf	is_valid@matrix44+1,w
  6409  0F24  00B9               	movwf	??_is_valid+3
  6410  0F25  083C               	movf	is_valid@col,w
  6411  0F26  0738               	addwf	??_is_valid+2,w
  6412  0F27  0084               	movwf	4
  6413  0F28  0839               	movf	??_is_valid+3,w
  6414  0F29  1803               	skipnc
  6415  0F2A  0A39               	incf	??_is_valid+3,w
  6416  0F2B  00FF               	movwf	127
  6417  0F2C  120A  158A  2000  120A  158A  	fcall	stringtab
  6418  0F31  3A01               	xorlw	1
  6419  0F32  1D03               	skipz
  6420  0F33  2FE6               	goto	l2938
  6421                           
  6422                           ;teris_16f886.c: 694: {
  6423                           ;teris_16f886.c: 695: if(matrix88->data[y + row][x + col] == 1)
  6424  0F34  083C               	movf	is_valid@col,w
  6425  0F35  073A               	addwf	is_valid@x,w
  6426  0F36  0735               	addwf	is_valid@matrix88,w
  6427  0F37  00B6               	movwf	??_is_valid
  6428  0F38  083B               	movf	is_valid@row,w
  6429  0F39  0732               	addwf	is_valid@y,w
  6430  0F3A  00B7               	movwf	??_is_valid+1
  6431  0F3B  3002               	movlw	2
  6432  0F3C                     u3435:	
  6433  0F3C  1003               	clrc
  6434  0F3D  0DB7               	rlf	??_is_valid+1,f
  6435  0F3E  3EFF               	addlw	-1
  6436  0F3F  1D03               	skipz
  6437  0F40  2F3C               	goto	u3435
  6438  0F41  1003               	clrc
  6439  0F42  0D37               	rlf	??_is_valid+1,w
  6440  0F43  0736               	addwf	??_is_valid,w
  6441  0F44  00B8               	movwf	??_is_valid+2
  6442  0F45  0838               	movf	??_is_valid+2,w
  6443  0F46  0084               	movwf	4
  6444  0F47  1783               	bsf	3,7	;select IRP bank2
  6445  0F48  0300               	decf	0,w
  6446  0F49  1D03               	btfss	3,2
  6447  0F4A  2F68               	goto	l2920
  6448                           
  6449                           ;teris_16f886.c: 696: {
  6450                           ;teris_16f886.c: 700: sprintf(g_debug, "not valid1 row = %d, col = %d\n", row, col);
  6451  0F4B  305B               	movlw	low (STR_24| (0+32768))
  6452  0F4C  00A0               	movwf	sprintf@f
  6453  0F4D  308C               	movlw	high (STR_24| (0+32768))
  6454  0F4E  00A1               	movwf	sprintf@f+1
  6455  0F4F  083B               	movf	is_valid@row,w
  6456  0F50  00A2               	movwf	?_sprintf+2
  6457  0F51  01A3               	clrf	?_sprintf+3
  6458  0F52  1BA2               	btfsc	?_sprintf+2,7
  6459  0F53  03A3               	decf	?_sprintf+3,f
  6460  0F54  083C               	movf	is_valid@col,w
  6461  0F55  00A4               	movwf	?_sprintf+4
  6462  0F56  01A5               	clrf	?_sprintf+5
  6463  0F57  1BA4               	btfsc	?_sprintf+4,7
  6464  0F58  03A5               	decf	?_sprintf+5,f
  6465  0F59  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  6466  0F5A  120A  118A  2012  120A  158A  	fcall	_sprintf
  6467                           
  6468                           ;teris_16f886.c: 701: USARTWriteString(g_debug);
  6469  0F5F  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  6470  0F60  00F1               	movwf	USARTWriteString@str
  6471  0F61  3001               	movlw	1
  6472  0F62  00F2               	movwf	USARTWriteString@str+1
  6473  0F63  160A  158A  270C   	fcall	_USARTWriteString
  6474                           
  6475                           ;teris_16f886.c: 703: return 0;
  6476  0F66  3000               	movlw	0
  6477  0F67  0008               	return
  6478  0F68                     l2920:	
  6479                           
  6480                           ;teris_16f886.c: 704: }
  6481                           ;teris_16f886.c: 706: if(( x + col < 0) || (x + col >= 8))
  6482  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  6483  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  6484  0F6A  083A               	movf	is_valid@x,w
  6485  0F6B  073C               	addwf	is_valid@col,w
  6486  0F6C  00B6               	movwf	??_is_valid
  6487  0F6D  01B7               	clrf	??_is_valid+1
  6488  0F6E  1803               	skipnc
  6489  0F6F  0AB7               	incf	??_is_valid+1,f
  6490  0F70  1BBA               	btfsc	is_valid@x,7
  6491  0F71  03B7               	decf	??_is_valid+1,f
  6492  0F72  1BBC               	btfsc	is_valid@col,7
  6493  0F73  03B7               	decf	??_is_valid+1,f
  6494  0F74  1283               	bcf	3,5	;RP0=0, select bank0
  6495  0F75  1303               	bcf	3,6	;RP1=0, select bank0
  6496  0F76  1BB7               	btfsc	??_is_valid+1,7
  6497  0F77  2F8F               	goto	l2924
  6498  0F78  083A               	movf	is_valid@x,w
  6499  0F79  073C               	addwf	is_valid@col,w
  6500  0F7A  00B6               	movwf	??_is_valid
  6501  0F7B  01B7               	clrf	??_is_valid+1
  6502  0F7C  1803               	skipnc
  6503  0F7D  0AB7               	incf	??_is_valid+1,f
  6504  0F7E  1BBA               	btfsc	is_valid@x,7
  6505  0F7F  03B7               	decf	??_is_valid+1,f
  6506  0F80  1BBC               	btfsc	is_valid@col,7
  6507  0F81  03B7               	decf	??_is_valid+1,f
  6508  0F82  1283               	bcf	3,5	;RP0=0, select bank0
  6509  0F83  1303               	bcf	3,6	;RP1=0, select bank0
  6510  0F84  0837               	movf	??_is_valid+1,w
  6511  0F85  3A80               	xorlw	128
  6512  0F86  00FF               	movwf	127
  6513  0F87  3080               	movlw	128
  6514  0F88  027F               	subwf	127,w
  6515  0F89  1D03               	skipz
  6516  0F8A  2F8D               	goto	u3485
  6517  0F8B  3008               	movlw	8
  6518  0F8C  0236               	subwf	??_is_valid,w
  6519  0F8D                     u3485:	
  6520  0F8D  1C03               	skipc
  6521  0F8E  2FAE               	goto	l2930
  6522  0F8F                     l2924:	
  6523                           
  6524                           ;teris_16f886.c: 707: {
  6525                           ;teris_16f886.c: 711: sprintf(g_debug, "not valid2 row = %d, col = %d\n", row, col);
  6526  0F8F  307A               	movlw	low (STR_25| (0+32768))
  6527  0F90  1283               	bcf	3,5	;RP0=0, select bank0
  6528  0F91  1303               	bcf	3,6	;RP1=0, select bank0
  6529  0F92  00A0               	movwf	sprintf@f
  6530  0F93  308C               	movlw	high (STR_25| (0+32768))
  6531  0F94  00A1               	movwf	sprintf@f+1
  6532  0F95  083B               	movf	is_valid@row,w
  6533  0F96  00A2               	movwf	?_sprintf+2
  6534  0F97  01A3               	clrf	?_sprintf+3
  6535  0F98  1BA2               	btfsc	?_sprintf+2,7
  6536  0F99  03A3               	decf	?_sprintf+3,f
  6537  0F9A  083C               	movf	is_valid@col,w
  6538  0F9B  00A4               	movwf	?_sprintf+4
  6539  0F9C  01A5               	clrf	?_sprintf+5
  6540  0F9D  1BA4               	btfsc	?_sprintf+4,7
  6541  0F9E  03A5               	decf	?_sprintf+5,f
  6542  0F9F  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  6543  0FA0  120A  118A  2012  120A  158A  	fcall	_sprintf
  6544                           
  6545                           ;teris_16f886.c: 712: USARTWriteString(g_debug);
  6546  0FA5  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  6547  0FA6  00F1               	movwf	USARTWriteString@str
  6548  0FA7  3001               	movlw	1
  6549  0FA8  00F2               	movwf	USARTWriteString@str+1
  6550  0FA9  160A  158A  270C   	fcall	_USARTWriteString
  6551                           
  6552                           ;teris_16f886.c: 714: return 0;
  6553  0FAC  3000               	movlw	0
  6554  0FAD  0008               	return
  6555  0FAE                     l2930:	
  6556                           
  6557                           ;teris_16f886.c: 715: }
  6558                           ;teris_16f886.c: 716: if((y + row) > (8 - 1))
  6559  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  6560  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  6561  0FB0  0832               	movf	is_valid@y,w
  6562  0FB1  073B               	addwf	is_valid@row,w
  6563  0FB2  00B6               	movwf	??_is_valid
  6564  0FB3  01B7               	clrf	??_is_valid+1
  6565  0FB4  1803               	skipnc
  6566  0FB5  0AB7               	incf	??_is_valid+1,f
  6567  0FB6  1BB2               	btfsc	is_valid@y,7
  6568  0FB7  03B7               	decf	??_is_valid+1,f
  6569  0FB8  1BBB               	btfsc	is_valid@row,7
  6570  0FB9  03B7               	decf	??_is_valid+1,f
  6571  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  6572  0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  6573  0FBC  0837               	movf	??_is_valid+1,w
  6574  0FBD  3A80               	xorlw	128
  6575  0FBE  00FF               	movwf	127
  6576  0FBF  3080               	movlw	128
  6577  0FC0  027F               	subwf	127,w
  6578  0FC1  1D03               	skipz
  6579  0FC2  2FC5               	goto	u3505
  6580  0FC3  3008               	movlw	8
  6581  0FC4  0236               	subwf	??_is_valid,w
  6582  0FC5                     u3505:	
  6583  0FC5  1C03               	skipc
  6584  0FC6  2FE6               	goto	l2938
  6585                           
  6586                           ;teris_16f886.c: 717: {
  6587                           ;teris_16f886.c: 721: sprintf(g_debug, "not valid3 row = %d, col = %d\n", row, col);
  6588  0FC7  3099               	movlw	low (STR_26| (0+32768))
  6589  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  6590  0FC9  1303               	bcf	3,6	;RP1=0, select bank0
  6591  0FCA  00A0               	movwf	sprintf@f
  6592  0FCB  308C               	movlw	high (STR_26| (0+32768))
  6593  0FCC  00A1               	movwf	sprintf@f+1
  6594  0FCD  083B               	movf	is_valid@row,w
  6595  0FCE  00A2               	movwf	?_sprintf+2
  6596  0FCF  01A3               	clrf	?_sprintf+3
  6597  0FD0  1BA2               	btfsc	?_sprintf+2,7
  6598  0FD1  03A3               	decf	?_sprintf+3,f
  6599  0FD2  083C               	movf	is_valid@col,w
  6600  0FD3  00A4               	movwf	?_sprintf+4
  6601  0FD4  01A5               	clrf	?_sprintf+5
  6602  0FD5  1BA4               	btfsc	?_sprintf+4,7
  6603  0FD6  03A5               	decf	?_sprintf+5,f
  6604  0FD7  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  6605  0FD8  120A  118A  2012  120A  158A  	fcall	_sprintf
  6606                           
  6607                           ;teris_16f886.c: 722: USARTWriteString(g_debug);
  6608  0FDD  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  6609  0FDE  00F1               	movwf	USARTWriteString@str
  6610  0FDF  3001               	movlw	1
  6611  0FE0  00F2               	movwf	USARTWriteString@str+1
  6612  0FE1  160A  158A  270C   	fcall	_USARTWriteString
  6613                           
  6614                           ;teris_16f886.c: 724: return 0;
  6615  0FE4  3000               	movlw	0
  6616  0FE5  0008               	return
  6617  0FE6                     l2938:	
  6618  0FE6  3001               	movlw	1
  6619  0FE7  1283               	bcf	3,5	;RP0=0, select bank0
  6620  0FE8  1303               	bcf	3,6	;RP1=0, select bank0
  6621  0FE9  00B6               	movwf	??_is_valid
  6622  0FEA  0836               	movf	??_is_valid,w
  6623  0FEB  07BC               	addwf	is_valid@col,f
  6624  0FEC  083C               	movf	is_valid@col,w
  6625  0FED  3A80               	xorlw	128
  6626  0FEE  3E7C               	addlw	-132
  6627  0FEF  1C03               	skipc
  6628  0FF0  2F14               	goto	l2910
  6629  0FF1                     l2942:	
  6630  0FF1  30FF               	movlw	255
  6631  0FF2  00B6               	movwf	??_is_valid
  6632  0FF3  0836               	movf	??_is_valid,w
  6633  0FF4  07BB               	addwf	is_valid@row,f
  6634  0FF5  1FBB               	btfss	is_valid@row,7
  6635  0FF6  2F0E               	goto	l2904
  6636  0FF7                     l2946:	
  6637                           
  6638                           ;teris_16f886.c: 725: }
  6639                           ;teris_16f886.c: 726: }
  6640                           ;teris_16f886.c: 727: }
  6641                           ;teris_16f886.c: 728: }
  6642                           ;teris_16f886.c: 732: USARTWriteString("valid\r\n");
  6643  0FF7  303C               	movlw	low (STR_27| (0+32768))
  6644  0FF8  00F1               	movwf	USARTWriteString@str
  6645  0FF9  308E               	movlw	high (STR_27| (0+32768))
  6646  0FFA  00F2               	movwf	USARTWriteString@str+1
  6647  0FFB  160A  158A  270C   	fcall	_USARTWriteString
  6648                           
  6649                           ;teris_16f886.c: 734: return 1;
  6650  0FFE  3001               	movlw	1
  6651  0FFF  0008               	return
  6652  1000                     __end_of_is_valid:	
  6653                           
  6654                           	psect	text14
  6655  0235                     __ptext14:	
  6656 ;; *************** function _get_holes_after_merge *****************
  6657 ;; Defined at:
  6658 ;;		line 972 in file "teris_16f886.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;  matrix          1    wreg     PTR struct .
  6661 ;;		 -> find_best_solution@temp_matrix88(64), 
  6662 ;; Auto vars:     Size  Location     Type
  6663 ;;  matrix          1   27[BANK0 ] PTR struct .
  6664 ;;		 -> find_best_solution@temp_matrix88(64), 
  6665 ;;  row             1   29[BANK0 ] char 
  6666 ;;  col             1   28[BANK0 ] char 
  6667 ;;  start           1   26[BANK0 ] char 
  6668 ;;  stop            1   25[BANK0 ] char 
  6669 ;;  num_hole        1   24[BANK0 ] unsigned char 
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  1    wreg      unsigned char 
  6672 ;; Registers used:
  6673 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6679 ;;      Params:         0       0       0       0       0
  6680 ;;      Locals:         0       6       0       0       0
  6681 ;;      Temps:          0       6       0       0       0
  6682 ;;      Totals:         0      12       0       0       0
  6683 ;;Total ram usage:       12 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    2
  6686 ;; This function calls:
  6687 ;;		_USARTWriteString
  6688 ;;		_sprintf
  6689 ;; This function is called by:
  6690 ;;		_find_best_solution
  6691 ;; This function uses a non-reentrant model
  6692 ;;
  6693                           
  6694                           
  6695                           ;psect for function _get_holes_after_merge
  6696  0235                     _get_holes_after_merge:	
  6697                           
  6698                           ;incstack = 0
  6699                           ; Regs used in _get_holes_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  6700                           ;get_holes_after_merge@matrix stored from wreg
  6701  0235  1283               	bcf	3,5	;RP0=0, select bank0
  6702  0236  1303               	bcf	3,6	;RP1=0, select bank0
  6703  0237  00BB               	movwf	get_holes_after_merge@matrix
  6704                           
  6705                           ;teris_16f886.c: 974: int8_t start = -1;
  6706  0238  01BA               	clrf	get_holes_after_merge@start
  6707  0239  03BA               	decf	get_holes_after_merge@start,f
  6708                           
  6709                           ;teris_16f886.c: 975: int8_t stop = -1;
  6710  023A  01B9               	clrf	get_holes_after_merge@stop
  6711  023B  03B9               	decf	get_holes_after_merge@stop,f
  6712                           
  6713                           ;teris_16f886.c: 976: uint8_t num_hole = 0;
  6714  023C  01B8               	clrf	get_holes_after_merge@num_hole
  6715                           
  6716                           ;teris_16f886.c: 977: for(int8_t col = 0; col < 8; col++)
  6717  023D  01BC               	clrf	get_holes_after_merge@col
  6718  023E  083C               	movf	get_holes_after_merge@col,w
  6719  023F  3A80               	xorlw	128
  6720  0240  3E78               	addlw	-136
  6721  0241  1803               	btfsc	3,0
  6722  0242  2B6A               	goto	l3212
  6723  0243                     l3146:	
  6724                           
  6725                           ;teris_16f886.c: 978: {
  6726                           ;teris_16f886.c: 979: start = stop = -1;
  6727  0243  30FF               	movlw	255
  6728  0244  00B9               	movwf	get_holes_after_merge@stop
  6729  0245  00B2               	movwf	??_get_holes_after_merge
  6730  0246  0832               	movf	??_get_holes_after_merge,w
  6731  0247  00BA               	movwf	get_holes_after_merge@start
  6732                           
  6733                           ;teris_16f886.c: 980: for(int8_t row = 0; row < 8; row++)
  6734  0248  01BD               	clrf	get_holes_after_merge@row
  6735  0249  083D               	movf	get_holes_after_merge@row,w
  6736  024A  3A80               	xorlw	128
  6737  024B  3E78               	addlw	-136
  6738  024C  1803               	btfsc	3,0
  6739  024D  2B10               	goto	l389
  6740  024E                     l3154:	
  6741                           
  6742                           ;teris_16f886.c: 981: {
  6743                           ;teris_16f886.c: 982: if(col == 0)
  6744  024E  083C               	movf	get_holes_after_merge@col,w
  6745  024F  1D03               	btfss	3,2
  6746  0250  2A73               	goto	l3164
  6747                           
  6748                           ;teris_16f886.c: 983: {
  6749                           ;teris_16f886.c: 984: if((matrix->data[row][col] == 0) && (matrix->data[row][col + 1] ==
      +                           1))
  6750  0251  083D               	movf	get_holes_after_merge@row,w
  6751  0252  00B2               	movwf	??_get_holes_after_merge
  6752  0253  3002               	movlw	2
  6753  0254                     u3955:	
  6754  0254  1003               	clrc
  6755  0255  0DB2               	rlf	??_get_holes_after_merge,f
  6756  0256  3EFF               	addlw	-1
  6757  0257  1D03               	skipz
  6758  0258  2A54               	goto	u3955
  6759  0259  1003               	clrc
  6760  025A  0D32               	rlf	??_get_holes_after_merge,w
  6761  025B  073B               	addwf	get_holes_after_merge@matrix,w
  6762  025C  00B3               	movwf	??_get_holes_after_merge+1
  6763  025D  083C               	movf	get_holes_after_merge@col,w
  6764  025E  0733               	addwf	??_get_holes_after_merge+1,w
  6765  025F  00B4               	movwf	??_get_holes_after_merge+2
  6766  0260  0834               	movf	??_get_holes_after_merge+2,w
  6767  0261  0084               	movwf	4
  6768  0262  1383               	bcf	3,7	;select IRP bank0
  6769  0263  0800               	movf	0,w
  6770  0264  1D03               	btfss	3,2
  6771  0265  2ADF               	goto	l3184
  6772  0266  083C               	movf	get_holes_after_merge@col,w
  6773  0267  3E01               	addlw	1
  6774  0268  073B               	addwf	get_holes_after_merge@matrix,w
  6775  0269  00B2               	movwf	??_get_holes_after_merge
  6776  026A  083D               	movf	get_holes_after_merge@row,w
  6777  026B  00B3               	movwf	??_get_holes_after_merge+1
  6778  026C  3002               	movlw	2
  6779  026D                     u3975:	
  6780  026D  1003               	clrc
  6781  026E  0DB3               	rlf	??_get_holes_after_merge+1,f
  6782  026F  3EFF               	addlw	-1
  6783  0270  1D03               	skipz
  6784  0271  2A6D               	goto	u3975
  6785  0272  2ACF               	goto	L14
  6786  0273                     l3164:	
  6787                           ;teris_16f886.c: 989: }
  6788                           ;teris_16f886.c: 990: }
  6789                           ;teris_16f886.c: 991: }
  6790                           
  6791                           ;teris_16f886.c: 987: {
  6792                           ;teris_16f886.c: 988: start = row;
  6793                           
  6794                           ;teris_16f886.c: 985: {
  6795                           ;teris_16f886.c: 986: if(start == -1)
  6796                           
  6797                           
  6798                           ;teris_16f886.c: 992: else if(col == 8 - 1)
  6799  0273  3007               	movlw	7
  6800  0274  063C               	xorwf	get_holes_after_merge@col,w
  6801  0275  1D03               	btfss	3,2
  6802  0276  2A99               	goto	l3174
  6803                           
  6804                           ;teris_16f886.c: 993: {
  6805                           ;teris_16f886.c: 994: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] ==
      +                           1))
  6806  0277  083D               	movf	get_holes_after_merge@row,w
  6807  0278  00B2               	movwf	??_get_holes_after_merge
  6808  0279  3002               	movlw	2
  6809  027A                     u4015:	
  6810  027A  1003               	clrc
  6811  027B  0DB2               	rlf	??_get_holes_after_merge,f
  6812  027C  3EFF               	addlw	-1
  6813  027D  1D03               	skipz
  6814  027E  2A7A               	goto	u4015
  6815  027F  1003               	clrc
  6816  0280  0D32               	rlf	??_get_holes_after_merge,w
  6817  0281  073B               	addwf	get_holes_after_merge@matrix,w
  6818  0282  00B3               	movwf	??_get_holes_after_merge+1
  6819  0283  083C               	movf	get_holes_after_merge@col,w
  6820  0284  0733               	addwf	??_get_holes_after_merge+1,w
  6821  0285  00B4               	movwf	??_get_holes_after_merge+2
  6822  0286  0834               	movf	??_get_holes_after_merge+2,w
  6823  0287  0084               	movwf	4
  6824  0288  1383               	bcf	3,7	;select IRP bank0
  6825  0289  0800               	movf	0,w
  6826  028A  1D03               	btfss	3,2
  6827  028B  2ADF               	goto	l3184
  6828  028C  083C               	movf	get_holes_after_merge@col,w
  6829  028D  3EFF               	addlw	255
  6830  028E  073B               	addwf	get_holes_after_merge@matrix,w
  6831  028F  00B2               	movwf	??_get_holes_after_merge
  6832  0290  083D               	movf	get_holes_after_merge@row,w
  6833  0291  00B3               	movwf	??_get_holes_after_merge+1
  6834  0292  3002               	movlw	2
  6835  0293                     u4035:	
  6836  0293  1003               	clrc
  6837  0294  0DB3               	rlf	??_get_holes_after_merge+1,f
  6838  0295  3EFF               	addlw	-1
  6839  0296  1D03               	skipz
  6840  0297  2A93               	goto	u4035
  6841  0298  2ACF               	goto	L14
  6842  0299                     l3174:	
  6843                           ;teris_16f886.c: 999: }
  6844                           ;teris_16f886.c: 1000: }
  6845                           ;teris_16f886.c: 1001: }
  6846                           
  6847                           ;teris_16f886.c: 997: {
  6848                           ;teris_16f886.c: 998: start = row;
  6849                           
  6850                           ;teris_16f886.c: 995: {
  6851                           ;teris_16f886.c: 996: if(start == -1)
  6852                           
  6853                           
  6854                           ;teris_16f886.c: 1002: else
  6855                           ;teris_16f886.c: 1003: {
  6856                           ;teris_16f886.c: 1004: if((matrix->data[row][col] == 0) && (matrix->data[row][col - 1] =
      +                          = 1) && (matrix->data[row][col + 1] == 1))
  6857  0299  083D               	movf	get_holes_after_merge@row,w
  6858  029A  00B2               	movwf	??_get_holes_after_merge
  6859  029B  3002               	movlw	2
  6860  029C                     u4065:	
  6861  029C  1003               	clrc
  6862  029D  0DB2               	rlf	??_get_holes_after_merge,f
  6863  029E  3EFF               	addlw	-1
  6864  029F  1D03               	skipz
  6865  02A0  2A9C               	goto	u4065
  6866  02A1  1003               	clrc
  6867  02A2  0D32               	rlf	??_get_holes_after_merge,w
  6868  02A3  073B               	addwf	get_holes_after_merge@matrix,w
  6869  02A4  00B3               	movwf	??_get_holes_after_merge+1
  6870  02A5  083C               	movf	get_holes_after_merge@col,w
  6871  02A6  0733               	addwf	??_get_holes_after_merge+1,w
  6872  02A7  00B4               	movwf	??_get_holes_after_merge+2
  6873  02A8  0834               	movf	??_get_holes_after_merge+2,w
  6874  02A9  0084               	movwf	4
  6875  02AA  1383               	bcf	3,7	;select IRP bank0
  6876  02AB  0800               	movf	0,w
  6877  02AC  1D03               	btfss	3,2
  6878  02AD  2ADF               	goto	l3184
  6879  02AE  083C               	movf	get_holes_after_merge@col,w
  6880  02AF  3EFF               	addlw	255
  6881  02B0  073B               	addwf	get_holes_after_merge@matrix,w
  6882  02B1  00B2               	movwf	??_get_holes_after_merge
  6883  02B2  083D               	movf	get_holes_after_merge@row,w
  6884  02B3  00B3               	movwf	??_get_holes_after_merge+1
  6885  02B4  3002               	movlw	2
  6886  02B5                     u4085:	
  6887  02B5  1003               	clrc
  6888  02B6  0DB3               	rlf	??_get_holes_after_merge+1,f
  6889  02B7  3EFF               	addlw	-1
  6890  02B8  1D03               	skipz
  6891  02B9  2AB5               	goto	u4085
  6892  02BA  1003               	clrc
  6893  02BB  0D33               	rlf	??_get_holes_after_merge+1,w
  6894  02BC  0732               	addwf	??_get_holes_after_merge,w
  6895  02BD  00B4               	movwf	??_get_holes_after_merge+2
  6896  02BE  0834               	movf	??_get_holes_after_merge+2,w
  6897  02BF  0084               	movwf	4
  6898  02C0  0300               	decf	0,w
  6899  02C1  1D03               	btfss	3,2
  6900  02C2  2ADF               	goto	l3184
  6901  02C3  083C               	movf	get_holes_after_merge@col,w
  6902  02C4  3E01               	addlw	1
  6903  02C5  073B               	addwf	get_holes_after_merge@matrix,w
  6904  02C6  00B2               	movwf	??_get_holes_after_merge
  6905  02C7  083D               	movf	get_holes_after_merge@row,w
  6906  02C8  00B3               	movwf	??_get_holes_after_merge+1
  6907  02C9  3002               	movlw	2
  6908  02CA                     u4105:	
  6909  02CA  1003               	clrc
  6910  02CB  0DB3               	rlf	??_get_holes_after_merge+1,f
  6911  02CC  3EFF               	addlw	-1
  6912  02CD  1D03               	skipz
  6913  02CE  2ACA               	goto	u4105
  6914  02CF                     L14:	
  6915  02CF  1003               	clrc
  6916  02D0  0D33               	rlf	??_get_holes_after_merge+1,w
  6917  02D1  0732               	addwf	??_get_holes_after_merge,w
  6918  02D2  00B4               	movwf	??_get_holes_after_merge+2
  6919  02D3  0834               	movf	??_get_holes_after_merge+2,w
  6920  02D4  0084               	movwf	4
  6921  02D5  0300               	decf	0,w
  6922  02D6  1D03               	btfss	3,2
  6923  02D7  2ADF               	goto	l3184
  6924                           
  6925                           ;teris_16f886.c: 1005: {
  6926                           ;teris_16f886.c: 1006: if(start == -1)
  6927  02D8  0A3A               	incf	get_holes_after_merge@start,w
  6928  02D9  1D03               	btfss	3,2
  6929  02DA  2ADF               	goto	l3184
  6930                           
  6931                           ;teris_16f886.c: 1007: {
  6932                           ;teris_16f886.c: 1008: start = row;
  6933  02DB  083D               	movf	get_holes_after_merge@row,w
  6934  02DC  00B2               	movwf	??_get_holes_after_merge
  6935  02DD  0832               	movf	??_get_holes_after_merge,w
  6936  02DE  00BA               	movwf	get_holes_after_merge@start
  6937  02DF                     l3184:	
  6938                           
  6939                           ;teris_16f886.c: 1009: }
  6940                           ;teris_16f886.c: 1010: }
  6941                           ;teris_16f886.c: 1011: }
  6942                           ;teris_16f886.c: 1012: if(start >= 0)
  6943  02DF  1BBA               	btfsc	get_holes_after_merge@start,7
  6944  02E0  2B07               	goto	l400
  6945                           
  6946                           ;teris_16f886.c: 1013: {
  6947                           ;teris_16f886.c: 1014: if(row == 8 - 1)
  6948  02E1  3007               	movlw	7
  6949  02E2  063D               	xorwf	get_holes_after_merge@row,w
  6950  02E3  1D03               	btfss	3,2
  6951  02E4  2AEA               	goto	l3192
  6952                           
  6953                           ;teris_16f886.c: 1015: {
  6954                           ;teris_16f886.c: 1016: if(stop == -1)
  6955  02E5  0A39               	incf	get_holes_after_merge@stop,w
  6956  02E6  1D03               	btfss	3,2
  6957  02E7  2B07               	goto	l400
  6958                           
  6959                           ;teris_16f886.c: 1017: {
  6960                           ;teris_16f886.c: 1018: stop = 8;
  6961  02E8  3008               	movlw	8
  6962  02E9  2B04               	goto	L13
  6963  02EA                     l3192:	
  6964                           ;teris_16f886.c: 1019: }
  6965                           ;teris_16f886.c: 1020: }
  6966                           
  6967                           
  6968                           ;teris_16f886.c: 1021: else if(matrix->data[row + 1][col] == 1)
  6969  02EA  083D               	movf	get_holes_after_merge@row,w
  6970  02EB  00B2               	movwf	??_get_holes_after_merge
  6971  02EC  3002               	movlw	2
  6972  02ED                     u4165:	
  6973  02ED  1003               	clrc
  6974  02EE  0DB2               	rlf	??_get_holes_after_merge,f
  6975  02EF  3EFF               	addlw	-1
  6976  02F0  1D03               	skipz
  6977  02F1  2AED               	goto	u4165
  6978  02F2  1003               	clrc
  6979  02F3  0D32               	rlf	??_get_holes_after_merge,w
  6980  02F4  3E08               	addlw	8
  6981  02F5  073B               	addwf	get_holes_after_merge@matrix,w
  6982  02F6  00B3               	movwf	??_get_holes_after_merge+1
  6983  02F7  083C               	movf	get_holes_after_merge@col,w
  6984  02F8  0733               	addwf	??_get_holes_after_merge+1,w
  6985  02F9  00B4               	movwf	??_get_holes_after_merge+2
  6986  02FA  0834               	movf	??_get_holes_after_merge+2,w
  6987  02FB  0084               	movwf	4
  6988  02FC  0300               	decf	0,w
  6989  02FD  1D03               	btfss	3,2
  6990  02FE  2B07               	goto	l400
  6991                           
  6992                           ;teris_16f886.c: 1022: {
  6993                           ;teris_16f886.c: 1023: if(stop == -1)
  6994  02FF  0A39               	incf	get_holes_after_merge@stop,w
  6995  0300  1D03               	btfss	3,2
  6996  0301  2B07               	goto	l400
  6997                           
  6998                           ;teris_16f886.c: 1024: {
  6999                           ;teris_16f886.c: 1025: stop = row + 1;
  7000  0302  083D               	movf	get_holes_after_merge@row,w
  7001  0303  3E01               	addlw	1
  7002  0304                     L13:	
  7003  0304  00B2               	movwf	??_get_holes_after_merge
  7004  0305  0832               	movf	??_get_holes_after_merge,w
  7005  0306  00B9               	movwf	get_holes_after_merge@stop
  7006  0307                     l400:	
  7007  0307  3001               	movlw	1
  7008  0308  00B2               	movwf	??_get_holes_after_merge
  7009  0309  0832               	movf	??_get_holes_after_merge,w
  7010  030A  07BD               	addwf	get_holes_after_merge@row,f
  7011  030B  083D               	movf	get_holes_after_merge@row,w
  7012  030C  3A80               	xorlw	128
  7013  030D  3E78               	addlw	-136
  7014  030E  1C03               	skipc
  7015  030F  2A4E               	goto	l3154
  7016  0310                     l389:	
  7017                           
  7018                           ;teris_16f886.c: 1026: }
  7019                           ;teris_16f886.c: 1027: }
  7020                           ;teris_16f886.c: 1028: }
  7021                           ;teris_16f886.c: 1030: }
  7022                           ;teris_16f886.c: 1031: if((start >= 0) && (stop >= 0) && (stop - start >= 3))
  7023  0310  1FBA               	btfss	get_holes_after_merge@start,7
  7024  0311  1BB9               	btfsc	get_holes_after_merge@stop,7
  7025  0312  2B5F               	goto	l3208
  7026  0313  083A               	movf	get_holes_after_merge@start,w
  7027  0314  00B2               	movwf	??_get_holes_after_merge
  7028  0315  01B3               	clrf	??_get_holes_after_merge+1
  7029  0316  1BB2               	btfsc	??_get_holes_after_merge,7
  7030  0317  03B3               	decf	??_get_holes_after_merge+1,f
  7031  0318  09B2               	comf	??_get_holes_after_merge,f
  7032  0319  09B3               	comf	??_get_holes_after_merge+1,f
  7033  031A  0AB2               	incf	??_get_holes_after_merge,f
  7034  031B  1903               	skipnz
  7035  031C  0AB3               	incf	??_get_holes_after_merge+1,f
  7036  031D  0839               	movf	get_holes_after_merge@stop,w
  7037  031E  00B4               	movwf	??_get_holes_after_merge+2
  7038  031F  01B5               	clrf	??_get_holes_after_merge+3
  7039  0320  1BB4               	btfsc	??_get_holes_after_merge+2,7
  7040  0321  03B5               	decf	??_get_holes_after_merge+3,f
  7041  0322  0832               	movf	??_get_holes_after_merge,w
  7042  0323  0734               	addwf	??_get_holes_after_merge+2,w
  7043  0324  00B6               	movwf	??_get_holes_after_merge+4
  7044  0325  0833               	movf	??_get_holes_after_merge+1,w
  7045  0326  1803               	skipnc
  7046  0327  0A33               	incf	??_get_holes_after_merge+1,w
  7047  0328  0735               	addwf	??_get_holes_after_merge+3,w
  7048  0329  00B7               	movwf	??_get_holes_after_merge+5
  7049  032A  0837               	movf	??_get_holes_after_merge+5,w
  7050  032B  3A80               	xorlw	128
  7051  032C  00FF               	movwf	127
  7052  032D  3080               	movlw	128
  7053  032E  027F               	subwf	127,w
  7054  032F  1D03               	skipz
  7055  0330  2B33               	goto	u4225
  7056  0331  3003               	movlw	3
  7057  0332  0236               	subwf	??_get_holes_after_merge+4,w
  7058  0333                     u4225:	
  7059  0333  1C03               	skipc
  7060  0334  2B5F               	goto	l3208
  7061                           
  7062                           ;teris_16f886.c: 1032: {
  7063                           ;teris_16f886.c: 1036: sprintf(g_debug, "col = %d, start = %d, stop = %d\n", col, start,
      +                           stop);
  7064  0335  30DC               	movlw	low (STR_37| (0+32768))
  7065  0336  1283               	bcf	3,5	;RP0=0, select bank0
  7066  0337  1303               	bcf	3,6	;RP1=0, select bank0
  7067  0338  00A0               	movwf	sprintf@f
  7068  0339  308B               	movlw	high (STR_37| (0+32768))
  7069  033A  00A1               	movwf	sprintf@f+1
  7070  033B  083C               	movf	get_holes_after_merge@col,w
  7071  033C  00A2               	movwf	?_sprintf+2
  7072  033D  01A3               	clrf	?_sprintf+3
  7073  033E  1BA2               	btfsc	?_sprintf+2,7
  7074  033F  03A3               	decf	?_sprintf+3,f
  7075  0340  083A               	movf	get_holes_after_merge@start,w
  7076  0341  00A4               	movwf	?_sprintf+4
  7077  0342  01A5               	clrf	?_sprintf+5
  7078  0343  1BA4               	btfsc	?_sprintf+4,7
  7079  0344  03A5               	decf	?_sprintf+5,f
  7080  0345  0839               	movf	get_holes_after_merge@stop,w
  7081  0346  00A6               	movwf	?_sprintf+6
  7082  0347  01A7               	clrf	?_sprintf+7
  7083  0348  1BA6               	btfsc	?_sprintf+6,7
  7084  0349  03A7               	decf	?_sprintf+7,f
  7085  034A  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7086  034B  120A  118A  2012  120A  118A  	fcall	_sprintf
  7087                           
  7088                           ;teris_16f886.c: 1037: USARTWriteString(g_debug);
  7089  0350  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7090  0351  00F1               	movwf	USARTWriteString@str
  7091  0352  3001               	movlw	1
  7092  0353  00F2               	movwf	USARTWriteString@str+1
  7093  0354  160A  158A  270C  120A  118A  	fcall	_USARTWriteString
  7094                           
  7095                           ;teris_16f886.c: 1039: num_hole++;
  7096  0359  3001               	movlw	1
  7097  035A  1283               	bcf	3,5	;RP0=0, select bank0
  7098  035B  1303               	bcf	3,6	;RP1=0, select bank0
  7099  035C  00B2               	movwf	??_get_holes_after_merge
  7100  035D  0832               	movf	??_get_holes_after_merge,w
  7101  035E  07B8               	addwf	get_holes_after_merge@num_hole,f
  7102  035F                     l3208:	
  7103  035F  3001               	movlw	1
  7104  0360  1283               	bcf	3,5	;RP0=0, select bank0
  7105  0361  1303               	bcf	3,6	;RP1=0, select bank0
  7106  0362  00B2               	movwf	??_get_holes_after_merge
  7107  0363  0832               	movf	??_get_holes_after_merge,w
  7108  0364  07BC               	addwf	get_holes_after_merge@col,f
  7109  0365  083C               	movf	get_holes_after_merge@col,w
  7110  0366  3A80               	xorlw	128
  7111  0367  3E78               	addlw	-136
  7112  0368  1C03               	skipc
  7113  0369  2A43               	goto	l3146
  7114  036A                     l3212:	
  7115                           
  7116                           ;teris_16f886.c: 1040: }
  7117                           ;teris_16f886.c: 1041: }
  7118                           ;teris_16f886.c: 1045: sprintf(g_debug, "num_hole = (%d)\n", num_hole);
  7119  036A  30D6               	movlw	low (STR_38| (0+32768))
  7120  036B  00A0               	movwf	sprintf@f
  7121  036C  308D               	movlw	high (STR_38| (0+32768))
  7122  036D  00A1               	movwf	sprintf@f+1
  7123  036E  0838               	movf	get_holes_after_merge@num_hole,w
  7124  036F  00B2               	movwf	??_get_holes_after_merge
  7125  0370  01B3               	clrf	??_get_holes_after_merge+1
  7126  0371  0832               	movf	??_get_holes_after_merge,w
  7127  0372  00A2               	movwf	?_sprintf+2
  7128  0373  0833               	movf	??_get_holes_after_merge+1,w
  7129  0374  00A3               	movwf	?_sprintf+3
  7130  0375  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7131  0376  120A  118A  2012  120A  118A  	fcall	_sprintf
  7132                           
  7133                           ;teris_16f886.c: 1046: USARTWriteString(g_debug);
  7134  037B  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7135  037C  00F1               	movwf	USARTWriteString@str
  7136  037D  3001               	movlw	1
  7137  037E  00F2               	movwf	USARTWriteString@str+1
  7138  037F  160A  158A  270C   	fcall	_USARTWriteString
  7139                           
  7140                           ;teris_16f886.c: 1048: return num_hole;
  7141  0382  1283               	bcf	3,5	;RP0=0, select bank0
  7142  0383  1303               	bcf	3,6	;RP1=0, select bank0
  7143  0384  0838               	movf	get_holes_after_merge@num_hole,w
  7144  0385  0008               	return
  7145  0386                     __end_of_get_holes_after_merge:	
  7146                           
  7147                           	psect	text15
  7148  1513                     __ptext15:	
  7149 ;; *************** function _get_high_after_merge *****************
  7150 ;; Defined at:
  7151 ;;		line 953 in file "teris_16f886.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  y               1    wreg     char 
  7154 ;;  matrix          2   18[BANK0 ] PTR struct .
  7155 ;;		 -> g_matrix44(384), 
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;  y               1   24[BANK0 ] char 
  7158 ;;  col             1   25[BANK0 ] char 
  7159 ;;  row             1   26[BANK0 ] char 
  7160 ;; Return value:  Size  Location     Type
  7161 ;;                  1    wreg      unsigned char 
  7162 ;; Registers used:
  7163 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7169 ;;      Params:         0       2       0       0       0
  7170 ;;      Locals:         0       3       0       0       0
  7171 ;;      Temps:          0       4       0       0       0
  7172 ;;      Totals:         0       9       0       0       0
  7173 ;;Total ram usage:        9 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:    2
  7176 ;; This function calls:
  7177 ;;		_USARTWriteString
  7178 ;;		_sprintf
  7179 ;; This function is called by:
  7180 ;;		_find_best_solution
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183                           
  7184                           
  7185                           ;psect for function _get_high_after_merge
  7186  1513                     _get_high_after_merge:	
  7187                           
  7188                           ;incstack = 0
  7189                           ; Regs used in _get_high_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  7190                           ;get_high_after_merge@y stored from wreg
  7191  1513  1283               	bcf	3,5	;RP0=0, select bank0
  7192  1514  1303               	bcf	3,6	;RP1=0, select bank0
  7193  1515  00B8               	movwf	get_high_after_merge@y
  7194                           
  7195                           ;teris_16f886.c: 955: for(int8_t row = 0; row < 4; row++)
  7196  1516  01BA               	clrf	get_high_after_merge@row
  7197  1517                     L15:	
  7198  1517  083A               	movf	get_high_after_merge@row,w
  7199  1518  3A80               	xorlw	128
  7200  1519  3E7C               	addlw	-132
  7201  151A  1803               	btfsc	3,0
  7202  151B  0008               	return
  7203                           
  7204                           ;teris_16f886.c: 956: {
  7205                           ;teris_16f886.c: 957: for(int8_t col = 0; col < 4; col++)
  7206  151C  01B9               	clrf	get_high_after_merge@col
  7207  151D  0839               	movf	get_high_after_merge@col,w
  7208  151E  3A80               	xorlw	128
  7209  151F  3E7C               	addlw	-132
  7210  1520  1803               	btfsc	3,0
  7211  1521  2D87               	goto	l3134
  7212  1522                     l3122:	
  7213                           
  7214                           ;teris_16f886.c: 958: {
  7215                           ;teris_16f886.c: 959: if(matrix->data[row][col] == 1)
  7216  1522  083A               	movf	get_high_after_merge@row,w
  7217  1523  00B4               	movwf	??_get_high_after_merge
  7218  1524  01B5               	clrf	??_get_high_after_merge+1
  7219  1525  1003               	clrc
  7220  1526  0DB4               	rlf	??_get_high_after_merge,f
  7221  1527  0DB5               	rlf	??_get_high_after_merge+1,f
  7222  1528  1003               	clrc
  7223  1529  0DB4               	rlf	??_get_high_after_merge,f
  7224  152A  0DB5               	rlf	??_get_high_after_merge+1,f
  7225  152B  0834               	movf	??_get_high_after_merge,w
  7226  152C  0732               	addwf	get_high_after_merge@matrix,w
  7227  152D  00B6               	movwf	??_get_high_after_merge+2
  7228  152E  0835               	movf	??_get_high_after_merge+1,w
  7229  152F  1803               	skipnc
  7230  1530  0A35               	incf	??_get_high_after_merge+1,w
  7231  1531  0733               	addwf	get_high_after_merge@matrix+1,w
  7232  1532  00B7               	movwf	??_get_high_after_merge+3
  7233  1533  0839               	movf	get_high_after_merge@col,w
  7234  1534  0736               	addwf	??_get_high_after_merge+2,w
  7235  1535  0084               	movwf	4
  7236  1536  0837               	movf	??_get_high_after_merge+3,w
  7237  1537  1803               	skipnc
  7238  1538  0A37               	incf	??_get_high_after_merge+3,w
  7239  1539  00FF               	movwf	127
  7240  153A  120A  158A  2000  160A  118A  	fcall	stringtab
  7241  153F  3A01               	xorlw	1
  7242  1540  1D03               	skipz
  7243  1541  2D7E               	goto	l3130
  7244                           
  7245                           ;teris_16f886.c: 960: {
  7246                           ;teris_16f886.c: 964: sprintf(g_debug, "get_high_after_merge y = %d, row = %d, height = 
      +                          %d\n", y, row, 8 - y - row);
  7247  1542  309C               	movlw	low (STR_36| (0+32768))
  7248  1543  00A0               	movwf	sprintf@f
  7249  1544  3089               	movlw	high (STR_36| (0+32768))
  7250  1545  00A1               	movwf	sprintf@f+1
  7251  1546  0838               	movf	get_high_after_merge@y,w
  7252  1547  00A2               	movwf	?_sprintf+2
  7253  1548  01A3               	clrf	?_sprintf+3
  7254  1549  1BA2               	btfsc	?_sprintf+2,7
  7255  154A  03A3               	decf	?_sprintf+3,f
  7256  154B  083A               	movf	get_high_after_merge@row,w
  7257  154C  00A4               	movwf	?_sprintf+4
  7258  154D  01A5               	clrf	?_sprintf+5
  7259  154E  1BA4               	btfsc	?_sprintf+4,7
  7260  154F  03A5               	decf	?_sprintf+5,f
  7261  1550  0838               	movf	get_high_after_merge@y,w
  7262  1551  073A               	addwf	get_high_after_merge@row,w
  7263  1552  00B4               	movwf	??_get_high_after_merge
  7264  1553  01B5               	clrf	??_get_high_after_merge+1
  7265  1554  1803               	skipnc
  7266  1555  0AB5               	incf	??_get_high_after_merge+1,f
  7267  1556  1BB8               	btfsc	get_high_after_merge@y,7
  7268  1557  03B5               	decf	??_get_high_after_merge+1,f
  7269  1558  1BBA               	btfsc	get_high_after_merge@row,7
  7270  1559  03B5               	decf	??_get_high_after_merge+1,f
  7271  155A  1283               	bcf	3,5	;RP0=0, select bank0
  7272  155B  1303               	bcf	3,6	;RP1=0, select bank0
  7273  155C  09B4               	comf	??_get_high_after_merge,f
  7274  155D  09B5               	comf	??_get_high_after_merge+1,f
  7275  155E  0AB4               	incf	??_get_high_after_merge,f
  7276  155F  1903               	skipnz
  7277  1560  0AB5               	incf	??_get_high_after_merge+1,f
  7278  1561  0834               	movf	??_get_high_after_merge,w
  7279  1562  3E08               	addlw	8
  7280  1563  00A6               	movwf	?_sprintf+6
  7281  1564  0835               	movf	??_get_high_after_merge+1,w
  7282  1565  1803               	skipnc
  7283  1566  3E01               	addlw	1
  7284  1567  3E00               	addlw	0
  7285  1568  00A7               	movwf	?_sprintf+7
  7286  1569  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7287  156A  120A  118A  2012  160A  118A  	fcall	_sprintf
  7288                           
  7289                           ;teris_16f886.c: 965: USARTWriteString(g_debug);
  7290  156F  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7291  1570  00F1               	movwf	USARTWriteString@str
  7292  1571  3001               	movlw	1
  7293  1572  00F2               	movwf	USARTWriteString@str+1
  7294  1573  160A  158A  270C   	fcall	_USARTWriteString
  7295                           
  7296                           ;teris_16f886.c: 967: return (uint8_t)(8 - y - row);
  7297  1576  1283               	bcf	3,5	;RP0=0, select bank0
  7298  1577  1303               	bcf	3,6	;RP1=0, select bank0
  7299  1578  083A               	movf	get_high_after_merge@row,w
  7300  1579  0738               	addwf	get_high_after_merge@y,w
  7301  157A  3AFF               	xorlw	255
  7302  157B  3E01               	addlw	1
  7303  157C  3E08               	addlw	8
  7304  157D  0008               	return
  7305  157E                     l3130:	
  7306  157E  3001               	movlw	1
  7307  157F  00B4               	movwf	??_get_high_after_merge
  7308  1580  0834               	movf	??_get_high_after_merge,w
  7309  1581  07B9               	addwf	get_high_after_merge@col,f
  7310  1582  0839               	movf	get_high_after_merge@col,w
  7311  1583  3A80               	xorlw	128
  7312  1584  3E7C               	addlw	-132
  7313  1585  1C03               	skipc
  7314  1586  2D22               	goto	l3122
  7315  1587                     l3134:	
  7316  1587  3001               	movlw	1
  7317  1588  00B4               	movwf	??_get_high_after_merge
  7318  1589  0834               	movf	??_get_high_after_merge,w
  7319  158A  07BA               	addwf	get_high_after_merge@row,f
  7320  158B  2D17               	goto	L15
  7321  158C                     __end_of_get_high_after_merge:	
  7322                           
  7323                           	psect	text16
  7324  12CB                     __ptext16:	
  7325 ;; *************** function _get_high *****************
  7326 ;; Defined at:
  7327 ;;		line 936 in file "teris_16f886.c"
  7328 ;; Parameters:    Size  Location     Type
  7329 ;;  matrix          1    wreg     PTR struct .
  7330 ;;		 -> g_matrix88(64), 
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;  matrix          1   20[BANK0 ] PTR struct .
  7333 ;;		 -> g_matrix88(64), 
  7334 ;;  row             1   21[BANK0 ] char 
  7335 ;; Return value:  Size  Location     Type
  7336 ;;                  1    wreg      unsigned char 
  7337 ;; Registers used:
  7338 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7339 ;; Tracked objects:
  7340 ;;		On entry : 0/0
  7341 ;;		On exit  : 0/0
  7342 ;;		Unchanged: 0/0
  7343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7344 ;;      Params:         0       0       0       0       0
  7345 ;;      Locals:         0       2       0       0       0
  7346 ;;      Temps:          0       2       0       0       0
  7347 ;;      Totals:         0       4       0       0       0
  7348 ;;Total ram usage:        4 bytes
  7349 ;; Hardware stack levels used:    1
  7350 ;; Hardware stack levels required when called:    2
  7351 ;; This function calls:
  7352 ;;		_USARTWriteString
  7353 ;;		_is_row_empty
  7354 ;;		_sprintf
  7355 ;; This function is called by:
  7356 ;;		_find_best_solution
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           
  7361                           ;psect for function _get_high
  7362  12CB                     _get_high:	
  7363                           
  7364                           ;incstack = 0
  7365                           ; Regs used in _get_high: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7366                           ;get_high@matrix stored from wreg
  7367  12CB  1283               	bcf	3,5	;RP0=0, select bank0
  7368  12CC  1303               	bcf	3,6	;RP1=0, select bank0
  7369  12CD  00B4               	movwf	get_high@matrix
  7370                           
  7371                           ;teris_16f886.c: 938: for(int8_t row = 8 - 1; row >= 0; row--)
  7372  12CE  3007               	movlw	7
  7373  12CF  00B2               	movwf	??_get_high
  7374  12D0  0832               	movf	??_get_high,w
  7375  12D1  00B5               	movwf	get_high@row
  7376  12D2  1BB5               	btfsc	get_high@row,7
  7377  12D3  2B1B               	goto	l3106
  7378  12D4                     l3094:	
  7379                           
  7380                           ;teris_16f886.c: 939: {
  7381                           ;teris_16f886.c: 940: if(is_row_empty(matrix, row) == 1)
  7382  12D4  0835               	movf	get_high@row,w
  7383  12D5  00B2               	movwf	??_get_high
  7384  12D6  0832               	movf	??_get_high,w
  7385  12D7  00F0               	movwf	is_row_empty@row
  7386  12D8  0834               	movf	get_high@matrix,w
  7387  12D9  120A  158A  2648  160A  118A  	fcall	_is_row_empty
  7388  12DE  3A01               	xorlw	1
  7389  12DF  1D03               	skipz
  7390  12E0  2B13               	goto	l3102
  7391                           
  7392                           ;teris_16f886.c: 941: {
  7393                           ;teris_16f886.c: 945: sprintf(g_debug, "get_high height = %d\n", 8 - row - 1);
  7394  12E1  30AB               	movlw	low (STR_35| (0+32768))
  7395  12E2  1283               	bcf	3,5	;RP0=0, select bank0
  7396  12E3  1303               	bcf	3,6	;RP1=0, select bank0
  7397  12E4  00A0               	movwf	sprintf@f
  7398  12E5  308D               	movlw	high (STR_35| (0+32768))
  7399  12E6  00A1               	movwf	sprintf@f+1
  7400  12E7  3001               	movlw	1
  7401  12E8  0735               	addwf	get_high@row,w
  7402  12E9  00B2               	movwf	??_get_high
  7403  12EA  01B3               	clrf	??_get_high+1
  7404  12EB  1803               	skipnc
  7405  12EC  0AB3               	incf	??_get_high+1,f
  7406  12ED  1BB5               	btfsc	get_high@row,7
  7407  12EE  03B3               	decf	??_get_high+1,f
  7408  12EF  1283               	bcf	3,5	;RP0=0, select bank0
  7409  12F0  1303               	bcf	3,6	;RP1=0, select bank0
  7410  12F1  09B2               	comf	??_get_high,f
  7411  12F2  09B3               	comf	??_get_high+1,f
  7412  12F3  0AB2               	incf	??_get_high,f
  7413  12F4  1903               	skipnz
  7414  12F5  0AB3               	incf	??_get_high+1,f
  7415  12F6  0832               	movf	??_get_high,w
  7416  12F7  3E08               	addlw	8
  7417  12F8  00A2               	movwf	?_sprintf+2
  7418  12F9  0833               	movf	??_get_high+1,w
  7419  12FA  1803               	skipnc
  7420  12FB  3E01               	addlw	1
  7421  12FC  3E00               	addlw	0
  7422  12FD  00A3               	movwf	?_sprintf+3
  7423  12FE  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7424  12FF  120A  118A  2012  160A  118A  	fcall	_sprintf
  7425                           
  7426                           ;teris_16f886.c: 946: USARTWriteString(g_debug);
  7427  1304  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7428  1305  00F1               	movwf	USARTWriteString@str
  7429  1306  3001               	movlw	1
  7430  1307  00F2               	movwf	USARTWriteString@str+1
  7431  1308  160A  158A  270C   	fcall	_USARTWriteString
  7432                           
  7433                           ;teris_16f886.c: 948: return (uint8_t)(8 - row - 1);
  7434  130B  1283               	bcf	3,5	;RP0=0, select bank0
  7435  130C  1303               	bcf	3,6	;RP1=0, select bank0
  7436  130D  0835               	movf	get_high@row,w
  7437  130E  3E01               	addlw	1
  7438  130F  3AFF               	xorlw	255
  7439  1310  3E01               	addlw	1
  7440  1311  3E08               	addlw	8
  7441  1312  0008               	return
  7442  1313                     l3102:	
  7443  1313  30FF               	movlw	255
  7444  1314  1283               	bcf	3,5	;RP0=0, select bank0
  7445  1315  1303               	bcf	3,6	;RP1=0, select bank0
  7446  1316  00B2               	movwf	??_get_high
  7447  1317  0832               	movf	??_get_high,w
  7448  1318  07B5               	addwf	get_high@row,f
  7449  1319  1FB5               	btfss	get_high@row,7
  7450  131A  2AD4               	goto	l3094
  7451  131B                     l3106:	
  7452                           
  7453                           ;teris_16f886.c: 949: }
  7454                           ;teris_16f886.c: 950: }
  7455                           ;teris_16f886.c: 951: return 8;
  7456  131B  3008               	movlw	8
  7457  131C  0008               	return
  7458  131D                     __end_of_get_high:	
  7459                           
  7460                           	psect	text17
  7461  0E48                     __ptext17:	
  7462 ;; *************** function _is_row_empty *****************
  7463 ;; Defined at:
  7464 ;;		line 615 in file "teris_16f886.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;  matrix          1    wreg     PTR const struct .
  7467 ;;		 -> g_matrix88(64), 
  7468 ;;  row             1    0[COMMON] unsigned char 
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;  matrix          1    4[COMMON] PTR const struct .
  7471 ;;		 -> g_matrix88(64), 
  7472 ;;  col             1    5[COMMON] unsigned char 
  7473 ;; Return value:  Size  Location     Type
  7474 ;;                  1    wreg      unsigned char 
  7475 ;; Registers used:
  7476 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7477 ;; Tracked objects:
  7478 ;;		On entry : 0/0
  7479 ;;		On exit  : 0/0
  7480 ;;		Unchanged: 0/0
  7481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7482 ;;      Params:         1       0       0       0       0
  7483 ;;      Locals:         2       0       0       0       0
  7484 ;;      Temps:          3       0       0       0       0
  7485 ;;      Totals:         6       0       0       0       0
  7486 ;;Total ram usage:        6 bytes
  7487 ;; Hardware stack levels used:    1
  7488 ;; This function calls:
  7489 ;;		Nothing
  7490 ;; This function is called by:
  7491 ;;		_get_high
  7492 ;; This function uses a non-reentrant model
  7493 ;;
  7494                           
  7495                           
  7496                           ;psect for function _is_row_empty
  7497  0E48                     _is_row_empty:	
  7498                           
  7499                           ;incstack = 0
  7500                           ; Regs used in _is_row_empty: [wreg-fsr0h+status,2+status,0]
  7501                           ;is_row_empty@matrix stored from wreg
  7502  0E48  00F4               	movwf	is_row_empty@matrix
  7503                           
  7504                           ;teris_16f886.c: 617: for(uint8_t col = 0; col < 8; col++)
  7505  0E49  01F5               	clrf	is_row_empty@col
  7506  0E4A  3008               	movlw	8
  7507  0E4B  0275               	subwf	is_row_empty@col,w
  7508  0E4C  1803               	btfsc	3,0
  7509  0E4D  2E6D               	goto	l2746
  7510  0E4E                     l2736:	
  7511                           
  7512                           ;teris_16f886.c: 618: {
  7513                           ;teris_16f886.c: 619: if(matrix->data[row][col] == 1)
  7514  0E4E  0870               	movf	is_row_empty@row,w
  7515  0E4F  00F1               	movwf	??_is_row_empty
  7516  0E50  3002               	movlw	2
  7517  0E51                     u3075:	
  7518  0E51  1003               	clrc
  7519  0E52  0DF1               	rlf	??_is_row_empty,f
  7520  0E53  3EFF               	addlw	-1
  7521  0E54  1D03               	skipz
  7522  0E55  2E51               	goto	u3075
  7523  0E56  1003               	clrc
  7524  0E57  0D71               	rlf	??_is_row_empty,w
  7525  0E58  0774               	addwf	is_row_empty@matrix,w
  7526  0E59  00F2               	movwf	??_is_row_empty+1
  7527  0E5A  0875               	movf	is_row_empty@col,w
  7528  0E5B  0772               	addwf	??_is_row_empty+1,w
  7529  0E5C  00F3               	movwf	??_is_row_empty+2
  7530  0E5D  0873               	movf	??_is_row_empty+2,w
  7531  0E5E  0084               	movwf	4
  7532  0E5F  1783               	bsf	3,7	;select IRP bank2
  7533  0E60  0300               	decf	0,w
  7534  0E61  1D03               	btfss	3,2
  7535  0E62  2E65               	goto	l2742
  7536                           
  7537                           ;teris_16f886.c: 620: {
  7538                           ;teris_16f886.c: 621: return 0;
  7539  0E63  3000               	movlw	0
  7540  0E64  0008               	return
  7541  0E65                     l2742:	
  7542  0E65  3001               	movlw	1
  7543  0E66  00F1               	movwf	??_is_row_empty
  7544  0E67  0871               	movf	??_is_row_empty,w
  7545  0E68  07F5               	addwf	is_row_empty@col,f
  7546  0E69  3008               	movlw	8
  7547  0E6A  0275               	subwf	is_row_empty@col,w
  7548  0E6B  1C03               	skipc
  7549  0E6C  2E4E               	goto	l2736
  7550  0E6D                     l2746:	
  7551                           
  7552                           ;teris_16f886.c: 622: }
  7553                           ;teris_16f886.c: 623: }
  7554                           ;teris_16f886.c: 624: return 1;
  7555  0E6D  3001               	movlw	1
  7556  0E6E  0008               	return
  7557  0E6F                     __end_of_is_row_empty:	
  7558                           
  7559                           	psect	text18
  7560  158C                     __ptext18:	
  7561 ;; *************** function _fall_off *****************
  7562 ;; Defined at:
  7563 ;;		line 780 in file "teris_16f886.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;  x               1    wreg     char 
  7566 ;;  y               1   18[BANK0 ] char 
  7567 ;;  matrix44        2   19[BANK0 ] PTR const struct .
  7568 ;;		 -> g_matrix44(384), 
  7569 ;;  matrix88        1   21[BANK0 ] PTR const struct .
  7570 ;;		 -> g_matrix88(64), 
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;  x               1   26[BANK0 ] char 
  7573 ;;  col             1   27[BANK0 ] char 
  7574 ;;  row             1   28[BANK0 ] char 
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  1    wreg      unsigned char 
  7577 ;; Registers used:
  7578 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7579 ;; Tracked objects:
  7580 ;;		On entry : 0/0
  7581 ;;		On exit  : 0/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7584 ;;      Params:         0       4       0       0       0
  7585 ;;      Locals:         0       3       0       0       0
  7586 ;;      Temps:          0       4       0       0       0
  7587 ;;      Totals:         0      11       0       0       0
  7588 ;;Total ram usage:       11 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; Hardware stack levels required when called:    2
  7591 ;; This function calls:
  7592 ;;		_USARTWriteString
  7593 ;;		_sprintf
  7594 ;; This function is called by:
  7595 ;;		_find_best_solution
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           
  7600                           ;psect for function _fall_off
  7601  158C                     _fall_off:	
  7602                           
  7603                           ;incstack = 0
  7604                           ; Regs used in _fall_off: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7605                           ;fall_off@x stored from wreg
  7606  158C  1283               	bcf	3,5	;RP0=0, select bank0
  7607  158D  1303               	bcf	3,6	;RP1=0, select bank0
  7608  158E  00BA               	movwf	fall_off@x
  7609  158F                     l307:	
  7610                           ;teris_16f886.c: 782: while(1)
  7611                           
  7612                           
  7613                           ;teris_16f886.c: 783: {
  7614                           ;teris_16f886.c: 784: for(int8_t row = 4 - 1; row >= 0; row--)
  7615  158F  3003               	movlw	3
  7616  1590  00B6               	movwf	??_fall_off
  7617  1591  0836               	movf	??_fall_off,w
  7618  1592  00BC               	movwf	fall_off@row
  7619  1593  1BBC               	btfsc	fall_off@row,7
  7620  1594  2E3B               	goto	l2990
  7621  1595                     l2958:	
  7622                           
  7623                           ;teris_16f886.c: 785: {
  7624                           ;teris_16f886.c: 786: for(int8_t col = 0; col < 4; col++)
  7625  1595  01BB               	clrf	fall_off@col
  7626  1596  083B               	movf	fall_off@col,w
  7627  1597  3A80               	xorlw	128
  7628  1598  3E7C               	addlw	-132
  7629  1599  1803               	btfsc	3,0
  7630  159A  2E35               	goto	l2986
  7631  159B                     l2964:	
  7632                           
  7633                           ;teris_16f886.c: 787: {
  7634                           ;teris_16f886.c: 788: if(matrix44->data[row][col] == 1)
  7635  159B  083C               	movf	fall_off@row,w
  7636  159C  00B6               	movwf	??_fall_off
  7637  159D  01B7               	clrf	??_fall_off+1
  7638  159E  1003               	clrc
  7639  159F  0DB6               	rlf	??_fall_off,f
  7640  15A0  0DB7               	rlf	??_fall_off+1,f
  7641  15A1  1003               	clrc
  7642  15A2  0DB6               	rlf	??_fall_off,f
  7643  15A3  0DB7               	rlf	??_fall_off+1,f
  7644  15A4  0836               	movf	??_fall_off,w
  7645  15A5  0733               	addwf	fall_off@matrix44,w
  7646  15A6  00B8               	movwf	??_fall_off+2
  7647  15A7  0837               	movf	??_fall_off+1,w
  7648  15A8  1803               	skipnc
  7649  15A9  0A37               	incf	??_fall_off+1,w
  7650  15AA  0734               	addwf	fall_off@matrix44+1,w
  7651  15AB  00B9               	movwf	??_fall_off+3
  7652  15AC  083B               	movf	fall_off@col,w
  7653  15AD  0738               	addwf	??_fall_off+2,w
  7654  15AE  0084               	movwf	4
  7655  15AF  0839               	movf	??_fall_off+3,w
  7656  15B0  1803               	skipnc
  7657  15B1  0A39               	incf	??_fall_off+3,w
  7658  15B2  00FF               	movwf	127
  7659  15B3  120A  158A  2000  160A  118A  	fcall	stringtab
  7660  15B8  3A01               	xorlw	1
  7661  15B9  1D03               	skipz
  7662  15BA  2E2A               	goto	l2982
  7663                           
  7664                           ;teris_16f886.c: 789: {
  7665                           ;teris_16f886.c: 790: if(matrix88->data[y + row + 1][x + col] == 1)
  7666  15BB  083B               	movf	fall_off@col,w
  7667  15BC  073A               	addwf	fall_off@x,w
  7668  15BD  0735               	addwf	fall_off@matrix88,w
  7669  15BE  00B6               	movwf	??_fall_off
  7670  15BF  083C               	movf	fall_off@row,w
  7671  15C0  0732               	addwf	fall_off@y,w
  7672  15C1  00B7               	movwf	??_fall_off+1
  7673  15C2  3002               	movlw	2
  7674  15C3                     u3565:	
  7675  15C3  1003               	clrc
  7676  15C4  0DB7               	rlf	??_fall_off+1,f
  7677  15C5  3EFF               	addlw	-1
  7678  15C6  1D03               	skipz
  7679  15C7  2DC3               	goto	u3565
  7680  15C8  1003               	clrc
  7681  15C9  0D37               	rlf	??_fall_off+1,w
  7682  15CA  3E08               	addlw	8
  7683  15CB  0736               	addwf	??_fall_off,w
  7684  15CC  00B8               	movwf	??_fall_off+2
  7685  15CD  0838               	movf	??_fall_off+2,w
  7686  15CE  0084               	movwf	4
  7687  15CF  1783               	bsf	3,7	;select IRP bank2
  7688  15D0  0300               	decf	0,w
  7689  15D1  1D03               	btfss	3,2
  7690  15D2  2DF2               	goto	l2974
  7691                           
  7692                           ;teris_16f886.c: 791: {
  7693                           ;teris_16f886.c: 795: sprintf(g_debug, "fall_off1 x = %d, y = %d\n", x, y);
  7694  15D3  30D2               	movlw	low (STR_30| (0+32768))
  7695  15D4  00A0               	movwf	sprintf@f
  7696  15D5  308C               	movlw	high (STR_30| (0+32768))
  7697  15D6  00A1               	movwf	sprintf@f+1
  7698  15D7  083A               	movf	fall_off@x,w
  7699  15D8  00A2               	movwf	?_sprintf+2
  7700  15D9  01A3               	clrf	?_sprintf+3
  7701  15DA  1BA2               	btfsc	?_sprintf+2,7
  7702  15DB  03A3               	decf	?_sprintf+3,f
  7703  15DC  0832               	movf	fall_off@y,w
  7704  15DD  00A4               	movwf	?_sprintf+4
  7705  15DE  01A5               	clrf	?_sprintf+5
  7706  15DF  1BA4               	btfsc	?_sprintf+4,7
  7707  15E0  03A5               	decf	?_sprintf+5,f
  7708  15E1  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7709  15E2  120A  118A  2012  160A  118A  	fcall	_sprintf
  7710                           
  7711                           ;teris_16f886.c: 796: USARTWriteString(g_debug);
  7712  15E7  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7713  15E8  00F1               	movwf	USARTWriteString@str
  7714  15E9  3001               	movlw	1
  7715  15EA  00F2               	movwf	USARTWriteString@str+1
  7716  15EB  160A  158A  270C   	fcall	_USARTWriteString
  7717                           
  7718                           ;teris_16f886.c: 798: return y;
  7719  15EE  1283               	bcf	3,5	;RP0=0, select bank0
  7720  15EF  1303               	bcf	3,6	;RP1=0, select bank0
  7721  15F0  0832               	movf	fall_off@y,w
  7722  15F1  0008               	return
  7723  15F2                     l2974:	
  7724                           
  7725                           ;teris_16f886.c: 799: }
  7726                           ;teris_16f886.c: 800: if((y + row) >= (8 - 1))
  7727  15F2  0832               	movf	fall_off@y,w
  7728  15F3  073C               	addwf	fall_off@row,w
  7729  15F4  00B6               	movwf	??_fall_off
  7730  15F5  01B7               	clrf	??_fall_off+1
  7731  15F6  1803               	skipnc
  7732  15F7  0AB7               	incf	??_fall_off+1,f
  7733  15F8  1BB2               	btfsc	fall_off@y,7
  7734  15F9  03B7               	decf	??_fall_off+1,f
  7735  15FA  1BBC               	btfsc	fall_off@row,7
  7736  15FB  03B7               	decf	??_fall_off+1,f
  7737  15FC  1283               	bcf	3,5	;RP0=0, select bank0
  7738  15FD  1303               	bcf	3,6	;RP1=0, select bank0
  7739  15FE  0837               	movf	??_fall_off+1,w
  7740  15FF  3A80               	xorlw	128
  7741  1600  00FF               	movwf	127
  7742  1601  3080               	movlw	128
  7743  1602  027F               	subwf	127,w
  7744  1603  1D03               	skipz
  7745  1604  2E07               	goto	u3595
  7746  1605  3007               	movlw	7
  7747  1606  0236               	subwf	??_fall_off,w
  7748  1607                     u3595:	
  7749  1607  1C03               	skipc
  7750  1608  2E2A               	goto	l2982
  7751                           
  7752                           ;teris_16f886.c: 801: {
  7753                           ;teris_16f886.c: 805: sprintf(g_debug, "fall_off2 x = %d, y = %d\n", x, y);
  7754  1609  30EC               	movlw	low (STR_31| (0+32768))
  7755  160A  1283               	bcf	3,5	;RP0=0, select bank0
  7756  160B  1303               	bcf	3,6	;RP1=0, select bank0
  7757  160C  00A0               	movwf	sprintf@f
  7758  160D  308C               	movlw	high (STR_31| (0+32768))
  7759  160E  00A1               	movwf	sprintf@f+1
  7760  160F  083A               	movf	fall_off@x,w
  7761  1610  00A2               	movwf	?_sprintf+2
  7762  1611  01A3               	clrf	?_sprintf+3
  7763  1612  1BA2               	btfsc	?_sprintf+2,7
  7764  1613  03A3               	decf	?_sprintf+3,f
  7765  1614  0832               	movf	fall_off@y,w
  7766  1615  00A4               	movwf	?_sprintf+4
  7767  1616  01A5               	clrf	?_sprintf+5
  7768  1617  1BA4               	btfsc	?_sprintf+4,7
  7769  1618  03A5               	decf	?_sprintf+5,f
  7770  1619  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7771  161A  120A  118A  2012  160A  118A  	fcall	_sprintf
  7772                           
  7773                           ;teris_16f886.c: 806: USARTWriteString(g_debug);
  7774  161F  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  7775  1620  00F1               	movwf	USARTWriteString@str
  7776  1621  3001               	movlw	1
  7777  1622  00F2               	movwf	USARTWriteString@str+1
  7778  1623  160A  158A  270C   	fcall	_USARTWriteString
  7779                           
  7780                           ;teris_16f886.c: 808: return y;
  7781  1626  1283               	bcf	3,5	;RP0=0, select bank0
  7782  1627  1303               	bcf	3,6	;RP1=0, select bank0
  7783  1628  0832               	movf	fall_off@y,w
  7784  1629  0008               	return
  7785  162A                     l2982:	
  7786  162A  3001               	movlw	1
  7787  162B  1283               	bcf	3,5	;RP0=0, select bank0
  7788  162C  1303               	bcf	3,6	;RP1=0, select bank0
  7789  162D  00B6               	movwf	??_fall_off
  7790  162E  0836               	movf	??_fall_off,w
  7791  162F  07BB               	addwf	fall_off@col,f
  7792  1630  083B               	movf	fall_off@col,w
  7793  1631  3A80               	xorlw	128
  7794  1632  3E7C               	addlw	-132
  7795  1633  1C03               	skipc
  7796  1634  2D9B               	goto	l2964
  7797  1635                     l2986:	
  7798  1635  30FF               	movlw	255
  7799  1636  00B6               	movwf	??_fall_off
  7800  1637  0836               	movf	??_fall_off,w
  7801  1638  07BC               	addwf	fall_off@row,f
  7802  1639  1FBC               	btfss	fall_off@row,7
  7803  163A  2D95               	goto	l2958
  7804  163B                     l2990:	
  7805                           
  7806                           ;teris_16f886.c: 809: }
  7807                           ;teris_16f886.c: 810: }
  7808                           ;teris_16f886.c: 811: }
  7809                           ;teris_16f886.c: 812: }
  7810                           ;teris_16f886.c: 813: y++;
  7811  163B  3001               	movlw	1
  7812  163C  00B6               	movwf	??_fall_off
  7813  163D  0836               	movf	??_fall_off,w
  7814  163E  07B2               	addwf	fall_off@y,f
  7815  163F  2D8F               	goto	l307
  7816  1640                     __end_of_fall_off:	
  7817                           
  7818                           	psect	text19
  7819  0E6F                     __ptext19:	
  7820 ;; *************** function _evaluate *****************
  7821 ;; Defined at:
  7822 ;;		line 863 in file "teris_16f886.c"
  7823 ;; Parameters:    Size  Location     Type
  7824 ;;  matrix          1    wreg     PTR const struct .
  7825 ;;		 -> find_best_solution@temp_matrix88(64), 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;  matrix          1   27[BANK0 ] PTR const struct .
  7828 ;;		 -> find_best_solution@temp_matrix88(64), 
  7829 ;;  row             1   29[BANK0 ] char 
  7830 ;;  col             1   28[BANK0 ] unsigned char 
  7831 ;;  risk            2   24[BANK0 ] unsigned int 
  7832 ;;  full            1   26[BANK0 ] unsigned char 
  7833 ;; Return value:  Size  Location     Type
  7834 ;;                  2   18[BANK0 ] unsigned int 
  7835 ;; Registers used:
  7836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7837 ;; Tracked objects:
  7838 ;;		On entry : 0/0
  7839 ;;		On exit  : 0/0
  7840 ;;		Unchanged: 0/0
  7841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7842 ;;      Params:         0       2       0       0       0
  7843 ;;      Locals:         0       6       0       0       0
  7844 ;;      Temps:          0       4       0       0       0
  7845 ;;      Totals:         0      12       0       0       0
  7846 ;;Total ram usage:       12 bytes
  7847 ;; Hardware stack levels used:    1
  7848 ;; Hardware stack levels required when called:    2
  7849 ;; This function calls:
  7850 ;;		_USARTWriteString
  7851 ;;		_sprintf
  7852 ;; This function is called by:
  7853 ;;		_find_best_solution
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           
  7858                           ;psect for function _evaluate
  7859  0E6F                     _evaluate:	
  7860                           
  7861                           ;incstack = 0
  7862                           ; Regs used in _evaluate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7863                           ;evaluate@matrix stored from wreg
  7864  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  7865  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  7866  0E71  00BB               	movwf	evaluate@matrix
  7867                           
  7868                           ;teris_16f886.c: 865: uint16_t risk = 0;
  7869  0E72  01B8               	clrf	evaluate@risk
  7870  0E73  01B9               	clrf	evaluate@risk+1
  7871                           
  7872                           ;teris_16f886.c: 866: uint8_t full = 0xFF;
  7873  0E74  30FF               	movlw	255
  7874  0E75  00B4               	movwf	??_evaluate
  7875  0E76  0834               	movf	??_evaluate,w
  7876  0E77  00BA               	movwf	evaluate@full
  7877                           
  7878                           ;teris_16f886.c: 867: for(uint8_t col = 0; col < 8; col++)
  7879  0E78  01BC               	clrf	evaluate@col
  7880  0E79  3008               	movlw	8
  7881  0E7A  023C               	subwf	evaluate@col,w
  7882  0E7B  1803               	btfsc	3,0
  7883  0E7C  2EDE               	goto	l3054
  7884  0E7D                     l3028:	
  7885                           
  7886                           ;teris_16f886.c: 868: {
  7887                           ;teris_16f886.c: 869: full = 0xFF;
  7888  0E7D  30FF               	movlw	255
  7889  0E7E  00B4               	movwf	??_evaluate
  7890  0E7F  0834               	movf	??_evaluate,w
  7891  0E80  00BA               	movwf	evaluate@full
  7892                           
  7893                           ;teris_16f886.c: 870: for(int8_t row = 8 - 1; row >= 0; row--)
  7894  0E81  3007               	movlw	7
  7895  0E82  00B4               	movwf	??_evaluate
  7896  0E83  0834               	movf	??_evaluate,w
  7897  0E84  00BD               	movwf	evaluate@row
  7898  0E85  1BBD               	btfsc	evaluate@row,7
  7899  0E86  2ED6               	goto	l3050
  7900  0E87                     l3034:	
  7901                           
  7902                           ;teris_16f886.c: 871: {
  7903                           ;teris_16f886.c: 872: if(full == 0xFF)
  7904  0E87  0A3A               	incf	evaluate@full,w
  7905  0E88  1D03               	btfss	3,2
  7906  0E89  2E9D               	goto	l3038
  7907                           
  7908                           ;teris_16f886.c: 873: {
  7909                           ;teris_16f886.c: 874: full = matrix->data[row][col];
  7910  0E8A  083D               	movf	evaluate@row,w
  7911  0E8B  00B4               	movwf	??_evaluate
  7912  0E8C  3002               	movlw	2
  7913  0E8D                     u3715:	
  7914  0E8D  1003               	clrc
  7915  0E8E  0DB4               	rlf	??_evaluate,f
  7916  0E8F  3EFF               	addlw	-1
  7917  0E90  1D03               	skipz
  7918  0E91  2E8D               	goto	u3715
  7919  0E92  1003               	clrc
  7920  0E93  0D34               	rlf	??_evaluate,w
  7921  0E94  073B               	addwf	evaluate@matrix,w
  7922  0E95  00B5               	movwf	??_evaluate+1
  7923  0E96  083C               	movf	evaluate@col,w
  7924  0E97  0735               	addwf	??_evaluate+1,w
  7925  0E98  00B6               	movwf	??_evaluate+2
  7926  0E99  0836               	movf	??_evaluate+2,w
  7927  0E9A  0084               	movwf	4
  7928  0E9B  1383               	bcf	3,7	;select IRP bank0
  7929  0E9C  2ECC               	goto	L16
  7930  0E9D                     l3038:	
  7931                           ;teris_16f886.c: 875: }
  7932                           
  7933                           
  7934                           ;teris_16f886.c: 876: else
  7935                           ;teris_16f886.c: 877: {
  7936                           ;teris_16f886.c: 878: if(matrix->data[row][col] == 1)
  7937  0E9D  083D               	movf	evaluate@row,w
  7938  0E9E  00B4               	movwf	??_evaluate
  7939  0E9F  3002               	movlw	2
  7940  0EA0                     u3725:	
  7941  0EA0  1003               	clrc
  7942  0EA1  0DB4               	rlf	??_evaluate,f
  7943  0EA2  3EFF               	addlw	-1
  7944  0EA3  1D03               	skipz
  7945  0EA4  2EA0               	goto	u3725
  7946  0EA5  1003               	clrc
  7947  0EA6  0D34               	rlf	??_evaluate,w
  7948  0EA7  073B               	addwf	evaluate@matrix,w
  7949  0EA8  00B5               	movwf	??_evaluate+1
  7950  0EA9  083C               	movf	evaluate@col,w
  7951  0EAA  0735               	addwf	??_evaluate+1,w
  7952  0EAB  00B6               	movwf	??_evaluate+2
  7953  0EAC  0836               	movf	??_evaluate+2,w
  7954  0EAD  0084               	movwf	4
  7955  0EAE  1383               	bcf	3,7	;select IRP bank0
  7956  0EAF  0300               	decf	0,w
  7957  0EB0  1D03               	btfss	3,2
  7958  0EB1  2EBB               	goto	l3044
  7959                           
  7960                           ;teris_16f886.c: 879: {
  7961                           ;teris_16f886.c: 880: if(full == 0)
  7962  0EB2  083A               	movf	evaluate@full,w
  7963  0EB3  1D03               	btfss	3,2
  7964  0EB4  2EBB               	goto	l3044
  7965                           
  7966                           ;teris_16f886.c: 881: {
  7967                           ;teris_16f886.c: 882: risk++;
  7968  0EB5  3001               	movlw	1
  7969  0EB6  07B8               	addwf	evaluate@risk,f
  7970  0EB7  1803               	skipnc
  7971  0EB8  0AB9               	incf	evaluate@risk+1,f
  7972  0EB9  3000               	movlw	0
  7973  0EBA  07B9               	addwf	evaluate@risk+1,f
  7974  0EBB                     l3044:	
  7975                           
  7976                           ;teris_16f886.c: 883: }
  7977                           ;teris_16f886.c: 884: }
  7978                           ;teris_16f886.c: 885: full = matrix->data[row][col];
  7979  0EBB  083D               	movf	evaluate@row,w
  7980  0EBC  00B4               	movwf	??_evaluate
  7981  0EBD  3002               	movlw	2
  7982  0EBE                     u3755:	
  7983  0EBE  1003               	clrc
  7984  0EBF  0DB4               	rlf	??_evaluate,f
  7985  0EC0  3EFF               	addlw	-1
  7986  0EC1  1D03               	skipz
  7987  0EC2  2EBE               	goto	u3755
  7988  0EC3  1003               	clrc
  7989  0EC4  0D34               	rlf	??_evaluate,w
  7990  0EC5  073B               	addwf	evaluate@matrix,w
  7991  0EC6  00B5               	movwf	??_evaluate+1
  7992  0EC7  083C               	movf	evaluate@col,w
  7993  0EC8  0735               	addwf	??_evaluate+1,w
  7994  0EC9  00B6               	movwf	??_evaluate+2
  7995  0ECA  0836               	movf	??_evaluate+2,w
  7996  0ECB  0084               	movwf	4
  7997  0ECC                     L16:	
  7998  0ECC  0800               	movf	0,w
  7999  0ECD  00B7               	movwf	??_evaluate+3
  8000  0ECE  0837               	movf	??_evaluate+3,w
  8001  0ECF  00BA               	movwf	evaluate@full
  8002  0ED0  30FF               	movlw	255
  8003  0ED1  00B4               	movwf	??_evaluate
  8004  0ED2  0834               	movf	??_evaluate,w
  8005  0ED3  07BD               	addwf	evaluate@row,f
  8006  0ED4  1FBD               	btfss	evaluate@row,7
  8007  0ED5  2E87               	goto	l3034
  8008  0ED6                     l3050:	
  8009  0ED6  3001               	movlw	1
  8010  0ED7  00B4               	movwf	??_evaluate
  8011  0ED8  0834               	movf	??_evaluate,w
  8012  0ED9  07BC               	addwf	evaluate@col,f
  8013  0EDA  3008               	movlw	8
  8014  0EDB  023C               	subwf	evaluate@col,w
  8015  0EDC  1C03               	skipc
  8016  0EDD  2E7D               	goto	l3028
  8017  0EDE                     l3054:	
  8018                           
  8019                           ;teris_16f886.c: 886: }
  8020                           ;teris_16f886.c: 887: }
  8021                           ;teris_16f886.c: 888: }
  8022                           ;teris_16f886.c: 892: sprintf(g_debug, "risk = %d\n", risk);
  8023  0EDE  3027               	movlw	low (STR_32| (0+32768))
  8024  0EDF  00A0               	movwf	sprintf@f
  8025  0EE0  308E               	movlw	high (STR_32| (0+32768))
  8026  0EE1  00A1               	movwf	sprintf@f+1
  8027  0EE2  0839               	movf	evaluate@risk+1,w
  8028  0EE3  00A3               	movwf	?_sprintf+3
  8029  0EE4  0838               	movf	evaluate@risk,w
  8030  0EE5  00A2               	movwf	?_sprintf+2
  8031  0EE6  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8032  0EE7  120A  118A  2012  120A  158A  	fcall	_sprintf
  8033                           
  8034                           ;teris_16f886.c: 893: USARTWriteString(g_debug);
  8035  0EEC  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8036  0EED  00F1               	movwf	USARTWriteString@str
  8037  0EEE  3001               	movlw	1
  8038  0EEF  00F2               	movwf	USARTWriteString@str+1
  8039  0EF0  160A  158A  270C   	fcall	_USARTWriteString
  8040                           
  8041                           ;teris_16f886.c: 896: return risk;
  8042  0EF3  1283               	bcf	3,5	;RP0=0, select bank0
  8043  0EF4  1303               	bcf	3,6	;RP1=0, select bank0
  8044  0EF5  0839               	movf	evaluate@risk+1,w
  8045  0EF6  00B3               	movwf	?_evaluate+1
  8046  0EF7  0838               	movf	evaluate@risk,w
  8047  0EF8  00B2               	movwf	?_evaluate
  8048  0EF9  0008               	return
  8049  0EFA                     __end_of_evaluate:	
  8050                           
  8051                           	psect	text20
  8052  1279                     __ptext20:	
  8053 ;; *************** function _delete_matrix *****************
  8054 ;; Defined at:
  8055 ;;		line 591 in file "teris_16f886.c"
  8056 ;; Parameters:    Size  Location     Type
  8057 ;;  matrix          2   18[BANK0 ] PTR struct .
  8058 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;  row             1   23[BANK0 ] char 
  8061 ;;  count           1   22[BANK0 ] unsigned char 
  8062 ;; Return value:  Size  Location     Type
  8063 ;;                  1    wreg      unsigned char 
  8064 ;; Registers used:
  8065 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8066 ;; Tracked objects:
  8067 ;;		On entry : 0/0
  8068 ;;		On exit  : 0/0
  8069 ;;		Unchanged: 0/0
  8070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8071 ;;      Params:         0       2       0       0       0
  8072 ;;      Locals:         0       2       0       0       0
  8073 ;;      Temps:          0       2       0       0       0
  8074 ;;      Totals:         0       6       0       0       0
  8075 ;;Total ram usage:        6 bytes
  8076 ;; Hardware stack levels used:    1
  8077 ;; Hardware stack levels required when called:    2
  8078 ;; This function calls:
  8079 ;;		_USARTWriteString
  8080 ;;		_delete_row
  8081 ;;		_is_row_full
  8082 ;;		_sprintf
  8083 ;; This function is called by:
  8084 ;;		_find_best_solution
  8085 ;;		_main
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           
  8090                           ;psect for function _delete_matrix
  8091  1279                     _delete_matrix:	
  8092                           
  8093                           ;teris_16f886.c: 593: uint8_t count = 0;
  8094                           
  8095                           ;incstack = 0
  8096                           ; Regs used in _delete_matrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8097  1279  1283               	bcf	3,5	;RP0=0, select bank0
  8098  127A  1303               	bcf	3,6	;RP1=0, select bank0
  8099  127B  01B6               	clrf	delete_matrix@count
  8100                           
  8101                           ;teris_16f886.c: 594: int8_t row = 8 - 1;
  8102  127C  3007               	movlw	7
  8103  127D  00B4               	movwf	??_delete_matrix
  8104  127E  0834               	movf	??_delete_matrix,w
  8105  127F  00B7               	movwf	delete_matrix@row
  8106  1280                     l4052:	
  8107                           ;teris_16f886.c: 595: while(row >= 0)
  8108                           
  8109  1280  1BB7               	btfsc	delete_matrix@row,7
  8110  1281  2AAF               	goto	l4054
  8111                           
  8112                           ;teris_16f886.c: 596: {
  8113                           ;teris_16f886.c: 597: if(is_row_full(matrix, row))
  8114  1282  0832               	movf	delete_matrix@matrix,w
  8115  1283  00F0               	movwf	is_row_full@matrix
  8116  1284  0833               	movf	delete_matrix@matrix+1,w
  8117  1285  00F1               	movwf	is_row_full@matrix+1
  8118  1286  0837               	movf	delete_matrix@row,w
  8119  1287  00B4               	movwf	??_delete_matrix
  8120  1288  0834               	movf	??_delete_matrix,w
  8121  1289  00F2               	movwf	is_row_full@row
  8122  128A  160A  158A  2759  160A  118A  	fcall	_is_row_full
  8123  128F  3A00               	xorlw	0
  8124  1290  1903               	skipnz
  8125  1291  2AA8               	goto	l4050
  8126                           
  8127                           ;teris_16f886.c: 598: {
  8128                           ;teris_16f886.c: 599: delete_row(matrix, row);
  8129  1292  1283               	bcf	3,5	;RP0=0, select bank0
  8130  1293  1303               	bcf	3,6	;RP1=0, select bank0
  8131  1294  0832               	movf	delete_matrix@matrix,w
  8132  1295  00FB               	movwf	delete_row@matrix
  8133  1296  0833               	movf	delete_matrix@matrix+1,w
  8134  1297  00FC               	movwf	delete_row@matrix+1
  8135  1298  0837               	movf	delete_matrix@row,w
  8136  1299  00B4               	movwf	??_delete_matrix
  8137  129A  0834               	movf	??_delete_matrix,w
  8138  129B  00FD               	movwf	delete_row@row
  8139  129C  160A  118A  249E  160A  118A  	fcall	_delete_row
  8140                           
  8141                           ;teris_16f886.c: 600: count++;
  8142  12A1  3001               	movlw	1
  8143  12A2  1283               	bcf	3,5	;RP0=0, select bank0
  8144  12A3  1303               	bcf	3,6	;RP1=0, select bank0
  8145  12A4  00B4               	movwf	??_delete_matrix
  8146  12A5  0834               	movf	??_delete_matrix,w
  8147  12A6  07B6               	addwf	delete_matrix@count,f
  8148                           
  8149                           ;teris_16f886.c: 601: }
  8150  12A7  2A80               	goto	l4052
  8151  12A8                     l4050:	
  8152                           
  8153                           ;teris_16f886.c: 602: else
  8154                           ;teris_16f886.c: 603: {
  8155                           ;teris_16f886.c: 604: row--;
  8156  12A8  30FF               	movlw	255
  8157  12A9  1283               	bcf	3,5	;RP0=0, select bank0
  8158  12AA  1303               	bcf	3,6	;RP1=0, select bank0
  8159  12AB  00B4               	movwf	??_delete_matrix
  8160  12AC  0834               	movf	??_delete_matrix,w
  8161  12AD  07B7               	addwf	delete_matrix@row,f
  8162  12AE  2A80               	goto	l4052
  8163  12AF                     l4054:	
  8164                           
  8165                           ;teris_16f886.c: 605: }
  8166                           ;teris_16f886.c: 606: }
  8167                           ;teris_16f886.c: 610: sprintf(g_debug, "delete_matrix count = %d\n", count);
  8168  12AF  30B8               	movlw	low (STR_18| (0+32768))
  8169  12B0  00A0               	movwf	sprintf@f
  8170  12B1  308C               	movlw	high (STR_18| (0+32768))
  8171  12B2  00A1               	movwf	sprintf@f+1
  8172  12B3  0836               	movf	delete_matrix@count,w
  8173  12B4  00B4               	movwf	??_delete_matrix
  8174  12B5  01B5               	clrf	??_delete_matrix+1
  8175  12B6  0834               	movf	??_delete_matrix,w
  8176  12B7  00A2               	movwf	?_sprintf+2
  8177  12B8  0835               	movf	??_delete_matrix+1,w
  8178  12B9  00A3               	movwf	?_sprintf+3
  8179  12BA  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8180  12BB  120A  118A  2012  160A  118A  	fcall	_sprintf
  8181                           
  8182                           ;teris_16f886.c: 611: USARTWriteString(g_debug);
  8183  12C0  30B0               	movlw	(low (_g_debug| (0+256)))& (0+255)
  8184  12C1  00F1               	movwf	USARTWriteString@str
  8185  12C2  3001               	movlw	1
  8186  12C3  00F2               	movwf	USARTWriteString@str+1
  8187  12C4  160A  158A  270C   	fcall	_USARTWriteString
  8188                           
  8189                           ;teris_16f886.c: 613: return count;
  8190  12C7  1283               	bcf	3,5	;RP0=0, select bank0
  8191  12C8  1303               	bcf	3,6	;RP1=0, select bank0
  8192  12C9  0836               	movf	delete_matrix@count,w
  8193  12CA  0008               	return
  8194  12CB                     __end_of_delete_matrix:	
  8195                           
  8196                           	psect	text21
  8197  0012                     __ptext21:	
  8198 ;; *************** function _sprintf *****************
  8199 ;; Defined at:
  8200 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  8201 ;; Parameters:    Size  Location     Type
  8202 ;;  sp              1    wreg     PTR unsigned char 
  8203 ;;		 -> g_debug(32), 
  8204 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  8205 ;;		 -> STR_57(24), STR_55(35), STR_54(36), STR_53(35), 
  8206 ;;		 -> STR_52(36), STR_51(35), STR_50(36), STR_49(23), 
  8207 ;;		 -> STR_48(35), STR_47(36), STR_46(35), STR_45(36), 
  8208 ;;		 -> STR_44(35), STR_43(38), STR_42(16), STR_41(37), 
  8209 ;;		 -> STR_40(36), STR_38(17), STR_37(33), STR_36(52), 
  8210 ;;		 -> STR_35(22), STR_34(17), STR_33(16), STR_32(11), 
  8211 ;;		 -> STR_31(26), STR_30(26), STR_26(31), STR_25(31), 
  8212 ;;		 -> STR_24(31), STR_21(25), STR_20(25), STR_18(26), 
  8213 ;;		 -> STR_7(43), STR_6(32), 
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  sp              1   17[BANK0 ] PTR unsigned char 
  8216 ;;		 -> g_debug(32), 
  8217 ;;  tmpval          4    0        struct .
  8218 ;;  val             2   14[BANK0 ] unsigned int 
  8219 ;;  cp              2    0        PTR const unsigned char 
  8220 ;;  len             2    0        unsigned int 
  8221 ;;  c               1   16[BANK0 ] char 
  8222 ;;  prec            1   13[BANK0 ] char 
  8223 ;;  flag            1   12[BANK0 ] unsigned char 
  8224 ;;  ap              1   11[BANK0 ] PTR void [1]
  8225 ;;		 -> ?_sprintf(2), 
  8226 ;; Return value:  Size  Location     Type
  8227 ;;                  2    0[BANK0 ] int 
  8228 ;; Registers used:
  8229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8230 ;; Tracked objects:
  8231 ;;		On entry : 0/0
  8232 ;;		On exit  : 0/0
  8233 ;;		Unchanged: 0/0
  8234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8235 ;;      Params:         0       8       0       0       0
  8236 ;;      Locals:         0       7       0       0       0
  8237 ;;      Temps:          0       3       0       0       0
  8238 ;;      Totals:         0      18       0       0       0
  8239 ;;Total ram usage:       18 bytes
  8240 ;; Hardware stack levels used:    1
  8241 ;; Hardware stack levels required when called:    1
  8242 ;; This function calls:
  8243 ;;		___lwdiv
  8244 ;;		___lwmod
  8245 ;; This function is called by:
  8246 ;;		_delete_matrix
  8247 ;;		_hit_land
  8248 ;;		_is_valid
  8249 ;;		_fall_off
  8250 ;;		_evaluate
  8251 ;;		_left_most
  8252 ;;		_right_most
  8253 ;;		_get_high
  8254 ;;		_get_high_after_merge
  8255 ;;		_get_holes_after_merge
  8256 ;;		_find_best_solution
  8257 ;;		_main
  8258 ;;		_printf_console_all_MATRIX44
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           
  8263                           ;psect for function _sprintf
  8264  0012                     _sprintf:	
  8265                           
  8266                           ;incstack = 0
  8267                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8268                           ;sprintf@sp stored from wreg
  8269  0012  1283               	bcf	3,5	;RP0=0, select bank0
  8270  0013  1303               	bcf	3,6	;RP1=0, select bank0
  8271  0014  00B1               	movwf	sprintf@sp
  8272                           
  8273                           ;doprnt.c: 494: va_list ap;
  8274                           ;doprnt.c: 499: signed char c;
  8275                           ;doprnt.c: 506: signed char prec;
  8276                           ;doprnt.c: 508: unsigned char flag;
  8277                           ;doprnt.c: 523: union {
  8278                           ;doprnt.c: 524: unsigned long vd;
  8279                           ;doprnt.c: 525: double integ;
  8280                           ;doprnt.c: 526: } tmpval;
  8281                           ;doprnt.c: 528: unsigned int val;
  8282                           ;doprnt.c: 529: unsigned len;
  8283                           ;doprnt.c: 530: const char * cp;
  8284                           ;doprnt.c: 533: *ap = __va_start();
  8285  0015  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  8286  0016  00A8               	movwf	??_sprintf
  8287  0017  0828               	movf	??_sprintf,w
  8288  0018  00AB               	movwf	sprintf@ap
  8289  0019                     l2650:	
  8290                           ;doprnt.c: 536: while(c = *f++) {
  8291                           
  8292  0019  0821               	movf	sprintf@f+1,w
  8293  001A  00A9               	movwf	??_sprintf+1
  8294  001B  0820               	movf	sprintf@f,w
  8295  001C  00A8               	movwf	??_sprintf
  8296  001D  0AA0               	incf	sprintf@f,f
  8297  001E  1903               	skipnz
  8298  001F  0AA1               	incf	sprintf@f+1,f
  8299  0020  0829               	movf	??_sprintf+1,w
  8300  0021  00FF               	movwf	127
  8301  0022  0828               	movf	??_sprintf,w
  8302  0023  0084               	movwf	4
  8303  0024  120A  158A  2000  120A  118A  	fcall	stringtab
  8304  0029  00AA               	movwf	??_sprintf+2
  8305  002A  082A               	movf	??_sprintf+2,w
  8306  002B  00B0               	movwf	sprintf@c
  8307  002C  0830               	movf	sprintf@c,w
  8308  002D  1903               	btfsc	3,2
  8309  002E  28F5               	goto	l2652
  8310                           
  8311                           ;doprnt.c: 538: if(c != '%')
  8312  002F  3025               	movlw	37
  8313  0030  0630               	xorwf	sprintf@c,w
  8314  0031  1903               	btfsc	3,2
  8315  0032  283F               	goto	l2606
  8316                           
  8317                           ;doprnt.c: 540: {
  8318                           ;doprnt.c: 541: ((*sp++ = (c)));
  8319  0033  0830               	movf	sprintf@c,w
  8320  0034  00A8               	movwf	??_sprintf
  8321  0035  0831               	movf	sprintf@sp,w
  8322  0036  0084               	movwf	4
  8323  0037  0828               	movf	??_sprintf,w
  8324  0038  1783               	bsf	3,7	;select IRP bank2
  8325  0039  0080               	movwf	0
  8326  003A  3001               	movlw	1
  8327  003B  00A8               	movwf	??_sprintf
  8328  003C  0828               	movf	??_sprintf,w
  8329  003D  07B1               	addwf	sprintf@sp,f
  8330                           
  8331                           ;doprnt.c: 542: continue;
  8332  003E  2819               	goto	l2650
  8333  003F                     l2606:	
  8334                           
  8335                           ;doprnt.c: 543: }
  8336                           ;doprnt.c: 548: flag = 0;
  8337  003F  01AC               	clrf	sprintf@flag
  8338                           
  8339                           ;doprnt.c: 822: }
  8340                           
  8341                           ;doprnt.c: 813: continue;
  8342                           
  8343                           ;doprnt.c: 802: default:
  8344                           
  8345                           ;doprnt.c: 698: case 'i':
  8346                           ;doprnt.c: 699: break;
  8347                           
  8348                           ;doprnt.c: 697: case 'd':
  8349                           
  8350                           ;doprnt.c: 638: goto alldone;
  8351                           
  8352                           ;doprnt.c: 637: case 0:
  8353                           
  8354                           ;doprnt.c: 635: switch(c = *f++) {
  8355  0040  0821               	movf	sprintf@f+1,w
  8356  0041  00A9               	movwf	??_sprintf+1
  8357  0042  0820               	movf	sprintf@f,w
  8358  0043  00A8               	movwf	??_sprintf
  8359  0044  0AA0               	incf	sprintf@f,f
  8360  0045  1903               	skipnz
  8361  0046  0AA1               	incf	sprintf@f+1,f
  8362  0047  0829               	movf	??_sprintf+1,w
  8363  0048  00FF               	movwf	127
  8364  0049  0828               	movf	??_sprintf,w
  8365  004A  0084               	movwf	4
  8366  004B  120A  158A  2000  120A  118A  	fcall	stringtab
  8367  0050  00B0               	movwf	sprintf@c
  8368                           
  8369                           ; Switch size 1, requested type "space"
  8370                           ; Number of cases is 3, Range of values is 0 to 105
  8371                           ; switch strategies available:
  8372                           ; Name         Instructions Cycles
  8373                           ; simple_byte           10     6 (average)
  8374                           ; jumptable            260     6 (fixed)
  8375                           ;	Chosen strategy is simple_byte
  8376  0051  3A00               	xorlw	0	; case 0
  8377  0052  1903               	skipnz
  8378  0053  28F5               	goto	l2652
  8379  0054  3A64               	xorlw	100	; case 100
  8380  0055  1903               	skipnz
  8381  0056  285B               	goto	l2612
  8382  0057  3A0D               	xorlw	13	; case 105
  8383  0058  1903               	skipnz
  8384  0059  285B               	goto	l2612
  8385  005A  2819               	goto	l2650
  8386  005B                     l2612:	
  8387                           
  8388                           ;doprnt.c: 1253: {
  8389                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8390  005B  082B               	movf	sprintf@ap,w
  8391  005C  0084               	movwf	4
  8392  005D  1383               	bcf	3,7	;select IRP bank0
  8393  005E  0800               	movf	0,w
  8394  005F  00AE               	movwf	sprintf@val
  8395  0060  0A84               	incf	4,f
  8396  0061  0800               	movf	0,w
  8397  0062  00AF               	movwf	sprintf@val+1
  8398  0063  3002               	movlw	2
  8399  0064  00A8               	movwf	??_sprintf
  8400  0065  0828               	movf	??_sprintf,w
  8401  0066  07AB               	addwf	sprintf@ap,f
  8402                           
  8403                           ;doprnt.c: 1261: if((int)val < 0) {
  8404  0067  1FAF               	btfss	sprintf@val+1,7
  8405  0068  2872               	goto	l2622
  8406                           
  8407                           ;doprnt.c: 1262: flag |= 0x03;
  8408  0069  3003               	movlw	3
  8409  006A  00A8               	movwf	??_sprintf
  8410  006B  0828               	movf	??_sprintf,w
  8411  006C  04AC               	iorwf	sprintf@flag,f
  8412                           
  8413                           ;doprnt.c: 1263: val = -val;
  8414  006D  09AE               	comf	sprintf@val,f
  8415  006E  09AF               	comf	sprintf@val+1,f
  8416  006F  0AAE               	incf	sprintf@val,f
  8417  0070  1903               	skipnz
  8418  0071  0AAF               	incf	sprintf@val+1,f
  8419  0072                     l2622:	
  8420                           
  8421                           ;doprnt.c: 1264: }
  8422                           ;doprnt.c: 1266: }
  8423                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8424  0072  01B0               	clrf	sprintf@c
  8425  0073  0AB0               	incf	sprintf@c,f
  8426  0074  3005               	movlw	5
  8427  0075  0630               	xorwf	sprintf@c,w
  8428  0076  1903               	btfsc	3,2
  8429  0077  289D               	goto	l2634
  8430  0078                     l2628:	
  8431                           
  8432                           ;doprnt.c: 1306: if(val < dpowers[c])
  8433  0078  0830               	movf	sprintf@c,w
  8434  0079  00A8               	movwf	??_sprintf
  8435  007A  0728               	addwf	??_sprintf,w
  8436  007B  3E12               	addlw	low (_dpowers| (0+32768))
  8437  007C  0084               	movwf	4
  8438  007D  3088               	movlw	high (_dpowers| (0+32768))
  8439  007E  1803               	skipnc
  8440  007F  3E01               	addlw	1
  8441  0080  00FF               	movwf	127
  8442  0081  120A  158A  2000  120A  118A  	fcall	stringtab
  8443  0086  00A9               	movwf	??_sprintf+1
  8444  0087  120A  158A  2000  120A  118A  	fcall	stringtab
  8445  008C  00AA               	movwf	??_sprintf+2
  8446  008D  082A               	movf	??_sprintf+2,w
  8447  008E  022F               	subwf	sprintf@val+1,w
  8448  008F  1D03               	skipz
  8449  0090  2893               	goto	u2845
  8450  0091  0829               	movf	??_sprintf+1,w
  8451  0092  022E               	subwf	sprintf@val,w
  8452  0093                     u2845:	
  8453  0093  1C03               	btfss	3,0
  8454  0094  289D               	goto	l2634
  8455                           
  8456                           ;doprnt.c: 1307: break;
  8457  0095  3001               	movlw	1
  8458  0096  00A8               	movwf	??_sprintf
  8459  0097  0828               	movf	??_sprintf,w
  8460  0098  07B0               	addwf	sprintf@c,f
  8461  0099  3005               	movlw	5
  8462  009A  0630               	xorwf	sprintf@c,w
  8463  009B  1D03               	btfss	3,2
  8464  009C  2878               	goto	l2628
  8465  009D                     l2634:	
  8466                           
  8467                           ;doprnt.c: 1422: {
  8468                           ;doprnt.c: 1438: if(flag & 0x03)
  8469  009D  082C               	movf	sprintf@flag,w
  8470  009E  3903               	andlw	3
  8471  009F  1903               	btfsc	3,2
  8472  00A0  28AC               	goto	l2640
  8473                           
  8474                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  8475  00A1  302D               	movlw	45
  8476  00A2  00A8               	movwf	??_sprintf
  8477  00A3  0831               	movf	sprintf@sp,w
  8478  00A4  0084               	movwf	4
  8479  00A5  0828               	movf	??_sprintf,w
  8480  00A6  1783               	bsf	3,7	;select IRP bank2
  8481  00A7  0080               	movwf	0
  8482  00A8  3001               	movlw	1
  8483  00A9  00A8               	movwf	??_sprintf
  8484  00AA  0828               	movf	??_sprintf,w
  8485  00AB  07B1               	addwf	sprintf@sp,f
  8486  00AC                     l2640:	
  8487                           
  8488                           ;doprnt.c: 1469: }
  8489                           ;doprnt.c: 1472: prec = c;
  8490  00AC  0830               	movf	sprintf@c,w
  8491  00AD  00A8               	movwf	??_sprintf
  8492  00AE  0828               	movf	??_sprintf,w
  8493  00AF  00AD               	movwf	sprintf@prec
  8494  00B0                     l2648:	
  8495                           ;doprnt.c: 1474: while(prec--) {
  8496                           
  8497  00B0  30FF               	movlw	255
  8498  00B1  00A8               	movwf	??_sprintf
  8499  00B2  0828               	movf	??_sprintf,w
  8500  00B3  07AD               	addwf	sprintf@prec,f
  8501  00B4  0A2D               	incf	sprintf@prec,w
  8502  00B5  1903               	btfsc	3,2
  8503  00B6  2819               	goto	l2650
  8504                           
  8505                           ;doprnt.c: 1478: {
  8506                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8507  00B7  300A               	movlw	10
  8508  00B8  00F8               	movwf	___lwmod@divisor
  8509  00B9  3000               	movlw	0
  8510  00BA  00F9               	movwf	___lwmod@divisor+1
  8511  00BB  082D               	movf	sprintf@prec,w
  8512  00BC  00A8               	movwf	??_sprintf
  8513  00BD  0728               	addwf	??_sprintf,w
  8514  00BE  3E12               	addlw	low (_dpowers| (0+32768))
  8515  00BF  0084               	movwf	4
  8516  00C0  3088               	movlw	high (_dpowers| (0+32768))
  8517  00C1  1803               	skipnc
  8518  00C2  3E01               	addlw	1
  8519  00C3  00FF               	movwf	127
  8520  00C4  120A  158A  2000  120A  118A  	fcall	stringtab
  8521  00C9  00F0               	movwf	___lwdiv@divisor
  8522  00CA  120A  158A  2000  120A  118A  	fcall	stringtab
  8523  00CF  00F1               	movwf	___lwdiv@divisor+1
  8524  00D0  082F               	movf	sprintf@val+1,w
  8525  00D1  00F3               	movwf	___lwdiv@dividend+1
  8526  00D2  082E               	movf	sprintf@val,w
  8527  00D3  00F2               	movwf	___lwdiv@dividend
  8528  00D4  160A  158A  27C4  120A  118A  	fcall	___lwdiv
  8529  00D9  0871               	movf	?___lwdiv+1,w
  8530  00DA  00FB               	movwf	___lwmod@dividend+1
  8531  00DB  0870               	movf	?___lwdiv,w
  8532  00DC  00FA               	movwf	___lwmod@dividend
  8533  00DD  160A  118A  2006  120A  118A  	fcall	___lwmod
  8534  00E2  0878               	movf	?___lwmod,w
  8535  00E3  3E30               	addlw	48
  8536  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  8537  00E5  1303               	bcf	3,6	;RP1=0, select bank0
  8538  00E6  00A9               	movwf	??_sprintf+1
  8539  00E7  0829               	movf	??_sprintf+1,w
  8540  00E8  00B0               	movwf	sprintf@c
  8541                           
  8542                           ;doprnt.c: 1523: }
  8543                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8544  00E9  0830               	movf	sprintf@c,w
  8545  00EA  00A8               	movwf	??_sprintf
  8546  00EB  0831               	movf	sprintf@sp,w
  8547  00EC  0084               	movwf	4
  8548  00ED  0828               	movf	??_sprintf,w
  8549  00EE  1783               	bsf	3,7	;select IRP bank2
  8550  00EF  0080               	movwf	0
  8551  00F0  3001               	movlw	1
  8552  00F1  00A8               	movwf	??_sprintf
  8553  00F2  0828               	movf	??_sprintf,w
  8554  00F3  07B1               	addwf	sprintf@sp,f
  8555  00F4  28B0               	goto	l2648
  8556  00F5                     l2652:	
  8557                           ;doprnt.c: 1525: }
  8558                           ;doprnt.c: 1533: }
  8559                           ;doprnt.c: 1535: alldone:
  8560                           
  8561                           
  8562                           ;doprnt.c: 1538: *sp = 0;
  8563  00F5  0831               	movf	sprintf@sp,w
  8564  00F6  0084               	movwf	4
  8565  00F7  1783               	bsf	3,7	;select IRP bank2
  8566  00F8  0180               	clrf	0
  8567  00F9  0008               	return
  8568  00FA                     __end_of_sprintf:	
  8569                           ;doprnt.c: 1540: return 0;
  8570                           ;	Return value of _sprintf is never used
  8571                           
  8572                           
  8573                           	psect	text22
  8574  1006                     __ptext22:	
  8575 ;; *************** function ___lwmod *****************
  8576 ;; Defined at:
  8577 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;  divisor         2    8[COMMON] unsigned int 
  8580 ;;  dividend        2   10[COMMON] unsigned int 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  counter         1   13[COMMON] unsigned char 
  8583 ;; Return value:  Size  Location     Type
  8584 ;;                  2    8[COMMON] unsigned int 
  8585 ;; Registers used:
  8586 ;;		wreg, status,2, status,0
  8587 ;; Tracked objects:
  8588 ;;		On entry : 0/0
  8589 ;;		On exit  : 0/0
  8590 ;;		Unchanged: 0/0
  8591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8592 ;;      Params:         4       0       0       0       0
  8593 ;;      Locals:         1       0       0       0       0
  8594 ;;      Temps:          1       0       0       0       0
  8595 ;;      Totals:         6       0       0       0       0
  8596 ;;Total ram usage:        6 bytes
  8597 ;; Hardware stack levels used:    1
  8598 ;; This function calls:
  8599 ;;		Nothing
  8600 ;; This function is called by:
  8601 ;;		_sprintf
  8602 ;; This function uses a non-reentrant model
  8603 ;;
  8604                           
  8605                           
  8606                           ;psect for function ___lwmod
  8607  1006                     ___lwmod:	
  8608                           
  8609                           ;incstack = 0
  8610                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8611  1006  0878               	movf	___lwmod@divisor,w
  8612  1007  0479               	iorwf	___lwmod@divisor+1,w
  8613  1008  1903               	btfsc	3,2
  8614  1009  2833               	goto	l2594
  8615  100A  01FD               	clrf	___lwmod@counter
  8616  100B  0AFD               	incf	___lwmod@counter,f
  8617  100C                     l2584:	
  8618  100C  1BF9               	btfsc	___lwmod@divisor+1,7
  8619  100D  281A               	goto	l2586
  8620  100E  3001               	movlw	1
  8621  100F                     u2765:	
  8622  100F  1003               	clrc
  8623  1010  0DF8               	rlf	___lwmod@divisor,f
  8624  1011  0DF9               	rlf	___lwmod@divisor+1,f
  8625  1012  3EFF               	addlw	-1
  8626  1013  1D03               	skipz
  8627  1014  280F               	goto	u2765
  8628  1015  3001               	movlw	1
  8629  1016  00FC               	movwf	??___lwmod
  8630  1017  087C               	movf	??___lwmod,w
  8631  1018  07FD               	addwf	___lwmod@counter,f
  8632  1019  280C               	goto	l2584
  8633  101A                     l2586:	
  8634  101A  0879               	movf	___lwmod@divisor+1,w
  8635  101B  027B               	subwf	___lwmod@dividend+1,w
  8636  101C  1D03               	skipz
  8637  101D  2820               	goto	u2785
  8638  101E  0878               	movf	___lwmod@divisor,w
  8639  101F  027A               	subwf	___lwmod@dividend,w
  8640  1020                     u2785:	
  8641  1020  1C03               	skipc
  8642  1021  2828               	goto	l2590
  8643  1022  0878               	movf	___lwmod@divisor,w
  8644  1023  02FA               	subwf	___lwmod@dividend,f
  8645  1024  0879               	movf	___lwmod@divisor+1,w
  8646  1025  1C03               	skipc
  8647  1026  03FB               	decf	___lwmod@dividend+1,f
  8648  1027  02FB               	subwf	___lwmod@dividend+1,f
  8649  1028                     l2590:	
  8650  1028  3001               	movlw	1
  8651  1029                     u2795:	
  8652  1029  1003               	clrc
  8653  102A  0CF9               	rrf	___lwmod@divisor+1,f
  8654  102B  0CF8               	rrf	___lwmod@divisor,f
  8655  102C  3EFF               	addlw	-1
  8656  102D  1D03               	skipz
  8657  102E  2829               	goto	u2795
  8658  102F  3001               	movlw	1
  8659  1030  02FD               	subwf	___lwmod@counter,f
  8660  1031  1D03               	btfss	3,2
  8661  1032  281A               	goto	l2586
  8662  1033                     l2594:	
  8663  1033  087B               	movf	___lwmod@dividend+1,w
  8664  1034  00F9               	movwf	?___lwmod+1
  8665  1035  087A               	movf	___lwmod@dividend,w
  8666  1036  00F8               	movwf	?___lwmod
  8667  1037  0008               	return
  8668  1038                     __end_of___lwmod:	
  8669                           
  8670                           	psect	text23
  8671  1FC4                     __ptext23:	
  8672 ;; *************** function ___lwdiv *****************
  8673 ;; Defined at:
  8674 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  8675 ;; Parameters:    Size  Location     Type
  8676 ;;  divisor         2    0[COMMON] unsigned int 
  8677 ;;  dividend        2    2[COMMON] unsigned int 
  8678 ;; Auto vars:     Size  Location     Type
  8679 ;;  quotient        2    5[COMMON] unsigned int 
  8680 ;;  counter         1    7[COMMON] unsigned char 
  8681 ;; Return value:  Size  Location     Type
  8682 ;;                  2    0[COMMON] unsigned int 
  8683 ;; Registers used:
  8684 ;;		wreg, status,2, status,0
  8685 ;; Tracked objects:
  8686 ;;		On entry : 0/0
  8687 ;;		On exit  : 0/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8690 ;;      Params:         4       0       0       0       0
  8691 ;;      Locals:         3       0       0       0       0
  8692 ;;      Temps:          1       0       0       0       0
  8693 ;;      Totals:         8       0       0       0       0
  8694 ;;Total ram usage:        8 bytes
  8695 ;; Hardware stack levels used:    1
  8696 ;; This function calls:
  8697 ;;		Nothing
  8698 ;; This function is called by:
  8699 ;;		_sprintf
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           
  8704                           ;psect for function ___lwdiv
  8705  1FC4                     ___lwdiv:	
  8706                           
  8707                           ;incstack = 0
  8708                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8709  1FC4  01F5               	clrf	___lwdiv@quotient
  8710  1FC5  01F6               	clrf	___lwdiv@quotient+1
  8711  1FC6  0870               	movf	___lwdiv@divisor,w
  8712  1FC7  0471               	iorwf	___lwdiv@divisor+1,w
  8713  1FC8  1903               	btfsc	3,2
  8714  1FC9  2FFB               	goto	l2572
  8715  1FCA  01F7               	clrf	___lwdiv@counter
  8716  1FCB  0AF7               	incf	___lwdiv@counter,f
  8717  1FCC                     l2560:	
  8718  1FCC  1BF1               	btfsc	___lwdiv@divisor+1,7
  8719  1FCD  2FDA               	goto	l2562
  8720  1FCE  3001               	movlw	1
  8721  1FCF                     u2695:	
  8722  1FCF  1003               	clrc
  8723  1FD0  0DF0               	rlf	___lwdiv@divisor,f
  8724  1FD1  0DF1               	rlf	___lwdiv@divisor+1,f
  8725  1FD2  3EFF               	addlw	-1
  8726  1FD3  1D03               	skipz
  8727  1FD4  2FCF               	goto	u2695
  8728  1FD5  3001               	movlw	1
  8729  1FD6  00F4               	movwf	??___lwdiv
  8730  1FD7  0874               	movf	??___lwdiv,w
  8731  1FD8  07F7               	addwf	___lwdiv@counter,f
  8732  1FD9  2FCC               	goto	l2560
  8733  1FDA                     l2562:	
  8734  1FDA  3001               	movlw	1
  8735  1FDB                     u2715:	
  8736  1FDB  1003               	clrc
  8737  1FDC  0DF5               	rlf	___lwdiv@quotient,f
  8738  1FDD  0DF6               	rlf	___lwdiv@quotient+1,f
  8739  1FDE  3EFF               	addlw	-1
  8740  1FDF  1D03               	skipz
  8741  1FE0  2FDB               	goto	u2715
  8742  1FE1  0871               	movf	___lwdiv@divisor+1,w
  8743  1FE2  0273               	subwf	___lwdiv@dividend+1,w
  8744  1FE3  1D03               	skipz
  8745  1FE4  2FE7               	goto	u2725
  8746  1FE5  0870               	movf	___lwdiv@divisor,w
  8747  1FE6  0272               	subwf	___lwdiv@dividend,w
  8748  1FE7                     u2725:	
  8749  1FE7  1C03               	skipc
  8750  1FE8  2FF0               	goto	l2568
  8751  1FE9  0870               	movf	___lwdiv@divisor,w
  8752  1FEA  02F2               	subwf	___lwdiv@dividend,f
  8753  1FEB  0871               	movf	___lwdiv@divisor+1,w
  8754  1FEC  1C03               	skipc
  8755  1FED  03F3               	decf	___lwdiv@dividend+1,f
  8756  1FEE  02F3               	subwf	___lwdiv@dividend+1,f
  8757  1FEF  1475               	bsf	___lwdiv@quotient,0
  8758  1FF0                     l2568:	
  8759  1FF0  3001               	movlw	1
  8760  1FF1                     u2735:	
  8761  1FF1  1003               	clrc
  8762  1FF2  0CF1               	rrf	___lwdiv@divisor+1,f
  8763  1FF3  0CF0               	rrf	___lwdiv@divisor,f
  8764  1FF4  3EFF               	addlw	-1
  8765  1FF5  1D03               	skipz
  8766  1FF6  2FF1               	goto	u2735
  8767  1FF7  3001               	movlw	1
  8768  1FF8  02F7               	subwf	___lwdiv@counter,f
  8769  1FF9  1D03               	btfss	3,2
  8770  1FFA  2FDA               	goto	l2562
  8771  1FFB                     l2572:	
  8772  1FFB  0876               	movf	___lwdiv@quotient+1,w
  8773  1FFC  00F1               	movwf	?___lwdiv+1
  8774  1FFD  0875               	movf	___lwdiv@quotient,w
  8775  1FFE  00F0               	movwf	?___lwdiv
  8776  1FFF  0008               	return
  8777  2000                     __end_of___lwdiv:	
  8778                           
  8779                           	psect	text24
  8780  1F59                     __ptext24:	
  8781 ;; *************** function _is_row_full *****************
  8782 ;; Defined at:
  8783 ;;		line 557 in file "teris_16f886.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;  matrix          2    0[COMMON] PTR const struct .
  8786 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  8787 ;;  row             1    2[COMMON] unsigned char 
  8788 ;; Auto vars:     Size  Location     Type
  8789 ;;  col             1    8[COMMON] unsigned char 
  8790 ;; Return value:  Size  Location     Type
  8791 ;;                  1    wreg      unsigned char 
  8792 ;; Registers used:
  8793 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8794 ;; Tracked objects:
  8795 ;;		On entry : 0/0
  8796 ;;		On exit  : 0/0
  8797 ;;		Unchanged: 0/0
  8798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8799 ;;      Params:         3       0       0       0       0
  8800 ;;      Locals:         1       0       0       0       0
  8801 ;;      Temps:          5       0       0       0       0
  8802 ;;      Totals:         9       0       0       0       0
  8803 ;;Total ram usage:        9 bytes
  8804 ;; Hardware stack levels used:    1
  8805 ;; This function calls:
  8806 ;;		Nothing
  8807 ;; This function is called by:
  8808 ;;		_delete_matrix
  8809 ;; This function uses a non-reentrant model
  8810 ;;
  8811                           
  8812                           
  8813                           ;psect for function _is_row_full
  8814  1F59                     _is_row_full:	
  8815                           
  8816                           ;teris_16f886.c: 559: for(uint8_t col = 0; col < 8; col++)
  8817                           
  8818                           ;incstack = 0
  8819                           ; Regs used in _is_row_full: [wreg-fsr0h+status,2+status,0]
  8820  1F59  01F8               	clrf	is_row_full@col
  8821  1F5A  3008               	movlw	8
  8822  1F5B  0278               	subwf	is_row_full@col,w
  8823  1F5C  1803               	btfsc	3,0
  8824  1F5D  2F87               	goto	l2706
  8825  1F5E                     l2696:	
  8826                           
  8827                           ;teris_16f886.c: 560: {
  8828                           ;teris_16f886.c: 561: if(matrix->data[row][col] == 0)
  8829  1F5E  0872               	movf	is_row_full@row,w
  8830  1F5F  00F3               	movwf	??_is_row_full
  8831  1F60  3002               	movlw	2
  8832  1F61                     u2965:	
  8833  1F61  1003               	clrc
  8834  1F62  0DF3               	rlf	??_is_row_full,f
  8835  1F63  3EFF               	addlw	-1
  8836  1F64  1D03               	skipz
  8837  1F65  2F61               	goto	u2965
  8838  1F66  1003               	clrc
  8839  1F67  0D73               	rlf	??_is_row_full,w
  8840  1F68  0770               	addwf	is_row_full@matrix,w
  8841  1F69  00F4               	movwf	??_is_row_full+1
  8842  1F6A  0871               	movf	is_row_full@matrix+1,w
  8843  1F6B  1803               	skipnc
  8844  1F6C  3E01               	addlw	1
  8845  1F6D  00F5               	movwf	??_is_row_full+2
  8846  1F6E  0878               	movf	is_row_full@col,w
  8847  1F6F  0774               	addwf	??_is_row_full+1,w
  8848  1F70  00F6               	movwf	??_is_row_full+3
  8849  1F71  0875               	movf	??_is_row_full+2,w
  8850  1F72  1803               	skipnc
  8851  1F73  3E01               	addlw	1
  8852  1F74  00F7               	movwf	??_is_row_full+4
  8853  1F75  0876               	movf	??_is_row_full+3,w
  8854  1F76  0084               	movwf	4
  8855  1F77  1783               	bsf	3,7
  8856  1F78  1C77               	btfss	??_is_row_full+4,0
  8857  1F79  1383               	bcf	3,7
  8858  1F7A  0800               	movf	0,w
  8859  1F7B  1D03               	btfss	3,2
  8860  1F7C  2F7F               	goto	l2702
  8861                           
  8862                           ;teris_16f886.c: 562: {
  8863                           ;teris_16f886.c: 563: return 0;
  8864  1F7D  3000               	movlw	0
  8865  1F7E  0008               	return
  8866  1F7F                     l2702:	
  8867  1F7F  3001               	movlw	1
  8868  1F80  00F3               	movwf	??_is_row_full
  8869  1F81  0873               	movf	??_is_row_full,w
  8870  1F82  07F8               	addwf	is_row_full@col,f
  8871  1F83  3008               	movlw	8
  8872  1F84  0278               	subwf	is_row_full@col,w
  8873  1F85  1C03               	skipc
  8874  1F86  2F5E               	goto	l2696
  8875  1F87                     l2706:	
  8876                           
  8877                           ;teris_16f886.c: 564: }
  8878                           ;teris_16f886.c: 565: }
  8879                           ;teris_16f886.c: 566: return 1;
  8880  1F87  3001               	movlw	1
  8881  1F88  0008               	return
  8882  1F89                     __end_of_is_row_full:	
  8883                           
  8884                           	psect	text25
  8885  149E                     __ptext25:	
  8886 ;; *************** function _delete_row *****************
  8887 ;; Defined at:
  8888 ;;		line 568 in file "teris_16f886.c"
  8889 ;; Parameters:    Size  Location     Type
  8890 ;;  matrix          2   11[COMMON] PTR struct .
  8891 ;;		 -> find_best_solution@temp_matrix88(64), g_matrix88(64), 
  8892 ;;  row             1   13[COMMON] unsigned char 
  8893 ;; Auto vars:     Size  Location     Type
  8894 ;;  len             2    4[BANK0 ] unsigned int 
  8895 ;;  i               1    6[BANK0 ] char 
  8896 ;; Return value:  Size  Location     Type
  8897 ;;                  1    wreg      void 
  8898 ;; Registers used:
  8899 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8905 ;;      Params:         3       0       0       0       0
  8906 ;;      Locals:         0       3       0       0       0
  8907 ;;      Temps:          0       4       0       0       0
  8908 ;;      Totals:         3       7       0       0       0
  8909 ;;Total ram usage:       10 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:    1
  8912 ;; This function calls:
  8913 ;;		_memcpy
  8914 ;;		_memset
  8915 ;; This function is called by:
  8916 ;;		_delete_matrix
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function _delete_row
  8922  149E                     _delete_row:	
  8923                           
  8924                           ;teris_16f886.c: 570: for(int8_t i = 8 - 1; i >= 0; i--)
  8925                           
  8926                           ;incstack = 0
  8927                           ; Regs used in _delete_row: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8928  149E  3007               	movlw	7
  8929  149F  1283               	bcf	3,5	;RP0=0, select bank0
  8930  14A0  1303               	bcf	3,6	;RP1=0, select bank0
  8931  14A1  00A0               	movwf	??_delete_row
  8932  14A2  0820               	movf	??_delete_row,w
  8933  14A3  00A6               	movwf	delete_row@i
  8934  14A4                     L17:	
  8935  14A4  1BA6               	btfsc	delete_row@i,7
  8936  14A5  0008               	return
  8937                           
  8938                           ;teris_16f886.c: 571: {
  8939                           ;teris_16f886.c: 572: if(i <= row)
  8940  14A6  0826               	movf	delete_row@i,w
  8941  14A7  00A0               	movwf	??_delete_row
  8942  14A8  01A1               	clrf	??_delete_row+1
  8943  14A9  1BA0               	btfsc	??_delete_row,7
  8944  14AA  03A1               	decf	??_delete_row+1,f
  8945  14AB  0821               	movf	??_delete_row+1,w
  8946  14AC  3A80               	xorlw	128
  8947  14AD  3C80               	sublw	128
  8948  14AE  1D03               	skipz
  8949  14AF  2CB2               	goto	u5245
  8950  14B0  0820               	movf	??_delete_row,w
  8951  14B1  027D               	subwf	delete_row@row,w
  8952  14B2                     u5245:	
  8953  14B2  1C03               	skipc
  8954  14B3  2D0C               	goto	l4034
  8955                           
  8956                           ;teris_16f886.c: 573: {
  8957                           ;teris_16f886.c: 574: if(i > 0)
  8958  14B4  1283               	bcf	3,5	;RP0=0, select bank0
  8959  14B5  1303               	bcf	3,6	;RP1=0, select bank0
  8960  14B6  0826               	movf	delete_row@i,w
  8961  14B7  3A80               	xorlw	128
  8962  14B8  3E7F               	addlw	-129
  8963  14B9  1C03               	skipc
  8964  14BA  2CEE               	goto	l4032
  8965                           
  8966                           ;teris_16f886.c: 575: {
  8967                           ;teris_16f886.c: 579: register size_t len;
  8968                           ;teris_16f886.c: 581: len = 8*sizeof(uint8_t);
  8969  14BB  3008               	movlw	8
  8970  14BC  00A4               	movwf	delete_row@len
  8971  14BD  3000               	movlw	0
  8972  14BE  00A5               	movwf	delete_row@len+1
  8973                           
  8974                           ;teris_16f886.c: 582: memcpy(matrix->data[i], matrix->data[i - 1], len);
  8975  14BF  0826               	movf	delete_row@i,w
  8976  14C0  00A0               	movwf	??_delete_row
  8977  14C1  3002               	movlw	2
  8978  14C2                     u5265:	
  8979  14C2  1003               	clrc
  8980  14C3  0DA0               	rlf	??_delete_row,f
  8981  14C4  3EFF               	addlw	-1
  8982  14C5  1D03               	skipz
  8983  14C6  2CC2               	goto	u5265
  8984  14C7  1003               	clrc
  8985  14C8  0D20               	rlf	??_delete_row,w
  8986  14C9  077B               	addwf	delete_row@matrix,w
  8987  14CA  00F0               	movwf	memcpy@d1
  8988  14CB  087C               	movf	delete_row@matrix+1,w
  8989  14CC  1803               	skipnc
  8990  14CD  3E01               	addlw	1
  8991  14CE  00F1               	movwf	memcpy@d1+1
  8992  14CF  0826               	movf	delete_row@i,w
  8993  14D0  00A1               	movwf	??_delete_row+1
  8994  14D1  3002               	movlw	2
  8995  14D2                     u5275:	
  8996  14D2  1003               	clrc
  8997  14D3  0DA1               	rlf	??_delete_row+1,f
  8998  14D4  3EFF               	addlw	-1
  8999  14D5  1D03               	skipz
  9000  14D6  2CD2               	goto	u5275
  9001  14D7  1003               	clrc
  9002  14D8  0D21               	rlf	??_delete_row+1,w
  9003  14D9  3EF8               	addlw	248
  9004  14DA  077B               	addwf	delete_row@matrix,w
  9005  14DB  00A2               	movwf	??_delete_row+2
  9006  14DC  087C               	movf	delete_row@matrix+1,w
  9007  14DD  1803               	skipnc
  9008  14DE  3E01               	addlw	1
  9009  14DF  00A3               	movwf	??_delete_row+3
  9010  14E0  0822               	movf	??_delete_row+2,w
  9011  14E1  00F2               	movwf	memcpy@s1
  9012  14E2  0823               	movf	??_delete_row+3,w
  9013  14E3  00F3               	movwf	memcpy@s1+1
  9014  14E4  0825               	movf	delete_row@len+1,w
  9015  14E5  00F5               	movwf	memcpy@n+1
  9016  14E6  0824               	movf	delete_row@len,w
  9017  14E7  00F4               	movwf	memcpy@n
  9018  14E8  160A  158A  272F  160A  118A  	fcall	_memcpy
  9019                           
  9020                           ;teris_16f886.c: 583: }
  9021  14ED  2D0C               	goto	l4034
  9022  14EE                     l4032:	
  9023                           
  9024                           ;teris_16f886.c: 584: else
  9025                           ;teris_16f886.c: 585: {
  9026                           ;teris_16f886.c: 586: memset(matrix->data[i], 0, 8*sizeof(uint8_t));
  9027  14EE  1283               	bcf	3,5	;RP0=0, select bank0
  9028  14EF  1303               	bcf	3,6	;RP1=0, select bank0
  9029  14F0  0826               	movf	delete_row@i,w
  9030  14F1  00A0               	movwf	??_delete_row
  9031  14F2  3002               	movlw	2
  9032  14F3                     u5285:	
  9033  14F3  1003               	clrc
  9034  14F4  0DA0               	rlf	??_delete_row,f
  9035  14F5  3EFF               	addlw	-1
  9036  14F6  1D03               	skipz
  9037  14F7  2CF3               	goto	u5285
  9038  14F8  1003               	clrc
  9039  14F9  0D20               	rlf	??_delete_row,w
  9040  14FA  077B               	addwf	delete_row@matrix,w
  9041  14FB  00F0               	movwf	memset@p1
  9042  14FC  087C               	movf	delete_row@matrix+1,w
  9043  14FD  1803               	skipnc
  9044  14FE  3E01               	addlw	1
  9045  14FF  00F1               	movwf	memset@p1+1
  9046  1500  3000               	movlw	0
  9047  1501  00F2               	movwf	memset@c
  9048  1502  00F3               	movwf	memset@c+1
  9049  1503  3008               	movlw	8
  9050  1504  00F4               	movwf	memset@n
  9051  1505  3000               	movlw	0
  9052  1506  00F5               	movwf	memset@n+1
  9053  1507  160A  158A  26BA  160A  118A  	fcall	_memset
  9054  150C                     l4034:	
  9055  150C  30FF               	movlw	255
  9056  150D  1283               	bcf	3,5	;RP0=0, select bank0
  9057  150E  1303               	bcf	3,6	;RP1=0, select bank0
  9058  150F  00A0               	movwf	??_delete_row
  9059  1510  0820               	movf	??_delete_row,w
  9060  1511  07A6               	addwf	delete_row@i,f
  9061  1512  2CA4               	goto	L17
  9062  1513                     __end_of_delete_row:	
  9063                           
  9064                           	psect	text26
  9065  1F2F                     __ptext26:	
  9066 ;; *************** function _memcpy *****************
  9067 ;; Defined at:
  9068 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;  d1              2    0[COMMON] PTR void 
  9071 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9072 ;;  s1              2    2[COMMON] PTR const void 
  9073 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9074 ;;  n               2    4[COMMON] unsigned int 
  9075 ;; Auto vars:     Size  Location     Type
  9076 ;;  s               2    9[COMMON] PTR const unsigned char 
  9077 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9078 ;;  d               2    7[COMMON] PTR unsigned char 
  9079 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
  9080 ;; Return value:  Size  Location     Type
  9081 ;;                  2    0[COMMON] PTR void 
  9082 ;; Registers used:
  9083 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9084 ;; Tracked objects:
  9085 ;;		On entry : 0/0
  9086 ;;		On exit  : 0/0
  9087 ;;		Unchanged: 0/0
  9088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9089 ;;      Params:         6       0       0       0       0
  9090 ;;      Locals:         4       0       0       0       0
  9091 ;;      Temps:          1       0       0       0       0
  9092 ;;      Totals:        11       0       0       0       0
  9093 ;;Total ram usage:       11 bytes
  9094 ;; Hardware stack levels used:    1
  9095 ;; This function calls:
  9096 ;;		Nothing
  9097 ;; This function is called by:
  9098 ;;		_delete_row
  9099 ;;		_merge1
  9100 ;; This function uses a non-reentrant model
  9101 ;;
  9102                           
  9103                           
  9104                           ;psect for function _memcpy
  9105  1F2F                     _memcpy:	
  9106                           
  9107                           ;incstack = 0
  9108                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  9109  1F2F  0872               	movf	memcpy@s1,w
  9110  1F30  00F9               	movwf	memcpy@s
  9111  1F31  0873               	movf	memcpy@s1+1,w
  9112  1F32  00FA               	movwf	memcpy@s+1
  9113  1F33  0870               	movf	memcpy@d1,w
  9114  1F34  00F7               	movwf	memcpy@d
  9115  1F35  0871               	movf	memcpy@d1+1,w
  9116  1F36  00F8               	movwf	memcpy@d+1
  9117  1F37                     l2548:	
  9118  1F37  3001               	movlw	1
  9119  1F38  02F4               	subwf	memcpy@n,f
  9120  1F39  3000               	movlw	0
  9121  1F3A  1C03               	skipc
  9122  1F3B  03F5               	decf	memcpy@n+1,f
  9123  1F3C  02F5               	subwf	memcpy@n+1,f
  9124  1F3D  0A74               	incf	memcpy@n,w
  9125  1F3E  1903               	btfsc	3,2
  9126  1F3F  0A75               	incf	memcpy@n+1,w
  9127  1F40  1903               	btfsc	3,2
  9128  1F41  0008               	return
  9129  1F42  0879               	movf	memcpy@s,w
  9130  1F43  0084               	movwf	4
  9131  1F44  1783               	bsf	3,7
  9132  1F45  1C7A               	btfss	memcpy@s+1,0
  9133  1F46  1383               	bcf	3,7
  9134  1F47  0800               	movf	0,w
  9135  1F48  00F6               	movwf	??_memcpy
  9136  1F49  0877               	movf	memcpy@d,w
  9137  1F4A  0084               	movwf	4
  9138  1F4B  1383               	bcf	3,7
  9139  1F4C  1878               	btfsc	memcpy@d+1,0
  9140  1F4D  1783               	bsf	3,7
  9141  1F4E  0876               	movf	??_memcpy,w
  9142  1F4F  0080               	movwf	0
  9143  1F50  3001               	movlw	1
  9144  1F51  07F9               	addwf	memcpy@s,f
  9145  1F52  1803               	skipnc
  9146  1F53  0AFA               	incf	memcpy@s+1,f
  9147  1F54  3001               	movlw	1
  9148  1F55  07F7               	addwf	memcpy@d,f
  9149  1F56  1803               	skipnc
  9150  1F57  0AF8               	incf	memcpy@d+1,f
  9151  1F58  2F37               	goto	l2548
  9152  1F59                     __end_of_memcpy:	
  9153                           ;	Return value of _memcpy is never used
  9154                           
  9155                           
  9156                           	psect	text27
  9157  1F0C                     __ptext27:	
  9158 ;; *************** function _USARTWriteString *****************
  9159 ;; Defined at:
  9160 ;;		line 76 in file "usart_pic16.c"
  9161 ;; Parameters:    Size  Location     Type
  9162 ;;  str             2    1[COMMON] PTR const unsigned char 
  9163 ;;		 -> STR_58(15), STR_56(15), STR_39(47), STR_29(22), 
  9164 ;;		 -> STR_28(21), STR_27(8), STR_23(37), STR_22(10), 
  9165 ;;		 -> STR_19(37), STR_17(23), STR_16(3), STR_15(2), 
  9166 ;;		 -> STR_14(2), STR_13(31), STR_12(23), STR_11(3), 
  9167 ;;		 -> STR_10(2), STR_9(2), STR_8(23), g_debug(32), 
  9168 ;;		 -> STR_5(23), STR_4(3), STR_3(2), STR_2(2), 
  9169 ;;		 -> STR_1(31), 
  9170 ;; Auto vars:     Size  Location     Type
  9171 ;;		None
  9172 ;; Return value:  Size  Location     Type
  9173 ;;                  1    wreg      void 
  9174 ;; Registers used:
  9175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9176 ;; Tracked objects:
  9177 ;;		On entry : 0/0
  9178 ;;		On exit  : 0/0
  9179 ;;		Unchanged: 0/0
  9180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9181 ;;      Params:         2       0       0       0       0
  9182 ;;      Locals:         0       0       0       0       0
  9183 ;;      Temps:          0       0       0       0       0
  9184 ;;      Totals:         2       0       0       0       0
  9185 ;;Total ram usage:        2 bytes
  9186 ;; Hardware stack levels used:    1
  9187 ;; Hardware stack levels required when called:    1
  9188 ;; This function calls:
  9189 ;;		_USARTWriteChar
  9190 ;; This function is called by:
  9191 ;;		_printf_console_MATRIX44
  9192 ;;		_printf_console_MATRIX88
  9193 ;;		_delete_matrix
  9194 ;;		_hit_land
  9195 ;;		_is_valid
  9196 ;;		_is_left_boundary
  9197 ;;		_is_right_boundary
  9198 ;;		_fall_off
  9199 ;;		_evaluate
  9200 ;;		_left_most
  9201 ;;		_right_most
  9202 ;;		_get_high
  9203 ;;		_get_high_after_merge
  9204 ;;		_get_holes_after_merge
  9205 ;;		_find_best_solution
  9206 ;;		_main
  9207 ;;		_USARTWriteLine
  9208 ;;		_printf_console_all_MATRIX44
  9209 ;;		_printf_console_MATRIX7219
  9210 ;; This function uses a non-reentrant model
  9211 ;;
  9212                           
  9213                           
  9214                           ;psect for function _USARTWriteString
  9215  1F0C                     _USARTWriteString:	
  9216  1F0C                     l2486:	
  9217                           ;usart_pic16.c: 77: while (*str != '\0') {
  9218                           
  9219                           ;incstack = 0
  9220                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9221                           
  9222  1F0C  0872               	movf	USARTWriteString@str+1,w
  9223  1F0D  1283               	bcf	3,5	;RP0=0, select bank0
  9224  1F0E  1303               	bcf	3,6	;RP1=0, select bank0
  9225  1F0F  00FF               	movwf	127
  9226  1F10  0871               	movf	USARTWriteString@str,w
  9227  1F11  0084               	movwf	4
  9228  1F12  120A  158A  2000  160A  158A  	fcall	stringtab
  9229  1F17  3A00               	xorlw	0
  9230  1F18  1903               	btfsc	3,2
  9231  1F19  0008               	return
  9232                           
  9233                           ;usart_pic16.c: 78: USARTWriteChar(*str);
  9234  1F1A  0872               	movf	USARTWriteString@str+1,w
  9235  1F1B  1283               	bcf	3,5	;RP0=0, select bank0
  9236  1F1C  1303               	bcf	3,6	;RP1=0, select bank0
  9237  1F1D  00FF               	movwf	127
  9238  1F1E  0871               	movf	USARTWriteString@str,w
  9239  1F1F  0084               	movwf	4
  9240  1F20  120A  158A  2000  160A  158A  	fcall	stringtab
  9241  1F25  160A  158A  2628  160A  158A  	fcall	_USARTWriteChar
  9242                           
  9243                           ;usart_pic16.c: 79: str++;
  9244  1F2A  3001               	movlw	1
  9245  1F2B  07F1               	addwf	USARTWriteString@str,f
  9246  1F2C  1803               	skipnc
  9247  1F2D  0AF2               	incf	USARTWriteString@str+1,f
  9248  1F2E  2F0C               	goto	l2486
  9249  1F2F                     __end_of_USARTWriteString:	
  9250                           
  9251                           	psect	text28
  9252  1E28                     __ptext28:	
  9253 ;; *************** function _USARTWriteChar *****************
  9254 ;; Defined at:
  9255 ;;		line 70 in file "usart_pic16.c"
  9256 ;; Parameters:    Size  Location     Type
  9257 ;;  ch              1    wreg     unsigned char 
  9258 ;; Auto vars:     Size  Location     Type
  9259 ;;  ch              1    0[COMMON] unsigned char 
  9260 ;; Return value:  Size  Location     Type
  9261 ;;                  1    wreg      void 
  9262 ;; Registers used:
  9263 ;;		wreg
  9264 ;; Tracked objects:
  9265 ;;		On entry : 0/0
  9266 ;;		On exit  : 0/0
  9267 ;;		Unchanged: 0/0
  9268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9269 ;;      Params:         0       0       0       0       0
  9270 ;;      Locals:         1       0       0       0       0
  9271 ;;      Temps:          0       0       0       0       0
  9272 ;;      Totals:         1       0       0       0       0
  9273 ;;Total ram usage:        1 bytes
  9274 ;; Hardware stack levels used:    1
  9275 ;; This function calls:
  9276 ;;		Nothing
  9277 ;; This function is called by:
  9278 ;;		_USARTWriteString
  9279 ;;		_USARTWriteLine
  9280 ;;		_USARTWriteInt
  9281 ;;		_USARTGotoNewLine
  9282 ;; This function uses a non-reentrant model
  9283 ;;
  9284                           
  9285                           
  9286                           ;psect for function _USARTWriteChar
  9287  1E28                     _USARTWriteChar:	
  9288                           
  9289                           ;incstack = 0
  9290                           ; Regs used in _USARTWriteChar: [wreg]
  9291                           ;USARTWriteChar@ch stored from wreg
  9292  1E28  00F0               	movwf	USARTWriteChar@ch
  9293  1E29                     l36:	
  9294                           ;usart_pic16.c: 71: while (!PIR1bits.TXIF);
  9295                           
  9296  1E29  1283               	bcf	3,5	;RP0=0, select bank0
  9297  1E2A  1303               	bcf	3,6	;RP1=0, select bank0
  9298  1E2B  1E0C               	btfss	12,4	;volatile
  9299  1E2C  2E29               	goto	l36
  9300                           
  9301                           ;usart_pic16.c: 73: TXREG = ch;
  9302  1E2D  0870               	movf	USARTWriteChar@ch,w
  9303  1E2E  0099               	movwf	25	;volatile
  9304  1E2F  0008               	return
  9305  1E30                     __end_of_USARTWriteChar:	
  9306                           
  9307                           	psect	text29
  9308  1E48                     __ptext29:	
  9309 ;; *************** function ___bmul *****************
  9310 ;; Defined at:
  9311 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul8.c"
  9312 ;; Parameters:    Size  Location     Type
  9313 ;;  multiplier      1    wreg     unsigned char 
  9314 ;;  multiplicand    1    0[COMMON] unsigned char 
  9315 ;; Auto vars:     Size  Location     Type
  9316 ;;  multiplier      1    3[COMMON] unsigned char 
  9317 ;;  product         1    2[COMMON] unsigned char 
  9318 ;; Return value:  Size  Location     Type
  9319 ;;                  1    wreg      unsigned char 
  9320 ;; Registers used:
  9321 ;;		wreg, status,2, status,0
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9327 ;;      Params:         1       0       0       0       0
  9328 ;;      Locals:         2       0       0       0       0
  9329 ;;      Temps:          1       0       0       0       0
  9330 ;;      Totals:         4       0       0       0       0
  9331 ;;Total ram usage:        4 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; This function calls:
  9334 ;;		Nothing
  9335 ;; This function is called by:
  9336 ;;		_find_best_solution
  9337 ;;		_main
  9338 ;;		_printf_console_cur_MATRIX44
  9339 ;;		_get_MATRIX44
  9340 ;;		_printf_console_all_MATRIX44
  9341 ;; This function uses a non-reentrant model
  9342 ;;
  9343                           
  9344                           
  9345                           ;psect for function ___bmul
  9346  1E48                     ___bmul:	
  9347                           
  9348                           ;incstack = 0
  9349                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  9350                           ;___bmul@multiplier stored from wreg
  9351  1E48  00F3               	movwf	___bmul@multiplier
  9352  1E49  01F2               	clrf	___bmul@product
  9353  1E4A                     l3220:	
  9354  1E4A  1C73               	btfss	___bmul@multiplier,0
  9355  1E4B  2E50               	goto	l3224
  9356  1E4C  0870               	movf	___bmul@multiplicand,w
  9357  1E4D  00F1               	movwf	??___bmul
  9358  1E4E  0871               	movf	??___bmul,w
  9359  1E4F  07F2               	addwf	___bmul@product,f
  9360  1E50                     l3224:	
  9361  1E50  1003               	clrc
  9362  1E51  0DF0               	rlf	___bmul@multiplicand,f
  9363  1E52  1003               	clrc
  9364  1E53  0CF3               	rrf	___bmul@multiplier,f
  9365  1E54  0873               	movf	___bmul@multiplier,w
  9366  1E55  1D03               	btfss	3,2
  9367  1E56  2E4A               	goto	l3220
  9368  1E57  0872               	movf	___bmul@product,w
  9369  1E58  0008               	return
  9370  1E59                     __end_of___bmul:	
  9371                           
  9372                           	psect	text30
  9373  11DA                     __ptext30:	
  9374 ;; *************** function _clear *****************
  9375 ;; Defined at:
  9376 ;;		line 816 in file "teris_16f886.c"
  9377 ;; Parameters:    Size  Location     Type
  9378 ;;  x               1    wreg     char 
  9379 ;;  y               1    0[COMMON] char 
  9380 ;;  matrix44        2    1[COMMON] PTR const struct .
  9381 ;;		 -> NULL(0), g_matrix44(384), 
  9382 ;;  matrix88        1    3[COMMON] PTR struct .
  9383 ;;		 -> g_matrix88(64), 
  9384 ;; Auto vars:     Size  Location     Type
  9385 ;;  x               1    8[COMMON] char 
  9386 ;;  col             1   10[COMMON] unsigned char 
  9387 ;;  row             1    9[COMMON] unsigned char 
  9388 ;; Return value:  Size  Location     Type
  9389 ;;                  1    wreg      void 
  9390 ;; Registers used:
  9391 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  9392 ;; Tracked objects:
  9393 ;;		On entry : 0/0
  9394 ;;		On exit  : 0/0
  9395 ;;		Unchanged: 0/0
  9396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9397 ;;      Params:         4       0       0       0       0
  9398 ;;      Locals:         3       0       0       0       0
  9399 ;;      Temps:          4       0       0       0       0
  9400 ;;      Totals:        11       0       0       0       0
  9401 ;;Total ram usage:       11 bytes
  9402 ;; Hardware stack levels used:    2
  9403 ;; This function calls:
  9404 ;;		Nothing
  9405 ;; This function is called by:
  9406 ;;		_main
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           
  9411                           ;psect for function _clear
  9412  11DA                     _clear:	
  9413                           
  9414                           ;incstack = 0
  9415                           ; Regs used in _clear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  9416                           ;clear@x stored from wreg
  9417  11DA  00F8               	movwf	clear@x
  9418                           
  9419                           ;teris_16f886.c: 818: for(uint8_t row = 0; row < 4; row++)
  9420  11DB  01F9               	clrf	clear@row
  9421  11DC                     L18:	
  9422  11DC  3004               	movlw	4
  9423  11DD  0279               	subwf	clear@row,w
  9424  11DE  1803               	btfsc	3,0
  9425  11DF  0008               	return
  9426                           
  9427                           ;teris_16f886.c: 819: {
  9428                           ;teris_16f886.c: 820: for(uint8_t col = 0; col < 4; col++)
  9429  11E0  01FA               	clrf	clear@col
  9430  11E1  3004               	movlw	4
  9431  11E2  027A               	subwf	clear@col,w
  9432  11E3  1803               	btfsc	3,0
  9433  11E4  2A24               	goto	l3418
  9434  11E5                     l3410:	
  9435                           
  9436                           ;teris_16f886.c: 821: {
  9437                           ;teris_16f886.c: 822: if(matrix44->data[row][col] == 1)
  9438  11E5  0879               	movf	clear@row,w
  9439  11E6  00F4               	movwf	??_clear
  9440  11E7  01F5               	clrf	??_clear+1
  9441  11E8  1003               	clrc
  9442  11E9  0DF4               	rlf	??_clear,f
  9443  11EA  0DF5               	rlf	??_clear+1,f
  9444  11EB  1003               	clrc
  9445  11EC  0DF4               	rlf	??_clear,f
  9446  11ED  0DF5               	rlf	??_clear+1,f
  9447  11EE  0874               	movf	??_clear,w
  9448  11EF  0771               	addwf	clear@matrix44,w
  9449  11F0  00F6               	movwf	??_clear+2
  9450  11F1  0875               	movf	??_clear+1,w
  9451  11F2  1803               	skipnc
  9452  11F3  0A75               	incf	??_clear+1,w
  9453  11F4  0772               	addwf	clear@matrix44+1,w
  9454  11F5  00F7               	movwf	??_clear+3
  9455  11F6  087A               	movf	clear@col,w
  9456  11F7  0776               	addwf	??_clear+2,w
  9457  11F8  0084               	movwf	4
  9458  11F9  0877               	movf	??_clear+3,w
  9459  11FA  1803               	skipnc
  9460  11FB  0A77               	incf	??_clear+3,w
  9461  11FC  1283               	bcf	3,5	;RP0=0, select bank0
  9462  11FD  1303               	bcf	3,6	;RP1=0, select bank0
  9463  11FE  00FF               	movwf	127
  9464  11FF  120A  158A  2000  160A  118A  	fcall	stringtab
  9465  1204  3A01               	xorlw	1
  9466  1205  1D03               	skipz
  9467  1206  2A1C               	goto	l3414
  9468                           
  9469                           ;teris_16f886.c: 823: {
  9470                           ;teris_16f886.c: 824: matrix88->data[y + row][x + col] = 0;
  9471  1207  087A               	movf	clear@col,w
  9472  1208  0778               	addwf	clear@x,w
  9473  1209  0773               	addwf	clear@matrix88,w
  9474  120A  00F4               	movwf	??_clear
  9475  120B  0879               	movf	clear@row,w
  9476  120C  0770               	addwf	clear@y,w
  9477  120D  00F5               	movwf	??_clear+1
  9478  120E  3002               	movlw	2
  9479  120F                     u4535:	
  9480  120F  1003               	clrc
  9481  1210  0DF5               	rlf	??_clear+1,f
  9482  1211  3EFF               	addlw	-1
  9483  1212  1D03               	skipz
  9484  1213  2A0F               	goto	u4535
  9485  1214  1003               	clrc
  9486  1215  0D75               	rlf	??_clear+1,w
  9487  1216  0774               	addwf	??_clear,w
  9488  1217  00F6               	movwf	??_clear+2
  9489  1218  0876               	movf	??_clear+2,w
  9490  1219  0084               	movwf	4
  9491  121A  1783               	bsf	3,7	;select IRP bank2
  9492  121B  0180               	clrf	0
  9493  121C                     l3414:	
  9494  121C  3001               	movlw	1
  9495  121D  00F4               	movwf	??_clear
  9496  121E  0874               	movf	??_clear,w
  9497  121F  07FA               	addwf	clear@col,f
  9498  1220  3004               	movlw	4
  9499  1221  027A               	subwf	clear@col,w
  9500  1222  1C03               	skipc
  9501  1223  29E5               	goto	l3410
  9502  1224                     l3418:	
  9503  1224  3001               	movlw	1
  9504  1225  00F4               	movwf	??_clear
  9505  1226  0874               	movf	??_clear,w
  9506  1227  07F9               	addwf	clear@row,f
  9507  1228  29DC               	goto	L18
  9508  1229                     __end_of_clear:	
  9509                           
  9510                           	psect	text31
  9511  1EA2                     __ptext31:	
  9512 ;; *************** function _char_info_index_rand *****************
  9513 ;; Defined at:
  9514 ;;		line 898 in file "teris_16f886.c"
  9515 ;; Parameters:    Size  Location     Type
  9516 ;;		None
  9517 ;; Auto vars:     Size  Location     Type
  9518 ;;		None
  9519 ;; Return value:  Size  Location     Type
  9520 ;;                  1    wreg      unsigned char 
  9521 ;; Registers used:
  9522 ;;		wreg, status,2, status,0, pclath, cstack
  9523 ;; Tracked objects:
  9524 ;;		On entry : 0/0
  9525 ;;		On exit  : 0/0
  9526 ;;		Unchanged: 0/0
  9527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9528 ;;      Params:         0       0       0       0       0
  9529 ;;      Locals:         0       0       0       0       0
  9530 ;;      Temps:          0       0       0       0       0
  9531 ;;      Totals:         0       0       0       0       0
  9532 ;;Total ram usage:        0 bytes
  9533 ;; Hardware stack levels used:    1
  9534 ;; Hardware stack levels required when called:    2
  9535 ;; This function calls:
  9536 ;;		___awmod
  9537 ;;		_rand
  9538 ;; This function is called by:
  9539 ;;		_main
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           
  9544                           ;psect for function _char_info_index_rand
  9545  1EA2                     _char_info_index_rand:	
  9546                           
  9547                           ;teris_16f886.c: 900: return (uint8_t)(rand()%9);
  9548                           
  9549                           ;incstack = 0
  9550                           ; Regs used in _char_info_index_rand: [wreg+status,2+status,0+pclath+cstack]
  9551  1EA2  3009               	movlw	9
  9552  1EA3  1283               	bcf	3,5	;RP0=0, select bank0
  9553  1EA4  1303               	bcf	3,6	;RP1=0, select bank0
  9554  1EA5  00A7               	movwf	___awmod@divisor
  9555  1EA6  3000               	movlw	0
  9556  1EA7  00A8               	movwf	___awmod@divisor+1
  9557  1EA8  160A  118A  20FE  160A  158A  	fcall	_rand
  9558  1EAD  1283               	bcf	3,5	;RP0=0, select bank0
  9559  1EAE  1303               	bcf	3,6	;RP1=0, select bank0
  9560  1EAF  0821               	movf	?_rand+1,w
  9561  1EB0  00AA               	movwf	___awmod@dividend+1
  9562  1EB1  0820               	movf	?_rand,w
  9563  1EB2  00A9               	movwf	___awmod@dividend
  9564  1EB3  160A  118A  218D   	fcall	___awmod
  9565  1EB6  1283               	bcf	3,5	;RP0=0, select bank0
  9566  1EB7  1303               	bcf	3,6	;RP1=0, select bank0
  9567  1EB8  0827               	movf	?___awmod,w
  9568  1EB9  0008               	return
  9569  1EBA                     __end_of_char_info_index_rand:	
  9570                           
  9571                           	psect	text32
  9572  10FE                     __ptext32:	
  9573 ;; *************** function _rand *****************
  9574 ;; Defined at:
  9575 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  9576 ;; Parameters:    Size  Location     Type
  9577 ;;		None
  9578 ;; Auto vars:     Size  Location     Type
  9579 ;;		None
  9580 ;; Return value:  Size  Location     Type
  9581 ;;                  2    0[BANK0 ] int 
  9582 ;; Registers used:
  9583 ;;		wreg, status,2, status,0, pclath, cstack
  9584 ;; Tracked objects:
  9585 ;;		On entry : 0/0
  9586 ;;		On exit  : 0/0
  9587 ;;		Unchanged: 0/0
  9588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9589 ;;      Params:         0       2       0       0       0
  9590 ;;      Locals:         0       0       0       0       0
  9591 ;;      Temps:          0       5       0       0       0
  9592 ;;      Totals:         0       7       0       0       0
  9593 ;;Total ram usage:        7 bytes
  9594 ;; Hardware stack levels used:    1
  9595 ;; Hardware stack levels required when called:    1
  9596 ;; This function calls:
  9597 ;;		___lmul
  9598 ;; This function is called by:
  9599 ;;		_char_info_index_rand
  9600 ;; This function uses a non-reentrant model
  9601 ;;
  9602                           
  9603                           
  9604                           ;psect for function _rand
  9605  10FE                     _rand:	
  9606                           
  9607                           ;incstack = 0
  9608                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  9609  10FE  1283               	bcf	3,5	;RP0=0, select bank0
  9610  10FF  1303               	bcf	3,6	;RP1=0, select bank0
  9611  1100  0862               	movf	_randx+3,w
  9612  1101  00F3               	movwf	___lmul@multiplier+3
  9613  1102  0861               	movf	_randx+2,w
  9614  1103  00F2               	movwf	___lmul@multiplier+2
  9615  1104  0860               	movf	_randx+1,w
  9616  1105  00F1               	movwf	___lmul@multiplier+1
  9617  1106  085F               	movf	_randx,w
  9618  1107  00F0               	movwf	___lmul@multiplier
  9619  1108  3041               	movlw	65
  9620  1109  00F7               	movwf	___lmul@multiplicand+3
  9621  110A  30C6               	movlw	198
  9622  110B  00F6               	movwf	___lmul@multiplicand+2
  9623  110C  304E               	movlw	78
  9624  110D  00F5               	movwf	___lmul@multiplicand+1
  9625  110E  306D               	movlw	109
  9626  110F  00F4               	movwf	___lmul@multiplicand
  9627  1110  160A  118A  2038  160A  118A  	fcall	___lmul
  9628  1115  0873               	movf	?___lmul+3,w
  9629  1116  1283               	bcf	3,5	;RP0=0, select bank0
  9630  1117  1303               	bcf	3,6	;RP1=0, select bank0
  9631  1118  00E2               	movwf	_randx+3
  9632  1119  0872               	movf	?___lmul+2,w
  9633  111A  00E1               	movwf	_randx+2
  9634  111B  0871               	movf	?___lmul+1,w
  9635  111C  00E0               	movwf	_randx+1
  9636  111D  0870               	movf	?___lmul,w
  9637  111E  00DF               	movwf	_randx
  9638  111F  3039               	movlw	57
  9639  1120  07DF               	addwf	_randx,f
  9640  1121  3030               	movlw	48
  9641  1122  1803               	skipnc
  9642  1123  3031               	movlw	49
  9643  1124  07E0               	addwf	_randx+1,f
  9644  1125  3000               	movlw	0
  9645  1126  1803               	skipnc
  9646  1127  3001               	movlw	1
  9647  1128  07E1               	addwf	_randx+2,f
  9648  1129  3000               	movlw	0
  9649  112A  1803               	skipnc
  9650  112B  3001               	movlw	1
  9651  112C  07E2               	addwf	_randx+3,f
  9652  112D  085F               	movf	_randx,w
  9653  112E  00A2               	movwf	??_rand
  9654  112F  0860               	movf	_randx+1,w
  9655  1130  00A3               	movwf	??_rand+1
  9656  1131  0861               	movf	_randx+2,w
  9657  1132  00A4               	movwf	??_rand+2
  9658  1133  0862               	movf	_randx+3,w
  9659  1134  00A5               	movwf	??_rand+3
  9660  1135  3010               	movlw	16
  9661  1136  00A6               	movwf	??_rand+4
  9662  1137                     u3785:	
  9663  1137  0D25               	rlf	??_rand+3,w
  9664  1138  0CA5               	rrf	??_rand+3,f
  9665  1139  0CA4               	rrf	??_rand+2,f
  9666  113A  0CA3               	rrf	??_rand+1,f
  9667  113B  0CA2               	rrf	??_rand,f
  9668  113C  0BA6               	decfsz	??_rand+4,f
  9669  113D  2937               	goto	u3785
  9670  113E  30FF               	movlw	255
  9671  113F  0522               	andwf	??_rand,w
  9672  1140  00A0               	movwf	?_rand
  9673  1141  307F               	movlw	127
  9674  1142  0523               	andwf	??_rand+1,w
  9675  1143  00A1               	movwf	?_rand+1
  9676  1144  0008               	return
  9677  1145                     __end_of_rand:	
  9678                           
  9679                           	psect	text33
  9680  1038                     __ptext33:	
  9681 ;; *************** function ___lmul *****************
  9682 ;; Defined at:
  9683 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  9684 ;; Parameters:    Size  Location     Type
  9685 ;;  multiplier      4    0[COMMON] unsigned long 
  9686 ;;  multiplicand    4    4[COMMON] unsigned long 
  9687 ;; Auto vars:     Size  Location     Type
  9688 ;;  product         4    9[COMMON] unsigned long 
  9689 ;; Return value:  Size  Location     Type
  9690 ;;                  4    0[COMMON] unsigned long 
  9691 ;; Registers used:
  9692 ;;		wreg, status,2, status,0
  9693 ;; Tracked objects:
  9694 ;;		On entry : 0/0
  9695 ;;		On exit  : 0/0
  9696 ;;		Unchanged: 0/0
  9697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9698 ;;      Params:         8       0       0       0       0
  9699 ;;      Locals:         4       0       0       0       0
  9700 ;;      Temps:          1       0       0       0       0
  9701 ;;      Totals:        13       0       0       0       0
  9702 ;;Total ram usage:       13 bytes
  9703 ;; Hardware stack levels used:    1
  9704 ;; This function calls:
  9705 ;;		Nothing
  9706 ;; This function is called by:
  9707 ;;		_rand
  9708 ;; This function uses a non-reentrant model
  9709 ;;
  9710                           
  9711                           
  9712                           ;psect for function ___lmul
  9713  1038                     ___lmul:	
  9714                           
  9715                           ;incstack = 0
  9716                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9717  1038  3000               	movlw	0
  9718  1039  00FC               	movwf	___lmul@product+3
  9719  103A  3000               	movlw	0
  9720  103B  00FB               	movwf	___lmul@product+2
  9721  103C  3000               	movlw	0
  9722  103D  00FA               	movwf	___lmul@product+1
  9723  103E  3000               	movlw	0
  9724  103F  00F9               	movwf	___lmul@product
  9725  1040                     l2820:	
  9726  1040  1C70               	btfss	___lmul@multiplier,0
  9727  1041  2856               	goto	l2824
  9728  1042  0874               	movf	___lmul@multiplicand,w
  9729  1043  07F9               	addwf	___lmul@product,f
  9730  1044  0875               	movf	___lmul@multiplicand+1,w
  9731  1045  1103               	clrz
  9732  1046  1803               	skipnc
  9733  1047  3E01               	addlw	1
  9734  1048  1D03               	btfss	3,2
  9735  1049  07FA               	addwf	___lmul@product+1,f
  9736  104A  0876               	movf	___lmul@multiplicand+2,w
  9737  104B  1103               	clrz
  9738  104C  1803               	skipnc
  9739  104D  3E01               	addlw	1
  9740  104E  1D03               	btfss	3,2
  9741  104F  07FB               	addwf	___lmul@product+2,f
  9742  1050  0877               	movf	___lmul@multiplicand+3,w
  9743  1051  1103               	clrz
  9744  1052  1803               	skipnc
  9745  1053  3E01               	addlw	1
  9746  1054  1D03               	btfss	3,2
  9747  1055  07FC               	addwf	___lmul@product+3,f
  9748  1056                     l2824:	
  9749  1056  3001               	movlw	1
  9750  1057  00F8               	movwf	??___lmul
  9751  1058                     u3255:	
  9752  1058  1003               	clrc
  9753  1059  0DF4               	rlf	___lmul@multiplicand,f
  9754  105A  0DF5               	rlf	___lmul@multiplicand+1,f
  9755  105B  0DF6               	rlf	___lmul@multiplicand+2,f
  9756  105C  0DF7               	rlf	___lmul@multiplicand+3,f
  9757  105D  0BF8               	decfsz	??___lmul,f
  9758  105E  2858               	goto	u3255
  9759  105F  3001               	movlw	1
  9760  1060                     u3265:	
  9761  1060  1003               	clrc
  9762  1061  0CF3               	rrf	___lmul@multiplier+3,f
  9763  1062  0CF2               	rrf	___lmul@multiplier+2,f
  9764  1063  0CF1               	rrf	___lmul@multiplier+1,f
  9765  1064  0CF0               	rrf	___lmul@multiplier,f
  9766  1065  3EFF               	addlw	-1
  9767  1066  1D03               	skipz
  9768  1067  2860               	goto	u3265
  9769  1068  0873               	movf	___lmul@multiplier+3,w
  9770  1069  0472               	iorwf	___lmul@multiplier+2,w
  9771  106A  0471               	iorwf	___lmul@multiplier+1,w
  9772  106B  0470               	iorwf	___lmul@multiplier,w
  9773  106C  1D03               	skipz
  9774  106D  2840               	goto	l2820
  9775  106E  087C               	movf	___lmul@product+3,w
  9776  106F  00F3               	movwf	?___lmul+3
  9777  1070  087B               	movf	___lmul@product+2,w
  9778  1071  00F2               	movwf	?___lmul+2
  9779  1072  087A               	movf	___lmul@product+1,w
  9780  1073  00F1               	movwf	?___lmul+1
  9781  1074  0879               	movf	___lmul@product,w
  9782  1075  00F0               	movwf	?___lmul
  9783  1076  0008               	return
  9784  1077                     __end_of___lmul:	
  9785                           
  9786                           	psect	text34
  9787  118D                     __ptext34:	
  9788 ;; *************** function ___awmod *****************
  9789 ;; Defined at:
  9790 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  9791 ;; Parameters:    Size  Location     Type
  9792 ;;  divisor         2    7[BANK0 ] int 
  9793 ;;  dividend        2    9[BANK0 ] int 
  9794 ;; Auto vars:     Size  Location     Type
  9795 ;;  sign            1   12[BANK0 ] unsigned char 
  9796 ;;  counter         1   11[BANK0 ] unsigned char 
  9797 ;; Return value:  Size  Location     Type
  9798 ;;                  2    7[BANK0 ] int 
  9799 ;; Registers used:
  9800 ;;		wreg, status,2, status,0
  9801 ;; Tracked objects:
  9802 ;;		On entry : 0/0
  9803 ;;		On exit  : 0/0
  9804 ;;		Unchanged: 0/0
  9805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9806 ;;      Params:         0       4       0       0       0
  9807 ;;      Locals:         0       2       0       0       0
  9808 ;;      Temps:          1       0       0       0       0
  9809 ;;      Totals:         1       6       0       0       0
  9810 ;;Total ram usage:        7 bytes
  9811 ;; Hardware stack levels used:    1
  9812 ;; This function calls:
  9813 ;;		Nothing
  9814 ;; This function is called by:
  9815 ;;		_char_info_index_rand
  9816 ;;		_USARTWriteInt
  9817 ;; This function uses a non-reentrant model
  9818 ;;
  9819                           
  9820                           
  9821                           ;psect for function ___awmod
  9822  118D                     ___awmod:	
  9823                           
  9824                           ;incstack = 0
  9825                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  9826  118D  1283               	bcf	3,5	;RP0=0, select bank0
  9827  118E  1303               	bcf	3,6	;RP1=0, select bank0
  9828  118F  01AC               	clrf	___awmod@sign
  9829  1190  1FAA               	btfss	___awmod@dividend+1,7
  9830  1191  2999               	goto	l3240
  9831  1192  09A9               	comf	___awmod@dividend,f
  9832  1193  09AA               	comf	___awmod@dividend+1,f
  9833  1194  0AA9               	incf	___awmod@dividend,f
  9834  1195  1903               	skipnz
  9835  1196  0AAA               	incf	___awmod@dividend+1,f
  9836  1197  01AC               	clrf	___awmod@sign
  9837  1198  0AAC               	incf	___awmod@sign,f
  9838  1199                     l3240:	
  9839  1199  1FA8               	btfss	___awmod@divisor+1,7
  9840  119A  29A0               	goto	l3244
  9841  119B  09A7               	comf	___awmod@divisor,f
  9842  119C  09A8               	comf	___awmod@divisor+1,f
  9843  119D  0AA7               	incf	___awmod@divisor,f
  9844  119E  1903               	skipnz
  9845  119F  0AA8               	incf	___awmod@divisor+1,f
  9846  11A0                     l3244:	
  9847  11A0  0827               	movf	___awmod@divisor,w
  9848  11A1  0428               	iorwf	___awmod@divisor+1,w
  9849  11A2  1903               	btfsc	3,2
  9850  11A3  29CD               	goto	l3262
  9851  11A4  01AB               	clrf	___awmod@counter
  9852  11A5  0AAB               	incf	___awmod@counter,f
  9853  11A6                     l3252:	
  9854  11A6  1BA8               	btfsc	___awmod@divisor+1,7
  9855  11A7  29B4               	goto	l3254
  9856  11A8  3001               	movlw	1
  9857  11A9                     u4295:	
  9858  11A9  1003               	clrc
  9859  11AA  0DA7               	rlf	___awmod@divisor,f
  9860  11AB  0DA8               	rlf	___awmod@divisor+1,f
  9861  11AC  3EFF               	addlw	-1
  9862  11AD  1D03               	skipz
  9863  11AE  29A9               	goto	u4295
  9864  11AF  3001               	movlw	1
  9865  11B0  00FD               	movwf	??___awmod
  9866  11B1  087D               	movf	??___awmod,w
  9867  11B2  07AB               	addwf	___awmod@counter,f
  9868  11B3  29A6               	goto	l3252
  9869  11B4                     l3254:	
  9870  11B4  0828               	movf	___awmod@divisor+1,w
  9871  11B5  022A               	subwf	___awmod@dividend+1,w
  9872  11B6  1D03               	skipz
  9873  11B7  29BA               	goto	u4315
  9874  11B8  0827               	movf	___awmod@divisor,w
  9875  11B9  0229               	subwf	___awmod@dividend,w
  9876  11BA                     u4315:	
  9877  11BA  1C03               	skipc
  9878  11BB  29C2               	goto	l3258
  9879  11BC  0827               	movf	___awmod@divisor,w
  9880  11BD  02A9               	subwf	___awmod@dividend,f
  9881  11BE  0828               	movf	___awmod@divisor+1,w
  9882  11BF  1C03               	skipc
  9883  11C0  03AA               	decf	___awmod@dividend+1,f
  9884  11C1  02AA               	subwf	___awmod@dividend+1,f
  9885  11C2                     l3258:	
  9886  11C2  3001               	movlw	1
  9887  11C3                     u4325:	
  9888  11C3  1003               	clrc
  9889  11C4  0CA8               	rrf	___awmod@divisor+1,f
  9890  11C5  0CA7               	rrf	___awmod@divisor,f
  9891  11C6  3EFF               	addlw	-1
  9892  11C7  1D03               	skipz
  9893  11C8  29C3               	goto	u4325
  9894  11C9  3001               	movlw	1
  9895  11CA  02AB               	subwf	___awmod@counter,f
  9896  11CB  1D03               	btfss	3,2
  9897  11CC  29B4               	goto	l3254
  9898  11CD                     l3262:	
  9899  11CD  082C               	movf	___awmod@sign,w
  9900  11CE  1903               	btfsc	3,2
  9901  11CF  29D5               	goto	l3266
  9902  11D0  09A9               	comf	___awmod@dividend,f
  9903  11D1  09AA               	comf	___awmod@dividend+1,f
  9904  11D2  0AA9               	incf	___awmod@dividend,f
  9905  11D3  1903               	skipnz
  9906  11D4  0AAA               	incf	___awmod@dividend+1,f
  9907  11D5                     l3266:	
  9908  11D5  082A               	movf	___awmod@dividend+1,w
  9909  11D6  00A8               	movwf	?___awmod+1
  9910  11D7  0829               	movf	___awmod@dividend,w
  9911  11D8  00A7               	movwf	?___awmod
  9912  11D9  0008               	return
  9913  11DA                     __end_of___awmod:	
  9914                           
  9915                           	psect	text35
  9916  10B7                     __ptext35:	
  9917 ;; *************** function _USARTInit *****************
  9918 ;; Defined at:
  9919 ;;		line 31 in file "usart_pic16.c"
  9920 ;; Parameters:    Size  Location     Type
  9921 ;;  baud_rate       2    0[COMMON] unsigned int 
  9922 ;; Auto vars:     Size  Location     Type
  9923 ;;		None
  9924 ;; Return value:  Size  Location     Type
  9925 ;;                  1    wreg      void 
  9926 ;; Registers used:
  9927 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9928 ;; Tracked objects:
  9929 ;;		On entry : 0/0
  9930 ;;		On exit  : 0/0
  9931 ;;		Unchanged: 0/0
  9932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9933 ;;      Params:         2       0       0       0       0
  9934 ;;      Locals:         0       0       0       0       0
  9935 ;;      Temps:          1       0       0       0       0
  9936 ;;      Totals:         3       0       0       0       0
  9937 ;;Total ram usage:        3 bytes
  9938 ;; Hardware stack levels used:    1
  9939 ;; This function calls:
  9940 ;;		Nothing
  9941 ;; This function is called by:
  9942 ;;		_main
  9943 ;; This function uses a non-reentrant model
  9944 ;;
  9945                           
  9946                           
  9947                           ;psect for function _USARTInit
  9948  10B7                     _USARTInit:	
  9949                           
  9950                           ;usart_pic16.c: 33: UQFront = UQEnd = -1;
  9951                           
  9952                           ;incstack = 0
  9953                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  9954  10B7  30FF               	movlw	255
  9955  10B8  1283               	bcf	3,5	;RP0=0, select bank0
  9956  10B9  1303               	bcf	3,6	;RP1=0, select bank0
  9957  10BA  00E7               	movwf	_UQEnd	;volatile
  9958  10BB  00F2               	movwf	??_USARTInit
  9959  10BC  0872               	movf	??_USARTInit,w
  9960  10BD  00E8               	movwf	_UQFront	;volatile
  9961                           
  9962                           ;usart_pic16.c: 36: switch (baud_rate) {
  9963  10BE  28CA               	goto	l3282
  9964  10BF                     l3272:	
  9965                           ;usart_pic16.c: 37: case 9600:
  9966                           
  9967                           
  9968                           ;usart_pic16.c: 38: SPBRG = 129;
  9969  10BF  3081               	movlw	129
  9970  10C0  28C6               	goto	L21
  9971  10C1                     l3274:	
  9972                           ;usart_pic16.c: 40: case 19200:
  9973                           
  9974                           ;usart_pic16.c: 39: break;
  9975                           
  9976                           
  9977                           ;usart_pic16.c: 41: SPBRG = 64;
  9978  10C1  3040               	movlw	64
  9979  10C2  28C6               	goto	L21
  9980  10C3                     l3276:	
  9981                           ;usart_pic16.c: 43: case 28800:
  9982                           
  9983                           ;usart_pic16.c: 42: break;
  9984                           
  9985                           
  9986                           ;usart_pic16.c: 44: SPBRG = 42;
  9987  10C3  302A               	movlw	42
  9988  10C4  28C6               	goto	L21
  9989  10C5                     l3278:	
  9990                           ;usart_pic16.c: 46: case 33600:
  9991                           
  9992                           ;usart_pic16.c: 45: break;
  9993                           
  9994                           
  9995                           ;usart_pic16.c: 47: SPBRG = 36;
  9996  10C5  3024               	movlw	36
  9997  10C6                     L21:	
  9998  10C6  1683               	bsf	3,5	;RP0=1, select bank1
  9999  10C7  1303               	bcf	3,6	;RP1=0, select bank1
 10000  10C8  0099               	movwf	25	;volatile
 10001                           
 10002                           ;usart_pic16.c: 49: }
 10003                           
 10004                           ;usart_pic16.c: 48: break;
 10005  10C9  28EC               	goto	l29
 10006  10CA                     l3282:	
 10007                           
 10008                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 10009                           ; Switch size 1, requested type "space"
 10010                           ; Number of cases is 4, Range of values is 37 to 131
 10011                           ; switch strategies available:
 10012                           ; Name         Instructions Cycles
 10013                           ; simple_byte           13     7 (average)
 10014                           ; jumptable            263     9 (fixed)
 10015                           ;	Chosen strategy is simple_byte
 10016  10CA  0871               	movf	USARTInit@baud_rate+1,w
 10017  10CB  3A25               	xorlw	37	; case 37
 10018  10CC  1903               	skipnz
 10019  10CD  28D8               	goto	l4396
 10020  10CE  3A6E               	xorlw	110	; case 75
 10021  10CF  1903               	skipnz
 10022  10D0  28DD               	goto	l4398
 10023  10D1  3A3B               	xorlw	59	; case 112
 10024  10D2  1903               	skipnz
 10025  10D3  28E2               	goto	l4400
 10026  10D4  3AF3               	xorlw	243	; case 131
 10027  10D5  1903               	skipnz
 10028  10D6  28E7               	goto	l4402
 10029  10D7  28EC               	goto	l29
 10030  10D8                     l4396:	
 10031                           
 10032                           ; Switch size 1, requested type "space"
 10033                           ; Number of cases is 1, Range of values is 128 to 128
 10034                           ; switch strategies available:
 10035                           ; Name         Instructions Cycles
 10036                           ; simple_byte            4     3 (average)
 10037                           ; direct_byte           14    11 (fixed)
 10038                           ; jumptable            263     9 (fixed)
 10039                           ;	Chosen strategy is simple_byte
 10040  10D8  0870               	movf	USARTInit@baud_rate,w
 10041  10D9  3A80               	xorlw	128	; case 128
 10042  10DA  1903               	skipnz
 10043  10DB  28BF               	goto	l3272
 10044  10DC  28EC               	goto	l29
 10045  10DD                     l4398:	
 10046                           
 10047                           ; Switch size 1, requested type "space"
 10048                           ; Number of cases is 1, Range of values is 0 to 0
 10049                           ; switch strategies available:
 10050                           ; Name         Instructions Cycles
 10051                           ; simple_byte            4     3 (average)
 10052                           ; direct_byte           11     8 (fixed)
 10053                           ; jumptable            260     6 (fixed)
 10054                           ;	Chosen strategy is simple_byte
 10055  10DD  0870               	movf	USARTInit@baud_rate,w
 10056  10DE  3A00               	xorlw	0	; case 0
 10057  10DF  1903               	skipnz
 10058  10E0  28C1               	goto	l3274
 10059  10E1  28EC               	goto	l29
 10060  10E2                     l4400:	
 10061                           
 10062                           ; Switch size 1, requested type "space"
 10063                           ; Number of cases is 1, Range of values is 128 to 128
 10064                           ; switch strategies available:
 10065                           ; Name         Instructions Cycles
 10066                           ; simple_byte            4     3 (average)
 10067                           ; direct_byte           14    11 (fixed)
 10068                           ; jumptable            263     9 (fixed)
 10069                           ;	Chosen strategy is simple_byte
 10070  10E2  0870               	movf	USARTInit@baud_rate,w
 10071  10E3  3A80               	xorlw	128	; case 128
 10072  10E4  1903               	skipnz
 10073  10E5  28C3               	goto	l3276
 10074  10E6  28EC               	goto	l29
 10075  10E7                     l4402:	
 10076                           
 10077                           ; Switch size 1, requested type "space"
 10078                           ; Number of cases is 1, Range of values is 64 to 64
 10079                           ; switch strategies available:
 10080                           ; Name         Instructions Cycles
 10081                           ; simple_byte            4     3 (average)
 10082                           ; direct_byte           14    11 (fixed)
 10083                           ; jumptable            263     9 (fixed)
 10084                           ;	Chosen strategy is simple_byte
 10085  10E7  0870               	movf	USARTInit@baud_rate,w
 10086  10E8  3A40               	xorlw	64	; case 64
 10087  10E9  1903               	skipnz
 10088  10EA  28C5               	goto	l3278
 10089  10EB  28EC               	goto	l29
 10090  10EC                     l29:	
 10091                           
 10092                           ;usart_pic16.c: 52: TXSTAbits.TX9 = 0;
 10093  10EC  1683               	bsf	3,5	;RP0=1, select bank1
 10094  10ED  1303               	bcf	3,6	;RP1=0, select bank1
 10095  10EE  1318               	bcf	24,6	;volatile
 10096                           
 10097                           ;usart_pic16.c: 53: TXSTAbits.TXEN = 1;
 10098  10EF  1698               	bsf	24,5	;volatile
 10099                           
 10100                           ;usart_pic16.c: 54: TXSTAbits.SYNC = 0;
 10101  10F0  1218               	bcf	24,4	;volatile
 10102                           
 10103                           ;usart_pic16.c: 55: TXSTAbits.BRGH = 1;
 10104  10F1  1518               	bsf	24,2	;volatile
 10105                           
 10106                           ;usart_pic16.c: 58: RCSTAbits.SPEN = 1;
 10107  10F2  1283               	bcf	3,5	;RP0=0, select bank0
 10108  10F3  1303               	bcf	3,6	;RP1=0, select bank0
 10109  10F4  1798               	bsf	24,7	;volatile
 10110                           
 10111                           ;usart_pic16.c: 59: RCSTAbits.RX9 = 0;
 10112  10F5  1318               	bcf	24,6	;volatile
 10113                           
 10114                           ;usart_pic16.c: 60: RCSTAbits.CREN = 1;
 10115  10F6  1618               	bsf	24,4	;volatile
 10116                           
 10117                           ;usart_pic16.c: 61: RCSTAbits.ADDEN = 0;
 10118  10F7  1198               	bcf	24,3	;volatile
 10119                           
 10120                           ;usart_pic16.c: 64: RCIE = 1;
 10121  10F8  1683               	bsf	3,5	;RP0=1, select bank1
 10122  10F9  1303               	bcf	3,6	;RP1=0, select bank1
 10123  10FA  168C               	bsf	12,5	;volatile
 10124                           
 10125                           ;usart_pic16.c: 65: PEIE = 1;
 10126  10FB  170B               	bsf	11,6	;volatile
 10127                           
 10128                           ;usart_pic16.c: 67: (GIE = 1);
 10129  10FC  178B               	bsf	11,7	;volatile
 10130  10FD  0008               	return
 10131  10FE                     __end_of_USARTInit:	
 10132                           
 10133                           	psect	text36
 10134  1E8E                     __ptext36:	
 10135 ;; *************** function _Clear_Matrix *****************
 10136 ;; Defined at:
 10137 ;;		line 551 in file "teris_16f886.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;		None
 10140 ;; Auto vars:     Size  Location     Type
 10141 ;;		None
 10142 ;; Return value:  Size  Location     Type
 10143 ;;                  1    wreg      void 
 10144 ;; Registers used:
 10145 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10151 ;;      Params:         0       0       0       0       0
 10152 ;;      Locals:         0       0       0       0       0
 10153 ;;      Temps:          0       0       0       0       0
 10154 ;;      Totals:         0       0       0       0       0
 10155 ;;Total ram usage:        0 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; Hardware stack levels required when called:    5
 10158 ;; This function calls:
 10159 ;;		_memset
 10160 ;;		_printf_Screen
 10161 ;; This function is called by:
 10162 ;;		_main
 10163 ;; This function uses a non-reentrant model
 10164 ;;
 10165                           
 10166                           
 10167                           ;psect for function _Clear_Matrix
 10168  1E8E                     _Clear_Matrix:	
 10169                           
 10170                           ;teris_16f886.c: 553: memset(&g_matrix88, 0, sizeof(MATRIX88));
 10171                           
 10172                           ;incstack = 0
 10173                           ; Regs used in _Clear_Matrix: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10174  1E8E  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
 10175  1E8F  00F0               	movwf	memset@p1
 10176  1E90  3001               	movlw	1
 10177  1E91  00F1               	movwf	memset@p1+1
 10178  1E92  3000               	movlw	0
 10179  1E93  00F2               	movwf	memset@c
 10180  1E94  00F3               	movwf	memset@c+1
 10181  1E95  3040               	movlw	64
 10182  1E96  00F4               	movwf	memset@n
 10183  1E97  3000               	movlw	0
 10184  1E98  00F5               	movwf	memset@n+1
 10185  1E99  160A  158A  26BA  160A  158A  	fcall	_memset
 10186                           
 10187                           ;teris_16f886.c: 554: printf_Screen();
 10188  1E9E  120A  118A  2004   	fcall	_printf_Screen
 10189  1EA1  0008               	return
 10190  1EA2                     __end_of_Clear_Matrix:	
 10191                           
 10192                           	psect	text37
 10193  0004                     __ptext37:	
 10194 ;; *************** function _printf_Screen *****************
 10195 ;; Defined at:
 10196 ;;		line 542 in file "teris_16f886.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;		None
 10199 ;; Auto vars:     Size  Location     Type
 10200 ;;		None
 10201 ;; Return value:  Size  Location     Type
 10202 ;;                  1    wreg      void 
 10203 ;; Registers used:
 10204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10205 ;; Tracked objects:
 10206 ;;		On entry : 0/0
 10207 ;;		On exit  : 0/0
 10208 ;;		Unchanged: 0/0
 10209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10210 ;;      Params:         0       0       0       0       0
 10211 ;;      Locals:         0       0       0       0       0
 10212 ;;      Temps:          0       0       0       0       0
 10213 ;;      Totals:         0       0       0       0       0
 10214 ;;Total ram usage:        0 bytes
 10215 ;; Hardware stack levels used:    1
 10216 ;; Hardware stack levels required when called:    4
 10217 ;; This function calls:
 10218 ;;		_printf_MATRIX88
 10219 ;; This function is called by:
 10220 ;;		_Clear_Matrix
 10221 ;;		_main
 10222 ;; This function uses a non-reentrant model
 10223 ;;
 10224                           
 10225                           
 10226                           ;psect for function _printf_Screen
 10227  0004                     _printf_Screen:	
 10228                           
 10229                           ;teris_16f886.c: 544: printf_MATRIX88(&g_matrix88);
 10230                           
 10231                           ;incstack = 0
 10232                           ; Regs used in _printf_Screen: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10233  0004  3010               	movlw	(low (_g_matrix88| (0+256)))& (0+255)
 10234  0005  160A  158A  267C   	fcall	_printf_MATRIX88
 10235  0008  0008               	return
 10236  0009                     __end_of_printf_Screen:	
 10237                           
 10238                           	psect	text38
 10239  1E7C                     __ptext38:	
 10240 ;; *************** function _printf_MATRIX88 *****************
 10241 ;; Defined at:
 10242 ;;		line 536 in file "teris_16f886.c"
 10243 ;; Parameters:    Size  Location     Type
 10244 ;;  matrix88        1    wreg     PTR const struct .
 10245 ;;		 -> g_matrix88(64), 
 10246 ;; Auto vars:     Size  Location     Type
 10247 ;;  matrix88        1    0[BANK0 ] PTR const struct .
 10248 ;;		 -> g_matrix88(64), 
 10249 ;;  matrix7219      8    1[BANK0 ] struct .
 10250 ;; Return value:  Size  Location     Type
 10251 ;;                  1    wreg      void 
 10252 ;; Registers used:
 10253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10254 ;; Tracked objects:
 10255 ;;		On entry : 0/0
 10256 ;;		On exit  : 0/0
 10257 ;;		Unchanged: 0/0
 10258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10259 ;;      Params:         0       0       0       0       0
 10260 ;;      Locals:         0       9       0       0       0
 10261 ;;      Temps:          1       0       0       0       0
 10262 ;;      Totals:         1       9       0       0       0
 10263 ;;Total ram usage:       10 bytes
 10264 ;; Hardware stack levels used:    1
 10265 ;; Hardware stack levels required when called:    3
 10266 ;; This function calls:
 10267 ;;		_MATRIX88_to_MATRIX7219
 10268 ;;		_printf_MATRIX7219
 10269 ;; This function is called by:
 10270 ;;		_printf_Screen
 10271 ;; This function uses a non-reentrant model
 10272 ;;
 10273                           
 10274                           
 10275                           ;psect for function _printf_MATRIX88
 10276  1E7C                     _printf_MATRIX88:	
 10277                           
 10278                           ;incstack = 0
 10279                           ; Regs used in _printf_MATRIX88: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10280                           ;printf_MATRIX88@matrix88 stored from wreg
 10281  1E7C  1283               	bcf	3,5	;RP0=0, select bank0
 10282  1E7D  1303               	bcf	3,6	;RP1=0, select bank0
 10283  1E7E  00A0               	movwf	printf_MATRIX88@matrix88
 10284                           
 10285                           ;teris_16f886.c: 538: MATRIX7219 matrix7219;
 10286                           ;teris_16f886.c: 539: MATRIX88_to_MATRIX7219(matrix88, &matrix7219);
 10287  1E7F  3021               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
 10288  1E80  00F8               	movwf	??_printf_MATRIX88
 10289  1E81  0878               	movf	??_printf_MATRIX88,w
 10290  1E82  00F0               	movwf	MATRIX88_to_MATRIX7219@matrix7219
 10291  1E83  0820               	movf	printf_MATRIX88@matrix88,w
 10292  1E84  160A  118A  2145  160A  158A  	fcall	_MATRIX88_to_MATRIX7219
 10293                           
 10294                           ;teris_16f886.c: 540: printf_MATRIX7219(&matrix7219);
 10295  1E89  3021               	movlw	(low (printf_MATRIX88@matrix7219| 0))& (0+255)
 10296  1E8A  160A  158A  26F0   	fcall	_printf_MATRIX7219
 10297  1E8D  0008               	return
 10298  1E8E                     __end_of_printf_MATRIX88:	
 10299                           
 10300                           	psect	text39
 10301  1EF0                     __ptext39:	
 10302 ;; *************** function _printf_MATRIX7219 *****************
 10303 ;; Defined at:
 10304 ;;		line 468 in file "teris_16f886.c"
 10305 ;; Parameters:    Size  Location     Type
 10306 ;;  matrix          1    wreg     PTR const struct .
 10307 ;;		 -> printf_MATRIX88@matrix7219(8), 
 10308 ;; Auto vars:     Size  Location     Type
 10309 ;;  matrix          1    4[COMMON] PTR const struct .
 10310 ;;		 -> printf_MATRIX88@matrix7219(8), 
 10311 ;;  col             1    5[COMMON] unsigned char 
 10312 ;; Return value:  Size  Location     Type
 10313 ;;                  1    wreg      void 
 10314 ;; Registers used:
 10315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10316 ;; Tracked objects:
 10317 ;;		On entry : 0/0
 10318 ;;		On exit  : 0/0
 10319 ;;		Unchanged: 0/0
 10320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10321 ;;      Params:         0       0       0       0       0
 10322 ;;      Locals:         2       0       0       0       0
 10323 ;;      Temps:          2       0       0       0       0
 10324 ;;      Totals:         4       0       0       0       0
 10325 ;;Total ram usage:        4 bytes
 10326 ;; Hardware stack levels used:    1
 10327 ;; Hardware stack levels required when called:    2
 10328 ;; This function calls:
 10329 ;;		_Write_Byte
 10330 ;; This function is called by:
 10331 ;;		_printf_MATRIX88
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           
 10336                           ;psect for function _printf_MATRIX7219
 10337  1EF0                     _printf_MATRIX7219:	
 10338                           
 10339                           ;incstack = 0
 10340                           ; Regs used in _printf_MATRIX7219: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10341                           ;printf_MATRIX7219@matrix stored from wreg
 10342  1EF0  00F4               	movwf	printf_MATRIX7219@matrix
 10343                           
 10344                           ;teris_16f886.c: 470: uint8_t col;
 10345                           ;teris_16f886.c: 472: for (col = 0; col < 8; col++)
 10346  1EF1  01F5               	clrf	printf_MATRIX7219@col
 10347  1EF2                     L22:	
 10348  1EF2  3008               	movlw	8
 10349  1EF3  0275               	subwf	printf_MATRIX7219@col,w
 10350  1EF4  1803               	btfsc	3,0
 10351  1EF5  0008               	return
 10352                           
 10353                           ;teris_16f886.c: 473: {
 10354                           ;teris_16f886.c: 474: Write_Byte(col + 1, matrix->col[col]);
 10355  1EF6  0875               	movf	printf_MATRIX7219@col,w
 10356  1EF7  0774               	addwf	printf_MATRIX7219@matrix,w
 10357  1EF8  00F2               	movwf	??_printf_MATRIX7219
 10358  1EF9  0872               	movf	??_printf_MATRIX7219,w
 10359  1EFA  0084               	movwf	4
 10360  1EFB  1383               	bcf	3,7	;select IRP bank0
 10361  1EFC  0800               	movf	0,w
 10362  1EFD  00F3               	movwf	??_printf_MATRIX7219+1
 10363  1EFE  0873               	movf	??_printf_MATRIX7219+1,w
 10364  1EFF  00F0               	movwf	Write_Byte@myValue
 10365  1F00  0875               	movf	printf_MATRIX7219@col,w
 10366  1F01  3E01               	addlw	1
 10367  1F02  160A  158A  266A  160A  158A  	fcall	_Write_Byte
 10368  1F07  3001               	movlw	1
 10369  1F08  00F2               	movwf	??_printf_MATRIX7219
 10370  1F09  0872               	movf	??_printf_MATRIX7219,w
 10371  1F0A  07F5               	addwf	printf_MATRIX7219@col,f
 10372  1F0B  2EF2               	goto	L22
 10373  1F0C                     __end_of_printf_MATRIX7219:	
 10374                           
 10375                           	psect	text40
 10376  1E6A                     __ptext40:	
 10377 ;; *************** function _Write_Byte *****************
 10378 ;; Defined at:
 10379 ;;		line 418 in file "teris_16f886.c"
 10380 ;; Parameters:    Size  Location     Type
 10381 ;;  myColumn        1    wreg     unsigned char 
 10382 ;;  myValue         1    0[COMMON] unsigned char 
 10383 ;; Auto vars:     Size  Location     Type
 10384 ;;  myColumn        1    1[COMMON] unsigned char 
 10385 ;; Return value:  Size  Location     Type
 10386 ;;                  1    wreg      void 
 10387 ;; Registers used:
 10388 ;;		wreg, status,2, status,0, pclath, cstack
 10389 ;; Tracked objects:
 10390 ;;		On entry : 0/0
 10391 ;;		On exit  : 0/0
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10394 ;;      Params:         1       0       0       0       0
 10395 ;;      Locals:         1       0       0       0       0
 10396 ;;      Temps:          0       0       0       0       0
 10397 ;;      Totals:         2       0       0       0       0
 10398 ;;Total ram usage:        2 bytes
 10399 ;; Hardware stack levels used:    1
 10400 ;; Hardware stack levels required when called:    1
 10401 ;; This function calls:
 10402 ;;		_SPI1_write
 10403 ;; This function is called by:
 10404 ;;		_printf_MATRIX7219
 10405 ;; This function uses a non-reentrant model
 10406 ;;
 10407                           
 10408                           
 10409                           ;psect for function _Write_Byte
 10410  1E6A                     _Write_Byte:	
 10411                           
 10412                           ;incstack = 0
 10413                           ; Regs used in _Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 10414                           ;Write_Byte@myColumn stored from wreg
 10415  1E6A  00F1               	movwf	Write_Byte@myColumn
 10416                           
 10417                           ;teris_16f886.c: 419: RA2 = 0;
 10418  1E6B  1283               	bcf	3,5	;RP0=0, select bank0
 10419  1E6C  1303               	bcf	3,6	;RP1=0, select bank0
 10420  1E6D  1105               	bcf	5,2	;volatile
 10421                           
 10422                           ;teris_16f886.c: 420: SPI1_write(myColumn);
 10423  1E6E  0871               	movf	Write_Byte@myColumn,w
 10424  1E6F  120A  118A  2003  160A  158A  	fcall	_SPI1_write
 10425                           
 10426                           ;teris_16f886.c: 421: SPI1_write(myValue);
 10427  1E74  0870               	movf	Write_Byte@myValue,w
 10428  1E75  120A  118A  2003   	fcall	_SPI1_write
 10429                           
 10430                           ;teris_16f886.c: 422: RA2 = 1;
 10431  1E78  1283               	bcf	3,5	;RP0=0, select bank0
 10432  1E79  1303               	bcf	3,6	;RP1=0, select bank0
 10433  1E7A  1505               	bsf	5,2	;volatile
 10434  1E7B  0008               	return
 10435  1E7C                     __end_of_Write_Byte:	
 10436                           
 10437                           	psect	text41
 10438  0003                     __ptext41:	
 10439 ;; *************** function _SPI1_write *****************
 10440 ;; Defined at:
 10441 ;;		line 360 in file "teris_16f886.c"
 10442 ;; Parameters:    Size  Location     Type
 10443 ;;  data            1    wreg     unsigned char 
 10444 ;; Auto vars:     Size  Location     Type
 10445 ;;  data            1    0[COMMON] unsigned char 
 10446 ;; Return value:  Size  Location     Type
 10447 ;;                  1    wreg      void 
 10448 ;; Registers used:
 10449 ;;		wreg
 10450 ;; Tracked objects:
 10451 ;;		On entry : 0/0
 10452 ;;		On exit  : 0/0
 10453 ;;		Unchanged: 0/0
 10454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10455 ;;      Params:         0       0       0       0       0
 10456 ;;      Locals:         0       0       0       0       0
 10457 ;;      Temps:          0       0       0       0       0
 10458 ;;      Totals:         0       0       0       0       0
 10459 ;;Total ram usage:        0 bytes
 10460 ;; Hardware stack levels used:    1
 10461 ;; This function calls:
 10462 ;;		Nothing
 10463 ;; This function is called by:
 10464 ;;		_Write_Byte
 10465 ;;		_max7219_init1
 10466 ;; This function uses a non-reentrant model
 10467 ;;
 10468                           
 10469                           
 10470                           ;psect for function _SPI1_write
 10471  0003                     _SPI1_write:	
 10472                           
 10473                           ;incstack = 0
 10474                           ; Regs used in _SPI1_write: [wreg]
 10475  0003  0008               	return
 10476  0004                     __end_of_SPI1_write:	
 10477                           
 10478                           	psect	text42
 10479  1145                     __ptext42:	
 10480 ;; *************** function _MATRIX88_to_MATRIX7219 *****************
 10481 ;; Defined at:
 10482 ;;		line 477 in file "teris_16f886.c"
 10483 ;; Parameters:    Size  Location     Type
 10484 ;;  matrix88        1    wreg     PTR const struct .
 10485 ;;		 -> g_matrix88(64), 
 10486 ;;  matrix7219      1    0[COMMON] PTR struct .
 10487 ;;		 -> printf_MATRIX88@matrix7219(8), 
 10488 ;; Auto vars:     Size  Location     Type
 10489 ;;  matrix88        1    4[COMMON] PTR const struct .
 10490 ;;		 -> g_matrix88(64), 
 10491 ;;  row             1    6[COMMON] unsigned char 
 10492 ;;  col             1    7[COMMON] unsigned char 
 10493 ;;  mask            1    5[COMMON] unsigned char 
 10494 ;; Return value:  Size  Location     Type
 10495 ;;                  1    wreg      void 
 10496 ;; Registers used:
 10497 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10498 ;; Tracked objects:
 10499 ;;		On entry : 0/0
 10500 ;;		On exit  : 0/0
 10501 ;;		Unchanged: 0/0
 10502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10503 ;;      Params:         1       0       0       0       0
 10504 ;;      Locals:         4       0       0       0       0
 10505 ;;      Temps:          3       0       0       0       0
 10506 ;;      Totals:         8       0       0       0       0
 10507 ;;Total ram usage:        8 bytes
 10508 ;; Hardware stack levels used:    1
 10509 ;; This function calls:
 10510 ;;		Nothing
 10511 ;; This function is called by:
 10512 ;;		_printf_MATRIX88
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           
 10517                           ;psect for function _MATRIX88_to_MATRIX7219
 10518  1145                     _MATRIX88_to_MATRIX7219:	
 10519                           
 10520                           ;incstack = 0
 10521                           ; Regs used in _MATRIX88_to_MATRIX7219: [wreg-fsr0h+status,2+status,0]
 10522                           ;MATRIX88_to_MATRIX7219@matrix88 stored from wreg
 10523  1145  00F4               	movwf	MATRIX88_to_MATRIX7219@matrix88
 10524                           
 10525                           ;teris_16f886.c: 479: uint8_t mask = 0x80;
 10526  1146  3080               	movlw	128
 10527  1147  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 10528  1148  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 10529  1149  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
 10530                           
 10531                           ;teris_16f886.c: 481: for(uint8_t col = 0; col < 8; col++)
 10532  114A  01F7               	clrf	MATRIX88_to_MATRIX7219@col
 10533  114B                     L23:	
 10534  114B  3008               	movlw	8
 10535  114C  0277               	subwf	MATRIX88_to_MATRIX7219@col,w
 10536  114D  1803               	btfsc	3,0
 10537  114E  0008               	return
 10538                           
 10539                           ;teris_16f886.c: 482: {
 10540                           ;teris_16f886.c: 483: mask = 0x80;
 10541  114F  3080               	movlw	128
 10542  1150  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 10543  1151  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 10544  1152  00F5               	movwf	MATRIX88_to_MATRIX7219@mask
 10545                           
 10546                           ;teris_16f886.c: 484: matrix7219->col[col] = 0;
 10547  1153  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 10548  1154  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
 10549  1155  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 10550  1156  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 10551  1157  0084               	movwf	4
 10552  1158  1383               	bcf	3,7	;select IRP bank0
 10553  1159  0180               	clrf	0
 10554                           
 10555                           ;teris_16f886.c: 485: for(uint8_t row = 0; row < 8; row++)
 10556  115A  01F6               	clrf	MATRIX88_to_MATRIX7219@row
 10557  115B  3008               	movlw	8
 10558  115C  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
 10559  115D  1803               	btfsc	3,0
 10560  115E  2988               	goto	l2528
 10561  115F                     l2518:	
 10562                           
 10563                           ;teris_16f886.c: 486: {
 10564                           ;teris_16f886.c: 487: if(matrix88->data[row][col] == 1)
 10565  115F  0876               	movf	MATRIX88_to_MATRIX7219@row,w
 10566  1160  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 10567  1161  3002               	movlw	2
 10568  1162                     u2625:	
 10569  1162  1003               	clrc
 10570  1163  0DF1               	rlf	??_MATRIX88_to_MATRIX7219,f
 10571  1164  3EFF               	addlw	-1
 10572  1165  1D03               	skipz
 10573  1166  2962               	goto	u2625
 10574  1167  1003               	clrc
 10575  1168  0D71               	rlf	??_MATRIX88_to_MATRIX7219,w
 10576  1169  0774               	addwf	MATRIX88_to_MATRIX7219@matrix88,w
 10577  116A  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
 10578  116B  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 10579  116C  0772               	addwf	??_MATRIX88_to_MATRIX7219+1,w
 10580  116D  00F3               	movwf	??_MATRIX88_to_MATRIX7219+2
 10581  116E  0873               	movf	??_MATRIX88_to_MATRIX7219+2,w
 10582  116F  0084               	movwf	4
 10583  1170  1783               	bsf	3,7	;select IRP bank2
 10584  1171  0300               	decf	0,w
 10585  1172  1D03               	btfss	3,2
 10586  1173  297E               	goto	l2522
 10587                           
 10588                           ;teris_16f886.c: 488: {
 10589                           ;teris_16f886.c: 489: matrix7219->col[col] |= mask;
 10590  1174  0875               	movf	MATRIX88_to_MATRIX7219@mask,w
 10591  1175  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 10592  1176  0877               	movf	MATRIX88_to_MATRIX7219@col,w
 10593  1177  0770               	addwf	MATRIX88_to_MATRIX7219@matrix7219,w
 10594  1178  00F2               	movwf	??_MATRIX88_to_MATRIX7219+1
 10595  1179  0872               	movf	??_MATRIX88_to_MATRIX7219+1,w
 10596  117A  0084               	movwf	4
 10597  117B  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 10598  117C  1383               	bcf	3,7	;select IRP bank0
 10599  117D  0480               	iorwf	0,f
 10600  117E                     l2522:	
 10601                           
 10602                           ;teris_16f886.c: 490: }
 10603                           ;teris_16f886.c: 491: mask >>= 1;
 10604  117E  1003               	clrc
 10605  117F  0CF5               	rrf	MATRIX88_to_MATRIX7219@mask,f
 10606  1180  3001               	movlw	1
 10607  1181  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 10608  1182  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 10609  1183  07F6               	addwf	MATRIX88_to_MATRIX7219@row,f
 10610  1184  3008               	movlw	8
 10611  1185  0276               	subwf	MATRIX88_to_MATRIX7219@row,w
 10612  1186  1C03               	skipc
 10613  1187  295F               	goto	l2518
 10614  1188                     l2528:	
 10615  1188  3001               	movlw	1
 10616  1189  00F1               	movwf	??_MATRIX88_to_MATRIX7219
 10617  118A  0871               	movf	??_MATRIX88_to_MATRIX7219,w
 10618  118B  07F7               	addwf	MATRIX88_to_MATRIX7219@col,f
 10619  118C  294B               	goto	L23
 10620  118D                     __end_of_MATRIX88_to_MATRIX7219:	
 10621                           
 10622                           	psect	text43
 10623  1EBA                     __ptext43:	
 10624 ;; *************** function _memset *****************
 10625 ;; Defined at:
 10626 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
 10627 ;; Parameters:    Size  Location     Type
 10628 ;;  p1              2    0[COMMON] PTR void 
 10629 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
 10630 ;;  c               2    2[COMMON] int 
 10631 ;;  n               2    4[COMMON] unsigned int 
 10632 ;; Auto vars:     Size  Location     Type
 10633 ;;  p               2    6[COMMON] PTR unsigned char 
 10634 ;;		 -> temp_matrix88.data(64), find_best_solution@temp_matrix88(64), g_matrix88.data(64), g_matrix88(64), 
 10635 ;; Return value:  Size  Location     Type
 10636 ;;                  2    0[COMMON] PTR void 
 10637 ;; Registers used:
 10638 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10639 ;; Tracked objects:
 10640 ;;		On entry : 0/0
 10641 ;;		On exit  : 0/0
 10642 ;;		Unchanged: 0/0
 10643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10644 ;;      Params:         6       0       0       0       0
 10645 ;;      Locals:         2       0       0       0       0
 10646 ;;      Temps:          0       0       0       0       0
 10647 ;;      Totals:         8       0       0       0       0
 10648 ;;Total ram usage:        8 bytes
 10649 ;; Hardware stack levels used:    1
 10650 ;; This function calls:
 10651 ;;		Nothing
 10652 ;; This function is called by:
 10653 ;;		_Clear_Matrix
 10654 ;;		_delete_row
 10655 ;; This function uses a non-reentrant model
 10656 ;;
 10657                           
 10658                           
 10659                           ;psect for function _memset
 10660  1EBA                     _memset:	
 10661                           
 10662                           ;incstack = 0
 10663                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
 10664  1EBA  0870               	movf	memset@p1,w
 10665  1EBB  00F6               	movwf	memset@p
 10666  1EBC  0871               	movf	memset@p1+1,w
 10667  1EBD  00F7               	movwf	memset@p+1
 10668  1EBE                     l2538:	
 10669  1EBE  3001               	movlw	1
 10670  1EBF  02F4               	subwf	memset@n,f
 10671  1EC0  3000               	movlw	0
 10672  1EC1  1C03               	skipc
 10673  1EC2  03F5               	decf	memset@n+1,f
 10674  1EC3  02F5               	subwf	memset@n+1,f
 10675  1EC4  0A74               	incf	memset@n,w
 10676  1EC5  1903               	btfsc	3,2
 10677  1EC6  0A75               	incf	memset@n+1,w
 10678  1EC7  1903               	btfsc	3,2
 10679  1EC8  0008               	return
 10680  1EC9  0876               	movf	memset@p,w
 10681  1ECA  0084               	movwf	4
 10682  1ECB  1383               	bcf	3,7
 10683  1ECC  1877               	btfsc	memset@p+1,0
 10684  1ECD  1783               	bsf	3,7
 10685  1ECE  0872               	movf	memset@c,w
 10686  1ECF  0080               	movwf	0
 10687  1ED0  3001               	movlw	1
 10688  1ED1  07F6               	addwf	memset@p,f
 10689  1ED2  1803               	skipnc
 10690  1ED3  0AF7               	incf	memset@p+1,f
 10691  1ED4  2EBE               	goto	l2538
 10692  1ED5                     __end_of_memset:	
 10693                           ;	Return value of _memset is never used
 10694                           
 10695  007E                     btemp	set	126	;btemp
 10696  007E                     wtemp	set	126
 10697  007E                     wtemp0	set	126
 10698  0080                     wtemp1	set	128
 10699  0082                     wtemp2	set	130
 10700  0084                     wtemp3	set	132
 10701  0086                     wtemp4	set	134
 10702  0088                     wtemp5	set	136
 10703  007F                     wtemp6	set	127
 10704  007E                     ttemp	set	126
 10705  007E                     ttemp0	set	126
 10706  0081                     ttemp1	set	129
 10707  0084                     ttemp2	set	132
 10708  0087                     ttemp3	set	135
 10709  007F                     ttemp4	set	127
 10710  007E                     ltemp	set	126
 10711  007E                     ltemp0	set	126
 10712  0082                     ltemp1	set	130
 10713  0086                     ltemp2	set	134
 10714  0080                     ltemp3	set	128


Data Sizes:
    Strings     1196
    Constant    394
    Data        38
    BSS         144
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     53      73
    BANK1            80     71      80
    BANK3            96      0      91
    BANK2            96      0      64

Pointer List with Targets:

    is_right_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_left_boundary@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    memset@p1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memset@p	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 52
		 -> STR_57(CODE[24]), STR_55(CODE[35]), STR_54(CODE[36]), STR_53(CODE[35]), 
		 -> STR_52(CODE[36]), STR_51(CODE[35]), STR_50(CODE[36]), STR_49(CODE[23]), 
		 -> STR_48(CODE[35]), STR_47(CODE[36]), STR_46(CODE[35]), STR_45(CODE[36]), 
		 -> STR_44(CODE[35]), STR_43(CODE[38]), STR_42(CODE[16]), STR_41(CODE[37]), 
		 -> STR_40(CODE[36]), STR_38(CODE[17]), STR_37(CODE[33]), STR_36(CODE[52]), 
		 -> STR_35(CODE[22]), STR_34(CODE[17]), STR_33(CODE[16]), STR_32(CODE[11]), 
		 -> STR_31(CODE[26]), STR_30(CODE[26]), STR_26(CODE[31]), STR_25(CODE[31]), 
		 -> STR_24(CODE[31]), STR_21(CODE[25]), STR_20(CODE[25]), STR_18(CODE[26]), 
		 -> STR_7(CODE[43]), STR_6(CODE[32]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 32
		 -> g_debug(BANK3[32]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    g_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    find_best_solution@temp_cur_matrix44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_holes_after_merge@matrix	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    get_high_after_merge@matrix	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    get_high@matrix	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    right_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    left_most@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    left_most@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    evaluate@matrix	PTR const struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge1@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    merge1@matrix88_in	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge1@matrix88_out	PTR struct . size(1) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), 

    merge@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    merge@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    clear@matrix88	PTR struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    clear@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    fall_off@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    fall_off@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_right_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_left_boundary@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    is_valid@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    is_valid@matrix44	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    hit_land@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    hit_land@matrix44	PTR const struct . size(2) Largest target is 384
		 -> NULL(NULL[0]), g_matrix44(CODE[384]), 

    is_row_empty@matrix	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    delete_matrix@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memcpy	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    delete_row@matrix	PTR struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    is_row_full@matrix	PTR const struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    sp__memset	PTR void  size(2) Largest target is 64
		 -> temp_matrix88.data(BANK0[64]), find_best_solution@temp_matrix88(BANK1[64]), g_matrix88.data(BANK2[64]), g_matrix88(BANK2[64]), 

    printf_MATRIX88@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    printf_console_MATRIX88@matrix	PTR const struct . size(2) Largest target is 64
		 -> find_best_solution@temp_matrix88(BANK1[64]), g_matrix88(BANK2[64]), 

    MATRIX88_to_MATRIX7219@matrix88	PTR const struct . size(1) Largest target is 64
		 -> g_matrix88(BANK2[64]), 

    MATRIX88_to_MATRIX7219@matrix7219	PTR struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    printf_MATRIX7219@matrix	PTR const struct . size(1) Largest target is 8
		 -> printf_MATRIX88@matrix7219(BANK0[8]), 

    sp__get_MATRIX44	PTR struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    printf_console_MATRIX44@matrix	PTR const struct . size(2) Largest target is 384
		 -> g_matrix44(CODE[384]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 47
		 -> STR_58(CODE[15]), STR_56(CODE[15]), STR_39(CODE[47]), STR_29(CODE[22]), 
		 -> STR_28(CODE[21]), STR_27(CODE[8]), STR_23(CODE[37]), STR_22(CODE[10]), 
		 -> STR_19(CODE[37]), STR_17(CODE[23]), STR_16(CODE[3]), STR_15(CODE[2]), 
		 -> STR_14(CODE[2]), STR_13(CODE[31]), STR_12(CODE[23]), STR_11(CODE[3]), 
		 -> STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[23]), g_debug(BANK3[32]), 
		 -> STR_5(CODE[23]), STR_4(CODE[3]), STR_3(CODE[2]), STR_2(CODE[2]), 
		 -> STR_1(CODE[31]), 


Critical Paths under _main in COMMON

    _is_right_boundary->_USARTWriteString
    _printf_console_Screen->_printf_console_MATRIX88
    _printf_console_MATRIX88->_USARTWriteString
    _printf_console_MATRIX44->_USARTWriteString
    _merge1->_memcpy
    _left_most->_is_left_boundary
    _is_left_boundary->_USARTWriteString
    _delete_matrix->_delete_row
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _delete_row->_memcpy
    _USARTWriteString->_USARTWriteChar
    _char_info_index_rand->___awmod
    _rand->___lmul
    _printf_Screen->_printf_MATRIX88
    _printf_MATRIX88->_MATRIX88_to_MATRIX7219
    _printf_MATRIX7219->_Write_Byte

Critical Paths under _main in BANK0

    _main->_find_best_solution
    _hit_land->_sprintf
    _find_best_solution->_evaluate
    _find_best_solution->_get_holes_after_merge
    _right_most->_sprintf
    _left_most->_sprintf
    _is_valid->_sprintf
    _get_holes_after_merge->_sprintf
    _get_high_after_merge->_sprintf
    _get_high->_sprintf
    _fall_off->_sprintf
    _evaluate->_sprintf
    _delete_matrix->_sprintf
    _char_info_index_rand->___awmod
    ___awmod->_rand
    _printf_Screen->_printf_MATRIX88

Critical Paths under _main in BANK1

    _main->_find_best_solution

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    12      4  122426
                                             37 BANK0     16    12      4
                       _Clear_Matrix
                          _USARTInit
                   _USARTWriteString
                             ___bmul
               _char_info_index_rand
                              _clear
                      _delete_matrix
                 _find_best_solution
                           _hit_land
                              _merge
                      _printf_Screen
                            _sprintf
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _merge                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _hit_land                                            11     7      4    7483
                                             18 BANK0     11     7      4
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _find_best_solution                                  78    78      0   95485
                                             30 BANK0      7     7      0
                                              0 BANK1     71    71      0
                   _USARTWriteString
                             ___bmul
                      _delete_matrix
                           _evaluate
                           _fall_off
                           _get_high
               _get_high_after_merge
              _get_holes_after_merge
                           _is_valid
                          _left_most
                             _merge1
            _printf_console_MATRIX44
            _printf_console_MATRIX88
              _printf_console_Screen
                         _right_most
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _right_most                                           6     3      3   10643
                                             18 BANK0      6     3      3
                   _USARTWriteString
                  _is_right_boundary
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _is_right_boundary                                   10     7      3    3502
                                              3 COMMON    10     7      3
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _printf_console_Screen                                0     0      0    3491
            _printf_console_MATRIX88
 ---------------------------------------------------------------------------------
 (3) _printf_console_MATRIX88                              9     7      2    3491
                                              3 COMMON     9     7      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _printf_console_MATRIX44                             15    12      3    3890
                                              3 COMMON     6     3      3
                                              0 BANK0      9     9      0
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _merge1                                              14     9      5    1128
                                              0 BANK0     14     9      5
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _left_most                                            5     2      3   10643
                                             18 BANK0      5     2      3
                   _USARTWriteString
                   _is_left_boundary
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _is_left_boundary                                    11     8      3    3502
                                              3 COMMON    11     8      3
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _is_valid                                            11     7      4    7615
                                             18 BANK0     11     7      4
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _get_holes_after_merge                               12    12      0    8066
                                             18 BANK0     12    12      0
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _get_high_after_merge                                 9     7      2    7267
                                             18 BANK0      9     7      2
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _get_high                                             4     4      0    7277
                                             18 BANK0      4     4      0
                   _USARTWriteString
                       _is_row_empty
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _is_row_empty                                         6     5      1     192
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (2) _fall_off                                            11     7      4    7528
                                             18 BANK0     11     7      4
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _evaluate                                            12    10      2    7335
                                             18 BANK0     12    10      2
                   _USARTWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _delete_matrix                                        6     4      2    8646
                                             18 BANK0      6     4      2
                   _USARTWriteString
                         _delete_row
                        _is_row_full
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             26    18      8    3730
                                              0 BANK0     18    10      8
                             ___bmul (ARG)
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _is_row_full                                          9     6      3     193
                                              0 COMMON     9     6      3
 ---------------------------------------------------------------------------------
 (3) _delete_row                                          10     7      3    1232
                                             11 COMMON     3     0      3
                                              0 BANK0      7     7      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6     388
                                              0 COMMON    11     5      6
 ---------------------------------------------------------------------------------
 (2) _USARTWriteString                                     2     0      2    3194
                                              1 COMMON     2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (3) _USARTWriteChar                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     352
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _clear                                               11     7      4     427
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _char_info_index_rand                                 0     0      0     706
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     198
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     508
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      75
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Clear_Matrix                                         0     0      0    1047
                             _memset
                      _printf_Screen
 ---------------------------------------------------------------------------------
 (1) _printf_Screen                                        0     0      0     683
                    _printf_MATRIX88
 ---------------------------------------------------------------------------------
 (2) _printf_MATRIX88                                     10    10      0     683
                                              8 COMMON     1     1      0
                                              0 BANK0      9     9      0
             _MATRIX88_to_MATRIX7219
                  _printf_MATRIX7219
 ---------------------------------------------------------------------------------
 (3) _printf_MATRIX7219                                    4     4      0     236
                                              2 COMMON     4     4      0
                         _Write_Byte
 ---------------------------------------------------------------------------------
 (4) _Write_Byte                                           2     1      1      97
                                              0 COMMON     2     1      1
                         _SPI1_write
 ---------------------------------------------------------------------------------
 (5) _SPI1_write                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _MATRIX88_to_MATRIX7219                               8     7      1     351
                                              0 COMMON     8     7      1
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6     364
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Clear_Matrix
     _memset
     _printf_Screen
       _printf_MATRIX88
         _MATRIX88_to_MATRIX7219
         _printf_MATRIX7219
           _Write_Byte
             _SPI1_write
   _USARTInit
   _USARTWriteString
     _USARTWriteChar
   ___bmul
   _char_info_index_rand
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _clear
   _delete_matrix
     _USARTWriteString
       _USARTWriteChar
     _delete_row
       _memcpy
       _memset
     _is_row_full
     _sprintf
       ___bmul (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
   _find_best_solution
     _USARTWriteString
       _USARTWriteChar
     ___bmul
     _delete_matrix
       _USARTWriteString
         _USARTWriteChar
       _delete_row
         _memcpy
         _memset
       _is_row_full
       _sprintf
         ___bmul (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
     _evaluate
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
     _fall_off
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
     _get_high
       _USARTWriteString
         _USARTWriteChar
       _is_row_empty
       _sprintf
         ___bmul (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
     _get_high_after_merge
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
     _get_holes_after_merge
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
     _is_valid
       _USARTWriteString
         _USARTWriteChar
       _sprintf
         ___bmul (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
     _left_most
       _USARTWriteString
         _USARTWriteChar
       _is_left_boundary
         _USARTWriteString
           _USARTWriteChar
       _sprintf
         ___bmul (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
     _merge1
       _memcpy
     _printf_console_MATRIX44
       _USARTWriteString
         _USARTWriteChar
     _printf_console_MATRIX88
       _USARTWriteString
         _USARTWriteChar
     _printf_console_Screen
       _printf_console_MATRIX88
         _USARTWriteString
           _USARTWriteChar
     _right_most
       _USARTWriteString
         _USARTWriteChar
       _is_right_boundary
         _USARTWriteString
           _USARTWriteChar
       _sprintf
         ___bmul (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
     _sprintf
       ___bmul (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
   _hit_land
     _USARTWriteString
       _USARTWriteChar
     _sprintf
       ___bmul (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
   _merge
   _printf_Screen
     _printf_MATRIX88
       _MATRIX88_to_MATRIX7219
       _printf_MATRIX7219
         _Write_Byte
           _SPI1_write
   _sprintf
     ___bmul (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
   _srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5B       9       94.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      40      11       66.7%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     47      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     35      49       5       91.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     142      12        0.0%
ABS                  0      0     142       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Aug 27 01:46:23 2016

                         __CFG_CP$ON 0000                                    pc 0002  
                     ___bmul@product 0072        get_holes_after_merge@num_hole 0038  
                                 l36 1E29                                   l29 10EC  
                        __CFG_CPD$ON 0000                    merge1@matrix88_in 0023  
     __end_of_MATRIX88_to_MATRIX7219 118D                                   fsr 0004  
                 USARTInit@baud_rate 0070                ?_char_info_index_rand 0070  
                        get_high@row 0035                          __CFG_LVP$ON 0000  
                                l400 0307                                  l307 158F  
                                l365 107A                                  l358 1F8C  
                                l389 0310                                  _GIE 005F  
                                _RA1 0029                                  _RA2 002A  
                 merge1@matrix88_out 0024                                  fsr0 0004  
                                indf 0000                         ___awmod@sign 002C  
                       __CFG_IESO$ON 0000                       is_row_full@col 0078  
                     is_row_full@row 0072                                 l3102 1313  
                               l4000 13EA                                 l3050 0ED6  
                               l3034 0E87                                 l3106 131B  
                               l3130 157E                                 l3122 1522  
                               l4010 141E                                 l3220 1E4A  
                               l3044 0EBB                                 l3028 0E7D  
                               l3212 036A                                 l4004 140D  
                               l3038 0E9D                                 l3054 0EDE  
                               l3134 1587                                 l3240 1199  
                               l3224 1E50                                 l4032 14EE  
                               l3208 035F                                 l4016 142F  
                               l2522 117E                                 l3410 11E5  
                               l4034 150C                                 l4050 12A8  
                               l3154 024E                                 l3146 0243  
                               l3252 11A6                                 l3244 11A0  
                               l2612 005B                                 l4052 1280  
                               l3164 0273                                 l3076 1FBD  
                               l2518 115F                                 l3254 11B4  
                               l3262 11CD                                 l3414 121C  
                               l2702 1F7F                                 l2622 0072  
                               l2606 003F                                 l4054 12AF  
                               l3094 12D4                                 l3174 0299  
                               l3086 10B0                                 l2528 1188  
                               l4400 10E2                                 l3272 10BF  
                               l2560 1FCC                                 l2640 00AC  
                               l3192 02EA                                 l3184 02DF  
                               l4080 1491                                 l4208 0689  
                               l4128 0557                                 l3360 1654  
                               l2538 1EBE                                 l4402 10E7  
                               l3274 10C1                                 l3282 10CA  
                               l3266 11D5                                 l3258 11C2  
                               l3418 1224                                 l2706 1F87  
                               l2562 1FDA                                 l2634 009D  
                               l2650 0019                                 l2810 13CF  
                               l4250 0461                                 l3442 1274  
                               l3434 1234                                 l4306 0201  
                               l3276 10C3                                 l2820 1040  
                               l2548 1F37                                 l2572 1FFB  
                               l2628 0078                                 l2652 00F5  
                               l4084 1499                                 l4076 145B  
                               l4252 0780                                 l4228 06DD  
                               l3278 10C5                                 l2486 1F0C  
                               l2590 1028                                 l2742 0E65  
                               l2910 0F14                                 l2806 13C6  
                               l2814 13D5                                 l4262 07A9  
                               l4190 062C                                 l4254 03CE  
                               l3366 165A                                 l3438 126C  
                               l2824 1056                                 l2568 1FF0  
                               l2584 100C                                 l2648 00B0  
                               l2736 0E4E                                 l2920 0F68  
                               l2904 0F0E                                 l2840 1711  
                               l4264 07B0                                 l4256 0787  
                               l4248 0777                                 l3376 16B0  
                               l3384 16E7                                 l3392 16F8  
                               l2586 101A                                 l2594 1033  
                               l2746 0E6D                                 l2930 0FAE  
                               l2762 132A                                 l4290 011D  
                               l4274 0126                                 l2924 0F8F  
                               l2772 1368                                 l2780 1377  
                               l2756 1324                                 l3388 16F2  
                               l4276 012B                                 l2942 0FF1  
                               l2846 1717                                 l2870 17F8  
                               l2790 1380                                 l4294 01B0  
                               l2696 1F5E                                 l2776 1371  
                               l2864 17E4                                 l2938 0FE6  
                               l2946 0FF7                                 l2858 17D0  
                               l4396 10D8                                 l2964 159B  
                               l2796 1386                                 l4398 10DD  
                               l2974 15F2                                 l2982 162A  
                               l2990 163B                                 l2958 1595  
                               l2986 1635                                 l3994 13E5  
                               STR_1 0C1D                         __CFG_WDTE$ON 0000  
                               STR_2 0E44                                 STR_3 0E46  
                               STR_4 0E24                                 STR_5 0D67  
                               STR_6 0BFD                                 STR_7 09FF  
                               STR_8 0D50                          main@hit_res 0054  
                               u3205 13BB                                 u4015 027A  
                               u4105 02CA                                 u3075 0E51  
                               u4035 0293                                 u3315 1752  
                               u3255 1058                                 u3335 178F  
                               u2625 1162                                 u3265 1060  
                               u4225 0333                                 u4065 029C  
                               u3505 0FC5                                 u3345 17B7  
                               u4315 11BA                                 u2715 1FDB  
                               u3435 0F3C                                 u4325 11C3  
                               u2725 1FE7                                 u4165 02ED  
                               u4085 02B5                                 u2735 1FF1  
                               u3715 0E8D                                 _PEIE 005E  
                               u5245 14B2                                 u2765 100F  
                               u2845 0093                                 u3725 0EA0  
                               u3565 15C3                                 u3485 0F8D  
                               u4295 11A9                                 u4535 120F  
                               u2695 1FCF                                 u4455 168F  
                               u5265 14C2                                 u2785 1020  
                               u5425 05B8                                 u4465 16BA  
                               u5275 14D2                                 u2795 1029  
                               u3755 0EBE                                 u3595 1607  
                               u5355 1483                                 u5195 13ED  
                               u5515 071C                                 u5435 05C7  
                               _RCIE 0465                                 u5285 14F3  
                               u2965 1F61                                 u3785 1137  
                               u3955 0254                                 u4595 125E  
                               u3975 026D                                 u5587 01EF  
                               u5597 0227                         __CFG_WRT$OFF 0000  
             __end_of_USARTWriteChar 1E30                        __CFG_FCMEN$ON 0000  
                               _main 00FA                                 _rand 10FE  
                               btemp 007E                        __CFG_BOREN$ON 0000  
                               ltemp 007E                                 start 0000  
                               ttemp 007E                                 wtemp 007E  
                  ___bmul@multiplier 0073                        __CFG_MCLRE$ON 0000  
    find_best_solution@tem_sub_index 00E5            ??_printf_console_MATRIX44 0020  
          ??_printf_console_MATRIX88 0075                      is_row_empty@col 0075  
                    is_row_empty@row 0070           get_high_after_merge@matrix 0032  
                              ?_main 0045                                ?_rand 0020  
                              STR_20 0D06                                STR_21 0D1F  
                              STR_13 0C3C                                STR_14 0E44  
                              STR_22 0E32                                STR_30 0CD2  
                              STR_15 0E46                                STR_31 0CEC  
                              STR_23 0A50                                STR_16 0E24  
                              STR_32 0E27                                STR_24 0C5B  
                              STR_40 0B4F                                STR_17 0D67  
                              STR_33 0E08                                STR_25 0C7A  
                              STR_41 0A9A                                STR_42 0DF8  
                              STR_34 0DE7                                STR_18 0CB8  
                              STR_26 0C99                                STR_50 0B2B  
                              STR_51 0B96                                STR_27 0E3C  
                              STR_35 0DAB                                STR_19 0A75  
                              STR_43 0A2A                                STR_52 0AE3  
                              STR_28 0DC1                                STR_44 0BB9  
                              STR_36 099C                      __end_of___awmod 11DA  
                              STR_53 0B73                                STR_29 0D95  
                              STR_37 0BDC                                STR_45 0B07  
                              STR_38 0DD6                                STR_46 0B96  
                              STR_54 0ABF                                STR_55 0BB9  
                              STR_47 0AE3                                STR_39 09D0  
                              STR_56 0E18                                STR_48 0B73  
                              STR_49 0D7E                                STR_57 0D38  
                              STR_58 0E18                     USARTWriteChar@ch 0070  
                    __end_of___lwdiv 2000                      __end_of___lwmod 1038  
                              _RCREG 001A                                _SPBRG 0099  
                   _is_left_boundary 131D                                _TXREG 0019  
                              _UQEnd 0067                  ___lmul@multiplicand 0074  
                        ?_SPI1_write 0070                                _clear 11DA  
                    __end_of_dpowers 081C                                _cur_x 00ED  
                              _cur_y 005C                                _merge 1229  
                              _randx 005F                                _srand 0009  
                       ?_is_row_full 0070                      ??_printf_Screen 0079  
                              pclath 000A                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                   __size_of_USARTInit 0047  
                    ?_USARTWriteChar 0070                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                          hit_land@col 003B  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                      __end_of_sprintf 00FA  
    find_best_solution@temp_matrix88 00A3                          hit_land@row 003C  
                     get_high@matrix 0034                      __initialization 07B4  
                       __end_of_main 0235                         __end_of_rand 1145  
             ??_char_info_index_rand 007E                               ??_main 0049  
                             ??_rand 0022                          evaluate@col 003C  
                        evaluate@row 003D             find_best_solution@temp_x 00E6  
                             ?_clear 0070      __end_of_printf_console_MATRIX44 1800  
    __end_of_printf_console_MATRIX88 1437                               ?_merge 0070  
                             ?_srand 0070                __size_of_Clear_Matrix 0014  
              __end_of_delete_matrix 12CB                               _URBuff 0190  
                   __end_of_fall_off 1640                       __CFG_PWRTE$OFF 0000  
              get_high_after_merge@y 0038                     __end_of_get_high 131D  
                             ___bmul 1E48                  __size_of_SPI1_write 0001  
                             ___lmul 1038                            ??___awmod 007D  
                   __end_of_hit_land 1701                            ??___lwdiv 0074  
                   __end_of_evaluate 0EFA                            ??___lwmod 007C  
                             _merge1 1437             __end_of_USARTWriteString 1F2F  
                             _memcpy 1F2F                               _memset 1EBA  
                   __end_of_is_valid 1000                               clear@x 0078  
                             clear@y 0070                      ___awmod@divisor 0027  
                             _temp_y 005E             __size_of_printf_MATRIX88 0012  
                    ___awmod@counter 002B                    __end_of_USARTInit 10FE  
                      ?_is_row_empty 0070          __size_of_find_best_solution 042E  
                             merge@x 0078                               merge@y 0070  
                        is_valid@col 003C                          is_valid@row 003B  
                       _Clear_Matrix 1E8E                               srand@x 0070  
                  _is_right_boundary 1379                            ??_sprintf 0028  
            ??_get_holes_after_merge 0032                   ?_is_right_boundary 0073  
                     evaluate@matrix 003B              __end_of__initialization 07FC  
                     merge1@matrix44 0021                _printf_console_Screen 1E30  
                     _g_cur_matrix44 005A                  ??_is_right_boundary 0076  
                ___bmul@multiplicand 0070                       __pcstackCOMMON 0070  
                       __pidataBANK0 1E40                         __pidataBANK1 1003  
                       __pidataBANK3 1ED5                        __end_of_clear 1229  
                         _Write_Byte 1E6A                        __end_of_merge 1279  
                      __end_of_srand 0012                       ??_is_row_empty 0071  
          __end_of_is_right_boundary 13D7        __size_of_get_high_after_merge 0079  
         get_holes_after_merge@start 003A                              ??_clear 0074  
                            ??_merge 0074                              ??_srand 0072  
                       evaluate@full 003A                           __pbssBANK0 0055  
                         __pbssBANK1 00E7                           __pbssBANK2 0110  
                         __pbssBANK3 0190                         evaluate@risk 0038  
                 __size_of_left_most 003B                    is_row_full@matrix 0070  
               __size_of_is_row_full 0030                  delete_matrix@matrix 0032  
                   is_valid@matrix44 0033                     is_valid@matrix88 0035  
           __end_of_is_left_boundary 1379                           _g_matrix44 081C  
                         _delete_row 149E                           _g_matrix88 0110  
                         __pmaintext 00FA                              ?___bmul 0070  
                            ?___lmul 0070                              ?_merge1 0020  
                            ?_memcpy 0070                              ?_memset 0070  
                     ___lmul@product 0079            get_holes_after_merge@stop 0039  
                       ??_SPI1_write 0070                            ?_fall_off 0032  
                  ??_printf_MATRIX88 0078            printf_MATRIX88@matrix7219 0021  
                   ??_USARTWriteChar 0070                 is_right_boundary@col 007C  
               is_right_boundary@row 007B                            ?_get_high 0070  
                 USARTWriteInt@F1617 0055                           __stringtab 0800  
                          ?_hit_land 0032                              _UQFront 0068  
                          ?_evaluate 0032               ?_printf_console_Screen 0070  
                          ?_is_valid 0032  find_best_solution@temp_cur_matrix44 00E3  
                    __size_of___bmul 0011                      __size_of___lmul 003F  
                        ?_Write_Byte 0070                              ___awmod 118D  
                 __end_of_SPI1_write 0004                              ___lwdiv 1FC4  
                            ___lwmod 1006                          right_most@x 0037  
                            _g_debug 01B0                      __size_of_merge1 0067  
                    __size_of_memcpy 002A                            _ANSELbits 0188  
                    __size_of_memset 001B                    __end_of_left_most 1FC4  
                            __ptext1 0009                              __ptext2 1229  
                            __ptext3 1640                              __ptext4 0386  
                            __ptext5 1077                              __ptext6 1379  
                            __ptext7 1E30                              __ptext8 13D7  
                            __ptext9 1701                     fall_off@matrix44 0033  
                   fall_off@matrix88 0035                              _dpowers 0812  
                   ___awmod@dividend 0029           __size_of_is_right_boundary 005E  
                         ??_fall_off 0036                              _sprintf 0012  
                         ??_get_high 0032                              clrloop0 1E39  
               end_of_initialization 07FC                    _printf_MATRIX7219 1EF0  
                         ??_hit_land 0036                              merge1@x 0029  
                            merge1@y 0020                           ??_evaluate 0034  
                            memcpy@d 0077                              memcpy@n 0074  
                            memcpy@s 0079                __end_of_printf_Screen 0009  
                            memset@c 0072                 __end_of_is_row_empty 0E6F  
                            memset@n 0074                              memset@p 0076  
                         ??_is_valid 0036                   ?_printf_MATRIX7219 0070  
                     SPI1_write@data 0070                           _right_most 1077  
           ?_printf_console_MATRIX44 0073             ?_printf_console_MATRIX88 0073  
           ??_MATRIX88_to_MATRIX7219 0071                          ?_delete_row 007B  
                      clear@matrix44 0071                        clear@matrix88 0073  
         printf_console_MATRIX44@col 0078                            _RCSTAbits 0018  
         printf_console_MATRIX44@row 0077                    Write_Byte@myValue 0070  
                ??_printf_MATRIX7219 0072           printf_console_MATRIX88@col 007B  
                         _temp_count 00EA           printf_console_MATRIX88@row 007A  
                         _temp_pre_x 0066                         __pstringtext 0800  
                  ?_USARTWriteString 0071        __size_of_char_info_index_rand 0018  
                 ??_USARTWriteString 0073            is_right_boundary@matrix44 0073  
          is_right_boundary@matrix88 0075                            _USARTInit 10B7  
                          _TRISAbits 0085            __end_of_printf_MATRIX7219 1F0C  
                  _tem_pre_sub_index 0065                  __size_of_Write_Byte 0012  
                 right_most@matrix44 0032                   right_most@matrix88 0034  
     __size_of_get_holes_after_merge 0151        __end_of_get_holes_after_merge 0386  
              find_best_solution@res 00A2        printf_console_MATRIX44@matrix 0074  
                          _TXSTAbits 0098                       __end_of___bmul 1E59  
         __end_of_find_best_solution 07B4                       __end_of___lmul 1077  
      printf_console_MATRIX88@matrix 0073                       __end_of_merge1 149E  
                     __end_of_memcpy 1F59                       __end_of_memset 1ED5  
   MATRIX88_to_MATRIX7219@matrix7219 0070               __size_of_delete_matrix 0052  
                start_initialization 07B4                           ?_USARTInit 0070  
                __size_of_delete_row 0075                           left_most@x 0036  
                      delete_row@len 0024                        delete_row@row 007D  
           __CFG_FOSC$INTRC_NOCLKOUT 0000                   is_right_boundary@x 007A  
       __end_of_get_high_after_merge 158C                          ?_right_most 0032  
                     _temp_pre_count 005D                    ?_is_left_boundary 0073  
    __size_of_MATRIX88_to_MATRIX7219 0048          get_holes_after_merge@matrix 003B  
                           ??___bmul 0071                             ??___lmul 0078  
                 ??_is_left_boundary 0076                           init_fetch0 1E59  
                 is_row_empty@matrix 0074                          __pdataBANK0 005F  
                        __pdataBANK1 00ED                          __pdataBANK3 01D0  
                  _g_char_info_index 00E9                      _printf_MATRIX88 1E7C  
                           ??_merge1 0025                             ??_memcpy 0076  
                           ??_memset 0076                          _g_char_info 01D0  
  find_best_solution@left_most_index 00A0                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
         __size_of_printf_MATRIX7219 001C                __size_of_is_row_empty 0027  
            ??_printf_console_Screen 007C                        ??_is_row_full 0073  
                  __size_of_fall_off 00B4                    __size_of_get_high 0052  
                        sprintf@flag 002C                          sprintf@prec 002D  
                  __size_of_hit_land 00C1                        _delete_matrix 1279  
                          __pnvBANK0 0067                    __size_of_evaluate 008B  
                 delete_matrix@count 0036                    __size_of_is_valid 0106  
                   ___lwdiv@dividend 0072              printf_MATRIX7219@matrix 0074  
                   delete_matrix@row 0037                         ??_Write_Byte 0071  
                           ?___awmod 0027                             ?___lwdiv 0070  
                           ?___lwmod 0078                         _is_row_empty 0E48  
                  is_left_boundary@x 007B                          ??_USARTInit 0072  
             _MATRIX88_to_MATRIX7219 1145                            _left_most 1F89  
                __size_of_right_most 0040                     ___lwdiv@quotient 0075  
                     __size_of_clear 004F                             ?_sprintf 0020  
               printf_MATRIX7219@col 0075                       __size_of_merge 0050  
                     __size_of_srand 0009                   __end_of_Write_Byte 1E7C  
                     ?_delete_matrix 0032                            fall_off@x 003A  
                          fall_off@y 0032                     delete_row@matrix 007B  
                          clear_ram0 1E38                  __end_of_is_row_full 1F89  
            __end_of_printf_MATRIX88 1E8E                         ??_delete_row 0020  
                           _PIR1bits 000C                            _temp_high 00EB  
                          _temp_hole 00EC                            _temp_risk 00E7  
                  left_most@matrix44 0032                    left_most@matrix88 0034  
                        __stringbase 0812     __size_of_printf_console_MATRIX44 00FF  
   __size_of_printf_console_MATRIX88 0060                        ?_Clear_Matrix 0070  
               _get_high_after_merge 1513                           ?_left_most 0032  
                 __end_of_g_matrix44 099C                   __end_of_delete_row 1513  
                  ___lmul@multiplier 0070                  is_left_boundary@col 007D  
                is_left_boundary@row 007C                        merge@matrix44 0071  
                      merge@matrix88 0073            __size_of_USARTWriteString 0023  
                          hit_land@x 003A                            hit_land@y 0032  
       __end_of_char_info_index_rand 1EBA              get_high_after_merge@col 0039  
                          merge1@col 002D                            merge1@len 002A  
            get_high_after_merge@row 003A                            merge1@row 002C  
            __size_of_USARTWriteChar 0008                        _temp_pre_high 00EE  
                      _temp_pre_hole 00EF                        _temp_pre_risk 0063  
                          is_valid@x 003A                            is_valid@y 0032  
                   __size_of___awmod 004D                     __size_of___lwdiv 003C  
                   __size_of___lwmod 0032                   __end_of__stringtab 0812  
             __size_of_printf_Screen 0005                           sprintf@val 002E  
                     ??_Clear_Matrix 0079                ?_get_high_after_merge 0032  
           is_left_boundary@matrix44 0073             is_left_boundary@matrix88 0075  
                           _fall_off 158C                      ___lwdiv@divisor 0070  
                    ___lwdiv@counter 0077                   _find_best_solution 0386  
                           __ptext10 1437                             __ptext11 1F89  
                           __ptext20 1279                             __ptext12 131D  
                           __ptext21 0012                             __ptext13 0EFA  
                           __ptext30 11DA                             __ptext22 1006  
                           __ptext14 0235                             __ptext31 1EA2  
                           __ptext23 1FC4                             __ptext15 1513  
                           __ptext40 1E6A                             __ptext32 10FE  
                           __ptext24 1F59                             __ptext16 12CB  
                           __ptext41 0003                             __ptext33 1038  
                           __ptext25 149E                             __ptext17 0E48  
                           __ptext42 1145                             __ptext34 118D  
                           __ptext26 1F2F                             __ptext18 158C  
                           __ptext43 1EBA                             __ptext35 10B7  
                           __ptext27 1F0C                             __ptext19 0E6F  
                           __ptext36 1E8E                             __ptext28 1E28  
                           __ptext37 0004                             __ptext29 1E48  
                           __ptext38 1E7C                             __ptext39 1EF0  
                  __CFG_BOR4V$BOR21V 0000                             _get_high 12CB  
                        _is_row_full 1F59       MATRIX88_to_MATRIX7219@matrix88 0074  
                   __size_of_sprintf 00E8                      ??_delete_matrix 0034  
                           _hit_land 1640                             _evaluate 0E6F  
                ?_find_best_solution 0070                        __size_of_main 013B  
                           _is_valid 0EFA                        __size_of_rand 0047  
                   hit_land@matrix44 0033                     hit_land@matrix88 0035  
                           clear@col 007A                             clear@row 0079  
                       ??_right_most 0035                _get_holes_after_merge 0235  
                   ?_printf_MATRIX88 0070                             main@Seed 0052  
                           main@argc 0045                             main@argv 0047  
           get_holes_after_merge@col 003C             get_holes_after_merge@row 003D  
               ??_find_best_solution 003E                          fall_off@col 003B  
                        fall_off@row 003C            __size_of_is_left_boundary 005C  
                        delete_row@i 0026                          ??_left_most 0035  
                           memcpy@d1 0070                             memcpy@s1 0072  
                           merge@col 007A                             merge@row 0079  
                 __end_of_right_most 10B7                             init_ram0 1E5D  
                           memset@p1 0070                            sprintf@ap 002B  
     __size_of_printf_console_Screen 0008                            sprintf@sp 0031  
      __end_of_printf_console_Screen 1E38                     ___lwmod@dividend 007A  
                      _printf_Screen 0004             printf_console_MATRIX44@x 0076  
           printf_console_MATRIX44@y 0073                            stringcode 080A  
                 Write_Byte@myColumn 0071                  USARTWriteString@str 0071  
            printf_MATRIX88@matrix88 0020              _printf_console_MATRIX44 1701  
            _printf_console_MATRIX88 13D7                 _char_info_index_rand 1EA2  
            ?_MATRIX88_to_MATRIX7219 0070               ??_get_high_after_merge 0034  
                           sprintf@c 0030                             sprintf@f 0020  
 find_best_solution@right_most_index 00A1                      ___lwmod@divisor 0078  
                    ___lwmod@counter 007D                             stringtab 0800  
                         _SPI1_write 0003                     _USARTWriteString 1F0C  
                     ?_printf_Screen 0070               ?_get_holes_after_merge 0070  
                     _USARTWriteChar 1E28           MATRIX88_to_MATRIX7219@mask 0075  
          MATRIX88_to_MATRIX7219@col 0077                 __end_of_Clear_Matrix 1EA2  
          MATRIX88_to_MATRIX7219@row 0076  
