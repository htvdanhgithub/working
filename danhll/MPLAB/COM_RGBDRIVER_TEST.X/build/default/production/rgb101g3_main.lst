MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; ********************************************************************************
                      00002 ; RGB101G3 code for use with the RGB LED Moodlight PCB 101
                      00003 ; Core code is based on Generic RGB Standalone LED driver version 3.0.3 (28/09/2008)
                      00004 ;
                      00005 ; rgb101g3 for use with circuit version 101D
                      00006 ; http://picprojecs.org.uk/projects/rgb101/
                      00007 ;
                      00008 ; Pete Griffiths (c) 2010
                      00009 ; info@picprojects.org.uk
                      00010 ; Written and assembled using MPLAB v8.56
                      00011 ;
                      00012 ; -----------------------------------------------------------------------------------
                      00013 
                      00014 
                      00015 
                      00016 ; -----------------------------------------------------------------------------------
                      00017 ; Code to fade between colours is completely rewritten to use variable rate of change
                      00018 ; so that all three LEDs arrive at their new levels simultaneously.
                      00019 ;
                      00020 ; This code will run on 12F629 / 12F675 and 12F683. Select the desired processor
                      00021 ; from the Configure - Select Device menu option in MPLAB IDE, then use the
                      00022 ; Project - Quickbuild option to create the .HEX output file.
                      00023 ; 
                      00024 ; Look for errors during assembly. In particular errors in the SequenceData.inc
                      00025 ; file that indicate either a missing comma in the data, or more data than the 
                      00026 ; chosen PIC has available program memory.
                      00027 ; 
                      00028 ; Be carefull to enter the data in the SequenceData.inc file correctly.  The program
                      00029 ; is only smart enough to work out where your sequences start and finish if you enter
                      00030 ; it in the correct format.  Errors in the data may cause the code to crash.
                      00031 ;
                      00032 ; ********************************************************************************
                      00033 ; Note: For 12F629 and 12F675
                      00034 ; All timings are based on the internal 4Mhz PIC oscillator.  The OSCCAL value is read
                      00035 ; from program memory at 0x3FF and written to the OSCAL register.  This value must be
                      00036 ; present and correct. 
                      00037 ;
                      00038 ;             -=# IF IT IS MISSING THE CODE WILL NOT RUN CORRECTLY #=-
                      00039 ; See http://picprojects.org.uk/projects/recal/ if you need to recalibrate the PIC
                      00040 ;
                      00041 ; This does not apply to 12F683 as it doesn't use this method to calibrate the oscillator
                      00042 ;
                      00043 ; ********************************************************************************
                      00044 ; Pinout connections 
                      00045 ;                            ___ ___
                      00046 ;                       Vdd -|1 ^ 8|- Vss
                      00047 ;      Sequence Change Sw1  -|2   7|- red output
                      00048 ;              blue output  -|3   6|- green output
                      00049 ;  MCLR. tie to Vdd via 1K  -|4   5|- not used
                      00050 ;                           ¯¯¯¯¯¯¯
                      00051 ;  Ensure that MCLR is pulled to Vdd using 1K resistor for 12F629/675. 
                      00052 ;
                      00053 ; Sw1 performs multiple functions.
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 ;  1. single press to hold / run displayed colour sequence
                      00055 ;  2. double press to step to next sequence
                      00056 ;  3. press and hold >1.5 seconds to enter sleep mode
                      00057 ;     in sleep mode press, hold for >1.5 seconds then release to wake from sleep
                      00058 ;
                      00059 ;  note :double press is like double clicking a mouse button when using a PC.
                      00060 ;
                      00061 ;
                      00062 ; ********************************************************************************
                      00063 ; Revision information
                      00064 ; rgb101g3_main.asm version 3.0.0
                      00065 ;
                      00066 ;  First release
                      00067 ;  This code is based on genrgbsa version 3.0.3 code with modification for use
                      00068 ;  with the revised I/O pin use on PCB Revsision 101D
                      00069 ;
                      00070 ;  
                      00071 ;
                      00072 ; ********************************************************************************
                      00073 
                      00074   IFDEF  __12F683
                      00075                 #include "p12f683.inc"
                      00076                 #define ADCpresent
                      00077   ENDIF
                      00078 
                      00079           
                      00080   IFDEF  __12F675
                      00081                 #include "p12f675.inc"
                      00082                 #define ADCpresent
                      00083   ENDIF
                      00084 
                      00085   IFDEF  __12F629
                      00086                 #include "p12f629.inc"
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Feb 01 2016
                      00005 ;  MPASM PIC12F629 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      00339         LIST
                      00087                 
                      00088   ENDIF
                      00089 
                      00090   IFDEF __12F683                
                      00091      __CONFIG       _CP_OFF & _WDT_OFF & _BOD_OFF &_PWRTE_ON & _INTRC_OSC_NOCLKOUT & _MCLRE_ON & _CPD_OF
                            F
                      00092   ELSE
2007   3FA4           00093      __CONFIG       _CP_OFF & _WDT_OFF & _BODEN_OFF & _PWRTE_ON & _INTRC_OSC_NOCLKOUT & _MCLRE_ON & _CPD
                            _OFF
                      00094   ENDIF
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00095   
                      00096                 errorlevel -302 ; suppress banksel warning messages
                      00097        
                      00098 ; Program data memory variables
                      00099 ; --------------------------------------------
                      00100 ;          
                      00101                 cblock          0x20 
                      00102                                  
  00000020            00103                  rdir           ; red fade direction
  00000021            00104                  gdir           ; green fade direction
  00000022            00105                  bdir           ; blue fade direction
  00000023            00106                  Rdif           ; absolute difference between red now and next
  00000024            00107                  Gdif           ; absolute difference between green now and next
  00000025            00108                  Bdif           ; absolute difference between blue now and next
  00000026            00109                  Rcnt           ; fade step counter red
  00000027            00110                  Gcnt           ; fade step counter green
  00000028            00111                  Bcnt           ; fade step counter blue
  00000029            00112                  CntBase        ; fade base count holding variable
  0000002A            00113                  rpwmWkg        ; temp working variable for PWM
  0000002B            00114                  gpwmWkg        ; temp working variable for PWM
  0000002C            00115                  bpwmWkg        ; temp working variable for PWM
  0000002D            00116                  fadeflag       ; fade complete flag variable
  0000002E            00117                  pwmramp        ; pwm ramp counter
  0000002F            00118                  driveLevel     ; select drive level
  00000030            00119                  sbl            ; Sequence Base Low
  00000031            00120                  sbh            ; Sequence Base High
  00000032            00121                  seql           ; Current Sequence data pointer Low
  00000033            00122                  seqh           ; Current Sequence data pointer High
  00000034            00123                  currentSeqNo   ; Current Sequence No
  00000035            00124                  highSeqNo      ; Highest Sequence No
  00000036            00125                  rate           ; Fade rate
  00000037            00126                  hold           ; Sequence hold time
  00000038            00127                  rnew           ; red data
  00000039            00128                  gnew           ; green data
  0000003A            00129                  bnew           ; blue data
  0000003B            00130                  seqSwCnt       ; sequence switch counter
  0000003C            00131                  seqSwDblClk    ; seqence switch double click counter
  0000003D            00132                  saveCntPS      ; save to EERPOM counter prescaler
  0000003E            00133                  fadeTimer      ; fade rate timer counter
  0000003F            00134                  holdTimerPS    ; hold timer prescaler
  00000040            00135                  holdTimerHi    ; hold timer counter
                      00136 
  00000041            00137          base:6         ; eeprom save data buffer
  00000047            00138          saveCnt        ; save to EEPROM counter 
  00000048            00139                  savedSeqNo     ; saved Sequence No read from EEPROM
  00000049            00140                  freeze         ; SW1 run/freeze flag
  0000004A            00141                  ess            ; eeprom save state flag                                 
  0000004B            00142                  FSRsave        ; used to save FSR reg which is usedby two functions.
  0000004C            00143                  rpwm           ; red pwm level
  0000004D            00144                  gpwm           ; green pwm level
  0000004E            00145                  bpwm           ; blue pwm level
                      00146 
                      00147         endc
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00148 
                      00149 
                      00150 
                      00151                 
                      00152 ;----------------------------------------------------------
                      00153 ; program Constants - DO NOT change them
  000000B3            00154 cTIMER          equ             .179            ; Timer 0 constant 
                      00155                                                 ; for 5mS timer tick
                      00156 
  0000000A            00157 cHOLDPRESCALER  equ             .10             ; rgb hold counter prescaler
                      00158                                                 ; 5mS x Prescaler x holdtime
                      00159                                                                 
  00000008            00160 cSAVETIMER      equ             .8              ; time after last seq switch change
                      00161                                                 ; before saving to EEPROM
                      00162                                                 ; in increments of 1.28S
                      00163 
                      00164 ;----------------------------------------------------------
                      00165 ; GPIO port variables - DO NOT change them
  00000000            00166 red             equ             0               ;out
  00000001            00167 green           equ             1               ;out
  00000004            00168 blue            equ             4               ;out
  00000003            00169 gpio3           equ             3               ;in (only)
  00000002            00170 auxIn           equ             2               ;in
  00000005            00171 seqSw           equ             5               ;in
                      00172                 
                      00173 ;----------------------------------------------------------
                      00174 ;
                      00175 ;
                      00176 ; Bank Select macro instructions
                      00177 #define         setbank0        bcf             STATUS,RP0      ; Sel Bank 0
                      00178 #define         setbank1        bsf             STATUS,RP0      ; Sel Bank 1
                      00179                 
                      00180                 org 0x000
                      00181                 
                      00182                 include         rgb101g3_start.inc
                      00001 ; ******************************************************************************************************
                      00002 ; Initialisation and startup code block
                      00003 ; ------------------------------------------------------------------------------------------------------
                      00004 
0000                  00005 _startup
                      00006 
                      00007        
0000   0185           00008                 clrf            GPIO
                      00009  
0001   1683           00010                 setbank1                        ; switch to register bank 1
0002   30EC           00011                 movlw           ~(1<<red | 1<<green | 1<<blue ) ; Set up W for output bits
0003   0085           00012                 movwf           TRISIO
                      00013                 
                      00014   IFDEF OSCCAL                                  ; defined only for 12F629 / 675
0004   23FF           00015                 call            0x3FF           ; read factory oscillator calibration value
0005   0090           00016                 movwf           OSCCAL          ; write to OSCCAL register
                      00017                                                 ; If using a 12F629/675 this value must be present
                      00018                                                 ; and correct, or the code will not function properly
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00019                                                 ; if it functions at all.
                      00020   ENDIF
                      00021 
                      00022   IFDEF ADCpresent
                      00023                 clrf            ANSEL           ; Set ports for digital mode (12F675 / 12F683 only)
                      00024   ENDIF
                      00025                                 
0006   3005           00026                 movlw           b'00000101'     ;setup option register
                      00027                 ;                 ||||||||---- PS0 - Timer 0: Prescalar 1:64
                      00028                 ;                 |||||||----- PS1 - .......
                      00029                 ;                 ||||||------ PS2 - .......
                      00030                 ;                 |||||------- PSA -  Assign prescaler to Timer0
                      00031                 ;                 ||||-------- TOSE - LtoH edge          (Don't care)
                      00032                 ;                 |||--------- TOCS - Timer0 uses IntClk (Don't care)
                      00033                 ;                 ||---------- INTEDG - falling edge RB0 (Don't care)
                      00034                 ;                 |----------- GPPU - pull-ups enabled 
0007   0081           00035                 movwf           OPTION_REG
                      00036 
0008   1695           00037                 bsf             WPU,seqSw       ; enable weak-pull-up for seqSw input
0009   1515           00038                 bsf             WPU,auxIn       ; enable weak-pull-up on auxIn input
                      00039                                                 ; GPIO3 has no weak-pull-up feature
                      00040 
000A   1696           00041                 bsf             IOC,seqSw       ; Enable Interrupt-on-change for seqSw input
                      00042 
000B   1283           00043                 setbank0
                      00044                 
000C   3007           00045                 movlw           0x07            ; load W=7
                      00046   IFDEF __12F683
                      00047                 movwf           CMCON0          ; disable Comparator on 12F683
                      00048   ELSE
000D   0099           00049                 movwf           CMCON           ; disable Comparator on 12F675/627
                      00050   ENDIF
000E   158B           00051                 bsf             INTCON,GPIE     ; Enable Interrupt-on-change (to wake PIC from sleep)
                      00052 
                      00053                 ; Clear GPR memory
                      00054                 ; ---------------------------------------------------------------
                      00055                 
000F   3020           00056                 movlw           0x20            ; load W with address of first GPR memory
0010   0084           00057                 movwf           FSR             ; save in FSR indirection register
0011   00DF           00058                 movwf           0x5F            ; save a non-zero value to last GPR memory (addr 0x5F)
0012   0180           00059 _clrNext        clrf            INDF            ; clear contents of register pointed to by FSR
0013   0A84           00060                 incf            FSR,F           ; increment FSR
0014   08DF           00061                 movf            0x5F,F          ; Test value in last GPR memory location
0015   1D03           00062                 skpz                            ; skip next if last GPR has been cleared
0016   2???           00063                 goto            _clrNext        ; otherwise, repeat until done.
                      00064 
                      00065                 ; Initialise specific variables
                      00066                 ; ---------------------------------------------------------------
0017   2???           00067                 call            _advResetBase
0018   30B3           00068                 movlw           cTIMER
0019   0081           00069                 movwf           TMR0
001A   110B           00070                 bcf             INTCON,T0IF
001B   300A           00071                 movlw           cHOLDPRESCALER
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C   00BF           00072                 movwf           holdTimerPS
                      00073                 
                      00074 
                      00075                 ; ---------------------------------------------------------------
                      00076                 ; Find how many sequences are available
                      00077                 ; Get last sequence in use from EEPROM
                      00078                 ; verify it is equal to or less than available number of sequences
                      00079                 ; initialise current sequence data
                      00080                 
                      00081                 
001D   2???           00082 _findNoSeq      call            _advSeq         ; advance to next available sequence
001E   1D03 2???      00083                 bnz             _getSavedSeq    ; branch out if W != 0. Reached last sequence
0020   0AB5           00084                 incf            highSeqNo,F     ; else increment high sequence counter
0021   2???           00085                 goto            _findNoSeq      ; and repeat.
                      00086 
0022   2???           00087 _getSavedSeq    call            _readEEPROM      ; read saved sequence No from EEPROM
0023   1903 2???      00088         bz      _checksumOK
0025   2???           00089         call    _initEEPROM
0026   2???           00090         goto    _getSavedSeq    
                      00091 
0027   0848           00092 _checksumOK     movfw           savedSeqNo      ; write to saved Sequence No
0028   0235           00093                 subwf           highSeqNo,W     ; compare to highest available seq
0029   1C03           00094                 skpc                    ; branch if saved <= highest
002A   2???           00095                 call            _initEEPROM     ; and save to EEPROM
                      00096                 
                      00097                                 
002B   0848           00098 _compSeqNo      movfw           savedSeqNo      ; put saved sequence No into W reg
002C   0634           00099                 xorwf           currentSeqNo,W  ; compare to current sequence No
002D   1903 2???      00100                 bz              _seqSet         ; branch if match
002F   2???           00101                 call            _advSeq         ; else advance to next sequence
0030   2???           00102                 goto            _compSeqNo      ; and compare again
0031   2???           00103 _seqSet call            _seqData        ; initialise first sequence data
0032   1C49           00104         btfss   freeze,0        ; if freeze active, skip fade initialisation
0033   2???           00105         call            _fadeDir        ; initialise fade direction
                      00106               
0034   30FF           00107         movlw           0xFF            ; set LED drive to active Low    
                      00108 
                      00109 
                      00110   
0035   2???           00111                 goto            _pwmDriveHi       ; Go and run the main code
                      00183                 include         rgb101g3_func.inc
                      00001 ; ********************************************************************************
                      00002 ; RGB Stand-alone driver Functions include file
                      00003 
                      00004 ; Functions
                      00005 ; --------------------------------------------------------
                      00006 ;
                      00007 ;
                      00008 ;_pwmDrive      drive RGB LEDs with a PWM signal to control brightness
                      00009 ;               code loops continually.
                      00010 ;               Input on GPIO,4 determines whether active drive is high or low
                      00011 ;               The input is only read at power-on / reset.
                      00012 ;
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00013 ; _seqData      Loads next data block for current sequence
                      00014 ;               resets to start at end of data
                      00015 ;               no parameters. contents of W lost
                      00016 ;
                      00017 ; _advSeq       Advance to next sequence.
                      00018 ;               Set Sequence No counter
                      00019 ;               Reset to first seqence when it reaches end
                      00020 ;               of available sequences.
                      00021 ;               no parameters.
                      00022 ;               return W=1, reset to first sequence
                      00023 ;               teturn W=0, not reset to first sequence
                      00024 ;
                      00025 ;_advResetBase  Initialise sequence data pointer variables
                      00026 ;               no parameters, contents of W lost
                      00027 ;               
                      00028 ;_sleep         If Sequence switch held down for over 1.2S 
                      00029 ;               put PIC to sleep
                      00030 ;               no parameters, PIC resets after return from sleep
                      00031 ;
                      00032 ;_initEEPROM    Initialise EEPROM with valid default values
                      00033 ;               initiate save and wait until it has completed.               
                      00034 ;
                      00035 ;
                      00036 ;_essRun        EERPOM Save State function 
                      00037 ;               set ess variable == 1 to start save
                      00038 ;               ess == 0 save complete / idle               
                      00039 ;               ess == 2 save in progress
                      00040 ;               (this function calls other sub functions)
                      00041 ;
                      00042 ;
                      00043 ;_readEERPOM    Restore saved sequence state from EEPROM
                      00044 ;               no parameters
                      00045 ;               W destroyed
                      00046 ;               (this function calls other sub functions)
                      00047 ;
                      00048 ;------------------------------------------------
                      00049 ; PWM Driver 
                      00050 ; 
                      00051 ;
                      00052            
                      00053 
0036   0FAE           00054 _pwmDriveHi     incfsz          pwmramp,F
0037   2???           00055     goto            _noRolloverHi
0038   0AAE           00056     incf            pwmramp,F
                      00057                 
0039   084C           00058     movfw           rpwm
003A   00AA           00059     movwf           rpwmWkg
003B   0F2A           00060     incfsz          rpwmWkg,W
003C   1005           00061     bcf             GPIO,red
                      00062 
003D   084D           00063     movfw           gpwm
003E   00AB           00064     movwf           gpwmWkg
003F   0F2B           00065     incfsz          gpwmWkg,W
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0040   1085           00066     bcf             GPIO,green
                      00067 
0041   084E           00068     movfw           bpwm
0042   00AC           00069     movwf           bpwmWkg
0043   0F2C           00070     incfsz          bpwmWkg,W
0044   1205           00071     bcf             GPIO,blue
                      00072                 
0045   190B           00073     btfsc           INTCON,T0IF
0046   2???           00074     call            _timerOut
                      00075 
                      00076                 
0047   0AAA           00077 _noRolloverHi   incf            rpwmWkg,F
0048   1903           00078     skpnz
0049   1405           00079     bsf             GPIO,red
                      00080 
004A   0AAB           00081     incf            gpwmWkg,F
004B   1903           00082     skpnz
004C   1485           00083     bsf             GPIO,green
                      00084 
004D   0AAC           00085     incf            bpwmWkg,F
004E   1903           00086     skpnz
004F   1605           00087     bsf             GPIO,blue
                      00088                                 
0050   2???           00089     goto            _pwmDriveHi
                      00090 
                      00091 
                      00092 
                      00093 
                      00094 
                      00095 
                      00096 ;----------------------------------------------
                      00097 ; Cycle through single sequence.
                      00098 ;
0051   2???           00099 _seqData        call            _seqLookup      ; read data
0052   00B6           00100     movwf           rate            ; save in rate
0053   3E01           00101     addlw           .1              ; add 1 (test for 255)
0054   1903 2???      00102     bz              _seqRestart     ; if data was 255 reset seq
0056   3036           00103     movlw           rate            ; load W with address of rate var
0057   0084           00104     movwf           FSR             ; write to FSR
                      00105                 
0058   0A84           00106 _seqNxtData     incf            FSR,F           ; increment FSR
0059   0AB2           00107     incf            seql,F          ; increment seq pointer low
005A   1903           00108     skpnz                           ; skip if result != 0
005B   0AB3           00109     incf            seqh,f          ; increment seq pointer high
                      00110                 
005C   2???           00111     call            _seqLookup      ; read data
005D   0080           00112     movwf           INDF            ; save via Indirection 
005E   303A           00113     movlw           bnew            ; load W with address of blue new var
005F   0604           00114     xorwf           FSR,W           ; test if FSR == address of blue new var
0060   1D03 2???      00115     bnz             _seqNxtData     ; if not read next data byte
0062   0AB2           00116     incf            seql,F          ; otherwise increment seq data pointer
0063   1903           00117     skpnz                           ; ready for next
0064   0AB3           00118     incf            seqh,F          ; call to get seq data
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00119                 
0065   0008           00120     return
                      00121 
                      00122 
0066   0830           00123 _seqRestart     movfw           sbl             ; get sequence base low
0067   00B2           00124     movwf           seql            ; save to current sequence low
0068   0831           00125     movfw           sbh             ; get sequence base high
0069   00B3           00126     movwf           seqh            ; save to current seqence high
006A   2???           00127     goto            _seqData        ; load start of sequence
                      00128                 
006B   0833           00129 _seqLookup      movfw           seqh            ; data table lookup
006C   008A           00130     movwf           PCLATH
006D   0832           00131     movfw           seql
006E   0082           00132     movwf           PCL
                      00133                 
                      00134 ;----------------------------------------------
                      00135 ; Advance to next sequence (cycle)
                      00136 ;
006F   2???           00137 _advSeq         call            _advLookup      
0070   3E01           00138     addlw           0x01
0071   1903 2???      00139     bz              _advEnd
0073   3005           00140     movlw           0x05
0074   07B0           00141     addwf           sbl,f
0075   1803           00142     skpnc
0076   0AB1           00143     incf            sbh,f
0077   2???           00144     goto            _advSeq
                      00145                 
                      00146 
0078   0AB4           00147 _advEnd         incf            currentSeqNo,F
0079   0AB0           00148     incf            sbl,f
007A   1903           00149     skpnz
007B   0AB1           00150     incf            sbh,f
007C   2???           00151     call            _advLookup
007D   3E01           00152     addlw           0x01
007E   1903           00153     skpnz           
007F   2???           00154     goto            _advResetBase
0080   0830           00155     movfw           sbl
0081   00B2           00156     movwf           seql
0082   0831           00157     movfw           sbh
0083   00B3           00158     movwf           seqh
0084   0103           00159     clrw                            ; return with W = 0
0085   0008           00160     return
                      00161                 
                      00162                                 
0086   01B4           00163 _advResetBase   clrf            currentSeqNo
0087   30??           00164     movlw           HIGH _base
0088   00B1           00165     movwf           sbh
0089   00B3           00166     movwf           seqh
008A   30??           00167     movlw           LOW _base
008B   00B0           00168     movwf           sbl
008C   00B2           00169     movwf           seql
008D   38FF           00170     iorlw           0xFF            ; return with W != 0
008E   0008           00171     return
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00172 
                      00173                 ;-------------------------
                      00174                 ; lookup
008F   0831           00175 _advLookup      movfw           sbh
0090   008A           00176     movwf           PCLATH
0091   0830           00177     movfw           sbl
0092   0082           00178     movwf           PCL
                      00179 
                      00180 ;-------------------------------------------
                      00181 ; Fade Direction
                      00182 ; 
                      00183 
0093   0837           00184 _fadeDir        movfw           hold            ; Set hold timer
0094   00C0           00185     movwf           holdTimerHi
0095   0836           00186     movfw           rate            ; Set fade rate timer
0096   00BE           00187     movwf           fadeTimer       
0097   1D03 2???      00188     bnz             _calcFade       ; if fade rate == 0
0099   0838           00189     movfw           rnew            ; No fade so load
009A   00CC           00190     movwf           rpwm            ; pwm variables
009B   0839           00191     movfw           gnew            ; with new data
009C   00CD           00192     movwf           gpwm            ; to get instant
009D   083A           00193     movfw           bnew            ; colour change
009E   00CE           00194     movwf           bpwm            ; ...
009F   01AD           00195     clrf            fadeflag        ; clear fade flag so code goes straight to hold
00A0   0008           00196     return                          ; return
                      00197                 
                      00198 
                      00199 ;-------------------------------------------
                      00200 ; Calculate the difference between current and new
                      00201 ; PWM value for each colour. Set fade direction to +/-1
                      00202                 
                      00203                 
00A1   3013           00204 _calcFade       movlw           (1<<red | 1<<green | 1<<blue)
00A2   00AD           00205     movwf           fadeflag        ; preset fade flag
00A3   3001           00206     movlw           0x01            ; preset fade direction to +1 for each colour
00A4   00A0           00207     movwf           rdir
00A5   00A1           00208     movwf           gdir
00A6   00A2           00209     movwf           bdir
                      00210                 
00A7   084C           00211     movfw           rpwm
00A8   0238           00212     subwf           rnew,W          ; subtract current from new (W = current - new)
00A9   1803 2???      00213     bc              _rabs           ; branch if C=1  (current > new)
00AB   03A0           00214     decf            rdir,F          ; rdir is 1, decrement twice
00AC   03A0           00215     decf            rdir,F          ; to make rdir -1.
00AD   3C00           00216     sublw           0x00            ; sub W from 0 to make W positive
00AE   00A3           00217 _rabs           movwf           Rdif            ; save difference between current and new
                      00218 
                      00219 
00AF   084D           00220     movfw           gpwm
00B0   0239           00221     subwf           gnew,W          ; subtract current from new (W = current - new)
00B1   1803 2???      00222     bc              _gabs           ; branch if C=1  (current > new)
00B3   03A1           00223     decf            gdir,F          ; rdir is 1, decrement twice
00B4   03A1           00224     decf            gdir,F          ; to make rdir -1.
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B5   3C00           00225     sublw           0x00            ; sub W from 0 to make W positive
00B6   00A4           00226 _gabs           movwf           Gdif            ; save difference between current and new
                      00227 
00B7   084E           00228     movfw           bpwm
00B8   023A           00229     subwf           bnew,W          ; subtract current from new (W = current - new)
00B9   1803 2???      00230     bc              _babs           ; branch if C=1  (current > new)
00BB   03A2           00231     decf            bdir,F          ; rdir is 1, decrement twice
00BC   03A2           00232     decf            bdir,F          ; to make rdir -1.
00BD   3C00           00233     sublw           0x00            ; sub W from 0 to make W positive
00BE   00A5           00234 _babs           movwf           Bdif            ; save difference between current and new
                      00235 
                      00236 
                      00237 ;-------------------------------------------
                      00238 ; Find largest difference between current and new RGB values
                      00239 ;               
                      00240                 
00BF   0823           00241 _calcLargest    movfw           Rdif
00C0   0224           00242     subwf           Gdif,W
00C1   1803 2???      00243     bc              _chkGB
                      00244                 
00C3   0823           00245     movfw           Rdif
00C4   0225           00246     subwf           Bdif,W
00C5   0825           00247     movfw           Bdif
00C6   1803 2???      00248     bc              _done
00C8   0823           00249     movfw           Rdif
00C9   2???           00250     goto            _done
                      00251                 
00CA   0824           00252 _chkGB          movfw           Gdif
00CB   0225           00253     subwf           Bdif,W
00CC   0825           00254     movfw           Bdif
00CD   1C03           00255     skpc            
00CE   0824           00256     movfw           Gdif
                      00257 
00CF   3C00           00258 _done           sublw           0x00
00D0   00A9           00259     movwf           CntBase
00D1   00A6           00260     movwf           Rcnt
00D2   00A7           00261     movwf           Gcnt
00D3   00A8           00262     movwf           Bcnt
                      00263                 
00D4   0008           00264     return
                      00265                 
                      00266 
                      00267 
                      00268 ;-------------------------------------------
                      00269 ; Put PIC to sleep
                      00270 ; 
00D5   3001           00271 _sleep          movlw           .1
00D6   00CA           00272     movwf           ess             ; force EEPROM save to state to initialise
00D7   2???           00273     call            _initLoop       ; save to EERPROM
00D8   082F           00274     movfw       driveLevel
00D9   0085           00275     movwf       GPIO    ; turn off all outputs
                      00276                 
00DA   1E85           00277 _waitSwRelSleep btfss           GPIO,seqSw      ; test seqSw
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00DB   2???           00278     goto            _waitSwRelSleep ; wait for it to be released
00DC   300F           00279     movlw           .15
00DD   2???           00280     call            _swDelay
                      00281                                 
00DE   0805           00282     movfw           GPIO            ; read GPIO port to clear Int-on-change 
00DF   100B           00283     bcf             INTCON,GPIF     ; clear int-on-change flag
00E0   0063           00284     sleep                           ; put PIC to sleep
00E1   0000           00285     nop
                      00286 
00E2   305A           00287     movlw           .90             ; approx. 1 second delay
00E3   2???           00288     call            _swDelay        ; wait after wake up
00E4   1A85           00289     btfsc           GPIO,seqSw      ; test switch to see if it is still down
00E5   2???           00290     goto            _waitSwRelSleep ; if not go back to sleep
00E6   1E85           00291 _waitSwRelWake  btfss           GPIO,seqSw      ; wait for sequence switch to be 
00E7   2???           00292     goto            _waitSwRelWake  ; released before continuing
00E8   2???           00293     goto            _startup        ; After wake-up run startup code
                      00294                                                 ; as if it was a power-on startup
                      00295 
                      00296 
00E9   0181           00297 _swDelay        clrf            TMR0            ; delay to debounce the switch
00EA   110B           00298     bcf             INTCON,T0IF     ; 
00EB   1D0B           00299 _waitSleep      btfss           INTCON,T0IF     ; 
00EC   2???           00300     goto            _waitSleep
00ED   3EFF           00301     addlw           -.1
00EE   1D03           00302     skpz
00EF   2???           00303     goto            _swDelay
00F0   0008           00304     return
                      00305 
                      00306 ; *********************************
                      00307 ; EEPROM write
                      00308 ; call with W reg containg sequence # to save
                      00309 ;
00F1   1683           00310 _eeWrite        setbank1
00F2   009A           00311     movwf           EEDATA          ; save W into EEDATA
00F3   0A9B           00312     incf            EEADR,F
00F4   151C           00313     bsf             EECON1,WREN     ; initiate EEPROM write sequence
00F5   3055           00314     movlw           0x55
00F6   009D           00315     movwf           EECON2
00F7   30AA           00316     movlw           0xAA
00F8   009D           00317     movwf           EECON2
00F9   149C           00318     bsf             EECON1,WR
00FA   1283           00319                 setbank0
00FB   0008           00320     return                          ; return
                      00321               
                      00322 ; *********************************
                      00323 ; EEPROM read
                      00324 ; returns with saved sequence # in W reg
                      00325 
00FC   1683           00326 _eeRead         setbank1
00FD   0A9B           00327     incf            EEADR,F
00FE   141C           00328     bsf             EECON1,RD       ; initiate EEPROM read
00FF   081A           00329     movf            EEDATA,W        ; load EEPROM data into W
0100   1283           00330         setbank0
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0101   0008           00331     return                          ; return   
                      00332 
                      00333 
                      00334 
                      00335 ; *********************************
                      00336 ; Save state to EEPROM 
                      00337 ;
0102   0ACA           00338 _initEEPROM     incf            ess,F
0103   01C8           00339     clrf            savedSeqNo
0104   01B4           00340     clrf            currentSeqNo
0105   01C9           00341     clrf            freeze
0106   01CC           00342     clrf            rpwm
0107   01CD           00343     clrf            gpwm            
0108   01CE           00344     clrf            bpwm
0109   2???           00345 _initLoop       call            _essRun
010A   08CA           00346     movf            ess,F
010B   1D03 2???      00347     bnz             _initLoop
010D   0008           00348     return
                      00349 
                      00350 
010E   084A           00351 _essRun         movfw           ess             ; load state into W reg
010F   1903           00352     skpnz                           ; skip next if ess != 0
0110   0008           00353     return                          ; return (ess idle state)
0111   3EFF           00354     addlw           -.1             ; test if state == 1
0112   1903 2???      00355     bz              _essInit        ; run _essInit function if state == 1
                      00356                                                 ; else drop through and run _essSave
                      00357                 ; ess 2
                      00358                 ; 
0114   1683           00359 _essSave        setbank1
0115   081C           00360     movfw           EECON1          ; read EECON1 register into W
0116   1283           00361                 setbank0
0117   3902           00362     andlw           (1<<WR)         ; test EEPROM write flag
0118   1D03           00363     skpz                            ; skip if write complete
0119   0008           00364     return                          ; return if not
011A   0800           00365     movfw           INDF            ; get data to write using indirect address
                      00366 
011B   2???           00367     call            _eeWrite        ; start write
011C   0A84           00368     incf            FSR,F           ; increment indirect address pointer
011D   0804           00369     movfw           FSR             ; 
011E   3A47           00370     xorlw           (base+.6)       ; test if all data written
011F   1903           00371     skpnz                           ; skip next if not complete
0120   01CA           00372     clrf            ess             ; else reset state variable to 0 (idle)
0121   0008           00373     return                          ; and return
                      00374 
                      00375 
                      00376                 ; ess 1
                      00377                 ; copy variables to save into buffer area
0122   0834           00378 _essInit        movfw           currentSeqNo    ; get variable to save
0123   00C1           00379     movwf           base            ; write to base address
0124   00C6           00380     movwf           base+.5         ; base+5 holds checksum
0125   084C           00381     movfw           rpwm            ; get next variable to save
0126   00C2           00382     movwf           base+.1         ; write to base+1
0127   07C6           00383     addwf           base+.5,F       ; add to checksum
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0128   084D           00384     movfw           gpwm            ; et al.
0129   00C3           00385     movwf           base+.2
012A   07C6           00386     addwf           base+.5,F       ; add to checksum        
012B   084E           00387     movfw           bpwm
012C   00C4           00388     movwf           base+.3
012D   07C6           00389     addwf           base+.5,F       ; add to checksum
012E   0849           00390     movfw           freeze
012F   00C5           00391     movwf           base+.4
0130   0746           00392     addwf           base+.5,W       ; add to checksum
0131   3C00           00393     sublw           0x00
0132   00C6           00394     movwf           base+.5
                      00395                                 
0133   3041           00396     movlw           base            ; load W with address of base
0134   0084           00397     movwf           FSR             ; write to FSR indirect register
0135   1683           00398                 setbank1
0136   019B           00399     clrf            EEADR           ; set EEADR to 0
0137   1283           00400                 setbank0                
0138   0ACA           00401     incf            ess,F           ; set to next state
0139   0008           00402     return
                      00403 
                      00404 ; *********************************
                      00405 ; Swap FSR with FSRsave;
                      00406 
013A   0804           00407 _swapFSR        movfw           FSR
013B   06CB           00408     xorwf           FSRsave,F
013C   064B           00409     xorwf           FSRsave,W
013D   06CB           00410     xorwf           FSRsave,F
013E   0084           00411     movwf           FSR
013F   0008           00412     return          
                      00413 
                      00414 
                      00415 ; *********************************
                      00416 ; Restore state from EEPROM 
                      00417 ;
0140   1683           00418 _readEEPROM     setbank1
0141   189C           00419     btfsc           EECON1,WR
0142   2???           00420     goto            $-1
0143   019B           00421     clrf            EEADR
0144   2???           00422     call            _eeRead
0145   00C8           00423     movwf           savedSeqNo
0146   00C7           00424     movwf           saveCnt
                      00425                 
0147   2???           00426     call            _eeRead
0148   00CC           00427     movwf           rpwm
0149   07C7           00428     addwf           saveCnt,F
                      00429                 
014A   2???           00430     call            _eeRead
014B   00CD           00431     movwf           gpwm
014C   07C7           00432     addwf           saveCnt,F
                      00433 
014D   2???           00434     call            _eeRead
014E   00CE           00435     movwf           bpwm
014F   07C7           00436     addwf           saveCnt,F
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00437 
0150   2???           00438     call            _eeRead
0151   00C9           00439     movwf           freeze
0152   07C7           00440     addwf           saveCnt,F
                      00441 
0153   2???           00442     call            _eeRead
0154   0747           00443     addwf           saveCnt,W       ; returns with checksum in W
0155   0008           00444     return
                      00184                 include         rgb101g3_tout.inc
                      00001 ;--------------------------------------------------------
                      00002 ; 5mS Time Out
                      00003 ; This code runs approximately every 5mS
                      00004 ; The PWM code calls it at the end of each PWM cycle if TMR0 has
                      00005 ; overflowed.  Because the PWM code takes approximatley 4mS to run
                      00006 ; we add the current TMR0 contents to the cTIMER constant so that
                      00007 ; over a number of passes the average time-out is 5mS
                      00008 ; This method is accurate enough to get predicatable delays
                      00009 ; needed for this application.  However because the write to the timer
                      00010 ; clears the prescaler at some random point, it isn't accurate over
                      00011 ; many seconds or minutes.
                      00012  
                      00013 
0156   0801           00014 _timerOut       movfw           TMR0            ; load current TMR0 into W
0157   3EB3           00015                 addlw           cTIMER          ; add TIMER constant to W
0158   0081           00016                 movwf           TMR0            ; write back to TMR0
0159   110B           00017                 bcf             INTCON,T0IF     ; clear Timer 0 Interrupt flag
                      00018 
                      00019 ;-----------------------------------------------------
                      00020 ; EEPROM save counter
                      00021                                 
015A   2???           00022                 call            _swapFSR
015B   2???           00023                 call            _essRun
015C   2???           00024                 call            _swapFSR
                      00025                 
015D   08C7           00026                 movf            saveCnt,F
015E   1903 2???      00027                 bz              _switchCheck
0160   0BBD           00028                 decfsz          saveCntPS,F
0161   2???           00029                 goto            _switchCheck
0162   0BC7           00030                 decfsz          saveCnt,F
0163   2???           00031                 goto            _switchCheck
0164   3001           00032                 movlw           .1
0165   00CA           00033                 movwf           ess
                      00034 ;-----------------------------------------------------
                      00035 ; Sequence Switch Check
                      00036 
0166   08BC           00037 _switchCheck    movf            seqSwDblClk,F
0167   1D03           00038                 skpz
0168   03BC           00039                 decf            seqSwDblClk,F   
                      00040 
0169   1A85           00041                 btfsc           GPIO,seqSw
016A   2???           00042                 goto            _seqSwUp        
                      00043                                 
016B   0ABB           00044 _seqSwDown      incf            seqSwCnt,F      ; increment seqSwCnt counter variable
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

016C   1903           00045                 skpnz                           ; if result == 0, counter has wrapped round
016D   2???           00046                 goto            _sleep          ; so goto sleep
016E   2???           00047                 goto            _fadeState
                      00048 
016F   30FC           00049 _seqSwUp        movlw           -.4             ; 20mS
0170   073B           00050                 addwf           seqSwCnt,W      ; was switch down for over 20mS
0171   1803 2???      00051                 bc              _swShort
0173   01BB           00052                 clrf            seqSwCnt
0174   2???           00053                 goto            _fadeState
                      00054                 
                      00055 
0175   08BC           00056 _swShort        movf            seqSwDblClk,F
0176   1D03 2???      00057                 bnz             _swDoubleClick
                      00058                 
0178   01BB           00059                 clrf            seqSwCnt
0179   3001           00060                 movlw           0x01
017A   06C9           00061                 xorwf           freeze,F
017B   3064           00062                 movlw           .100
017C   00BC           00063                 movwf           seqSwDblClk
017D   3008           00064                 movlw           cSAVETIMER      ; set save to EEPROM timer
017E   00C7           00065                 movwf           saveCnt         ; for delay after last sequence change.
017F   2???           00066                 goto            _fadeState
                      00067 
                      00068 
0180   2???           00069 _swDoubleClick  call            _advSeq         ; advance to next sequence
0181   2???           00070                 call            _seqData        ; get first set of sequence data
0182   01CC           00071                 clrf            rpwm            ; reset current Red pwm to 0
0183   01CD           00072                 clrf            gpwm            ; reset current Greeb pwm to 0
0184   01CE           00073                 clrf            bpwm            ; reset current Blue pwm to 0
0185   2???           00074                 call            _fadeDir        ; set fade direction
0186   300A           00075                 movlw           cHOLDPRESCALER  ; reset hold time prescaler
0187   00BF           00076                 movwf           holdTimerPS
0188   01BB           00077                 clrf            seqSwCnt
0189   3008           00078                 movlw           cSAVETIMER      ; set save to EEPROM timer
018A   00C7           00079                 movwf           saveCnt         ; for delay after last sequence change.
018B   01BC           00080                 clrf            seqSwDblClk
018C   01C9           00081                 clrf            freeze
                      00082 
                      00083                                 
                      00084 
                      00085 ;-----------------------------------------------------
                      00086 ; fade / hold state function select
                      00087                 
018D   1849           00088 _fadeState      btfsc           freeze,0        
018E   0008           00089                 return
                      00090 
018F   08AD           00091                 movf            fadeflag,F
0190   1903 2???      00092                 bz              _holding
                      00093 ;------------------------------------------------------
                      00094 ; fade          
                      00095                 
0192   0BBE           00096 _fading         decfsz          fadeTimer,F
0193   0008           00097                 return
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0194   0836           00098                 movfw           rate
0195   00BE           00099                 movwf           fadeTimer
                      00100 
                      00101 ;----------------------------------------
                      00102 ; Fade stepper
                      00103 ;
                      00104 
0196   0838           00105 _Rfade          movfw           rnew
0197   064C           00106                 xorwf           rpwm,W
0198   1D03 2???      00107                 bnz             $+3
019A   102D           00108                 bcf             fadeflag,red
019B   2???           00109                 goto            _Gfade
                      00110 
019C   0823           00111                 movfw           Rdif
019D   07A6           00112                 addwf           Rcnt,F
019E   1C03           00113                 skpc            
019F   2???           00114                 goto            _Gfade
01A0   0829           00115                 movfw           CntBase
01A1   07A6           00116                 addwf           Rcnt,F
01A2   0820           00117                 movfw           rdir
01A3   07CC           00118                 addwf           rpwm,F
                      00119                 
01A4   0839           00120 _Gfade          movfw           gnew
01A5   064D           00121                 xorwf           gpwm,W
01A6   1D03 2???      00122                 bnz             $+3
01A8   10AD           00123                 bcf             fadeflag,green
01A9   2???           00124                 goto            _Bfade
                      00125 
01AA   0824           00126                 movfw           Gdif
01AB   07A7           00127                 addwf           Gcnt,F
01AC   1C03           00128                 skpc            
01AD   2???           00129                 goto            _Bfade
01AE   0829           00130                 movfw           CntBase
01AF   07A7           00131                 addwf           Gcnt,F
01B0   0821           00132                 movfw           gdir
01B1   07CD           00133                 addwf           gpwm,F
                      00134 
01B2   083A           00135 _Bfade          movfw           bnew
01B3   064E           00136                 xorwf           bpwm,W
01B4   1D03 2???      00137                 bnz             $+3
01B6   122D           00138                 bcf             fadeflag,blue
01B7   0008           00139                 return
                      00140                 
01B8   0825           00141                 movfw           Bdif
01B9   07A8           00142                 addwf           Bcnt,F
01BA   1C03           00143                 skpc            
01BB   0008           00144                 return          
01BC   0829           00145                 movfw           CntBase
01BD   07A8           00146                 addwf           Bcnt,F
01BE   0822           00147                 movfw           bdir
01BF   07CE           00148                 addwf           bpwm,F
01C0   0008           00149                 return
                      00150 
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00151 
                      00152 
                      00153 
                      00154 ;------------------------------------------------------
                      00155 ; Hold pwm values timer         
                      00156                 
01C1   08C0           00157 _holding        movf            holdTimerHi,F   ; test holdTimerHi == 0
01C2   1903 2???      00158                 bz              _holdSeqNext    ; no hold if it was 0
                      00159                 
01C4   0BBF           00160                 decfsz          holdTimerPS,F
01C5   0008           00161                 return
01C6   300A           00162                 movlw           cHOLDPRESCALER
01C7   00BF           00163                 movwf           holdTimerPS
01C8   0BC0           00164                 decfsz          holdTimerHi,F
01C9   0008           00165                 return
01CA   2???           00166 _holdSeqNext    call            _seqData
01CB   2???           00167                 call            _fadeDir
                      00168                 
01CC   0008           00169                 return
                      00170 
                      00185                 radix decimal
01CD                  00186 _base
                      00187                 include         SequenceData.inc
                      00001 ;
                      00002 
                      00003 ;       Sequence Data Format
                      00004 ; --------------------
                      00005 ;       fade_rate, hold_time, red, green, blue (all values in decimal)
                      00006 ;       values should be 0 <= value <= 255
                      00007 ;
                      00008 ;       End of current sequence
                      00009 ;       -----------------------
                      00010 ;       fade_rate = 255 tells code that this is then end of the current
                      00011 ;       sequence data.
                      00012 ;
                      00013 ;       End of all sequence data
                      00014 ;       ------------------------
                      00015 ;       fade_rate and hold_time = 255 tells the code that this is the end
                      00016 ;       of the current sequence data AND the end of all sequences.
                      00017 ;
                      00018 ;       Fade Rate
                      00019 ;       ---------
                      00020 ;       fade_rate = 0 --> no fade, new values update immediateley
                      00021 ;       fade_rate >0 and <255 fades from current to new values.
                      00022 ;       The colours fade from the current value to the new value
                      00023 ;       in steps of 1 (i.e. 0 to 100 requires 100 steps)
                      00024 ;       each step takes ~5mS x Fade Rate.
                      00025 ;
                      00026 ;       max fade time with increments of 5mS x fade_rate.
                      00027 ;         1 x 5mS x 255 = 1.27 secs
                      00028 ;         2 x 5mS x 255 = 2.50 secs
                      00029 ;         3 x 5mS x 255 = 3.85 secs
                      00030 ;         4 x 5mS x 255 = 5.10 secs
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00031 ;         5 x 5mS x 255 = 6.35 secs
                      00032 ;   6 x 5mS x 255 = 7.60 secs
                      00033 ;   ......
                      00034 ; 254 x 5mS x 255 = 3m23s
                      00035 ;
                      00036 ;       Hold Time
                      00037 ;       ---------
                      00038 ;       How long to hold the current RGB colours before getting
                      00039 ;       the next set of RGB values.
                      00040 ;       hold_time = 0 --> no hold, jump to next step in sequence
                      00041 ;       hold_time >0 and <255 hold for 50ms x hold_time
                      00042 ;       1   x 50mS = 50mS
                      00043 ;       254 x 50mS = 12.7 secs
                      00044 ;
                      00045 ;            |---------------------- Fade Rate
                      00046 ;      |    |----------------- Hold time
                      00047 ;      |    |    |------------ Red
                      00048 ;      |    |    |    |------- Green
                      00049 ;      |    |    |    |    |-- Blue
                      00050 ;      |    |    |    |    |
                      00051 
                      00052 
                      00053 ;;;;;;;;;;Original;;;;;;;;;;;;;;;;;;;;;;
                      00054 ;       dt   5,  2000, 255,  60,   0    ;1 Cam
                      00055 ;       dt   0,   5,   0,   0,   0
                      00056 ;       dt   5,  2000, 255,  48,   0    ;2
                      00057 ;       dt   0,   5,   0,   0,   0
                      00058 ;       dt   5,  2000, 255,  36,   0    ;3
                      00059 ;       dt   0,   5,   0,   0,   0
                      00060 ;       dt   5,  2000, 255,  24,   0    ;4
                      00061 ;       dt   0,   5,   0,   0,   0
                      00062 ;       dt   5,  2000, 255,  12,   0    ;5
                      00063 ;       dt   0,   5,   0,   0,   0
                      00064 ;       
                      00065 ;
                      00066 ;       dt   5,  2000, 255,   6,   0    ;1 Bordaux
                      00067 ;       dt   0,   5,   0,   0,   0
                      00068 ;       dt   5,  2000, 255,   4,   0    ;2
                      00069 ;       dt   0,   5,   0,   0,   0
                      00070 ;       dt   5,  2000, 255,   2,   0    ;3
                      00071 ;       dt   0,   5,   0,   0,   0
                      00072 ;
                      00073 ;       dt   5,  2000, 255,   0,   0    ;1 Hong
                      00074 ;       dt   0,   5,   0,   0,   0
                      00075 ;       dt   5,  2000, 255,   0,   5    ;2
                      00076 ;       dt   0,   5,   0,   0,   0
                      00077 ;       dt   5,  2000, 255,   0,  10    ;3
                      00078 ;       dt   0,   5,   0,   0,   0
                      00079 ;       dt   5,  2000, 255,   0,  15    ;4
                      00080 ;       dt   0,   5,   0,   0,   0
                      00081 ;       dt   5,  2000, 255,   0,  20    ;5
                      00082 ;       dt   0,   5,   0,   0,   0
                      00083 ;       dt   5,  2000, 255,   0,  25    ;6
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00084 ;       dt   0,   5,   0,   0,   0
                      00085 ;       dt   5,  2000, 255,   0,  30    ;7
                      00086 ;       dt   0,   5,   0,   0,   0
                      00087 ;
                      00088 ;       dt   5,  2000, 255,   0,  40    ;1 
                      00089 ;       dt   0,   5,   0,   0,   0
                      00090 ;       dt   5,  2000, 255,   0,  83    ;2
                      00091 ;       dt   0,   5,   0,   0,   0
                      00092 ;       dt   5,  2000, 255,   0, 126    ;3
                      00093 ;       dt   0,   5,   0,   0,   0
                      00094 ;       dt   5,  2000, 255,   0, 169    ;4
                      00095 ;       dt   0,   5,   0,   0,   0
                      00096 ;       dt   5,  2000, 255,   0, 212    ;5
                      00097 ;       dt   0,   5,   0,   0,   0
                      00098 ;
                      00099 ;       dt   5,  2000, 255,   0, 255    ;1
                      00100 ;       dt   0,   5,   0,   0,   0
                      00101 ;       dt   5,  2000, 204,   0, 255    ;2
                      00102 ;       dt   0,   5,   0,   0,   0
                      00103 ;       dt   5,  2000, 153,   0, 255    ;3
                      00104 ;       dt   0,   5,   0,   0,   0
                      00105 ;       dt   5,  2000, 102,   0, 255    ;4
                      00106 ;       dt   0,   5,   0,   0,   0
                      00107 ;       dt   5,  2000,  51,   0, 255    ;5
                      00108 ;       dt   0,   5,   0,   0,   0
                      00109 ;
                      00110 ;       dt   5,  2000,   0,   0, 255    ;1
                      00111 ;       dt   0,   5,   0,   0,   0
                      00112 ;       dt   5,  2000,   0,  51, 255    ;2
                      00113 ;       dt   0,   5,   0,   0,   0
                      00114 ;       dt   5,  2000,   0, 102, 255    ;3
                      00115 ;       dt   0,   5,   0,   0,   0
                      00116 ;       dt   5,  2000,   0, 153, 255    ;4
                      00117 ;       dt   0,   5,   0,   0,   0
                      00118 ;       dt   5,  2000,   0, 204, 255    ;5
                      00119 ;       dt   0,   5,   0,   0,   0
                      00120 ;
                      00121 ;       dt   5,  2000,   0, 255, 255    ;1
                      00122 ;       dt   0,   5,   0,   0,   0
                      00123 ;       dt   5,  2000,   0, 255, 204    ;2
                      00124 ;       dt   0,   5,   0,   0,   0
                      00125 ;       dt   5,  2000,   0, 255, 153    ;3
                      00126 ;       dt   0,   5,   0,   0,   0
                      00127 ;       dt   5,  2000,   0, 255, 102    ;4
                      00128 ;       dt   0,   5,   0,   0,   0
                      00129 ;       dt   5,  2000,   0, 255,  51    ;5
                      00130 ;       dt   0,   5,   0,   0,   0
                      00131 ;
                      00132 ;       dt   5,  2000,   0, 255,   0    ;1
                      00133 ;       dt   0,   5,   0,   0,   0
                      00134 ;       dt   5,  2000,  51, 255,   0    ;2
                      00135 ;       dt   0,   5,   0,   0,   0
                      00136 ;       dt   5,  2000, 102, 255,   0    ;3
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00137 ;       dt   0,   5,   0,   0,   0
                      00138 ;       dt   5,  2000, 153, 255,   0    ;4
                      00139 ;       dt   0,   5,   0,   0,   0
                      00140 ;       dt   5,  2000, 204, 255,   0    ;5
                      00141 ;       dt   0,   5,   0,   0,   0
                      00142 ;       
                      00143 ;       dt   5,  2000, 255, 255,   0    ;1
                      00144 ;       dt   0,   5,   0,   0,   0
                      00145 ;       dt   5,  2000, 255, 220,   0    ;2
                      00146 ;       dt   0,   5,   0,   0,   0
                      00147 ;       dt   5,  2000, 255, 186,   0    ;3
                      00148 ;       dt   0,   5,   0,   0,   0
                      00149 ;       dt   5,  2000, 255, 151,   0    ;4
                      00150 ;       dt   0,   5,   0,   0,   0
                      00151 ;       dt   5,  2000, 255, 117,   0    ;5
                      00152 ;       dt   0,   5,   0,   0,   0
                      00153 ;
                      00154 ;       dt   5,  2000, 255,  83,   0    ;1
                      00155 ;       dt   0,   5,   0,   0,   0
                      00156 ;       dt   5,  2000, 255,  78,   0    ;2
                      00157 ;       dt   0,   5,   0,   0,   0
                      00158 ;       dt   5,  2000, 255,  73,   0    ;3
                      00159 ;       dt   0,   5,   0,   0,   0
                      00160 ;       dt   5,  2000, 255,  69,   0    ;4
                      00161 ;       dt   0,   5,   0,   0,   0
                      00162 ;       dt   5,  2000, 255,  64,   0    ;5
                      00163 ;       dt   0,   5,   0,   0,   0
                      00164 ;;;;;;;;;;;Original;;;;;;;;;;;;;;;;;;;;;;
                      00165 ;
                      00166 ;
                      00167 ;       dt   5,  2000, 214,   0, 147    ;1
                      00168 ;       dt   0,   5,   0,   0,   0
                      00169 ;       dt   5,  2000, 181,   0, 122    ;2
                      00170 ;       dt   0,   5,   0,   0,   0
                      00171 ;       dt   5,  2000, 148,   0,  98    ;3
                      00172 ;       dt   0,   5,   0,   0,   0
                      00173 ;       dt   5,  2000, 115,   0,  73    ;4
                      00174 ;       dt   0,   5,   0,   0,   0
                      00175 ;       dt   5,  2000,  82,   0,  49    ;5
                      00176 ;       dt   0,   5,   0,   0,   0
                      00177 
Warning[202]: Argument out of range.  Least significant bits used.
01CD   3405 34D0 34FF 00178         dt   5,  2000, 255,   0,  25    ;6
       3400 3419 
01D2   3400 3405 3400 00179         dt   0,   5,   0,   0,   0
       3400 3400 
                      00180         
Warning[202]: Argument out of range.  Least significant bits used.
01D7   3405 34D0 3400 00181         dt   5,  2000,   0, 255, 102    ;4
       34FF 3466 
01DC   3400 3405 3400 00182         dt   0,   5,   0,   0,   0
       3400 3400 
                      00183         
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[202]: Argument out of range.  Least significant bits used.
01E1   3405 34D0 34FF 00184         dt   5,  2000, 255,  60,   0    ;1 Cam
       343C 3400 
01E6   3400 3405 3400 00185         dt   0,   5,   0,   0,   0
       3400 3400 
                      00186         
Warning[202]: Argument out of range.  Least significant bits used.
01EB   3405 34D0 34FF 00187         dt   5,  2000, 255,   4,   0    ;2
       3404 3400 
01F0   3400 3405 3400 00188         dt   0,   5,   0,   0,   0
       3400 3400 
                      00189         
Warning[202]: Argument out of range.  Least significant bits used.
01F5   3405 34D0 34FF 00190         dt   5,  2000, 255,  48,   0    ;2
       3430 3400 
01FA   3400 3405 3400 00191         dt   0,   5,   0,   0,   0
       3400 3400 
                      00192         
Warning[202]: Argument out of range.  Least significant bits used.
01FF   3405 34D0 3400 00193         dt   5,  2000,   0, 102, 255    ;3
       3466 34FF 
0204   3400 3405 3400 00194         dt   0,   5,   0,   0,   0
       3400 3400 
                      00195         
Warning[202]: Argument out of range.  Least significant bits used.
0209   3405 34D0 34D6 00196         dt   5,  2000, 214,   0, 147    ;1
       3400 3493 
020E   3400 3405 3400 00197         dt   0,   5,   0,   0,   0
       3400 3400 
                      00198         
Warning[202]: Argument out of range.  Least significant bits used.
0213   3405 34D0 3452 00199         dt   5,  2000,  82,   0,  49    ;5
       3400 3431 
0218   3400 3405 3400 00200         dt   0,   5,   0,   0,   0
       3400 3400 
                      00201         
Warning[202]: Argument out of range.  Least significant bits used.
021D   3405 34D0 34FF 00202         dt   5,  2000, 255,   2,   0    ;3
       3402 3400 
0222   3400 3405 3400 00203         dt   0,   5,   0,   0,   0
       3400 3400 
                      00204         
Warning[202]: Argument out of range.  Least significant bits used.
0227   3405 34D0 34FF 00205         dt   5,  2000, 255,   0, 126    ;3
       3400 347E 
022C   3400 3405 3400 00206         dt   0,   5,   0,   0,   0
       3400 3400 
                      00207         
Warning[202]: Argument out of range.  Least significant bits used.
0231   3405 34D0 34FF 00208         dt   5,  2000, 255,   6,   0    ;1 Bordaux
       3406 3400 
0236   3400 3405 3400 00209         dt   0,   5,   0,   0,   0
       3400 3400 
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00210         
Warning[202]: Argument out of range.  Least significant bits used.
023B   3405 34D0 34FF 00211         dt   5,  2000, 255, 151,   0    ;4
       3497 3400 
0240   3400 3405 3400 00212         dt   0,   5,   0,   0,   0
       3400 3400 
                      00213         
Warning[202]: Argument out of range.  Least significant bits used.
0245   3405 34D0 3400 00214         dt   5,  2000,   0, 255,   0    ;1
       34FF 3400 
024A   3400 3405 3400 00215         dt   0,   5,   0,   0,   0
       3400 3400 
                      00216         
Warning[202]: Argument out of range.  Least significant bits used.
024F   3405 34D0 34FF 00217         dt   5,  2000, 255,  36,   0    ;3
       3424 3400 
0254   3400 3405 3400 00218         dt   0,   5,   0,   0,   0
       3400 3400 
                      00219         
Warning[202]: Argument out of range.  Least significant bits used.
0259   3405 34D0 34FF 00220         dt   5,  2000, 255,  83,   0    ;1
       3453 3400 
025E   3400 3405 3400 00221         dt   0,   5,   0,   0,   0
       3400 3400 
                      00222         
Warning[202]: Argument out of range.  Least significant bits used.
0263   3405 34D0 34FF 00223         dt   5,  2000, 255,  73,   0    ;3
       3449 3400 
0268   3400 3405 3400 00224         dt   0,   5,   0,   0,   0
       3400 3400 
                      00225         
Warning[202]: Argument out of range.  Least significant bits used.
026D   3405 34D0 3400 00226         dt   5,  2000,   0, 255,  51    ;5
       34FF 3433 
0272   3400 3405 3400 00227         dt   0,   5,   0,   0,   0
       3400 3400 
                      00228         
Warning[202]: Argument out of range.  Least significant bits used.
0277   3405 34D0 3499 00229         dt   5,  2000, 153,   0, 255    ;3
       3400 34FF 
027C   3400 3405 3400 00230         dt   0,   5,   0,   0,   0
       3400 3400 
                      00231         
Warning[202]: Argument out of range.  Least significant bits used.
0281   3405 34D0 34FF 00232         dt   5,  2000, 255,  12,   0    ;5
       340C 3400 
0286   3400 3405 3400 00233         dt   0,   5,   0,   0,   0
       3400 3400 
                      00234         
Warning[202]: Argument out of range.  Least significant bits used.
028B   3405 34D0 34FF 00235         dt   5,  2000, 255, 186,   0    ;3
       34BA 3400 
0290   3400 3405 3400 00236         dt   0,   5,   0,   0,   0
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3400 3400 
                      00237         
Warning[202]: Argument out of range.  Least significant bits used.
0295   3405 34D0 34FF 00238         dt   5,  2000, 255,   0,   5    ;2
       3400 3405 
029A   3400 3405 3400 00239         dt   0,   5,   0,   0,   0
       3400 3400 
                      00240         
Warning[202]: Argument out of range.  Least significant bits used.
029F   3405 34D0 34B5 00241         dt   5,  2000, 181,   0, 122    ;2
       3400 347A 
02A4   3400 3405 3400 00242         dt   0,   5,   0,   0,   0
       3400 3400 
                      00243         
Warning[202]: Argument out of range.  Least significant bits used.
02A9   3405 34D0 3433 00244         dt   5,  2000,  51, 255,   0    ;2
       34FF 3400 
02AE   3400 3405 3400 00245         dt   0,   5,   0,   0,   0
       3400 3400 
                      00246         
Warning[202]: Argument out of range.  Least significant bits used.
02B3   3405 34D0 3466 00247         dt   5,  2000, 102,   0, 255    ;4
       3400 34FF 
02B8   3400 3405 3400 00248         dt   0,   5,   0,   0,   0
       3400 3400 
                      00249         
Warning[202]: Argument out of range.  Least significant bits used.
02BD   3405 34D0 34CC 00250         dt   5,  2000, 204, 255,   0    ;5
       34FF 3400 
02C2   3400 3405 3400 00251         dt   0,   5,   0,   0,   0
       3400 3400 
                      00252         
Warning[202]: Argument out of range.  Least significant bits used.
02C7   3405 34D0 34FF 00253         dt   5,  2000, 255,   0, 255    ;1
       3400 34FF 
02CC   3400 3405 3400 00254         dt   0,   5,   0,   0,   0
       3400 3400 
                      00255         
Warning[202]: Argument out of range.  Least significant bits used.
02D1   3405 34D0 34FF 00256         dt   5,  2000, 255,   0,  20    ;5
       3400 3414 
02D6   3400 3405 3400 00257         dt   0,   5,   0,   0,   0
       3400 3400 
                      00258         
Warning[202]: Argument out of range.  Least significant bits used.
02DB   3405 34D0 34FF 00259         dt   5,  2000, 255,   0,   0    ;1 Hong
       3400 3400 
02E0   3400 3405 3400 00260         dt   0,   5,   0,   0,   0
       3400 3400 
                      00261         
Warning[202]: Argument out of range.  Least significant bits used.
02E5   3405 34D0 34FF 00262         dt   5,  2000, 255,   0,  15    ;4
       3400 340F 
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02EA   3400 3405 3400 00263         dt   0,   5,   0,   0,   0
       3400 3400 
                      00264         
Warning[202]: Argument out of range.  Least significant bits used.
02EF   3405 34D0 3499 00265         dt   5,  2000, 153, 255,   0    ;4
       34FF 3400 
02F4   3400 3405 3400 00266         dt   0,   5,   0,   0,   0
       3400 3400 
                      00267         
Warning[202]: Argument out of range.  Least significant bits used.
02F9   3405 34D0 34FF 00268         dt   5,  2000, 255, 220,   0    ;2
       34DC 3400 
02FE   3400 3405 3400 00269         dt   0,   5,   0,   0,   0
       3400 3400 
                      00270         
Warning[202]: Argument out of range.  Least significant bits used.
0303   3405 34D0 34FF 00271         dt   5,  2000, 255,   0, 212    ;5
       3400 34D4 
0308   3400 3405 3400 00272         dt   0,   5,   0,   0,   0
       3400 3400 
                      00273         
Warning[202]: Argument out of range.  Least significant bits used.
030D   3405 34D0 3400 00274         dt   5,  2000,   0, 255, 255    ;1
       34FF 34FF 
0312   3400 3405 3400 00275         dt   0,   5,   0,   0,   0
       3400 3400 
                      00276         
Warning[202]: Argument out of range.  Least significant bits used.
0317   3405 34D0 3433 00277         dt   5,  2000,  51,   0, 255    ;5
       3400 34FF 
031C   3400 3405 3400 00278         dt   0,   5,   0,   0,   0
       3400 3400 
                      00279         
Warning[202]: Argument out of range.  Least significant bits used.
0321   3405 34D0 34FF 00280         dt   5,  2000, 255,  78,   0    ;2
       344E 3400 
0326   3400 3405 3400 00281         dt   0,   5,   0,   0,   0
       3400 3400 
                      00282         
Warning[202]: Argument out of range.  Least significant bits used.
032B   3405 34D0 3400 00283         dt   5,  2000,   0, 153, 255    ;4
       3499 34FF 
0330   3400 3405 3400 00284         dt   0,   5,   0,   0,   0
       3400 3400 
                      00285         
Warning[202]: Argument out of range.  Least significant bits used.
0335   3405 34D0 3400 00286         dt   5,  2000,   0, 255, 204    ;2
       34FF 34CC 
033A   3400 3405 3400 00287         dt   0,   5,   0,   0,   0
       3400 3400 
                      00288         
Warning[202]: Argument out of range.  Least significant bits used.
033F   3405 34D0 34FF 00289         dt   5,  2000, 255,   0,  10    ;3
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3400 340A 
0344   3400 3405 3400 00290         dt   0,   5,   0,   0,   0
       3400 3400 
                      00291         
Warning[202]: Argument out of range.  Least significant bits used.
0349   3405 34D0 34FF 00292         dt   5,  2000, 255, 117,   0    ;5
       3475 3400 
034E   3400 3405 3400 00293         dt   0,   5,   0,   0,   0
       3400 3400 
                      00294         
Warning[202]: Argument out of range.  Least significant bits used.
0353   3405 34D0 34FF 00295         dt   5,  2000, 255,  69,   0    ;4
       3445 3400 
0358   3400 3405 3400 00296         dt   0,   5,   0,   0,   0
       3400 3400 
                      00297         
Warning[202]: Argument out of range.  Least significant bits used.
035D   3405 34D0 34CC 00298         dt   5,  2000, 204,   0, 255    ;2
       3400 34FF 
0362   3400 3405 3400 00299         dt   0,   5,   0,   0,   0
       3400 3400 
                      00300         
Warning[202]: Argument out of range.  Least significant bits used.
0367   3405 34D0 3400 00301         dt   5,  2000,   0,  51, 255    ;2
       3433 34FF 
036C   3400 3405 3400 00302         dt   0,   5,   0,   0,   0
       3400 3400 
                      00303         
Warning[202]: Argument out of range.  Least significant bits used.
0371   3405 34D0 3466 00304         dt   5,  2000, 102, 255,   0    ;3
       34FF 3400 
0376   3400 3405 3400 00305         dt   0,   5,   0,   0,   0
       3400 3400 
                      00306         
Warning[202]: Argument out of range.  Least significant bits used.
037B   3405 34D0 34FF 00307         dt   5,  2000, 255, 255,   0    ;1
       34FF 3400 
0380   3400 3405 3400 00308         dt   0,   5,   0,   0,   0
       3400 3400 
                      00309         
Warning[202]: Argument out of range.  Least significant bits used.
0385   3405 34D0 3400 00310         dt   5,  2000,   0, 255, 153    ;3
       34FF 3499 
038A   3400 3405 3400 00311         dt   0,   5,   0,   0,   0
       3400 3400 
                      00312         
Warning[202]: Argument out of range.  Least significant bits used.
038F   3405 34D0 34FF 00313         dt   5,  2000, 255,   0,  83    ;2
       3400 3453 
0394   3400 3405 3400 00314         dt   0,   5,   0,   0,   0
       3400 3400 
                      00315         
Warning[202]: Argument out of range.  Least significant bits used.
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0399   3405 34D0 3400 00316         dt   5,  2000,   0, 204, 255    ;5
       34CC 34FF 
039E   3400 3405 3400 00317         dt   0,   5,   0,   0,   0
       3400 3400 
                      00318         
Warning[202]: Argument out of range.  Least significant bits used.
03A3   3405 34D0 34FF 00319         dt   5,  2000, 255,   0,  30    ;7
       3400 341E 
03A8   3400 3405 3400 00320         dt   0,   5,   0,   0,   0
       3400 3400 
                      00321         
Warning[202]: Argument out of range.  Least significant bits used.
03AD   3405 34D0 3473 00322         dt   5,  2000, 115,   0,  73    ;4
       3400 3449 
03B2   3400 3405 3400 00323         dt   0,   5,   0,   0,   0
       3400 3400 
                      00324         
Warning[202]: Argument out of range.  Least significant bits used.
03B7   3405 34D0 3494 00325         dt   5,  2000, 148,   0,  98    ;3
       3400 3462 
03BC   3400 3405 3400 00326         dt   0,   5,   0,   0,   0
       3400 3400 
                      00327         
Warning[202]: Argument out of range.  Least significant bits used.
03C1   3405 34D0 34FF 00328         dt   5,  2000, 255,  64,   0    ;5
       3440 3400 
03C6   3400 3405 3400 00329         dt   0,   5,   0,   0,   0
       3400 3400 
                      00330         
Warning[202]: Argument out of range.  Least significant bits used.
03CB   3405 34D0 34FF 00331         dt   5,  2000, 255,   0, 169    ;4
       3400 34A9 
03D0   3400 3405 3400 00332         dt   0,   5,   0,   0,   0
       3400 3400 
                      00333         
Warning[202]: Argument out of range.  Least significant bits used.
03D5   3405 34D0 34FF 00334         dt   5,  2000, 255,   0,  40    ;1 
       3400 3428 
03DA   3400 3405 3400 00335         dt   0,   5,   0,   0,   0
       3400 3400 
                      00336         
Warning[202]: Argument out of range.  Least significant bits used.
03DF   3405 34D0 34FF 00337         dt   5,  2000, 255,  24,   0    ;4
       3418 3400 
03E4   3400 3405 3400 00338         dt   0,   5,   0,   0,   0
       3400 3400 
                      00339         
Warning[202]: Argument out of range.  Least significant bits used.
03E9   3405 34D0 3400 00340         dt   5,  2000,   0,   0, 255    ;1
       3400 34FF 
03EE   3400 3405 3400 00341         dt   0,   5,   0,   0,   0
       3400 3400 
                      00342         
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00343 
03F3   34FF           00344         dt 255          ; 
03F4   34FF           00345         dt 255          ; end of all data
                      00346 
                      00347 
                      00188 
                      00189 ;               ------------------------------------------------------------------------
                      00190                 ; Embed code revision into program memory
                      00191                 ;dt "rgb101g3_main.asm 14/09/2010 R3.0.3"  
                      00192                 ; dt "(c) Pete Griffiths 2006-2010 "
                      00193                 ;dt "info@picprojects.org.uk"
                      00194 ;               ------------------------------------------------------------------------
                      00195                 
                      00196                 ;fill 00, 0x3FF-$
                      00197                 
3FA4                  00198                 end
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 29


SYMBOL TABLE
  LABEL                             VALUE 

ADIE                              00000006
ADIF                              00000006
Bcnt                              00000028
Bdif                              00000025
C                                 00000000
CAL0                              00000002
CAL1                              00000003
CAL2                              00000004
CAL3                              00000005
CAL4                              00000006
CAL5                              00000007
CINV                              00000004
CIS                               00000003
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             00000019
CMIE                              00000003
CMIF                              00000003
COUT                              00000006
CntBase                           00000029
DC                                00000001
EEADR                             0000009B
EECON1                            0000009C
EECON2                            0000009D
EEDAT                             0000009A
EEDATA                            0000009A
EEIE                              00000007
EEIF                              00000007
F                                 00000001
FSR                               00000004
FSRsave                           0000004B
GIE                               00000007
GP0                               00000000
GP1                               00000001
GP2                               00000002
GP3                               00000003
GP4                               00000004
GP5                               00000005
GPIE                              00000003
GPIF                              00000000
GPIO                              00000005
GPIO0                             00000000
GPIO1                             00000001
GPIO2                             00000002
GPIO3                             00000003
GPIO4                             00000004
GPIO5                             00000005
Gcnt                              00000027
Gdif                              00000024
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 30


SYMBOL TABLE
  LABEL                             VALUE 

INTEDG                            00000006
INTF                              00000001
IOC                               00000096
IOC0                              00000000
IOC1                              00000001
IOC2                              00000002
IOC3                              00000003
IOC4                              00000004
IOC5                              00000005
IOCB                              00000096
IOCB0                             00000000
IOCB1                             00000001
IOCB2                             00000002
IOCB3                             00000003
IOCB4                             00000004
IOCB5                             00000005
IRP                               00000007
NOT_BOD                           00000000
NOT_BOR                           00000000
NOT_GPPU                          00000007
NOT_PD                            00000003
NOT_POR                           00000001
NOT_T1SYNC                        00000002
NOT_TO                            00000004
OPTION_REG                        00000081
OSCCAL                            00000090
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PIE1                              0000008C
PIR1                              0000000C
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
RD                                00000000
RP0                               00000005
RP1                               00000006
Rcnt                              00000026
Rdif                              00000023
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1IE                              00000000
T1IF                              00000000
T1OSCEN                           00000003
TMR0                              00000001
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 31


SYMBOL TABLE
  LABEL                             VALUE 

TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1GE                            00000006
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TRISIO                            00000085
TRISIO0                           00000000
TRISIO1                           00000001
TRISIO2                           00000002
TRISIO3                           00000003
TRISIO4                           00000004
TRISIO5                           00000005
VR0                               00000000
VR1                               00000001
VR2                               00000002
VR3                               00000003
VRCON                             00000099
VREN                              00000007
VRR                               00000005
W                                 00000000
WPU                               00000095
WPU0                              00000000
WPU1                              00000001
WPU2                              00000002
WPU4                              00000004
WPU5                              00000005
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_.org_0_0142                      00000142
_.org_0_0199                      00000199
_.org_0_01A7                      000001A7
_.org_0_01B5                      000001B5
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_Bfade                            000001B2
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_OFF                           00003FFF
_CP_ON                            00003F7F
_DEVID1                           00002006
_EC_OSC                           00003FFB
_EXTRC_OSC_CLKOUT                 00003FFF
_EXTRC_OSC_NOCLKOUT               00003FFE
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 32


SYMBOL TABLE
  LABEL                             VALUE 

_FOSC_EC                          00003FFB
_FOSC_EXTRCCLK                    00003FFF
_FOSC_EXTRCIO                     00003FFE
_FOSC_HS                          00003FFA
_FOSC_INTRCCLK                    00003FFD
_FOSC_INTRCIO                     00003FFC
_FOSC_LP                          00003FF8
_FOSC_XT                          00003FF9
_Gfade                            000001A4
_HS_OSC                           00003FFA
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_INTRC_OSC_CLKOUT                 00003FFD
_INTRC_OSC_NOCLKOUT               00003FFC
_LP_OSC                           00003FF8
_MCLRE_OFF                        00003FDF
_MCLRE_ON                         00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FEF
_Rfade                            00000196
_WDTE_OFF                         00003FF7
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FF7
_WDT_ON                           00003FFF
_XT_OSC                           00003FF9
__12F629                          00000001
_advEnd                           00000078
_advLookup                        0000008F
_advResetBase                     00000086
_advSeq                           0000006F
_babs                             000000BE
_base                             000001CD
_calcFade                         000000A1
_calcLargest                      000000BF
_checksumOK                       00000027
_chkGB                            000000CA
_clrNext                          00000012
_compSeqNo                        0000002B
_done                             000000CF
_eeRead                           000000FC
_eeWrite                          000000F1
_essInit                          00000122
_essRun                           0000010E
_essSave                          00000114
_fadeDir                          00000093
_fadeState                        0000018D
_fading                           00000192
_findNoSeq                        0000001D
_gabs                             000000B6
_getSavedSeq                      00000022
_holdSeqNext                      000001CA
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 33


SYMBOL TABLE
  LABEL                             VALUE 

_holding                          000001C1
_initEEPROM                       00000102
_initLoop                         00000109
_noRolloverHi                     00000047
_pwmDriveHi                       00000036
_rabs                             000000AE
_readEEPROM                       00000140
_seqData                          00000051
_seqLookup                        0000006B
_seqNxtData                       00000058
_seqRestart                       00000066
_seqSet                           00000031
_seqSwDown                        0000016B
_seqSwUp                          0000016F
_sleep                            000000D5
_startup                          00000000
_swDelay                          000000E9
_swDoubleClick                    00000180
_swShort                          00000175
_swapFSR                          0000013A
_switchCheck                      00000166
_timerOut                         00000156
_waitSleep                        000000EB
_waitSwRelSleep                   000000DA
_waitSwRelWake                    000000E6
auxIn                             00000002
base                              00000041
bdir                              00000022
blue                              00000004
bnew                              0000003A
bpwm                              0000004E
bpwmWkg                           0000002C
cHOLDPRESCALER                    0000000A
cSAVETIMER                        00000008
cTIMER                            000000B3
currentSeqNo                      00000034
driveLevel                        0000002F
ess                               0000004A
fadeTimer                         0000003E
fadeflag                          0000002D
freeze                            00000049
gdir                              00000021
gnew                              00000039
gpio3                             00000003
gpwm                              0000004D
gpwmWkg                           0000002B
green                             00000001
highSeqNo                         00000035
hold                              00000037
holdTimerHi                       00000040
holdTimerPS                       0000003F
pwmramp                           0000002E
rate                              00000036
MPASM 5.66                 RGB101G3_MAIN.ASM   4-30-2016  17:56:44         PAGE 34


SYMBOL TABLE
  LABEL                             VALUE 

rdir                              00000020
red                               00000000
rnew                              00000038
rpwm                              0000004C
rpwmWkg                           0000002A
saveCnt                           00000047
saveCntPS                         0000003D
savedSeqNo                        00000048
sbh                               00000031
sbl                               00000030
seqSw                             00000005
seqSwCnt                          0000003B
seqSwDblClk                       0000003C
seqh                              00000033
seql                              00000032
setbank0                          bcf             STATUS,RP0
setbank1                          bsf             STATUS,RP0

Errors   :     0
Warnings :    55 reported,     0 suppressed
Messages :     0 reported,    19 suppressed

