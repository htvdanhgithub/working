
# 1 "Calling_systemV1.c"

# 12 "C:\Program Files\HI-TECH Software\PICC\9.83\include\stdio.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 31 "C:\Program Files\HI-TECH Software\PICC\9.83\include\stdarg.h"
typedef void * va_list[1];

#pragma inline(__va_start)
extern void * __va_start(void);

#pragma inline(__va_arg)
extern void * __va_arg(void *, ...);

# 27 "C:\Program Files\HI-TECH Software\PICC\9.83\include\stdio.h"
extern int errno;

# 58
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files\HI-TECH Software\PICC\9.83\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 103 "C:\Program Files\HI-TECH Software\PICC\9.83\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);

# 195
extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list);
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 27 "C:\Program Files\HI-TECH Software\PICC\9.83\include\stdlib.h"
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 65
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);

# 106
extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);

# 122
extern void abort(void);
extern void exit(int);
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

# 145
extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);
extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

# 81 "C:\Program Files\HI-TECH Software\PICC\9.83\include\pic16f628a.h"
volatile unsigned char INDF @ 0x000;



volatile unsigned char TMR0 @ 0x001;



volatile unsigned char PCL @ 0x002;



volatile unsigned char STATUS @ 0x003;

volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit nPD @ ((unsigned)&STATUS*8)+3;
volatile bit nTO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;

# 123
volatile unsigned char FSR @ 0x004;



volatile unsigned char PORTA @ 0x005;

volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA7 @ ((unsigned)&PORTA*8)+7;

# 153
volatile unsigned char PORTB @ 0x006;

volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;

# 179
volatile unsigned char PCLATH @ 0x00A;

# 190
volatile unsigned char INTCON @ 0x00B;

volatile bit RBIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit TMR0IF @ ((unsigned)&INTCON*8)+2;
volatile bit TMR0IE @ ((unsigned)&INTCON*8)+5;

# 224
volatile unsigned char PIR1 @ 0x00C;

volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit CMIF @ ((unsigned)&PIR1*8)+6;
volatile bit EEIF @ ((unsigned)&PIR1*8)+7;

# 258
volatile unsigned char TMR1L @ 0x00E;



volatile unsigned char TMR1H @ 0x00F;



volatile unsigned int TMR1 @ 0x00E;


volatile unsigned char T1CON @ 0x010;

volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit nT1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;

# 295
volatile unsigned char TMR2 @ 0x011;



volatile unsigned char T2CON @ 0x012;

volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;

# 329
volatile unsigned char CCPR1L @ 0x015;



volatile unsigned char CCPR1H @ 0x016;



volatile unsigned int CCPR1 @ 0x015;


volatile unsigned char CCP1CON @ 0x017;

volatile bit CCP1Y @ ((unsigned)&CCP1CON*8)+4;
volatile bit CCP1X @ ((unsigned)&CCP1CON*8)+5;
volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;

# 365
volatile unsigned char RCSTA @ 0x018;

volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
volatile bit ADEN @ ((unsigned)&RCSTA*8)+3;
volatile bit CREN @ ((unsigned)&RCSTA*8)+4;
volatile bit SREN @ ((unsigned)&RCSTA*8)+5;
volatile bit RX9 @ ((unsigned)&RCSTA*8)+6;
volatile bit SPEN @ ((unsigned)&RCSTA*8)+7;
volatile bit ADDEN @ ((unsigned)&RCSTA*8)+3;

# 396
volatile unsigned char TXREG @ 0x019;



volatile unsigned char RCREG @ 0x01A;



volatile unsigned char CMCON @ 0x01F;

volatile bit CIS @ ((unsigned)&CMCON*8)+3;
volatile bit C1INV @ ((unsigned)&CMCON*8)+4;
volatile bit C2INV @ ((unsigned)&CMCON*8)+5;
volatile bit C1OUT @ ((unsigned)&CMCON*8)+6;
volatile bit C2OUT @ ((unsigned)&CMCON*8)+7;
volatile bit CM0 @ ((unsigned)&CMCON*8)+0;
volatile bit CM1 @ ((unsigned)&CMCON*8)+1;
volatile bit CM2 @ ((unsigned)&CMCON*8)+2;

# 438
volatile unsigned char OPTION_REG @ 0x081;

volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit nRBPU @ ((unsigned)&OPTION_REG*8)+7;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;

# 467
volatile unsigned char TRISA @ 0x085;

volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;

# 493
volatile unsigned char TRISB @ 0x086;

volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;

# 519
volatile unsigned char PIE1 @ 0x08C;

volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit CMIE @ ((unsigned)&PIE1*8)+6;
volatile bit EEIE @ ((unsigned)&PIE1*8)+7;

# 544
volatile unsigned char PCON @ 0x08E;

volatile bit nBOR @ ((unsigned)&PCON*8)+0;
volatile bit nPOR @ ((unsigned)&PCON*8)+1;
volatile bit OSCF @ ((unsigned)&PCON*8)+3;
volatile bit nBO @ ((unsigned)&PCON*8)+0;
volatile bit nBOD @ ((unsigned)&PCON*8)+0;

# 569
volatile unsigned char PR2 @ 0x092;



volatile unsigned char TXSTA @ 0x098;

volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
volatile bit BRGH @ ((unsigned)&TXSTA*8)+2;
volatile bit SYNC @ ((unsigned)&TXSTA*8)+4;
volatile bit TXEN @ ((unsigned)&TXSTA*8)+5;
volatile bit TX9 @ ((unsigned)&TXSTA*8)+6;
volatile bit CSRC @ ((unsigned)&TXSTA*8)+7;

# 598
volatile unsigned char SPBRG @ 0x099;



volatile unsigned char EEDATA @ 0x09A;



volatile unsigned char EEADR @ 0x09B;



volatile unsigned char EECON1 @ 0x09C;

volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;

# 628
volatile unsigned char EECON2 @ 0x09D;



volatile unsigned char VRCON @ 0x09F;

volatile bit VRR @ ((unsigned)&VRCON*8)+5;
volatile bit VROE @ ((unsigned)&VRCON*8)+6;
volatile bit VREN @ ((unsigned)&VRCON*8)+7;
volatile bit VR0 @ ((unsigned)&VRCON*8)+0;
volatile bit VR1 @ ((unsigned)&VRCON*8)+1;
volatile bit VR2 @ ((unsigned)&VRCON*8)+2;
volatile bit VR3 @ ((unsigned)&VRCON*8)+3;


# 27 "C:\Program Files\HI-TECH Software\PICC\9.83\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 80
extern unsigned int flash_read(unsigned short addr);

# 144
extern void flash_erase(unsigned short addr);

# 41 "C:\Program Files\HI-TECH Software\PICC\9.83\include\eeprom_routines.h"
extern unsigned char eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, eeprom unsigned char *from, unsigned char size);
extern void memcpyee(eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 153 "C:\Program Files\HI-TECH Software\PICC\9.83\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 16 "Calling_systemV1.c"
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0xDFFF & 0xFFFB & 0xFFF7 & 0xFFFC & 0xFFFF & 0xFF7F & 0xFEFF");

# 31
unsigned char unit[5] = {0, 0, 0, 0, 0};
unsigned char ten[5] = {0, 0, 0, 0, 0};
unsigned char flick[5] = {0, 0, 0, 0, 0};
unsigned char timeout[5] = {0, 0, 0, 0, 0};
unsigned char visible[5] = {1, 1, 1, 1, 1};

unsigned char curNorIndex = 0;
unsigned char curViewIndex = 0;
unsigned char numNorCount = 0;
unsigned char curTick = 0, curFlipFlopTick = 0;
unsigned char mode = 0;
unsigned char moved = 0;
unsigned char prioritized = 0;

void Init(void)
{

OSCF = 1;


T0IE = 0;

T1OSCEN = 0;


VREN = 0;


CMIE = 0;

TRISA = 0b00100000;

TRISB = 0b00011111;

RB5 = 0;


nRBPU = 0;


RBIE = 1;


PEIE = 1;


GIE = 1;
}
unsigned char tmp;

void Display(unsigned char num, unsigned char pos)
{
switch(num)
{
case 0:
if(pos == 0)
{
RB6 = RB7 = 0;
PORTA = 0b01000000;
RB7 = 1;
}
else
{
RB6 = RB7 = 0;
PORTA = 0b01000000;
RB6 = 1;

}
break;
case 1:
if(pos == 0)
{
RB6 = RB7 = 0;
PORTA = 0b11100111;
RB7 = 1;
}
else
{
RB6 = RB7 = 0;
PORTA = 0b11100111;
RB6 = 1;

}
break;
case 2:
if(pos == 0)
{
RB6 = RB7 = 0;
PORTA = 0b10010000;
RB7 = 1;
}
else
{
RB6 = RB7 = 0;
PORTA = 0b10010000;
RB6 = 1;

}
break;
case 3:
if(pos == 0)
{
RB6 = RB7 = 0;
PORTA = 0b10100001;
RB7 = 1;
}
else
{
RB6 = RB7 = 0;
PORTA = 0b10100001;
RB6 = 1;

}
break;
case 4:
if(pos == 0)
{
RB6 = RB7 = 0;
PORTA = 0b00100111;
RB7 = 1;
}
else
{
RB6 = RB7 = 0;
PORTA = 0b00100111;
RB6 = 1;

}
break;
case 5:
if(pos == 0)
{
RB6 = RB7 = 0;
PORTA = 0b00101001;
RB7 = 1;
}
else
{
RB6 = RB7 = 0;
PORTA = 0b00101001;
RB6 = 1;

}
break;
case 6:
if(pos == 0)
{
RB6 = RB7 = 0;
PORTA = 0b00101000;
RB7 = 1;
}
else
{
RB6 = RB7 = 0;
PORTA = 0b00101000;
RB6 = 1;

}
break;
case 7:
if(pos == 0)
{
RB6 = RB7 = 0;
PORTA = 0b11100011;
RB7 = 1;
}
else
{
RB6 = RB7 = 0;
PORTA = 0b11100011;
RB6 = 1;

}
break;
case 8:
if(pos == 0)
{
RB6 = RB7 = 0;
PORTA = 0b00000000;
RB7 = 1;
}
else
{
RB6 = RB7 = 0;
PORTA = 0b00000000;
RB6 = 1;

}
break;
case 9:
if(pos == 0)
{
RB6 = RB7 = 0;
PORTA = 0b00000001;
RB7 = 1;
}
else
{
RB6 = RB7 = 0;
PORTA = 0b00000001;
RB6 = 1;

}
break;
}
}
void InsertNewIndex(unsigned char num)
{
unsigned char t_unit = num%10;
unsigned char t_ten = num/10;

for(unsigned char i = 0; i < numNorCount; i++)
{
if(t_unit != unit[i])
{
continue;
}
if(t_ten != ten[i])
{
continue;
}

flick[i] = 3;
timeout[i] = 60;

return;
}

if(numNorCount == 0)
{
numNorCount++;
}
else if(numNorCount == 5)
{
unsigned char i;
for(i = 0; i < numNorCount - 1; i++)
{
unit[i] = unit[i + 1];
ten[i] = ten[i + 1];
flick[i] = flick[i + 1];
timeout[i] = timeout[i + 1];

if(curViewIndex == i + 1)
{
curViewIndex--;
moved = 1;
}
}
if(curViewIndex == 0)
{
moved = 1;
}
}
else
{
curNorIndex++;
numNorCount++;
}

unit[curNorIndex] = t_unit;
ten[curNorIndex] = t_ten;
flick[curNorIndex] = 3;
timeout[curNorIndex] = 60;

if(prioritized == 0)
{
moved = 1;
curViewIndex = curNorIndex;
}

if(numNorCount == 1)
{
{RB5 = 1; _delay((unsigned long)((30)*(4000000/4000.0))); RB5 = 0;};
}
else
{
if(moved == 1)
{
if(flick[curViewIndex] == 3)
{
{RB5 = 1; _delay((unsigned long)((30)*(4000000/4000.0))); RB5 = 0;};
}
}
}

}
unsigned char GetNextIndex(unsigned char index)
{
if(numNorCount == 0)
{
return index;
}
if(index == numNorCount - 1)
{
return 0;
}
else
{
return index + 1;
}
}
void DisplayIndex(unsigned char index)
{
unsigned char j;
curFlipFlopTick++;
if(curFlipFlopTick == 10)
{
curFlipFlopTick = 0;
if(flick[curViewIndex] > 0)
{
visible[curViewIndex] = (visible[curViewIndex] == 0) ? 1: 0;
}
else
{
visible[curViewIndex] = 1;
}
}

curTick++;
if(curTick == 50)
{
curTick = 0;

if(flick[curViewIndex] > 0)
{
flick[curViewIndex]--;
prioritized = 1;
return;
}
prioritized = 0;

if(numNorCount == 0)
{
if(timeout[0] == 0)
{
curNorIndex = 0;
curViewIndex = 0;
unit[0] = 0;
ten[0] = 0;
timeout[0] = 0;
}
else
{
timeout[0]--;
}
}
else
{
for(unsigned char i = 0; i < numNorCount; i++)
{
if(timeout[i] == 0)
{
if(i == curViewIndex)
{
moved = 1;
}
for(j = i; j < numNorCount - 1; j++)
{
if(curViewIndex == j + 1)
{
curViewIndex = j;
moved = 1;
}
unit[j] = unit[j + 1];
ten[j] = ten[j + 1];
flick[j] = flick[j + 1];
timeout[j] = timeout[j + 1];
}
numNorCount--;
curNorIndex = numNorCount - 1;

}
else
{
timeout[i]--;
}

}

}
if(moved == 1)
{
if(flick[curViewIndex] == 3)
{
{RB5 = 1; _delay((unsigned long)((30)*(4000000/4000.0))); RB5 = 0;};
}
moved = 0;
}
else
{
curViewIndex = GetNextIndex(curViewIndex);

if(flick[curViewIndex] == 3)
{
{RB5 = 1; _delay((unsigned long)((30)*(4000000/4000.0))); RB5 = 0;};
}

}

# 436
}

if(visible[curViewIndex] == 1)
{
Display(unit[index], 0);
_delay((unsigned long)((10)*(4000000/4000.0)));
Display(ten[index], 1);
_delay((unsigned long)((10)*(4000000/4000.0)));

}
else
{
RB6 = RB7 = 0;
_delay((unsigned long)((20)*(4000000/4000.0)));
}

# 460
}
void main(void)
{
Init();

while(1)
{
DisplayIndex(curViewIndex);

}

# 487
}
static void interrupt Interrupt_Handler(void)
{
if(RBIF == 1)
{
if(RB4 == 1)
{
InsertNewIndex(PORTB & 0b00001111);
}
RBIF = 0;
}

}
