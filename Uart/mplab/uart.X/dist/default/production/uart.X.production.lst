

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Aug 14 12:35:29 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     	;# 
    35  0001                     	;# 
    36  0002                     	;# 
    37  0003                     	;# 
    38  0004                     	;# 
    39  0005                     	;# 
    40  0006                     	;# 
    41  0007                     	;# 
    42  0008                     	;# 
    43  0009                     	;# 
    44  000A                     	;# 
    45  000B                     	;# 
    46  000C                     	;# 
    47  000E                     	;# 
    48  0011                     	;# 
    49  0012                     	;# 
    50  0015                     	;# 
    51  0016                     	;# 
    52  0016                     	;# 
    53  0017                     	;# 
    54  0018                     	;# 
    55  0019                     	;# 
    56  001A                     	;# 
    57  001B                     	;# 
    58  001C                     	;# 
    59  001E                     	;# 
    60  001F                     	;# 
    61  008C                     	;# 
    62  008E                     	;# 
    63  0091                     	;# 
    64  0092                     	;# 
    65  0095                     	;# 
    66  0096                     	;# 
    67  0097                     	;# 
    68  0098                     	;# 
    69  0099                     	;# 
    70  009A                     	;# 
    71  009B                     	;# 
    72  009B                     	;# 
    73  009C                     	;# 
    74  009D                     	;# 
    75  009E                     	;# 
    76  010C                     	;# 
    77  010E                     	;# 
    78  0111                     	;# 
    79  0112                     	;# 
    80  0113                     	;# 
    81  0114                     	;# 
    82  0115                     	;# 
    83  0116                     	;# 
    84  0117                     	;# 
    85  0118                     	;# 
    86  0119                     	;# 
    87  011A                     	;# 
    88  011B                     	;# 
    89  011D                     	;# 
    90  011D                     	;# 
    91  018C                     	;# 
    92  018E                     	;# 
    93  0191                     	;# 
    94  0191                     	;# 
    95  0192                     	;# 
    96  0193                     	;# 
    97  0193                     	;# 
    98  0193                     	;# 
    99  0194                     	;# 
   100  0195                     	;# 
   101  0196                     	;# 
   102  0199                     	;# 
   103  019A                     	;# 
   104  019B                     	;# 
   105  019B                     	;# 
   106  019B                     	;# 
   107  019B                     	;# 
   108  019C                     	;# 
   109  019C                     	;# 
   110  019D                     	;# 
   111  019E                     	;# 
   112  019F                     	;# 
   113  020C                     	;# 
   114  020E                     	;# 
   115  0211                     	;# 
   116  0211                     	;# 
   117  0212                     	;# 
   118  0212                     	;# 
   119  0213                     	;# 
   120  0213                     	;# 
   121  0214                     	;# 
   122  0214                     	;# 
   123  0215                     	;# 
   124  0215                     	;# 
   125  0215                     	;# 
   126  0216                     	;# 
   127  0216                     	;# 
   128  0217                     	;# 
   129  0217                     	;# 
   130  0291                     	;# 
   131  0291                     	;# 
   132  0292                     	;# 
   133  0293                     	;# 
   134  0294                     	;# 
   135  0295                     	;# 
   136  0295                     	;# 
   137  0296                     	;# 
   138  0391                     	;# 
   139  0392                     	;# 
   140  0393                     	;# 
   141  039A                     	;# 
   142  039C                     	;# 
   143  039D                     	;# 
   144  039E                     	;# 
   145  039F                     	;# 
   146  0FE4                     	;# 
   147  0FE5                     	;# 
   148  0FE6                     	;# 
   149  0FE7                     	;# 
   150  0FE8                     	;# 
   151  0FE9                     	;# 
   152  0FEA                     	;# 
   153  0FEB                     	;# 
   154  0FED                     	;# 
   155  0FEE                     	;# 
   156  0FEF                     	;# 
   157  0000                     	;# 
   158  0001                     	;# 
   159  0002                     	;# 
   160  0003                     	;# 
   161  0004                     	;# 
   162  0005                     	;# 
   163  0006                     	;# 
   164  0007                     	;# 
   165  0008                     	;# 
   166  0009                     	;# 
   167  000A                     	;# 
   168  000B                     	;# 
   169  000C                     	;# 
   170  000E                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  008C                     	;# 
   185  008E                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0098                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  010C                     	;# 
   200  010E                     	;# 
   201  0111                     	;# 
   202  0112                     	;# 
   203  0113                     	;# 
   204  0114                     	;# 
   205  0115                     	;# 
   206  0116                     	;# 
   207  0117                     	;# 
   208  0118                     	;# 
   209  0119                     	;# 
   210  011A                     	;# 
   211  011B                     	;# 
   212  011D                     	;# 
   213  011D                     	;# 
   214  018C                     	;# 
   215  018E                     	;# 
   216  0191                     	;# 
   217  0191                     	;# 
   218  0192                     	;# 
   219  0193                     	;# 
   220  0193                     	;# 
   221  0193                     	;# 
   222  0194                     	;# 
   223  0195                     	;# 
   224  0196                     	;# 
   225  0199                     	;# 
   226  019A                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019C                     	;# 
   232  019C                     	;# 
   233  019D                     	;# 
   234  019E                     	;# 
   235  019F                     	;# 
   236  020C                     	;# 
   237  020E                     	;# 
   238  0211                     	;# 
   239  0211                     	;# 
   240  0212                     	;# 
   241  0212                     	;# 
   242  0213                     	;# 
   243  0213                     	;# 
   244  0214                     	;# 
   245  0214                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0216                     	;# 
   250  0216                     	;# 
   251  0217                     	;# 
   252  0217                     	;# 
   253  0291                     	;# 
   254  0291                     	;# 
   255  0292                     	;# 
   256  0293                     	;# 
   257  0294                     	;# 
   258  0295                     	;# 
   259  0295                     	;# 
   260  0296                     	;# 
   261  0391                     	;# 
   262  0392                     	;# 
   263  0393                     	;# 
   264  039A                     	;# 
   265  039C                     	;# 
   266  039D                     	;# 
   267  039E                     	;# 
   268  039F                     	;# 
   269  0FE4                     	;# 
   270  0FE5                     	;# 
   271  0FE6                     	;# 
   272  0FE7                     	;# 
   273  0FE8                     	;# 
   274  0FE9                     	;# 
   275  0FEA                     	;# 
   276  0FEB                     	;# 
   277  0FED                     	;# 
   278  0FEE                     	;# 
   279  0FEF                     	;# 
   280  0000                     	;# 
   281  0001                     	;# 
   282  0002                     	;# 
   283  0003                     	;# 
   284  0004                     	;# 
   285  0005                     	;# 
   286  0006                     	;# 
   287  0007                     	;# 
   288  0008                     	;# 
   289  0009                     	;# 
   290  000A                     	;# 
   291  000B                     	;# 
   292  000C                     	;# 
   293  000E                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  001E                     	;# 
   306  001F                     	;# 
   307  008C                     	;# 
   308  008E                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0098                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010E                     	;# 
   324  0111                     	;# 
   325  0112                     	;# 
   326  0113                     	;# 
   327  0114                     	;# 
   328  0115                     	;# 
   329  0116                     	;# 
   330  0117                     	;# 
   331  0118                     	;# 
   332  0119                     	;# 
   333  011A                     	;# 
   334  011B                     	;# 
   335  011D                     	;# 
   336  011D                     	;# 
   337  018C                     	;# 
   338  018E                     	;# 
   339  0191                     	;# 
   340  0191                     	;# 
   341  0192                     	;# 
   342  0193                     	;# 
   343  0193                     	;# 
   344  0193                     	;# 
   345  0194                     	;# 
   346  0195                     	;# 
   347  0196                     	;# 
   348  0199                     	;# 
   349  019A                     	;# 
   350  019B                     	;# 
   351  019B                     	;# 
   352  019B                     	;# 
   353  019B                     	;# 
   354  019C                     	;# 
   355  019C                     	;# 
   356  019D                     	;# 
   357  019E                     	;# 
   358  019F                     	;# 
   359  020C                     	;# 
   360  020E                     	;# 
   361  0211                     	;# 
   362  0211                     	;# 
   363  0212                     	;# 
   364  0212                     	;# 
   365  0213                     	;# 
   366  0213                     	;# 
   367  0214                     	;# 
   368  0214                     	;# 
   369  0215                     	;# 
   370  0215                     	;# 
   371  0215                     	;# 
   372  0216                     	;# 
   373  0216                     	;# 
   374  0217                     	;# 
   375  0217                     	;# 
   376  0291                     	;# 
   377  0291                     	;# 
   378  0292                     	;# 
   379  0293                     	;# 
   380  0294                     	;# 
   381  0295                     	;# 
   382  0295                     	;# 
   383  0296                     	;# 
   384  0391                     	;# 
   385  0392                     	;# 
   386  0393                     	;# 
   387  039A                     	;# 
   388  039C                     	;# 
   389  039D                     	;# 
   390  039E                     	;# 
   391  039F                     	;# 
   392  0FE4                     	;# 
   393  0FE5                     	;# 
   394  0FE6                     	;# 
   395  0FE7                     	;# 
   396  0FE8                     	;# 
   397  0FE9                     	;# 
   398  0FEA                     	;# 
   399  0FEB                     	;# 
   400  0FED                     	;# 
   401  0FEE                     	;# 
   402  0FEF                     	;# 
   403                           
   404                           	psect	idataBANK0
   405  03C3                     __pidataBANK0:	
   406                           
   407                           ;initializer for ___cgram
   408  03C3  340C               	retlw	12
   409  03C4  3412               	retlw	18
   410  03C5  3412               	retlw	18
   411  03C6  340C               	retlw	12
   412  03C7  3400               	retlw	0
   413  03C8  3400               	retlw	0
   414  03C9  3400               	retlw	0
   415  03CA  3400               	retlw	0
   416                           
   417                           ;initializer for LCDWriteInt@F2516
   418  03CB  34F0               	retlw	240
   419  03CC  34F0               	retlw	240
   420  03CD  34F0               	retlw	240
   421  03CE  34F0               	retlw	240
   422  03CF  34F0               	retlw	240
   423                           
   424                           ;initializer for _srecv
   425  03D0  3452               	retlw	82
   426  03D1  3465               	retlw	101
   427  03D2  3463               	retlw	99
   428  03D3  3476               	retlw	118
   429  03D4  3400               	retlw	0
   430  03D5  3400               	retlw	0
   431  03D6  3400               	retlw	0
   432  03D7  3400               	retlw	0
   433  03D8  3400               	retlw	0
   434  03D9  3400               	retlw	0
   435                           
   436                           ;initializer for _ssend
   437  03DA  3453               	retlw	83
   438  03DB  3465               	retlw	101
   439  03DC  346E               	retlw	110
   440  03DD  3464               	retlw	100
   441  03DE  3400               	retlw	0
   442  03DF  3400               	retlw	0
   443  03E0  3400               	retlw	0
   444  03E1  3400               	retlw	0
   445  03E2  3400               	retlw	0
   446  03E3  3400               	retlw	0
   447  000B                     _INTCONbits	set	11
   448  000E                     _PORTC	set	14
   449  005F                     _GIE	set	95
   450  005E                     _PEIE	set	94
   451  0064                     _RA4	set	100
   452  0065                     _RA5	set	101
   453  0070                     _RC0	set	112
   454  0071                     _RC1	set	113
   455  008D                     _RCIF	set	141
   456  008C                     _TXIF	set	140
   457  0095                     _OPTION_REGbits	set	149
   458  0099                     _OSCCONbits	set	153
   459  008C                     _TRISAbits	set	140
   460  008E                     _TRISC	set	142
   461  008E                     _TRISCbits	set	142
   462  048D                     _RCIE	set	1165
   463  0460                     _TRISA0	set	1120
   464  0461                     _TRISA1	set	1121
   465  08EF                     _RXDTSEL	set	2287
   466  08EA                     _TXCKSEL	set	2282
   467  018C                     _ANSELAbits	set	396
   468  0199                     _RCREG	set	409
   469  019D                     _RCSTAbits	set	413
   470  019B                     _SPBRG	set	411
   471  019A                     _TXREG	set	410
   472  019E                     _TXSTAbits	set	414
   473  0CFB                     _BRG16	set	3323
   474  0CF2                     _BRGH	set	3314
   475                           
   476                           	psect	stringtext
   477  041C                     __pstringtext:	
   478  041C                     STR_1:	
   479  041C  3461               	retlw	97	;'a'
   480  041D  3462               	retlw	98	;'b'
   481  041E  3400               	retlw	0
   482                           
   483                           ; #config settings
   484  0000                     
   485                           	psect	cinit
   486  0018                     start_initialization:	
   487  0018                     __initialization:	
   488                           
   489                           ; Clear objects allocated to COMMON
   490  0018  01F6               	clrf	__pbssCOMMON& (0+127)
   491  0019  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   492                           
   493                           ; Clear objects allocated to BANK0
   494  001A  01E0               	clrf	__pbssBANK0& (0+127)
   495  001B  01E1               	clrf	(__pbssBANK0+1)& (0+127)
   496  001C  01E2               	clrf	(__pbssBANK0+2)& (0+127)
   497  001D  01E3               	clrf	(__pbssBANK0+3)& (0+127)
   498  001E  01E4               	clrf	(__pbssBANK0+4)& (0+127)
   499                           
   500                           ; Clear objects allocated to BANK1
   501  001F  30A0               	movlw	low __pbssBANK1
   502  0020  0084               	movwf	4
   503  0021  3000               	movlw	high __pbssBANK1
   504  0022  0085               	movwf	5
   505  0023  3020               	movlw	32
   506  0024  240A               	fcall	clear_ram0
   507                           
   508                           ; Initialize objects allocated to BANK0
   509  0025  30C3               	movlw	low __pidataBANK0
   510  0026  0084               	movwf	4
   511  0027  3083               	movlw	(high __pidataBANK0)| (0+128)
   512  0028  0085               	movwf	5
   513  0029  3020               	movlw	low __pdataBANK0
   514  002A  0086               	movwf	6
   515  002B  3000               	movlw	high __pdataBANK0
   516  002C  0087               	movwf	7
   517  002D  3021               	movlw	33
   518  002E  2410               	fcall	init_ram
   519  002F                     end_of_initialization:	
   520                           ;End of C runtime variable initialization code
   521                           
   522  002F                     __end_of__initialization:	
   523  002F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   524  0030  0020               	movlb	0
   525  0031  2A51               	ljmp	_main	;jump to C main() function
   526                           
   527                           	psect	bssCOMMON
   528  0076                     __pbssCOMMON:	
   529  0076                     _UQEnd:	
   530  0076                     	ds	1
   531  0077                     _UQFront:	
   532  0077                     	ds	1
   533                           
   534                           	psect	bssBANK0
   535  0060                     __pbssBANK0:	
   536  0060                     USARTWriteInt@F2501:	
   537  0060                     	ds	5
   538                           
   539                           	psect	dataBANK0
   540  0020                     __pdataBANK0:	
   541  0020                     ___cgram:	
   542  0020                     	ds	8
   543  0028                     LCDWriteInt@F2516:	
   544  0028                     	ds	5
   545  002D                     _srecv:	
   546  002D                     	ds	10
   547  0037                     _ssend:	
   548  0037                     	ds	10
   549                           
   550                           	psect	bssBANK1
   551  00A0                     __pbssBANK1:	
   552  00A0                     _URBuff:	
   553  00A0                     	ds	32
   554                           
   555                           	psect	clrtext
   556  040A                     clear_ram0:	
   557                           ;	Called with FSR0 containing the base address, and
   558                           ;	WREG with the size to clear
   559                           
   560  040A  0064               	clrwdt	;clear the watchdog before getting into this loop
   561  040B                     clrloop0:	
   562  040B  0180               	clrf	0	;clear RAM location pointed to by FSR
   563  040C  3101               	addfsr 0,1
   564  040D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   565  040E  2C0B               	goto	clrloop0	;have we reached the end yet?
   566  040F  3400               	retlw	0	;all done for this memory range, return
   567                           
   568                           	psect	inittext
   569  0410                     init_ram:	
   570  0410  00FE               	movwf	126
   571  0411                     initloop:	
   572  0411  0012               	moviw fsr0++
   573  0412  001E               	movwi fsr1++
   574  0413  0BFE               	decfsz	126,f
   575  0414  2C11               	goto	initloop
   576  0415  3400               	retlw	0
   577                           
   578                           	psect	cstackCOMMON
   579  0070                     __pcstackCOMMON:	
   580  0070                     ?_LCDBusyLoop:	
   581  0070                     ?_USARTHandleRxInt:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0070                     ??_USARTHandleRxInt:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0070                     ?_USARTDataAvailable:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0070                     ?_USARTReadData:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ?_USARTWriteChar:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0070                     ?_LCDInit:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0070                     ?_LCDWriteString:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ?_TriggerOutInit:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ?_InitInputDataInt:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ?_ISR:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0070                     ?_main:	
   612                           ; 1 bytes @ 0x0
   613                           
   614                           
   615                           ; 1 bytes @ 0x0
   616  0070                     	ds	4
   617  0074                     USARTHandleRxInt@data:	
   618                           
   619                           ; 1 bytes @ 0x4
   620  0074                     	ds	1
   621  0075                     ??_ISR:	
   622                           
   623                           ; 1 bytes @ 0x5
   624  0075                     	ds	1
   625  0076                     ??_USARTWriteChar:	
   626  0076                     ??_TriggerOutInit:	
   627                           ; 1 bytes @ 0x6
   628                           
   629  0076                     ??_InitInputDataInt:	
   630                           ; 1 bytes @ 0x6
   631                           
   632                           
   633                           	psect	cstackBANK0
   634  0041                     __pcstackBANK0:	
   635                           ; 1 bytes @ 0x6
   636                           
   637  0041                     ??_LCDBusyLoop:	
   638  0041                     ?_USARTInit:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0041                     ??_USARTDataAvailable:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0041                     ??_USARTReadData:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0041                     ?___awdiv:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0041                     ?___awmod:	
   651                           ; 2 bytes @ 0x0
   652                           
   653  0041                     USARTWriteChar@ch:	
   654                           ; 2 bytes @ 0x0
   655                           
   656  0041                     USARTInit@baud_rate:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0041                     ___awdiv@divisor:	
   660                           ; 2 bytes @ 0x0
   661                           
   662  0041                     ___awmod@divisor:	
   663                           ; 2 bytes @ 0x0
   664                           
   665                           
   666                           ; 2 bytes @ 0x0
   667  0041                     	ds	1
   668  0042                     ?_USARTWriteString:	
   669  0042                     USARTReadData@data:	
   670                           ; 1 bytes @ 0x1
   671                           
   672  0042                     USARTWriteString@str:	
   673                           ; 1 bytes @ 0x1
   674                           
   675                           
   676                           ; 2 bytes @ 0x1
   677  0042                     	ds	1
   678  0043                     ??_USARTInit:	
   679  0043                     LCDBusyLoop@busy:	
   680                           ; 1 bytes @ 0x2
   681                           
   682  0043                     ___awdiv@dividend:	
   683                           ; 1 bytes @ 0x2
   684                           
   685  0043                     ___awmod@dividend:	
   686                           ; 2 bytes @ 0x2
   687                           
   688                           
   689                           ; 2 bytes @ 0x2
   690  0043                     	ds	1
   691  0044                     ??_USARTWriteString:	
   692  0044                     LCDBusyLoop@temp:	
   693                           ; 1 bytes @ 0x3
   694                           
   695                           
   696                           ; 1 bytes @ 0x3
   697  0044                     	ds	1
   698  0045                     ??___awdiv:	
   699  0045                     ??___awmod:	
   700                           ; 1 bytes @ 0x4
   701                           
   702  0045                     LCDBusyLoop@status:	
   703                           ; 1 bytes @ 0x4
   704                           
   705                           
   706                           ; 1 bytes @ 0x4
   707  0045                     	ds	1
   708  0046                     ?_LCDByte:	
   709  0046                     LCDByte@isdata:	
   710                           ; 1 bytes @ 0x5
   711                           
   712  0046                     ___awdiv@counter:	
   713                           ; 1 bytes @ 0x5
   714                           
   715  0046                     ___awmod@counter:	
   716                           ; 1 bytes @ 0x5
   717                           
   718                           
   719                           ; 1 bytes @ 0x5
   720  0046                     	ds	1
   721  0047                     ??_LCDByte:	
   722  0047                     ___awdiv@sign:	
   723                           ; 1 bytes @ 0x6
   724                           
   725  0047                     ___awmod@sign:	
   726                           ; 1 bytes @ 0x6
   727                           
   728                           
   729                           ; 1 bytes @ 0x6
   730  0047                     	ds	1
   731  0048                     ___awdiv@quotient:	
   732                           
   733                           ; 2 bytes @ 0x7
   734  0048                     	ds	1
   735  0049                     LCDByte@hn:	
   736                           
   737                           ; 1 bytes @ 0x8
   738  0049                     	ds	1
   739  004A                     LCDByte@ln:	
   740                           
   741                           ; 1 bytes @ 0x9
   742  004A                     	ds	1
   743  004B                     LCDByte@c:	
   744                           
   745                           ; 1 bytes @ 0xA
   746  004B                     	ds	1
   747  004C                     LCDByte@temp:	
   748                           
   749                           ; 1 bytes @ 0xB
   750  004C                     	ds	1
   751  004D                     ??_LCDInit:	
   752  004D                     ??_LCDWriteString:	
   753                           ; 1 bytes @ 0xC
   754                           
   755  004D                     ?_LCDWriteInt:	
   756                           ; 1 bytes @ 0xC
   757                           
   758  004D                     ?_LCDGotoXY:	
   759                           ; 1 bytes @ 0xC
   760                           
   761  004D                     LCDGotoXY@y:	
   762                           ; 1 bytes @ 0xC
   763                           
   764  004D                     LCDWriteInt@val:	
   765                           ; 1 bytes @ 0xC
   766                           
   767                           
   768                           ; 2 bytes @ 0xC
   769  004D                     	ds	1
   770  004E                     ??_LCDGotoXY:	
   771  004E                     LCDWriteString@cc:	
   772                           ; 1 bytes @ 0xD
   773                           
   774                           
   775                           ; 1 bytes @ 0xD
   776  004E                     	ds	1
   777  004F                     LCDWriteString@msg:	
   778  004F                     LCDWriteInt@field_length:	
   779                           ; 1 bytes @ 0xE
   780                           
   781  004F                     LCDGotoXY@x:	
   782                           ; 1 bytes @ 0xE
   783                           
   784                           
   785                           ; 1 bytes @ 0xE
   786  004F                     	ds	1
   787  0050                     ??_LCDWriteInt:	
   788  0050                     LCDInit@style:	
   789                           ; 1 bytes @ 0xF
   790                           
   791                           
   792                           ; 1 bytes @ 0xF
   793  0050                     	ds	1
   794  0051                     LCDInit@__i:	
   795                           
   796                           ; 1 bytes @ 0x10
   797  0051                     	ds	1
   798  0052                     LCDWriteInt@str:	
   799                           
   800                           ; 5 bytes @ 0x11
   801  0052                     	ds	5
   802  0057                     LCDWriteInt@j:	
   803                           
   804                           ; 2 bytes @ 0x16
   805  0057                     	ds	2
   806  0059                     LCDWriteInt@i:	
   807                           
   808                           ; 2 bytes @ 0x18
   809  0059                     	ds	2
   810  005B                     ??_main:	
   811                           
   812                           ; 1 bytes @ 0x1A
   813  005B                     	ds	3
   814  005E                     main@n:	
   815                           
   816                           ; 1 bytes @ 0x1D
   817  005E                     	ds	1
   818  005F                     main@data:	
   819                           
   820                           ; 1 bytes @ 0x1E
   821  005F                     	ds	1
   822                           
   823                           	psect	maintext
   824  0251                     __pmaintext:	
   825 ;;
   826 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   827 ;;
   828 ;; *************** function _main *****************
   829 ;; Defined at:
   830 ;;		line 74 in file "uart.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;  data            1   30[BANK0 ] unsigned char 
   835 ;;  n               1   29[BANK0 ] unsigned char 
   836 ;; Return value:  Size  Location     Type
   837 ;;                  1    wreg      void 
   838 ;; Registers used:
   839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   840 ;; Tracked objects:
   841 ;;		On entry : B1F/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMMON   BANK0   BANK1
   845 ;;      Params:         0       0       0
   846 ;;      Locals:         0       2       0
   847 ;;      Temps:          0       3       0
   848 ;;      Totals:         0       5       0
   849 ;;Total ram usage:        5 bytes
   850 ;; Hardware stack levels required when called:    5
   851 ;; This function calls:
   852 ;;		_InitInputDataInt
   853 ;;		_LCDByte
   854 ;;		_LCDGotoXY
   855 ;;		_LCDInit
   856 ;;		_LCDWriteInt
   857 ;;		_LCDWriteString
   858 ;;		_TriggerOutInit
   859 ;;		_USARTDataAvailable
   860 ;;		_USARTInit
   861 ;;		_USARTReadData
   862 ;;		_USARTWriteChar
   863 ;;		_USARTWriteString
   864 ;; This function is called by:
   865 ;;		Startup code after reset
   866 ;; This function uses a non-reentrant model
   867 ;;
   868                           
   869                           
   870                           ;psect for function _main
   871  0251                     _main:	
   872                           
   873                           ;uart.c: 77: LCDInit(0B00000000);
   874                           
   875                           ;incstack = 0
   876                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   877  0251  3000               	movlw	0
   878  0252  21B2               	fcall	_LCDInit
   879                           
   880                           ;uart.c: 80: TriggerOutInit();
   881  0253  23F9               	fcall	_TriggerOutInit
   882                           
   883                           ;uart.c: 82: InitInputDataInt();
   884  0254  2416               	fcall	_InitInputDataInt
   885                           
   886                           ;uart.c: 86: USARTInit(9600);
   887  0255  3080               	movlw	128
   888  0256  0020               	movlb	0	; select bank0
   889  0257  00C1               	movwf	USARTInit@baud_rate
   890  0258  3025               	movlw	37
   891  0259  00C2               	movwf	USARTInit@baud_rate+1
   892  025A  2162               	fcall	_USARTInit
   893                           
   894                           ;uart.c: 90: USARTWriteString("ab");
   895  025B  301C               	movlw	low (STR_1| (0+32768))
   896  025C  0020               	movlb	0	; select bank0
   897  025D  00C2               	movwf	USARTWriteString@str
   898  025E  3084               	movlw	high (STR_1| (0+32768))
   899  025F  00C3               	movwf	USARTWriteString@str+1
   900  0260  23E4               	fcall	_USARTWriteString
   901                           
   902                           ;uart.c: 111: (LCDByte(0b00000001,0));
   903  0261  0020               	movlb	0	; select bank0
   904  0262  01C6               	clrf	LCDByte@isdata
   905  0263  3001               	movlw	1
   906  0264  2202               	fcall	_LCDByte
   907                           
   908                           ;uart.c: 113: { LCDGotoXY(0,0); LCDWriteString(ssend);};
   909  0265  0020               	movlb	0	; select bank0
   910  0266  01CD               	clrf	LCDGotoXY@y
   911  0267  3000               	movlw	0
   912  0268  235C               	fcall	_LCDGotoXY
   913  0269  3037               	movlw	(low (_ssend| 0))& (0+255)
   914  026A  2323               	fcall	_LCDWriteString
   915                           
   916                           ;uart.c: 114: { LCDGotoXY(0,1); LCDWriteString(srecv);};
   917  026B  0020               	movlb	0	; select bank0
   918  026C  01CD               	clrf	LCDGotoXY@y
   919  026D  0ACD               	incf	LCDGotoXY@y,f
   920  026E  3000               	movlw	0
   921  026F  235C               	fcall	_LCDGotoXY
   922  0270  302D               	movlw	(low (_srecv| 0))& (0+255)
   923  0271  2323               	fcall	_LCDWriteString
   924                           
   925                           ;uart.c: 115: RA4 = 0;
   926  0272  0020               	movlb	0	; select bank0
   927  0273  120C               	bcf	12,4	;volatile
   928  0274                     l2308:	
   929                           ;uart.c: 120: while(1)
   930                           
   931                           
   932                           ;uart.c: 121: {
   933                           ;uart.c: 123: uint8_t n= USARTDataAvailable();
   934  0274  23A1               	fcall	_USARTDataAvailable
   935  0275  0020               	movlb	0	; select bank0
   936  0276  00DB               	movwf	??_main
   937  0277  085B               	movf	??_main,w
   938  0278  00DE               	movwf	main@n
   939                           
   940                           ;uart.c: 126: if(n!=0)
   941  0279  085E               	movf	main@n,w
   942  027A  1903               	btfsc	3,2
   943  027B  2A74               	goto	l2308
   944                           
   945                           ;uart.c: 127: {
   946                           ;uart.c: 129: char data=USARTReadData();
   947  027C  237F               	fcall	_USARTReadData
   948  027D  0020               	movlb	0	; select bank0
   949  027E  00DB               	movwf	??_main
   950  027F  085B               	movf	??_main,w
   951  0280  00DF               	movwf	main@data
   952                           
   953                           ;uart.c: 132: USARTWriteChar('<');
   954  0281  303C               	movlw	60
   955  0282  2402               	fcall	_USARTWriteChar
   956                           
   957                           ;uart.c: 133: USARTWriteChar(data);
   958  0283  0020               	movlb	0	; select bank0
   959  0284  085F               	movf	main@data,w
   960  0285  2402               	fcall	_USARTWriteChar
   961                           
   962                           ;uart.c: 134: USARTWriteChar('>');
   963  0286  303E               	movlw	62
   964  0287  2402               	fcall	_USARTWriteChar
   965                           
   966                           ;uart.c: 135: (LCDByte(0b00000001,0));
   967  0288  0020               	movlb	0	; select bank0
   968  0289  01C6               	clrf	LCDByte@isdata
   969  028A  3001               	movlw	1
   970  028B  2202               	fcall	_LCDByte
   971                           
   972                           ;uart.c: 136: { LCDGotoXY(0,0); LCDWriteInt(data,3);};
   973  028C  0020               	movlb	0	; select bank0
   974  028D  01CD               	clrf	LCDGotoXY@y
   975  028E  3000               	movlw	0
   976  028F  235C               	fcall	_LCDGotoXY
   977  0290  0020               	movlb	0	; select bank0
   978  0291  085F               	movf	main@data,w
   979  0292  00DB               	movwf	??_main
   980  0293  01DC               	clrf	??_main+1
   981  0294  085B               	movf	??_main,w
   982  0295  00CD               	movwf	LCDWriteInt@val
   983  0296  085C               	movf	??_main+1,w
   984  0297  00CE               	movwf	LCDWriteInt@val+1
   985  0298  3003               	movlw	3
   986  0299  00DD               	movwf	??_main+2
   987  029A  085D               	movf	??_main+2,w
   988  029B  00CF               	movwf	LCDWriteInt@field_length
   989  029C  2032               	fcall	_LCDWriteInt
   990  029D  2A74               	goto	l2308
   991  029E                     __end_of_main:	
   992                           
   993                           	psect	text1
   994  03E4                     __ptext1:	
   995 ;; *************** function _USARTWriteString *****************
   996 ;; Defined at:
   997 ;;		line 114 in file "usart_pic16.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;  str             2    1[BANK0 ] PTR const unsigned char 
  1000 ;;		 -> STR_1(3), 
  1001 ;; Auto vars:     Size  Location     Type
  1002 ;;		None
  1003 ;; Return value:  Size  Location     Type
  1004 ;;                  1    wreg      void 
  1005 ;; Registers used:
  1006 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1007 ;; Tracked objects:
  1008 ;;		On entry : 0/0
  1009 ;;		On exit  : 0/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMMON   BANK0   BANK1
  1012 ;;      Params:         0       2       0
  1013 ;;      Locals:         0       0       0
  1014 ;;      Temps:          0       1       0
  1015 ;;      Totals:         0       3       0
  1016 ;;Total ram usage:        3 bytes
  1017 ;; Hardware stack levels used:    1
  1018 ;; Hardware stack levels required when called:    3
  1019 ;; This function calls:
  1020 ;;		_USARTWriteChar
  1021 ;; This function is called by:
  1022 ;;		_main
  1023 ;;		_USARTWriteLine
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           
  1028                           ;psect for function _USARTWriteString
  1029  03E4                     _USARTWriteString:	
  1030  03E4                     l2238:	
  1031                           ;usart_pic16.c: 116: while(*str!='\0')
  1032                           
  1033                           ;incstack = 0
  1034                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1035                           
  1036  03E4  0020               	movlb	0	; select bank0
  1037  03E5  0842               	movf	USARTWriteString@str,w
  1038  03E6  0084               	movwf	4
  1039  03E7  0843               	movf	USARTWriteString@str+1,w
  1040  03E8  0085               	movwf	5
  1041  03E9  0012               	moviw fsr0++
  1042  03EA  1903               	btfsc	3,2
  1043  03EB  0008               	return
  1044                           
  1045                           ;usart_pic16.c: 117: {
  1046                           ;usart_pic16.c: 118: USARTWriteChar(*str);
  1047  03EC  0020               	movlb	0	; select bank0
  1048  03ED  0842               	movf	USARTWriteString@str,w
  1049  03EE  0084               	movwf	4
  1050  03EF  0843               	movf	USARTWriteString@str+1,w
  1051  03F0  0085               	movwf	5
  1052  03F1  0800               	movf	0,w	;code access
  1053  03F2  2402               	fcall	_USARTWriteChar
  1054                           
  1055                           ;usart_pic16.c: 119: str++;
  1056  03F3  3001               	movlw	1
  1057  03F4  0020               	movlb	0	; select bank0
  1058  03F5  07C2               	addwf	USARTWriteString@str,f
  1059  03F6  3000               	movlw	0
  1060  03F7  3DC3               	addwfc	USARTWriteString@str+1,f
  1061  03F8  2BE4               	goto	l2238
  1062  03F9                     __end_of_USARTWriteString:	
  1063                           
  1064                           	psect	text2
  1065  0402                     __ptext2:	
  1066 ;; *************** function _USARTWriteChar *****************
  1067 ;; Defined at:
  1068 ;;		line 103 in file "usart_pic16.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;  ch              1    wreg     unsigned char 
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;  ch              1    0[BANK0 ] unsigned char 
  1073 ;; Return value:  Size  Location     Type
  1074 ;;                  1    wreg      void 
  1075 ;; Registers used:
  1076 ;;		wreg
  1077 ;; Tracked objects:
  1078 ;;		On entry : 0/0
  1079 ;;		On exit  : 0/0
  1080 ;;		Unchanged: 0/0
  1081 ;; Data sizes:     COMMON   BANK0   BANK1
  1082 ;;      Params:         0       0       0
  1083 ;;      Locals:         0       1       0
  1084 ;;      Temps:          0       0       0
  1085 ;;      Totals:         0       1       0
  1086 ;;Total ram usage:        1 bytes
  1087 ;; Hardware stack levels used:    1
  1088 ;; Hardware stack levels required when called:    2
  1089 ;; This function calls:
  1090 ;;		Nothing
  1091 ;; This function is called by:
  1092 ;;		_main
  1093 ;;		_USARTWriteString
  1094 ;;		_USARTWriteLine
  1095 ;;		_USARTWriteInt
  1096 ;;		_USARTGotoNewLine
  1097 ;; This function uses a non-reentrant model
  1098 ;;
  1099                           
  1100                           
  1101                           ;psect for function _USARTWriteChar
  1102  0402                     _USARTWriteChar:	
  1103                           
  1104                           ;incstack = 0
  1105                           ; Regs used in _USARTWriteChar: [wreg]
  1106                           ;USARTWriteChar@ch stored from wreg
  1107  0402  0020               	movlb	0	; select bank0
  1108  0403  00C1               	movwf	USARTWriteChar@ch
  1109  0404                     l184:	
  1110                           ;usart_pic16.c: 110: while(!TXIF);
  1111                           
  1112  0404  1E11               	btfss	17,4	;volatile
  1113  0405  2C04               	goto	l184
  1114                           
  1115                           ;usart_pic16.c: 111: TXREG = ch;
  1116  0406  0841               	movf	USARTWriteChar@ch,w
  1117  0407  0023               	movlb	3	; select bank3
  1118  0408  009A               	movwf	26	;volatile
  1119  0409  0008               	return
  1120  040A                     __end_of_USARTWriteChar:	
  1121                           
  1122                           	psect	text3
  1123  037F                     __ptext3:	
  1124 ;; *************** function _USARTReadData *****************
  1125 ;; Defined at:
  1126 ;;		line 160 in file "usart_pic16.c"
  1127 ;; Parameters:    Size  Location     Type
  1128 ;;		None
  1129 ;; Auto vars:     Size  Location     Type
  1130 ;;  data            1    1[BANK0 ] unsigned char 
  1131 ;; Return value:  Size  Location     Type
  1132 ;;                  1    wreg      unsigned char 
  1133 ;; Registers used:
  1134 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1135 ;; Tracked objects:
  1136 ;;		On entry : 0/0
  1137 ;;		On exit  : 0/0
  1138 ;;		Unchanged: 0/0
  1139 ;; Data sizes:     COMMON   BANK0   BANK1
  1140 ;;      Params:         0       0       0
  1141 ;;      Locals:         0       1       0
  1142 ;;      Temps:          0       1       0
  1143 ;;      Totals:         0       2       0
  1144 ;;Total ram usage:        2 bytes
  1145 ;; Hardware stack levels used:    1
  1146 ;; Hardware stack levels required when called:    2
  1147 ;; This function calls:
  1148 ;;		Nothing
  1149 ;; This function is called by:
  1150 ;;		_main
  1151 ;;		_USARTReadBuffer
  1152 ;;		_USARTFlushBuffer
  1153 ;; This function uses a non-reentrant model
  1154 ;;
  1155                           
  1156                           
  1157                           ;psect for function _USARTReadData
  1158  037F                     _USARTReadData:	
  1159                           
  1160                           ;usart_pic16.c: 162: char data;
  1161                           ;usart_pic16.c: 165: if(UQFront==-1)
  1162                           
  1163                           ;incstack = 0
  1164                           ; Regs used in _USARTReadData: [wreg+fsr1l+fsr1h+status,2+status,0]
  1165  037F  0A77               	incf	_UQFront,w	;volatile
  1166  0380  1D03               	btfss	3,2
  1167  0381  2B84               	goto	l2272
  1168                           
  1169                           ;usart_pic16.c: 166: return 0;
  1170  0382  3000               	movlw	0
  1171  0383  0008               	return
  1172  0384                     l2272:	
  1173                           
  1174                           ;usart_pic16.c: 168: data=URBuff[UQFront];
  1175  0384  0877               	movf	_UQFront,w
  1176  0385  3EA0               	addlw	(low (_URBuff| 0))& (0+255)
  1177  0386  0086               	movwf	6
  1178  0387  0187               	clrf	7
  1179  0388  0801               	movf	1,w
  1180  0389  0020               	movlb	0	; select bank0
  1181  038A  00C1               	movwf	??_USARTReadData
  1182  038B  0841               	movf	??_USARTReadData,w
  1183  038C  00C2               	movwf	USARTReadData@data
  1184                           
  1185                           ;usart_pic16.c: 170: if(UQFront==UQEnd)
  1186  038D  0877               	movf	_UQFront,w	;volatile
  1187  038E  0676               	xorwf	_UQEnd,w	;volatile
  1188  038F  1D03               	skipz
  1189  0390  2B97               	goto	l2278
  1190                           
  1191                           ;usart_pic16.c: 171: {
  1192                           ;usart_pic16.c: 174: UQFront=UQEnd=-1;
  1193  0391  30FF               	movlw	255
  1194  0392  00F6               	movwf	_UQEnd	;volatile
  1195  0393  00C1               	movwf	??_USARTReadData
  1196  0394  0841               	movf	??_USARTReadData,w
  1197  0395  00F7               	movwf	_UQFront	;volatile
  1198                           
  1199                           ;usart_pic16.c: 175: }
  1200  0396  2B9F               	goto	l2282
  1201  0397                     l2278:	
  1202                           
  1203                           ;usart_pic16.c: 176: else
  1204                           ;usart_pic16.c: 177: {
  1205                           ;usart_pic16.c: 178: UQFront++;
  1206  0397  3001               	movlw	1
  1207  0398  00C1               	movwf	??_USARTReadData
  1208  0399  0841               	movf	??_USARTReadData,w
  1209  039A  07F7               	addwf	_UQFront,f	;volatile
  1210                           
  1211                           ;usart_pic16.c: 180: if(UQFront==32)
  1212  039B  3020               	movlw	32
  1213  039C  0677               	xorwf	_UQFront,w	;volatile
  1214  039D  1903               	btfsc	3,2
  1215                           
  1216                           ;usart_pic16.c: 181: UQFront=0;
  1217  039E  01F7               	clrf	_UQFront	;volatile
  1218  039F                     l2282:	
  1219                           
  1220                           ;usart_pic16.c: 182: }
  1221                           ;usart_pic16.c: 184: return data;
  1222  039F  0842               	movf	USARTReadData@data,w
  1223  03A0  0008               	return
  1224  03A1                     __end_of_USARTReadData:	
  1225                           
  1226                           	psect	text4
  1227  0162                     __ptext4:	
  1228 ;; *************** function _USARTInit *****************
  1229 ;; Defined at:
  1230 ;;		line 31 in file "usart_pic16.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;  baud_rate       2    0[BANK0 ] unsigned int 
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;		None
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  1    wreg      void 
  1237 ;; Registers used:
  1238 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMMON   BANK0   BANK1
  1244 ;;      Params:         0       2       0
  1245 ;;      Locals:         0       0       0
  1246 ;;      Temps:          0       1       0
  1247 ;;      Totals:         0       3       0
  1248 ;;Total ram usage:        3 bytes
  1249 ;; Hardware stack levels used:    1
  1250 ;; Hardware stack levels required when called:    2
  1251 ;; This function calls:
  1252 ;;		Nothing
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           
  1259                           ;psect for function _USARTInit
  1260  0162                     _USARTInit:	
  1261                           
  1262                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
  1263                           
  1264                           ;incstack = 0
  1265                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  1266  0162  30FF               	movlw	255
  1267  0163  00F6               	movwf	_UQEnd	;volatile
  1268  0164  0020               	movlb	0	; select bank0
  1269  0165  00C3               	movwf	??_USARTInit
  1270  0166  0843               	movf	??_USARTInit,w
  1271  0167  00F7               	movwf	_UQFront	;volatile
  1272                           
  1273                           ;usart_pic16.c: 57: OSCCONbits.IRCF = 0b1110;
  1274  0168  0021               	movlb	1	; select bank1
  1275  0169  0819               	movf	25,w	;volatile
  1276  016A  3987               	andlw	-121
  1277  016B  3870               	iorlw	112
  1278  016C  0099               	movwf	25	;volatile
  1279                           
  1280                           ;usart_pic16.c: 60: switch(baud_rate)
  1281  016D  2978               	goto	l2214
  1282  016E                     l2204:	
  1283                           ;usart_pic16.c: 61: {
  1284                           ;usart_pic16.c: 62: case 9600:
  1285                           
  1286                           
  1287                           ;usart_pic16.c: 63: SPBRG=25;
  1288  016E  3019               	movlw	25
  1289  016F  2975               	goto	L3
  1290  0170                     l2206:	
  1291                           ;usart_pic16.c: 65: case 19200:
  1292                           
  1293                           ;usart_pic16.c: 64: break;
  1294                           
  1295                           
  1296                           ;usart_pic16.c: 66: SPBRG=64;
  1297  0170  3040               	movlw	64
  1298  0171  2975               	goto	L3
  1299  0172                     l2208:	
  1300                           ;usart_pic16.c: 68: case 28800:
  1301                           
  1302                           ;usart_pic16.c: 67: break;
  1303                           
  1304                           
  1305                           ;usart_pic16.c: 69: SPBRG=42;
  1306  0172  302A               	movlw	42
  1307  0173  2975               	goto	L3
  1308  0174                     l2210:	
  1309                           ;usart_pic16.c: 71: case 33600:
  1310                           
  1311                           ;usart_pic16.c: 70: break;
  1312                           
  1313                           
  1314                           ;usart_pic16.c: 72: SPBRG=36;
  1315  0174  3024               	movlw	36
  1316  0175                     L3:	
  1317  0175  0023               	movlb	3	; select bank3
  1318  0176  009B               	movwf	27	;volatile
  1319                           
  1320                           ;usart_pic16.c: 74: }
  1321                           
  1322                           ;usart_pic16.c: 73: break;
  1323  0177  299B               	goto	l177
  1324  0178                     l2214:	
  1325                           
  1326                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  1327                           ; Switch size 1, requested type "space"
  1328                           ; Number of cases is 4, Range of values is 37 to 131
  1329                           ; switch strategies available:
  1330                           ; Name         Instructions Cycles
  1331                           ; simple_byte           13     7 (average)
  1332                           ; direct_byte          199     9 (fixed)
  1333                           ; jumptable            263     9 (fixed)
  1334                           ;	Chosen strategy is simple_byte
  1335  0178  0020               	movlb	0	; select bank0
  1336  0179  0842               	movf	USARTInit@baud_rate+1,w
  1337  017A  3A25               	xorlw	37	; case 37
  1338  017B  1903               	skipnz
  1339  017C  2987               	goto	l2478
  1340  017D  3A6E               	xorlw	110	; case 75
  1341  017E  1903               	skipnz
  1342  017F  298C               	goto	l2480
  1343  0180  3A3B               	xorlw	59	; case 112
  1344  0181  1903               	skipnz
  1345  0182  2991               	goto	l2482
  1346  0183  3AF3               	xorlw	243	; case 131
  1347  0184  1903               	skipnz
  1348  0185  2996               	goto	l2484
  1349  0186  299B               	goto	l177
  1350  0187                     l2478:	
  1351                           
  1352                           ; Switch size 1, requested type "space"
  1353                           ; Number of cases is 1, Range of values is 128 to 128
  1354                           ; switch strategies available:
  1355                           ; Name         Instructions Cycles
  1356                           ; simple_byte            4     3 (average)
  1357                           ; direct_byte           11     9 (fixed)
  1358                           ; jumptable            263     9 (fixed)
  1359                           ;	Chosen strategy is simple_byte
  1360  0187  0841               	movf	USARTInit@baud_rate,w
  1361  0188  3A80               	xorlw	128	; case 128
  1362  0189  1903               	skipnz
  1363  018A  296E               	goto	l2204
  1364  018B  299B               	goto	l177
  1365  018C                     l2480:	
  1366                           
  1367                           ; Switch size 1, requested type "space"
  1368                           ; Number of cases is 1, Range of values is 0 to 0
  1369                           ; switch strategies available:
  1370                           ; Name         Instructions Cycles
  1371                           ; simple_byte            4     3 (average)
  1372                           ; direct_byte            8     6 (fixed)
  1373                           ; jumptable            260     6 (fixed)
  1374                           ;	Chosen strategy is simple_byte
  1375  018C  0841               	movf	USARTInit@baud_rate,w
  1376  018D  3A00               	xorlw	0	; case 0
  1377  018E  1903               	skipnz
  1378  018F  2970               	goto	l2206
  1379  0190  299B               	goto	l177
  1380  0191                     l2482:	
  1381                           
  1382                           ; Switch size 1, requested type "space"
  1383                           ; Number of cases is 1, Range of values is 128 to 128
  1384                           ; switch strategies available:
  1385                           ; Name         Instructions Cycles
  1386                           ; simple_byte            4     3 (average)
  1387                           ; direct_byte           11     9 (fixed)
  1388                           ; jumptable            263     9 (fixed)
  1389                           ;	Chosen strategy is simple_byte
  1390  0191  0841               	movf	USARTInit@baud_rate,w
  1391  0192  3A80               	xorlw	128	; case 128
  1392  0193  1903               	skipnz
  1393  0194  2972               	goto	l2208
  1394  0195  299B               	goto	l177
  1395  0196                     l2484:	
  1396                           
  1397                           ; Switch size 1, requested type "space"
  1398                           ; Number of cases is 1, Range of values is 64 to 64
  1399                           ; switch strategies available:
  1400                           ; Name         Instructions Cycles
  1401                           ; simple_byte            4     3 (average)
  1402                           ; direct_byte           11     9 (fixed)
  1403                           ; jumptable            263     9 (fixed)
  1404                           ;	Chosen strategy is simple_byte
  1405  0196  0841               	movf	USARTInit@baud_rate,w
  1406  0197  3A40               	xorlw	64	; case 64
  1407  0198  1903               	skipnz
  1408  0199  2974               	goto	l2210
  1409  019A  299B               	goto	l177
  1410  019B                     l177:	
  1411                           
  1412                           ;usart_pic16.c: 75: BRGH = 1;
  1413  019B  0023               	movlb	3	; select bank3
  1414  019C  151E               	bsf	30,2	;volatile
  1415                           
  1416                           ;usart_pic16.c: 76: BRG16 = 0;
  1417  019D  119F               	bcf	31,3	;volatile
  1418                           
  1419                           ;usart_pic16.c: 78: TRISA0 = 0;
  1420  019E  0021               	movlb	1	; select bank1
  1421  019F  100C               	bcf	12,0	;volatile
  1422                           
  1423                           ;usart_pic16.c: 79: TRISA1 = 1;
  1424  01A0  148C               	bsf	12,1	;volatile
  1425                           
  1426                           ;usart_pic16.c: 81: TXCKSEL = 1;
  1427  01A1  0022               	movlb	2	; select bank2
  1428  01A2  151D               	bsf	29,2	;volatile
  1429                           
  1430                           ;usart_pic16.c: 82: RXDTSEL = 1;
  1431  01A3  179D               	bsf	29,7	;volatile
  1432                           
  1433                           ;usart_pic16.c: 85: TXSTAbits.TX9=0;
  1434  01A4  0023               	movlb	3	; select bank3
  1435  01A5  131E               	bcf	30,6	;volatile
  1436                           
  1437                           ;usart_pic16.c: 86: TXSTAbits.TXEN=1;
  1438  01A6  169E               	bsf	30,5	;volatile
  1439                           
  1440                           ;usart_pic16.c: 87: TXSTAbits.SYNC=0;
  1441  01A7  121E               	bcf	30,4	;volatile
  1442                           
  1443                           ;usart_pic16.c: 88: TXSTAbits.BRGH=1;
  1444  01A8  151E               	bsf	30,2	;volatile
  1445                           
  1446                           ;usart_pic16.c: 91: RCSTAbits.SPEN=1;
  1447  01A9  179D               	bsf	29,7	;volatile
  1448                           
  1449                           ;usart_pic16.c: 92: RCSTAbits.RX9=0;
  1450  01AA  131D               	bcf	29,6	;volatile
  1451                           
  1452                           ;usart_pic16.c: 93: RCSTAbits.CREN=1;
  1453  01AB  161D               	bsf	29,4	;volatile
  1454                           
  1455                           ;usart_pic16.c: 94: RCSTAbits.ADDEN=0;
  1456  01AC  119D               	bcf	29,3	;volatile
  1457                           
  1458                           ;usart_pic16.c: 97: RCIE=1;
  1459  01AD  0021               	movlb	1	; select bank1
  1460  01AE  1691               	bsf	17,5	;volatile
  1461                           
  1462                           ;usart_pic16.c: 98: PEIE=1;
  1463  01AF  170B               	bsf	11,6	;volatile
  1464                           
  1465                           ;usart_pic16.c: 100: (GIE = 1);
  1466  01B0  178B               	bsf	11,7	;volatile
  1467  01B1  0008               	return
  1468  01B2                     __end_of_USARTInit:	
  1469                           
  1470                           	psect	text5
  1471  03A1                     __ptext5:	
  1472 ;; *************** function _USARTDataAvailable *****************
  1473 ;; Defined at:
  1474 ;;		line 187 in file "usart_pic16.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;		None
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;		None
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      unsigned char 
  1481 ;; Registers used:
  1482 ;;		wreg, status,2, status,0
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMMON   BANK0   BANK1
  1488 ;;      Params:         0       0       0
  1489 ;;      Locals:         0       0       0
  1490 ;;      Temps:          0       1       0
  1491 ;;      Totals:         0       1       0
  1492 ;;Total ram usage:        1 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    2
  1495 ;; This function calls:
  1496 ;;		Nothing
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;;		_USARTFlushBuffer
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           
  1504                           ;psect for function _USARTDataAvailable
  1505  03A1                     _USARTDataAvailable:	
  1506                           
  1507                           ;usart_pic16.c: 189: if(UQFront==-1) return 0;
  1508                           
  1509                           ;incstack = 0
  1510                           ; Regs used in _USARTDataAvailable: [wreg+status,2+status,0]
  1511  03A1  0A77               	incf	_UQFront,w	;volatile
  1512  03A2  1D03               	btfss	3,2
  1513  03A3  2BA6               	goto	l2246
  1514  03A4  3000               	movlw	0
  1515  03A5  0008               	return
  1516  03A6                     l2246:	
  1517                           
  1518                           ;usart_pic16.c: 190: if(UQFront<UQEnd)
  1519  03A6  0877               	movf	_UQFront,w	;volatile
  1520  03A7  3A80               	xorlw	128
  1521  03A8  0020               	movlb	0	; select bank0
  1522  03A9  00C1               	movwf	??_USARTDataAvailable
  1523  03AA  0876               	movf	_UQEnd,w	;volatile
  1524  03AB  3A80               	xorlw	128
  1525  03AC  02C1               	subwf	??_USARTDataAvailable,f
  1526  03AD  1803               	skipnc
  1527  03AE  2BB4               	goto	l2254
  1528                           
  1529                           ;usart_pic16.c: 191: return(UQEnd-UQFront+1);
  1530  03AF  0377               	decf	_UQFront,w	;volatile
  1531  03B0  3AFF               	xorlw	255
  1532  03B1  0776               	addwf	_UQEnd,w	;volatile
  1533  03B2  3E01               	addlw	1
  1534  03B3  0008               	return
  1535  03B4                     l2254:	
  1536                           
  1537                           ;usart_pic16.c: 192: else if(UQFront>UQEnd)
  1538  03B4  0876               	movf	_UQEnd,w	;volatile
  1539  03B5  3A80               	xorlw	128
  1540  03B6  00C1               	movwf	??_USARTDataAvailable
  1541  03B7  0877               	movf	_UQFront,w	;volatile
  1542  03B8  3A80               	xorlw	128
  1543  03B9  02C1               	subwf	??_USARTDataAvailable,f
  1544  03BA  1803               	skipnc
  1545  03BB  2BC1               	goto	l2262
  1546                           
  1547                           ;usart_pic16.c: 193: return (32-UQFront+UQEnd+1);
  1548  03BC  0377               	decf	_UQFront,w	;volatile
  1549  03BD  3AFF               	xorlw	255
  1550  03BE  0776               	addwf	_UQEnd,w	;volatile
  1551  03BF  3E21               	addlw	33
  1552  03C0  0008               	return
  1553  03C1                     l2262:	
  1554                           
  1555                           ;usart_pic16.c: 194: else
  1556                           ;usart_pic16.c: 195: return 1;
  1557  03C1  3001               	movlw	1
  1558  03C2  0008               	return
  1559  03C3                     __end_of_USARTDataAvailable:	
  1560                           
  1561                           	psect	text6
  1562  03F9                     __ptext6:	
  1563 ;; *************** function _TriggerOutInit *****************
  1564 ;; Defined at:
  1565 ;;		line 44 in file "uart.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;		None
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;		None
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      void 
  1572 ;; Registers used:
  1573 ;;		None
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMMON   BANK0   BANK1
  1579 ;;      Params:         0       0       0
  1580 ;;      Locals:         0       0       0
  1581 ;;      Temps:          0       0       0
  1582 ;;      Totals:         0       0       0
  1583 ;;Total ram usage:        0 bytes
  1584 ;; Hardware stack levels used:    1
  1585 ;; Hardware stack levels required when called:    2
  1586 ;; This function calls:
  1587 ;;		Nothing
  1588 ;; This function is called by:
  1589 ;;		_main
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           
  1594                           ;psect for function _TriggerOutInit
  1595  03F9                     _TriggerOutInit:	
  1596                           
  1597                           ;uart.c: 46: (TRISAbits.TRISA4 = 0);
  1598                           
  1599                           ;incstack = 0
  1600                           ; Regs used in _TriggerOutInit: []
  1601  03F9  0021               	movlb	1	; select bank1
  1602  03FA  120C               	bcf	12,4	;volatile
  1603                           
  1604                           ;uart.c: 47: ANSELAbits.ANSA4 = 0;
  1605  03FB  0023               	movlb	3	; select bank3
  1606  03FC  120C               	bcf	12,4	;volatile
  1607                           
  1608                           ;uart.c: 49: (TRISAbits.TRISA2 = 1);
  1609  03FD  0021               	movlb	1	; select bank1
  1610  03FE  150C               	bsf	12,2	;volatile
  1611                           
  1612                           ;uart.c: 50: ANSELAbits.ANSA2 = 0;
  1613  03FF  0023               	movlb	3	; select bank3
  1614  0400  110C               	bcf	12,2	;volatile
  1615  0401  0008               	return
  1616  0402                     __end_of_TriggerOutInit:	
  1617                           
  1618                           	psect	text7
  1619  0323                     __ptext7:	
  1620 ;; *************** function _LCDWriteString *****************
  1621 ;; Defined at:
  1622 ;;		line 279 in file "lcd_hd44780_pic16.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;  msg             1    wreg     PTR const unsigned char 
  1625 ;;		 -> srecv(10), ssend(10), 
  1626 ;; Auto vars:     Size  Location     Type
  1627 ;;  msg             1   14[BANK0 ] PTR const unsigned char 
  1628 ;;		 -> srecv(10), ssend(10), 
  1629 ;;  cc              1   13[BANK0 ] char 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMMON   BANK0   BANK1
  1639 ;;      Params:         0       0       0
  1640 ;;      Locals:         0       2       0
  1641 ;;      Temps:          0       1       0
  1642 ;;      Totals:         0       3       0
  1643 ;;Total ram usage:        3 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; Hardware stack levels required when called:    4
  1646 ;; This function calls:
  1647 ;;		_LCDByte
  1648 ;; This function is called by:
  1649 ;;		_main
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           
  1654                           ;psect for function _LCDWriteString
  1655  0323                     _LCDWriteString:	
  1656                           
  1657                           ;incstack = 0
  1658                           ; Regs used in _LCDWriteString: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1659                           ;LCDWriteString@msg stored from wreg
  1660  0323  0020               	movlb	0	; select bank0
  1661  0324  00CF               	movwf	LCDWriteString@msg
  1662  0325                     l2140:	
  1663                           ;lcd_hd44780_pic16.c: 281: while(*msg!='\0')
  1664                           
  1665  0325  084F               	movf	LCDWriteString@msg,w
  1666  0326  0086               	movwf	6
  1667  0327  0187               	clrf	7
  1668  0328  0801               	movf	1,w
  1669  0329  1903               	btfsc	3,2
  1670  032A  0008               	return
  1671                           
  1672                           ;lcd_hd44780_pic16.c: 282: {
  1673                           ;lcd_hd44780_pic16.c: 284: if(*msg=='%')
  1674  032B  084F               	movf	LCDWriteString@msg,w
  1675  032C  0086               	movwf	6
  1676  032D  0187               	clrf	7
  1677  032E  3025               	movlw	37
  1678  032F  0601               	xorwf	1,w
  1679  0330  1D03               	btfss	3,2
  1680  0331  2B4E               	goto	l2136
  1681                           
  1682                           ;lcd_hd44780_pic16.c: 285: {
  1683                           ;lcd_hd44780_pic16.c: 286: msg++;
  1684  0332  3001               	movlw	1
  1685  0333  00CD               	movwf	??_LCDWriteString
  1686  0334  084D               	movf	??_LCDWriteString,w
  1687  0335  07CF               	addwf	LCDWriteString@msg,f
  1688                           
  1689                           ;lcd_hd44780_pic16.c: 287: int8_t cc=*msg-'0';
  1690  0336  084F               	movf	LCDWriteString@msg,w
  1691  0337  0086               	movwf	6
  1692  0338  0187               	clrf	7
  1693  0339  0801               	movf	1,w
  1694  033A  3ED0               	addlw	-48
  1695  033B  00CD               	movwf	??_LCDWriteString
  1696  033C  084D               	movf	??_LCDWriteString,w
  1697  033D  00CE               	movwf	LCDWriteString@cc
  1698                           
  1699                           ;lcd_hd44780_pic16.c: 289: if(cc>=0 && cc<=7)
  1700  033E  1BCE               	btfsc	LCDWriteString@cc,7
  1701  033F  2B49               	goto	l2132
  1702  0340  084E               	movf	LCDWriteString@cc,w
  1703  0341  3A80               	xorlw	128
  1704  0342  3E78               	addlw	-136
  1705  0343  1803               	skipnc
  1706  0344  2B49               	goto	l2132
  1707                           
  1708                           ;lcd_hd44780_pic16.c: 290: {
  1709                           ;lcd_hd44780_pic16.c: 291: (LCDByte(cc,1));
  1710  0345  01C6               	clrf	LCDByte@isdata
  1711  0346  0AC6               	incf	LCDByte@isdata,f
  1712  0347  084E               	movf	LCDWriteString@cc,w
  1713  0348  2B55               	goto	L4
  1714  0349                     l2132:	
  1715                           ;lcd_hd44780_pic16.c: 292: }
  1716                           
  1717                           
  1718                           ;lcd_hd44780_pic16.c: 293: else
  1719                           ;lcd_hd44780_pic16.c: 294: {
  1720                           ;lcd_hd44780_pic16.c: 295: (LCDByte('%',1));
  1721  0349  0020               	movlb	0	; select bank0
  1722  034A  01C6               	clrf	LCDByte@isdata
  1723  034B  0AC6               	incf	LCDByte@isdata,f
  1724  034C  3025               	movlw	37
  1725  034D  2202               	fcall	_LCDByte
  1726  034E                     l2136:	
  1727                           ;lcd_hd44780_pic16.c: 297: }
  1728                           ;lcd_hd44780_pic16.c: 298: }
  1729                           
  1730                           ;lcd_hd44780_pic16.c: 296: (LCDByte(*msg,1));
  1731                           
  1732                           
  1733                           ;lcd_hd44780_pic16.c: 299: else
  1734                           ;lcd_hd44780_pic16.c: 300: {
  1735                           ;lcd_hd44780_pic16.c: 301: (LCDByte(*msg,1));
  1736  034E  0020               	movlb	0	; select bank0
  1737  034F  01C6               	clrf	LCDByte@isdata
  1738  0350  0AC6               	incf	LCDByte@isdata,f
  1739  0351  084F               	movf	LCDWriteString@msg,w
  1740  0352  0086               	movwf	6
  1741  0353  0187               	clrf	7
  1742  0354  0801               	movf	1,w
  1743  0355                     L4:	
  1744  0355  2202               	fcall	_LCDByte
  1745                           
  1746                           ;lcd_hd44780_pic16.c: 302: }
  1747                           ;lcd_hd44780_pic16.c: 303: msg++;
  1748  0356  3001               	movlw	1
  1749  0357  0020               	movlb	0	; select bank0
  1750  0358  00CD               	movwf	??_LCDWriteString
  1751  0359  084D               	movf	??_LCDWriteString,w
  1752  035A  07CF               	addwf	LCDWriteString@msg,f
  1753  035B  2B25               	goto	l2140
  1754  035C                     __end_of_LCDWriteString:	
  1755                           
  1756                           	psect	text8
  1757  0032                     __ptext8:	
  1758 ;; *************** function _LCDWriteInt *****************
  1759 ;; Defined at:
  1760 ;;		line 317 in file "lcd_hd44780_pic16.c"
  1761 ;; Parameters:    Size  Location     Type
  1762 ;;  val             2   12[BANK0 ] int 
  1763 ;;  field_length    1   14[BANK0 ] char 
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;  str             5   17[BANK0 ] unsigned char [5]
  1766 ;;  i               2   24[BANK0 ] int 
  1767 ;;  j               2   22[BANK0 ] int 
  1768 ;; Return value:  Size  Location     Type
  1769 ;;                  1    wreg      void 
  1770 ;; Registers used:
  1771 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1772 ;; Tracked objects:
  1773 ;;		On entry : 0/0
  1774 ;;		On exit  : 0/0
  1775 ;;		Unchanged: 0/0
  1776 ;; Data sizes:     COMMON   BANK0   BANK1
  1777 ;;      Params:         0       3       0
  1778 ;;      Locals:         0       9       0
  1779 ;;      Temps:          0       2       0
  1780 ;;      Totals:         0      14       0
  1781 ;;Total ram usage:       14 bytes
  1782 ;; Hardware stack levels used:    1
  1783 ;; Hardware stack levels required when called:    4
  1784 ;; This function calls:
  1785 ;;		_LCDByte
  1786 ;;		___awdiv
  1787 ;;		___awmod
  1788 ;; This function is called by:
  1789 ;;		_main
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           
  1794                           ;psect for function _LCDWriteInt
  1795  0032                     _LCDWriteInt:	
  1796                           
  1797                           ;lcd_hd44780_pic16.c: 319: char str[5]={-16,-16,-16,-16,-16};
  1798                           
  1799                           ;incstack = 0
  1800                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1801  0032  3028               	movlw	low LCDWriteInt@F2516
  1802  0033  0086               	movwf	6
  1803  0034  3000               	movlw	high LCDWriteInt@F2516
  1804  0035  0087               	movwf	7
  1805  0036  3052               	movlw	low LCDWriteInt@str
  1806  0037  0084               	movwf	4
  1807  0038  3000               	movlw	high LCDWriteInt@str
  1808  0039  0085               	movwf	5
  1809  003A  3005               	movlw	5
  1810  003B  0020               	movlb	0	; select bank0
  1811  003C  00D0               	movwf	??_LCDWriteInt
  1812  003D                     u1750:	
  1813  003D  0016               	moviw fsr1++
  1814  003E  001A               	movwi fsr0++
  1815  003F  0BD0               	decfsz	??_LCDWriteInt,f
  1816  0040  283D               	goto	u1750
  1817                           
  1818                           ;lcd_hd44780_pic16.c: 320: int i=4,j=0;
  1819  0041  3004               	movlw	4
  1820  0042  00D9               	movwf	LCDWriteInt@i
  1821  0043  3000               	movlw	0
  1822  0044  00DA               	movwf	LCDWriteInt@i+1
  1823  0045  01D7               	clrf	LCDWriteInt@j
  1824  0046  01D8               	clrf	LCDWriteInt@j+1
  1825                           
  1826                           ;lcd_hd44780_pic16.c: 322: if(val == 0)
  1827  0047  084D               	movf	LCDWriteInt@val,w
  1828  0048  044E               	iorwf	LCDWriteInt@val+1,w
  1829  0049  1903               	btfsc	3,2
  1830                           
  1831                           ;lcd_hd44780_pic16.c: 323: {
  1832                           ;lcd_hd44780_pic16.c: 324: str[4] = 0;
  1833  004A  01D6               	clrf	LCDWriteInt@str+4
  1834                           
  1835                           ;lcd_hd44780_pic16.c: 325: }
  1836                           ;lcd_hd44780_pic16.c: 327: if(val<0)
  1837  004B  1FCE               	btfss	LCDWriteInt@val+1,7
  1838  004C  2857               	goto	l2164
  1839                           
  1840                           ;lcd_hd44780_pic16.c: 328: {
  1841                           ;lcd_hd44780_pic16.c: 329: (LCDByte('-',1));
  1842  004D  01C6               	clrf	LCDByte@isdata
  1843  004E  0AC6               	incf	LCDByte@isdata,f
  1844  004F  302D               	movlw	45
  1845  0050  2202               	fcall	_LCDByte
  1846                           
  1847                           ;lcd_hd44780_pic16.c: 330: val=val*-1;
  1848  0051  0020               	movlb	0	; select bank0
  1849  0052  09CD               	comf	LCDWriteInt@val,f
  1850  0053  09CE               	comf	LCDWriteInt@val+1,f
  1851  0054  0ACD               	incf	LCDWriteInt@val,f
  1852  0055  1903               	skipnz
  1853  0056  0ACE               	incf	LCDWriteInt@val+1,f
  1854  0057                     l2164:	
  1855                           ;lcd_hd44780_pic16.c: 331: }
  1856                           ;lcd_hd44780_pic16.c: 333: while(val)
  1857                           
  1858  0057  084D               	movf	LCDWriteInt@val,w
  1859  0058  044E               	iorwf	LCDWriteInt@val+1,w
  1860  0059  1903               	btfsc	3,2
  1861  005A  2880               	goto	l2166
  1862                           
  1863                           ;lcd_hd44780_pic16.c: 334: {
  1864                           ;lcd_hd44780_pic16.c: 335: str[i]=val%10;
  1865  005B  300A               	movlw	10
  1866  005C  00C1               	movwf	___awmod@divisor
  1867  005D  3000               	movlw	0
  1868  005E  00C2               	movwf	___awmod@divisor+1
  1869  005F  084E               	movf	LCDWriteInt@val+1,w
  1870  0060  00C4               	movwf	___awmod@dividend+1
  1871  0061  084D               	movf	LCDWriteInt@val,w
  1872  0062  00C3               	movwf	___awmod@dividend
  1873  0063  229E               	fcall	___awmod
  1874  0064  0020               	movlb	0	; select bank0
  1875  0065  0841               	movf	?___awmod,w
  1876  0066  00D0               	movwf	??_LCDWriteInt
  1877  0067  0859               	movf	LCDWriteInt@i,w
  1878  0068  3E52               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  1879  0069  0086               	movwf	6
  1880  006A  0187               	clrf	7
  1881  006B  0850               	movf	??_LCDWriteInt,w
  1882  006C  0081               	movwf	1
  1883                           
  1884                           ;lcd_hd44780_pic16.c: 336: val=val/10;
  1885  006D  300A               	movlw	10
  1886  006E  00C1               	movwf	___awdiv@divisor
  1887  006F  3000               	movlw	0
  1888  0070  00C2               	movwf	___awdiv@divisor+1
  1889  0071  084E               	movf	LCDWriteInt@val+1,w
  1890  0072  00C4               	movwf	___awdiv@dividend+1
  1891  0073  084D               	movf	LCDWriteInt@val,w
  1892  0074  00C3               	movwf	___awdiv@dividend
  1893  0075  2110               	fcall	___awdiv
  1894  0076  0020               	movlb	0	; select bank0
  1895  0077  0842               	movf	?___awdiv+1,w
  1896  0078  00CE               	movwf	LCDWriteInt@val+1
  1897  0079  0841               	movf	?___awdiv,w
  1898  007A  00CD               	movwf	LCDWriteInt@val
  1899                           
  1900                           ;lcd_hd44780_pic16.c: 337: i--;
  1901  007B  30FF               	movlw	255
  1902  007C  07D9               	addwf	LCDWriteInt@i,f
  1903  007D  30FF               	movlw	255
  1904  007E  3DDA               	addwfc	LCDWriteInt@i+1,f
  1905  007F  2857               	goto	l2164
  1906  0080                     l2166:	
  1907                           
  1908                           ;lcd_hd44780_pic16.c: 338: }
  1909                           ;lcd_hd44780_pic16.c: 339: if(field_length==-1)
  1910  0080  0A4F               	incf	LCDWriteInt@field_length,w
  1911  0081  1903               	btfsc	3,2
  1912  0082  2893               	goto	l2174
  1913                           
  1914                           ;lcd_hd44780_pic16.c: 341: else
  1915                           ;lcd_hd44780_pic16.c: 342: j=5-field_length;
  1916                           
  1917                           ;lcd_hd44780_pic16.c: 340: while(str[j]==-16) j++;
  1918  0083  084F               	movf	LCDWriteInt@field_length,w
  1919  0084  00D0               	movwf	??_LCDWriteInt
  1920  0085  01D1               	clrf	??_LCDWriteInt+1
  1921  0086  1BD0               	btfsc	??_LCDWriteInt,7
  1922  0087  03D1               	decf	??_LCDWriteInt+1,f
  1923  0088  09D0               	comf	??_LCDWriteInt,f
  1924  0089  09D1               	comf	??_LCDWriteInt+1,f
  1925  008A  0AD0               	incf	??_LCDWriteInt,f
  1926  008B  1903               	skipnz
  1927  008C  0AD1               	incf	??_LCDWriteInt+1,f
  1928  008D  0850               	movf	??_LCDWriteInt,w
  1929  008E  3E05               	addlw	5
  1930  008F  00D7               	movwf	LCDWriteInt@j
  1931  0090  3000               	movlw	0
  1932  0091  3D51               	addwfc	??_LCDWriteInt+1,w
  1933  0092  00D8               	movwf	LCDWriteInt@j+1
  1934  0093                     l2174:	
  1935                           
  1936                           ;lcd_hd44780_pic16.c: 345: for(i=j;i<5;i++)
  1937  0093  0858               	movf	LCDWriteInt@j+1,w
  1938  0094  00DA               	movwf	LCDWriteInt@i+1
  1939  0095  0857               	movf	LCDWriteInt@j,w
  1940  0096  00D9               	movwf	LCDWriteInt@i
  1941  0097                     L5:	
  1942  0097  085A               	movf	LCDWriteInt@i+1,w
  1943  0098  3A80               	xorlw	128
  1944  0099  00D0               	movwf	??_LCDWriteInt
  1945  009A  3080               	movlw	128
  1946  009B  0250               	subwf	??_LCDWriteInt,w
  1947  009C  1D03               	skipz
  1948  009D  28A0               	goto	u1805
  1949  009E  3005               	movlw	5
  1950  009F  0259               	subwf	LCDWriteInt@i,w
  1951  00A0                     u1805:	
  1952  00A0  1803               	btfsc	3,0
  1953  00A1  0008               	return
  1954                           
  1955                           ;lcd_hd44780_pic16.c: 346: {
  1956                           ;lcd_hd44780_pic16.c: 347: (LCDByte(48+str[i],1));
  1957  00A2  0020               	movlb	0	; select bank0
  1958  00A3  01C6               	clrf	LCDByte@isdata
  1959  00A4  0AC6               	incf	LCDByte@isdata,f
  1960  00A5  0859               	movf	LCDWriteInt@i,w
  1961  00A6  3E52               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  1962  00A7  0086               	movwf	6
  1963  00A8  0187               	clrf	7
  1964  00A9  0801               	movf	1,w
  1965  00AA  3E30               	addlw	48
  1966  00AB  2202               	fcall	_LCDByte
  1967  00AC  3001               	movlw	1
  1968  00AD  0020               	movlb	0	; select bank0
  1969  00AE  07D9               	addwf	LCDWriteInt@i,f
  1970  00AF  3000               	movlw	0
  1971  00B0  3DDA               	addwfc	LCDWriteInt@i+1,f
  1972  00B1  2897               	goto	L5
  1973  00B2                     __end_of_LCDWriteInt:	
  1974                           
  1975                           	psect	text9
  1976  029E                     __ptext9:	
  1977 ;; *************** function ___awmod *****************
  1978 ;; Defined at:
  1979 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;  divisor         2    0[BANK0 ] int 
  1982 ;;  dividend        2    2[BANK0 ] int 
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;  sign            1    6[BANK0 ] unsigned char 
  1985 ;;  counter         1    5[BANK0 ] unsigned char 
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  2    0[BANK0 ] int 
  1988 ;; Registers used:
  1989 ;;		wreg, status,2, status,0
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMMON   BANK0   BANK1
  1995 ;;      Params:         0       4       0
  1996 ;;      Locals:         0       2       0
  1997 ;;      Temps:          0       1       0
  1998 ;;      Totals:         0       7       0
  1999 ;;Total ram usage:        7 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    2
  2002 ;; This function calls:
  2003 ;;		Nothing
  2004 ;; This function is called by:
  2005 ;;		_LCDWriteInt
  2006 ;;		_USARTWriteInt
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           
  2011                           ;psect for function ___awmod
  2012  029E                     ___awmod:	
  2013                           
  2014                           ;incstack = 0
  2015                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2016  029E  0020               	movlb	0	; select bank0
  2017  029F  01C7               	clrf	___awmod@sign
  2018  02A0  1FC4               	btfss	___awmod@dividend+1,7
  2019  02A1  2AA9               	goto	l2042
  2020  02A2  09C3               	comf	___awmod@dividend,f
  2021  02A3  09C4               	comf	___awmod@dividend+1,f
  2022  02A4  0AC3               	incf	___awmod@dividend,f
  2023  02A5  1903               	skipnz
  2024  02A6  0AC4               	incf	___awmod@dividend+1,f
  2025  02A7  01C7               	clrf	___awmod@sign
  2026  02A8  0AC7               	incf	___awmod@sign,f
  2027  02A9                     l2042:	
  2028  02A9  1FC2               	btfss	___awmod@divisor+1,7
  2029  02AA  2AB0               	goto	l2046
  2030  02AB  09C1               	comf	___awmod@divisor,f
  2031  02AC  09C2               	comf	___awmod@divisor+1,f
  2032  02AD  0AC1               	incf	___awmod@divisor,f
  2033  02AE  1903               	skipnz
  2034  02AF  0AC2               	incf	___awmod@divisor+1,f
  2035  02B0                     l2046:	
  2036  02B0  0841               	movf	___awmod@divisor,w
  2037  02B1  0442               	iorwf	___awmod@divisor+1,w
  2038  02B2  1903               	btfsc	3,2
  2039  02B3  2AD7               	goto	l2064
  2040  02B4  01C6               	clrf	___awmod@counter
  2041  02B5  0AC6               	incf	___awmod@counter,f
  2042  02B6                     l2054:	
  2043  02B6  1BC2               	btfsc	___awmod@divisor+1,7
  2044  02B7  2AC2               	goto	l2056
  2045  02B8  3001               	movlw	1
  2046  02B9                     u1635:	
  2047  02B9  35C1               	lslf	___awmod@divisor,f
  2048  02BA  0DC2               	rlf	___awmod@divisor+1,f
  2049  02BB  0B89               	decfsz	9,f
  2050  02BC  2AB9               	goto	u1635
  2051  02BD  3001               	movlw	1
  2052  02BE  00C5               	movwf	??___awmod
  2053  02BF  0845               	movf	??___awmod,w
  2054  02C0  07C6               	addwf	___awmod@counter,f
  2055  02C1  2AB6               	goto	l2054
  2056  02C2                     l2056:	
  2057  02C2  0842               	movf	___awmod@divisor+1,w
  2058  02C3  0244               	subwf	___awmod@dividend+1,w
  2059  02C4  1D03               	skipz
  2060  02C5  2AC8               	goto	u1655
  2061  02C6  0841               	movf	___awmod@divisor,w
  2062  02C7  0243               	subwf	___awmod@dividend,w
  2063  02C8                     u1655:	
  2064  02C8  1C03               	skipc
  2065  02C9  2ACE               	goto	l2060
  2066  02CA  0841               	movf	___awmod@divisor,w
  2067  02CB  02C3               	subwf	___awmod@dividend,f
  2068  02CC  0842               	movf	___awmod@divisor+1,w
  2069  02CD  3BC4               	subwfb	___awmod@dividend+1,f
  2070  02CE                     l2060:	
  2071  02CE  3001               	movlw	1
  2072  02CF                     u1665:	
  2073  02CF  36C2               	lsrf	___awmod@divisor+1,f
  2074  02D0  0CC1               	rrf	___awmod@divisor,f
  2075  02D1  0B89               	decfsz	9,f
  2076  02D2  2ACF               	goto	u1665
  2077  02D3  3001               	movlw	1
  2078  02D4  02C6               	subwf	___awmod@counter,f
  2079  02D5  1D03               	btfss	3,2
  2080  02D6  2AC2               	goto	l2056
  2081  02D7                     l2064:	
  2082  02D7  0847               	movf	___awmod@sign,w
  2083  02D8  1903               	btfsc	3,2
  2084  02D9  2ADF               	goto	l2068
  2085  02DA  09C3               	comf	___awmod@dividend,f
  2086  02DB  09C4               	comf	___awmod@dividend+1,f
  2087  02DC  0AC3               	incf	___awmod@dividend,f
  2088  02DD  1903               	skipnz
  2089  02DE  0AC4               	incf	___awmod@dividend+1,f
  2090  02DF                     l2068:	
  2091  02DF  0844               	movf	___awmod@dividend+1,w
  2092  02E0  00C2               	movwf	?___awmod+1
  2093  02E1  0843               	movf	___awmod@dividend,w
  2094  02E2  00C1               	movwf	?___awmod
  2095  02E3  0008               	return
  2096  02E4                     __end_of___awmod:	
  2097                           
  2098                           	psect	text10
  2099  0110                     __ptext10:	
  2100 ;; *************** function ___awdiv *****************
  2101 ;; Defined at:
  2102 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;  divisor         2    0[BANK0 ] int 
  2105 ;;  dividend        2    2[BANK0 ] int 
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;  quotient        2    7[BANK0 ] int 
  2108 ;;  sign            1    6[BANK0 ] unsigned char 
  2109 ;;  counter         1    5[BANK0 ] unsigned char 
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  2    0[BANK0 ] int 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2, status,0
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMMON   BANK0   BANK1
  2119 ;;      Params:         0       4       0
  2120 ;;      Locals:         0       4       0
  2121 ;;      Temps:          0       1       0
  2122 ;;      Totals:         0       9       0
  2123 ;;Total ram usage:        9 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; Hardware stack levels required when called:    2
  2126 ;; This function calls:
  2127 ;;		Nothing
  2128 ;; This function is called by:
  2129 ;;		_LCDWriteInt
  2130 ;;		_USARTWriteInt
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134                           
  2135                           ;psect for function ___awdiv
  2136  0110                     ___awdiv:	
  2137                           
  2138                           ;incstack = 0
  2139                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2140  0110  0020               	movlb	0	; select bank0
  2141  0111  01C7               	clrf	___awdiv@sign
  2142  0112  1FC2               	btfss	___awdiv@divisor+1,7
  2143  0113  291B               	goto	l1998
  2144  0114  09C1               	comf	___awdiv@divisor,f
  2145  0115  09C2               	comf	___awdiv@divisor+1,f
  2146  0116  0AC1               	incf	___awdiv@divisor,f
  2147  0117  1903               	skipnz
  2148  0118  0AC2               	incf	___awdiv@divisor+1,f
  2149  0119  01C7               	clrf	___awdiv@sign
  2150  011A  0AC7               	incf	___awdiv@sign,f
  2151  011B                     l1998:	
  2152  011B  1FC4               	btfss	___awdiv@dividend+1,7
  2153  011C  2926               	goto	l2004
  2154  011D  09C3               	comf	___awdiv@dividend,f
  2155  011E  09C4               	comf	___awdiv@dividend+1,f
  2156  011F  0AC3               	incf	___awdiv@dividend,f
  2157  0120  1903               	skipnz
  2158  0121  0AC4               	incf	___awdiv@dividend+1,f
  2159  0122  3001               	movlw	1
  2160  0123  00C5               	movwf	??___awdiv
  2161  0124  0845               	movf	??___awdiv,w
  2162  0125  06C7               	xorwf	___awdiv@sign,f
  2163  0126                     l2004:	
  2164  0126  01C8               	clrf	___awdiv@quotient
  2165  0127  01C9               	clrf	___awdiv@quotient+1
  2166  0128  0841               	movf	___awdiv@divisor,w
  2167  0129  0442               	iorwf	___awdiv@divisor+1,w
  2168  012A  1903               	btfsc	3,2
  2169  012B  2955               	goto	l2026
  2170  012C  01C6               	clrf	___awdiv@counter
  2171  012D  0AC6               	incf	___awdiv@counter,f
  2172  012E                     l2014:	
  2173  012E  1BC2               	btfsc	___awdiv@divisor+1,7
  2174  012F  293A               	goto	l2016
  2175  0130  3001               	movlw	1
  2176  0131                     u1535:	
  2177  0131  35C1               	lslf	___awdiv@divisor,f
  2178  0132  0DC2               	rlf	___awdiv@divisor+1,f
  2179  0133  0B89               	decfsz	9,f
  2180  0134  2931               	goto	u1535
  2181  0135  3001               	movlw	1
  2182  0136  00C5               	movwf	??___awdiv
  2183  0137  0845               	movf	??___awdiv,w
  2184  0138  07C6               	addwf	___awdiv@counter,f
  2185  0139  292E               	goto	l2014
  2186  013A                     l2016:	
  2187  013A  3001               	movlw	1
  2188  013B                     u1555:	
  2189  013B  35C8               	lslf	___awdiv@quotient,f
  2190  013C  0DC9               	rlf	___awdiv@quotient+1,f
  2191  013D  0B89               	decfsz	9,f
  2192  013E  293B               	goto	u1555
  2193  013F  0842               	movf	___awdiv@divisor+1,w
  2194  0140  0244               	subwf	___awdiv@dividend+1,w
  2195  0141  1D03               	skipz
  2196  0142  2945               	goto	u1565
  2197  0143  0841               	movf	___awdiv@divisor,w
  2198  0144  0243               	subwf	___awdiv@dividend,w
  2199  0145                     u1565:	
  2200  0145  1C03               	skipc
  2201  0146  294C               	goto	l2022
  2202  0147  0841               	movf	___awdiv@divisor,w
  2203  0148  02C3               	subwf	___awdiv@dividend,f
  2204  0149  0842               	movf	___awdiv@divisor+1,w
  2205  014A  3BC4               	subwfb	___awdiv@dividend+1,f
  2206  014B  1448               	bsf	___awdiv@quotient,0
  2207  014C                     l2022:	
  2208  014C  3001               	movlw	1
  2209  014D                     u1575:	
  2210  014D  36C2               	lsrf	___awdiv@divisor+1,f
  2211  014E  0CC1               	rrf	___awdiv@divisor,f
  2212  014F  0B89               	decfsz	9,f
  2213  0150  294D               	goto	u1575
  2214  0151  3001               	movlw	1
  2215  0152  02C6               	subwf	___awdiv@counter,f
  2216  0153  1D03               	btfss	3,2
  2217  0154  293A               	goto	l2016
  2218  0155                     l2026:	
  2219  0155  0847               	movf	___awdiv@sign,w
  2220  0156  1903               	btfsc	3,2
  2221  0157  295D               	goto	l2030
  2222  0158  09C8               	comf	___awdiv@quotient,f
  2223  0159  09C9               	comf	___awdiv@quotient+1,f
  2224  015A  0AC8               	incf	___awdiv@quotient,f
  2225  015B  1903               	skipnz
  2226  015C  0AC9               	incf	___awdiv@quotient+1,f
  2227  015D                     l2030:	
  2228  015D  0849               	movf	___awdiv@quotient+1,w
  2229  015E  00C2               	movwf	?___awdiv+1
  2230  015F  0848               	movf	___awdiv@quotient,w
  2231  0160  00C1               	movwf	?___awdiv
  2232  0161  0008               	return
  2233  0162                     __end_of___awdiv:	
  2234                           
  2235                           	psect	text11
  2236  01B2                     __ptext11:	
  2237 ;; *************** function _LCDInit *****************
  2238 ;; Defined at:
  2239 ;;		line 207 in file "lcd_hd44780_pic16.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  style           1    wreg     unsigned char 
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;  style           1   15[BANK0 ] unsigned char 
  2244 ;;  __i             1   16[BANK0 ] unsigned char 
  2245 ;; Return value:  Size  Location     Type
  2246 ;;                  1    wreg      void 
  2247 ;; Registers used:
  2248 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : 0/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMMON   BANK0   BANK1
  2254 ;;      Params:         0       0       0
  2255 ;;      Locals:         0       2       0
  2256 ;;      Temps:          0       3       0
  2257 ;;      Totals:         0       5       0
  2258 ;;Total ram usage:        5 bytes
  2259 ;; Hardware stack levels used:    1
  2260 ;; Hardware stack levels required when called:    4
  2261 ;; This function calls:
  2262 ;;		_LCDBusyLoop
  2263 ;;		_LCDByte
  2264 ;; This function is called by:
  2265 ;;		_main
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269                           
  2270                           ;psect for function _LCDInit
  2271  01B2                     _LCDInit:	
  2272                           
  2273                           ;incstack = 0
  2274                           ; Regs used in _LCDInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2275                           ;LCDInit@style stored from wreg
  2276  01B2  0020               	movlb	0	; select bank0
  2277  01B3  00D0               	movwf	LCDInit@style
  2278                           
  2279                           ;lcd_hd44780_pic16.c: 209: _delay((unsigned long)((30)*(32000000/4000.0)));
  2280  01B4  3002               	movlw	2
  2281  01B5  00CF               	movwf	??_LCDInit+2
  2282  01B6  3038               	movlw	56
  2283  01B7  00CE               	movwf	??_LCDInit+1
  2284  01B8  30AD               	movlw	173
  2285  01B9  00CD               	movwf	??_LCDInit
  2286  01BA                     u2027:	
  2287  01BA  0BCD               	decfsz	??_LCDInit,f
  2288  01BB  29BA               	goto	u2027
  2289  01BC  0BCE               	decfsz	??_LCDInit+1,f
  2290  01BD  29BA               	goto	u2027
  2291  01BE  0BCF               	decfsz	??_LCDInit+2,f
  2292  01BF  29BA               	goto	u2027
  2293                           
  2294                           ;lcd_hd44780_pic16.c: 212: TRISC&=(~(0x0F<<2));
  2295  01C0  30C3               	movlw	195
  2296  01C1  0020               	movlb	0	; select bank0
  2297  01C2  00CD               	movwf	??_LCDInit
  2298  01C3  084D               	movf	??_LCDInit,w
  2299  01C4  0021               	movlb	1	; select bank1
  2300  01C5  058E               	andwf	14,f	;volatile
  2301                           
  2302                           ;lcd_hd44780_pic16.c: 214: TRISCbits.TRISC1=0;
  2303  01C6  108E               	bcf	14,1	;volatile
  2304                           
  2305                           ;lcd_hd44780_pic16.c: 215: TRISCbits.TRISC0=0;
  2306  01C7  100E               	bcf	14,0	;volatile
  2307                           
  2308                           ;lcd_hd44780_pic16.c: 216: TRISAbits.TRISA5=0;
  2309  01C8  128C               	bcf	12,5	;volatile
  2310                           
  2311                           ;lcd_hd44780_pic16.c: 218: PORTC&=(~(0x0F<<2));
  2312  01C9  30C3               	movlw	195
  2313  01CA  0020               	movlb	0	; select bank0
  2314  01CB  00CD               	movwf	??_LCDInit
  2315  01CC  084D               	movf	??_LCDInit,w
  2316  01CD  058E               	andwf	14,f	;volatile
  2317                           
  2318                           ;lcd_hd44780_pic16.c: 220: (RC1=0);
  2319  01CE  108E               	bcf	14,1	;volatile
  2320                           
  2321                           ;lcd_hd44780_pic16.c: 221: (RA5=0);
  2322  01CF  128C               	bcf	12,5	;volatile
  2323                           
  2324                           ;lcd_hd44780_pic16.c: 222: (RC0=0);
  2325  01D0  100E               	bcf	14,0	;volatile
  2326                           
  2327                           ;lcd_hd44780_pic16.c: 225: _delay((unsigned long)((0.5)*(32000000/4000000.0)));
  2328  01D1  3200               	nop2	;2 cycle nop
  2329  01D2  3200               	nop2	;2 cycle nop
  2330                           
  2331                           ;lcd_hd44780_pic16.c: 227: (RC1=1);
  2332  01D3  0020               	movlb	0	; select bank0
  2333  01D4  148E               	bsf	14,1	;volatile
  2334                           
  2335                           ;lcd_hd44780_pic16.c: 228: PORTC|=((0b00000010)<<2);
  2336  01D5  158E               	bsf	14,3	;volatile
  2337                           
  2338                           ;lcd_hd44780_pic16.c: 229: _delay((unsigned long)((1)*(32000000/4000000.0)));
  2339  01D6  3200               	nop2	;2 cycle nop
  2340  01D7  3200               	nop2	;2 cycle nop
  2341  01D8  3200               	nop2	;2 cycle nop
  2342  01D9  3200               	nop2	;2 cycle nop
  2343                           
  2344                           ;lcd_hd44780_pic16.c: 230: (RC1=0);
  2345  01DA  0020               	movlb	0	; select bank0
  2346  01DB  108E               	bcf	14,1	;volatile
  2347                           
  2348                           ;lcd_hd44780_pic16.c: 231: _delay((unsigned long)((1)*(32000000/4000000.0)));
  2349  01DC  3200               	nop2	;2 cycle nop
  2350  01DD  3200               	nop2	;2 cycle nop
  2351  01DE  3200               	nop2	;2 cycle nop
  2352  01DF  3200               	nop2	;2 cycle nop
  2353                           
  2354                           ;lcd_hd44780_pic16.c: 234: LCDBusyLoop();
  2355  01E0  20B2               	fcall	_LCDBusyLoop
  2356                           
  2357                           ;lcd_hd44780_pic16.c: 239: (LCDByte(0b00101000,0));
  2358  01E1  0020               	movlb	0	; select bank0
  2359  01E2  01C6               	clrf	LCDByte@isdata
  2360  01E3  3028               	movlw	40
  2361  01E4  2202               	fcall	_LCDByte
  2362                           
  2363                           ;lcd_hd44780_pic16.c: 240: (LCDByte(0b00001100|style,0));
  2364  01E5  0020               	movlb	0	; select bank0
  2365  01E6  01C6               	clrf	LCDByte@isdata
  2366  01E7  0850               	movf	LCDInit@style,w
  2367  01E8  380C               	iorlw	12
  2368  01E9  2202               	fcall	_LCDByte
  2369                           
  2370                           ;lcd_hd44780_pic16.c: 243: (LCDByte(0b01000000,0));
  2371  01EA  0020               	movlb	0	; select bank0
  2372  01EB  01C6               	clrf	LCDByte@isdata
  2373  01EC  3040               	movlw	64
  2374  01ED  2202               	fcall	_LCDByte
  2375                           
  2376                           ;lcd_hd44780_pic16.c: 245: uint8_t __i;
  2377                           ;lcd_hd44780_pic16.c: 246: for(__i=0;__i<sizeof(__cgram);__i++)
  2378  01EE  0020               	movlb	0	; select bank0
  2379  01EF  01D1               	clrf	LCDInit@__i
  2380  01F0                     L6:	
  2381  01F0  3008               	movlw	8
  2382  01F1  0251               	subwf	LCDInit@__i,w
  2383  01F2  1803               	btfsc	3,0
  2384  01F3  0008               	return
  2385                           
  2386                           ;lcd_hd44780_pic16.c: 247: (LCDByte(__cgram[__i],1));
  2387  01F4  01C6               	clrf	LCDByte@isdata
  2388  01F5  0AC6               	incf	LCDByte@isdata,f
  2389  01F6  0851               	movf	LCDInit@__i,w
  2390  01F7  3E20               	addlw	(low (___cgram| 0))& (0+255)
  2391  01F8  0086               	movwf	6
  2392  01F9  0187               	clrf	7
  2393  01FA  0801               	movf	1,w
  2394  01FB  2202               	fcall	_LCDByte
  2395  01FC  3001               	movlw	1
  2396  01FD  0020               	movlb	0	; select bank0
  2397  01FE  00CD               	movwf	??_LCDInit
  2398  01FF  084D               	movf	??_LCDInit,w
  2399  0200  07D1               	addwf	LCDInit@__i,f
  2400  0201  29F0               	goto	L6
  2401  0202                     __end_of_LCDInit:	
  2402                           
  2403                           	psect	text12
  2404  035C                     __ptext12:	
  2405 ;; *************** function _LCDGotoXY *****************
  2406 ;; Defined at:
  2407 ;;		line 355 in file "lcd_hd44780_pic16.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;  x               1    wreg     unsigned char 
  2410 ;;  y               1   12[BANK0 ] unsigned char 
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;  x               1   14[BANK0 ] unsigned char 
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  1    wreg      void 
  2415 ;; Registers used:
  2416 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMMON   BANK0   BANK1
  2422 ;;      Params:         0       1       0
  2423 ;;      Locals:         0       1       0
  2424 ;;      Temps:          0       1       0
  2425 ;;      Totals:         0       3       0
  2426 ;;Total ram usage:        3 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; Hardware stack levels required when called:    4
  2429 ;; This function calls:
  2430 ;;		_LCDByte
  2431 ;; This function is called by:
  2432 ;;		_main
  2433 ;; This function uses a non-reentrant model
  2434 ;;
  2435                           
  2436                           
  2437                           ;psect for function _LCDGotoXY
  2438  035C                     _LCDGotoXY:	
  2439                           
  2440                           ;incstack = 0
  2441                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2442                           ;LCDGotoXY@x stored from wreg
  2443  035C  0020               	movlb	0	; select bank0
  2444  035D  00CF               	movwf	LCDGotoXY@x
  2445                           
  2446                           ;lcd_hd44780_pic16.c: 357: if(x>=20) return;
  2447  035E  3014               	movlw	20
  2448  035F  024F               	subwf	LCDGotoXY@x,w
  2449  0360  1803               	btfsc	3,0
  2450  0361  0008               	return
  2451  0362  2B6C               	goto	l2196
  2452  0363                     l70:	
  2453                           ;lcd_hd44780_pic16.c: 365: case 1:
  2454                           
  2455                           ;lcd_hd44780_pic16.c: 364: break;
  2456                           
  2457                           ;lcd_hd44780_pic16.c: 362: {
  2458                           ;lcd_hd44780_pic16.c: 363: case 0:
  2459                           
  2460                           ;lcd_hd44780_pic16.c: 361: switch(y)
  2461                           
  2462                           
  2463                           ;lcd_hd44780_pic16.c: 366: x|=0b01000000;
  2464  0363  174F               	bsf	LCDGotoXY@x,6
  2465                           
  2466                           ;lcd_hd44780_pic16.c: 367: break;
  2467  0364  2B7A               	goto	l69
  2468  0365                     l2190:	
  2469                           ;lcd_hd44780_pic16.c: 368: case 2:
  2470                           
  2471                           
  2472                           ;lcd_hd44780_pic16.c: 369: x+=0x14;
  2473  0365  3014               	movlw	20
  2474  0366  2B68               	goto	L7
  2475  0367                     l2192:	
  2476                           ;lcd_hd44780_pic16.c: 371: case 3:
  2477                           
  2478                           ;lcd_hd44780_pic16.c: 370: break;
  2479                           
  2480                           
  2481                           ;lcd_hd44780_pic16.c: 372: x+=0x54;
  2482  0367  3054               	movlw	84
  2483  0368                     L7:	
  2484  0368  00CE               	movwf	??_LCDGotoXY
  2485  0369  084E               	movf	??_LCDGotoXY,w
  2486  036A  07CF               	addwf	LCDGotoXY@x,f
  2487                           
  2488                           ;lcd_hd44780_pic16.c: 374: }
  2489                           
  2490                           ;lcd_hd44780_pic16.c: 373: break;
  2491  036B  2B7A               	goto	l69
  2492  036C                     l2196:	
  2493  036C  084D               	movf	LCDGotoXY@y,w
  2494                           
  2495                           ; Switch size 1, requested type "space"
  2496                           ; Number of cases is 4, Range of values is 0 to 3
  2497                           ; switch strategies available:
  2498                           ; Name         Instructions Cycles
  2499                           ; simple_byte           13     7 (average)
  2500                           ; direct_byte           14     6 (fixed)
  2501                           ; jumptable            260     6 (fixed)
  2502                           ;	Chosen strategy is simple_byte
  2503  036D  3A00               	xorlw	0	; case 0
  2504  036E  1903               	skipnz
  2505  036F  2B7A               	goto	l69
  2506  0370  3A01               	xorlw	1	; case 1
  2507  0371  1903               	skipnz
  2508  0372  2B63               	goto	l70
  2509  0373  3A03               	xorlw	3	; case 2
  2510  0374  1903               	skipnz
  2511  0375  2B65               	goto	l2190
  2512  0376  3A01               	xorlw	1	; case 3
  2513  0377  1903               	skipnz
  2514  0378  2B67               	goto	l2192
  2515  0379  2B7A               	goto	l69
  2516  037A                     l69:	
  2517                           
  2518                           ;lcd_hd44780_pic16.c: 396: x|=0b10000000;
  2519  037A  17CF               	bsf	LCDGotoXY@x,7
  2520                           
  2521                           ;lcd_hd44780_pic16.c: 397: (LCDByte(x,0));
  2522  037B  01C6               	clrf	LCDByte@isdata
  2523  037C  084F               	movf	LCDGotoXY@x,w
  2524  037D  2202               	fcall	_LCDByte
  2525  037E  0008               	return
  2526  037F                     __end_of_LCDGotoXY:	
  2527                           
  2528                           	psect	text13
  2529  0202                     __ptext13:	
  2530 ;; *************** function _LCDByte *****************
  2531 ;; Defined at:
  2532 ;;		line 80 in file "lcd_hd44780_pic16.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;  c               1    wreg     unsigned char 
  2535 ;;  isdata          1    5[BANK0 ] unsigned char 
  2536 ;; Auto vars:     Size  Location     Type
  2537 ;;  c               1   10[BANK0 ] unsigned char 
  2538 ;;  temp            1   11[BANK0 ] unsigned char 
  2539 ;;  ln              1    9[BANK0 ] unsigned char 
  2540 ;;  hn              1    8[BANK0 ] unsigned char 
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      void 
  2543 ;; Registers used:
  2544 ;;		wreg, status,2, status,0, pclath, cstack
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMMON   BANK0   BANK1
  2550 ;;      Params:         0       1       0
  2551 ;;      Locals:         0       4       0
  2552 ;;      Temps:          0       2       0
  2553 ;;      Totals:         0       7       0
  2554 ;;Total ram usage:        7 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; Hardware stack levels required when called:    3
  2557 ;; This function calls:
  2558 ;;		_LCDBusyLoop
  2559 ;; This function is called by:
  2560 ;;		_LCDInit
  2561 ;;		_LCDWriteString
  2562 ;;		_LCDWriteInt
  2563 ;;		_LCDGotoXY
  2564 ;;		_main
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           
  2569                           ;psect for function _LCDByte
  2570  0202                     _LCDByte:	
  2571                           
  2572                           ;incstack = 0
  2573                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  2574                           ;LCDByte@c stored from wreg
  2575  0202  0020               	movlb	0	; select bank0
  2576  0203  00CB               	movwf	LCDByte@c
  2577                           
  2578                           ;lcd_hd44780_pic16.c: 89: uint8_t hn,ln;
  2579                           ;lcd_hd44780_pic16.c: 90: uint8_t temp;
  2580                           ;lcd_hd44780_pic16.c: 92: hn=c>>4;
  2581  0204  084B               	movf	LCDByte@c,w
  2582  0205  00C7               	movwf	??_LCDByte
  2583  0206  3004               	movlw	4
  2584  0207                     u1455:	
  2585  0207  36C7               	lsrf	??_LCDByte,f
  2586  0208  0B89               	decfsz	9,f
  2587  0209  2A07               	goto	u1455
  2588  020A  0847               	movf	??_LCDByte,w
  2589  020B  00C8               	movwf	??_LCDByte+1
  2590  020C  0848               	movf	??_LCDByte+1,w
  2591  020D  00C9               	movwf	LCDByte@hn
  2592                           
  2593                           ;lcd_hd44780_pic16.c: 93: ln=(c & 0x0F);
  2594  020E  084B               	movf	LCDByte@c,w
  2595  020F  390F               	andlw	15
  2596  0210  00C7               	movwf	??_LCDByte
  2597  0211  0847               	movf	??_LCDByte,w
  2598  0212  00CA               	movwf	LCDByte@ln
  2599                           
  2600                           ;lcd_hd44780_pic16.c: 95: if(isdata==0)
  2601  0213  0846               	movf	LCDByte@isdata,w
  2602  0214  1D03               	btfss	3,2
  2603  0215  2A18               	goto	l23
  2604                           
  2605                           ;lcd_hd44780_pic16.c: 96: (RC0=0);
  2606  0216  100E               	bcf	14,0	;volatile
  2607  0217  2A19               	goto	l24
  2608  0218                     l23:	
  2609                           
  2610                           ;lcd_hd44780_pic16.c: 97: else
  2611                           ;lcd_hd44780_pic16.c: 98: (RC0=1);
  2612  0218  140E               	bsf	14,0	;volatile
  2613  0219                     l24:	
  2614                           
  2615                           ;lcd_hd44780_pic16.c: 100: _delay((unsigned long)((0.5)*(32000000/4000000.0)));
  2616  0219  3200               	nop2	;2 cycle nop
  2617  021A  3200               	nop2	;2 cycle nop
  2618                           
  2619                           ;lcd_hd44780_pic16.c: 102: (RC1=1);
  2620  021B  0020               	movlb	0	; select bank0
  2621  021C  148E               	bsf	14,1	;volatile
  2622                           
  2623                           ;lcd_hd44780_pic16.c: 106: temp=(PORTC & (~(0X0F<<2)))|((hn<<2));
  2624  021D  0849               	movf	LCDByte@hn,w
  2625  021E  00C7               	movwf	??_LCDByte
  2626  021F  3002               	movlw	2
  2627  0220                     u1475:	
  2628  0220  35C7               	lslf	??_LCDByte,f
  2629  0221  0B89               	decfsz	9,f
  2630  0222  2A20               	goto	u1475
  2631  0223  080E               	movf	14,w	;volatile
  2632  0224  39C3               	andlw	195
  2633  0225  0447               	iorwf	??_LCDByte,w
  2634  0226  00C8               	movwf	??_LCDByte+1
  2635  0227  0848               	movf	??_LCDByte+1,w
  2636  0228  00CC               	movwf	LCDByte@temp
  2637                           
  2638                           ;lcd_hd44780_pic16.c: 107: PORTC=temp;
  2639  0229  084C               	movf	LCDByte@temp,w
  2640  022A  008E               	movwf	14	;volatile
  2641                           
  2642                           ;lcd_hd44780_pic16.c: 109: _delay((unsigned long)((1)*(32000000/4000000.0)));
  2643  022B  3200               	nop2	;2 cycle nop
  2644  022C  3200               	nop2	;2 cycle nop
  2645  022D  3200               	nop2	;2 cycle nop
  2646  022E  3200               	nop2	;2 cycle nop
  2647                           
  2648                           ;lcd_hd44780_pic16.c: 113: (RC1=0);
  2649  022F  0020               	movlb	0	; select bank0
  2650  0230  108E               	bcf	14,1	;volatile
  2651                           
  2652                           ;lcd_hd44780_pic16.c: 115: _delay((unsigned long)((1)*(32000000/4000000.0)));
  2653  0231  3200               	nop2	;2 cycle nop
  2654  0232  3200               	nop2	;2 cycle nop
  2655  0233  3200               	nop2	;2 cycle nop
  2656  0234  3200               	nop2	;2 cycle nop
  2657                           
  2658                           ;lcd_hd44780_pic16.c: 118: (RC1=1);
  2659  0235  0020               	movlb	0	; select bank0
  2660  0236  148E               	bsf	14,1	;volatile
  2661                           
  2662                           ;lcd_hd44780_pic16.c: 120: temp=(PORTC & (~(0X0F<<2)))|((ln<<2));
  2663  0237  084A               	movf	LCDByte@ln,w
  2664  0238  00C7               	movwf	??_LCDByte
  2665  0239  3002               	movlw	2
  2666  023A                     u1485:	
  2667  023A  35C7               	lslf	??_LCDByte,f
  2668  023B  0B89               	decfsz	9,f
  2669  023C  2A3A               	goto	u1485
  2670  023D  080E               	movf	14,w	;volatile
  2671  023E  39C3               	andlw	195
  2672  023F  0447               	iorwf	??_LCDByte,w
  2673  0240  00C8               	movwf	??_LCDByte+1
  2674  0241  0848               	movf	??_LCDByte+1,w
  2675  0242  00CC               	movwf	LCDByte@temp
  2676                           
  2677                           ;lcd_hd44780_pic16.c: 122: PORTC=temp;
  2678  0243  084C               	movf	LCDByte@temp,w
  2679  0244  008E               	movwf	14	;volatile
  2680                           
  2681                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((1)*(32000000/4000000.0)));
  2682  0245  3200               	nop2	;2 cycle nop
  2683  0246  3200               	nop2	;2 cycle nop
  2684  0247  3200               	nop2	;2 cycle nop
  2685  0248  3200               	nop2	;2 cycle nop
  2686                           
  2687                           ;lcd_hd44780_pic16.c: 128: (RC1=0);
  2688  0249  0020               	movlb	0	; select bank0
  2689  024A  108E               	bcf	14,1	;volatile
  2690                           
  2691                           ;lcd_hd44780_pic16.c: 130: _delay((unsigned long)((1)*(32000000/4000000.0)));
  2692  024B  3200               	nop2	;2 cycle nop
  2693  024C  3200               	nop2	;2 cycle nop
  2694  024D  3200               	nop2	;2 cycle nop
  2695  024E  3200               	nop2	;2 cycle nop
  2696                           
  2697                           ;lcd_hd44780_pic16.c: 132: LCDBusyLoop();
  2698  024F  20B2               	fcall	_LCDBusyLoop
  2699  0250  0008               	return
  2700  0251                     __end_of_LCDByte:	
  2701                           
  2702                           	psect	text14
  2703  00B2                     __ptext14:	
  2704 ;; *************** function _LCDBusyLoop *****************
  2705 ;; Defined at:
  2706 ;;		line 135 in file "lcd_hd44780_pic16.c"
  2707 ;; Parameters:    Size  Location     Type
  2708 ;;		None
  2709 ;; Auto vars:     Size  Location     Type
  2710 ;;  status          1    4[BANK0 ] unsigned char 
  2711 ;;  temp            1    3[BANK0 ] unsigned char 
  2712 ;;  busy            1    2[BANK0 ] unsigned char 
  2713 ;; Return value:  Size  Location     Type
  2714 ;;                  1    wreg      void 
  2715 ;; Registers used:
  2716 ;;		wreg, status,2, status,0
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMMON   BANK0   BANK1
  2722 ;;      Params:         0       0       0
  2723 ;;      Locals:         0       3       0
  2724 ;;      Temps:          0       2       0
  2725 ;;      Totals:         0       5       0
  2726 ;;Total ram usage:        5 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; Hardware stack levels required when called:    2
  2729 ;; This function calls:
  2730 ;;		Nothing
  2731 ;; This function is called by:
  2732 ;;		_LCDByte
  2733 ;;		_LCDInit
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           
  2738                           ;psect for function _LCDBusyLoop
  2739  00B2                     _LCDBusyLoop:	
  2740                           
  2741                           ;lcd_hd44780_pic16.c: 139: uint8_t busy,status=0x00,temp;
  2742                           
  2743                           ;incstack = 0
  2744                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  2745  00B2  0020               	movlb	0	; select bank0
  2746  00B3  01C5               	clrf	LCDBusyLoop@status
  2747                           
  2748                           ;lcd_hd44780_pic16.c: 142: TRISC|=(0x0f<<2);
  2749  00B4  303C               	movlw	60
  2750  00B5  00C1               	movwf	??_LCDBusyLoop
  2751  00B6  0841               	movf	??_LCDBusyLoop,w
  2752  00B7  0021               	movlb	1	; select bank1
  2753  00B8  048E               	iorwf	14,f	;volatile
  2754                           
  2755                           ;lcd_hd44780_pic16.c: 145: (RA5=1);
  2756  00B9  0020               	movlb	0	; select bank0
  2757  00BA  168C               	bsf	12,5	;volatile
  2758                           
  2759                           ;lcd_hd44780_pic16.c: 146: (RC0=0);
  2760  00BB  100E               	bcf	14,0	;volatile
  2761                           
  2762                           ;lcd_hd44780_pic16.c: 150: _delay((unsigned long)((0.5)*(32000000/4000000.0)));
  2763  00BC  3200               	nop2	;2 cycle nop
  2764  00BD  3200               	nop2	;2 cycle nop
  2765  00BE                     l1926:	
  2766                           ;lcd_hd44780_pic16.c: 153: do
  2767                           
  2768                           
  2769                           ;lcd_hd44780_pic16.c: 154: {
  2770                           ;lcd_hd44780_pic16.c: 156: (RC1=1);
  2771  00BE  0020               	movlb	0	; select bank0
  2772  00BF  148E               	bsf	14,1	;volatile
  2773                           
  2774                           ;lcd_hd44780_pic16.c: 159: _delay((unsigned long)((0.5)*(32000000/4000000.0)));
  2775  00C0  3200               	nop2	;2 cycle nop
  2776  00C1  3200               	nop2	;2 cycle nop
  2777                           
  2778                           ;lcd_hd44780_pic16.c: 161: status=(PORTC>>2);
  2779  00C2  0020               	movlb	0	; select bank0
  2780  00C3  080E               	movf	14,w	;volatile
  2781  00C4  00C1               	movwf	??_LCDBusyLoop
  2782  00C5  3002               	movlw	2
  2783  00C6                     u1415:	
  2784  00C6  36C1               	lsrf	??_LCDBusyLoop,f
  2785  00C7  0B89               	decfsz	9,f
  2786  00C8  28C6               	goto	u1415
  2787  00C9  0841               	movf	??_LCDBusyLoop,w
  2788  00CA  00C2               	movwf	??_LCDBusyLoop+1
  2789  00CB  0842               	movf	??_LCDBusyLoop+1,w
  2790  00CC  00C5               	movwf	LCDBusyLoop@status
  2791                           
  2792                           ;lcd_hd44780_pic16.c: 162: status=status<<4;
  2793  00CD  0845               	movf	LCDBusyLoop@status,w
  2794  00CE  00C1               	movwf	??_LCDBusyLoop
  2795  00CF  3003               	movlw	3
  2796  00D0                     u1425:	
  2797  00D0  35C1               	lslf	??_LCDBusyLoop,f
  2798  00D1  3EFF               	addlw	-1
  2799  00D2  1D03               	skipz
  2800  00D3  28D0               	goto	u1425
  2801  00D4  3541               	lslf	??_LCDBusyLoop,w
  2802  00D5  00C2               	movwf	??_LCDBusyLoop+1
  2803  00D6  0842               	movf	??_LCDBusyLoop+1,w
  2804  00D7  00C5               	movwf	LCDBusyLoop@status
  2805                           
  2806                           ;lcd_hd44780_pic16.c: 164: _delay((unsigned long)((0.5)*(32000000/4000000.0)));
  2807  00D8  3200               	nop2	;2 cycle nop
  2808  00D9  3200               	nop2	;2 cycle nop
  2809                           
  2810                           ;lcd_hd44780_pic16.c: 167: (RC1=0);
  2811  00DA  0020               	movlb	0	; select bank0
  2812  00DB  108E               	bcf	14,1	;volatile
  2813                           
  2814                           ;lcd_hd44780_pic16.c: 168: _delay((unsigned long)((1)*(32000000/4000000.0)));
  2815  00DC  3200               	nop2	;2 cycle nop
  2816  00DD  3200               	nop2	;2 cycle nop
  2817  00DE  3200               	nop2	;2 cycle nop
  2818  00DF  3200               	nop2	;2 cycle nop
  2819                           
  2820                           ;lcd_hd44780_pic16.c: 170: (RC1=1);
  2821  00E0  0020               	movlb	0	; select bank0
  2822  00E1  148E               	bsf	14,1	;volatile
  2823                           
  2824                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((0.5)*(32000000/4000000.0)));
  2825  00E2  3200               	nop2	;2 cycle nop
  2826  00E3  3200               	nop2	;2 cycle nop
  2827                           
  2828                           ;lcd_hd44780_pic16.c: 173: temp=(PORTC>>2);
  2829  00E4  0020               	movlb	0	; select bank0
  2830  00E5  080E               	movf	14,w	;volatile
  2831  00E6  00C1               	movwf	??_LCDBusyLoop
  2832  00E7  3002               	movlw	2
  2833  00E8                     u1435:	
  2834  00E8  36C1               	lsrf	??_LCDBusyLoop,f
  2835  00E9  0B89               	decfsz	9,f
  2836  00EA  28E8               	goto	u1435
  2837  00EB  0841               	movf	??_LCDBusyLoop,w
  2838  00EC  00C2               	movwf	??_LCDBusyLoop+1
  2839  00ED  0842               	movf	??_LCDBusyLoop+1,w
  2840  00EE  00C4               	movwf	LCDBusyLoop@temp
  2841                           
  2842                           ;lcd_hd44780_pic16.c: 174: temp&=0x0F;
  2843  00EF  300F               	movlw	15
  2844  00F0  00C1               	movwf	??_LCDBusyLoop
  2845  00F1  0841               	movf	??_LCDBusyLoop,w
  2846  00F2  05C4               	andwf	LCDBusyLoop@temp,f
  2847                           
  2848                           ;lcd_hd44780_pic16.c: 176: status=status|temp;
  2849  00F3  0845               	movf	LCDBusyLoop@status,w
  2850  00F4  0444               	iorwf	LCDBusyLoop@temp,w
  2851  00F5  00C1               	movwf	??_LCDBusyLoop
  2852  00F6  0841               	movf	??_LCDBusyLoop,w
  2853  00F7  00C5               	movwf	LCDBusyLoop@status
  2854                           
  2855                           ;lcd_hd44780_pic16.c: 178: busy=status & 0b10000000;
  2856  00F8  0845               	movf	LCDBusyLoop@status,w
  2857  00F9  3980               	andlw	128
  2858  00FA  00C1               	movwf	??_LCDBusyLoop
  2859  00FB  0841               	movf	??_LCDBusyLoop,w
  2860  00FC  00C3               	movwf	LCDBusyLoop@busy
  2861                           
  2862                           ;lcd_hd44780_pic16.c: 180: _delay((unsigned long)((0.5)*(32000000/4000000.0)));
  2863  00FD  3200               	nop2	;2 cycle nop
  2864  00FE  3200               	nop2	;2 cycle nop
  2865                           
  2866                           ;lcd_hd44780_pic16.c: 182: (RC1=0);
  2867  00FF  0020               	movlb	0	; select bank0
  2868  0100  108E               	bcf	14,1	;volatile
  2869                           
  2870                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((1)*(32000000/4000000.0)));
  2871  0101  3200               	nop2	;2 cycle nop
  2872  0102  3200               	nop2	;2 cycle nop
  2873  0103  3200               	nop2	;2 cycle nop
  2874  0104  3200               	nop2	;2 cycle nop
  2875                           
  2876                           ;lcd_hd44780_pic16.c: 184: }while(busy);
  2877  0105  0020               	movlb	0	; select bank0
  2878  0106  0843               	movf	LCDBusyLoop@busy,w
  2879  0107  1D03               	btfss	3,2
  2880  0108  28BE               	goto	l1926
  2881                           
  2882                           ;lcd_hd44780_pic16.c: 186: (RA5=0);
  2883  0109  128C               	bcf	12,5	;volatile
  2884                           
  2885                           ;lcd_hd44780_pic16.c: 189: TRISC&=(~(0x0F<<2));
  2886  010A  30C3               	movlw	195
  2887  010B  00C1               	movwf	??_LCDBusyLoop
  2888  010C  0841               	movf	??_LCDBusyLoop,w
  2889  010D  0021               	movlb	1	; select bank1
  2890  010E  058E               	andwf	14,f	;volatile
  2891  010F  0008               	return
  2892  0110                     __end_of_LCDBusyLoop:	
  2893                           
  2894                           	psect	text15
  2895  0416                     __ptext15:	
  2896 ;; *************** function _InitInputDataInt *****************
  2897 ;; Defined at:
  2898 ;;		line 52 in file "uart.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;		None
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;		None
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      void 
  2905 ;; Registers used:
  2906 ;;		None
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMMON   BANK0   BANK1
  2912 ;;      Params:         0       0       0
  2913 ;;      Locals:         0       0       0
  2914 ;;      Temps:          0       0       0
  2915 ;;      Totals:         0       0       0
  2916 ;;Total ram usage:        0 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    2
  2919 ;; This function calls:
  2920 ;;		Nothing
  2921 ;; This function is called by:
  2922 ;;		_main
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           
  2927                           ;psect for function _InitInputDataInt
  2928  0416                     _InitInputDataInt:	
  2929                           
  2930                           ;uart.c: 54: INTCONbits.GIE = 1;
  2931                           
  2932                           ;incstack = 0
  2933                           ; Regs used in _InitInputDataInt: []
  2934  0416  178B               	bsf	11,7	;volatile
  2935                           
  2936                           ;uart.c: 55: INTCONbits.INTE = 1;
  2937  0417  160B               	bsf	11,4	;volatile
  2938                           
  2939                           ;uart.c: 56: INTCONbits.INTF = 0;
  2940  0418  108B               	bcf	11,1	;volatile
  2941                           
  2942                           ;uart.c: 57: OPTION_REGbits.INTEDG = 0;
  2943  0419  0021               	movlb	1	; select bank1
  2944  041A  1315               	bcf	21,6	;volatile
  2945  041B  0008               	return
  2946  041C                     __end_of_InitInputDataInt:	
  2947                           
  2948                           	psect	intentry
  2949  0004                     __pintentry:	
  2950 ;; *************** function _ISR *****************
  2951 ;; Defined at:
  2952 ;;		line 59 in file "uart.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;		None
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;		None
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  1    wreg      void 
  2959 ;; Registers used:
  2960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMMON   BANK0   BANK1
  2966 ;;      Params:         0       0       0
  2967 ;;      Locals:         0       0       0
  2968 ;;      Temps:          1       0       0
  2969 ;;      Totals:         1       0       0
  2970 ;;Total ram usage:        1 bytes
  2971 ;; Hardware stack levels used:    1
  2972 ;; Hardware stack levels required when called:    1
  2973 ;; This function calls:
  2974 ;;		_USARTHandleRxInt
  2975 ;; This function is called by:
  2976 ;;		Interrupt level 1
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980  0004                     _ISR:	
  2981                           
  2982                           ;incstack = 0
  2983                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2984  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2985  0005  3180               	pagesel	$
  2986  0006  0020               	movlb	0	; select bank0
  2987  0007  087F               	movf	127,w
  2988  0008  00F5               	movwf	??_ISR
  2989                           
  2990                           ;uart.c: 61: if(INTCONbits.INTF == 1)
  2991  0009  1C8B               	btfss	11,1	;volatile
  2992  000A  280D               	goto	i1l125
  2993                           
  2994                           ;uart.c: 62: {
  2995                           ;uart.c: 63: RA4 = 1;
  2996  000B  160C               	bsf	12,4	;volatile
  2997                           
  2998                           ;uart.c: 64: INTCONbits.INTF = 0;
  2999  000C  108B               	bcf	11,1	;volatile
  3000  000D                     i1l125:	
  3001                           
  3002                           ;uart.c: 65: }
  3003                           ;uart.c: 66: if (RCIF == 1)
  3004  000D  1E91               	btfss	17,5	;volatile
  3005  000E  2813               	goto	i1l127
  3006                           
  3007                           ;uart.c: 67: {
  3008                           ;uart.c: 68: USARTHandleRxInt();
  3009  000F  22E4               	fcall	_USARTHandleRxInt
  3010                           
  3011                           ;uart.c: 69: RA4 = 1;
  3012  0010  0020               	movlb	0	; select bank0
  3013  0011  160C               	bsf	12,4	;volatile
  3014                           
  3015                           ;uart.c: 71: RCIF = 0;
  3016  0012  1291               	bcf	17,5	;volatile
  3017  0013                     i1l127:	
  3018  0013  0875               	movf	??_ISR,w
  3019  0014  00FF               	movwf	127
  3020  0015  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3021  0016  0009               	retfie
  3022  0017                     __end_of_ISR:	
  3023                           
  3024                           	psect	text17
  3025  02E4                     __ptext17:	
  3026 ;; *************** function _USARTHandleRxInt *****************
  3027 ;; Defined at:
  3028 ;;		line 131 in file "usart_pic16.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  data            1    4[COMMON] unsigned char 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMMON   BANK0   BANK1
  3042 ;;      Params:         0       0       0
  3043 ;;      Locals:         1       0       0
  3044 ;;      Temps:          4       0       0
  3045 ;;      Totals:         5       0       0
  3046 ;;Total ram usage:        5 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_ISR
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           
  3056                           ;psect for function _USARTHandleRxInt
  3057  02E4                     _USARTHandleRxInt:	
  3058                           
  3059                           ;usart_pic16.c: 139: char data=RCREG;
  3060                           
  3061                           ;incstack = 0
  3062                           ; Regs used in _USARTHandleRxInt: [wreg+fsr1l+fsr1h+status,2+status,0]
  3063  02E4  0023               	movlb	3	; select bank3
  3064  02E5  0819               	movf	25,w	;volatile
  3065  02E6  00F0               	movwf	??_USARTHandleRxInt
  3066  02E7  0870               	movf	??_USARTHandleRxInt,w
  3067  02E8  00F4               	movwf	USARTHandleRxInt@data
  3068                           
  3069                           ;usart_pic16.c: 142: if(((UQEnd==32-1) && UQFront==0) || ((UQEnd+1)==UQFront))
  3070  02E9  301F               	movlw	31
  3071  02EA  0676               	xorwf	_UQEnd,w	;volatile
  3072  02EB  1903               	btfsc	3,2
  3073  02EC  0877               	movf	_UQFront,w	;volatile
  3074  02ED  1903               	btfsc	3,2
  3075  02EE  2B04               	goto	i1l1612
  3076  02EF  0877               	movf	_UQFront,w	;volatile
  3077  02F0  00F0               	movwf	??_USARTHandleRxInt
  3078  02F1  01F1               	clrf	??_USARTHandleRxInt+1
  3079  02F2  1BF0               	btfsc	??_USARTHandleRxInt,7
  3080  02F3  03F1               	decf	??_USARTHandleRxInt+1,f
  3081  02F4  3001               	movlw	1
  3082  02F5  0776               	addwf	_UQEnd,w	;volatile
  3083  02F6  00F2               	movwf	??_USARTHandleRxInt+2
  3084  02F7  01F3               	clrf	??_USARTHandleRxInt+3
  3085  02F8  1803               	skipnc
  3086  02F9  0AF3               	incf	??_USARTHandleRxInt+3,f
  3087  02FA  1BF6               	btfsc	_UQEnd,7	;volatile
  3088  02FB  03F3               	decf	??_USARTHandleRxInt+3,f
  3089  02FC  0871               	movf	??_USARTHandleRxInt+1,w
  3090  02FD  0673               	xorwf	??_USARTHandleRxInt+3,w
  3091  02FE  1D03               	skipz
  3092  02FF  2B02               	goto	u116_25
  3093  0300  0870               	movf	??_USARTHandleRxInt,w
  3094  0301  0672               	xorwf	??_USARTHandleRxInt+2,w
  3095  0302                     u116_25:	
  3096  0302  1D03               	skipz
  3097  0303  2B0C               	goto	i1l1616
  3098  0304                     i1l1612:	
  3099                           
  3100                           ;usart_pic16.c: 143: {
  3101                           ;usart_pic16.c: 145: UQFront++;
  3102  0304  3001               	movlw	1
  3103  0305  00F0               	movwf	??_USARTHandleRxInt
  3104  0306  0870               	movf	??_USARTHandleRxInt,w
  3105  0307  07F7               	addwf	_UQFront,f	;volatile
  3106                           
  3107                           ;usart_pic16.c: 146: if(UQFront==32) UQFront=0;
  3108  0308  3020               	movlw	32
  3109  0309  0677               	xorwf	_UQFront,w	;volatile
  3110  030A  1903               	btfsc	3,2
  3111  030B  01F7               	clrf	_UQFront	;volatile
  3112  030C                     i1l1616:	
  3113                           
  3114                           ;usart_pic16.c: 147: }
  3115                           ;usart_pic16.c: 149: if(UQEnd==32-1)
  3116  030C  301F               	movlw	31
  3117  030D  0676               	xorwf	_UQEnd,w	;volatile
  3118  030E  1D03               	btfss	3,2
  3119  030F  2B12               	goto	i1l1620
  3120                           
  3121                           ;usart_pic16.c: 150: UQEnd=0;
  3122  0310  01F6               	clrf	_UQEnd	;volatile
  3123  0311  2B16               	goto	i1l1622
  3124  0312                     i1l1620:	
  3125                           
  3126                           ;usart_pic16.c: 151: else
  3127                           ;usart_pic16.c: 152: UQEnd++;
  3128  0312  3001               	movlw	1
  3129  0313  00F0               	movwf	??_USARTHandleRxInt
  3130  0314  0870               	movf	??_USARTHandleRxInt,w
  3131  0315  07F6               	addwf	_UQEnd,f	;volatile
  3132  0316                     i1l1622:	
  3133                           
  3134                           ;usart_pic16.c: 154: URBuff[UQEnd]=data;
  3135  0316  0874               	movf	USARTHandleRxInt@data,w
  3136  0317  00F0               	movwf	??_USARTHandleRxInt
  3137  0318  0876               	movf	_UQEnd,w
  3138  0319  3EA0               	addlw	(low (_URBuff| 0))& (0+255)
  3139  031A  0086               	movwf	6
  3140  031B  0187               	clrf	7
  3141  031C  0870               	movf	??_USARTHandleRxInt,w
  3142  031D  0081               	movwf	1
  3143                           
  3144                           ;usart_pic16.c: 156: if(UQFront==-1) UQFront=0;
  3145  031E  0A77               	incf	_UQFront,w	;volatile
  3146  031F  1D03               	btfss	3,2
  3147  0320  0008               	return
  3148  0321  01F7               	clrf	_UQFront	;volatile
  3149  0322  0008               	return
  3150  0323                     __end_of_USARTHandleRxInt:	
  3151  007E                     btemp	set	126	;btemp
  3152  007E                     int$flags	set	126
  3153  007E                     wtemp	set	126
  3154  007E                     wtemp0	set	126
  3155  0080                     wtemp1	set	128
  3156  0082                     wtemp2	set	130
  3157  0084                     wtemp3	set	132
  3158  0086                     wtemp4	set	134
  3159  0088                     wtemp5	set	136
  3160  007F                     wtemp6	set	127
  3161  007E                     ttemp	set	126
  3162  007E                     ttemp0	set	126
  3163  0081                     ttemp1	set	129
  3164  0084                     ttemp2	set	132
  3165  0087                     ttemp3	set	135
  3166  007F                     ttemp4	set	127
  3167  007E                     ltemp	set	126
  3168  007E                     ltemp0	set	126
  3169  0082                     ltemp1	set	130
  3170  0086                     ltemp2	set	134
  3171  0080                     ltemp3	set	128


Data Sizes:
    Strings     3
    Constant    0
    Data        33
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       8
    BANK0            80     31      69
    BANK1            32      0      32

Pointer List with Targets:

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    LCDWriteString@msg	PTR const unsigned char  size(1) Largest target is 10
		 -> srecv(BANK0[10]), ssend(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_USARTHandleRxInt

Critical Paths under _main in BANK0

    _main->_LCDWriteInt
    _USARTWriteString->_USARTWriteChar
    _LCDWriteString->_LCDByte
    _LCDWriteInt->_LCDByte
    _LCDInit->_LCDByte
    _LCDGotoXY->_LCDByte
    _LCDByte->_LCDBusyLoop

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    9728
                                             26 BANK0      5     5      0
                   _InitInputDataInt
                            _LCDByte
                          _LCDGotoXY
                            _LCDInit
                        _LCDWriteInt
                     _LCDWriteString
                     _TriggerOutInit
                 _USARTDataAvailable
                          _USARTInit
                      _USARTReadData
                     _USARTWriteChar
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (1) _USARTWriteString                                     3     1      2     226
                                              1 BANK0      3     1      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (2) _USARTWriteChar                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _USARTReadData                                        2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      96
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _USARTDataAvailable                                   1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TriggerOutInit                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     3      0    1567
                                             12 BANK0      3     3      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         14    11      3    3319
                                             12 BANK0     14    11      3
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     693
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     705
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              5     5      0    1556
                                             12 BANK0      5     5      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDGotoXY                                            3     2      1    1550
                                             12 BANK0      3     2      1
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _LCDByte                                              7     6      1    1250
                                              5 BANK0      7     6      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (3) _LCDBusyLoop                                          5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _InitInputDataInt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  1     1      0      23
                                              5 COMMON     1     1      0
                   _USARTHandleRxInt
 ---------------------------------------------------------------------------------
 (5) _USARTHandleRxInt                                     5     5      0      23
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitInputDataInt
   _LCDByte
     _LCDBusyLoop
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _LCDWriteInt
     _LCDByte
       _LCDBusyLoop
     ___awdiv
     ___awmod
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   _TriggerOutInit
   _USARTDataAvailable
   _USARTInit
   _USARTReadData
   _USARTWriteChar
   _USARTWriteString
     _USARTWriteChar

 _ISR (ROOT)
   _USARTHandleRxInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       8       2       57.1%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1F      45       6       86.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0      20       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      6D       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Aug 14 12:35:29 2016

               ?_LCDBusyLoop 0070                   __CFG_CP$ON 0000                           l23 0218  
                         l24 0219                           l70 0363                           l69 037A  
                __CFG_CPD$ON 0000                 ___awdiv@sign 0047           USARTInit@baud_rate 0041  
                __CFG_LVP$ON 0000                          l184 0404                          l177 019B  
       ??_USARTDataAvailable 0041                          _GIE 005F                          _RC0 0070  
                        _RA4 0064                          _RC1 0071                          _RA5 0065  
                        _ISR 0004               ?_USARTReadData 0070                 ___awmod@sign 0047  
               __CFG_BORV$LO 0000                          wreg 0009                 __CFG_IESO$ON 0000  
          ?_InitInputDataInt 0070      LCDWriteInt@field_length 004F              __end_of_LCDByte 0251  
            __end_of_LCDInit 0202                 ?_LCDWriteInt 004D                         ?_ISR 0070  
                LCDByte@temp 004C           ??_InitInputDataInt 0076                         l2004 0126  
                       l2030 015D                         l2022 014C                         l2014 012E  
                       l2016 013A                         l2026 0155                         l2042 02A9  
                       l2210 0174                         l2060 02CE                         l2132 0349  
                       l2140 0325                         l2204 016E                         l2054 02B6  
                       l2046 02B0                         l2206 0170                         l2214 0178  
                       l2056 02C2                         l2064 02D7                         l2136 034E  
                       l2208 0172                         l2068 02DF                         l2164 0057  
                       l2308 0274                         l2190 0365                         l2174 0093  
                       l2166 0080                         l2262 03C1                         l2254 03B4  
                       l2246 03A6                         l2238 03E4                         l2192 0367  
                       l2272 0384                         l2282 039F                         l2196 036C  
                       l2278 0397                         l2480 018C                         l2482 0191  
                       l2484 0196                         l1926 00BE                         l2478 0187  
                       l1998 011B                         STR_1 041C                         _BRGH 0CF2  
                       u2027 01BA                         u1415 00C6                         u1425 00D0  
                       u1435 00E8                         u1455 0207                         u1535 0131  
                       u1475 0220                         u1555 013B                         u1635 02B9  
                       u1485 023A                         u1565 0145                         u1805 00A0  
                       u1750 003D                         u1575 014D                         u1655 02C8  
                       u1665 02CF                         _PEIE 005E                         _RCIE 048D  
                       _RCIF 008D                         _TXIF 008C                 __CFG_WRT$OFF 0000  
     __end_of_USARTWriteChar 040A                __CFG_FCMEN$ON 0000                         _main 0251  
         __size_of_LCDGotoXY 0023                         fsr0h 0005                         fsr1h 0007  
                       fsr0l 0004                         indf0 0000                         indf1 0001  
                       fsr1l 0006                         btemp 007E            USARTReadData@data 0042  
              __CFG_BOREN$ON 0000                         ltemp 007E                         start 0017  
                       ttemp 007E                         wtemp 007E                        ??_ISR 0075  
          ?_USARTHandleRxInt 0070                __CFG_PLLEN$ON 0000                        ?_main 0070  
            __end_of___awdiv 0162           ??_USARTHandleRxInt 0070                        _BRG16 0CFB  
              __CFG_WDTE$OFF 0000              __end_of___awmod 02E4                 LCDInit@style 0050  
           USARTWriteChar@ch 0041              ___awdiv@divisor 0041                        i1l125 000D  
                      i1l127 0013              ___awdiv@counter 0046                        _RCREG 0199  
                      _SPBRG 019B                        _PORTC 000E                        _TRISC 008E  
                      _TXREG 019A                        _UQEnd 0076                        _srecv 002D  
                      _ssend 0037                        main@n 005E                        ltemp0 007E  
                      ltemp1 0082                        ltemp2 0086                        ltemp3 0080  
         __size_of_USARTInit 0050              ?_USARTWriteChar 0070                        ttemp0 007E  
                      ttemp1 0081                        ttemp2 0084                        ttemp3 0087  
                      ttemp4 007F                        status 0003                        wtemp0 007E  
                      wtemp1 0080                        wtemp2 0082                        wtemp3 0084  
                      wtemp4 0086                        wtemp5 0088                        wtemp6 007F  
             __CFG_MCLRE$OFF 0000              __initialization 0018                 __end_of_main 029E  
            ??_USARTReadData 0041                       ??_main 005B            __end_of_LCDGotoXY 037F  
              LCDByte@isdata 0046                    ??_LCDByte 0047                    ??_LCDInit 004D  
           ___awdiv@dividend 0043                       i1l1620 0312                       i1l1612 0304  
                     i1l1622 0316                       i1l1616 030C                       u116_25 0302  
                     _TRISA0 0460                       _TRISA1 0461                       _URBuff 00A0  
             __CFG_PWRTE$OFF 0000               _LCDWriteString 0323                    ??___awdiv 0045  
             __CFG_STVREN$ON 0000                    ??___awmod 0045     __end_of_USARTWriteString 03F9  
       __size_of_LCDBusyLoop 005E             ___awdiv@quotient 0048              ___awmod@divisor 0041  
            ___awmod@counter 0046            __end_of_USARTInit 01B2                 LCDWriteInt@i 0059  
               LCDWriteInt@j 0057             ??_TriggerOutInit 0076         __size_of_LCDWriteInt 0080  
    __end_of__initialization 002F       __end_of_LCDWriteString 035C                    LCDByte@hn 0049  
                  LCDByte@ln 004A               __pcstackCOMMON 0070                 __pidataBANK0 03C3  
             _OPTION_REGbits 0095                   __pbssBANK0 0060                   __pbssBANK1 00A0  
            ?_LCDWriteString 0070    __size_of_InitInputDataInt 0006                   __pmaintext 0251  
                 __pintentry 0004  __size_of_USARTDataAvailable 0022                      _LCDByte 0202  
                    _LCDInit 01B2             ??_USARTWriteChar 0076                      _RXDTSEL 08EF  
                    _TXCKSEL 08EA           USARTWriteInt@F2501 0060    __size_of_USARTHandleRxInt 003F  
                    _UQFront 0077                      ___cgram 0020                      ___awdiv 0110  
                    ___awmod 029E                      __ptext1 03E4                      __ptext2 0402  
                    __ptext3 037F                      __ptext4 0162                      __ptext5 03A1  
                    __ptext6 03F9                      __ptext7 0323                      __ptext8 0032  
                    __ptext9 029E                 __size_of_ISR 0013             ___awmod@dividend 0043  
                  _LCDGotoXY 035C                      clrloop0 040B         end_of_initialization 002F  
                    init_ram 0410                      initloop 0411                    _RCSTAbits 019D  
               __pstringtext 041C            ?_USARTWriteString 0042        __end_of_USARTReadData 03A1  
         ??_USARTWriteString 0044            LCDWriteString@msg 004F             __CFG_FOSC$INTOSC 0000  
                  _USARTInit 0162                    _TRISAbits 008C                    _TRISCbits 008E  
                 ?_LCDGotoXY 004D                   LCDInit@__i 0051                    _TXSTAbits 019E  
                 LCDGotoXY@x 004F                   LCDGotoXY@y 004D             _InitInputDataInt 0416  
              ??_LCDBusyLoop 0041          start_initialization 0018                   ?_USARTInit 0041  
                __end_of_ISR 0017                ??_LCDWriteInt 0050             _USARTHandleRxInt 02E4  
           ??_LCDWriteString 004D                  __pdataBANK0 0020          __end_of_LCDBusyLoop 0110  
                   ?_LCDByte 0046                     ?_LCDInit 0070                  __pbssCOMMON 0076  
                   LCDByte@c 004B                    ___latbits 0000                __pcstackBANK0 0041  
                ??_LCDGotoXY 004E             LCDWriteInt@F2516 0028          __end_of_LCDWriteInt 00B2  
    __size_of_TriggerOutInit 0009                     ?___awdiv 0041                     ?___awmod 0041  
 __end_of_USARTDataAvailable 03C3                  ??_USARTInit 0043              LCDBusyLoop@busy 0043  
            LCDBusyLoop@temp 0044                    clear_ram0 040A                  _LCDBusyLoop 00B2  
           LCDWriteString@cc 004E             __size_of_LCDByte 004F     __end_of_InitInputDataInt 041C  
           __size_of_LCDInit 0050                  _LCDWriteInt 0032    __size_of_USARTWriteString 0015  
    __size_of_USARTWriteChar 0008     __end_of_USARTHandleRxInt 0323             __size_of___awdiv 0052  
           __size_of___awmod 0046            LCDBusyLoop@status 0045                   _ANSELAbits 018C  
                   __ptext10 0110                     __ptext11 01B2                     __ptext12 035C  
                   __ptext13 0202                     __ptext14 00B2                     __ptext15 0416  
                   __ptext17 02E4                __size_of_main 004D       __size_of_USARTReadData 0022  
             _TriggerOutInit 03F9                     int$flags 007E                     main@data 005F  
                 _INTCONbits 000B                     intlevel1 0000               LCDWriteInt@val 004D  
             LCDWriteInt@str 0052       __end_of_TriggerOutInit 0402            __CFG_CLKOUTEN$OFF 0000  
                 _OSCCONbits 0099          USARTWriteString@str 0042                _USARTReadData 037F  
       USARTHandleRxInt@data 0074           _USARTDataAvailable 03A1             _USARTWriteString 03E4  
            ?_TriggerOutInit 0070          ?_USARTDataAvailable 0070               _USARTWriteChar 0402  
    __size_of_LCDWriteString 0039  
